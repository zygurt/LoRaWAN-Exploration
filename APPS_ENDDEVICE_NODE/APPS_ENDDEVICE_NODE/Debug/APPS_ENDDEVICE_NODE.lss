
APPS_ENDDEVICE_NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00017bb4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00017bb4  00017bb4  00027bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a28  20000000  00017bbc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a28  2**0
                  CONTENTS
  4 .bss          00000efc  20000a28  000185e8  00030a28  2**3
                  ALLOC
  5 .stack        00002004  20001924  000194e4  00030a28  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a28  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008ff2f  00000000  00000000  00030adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009ef7  00000000  00000000  000c0a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000abd3  00000000  00000000  000ca902  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e58  00000000  00000000  000d54d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001bb0  00000000  00000000  000d732d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d231  00000000  00000000  000d8edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d9e0  00000000  00000000  0010610e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b15b1  00000000  00000000  00133aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d10  00000000  00000000  001e50a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
*        This function extract the production calibration data information from
*        Temperature log row content and store it variables for temperature calculation
*
*/
static void load_calibration_data(void)
{
       0:	28 39 00 20 ad 6a 00 00 41 6b 00 00 41 6b 00 00     (9. .j..Ak..Ak..
	...
	val2 = *temp_log_row_ptr;

#if SAML21 || SAMR34 || SAMR35 || WLR089U0
	room_temp_val_int = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_INT_Msk) >> FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
      2c:	41 6b 00 00 00 00 00 00 00 00 00 00 41 6b 00 00     Ak..........Ak..
	
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
      3c:	41 6b 00 00 41 6b 00 00 41 6b 00 00 51 20 00 00     Ak..Ak..Ak..Q ..
	
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
      4c:	59 12 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Y...Ak..Ak..Ak..
	
	room_int1v_val = (int8_t)((val1 & FUSES_ROOM_INT1V_VAL_Msk) >> FUSES_ROOM_INT1V_VAL_Pos);
	
	hot_int1v_val = (int8_t)((val2 & FUSES_HOT_INT1V_VAL_Msk) >> FUSES_HOT_INT1V_VAL_Pos);
      5c:	41 6b 00 00 b9 39 00 00 d1 39 00 00 e9 39 00 00     Ak...9...9...9..
	
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
      6c:	01 3a 00 00 19 3a 00 00 31 3a 00 00 41 6b 00 00     .:...:..1:..Ak..
	
	ADCH = (uint16_t)((val2 & FUSES_HOT_ADC_VAL_Msk) >> FUSES_HOT_ADC_VAL_Pos);
      7c:	41 6b 00 00 41 6b 00 00 19 62 00 00 2d 62 00 00     Ak..Ak...b..-b..
#endif	
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
      8c:	41 62 00 00 55 62 00 00 69 62 00 00 c1 0e 00 00     Ab..Ub..ib......
      9c:	41 6b 00 00 41 6b 00 00 41 6b 00 00 41 6b 00 00     Ak..Ak..Ak..Ak..
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
      ac:	41 6b 00 00 00 00 00 00                             Ak......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a28 	.word	0x20000a28
      d4:	00000000 	.word	0x00000000
	
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
      d8:	00017bbc 	.word	0x00017bbc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a2c 	.word	0x20000a2c
     108:	00017bbc 	.word	0x00017bbc
     10c:	00017bbc 	.word	0x00017bbc
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00005da9 	.word	0x00005da9
     190:	20000000 	.word	0x20000000
     194:	0000e3a1 	.word	0x0000e3a1
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_us+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_us+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_us+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000004 	.word	0x20000004
     1cc:	00000115 	.word	0x00000115

000001d0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1d8:	e004      	b.n	1e4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1da:	4b07      	ldr	r3, [pc, #28]	; (1f8 <delay_cycles_ms+0x28>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	0018      	movs	r0, r3
     1e0:	4b06      	ldr	r3, [pc, #24]	; (1fc <delay_cycles_ms+0x2c>)
     1e2:	4798      	blx	r3
	while (n--) {
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	1e5a      	subs	r2, r3, #1
     1e8:	607a      	str	r2, [r7, #4]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d1f5      	bne.n	1da <delay_cycles_ms+0xa>
	}
}
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	20000000 	.word	0x20000000
     1fc:	00000115 	.word	0x00000115

00000200 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     206:	4b10      	ldr	r3, [pc, #64]	; (248 <cpu_irq_enter_critical+0x48>)
     208:	681b      	ldr	r3, [r3, #0]
     20a:	2b00      	cmp	r3, #0
     20c:	d112      	bne.n	234 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     20e:	f3ef 8310 	mrs	r3, PRIMASK
     212:	607b      	str	r3, [r7, #4]
  return(result);
     214:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     216:	2b00      	cmp	r3, #0
     218:	d109      	bne.n	22e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     21a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     21c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     220:	4b0a      	ldr	r3, [pc, #40]	; (24c <cpu_irq_enter_critical+0x4c>)
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     226:	4b0a      	ldr	r3, [pc, #40]	; (250 <cpu_irq_enter_critical+0x50>)
     228:	2201      	movs	r2, #1
     22a:	701a      	strb	r2, [r3, #0]
     22c:	e002      	b.n	234 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     22e:	4b08      	ldr	r3, [pc, #32]	; (250 <cpu_irq_enter_critical+0x50>)
     230:	2200      	movs	r2, #0
     232:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <cpu_irq_enter_critical+0x48>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	1c5a      	adds	r2, r3, #1
     23a:	4b03      	ldr	r3, [pc, #12]	; (248 <cpu_irq_enter_critical+0x48>)
     23c:	601a      	str	r2, [r3, #0]
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	b002      	add	sp, #8
     244:	bd80      	pop	{r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	20000a44 	.word	0x20000a44
     24c:	20000008 	.word	0x20000008
     250:	20000a48 	.word	0x20000a48

00000254 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     254:	b580      	push	{r7, lr}
     256:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     258:	4b0b      	ldr	r3, [pc, #44]	; (288 <cpu_irq_leave_critical+0x34>)
     25a:	681b      	ldr	r3, [r3, #0]
     25c:	1e5a      	subs	r2, r3, #1
     25e:	4b0a      	ldr	r3, [pc, #40]	; (288 <cpu_irq_leave_critical+0x34>)
     260:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     262:	4b09      	ldr	r3, [pc, #36]	; (288 <cpu_irq_leave_critical+0x34>)
     264:	681b      	ldr	r3, [r3, #0]
     266:	2b00      	cmp	r3, #0
     268:	d10a      	bne.n	280 <cpu_irq_leave_critical+0x2c>
     26a:	4b08      	ldr	r3, [pc, #32]	; (28c <cpu_irq_leave_critical+0x38>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	b2db      	uxtb	r3, r3
     270:	2b00      	cmp	r3, #0
     272:	d005      	beq.n	280 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     274:	4b06      	ldr	r3, [pc, #24]	; (290 <cpu_irq_leave_critical+0x3c>)
     276:	2201      	movs	r2, #1
     278:	701a      	strb	r2, [r3, #0]
     27a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     27e:	b662      	cpsie	i
	}
}
     280:	46c0      	nop			; (mov r8, r8)
     282:	46bd      	mov	sp, r7
     284:	bd80      	pop	{r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	20000a44 	.word	0x20000a44
     28c:	20000a48 	.word	0x20000a48
     290:	20000008 	.word	0x20000008

00000294 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     294:	b580      	push	{r7, lr}
     296:	b084      	sub	sp, #16
     298:	af00      	add	r7, sp, #0
     29a:	0002      	movs	r2, r0
     29c:	1dfb      	adds	r3, r7, #7
     29e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     2a0:	230f      	movs	r3, #15
     2a2:	18fb      	adds	r3, r7, r3
     2a4:	1dfa      	adds	r2, r7, #7
     2a6:	7812      	ldrb	r2, [r2, #0]
     2a8:	09d2      	lsrs	r2, r2, #7
     2aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     2ac:	230e      	movs	r3, #14
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	1dfa      	adds	r2, r7, #7
     2b2:	7812      	ldrb	r2, [r2, #0]
     2b4:	0952      	lsrs	r2, r2, #5
     2b6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     2b8:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     2ba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     2bc:	230f      	movs	r3, #15
     2be:	18fb      	adds	r3, r7, r3
     2c0:	781b      	ldrb	r3, [r3, #0]
     2c2:	2b00      	cmp	r3, #0
     2c4:	d10f      	bne.n	2e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     2c6:	230f      	movs	r3, #15
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	009b      	lsls	r3, r3, #2
     2ce:	2210      	movs	r2, #16
     2d0:	4694      	mov	ip, r2
     2d2:	44bc      	add	ip, r7
     2d4:	4463      	add	r3, ip
     2d6:	3b08      	subs	r3, #8
     2d8:	681a      	ldr	r2, [r3, #0]
     2da:	230e      	movs	r3, #14
     2dc:	18fb      	adds	r3, r7, r3
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	01db      	lsls	r3, r3, #7
     2e2:	18d3      	adds	r3, r2, r3
     2e4:	e000      	b.n	2e8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2e6:	2300      	movs	r3, #0
	}
}
     2e8:	0018      	movs	r0, r3
     2ea:	46bd      	mov	sp, r7
     2ec:	b004      	add	sp, #16
     2ee:	bd80      	pop	{r7, pc}
     2f0:	40002800 	.word	0x40002800

000002f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	af00      	add	r7, sp, #0
     2fa:	0002      	movs	r2, r0
     2fc:	1dfb      	adds	r3, r7, #7
     2fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     300:	1dfb      	adds	r3, r7, #7
     302:	781b      	ldrb	r3, [r3, #0]
     304:	0018      	movs	r0, r3
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <port_get_group_from_gpio_pin+0x20>)
     308:	4798      	blx	r3
     30a:	0003      	movs	r3, r0
}
     30c:	0018      	movs	r0, r3
     30e:	46bd      	mov	sp, r7
     310:	b002      	add	sp, #8
     312:	bd80      	pop	{r7, pc}
     314:	00000295 	.word	0x00000295

00000318 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2200      	movs	r2, #0
     324:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2201      	movs	r2, #1
     32a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2200      	movs	r2, #0
     330:	709a      	strb	r2, [r3, #2]
}
     332:	46c0      	nop			; (mov r8, r8)
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
	...

0000033c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     33c:	b580      	push	{r7, lr}
     33e:	b084      	sub	sp, #16
     340:	af00      	add	r7, sp, #0
     342:	0002      	movs	r2, r0
     344:	1dfb      	adds	r3, r7, #7
     346:	701a      	strb	r2, [r3, #0]
     348:	1dbb      	adds	r3, r7, #6
     34a:	1c0a      	adds	r2, r1, #0
     34c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     34e:	1dfb      	adds	r3, r7, #7
     350:	781b      	ldrb	r3, [r3, #0]
     352:	0018      	movs	r0, r3
     354:	4b0d      	ldr	r3, [pc, #52]	; (38c <port_pin_set_output_level+0x50>)
     356:	4798      	blx	r3
     358:	0003      	movs	r3, r0
     35a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     35c:	1dfb      	adds	r3, r7, #7
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	221f      	movs	r2, #31
     362:	4013      	ands	r3, r2
     364:	2201      	movs	r2, #1
     366:	409a      	lsls	r2, r3
     368:	0013      	movs	r3, r2
     36a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     36c:	1dbb      	adds	r3, r7, #6
     36e:	781b      	ldrb	r3, [r3, #0]
     370:	2b00      	cmp	r3, #0
     372:	d003      	beq.n	37c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     374:	68fb      	ldr	r3, [r7, #12]
     376:	68ba      	ldr	r2, [r7, #8]
     378:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     37a:	e002      	b.n	382 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	68ba      	ldr	r2, [r7, #8]
     380:	615a      	str	r2, [r3, #20]
}
     382:	46c0      	nop			; (mov r8, r8)
     384:	46bd      	mov	sp, r7
     386:	b004      	add	sp, #16
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	000002f5 	.word	0x000002f5

00000390 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     390:	b580      	push	{r7, lr}
     392:	b082      	sub	sp, #8
     394:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     396:	1d3b      	adds	r3, r7, #4
     398:	0018      	movs	r0, r3
     39a:	4b20      	ldr	r3, [pc, #128]	; (41c <system_board_init+0x8c>)
     39c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     39e:	1d3b      	adds	r3, r7, #4
     3a0:	2201      	movs	r2, #1
     3a2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     3a4:	1d3b      	adds	r3, r7, #4
     3a6:	0019      	movs	r1, r3
     3a8:	2013      	movs	r0, #19
     3aa:	4b1d      	ldr	r3, [pc, #116]	; (420 <system_board_init+0x90>)
     3ac:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     3ae:	2101      	movs	r1, #1
     3b0:	2013      	movs	r0, #19
     3b2:	4b1c      	ldr	r3, [pc, #112]	; (424 <system_board_init+0x94>)
     3b4:	4798      	blx	r3
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3b6:	1d3b      	adds	r3, r7, #4
     3b8:	2201      	movs	r2, #1
     3ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     3bc:	1d3b      	adds	r3, r7, #4
     3be:	0019      	movs	r1, r3
     3c0:	2012      	movs	r0, #18
     3c2:	4b17      	ldr	r3, [pc, #92]	; (420 <system_board_init+0x90>)
     3c4:	4798      	blx	r3
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
     3c6:	2101      	movs	r1, #1
     3c8:	2012      	movs	r0, #18
     3ca:	4b16      	ldr	r3, [pc, #88]	; (424 <system_board_init+0x94>)
     3cc:	4798      	blx	r3
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3ce:	1d3b      	adds	r3, r7, #4
     3d0:	2201      	movs	r2, #1
     3d2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     3d4:	1d3b      	adds	r3, r7, #4
     3d6:	0019      	movs	r1, r3
     3d8:	200d      	movs	r0, #13
     3da:	4b11      	ldr	r3, [pc, #68]	; (420 <system_board_init+0x90>)
     3dc:	4798      	blx	r3
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
     3de:	2100      	movs	r1, #0
     3e0:	200d      	movs	r0, #13
     3e2:	4b10      	ldr	r3, [pc, #64]	; (424 <system_board_init+0x94>)
     3e4:	4798      	blx	r3
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3e6:	1d3b      	adds	r3, r7, #4
     3e8:	2201      	movs	r2, #1
     3ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     3ec:	1d3b      	adds	r3, r7, #4
     3ee:	0019      	movs	r1, r3
     3f0:	2009      	movs	r0, #9
     3f2:	4b0b      	ldr	r3, [pc, #44]	; (420 <system_board_init+0x90>)
     3f4:	4798      	blx	r3
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
     3f6:	2100      	movs	r1, #0
     3f8:	2009      	movs	r0, #9
     3fa:	4b0a      	ldr	r3, [pc, #40]	; (424 <system_board_init+0x94>)
     3fc:	4798      	blx	r3
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     3fe:	1d3b      	adds	r3, r7, #4
     400:	2200      	movs	r2, #0
     402:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     404:	1d3b      	adds	r3, r7, #4
     406:	2201      	movs	r2, #1
     408:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     40a:	1d3b      	adds	r3, r7, #4
     40c:	0019      	movs	r1, r3
     40e:	201c      	movs	r0, #28
     410:	4b03      	ldr	r3, [pc, #12]	; (420 <system_board_init+0x90>)
     412:	4798      	blx	r3
		
}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46bd      	mov	sp, r7
     418:	b002      	add	sp, #8
     41a:	bd80      	pop	{r7, pc}
     41c:	00000319 	.word	0x00000319
     420:	00001991 	.word	0x00001991
     424:	0000033d 	.word	0x0000033d

00000428 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     430:	687b      	ldr	r3, [r7, #4]
     432:	2200      	movs	r2, #0
     434:	701a      	strb	r2, [r3, #0]
}
     436:	46c0      	nop			; (mov r8, r8)
     438:	46bd      	mov	sp, r7
     43a:	b002      	add	sp, #8
     43c:	bd80      	pop	{r7, pc}
	...

00000440 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     440:	b580      	push	{r7, lr}
     442:	b082      	sub	sp, #8
     444:	af00      	add	r7, sp, #0
     446:	0002      	movs	r2, r0
     448:	6039      	str	r1, [r7, #0]
     44a:	1dfb      	adds	r3, r7, #7
     44c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     44e:	1dfb      	adds	r3, r7, #7
     450:	781b      	ldrb	r3, [r3, #0]
     452:	2b04      	cmp	r3, #4
     454:	d827      	bhi.n	4a6 <system_apb_clock_set_mask+0x66>
     456:	009a      	lsls	r2, r3, #2
     458:	4b16      	ldr	r3, [pc, #88]	; (4b4 <system_apb_clock_set_mask+0x74>)
     45a:	18d3      	adds	r3, r2, r3
     45c:	681b      	ldr	r3, [r3, #0]
     45e:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     460:	4b15      	ldr	r3, [pc, #84]	; (4b8 <system_apb_clock_set_mask+0x78>)
     462:	4a15      	ldr	r2, [pc, #84]	; (4b8 <system_apb_clock_set_mask+0x78>)
     464:	6951      	ldr	r1, [r2, #20]
     466:	683a      	ldr	r2, [r7, #0]
     468:	430a      	orrs	r2, r1
     46a:	615a      	str	r2, [r3, #20]
			break;
     46c:	e01d      	b.n	4aa <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     46e:	4b12      	ldr	r3, [pc, #72]	; (4b8 <system_apb_clock_set_mask+0x78>)
     470:	4a11      	ldr	r2, [pc, #68]	; (4b8 <system_apb_clock_set_mask+0x78>)
     472:	6991      	ldr	r1, [r2, #24]
     474:	683a      	ldr	r2, [r7, #0]
     476:	430a      	orrs	r2, r1
     478:	619a      	str	r2, [r3, #24]
			break;
     47a:	e016      	b.n	4aa <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     47c:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x78>)
     47e:	4a0e      	ldr	r2, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x78>)
     480:	69d1      	ldr	r1, [r2, #28]
     482:	683a      	ldr	r2, [r7, #0]
     484:	430a      	orrs	r2, r1
     486:	61da      	str	r2, [r3, #28]
			break;
     488:	e00f      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     48a:	4b0b      	ldr	r3, [pc, #44]	; (4b8 <system_apb_clock_set_mask+0x78>)
     48c:	4a0a      	ldr	r2, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x78>)
     48e:	6a11      	ldr	r1, [r2, #32]
     490:	683a      	ldr	r2, [r7, #0]
     492:	430a      	orrs	r2, r1
     494:	621a      	str	r2, [r3, #32]
			break;
     496:	e008      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x78>)
     49a:	4a07      	ldr	r2, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x78>)
     49c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     49e:	683a      	ldr	r2, [r7, #0]
     4a0:	430a      	orrs	r2, r1
     4a2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     4a4:	e001      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4a6:	2317      	movs	r3, #23
     4a8:	e000      	b.n	4ac <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     4aa:	2300      	movs	r3, #0
}
     4ac:	0018      	movs	r0, r3
     4ae:	46bd      	mov	sp, r7
     4b0:	b002      	add	sp, #8
     4b2:	bd80      	pop	{r7, pc}
     4b4:	00016348 	.word	0x00016348
     4b8:	40000400 	.word	0x40000400

000004bc <system_pinmux_get_config_defaults>:
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2200      	movs	r2, #0
     4ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	2201      	movs	r2, #1
     4d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	2200      	movs	r2, #0
     4da:	70da      	strb	r2, [r3, #3]
}
     4dc:	46c0      	nop			; (mov r8, r8)
     4de:	46bd      	mov	sp, r7
     4e0:	b002      	add	sp, #8
     4e2:	bd80      	pop	{r7, pc}

000004e4 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	0002      	movs	r2, r0
     4ec:	1dfb      	adds	r3, r7, #7
     4ee:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     4f0:	1dfb      	adds	r3, r7, #7
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	2b00      	cmp	r3, #0
     4f6:	d002      	beq.n	4fe <system_voltage_reference_enable+0x1a>
     4f8:	2b01      	cmp	r3, #1
     4fa:	d007      	beq.n	50c <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     4fc:	e00d      	b.n	51a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     4fe:	4b08      	ldr	r3, [pc, #32]	; (520 <system_voltage_reference_enable+0x3c>)
     500:	4a07      	ldr	r2, [pc, #28]	; (520 <system_voltage_reference_enable+0x3c>)
     502:	69d2      	ldr	r2, [r2, #28]
     504:	2102      	movs	r1, #2
     506:	430a      	orrs	r2, r1
     508:	61da      	str	r2, [r3, #28]
			break;
     50a:	e006      	b.n	51a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     50c:	4b04      	ldr	r3, [pc, #16]	; (520 <system_voltage_reference_enable+0x3c>)
     50e:	4a04      	ldr	r2, [pc, #16]	; (520 <system_voltage_reference_enable+0x3c>)
     510:	69d2      	ldr	r2, [r2, #28]
     512:	2104      	movs	r1, #4
     514:	430a      	orrs	r2, r1
     516:	61da      	str	r2, [r3, #28]
			break;
     518:	46c0      	nop			; (mov r8, r8)
	}
}
     51a:	46bd      	mov	sp, r7
     51c:	b002      	add	sp, #8
     51e:	bd80      	pop	{r7, pc}
     520:	40001400 	.word	0x40001400

00000524 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     524:	b580      	push	{r7, lr}
     526:	b084      	sub	sp, #16
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	681b      	ldr	r3, [r3, #0]
     530:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     532:	68fb      	ldr	r3, [r7, #12]
     534:	8c1b      	ldrh	r3, [r3, #32]
     536:	b29b      	uxth	r3, r3
     538:	2b00      	cmp	r3, #0
     53a:	d001      	beq.n	540 <adc_is_syncing+0x1c>
		return true;
     53c:	2301      	movs	r3, #1
     53e:	e000      	b.n	542 <adc_is_syncing+0x1e>
	}

	return false;
     540:	2300      	movs	r3, #0
}
     542:	0018      	movs	r0, r3
     544:	46bd      	mov	sp, r7
     546:	b004      	add	sp, #16
     548:	bd80      	pop	{r7, pc}
	...

0000054c <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     54c:	b580      	push	{r7, lr}
     54e:	b084      	sub	sp, #16
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     554:	4b0e      	ldr	r3, [pc, #56]	; (590 <_adc_get_inst_index+0x44>)
     556:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     558:	2300      	movs	r3, #0
     55a:	60fb      	str	r3, [r7, #12]
     55c:	e010      	b.n	580 <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     55e:	68fb      	ldr	r3, [r7, #12]
     560:	009b      	lsls	r3, r3, #2
     562:	2210      	movs	r2, #16
     564:	4694      	mov	ip, r2
     566:	44bc      	add	ip, r7
     568:	4463      	add	r3, ip
     56a:	3b08      	subs	r3, #8
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	687b      	ldr	r3, [r7, #4]
     570:	429a      	cmp	r2, r3
     572:	d102      	bne.n	57a <_adc_get_inst_index+0x2e>
			return i;
     574:	68fb      	ldr	r3, [r7, #12]
     576:	b2db      	uxtb	r3, r3
     578:	e006      	b.n	588 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	3301      	adds	r3, #1
     57e:	60fb      	str	r3, [r7, #12]
     580:	68fb      	ldr	r3, [r7, #12]
     582:	2b00      	cmp	r3, #0
     584:	d0eb      	beq.n	55e <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     586:	2300      	movs	r3, #0
}
     588:	0018      	movs	r0, r3
     58a:	46bd      	mov	sp, r7
     58c:	b004      	add	sp, #16
     58e:	bd80      	pop	{r7, pc}
     590:	43000c00 	.word	0x43000c00

00000594 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	2200      	movs	r2, #0
     5a0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2200      	movs	r2, #0
     5a6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2200      	movs	r2, #0
     5b2:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	2200      	movs	r2, #0
     5b8:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	2200      	movs	r2, #0
     5be:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	2200      	movs	r2, #0
     5c4:	61da      	str	r2, [r3, #28]
#if SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	2206      	movs	r2, #6
     5ca:	711a      	strb	r2, [r3, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	22c0      	movs	r2, #192	; 0xc0
     5d0:	0152      	lsls	r2, r2, #5
     5d2:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	2200      	movs	r2, #0
     5d8:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	2200      	movs	r2, #0
     5de:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     5e0:	687b      	ldr	r3, [r7, #4]
     5e2:	2200      	movs	r2, #0
     5e4:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	2200      	movs	r2, #0
     5ea:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	2200      	movs	r2, #0
     5f0:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	222a      	movs	r2, #42	; 0x2a
     5f6:	2100      	movs	r1, #0
     5f8:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	2200      	movs	r2, #0
     5fe:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     600:	687b      	ldr	r3, [r7, #4]
     602:	2200      	movs	r2, #0
     604:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     606:	687b      	ldr	r3, [r7, #4]
     608:	2200      	movs	r2, #0
     60a:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	2200      	movs	r2, #0
     610:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     612:	687b      	ldr	r3, [r7, #4]
     614:	2200      	movs	r2, #0
     616:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2224      	movs	r2, #36	; 0x24
     61c:	2100      	movs	r1, #0
     61e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     620:	687b      	ldr	r3, [r7, #4]
     622:	2200      	movs	r2, #0
     624:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     626:	687b      	ldr	r3, [r7, #4]
     628:	2200      	movs	r2, #0
     62a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	2200      	movs	r2, #0
     630:	755a      	strb	r2, [r3, #21]
}
     632:	46c0      	nop			; (mov r8, r8)
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
	...

0000063c <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     63c:	b580      	push	{r7, lr}
     63e:	b09a      	sub	sp, #104	; 0x68
     640:	af00      	add	r7, sp, #0
     642:	0002      	movs	r2, r0
     644:	6039      	str	r1, [r7, #0]
     646:	1dfb      	adds	r3, r7, #7
     648:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	const uint32_t pinmapping[] = {
     64a:	230c      	movs	r3, #12
     64c:	18fa      	adds	r2, r7, r3
     64e:	4b16      	ldr	r3, [pc, #88]	; (6a8 <_adc_configure_ain_pin+0x6c>)
     650:	0010      	movs	r0, r2
     652:	0019      	movs	r1, r3
     654:	2358      	movs	r3, #88	; 0x58
     656:	001a      	movs	r2, r3
     658:	4b14      	ldr	r3, [pc, #80]	; (6ac <_adc_configure_ain_pin+0x70>)
     65a:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     65c:	4b14      	ldr	r3, [pc, #80]	; (6b0 <_adc_configure_ain_pin+0x74>)
     65e:	667b      	str	r3, [r7, #100]	; 0x64

	if (pin <= _adc_extchannel_msb[index]) {
     660:	2213      	movs	r2, #19
     662:	683b      	ldr	r3, [r7, #0]
     664:	429a      	cmp	r2, r3
     666:	d31a      	bcc.n	69e <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     668:	230c      	movs	r3, #12
     66a:	18fb      	adds	r3, r7, r3
     66c:	683a      	ldr	r2, [r7, #0]
     66e:	0092      	lsls	r2, r2, #2
     670:	58d3      	ldr	r3, [r2, r3]
     672:	667b      	str	r3, [r7, #100]	; 0x64

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     674:	2308      	movs	r3, #8
     676:	18fb      	adds	r3, r7, r3
     678:	0018      	movs	r0, r3
     67a:	4b0e      	ldr	r3, [pc, #56]	; (6b4 <_adc_configure_ain_pin+0x78>)
     67c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     67e:	2308      	movs	r3, #8
     680:	18fb      	adds	r3, r7, r3
     682:	2200      	movs	r2, #0
     684:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     686:	2308      	movs	r3, #8
     688:	18fb      	adds	r3, r7, r3
     68a:	2201      	movs	r2, #1
     68c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     690:	b2db      	uxtb	r3, r3
     692:	2208      	movs	r2, #8
     694:	18ba      	adds	r2, r7, r2
     696:	0011      	movs	r1, r2
     698:	0018      	movs	r0, r3
     69a:	4b07      	ldr	r3, [pc, #28]	; (6b8 <_adc_configure_ain_pin+0x7c>)
     69c:	4798      	blx	r3
	}
}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	46bd      	mov	sp, r7
     6a2:	b01a      	add	sp, #104	; 0x68
     6a4:	bd80      	pop	{r7, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	0001635c 	.word	0x0001635c
     6ac:	00011475 	.word	0x00011475
     6b0:	0000ffff 	.word	0x0000ffff
     6b4:	000004bd 	.word	0x000004bd
     6b8:	0000611d 	.word	0x0000611d

000006bc <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b08a      	sub	sp, #40	; 0x28
     6c0:	af00      	add	r7, sp, #0
     6c2:	60b9      	str	r1, [r7, #8]
     6c4:	607a      	str	r2, [r7, #4]
     6c6:	230f      	movs	r3, #15
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	1c02      	adds	r2, r0, #0
     6cc:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     6ce:	2327      	movs	r3, #39	; 0x27
     6d0:	18fb      	adds	r3, r7, r3
     6d2:	2200      	movs	r2, #0
     6d4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     6d6:	2310      	movs	r3, #16
     6d8:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6da:	231f      	movs	r3, #31
     6dc:	18fb      	adds	r3, r7, r3
     6de:	2200      	movs	r2, #0
     6e0:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     6e2:	68bb      	ldr	r3, [r7, #8]
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     6e8:	2314      	movs	r3, #20
     6ea:	18fb      	adds	r3, r7, r3
     6ec:	0018      	movs	r0, r3
     6ee:	4bc5      	ldr	r3, [pc, #788]	; (a04 <_adc_set_config+0x348>)
     6f0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	2314      	movs	r3, #20
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     6fc:	221e      	movs	r2, #30
     6fe:	2314      	movs	r3, #20
     700:	18fb      	adds	r3, r7, r3
     702:	0019      	movs	r1, r3
     704:	0010      	movs	r0, r2
     706:	4bc0      	ldr	r3, [pc, #768]	; (a08 <_adc_set_config+0x34c>)
     708:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     70a:	231e      	movs	r3, #30
     70c:	0018      	movs	r0, r3
     70e:	4bbf      	ldr	r3, [pc, #764]	; (a0c <_adc_set_config+0x350>)
     710:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     712:	687b      	ldr	r3, [r7, #4]
     714:	791b      	ldrb	r3, [r3, #4]
     716:	001a      	movs	r2, r3
     718:	230f      	movs	r3, #15
     71a:	18fb      	adds	r3, r7, r3
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	0011      	movs	r1, r2
     720:	0018      	movs	r0, r3
     722:	4bbb      	ldr	r3, [pc, #748]	; (a10 <_adc_set_config+0x354>)
     724:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     726:	687b      	ldr	r3, [r7, #4]
     728:	88db      	ldrh	r3, [r3, #6]
     72a:	001a      	movs	r2, r3
     72c:	230f      	movs	r3, #15
     72e:	18fb      	adds	r3, r7, r3
     730:	781b      	ldrb	r3, [r3, #0]
     732:	0011      	movs	r1, r2
     734:	0018      	movs	r0, r3
     736:	4bb6      	ldr	r3, [pc, #728]	; (a10 <_adc_set_config+0x354>)
     738:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     73a:	231e      	movs	r3, #30
     73c:	18fb      	adds	r3, r7, r3
     73e:	2200      	movs	r2, #0
     740:	701a      	strb	r2, [r3, #0]
     742:	e01a      	b.n	77a <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     744:	687b      	ldr	r3, [r7, #4]
     746:	691b      	ldr	r3, [r3, #16]
     748:	221e      	movs	r2, #30
     74a:	18ba      	adds	r2, r7, r2
     74c:	7812      	ldrb	r2, [r2, #0]
     74e:	2101      	movs	r1, #1
     750:	4091      	lsls	r1, r2
     752:	000a      	movs	r2, r1
     754:	4013      	ands	r3, r2
     756:	d009      	beq.n	76c <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     758:	231e      	movs	r3, #30
     75a:	18fb      	adds	r3, r7, r3
     75c:	781a      	ldrb	r2, [r3, #0]
     75e:	230f      	movs	r3, #15
     760:	18fb      	adds	r3, r7, r3
     762:	781b      	ldrb	r3, [r3, #0]
     764:	0011      	movs	r1, r2
     766:	0018      	movs	r0, r3
     768:	4ba9      	ldr	r3, [pc, #676]	; (a10 <_adc_set_config+0x354>)
     76a:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     76c:	231e      	movs	r3, #30
     76e:	18fb      	adds	r3, r7, r3
     770:	781a      	ldrb	r2, [r3, #0]
     772:	231e      	movs	r3, #30
     774:	18fb      	adds	r3, r7, r3
     776:	3201      	adds	r2, #1
     778:	701a      	strb	r2, [r3, #0]
     77a:	231e      	movs	r3, #30
     77c:	18fb      	adds	r3, r7, r3
     77e:	781b      	ldrb	r3, [r3, #0]
     780:	2213      	movs	r2, #19
     782:	4293      	cmp	r3, r2
     784:	d9de      	bls.n	744 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     786:	687b      	ldr	r3, [r7, #4]
     788:	7b5b      	ldrb	r3, [r3, #13]
     78a:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     78c:	b25a      	sxtb	r2, r3
     78e:	687b      	ldr	r3, [r7, #4]
     790:	7b9b      	ldrb	r3, [r3, #14]
     792:	01db      	lsls	r3, r3, #7
     794:	b25b      	sxtb	r3, r3
     796:	4313      	orrs	r3, r2
     798:	b25b      	sxtb	r3, r3
     79a:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     79c:	69bb      	ldr	r3, [r7, #24]
     79e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	7d1b      	ldrb	r3, [r3, #20]
     7a4:	01db      	lsls	r3, r3, #7
			| (config->reference);
     7a6:	b25a      	sxtb	r2, r3
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	785b      	ldrb	r3, [r3, #1]
     7ac:	b25b      	sxtb	r3, r3
     7ae:	4313      	orrs	r3, r2
     7b0:	b25b      	sxtb	r3, r3
     7b2:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     7b4:	69bb      	ldr	r3, [r7, #24]
     7b6:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	78db      	ldrb	r3, [r3, #3]
     7bc:	2b34      	cmp	r3, #52	; 0x34
     7be:	d846      	bhi.n	84e <_adc_set_config+0x192>
     7c0:	009a      	lsls	r2, r3, #2
     7c2:	4b94      	ldr	r3, [pc, #592]	; (a14 <_adc_set_config+0x358>)
     7c4:	18d3      	adds	r3, r2, r3
     7c6:	681b      	ldr	r3, [r3, #0]
     7c8:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     7ca:	2327      	movs	r3, #39	; 0x27
     7cc:	18fb      	adds	r3, r7, r3
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	7a52      	ldrb	r2, [r2, #9]
     7d2:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     7d4:	231f      	movs	r3, #31
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	687a      	ldr	r2, [r7, #4]
     7da:	7a12      	ldrb	r2, [r2, #8]
     7dc:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     7de:	2310      	movs	r3, #16
     7e0:	623b      	str	r3, [r7, #32]
		break;
     7e2:	e036      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     7e4:	2327      	movs	r3, #39	; 0x27
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	2201      	movs	r2, #1
     7ea:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     7ec:	231f      	movs	r3, #31
     7ee:	18fb      	adds	r3, r7, r3
     7f0:	2202      	movs	r2, #2
     7f2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     7f4:	2310      	movs	r3, #16
     7f6:	623b      	str	r3, [r7, #32]
		break;
     7f8:	e02b      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     7fa:	2327      	movs	r3, #39	; 0x27
     7fc:	18fb      	adds	r3, r7, r3
     7fe:	2202      	movs	r2, #2
     800:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     802:	231f      	movs	r3, #31
     804:	18fb      	adds	r3, r7, r3
     806:	2204      	movs	r2, #4
     808:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     80a:	2310      	movs	r3, #16
     80c:	623b      	str	r3, [r7, #32]
		break;
     80e:	e020      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     810:	2327      	movs	r3, #39	; 0x27
     812:	18fb      	adds	r3, r7, r3
     814:	2201      	movs	r2, #1
     816:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     818:	231f      	movs	r3, #31
     81a:	18fb      	adds	r3, r7, r3
     81c:	2206      	movs	r2, #6
     81e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     820:	2310      	movs	r3, #16
     822:	623b      	str	r3, [r7, #32]
		break;
     824:	e015      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     826:	2327      	movs	r3, #39	; 0x27
     828:	18fb      	adds	r3, r7, r3
     82a:	2200      	movs	r2, #0
     82c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     82e:	231f      	movs	r3, #31
     830:	18fb      	adds	r3, r7, r3
     832:	2208      	movs	r2, #8
     834:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     836:	2310      	movs	r3, #16
     838:	623b      	str	r3, [r7, #32]
		break;
     83a:	e00a      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     83c:	2330      	movs	r3, #48	; 0x30
     83e:	623b      	str	r3, [r7, #32]
		break;
     840:	e007      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     842:	2320      	movs	r3, #32
     844:	623b      	str	r3, [r7, #32]
		break;
     846:	e004      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     848:	2300      	movs	r3, #0
     84a:	623b      	str	r3, [r7, #32]
		break;
     84c:	e001      	b.n	852 <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     84e:	2317      	movs	r3, #23
     850:	e1a7      	b.n	ba2 <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     852:	2327      	movs	r3, #39	; 0x27
     854:	18fb      	adds	r3, r7, r3
     856:	781b      	ldrb	r3, [r3, #0]
     858:	011b      	lsls	r3, r3, #4
     85a:	b2db      	uxtb	r3, r3
     85c:	2270      	movs	r2, #112	; 0x70
     85e:	4013      	ands	r3, r2
     860:	b2da      	uxtb	r2, r3
     862:	231f      	movs	r3, #31
     864:	18fb      	adds	r3, r7, r3
     866:	781b      	ldrb	r3, [r3, #0]
     868:	4313      	orrs	r3, r2
     86a:	b2da      	uxtb	r2, r3
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     870:	46c0      	nop			; (mov r8, r8)
     872:	68bb      	ldr	r3, [r7, #8]
     874:	0018      	movs	r0, r3
     876:	4b68      	ldr	r3, [pc, #416]	; (a18 <_adc_set_config+0x35c>)
     878:	4798      	blx	r3
     87a:	1e03      	subs	r3, r0, #0
     87c:	d1f9      	bne.n	872 <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     87e:	687b      	ldr	r3, [r7, #4]
     880:	7d5b      	ldrb	r3, [r3, #21]
     882:	2b3f      	cmp	r3, #63	; 0x3f
     884:	d901      	bls.n	88a <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     886:	2317      	movs	r3, #23
     888:	e18b      	b.n	ba2 <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	7d5b      	ldrb	r3, [r3, #21]
     88e:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     890:	687b      	ldr	r3, [r7, #4]
     892:	7bdb      	ldrb	r3, [r3, #15]
     894:	01db      	lsls	r3, r3, #7
     896:	b25b      	sxtb	r3, r3
     898:	4313      	orrs	r3, r2
     89a:	b25b      	sxtb	r3, r3
     89c:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     89e:	69bb      	ldr	r3, [r7, #24]
     8a0:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	68bb      	ldr	r3, [r7, #8]
     8a6:	0018      	movs	r0, r3
     8a8:	4b5b      	ldr	r3, [pc, #364]	; (a18 <_adc_set_config+0x35c>)
     8aa:	4798      	blx	r3
     8ac:	1e03      	subs	r3, r0, #0
     8ae:	d1f9      	bne.n	8a4 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     8b4:	69bb      	ldr	r3, [r7, #24]
     8b6:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2224      	movs	r2, #36	; 0x24
     8bc:	5c9b      	ldrb	r3, [r3, r2]
     8be:	b29b      	uxth	r3, r3
     8c0:	00db      	lsls	r3, r3, #3
     8c2:	b29a      	uxth	r2, r3
			resolution |
     8c4:	6a3b      	ldr	r3, [r7, #32]
     8c6:	b29b      	uxth	r3, r3
     8c8:	4313      	orrs	r3, r2
     8ca:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	7b1b      	ldrb	r3, [r3, #12]
     8d0:	b29b      	uxth	r3, r3
     8d2:	009b      	lsls	r3, r3, #2
     8d4:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     8d6:	4313      	orrs	r3, r2
     8d8:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	7a9b      	ldrb	r3, [r3, #10]
     8de:	b29b      	uxth	r3, r3
     8e0:	18db      	adds	r3, r3, r3
     8e2:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     8e4:	4313      	orrs	r3, r2
     8e6:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	7adb      	ldrb	r3, [r3, #11]
     8ec:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     8ee:	4313      	orrs	r3, r2
     8f0:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     8f2:	69bb      	ldr	r3, [r7, #24]
     8f4:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	68bb      	ldr	r3, [r7, #8]
     8fa:	0018      	movs	r0, r3
     8fc:	4b46      	ldr	r3, [pc, #280]	; (a18 <_adc_set_config+0x35c>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d1f9      	bne.n	8f8 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     904:	687b      	ldr	r3, [r7, #4]
     906:	8b1b      	ldrh	r3, [r3, #24]
     908:	2b00      	cmp	r3, #0
     90a:	d100      	bne.n	90e <_adc_set_config+0x252>
     90c:	e0bf      	b.n	a8e <_adc_set_config+0x3d2>
		switch (resolution) {
     90e:	6a3b      	ldr	r3, [r7, #32]
     910:	2b10      	cmp	r3, #16
     912:	d100      	bne.n	916 <_adc_set_config+0x25a>
     914:	e08e      	b.n	a34 <_adc_set_config+0x378>
     916:	d802      	bhi.n	91e <_adc_set_config+0x262>
     918:	2b00      	cmp	r3, #0
     91a:	d04d      	beq.n	9b8 <_adc_set_config+0x2fc>
     91c:	e0b7      	b.n	a8e <_adc_set_config+0x3d2>
     91e:	2b20      	cmp	r3, #32
     920:	d023      	beq.n	96a <_adc_set_config+0x2ae>
     922:	2b30      	cmp	r3, #48	; 0x30
     924:	d000      	beq.n	928 <_adc_set_config+0x26c>
     926:	e0b2      	b.n	a8e <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     928:	687b      	ldr	r3, [r7, #4]
     92a:	7adb      	ldrb	r3, [r3, #11]
     92c:	2b00      	cmp	r3, #0
     92e:	d011      	beq.n	954 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     930:	687b      	ldr	r3, [r7, #4]
     932:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     934:	2b7f      	cmp	r3, #127	; 0x7f
     936:	dc0b      	bgt.n	950 <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     938:	687b      	ldr	r3, [r7, #4]
     93a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     93c:	3380      	adds	r3, #128	; 0x80
     93e:	db07      	blt.n	950 <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     940:	687b      	ldr	r3, [r7, #4]
     942:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     944:	2b7f      	cmp	r3, #127	; 0x7f
     946:	dc03      	bgt.n	950 <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     948:	687b      	ldr	r3, [r7, #4]
     94a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     94c:	3380      	adds	r3, #128	; 0x80
     94e:	da01      	bge.n	954 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     950:	2317      	movs	r3, #23
     952:	e126      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     954:	687b      	ldr	r3, [r7, #4]
     956:	69db      	ldr	r3, [r3, #28]
     958:	2bff      	cmp	r3, #255	; 0xff
     95a:	dc04      	bgt.n	966 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     960:	2bff      	cmp	r3, #255	; 0xff
     962:	dc00      	bgt.n	966 <_adc_set_config+0x2aa>
     964:	e08c      	b.n	a80 <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     966:	2317      	movs	r3, #23
     968:	e11b      	b.n	ba2 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	7adb      	ldrb	r3, [r3, #11]
     96e:	2b00      	cmp	r3, #0
     970:	d015      	beq.n	99e <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     972:	687b      	ldr	r3, [r7, #4]
     974:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     976:	4a29      	ldr	r2, [pc, #164]	; (a1c <_adc_set_config+0x360>)
     978:	4293      	cmp	r3, r2
     97a:	dc0e      	bgt.n	99a <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     980:	4a27      	ldr	r2, [pc, #156]	; (a20 <_adc_set_config+0x364>)
     982:	4293      	cmp	r3, r2
     984:	db09      	blt.n	99a <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     986:	687b      	ldr	r3, [r7, #4]
     988:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     98a:	4a24      	ldr	r2, [pc, #144]	; (a1c <_adc_set_config+0x360>)
     98c:	4293      	cmp	r3, r2
     98e:	dc04      	bgt.n	99a <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     990:	687b      	ldr	r3, [r7, #4]
     992:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     994:	4a22      	ldr	r2, [pc, #136]	; (a20 <_adc_set_config+0x364>)
     996:	4293      	cmp	r3, r2
     998:	da01      	bge.n	99e <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e101      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	69db      	ldr	r3, [r3, #28]
     9a2:	4a20      	ldr	r2, [pc, #128]	; (a24 <_adc_set_config+0x368>)
     9a4:	4293      	cmp	r3, r2
     9a6:	dc05      	bgt.n	9b4 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     9ac:	4a1d      	ldr	r2, [pc, #116]	; (a24 <_adc_set_config+0x368>)
     9ae:	4293      	cmp	r3, r2
     9b0:	dc00      	bgt.n	9b4 <_adc_set_config+0x2f8>
     9b2:	e067      	b.n	a84 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9b4:	2317      	movs	r3, #23
     9b6:	e0f4      	b.n	ba2 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	7adb      	ldrb	r3, [r3, #11]
     9bc:	2b00      	cmp	r3, #0
     9be:	d015      	beq.n	9ec <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     9c4:	4a18      	ldr	r2, [pc, #96]	; (a28 <_adc_set_config+0x36c>)
     9c6:	4293      	cmp	r3, r2
     9c8:	dc0e      	bgt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     9ce:	4a17      	ldr	r2, [pc, #92]	; (a2c <_adc_set_config+0x370>)
     9d0:	4293      	cmp	r3, r2
     9d2:	db09      	blt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     9d8:	4a13      	ldr	r2, [pc, #76]	; (a28 <_adc_set_config+0x36c>)
     9da:	4293      	cmp	r3, r2
     9dc:	dc04      	bgt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     9e2:	4a12      	ldr	r2, [pc, #72]	; (a2c <_adc_set_config+0x370>)
     9e4:	4293      	cmp	r3, r2
     9e6:	da01      	bge.n	9ec <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9e8:	2317      	movs	r3, #23
     9ea:	e0da      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	69db      	ldr	r3, [r3, #28]
     9f0:	4a0f      	ldr	r2, [pc, #60]	; (a30 <_adc_set_config+0x374>)
     9f2:	4293      	cmp	r3, r2
     9f4:	dc04      	bgt.n	a00 <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     9fa:	4a0d      	ldr	r2, [pc, #52]	; (a30 <_adc_set_config+0x374>)
     9fc:	4293      	cmp	r3, r2
     9fe:	dd43      	ble.n	a88 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a00:	2317      	movs	r3, #23
     a02:	e0ce      	b.n	ba2 <_adc_set_config+0x4e6>
     a04:	00000429 	.word	0x00000429
     a08:	00005e69 	.word	0x00005e69
     a0c:	00005ea9 	.word	0x00005ea9
     a10:	0000063d 	.word	0x0000063d
     a14:	000163b4 	.word	0x000163b4
     a18:	00000525 	.word	0x00000525
     a1c:	000001ff 	.word	0x000001ff
     a20:	fffffe00 	.word	0xfffffe00
     a24:	000003ff 	.word	0x000003ff
     a28:	000007ff 	.word	0x000007ff
     a2c:	fffff800 	.word	0xfffff800
     a30:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	7adb      	ldrb	r3, [r3, #11]
     a38:	2b00      	cmp	r3, #0
     a3a:	d015      	beq.n	a68 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a40:	4a5a      	ldr	r2, [pc, #360]	; (bac <_adc_set_config+0x4f0>)
     a42:	4293      	cmp	r3, r2
     a44:	dc0e      	bgt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     a4a:	4a59      	ldr	r2, [pc, #356]	; (bb0 <_adc_set_config+0x4f4>)
     a4c:	4293      	cmp	r3, r2
     a4e:	db09      	blt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     a54:	4a55      	ldr	r2, [pc, #340]	; (bac <_adc_set_config+0x4f0>)
     a56:	4293      	cmp	r3, r2
     a58:	dc04      	bgt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     a5e:	4a54      	ldr	r2, [pc, #336]	; (bb0 <_adc_set_config+0x4f4>)
     a60:	4293      	cmp	r3, r2
     a62:	da01      	bge.n	a68 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a64:	2317      	movs	r3, #23
     a66:	e09c      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	69db      	ldr	r3, [r3, #28]
     a6c:	4a51      	ldr	r2, [pc, #324]	; (bb4 <_adc_set_config+0x4f8>)
     a6e:	4293      	cmp	r3, r2
     a70:	dc04      	bgt.n	a7c <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     a76:	4a4f      	ldr	r2, [pc, #316]	; (bb4 <_adc_set_config+0x4f8>)
     a78:	4293      	cmp	r3, r2
     a7a:	dd07      	ble.n	a8c <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a7c:	2317      	movs	r3, #23
     a7e:	e090      	b.n	ba2 <_adc_set_config+0x4e6>
			break;
     a80:	46c0      	nop			; (mov r8, r8)
     a82:	e004      	b.n	a8e <_adc_set_config+0x3d2>
			break;
     a84:	46c0      	nop			; (mov r8, r8)
     a86:	e002      	b.n	a8e <_adc_set_config+0x3d2>
			break;
     a88:	46c0      	nop			; (mov r8, r8)
     a8a:	e000      	b.n	a8e <_adc_set_config+0x3d2>
			}
			break;
     a8c:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     a8e:	69bb      	ldr	r3, [r7, #24]
     a90:	895b      	ldrh	r3, [r3, #10]
     a92:	b29a      	uxth	r2, r3
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	8b1b      	ldrh	r3, [r3, #24]
     a98:	4313      	orrs	r3, r2
     a9a:	b29a      	uxth	r2, r3
     a9c:	69bb      	ldr	r3, [r7, #24]
     a9e:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     aa0:	46c0      	nop			; (mov r8, r8)
     aa2:	68bb      	ldr	r3, [r7, #8]
     aa4:	0018      	movs	r0, r3
     aa6:	4b44      	ldr	r3, [pc, #272]	; (bb8 <_adc_set_config+0x4fc>)
     aa8:	4798      	blx	r3
     aaa:	1e03      	subs	r3, r0, #0
     aac:	d1f9      	bne.n	aa2 <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     ab2:	b29a      	uxth	r2, r3
     ab4:	69bb      	ldr	r3, [r7, #24]
     ab6:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     ab8:	46c0      	nop			; (mov r8, r8)
     aba:	68bb      	ldr	r3, [r7, #8]
     abc:	0018      	movs	r0, r3
     abe:	4b3e      	ldr	r3, [pc, #248]	; (bb8 <_adc_set_config+0x4fc>)
     ac0:	4798      	blx	r3
     ac2:	1e03      	subs	r3, r0, #0
     ac4:	d1f9      	bne.n	aba <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6a1b      	ldr	r3, [r3, #32]
     aca:	b29a      	uxth	r2, r3
     acc:	69bb      	ldr	r3, [r7, #24]
     ace:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	68bb      	ldr	r3, [r7, #8]
     ad4:	0018      	movs	r0, r3
     ad6:	4b38      	ldr	r3, [pc, #224]	; (bb8 <_adc_set_config+0x4fc>)
     ad8:	4798      	blx	r3
     ada:	1e03      	subs	r3, r0, #0
     adc:	d1f9      	bne.n	ad2 <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	791b      	ldrb	r3, [r3, #4]
     ae6:	b29b      	uxth	r3, r3
			config->negative_input |
     ae8:	4313      	orrs	r3, r2
     aea:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     aec:	69bb      	ldr	r3, [r7, #24]
     aee:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     af0:	46c0      	nop			; (mov r8, r8)
     af2:	68bb      	ldr	r3, [r7, #8]
     af4:	0018      	movs	r0, r3
     af6:	4b30      	ldr	r3, [pc, #192]	; (bb8 <_adc_set_config+0x4fc>)
     af8:	4798      	blx	r3
     afa:	1e03      	subs	r3, r0, #0
     afc:	d1f9      	bne.n	af2 <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	222a      	movs	r2, #42	; 0x2a
     b02:	5c9a      	ldrb	r2, [r3, r2]
     b04:	69bb      	ldr	r3, [r7, #24]
     b06:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     b08:	69bb      	ldr	r3, [r7, #24]
     b0a:	2207      	movs	r2, #7
     b0c:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2224      	movs	r2, #36	; 0x24
     b12:	5c9b      	ldrb	r3, [r3, r2]
     b14:	2b00      	cmp	r3, #0
     b16:	d02c      	beq.n	b72 <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     b1c:	4a27      	ldr	r2, [pc, #156]	; (bbc <_adc_set_config+0x500>)
     b1e:	4293      	cmp	r3, r2
     b20:	d901      	bls.n	b26 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     b22:	2317      	movs	r3, #23
     b24:	e03d      	b.n	ba2 <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     b2a:	69bb      	ldr	r3, [r7, #24]
     b2c:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	68bb      	ldr	r3, [r7, #8]
     b32:	0018      	movs	r0, r3
     b34:	4b20      	ldr	r3, [pc, #128]	; (bb8 <_adc_set_config+0x4fc>)
     b36:	4798      	blx	r3
     b38:	1e03      	subs	r3, r0, #0
     b3a:	d1f9      	bne.n	b30 <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	2228      	movs	r2, #40	; 0x28
     b40:	5e9b      	ldrsh	r3, [r3, r2]
     b42:	4a1f      	ldr	r2, [pc, #124]	; (bc0 <_adc_set_config+0x504>)
     b44:	4293      	cmp	r3, r2
     b46:	dc05      	bgt.n	b54 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	2228      	movs	r2, #40	; 0x28
     b4c:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     b4e:	4a1d      	ldr	r2, [pc, #116]	; (bc4 <_adc_set_config+0x508>)
     b50:	4293      	cmp	r3, r2
     b52:	da01      	bge.n	b58 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     b54:	2317      	movs	r3, #23
     b56:	e024      	b.n	ba2 <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	2228      	movs	r2, #40	; 0x28
     b5c:	5e9b      	ldrsh	r3, [r3, r2]
     b5e:	b29a      	uxth	r2, r3
     b60:	69bb      	ldr	r3, [r7, #24]
     b62:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     b64:	46c0      	nop			; (mov r8, r8)
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	0018      	movs	r0, r3
     b6a:	4b13      	ldr	r3, [pc, #76]	; (bb8 <_adc_set_config+0x4fc>)
     b6c:	4798      	blx	r3
     b6e:	1e03      	subs	r3, r0, #0
     b70:	d1f9      	bne.n	b66 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     b72:	4b15      	ldr	r3, [pc, #84]	; (bc8 <_adc_set_config+0x50c>)
     b74:	681b      	ldr	r3, [r3, #0]
     b76:	2200      	movs	r2, #0
     b78:	40d3      	lsrs	r3, r2
     b7a:	b29b      	uxth	r3, r3
     b7c:	021b      	lsls	r3, r3, #8
     b7e:	b29a      	uxth	r2, r3
     b80:	23e0      	movs	r3, #224	; 0xe0
     b82:	00db      	lsls	r3, r3, #3
     b84:	4013      	ands	r3, r2
     b86:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     b88:	4b0f      	ldr	r3, [pc, #60]	; (bc8 <_adc_set_config+0x50c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	2103      	movs	r1, #3
     b8e:	40cb      	lsrs	r3, r1
     b90:	b29b      	uxth	r3, r3
     b92:	2107      	movs	r1, #7
     b94:	400b      	ands	r3, r1
     b96:	b29b      	uxth	r3, r3
			) |
     b98:	4313      	orrs	r3, r2
     b9a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     b9c:	69bb      	ldr	r3, [r7, #24]
     b9e:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     ba0:	2300      	movs	r3, #0
}
     ba2:	0018      	movs	r0, r3
     ba4:	46bd      	mov	sp, r7
     ba6:	b00a      	add	sp, #40	; 0x28
     ba8:	bd80      	pop	{r7, pc}
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	00007fff 	.word	0x00007fff
     bb0:	ffff8000 	.word	0xffff8000
     bb4:	0000ffff 	.word	0x0000ffff
     bb8:	00000525 	.word	0x00000525
     bbc:	00000fff 	.word	0x00000fff
     bc0:	000007ff 	.word	0x000007ff
     bc4:	fffff800 	.word	0xfffff800
     bc8:	00806020 	.word	0x00806020

00000bcc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     bcc:	b590      	push	{r4, r7, lr}
     bce:	b087      	sub	sp, #28
     bd0:	af00      	add	r7, sp, #0
     bd2:	60f8      	str	r0, [r7, #12]
     bd4:	60b9      	str	r1, [r7, #8]
     bd6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     bd8:	2316      	movs	r3, #22
     bda:	18fc      	adds	r4, r7, r3
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	0018      	movs	r0, r3
     be0:	4b3d      	ldr	r3, [pc, #244]	; (cd8 <adc_init+0x10c>)
     be2:	4798      	blx	r3
     be4:	0003      	movs	r3, r0
     be6:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     be8:	68fb      	ldr	r3, [r7, #12]
     bea:	68ba      	ldr	r2, [r7, #8]
     bec:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     bee:	2108      	movs	r1, #8
     bf0:	2003      	movs	r0, #3
     bf2:	4b3a      	ldr	r3, [pc, #232]	; (cdc <adc_init+0x110>)
     bf4:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	b2db      	uxtb	r3, r3
     bfc:	001a      	movs	r2, r3
     bfe:	2301      	movs	r3, #1
     c00:	4013      	ands	r3, r2
     c02:	d001      	beq.n	c08 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c04:	2305      	movs	r3, #5
     c06:	e062      	b.n	cce <adc_init+0x102>
	}

	while (adc_is_syncing(module_inst)) {
     c08:	46c0      	nop			; (mov r8, r8)
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	0018      	movs	r0, r3
     c0e:	4b34      	ldr	r3, [pc, #208]	; (ce0 <adc_init+0x114>)
     c10:	4798      	blx	r3
     c12:	1e03      	subs	r3, r0, #0
     c14:	d1f9      	bne.n	c0a <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	b2db      	uxtb	r3, r3
     c1c:	001a      	movs	r2, r3
     c1e:	2302      	movs	r3, #2
     c20:	4013      	ands	r3, r2
     c22:	d001      	beq.n	c28 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     c24:	231c      	movs	r3, #28
     c26:	e052      	b.n	cce <adc_init+0x102>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	785a      	ldrb	r2, [r3, #1]
     c2c:	68fb      	ldr	r3, [r7, #12]
     c2e:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	791b      	ldrb	r3, [r3, #4]
     c34:	2b00      	cmp	r3, #0
     c36:	d102      	bne.n	c3e <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     c38:	2001      	movs	r0, #1
     c3a:	4b2a      	ldr	r3, [pc, #168]	; (ce4 <adc_init+0x118>)
     c3c:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     c3e:	2317      	movs	r3, #23
     c40:	18fb      	adds	r3, r7, r3
     c42:	2200      	movs	r2, #0
     c44:	701a      	strb	r2, [r3, #0]
     c46:	e00e      	b.n	c66 <adc_init+0x9a>
		module_inst->callback[i] = NULL;
     c48:	2317      	movs	r3, #23
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	781a      	ldrb	r2, [r3, #0]
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	3202      	adds	r2, #2
     c52:	0092      	lsls	r2, r2, #2
     c54:	2100      	movs	r1, #0
     c56:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     c58:	2317      	movs	r3, #23
     c5a:	18fb      	adds	r3, r7, r3
     c5c:	781a      	ldrb	r2, [r3, #0]
     c5e:	2317      	movs	r3, #23
     c60:	18fb      	adds	r3, r7, r3
     c62:	3201      	adds	r2, #1
     c64:	701a      	strb	r2, [r3, #0]
     c66:	2317      	movs	r3, #23
     c68:	18fb      	adds	r3, r7, r3
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	2b02      	cmp	r3, #2
     c6e:	d9eb      	bls.n	c48 <adc_init+0x7c>
	};

	module_inst->registered_callback_mask = 0;
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	2200      	movs	r2, #0
     c74:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	2200      	movs	r2, #0
     c7a:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	2200      	movs	r2, #0
     c80:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     c82:	68fb      	ldr	r3, [r7, #12]
     c84:	2200      	movs	r2, #0
     c86:	771a      	strb	r2, [r3, #28]

	_adc_instances[instance] = module_inst;
     c88:	2316      	movs	r3, #22
     c8a:	18fb      	adds	r3, r7, r3
     c8c:	781a      	ldrb	r2, [r3, #0]
     c8e:	4b16      	ldr	r3, [pc, #88]	; (ce8 <adc_init+0x11c>)
     c90:	0092      	lsls	r2, r2, #2
     c92:	68f9      	ldr	r1, [r7, #12]
     c94:	50d1      	str	r1, [r2, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	222a      	movs	r2, #42	; 0x2a
     c9a:	5c9b      	ldrb	r3, [r3, r2]
     c9c:	2b00      	cmp	r3, #0
     c9e:	d10a      	bne.n	cb6 <adc_init+0xea>
			!config->freerunning) {
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	7b1b      	ldrb	r3, [r3, #12]
     ca4:	2201      	movs	r2, #1
     ca6:	4053      	eors	r3, r2
     ca8:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     caa:	2b00      	cmp	r3, #0
     cac:	d003      	beq.n	cb6 <adc_init+0xea>
		module_inst->software_trigger = true;
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	2201      	movs	r2, #1
     cb2:	775a      	strb	r2, [r3, #29]
     cb4:	e002      	b.n	cbc <adc_init+0xf0>
	} else {
		module_inst->software_trigger = false;
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	2200      	movs	r2, #0
     cba:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     cbc:	687a      	ldr	r2, [r7, #4]
     cbe:	68f9      	ldr	r1, [r7, #12]
     cc0:	2316      	movs	r3, #22
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b08      	ldr	r3, [pc, #32]	; (cec <adc_init+0x120>)
     cca:	4798      	blx	r3
     ccc:	0003      	movs	r3, r0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b007      	add	sp, #28
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	0000054d 	.word	0x0000054d
     cdc:	00000441 	.word	0x00000441
     ce0:	00000525 	.word	0x00000525
     ce4:	000004e5 	.word	0x000004e5
     ce8:	20000f04 	.word	0x20000f04
     cec:	000006bd 	.word	0x000006bd

00000cf0 <adc_is_syncing>:
{
     cf0:	b580      	push	{r7, lr}
     cf2:	b084      	sub	sp, #16
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	681b      	ldr	r3, [r3, #0]
     cfc:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	8c1b      	ldrh	r3, [r3, #32]
     d02:	b29b      	uxth	r3, r3
     d04:	2b00      	cmp	r3, #0
     d06:	d001      	beq.n	d0c <adc_is_syncing+0x1c>
		return true;
     d08:	2301      	movs	r3, #1
     d0a:	e000      	b.n	d0e <adc_is_syncing+0x1e>
	return false;
     d0c:	2300      	movs	r3, #0
}
     d0e:	0018      	movs	r0, r3
     d10:	46bd      	mov	sp, r7
     d12:	b004      	add	sp, #16
     d14:	bd80      	pop	{r7, pc}
	...

00000d18 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b084      	sub	sp, #16
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	0018      	movs	r0, r3
     d2c:	4b0b      	ldr	r3, [pc, #44]	; (d5c <adc_start_conversion+0x44>)
     d2e:	4798      	blx	r3
     d30:	1e03      	subs	r3, r0, #0
     d32:	d1f9      	bne.n	d28 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	7e1b      	ldrb	r3, [r3, #24]
     d38:	b2db      	uxtb	r3, r3
     d3a:	2202      	movs	r2, #2
     d3c:	4313      	orrs	r3, r2
     d3e:	b2da      	uxtb	r2, r3
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     d44:	46c0      	nop			; (mov r8, r8)
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	0018      	movs	r0, r3
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <adc_start_conversion+0x44>)
     d4c:	4798      	blx	r3
     d4e:	1e03      	subs	r3, r0, #0
     d50:	d1f9      	bne.n	d46 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	46bd      	mov	sp, r7
     d56:	b004      	add	sp, #16
     d58:	bd80      	pop	{r7, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	00000cf1 	.word	0x00000cf1

00000d60 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     d60:	b580      	push	{r7, lr}
     d62:	b084      	sub	sp, #16
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
     d68:	000a      	movs	r2, r1
     d6a:	1cfb      	adds	r3, r7, #3
     d6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     d74:	68fb      	ldr	r3, [r7, #12]
     d76:	1cfa      	adds	r2, r7, #3
     d78:	7812      	ldrb	r2, [r2, #0]
     d7a:	711a      	strb	r2, [r3, #4]
}
     d7c:	46c0      	nop			; (mov r8, r8)
     d7e:	46bd      	mov	sp, r7
     d80:	b004      	add	sp, #16
     d82:	bd80      	pop	{r7, pc}

00000d84 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     d84:	b580      	push	{r7, lr}
     d86:	b084      	sub	sp, #16
     d88:	af00      	add	r7, sp, #0
     d8a:	0002      	movs	r2, r0
     d8c:	1dfb      	adds	r3, r7, #7
     d8e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     d90:	1dfb      	adds	r3, r7, #7
     d92:	781a      	ldrb	r2, [r3, #0]
     d94:	4b47      	ldr	r3, [pc, #284]	; (eb4 <_adc_interrupt_handler+0x130>)
     d96:	0092      	lsls	r2, r2, #2
     d98:	58d3      	ldr	r3, [r2, r3]
     d9a:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     d9c:	68fb      	ldr	r3, [r7, #12]
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	799b      	ldrb	r3, [r3, #6]
     da2:	b2da      	uxtb	r2, r3
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	795b      	ldrb	r3, [r3, #5]
     daa:	b2db      	uxtb	r3, r3
     dac:	4013      	ands	r3, r2
     dae:	b2db      	uxtb	r3, r3
     db0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     db2:	68bb      	ldr	r3, [r7, #8]
     db4:	2201      	movs	r2, #1
     db6:	4013      	ands	r3, r2
     db8:	d045      	beq.n	e46 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     dba:	68fb      	ldr	r3, [r7, #12]
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	2201      	movs	r2, #1
     dc0:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     dc2:	68fb      	ldr	r3, [r7, #12]
     dc4:	695b      	ldr	r3, [r3, #20]
     dc6:	1c99      	adds	r1, r3, #2
     dc8:	68fa      	ldr	r2, [r7, #12]
     dca:	6151      	str	r1, [r2, #20]
     dcc:	68fa      	ldr	r2, [r7, #12]
     dce:	6812      	ldr	r2, [r2, #0]
     dd0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     dd2:	b292      	uxth	r2, r2
     dd4:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     dd6:	68fb      	ldr	r3, [r7, #12]
     dd8:	8b1b      	ldrh	r3, [r3, #24]
     dda:	b29b      	uxth	r3, r3
     ddc:	3b01      	subs	r3, #1
     dde:	b29b      	uxth	r3, r3
     de0:	68fa      	ldr	r2, [r7, #12]
     de2:	1c19      	adds	r1, r3, #0
     de4:	8311      	strh	r1, [r2, #24]
     de6:	2b00      	cmp	r3, #0
     de8:	d00f      	beq.n	e0a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     dea:	68fb      	ldr	r3, [r7, #12]
     dec:	7f5b      	ldrb	r3, [r3, #29]
     dee:	2b00      	cmp	r3, #0
     df0:	d029      	beq.n	e46 <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     df2:	68fb      	ldr	r3, [r7, #12]
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	79db      	ldrb	r3, [r3, #7]
     df8:	b2db      	uxtb	r3, r3
     dfa:	b25b      	sxtb	r3, r3
     dfc:	2b00      	cmp	r3, #0
     dfe:	db22      	blt.n	e46 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     e00:	68fb      	ldr	r3, [r7, #12]
     e02:	0018      	movs	r0, r3
     e04:	4b2c      	ldr	r3, [pc, #176]	; (eb8 <_adc_interrupt_handler+0x134>)
     e06:	4798      	blx	r3
     e08:	e01d      	b.n	e46 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     e0a:	68fb      	ldr	r3, [r7, #12]
     e0c:	2101      	movs	r1, #1
     e0e:	0018      	movs	r0, r3
     e10:	4b2a      	ldr	r3, [pc, #168]	; (ebc <_adc_interrupt_handler+0x138>)
     e12:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     e14:	68fb      	ldr	r3, [r7, #12]
     e16:	7f1b      	ldrb	r3, [r3, #28]
     e18:	b2db      	uxtb	r3, r3
     e1a:	2b05      	cmp	r3, #5
     e1c:	d113      	bne.n	e46 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     e1e:	68fb      	ldr	r3, [r7, #12]
     e20:	2200      	movs	r2, #0
     e22:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	7edb      	ldrb	r3, [r3, #27]
     e28:	001a      	movs	r2, r3
     e2a:	2301      	movs	r3, #1
     e2c:	4013      	ands	r3, r2
     e2e:	d00a      	beq.n	e46 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     e30:	68fb      	ldr	r3, [r7, #12]
     e32:	7e9b      	ldrb	r3, [r3, #26]
     e34:	001a      	movs	r2, r3
     e36:	2301      	movs	r3, #1
     e38:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     e3a:	d004      	beq.n	e46 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     e3c:	68fb      	ldr	r3, [r7, #12]
     e3e:	689b      	ldr	r3, [r3, #8]
     e40:	68fa      	ldr	r2, [r7, #12]
     e42:	0010      	movs	r0, r2
     e44:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     e46:	68bb      	ldr	r3, [r7, #8]
     e48:	2204      	movs	r2, #4
     e4a:	4013      	ands	r3, r2
     e4c:	d014      	beq.n	e78 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	681b      	ldr	r3, [r3, #0]
     e52:	2204      	movs	r2, #4
     e54:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	7edb      	ldrb	r3, [r3, #27]
     e5a:	001a      	movs	r2, r3
     e5c:	2302      	movs	r3, #2
     e5e:	4013      	ands	r3, r2
     e60:	d00a      	beq.n	e78 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     e62:	68fb      	ldr	r3, [r7, #12]
     e64:	7e9b      	ldrb	r3, [r3, #26]
     e66:	001a      	movs	r2, r3
     e68:	2302      	movs	r3, #2
     e6a:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e6c:	d004      	beq.n	e78 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	68db      	ldr	r3, [r3, #12]
     e72:	68fa      	ldr	r2, [r7, #12]
     e74:	0010      	movs	r0, r2
     e76:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     e78:	68bb      	ldr	r3, [r7, #8]
     e7a:	2202      	movs	r2, #2
     e7c:	4013      	ands	r3, r2
     e7e:	d014      	beq.n	eaa <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     e80:	68fb      	ldr	r3, [r7, #12]
     e82:	681b      	ldr	r3, [r3, #0]
     e84:	2202      	movs	r2, #2
     e86:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	7edb      	ldrb	r3, [r3, #27]
     e8c:	001a      	movs	r2, r3
     e8e:	2304      	movs	r3, #4
     e90:	4013      	ands	r3, r2
     e92:	d00a      	beq.n	eaa <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     e94:	68fb      	ldr	r3, [r7, #12]
     e96:	7e9b      	ldrb	r3, [r3, #26]
     e98:	001a      	movs	r2, r3
     e9a:	2304      	movs	r3, #4
     e9c:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e9e:	d004      	beq.n	eaa <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     ea0:	68fb      	ldr	r3, [r7, #12]
     ea2:	691b      	ldr	r3, [r3, #16]
     ea4:	68fa      	ldr	r2, [r7, #12]
     ea6:	0010      	movs	r0, r2
     ea8:	4798      	blx	r3
		}
	}
}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	46bd      	mov	sp, r7
     eae:	b004      	add	sp, #16
     eb0:	bd80      	pop	{r7, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	20000f04 	.word	0x20000f04
     eb8:	00000d19 	.word	0x00000d19
     ebc:	00000d61 	.word	0x00000d61

00000ec0 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     ec4:	2000      	movs	r0, #0
     ec6:	4b02      	ldr	r3, [pc, #8]	; (ed0 <ADC_Handler+0x10>)
     ec8:	4798      	blx	r3
}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	46bd      	mov	sp, r7
     ece:	bd80      	pop	{r7, pc}
     ed0:	00000d85 	.word	0x00000d85

00000ed4 <system_apb_clock_set_mask>:
{
     ed4:	b580      	push	{r7, lr}
     ed6:	b082      	sub	sp, #8
     ed8:	af00      	add	r7, sp, #0
     eda:	0002      	movs	r2, r0
     edc:	6039      	str	r1, [r7, #0]
     ede:	1dfb      	adds	r3, r7, #7
     ee0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	2b04      	cmp	r3, #4
     ee8:	d827      	bhi.n	f3a <system_apb_clock_set_mask+0x66>
     eea:	009a      	lsls	r2, r3, #2
     eec:	4b16      	ldr	r3, [pc, #88]	; (f48 <system_apb_clock_set_mask+0x74>)
     eee:	18d3      	adds	r3, r2, r3
     ef0:	681b      	ldr	r3, [r3, #0]
     ef2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     ef4:	4b15      	ldr	r3, [pc, #84]	; (f4c <system_apb_clock_set_mask+0x78>)
     ef6:	4a15      	ldr	r2, [pc, #84]	; (f4c <system_apb_clock_set_mask+0x78>)
     ef8:	6951      	ldr	r1, [r2, #20]
     efa:	683a      	ldr	r2, [r7, #0]
     efc:	430a      	orrs	r2, r1
     efe:	615a      	str	r2, [r3, #20]
			break;
     f00:	e01d      	b.n	f3e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     f02:	4b12      	ldr	r3, [pc, #72]	; (f4c <system_apb_clock_set_mask+0x78>)
     f04:	4a11      	ldr	r2, [pc, #68]	; (f4c <system_apb_clock_set_mask+0x78>)
     f06:	6991      	ldr	r1, [r2, #24]
     f08:	683a      	ldr	r2, [r7, #0]
     f0a:	430a      	orrs	r2, r1
     f0c:	619a      	str	r2, [r3, #24]
			break;
     f0e:	e016      	b.n	f3e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     f10:	4b0e      	ldr	r3, [pc, #56]	; (f4c <system_apb_clock_set_mask+0x78>)
     f12:	4a0e      	ldr	r2, [pc, #56]	; (f4c <system_apb_clock_set_mask+0x78>)
     f14:	69d1      	ldr	r1, [r2, #28]
     f16:	683a      	ldr	r2, [r7, #0]
     f18:	430a      	orrs	r2, r1
     f1a:	61da      	str	r2, [r3, #28]
			break;
     f1c:	e00f      	b.n	f3e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     f1e:	4b0b      	ldr	r3, [pc, #44]	; (f4c <system_apb_clock_set_mask+0x78>)
     f20:	4a0a      	ldr	r2, [pc, #40]	; (f4c <system_apb_clock_set_mask+0x78>)
     f22:	6a11      	ldr	r1, [r2, #32]
     f24:	683a      	ldr	r2, [r7, #0]
     f26:	430a      	orrs	r2, r1
     f28:	621a      	str	r2, [r3, #32]
			break;
     f2a:	e008      	b.n	f3e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     f2c:	4b07      	ldr	r3, [pc, #28]	; (f4c <system_apb_clock_set_mask+0x78>)
     f2e:	4a07      	ldr	r2, [pc, #28]	; (f4c <system_apb_clock_set_mask+0x78>)
     f30:	6a51      	ldr	r1, [r2, #36]	; 0x24
     f32:	683a      	ldr	r2, [r7, #0]
     f34:	430a      	orrs	r2, r1
     f36:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     f38:	e001      	b.n	f3e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     f3a:	2317      	movs	r3, #23
     f3c:	e000      	b.n	f40 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     f3e:	2300      	movs	r3, #0
}
     f40:	0018      	movs	r0, r3
     f42:	46bd      	mov	sp, r7
     f44:	b002      	add	sp, #8
     f46:	bd80      	pop	{r7, pc}
     f48:	00016488 	.word	0x00016488
     f4c:	40000400 	.word	0x40000400

00000f50 <aes_get_config_defaults>:
 *
 *  \param[out] config Pointer to an AES configuration structure
 */
void aes_get_config_defaults(
		struct aes_config *const config)
{
     f50:	b580      	push	{r7, lr}
     f52:	b082      	sub	sp, #8
     f54:	af00      	add	r7, sp, #0
     f56:	6078      	str	r0, [r7, #4]

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     f58:	687b      	ldr	r3, [r7, #4]
     f5a:	2201      	movs	r2, #1
     f5c:	701a      	strb	r2, [r3, #0]
	config->key_size = AES_KEY_SIZE_128;
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	2200      	movs	r2, #0
     f62:	705a      	strb	r2, [r3, #1]
	config->start_mode = AES_MANUAL_START;
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	2200      	movs	r2, #0
     f68:	709a      	strb	r2, [r3, #2]
	config->opmode= AES_ECB_MODE;
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	2200      	movs	r2, #0
     f6e:	70da      	strb	r2, [r3, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	2200      	movs	r2, #0
     f74:	711a      	strb	r2, [r3, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	220f      	movs	r2, #15
     f7a:	715a      	strb	r2, [r3, #5]
	config->enable_xor_key = false;
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	2200      	movs	r2, #0
     f80:	719a      	strb	r2, [r3, #6]
	config->enable_key_gen = false;
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	2200      	movs	r2, #0
     f86:	71da      	strb	r2, [r3, #7]
	config->lod = false;
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	2200      	movs	r2, #0
     f8c:	721a      	strb	r2, [r3, #8]
}
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	46bd      	mov	sp, r7
     f92:	b002      	add	sp, #8
     f94:	bd80      	pop	{r7, pc}
	...

00000f98 <aes_init>:
 */
void aes_init(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     f98:	b580      	push	{r7, lr}
     f9a:	b084      	sub	sp, #16
     f9c:	af00      	add	r7, sp, #0
     f9e:	60f8      	str	r0, [r7, #12]
     fa0:	60b9      	str	r1, [r7, #8]
     fa2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(config);
	Assert(module);

	/* Enable clock for AES */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_AES);
     fa4:	2380      	movs	r3, #128	; 0x80
     fa6:	019b      	lsls	r3, r3, #6
     fa8:	0019      	movs	r1, r3
     faa:	2002      	movs	r0, #2
     fac:	4b07      	ldr	r3, [pc, #28]	; (fcc <aes_init+0x34>)
     fae:	4798      	blx	r3

	/* Perform a software reset */
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     fb0:	68bb      	ldr	r3, [r7, #8]
     fb2:	2201      	movs	r2, #1
     fb4:	601a      	str	r2, [r3, #0]

	/* Initialize the AES with new configurations */
	aes_set_config(module,hw, config);
     fb6:	687a      	ldr	r2, [r7, #4]
     fb8:	68b9      	ldr	r1, [r7, #8]
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	0018      	movs	r0, r3
     fbe:	4b04      	ldr	r3, [pc, #16]	; (fd0 <aes_init+0x38>)
     fc0:	4798      	blx	r3
}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	46bd      	mov	sp, r7
     fc6:	b004      	add	sp, #16
     fc8:	bd80      	pop	{r7, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	00000ed5 	.word	0x00000ed5
     fd0:	00001025 	.word	0x00001025

00000fd4 <aes_enable>:
 * \brief Enable the AES module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void aes_enable(struct aes_module *const module)
{
     fd4:	b580      	push	{r7, lr}
     fd6:	b082      	sub	sp, #8
     fd8:	af00      	add	r7, sp, #0
     fda:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     fdc:	687b      	ldr	r3, [r7, #4]
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	687a      	ldr	r2, [r7, #4]
     fe2:	6812      	ldr	r2, [r2, #0]
     fe4:	6812      	ldr	r2, [r2, #0]
     fe6:	2102      	movs	r1, #2
     fe8:	430a      	orrs	r2, r1
     fea:	601a      	str	r2, [r3, #0]

}
     fec:	46c0      	nop			; (mov r8, r8)
     fee:	46bd      	mov	sp, r7
     ff0:	b002      	add	sp, #8
     ff2:	bd80      	pop	{r7, pc}

00000ff4 <aes_disable>:
/**
 * \brief Disable the AES module.
 * \param[in] module  Pointer to the software instance struct
 */
void aes_disable(struct aes_module *const module)
{
     ff4:	b580      	push	{r7, lr}
     ff6:	b082      	sub	sp, #8
     ff8:	af00      	add	r7, sp, #0
     ffa:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	2203      	movs	r2, #3
    1002:	715a      	strb	r2, [r3, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	2203      	movs	r2, #3
    100a:	71da      	strb	r2, [r3, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	687a      	ldr	r2, [r7, #4]
    1012:	6812      	ldr	r2, [r2, #0]
    1014:	6812      	ldr	r2, [r2, #0]
    1016:	2102      	movs	r1, #2
    1018:	438a      	bics	r2, r1
    101a:	601a      	str	r2, [r3, #0]
}
    101c:	46c0      	nop			; (mov r8, r8)
    101e:	46bd      	mov	sp, r7
    1020:	b002      	add	sp, #8
    1022:	bd80      	pop	{r7, pc}

00001024 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    1024:	b580      	push	{r7, lr}
    1026:	b086      	sub	sp, #24
    1028:	af00      	add	r7, sp, #0
    102a:	60f8      	str	r0, [r7, #12]
    102c:	60b9      	str	r1, [r7, #8]
    102e:	607a      	str	r2, [r7, #4]
	uint32_t ul_mode = 0;
    1030:	2300      	movs	r3, #0
    1032:	617b      	str	r3, [r7, #20]
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	78da      	ldrb	r2, [r3, #3]
    1038:	68fb      	ldr	r3, [r7, #12]
    103a:	711a      	strb	r2, [r3, #4]
	module->hw = hw;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	68ba      	ldr	r2, [r7, #8]
    1040:	601a      	str	r2, [r3, #0]
	module->key_size = config->key_size;
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	785a      	ldrb	r2, [r3, #1]
    1046:	68fb      	ldr	r3, [r7, #12]
    1048:	715a      	strb	r2, [r3, #5]
	module->cfb_size = config->cfb_size;
    104a:	687b      	ldr	r3, [r7, #4]
    104c:	791a      	ldrb	r2, [r3, #4]
    104e:	68fb      	ldr	r3, [r7, #12]
    1050:	719a      	strb	r2, [r3, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	781b      	ldrb	r3, [r3, #0]
    1056:	029a      	lsls	r2, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	789b      	ldrb	r3, [r3, #2]
    105c:	02db      	lsls	r3, r3, #11
    105e:	431a      	orrs	r2, r3
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    1060:	687b      	ldr	r3, [r7, #4]
    1062:	785b      	ldrb	r3, [r3, #1]
    1064:	021b      	lsls	r3, r3, #8
    1066:	431a      	orrs	r2, r3
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    1068:	687b      	ldr	r3, [r7, #4]
    106a:	78db      	ldrb	r3, [r3, #3]
    106c:	009b      	lsls	r3, r3, #2
    106e:	431a      	orrs	r2, r3
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	791b      	ldrb	r3, [r3, #4]
    1074:	015b      	lsls	r3, r3, #5
    1076:	4313      	orrs	r3, r2
    1078:	001a      	movs	r2, r3
			 | (AES_CTRLA_CTYPE(config->ctype))
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	795b      	ldrb	r3, [r3, #5]
    107e:	041b      	lsls	r3, r3, #16
    1080:	0019      	movs	r1, r3
    1082:	23f0      	movs	r3, #240	; 0xf0
    1084:	031b      	lsls	r3, r3, #12
    1086:	400b      	ands	r3, r1
    1088:	4313      	orrs	r3, r2
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    108a:	687a      	ldr	r2, [r7, #4]
    108c:	7992      	ldrb	r2, [r2, #6]
    108e:	0392      	lsls	r2, r2, #14
    1090:	4313      	orrs	r3, r2
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    1092:	687a      	ldr	r2, [r7, #4]
    1094:	79d2      	ldrb	r2, [r2, #7]
    1096:	0352      	lsls	r2, r2, #13
    1098:	4313      	orrs	r3, r2
			 | (config->lod << AES_CTRLA_LOD_Pos);
    109a:	687a      	ldr	r2, [r7, #4]
    109c:	7a12      	ldrb	r2, [r2, #8]
    109e:	0312      	lsls	r2, r2, #12
    10a0:	4313      	orrs	r3, r2
	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    10a2:	697a      	ldr	r2, [r7, #20]
    10a4:	4313      	orrs	r3, r2
    10a6:	617b      	str	r3, [r7, #20]
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    10a8:	68bb      	ldr	r3, [r7, #8]
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	2202      	movs	r2, #2
    10ae:	4013      	ands	r3, r2
    10b0:	d00b      	beq.n	10ca <aes_set_config+0xa6>
		aes_disable(module);
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	0018      	movs	r0, r3
    10b6:	4b08      	ldr	r3, [pc, #32]	; (10d8 <aes_set_config+0xb4>)
    10b8:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    10ba:	68bb      	ldr	r3, [r7, #8]
    10bc:	697a      	ldr	r2, [r7, #20]
    10be:	601a      	str	r2, [r3, #0]
		aes_enable(module);
    10c0:	68fb      	ldr	r3, [r7, #12]
    10c2:	0018      	movs	r0, r3
    10c4:	4b05      	ldr	r3, [pc, #20]	; (10dc <aes_set_config+0xb8>)
    10c6:	4798      	blx	r3
	} else {
		hw->CTRLA.reg = ul_mode;
	}
}
    10c8:	e002      	b.n	10d0 <aes_set_config+0xac>
		hw->CTRLA.reg = ul_mode;
    10ca:	68bb      	ldr	r3, [r7, #8]
    10cc:	697a      	ldr	r2, [r7, #20]
    10ce:	601a      	str	r2, [r3, #0]
}
    10d0:	46c0      	nop			; (mov r8, r8)
    10d2:	46bd      	mov	sp, r7
    10d4:	b006      	add	sp, #24
    10d6:	bd80      	pop	{r7, pc}
    10d8:	00000ff5 	.word	0x00000ff5
    10dc:	00000fd5 	.word	0x00000fd5

000010e0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    10e0:	b580      	push	{r7, lr}
    10e2:	b084      	sub	sp, #16
    10e4:	af00      	add	r7, sp, #0
    10e6:	0002      	movs	r2, r0
    10e8:	1dfb      	adds	r3, r7, #7
    10ea:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    10ec:	230f      	movs	r3, #15
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	1dfa      	adds	r2, r7, #7
    10f2:	7812      	ldrb	r2, [r2, #0]
    10f4:	0952      	lsrs	r2, r2, #5
    10f6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    10f8:	230f      	movs	r3, #15
    10fa:	18fb      	adds	r3, r7, r3
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	2b00      	cmp	r3, #0
    1100:	d10c      	bne.n	111c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1102:	4b09      	ldr	r3, [pc, #36]	; (1128 <_extint_get_eic_from_channel+0x48>)
    1104:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    1106:	230f      	movs	r3, #15
    1108:	18fb      	adds	r3, r7, r3
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	009b      	lsls	r3, r3, #2
    110e:	2210      	movs	r2, #16
    1110:	4694      	mov	ip, r2
    1112:	44bc      	add	ip, r7
    1114:	4463      	add	r3, ip
    1116:	3b08      	subs	r3, #8
    1118:	681b      	ldr	r3, [r3, #0]
    111a:	e000      	b.n	111e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    111c:	2300      	movs	r3, #0
	}
}
    111e:	0018      	movs	r0, r3
    1120:	46bd      	mov	sp, r7
    1122:	b004      	add	sp, #16
    1124:	bd80      	pop	{r7, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	40002400 	.word	0x40002400

0000112c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    112c:	b580      	push	{r7, lr}
    112e:	b084      	sub	sp, #16
    1130:	af00      	add	r7, sp, #0
    1132:	0002      	movs	r2, r0
    1134:	1dfb      	adds	r3, r7, #7
    1136:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    1138:	1dfb      	adds	r3, r7, #7
    113a:	781b      	ldrb	r3, [r3, #0]
    113c:	0018      	movs	r0, r3
    113e:	4b0b      	ldr	r3, [pc, #44]	; (116c <extint_chan_is_detected+0x40>)
    1140:	4798      	blx	r3
    1142:	0003      	movs	r3, r0
    1144:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    1146:	1dfb      	adds	r3, r7, #7
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	221f      	movs	r2, #31
    114c:	4013      	ands	r3, r2
    114e:	2201      	movs	r2, #1
    1150:	409a      	lsls	r2, r3
    1152:	0013      	movs	r3, r2
    1154:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	695b      	ldr	r3, [r3, #20]
    115a:	68ba      	ldr	r2, [r7, #8]
    115c:	4013      	ands	r3, r2
    115e:	1e5a      	subs	r2, r3, #1
    1160:	4193      	sbcs	r3, r2
    1162:	b2db      	uxtb	r3, r3
}
    1164:	0018      	movs	r0, r3
    1166:	46bd      	mov	sp, r7
    1168:	b004      	add	sp, #16
    116a:	bd80      	pop	{r7, pc}
    116c:	000010e1 	.word	0x000010e1

00001170 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    1170:	b580      	push	{r7, lr}
    1172:	b084      	sub	sp, #16
    1174:	af00      	add	r7, sp, #0
    1176:	0002      	movs	r2, r0
    1178:	1dfb      	adds	r3, r7, #7
    117a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    117c:	1dfb      	adds	r3, r7, #7
    117e:	781b      	ldrb	r3, [r3, #0]
    1180:	0018      	movs	r0, r3
    1182:	4b09      	ldr	r3, [pc, #36]	; (11a8 <extint_chan_clear_detected+0x38>)
    1184:	4798      	blx	r3
    1186:	0003      	movs	r3, r0
    1188:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    118a:	1dfb      	adds	r3, r7, #7
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	221f      	movs	r2, #31
    1190:	4013      	ands	r3, r2
    1192:	2201      	movs	r2, #1
    1194:	409a      	lsls	r2, r3
    1196:	0013      	movs	r3, r2
    1198:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	68ba      	ldr	r2, [r7, #8]
    119e:	615a      	str	r2, [r3, #20]
}
    11a0:	46c0      	nop			; (mov r8, r8)
    11a2:	46bd      	mov	sp, r7
    11a4:	b004      	add	sp, #16
    11a6:	bd80      	pop	{r7, pc}
    11a8:	000010e1 	.word	0x000010e1

000011ac <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    11ac:	b580      	push	{r7, lr}
    11ae:	b082      	sub	sp, #8
    11b0:	af00      	add	r7, sp, #0
    11b2:	6078      	str	r0, [r7, #4]
    11b4:	0008      	movs	r0, r1
    11b6:	0011      	movs	r1, r2
    11b8:	1cfb      	adds	r3, r7, #3
    11ba:	1c02      	adds	r2, r0, #0
    11bc:	701a      	strb	r2, [r3, #0]
    11be:	1cbb      	adds	r3, r7, #2
    11c0:	1c0a      	adds	r2, r1, #0
    11c2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    11c4:	1cbb      	adds	r3, r7, #2
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d001      	beq.n	11d0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11cc:	2317      	movs	r3, #23
    11ce:	e019      	b.n	1204 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    11d0:	1cfb      	adds	r3, r7, #3
    11d2:	781a      	ldrb	r2, [r3, #0]
    11d4:	4b0d      	ldr	r3, [pc, #52]	; (120c <extint_register_callback+0x60>)
    11d6:	0092      	lsls	r2, r2, #2
    11d8:	58d3      	ldr	r3, [r2, r3]
    11da:	2b00      	cmp	r3, #0
    11dc:	d107      	bne.n	11ee <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    11de:	1cfb      	adds	r3, r7, #3
    11e0:	781a      	ldrb	r2, [r3, #0]
    11e2:	4b0a      	ldr	r3, [pc, #40]	; (120c <extint_register_callback+0x60>)
    11e4:	0092      	lsls	r2, r2, #2
    11e6:	6879      	ldr	r1, [r7, #4]
    11e8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    11ea:	2300      	movs	r3, #0
    11ec:	e00a      	b.n	1204 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    11ee:	1cfb      	adds	r3, r7, #3
    11f0:	781a      	ldrb	r2, [r3, #0]
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <extint_register_callback+0x60>)
    11f4:	0092      	lsls	r2, r2, #2
    11f6:	58d2      	ldr	r2, [r2, r3]
    11f8:	687b      	ldr	r3, [r7, #4]
    11fa:	429a      	cmp	r2, r3
    11fc:	d101      	bne.n	1202 <extint_register_callback+0x56>
		return STATUS_OK;
    11fe:	2300      	movs	r3, #0
    1200:	e000      	b.n	1204 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1202:	231d      	movs	r3, #29
}
    1204:	0018      	movs	r0, r3
    1206:	46bd      	mov	sp, r7
    1208:	b002      	add	sp, #8
    120a:	bd80      	pop	{r7, pc}
    120c:	20000f0c 	.word	0x20000f0c

00001210 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    1210:	b580      	push	{r7, lr}
    1212:	b084      	sub	sp, #16
    1214:	af00      	add	r7, sp, #0
    1216:	0002      	movs	r2, r0
    1218:	1dfb      	adds	r3, r7, #7
    121a:	701a      	strb	r2, [r3, #0]
    121c:	1dbb      	adds	r3, r7, #6
    121e:	1c0a      	adds	r2, r1, #0
    1220:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1222:	1dbb      	adds	r3, r7, #6
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d10e      	bne.n	1248 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    122a:	1dfb      	adds	r3, r7, #7
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	0018      	movs	r0, r3
    1230:	4b08      	ldr	r3, [pc, #32]	; (1254 <extint_chan_enable_callback+0x44>)
    1232:	4798      	blx	r3
    1234:	0003      	movs	r3, r0
    1236:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    1238:	1dfb      	adds	r3, r7, #7
    123a:	781b      	ldrb	r3, [r3, #0]
    123c:	2201      	movs	r2, #1
    123e:	409a      	lsls	r2, r3
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1244:	2300      	movs	r3, #0
    1246:	e000      	b.n	124a <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    1248:	2317      	movs	r3, #23
}
    124a:	0018      	movs	r0, r3
    124c:	46bd      	mov	sp, r7
    124e:	b004      	add	sp, #16
    1250:	bd80      	pop	{r7, pc}
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	000010e1 	.word	0x000010e1

00001258 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    1258:	b580      	push	{r7, lr}
    125a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    125c:	4b15      	ldr	r3, [pc, #84]	; (12b4 <EIC_Handler+0x5c>)
    125e:	2200      	movs	r2, #0
    1260:	701a      	strb	r2, [r3, #0]
    1262:	e020      	b.n	12a6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    1264:	4b13      	ldr	r3, [pc, #76]	; (12b4 <EIC_Handler+0x5c>)
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	0018      	movs	r0, r3
    126a:	4b13      	ldr	r3, [pc, #76]	; (12b8 <EIC_Handler+0x60>)
    126c:	4798      	blx	r3
    126e:	1e03      	subs	r3, r0, #0
    1270:	d013      	beq.n	129a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    1272:	4b10      	ldr	r3, [pc, #64]	; (12b4 <EIC_Handler+0x5c>)
    1274:	781b      	ldrb	r3, [r3, #0]
    1276:	0018      	movs	r0, r3
    1278:	4b10      	ldr	r3, [pc, #64]	; (12bc <EIC_Handler+0x64>)
    127a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    127c:	4b0d      	ldr	r3, [pc, #52]	; (12b4 <EIC_Handler+0x5c>)
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	001a      	movs	r2, r3
    1282:	4b0f      	ldr	r3, [pc, #60]	; (12c0 <EIC_Handler+0x68>)
    1284:	0092      	lsls	r2, r2, #2
    1286:	58d3      	ldr	r3, [r2, r3]
    1288:	2b00      	cmp	r3, #0
    128a:	d006      	beq.n	129a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    128c:	4b09      	ldr	r3, [pc, #36]	; (12b4 <EIC_Handler+0x5c>)
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	001a      	movs	r2, r3
    1292:	4b0b      	ldr	r3, [pc, #44]	; (12c0 <EIC_Handler+0x68>)
    1294:	0092      	lsls	r2, r2, #2
    1296:	58d3      	ldr	r3, [r2, r3]
    1298:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    129a:	4b06      	ldr	r3, [pc, #24]	; (12b4 <EIC_Handler+0x5c>)
    129c:	781b      	ldrb	r3, [r3, #0]
    129e:	3301      	adds	r3, #1
    12a0:	b2da      	uxtb	r2, r3
    12a2:	4b04      	ldr	r3, [pc, #16]	; (12b4 <EIC_Handler+0x5c>)
    12a4:	701a      	strb	r2, [r3, #0]
    12a6:	4b03      	ldr	r3, [pc, #12]	; (12b4 <EIC_Handler+0x5c>)
    12a8:	781b      	ldrb	r3, [r3, #0]
    12aa:	2b0f      	cmp	r3, #15
    12ac:	d9da      	bls.n	1264 <EIC_Handler+0xc>
			}
		}
	}
}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	46bd      	mov	sp, r7
    12b2:	bd80      	pop	{r7, pc}
    12b4:	20000f08 	.word	0x20000f08
    12b8:	0000112d 	.word	0x0000112d
    12bc:	00001171 	.word	0x00001171
    12c0:	20000f0c 	.word	0x20000f0c

000012c4 <system_apb_clock_set_mask>:
{
    12c4:	b580      	push	{r7, lr}
    12c6:	b082      	sub	sp, #8
    12c8:	af00      	add	r7, sp, #0
    12ca:	0002      	movs	r2, r0
    12cc:	6039      	str	r1, [r7, #0]
    12ce:	1dfb      	adds	r3, r7, #7
    12d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    12d2:	1dfb      	adds	r3, r7, #7
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b04      	cmp	r3, #4
    12d8:	d827      	bhi.n	132a <system_apb_clock_set_mask+0x66>
    12da:	009a      	lsls	r2, r3, #2
    12dc:	4b16      	ldr	r3, [pc, #88]	; (1338 <system_apb_clock_set_mask+0x74>)
    12de:	18d3      	adds	r3, r2, r3
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    12e4:	4b15      	ldr	r3, [pc, #84]	; (133c <system_apb_clock_set_mask+0x78>)
    12e6:	4a15      	ldr	r2, [pc, #84]	; (133c <system_apb_clock_set_mask+0x78>)
    12e8:	6951      	ldr	r1, [r2, #20]
    12ea:	683a      	ldr	r2, [r7, #0]
    12ec:	430a      	orrs	r2, r1
    12ee:	615a      	str	r2, [r3, #20]
			break;
    12f0:	e01d      	b.n	132e <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    12f2:	4b12      	ldr	r3, [pc, #72]	; (133c <system_apb_clock_set_mask+0x78>)
    12f4:	4a11      	ldr	r2, [pc, #68]	; (133c <system_apb_clock_set_mask+0x78>)
    12f6:	6991      	ldr	r1, [r2, #24]
    12f8:	683a      	ldr	r2, [r7, #0]
    12fa:	430a      	orrs	r2, r1
    12fc:	619a      	str	r2, [r3, #24]
			break;
    12fe:	e016      	b.n	132e <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1300:	4b0e      	ldr	r3, [pc, #56]	; (133c <system_apb_clock_set_mask+0x78>)
    1302:	4a0e      	ldr	r2, [pc, #56]	; (133c <system_apb_clock_set_mask+0x78>)
    1304:	69d1      	ldr	r1, [r2, #28]
    1306:	683a      	ldr	r2, [r7, #0]
    1308:	430a      	orrs	r2, r1
    130a:	61da      	str	r2, [r3, #28]
			break;
    130c:	e00f      	b.n	132e <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    130e:	4b0b      	ldr	r3, [pc, #44]	; (133c <system_apb_clock_set_mask+0x78>)
    1310:	4a0a      	ldr	r2, [pc, #40]	; (133c <system_apb_clock_set_mask+0x78>)
    1312:	6a11      	ldr	r1, [r2, #32]
    1314:	683a      	ldr	r2, [r7, #0]
    1316:	430a      	orrs	r2, r1
    1318:	621a      	str	r2, [r3, #32]
			break;
    131a:	e008      	b.n	132e <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    131c:	4b07      	ldr	r3, [pc, #28]	; (133c <system_apb_clock_set_mask+0x78>)
    131e:	4a07      	ldr	r2, [pc, #28]	; (133c <system_apb_clock_set_mask+0x78>)
    1320:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1322:	683a      	ldr	r2, [r7, #0]
    1324:	430a      	orrs	r2, r1
    1326:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1328:	e001      	b.n	132e <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    132a:	2317      	movs	r3, #23
    132c:	e000      	b.n	1330 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    132e:	2300      	movs	r3, #0
}
    1330:	0018      	movs	r0, r3
    1332:	46bd      	mov	sp, r7
    1334:	b002      	add	sp, #8
    1336:	bd80      	pop	{r7, pc}
    1338:	0001649c 	.word	0x0001649c
    133c:	40000400 	.word	0x40000400

00001340 <system_pinmux_get_config_defaults>:
{
    1340:	b580      	push	{r7, lr}
    1342:	b082      	sub	sp, #8
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	2280      	movs	r2, #128	; 0x80
    134c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    134e:	687b      	ldr	r3, [r7, #4]
    1350:	2200      	movs	r2, #0
    1352:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1354:	687b      	ldr	r3, [r7, #4]
    1356:	2201      	movs	r2, #1
    1358:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    135a:	687b      	ldr	r3, [r7, #4]
    135c:	2200      	movs	r2, #0
    135e:	70da      	strb	r2, [r3, #3]
}
    1360:	46c0      	nop			; (mov r8, r8)
    1362:	46bd      	mov	sp, r7
    1364:	b002      	add	sp, #8
    1366:	bd80      	pop	{r7, pc}

00001368 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1368:	b580      	push	{r7, lr}
    136a:	b082      	sub	sp, #8
    136c:	af00      	add	r7, sp, #0
    136e:	0002      	movs	r2, r0
    1370:	1dfb      	adds	r3, r7, #7
    1372:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1374:	4b06      	ldr	r3, [pc, #24]	; (1390 <system_interrupt_enable+0x28>)
    1376:	1dfa      	adds	r2, r7, #7
    1378:	7812      	ldrb	r2, [r2, #0]
    137a:	0011      	movs	r1, r2
    137c:	221f      	movs	r2, #31
    137e:	400a      	ands	r2, r1
    1380:	2101      	movs	r1, #1
    1382:	4091      	lsls	r1, r2
    1384:	000a      	movs	r2, r1
    1386:	601a      	str	r2, [r3, #0]
}
    1388:	46c0      	nop			; (mov r8, r8)
    138a:	46bd      	mov	sp, r7
    138c:	b002      	add	sp, #8
    138e:	bd80      	pop	{r7, pc}
    1390:	e000e100 	.word	0xe000e100

00001394 <_extint_get_eic_from_channel>:
{
    1394:	b580      	push	{r7, lr}
    1396:	b084      	sub	sp, #16
    1398:	af00      	add	r7, sp, #0
    139a:	0002      	movs	r2, r0
    139c:	1dfb      	adds	r3, r7, #7
    139e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    13a0:	230f      	movs	r3, #15
    13a2:	18fb      	adds	r3, r7, r3
    13a4:	1dfa      	adds	r2, r7, #7
    13a6:	7812      	ldrb	r2, [r2, #0]
    13a8:	0952      	lsrs	r2, r2, #5
    13aa:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    13ac:	230f      	movs	r3, #15
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	2b00      	cmp	r3, #0
    13b4:	d10c      	bne.n	13d0 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    13b6:	4b09      	ldr	r3, [pc, #36]	; (13dc <_extint_get_eic_from_channel+0x48>)
    13b8:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    13ba:	230f      	movs	r3, #15
    13bc:	18fb      	adds	r3, r7, r3
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	009b      	lsls	r3, r3, #2
    13c2:	2210      	movs	r2, #16
    13c4:	4694      	mov	ip, r2
    13c6:	44bc      	add	ip, r7
    13c8:	4463      	add	r3, ip
    13ca:	3b08      	subs	r3, #8
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	e000      	b.n	13d2 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    13d0:	2300      	movs	r3, #0
}
    13d2:	0018      	movs	r0, r3
    13d4:	46bd      	mov	sp, r7
    13d6:	b004      	add	sp, #16
    13d8:	bd80      	pop	{r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	40002400 	.word	0x40002400

000013e0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    13e6:	4b15      	ldr	r3, [pc, #84]	; (143c <extint_is_syncing+0x5c>)
    13e8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    13ea:	2300      	movs	r3, #0
    13ec:	607b      	str	r3, [r7, #4]
    13ee:	e01c      	b.n	142a <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	009b      	lsls	r3, r3, #2
    13f4:	2208      	movs	r2, #8
    13f6:	4694      	mov	ip, r2
    13f8:	44bc      	add	ip, r7
    13fa:	4463      	add	r3, ip
    13fc:	3b08      	subs	r3, #8
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	685b      	ldr	r3, [r3, #4]
    1402:	2202      	movs	r2, #2
    1404:	4013      	ands	r3, r2
    1406:	d10b      	bne.n	1420 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	009b      	lsls	r3, r3, #2
    140c:	2208      	movs	r2, #8
    140e:	4694      	mov	ip, r2
    1410:	44bc      	add	ip, r7
    1412:	4463      	add	r3, ip
    1414:	3b08      	subs	r3, #8
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	685b      	ldr	r3, [r3, #4]
    141a:	2201      	movs	r2, #1
    141c:	4013      	ands	r3, r2
    141e:	d001      	beq.n	1424 <extint_is_syncing+0x44>
			return true;
    1420:	2301      	movs	r3, #1
    1422:	e006      	b.n	1432 <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	3301      	adds	r3, #1
    1428:	607b      	str	r3, [r7, #4]
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	2b00      	cmp	r3, #0
    142e:	d0df      	beq.n	13f0 <extint_is_syncing+0x10>
		}
	}
	return false;
    1430:	2300      	movs	r3, #0
}
    1432:	0018      	movs	r0, r3
    1434:	46bd      	mov	sp, r7
    1436:	b002      	add	sp, #8
    1438:	bd80      	pop	{r7, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	40002400 	.word	0x40002400

00001440 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1440:	b580      	push	{r7, lr}
    1442:	b084      	sub	sp, #16
    1444:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1446:	4b2e      	ldr	r3, [pc, #184]	; (1500 <_system_extint_init+0xc0>)
    1448:	603b      	str	r3, [r7, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
    144a:	2380      	movs	r3, #128	; 0x80
    144c:	009b      	lsls	r3, r3, #2
    144e:	0019      	movs	r1, r3
    1450:	2000      	movs	r0, #0
    1452:	4b2c      	ldr	r3, [pc, #176]	; (1504 <_system_extint_init+0xc4>)
    1454:	4798      	blx	r3
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1456:	2300      	movs	r3, #0
    1458:	60fb      	str	r3, [r7, #12]
    145a:	e018      	b.n	148e <_system_extint_init+0x4e>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	009b      	lsls	r3, r3, #2
    1460:	2210      	movs	r2, #16
    1462:	4694      	mov	ip, r2
    1464:	44bc      	add	ip, r7
    1466:	4463      	add	r3, ip
    1468:	3b10      	subs	r3, #16
    146a:	681a      	ldr	r2, [r3, #0]
    146c:	68fb      	ldr	r3, [r7, #12]
    146e:	009b      	lsls	r3, r3, #2
    1470:	2110      	movs	r1, #16
    1472:	468c      	mov	ip, r1
    1474:	44bc      	add	ip, r7
    1476:	4463      	add	r3, ip
    1478:	3b10      	subs	r3, #16
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	781b      	ldrb	r3, [r3, #0]
    147e:	b2db      	uxtb	r3, r3
    1480:	2101      	movs	r1, #1
    1482:	430b      	orrs	r3, r1
    1484:	b2db      	uxtb	r3, r3
    1486:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	3301      	adds	r3, #1
    148c:	60fb      	str	r3, [r7, #12]
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	2b00      	cmp	r3, #0
    1492:	d0e3      	beq.n	145c <_system_extint_init+0x1c>
	}

	while (extint_is_syncing()) {
    1494:	46c0      	nop			; (mov r8, r8)
    1496:	4b1c      	ldr	r3, [pc, #112]	; (1508 <_system_extint_init+0xc8>)
    1498:	4798      	blx	r3
    149a:	1e03      	subs	r3, r0, #0
    149c:	d1fb      	bne.n	1496 <_system_extint_init+0x56>
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    149e:	2300      	movs	r3, #0
    14a0:	60bb      	str	r3, [r7, #8]
    14a2:	e00e      	b.n	14c2 <_system_extint_init+0x82>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    14a4:	68bb      	ldr	r3, [r7, #8]
    14a6:	009b      	lsls	r3, r3, #2
    14a8:	2210      	movs	r2, #16
    14aa:	4694      	mov	ip, r2
    14ac:	44bc      	add	ip, r7
    14ae:	4463      	add	r3, ip
    14b0:	3b10      	subs	r3, #16
    14b2:	681a      	ldr	r2, [r3, #0]
    14b4:	7813      	ldrb	r3, [r2, #0]
    14b6:	2110      	movs	r1, #16
    14b8:	430b      	orrs	r3, r1
    14ba:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    14bc:	68bb      	ldr	r3, [r7, #8]
    14be:	3301      	adds	r3, #1
    14c0:	60bb      	str	r3, [r7, #8]
    14c2:	68bb      	ldr	r3, [r7, #8]
    14c4:	2b00      	cmp	r3, #0
    14c6:	d0ed      	beq.n	14a4 <_system_extint_init+0x64>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    14c8:	1dfb      	adds	r3, r7, #7
    14ca:	2200      	movs	r2, #0
    14cc:	701a      	strb	r2, [r3, #0]
    14ce:	e00a      	b.n	14e6 <_system_extint_init+0xa6>
		_extint_dev.callbacks[j] = NULL;
    14d0:	1dfb      	adds	r3, r7, #7
    14d2:	781a      	ldrb	r2, [r3, #0]
    14d4:	4b0d      	ldr	r3, [pc, #52]	; (150c <_system_extint_init+0xcc>)
    14d6:	0092      	lsls	r2, r2, #2
    14d8:	2100      	movs	r1, #0
    14da:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    14dc:	1dfb      	adds	r3, r7, #7
    14de:	781a      	ldrb	r2, [r3, #0]
    14e0:	1dfb      	adds	r3, r7, #7
    14e2:	3201      	adds	r2, #1
    14e4:	701a      	strb	r2, [r3, #0]
    14e6:	1dfb      	adds	r3, r7, #7
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	2b0f      	cmp	r3, #15
    14ec:	d9f0      	bls.n	14d0 <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    14ee:	2003      	movs	r0, #3
    14f0:	4b07      	ldr	r3, [pc, #28]	; (1510 <_system_extint_init+0xd0>)
    14f2:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    14f4:	4b07      	ldr	r3, [pc, #28]	; (1514 <_system_extint_init+0xd4>)
    14f6:	4798      	blx	r3
}
    14f8:	46c0      	nop			; (mov r8, r8)
    14fa:	46bd      	mov	sp, r7
    14fc:	b004      	add	sp, #16
    14fe:	bd80      	pop	{r7, pc}
    1500:	40002400 	.word	0x40002400
    1504:	000012c5 	.word	0x000012c5
    1508:	000013e1 	.word	0x000013e1
    150c:	20000f0c 	.word	0x20000f0c
    1510:	00001369 	.word	0x00001369
    1514:	00001519 	.word	0x00001519

00001518 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    1518:	b580      	push	{r7, lr}
    151a:	b082      	sub	sp, #8
    151c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    151e:	4b15      	ldr	r3, [pc, #84]	; (1574 <_extint_enable+0x5c>)
    1520:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1522:	2300      	movs	r3, #0
    1524:	607b      	str	r3, [r7, #4]
    1526:	e018      	b.n	155a <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	009b      	lsls	r3, r3, #2
    152c:	2208      	movs	r2, #8
    152e:	4694      	mov	ip, r2
    1530:	44bc      	add	ip, r7
    1532:	4463      	add	r3, ip
    1534:	3b08      	subs	r3, #8
    1536:	681a      	ldr	r2, [r3, #0]
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	009b      	lsls	r3, r3, #2
    153c:	2108      	movs	r1, #8
    153e:	468c      	mov	ip, r1
    1540:	44bc      	add	ip, r7
    1542:	4463      	add	r3, ip
    1544:	3b08      	subs	r3, #8
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	b2db      	uxtb	r3, r3
    154c:	2102      	movs	r1, #2
    154e:	430b      	orrs	r3, r1
    1550:	b2db      	uxtb	r3, r3
    1552:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	3301      	adds	r3, #1
    1558:	607b      	str	r3, [r7, #4]
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	2b00      	cmp	r3, #0
    155e:	d0e3      	beq.n	1528 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    1560:	46c0      	nop			; (mov r8, r8)
    1562:	4b05      	ldr	r3, [pc, #20]	; (1578 <_extint_enable+0x60>)
    1564:	4798      	blx	r3
    1566:	1e03      	subs	r3, r0, #0
    1568:	d1fb      	bne.n	1562 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	46bd      	mov	sp, r7
    156e:	b002      	add	sp, #8
    1570:	bd80      	pop	{r7, pc}
    1572:	46c0      	nop			; (mov r8, r8)
    1574:	40002400 	.word	0x40002400
    1578:	000013e1 	.word	0x000013e1

0000157c <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
    157c:	b580      	push	{r7, lr}
    157e:	b082      	sub	sp, #8
    1580:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1582:	4b15      	ldr	r3, [pc, #84]	; (15d8 <_extint_disable+0x5c>)
    1584:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1586:	2300      	movs	r3, #0
    1588:	607b      	str	r3, [r7, #4]
    158a:	e018      	b.n	15be <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	009b      	lsls	r3, r3, #2
    1590:	2208      	movs	r2, #8
    1592:	4694      	mov	ip, r2
    1594:	44bc      	add	ip, r7
    1596:	4463      	add	r3, ip
    1598:	3b08      	subs	r3, #8
    159a:	681a      	ldr	r2, [r3, #0]
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	009b      	lsls	r3, r3, #2
    15a0:	2108      	movs	r1, #8
    15a2:	468c      	mov	ip, r1
    15a4:	44bc      	add	ip, r7
    15a6:	4463      	add	r3, ip
    15a8:	3b08      	subs	r3, #8
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	781b      	ldrb	r3, [r3, #0]
    15ae:	b2db      	uxtb	r3, r3
    15b0:	2102      	movs	r1, #2
    15b2:	438b      	bics	r3, r1
    15b4:	b2db      	uxtb	r3, r3
    15b6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    15b8:	687b      	ldr	r3, [r7, #4]
    15ba:	3301      	adds	r3, #1
    15bc:	607b      	str	r3, [r7, #4]
    15be:	687b      	ldr	r3, [r7, #4]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d0e3      	beq.n	158c <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
    15c4:	46c0      	nop			; (mov r8, r8)
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <_extint_disable+0x60>)
    15c8:	4798      	blx	r3
    15ca:	1e03      	subs	r3, r0, #0
    15cc:	d1fb      	bne.n	15c6 <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	46bd      	mov	sp, r7
    15d2:	b002      	add	sp, #8
    15d4:	bd80      	pop	{r7, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	40002400 	.word	0x40002400
    15dc:	000013e1 	.word	0x000013e1

000015e0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	b082      	sub	sp, #8
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    15e8:	687b      	ldr	r3, [r7, #4]
    15ea:	2200      	movs	r2, #0
    15ec:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	2200      	movs	r2, #0
    15f2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	2201      	movs	r2, #1
    15f8:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	2200      	movs	r2, #0
    15fe:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	2202      	movs	r2, #2
    1604:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	2200      	movs	r2, #0
    160a:	725a      	strb	r2, [r3, #9]
}
    160c:	46c0      	nop			; (mov r8, r8)
    160e:	46bd      	mov	sp, r7
    1610:	b002      	add	sp, #8
    1612:	bd80      	pop	{r7, pc}

00001614 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1614:	b580      	push	{r7, lr}
    1616:	b086      	sub	sp, #24
    1618:	af00      	add	r7, sp, #0
    161a:	0002      	movs	r2, r0
    161c:	6039      	str	r1, [r7, #0]
    161e:	1dfb      	adds	r3, r7, #7
    1620:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    1622:	4b3c      	ldr	r3, [pc, #240]	; (1714 <extint_chan_set_config+0x100>)
    1624:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1626:	2308      	movs	r3, #8
    1628:	18fb      	adds	r3, r7, r3
    162a:	0018      	movs	r0, r3
    162c:	4b3a      	ldr	r3, [pc, #232]	; (1718 <extint_chan_set_config+0x104>)
    162e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    1630:	683b      	ldr	r3, [r7, #0]
    1632:	685b      	ldr	r3, [r3, #4]
    1634:	b2da      	uxtb	r2, r3
    1636:	2308      	movs	r3, #8
    1638:	18fb      	adds	r3, r7, r3
    163a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    163c:	2308      	movs	r3, #8
    163e:	18fb      	adds	r3, r7, r3
    1640:	2200      	movs	r2, #0
    1642:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1644:	683b      	ldr	r3, [r7, #0]
    1646:	7a1a      	ldrb	r2, [r3, #8]
    1648:	2308      	movs	r3, #8
    164a:	18fb      	adds	r3, r7, r3
    164c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    164e:	683b      	ldr	r3, [r7, #0]
    1650:	681b      	ldr	r3, [r3, #0]
    1652:	b2db      	uxtb	r3, r3
    1654:	2208      	movs	r2, #8
    1656:	18ba      	adds	r2, r7, r2
    1658:	0011      	movs	r1, r2
    165a:	0018      	movs	r0, r3
    165c:	4b2f      	ldr	r3, [pc, #188]	; (171c <extint_chan_set_config+0x108>)
    165e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    1660:	1dfb      	adds	r3, r7, #7
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	0018      	movs	r0, r3
    1666:	4b2e      	ldr	r3, [pc, #184]	; (1720 <extint_chan_set_config+0x10c>)
    1668:	4798      	blx	r3
    166a:	0003      	movs	r3, r0
    166c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    166e:	1dfb      	adds	r3, r7, #7
    1670:	781b      	ldrb	r3, [r3, #0]
    1672:	2207      	movs	r2, #7
    1674:	4013      	ands	r3, r2
    1676:	009b      	lsls	r3, r3, #2
    1678:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    167a:	683b      	ldr	r3, [r7, #0]
    167c:	7adb      	ldrb	r3, [r3, #11]
    167e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    1680:	683b      	ldr	r3, [r7, #0]
    1682:	7a9b      	ldrb	r3, [r3, #10]
    1684:	2b00      	cmp	r3, #0
    1686:	d003      	beq.n	1690 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
    1688:	697b      	ldr	r3, [r7, #20]
    168a:	2208      	movs	r2, #8
    168c:	4313      	orrs	r3, r2
    168e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    1690:	1dfb      	adds	r3, r7, #7
    1692:	781b      	ldrb	r3, [r3, #0]
    1694:	08db      	lsrs	r3, r3, #3
    1696:	b2db      	uxtb	r3, r3
    1698:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    169a:	1dfb      	adds	r3, r7, #7
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	08db      	lsrs	r3, r3, #3
    16a0:	b2db      	uxtb	r3, r3
    16a2:	693a      	ldr	r2, [r7, #16]
    16a4:	3306      	adds	r3, #6
    16a6:	009b      	lsls	r3, r3, #2
    16a8:	18d3      	adds	r3, r2, r3
    16aa:	3304      	adds	r3, #4
    16ac:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    16ae:	210f      	movs	r1, #15
    16b0:	68fa      	ldr	r2, [r7, #12]
    16b2:	4091      	lsls	r1, r2
    16b4:	000a      	movs	r2, r1
    16b6:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    16b8:	401a      	ands	r2, r3
			(new_config << config_pos);
    16ba:	6979      	ldr	r1, [r7, #20]
    16bc:	68fb      	ldr	r3, [r7, #12]
    16be:	4099      	lsls	r1, r3
    16c0:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    16c2:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    16c4:	6939      	ldr	r1, [r7, #16]
    16c6:	1d83      	adds	r3, r0, #6
    16c8:	009b      	lsls	r3, r3, #2
    16ca:	18cb      	adds	r3, r1, r3
    16cc:	3304      	adds	r3, #4
    16ce:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    16d0:	683b      	ldr	r3, [r7, #0]
    16d2:	7a5b      	ldrb	r3, [r3, #9]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d00a      	beq.n	16ee <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    16d8:	693b      	ldr	r3, [r7, #16]
    16da:	699a      	ldr	r2, [r3, #24]
    16dc:	1dfb      	adds	r3, r7, #7
    16de:	781b      	ldrb	r3, [r3, #0]
    16e0:	2101      	movs	r1, #1
    16e2:	4099      	lsls	r1, r3
    16e4:	000b      	movs	r3, r1
    16e6:	431a      	orrs	r2, r3
    16e8:	693b      	ldr	r3, [r7, #16]
    16ea:	619a      	str	r2, [r3, #24]
    16ec:	e00c      	b.n	1708 <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    16ee:	693b      	ldr	r3, [r7, #16]
    16f0:	699b      	ldr	r3, [r3, #24]
    16f2:	1dfa      	adds	r2, r7, #7
    16f4:	7812      	ldrb	r2, [r2, #0]
    16f6:	2101      	movs	r1, #1
    16f8:	4091      	lsls	r1, r2
    16fa:	000a      	movs	r2, r1
    16fc:	43d2      	mvns	r2, r2
    16fe:	4013      	ands	r3, r2
    1700:	041b      	lsls	r3, r3, #16
    1702:	0c1a      	lsrs	r2, r3, #16
    1704:	693b      	ldr	r3, [r7, #16]
    1706:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    1708:	4b06      	ldr	r3, [pc, #24]	; (1724 <extint_chan_set_config+0x110>)
    170a:	4798      	blx	r3
}
    170c:	46c0      	nop			; (mov r8, r8)
    170e:	46bd      	mov	sp, r7
    1710:	b006      	add	sp, #24
    1712:	bd80      	pop	{r7, pc}
    1714:	0000157d 	.word	0x0000157d
    1718:	00001341 	.word	0x00001341
    171c:	0000611d 	.word	0x0000611d
    1720:	00001395 	.word	0x00001395
    1724:	00001519 	.word	0x00001519

00001728 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    1728:	b580      	push	{r7, lr}
    172a:	b082      	sub	sp, #8
    172c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    172e:	4b07      	ldr	r3, [pc, #28]	; (174c <nvm_is_ready+0x24>)
    1730:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1732:	687b      	ldr	r3, [r7, #4]
    1734:	7d1b      	ldrb	r3, [r3, #20]
    1736:	b2db      	uxtb	r3, r3
    1738:	001a      	movs	r2, r3
    173a:	2301      	movs	r3, #1
    173c:	4013      	ands	r3, r2
    173e:	1e5a      	subs	r2, r3, #1
    1740:	4193      	sbcs	r3, r2
    1742:	b2db      	uxtb	r3, r3
}
    1744:	0018      	movs	r0, r3
    1746:	46bd      	mov	sp, r7
    1748:	b002      	add	sp, #8
    174a:	bd80      	pop	{r7, pc}
    174c:	41004000 	.word	0x41004000

00001750 <system_apb_clock_set_mask>:
{
    1750:	b580      	push	{r7, lr}
    1752:	b082      	sub	sp, #8
    1754:	af00      	add	r7, sp, #0
    1756:	0002      	movs	r2, r0
    1758:	6039      	str	r1, [r7, #0]
    175a:	1dfb      	adds	r3, r7, #7
    175c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    175e:	1dfb      	adds	r3, r7, #7
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	2b04      	cmp	r3, #4
    1764:	d827      	bhi.n	17b6 <system_apb_clock_set_mask+0x66>
    1766:	009a      	lsls	r2, r3, #2
    1768:	4b16      	ldr	r3, [pc, #88]	; (17c4 <system_apb_clock_set_mask+0x74>)
    176a:	18d3      	adds	r3, r2, r3
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1770:	4b15      	ldr	r3, [pc, #84]	; (17c8 <system_apb_clock_set_mask+0x78>)
    1772:	4a15      	ldr	r2, [pc, #84]	; (17c8 <system_apb_clock_set_mask+0x78>)
    1774:	6951      	ldr	r1, [r2, #20]
    1776:	683a      	ldr	r2, [r7, #0]
    1778:	430a      	orrs	r2, r1
    177a:	615a      	str	r2, [r3, #20]
			break;
    177c:	e01d      	b.n	17ba <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    177e:	4b12      	ldr	r3, [pc, #72]	; (17c8 <system_apb_clock_set_mask+0x78>)
    1780:	4a11      	ldr	r2, [pc, #68]	; (17c8 <system_apb_clock_set_mask+0x78>)
    1782:	6991      	ldr	r1, [r2, #24]
    1784:	683a      	ldr	r2, [r7, #0]
    1786:	430a      	orrs	r2, r1
    1788:	619a      	str	r2, [r3, #24]
			break;
    178a:	e016      	b.n	17ba <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    178c:	4b0e      	ldr	r3, [pc, #56]	; (17c8 <system_apb_clock_set_mask+0x78>)
    178e:	4a0e      	ldr	r2, [pc, #56]	; (17c8 <system_apb_clock_set_mask+0x78>)
    1790:	69d1      	ldr	r1, [r2, #28]
    1792:	683a      	ldr	r2, [r7, #0]
    1794:	430a      	orrs	r2, r1
    1796:	61da      	str	r2, [r3, #28]
			break;
    1798:	e00f      	b.n	17ba <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    179a:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <system_apb_clock_set_mask+0x78>)
    179c:	4a0a      	ldr	r2, [pc, #40]	; (17c8 <system_apb_clock_set_mask+0x78>)
    179e:	6a11      	ldr	r1, [r2, #32]
    17a0:	683a      	ldr	r2, [r7, #0]
    17a2:	430a      	orrs	r2, r1
    17a4:	621a      	str	r2, [r3, #32]
			break;
    17a6:	e008      	b.n	17ba <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    17a8:	4b07      	ldr	r3, [pc, #28]	; (17c8 <system_apb_clock_set_mask+0x78>)
    17aa:	4a07      	ldr	r2, [pc, #28]	; (17c8 <system_apb_clock_set_mask+0x78>)
    17ac:	6a51      	ldr	r1, [r2, #36]	; 0x24
    17ae:	683a      	ldr	r2, [r7, #0]
    17b0:	430a      	orrs	r2, r1
    17b2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    17b4:	e001      	b.n	17ba <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    17b6:	2317      	movs	r3, #23
    17b8:	e000      	b.n	17bc <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    17ba:	2300      	movs	r3, #0
}
    17bc:	0018      	movs	r0, r3
    17be:	46bd      	mov	sp, r7
    17c0:	b002      	add	sp, #8
    17c2:	bd80      	pop	{r7, pc}
    17c4:	000164b0 	.word	0x000164b0
    17c8:	40000400 	.word	0x40000400

000017cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    17cc:	b580      	push	{r7, lr}
    17ce:	b084      	sub	sp, #16
    17d0:	af00      	add	r7, sp, #0
    17d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    17d4:	4b2f      	ldr	r3, [pc, #188]	; (1894 <nvm_set_config+0xc8>)
    17d6:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
    17d8:	2104      	movs	r1, #4
    17da:	2001      	movs	r0, #1
    17dc:	4b2e      	ldr	r3, [pc, #184]	; (1898 <nvm_set_config+0xcc>)
    17de:	4798      	blx	r3
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	2220      	movs	r2, #32
    17e4:	32ff      	adds	r2, #255	; 0xff
    17e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    17e8:	4b2c      	ldr	r3, [pc, #176]	; (189c <nvm_set_config+0xd0>)
    17ea:	4798      	blx	r3
    17ec:	0003      	movs	r3, r0
    17ee:	001a      	movs	r2, r3
    17f0:	2301      	movs	r3, #1
    17f2:	4053      	eors	r3, r2
    17f4:	b2db      	uxtb	r3, r3
    17f6:	2b00      	cmp	r3, #0
    17f8:	d001      	beq.n	17fe <nvm_set_config+0x32>
		return STATUS_BUSY;
    17fa:	2305      	movs	r3, #5
    17fc:	e045      	b.n	188a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    17fe:	687b      	ldr	r3, [r7, #4]
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	021b      	lsls	r3, r3, #8
    1804:	001a      	movs	r2, r3
    1806:	23c0      	movs	r3, #192	; 0xc0
    1808:	009b      	lsls	r3, r3, #2
    180a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	785b      	ldrb	r3, [r3, #1]
    1810:	01db      	lsls	r3, r3, #7
    1812:	0019      	movs	r1, r3
    1814:	23ff      	movs	r3, #255	; 0xff
    1816:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1818:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    181a:	687b      	ldr	r3, [r7, #4]
    181c:	789b      	ldrb	r3, [r3, #2]
    181e:	005b      	lsls	r3, r3, #1
    1820:	0019      	movs	r1, r3
    1822:	231e      	movs	r3, #30
    1824:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1826:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	78db      	ldrb	r3, [r3, #3]
    182c:	049b      	lsls	r3, r3, #18
    182e:	0019      	movs	r1, r3
    1830:	2380      	movs	r3, #128	; 0x80
    1832:	02db      	lsls	r3, r3, #11
    1834:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1836:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	791b      	ldrb	r3, [r3, #4]
    183c:	041b      	lsls	r3, r3, #16
    183e:	0019      	movs	r1, r3
    1840:	23c0      	movs	r3, #192	; 0xc0
    1842:	029b      	lsls	r3, r3, #10
    1844:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1846:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    184c:	68fb      	ldr	r3, [r7, #12]
    184e:	689b      	ldr	r3, [r3, #8]
    1850:	035b      	lsls	r3, r3, #13
    1852:	0f5b      	lsrs	r3, r3, #29
    1854:	b2db      	uxtb	r3, r3
    1856:	001a      	movs	r2, r3
    1858:	2308      	movs	r3, #8
    185a:	4093      	lsls	r3, r2
    185c:	b29a      	uxth	r2, r3
    185e:	4b10      	ldr	r3, [pc, #64]	; (18a0 <nvm_set_config+0xd4>)
    1860:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	689b      	ldr	r3, [r3, #8]
    1866:	b29a      	uxth	r2, r3
    1868:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <nvm_set_config+0xd4>)
    186a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    186c:	687b      	ldr	r3, [r7, #4]
    186e:	785a      	ldrb	r2, [r3, #1]
    1870:	4b0b      	ldr	r3, [pc, #44]	; (18a0 <nvm_set_config+0xd4>)
    1872:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1874:	68fb      	ldr	r3, [r7, #12]
    1876:	8b1b      	ldrh	r3, [r3, #24]
    1878:	b29b      	uxth	r3, r3
    187a:	001a      	movs	r2, r3
    187c:	2380      	movs	r3, #128	; 0x80
    187e:	005b      	lsls	r3, r3, #1
    1880:	4013      	ands	r3, r2
    1882:	d001      	beq.n	1888 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    1884:	2310      	movs	r3, #16
    1886:	e000      	b.n	188a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    1888:	2300      	movs	r3, #0
}
    188a:	0018      	movs	r0, r3
    188c:	46bd      	mov	sp, r7
    188e:	b004      	add	sp, #16
    1890:	bd80      	pop	{r7, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	41004000 	.word	0x41004000
    1898:	00001751 	.word	0x00001751
    189c:	00001729 	.word	0x00001729
    18a0:	20000a4c 	.word	0x20000a4c

000018a4 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    18a4:	b580      	push	{r7, lr}
    18a6:	b086      	sub	sp, #24
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    18ac:	4b2c      	ldr	r3, [pc, #176]	; (1960 <nvm_get_parameters+0xbc>)
    18ae:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    18b0:	697b      	ldr	r3, [r7, #20]
    18b2:	2220      	movs	r2, #32
    18b4:	32ff      	adds	r2, #255	; 0xff
    18b6:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    18b8:	697b      	ldr	r3, [r7, #20]
    18ba:	689b      	ldr	r3, [r3, #8]
    18bc:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    18be:	693b      	ldr	r3, [r7, #16]
    18c0:	0c1b      	lsrs	r3, r3, #16
    18c2:	2207      	movs	r2, #7
    18c4:	4013      	ands	r3, r2
    18c6:	2208      	movs	r2, #8
    18c8:	409a      	lsls	r2, r3
    18ca:	0013      	movs	r3, r2
	parameters->page_size =
    18cc:	b2da      	uxtb	r2, r3
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    18d2:	693b      	ldr	r3, [r7, #16]
    18d4:	b29a      	uxth	r2, r3
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    18da:	693b      	ldr	r3, [r7, #16]
    18dc:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    18de:	b29a      	uxth	r2, r3
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	819a      	strh	r2, [r3, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    18e4:	4b1f      	ldr	r3, [pc, #124]	; (1964 <nvm_get_parameters+0xc0>)
    18e6:	881b      	ldrh	r3, [r3, #0]
    18e8:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    18ea:	091b      	lsrs	r3, r3, #4
    18ec:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    18ee:	230e      	movs	r3, #14
    18f0:	18fb      	adds	r3, r7, r3
    18f2:	2107      	movs	r1, #7
    18f4:	400a      	ands	r2, r1
    18f6:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    18f8:	230e      	movs	r3, #14
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	881b      	ldrh	r3, [r3, #0]
    18fe:	2b07      	cmp	r3, #7
    1900:	d103      	bne.n	190a <nvm_get_parameters+0x66>
		parameters->eeprom_number_of_pages = 0;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	2200      	movs	r2, #0
    1906:	605a      	str	r2, [r3, #4]
    1908:	e00a      	b.n	1920 <nvm_get_parameters+0x7c>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    190a:	230e      	movs	r3, #14
    190c:	18fb      	adds	r3, r7, r3
    190e:	881b      	ldrh	r3, [r3, #0]
    1910:	2206      	movs	r2, #6
    1912:	1ad3      	subs	r3, r2, r3
    1914:	2204      	movs	r2, #4
    1916:	409a      	lsls	r2, r3
    1918:	0013      	movs	r3, r2
    191a:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    191c:	687b      	ldr	r3, [r7, #4]
    191e:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    1920:	4b10      	ldr	r3, [pc, #64]	; (1964 <nvm_get_parameters+0xc0>)
    1922:	881b      	ldrh	r3, [r3, #0]
    1924:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    1926:	230c      	movs	r3, #12
    1928:	18fb      	adds	r3, r7, r3
    192a:	2107      	movs	r1, #7
    192c:	400a      	ands	r2, r1
    192e:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    1930:	230c      	movs	r3, #12
    1932:	18fb      	adds	r3, r7, r3
    1934:	881b      	ldrh	r3, [r3, #0]
    1936:	2b07      	cmp	r3, #7
    1938:	d103      	bne.n	1942 <nvm_get_parameters+0x9e>
		parameters->bootloader_number_of_pages = 0;
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	2200      	movs	r2, #0
    193e:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    1940:	e00a      	b.n	1958 <nvm_get_parameters+0xb4>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    1942:	230c      	movs	r3, #12
    1944:	18fb      	adds	r3, r7, r3
    1946:	881b      	ldrh	r3, [r3, #0]
    1948:	2207      	movs	r2, #7
    194a:	1ad3      	subs	r3, r2, r3
    194c:	2204      	movs	r2, #4
    194e:	409a      	lsls	r2, r3
    1950:	0013      	movs	r3, r2
    1952:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	609a      	str	r2, [r3, #8]
}
    1958:	46c0      	nop			; (mov r8, r8)
    195a:	46bd      	mov	sp, r7
    195c:	b006      	add	sp, #24
    195e:	bd80      	pop	{r7, pc}
    1960:	41004000 	.word	0x41004000
    1964:	00804000 	.word	0x00804000

00001968 <system_pinmux_get_config_defaults>:
{
    1968:	b580      	push	{r7, lr}
    196a:	b082      	sub	sp, #8
    196c:	af00      	add	r7, sp, #0
    196e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	2280      	movs	r2, #128	; 0x80
    1974:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	2200      	movs	r2, #0
    197a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	2201      	movs	r2, #1
    1980:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	2200      	movs	r2, #0
    1986:	70da      	strb	r2, [r3, #3]
}
    1988:	46c0      	nop			; (mov r8, r8)
    198a:	46bd      	mov	sp, r7
    198c:	b002      	add	sp, #8
    198e:	bd80      	pop	{r7, pc}

00001990 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1990:	b580      	push	{r7, lr}
    1992:	b084      	sub	sp, #16
    1994:	af00      	add	r7, sp, #0
    1996:	0002      	movs	r2, r0
    1998:	6039      	str	r1, [r7, #0]
    199a:	1dfb      	adds	r3, r7, #7
    199c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    199e:	230c      	movs	r3, #12
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	0018      	movs	r0, r3
    19a4:	4b10      	ldr	r3, [pc, #64]	; (19e8 <port_pin_set_config+0x58>)
    19a6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    19a8:	230c      	movs	r3, #12
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	2280      	movs	r2, #128	; 0x80
    19ae:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    19b0:	683b      	ldr	r3, [r7, #0]
    19b2:	781a      	ldrb	r2, [r3, #0]
    19b4:	230c      	movs	r3, #12
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    19ba:	683b      	ldr	r3, [r7, #0]
    19bc:	785a      	ldrb	r2, [r3, #1]
    19be:	230c      	movs	r3, #12
    19c0:	18fb      	adds	r3, r7, r3
    19c2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19c4:	683b      	ldr	r3, [r7, #0]
    19c6:	789a      	ldrb	r2, [r3, #2]
    19c8:	230c      	movs	r3, #12
    19ca:	18fb      	adds	r3, r7, r3
    19cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19ce:	230c      	movs	r3, #12
    19d0:	18fa      	adds	r2, r7, r3
    19d2:	1dfb      	adds	r3, r7, #7
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	0011      	movs	r1, r2
    19d8:	0018      	movs	r0, r3
    19da:	4b04      	ldr	r3, [pc, #16]	; (19ec <port_pin_set_config+0x5c>)
    19dc:	4798      	blx	r3
}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	46bd      	mov	sp, r7
    19e2:	b004      	add	sp, #16
    19e4:	bd80      	pop	{r7, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00001969 	.word	0x00001969
    19ec:	0000611d 	.word	0x0000611d

000019f0 <system_apb_clock_set_mask>:
{
    19f0:	b580      	push	{r7, lr}
    19f2:	b082      	sub	sp, #8
    19f4:	af00      	add	r7, sp, #0
    19f6:	0002      	movs	r2, r0
    19f8:	6039      	str	r1, [r7, #0]
    19fa:	1dfb      	adds	r3, r7, #7
    19fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    19fe:	1dfb      	adds	r3, r7, #7
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b04      	cmp	r3, #4
    1a04:	d827      	bhi.n	1a56 <system_apb_clock_set_mask+0x66>
    1a06:	009a      	lsls	r2, r3, #2
    1a08:	4b16      	ldr	r3, [pc, #88]	; (1a64 <system_apb_clock_set_mask+0x74>)
    1a0a:	18d3      	adds	r3, r2, r3
    1a0c:	681b      	ldr	r3, [r3, #0]
    1a0e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1a10:	4b15      	ldr	r3, [pc, #84]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a12:	4a15      	ldr	r2, [pc, #84]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a14:	6951      	ldr	r1, [r2, #20]
    1a16:	683a      	ldr	r2, [r7, #0]
    1a18:	430a      	orrs	r2, r1
    1a1a:	615a      	str	r2, [r3, #20]
			break;
    1a1c:	e01d      	b.n	1a5a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    1a1e:	4b12      	ldr	r3, [pc, #72]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a20:	4a11      	ldr	r2, [pc, #68]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a22:	6991      	ldr	r1, [r2, #24]
    1a24:	683a      	ldr	r2, [r7, #0]
    1a26:	430a      	orrs	r2, r1
    1a28:	619a      	str	r2, [r3, #24]
			break;
    1a2a:	e016      	b.n	1a5a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1a2c:	4b0e      	ldr	r3, [pc, #56]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a2e:	4a0e      	ldr	r2, [pc, #56]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a30:	69d1      	ldr	r1, [r2, #28]
    1a32:	683a      	ldr	r2, [r7, #0]
    1a34:	430a      	orrs	r2, r1
    1a36:	61da      	str	r2, [r3, #28]
			break;
    1a38:	e00f      	b.n	1a5a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1a3a:	4b0b      	ldr	r3, [pc, #44]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a3c:	4a0a      	ldr	r2, [pc, #40]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a3e:	6a11      	ldr	r1, [r2, #32]
    1a40:	683a      	ldr	r2, [r7, #0]
    1a42:	430a      	orrs	r2, r1
    1a44:	621a      	str	r2, [r3, #32]
			break;
    1a46:	e008      	b.n	1a5a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    1a48:	4b07      	ldr	r3, [pc, #28]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a4a:	4a07      	ldr	r2, [pc, #28]	; (1a68 <system_apb_clock_set_mask+0x78>)
    1a4c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1a4e:	683a      	ldr	r2, [r7, #0]
    1a50:	430a      	orrs	r2, r1
    1a52:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1a54:	e001      	b.n	1a5a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    1a56:	2317      	movs	r3, #23
    1a58:	e000      	b.n	1a5c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    1a5a:	2300      	movs	r3, #0
}
    1a5c:	0018      	movs	r0, r3
    1a5e:	46bd      	mov	sp, r7
    1a60:	b002      	add	sp, #8
    1a62:	bd80      	pop	{r7, pc}
    1a64:	000164c4 	.word	0x000164c4
    1a68:	40000400 	.word	0x40000400

00001a6c <system_interrupt_enable>:
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	0002      	movs	r2, r0
    1a74:	1dfb      	adds	r3, r7, #7
    1a76:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a78:	4b06      	ldr	r3, [pc, #24]	; (1a94 <system_interrupt_enable+0x28>)
    1a7a:	1dfa      	adds	r2, r7, #7
    1a7c:	7812      	ldrb	r2, [r2, #0]
    1a7e:	0011      	movs	r1, r2
    1a80:	221f      	movs	r2, #31
    1a82:	400a      	ands	r2, r1
    1a84:	2101      	movs	r1, #1
    1a86:	4091      	lsls	r1, r2
    1a88:	000a      	movs	r2, r1
    1a8a:	601a      	str	r2, [r3, #0]
}
    1a8c:	46c0      	nop			; (mov r8, r8)
    1a8e:	46bd      	mov	sp, r7
    1a90:	b002      	add	sp, #8
    1a92:	bd80      	pop	{r7, pc}
    1a94:	e000e100 	.word	0xe000e100

00001a98 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1a98:	b580      	push	{r7, lr}
    1a9a:	b082      	sub	sp, #8
    1a9c:	af00      	add	r7, sp, #0
    1a9e:	0002      	movs	r2, r0
    1aa0:	1dfb      	adds	r3, r7, #7
    1aa2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1aa4:	4a07      	ldr	r2, [pc, #28]	; (1ac4 <system_interrupt_disable+0x2c>)
    1aa6:	1dfb      	adds	r3, r7, #7
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	0019      	movs	r1, r3
    1aac:	231f      	movs	r3, #31
    1aae:	400b      	ands	r3, r1
    1ab0:	2101      	movs	r1, #1
    1ab2:	4099      	lsls	r1, r3
    1ab4:	000b      	movs	r3, r1
    1ab6:	0019      	movs	r1, r3
    1ab8:	2380      	movs	r3, #128	; 0x80
    1aba:	50d1      	str	r1, [r2, r3]
}
    1abc:	46c0      	nop			; (mov r8, r8)
    1abe:	46bd      	mov	sp, r7
    1ac0:	b002      	add	sp, #8
    1ac2:	bd80      	pop	{r7, pc}
    1ac4:	e000e100 	.word	0xe000e100

00001ac8 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    1ac8:	b580      	push	{r7, lr}
    1aca:	b084      	sub	sp, #16
    1acc:	af00      	add	r7, sp, #0
    1ace:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    1ad6:	68fb      	ldr	r3, [r7, #12]
    1ad8:	691b      	ldr	r3, [r3, #16]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d001      	beq.n	1ae2 <rtc_count_is_syncing+0x1a>
		return true;
    1ade:	2301      	movs	r3, #1
    1ae0:	e000      	b.n	1ae4 <rtc_count_is_syncing+0x1c>
	}

	return false;
    1ae2:	2300      	movs	r3, #0
}
    1ae4:	0018      	movs	r0, r3
    1ae6:	46bd      	mov	sp, r7
    1ae8:	b004      	add	sp, #16
    1aea:	bd80      	pop	{r7, pc}

00001aec <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    1aec:	b580      	push	{r7, lr}
    1aee:	b084      	sub	sp, #16
    1af0:	af00      	add	r7, sp, #0
    1af2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    1afa:	2002      	movs	r0, #2
    1afc:	4b0d      	ldr	r3, [pc, #52]	; (1b34 <rtc_count_enable+0x48>)
    1afe:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    1b00:	46c0      	nop			; (mov r8, r8)
    1b02:	687b      	ldr	r3, [r7, #4]
    1b04:	0018      	movs	r0, r3
    1b06:	4b0c      	ldr	r3, [pc, #48]	; (1b38 <rtc_count_enable+0x4c>)
    1b08:	4798      	blx	r3
    1b0a:	1e03      	subs	r3, r0, #0
    1b0c:	d1f9      	bne.n	1b02 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    1b0e:	68fb      	ldr	r3, [r7, #12]
    1b10:	881b      	ldrh	r3, [r3, #0]
    1b12:	b29b      	uxth	r3, r3
    1b14:	2202      	movs	r2, #2
    1b16:	4313      	orrs	r3, r2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	68fb      	ldr	r3, [r7, #12]
    1b1c:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	0018      	movs	r0, r3
    1b24:	4b04      	ldr	r3, [pc, #16]	; (1b38 <rtc_count_enable+0x4c>)
    1b26:	4798      	blx	r3
    1b28:	1e03      	subs	r3, r0, #0
    1b2a:	d1f9      	bne.n	1b20 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
    1b2c:	46c0      	nop			; (mov r8, r8)
    1b2e:	46bd      	mov	sp, r7
    1b30:	b004      	add	sp, #16
    1b32:	bd80      	pop	{r7, pc}
    1b34:	00001a6d 	.word	0x00001a6d
    1b38:	00001ac9 	.word	0x00001ac9

00001b3c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b084      	sub	sp, #16
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b44:	687b      	ldr	r3, [r7, #4]
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    1b4a:	2002      	movs	r0, #2
    1b4c:	4b10      	ldr	r3, [pc, #64]	; (1b90 <rtc_count_disable+0x54>)
    1b4e:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	0018      	movs	r0, r3
    1b56:	4b0f      	ldr	r3, [pc, #60]	; (1b94 <rtc_count_disable+0x58>)
    1b58:	4798      	blx	r3
    1b5a:	1e03      	subs	r3, r0, #0
    1b5c:	d1f9      	bne.n	1b52 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    1b5e:	68fb      	ldr	r3, [r7, #12]
    1b60:	4a0d      	ldr	r2, [pc, #52]	; (1b98 <rtc_count_disable+0x5c>)
    1b62:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    1b64:	68fb      	ldr	r3, [r7, #12]
    1b66:	4a0c      	ldr	r2, [pc, #48]	; (1b98 <rtc_count_disable+0x5c>)
    1b68:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    1b6a:	68fb      	ldr	r3, [r7, #12]
    1b6c:	881b      	ldrh	r3, [r3, #0]
    1b6e:	b29b      	uxth	r3, r3
    1b70:	2202      	movs	r2, #2
    1b72:	4393      	bics	r3, r2
    1b74:	b29a      	uxth	r2, r3
    1b76:	68fb      	ldr	r3, [r7, #12]
    1b78:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	0018      	movs	r0, r3
    1b80:	4b04      	ldr	r3, [pc, #16]	; (1b94 <rtc_count_disable+0x58>)
    1b82:	4798      	blx	r3
    1b84:	1e03      	subs	r3, r0, #0
    1b86:	d1f9      	bne.n	1b7c <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
    1b88:	46c0      	nop			; (mov r8, r8)
    1b8a:	46bd      	mov	sp, r7
    1b8c:	b004      	add	sp, #16
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	00001a99 	.word	0x00001a99
    1b94:	00001ac9 	.word	0x00001ac9
    1b98:	ffff81ff 	.word	0xffff81ff

00001b9c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    1b9c:	b580      	push	{r7, lr}
    1b9e:	b084      	sub	sp, #16
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    1baa:	687b      	ldr	r3, [r7, #4]
    1bac:	0018      	movs	r0, r3
    1bae:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <rtc_count_reset+0x58>)
    1bb0:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	2200      	movs	r2, #0
    1bb6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	2200      	movs	r2, #0
    1bbc:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	0018      	movs	r0, r3
    1bc4:	4b0c      	ldr	r3, [pc, #48]	; (1bf8 <rtc_count_reset+0x5c>)
    1bc6:	4798      	blx	r3
    1bc8:	1e03      	subs	r3, r0, #0
    1bca:	d1f9      	bne.n	1bc0 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    1bcc:	68fb      	ldr	r3, [r7, #12]
    1bce:	881b      	ldrh	r3, [r3, #0]
    1bd0:	b29b      	uxth	r3, r3
    1bd2:	2201      	movs	r2, #1
    1bd4:	4313      	orrs	r3, r2
    1bd6:	b29a      	uxth	r2, r3
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    1bdc:	46c0      	nop			; (mov r8, r8)
    1bde:	687b      	ldr	r3, [r7, #4]
    1be0:	0018      	movs	r0, r3
    1be2:	4b05      	ldr	r3, [pc, #20]	; (1bf8 <rtc_count_reset+0x5c>)
    1be4:	4798      	blx	r3
    1be6:	1e03      	subs	r3, r0, #0
    1be8:	d1f9      	bne.n	1bde <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	46bd      	mov	sp, r7
    1bee:	b004      	add	sp, #16
    1bf0:	bd80      	pop	{r7, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	00001b3d 	.word	0x00001b3d
    1bf8:	00001ac9 	.word	0x00001ac9

00001bfc <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b084      	sub	sp, #16
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
    1c04:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30 || (SAMR34) || (SAMR35) || (WLR089)
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    1c0c:	683b      	ldr	r3, [r7, #0]
    1c0e:	791b      	ldrb	r3, [r3, #4]
    1c10:	b29b      	uxth	r3, r3
    1c12:	03db      	lsls	r3, r3, #15
    1c14:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
    1c16:	683b      	ldr	r3, [r7, #0]
    1c18:	881b      	ldrh	r3, [r3, #0]
    1c1a:	4313      	orrs	r3, r2
    1c1c:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    1c1e:	68bb      	ldr	r3, [r7, #8]
    1c20:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	789b      	ldrb	r3, [r3, #2]
    1c26:	2b00      	cmp	r3, #0
    1c28:	d032      	beq.n	1c90 <_rtc_count_set_config+0x94>
    1c2a:	2b01      	cmp	r3, #1
    1c2c:	d15e      	bne.n	1cec <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    1c2e:	68bb      	ldr	r3, [r7, #8]
    1c30:	881b      	ldrh	r3, [r3, #0]
    1c32:	b29a      	uxth	r2, r3
    1c34:	68bb      	ldr	r3, [r7, #8]
    1c36:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    1c38:	683b      	ldr	r3, [r7, #0]
    1c3a:	78db      	ldrb	r3, [r3, #3]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d007      	beq.n	1c50 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    1c40:	68bb      	ldr	r3, [r7, #8]
    1c42:	881b      	ldrh	r3, [r3, #0]
    1c44:	b29b      	uxth	r3, r3
    1c46:	2280      	movs	r2, #128	; 0x80
    1c48:	4313      	orrs	r3, r2
    1c4a:	b29a      	uxth	r2, r3
    1c4c:	68bb      	ldr	r3, [r7, #8]
    1c4e:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    1c50:	230f      	movs	r3, #15
    1c52:	18fb      	adds	r3, r7, r3
    1c54:	2200      	movs	r2, #0
    1c56:	701a      	strb	r2, [r3, #0]
    1c58:	e014      	b.n	1c84 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
    1c5a:	230f      	movs	r3, #15
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	781a      	ldrb	r2, [r3, #0]
    1c60:	683b      	ldr	r3, [r7, #0]
    1c62:	3202      	adds	r2, #2
    1c64:	0092      	lsls	r2, r2, #2
    1c66:	58d1      	ldr	r1, [r2, r3]
    1c68:	230f      	movs	r3, #15
    1c6a:	18fb      	adds	r3, r7, r3
    1c6c:	781a      	ldrb	r2, [r3, #0]
    1c6e:	687b      	ldr	r3, [r7, #4]
    1c70:	0018      	movs	r0, r3
    1c72:	4b22      	ldr	r3, [pc, #136]	; (1cfc <_rtc_count_set_config+0x100>)
    1c74:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    1c76:	230f      	movs	r3, #15
    1c78:	18fb      	adds	r3, r7, r3
    1c7a:	781a      	ldrb	r2, [r3, #0]
    1c7c:	230f      	movs	r3, #15
    1c7e:	18fb      	adds	r3, r7, r3
    1c80:	3201      	adds	r2, #1
    1c82:	701a      	strb	r2, [r3, #0]
    1c84:	230f      	movs	r3, #15
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	781b      	ldrb	r3, [r3, #0]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d0e5      	beq.n	1c5a <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
    1c8e:	e02f      	b.n	1cf0 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    1c90:	68bb      	ldr	r3, [r7, #8]
    1c92:	881b      	ldrh	r3, [r3, #0]
    1c94:	b29b      	uxth	r3, r3
    1c96:	2204      	movs	r2, #4
    1c98:	4313      	orrs	r3, r2
    1c9a:	b29a      	uxth	r2, r3
    1c9c:	68bb      	ldr	r3, [r7, #8]
    1c9e:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    1ca0:	683b      	ldr	r3, [r7, #0]
    1ca2:	78db      	ldrb	r3, [r3, #3]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d001      	beq.n	1cac <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    1ca8:	2317      	movs	r3, #23
    1caa:	e022      	b.n	1cf2 <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1cac:	230e      	movs	r3, #14
    1cae:	18fb      	adds	r3, r7, r3
    1cb0:	2200      	movs	r2, #0
    1cb2:	701a      	strb	r2, [r3, #0]
    1cb4:	e014      	b.n	1ce0 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
    1cb6:	230e      	movs	r3, #14
    1cb8:	18fb      	adds	r3, r7, r3
    1cba:	781a      	ldrb	r2, [r3, #0]
    1cbc:	683b      	ldr	r3, [r7, #0]
    1cbe:	3202      	adds	r2, #2
    1cc0:	0092      	lsls	r2, r2, #2
    1cc2:	58d1      	ldr	r1, [r2, r3]
    1cc4:	230e      	movs	r3, #14
    1cc6:	18fb      	adds	r3, r7, r3
    1cc8:	781a      	ldrb	r2, [r3, #0]
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	0018      	movs	r0, r3
    1cce:	4b0b      	ldr	r3, [pc, #44]	; (1cfc <_rtc_count_set_config+0x100>)
    1cd0:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    1cd2:	230e      	movs	r3, #14
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	781a      	ldrb	r2, [r3, #0]
    1cd8:	230e      	movs	r3, #14
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	3201      	adds	r2, #1
    1cde:	701a      	strb	r2, [r3, #0]
    1ce0:	230e      	movs	r3, #14
    1ce2:	18fb      	adds	r3, r7, r3
    1ce4:	781b      	ldrb	r3, [r3, #0]
    1ce6:	2b01      	cmp	r3, #1
    1ce8:	d9e5      	bls.n	1cb6 <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
    1cea:	e001      	b.n	1cf0 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1cec:	2317      	movs	r3, #23
    1cee:	e000      	b.n	1cf2 <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    1cf0:	2300      	movs	r3, #0
}
    1cf2:	0018      	movs	r0, r3
    1cf4:	46bd      	mov	sp, r7
    1cf6:	b004      	add	sp, #16
    1cf8:	bd80      	pop	{r7, pc}
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	00001db5 	.word	0x00001db5

00001d00 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b084      	sub	sp, #16
    1d04:	af00      	add	r7, sp, #0
    1d06:	60f8      	str	r0, [r7, #12]
    1d08:	60b9      	str	r1, [r7, #8]
    1d0a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1d0c:	68fb      	ldr	r3, [r7, #12]
    1d0e:	68ba      	ldr	r2, [r7, #8]
    1d10:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	005b      	lsls	r3, r3, #1
    1d16:	0019      	movs	r1, r3
    1d18:	2000      	movs	r0, #0
    1d1a:	4b0d      	ldr	r3, [pc, #52]	; (1d50 <rtc_count_init+0x50>)
    1d1c:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    1d1e:	4b0d      	ldr	r3, [pc, #52]	; (1d54 <rtc_count_init+0x54>)
    1d20:	2205      	movs	r2, #5
    1d22:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    1d24:	68fb      	ldr	r3, [r7, #12]
    1d26:	0018      	movs	r0, r3
    1d28:	4b0b      	ldr	r3, [pc, #44]	; (1d58 <rtc_count_init+0x58>)
    1d2a:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	789a      	ldrb	r2, [r3, #2]
    1d30:	68fb      	ldr	r3, [r7, #12]
    1d32:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    1d34:	4b09      	ldr	r3, [pc, #36]	; (1d5c <rtc_count_init+0x5c>)
    1d36:	68fa      	ldr	r2, [r7, #12]
    1d38:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    1d3a:	687a      	ldr	r2, [r7, #4]
    1d3c:	68fb      	ldr	r3, [r7, #12]
    1d3e:	0011      	movs	r1, r2
    1d40:	0018      	movs	r0, r3
    1d42:	4b07      	ldr	r3, [pc, #28]	; (1d60 <rtc_count_init+0x60>)
    1d44:	4798      	blx	r3
    1d46:	0003      	movs	r3, r0
}
    1d48:	0018      	movs	r0, r3
    1d4a:	46bd      	mov	sp, r7
    1d4c:	b004      	add	sp, #16
    1d4e:	bd80      	pop	{r7, pc}
    1d50:	000019f1 	.word	0x000019f1
    1d54:	40001000 	.word	0x40001000
    1d58:	00001b9d 	.word	0x00001b9d
    1d5c:	20000f4c 	.word	0x20000f4c
    1d60:	00001bfd 	.word	0x00001bfd

00001d64 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b084      	sub	sp, #16
    1d68:	af00      	add	r7, sp, #0
    1d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	681b      	ldr	r3, [r3, #0]
    1d70:	60bb      	str	r3, [r7, #8]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	687b      	ldr	r3, [r7, #4]
    1d76:	0018      	movs	r0, r3
    1d78:	4b0d      	ldr	r3, [pc, #52]	; (1db0 <rtc_count_get_count+0x4c>)
    1d7a:	4798      	blx	r3
    1d7c:	1e03      	subs	r3, r0, #0
    1d7e:	d1f9      	bne.n	1d74 <rtc_count_get_count+0x10>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	791b      	ldrb	r3, [r3, #4]
    1d84:	2b00      	cmp	r3, #0
    1d86:	d005      	beq.n	1d94 <rtc_count_get_count+0x30>
    1d88:	2b01      	cmp	r3, #1
    1d8a:	d108      	bne.n	1d9e <rtc_count_get_count+0x3a>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
    1d8c:	68bb      	ldr	r3, [r7, #8]
    1d8e:	699b      	ldr	r3, [r3, #24]
    1d90:	60fb      	str	r3, [r7, #12]

			break;
    1d92:	e007      	b.n	1da4 <rtc_count_get_count+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    1d94:	68bb      	ldr	r3, [r7, #8]
    1d96:	8b1b      	ldrh	r3, [r3, #24]
    1d98:	b29b      	uxth	r3, r3
    1d9a:	60fb      	str	r3, [r7, #12]

			break;
    1d9c:	e002      	b.n	1da4 <rtc_count_get_count+0x40>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    1d9e:	2300      	movs	r3, #0
    1da0:	60fb      	str	r3, [r7, #12]
			break;
    1da2:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
    1da4:	68fb      	ldr	r3, [r7, #12]
}
    1da6:	0018      	movs	r0, r3
    1da8:	46bd      	mov	sp, r7
    1daa:	b004      	add	sp, #16
    1dac:	bd80      	pop	{r7, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001ac9 	.word	0x00001ac9

00001db4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    1db4:	b580      	push	{r7, lr}
    1db6:	b086      	sub	sp, #24
    1db8:	af00      	add	r7, sp, #0
    1dba:	60f8      	str	r0, [r7, #12]
    1dbc:	60b9      	str	r1, [r7, #8]
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1dc2:	68fb      	ldr	r3, [r7, #12]
    1dc4:	681b      	ldr	r3, [r3, #0]
    1dc6:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    1dc8:	46c0      	nop			; (mov r8, r8)
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	0018      	movs	r0, r3
    1dce:	4b1d      	ldr	r3, [pc, #116]	; (1e44 <rtc_count_set_compare+0x90>)
    1dd0:	4798      	blx	r3
    1dd2:	1e03      	subs	r3, r0, #0
    1dd4:	d1f9      	bne.n	1dca <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    1dd6:	68fb      	ldr	r3, [r7, #12]
    1dd8:	791b      	ldrb	r3, [r3, #4]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d00f      	beq.n	1dfe <rtc_count_set_compare+0x4a>
    1dde:	2b01      	cmp	r3, #1
    1de0:	d122      	bne.n	1e28 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    1de2:	1dfb      	adds	r3, r7, #7
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	2b01      	cmp	r3, #1
    1de8:	d901      	bls.n	1dee <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    1dea:	2317      	movs	r3, #23
    1dec:	e026      	b.n	1e3c <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    1dee:	1dfb      	adds	r3, r7, #7
    1df0:	781a      	ldrb	r2, [r3, #0]
    1df2:	697b      	ldr	r3, [r7, #20]
    1df4:	3208      	adds	r2, #8
    1df6:	0092      	lsls	r2, r2, #2
    1df8:	68b9      	ldr	r1, [r7, #8]
    1dfa:	50d1      	str	r1, [r2, r3]

			break;
    1dfc:	e016      	b.n	1e2c <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    1dfe:	1dfb      	adds	r3, r7, #7
    1e00:	781b      	ldrb	r3, [r3, #0]
    1e02:	2b02      	cmp	r3, #2
    1e04:	d901      	bls.n	1e0a <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    1e06:	2317      	movs	r3, #23
    1e08:	e018      	b.n	1e3c <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    1e0a:	68bb      	ldr	r3, [r7, #8]
    1e0c:	4a0e      	ldr	r2, [pc, #56]	; (1e48 <rtc_count_set_compare+0x94>)
    1e0e:	4293      	cmp	r3, r2
    1e10:	d901      	bls.n	1e16 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    1e12:	2317      	movs	r3, #23
    1e14:	e012      	b.n	1e3c <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1e16:	1dfb      	adds	r3, r7, #7
    1e18:	781a      	ldrb	r2, [r3, #0]
    1e1a:	68bb      	ldr	r3, [r7, #8]
    1e1c:	b299      	uxth	r1, r3
    1e1e:	697b      	ldr	r3, [r7, #20]
    1e20:	3210      	adds	r2, #16
    1e22:	0052      	lsls	r2, r2, #1
    1e24:	52d1      	strh	r1, [r2, r3]

			break;
    1e26:	e001      	b.n	1e2c <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    1e28:	231a      	movs	r3, #26
    1e2a:	e007      	b.n	1e3c <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    1e2c:	46c0      	nop			; (mov r8, r8)
    1e2e:	68fb      	ldr	r3, [r7, #12]
    1e30:	0018      	movs	r0, r3
    1e32:	4b04      	ldr	r3, [pc, #16]	; (1e44 <rtc_count_set_compare+0x90>)
    1e34:	4798      	blx	r3
    1e36:	1e03      	subs	r3, r0, #0
    1e38:	d1f9      	bne.n	1e2e <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    1e3a:	2300      	movs	r3, #0
}
    1e3c:	0018      	movs	r0, r3
    1e3e:	46bd      	mov	sp, r7
    1e40:	b006      	add	sp, #24
    1e42:	bd80      	pop	{r7, pc}
    1e44:	00001ac9 	.word	0x00001ac9
    1e48:	0000ffff 	.word	0x0000ffff

00001e4c <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1e4c:	b580      	push	{r7, lr}
    1e4e:	b084      	sub	sp, #16
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	000a      	movs	r2, r1
    1e56:	1cfb      	adds	r3, r7, #3
    1e58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1e60:	1cfb      	adds	r3, r7, #3
    1e62:	781b      	ldrb	r3, [r3, #0]
    1e64:	2b0a      	cmp	r3, #10
    1e66:	d103      	bne.n	1e70 <rtc_count_disable_callback+0x24>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	4a1b      	ldr	r2, [pc, #108]	; (1ed8 <rtc_count_disable_callback+0x8c>)
    1e6c:	811a      	strh	r2, [r3, #8]
    1e6e:	e01e      	b.n	1eae <rtc_count_disable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1e70:	1cfb      	adds	r3, r7, #3
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	2b07      	cmp	r3, #7
    1e76:	d80b      	bhi.n	1e90 <rtc_count_disable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    1e78:	1cfb      	adds	r3, r7, #3
    1e7a:	781b      	ldrb	r3, [r3, #0]
    1e7c:	2201      	movs	r2, #1
    1e7e:	409a      	lsls	r2, r3
    1e80:	0013      	movs	r3, r2
    1e82:	b29b      	uxth	r3, r3
    1e84:	22ff      	movs	r2, #255	; 0xff
    1e86:	4013      	ands	r3, r2
    1e88:	b29a      	uxth	r2, r3
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	811a      	strh	r2, [r3, #8]
    1e8e:	e00e      	b.n	1eae <rtc_count_disable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1e90:	1cfb      	adds	r3, r7, #3
    1e92:	781b      	ldrb	r3, [r3, #0]
    1e94:	3b08      	subs	r3, #8
    1e96:	2201      	movs	r2, #1
    1e98:	409a      	lsls	r2, r3
    1e9a:	0013      	movs	r3, r2
    1e9c:	b29b      	uxth	r3, r3
    1e9e:	021b      	lsls	r3, r3, #8
    1ea0:	b29a      	uxth	r2, r3
    1ea2:	23c0      	movs	r3, #192	; 0xc0
    1ea4:	009b      	lsls	r3, r3, #2
    1ea6:	4013      	ands	r3, r2
    1ea8:	b29a      	uxth	r2, r3
    1eaa:	68fb      	ldr	r3, [r7, #12]
    1eac:	811a      	strh	r2, [r3, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    1eb2:	b29b      	uxth	r3, r3
    1eb4:	b21b      	sxth	r3, r3
    1eb6:	1cfa      	adds	r2, r7, #3
    1eb8:	7812      	ldrb	r2, [r2, #0]
    1eba:	2101      	movs	r1, #1
    1ebc:	4091      	lsls	r1, r2
    1ebe:	000a      	movs	r2, r1
    1ec0:	b212      	sxth	r2, r2
    1ec2:	43d2      	mvns	r2, r2
    1ec4:	b212      	sxth	r2, r2
    1ec6:	4013      	ands	r3, r2
    1ec8:	b21b      	sxth	r3, r3
    1eca:	b29a      	uxth	r2, r3
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	86da      	strh	r2, [r3, #54]	; 0x36
}
    1ed0:	46c0      	nop			; (mov r8, r8)
    1ed2:	46bd      	mov	sp, r7
    1ed4:	b004      	add	sp, #16
    1ed6:	bd80      	pop	{r7, pc}
    1ed8:	ffff8000 	.word	0xffff8000

00001edc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b086      	sub	sp, #24
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    1ee4:	4b58      	ldr	r3, [pc, #352]	; (2048 <STACK_SIZE+0x48>)
    1ee6:	687a      	ldr	r2, [r7, #4]
    1ee8:	0092      	lsls	r2, r2, #2
    1eea:	58d3      	ldr	r3, [r2, r3]
    1eec:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    1eee:	693b      	ldr	r3, [r7, #16]
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1ef4:	230a      	movs	r3, #10
    1ef6:	18fb      	adds	r3, r7, r3
    1ef8:	693a      	ldr	r2, [r7, #16]
    1efa:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    1efc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    1efe:	693b      	ldr	r3, [r7, #16]
    1f00:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1f02:	b29a      	uxth	r2, r3
    1f04:	230a      	movs	r3, #10
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	210a      	movs	r1, #10
    1f0a:	1879      	adds	r1, r7, r1
    1f0c:	8809      	ldrh	r1, [r1, #0]
    1f0e:	400a      	ands	r2, r1
    1f10:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    1f12:	2308      	movs	r3, #8
    1f14:	18fb      	adds	r3, r7, r3
    1f16:	68fa      	ldr	r2, [r7, #12]
    1f18:	8992      	ldrh	r2, [r2, #12]
    1f1a:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	895b      	ldrh	r3, [r3, #10]
    1f20:	b29a      	uxth	r2, r3
    1f22:	2308      	movs	r3, #8
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	2108      	movs	r1, #8
    1f28:	1879      	adds	r1, r7, r1
    1f2a:	8809      	ldrh	r1, [r1, #0]
    1f2c:	400a      	ands	r2, r1
    1f2e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    1f30:	2308      	movs	r3, #8
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	2200      	movs	r2, #0
    1f36:	5e9b      	ldrsh	r3, [r3, r2]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	da0d      	bge.n	1f58 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    1f3c:	230a      	movs	r3, #10
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	881a      	ldrh	r2, [r3, #0]
    1f42:	2380      	movs	r3, #128	; 0x80
    1f44:	00db      	lsls	r3, r3, #3
    1f46:	4013      	ands	r3, r2
    1f48:	d002      	beq.n	1f50 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    1f4a:	693b      	ldr	r3, [r7, #16]
    1f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1f4e:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    1f50:	68fb      	ldr	r3, [r7, #12]
    1f52:	4a3e      	ldr	r2, [pc, #248]	; (204c <STACK_SIZE+0x4c>)
    1f54:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    1f56:	e072      	b.n	203e <STACK_SIZE+0x3e>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    1f58:	2308      	movs	r3, #8
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	881b      	ldrh	r3, [r3, #0]
    1f5e:	22ff      	movs	r2, #255	; 0xff
    1f60:	4013      	ands	r3, r2
    1f62:	d041      	beq.n	1fe8 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    1f64:	2317      	movs	r3, #23
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	2200      	movs	r2, #0
    1f6a:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    1f6c:	2317      	movs	r3, #23
    1f6e:	18fb      	adds	r3, r7, r3
    1f70:	2200      	movs	r2, #0
    1f72:	701a      	strb	r2, [r3, #0]
    1f74:	e032      	b.n	1fdc <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    1f76:	2308      	movs	r3, #8
    1f78:	18fb      	adds	r3, r7, r3
    1f7a:	881b      	ldrh	r3, [r3, #0]
    1f7c:	2217      	movs	r2, #23
    1f7e:	18ba      	adds	r2, r7, r2
    1f80:	7812      	ldrb	r2, [r2, #0]
    1f82:	2101      	movs	r1, #1
    1f84:	4091      	lsls	r1, r2
    1f86:	000a      	movs	r2, r1
    1f88:	4013      	ands	r3, r2
    1f8a:	22ff      	movs	r2, #255	; 0xff
    1f8c:	4013      	ands	r3, r2
    1f8e:	d012      	beq.n	1fb6 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    1f90:	230a      	movs	r3, #10
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	881a      	ldrh	r2, [r3, #0]
    1f96:	2317      	movs	r3, #23
    1f98:	18fb      	adds	r3, r7, r3
    1f9a:	781b      	ldrb	r3, [r3, #0]
    1f9c:	411a      	asrs	r2, r3
    1f9e:	0013      	movs	r3, r2
    1fa0:	2201      	movs	r2, #1
    1fa2:	4013      	ands	r3, r2
    1fa4:	d007      	beq.n	1fb6 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    1fa6:	2317      	movs	r3, #23
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	781a      	ldrb	r2, [r3, #0]
    1fac:	693b      	ldr	r3, [r7, #16]
    1fae:	3202      	adds	r2, #2
    1fb0:	0092      	lsls	r2, r2, #2
    1fb2:	58d3      	ldr	r3, [r2, r3]
    1fb4:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    1fb6:	2317      	movs	r3, #23
    1fb8:	18fb      	adds	r3, r7, r3
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	2201      	movs	r2, #1
    1fbe:	409a      	lsls	r2, r3
    1fc0:	0013      	movs	r3, r2
    1fc2:	b29b      	uxth	r3, r3
    1fc4:	22ff      	movs	r2, #255	; 0xff
    1fc6:	4013      	ands	r3, r2
    1fc8:	b29a      	uxth	r2, r3
    1fca:	68fb      	ldr	r3, [r7, #12]
    1fcc:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    1fce:	2317      	movs	r3, #23
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	781a      	ldrb	r2, [r3, #0]
    1fd4:	2317      	movs	r3, #23
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	3201      	adds	r2, #1
    1fda:	701a      	strb	r2, [r3, #0]
    1fdc:	2317      	movs	r3, #23
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	2b07      	cmp	r3, #7
    1fe4:	d9c7      	bls.n	1f76 <_rtc_interrupt_handler+0x9a>
}
    1fe6:	e02a      	b.n	203e <STACK_SIZE+0x3e>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    1fe8:	2308      	movs	r3, #8
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	881a      	ldrh	r2, [r3, #0]
    1fee:	2380      	movs	r3, #128	; 0x80
    1ff0:	005b      	lsls	r3, r3, #1
    1ff2:	4013      	ands	r3, r2
    1ff4:	d00e      	beq.n	2014 <STACK_SIZE+0x14>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1ff6:	230a      	movs	r3, #10
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	881a      	ldrh	r2, [r3, #0]
    1ffc:	2380      	movs	r3, #128	; 0x80
    1ffe:	005b      	lsls	r3, r3, #1
    2000:	4013      	ands	r3, r2
    2002:	d002      	beq.n	200a <STACK_SIZE+0xa>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    2004:	693b      	ldr	r3, [r7, #16]
    2006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2008:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	2280      	movs	r2, #128	; 0x80
    200e:	0052      	lsls	r2, r2, #1
    2010:	819a      	strh	r2, [r3, #12]
}
    2012:	e014      	b.n	203e <STACK_SIZE+0x3e>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    2014:	2308      	movs	r3, #8
    2016:	18fb      	adds	r3, r7, r3
    2018:	881a      	ldrh	r2, [r3, #0]
    201a:	2380      	movs	r3, #128	; 0x80
    201c:	009b      	lsls	r3, r3, #2
    201e:	4013      	ands	r3, r2
    2020:	d00d      	beq.n	203e <STACK_SIZE+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    2022:	230a      	movs	r3, #10
    2024:	18fb      	adds	r3, r7, r3
    2026:	881a      	ldrh	r2, [r3, #0]
    2028:	2380      	movs	r3, #128	; 0x80
    202a:	009b      	lsls	r3, r3, #2
    202c:	4013      	ands	r3, r2
    202e:	d002      	beq.n	2036 <STACK_SIZE+0x36>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    2030:	693b      	ldr	r3, [r7, #16]
    2032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2034:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    2036:	68fb      	ldr	r3, [r7, #12]
    2038:	2280      	movs	r2, #128	; 0x80
    203a:	0092      	lsls	r2, r2, #2
    203c:	819a      	strh	r2, [r3, #12]
}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	46bd      	mov	sp, r7
    2042:	b006      	add	sp, #24
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	20000f4c 	.word	0x20000f4c
    204c:	ffff8000 	.word	0xffff8000

00002050 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    2050:	b580      	push	{r7, lr}
    2052:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    2054:	2000      	movs	r0, #0
    2056:	4b02      	ldr	r3, [pc, #8]	; (2060 <RTC_Handler+0x10>)
    2058:	4798      	blx	r3
}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46bd      	mov	sp, r7
    205e:	bd80      	pop	{r7, pc}
    2060:	00001edd 	.word	0x00001edd

00002064 <system_gclk_chan_get_config_defaults>:
{
    2064:	b580      	push	{r7, lr}
    2066:	b082      	sub	sp, #8
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	2200      	movs	r2, #0
    2070:	701a      	strb	r2, [r3, #0]
}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	46bd      	mov	sp, r7
    2076:	b002      	add	sp, #8
    2078:	bd80      	pop	{r7, pc}
	...

0000207c <system_apb_clock_set_mask>:
{
    207c:	b580      	push	{r7, lr}
    207e:	b082      	sub	sp, #8
    2080:	af00      	add	r7, sp, #0
    2082:	0002      	movs	r2, r0
    2084:	6039      	str	r1, [r7, #0]
    2086:	1dfb      	adds	r3, r7, #7
    2088:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    208a:	1dfb      	adds	r3, r7, #7
    208c:	781b      	ldrb	r3, [r3, #0]
    208e:	2b04      	cmp	r3, #4
    2090:	d827      	bhi.n	20e2 <system_apb_clock_set_mask+0x66>
    2092:	009a      	lsls	r2, r3, #2
    2094:	4b16      	ldr	r3, [pc, #88]	; (20f0 <system_apb_clock_set_mask+0x74>)
    2096:	18d3      	adds	r3, r2, r3
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    209c:	4b15      	ldr	r3, [pc, #84]	; (20f4 <system_apb_clock_set_mask+0x78>)
    209e:	4a15      	ldr	r2, [pc, #84]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20a0:	6951      	ldr	r1, [r2, #20]
    20a2:	683a      	ldr	r2, [r7, #0]
    20a4:	430a      	orrs	r2, r1
    20a6:	615a      	str	r2, [r3, #20]
			break;
    20a8:	e01d      	b.n	20e6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    20aa:	4b12      	ldr	r3, [pc, #72]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20ac:	4a11      	ldr	r2, [pc, #68]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20ae:	6991      	ldr	r1, [r2, #24]
    20b0:	683a      	ldr	r2, [r7, #0]
    20b2:	430a      	orrs	r2, r1
    20b4:	619a      	str	r2, [r3, #24]
			break;
    20b6:	e016      	b.n	20e6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    20b8:	4b0e      	ldr	r3, [pc, #56]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20ba:	4a0e      	ldr	r2, [pc, #56]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20bc:	69d1      	ldr	r1, [r2, #28]
    20be:	683a      	ldr	r2, [r7, #0]
    20c0:	430a      	orrs	r2, r1
    20c2:	61da      	str	r2, [r3, #28]
			break;
    20c4:	e00f      	b.n	20e6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    20c6:	4b0b      	ldr	r3, [pc, #44]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20c8:	4a0a      	ldr	r2, [pc, #40]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20ca:	6a11      	ldr	r1, [r2, #32]
    20cc:	683a      	ldr	r2, [r7, #0]
    20ce:	430a      	orrs	r2, r1
    20d0:	621a      	str	r2, [r3, #32]
			break;
    20d2:	e008      	b.n	20e6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    20d4:	4b07      	ldr	r3, [pc, #28]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20d6:	4a07      	ldr	r2, [pc, #28]	; (20f4 <system_apb_clock_set_mask+0x78>)
    20d8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    20da:	683a      	ldr	r2, [r7, #0]
    20dc:	430a      	orrs	r2, r1
    20de:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    20e0:	e001      	b.n	20e6 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    20e2:	2317      	movs	r3, #23
    20e4:	e000      	b.n	20e8 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    20e6:	2300      	movs	r3, #0
}
    20e8:	0018      	movs	r0, r3
    20ea:	46bd      	mov	sp, r7
    20ec:	b002      	add	sp, #8
    20ee:	bd80      	pop	{r7, pc}
    20f0:	000164d8 	.word	0x000164d8
    20f4:	40000400 	.word	0x40000400

000020f8 <system_pinmux_get_config_defaults>:
{
    20f8:	b580      	push	{r7, lr}
    20fa:	b082      	sub	sp, #8
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	2280      	movs	r2, #128	; 0x80
    2104:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2106:	687b      	ldr	r3, [r7, #4]
    2108:	2200      	movs	r2, #0
    210a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	2201      	movs	r2, #1
    2110:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2112:	687b      	ldr	r3, [r7, #4]
    2114:	2200      	movs	r2, #0
    2116:	70da      	strb	r2, [r3, #3]
}
    2118:	46c0      	nop			; (mov r8, r8)
    211a:	46bd      	mov	sp, r7
    211c:	b002      	add	sp, #8
    211e:	bd80      	pop	{r7, pc}

00002120 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2120:	b580      	push	{r7, lr}
    2122:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2124:	4b05      	ldr	r3, [pc, #20]	; (213c <system_is_debugger_present+0x1c>)
    2126:	789b      	ldrb	r3, [r3, #2]
    2128:	b2db      	uxtb	r3, r3
    212a:	001a      	movs	r2, r3
    212c:	2302      	movs	r3, #2
    212e:	4013      	ands	r3, r2
    2130:	1e5a      	subs	r2, r3, #1
    2132:	4193      	sbcs	r3, r2
    2134:	b2db      	uxtb	r3, r3
}
    2136:	0018      	movs	r0, r3
    2138:	46bd      	mov	sp, r7
    213a:	bd80      	pop	{r7, pc}
    213c:	41002000 	.word	0x41002000

00002140 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    2140:	b580      	push	{r7, lr}
    2142:	b084      	sub	sp, #16
    2144:	af00      	add	r7, sp, #0
    2146:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	681b      	ldr	r3, [r3, #0]
    214c:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	69db      	ldr	r3, [r3, #28]
    2152:	2207      	movs	r2, #7
    2154:	4013      	ands	r3, r2
    2156:	1e5a      	subs	r2, r3, #1
    2158:	4193      	sbcs	r3, r2
    215a:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    215c:	0018      	movs	r0, r3
    215e:	46bd      	mov	sp, r7
    2160:	b004      	add	sp, #16
    2162:	bd80      	pop	{r7, pc}

00002164 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    2164:	b580      	push	{r7, lr}
    2166:	b082      	sub	sp, #8
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    216c:	46c0      	nop			; (mov r8, r8)
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	0018      	movs	r0, r3
    2172:	4b04      	ldr	r3, [pc, #16]	; (2184 <_i2c_master_wait_for_sync+0x20>)
    2174:	4798      	blx	r3
    2176:	1e03      	subs	r3, r0, #0
    2178:	d1f9      	bne.n	216e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	46bd      	mov	sp, r7
    217e:	b002      	add	sp, #8
    2180:	bd80      	pop	{r7, pc}
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	00002141 	.word	0x00002141

00002188 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    2188:	b5f0      	push	{r4, r5, r6, r7, lr}
    218a:	b097      	sub	sp, #92	; 0x5c
    218c:	af00      	add	r7, sp, #0
    218e:	6178      	str	r0, [r7, #20]
    2190:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    2192:	2300      	movs	r3, #0
    2194:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    2196:	2300      	movs	r3, #0
    2198:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    219a:	2300      	movs	r3, #0
    219c:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    219e:	233b      	movs	r3, #59	; 0x3b
    21a0:	2210      	movs	r2, #16
    21a2:	4694      	mov	ip, r2
    21a4:	44bc      	add	ip, r7
    21a6:	4463      	add	r3, ip
    21a8:	2200      	movs	r2, #0
    21aa:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    21ac:	697b      	ldr	r3, [r7, #20]
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    21b2:	697b      	ldr	r3, [r7, #20]
    21b4:	681b      	ldr	r3, [r3, #0]
    21b6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    21b8:	2323      	movs	r3, #35	; 0x23
    21ba:	2210      	movs	r2, #16
    21bc:	18ba      	adds	r2, r7, r2
    21be:	18d4      	adds	r4, r2, r3
    21c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21c2:	0018      	movs	r0, r3
    21c4:	4bc0      	ldr	r3, [pc, #768]	; (24c8 <_i2c_master_set_config+0x340>)
    21c6:	4798      	blx	r3
    21c8:	0003      	movs	r3, r0
    21ca:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    21cc:	230c      	movs	r3, #12
    21ce:	2210      	movs	r2, #16
    21d0:	4694      	mov	ip, r2
    21d2:	44bc      	add	ip, r7
    21d4:	4463      	add	r3, ip
    21d6:	0018      	movs	r0, r3
    21d8:	4bbc      	ldr	r3, [pc, #752]	; (24cc <_i2c_master_set_config+0x344>)
    21da:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    21dc:	693b      	ldr	r3, [r7, #16]
    21de:	69db      	ldr	r3, [r3, #28]
    21e0:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    21e2:	693b      	ldr	r3, [r7, #16]
    21e4:	6a1b      	ldr	r3, [r3, #32]
    21e6:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    21e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21ea:	2b00      	cmp	r3, #0
    21ec:	d106      	bne.n	21fc <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    21ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    21f0:	2100      	movs	r1, #0
    21f2:	0018      	movs	r0, r3
    21f4:	4bb6      	ldr	r3, [pc, #728]	; (24d0 <_i2c_master_set_config+0x348>)
    21f6:	4798      	blx	r3
    21f8:	0003      	movs	r3, r0
    21fa:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    21fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    21fe:	b2da      	uxtb	r2, r3
    2200:	230c      	movs	r3, #12
    2202:	2110      	movs	r1, #16
    2204:	468c      	mov	ip, r1
    2206:	44bc      	add	ip, r7
    2208:	4463      	add	r3, ip
    220a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    220c:	230c      	movs	r3, #12
    220e:	2210      	movs	r2, #16
    2210:	4694      	mov	ip, r2
    2212:	44bc      	add	ip, r7
    2214:	4463      	add	r3, ip
    2216:	2202      	movs	r2, #2
    2218:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    221a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    221c:	0c1b      	lsrs	r3, r3, #16
    221e:	b2db      	uxtb	r3, r3
    2220:	220c      	movs	r2, #12
    2222:	2110      	movs	r1, #16
    2224:	468c      	mov	ip, r1
    2226:	44bc      	add	ip, r7
    2228:	4462      	add	r2, ip
    222a:	0011      	movs	r1, r2
    222c:	0018      	movs	r0, r3
    222e:	4ba9      	ldr	r3, [pc, #676]	; (24d4 <_i2c_master_set_config+0x34c>)
    2230:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    2232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2234:	2b00      	cmp	r3, #0
    2236:	d106      	bne.n	2246 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    2238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    223a:	2101      	movs	r1, #1
    223c:	0018      	movs	r0, r3
    223e:	4ba4      	ldr	r3, [pc, #656]	; (24d0 <_i2c_master_set_config+0x348>)
    2240:	4798      	blx	r3
    2242:	0003      	movs	r3, r0
    2244:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    2246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2248:	b2da      	uxtb	r2, r3
    224a:	230c      	movs	r3, #12
    224c:	2110      	movs	r1, #16
    224e:	468c      	mov	ip, r1
    2250:	44bc      	add	ip, r7
    2252:	4463      	add	r3, ip
    2254:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    2256:	230c      	movs	r3, #12
    2258:	2210      	movs	r2, #16
    225a:	4694      	mov	ip, r2
    225c:	44bc      	add	ip, r7
    225e:	4463      	add	r3, ip
    2260:	2202      	movs	r2, #2
    2262:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    2264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2266:	0c1b      	lsrs	r3, r3, #16
    2268:	b2db      	uxtb	r3, r3
    226a:	220c      	movs	r2, #12
    226c:	2110      	movs	r1, #16
    226e:	468c      	mov	ip, r1
    2270:	44bc      	add	ip, r7
    2272:	4462      	add	r2, ip
    2274:	0011      	movs	r1, r2
    2276:	0018      	movs	r0, r3
    2278:	4b96      	ldr	r3, [pc, #600]	; (24d4 <_i2c_master_set_config+0x34c>)
    227a:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    227c:	693b      	ldr	r3, [r7, #16]
    227e:	8a9a      	ldrh	r2, [r3, #20]
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    2284:	693b      	ldr	r3, [r7, #16]
    2286:	8ada      	ldrh	r2, [r3, #22]
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    228c:	693b      	ldr	r3, [r7, #16]
    228e:	7e1b      	ldrb	r3, [r3, #24]
    2290:	2b00      	cmp	r3, #0
    2292:	d103      	bne.n	229c <_i2c_master_set_config+0x114>
    2294:	4b90      	ldr	r3, [pc, #576]	; (24d8 <_i2c_master_set_config+0x350>)
    2296:	4798      	blx	r3
    2298:	1e03      	subs	r3, r0, #0
    229a:	d002      	beq.n	22a2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    229c:	2380      	movs	r3, #128	; 0x80
    229e:	657b      	str	r3, [r7, #84]	; 0x54
    22a0:	e001      	b.n	22a6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    22a2:	2300      	movs	r3, #0
    22a4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    22a6:	693b      	ldr	r3, [r7, #16]
    22a8:	691b      	ldr	r3, [r3, #16]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d004      	beq.n	22b8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    22ae:	693b      	ldr	r3, [r7, #16]
    22b0:	691b      	ldr	r3, [r3, #16]
    22b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    22b4:	4313      	orrs	r3, r2
    22b6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    22b8:	693b      	ldr	r3, [r7, #16]
    22ba:	689b      	ldr	r3, [r3, #8]
    22bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    22be:	4313      	orrs	r3, r2
    22c0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    22c2:	693b      	ldr	r3, [r7, #16]
    22c4:	2224      	movs	r2, #36	; 0x24
    22c6:	5c9b      	ldrb	r3, [r3, r2]
    22c8:	2b00      	cmp	r3, #0
    22ca:	d004      	beq.n	22d6 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    22cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    22ce:	2280      	movs	r2, #128	; 0x80
    22d0:	05d2      	lsls	r2, r2, #23
    22d2:	4313      	orrs	r3, r2
    22d4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    22d6:	693b      	ldr	r3, [r7, #16]
    22d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22da:	2b00      	cmp	r3, #0
    22dc:	d004      	beq.n	22e8 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    22de:	693b      	ldr	r3, [r7, #16]
    22e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    22e4:	4313      	orrs	r3, r2
    22e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    22e8:	693b      	ldr	r3, [r7, #16]
    22ea:	222c      	movs	r2, #44	; 0x2c
    22ec:	5c9b      	ldrb	r3, [r3, r2]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d105      	bne.n	22fe <_i2c_master_set_config+0x176>
    22f2:	693b      	ldr	r3, [r7, #16]
    22f4:	689a      	ldr	r2, [r3, #8]
    22f6:	2380      	movs	r3, #128	; 0x80
    22f8:	049b      	lsls	r3, r3, #18
    22fa:	429a      	cmp	r2, r3
    22fc:	d104      	bne.n	2308 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    22fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2300:	2280      	movs	r2, #128	; 0x80
    2302:	0512      	lsls	r2, r2, #20
    2304:	4313      	orrs	r3, r2
    2306:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    2308:	693b      	ldr	r3, [r7, #16]
    230a:	222d      	movs	r2, #45	; 0x2d
    230c:	5c9b      	ldrb	r3, [r3, r2]
    230e:	2b00      	cmp	r3, #0
    2310:	d004      	beq.n	231c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    2312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2314:	2280      	movs	r2, #128	; 0x80
    2316:	0412      	lsls	r2, r2, #16
    2318:	4313      	orrs	r3, r2
    231a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    231c:	693b      	ldr	r3, [r7, #16]
    231e:	222e      	movs	r2, #46	; 0x2e
    2320:	5c9b      	ldrb	r3, [r3, r2]
    2322:	2b00      	cmp	r3, #0
    2324:	d004      	beq.n	2330 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    2326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	03d2      	lsls	r2, r2, #15
    232c:	4313      	orrs	r3, r2
    232e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    2330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2332:	681a      	ldr	r2, [r3, #0]
    2334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2336:	431a      	orrs	r2, r3
    2338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    233a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    233c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    233e:	2280      	movs	r2, #128	; 0x80
    2340:	0052      	lsls	r2, r2, #1
    2342:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    2344:	2323      	movs	r3, #35	; 0x23
    2346:	2210      	movs	r2, #16
    2348:	4694      	mov	ip, r2
    234a:	44bc      	add	ip, r7
    234c:	4463      	add	r3, ip
    234e:	781b      	ldrb	r3, [r3, #0]
    2350:	3312      	adds	r3, #18
    2352:	b2db      	uxtb	r3, r3
    2354:	0018      	movs	r0, r3
    2356:	4b61      	ldr	r3, [pc, #388]	; (24dc <_i2c_master_set_config+0x354>)
    2358:	4798      	blx	r3
    235a:	0003      	movs	r3, r0
    235c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    235e:	693b      	ldr	r3, [r7, #16]
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	22fa      	movs	r2, #250	; 0xfa
    2364:	0092      	lsls	r2, r2, #2
    2366:	4353      	muls	r3, r2
    2368:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    236a:	693b      	ldr	r3, [r7, #16]
    236c:	685b      	ldr	r3, [r3, #4]
    236e:	22fa      	movs	r2, #250	; 0xfa
    2370:	0092      	lsls	r2, r2, #2
    2372:	4353      	muls	r3, r2
    2374:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    2376:	693b      	ldr	r3, [r7, #16]
    2378:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    237a:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    237c:	4b58      	ldr	r3, [pc, #352]	; (24e0 <_i2c_master_set_config+0x358>)
    237e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2380:	4798      	blx	r3
    2382:	0005      	movs	r5, r0
    2384:	000e      	movs	r6, r1
    2386:	4b56      	ldr	r3, [pc, #344]	; (24e0 <_i2c_master_set_config+0x358>)
    2388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    238a:	4798      	blx	r3
    238c:	60b8      	str	r0, [r7, #8]
    238e:	60f9      	str	r1, [r7, #12]
    2390:	4b53      	ldr	r3, [pc, #332]	; (24e0 <_i2c_master_set_config+0x358>)
    2392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2394:	4798      	blx	r3
    2396:	4c53      	ldr	r4, [pc, #332]	; (24e4 <_i2c_master_set_config+0x35c>)
    2398:	4a53      	ldr	r2, [pc, #332]	; (24e8 <_i2c_master_set_config+0x360>)
    239a:	4b54      	ldr	r3, [pc, #336]	; (24ec <_i2c_master_set_config+0x364>)
    239c:	47a0      	blx	r4
    239e:	0003      	movs	r3, r0
    23a0:	000c      	movs	r4, r1
    23a2:	603b      	str	r3, [r7, #0]
    23a4:	607c      	str	r4, [r7, #4]
    23a6:	4b4e      	ldr	r3, [pc, #312]	; (24e0 <_i2c_master_set_config+0x358>)
    23a8:	6a38      	ldr	r0, [r7, #32]
    23aa:	4798      	blx	r3
    23ac:	0002      	movs	r2, r0
    23ae:	000b      	movs	r3, r1
    23b0:	4c4c      	ldr	r4, [pc, #304]	; (24e4 <_i2c_master_set_config+0x35c>)
    23b2:	6838      	ldr	r0, [r7, #0]
    23b4:	6879      	ldr	r1, [r7, #4]
    23b6:	47a0      	blx	r4
    23b8:	0003      	movs	r3, r0
    23ba:	000c      	movs	r4, r1
    23bc:	0018      	movs	r0, r3
    23be:	0021      	movs	r1, r4
    23c0:	4c4b      	ldr	r4, [pc, #300]	; (24f0 <_i2c_master_set_config+0x368>)
    23c2:	2200      	movs	r2, #0
    23c4:	4b4b      	ldr	r3, [pc, #300]	; (24f4 <_i2c_master_set_config+0x36c>)
    23c6:	47a0      	blx	r4
    23c8:	0003      	movs	r3, r0
    23ca:	000c      	movs	r4, r1
    23cc:	001a      	movs	r2, r3
    23ce:	0023      	movs	r3, r4
    23d0:	4c44      	ldr	r4, [pc, #272]	; (24e4 <_i2c_master_set_config+0x35c>)
    23d2:	68b8      	ldr	r0, [r7, #8]
    23d4:	68f9      	ldr	r1, [r7, #12]
    23d6:	47a0      	blx	r4
    23d8:	0003      	movs	r3, r0
    23da:	000c      	movs	r4, r1
    23dc:	001a      	movs	r2, r3
    23de:	0023      	movs	r3, r4
    23e0:	4c45      	ldr	r4, [pc, #276]	; (24f8 <_i2c_master_set_config+0x370>)
    23e2:	0028      	movs	r0, r5
    23e4:	0031      	movs	r1, r6
    23e6:	47a0      	blx	r4
    23e8:	0003      	movs	r3, r0
    23ea:	000c      	movs	r4, r1
    23ec:	001d      	movs	r5, r3
    23ee:	0026      	movs	r6, r4
    23f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    23f2:	005a      	lsls	r2, r3, #1
    23f4:	4b3a      	ldr	r3, [pc, #232]	; (24e0 <_i2c_master_set_config+0x358>)
    23f6:	0010      	movs	r0, r2
    23f8:	4798      	blx	r3
    23fa:	0002      	movs	r2, r0
    23fc:	000b      	movs	r3, r1
    23fe:	4c3c      	ldr	r4, [pc, #240]	; (24f0 <_i2c_master_set_config+0x368>)
    2400:	0028      	movs	r0, r5
    2402:	0031      	movs	r1, r6
    2404:	47a0      	blx	r4
    2406:	0003      	movs	r3, r0
    2408:	000c      	movs	r4, r1
    240a:	0018      	movs	r0, r3
    240c:	0021      	movs	r1, r4
    240e:	4c3a      	ldr	r4, [pc, #232]	; (24f8 <_i2c_master_set_config+0x370>)
    2410:	2200      	movs	r2, #0
    2412:	4b3a      	ldr	r3, [pc, #232]	; (24fc <_i2c_master_set_config+0x374>)
    2414:	47a0      	blx	r4
    2416:	0003      	movs	r3, r0
    2418:	000c      	movs	r4, r1
    241a:	001d      	movs	r5, r3
    241c:	0026      	movs	r6, r4
    241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2420:	005a      	lsls	r2, r3, #1
    2422:	4b2f      	ldr	r3, [pc, #188]	; (24e0 <_i2c_master_set_config+0x358>)
    2424:	0010      	movs	r0, r2
    2426:	4798      	blx	r3
    2428:	0002      	movs	r2, r0
    242a:	000b      	movs	r3, r1
    242c:	4c34      	ldr	r4, [pc, #208]	; (2500 <_i2c_master_set_config+0x378>)
    242e:	0028      	movs	r0, r5
    2430:	0031      	movs	r1, r6
    2432:	47a0      	blx	r4
    2434:	0003      	movs	r3, r0
    2436:	000c      	movs	r4, r1
    2438:	0019      	movs	r1, r3
    243a:	0022      	movs	r2, r4
    243c:	4b31      	ldr	r3, [pc, #196]	; (2504 <_i2c_master_set_config+0x37c>)
    243e:	0008      	movs	r0, r1
    2440:	0011      	movs	r1, r2
    2442:	4798      	blx	r3
    2444:	0003      	movs	r3, r0
    2446:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    2448:	693b      	ldr	r3, [r7, #16]
    244a:	689a      	ldr	r2, [r3, #8]
    244c:	2380      	movs	r3, #128	; 0x80
    244e:	049b      	lsls	r3, r3, #18
    2450:	429a      	cmp	r2, r3
    2452:	d16a      	bne.n	252a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    2454:	4b22      	ldr	r3, [pc, #136]	; (24e0 <_i2c_master_set_config+0x358>)
    2456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2458:	4798      	blx	r3
    245a:	4c25      	ldr	r4, [pc, #148]	; (24f0 <_i2c_master_set_config+0x368>)
    245c:	0002      	movs	r2, r0
    245e:	000b      	movs	r3, r1
    2460:	47a0      	blx	r4
    2462:	0003      	movs	r3, r0
    2464:	000c      	movs	r4, r1
    2466:	001d      	movs	r5, r3
    2468:	0026      	movs	r6, r4
    246a:	4b1d      	ldr	r3, [pc, #116]	; (24e0 <_i2c_master_set_config+0x358>)
    246c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    246e:	4798      	blx	r3
    2470:	4c1c      	ldr	r4, [pc, #112]	; (24e4 <_i2c_master_set_config+0x35c>)
    2472:	2200      	movs	r2, #0
    2474:	4b24      	ldr	r3, [pc, #144]	; (2508 <_i2c_master_set_config+0x380>)
    2476:	47a0      	blx	r4
    2478:	0003      	movs	r3, r0
    247a:	000c      	movs	r4, r1
    247c:	001a      	movs	r2, r3
    247e:	0023      	movs	r3, r4
    2480:	4c1f      	ldr	r4, [pc, #124]	; (2500 <_i2c_master_set_config+0x378>)
    2482:	0028      	movs	r0, r5
    2484:	0031      	movs	r1, r6
    2486:	47a0      	blx	r4
    2488:	0003      	movs	r3, r0
    248a:	000c      	movs	r4, r1
    248c:	0018      	movs	r0, r3
    248e:	0021      	movs	r1, r4
    2490:	4c19      	ldr	r4, [pc, #100]	; (24f8 <_i2c_master_set_config+0x370>)
    2492:	2200      	movs	r2, #0
    2494:	4b19      	ldr	r3, [pc, #100]	; (24fc <_i2c_master_set_config+0x374>)
    2496:	47a0      	blx	r4
    2498:	0003      	movs	r3, r0
    249a:	000c      	movs	r4, r1
    249c:	0019      	movs	r1, r3
    249e:	0022      	movs	r2, r4
    24a0:	4b18      	ldr	r3, [pc, #96]	; (2504 <_i2c_master_set_config+0x37c>)
    24a2:	0008      	movs	r0, r1
    24a4:	0011      	movs	r1, r2
    24a6:	4798      	blx	r3
    24a8:	0003      	movs	r3, r0
    24aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    24ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    24ae:	2b00      	cmp	r3, #0
    24b0:	d02e      	beq.n	2510 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    24b2:	4b16      	ldr	r3, [pc, #88]	; (250c <_i2c_master_set_config+0x384>)
    24b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    24b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    24b8:	4798      	blx	r3
    24ba:	0003      	movs	r3, r0
    24bc:	1e9a      	subs	r2, r3, #2
    24be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    24c0:	1ad3      	subs	r3, r2, r3
    24c2:	653b      	str	r3, [r7, #80]	; 0x50
    24c4:	e031      	b.n	252a <_i2c_master_set_config+0x3a2>
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	000038a5 	.word	0x000038a5
    24cc:	000020f9 	.word	0x000020f9
    24d0:	000036f1 	.word	0x000036f1
    24d4:	0000611d 	.word	0x0000611d
    24d8:	00002121 	.word	0x00002121
    24dc:	00005f59 	.word	0x00005f59
    24e0:	000112c5 	.word	0x000112c5
    24e4:	000106ad 	.word	0x000106ad
    24e8:	e826d695 	.word	0xe826d695
    24ec:	3e112e0b 	.word	0x3e112e0b
    24f0:	0000f825 	.word	0x0000f825
    24f4:	40240000 	.word	0x40240000
    24f8:	00010bad 	.word	0x00010bad
    24fc:	3ff00000 	.word	0x3ff00000
    2500:	0000fe45 	.word	0x0000fe45
    2504:	000111d9 	.word	0x000111d9
    2508:	40080000 	.word	0x40080000
    250c:	0000e3a1 	.word	0x0000e3a1
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    2510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2512:	005a      	lsls	r2, r3, #1
    2514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2516:	18d3      	adds	r3, r2, r3
    2518:	1e5a      	subs	r2, r3, #1
    251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    251c:	0059      	lsls	r1, r3, #1
    251e:	4b1d      	ldr	r3, [pc, #116]	; (2594 <_i2c_master_set_config+0x40c>)
    2520:	0010      	movs	r0, r2
    2522:	4798      	blx	r3
    2524:	0003      	movs	r3, r0
    2526:	3b01      	subs	r3, #1
    2528:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    252a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    252c:	2bff      	cmp	r3, #255	; 0xff
    252e:	dc08      	bgt.n	2542 <_i2c_master_set_config+0x3ba>
    2530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2532:	2b00      	cmp	r3, #0
    2534:	db05      	blt.n	2542 <_i2c_master_set_config+0x3ba>
    2536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2538:	2bff      	cmp	r3, #255	; 0xff
    253a:	dc02      	bgt.n	2542 <_i2c_master_set_config+0x3ba>
    253c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    253e:	2b00      	cmp	r3, #0
    2540:	da06      	bge.n	2550 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2542:	233b      	movs	r3, #59	; 0x3b
    2544:	2210      	movs	r2, #16
    2546:	4694      	mov	ip, r2
    2548:	44bc      	add	ip, r7
    254a:	4463      	add	r3, ip
    254c:	2240      	movs	r2, #64	; 0x40
    254e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    2550:	233b      	movs	r3, #59	; 0x3b
    2552:	2210      	movs	r2, #16
    2554:	4694      	mov	ip, r2
    2556:	44bc      	add	ip, r7
    2558:	4463      	add	r3, ip
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	2b40      	cmp	r3, #64	; 0x40
    255e:	d00e      	beq.n	257e <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2562:	22ff      	movs	r2, #255	; 0xff
    2564:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2568:	041b      	lsls	r3, r3, #16
    256a:	0019      	movs	r1, r3
    256c:	23ff      	movs	r3, #255	; 0xff
    256e:	041b      	lsls	r3, r3, #16
    2570:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    2572:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    2574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2576:	0612      	lsls	r2, r2, #24
    2578:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    257c:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    257e:	233b      	movs	r3, #59	; 0x3b
    2580:	2210      	movs	r2, #16
    2582:	4694      	mov	ip, r2
    2584:	44bc      	add	ip, r7
    2586:	4463      	add	r3, ip
    2588:	781b      	ldrb	r3, [r3, #0]
}
    258a:	0018      	movs	r0, r3
    258c:	46bd      	mov	sp, r7
    258e:	b017      	add	sp, #92	; 0x5c
    2590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	0000e3a1 	.word	0x0000e3a1

00002598 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    2598:	b590      	push	{r4, r7, lr}
    259a:	b08b      	sub	sp, #44	; 0x2c
    259c:	af00      	add	r7, sp, #0
    259e:	60f8      	str	r0, [r7, #12]
    25a0:	60b9      	str	r1, [r7, #8]
    25a2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    25a4:	68fb      	ldr	r3, [r7, #12]
    25a6:	68ba      	ldr	r2, [r7, #8]
    25a8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    25aa:	68fb      	ldr	r3, [r7, #12]
    25ac:	681b      	ldr	r3, [r3, #0]
    25ae:	61fb      	str	r3, [r7, #28]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	681b      	ldr	r3, [r3, #0]
    25b4:	0018      	movs	r0, r3
    25b6:	4b44      	ldr	r3, [pc, #272]	; (26c8 <i2c_master_init+0x130>)
    25b8:	4798      	blx	r3
    25ba:	0003      	movs	r3, r0
    25bc:	61bb      	str	r3, [r7, #24]

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    25be:	69bb      	ldr	r3, [r7, #24]
    25c0:	2b05      	cmp	r3, #5
    25c2:	d104      	bne.n	25ce <i2c_master_init+0x36>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    25c4:	2301      	movs	r3, #1
    25c6:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    25c8:	2318      	movs	r3, #24
    25ca:	623b      	str	r3, [r7, #32]
    25cc:	e004      	b.n	25d8 <i2c_master_init+0x40>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    25ce:	69bb      	ldr	r3, [r7, #24]
    25d0:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25d2:	69bb      	ldr	r3, [r7, #24]
    25d4:	3312      	adds	r3, #18
    25d6:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    25d8:	69bb      	ldr	r3, [r7, #24]
    25da:	2b05      	cmp	r3, #5
    25dc:	d108      	bne.n	25f0 <i2c_master_init+0x58>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    25de:	2201      	movs	r2, #1
    25e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25e2:	409a      	lsls	r2, r3
    25e4:	0013      	movs	r3, r2
    25e6:	0019      	movs	r1, r3
    25e8:	2003      	movs	r0, #3
    25ea:	4b38      	ldr	r3, [pc, #224]	; (26cc <i2c_master_init+0x134>)
    25ec:	4798      	blx	r3
    25ee:	e007      	b.n	2600 <i2c_master_init+0x68>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    25f0:	2201      	movs	r2, #1
    25f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    25f4:	409a      	lsls	r2, r3
    25f6:	0013      	movs	r3, r2
    25f8:	0019      	movs	r1, r3
    25fa:	2002      	movs	r0, #2
    25fc:	4b33      	ldr	r3, [pc, #204]	; (26cc <i2c_master_init+0x134>)
    25fe:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2600:	2314      	movs	r3, #20
    2602:	18fb      	adds	r3, r7, r3
    2604:	0018      	movs	r0, r3
    2606:	4b32      	ldr	r3, [pc, #200]	; (26d0 <i2c_master_init+0x138>)
    2608:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    260a:	687b      	ldr	r3, [r7, #4]
    260c:	7b1a      	ldrb	r2, [r3, #12]
    260e:	2314      	movs	r3, #20
    2610:	18fb      	adds	r3, r7, r3
    2612:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2614:	6a3b      	ldr	r3, [r7, #32]
    2616:	b2db      	uxtb	r3, r3
    2618:	2214      	movs	r2, #20
    261a:	18ba      	adds	r2, r7, r2
    261c:	0011      	movs	r1, r2
    261e:	0018      	movs	r0, r3
    2620:	4b2c      	ldr	r3, [pc, #176]	; (26d4 <i2c_master_init+0x13c>)
    2622:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2624:	6a3b      	ldr	r3, [r7, #32]
    2626:	b2db      	uxtb	r3, r3
    2628:	0018      	movs	r0, r3
    262a:	4b2b      	ldr	r3, [pc, #172]	; (26d8 <i2c_master_init+0x140>)
    262c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	7b1b      	ldrb	r3, [r3, #12]
    2632:	2100      	movs	r1, #0
    2634:	0018      	movs	r0, r3
    2636:	4b29      	ldr	r3, [pc, #164]	; (26dc <i2c_master_init+0x144>)
    2638:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    263a:	69fb      	ldr	r3, [r7, #28]
    263c:	681b      	ldr	r3, [r3, #0]
    263e:	2202      	movs	r2, #2
    2640:	4013      	ands	r3, r2
    2642:	d001      	beq.n	2648 <i2c_master_init+0xb0>
		return STATUS_ERR_DENIED;
    2644:	231c      	movs	r3, #28
    2646:	e03b      	b.n	26c0 <i2c_master_init+0x128>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    2648:	69fb      	ldr	r3, [r7, #28]
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	2201      	movs	r2, #1
    264e:	4013      	ands	r3, r2
    2650:	d001      	beq.n	2656 <i2c_master_init+0xbe>
		return STATUS_BUSY;
    2652:	2305      	movs	r3, #5
    2654:	e034      	b.n	26c0 <i2c_master_init+0x128>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2656:	68fb      	ldr	r3, [r7, #12]
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2217      	movs	r2, #23
    265c:	18bc      	adds	r4, r7, r2
    265e:	0018      	movs	r0, r3
    2660:	4b19      	ldr	r3, [pc, #100]	; (26c8 <i2c_master_init+0x130>)
    2662:	4798      	blx	r3
    2664:	0003      	movs	r3, r0
    2666:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    2668:	4a1d      	ldr	r2, [pc, #116]	; (26e0 <i2c_master_init+0x148>)
    266a:	2317      	movs	r3, #23
    266c:	18fb      	adds	r3, r7, r3
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	0011      	movs	r1, r2
    2672:	0018      	movs	r0, r3
    2674:	4b1b      	ldr	r3, [pc, #108]	; (26e4 <i2c_master_init+0x14c>)
    2676:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2678:	2317      	movs	r3, #23
    267a:	18fb      	adds	r3, r7, r3
    267c:	781a      	ldrb	r2, [r3, #0]
    267e:	4b1a      	ldr	r3, [pc, #104]	; (26e8 <i2c_master_init+0x150>)
    2680:	0092      	lsls	r2, r2, #2
    2682:	68f9      	ldr	r1, [r7, #12]
    2684:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    2686:	68fb      	ldr	r3, [r7, #12]
    2688:	2200      	movs	r2, #0
    268a:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    268c:	68fb      	ldr	r3, [r7, #12]
    268e:	2200      	movs	r2, #0
    2690:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	2200      	movs	r2, #0
    2696:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    2698:	68fb      	ldr	r3, [r7, #12]
    269a:	2200      	movs	r2, #0
    269c:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    269e:	68fb      	ldr	r3, [r7, #12]
    26a0:	2225      	movs	r2, #37	; 0x25
    26a2:	2100      	movs	r1, #0
    26a4:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    26a6:	68fb      	ldr	r3, [r7, #12]
    26a8:	2200      	movs	r2, #0
    26aa:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    26ac:	69fb      	ldr	r3, [r7, #28]
    26ae:	2214      	movs	r2, #20
    26b0:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    26b2:	687a      	ldr	r2, [r7, #4]
    26b4:	68fb      	ldr	r3, [r7, #12]
    26b6:	0011      	movs	r1, r2
    26b8:	0018      	movs	r0, r3
    26ba:	4b0c      	ldr	r3, [pc, #48]	; (26ec <i2c_master_init+0x154>)
    26bc:	4798      	blx	r3
    26be:	0003      	movs	r3, r0
}
    26c0:	0018      	movs	r0, r3
    26c2:	46bd      	mov	sp, r7
    26c4:	b00b      	add	sp, #44	; 0x2c
    26c6:	bd90      	pop	{r4, r7, pc}
    26c8:	000038a5 	.word	0x000038a5
    26cc:	0000207d 	.word	0x0000207d
    26d0:	00002065 	.word	0x00002065
    26d4:	00005e69 	.word	0x00005e69
    26d8:	00005ea9 	.word	0x00005ea9
    26dc:	00003665 	.word	0x00003665
    26e0:	000030bd 	.word	0x000030bd
    26e4:	00003909 	.word	0x00003909
    26e8:	20000f50 	.word	0x20000f50
    26ec:	00002189 	.word	0x00002189

000026f0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	b084      	sub	sp, #16
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	681b      	ldr	r3, [r3, #0]
    26fc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    26fe:	68fb      	ldr	r3, [r7, #12]
    2700:	7e1b      	ldrb	r3, [r3, #24]
    2702:	b2db      	uxtb	r3, r3
    2704:	001a      	movs	r2, r3
    2706:	2302      	movs	r3, #2
    2708:	4013      	ands	r3, r2
    270a:	d00b      	beq.n	2724 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    270c:	68fb      	ldr	r3, [r7, #12]
    270e:	2202      	movs	r2, #2
    2710:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2712:	68fb      	ldr	r3, [r7, #12]
    2714:	8b5b      	ldrh	r3, [r3, #26]
    2716:	b29b      	uxth	r3, r3
    2718:	001a      	movs	r2, r3
    271a:	2302      	movs	r3, #2
    271c:	4013      	ands	r3, r2
    271e:	d011      	beq.n	2744 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    2720:	2341      	movs	r3, #65	; 0x41
    2722:	e010      	b.n	2746 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2724:	68fb      	ldr	r3, [r7, #12]
    2726:	8b5b      	ldrh	r3, [r3, #26]
    2728:	b29b      	uxth	r3, r3
    272a:	001a      	movs	r2, r3
    272c:	2304      	movs	r3, #4
    272e:	4013      	ands	r3, r2
    2730:	d008      	beq.n	2744 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2732:	68fb      	ldr	r3, [r7, #12]
    2734:	685b      	ldr	r3, [r3, #4]
    2736:	22c0      	movs	r2, #192	; 0xc0
    2738:	0292      	lsls	r2, r2, #10
    273a:	431a      	orrs	r2, r3
    273c:	68fb      	ldr	r3, [r7, #12]
    273e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    2740:	2318      	movs	r3, #24
    2742:	e000      	b.n	2746 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    2744:	2300      	movs	r3, #0
}
    2746:	0018      	movs	r0, r3
    2748:	46bd      	mov	sp, r7
    274a:	b004      	add	sp, #16
    274c:	bd80      	pop	{r7, pc}

0000274e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    274e:	b580      	push	{r7, lr}
    2750:	b084      	sub	sp, #16
    2752:	af00      	add	r7, sp, #0
    2754:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2756:	687b      	ldr	r3, [r7, #4]
    2758:	681b      	ldr	r3, [r3, #0]
    275a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    275c:	230e      	movs	r3, #14
    275e:	18fb      	adds	r3, r7, r3
    2760:	2200      	movs	r2, #0
    2762:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2764:	e00f      	b.n	2786 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    2766:	230e      	movs	r3, #14
    2768:	18fb      	adds	r3, r7, r3
    276a:	220e      	movs	r2, #14
    276c:	18ba      	adds	r2, r7, r2
    276e:	8812      	ldrh	r2, [r2, #0]
    2770:	3201      	adds	r2, #1
    2772:	801a      	strh	r2, [r3, #0]
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	891b      	ldrh	r3, [r3, #8]
    2778:	220e      	movs	r2, #14
    277a:	18ba      	adds	r2, r7, r2
    277c:	8812      	ldrh	r2, [r2, #0]
    277e:	429a      	cmp	r2, r3
    2780:	d301      	bcc.n	2786 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    2782:	2312      	movs	r3, #18
    2784:	e00e      	b.n	27a4 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    2786:	68bb      	ldr	r3, [r7, #8]
    2788:	7e1b      	ldrb	r3, [r3, #24]
    278a:	b2db      	uxtb	r3, r3
    278c:	001a      	movs	r2, r3
    278e:	2301      	movs	r3, #1
    2790:	4013      	ands	r3, r2
    2792:	d106      	bne.n	27a2 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    2794:	68bb      	ldr	r3, [r7, #8]
    2796:	7e1b      	ldrb	r3, [r3, #24]
    2798:	b2db      	uxtb	r3, r3
    279a:	001a      	movs	r2, r3
    279c:	2302      	movs	r3, #2
    279e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    27a0:	d0e1      	beq.n	2766 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    27a2:	2300      	movs	r3, #0
}
    27a4:	0018      	movs	r0, r3
    27a6:	46bd      	mov	sp, r7
    27a8:	b004      	add	sp, #16
    27aa:	bd80      	pop	{r7, pc}

000027ac <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    27ac:	b590      	push	{r4, r7, lr}
    27ae:	b085      	sub	sp, #20
    27b0:	af00      	add	r7, sp, #0
    27b2:	6078      	str	r0, [r7, #4]
    27b4:	000a      	movs	r2, r1
    27b6:	1cfb      	adds	r3, r7, #3
    27b8:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	681b      	ldr	r3, [r3, #0]
    27be:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    27c0:	68fb      	ldr	r3, [r7, #12]
    27c2:	685b      	ldr	r3, [r3, #4]
    27c4:	2280      	movs	r2, #128	; 0x80
    27c6:	02d2      	lsls	r2, r2, #11
    27c8:	431a      	orrs	r2, r3
    27ca:	68fb      	ldr	r3, [r7, #12]
    27cc:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    27ce:	1cfb      	adds	r3, r7, #3
    27d0:	781a      	ldrb	r2, [r3, #0]
    27d2:	68fb      	ldr	r3, [r7, #12]
    27d4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    27d6:	230b      	movs	r3, #11
    27d8:	18fc      	adds	r4, r7, r3
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	0018      	movs	r0, r3
    27de:	4b07      	ldr	r3, [pc, #28]	; (27fc <_i2c_master_send_hs_master_code+0x50>)
    27e0:	4798      	blx	r3
    27e2:	0003      	movs	r3, r0
    27e4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    27e6:	68fb      	ldr	r3, [r7, #12]
    27e8:	2201      	movs	r2, #1
    27ea:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    27ec:	230b      	movs	r3, #11
    27ee:	18fb      	adds	r3, r7, r3
    27f0:	781b      	ldrb	r3, [r3, #0]
}
    27f2:	0018      	movs	r0, r3
    27f4:	46bd      	mov	sp, r7
    27f6:	b005      	add	sp, #20
    27f8:	bd90      	pop	{r4, r7, pc}
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	0000274f 	.word	0x0000274f

00002800 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2800:	b590      	push	{r4, r7, lr}
    2802:	b087      	sub	sp, #28
    2804:	af00      	add	r7, sp, #0
    2806:	6078      	str	r0, [r7, #4]
    2808:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	681b      	ldr	r3, [r3, #0]
    280e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2810:	2314      	movs	r3, #20
    2812:	18fb      	adds	r3, r7, r3
    2814:	683a      	ldr	r2, [r7, #0]
    2816:	8852      	ldrh	r2, [r2, #2]
    2818:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    281a:	2312      	movs	r3, #18
    281c:	18fb      	adds	r3, r7, r3
    281e:	2200      	movs	r2, #0
    2820:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2822:	68fb      	ldr	r3, [r7, #12]
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	011b      	lsls	r3, r3, #4
    2828:	0fdb      	lsrs	r3, r3, #31
    282a:	b2db      	uxtb	r3, r3
    282c:	001a      	movs	r2, r3
    282e:	230b      	movs	r3, #11
    2830:	18fb      	adds	r3, r7, r3
    2832:	1e51      	subs	r1, r2, #1
    2834:	418a      	sbcs	r2, r1
    2836:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2838:	683b      	ldr	r3, [r7, #0]
    283a:	7a5b      	ldrb	r3, [r3, #9]
    283c:	2b00      	cmp	r3, #0
    283e:	d006      	beq.n	284e <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2840:	683b      	ldr	r3, [r7, #0]
    2842:	7a9a      	ldrb	r2, [r3, #10]
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	0011      	movs	r1, r2
    2848:	0018      	movs	r0, r3
    284a:	4b85      	ldr	r3, [pc, #532]	; (2a60 <_i2c_master_read_packet+0x260>)
    284c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    284e:	68fb      	ldr	r3, [r7, #12]
    2850:	685b      	ldr	r3, [r3, #4]
    2852:	4a84      	ldr	r2, [pc, #528]	; (2a64 <_i2c_master_read_packet+0x264>)
    2854:	401a      	ands	r2, r3
    2856:	68fb      	ldr	r3, [r7, #12]
    2858:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	7a1b      	ldrb	r3, [r3, #8]
    285e:	2b00      	cmp	r3, #0
    2860:	d042      	beq.n	28e8 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    2862:	683b      	ldr	r3, [r7, #0]
    2864:	881b      	ldrh	r3, [r3, #0]
    2866:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2868:	683b      	ldr	r3, [r7, #0]
    286a:	7a5b      	ldrb	r3, [r3, #9]
    286c:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    286e:	4313      	orrs	r3, r2
    2870:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2872:	2380      	movs	r3, #128	; 0x80
    2874:	021b      	lsls	r3, r3, #8
    2876:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    2878:	68fb      	ldr	r3, [r7, #12]
    287a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    287c:	2317      	movs	r3, #23
    287e:	18fc      	adds	r4, r7, r3
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	0018      	movs	r0, r3
    2884:	4b78      	ldr	r3, [pc, #480]	; (2a68 <_i2c_master_read_packet+0x268>)
    2886:	4798      	blx	r3
    2888:	0003      	movs	r3, r0
    288a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    288c:	68fb      	ldr	r3, [r7, #12]
    288e:	685b      	ldr	r3, [r3, #4]
    2890:	4a74      	ldr	r2, [pc, #464]	; (2a64 <_i2c_master_read_packet+0x264>)
    2892:	401a      	ands	r2, r3
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    2898:	2317      	movs	r3, #23
    289a:	18fb      	adds	r3, r7, r3
    289c:	781b      	ldrb	r3, [r3, #0]
    289e:	2b00      	cmp	r3, #0
    28a0:	d107      	bne.n	28b2 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    28a2:	2317      	movs	r3, #23
    28a4:	18fc      	adds	r4, r7, r3
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	0018      	movs	r0, r3
    28aa:	4b70      	ldr	r3, [pc, #448]	; (2a6c <_i2c_master_read_packet+0x26c>)
    28ac:	4798      	blx	r3
    28ae:	0003      	movs	r3, r0
    28b0:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    28b2:	2317      	movs	r3, #23
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	781b      	ldrb	r3, [r3, #0]
    28b8:	2b00      	cmp	r3, #0
    28ba:	d111      	bne.n	28e0 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    28bc:	683b      	ldr	r3, [r7, #0]
    28be:	881b      	ldrh	r3, [r3, #0]
    28c0:	0a1b      	lsrs	r3, r3, #8
    28c2:	b29b      	uxth	r3, r3
    28c4:	2278      	movs	r2, #120	; 0x78
    28c6:	4313      	orrs	r3, r2
    28c8:	b29b      	uxth	r3, r3
    28ca:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    28cc:	683b      	ldr	r3, [r7, #0]
    28ce:	7a5b      	ldrb	r3, [r3, #9]
    28d0:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    28d2:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    28d4:	2201      	movs	r2, #1
    28d6:	4313      	orrs	r3, r2
    28d8:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    28da:	68fb      	ldr	r3, [r7, #12]
    28dc:	625a      	str	r2, [r3, #36]	; 0x24
    28de:	e00f      	b.n	2900 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    28e0:	2317      	movs	r3, #23
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	e0b6      	b.n	2a56 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    28e8:	683b      	ldr	r3, [r7, #0]
    28ea:	881b      	ldrh	r3, [r3, #0]
    28ec:	005b      	lsls	r3, r3, #1
    28ee:	2201      	movs	r2, #1
    28f0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    28f2:	683b      	ldr	r3, [r7, #0]
    28f4:	7a5b      	ldrb	r3, [r3, #9]
    28f6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    28f8:	4313      	orrs	r3, r2
    28fa:	001a      	movs	r2, r3
    28fc:	68fb      	ldr	r3, [r7, #12]
    28fe:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2900:	2317      	movs	r3, #23
    2902:	18fc      	adds	r4, r7, r3
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	0018      	movs	r0, r3
    2908:	4b57      	ldr	r3, [pc, #348]	; (2a68 <_i2c_master_read_packet+0x268>)
    290a:	4798      	blx	r3
    290c:	0003      	movs	r3, r0
    290e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    2910:	230b      	movs	r3, #11
    2912:	18fb      	adds	r3, r7, r3
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	2b00      	cmp	r3, #0
    2918:	d00b      	beq.n	2932 <_i2c_master_read_packet+0x132>
    291a:	683b      	ldr	r3, [r7, #0]
    291c:	885b      	ldrh	r3, [r3, #2]
    291e:	2b01      	cmp	r3, #1
    2920:	d107      	bne.n	2932 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	685b      	ldr	r3, [r3, #4]
    2926:	2280      	movs	r2, #128	; 0x80
    2928:	02d2      	lsls	r2, r2, #11
    292a:	431a      	orrs	r2, r3
    292c:	68fb      	ldr	r3, [r7, #12]
    292e:	605a      	str	r2, [r3, #4]
    2930:	e005      	b.n	293e <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    2932:	68fb      	ldr	r3, [r7, #12]
    2934:	685b      	ldr	r3, [r3, #4]
    2936:	4a4b      	ldr	r2, [pc, #300]	; (2a64 <_i2c_master_read_packet+0x264>)
    2938:	401a      	ands	r2, r3
    293a:	68fb      	ldr	r3, [r7, #12]
    293c:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    293e:	2317      	movs	r3, #23
    2940:	18fb      	adds	r3, r7, r3
    2942:	781b      	ldrb	r3, [r3, #0]
    2944:	2b00      	cmp	r3, #0
    2946:	d107      	bne.n	2958 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    2948:	2317      	movs	r3, #23
    294a:	18fc      	adds	r4, r7, r3
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	0018      	movs	r0, r3
    2950:	4b46      	ldr	r3, [pc, #280]	; (2a6c <_i2c_master_read_packet+0x26c>)
    2952:	4798      	blx	r3
    2954:	0003      	movs	r3, r0
    2956:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    2958:	2317      	movs	r3, #23
    295a:	18fb      	adds	r3, r7, r3
    295c:	781b      	ldrb	r3, [r3, #0]
    295e:	2b00      	cmp	r3, #0
    2960:	d000      	beq.n	2964 <_i2c_master_read_packet+0x164>
    2962:	e075      	b.n	2a50 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    2964:	e04b      	b.n	29fe <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2966:	68fb      	ldr	r3, [r7, #12]
    2968:	8b5b      	ldrh	r3, [r3, #26]
    296a:	b29b      	uxth	r3, r3
    296c:	001a      	movs	r2, r3
    296e:	2320      	movs	r3, #32
    2970:	4013      	ands	r3, r2
    2972:	d101      	bne.n	2978 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    2974:	2341      	movs	r3, #65	; 0x41
    2976:	e06e      	b.n	2a56 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    2978:	687b      	ldr	r3, [r7, #4]
    297a:	7adb      	ldrb	r3, [r3, #11]
    297c:	2b00      	cmp	r3, #0
    297e:	d01e      	beq.n	29be <_i2c_master_read_packet+0x1be>
    2980:	230b      	movs	r3, #11
    2982:	18fb      	adds	r3, r7, r3
    2984:	781b      	ldrb	r3, [r3, #0]
    2986:	2201      	movs	r2, #1
    2988:	4053      	eors	r3, r2
    298a:	b2db      	uxtb	r3, r3
    298c:	2b00      	cmp	r3, #0
    298e:	d004      	beq.n	299a <_i2c_master_read_packet+0x19a>
    2990:	2314      	movs	r3, #20
    2992:	18fb      	adds	r3, r7, r3
    2994:	881b      	ldrh	r3, [r3, #0]
    2996:	2b00      	cmp	r3, #0
    2998:	d009      	beq.n	29ae <_i2c_master_read_packet+0x1ae>
    299a:	230b      	movs	r3, #11
    299c:	18fb      	adds	r3, r7, r3
    299e:	781b      	ldrb	r3, [r3, #0]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d00c      	beq.n	29be <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    29a4:	2314      	movs	r3, #20
    29a6:	18fb      	adds	r3, r7, r3
    29a8:	881b      	ldrh	r3, [r3, #0]
    29aa:	2b01      	cmp	r3, #1
    29ac:	d107      	bne.n	29be <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	685b      	ldr	r3, [r3, #4]
    29b2:	2280      	movs	r2, #128	; 0x80
    29b4:	02d2      	lsls	r2, r2, #11
    29b6:	431a      	orrs	r2, r3
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	605a      	str	r2, [r3, #4]
    29bc:	e01a      	b.n	29f4 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	0018      	movs	r0, r3
    29c2:	4b2b      	ldr	r3, [pc, #172]	; (2a70 <_i2c_master_read_packet+0x270>)
    29c4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	685a      	ldr	r2, [r3, #4]
    29ca:	2312      	movs	r3, #18
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	881b      	ldrh	r3, [r3, #0]
    29d0:	2112      	movs	r1, #18
    29d2:	1879      	adds	r1, r7, r1
    29d4:	1c58      	adds	r0, r3, #1
    29d6:	8008      	strh	r0, [r1, #0]
    29d8:	18d3      	adds	r3, r2, r3
    29da:	68fa      	ldr	r2, [r7, #12]
    29dc:	2128      	movs	r1, #40	; 0x28
    29de:	5c52      	ldrb	r2, [r2, r1]
    29e0:	b2d2      	uxtb	r2, r2
    29e2:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    29e4:	2317      	movs	r3, #23
    29e6:	18fc      	adds	r4, r7, r3
    29e8:	687b      	ldr	r3, [r7, #4]
    29ea:	0018      	movs	r0, r3
    29ec:	4b1e      	ldr	r3, [pc, #120]	; (2a68 <_i2c_master_read_packet+0x268>)
    29ee:	4798      	blx	r3
    29f0:	0003      	movs	r3, r0
    29f2:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    29f4:	2317      	movs	r3, #23
    29f6:	18fb      	adds	r3, r7, r3
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d109      	bne.n	2a12 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    29fe:	2314      	movs	r3, #20
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	881b      	ldrh	r3, [r3, #0]
    2a04:	2214      	movs	r2, #20
    2a06:	18ba      	adds	r2, r7, r2
    2a08:	1e59      	subs	r1, r3, #1
    2a0a:	8011      	strh	r1, [r2, #0]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d1aa      	bne.n	2966 <_i2c_master_read_packet+0x166>
    2a10:	e000      	b.n	2a14 <_i2c_master_read_packet+0x214>
				break;
    2a12:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    2a14:	687b      	ldr	r3, [r7, #4]
    2a16:	7a9b      	ldrb	r3, [r3, #10]
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d00a      	beq.n	2a32 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	0018      	movs	r0, r3
    2a20:	4b13      	ldr	r3, [pc, #76]	; (2a70 <_i2c_master_read_packet+0x270>)
    2a22:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2a24:	68fb      	ldr	r3, [r7, #12]
    2a26:	685b      	ldr	r3, [r3, #4]
    2a28:	22c0      	movs	r2, #192	; 0xc0
    2a2a:	0292      	lsls	r2, r2, #10
    2a2c:	431a      	orrs	r2, r3
    2a2e:	68fb      	ldr	r3, [r7, #12]
    2a30:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	0018      	movs	r0, r3
    2a36:	4b0e      	ldr	r3, [pc, #56]	; (2a70 <_i2c_master_read_packet+0x270>)
    2a38:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    2a3a:	683b      	ldr	r3, [r7, #0]
    2a3c:	685a      	ldr	r2, [r3, #4]
    2a3e:	2312      	movs	r3, #18
    2a40:	18fb      	adds	r3, r7, r3
    2a42:	881b      	ldrh	r3, [r3, #0]
    2a44:	18d3      	adds	r3, r2, r3
    2a46:	68fa      	ldr	r2, [r7, #12]
    2a48:	2128      	movs	r1, #40	; 0x28
    2a4a:	5c52      	ldrb	r2, [r2, r1]
    2a4c:	b2d2      	uxtb	r2, r2
    2a4e:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    2a50:	2317      	movs	r3, #23
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	781b      	ldrb	r3, [r3, #0]
}
    2a56:	0018      	movs	r0, r3
    2a58:	46bd      	mov	sp, r7
    2a5a:	b007      	add	sp, #28
    2a5c:	bd90      	pop	{r4, r7, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	000027ad 	.word	0x000027ad
    2a64:	fffbffff 	.word	0xfffbffff
    2a68:	0000274f 	.word	0x0000274f
    2a6c:	000026f1 	.word	0x000026f1
    2a70:	00002165 	.word	0x00002165

00002a74 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2a74:	b580      	push	{r7, lr}
    2a76:	b082      	sub	sp, #8
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
    2a7c:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	8b9b      	ldrh	r3, [r3, #28]
    2a82:	b29b      	uxth	r3, r3
    2a84:	2b00      	cmp	r3, #0
    2a86:	d001      	beq.n	2a8c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    2a88:	2305      	movs	r3, #5
    2a8a:	e00c      	b.n	2aa6 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    2a8c:	687b      	ldr	r3, [r7, #4]
    2a8e:	2201      	movs	r2, #1
    2a90:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	2201      	movs	r2, #1
    2a96:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    2a98:	683a      	ldr	r2, [r7, #0]
    2a9a:	687b      	ldr	r3, [r7, #4]
    2a9c:	0011      	movs	r1, r2
    2a9e:	0018      	movs	r0, r3
    2aa0:	4b03      	ldr	r3, [pc, #12]	; (2ab0 <i2c_master_read_packet_wait+0x3c>)
    2aa2:	4798      	blx	r3
    2aa4:	0003      	movs	r3, r0
}
    2aa6:	0018      	movs	r0, r3
    2aa8:	46bd      	mov	sp, r7
    2aaa:	b002      	add	sp, #8
    2aac:	bd80      	pop	{r7, pc}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	00002801 	.word	0x00002801

00002ab4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2ab4:	b590      	push	{r4, r7, lr}
    2ab6:	b087      	sub	sp, #28
    2ab8:	af00      	add	r7, sp, #0
    2aba:	6078      	str	r0, [r7, #4]
    2abc:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    2ac4:	2314      	movs	r3, #20
    2ac6:	18fb      	adds	r3, r7, r3
    2ac8:	683a      	ldr	r2, [r7, #0]
    2aca:	8852      	ldrh	r2, [r2, #2]
    2acc:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	0018      	movs	r0, r3
    2ad2:	4b51      	ldr	r3, [pc, #324]	; (2c18 <_i2c_master_write_packet+0x164>)
    2ad4:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2ad6:	683b      	ldr	r3, [r7, #0]
    2ad8:	7a5b      	ldrb	r3, [r3, #9]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d006      	beq.n	2aec <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2ade:	683b      	ldr	r3, [r7, #0]
    2ae0:	7a9a      	ldrb	r2, [r3, #10]
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	0011      	movs	r1, r2
    2ae6:	0018      	movs	r0, r3
    2ae8:	4b4c      	ldr	r3, [pc, #304]	; (2c1c <_i2c_master_write_packet+0x168>)
    2aea:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2aec:	68fb      	ldr	r3, [r7, #12]
    2aee:	685b      	ldr	r3, [r3, #4]
    2af0:	4a4b      	ldr	r2, [pc, #300]	; (2c20 <_i2c_master_write_packet+0x16c>)
    2af2:	401a      	ands	r2, r3
    2af4:	68fb      	ldr	r3, [r7, #12]
    2af6:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    2af8:	683b      	ldr	r3, [r7, #0]
    2afa:	7a1b      	ldrb	r3, [r3, #8]
    2afc:	2b00      	cmp	r3, #0
    2afe:	d00d      	beq.n	2b1c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2b00:	683b      	ldr	r3, [r7, #0]
    2b02:	881b      	ldrh	r3, [r3, #0]
    2b04:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2b06:	683b      	ldr	r3, [r7, #0]
    2b08:	7a5b      	ldrb	r3, [r3, #9]
    2b0a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2b0c:	4313      	orrs	r3, r2
    2b0e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2b10:	2380      	movs	r3, #128	; 0x80
    2b12:	021b      	lsls	r3, r3, #8
    2b14:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2b16:	68fb      	ldr	r3, [r7, #12]
    2b18:	625a      	str	r2, [r3, #36]	; 0x24
    2b1a:	e009      	b.n	2b30 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	881b      	ldrh	r3, [r3, #0]
    2b20:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2b22:	683b      	ldr	r3, [r7, #0]
    2b24:	7a5b      	ldrb	r3, [r3, #9]
    2b26:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    2b28:	4313      	orrs	r3, r2
    2b2a:	001a      	movs	r2, r3
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    2b30:	2317      	movs	r3, #23
    2b32:	18fc      	adds	r4, r7, r3
    2b34:	687b      	ldr	r3, [r7, #4]
    2b36:	0018      	movs	r0, r3
    2b38:	4b3a      	ldr	r3, [pc, #232]	; (2c24 <_i2c_master_write_packet+0x170>)
    2b3a:	4798      	blx	r3
    2b3c:	0003      	movs	r3, r0
    2b3e:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    2b40:	2317      	movs	r3, #23
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	2b00      	cmp	r3, #0
    2b48:	d107      	bne.n	2b5a <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    2b4a:	2317      	movs	r3, #23
    2b4c:	18fc      	adds	r4, r7, r3
    2b4e:	687b      	ldr	r3, [r7, #4]
    2b50:	0018      	movs	r0, r3
    2b52:	4b35      	ldr	r3, [pc, #212]	; (2c28 <_i2c_master_write_packet+0x174>)
    2b54:	4798      	blx	r3
    2b56:	0003      	movs	r3, r0
    2b58:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    2b5a:	2317      	movs	r3, #23
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	781b      	ldrb	r3, [r3, #0]
    2b60:	2b00      	cmp	r3, #0
    2b62:	d152      	bne.n	2c0a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    2b64:	2312      	movs	r3, #18
    2b66:	18fb      	adds	r3, r7, r3
    2b68:	2200      	movs	r2, #0
    2b6a:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    2b6c:	e033      	b.n	2bd6 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	8b5b      	ldrh	r3, [r3, #26]
    2b72:	b29b      	uxth	r3, r3
    2b74:	001a      	movs	r2, r3
    2b76:	2320      	movs	r3, #32
    2b78:	4013      	ands	r3, r2
    2b7a:	d101      	bne.n	2b80 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    2b7c:	2341      	movs	r3, #65	; 0x41
    2b7e:	e047      	b.n	2c10 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	0018      	movs	r0, r3
    2b84:	4b24      	ldr	r3, [pc, #144]	; (2c18 <_i2c_master_write_packet+0x164>)
    2b86:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    2b88:	683b      	ldr	r3, [r7, #0]
    2b8a:	685a      	ldr	r2, [r3, #4]
    2b8c:	2312      	movs	r3, #18
    2b8e:	18fb      	adds	r3, r7, r3
    2b90:	881b      	ldrh	r3, [r3, #0]
    2b92:	2112      	movs	r1, #18
    2b94:	1879      	adds	r1, r7, r1
    2b96:	1c58      	adds	r0, r3, #1
    2b98:	8008      	strh	r0, [r1, #0]
    2b9a:	18d3      	adds	r3, r2, r3
    2b9c:	7819      	ldrb	r1, [r3, #0]
    2b9e:	68fb      	ldr	r3, [r7, #12]
    2ba0:	2228      	movs	r2, #40	; 0x28
    2ba2:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    2ba4:	2317      	movs	r3, #23
    2ba6:	18fc      	adds	r4, r7, r3
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	0018      	movs	r0, r3
    2bac:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <_i2c_master_write_packet+0x170>)
    2bae:	4798      	blx	r3
    2bb0:	0003      	movs	r3, r0
    2bb2:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    2bb4:	2317      	movs	r3, #23
    2bb6:	18fb      	adds	r3, r7, r3
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d115      	bne.n	2bea <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	8b5b      	ldrh	r3, [r3, #26]
    2bc2:	b29b      	uxth	r3, r3
    2bc4:	001a      	movs	r2, r3
    2bc6:	2304      	movs	r3, #4
    2bc8:	4013      	ands	r3, r2
    2bca:	d004      	beq.n	2bd6 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    2bcc:	2317      	movs	r3, #23
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	221e      	movs	r2, #30
    2bd2:	701a      	strb	r2, [r3, #0]
				break;
    2bd4:	e00a      	b.n	2bec <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    2bd6:	2314      	movs	r3, #20
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	881b      	ldrh	r3, [r3, #0]
    2bdc:	2214      	movs	r2, #20
    2bde:	18ba      	adds	r2, r7, r2
    2be0:	1e59      	subs	r1, r3, #1
    2be2:	8011      	strh	r1, [r2, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d1c2      	bne.n	2b6e <_i2c_master_write_packet+0xba>
    2be8:	e000      	b.n	2bec <_i2c_master_write_packet+0x138>
				break;
    2bea:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	7a9b      	ldrb	r3, [r3, #10]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d00a      	beq.n	2c0a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	0018      	movs	r0, r3
    2bf8:	4b07      	ldr	r3, [pc, #28]	; (2c18 <_i2c_master_write_packet+0x164>)
    2bfa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	22c0      	movs	r2, #192	; 0xc0
    2c02:	0292      	lsls	r2, r2, #10
    2c04:	431a      	orrs	r2, r3
    2c06:	68fb      	ldr	r3, [r7, #12]
    2c08:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    2c0a:	2317      	movs	r3, #23
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	781b      	ldrb	r3, [r3, #0]
}
    2c10:	0018      	movs	r0, r3
    2c12:	46bd      	mov	sp, r7
    2c14:	b007      	add	sp, #28
    2c16:	bd90      	pop	{r4, r7, pc}
    2c18:	00002165 	.word	0x00002165
    2c1c:	000027ad 	.word	0x000027ad
    2c20:	fffbffff 	.word	0xfffbffff
    2c24:	0000274f 	.word	0x0000274f
    2c28:	000026f1 	.word	0x000026f1

00002c2c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2c2c:	b580      	push	{r7, lr}
    2c2e:	b082      	sub	sp, #8
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
    2c34:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	8b9b      	ldrh	r3, [r3, #28]
    2c3a:	b29b      	uxth	r3, r3
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d001      	beq.n	2c44 <i2c_master_write_packet_wait+0x18>
		return STATUS_BUSY;
    2c40:	2305      	movs	r3, #5
    2c42:	e00c      	b.n	2c5e <i2c_master_write_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    2c44:	687b      	ldr	r3, [r7, #4]
    2c46:	2201      	movs	r2, #1
    2c48:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	2201      	movs	r2, #1
    2c4e:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    2c50:	683a      	ldr	r2, [r7, #0]
    2c52:	687b      	ldr	r3, [r7, #4]
    2c54:	0011      	movs	r1, r2
    2c56:	0018      	movs	r0, r3
    2c58:	4b03      	ldr	r3, [pc, #12]	; (2c68 <i2c_master_write_packet_wait+0x3c>)
    2c5a:	4798      	blx	r3
    2c5c:	0003      	movs	r3, r0
}
    2c5e:	0018      	movs	r0, r3
    2c60:	46bd      	mov	sp, r7
    2c62:	b002      	add	sp, #8
    2c64:	bd80      	pop	{r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	00002ab5 	.word	0x00002ab5

00002c6c <i2c_master_is_syncing>:
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b084      	sub	sp, #16
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2c7a:	68fb      	ldr	r3, [r7, #12]
    2c7c:	69db      	ldr	r3, [r3, #28]
    2c7e:	2207      	movs	r2, #7
    2c80:	4013      	ands	r3, r2
    2c82:	1e5a      	subs	r2, r3, #1
    2c84:	4193      	sbcs	r3, r2
    2c86:	b2db      	uxtb	r3, r3
}
    2c88:	0018      	movs	r0, r3
    2c8a:	46bd      	mov	sp, r7
    2c8c:	b004      	add	sp, #16
    2c8e:	bd80      	pop	{r7, pc}

00002c90 <_i2c_master_wait_for_sync>:
{
    2c90:	b580      	push	{r7, lr}
    2c92:	b082      	sub	sp, #8
    2c94:	af00      	add	r7, sp, #0
    2c96:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    2c98:	46c0      	nop			; (mov r8, r8)
    2c9a:	687b      	ldr	r3, [r7, #4]
    2c9c:	0018      	movs	r0, r3
    2c9e:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <_i2c_master_wait_for_sync+0x20>)
    2ca0:	4798      	blx	r3
    2ca2:	1e03      	subs	r3, r0, #0
    2ca4:	d1f9      	bne.n	2c9a <_i2c_master_wait_for_sync+0xa>
}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	46bd      	mov	sp, r7
    2caa:	b002      	add	sp, #8
    2cac:	bd80      	pop	{r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00002c6d 	.word	0x00002c6d

00002cb4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    2cb4:	b580      	push	{r7, lr}
    2cb6:	b084      	sub	sp, #16
    2cb8:	af00      	add	r7, sp, #0
    2cba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	681b      	ldr	r3, [r3, #0]
    2cc0:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2cc2:	68fb      	ldr	r3, [r7, #12]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	011b      	lsls	r3, r3, #4
    2cc8:	0fdb      	lsrs	r3, r3, #31
    2cca:	b2db      	uxtb	r3, r3
    2ccc:	001a      	movs	r2, r3
    2cce:	230b      	movs	r3, #11
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	1e51      	subs	r1, r2, #1
    2cd4:	418a      	sbcs	r2, r1
    2cd6:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    2cd8:	2308      	movs	r3, #8
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	687a      	ldr	r2, [r7, #4]
    2cde:	8b52      	ldrh	r2, [r2, #26]
    2ce0:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    2ce2:	687b      	ldr	r3, [r7, #4]
    2ce4:	8b9b      	ldrh	r3, [r3, #28]
    2ce6:	b29a      	uxth	r2, r3
    2ce8:	2308      	movs	r3, #8
    2cea:	18fb      	adds	r3, r7, r3
    2cec:	2108      	movs	r1, #8
    2cee:	1879      	adds	r1, r7, r1
    2cf0:	8809      	ldrh	r1, [r1, #0]
    2cf2:	1a8a      	subs	r2, r1, r2
    2cf4:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    2cf6:	687b      	ldr	r3, [r7, #4]
    2cf8:	8b9b      	ldrh	r3, [r3, #28]
    2cfa:	b29b      	uxth	r3, r3
    2cfc:	3b01      	subs	r3, #1
    2cfe:	b29a      	uxth	r2, r3
    2d00:	687b      	ldr	r3, [r7, #4]
    2d02:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    2d04:	230b      	movs	r3, #11
    2d06:	18fb      	adds	r3, r7, r3
    2d08:	781b      	ldrb	r3, [r3, #0]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d010      	beq.n	2d30 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	7adb      	ldrb	r3, [r3, #11]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d01c      	beq.n	2d50 <_i2c_master_read+0x9c>
    2d16:	687b      	ldr	r3, [r7, #4]
    2d18:	8b9b      	ldrh	r3, [r3, #28]
    2d1a:	b29b      	uxth	r3, r3
    2d1c:	2b01      	cmp	r3, #1
    2d1e:	d117      	bne.n	2d50 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2d20:	68fb      	ldr	r3, [r7, #12]
    2d22:	685b      	ldr	r3, [r3, #4]
    2d24:	2280      	movs	r2, #128	; 0x80
    2d26:	02d2      	lsls	r2, r2, #11
    2d28:	431a      	orrs	r2, r3
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	605a      	str	r2, [r3, #4]
    2d2e:	e00f      	b.n	2d50 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	7adb      	ldrb	r3, [r3, #11]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d00b      	beq.n	2d50 <_i2c_master_read+0x9c>
    2d38:	687b      	ldr	r3, [r7, #4]
    2d3a:	8b9b      	ldrh	r3, [r3, #28]
    2d3c:	b29b      	uxth	r3, r3
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d106      	bne.n	2d50 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2d42:	68fb      	ldr	r3, [r7, #12]
    2d44:	685b      	ldr	r3, [r3, #4]
    2d46:	2280      	movs	r2, #128	; 0x80
    2d48:	02d2      	lsls	r2, r2, #11
    2d4a:	431a      	orrs	r2, r3
    2d4c:	68fb      	ldr	r3, [r7, #12]
    2d4e:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	8b9b      	ldrh	r3, [r3, #28]
    2d54:	b29b      	uxth	r3, r3
    2d56:	2b00      	cmp	r3, #0
    2d58:	d10e      	bne.n	2d78 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	7a9b      	ldrb	r3, [r3, #10]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d00a      	beq.n	2d78 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    2d62:	687b      	ldr	r3, [r7, #4]
    2d64:	0018      	movs	r0, r3
    2d66:	4b0e      	ldr	r3, [pc, #56]	; (2da0 <_i2c_master_read+0xec>)
    2d68:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	685b      	ldr	r3, [r3, #4]
    2d6e:	22c0      	movs	r2, #192	; 0xc0
    2d70:	0292      	lsls	r2, r2, #10
    2d72:	431a      	orrs	r2, r3
    2d74:	68fb      	ldr	r3, [r7, #12]
    2d76:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	0018      	movs	r0, r3
    2d7c:	4b08      	ldr	r3, [pc, #32]	; (2da0 <_i2c_master_read+0xec>)
    2d7e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	6a1a      	ldr	r2, [r3, #32]
    2d84:	2308      	movs	r3, #8
    2d86:	18fb      	adds	r3, r7, r3
    2d88:	881b      	ldrh	r3, [r3, #0]
    2d8a:	18d3      	adds	r3, r2, r3
    2d8c:	68fa      	ldr	r2, [r7, #12]
    2d8e:	2128      	movs	r1, #40	; 0x28
    2d90:	5c52      	ldrb	r2, [r2, r1]
    2d92:	b2d2      	uxtb	r2, r2
    2d94:	701a      	strb	r2, [r3, #0]
}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	46bd      	mov	sp, r7
    2d9a:	b004      	add	sp, #16
    2d9c:	bd80      	pop	{r7, pc}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	00002c91 	.word	0x00002c91

00002da4 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b084      	sub	sp, #16
    2da8:	af00      	add	r7, sp, #0
    2daa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	681b      	ldr	r3, [r3, #0]
    2db0:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    2db2:	68fb      	ldr	r3, [r7, #12]
    2db4:	8b5b      	ldrh	r3, [r3, #26]
    2db6:	b29b      	uxth	r3, r3
    2db8:	001a      	movs	r2, r3
    2dba:	2304      	movs	r3, #4
    2dbc:	4013      	ands	r3, r2
    2dbe:	d004      	beq.n	2dca <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    2dc0:	687b      	ldr	r3, [r7, #4]
    2dc2:	2225      	movs	r2, #37	; 0x25
    2dc4:	211e      	movs	r1, #30
    2dc6:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    2dc8:	e024      	b.n	2e14 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    2dca:	230a      	movs	r3, #10
    2dcc:	18fb      	adds	r3, r7, r3
    2dce:	687a      	ldr	r2, [r7, #4]
    2dd0:	8b52      	ldrh	r2, [r2, #26]
    2dd2:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	8b9b      	ldrh	r3, [r3, #28]
    2dd8:	b29a      	uxth	r2, r3
    2dda:	230a      	movs	r3, #10
    2ddc:	18fb      	adds	r3, r7, r3
    2dde:	210a      	movs	r1, #10
    2de0:	1879      	adds	r1, r7, r1
    2de2:	8809      	ldrh	r1, [r1, #0]
    2de4:	1a8a      	subs	r2, r1, r2
    2de6:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    2de8:	687b      	ldr	r3, [r7, #4]
    2dea:	8b9b      	ldrh	r3, [r3, #28]
    2dec:	b29b      	uxth	r3, r3
    2dee:	3b01      	subs	r3, #1
    2df0:	b29a      	uxth	r2, r3
    2df2:	687b      	ldr	r3, [r7, #4]
    2df4:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	0018      	movs	r0, r3
    2dfa:	4b08      	ldr	r3, [pc, #32]	; (2e1c <_i2c_master_write+0x78>)
    2dfc:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	6a1a      	ldr	r2, [r3, #32]
    2e02:	230a      	movs	r3, #10
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	881b      	ldrh	r3, [r3, #0]
    2e08:	18d3      	adds	r3, r2, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	b2d9      	uxtb	r1, r3
    2e0e:	68fb      	ldr	r3, [r7, #12]
    2e10:	2228      	movs	r2, #40	; 0x28
    2e12:	5499      	strb	r1, [r3, r2]
}
    2e14:	46bd      	mov	sp, r7
    2e16:	b004      	add	sp, #16
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	00002c91 	.word	0x00002c91

00002e20 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    2e20:	b580      	push	{r7, lr}
    2e22:	b084      	sub	sp, #16
    2e24:	af00      	add	r7, sp, #0
    2e26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    2e2e:	68fb      	ldr	r3, [r7, #12]
    2e30:	7e1b      	ldrb	r3, [r3, #24]
    2e32:	b2db      	uxtb	r3, r3
    2e34:	001a      	movs	r2, r3
    2e36:	2301      	movs	r3, #1
    2e38:	4013      	ands	r3, r2
    2e3a:	d02b      	beq.n	2e94 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2e3c:	68fb      	ldr	r3, [r7, #12]
    2e3e:	2201      	movs	r2, #1
    2e40:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2e42:	68fb      	ldr	r3, [r7, #12]
    2e44:	8b5b      	ldrh	r3, [r3, #26]
    2e46:	b29b      	uxth	r3, r3
    2e48:	001a      	movs	r2, r3
    2e4a:	2302      	movs	r3, #2
    2e4c:	4013      	ands	r3, r2
    2e4e:	d004      	beq.n	2e5a <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    2e50:	687b      	ldr	r3, [r7, #4]
    2e52:	2225      	movs	r2, #37	; 0x25
    2e54:	2141      	movs	r1, #65	; 0x41
    2e56:	5499      	strb	r1, [r3, r2]
    2e58:	e01c      	b.n	2e94 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2e5a:	68fb      	ldr	r3, [r7, #12]
    2e5c:	8b5b      	ldrh	r3, [r3, #26]
    2e5e:	b29b      	uxth	r3, r3
    2e60:	001a      	movs	r2, r3
    2e62:	2304      	movs	r3, #4
    2e64:	4013      	ands	r3, r2
    2e66:	d015      	beq.n	2e94 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	2225      	movs	r2, #37	; 0x25
    2e6c:	2118      	movs	r1, #24
    2e6e:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    2e70:	687b      	ldr	r3, [r7, #4]
    2e72:	2200      	movs	r2, #0
    2e74:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	7a9b      	ldrb	r3, [r3, #10]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d00a      	beq.n	2e94 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	0018      	movs	r0, r3
    2e82:	4b13      	ldr	r3, [pc, #76]	; (2ed0 <_i2c_master_async_address_response+0xb0>)
    2e84:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2e86:	68fb      	ldr	r3, [r7, #12]
    2e88:	685b      	ldr	r3, [r3, #4]
    2e8a:	22c0      	movs	r2, #192	; 0xc0
    2e8c:	0292      	lsls	r2, r2, #10
    2e8e:	431a      	orrs	r2, r3
    2e90:	68fb      	ldr	r3, [r7, #12]
    2e92:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	8b9b      	ldrh	r3, [r3, #28]
    2e98:	b29a      	uxth	r2, r3
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    2e9e:	687b      	ldr	r3, [r7, #4]
    2ea0:	2225      	movs	r2, #37	; 0x25
    2ea2:	5c9b      	ldrb	r3, [r3, r2]
    2ea4:	b2db      	uxtb	r3, r3
    2ea6:	2b05      	cmp	r3, #5
    2ea8:	d10e      	bne.n	2ec8 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	2224      	movs	r2, #36	; 0x24
    2eae:	5c9b      	ldrb	r3, [r3, r2]
    2eb0:	b2db      	uxtb	r3, r3
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d104      	bne.n	2ec0 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    2eb6:	687b      	ldr	r3, [r7, #4]
    2eb8:	0018      	movs	r0, r3
    2eba:	4b06      	ldr	r3, [pc, #24]	; (2ed4 <_i2c_master_async_address_response+0xb4>)
    2ebc:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    2ebe:	e003      	b.n	2ec8 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	0018      	movs	r0, r3
    2ec4:	4b04      	ldr	r3, [pc, #16]	; (2ed8 <_i2c_master_async_address_response+0xb8>)
    2ec6:	4798      	blx	r3
}
    2ec8:	46c0      	nop			; (mov r8, r8)
    2eca:	46bd      	mov	sp, r7
    2ecc:	b004      	add	sp, #16
    2ece:	bd80      	pop	{r7, pc}
    2ed0:	00002c91 	.word	0x00002c91
    2ed4:	00002da5 	.word	0x00002da5
    2ed8:	00002cb5 	.word	0x00002cb5

00002edc <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b084      	sub	sp, #16
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	60f8      	str	r0, [r7, #12]
    2ee4:	60b9      	str	r1, [r7, #8]
    2ee6:	1dfb      	adds	r3, r7, #7
    2ee8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
    2eea:	1dfb      	adds	r3, r7, #7
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	68fa      	ldr	r2, [r7, #12]
    2ef0:	3302      	adds	r3, #2
    2ef2:	009b      	lsls	r3, r3, #2
    2ef4:	18d3      	adds	r3, r2, r3
    2ef6:	3304      	adds	r3, #4
    2ef8:	68ba      	ldr	r2, [r7, #8]
    2efa:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
    2efc:	68fb      	ldr	r3, [r7, #12]
    2efe:	7e1b      	ldrb	r3, [r3, #24]
    2f00:	b2db      	uxtb	r3, r3
    2f02:	b25a      	sxtb	r2, r3
    2f04:	1dfb      	adds	r3, r7, #7
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	2101      	movs	r1, #1
    2f0a:	4099      	lsls	r1, r3
    2f0c:	000b      	movs	r3, r1
    2f0e:	b25b      	sxtb	r3, r3
    2f10:	4313      	orrs	r3, r2
    2f12:	b25b      	sxtb	r3, r3
    2f14:	b2da      	uxtb	r2, r3
    2f16:	68fb      	ldr	r3, [r7, #12]
    2f18:	761a      	strb	r2, [r3, #24]
}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	46bd      	mov	sp, r7
    2f1e:	b004      	add	sp, #16
    2f20:	bd80      	pop	{r7, pc}
	...

00002f24 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2f24:	b590      	push	{r4, r7, lr}
    2f26:	b087      	sub	sp, #28
    2f28:	af00      	add	r7, sp, #0
    2f2a:	6078      	str	r0, [r7, #4]
    2f2c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	681b      	ldr	r3, [r3, #0]
    2f32:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    2f34:	683b      	ldr	r3, [r7, #0]
    2f36:	685a      	ldr	r2, [r3, #4]
    2f38:	687b      	ldr	r3, [r7, #4]
    2f3a:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
    2f3c:	683b      	ldr	r3, [r7, #0]
    2f3e:	885a      	ldrh	r2, [r3, #2]
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	2224      	movs	r2, #36	; 0x24
    2f48:	2101      	movs	r1, #1
    2f4a:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	2225      	movs	r2, #37	; 0x25
    2f50:	2105      	movs	r1, #5
    2f52:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2f54:	693b      	ldr	r3, [r7, #16]
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	011b      	lsls	r3, r3, #4
    2f5a:	0fdb      	lsrs	r3, r3, #31
    2f5c:	b2db      	uxtb	r3, r3
    2f5e:	001a      	movs	r2, r3
    2f60:	230f      	movs	r3, #15
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	1e51      	subs	r1, r2, #1
    2f66:	418a      	sbcs	r2, r1
    2f68:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2f6a:	683b      	ldr	r3, [r7, #0]
    2f6c:	7a5b      	ldrb	r3, [r3, #9]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d006      	beq.n	2f80 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2f72:	683b      	ldr	r3, [r7, #0]
    2f74:	7a9a      	ldrb	r2, [r3, #10]
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	0011      	movs	r1, r2
    2f7a:	0018      	movs	r0, r3
    2f7c:	4b3b      	ldr	r3, [pc, #236]	; (306c <_i2c_master_read_packet+0x148>)
    2f7e:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    2f80:	230f      	movs	r3, #15
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d00b      	beq.n	2fa2 <_i2c_master_read_packet+0x7e>
    2f8a:	683b      	ldr	r3, [r7, #0]
    2f8c:	885b      	ldrh	r3, [r3, #2]
    2f8e:	2b01      	cmp	r3, #1
    2f90:	d107      	bne.n	2fa2 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2f92:	693b      	ldr	r3, [r7, #16]
    2f94:	685b      	ldr	r3, [r3, #4]
    2f96:	2280      	movs	r2, #128	; 0x80
    2f98:	02d2      	lsls	r2, r2, #11
    2f9a:	431a      	orrs	r2, r3
    2f9c:	693b      	ldr	r3, [r7, #16]
    2f9e:	605a      	str	r2, [r3, #4]
    2fa0:	e005      	b.n	2fae <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2fa2:	693b      	ldr	r3, [r7, #16]
    2fa4:	685b      	ldr	r3, [r3, #4]
    2fa6:	4a32      	ldr	r2, [pc, #200]	; (3070 <_i2c_master_read_packet+0x14c>)
    2fa8:	401a      	ands	r2, r3
    2faa:	693b      	ldr	r3, [r7, #16]
    2fac:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
    2fae:	683b      	ldr	r3, [r7, #0]
    2fb0:	7a1b      	ldrb	r3, [r3, #8]
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d045      	beq.n	3042 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    2fb6:	683b      	ldr	r3, [r7, #0]
    2fb8:	881b      	ldrh	r3, [r3, #0]
    2fba:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2fbc:	683b      	ldr	r3, [r7, #0]
    2fbe:	7a5b      	ldrb	r3, [r3, #9]
    2fc0:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    2fc2:	4313      	orrs	r3, r2
    2fc4:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2fc6:	2380      	movs	r3, #128	; 0x80
    2fc8:	021b      	lsls	r3, r3, #8
    2fca:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    2fcc:	693b      	ldr	r3, [r7, #16]
    2fce:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    2fd0:	2317      	movs	r3, #23
    2fd2:	18fc      	adds	r4, r7, r3
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	0018      	movs	r0, r3
    2fd8:	4b26      	ldr	r3, [pc, #152]	; (3074 <_i2c_master_read_packet+0x150>)
    2fda:	4798      	blx	r3
    2fdc:	0003      	movs	r3, r0
    2fde:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2fe0:	693b      	ldr	r3, [r7, #16]
    2fe2:	685b      	ldr	r3, [r3, #4]
    2fe4:	4a22      	ldr	r2, [pc, #136]	; (3070 <_i2c_master_read_packet+0x14c>)
    2fe6:	401a      	ands	r2, r3
    2fe8:	693b      	ldr	r3, [r7, #16]
    2fea:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    2fec:	2317      	movs	r3, #23
    2fee:	18fb      	adds	r3, r7, r3
    2ff0:	781b      	ldrb	r3, [r3, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d107      	bne.n	3006 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
    2ff6:	2317      	movs	r3, #23
    2ff8:	18fc      	adds	r4, r7, r3
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	0018      	movs	r0, r3
    2ffe:	4b1e      	ldr	r3, [pc, #120]	; (3078 <_i2c_master_read_packet+0x154>)
    3000:	4798      	blx	r3
    3002:	0003      	movs	r3, r0
    3004:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    3006:	2317      	movs	r3, #23
    3008:	18fb      	adds	r3, r7, r3
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	2b00      	cmp	r3, #0
    300e:	d114      	bne.n	303a <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
    3010:	693b      	ldr	r3, [r7, #16]
    3012:	2203      	movs	r2, #3
    3014:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3016:	683b      	ldr	r3, [r7, #0]
    3018:	881b      	ldrh	r3, [r3, #0]
    301a:	0a1b      	lsrs	r3, r3, #8
    301c:	b29b      	uxth	r3, r3
    301e:	2278      	movs	r2, #120	; 0x78
    3020:	4313      	orrs	r3, r2
    3022:	b29b      	uxth	r3, r3
    3024:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3026:	683b      	ldr	r3, [r7, #0]
    3028:	7a5b      	ldrb	r3, [r3, #9]
    302a:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    302c:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    302e:	2201      	movs	r2, #1
    3030:	4313      	orrs	r3, r2
    3032:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3034:	693b      	ldr	r3, [r7, #16]
    3036:	625a      	str	r2, [r3, #36]	; 0x24
    3038:	e012      	b.n	3060 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    303a:	2317      	movs	r3, #23
    303c:	18fb      	adds	r3, r7, r3
    303e:	781b      	ldrb	r3, [r3, #0]
    3040:	e00f      	b.n	3062 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    3042:	693b      	ldr	r3, [r7, #16]
    3044:	2203      	movs	r2, #3
    3046:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3048:	683b      	ldr	r3, [r7, #0]
    304a:	881b      	ldrh	r3, [r3, #0]
    304c:	005b      	lsls	r3, r3, #1
    304e:	2201      	movs	r2, #1
    3050:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3052:	683b      	ldr	r3, [r7, #0]
    3054:	7a5b      	ldrb	r3, [r3, #9]
    3056:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3058:	4313      	orrs	r3, r2
    305a:	001a      	movs	r2, r3
    305c:	693b      	ldr	r3, [r7, #16]
    305e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
    3060:	2300      	movs	r3, #0
}
    3062:	0018      	movs	r0, r3
    3064:	46bd      	mov	sp, r7
    3066:	b007      	add	sp, #28
    3068:	bd90      	pop	{r4, r7, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	000027ad 	.word	0x000027ad
    3070:	fffbffff 	.word	0xfffbffff
    3074:	0000274f 	.word	0x0000274f
    3078:	000026f1 	.word	0x000026f1

0000307c <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    307c:	b580      	push	{r7, lr}
    307e:	b082      	sub	sp, #8
    3080:	af00      	add	r7, sp, #0
    3082:	6078      	str	r0, [r7, #4]
    3084:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	8b9b      	ldrh	r3, [r3, #28]
    308a:	b29b      	uxth	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d001      	beq.n	3094 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
    3090:	2305      	movs	r3, #5
    3092:	e00c      	b.n	30ae <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2201      	movs	r2, #1
    3098:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	2201      	movs	r2, #1
    309e:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
    30a0:	683a      	ldr	r2, [r7, #0]
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	0011      	movs	r1, r2
    30a6:	0018      	movs	r0, r3
    30a8:	4b03      	ldr	r3, [pc, #12]	; (30b8 <i2c_master_read_packet_job+0x3c>)
    30aa:	4798      	blx	r3
    30ac:	0003      	movs	r3, r0
}
    30ae:	0018      	movs	r0, r3
    30b0:	46bd      	mov	sp, r7
    30b2:	b002      	add	sp, #8
    30b4:	bd80      	pop	{r7, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	00002f25 	.word	0x00002f25

000030bc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    30bc:	b580      	push	{r7, lr}
    30be:	b086      	sub	sp, #24
    30c0:	af00      	add	r7, sp, #0
    30c2:	0002      	movs	r2, r0
    30c4:	1dfb      	adds	r3, r7, #7
    30c6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    30c8:	1dfb      	adds	r3, r7, #7
    30ca:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
    30cc:	4b93      	ldr	r3, [pc, #588]	; (331c <_i2c_master_interrupt_handler+0x260>)
    30ce:	0092      	lsls	r2, r2, #2
    30d0:	58d3      	ldr	r3, [r2, r3]
    30d2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    30d4:	697b      	ldr	r3, [r7, #20]
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    30da:	693b      	ldr	r3, [r7, #16]
    30dc:	681b      	ldr	r3, [r3, #0]
    30de:	011b      	lsls	r3, r3, #4
    30e0:	0fdb      	lsrs	r3, r3, #31
    30e2:	b2db      	uxtb	r3, r3
    30e4:	001a      	movs	r2, r3
    30e6:	230f      	movs	r3, #15
    30e8:	18fb      	adds	r3, r7, r3
    30ea:	1e51      	subs	r1, r2, #1
    30ec:	418a      	sbcs	r2, r1
    30ee:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    30f0:	230e      	movs	r3, #14
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	697a      	ldr	r2, [r7, #20]
    30f6:	7e52      	ldrb	r2, [r2, #25]
    30f8:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    30fa:	697b      	ldr	r3, [r7, #20]
    30fc:	7e1b      	ldrb	r3, [r3, #24]
    30fe:	b2da      	uxtb	r2, r3
    3100:	230e      	movs	r3, #14
    3102:	18fb      	adds	r3, r7, r3
    3104:	210e      	movs	r1, #14
    3106:	1879      	adds	r1, r7, r1
    3108:	7809      	ldrb	r1, [r1, #0]
    310a:	400a      	ands	r2, r1
    310c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    310e:	697b      	ldr	r3, [r7, #20]
    3110:	8b5b      	ldrh	r3, [r3, #26]
    3112:	b29b      	uxth	r3, r3
    3114:	2b00      	cmp	r3, #0
    3116:	d109      	bne.n	312c <_i2c_master_interrupt_handler+0x70>
    3118:	697b      	ldr	r3, [r7, #20]
    311a:	8b9b      	ldrh	r3, [r3, #28]
    311c:	b29b      	uxth	r3, r3
    311e:	2b00      	cmp	r3, #0
    3120:	d004      	beq.n	312c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    3122:	697b      	ldr	r3, [r7, #20]
    3124:	0018      	movs	r0, r3
    3126:	4b7e      	ldr	r3, [pc, #504]	; (3320 <_i2c_master_interrupt_handler+0x264>)
    3128:	4798      	blx	r3
    312a:	e070      	b.n	320e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    312c:	697b      	ldr	r3, [r7, #20]
    312e:	8b5b      	ldrh	r3, [r3, #26]
    3130:	b29b      	uxth	r3, r3
    3132:	2b00      	cmp	r3, #0
    3134:	d039      	beq.n	31aa <_i2c_master_interrupt_handler+0xee>
    3136:	697b      	ldr	r3, [r7, #20]
    3138:	8b9b      	ldrh	r3, [r3, #28]
    313a:	b29b      	uxth	r3, r3
    313c:	2b00      	cmp	r3, #0
    313e:	d134      	bne.n	31aa <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    3140:	697b      	ldr	r3, [r7, #20]
    3142:	2225      	movs	r2, #37	; 0x25
    3144:	5c9b      	ldrb	r3, [r3, r2]
    3146:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3148:	2b05      	cmp	r3, #5
    314a:	d12e      	bne.n	31aa <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    314c:	697b      	ldr	r3, [r7, #20]
    314e:	2224      	movs	r2, #36	; 0x24
    3150:	5c9b      	ldrb	r3, [r3, r2]
    3152:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    3154:	2b00      	cmp	r3, #0
    3156:	d128      	bne.n	31aa <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    3158:	693b      	ldr	r3, [r7, #16]
    315a:	2203      	movs	r2, #3
    315c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    315e:	697b      	ldr	r3, [r7, #20]
    3160:	2200      	movs	r2, #0
    3162:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    3164:	697b      	ldr	r3, [r7, #20]
    3166:	2225      	movs	r2, #37	; 0x25
    3168:	2100      	movs	r1, #0
    316a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    316c:	697b      	ldr	r3, [r7, #20]
    316e:	7a9b      	ldrb	r3, [r3, #10]
    3170:	2b00      	cmp	r3, #0
    3172:	d00b      	beq.n	318c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3174:	697b      	ldr	r3, [r7, #20]
    3176:	0018      	movs	r0, r3
    3178:	4b6a      	ldr	r3, [pc, #424]	; (3324 <_i2c_master_interrupt_handler+0x268>)
    317a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    317c:	693b      	ldr	r3, [r7, #16]
    317e:	685b      	ldr	r3, [r3, #4]
    3180:	22c0      	movs	r2, #192	; 0xc0
    3182:	0292      	lsls	r2, r2, #10
    3184:	431a      	orrs	r2, r3
    3186:	693b      	ldr	r3, [r7, #16]
    3188:	605a      	str	r2, [r3, #4]
    318a:	e002      	b.n	3192 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    318c:	693b      	ldr	r3, [r7, #16]
    318e:	2201      	movs	r2, #1
    3190:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3192:	230e      	movs	r3, #14
    3194:	18fb      	adds	r3, r7, r3
    3196:	781b      	ldrb	r3, [r3, #0]
    3198:	2201      	movs	r2, #1
    319a:	4013      	ands	r3, r2
    319c:	d037      	beq.n	320e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    319e:	697b      	ldr	r3, [r7, #20]
    31a0:	68db      	ldr	r3, [r3, #12]
    31a2:	697a      	ldr	r2, [r7, #20]
    31a4:	0010      	movs	r0, r2
    31a6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    31a8:	e031      	b.n	320e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    31aa:	697b      	ldr	r3, [r7, #20]
    31ac:	8b5b      	ldrh	r3, [r3, #26]
    31ae:	b29b      	uxth	r3, r3
    31b0:	2b00      	cmp	r3, #0
    31b2:	d02c      	beq.n	320e <_i2c_master_interrupt_handler+0x152>
    31b4:	697b      	ldr	r3, [r7, #20]
    31b6:	8b9b      	ldrh	r3, [r3, #28]
    31b8:	b29b      	uxth	r3, r3
    31ba:	2b00      	cmp	r3, #0
    31bc:	d027      	beq.n	320e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    31be:	693b      	ldr	r3, [r7, #16]
    31c0:	8b5b      	ldrh	r3, [r3, #26]
    31c2:	b29b      	uxth	r3, r3
    31c4:	001a      	movs	r2, r3
    31c6:	2320      	movs	r3, #32
    31c8:	4013      	ands	r3, r2
    31ca:	d111      	bne.n	31f0 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    31cc:	230f      	movs	r3, #15
    31ce:	18fb      	adds	r3, r7, r3
    31d0:	781b      	ldrb	r3, [r3, #0]
    31d2:	2201      	movs	r2, #1
    31d4:	4053      	eors	r3, r2
    31d6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    31d8:	2b00      	cmp	r3, #0
    31da:	d104      	bne.n	31e6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    31dc:	697b      	ldr	r3, [r7, #20]
    31de:	8b9b      	ldrh	r3, [r3, #28]
    31e0:	b29b      	uxth	r3, r3
    31e2:	2b01      	cmp	r3, #1
    31e4:	d004      	beq.n	31f0 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    31e6:	697b      	ldr	r3, [r7, #20]
    31e8:	2225      	movs	r2, #37	; 0x25
    31ea:	2141      	movs	r1, #65	; 0x41
    31ec:	5499      	strb	r1, [r3, r2]
    31ee:	e00e      	b.n	320e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    31f0:	697b      	ldr	r3, [r7, #20]
    31f2:	2224      	movs	r2, #36	; 0x24
    31f4:	5c9b      	ldrb	r3, [r3, r2]
    31f6:	b2db      	uxtb	r3, r3
    31f8:	2b00      	cmp	r3, #0
    31fa:	d104      	bne.n	3206 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    31fc:	697b      	ldr	r3, [r7, #20]
    31fe:	0018      	movs	r0, r3
    3200:	4b49      	ldr	r3, [pc, #292]	; (3328 <_i2c_master_interrupt_handler+0x26c>)
    3202:	4798      	blx	r3
    3204:	e003      	b.n	320e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    3206:	697b      	ldr	r3, [r7, #20]
    3208:	0018      	movs	r0, r3
    320a:	4b48      	ldr	r3, [pc, #288]	; (332c <_i2c_master_interrupt_handler+0x270>)
    320c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    320e:	697b      	ldr	r3, [r7, #20]
    3210:	8b5b      	ldrh	r3, [r3, #26]
    3212:	b29b      	uxth	r3, r3
    3214:	2b00      	cmp	r3, #0
    3216:	d047      	beq.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
    3218:	697b      	ldr	r3, [r7, #20]
    321a:	8b9b      	ldrh	r3, [r3, #28]
    321c:	b29b      	uxth	r3, r3
    321e:	2b00      	cmp	r3, #0
    3220:	d142      	bne.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    3222:	697b      	ldr	r3, [r7, #20]
    3224:	2225      	movs	r2, #37	; 0x25
    3226:	5c9b      	ldrb	r3, [r3, r2]
    3228:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    322a:	2b05      	cmp	r3, #5
    322c:	d13c      	bne.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    322e:	697b      	ldr	r3, [r7, #20]
    3230:	2224      	movs	r2, #36	; 0x24
    3232:	5c9b      	ldrb	r3, [r3, r2]
    3234:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
    3236:	2b01      	cmp	r3, #1
    3238:	d136      	bne.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    323a:	693b      	ldr	r3, [r7, #16]
    323c:	7e1b      	ldrb	r3, [r3, #24]
    323e:	b2db      	uxtb	r3, r3
    3240:	001a      	movs	r2, r3
    3242:	2302      	movs	r3, #2
    3244:	4013      	ands	r3, r2
    3246:	d002      	beq.n	324e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3248:	693b      	ldr	r3, [r7, #16]
    324a:	2202      	movs	r2, #2
    324c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    324e:	693b      	ldr	r3, [r7, #16]
    3250:	2203      	movs	r2, #3
    3252:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    3254:	697b      	ldr	r3, [r7, #20]
    3256:	2200      	movs	r2, #0
    3258:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    325a:	697b      	ldr	r3, [r7, #20]
    325c:	2225      	movs	r2, #37	; 0x25
    325e:	2100      	movs	r1, #0
    3260:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3262:	230e      	movs	r3, #14
    3264:	18fb      	adds	r3, r7, r3
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	2202      	movs	r2, #2
    326a:	4013      	ands	r3, r2
    326c:	d00b      	beq.n	3286 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    326e:	697b      	ldr	r3, [r7, #20]
    3270:	2224      	movs	r2, #36	; 0x24
    3272:	5c9b      	ldrb	r3, [r3, r2]
    3274:	b2db      	uxtb	r3, r3
    3276:	2b01      	cmp	r3, #1
    3278:	d105      	bne.n	3286 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    327a:	697b      	ldr	r3, [r7, #20]
    327c:	691b      	ldr	r3, [r3, #16]
    327e:	697a      	ldr	r2, [r7, #20]
    3280:	0010      	movs	r0, r2
    3282:	4798      	blx	r3
    3284:	e010      	b.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3286:	230e      	movs	r3, #14
    3288:	18fb      	adds	r3, r7, r3
    328a:	781b      	ldrb	r3, [r3, #0]
    328c:	2201      	movs	r2, #1
    328e:	4013      	ands	r3, r2
    3290:	d00a      	beq.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3292:	697b      	ldr	r3, [r7, #20]
    3294:	2224      	movs	r2, #36	; 0x24
    3296:	5c9b      	ldrb	r3, [r3, r2]
    3298:	b2db      	uxtb	r3, r3
    329a:	2b00      	cmp	r3, #0
    329c:	d104      	bne.n	32a8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    329e:	697b      	ldr	r3, [r7, #20]
    32a0:	68db      	ldr	r3, [r3, #12]
    32a2:	697a      	ldr	r2, [r7, #20]
    32a4:	0010      	movs	r0, r2
    32a6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    32a8:	697b      	ldr	r3, [r7, #20]
    32aa:	2225      	movs	r2, #37	; 0x25
    32ac:	5c9b      	ldrb	r3, [r3, r2]
    32ae:	b2db      	uxtb	r3, r3
    32b0:	2b05      	cmp	r3, #5
    32b2:	d02e      	beq.n	3312 <_i2c_master_interrupt_handler+0x256>
    32b4:	697b      	ldr	r3, [r7, #20]
    32b6:	2225      	movs	r2, #37	; 0x25
    32b8:	5c9b      	ldrb	r3, [r3, r2]
    32ba:	b2db      	uxtb	r3, r3
    32bc:	2b00      	cmp	r3, #0
    32be:	d028      	beq.n	3312 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    32c0:	693b      	ldr	r3, [r7, #16]
    32c2:	2203      	movs	r2, #3
    32c4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    32c6:	697b      	ldr	r3, [r7, #20]
    32c8:	2200      	movs	r2, #0
    32ca:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    32cc:	697b      	ldr	r3, [r7, #20]
    32ce:	2200      	movs	r2, #0
    32d0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    32d2:	697b      	ldr	r3, [r7, #20]
    32d4:	2225      	movs	r2, #37	; 0x25
    32d6:	5c9b      	ldrb	r3, [r3, r2]
    32d8:	b2db      	uxtb	r3, r3
    32da:	2b41      	cmp	r3, #65	; 0x41
    32dc:	d00e      	beq.n	32fc <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    32de:	697b      	ldr	r3, [r7, #20]
    32e0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    32e2:	2b00      	cmp	r3, #0
    32e4:	d00a      	beq.n	32fc <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
    32e6:	697b      	ldr	r3, [r7, #20]
    32e8:	0018      	movs	r0, r3
    32ea:	4b0e      	ldr	r3, [pc, #56]	; (3324 <_i2c_master_interrupt_handler+0x268>)
    32ec:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    32ee:	693b      	ldr	r3, [r7, #16]
    32f0:	685b      	ldr	r3, [r3, #4]
    32f2:	22e0      	movs	r2, #224	; 0xe0
    32f4:	02d2      	lsls	r2, r2, #11
    32f6:	431a      	orrs	r2, r3
    32f8:	693b      	ldr	r3, [r7, #16]
    32fa:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    32fc:	230e      	movs	r3, #14
    32fe:	18fb      	adds	r3, r7, r3
    3300:	781b      	ldrb	r3, [r3, #0]
    3302:	2204      	movs	r2, #4
    3304:	4013      	ands	r3, r2
    3306:	d004      	beq.n	3312 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3308:	697b      	ldr	r3, [r7, #20]
    330a:	695b      	ldr	r3, [r3, #20]
    330c:	697a      	ldr	r2, [r7, #20]
    330e:	0010      	movs	r0, r2
    3310:	4798      	blx	r3
		}
	}
}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	46bd      	mov	sp, r7
    3316:	b006      	add	sp, #24
    3318:	bd80      	pop	{r7, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	20000f50 	.word	0x20000f50
    3320:	00002e21 	.word	0x00002e21
    3324:	00002c91 	.word	0x00002c91
    3328:	00002da5 	.word	0x00002da5
    332c:	00002cb5 	.word	0x00002cb5

00003330 <system_gclk_chan_get_config_defaults>:
{
    3330:	b580      	push	{r7, lr}
    3332:	b082      	sub	sp, #8
    3334:	af00      	add	r7, sp, #0
    3336:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3338:	687b      	ldr	r3, [r7, #4]
    333a:	2200      	movs	r2, #0
    333c:	701a      	strb	r2, [r3, #0]
}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	46bd      	mov	sp, r7
    3342:	b002      	add	sp, #8
    3344:	bd80      	pop	{r7, pc}

00003346 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3346:	b5f0      	push	{r4, r5, r6, r7, lr}
    3348:	b08d      	sub	sp, #52	; 0x34
    334a:	af00      	add	r7, sp, #0
    334c:	60b8      	str	r0, [r7, #8]
    334e:	60f9      	str	r1, [r7, #12]
    3350:	603a      	str	r2, [r7, #0]
    3352:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3354:	2300      	movs	r3, #0
    3356:	2400      	movs	r4, #0
    3358:	623b      	str	r3, [r7, #32]
    335a:	627c      	str	r4, [r7, #36]	; 0x24
    335c:	2300      	movs	r3, #0
    335e:	2400      	movs	r4, #0
    3360:	61bb      	str	r3, [r7, #24]
    3362:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3364:	233f      	movs	r3, #63	; 0x3f
    3366:	62fb      	str	r3, [r7, #44]	; 0x2c
    3368:	e053      	b.n	3412 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    336c:	3b20      	subs	r3, #32
    336e:	2b00      	cmp	r3, #0
    3370:	db04      	blt.n	337c <long_division+0x36>
    3372:	2201      	movs	r2, #1
    3374:	409a      	lsls	r2, r3
    3376:	0013      	movs	r3, r2
    3378:	617b      	str	r3, [r7, #20]
    337a:	e00b      	b.n	3394 <long_division+0x4e>
    337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    337e:	2220      	movs	r2, #32
    3380:	1ad3      	subs	r3, r2, r3
    3382:	2201      	movs	r2, #1
    3384:	40da      	lsrs	r2, r3
    3386:	0013      	movs	r3, r2
    3388:	2100      	movs	r1, #0
    338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    338c:	4091      	lsls	r1, r2
    338e:	000a      	movs	r2, r1
    3390:	4313      	orrs	r3, r2
    3392:	617b      	str	r3, [r7, #20]
    3394:	2201      	movs	r2, #1
    3396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3398:	409a      	lsls	r2, r3
    339a:	0013      	movs	r3, r2
    339c:	613b      	str	r3, [r7, #16]

		r = r << 1;
    339e:	69bb      	ldr	r3, [r7, #24]
    33a0:	69fc      	ldr	r4, [r7, #28]
    33a2:	18db      	adds	r3, r3, r3
    33a4:	4164      	adcs	r4, r4
    33a6:	61bb      	str	r3, [r7, #24]
    33a8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    33aa:	68bb      	ldr	r3, [r7, #8]
    33ac:	693a      	ldr	r2, [r7, #16]
    33ae:	401a      	ands	r2, r3
    33b0:	0015      	movs	r5, r2
    33b2:	68fb      	ldr	r3, [r7, #12]
    33b4:	697a      	ldr	r2, [r7, #20]
    33b6:	401a      	ands	r2, r3
    33b8:	0016      	movs	r6, r2
    33ba:	002b      	movs	r3, r5
    33bc:	4333      	orrs	r3, r6
    33be:	d007      	beq.n	33d0 <long_division+0x8a>
			r |= 0x01;
    33c0:	69bb      	ldr	r3, [r7, #24]
    33c2:	2201      	movs	r2, #1
    33c4:	4313      	orrs	r3, r2
    33c6:	61bb      	str	r3, [r7, #24]
    33c8:	69fb      	ldr	r3, [r7, #28]
    33ca:	2200      	movs	r2, #0
    33cc:	4313      	orrs	r3, r2
    33ce:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    33d0:	687a      	ldr	r2, [r7, #4]
    33d2:	69fb      	ldr	r3, [r7, #28]
    33d4:	429a      	cmp	r2, r3
    33d6:	d819      	bhi.n	340c <long_division+0xc6>
    33d8:	687a      	ldr	r2, [r7, #4]
    33da:	69fb      	ldr	r3, [r7, #28]
    33dc:	429a      	cmp	r2, r3
    33de:	d103      	bne.n	33e8 <long_division+0xa2>
    33e0:	683a      	ldr	r2, [r7, #0]
    33e2:	69bb      	ldr	r3, [r7, #24]
    33e4:	429a      	cmp	r2, r3
    33e6:	d811      	bhi.n	340c <long_division+0xc6>
			r = r - d;
    33e8:	69b9      	ldr	r1, [r7, #24]
    33ea:	69fa      	ldr	r2, [r7, #28]
    33ec:	683b      	ldr	r3, [r7, #0]
    33ee:	687c      	ldr	r4, [r7, #4]
    33f0:	1ac9      	subs	r1, r1, r3
    33f2:	41a2      	sbcs	r2, r4
    33f4:	000b      	movs	r3, r1
    33f6:	0014      	movs	r4, r2
    33f8:	61bb      	str	r3, [r7, #24]
    33fa:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    33fc:	6a3a      	ldr	r2, [r7, #32]
    33fe:	693b      	ldr	r3, [r7, #16]
    3400:	4313      	orrs	r3, r2
    3402:	623b      	str	r3, [r7, #32]
    3404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3406:	697b      	ldr	r3, [r7, #20]
    3408:	4313      	orrs	r3, r2
    340a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    340e:	3b01      	subs	r3, #1
    3410:	62fb      	str	r3, [r7, #44]	; 0x2c
    3412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3414:	2b00      	cmp	r3, #0
    3416:	daa8      	bge.n	336a <long_division+0x24>
		}
	}

	return q;
    3418:	6a3b      	ldr	r3, [r7, #32]
    341a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    341c:	0018      	movs	r0, r3
    341e:	0021      	movs	r1, r4
    3420:	46bd      	mov	sp, r7
    3422:	b00d      	add	sp, #52	; 0x34
    3424:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003426 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3426:	b580      	push	{r7, lr}
    3428:	b086      	sub	sp, #24
    342a:	af00      	add	r7, sp, #0
    342c:	60f8      	str	r0, [r7, #12]
    342e:	60b9      	str	r1, [r7, #8]
    3430:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3432:	2316      	movs	r3, #22
    3434:	18fb      	adds	r3, r7, r3
    3436:	2200      	movs	r2, #0
    3438:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    343a:	68bb      	ldr	r3, [r7, #8]
    343c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    343e:	68bb      	ldr	r3, [r7, #8]
    3440:	085a      	lsrs	r2, r3, #1
    3442:	68fb      	ldr	r3, [r7, #12]
    3444:	429a      	cmp	r2, r3
    3446:	d201      	bcs.n	344c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3448:	2340      	movs	r3, #64	; 0x40
    344a:	e026      	b.n	349a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    344c:	68bb      	ldr	r3, [r7, #8]
    344e:	085b      	lsrs	r3, r3, #1
    3450:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3452:	e00a      	b.n	346a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3454:	693a      	ldr	r2, [r7, #16]
    3456:	68fb      	ldr	r3, [r7, #12]
    3458:	1ad3      	subs	r3, r2, r3
    345a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    345c:	2316      	movs	r3, #22
    345e:	18fb      	adds	r3, r7, r3
    3460:	881a      	ldrh	r2, [r3, #0]
    3462:	2316      	movs	r3, #22
    3464:	18fb      	adds	r3, r7, r3
    3466:	3201      	adds	r2, #1
    3468:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    346a:	693a      	ldr	r2, [r7, #16]
    346c:	68fb      	ldr	r3, [r7, #12]
    346e:	429a      	cmp	r2, r3
    3470:	d2f0      	bcs.n	3454 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3472:	2316      	movs	r3, #22
    3474:	18fb      	adds	r3, r7, r3
    3476:	2216      	movs	r2, #22
    3478:	18ba      	adds	r2, r7, r2
    347a:	8812      	ldrh	r2, [r2, #0]
    347c:	3a01      	subs	r2, #1
    347e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3480:	2316      	movs	r3, #22
    3482:	18fb      	adds	r3, r7, r3
    3484:	881b      	ldrh	r3, [r3, #0]
    3486:	2bff      	cmp	r3, #255	; 0xff
    3488:	d901      	bls.n	348e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    348a:	2340      	movs	r3, #64	; 0x40
    348c:	e005      	b.n	349a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    348e:	687b      	ldr	r3, [r7, #4]
    3490:	2216      	movs	r2, #22
    3492:	18ba      	adds	r2, r7, r2
    3494:	8812      	ldrh	r2, [r2, #0]
    3496:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3498:	2300      	movs	r3, #0
	}
}
    349a:	0018      	movs	r0, r3
    349c:	46bd      	mov	sp, r7
    349e:	b006      	add	sp, #24
    34a0:	bd80      	pop	{r7, pc}
	...

000034a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    34a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34a6:	b0a1      	sub	sp, #132	; 0x84
    34a8:	af00      	add	r7, sp, #0
    34aa:	64f8      	str	r0, [r7, #76]	; 0x4c
    34ac:	64b9      	str	r1, [r7, #72]	; 0x48
    34ae:	647a      	str	r2, [r7, #68]	; 0x44
    34b0:	2243      	movs	r2, #67	; 0x43
    34b2:	18ba      	adds	r2, r7, r2
    34b4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    34b6:	2300      	movs	r3, #0
    34b8:	2400      	movs	r4, #0
    34ba:	673b      	str	r3, [r7, #112]	; 0x70
    34bc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    34be:	2300      	movs	r3, #0
    34c0:	2400      	movs	r4, #0
    34c2:	66bb      	str	r3, [r7, #104]	; 0x68
    34c4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    34c6:	2300      	movs	r3, #0
    34c8:	2400      	movs	r4, #0
    34ca:	67bb      	str	r3, [r7, #120]	; 0x78
    34cc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    34ce:	2300      	movs	r3, #0
    34d0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    34d2:	2358      	movs	r3, #88	; 0x58
    34d4:	2240      	movs	r2, #64	; 0x40
    34d6:	4694      	mov	ip, r2
    34d8:	44bc      	add	ip, r7
    34da:	4463      	add	r3, ip
    34dc:	781a      	ldrb	r2, [r3, #0]
    34de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    34e0:	435a      	muls	r2, r3
    34e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    34e4:	429a      	cmp	r2, r3
    34e6:	d901      	bls.n	34ec <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    34e8:	2340      	movs	r3, #64	; 0x40
    34ea:	e0b3      	b.n	3654 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    34ec:	2343      	movs	r3, #67	; 0x43
    34ee:	18fb      	adds	r3, r7, r3
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d13d      	bne.n	3572 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    34f6:	2358      	movs	r3, #88	; 0x58
    34f8:	2240      	movs	r2, #64	; 0x40
    34fa:	4694      	mov	ip, r2
    34fc:	44bc      	add	ip, r7
    34fe:	4463      	add	r3, ip
    3500:	781b      	ldrb	r3, [r3, #0]
    3502:	b2db      	uxtb	r3, r3
    3504:	613b      	str	r3, [r7, #16]
    3506:	2300      	movs	r3, #0
    3508:	617b      	str	r3, [r7, #20]
    350a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    350c:	60bb      	str	r3, [r7, #8]
    350e:	2300      	movs	r3, #0
    3510:	60fb      	str	r3, [r7, #12]
    3512:	4c52      	ldr	r4, [pc, #328]	; (365c <_sercom_get_async_baud_val+0x1b8>)
    3514:	68ba      	ldr	r2, [r7, #8]
    3516:	68fb      	ldr	r3, [r7, #12]
    3518:	6938      	ldr	r0, [r7, #16]
    351a:	6979      	ldr	r1, [r7, #20]
    351c:	47a0      	blx	r4
    351e:	0003      	movs	r3, r0
    3520:	000c      	movs	r4, r1
    3522:	001b      	movs	r3, r3
    3524:	65fb      	str	r3, [r7, #92]	; 0x5c
    3526:	2300      	movs	r3, #0
    3528:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    352c:	603b      	str	r3, [r7, #0]
    352e:	2300      	movs	r3, #0
    3530:	607b      	str	r3, [r7, #4]
    3532:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3534:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3536:	683a      	ldr	r2, [r7, #0]
    3538:	687b      	ldr	r3, [r7, #4]
    353a:	4c49      	ldr	r4, [pc, #292]	; (3660 <_sercom_get_async_baud_val+0x1bc>)
    353c:	47a0      	blx	r4
    353e:	0003      	movs	r3, r0
    3540:	000c      	movs	r4, r1
    3542:	673b      	str	r3, [r7, #112]	; 0x70
    3544:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3546:	2100      	movs	r1, #0
    3548:	2201      	movs	r2, #1
    354a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    354c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    354e:	1ac9      	subs	r1, r1, r3
    3550:	41a2      	sbcs	r2, r4
    3552:	000b      	movs	r3, r1
    3554:	0014      	movs	r4, r2
    3556:	66bb      	str	r3, [r7, #104]	; 0x68
    3558:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    355a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    355c:	0c1b      	lsrs	r3, r3, #16
    355e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3560:	0416      	lsls	r6, r2, #16
    3562:	431e      	orrs	r6, r3
    3564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3566:	041d      	lsls	r5, r3, #16
    3568:	0033      	movs	r3, r6
    356a:	67bb      	str	r3, [r7, #120]	; 0x78
    356c:	2300      	movs	r3, #0
    356e:	67fb      	str	r3, [r7, #124]	; 0x7c
    3570:	e06a      	b.n	3648 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3572:	2343      	movs	r3, #67	; 0x43
    3574:	18fb      	adds	r3, r7, r3
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	2b01      	cmp	r3, #1
    357a:	d165      	bne.n	3648 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    357e:	633b      	str	r3, [r7, #48]	; 0x30
    3580:	2300      	movs	r3, #0
    3582:	637b      	str	r3, [r7, #52]	; 0x34
    3584:	2358      	movs	r3, #88	; 0x58
    3586:	2240      	movs	r2, #64	; 0x40
    3588:	4694      	mov	ip, r2
    358a:	44bc      	add	ip, r7
    358c:	4463      	add	r3, ip
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	b2db      	uxtb	r3, r3
    3592:	62bb      	str	r3, [r7, #40]	; 0x28
    3594:	2300      	movs	r3, #0
    3596:	62fb      	str	r3, [r7, #44]	; 0x2c
    3598:	4c30      	ldr	r4, [pc, #192]	; (365c <_sercom_get_async_baud_val+0x1b8>)
    359a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    359e:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    35a2:	47a0      	blx	r4
    35a4:	0003      	movs	r3, r0
    35a6:	000c      	movs	r4, r1
    35a8:	65bb      	str	r3, [r7, #88]	; 0x58
    35aa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    35ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35ae:	623b      	str	r3, [r7, #32]
    35b0:	2300      	movs	r3, #0
    35b2:	627b      	str	r3, [r7, #36]	; 0x24
    35b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35b6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    35b8:	001a      	movs	r2, r3
    35ba:	0023      	movs	r3, r4
    35bc:	6a38      	ldr	r0, [r7, #32]
    35be:	6a79      	ldr	r1, [r7, #36]	; 0x24
    35c0:	4c27      	ldr	r4, [pc, #156]	; (3660 <_sercom_get_async_baud_val+0x1bc>)
    35c2:	47a0      	blx	r4
    35c4:	0003      	movs	r3, r0
    35c6:	000c      	movs	r4, r1
    35c8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    35ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    35cc:	2380      	movs	r3, #128	; 0x80
    35ce:	019b      	lsls	r3, r3, #6
    35d0:	429a      	cmp	r2, r3
    35d2:	d901      	bls.n	35d8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35d4:	2340      	movs	r3, #64	; 0x40
    35d6:	e03d      	b.n	3654 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    35d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    35da:	61bb      	str	r3, [r7, #24]
    35dc:	2300      	movs	r3, #0
    35de:	61fb      	str	r3, [r7, #28]
    35e0:	69b9      	ldr	r1, [r7, #24]
    35e2:	69fa      	ldr	r2, [r7, #28]
    35e4:	000b      	movs	r3, r1
    35e6:	0f5b      	lsrs	r3, r3, #29
    35e8:	0010      	movs	r0, r2
    35ea:	00c0      	lsls	r0, r0, #3
    35ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    35ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35f0:	4318      	orrs	r0, r3
    35f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    35f4:	000b      	movs	r3, r1
    35f6:	00db      	lsls	r3, r3, #3
    35f8:	63bb      	str	r3, [r7, #56]	; 0x38
    35fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    35fc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    35fe:	001a      	movs	r2, r3
    3600:	0023      	movs	r3, r4
    3602:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3606:	4c16      	ldr	r4, [pc, #88]	; (3660 <_sercom_get_async_baud_val+0x1bc>)
    3608:	47a0      	blx	r4
    360a:	0003      	movs	r3, r0
    360c:	000c      	movs	r4, r1
    360e:	65bb      	str	r3, [r7, #88]	; 0x58
    3610:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3614:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3616:	b2d9      	uxtb	r1, r3
    3618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    361a:	b2db      	uxtb	r3, r3
    361c:	00db      	lsls	r3, r3, #3
    361e:	b2da      	uxtb	r2, r3
    3620:	2317      	movs	r3, #23
    3622:	2040      	movs	r0, #64	; 0x40
    3624:	4684      	mov	ip, r0
    3626:	44bc      	add	ip, r7
    3628:	4463      	add	r3, ip
    362a:	1a8a      	subs	r2, r1, r2
    362c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    362e:	2317      	movs	r3, #23
    3630:	2240      	movs	r2, #64	; 0x40
    3632:	4694      	mov	ip, r2
    3634:	44bc      	add	ip, r7
    3636:	4463      	add	r3, ip
    3638:	781b      	ldrb	r3, [r3, #0]
    363a:	035b      	lsls	r3, r3, #13
    363c:	001a      	movs	r2, r3
    363e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3640:	4313      	orrs	r3, r2
    3642:	67bb      	str	r3, [r7, #120]	; 0x78
    3644:	2300      	movs	r3, #0
    3646:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    364a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    364c:	b29a      	uxth	r2, r3
    364e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3650:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3652:	2300      	movs	r3, #0
}
    3654:	0018      	movs	r0, r3
    3656:	46bd      	mov	sp, r7
    3658:	b021      	add	sp, #132	; 0x84
    365a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    365c:	0000e7bd 	.word	0x0000e7bd
    3660:	00003347 	.word	0x00003347

00003664 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3664:	b580      	push	{r7, lr}
    3666:	b084      	sub	sp, #16
    3668:	af00      	add	r7, sp, #0
    366a:	0002      	movs	r2, r0
    366c:	1dfb      	adds	r3, r7, #7
    366e:	701a      	strb	r2, [r3, #0]
    3670:	1dbb      	adds	r3, r7, #6
    3672:	1c0a      	adds	r2, r1, #0
    3674:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3676:	4b1a      	ldr	r3, [pc, #104]	; (36e0 <sercom_set_gclk_generator+0x7c>)
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	2201      	movs	r2, #1
    367c:	4053      	eors	r3, r2
    367e:	b2db      	uxtb	r3, r3
    3680:	2b00      	cmp	r3, #0
    3682:	d103      	bne.n	368c <sercom_set_gclk_generator+0x28>
    3684:	1dbb      	adds	r3, r7, #6
    3686:	781b      	ldrb	r3, [r3, #0]
    3688:	2b00      	cmp	r3, #0
    368a:	d01b      	beq.n	36c4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    368c:	230c      	movs	r3, #12
    368e:	18fb      	adds	r3, r7, r3
    3690:	0018      	movs	r0, r3
    3692:	4b14      	ldr	r3, [pc, #80]	; (36e4 <sercom_set_gclk_generator+0x80>)
    3694:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3696:	230c      	movs	r3, #12
    3698:	18fb      	adds	r3, r7, r3
    369a:	1dfa      	adds	r2, r7, #7
    369c:	7812      	ldrb	r2, [r2, #0]
    369e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    36a0:	230c      	movs	r3, #12
    36a2:	18fb      	adds	r3, r7, r3
    36a4:	0019      	movs	r1, r3
    36a6:	2011      	movs	r0, #17
    36a8:	4b0f      	ldr	r3, [pc, #60]	; (36e8 <sercom_set_gclk_generator+0x84>)
    36aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    36ac:	2011      	movs	r0, #17
    36ae:	4b0f      	ldr	r3, [pc, #60]	; (36ec <sercom_set_gclk_generator+0x88>)
    36b0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    36b2:	4b0b      	ldr	r3, [pc, #44]	; (36e0 <sercom_set_gclk_generator+0x7c>)
    36b4:	1dfa      	adds	r2, r7, #7
    36b6:	7812      	ldrb	r2, [r2, #0]
    36b8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    36ba:	4b09      	ldr	r3, [pc, #36]	; (36e0 <sercom_set_gclk_generator+0x7c>)
    36bc:	2201      	movs	r2, #1
    36be:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    36c0:	2300      	movs	r3, #0
    36c2:	e008      	b.n	36d6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    36c4:	4b06      	ldr	r3, [pc, #24]	; (36e0 <sercom_set_gclk_generator+0x7c>)
    36c6:	785b      	ldrb	r3, [r3, #1]
    36c8:	1dfa      	adds	r2, r7, #7
    36ca:	7812      	ldrb	r2, [r2, #0]
    36cc:	429a      	cmp	r2, r3
    36ce:	d101      	bne.n	36d4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    36d0:	2300      	movs	r3, #0
    36d2:	e000      	b.n	36d6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    36d4:	231d      	movs	r3, #29
}
    36d6:	0018      	movs	r0, r3
    36d8:	46bd      	mov	sp, r7
    36da:	b004      	add	sp, #16
    36dc:	bd80      	pop	{r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	20000a54 	.word	0x20000a54
    36e4:	00003331 	.word	0x00003331
    36e8:	00005e69 	.word	0x00005e69
    36ec:	00005ea9 	.word	0x00005ea9

000036f0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    36f0:	b580      	push	{r7, lr}
    36f2:	b082      	sub	sp, #8
    36f4:	af00      	add	r7, sp, #0
    36f6:	6078      	str	r0, [r7, #4]
    36f8:	000a      	movs	r2, r1
    36fa:	1cfb      	adds	r3, r7, #3
    36fc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    36fe:	687b      	ldr	r3, [r7, #4]
    3700:	4a4e      	ldr	r2, [pc, #312]	; (383c <_sercom_get_default_pad+0x14c>)
    3702:	4293      	cmp	r3, r2
    3704:	d040      	beq.n	3788 <_sercom_get_default_pad+0x98>
    3706:	4a4d      	ldr	r2, [pc, #308]	; (383c <_sercom_get_default_pad+0x14c>)
    3708:	4293      	cmp	r3, r2
    370a:	d807      	bhi.n	371c <_sercom_get_default_pad+0x2c>
    370c:	2284      	movs	r2, #132	; 0x84
    370e:	05d2      	lsls	r2, r2, #23
    3710:	4293      	cmp	r3, r2
    3712:	d00f      	beq.n	3734 <_sercom_get_default_pad+0x44>
    3714:	4a4a      	ldr	r2, [pc, #296]	; (3840 <_sercom_get_default_pad+0x150>)
    3716:	4293      	cmp	r3, r2
    3718:	d021      	beq.n	375e <_sercom_get_default_pad+0x6e>
    371a:	e089      	b.n	3830 <_sercom_get_default_pad+0x140>
    371c:	4a49      	ldr	r2, [pc, #292]	; (3844 <_sercom_get_default_pad+0x154>)
    371e:	4293      	cmp	r3, r2
    3720:	d100      	bne.n	3724 <_sercom_get_default_pad+0x34>
    3722:	e05b      	b.n	37dc <_sercom_get_default_pad+0xec>
    3724:	4a48      	ldr	r2, [pc, #288]	; (3848 <_sercom_get_default_pad+0x158>)
    3726:	4293      	cmp	r3, r2
    3728:	d100      	bne.n	372c <_sercom_get_default_pad+0x3c>
    372a:	e06c      	b.n	3806 <_sercom_get_default_pad+0x116>
    372c:	4a47      	ldr	r2, [pc, #284]	; (384c <_sercom_get_default_pad+0x15c>)
    372e:	4293      	cmp	r3, r2
    3730:	d03f      	beq.n	37b2 <_sercom_get_default_pad+0xc2>
    3732:	e07d      	b.n	3830 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3734:	1cfb      	adds	r3, r7, #3
    3736:	781b      	ldrb	r3, [r3, #0]
    3738:	2b01      	cmp	r3, #1
    373a:	d00a      	beq.n	3752 <_sercom_get_default_pad+0x62>
    373c:	dc02      	bgt.n	3744 <_sercom_get_default_pad+0x54>
    373e:	2b00      	cmp	r3, #0
    3740:	d005      	beq.n	374e <_sercom_get_default_pad+0x5e>
    3742:	e075      	b.n	3830 <_sercom_get_default_pad+0x140>
    3744:	2b02      	cmp	r3, #2
    3746:	d006      	beq.n	3756 <_sercom_get_default_pad+0x66>
    3748:	2b03      	cmp	r3, #3
    374a:	d006      	beq.n	375a <_sercom_get_default_pad+0x6a>
    374c:	e070      	b.n	3830 <_sercom_get_default_pad+0x140>
    374e:	4b40      	ldr	r3, [pc, #256]	; (3850 <_sercom_get_default_pad+0x160>)
    3750:	e06f      	b.n	3832 <_sercom_get_default_pad+0x142>
    3752:	4b40      	ldr	r3, [pc, #256]	; (3854 <_sercom_get_default_pad+0x164>)
    3754:	e06d      	b.n	3832 <_sercom_get_default_pad+0x142>
    3756:	4b40      	ldr	r3, [pc, #256]	; (3858 <_sercom_get_default_pad+0x168>)
    3758:	e06b      	b.n	3832 <_sercom_get_default_pad+0x142>
    375a:	4b40      	ldr	r3, [pc, #256]	; (385c <_sercom_get_default_pad+0x16c>)
    375c:	e069      	b.n	3832 <_sercom_get_default_pad+0x142>
    375e:	1cfb      	adds	r3, r7, #3
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	2b01      	cmp	r3, #1
    3764:	d00a      	beq.n	377c <_sercom_get_default_pad+0x8c>
    3766:	dc02      	bgt.n	376e <_sercom_get_default_pad+0x7e>
    3768:	2b00      	cmp	r3, #0
    376a:	d005      	beq.n	3778 <_sercom_get_default_pad+0x88>
    376c:	e060      	b.n	3830 <_sercom_get_default_pad+0x140>
    376e:	2b02      	cmp	r3, #2
    3770:	d006      	beq.n	3780 <_sercom_get_default_pad+0x90>
    3772:	2b03      	cmp	r3, #3
    3774:	d006      	beq.n	3784 <_sercom_get_default_pad+0x94>
    3776:	e05b      	b.n	3830 <_sercom_get_default_pad+0x140>
    3778:	2303      	movs	r3, #3
    377a:	e05a      	b.n	3832 <_sercom_get_default_pad+0x142>
    377c:	4b38      	ldr	r3, [pc, #224]	; (3860 <_sercom_get_default_pad+0x170>)
    377e:	e058      	b.n	3832 <_sercom_get_default_pad+0x142>
    3780:	4b38      	ldr	r3, [pc, #224]	; (3864 <_sercom_get_default_pad+0x174>)
    3782:	e056      	b.n	3832 <_sercom_get_default_pad+0x142>
    3784:	4b38      	ldr	r3, [pc, #224]	; (3868 <_sercom_get_default_pad+0x178>)
    3786:	e054      	b.n	3832 <_sercom_get_default_pad+0x142>
    3788:	1cfb      	adds	r3, r7, #3
    378a:	781b      	ldrb	r3, [r3, #0]
    378c:	2b01      	cmp	r3, #1
    378e:	d00a      	beq.n	37a6 <_sercom_get_default_pad+0xb6>
    3790:	dc02      	bgt.n	3798 <_sercom_get_default_pad+0xa8>
    3792:	2b00      	cmp	r3, #0
    3794:	d005      	beq.n	37a2 <_sercom_get_default_pad+0xb2>
    3796:	e04b      	b.n	3830 <_sercom_get_default_pad+0x140>
    3798:	2b02      	cmp	r3, #2
    379a:	d006      	beq.n	37aa <_sercom_get_default_pad+0xba>
    379c:	2b03      	cmp	r3, #3
    379e:	d006      	beq.n	37ae <_sercom_get_default_pad+0xbe>
    37a0:	e046      	b.n	3830 <_sercom_get_default_pad+0x140>
    37a2:	4b32      	ldr	r3, [pc, #200]	; (386c <_sercom_get_default_pad+0x17c>)
    37a4:	e045      	b.n	3832 <_sercom_get_default_pad+0x142>
    37a6:	4b32      	ldr	r3, [pc, #200]	; (3870 <_sercom_get_default_pad+0x180>)
    37a8:	e043      	b.n	3832 <_sercom_get_default_pad+0x142>
    37aa:	4b32      	ldr	r3, [pc, #200]	; (3874 <_sercom_get_default_pad+0x184>)
    37ac:	e041      	b.n	3832 <_sercom_get_default_pad+0x142>
    37ae:	4b32      	ldr	r3, [pc, #200]	; (3878 <_sercom_get_default_pad+0x188>)
    37b0:	e03f      	b.n	3832 <_sercom_get_default_pad+0x142>
    37b2:	1cfb      	adds	r3, r7, #3
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	2b01      	cmp	r3, #1
    37b8:	d00a      	beq.n	37d0 <_sercom_get_default_pad+0xe0>
    37ba:	dc02      	bgt.n	37c2 <_sercom_get_default_pad+0xd2>
    37bc:	2b00      	cmp	r3, #0
    37be:	d005      	beq.n	37cc <_sercom_get_default_pad+0xdc>
    37c0:	e036      	b.n	3830 <_sercom_get_default_pad+0x140>
    37c2:	2b02      	cmp	r3, #2
    37c4:	d006      	beq.n	37d4 <_sercom_get_default_pad+0xe4>
    37c6:	2b03      	cmp	r3, #3
    37c8:	d006      	beq.n	37d8 <_sercom_get_default_pad+0xe8>
    37ca:	e031      	b.n	3830 <_sercom_get_default_pad+0x140>
    37cc:	4b2b      	ldr	r3, [pc, #172]	; (387c <_sercom_get_default_pad+0x18c>)
    37ce:	e030      	b.n	3832 <_sercom_get_default_pad+0x142>
    37d0:	4b2b      	ldr	r3, [pc, #172]	; (3880 <_sercom_get_default_pad+0x190>)
    37d2:	e02e      	b.n	3832 <_sercom_get_default_pad+0x142>
    37d4:	4b2b      	ldr	r3, [pc, #172]	; (3884 <_sercom_get_default_pad+0x194>)
    37d6:	e02c      	b.n	3832 <_sercom_get_default_pad+0x142>
    37d8:	4b2b      	ldr	r3, [pc, #172]	; (3888 <_sercom_get_default_pad+0x198>)
    37da:	e02a      	b.n	3832 <_sercom_get_default_pad+0x142>
    37dc:	1cfb      	adds	r3, r7, #3
    37de:	781b      	ldrb	r3, [r3, #0]
    37e0:	2b01      	cmp	r3, #1
    37e2:	d00a      	beq.n	37fa <_sercom_get_default_pad+0x10a>
    37e4:	dc02      	bgt.n	37ec <_sercom_get_default_pad+0xfc>
    37e6:	2b00      	cmp	r3, #0
    37e8:	d005      	beq.n	37f6 <_sercom_get_default_pad+0x106>
    37ea:	e021      	b.n	3830 <_sercom_get_default_pad+0x140>
    37ec:	2b02      	cmp	r3, #2
    37ee:	d006      	beq.n	37fe <_sercom_get_default_pad+0x10e>
    37f0:	2b03      	cmp	r3, #3
    37f2:	d006      	beq.n	3802 <_sercom_get_default_pad+0x112>
    37f4:	e01c      	b.n	3830 <_sercom_get_default_pad+0x140>
    37f6:	2300      	movs	r3, #0
    37f8:	e01b      	b.n	3832 <_sercom_get_default_pad+0x142>
    37fa:	2300      	movs	r3, #0
    37fc:	e019      	b.n	3832 <_sercom_get_default_pad+0x142>
    37fe:	4b23      	ldr	r3, [pc, #140]	; (388c <_sercom_get_default_pad+0x19c>)
    3800:	e017      	b.n	3832 <_sercom_get_default_pad+0x142>
    3802:	4b23      	ldr	r3, [pc, #140]	; (3890 <_sercom_get_default_pad+0x1a0>)
    3804:	e015      	b.n	3832 <_sercom_get_default_pad+0x142>
    3806:	1cfb      	adds	r3, r7, #3
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	2b01      	cmp	r3, #1
    380c:	d00a      	beq.n	3824 <_sercom_get_default_pad+0x134>
    380e:	dc02      	bgt.n	3816 <_sercom_get_default_pad+0x126>
    3810:	2b00      	cmp	r3, #0
    3812:	d005      	beq.n	3820 <_sercom_get_default_pad+0x130>
    3814:	e00c      	b.n	3830 <_sercom_get_default_pad+0x140>
    3816:	2b02      	cmp	r3, #2
    3818:	d006      	beq.n	3828 <_sercom_get_default_pad+0x138>
    381a:	2b03      	cmp	r3, #3
    381c:	d006      	beq.n	382c <_sercom_get_default_pad+0x13c>
    381e:	e007      	b.n	3830 <_sercom_get_default_pad+0x140>
    3820:	4b1c      	ldr	r3, [pc, #112]	; (3894 <_sercom_get_default_pad+0x1a4>)
    3822:	e006      	b.n	3832 <_sercom_get_default_pad+0x142>
    3824:	4b1c      	ldr	r3, [pc, #112]	; (3898 <_sercom_get_default_pad+0x1a8>)
    3826:	e004      	b.n	3832 <_sercom_get_default_pad+0x142>
    3828:	4b1c      	ldr	r3, [pc, #112]	; (389c <_sercom_get_default_pad+0x1ac>)
    382a:	e002      	b.n	3832 <_sercom_get_default_pad+0x142>
    382c:	4b1c      	ldr	r3, [pc, #112]	; (38a0 <_sercom_get_default_pad+0x1b0>)
    382e:	e000      	b.n	3832 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    3830:	2300      	movs	r3, #0
}
    3832:	0018      	movs	r0, r3
    3834:	46bd      	mov	sp, r7
    3836:	b002      	add	sp, #8
    3838:	bd80      	pop	{r7, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	42000800 	.word	0x42000800
    3840:	42000400 	.word	0x42000400
    3844:	42001000 	.word	0x42001000
    3848:	43000400 	.word	0x43000400
    384c:	42000c00 	.word	0x42000c00
    3850:	00040003 	.word	0x00040003
    3854:	00050003 	.word	0x00050003
    3858:	00060003 	.word	0x00060003
    385c:	00070003 	.word	0x00070003
    3860:	00010003 	.word	0x00010003
    3864:	001e0003 	.word	0x001e0003
    3868:	001f0003 	.word	0x001f0003
    386c:	00080003 	.word	0x00080003
    3870:	00090003 	.word	0x00090003
    3874:	000a0003 	.word	0x000a0003
    3878:	000b0003 	.word	0x000b0003
    387c:	00100003 	.word	0x00100003
    3880:	00110003 	.word	0x00110003
    3884:	00120003 	.word	0x00120003
    3888:	00130003 	.word	0x00130003
    388c:	000e0003 	.word	0x000e0003
    3890:	000f0003 	.word	0x000f0003
    3894:	00160003 	.word	0x00160003
    3898:	00170003 	.word	0x00170003
    389c:	00180003 	.word	0x00180003
    38a0:	00190003 	.word	0x00190003

000038a4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    38a4:	b590      	push	{r4, r7, lr}
    38a6:	b08b      	sub	sp, #44	; 0x2c
    38a8:	af00      	add	r7, sp, #0
    38aa:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    38ac:	230c      	movs	r3, #12
    38ae:	18fb      	adds	r3, r7, r3
    38b0:	4a0f      	ldr	r2, [pc, #60]	; (38f0 <_sercom_get_sercom_inst_index+0x4c>)
    38b2:	ca13      	ldmia	r2!, {r0, r1, r4}
    38b4:	c313      	stmia	r3!, {r0, r1, r4}
    38b6:	ca13      	ldmia	r2!, {r0, r1, r4}
    38b8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    38ba:	2300      	movs	r3, #0
    38bc:	627b      	str	r3, [r7, #36]	; 0x24
    38be:	e00e      	b.n	38de <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    38c0:	230c      	movs	r3, #12
    38c2:	18fb      	adds	r3, r7, r3
    38c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38c6:	0092      	lsls	r2, r2, #2
    38c8:	58d3      	ldr	r3, [r2, r3]
    38ca:	001a      	movs	r2, r3
    38cc:	687b      	ldr	r3, [r7, #4]
    38ce:	429a      	cmp	r2, r3
    38d0:	d102      	bne.n	38d8 <_sercom_get_sercom_inst_index+0x34>
			return i;
    38d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38d4:	b2db      	uxtb	r3, r3
    38d6:	e006      	b.n	38e6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    38d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38da:	3301      	adds	r3, #1
    38dc:	627b      	str	r3, [r7, #36]	; 0x24
    38de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38e0:	2b05      	cmp	r3, #5
    38e2:	d9ed      	bls.n	38c0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    38e4:	2300      	movs	r3, #0
}
    38e6:	0018      	movs	r0, r3
    38e8:	46bd      	mov	sp, r7
    38ea:	b00b      	add	sp, #44	; 0x2c
    38ec:	bd90      	pop	{r4, r7, pc}
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	000164ec 	.word	0x000164ec

000038f4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b082      	sub	sp, #8
    38f8:	af00      	add	r7, sp, #0
    38fa:	0002      	movs	r2, r0
    38fc:	1dfb      	adds	r3, r7, #7
    38fe:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3900:	46c0      	nop			; (mov r8, r8)
    3902:	46bd      	mov	sp, r7
    3904:	b002      	add	sp, #8
    3906:	bd80      	pop	{r7, pc}

00003908 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3908:	b580      	push	{r7, lr}
    390a:	b084      	sub	sp, #16
    390c:	af00      	add	r7, sp, #0
    390e:	0002      	movs	r2, r0
    3910:	6039      	str	r1, [r7, #0]
    3912:	1dfb      	adds	r3, r7, #7
    3914:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3916:	4b13      	ldr	r3, [pc, #76]	; (3964 <_sercom_set_handler+0x5c>)
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	2201      	movs	r2, #1
    391c:	4053      	eors	r3, r2
    391e:	b2db      	uxtb	r3, r3
    3920:	2b00      	cmp	r3, #0
    3922:	d015      	beq.n	3950 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3924:	2300      	movs	r3, #0
    3926:	60fb      	str	r3, [r7, #12]
    3928:	e00c      	b.n	3944 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    392a:	4b0f      	ldr	r3, [pc, #60]	; (3968 <_sercom_set_handler+0x60>)
    392c:	68fa      	ldr	r2, [r7, #12]
    392e:	0092      	lsls	r2, r2, #2
    3930:	490e      	ldr	r1, [pc, #56]	; (396c <_sercom_set_handler+0x64>)
    3932:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3934:	4b0e      	ldr	r3, [pc, #56]	; (3970 <_sercom_set_handler+0x68>)
    3936:	68fa      	ldr	r2, [r7, #12]
    3938:	0092      	lsls	r2, r2, #2
    393a:	2100      	movs	r1, #0
    393c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    393e:	68fb      	ldr	r3, [r7, #12]
    3940:	3301      	adds	r3, #1
    3942:	60fb      	str	r3, [r7, #12]
    3944:	68fb      	ldr	r3, [r7, #12]
    3946:	2b05      	cmp	r3, #5
    3948:	d9ef      	bls.n	392a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    394a:	4b06      	ldr	r3, [pc, #24]	; (3964 <_sercom_set_handler+0x5c>)
    394c:	2201      	movs	r2, #1
    394e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3950:	1dfb      	adds	r3, r7, #7
    3952:	781a      	ldrb	r2, [r3, #0]
    3954:	4b04      	ldr	r3, [pc, #16]	; (3968 <_sercom_set_handler+0x60>)
    3956:	0092      	lsls	r2, r2, #2
    3958:	6839      	ldr	r1, [r7, #0]
    395a:	50d1      	str	r1, [r2, r3]
}
    395c:	46c0      	nop			; (mov r8, r8)
    395e:	46bd      	mov	sp, r7
    3960:	b004      	add	sp, #16
    3962:	bd80      	pop	{r7, pc}
    3964:	20000a56 	.word	0x20000a56
    3968:	20000a58 	.word	0x20000a58
    396c:	000038f5 	.word	0x000038f5
    3970:	20000f50 	.word	0x20000f50

00003974 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3974:	b590      	push	{r4, r7, lr}
    3976:	b085      	sub	sp, #20
    3978:	af00      	add	r7, sp, #0
    397a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    397c:	2308      	movs	r3, #8
    397e:	18fb      	adds	r3, r7, r3
    3980:	4a0b      	ldr	r2, [pc, #44]	; (39b0 <_sercom_get_interrupt_vector+0x3c>)
    3982:	6811      	ldr	r1, [r2, #0]
    3984:	6019      	str	r1, [r3, #0]
    3986:	8892      	ldrh	r2, [r2, #4]
    3988:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    398a:	230f      	movs	r3, #15
    398c:	18fc      	adds	r4, r7, r3
    398e:	687b      	ldr	r3, [r7, #4]
    3990:	0018      	movs	r0, r3
    3992:	4b08      	ldr	r3, [pc, #32]	; (39b4 <_sercom_get_interrupt_vector+0x40>)
    3994:	4798      	blx	r3
    3996:	0003      	movs	r3, r0
    3998:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    399a:	230f      	movs	r3, #15
    399c:	18fb      	adds	r3, r7, r3
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	2208      	movs	r2, #8
    39a2:	18ba      	adds	r2, r7, r2
    39a4:	5cd3      	ldrb	r3, [r2, r3]
    39a6:	b25b      	sxtb	r3, r3
}
    39a8:	0018      	movs	r0, r3
    39aa:	46bd      	mov	sp, r7
    39ac:	b005      	add	sp, #20
    39ae:	bd90      	pop	{r4, r7, pc}
    39b0:	00016504 	.word	0x00016504
    39b4:	000038a5 	.word	0x000038a5

000039b8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    39b8:	b580      	push	{r7, lr}
    39ba:	af00      	add	r7, sp, #0
    39bc:	4b03      	ldr	r3, [pc, #12]	; (39cc <SERCOM0_Handler+0x14>)
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	2000      	movs	r0, #0
    39c2:	4798      	blx	r3
    39c4:	46c0      	nop			; (mov r8, r8)
    39c6:	46bd      	mov	sp, r7
    39c8:	bd80      	pop	{r7, pc}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	20000a58 	.word	0x20000a58

000039d0 <SERCOM1_Handler>:
    39d0:	b580      	push	{r7, lr}
    39d2:	af00      	add	r7, sp, #0
    39d4:	4b03      	ldr	r3, [pc, #12]	; (39e4 <SERCOM1_Handler+0x14>)
    39d6:	685b      	ldr	r3, [r3, #4]
    39d8:	2001      	movs	r0, #1
    39da:	4798      	blx	r3
    39dc:	46c0      	nop			; (mov r8, r8)
    39de:	46bd      	mov	sp, r7
    39e0:	bd80      	pop	{r7, pc}
    39e2:	46c0      	nop			; (mov r8, r8)
    39e4:	20000a58 	.word	0x20000a58

000039e8 <SERCOM2_Handler>:
    39e8:	b580      	push	{r7, lr}
    39ea:	af00      	add	r7, sp, #0
    39ec:	4b03      	ldr	r3, [pc, #12]	; (39fc <SERCOM2_Handler+0x14>)
    39ee:	689b      	ldr	r3, [r3, #8]
    39f0:	2002      	movs	r0, #2
    39f2:	4798      	blx	r3
    39f4:	46c0      	nop			; (mov r8, r8)
    39f6:	46bd      	mov	sp, r7
    39f8:	bd80      	pop	{r7, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	20000a58 	.word	0x20000a58

00003a00 <SERCOM3_Handler>:
    3a00:	b580      	push	{r7, lr}
    3a02:	af00      	add	r7, sp, #0
    3a04:	4b03      	ldr	r3, [pc, #12]	; (3a14 <SERCOM3_Handler+0x14>)
    3a06:	68db      	ldr	r3, [r3, #12]
    3a08:	2003      	movs	r0, #3
    3a0a:	4798      	blx	r3
    3a0c:	46c0      	nop			; (mov r8, r8)
    3a0e:	46bd      	mov	sp, r7
    3a10:	bd80      	pop	{r7, pc}
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	20000a58 	.word	0x20000a58

00003a18 <SERCOM4_Handler>:
    3a18:	b580      	push	{r7, lr}
    3a1a:	af00      	add	r7, sp, #0
    3a1c:	4b03      	ldr	r3, [pc, #12]	; (3a2c <SERCOM4_Handler+0x14>)
    3a1e:	691b      	ldr	r3, [r3, #16]
    3a20:	2004      	movs	r0, #4
    3a22:	4798      	blx	r3
    3a24:	46c0      	nop			; (mov r8, r8)
    3a26:	46bd      	mov	sp, r7
    3a28:	bd80      	pop	{r7, pc}
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	20000a58 	.word	0x20000a58

00003a30 <SERCOM5_Handler>:
    3a30:	b580      	push	{r7, lr}
    3a32:	af00      	add	r7, sp, #0
    3a34:	4b03      	ldr	r3, [pc, #12]	; (3a44 <SERCOM5_Handler+0x14>)
    3a36:	695b      	ldr	r3, [r3, #20]
    3a38:	2005      	movs	r0, #5
    3a3a:	4798      	blx	r3
    3a3c:	46c0      	nop			; (mov r8, r8)
    3a3e:	46bd      	mov	sp, r7
    3a40:	bd80      	pop	{r7, pc}
    3a42:	46c0      	nop			; (mov r8, r8)
    3a44:	20000a58 	.word	0x20000a58

00003a48 <system_pinmux_get_config_defaults>:
{
    3a48:	b580      	push	{r7, lr}
    3a4a:	b082      	sub	sp, #8
    3a4c:	af00      	add	r7, sp, #0
    3a4e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3a50:	687b      	ldr	r3, [r7, #4]
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a56:	687b      	ldr	r3, [r7, #4]
    3a58:	2200      	movs	r2, #0
    3a5a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	2201      	movs	r2, #1
    3a60:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3a62:	687b      	ldr	r3, [r7, #4]
    3a64:	2200      	movs	r2, #0
    3a66:	70da      	strb	r2, [r3, #3]
}
    3a68:	46c0      	nop			; (mov r8, r8)
    3a6a:	46bd      	mov	sp, r7
    3a6c:	b002      	add	sp, #8
    3a6e:	bd80      	pop	{r7, pc}

00003a70 <system_pinmux_get_group_from_gpio_pin>:
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b084      	sub	sp, #16
    3a74:	af00      	add	r7, sp, #0
    3a76:	0002      	movs	r2, r0
    3a78:	1dfb      	adds	r3, r7, #7
    3a7a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3a7c:	230f      	movs	r3, #15
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	1dfa      	adds	r2, r7, #7
    3a82:	7812      	ldrb	r2, [r2, #0]
    3a84:	09d2      	lsrs	r2, r2, #7
    3a86:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3a88:	230e      	movs	r3, #14
    3a8a:	18fb      	adds	r3, r7, r3
    3a8c:	1dfa      	adds	r2, r7, #7
    3a8e:	7812      	ldrb	r2, [r2, #0]
    3a90:	0952      	lsrs	r2, r2, #5
    3a92:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3a94:	4b0d      	ldr	r3, [pc, #52]	; (3acc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3a96:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3a98:	230f      	movs	r3, #15
    3a9a:	18fb      	adds	r3, r7, r3
    3a9c:	781b      	ldrb	r3, [r3, #0]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d10f      	bne.n	3ac2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3aa2:	230f      	movs	r3, #15
    3aa4:	18fb      	adds	r3, r7, r3
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	009b      	lsls	r3, r3, #2
    3aaa:	2210      	movs	r2, #16
    3aac:	4694      	mov	ip, r2
    3aae:	44bc      	add	ip, r7
    3ab0:	4463      	add	r3, ip
    3ab2:	3b08      	subs	r3, #8
    3ab4:	681a      	ldr	r2, [r3, #0]
    3ab6:	230e      	movs	r3, #14
    3ab8:	18fb      	adds	r3, r7, r3
    3aba:	781b      	ldrb	r3, [r3, #0]
    3abc:	01db      	lsls	r3, r3, #7
    3abe:	18d3      	adds	r3, r2, r3
    3ac0:	e000      	b.n	3ac4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3ac2:	2300      	movs	r3, #0
}
    3ac4:	0018      	movs	r0, r3
    3ac6:	46bd      	mov	sp, r7
    3ac8:	b004      	add	sp, #16
    3aca:	bd80      	pop	{r7, pc}
    3acc:	40002800 	.word	0x40002800

00003ad0 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3ad0:	b580      	push	{r7, lr}
    3ad2:	b086      	sub	sp, #24
    3ad4:	af00      	add	r7, sp, #0
    3ad6:	0002      	movs	r2, r0
    3ad8:	1dfb      	adds	r3, r7, #7
    3ada:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3adc:	1dfb      	adds	r3, r7, #7
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	0018      	movs	r0, r3
    3ae2:	4b19      	ldr	r3, [pc, #100]	; (3b48 <system_pinmux_pin_get_mux_position+0x78>)
    3ae4:	4798      	blx	r3
    3ae6:	0003      	movs	r3, r0
    3ae8:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    3aea:	1dfb      	adds	r3, r7, #7
    3aec:	781b      	ldrb	r3, [r3, #0]
    3aee:	221f      	movs	r2, #31
    3af0:	4013      	ands	r3, r2
    3af2:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3af4:	697a      	ldr	r2, [r7, #20]
    3af6:	2140      	movs	r1, #64	; 0x40
    3af8:	693b      	ldr	r3, [r7, #16]
    3afa:	18d3      	adds	r3, r2, r3
    3afc:	185b      	adds	r3, r3, r1
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	b2db      	uxtb	r3, r3
    3b02:	001a      	movs	r2, r3
    3b04:	2301      	movs	r3, #1
    3b06:	4013      	ands	r3, r2
    3b08:	d101      	bne.n	3b0e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    3b0a:	2380      	movs	r3, #128	; 0x80
    3b0c:	e018      	b.n	3b40 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3b0e:	693b      	ldr	r3, [r7, #16]
    3b10:	085b      	lsrs	r3, r3, #1
    3b12:	697a      	ldr	r2, [r7, #20]
    3b14:	2130      	movs	r1, #48	; 0x30
    3b16:	18d3      	adds	r3, r2, r3
    3b18:	185b      	adds	r3, r3, r1
    3b1a:	781b      	ldrb	r3, [r3, #0]
    3b1c:	b2db      	uxtb	r3, r3
    3b1e:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3b20:	693b      	ldr	r3, [r7, #16]
    3b22:	2201      	movs	r2, #1
    3b24:	4013      	ands	r3, r2
    3b26:	d006      	beq.n	3b36 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3b28:	68fb      	ldr	r3, [r7, #12]
    3b2a:	091b      	lsrs	r3, r3, #4
    3b2c:	b2db      	uxtb	r3, r3
    3b2e:	220f      	movs	r2, #15
    3b30:	4013      	ands	r3, r2
    3b32:	b2db      	uxtb	r3, r3
    3b34:	e004      	b.n	3b40 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3b36:	68fb      	ldr	r3, [r7, #12]
    3b38:	b2db      	uxtb	r3, r3
    3b3a:	220f      	movs	r2, #15
    3b3c:	4013      	ands	r3, r2
    3b3e:	b2db      	uxtb	r3, r3
	}
}
    3b40:	0018      	movs	r0, r3
    3b42:	46bd      	mov	sp, r7
    3b44:	b006      	add	sp, #24
    3b46:	bd80      	pop	{r7, pc}
    3b48:	00003a71 	.word	0x00003a71

00003b4c <port_get_group_from_gpio_pin>:
{
    3b4c:	b580      	push	{r7, lr}
    3b4e:	b082      	sub	sp, #8
    3b50:	af00      	add	r7, sp, #0
    3b52:	0002      	movs	r2, r0
    3b54:	1dfb      	adds	r3, r7, #7
    3b56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3b58:	1dfb      	adds	r3, r7, #7
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	0018      	movs	r0, r3
    3b5e:	4b03      	ldr	r3, [pc, #12]	; (3b6c <port_get_group_from_gpio_pin+0x20>)
    3b60:	4798      	blx	r3
    3b62:	0003      	movs	r3, r0
}
    3b64:	0018      	movs	r0, r3
    3b66:	46bd      	mov	sp, r7
    3b68:	b002      	add	sp, #8
    3b6a:	bd80      	pop	{r7, pc}
    3b6c:	00003a71 	.word	0x00003a71

00003b70 <port_pin_set_output_level>:
{
    3b70:	b580      	push	{r7, lr}
    3b72:	b084      	sub	sp, #16
    3b74:	af00      	add	r7, sp, #0
    3b76:	0002      	movs	r2, r0
    3b78:	1dfb      	adds	r3, r7, #7
    3b7a:	701a      	strb	r2, [r3, #0]
    3b7c:	1dbb      	adds	r3, r7, #6
    3b7e:	1c0a      	adds	r2, r1, #0
    3b80:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3b82:	1dfb      	adds	r3, r7, #7
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	0018      	movs	r0, r3
    3b88:	4b0d      	ldr	r3, [pc, #52]	; (3bc0 <port_pin_set_output_level+0x50>)
    3b8a:	4798      	blx	r3
    3b8c:	0003      	movs	r3, r0
    3b8e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3b90:	1dfb      	adds	r3, r7, #7
    3b92:	781b      	ldrb	r3, [r3, #0]
    3b94:	221f      	movs	r2, #31
    3b96:	4013      	ands	r3, r2
    3b98:	2201      	movs	r2, #1
    3b9a:	409a      	lsls	r2, r3
    3b9c:	0013      	movs	r3, r2
    3b9e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3ba0:	1dbb      	adds	r3, r7, #6
    3ba2:	781b      	ldrb	r3, [r3, #0]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d003      	beq.n	3bb0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	68ba      	ldr	r2, [r7, #8]
    3bac:	619a      	str	r2, [r3, #24]
}
    3bae:	e002      	b.n	3bb6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3bb0:	68fb      	ldr	r3, [r7, #12]
    3bb2:	68ba      	ldr	r2, [r7, #8]
    3bb4:	615a      	str	r2, [r3, #20]
}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	46bd      	mov	sp, r7
    3bba:	b004      	add	sp, #16
    3bbc:	bd80      	pop	{r7, pc}
    3bbe:	46c0      	nop			; (mov r8, r8)
    3bc0:	00003b4d 	.word	0x00003b4d

00003bc4 <system_gclk_chan_get_config_defaults>:
{
    3bc4:	b580      	push	{r7, lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	af00      	add	r7, sp, #0
    3bca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3bcc:	687b      	ldr	r3, [r7, #4]
    3bce:	2200      	movs	r2, #0
    3bd0:	701a      	strb	r2, [r3, #0]
}
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	46bd      	mov	sp, r7
    3bd6:	b002      	add	sp, #8
    3bd8:	bd80      	pop	{r7, pc}
	...

00003bdc <system_apb_clock_set_mask>:
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	0002      	movs	r2, r0
    3be4:	6039      	str	r1, [r7, #0]
    3be6:	1dfb      	adds	r3, r7, #7
    3be8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3bea:	1dfb      	adds	r3, r7, #7
    3bec:	781b      	ldrb	r3, [r3, #0]
    3bee:	2b04      	cmp	r3, #4
    3bf0:	d827      	bhi.n	3c42 <system_apb_clock_set_mask+0x66>
    3bf2:	009a      	lsls	r2, r3, #2
    3bf4:	4b16      	ldr	r3, [pc, #88]	; (3c50 <system_apb_clock_set_mask+0x74>)
    3bf6:	18d3      	adds	r3, r2, r3
    3bf8:	681b      	ldr	r3, [r3, #0]
    3bfa:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    3bfc:	4b15      	ldr	r3, [pc, #84]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3bfe:	4a15      	ldr	r2, [pc, #84]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c00:	6951      	ldr	r1, [r2, #20]
    3c02:	683a      	ldr	r2, [r7, #0]
    3c04:	430a      	orrs	r2, r1
    3c06:	615a      	str	r2, [r3, #20]
			break;
    3c08:	e01d      	b.n	3c46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    3c0a:	4b12      	ldr	r3, [pc, #72]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c0c:	4a11      	ldr	r2, [pc, #68]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c0e:	6991      	ldr	r1, [r2, #24]
    3c10:	683a      	ldr	r2, [r7, #0]
    3c12:	430a      	orrs	r2, r1
    3c14:	619a      	str	r2, [r3, #24]
			break;
    3c16:	e016      	b.n	3c46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    3c18:	4b0e      	ldr	r3, [pc, #56]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c1a:	4a0e      	ldr	r2, [pc, #56]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c1c:	69d1      	ldr	r1, [r2, #28]
    3c1e:	683a      	ldr	r2, [r7, #0]
    3c20:	430a      	orrs	r2, r1
    3c22:	61da      	str	r2, [r3, #28]
			break;
    3c24:	e00f      	b.n	3c46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    3c26:	4b0b      	ldr	r3, [pc, #44]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c28:	4a0a      	ldr	r2, [pc, #40]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c2a:	6a11      	ldr	r1, [r2, #32]
    3c2c:	683a      	ldr	r2, [r7, #0]
    3c2e:	430a      	orrs	r2, r1
    3c30:	621a      	str	r2, [r3, #32]
			break;
    3c32:	e008      	b.n	3c46 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    3c34:	4b07      	ldr	r3, [pc, #28]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c36:	4a07      	ldr	r2, [pc, #28]	; (3c54 <system_apb_clock_set_mask+0x78>)
    3c38:	6a51      	ldr	r1, [r2, #36]	; 0x24
    3c3a:	683a      	ldr	r2, [r7, #0]
    3c3c:	430a      	orrs	r2, r1
    3c3e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    3c40:	e001      	b.n	3c46 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    3c42:	2317      	movs	r3, #23
    3c44:	e000      	b.n	3c48 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    3c46:	2300      	movs	r3, #0
}
    3c48:	0018      	movs	r0, r3
    3c4a:	46bd      	mov	sp, r7
    3c4c:	b002      	add	sp, #8
    3c4e:	bd80      	pop	{r7, pc}
    3c50:	0001650c 	.word	0x0001650c
    3c54:	40000400 	.word	0x40000400

00003c58 <system_is_debugger_present>:
{
    3c58:	b580      	push	{r7, lr}
    3c5a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3c5c:	4b05      	ldr	r3, [pc, #20]	; (3c74 <system_is_debugger_present+0x1c>)
    3c5e:	789b      	ldrb	r3, [r3, #2]
    3c60:	b2db      	uxtb	r3, r3
    3c62:	001a      	movs	r2, r3
    3c64:	2302      	movs	r3, #2
    3c66:	4013      	ands	r3, r2
    3c68:	1e5a      	subs	r2, r3, #1
    3c6a:	4193      	sbcs	r3, r2
    3c6c:	b2db      	uxtb	r3, r3
}
    3c6e:	0018      	movs	r0, r3
    3c70:	46bd      	mov	sp, r7
    3c72:	bd80      	pop	{r7, pc}
    3c74:	41002000 	.word	0x41002000

00003c78 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3c78:	b580      	push	{r7, lr}
    3c7a:	b084      	sub	sp, #16
    3c7c:	af00      	add	r7, sp, #0
    3c7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	681b      	ldr	r3, [r3, #0]
    3c84:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3c86:	68fb      	ldr	r3, [r7, #12]
    3c88:	7e1b      	ldrb	r3, [r3, #24]
    3c8a:	b2db      	uxtb	r3, r3
    3c8c:	001a      	movs	r2, r3
    3c8e:	2301      	movs	r3, #1
    3c90:	4013      	ands	r3, r2
    3c92:	1e5a      	subs	r2, r3, #1
    3c94:	4193      	sbcs	r3, r2
    3c96:	b2db      	uxtb	r3, r3
}
    3c98:	0018      	movs	r0, r3
    3c9a:	46bd      	mov	sp, r7
    3c9c:	b004      	add	sp, #16
    3c9e:	bd80      	pop	{r7, pc}

00003ca0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3ca0:	b580      	push	{r7, lr}
    3ca2:	b084      	sub	sp, #16
    3ca4:	af00      	add	r7, sp, #0
    3ca6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3cae:	68fb      	ldr	r3, [r7, #12]
    3cb0:	7e1b      	ldrb	r3, [r3, #24]
    3cb2:	b2db      	uxtb	r3, r3
    3cb4:	001a      	movs	r2, r3
    3cb6:	2304      	movs	r3, #4
    3cb8:	4013      	ands	r3, r2
    3cba:	1e5a      	subs	r2, r3, #1
    3cbc:	4193      	sbcs	r3, r2
    3cbe:	b2db      	uxtb	r3, r3
}
    3cc0:	0018      	movs	r0, r3
    3cc2:	46bd      	mov	sp, r7
    3cc4:	b004      	add	sp, #16
    3cc6:	bd80      	pop	{r7, pc}

00003cc8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3cc8:	b580      	push	{r7, lr}
    3cca:	b084      	sub	sp, #16
    3ccc:	af00      	add	r7, sp, #0
    3cce:	6078      	str	r0, [r7, #4]
    3cd0:	000a      	movs	r2, r1
    3cd2:	1cbb      	adds	r3, r7, #2
    3cd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3cdc:	687b      	ldr	r3, [r7, #4]
    3cde:	0018      	movs	r0, r3
    3ce0:	4b0a      	ldr	r3, [pc, #40]	; (3d0c <spi_write+0x44>)
    3ce2:	4798      	blx	r3
    3ce4:	0003      	movs	r3, r0
    3ce6:	001a      	movs	r2, r3
    3ce8:	2301      	movs	r3, #1
    3cea:	4053      	eors	r3, r2
    3cec:	b2db      	uxtb	r3, r3
    3cee:	2b00      	cmp	r3, #0
    3cf0:	d001      	beq.n	3cf6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3cf2:	2305      	movs	r3, #5
    3cf4:	e006      	b.n	3d04 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3cf6:	1cbb      	adds	r3, r7, #2
    3cf8:	881b      	ldrh	r3, [r3, #0]
    3cfa:	05db      	lsls	r3, r3, #23
    3cfc:	0dda      	lsrs	r2, r3, #23
    3cfe:	68fb      	ldr	r3, [r7, #12]
    3d00:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3d02:	2300      	movs	r3, #0
}
    3d04:	0018      	movs	r0, r3
    3d06:	46bd      	mov	sp, r7
    3d08:	b004      	add	sp, #16
    3d0a:	bd80      	pop	{r7, pc}
    3d0c:	00003c79 	.word	0x00003c79

00003d10 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b084      	sub	sp, #16
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
    3d18:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	681b      	ldr	r3, [r3, #0]
    3d1e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3d20:	687b      	ldr	r3, [r7, #4]
    3d22:	0018      	movs	r0, r3
    3d24:	4b1b      	ldr	r3, [pc, #108]	; (3d94 <spi_read+0x84>)
    3d26:	4798      	blx	r3
    3d28:	0003      	movs	r3, r0
    3d2a:	001a      	movs	r2, r3
    3d2c:	2301      	movs	r3, #1
    3d2e:	4053      	eors	r3, r2
    3d30:	b2db      	uxtb	r3, r3
    3d32:	2b00      	cmp	r3, #0
    3d34:	d001      	beq.n	3d3a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3d36:	2310      	movs	r3, #16
    3d38:	e027      	b.n	3d8a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3d3a:	230f      	movs	r3, #15
    3d3c:	18fb      	adds	r3, r7, r3
    3d3e:	2200      	movs	r2, #0
    3d40:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3d42:	68bb      	ldr	r3, [r7, #8]
    3d44:	8b5b      	ldrh	r3, [r3, #26]
    3d46:	b29b      	uxth	r3, r3
    3d48:	001a      	movs	r2, r3
    3d4a:	2304      	movs	r3, #4
    3d4c:	4013      	ands	r3, r2
    3d4e:	d006      	beq.n	3d5e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3d50:	230f      	movs	r3, #15
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	221e      	movs	r2, #30
    3d56:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3d58:	68bb      	ldr	r3, [r7, #8]
    3d5a:	2204      	movs	r2, #4
    3d5c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3d5e:	687b      	ldr	r3, [r7, #4]
    3d60:	799b      	ldrb	r3, [r3, #6]
    3d62:	2b01      	cmp	r3, #1
    3d64:	d108      	bne.n	3d78 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3d66:	68bb      	ldr	r3, [r7, #8]
    3d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d6a:	b29b      	uxth	r3, r3
    3d6c:	05db      	lsls	r3, r3, #23
    3d6e:	0ddb      	lsrs	r3, r3, #23
    3d70:	b29a      	uxth	r2, r3
    3d72:	683b      	ldr	r3, [r7, #0]
    3d74:	801a      	strh	r2, [r3, #0]
    3d76:	e005      	b.n	3d84 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3d78:	68bb      	ldr	r3, [r7, #8]
    3d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d7c:	b2db      	uxtb	r3, r3
    3d7e:	b29a      	uxth	r2, r3
    3d80:	683b      	ldr	r3, [r7, #0]
    3d82:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3d84:	230f      	movs	r3, #15
    3d86:	18fb      	adds	r3, r7, r3
    3d88:	781b      	ldrb	r3, [r3, #0]
}
    3d8a:	0018      	movs	r0, r3
    3d8c:	46bd      	mov	sp, r7
    3d8e:	b004      	add	sp, #16
    3d90:	bd80      	pop	{r7, pc}
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	00003ca1 	.word	0x00003ca1

00003d98 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    3d98:	b590      	push	{r4, r7, lr}
    3d9a:	b093      	sub	sp, #76	; 0x4c
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	6078      	str	r0, [r7, #4]
    3da0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3da2:	687b      	ldr	r3, [r7, #4]
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3dae:	231c      	movs	r3, #28
    3db0:	18fb      	adds	r3, r7, r3
    3db2:	0018      	movs	r0, r3
    3db4:	4b75      	ldr	r3, [pc, #468]	; (3f8c <_spi_set_config+0x1f4>)
    3db6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3db8:	231c      	movs	r3, #28
    3dba:	18fb      	adds	r3, r7, r3
    3dbc:	2200      	movs	r2, #0
    3dbe:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    3dc0:	683b      	ldr	r3, [r7, #0]
    3dc2:	781b      	ldrb	r3, [r3, #0]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d103      	bne.n	3dd0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3dc8:	231c      	movs	r3, #28
    3dca:	18fb      	adds	r3, r7, r3
    3dcc:	2200      	movs	r2, #0
    3dce:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3dd0:	683b      	ldr	r3, [r7, #0]
    3dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    3dd4:	230c      	movs	r3, #12
    3dd6:	18fb      	adds	r3, r7, r3
    3dd8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3dda:	683b      	ldr	r3, [r7, #0]
    3ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    3dde:	230c      	movs	r3, #12
    3de0:	18fb      	adds	r3, r7, r3
    3de2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3de4:	683b      	ldr	r3, [r7, #0]
    3de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3de8:	230c      	movs	r3, #12
    3dea:	18fb      	adds	r3, r7, r3
    3dec:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    3dee:	683b      	ldr	r3, [r7, #0]
    3df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3df2:	230c      	movs	r3, #12
    3df4:	18fb      	adds	r3, r7, r3
    3df6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3df8:	2347      	movs	r3, #71	; 0x47
    3dfa:	18fb      	adds	r3, r7, r3
    3dfc:	2200      	movs	r2, #0
    3dfe:	701a      	strb	r2, [r3, #0]
    3e00:	e02c      	b.n	3e5c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3e02:	2347      	movs	r3, #71	; 0x47
    3e04:	18fb      	adds	r3, r7, r3
    3e06:	781a      	ldrb	r2, [r3, #0]
    3e08:	230c      	movs	r3, #12
    3e0a:	18fb      	adds	r3, r7, r3
    3e0c:	0092      	lsls	r2, r2, #2
    3e0e:	58d3      	ldr	r3, [r2, r3]
    3e10:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e14:	2b00      	cmp	r3, #0
    3e16:	d109      	bne.n	3e2c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3e18:	2347      	movs	r3, #71	; 0x47
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	781a      	ldrb	r2, [r3, #0]
    3e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3e20:	0011      	movs	r1, r2
    3e22:	0018      	movs	r0, r3
    3e24:	4b5a      	ldr	r3, [pc, #360]	; (3f90 <_spi_set_config+0x1f8>)
    3e26:	4798      	blx	r3
    3e28:	0003      	movs	r3, r0
    3e2a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e2e:	3301      	adds	r3, #1
    3e30:	d00d      	beq.n	3e4e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e34:	b2da      	uxtb	r2, r3
    3e36:	231c      	movs	r3, #28
    3e38:	18fb      	adds	r3, r7, r3
    3e3a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e3e:	0c1b      	lsrs	r3, r3, #16
    3e40:	b2db      	uxtb	r3, r3
    3e42:	221c      	movs	r2, #28
    3e44:	18ba      	adds	r2, r7, r2
    3e46:	0011      	movs	r1, r2
    3e48:	0018      	movs	r0, r3
    3e4a:	4b52      	ldr	r3, [pc, #328]	; (3f94 <_spi_set_config+0x1fc>)
    3e4c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3e4e:	2347      	movs	r3, #71	; 0x47
    3e50:	18fb      	adds	r3, r7, r3
    3e52:	781a      	ldrb	r2, [r3, #0]
    3e54:	2347      	movs	r3, #71	; 0x47
    3e56:	18fb      	adds	r3, r7, r3
    3e58:	3201      	adds	r2, #1
    3e5a:	701a      	strb	r2, [r3, #0]
    3e5c:	2347      	movs	r3, #71	; 0x47
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	2b03      	cmp	r3, #3
    3e64:	d9cd      	bls.n	3e02 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    3e66:	683b      	ldr	r3, [r7, #0]
    3e68:	781a      	ldrb	r2, [r3, #0]
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    3e6e:	683b      	ldr	r3, [r7, #0]
    3e70:	7c1a      	ldrb	r2, [r3, #16]
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    3e76:	683b      	ldr	r3, [r7, #0]
    3e78:	7c9a      	ldrb	r2, [r3, #18]
    3e7a:	687b      	ldr	r3, [r7, #4]
    3e7c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    3e7e:	683b      	ldr	r3, [r7, #0]
    3e80:	7d1a      	ldrb	r2, [r3, #20]
    3e82:	687b      	ldr	r3, [r7, #4]
    3e84:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    3e86:	230a      	movs	r3, #10
    3e88:	18fb      	adds	r3, r7, r3
    3e8a:	2200      	movs	r2, #0
    3e8c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    3e8e:	2300      	movs	r3, #0
    3e90:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    3e92:	2300      	movs	r3, #0
    3e94:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    3e96:	683b      	ldr	r3, [r7, #0]
    3e98:	781b      	ldrb	r3, [r3, #0]
    3e9a:	2b01      	cmp	r3, #1
    3e9c:	d129      	bne.n	3ef2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	0018      	movs	r0, r3
    3ea4:	4b3c      	ldr	r3, [pc, #240]	; (3f98 <_spi_set_config+0x200>)
    3ea6:	4798      	blx	r3
    3ea8:	0003      	movs	r3, r0
    3eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3eae:	3312      	adds	r3, #18
    3eb0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    3eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3eb4:	b2db      	uxtb	r3, r3
    3eb6:	0018      	movs	r0, r3
    3eb8:	4b38      	ldr	r3, [pc, #224]	; (3f9c <_spi_set_config+0x204>)
    3eba:	4798      	blx	r3
    3ebc:	0003      	movs	r3, r0
    3ebe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3ec0:	683b      	ldr	r3, [r7, #0]
    3ec2:	699b      	ldr	r3, [r3, #24]
    3ec4:	2223      	movs	r2, #35	; 0x23
    3ec6:	18bc      	adds	r4, r7, r2
    3ec8:	220a      	movs	r2, #10
    3eca:	18ba      	adds	r2, r7, r2
    3ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3ece:	0018      	movs	r0, r3
    3ed0:	4b33      	ldr	r3, [pc, #204]	; (3fa0 <_spi_set_config+0x208>)
    3ed2:	4798      	blx	r3
    3ed4:	0003      	movs	r3, r0
    3ed6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    3ed8:	2323      	movs	r3, #35	; 0x23
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	781b      	ldrb	r3, [r3, #0]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	d001      	beq.n	3ee6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3ee2:	2317      	movs	r3, #23
    3ee4:	e04e      	b.n	3f84 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    3ee6:	230a      	movs	r3, #10
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	881b      	ldrh	r3, [r3, #0]
    3eec:	b2da      	uxtb	r2, r3
    3eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ef0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    3ef2:	683b      	ldr	r3, [r7, #0]
    3ef4:	685b      	ldr	r3, [r3, #4]
    3ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3ef8:	4313      	orrs	r3, r2
    3efa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3efc:	683b      	ldr	r3, [r7, #0]
    3efe:	689b      	ldr	r3, [r3, #8]
    3f00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f02:	4313      	orrs	r3, r2
    3f04:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3f06:	683b      	ldr	r3, [r7, #0]
    3f08:	68db      	ldr	r3, [r3, #12]
    3f0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3f0c:	4313      	orrs	r3, r2
    3f0e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3f10:	683b      	ldr	r3, [r7, #0]
    3f12:	7c1b      	ldrb	r3, [r3, #16]
    3f14:	001a      	movs	r2, r3
    3f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f18:	4313      	orrs	r3, r2
    3f1a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3f1c:	683b      	ldr	r3, [r7, #0]
    3f1e:	7c5b      	ldrb	r3, [r3, #17]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d103      	bne.n	3f2c <_spi_set_config+0x194>
    3f24:	4b1f      	ldr	r3, [pc, #124]	; (3fa4 <_spi_set_config+0x20c>)
    3f26:	4798      	blx	r3
    3f28:	1e03      	subs	r3, r0, #0
    3f2a:	d003      	beq.n	3f34 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f2e:	2280      	movs	r2, #128	; 0x80
    3f30:	4313      	orrs	r3, r2
    3f32:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    3f34:	683b      	ldr	r3, [r7, #0]
    3f36:	7c9b      	ldrb	r3, [r3, #18]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d004      	beq.n	3f46 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f3e:	2280      	movs	r2, #128	; 0x80
    3f40:	0292      	lsls	r2, r2, #10
    3f42:	4313      	orrs	r3, r2
    3f44:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    3f46:	683b      	ldr	r3, [r7, #0]
    3f48:	7cdb      	ldrb	r3, [r3, #19]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d004      	beq.n	3f58 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f50:	2280      	movs	r2, #128	; 0x80
    3f52:	0092      	lsls	r2, r2, #2
    3f54:	4313      	orrs	r3, r2
    3f56:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    3f58:	683b      	ldr	r3, [r7, #0]
    3f5a:	7d1b      	ldrb	r3, [r3, #20]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d004      	beq.n	3f6a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f62:	2280      	movs	r2, #128	; 0x80
    3f64:	0192      	lsls	r2, r2, #6
    3f66:	4313      	orrs	r3, r2
    3f68:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    3f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f6c:	681a      	ldr	r2, [r3, #0]
    3f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f70:	431a      	orrs	r2, r3
    3f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f74:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    3f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f78:	685a      	ldr	r2, [r3, #4]
    3f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f7c:	431a      	orrs	r2, r3
    3f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f80:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3f82:	2300      	movs	r3, #0
}
    3f84:	0018      	movs	r0, r3
    3f86:	46bd      	mov	sp, r7
    3f88:	b013      	add	sp, #76	; 0x4c
    3f8a:	bd90      	pop	{r4, r7, pc}
    3f8c:	00003a49 	.word	0x00003a49
    3f90:	000036f1 	.word	0x000036f1
    3f94:	0000611d 	.word	0x0000611d
    3f98:	000038a5 	.word	0x000038a5
    3f9c:	00005f59 	.word	0x00005f59
    3fa0:	00003427 	.word	0x00003427
    3fa4:	00003c59 	.word	0x00003c59

00003fa8 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    3fa8:	b590      	push	{r4, r7, lr}
    3faa:	b091      	sub	sp, #68	; 0x44
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    3fb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	681b      	ldr	r3, [r3, #0]
    3fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    3fb8:	687b      	ldr	r3, [r7, #4]
    3fba:	681b      	ldr	r3, [r3, #0]
    3fbc:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    3fbe:	683b      	ldr	r3, [r7, #0]
    3fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    3fc2:	2310      	movs	r3, #16
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    3fc8:	683b      	ldr	r3, [r7, #0]
    3fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    3fcc:	2310      	movs	r3, #16
    3fce:	18fb      	adds	r3, r7, r3
    3fd0:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    3fd2:	683b      	ldr	r3, [r7, #0]
    3fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3fd6:	2310      	movs	r3, #16
    3fd8:	18fb      	adds	r3, r7, r3
    3fda:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    3fdc:	683b      	ldr	r3, [r7, #0]
    3fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3fe0:	2310      	movs	r3, #16
    3fe2:	18fb      	adds	r3, r7, r3
    3fe4:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3fe6:	233f      	movs	r3, #63	; 0x3f
    3fe8:	18fb      	adds	r3, r7, r3
    3fea:	2200      	movs	r2, #0
    3fec:	701a      	strb	r2, [r3, #0]
    3fee:	e030      	b.n	4052 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ff0:	233f      	movs	r3, #63	; 0x3f
    3ff2:	18fb      	adds	r3, r7, r3
    3ff4:	781a      	ldrb	r2, [r3, #0]
    3ff6:	2310      	movs	r3, #16
    3ff8:	18fb      	adds	r3, r7, r3
    3ffa:	0092      	lsls	r2, r2, #2
    3ffc:	58d3      	ldr	r3, [r2, r3]
    3ffe:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    4000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4002:	2b00      	cmp	r3, #0
    4004:	d109      	bne.n	401a <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4006:	233f      	movs	r3, #63	; 0x3f
    4008:	18fb      	adds	r3, r7, r3
    400a:	781a      	ldrb	r2, [r3, #0]
    400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    400e:	0011      	movs	r1, r2
    4010:	0018      	movs	r0, r3
    4012:	4b56      	ldr	r3, [pc, #344]	; (416c <_spi_check_config+0x1c4>)
    4014:	4798      	blx	r3
    4016:	0003      	movs	r3, r0
    4018:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    401c:	3301      	adds	r3, #1
    401e:	d010      	beq.n	4042 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    4020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4022:	041b      	lsls	r3, r3, #16
    4024:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4028:	0c1b      	lsrs	r3, r3, #16
    402a:	b2db      	uxtb	r3, r3
    402c:	0018      	movs	r0, r3
    402e:	4b50      	ldr	r3, [pc, #320]	; (4170 <_spi_check_config+0x1c8>)
    4030:	4798      	blx	r3
    4032:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    4034:	429c      	cmp	r4, r3
    4036:	d005      	beq.n	4044 <_spi_check_config+0x9c>
			module->hw = NULL;
    4038:	687b      	ldr	r3, [r7, #4]
    403a:	2200      	movs	r2, #0
    403c:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    403e:	231c      	movs	r3, #28
    4040:	e08f      	b.n	4162 <_spi_check_config+0x1ba>
			continue;
    4042:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    4044:	233f      	movs	r3, #63	; 0x3f
    4046:	18fb      	adds	r3, r7, r3
    4048:	781a      	ldrb	r2, [r3, #0]
    404a:	233f      	movs	r3, #63	; 0x3f
    404c:	18fb      	adds	r3, r7, r3
    404e:	3201      	adds	r2, #1
    4050:	701a      	strb	r2, [r3, #0]
    4052:	233f      	movs	r3, #63	; 0x3f
    4054:	18fb      	adds	r3, r7, r3
    4056:	781b      	ldrb	r3, [r3, #0]
    4058:	2b03      	cmp	r3, #3
    405a:	d9c9      	bls.n	3ff0 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    405c:	2011      	movs	r0, #17
    405e:	4b45      	ldr	r3, [pc, #276]	; (4174 <_spi_check_config+0x1cc>)
    4060:	4798      	blx	r3
    4062:	0003      	movs	r3, r0
    4064:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    4066:	2300      	movs	r3, #0
    4068:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    406a:	2300      	movs	r3, #0
    406c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    406e:	683b      	ldr	r3, [r7, #0]
    4070:	781b      	ldrb	r3, [r3, #0]
    4072:	2b01      	cmp	r3, #1
    4074:	d121      	bne.n	40ba <_spi_check_config+0x112>
		enum status_code error_code = _sercom_get_sync_baud_val(
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	699b      	ldr	r3, [r3, #24]
    407a:	2223      	movs	r2, #35	; 0x23
    407c:	18bc      	adds	r4, r7, r2
    407e:	220e      	movs	r2, #14
    4080:	18ba      	adds	r2, r7, r2
    4082:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4084:	0018      	movs	r0, r3
    4086:	4b3c      	ldr	r3, [pc, #240]	; (4178 <_spi_check_config+0x1d0>)
    4088:	4798      	blx	r3
    408a:	0003      	movs	r3, r0
    408c:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    408e:	2323      	movs	r3, #35	; 0x23
    4090:	18fb      	adds	r3, r7, r3
    4092:	781b      	ldrb	r3, [r3, #0]
    4094:	2b00      	cmp	r3, #0
    4096:	d001      	beq.n	409c <_spi_check_config+0xf4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4098:	2317      	movs	r3, #23
    409a:	e062      	b.n	4162 <_spi_check_config+0x1ba>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    409e:	7b1b      	ldrb	r3, [r3, #12]
    40a0:	b2da      	uxtb	r2, r3
    40a2:	230e      	movs	r3, #14
    40a4:	18fb      	adds	r3, r7, r3
    40a6:	881b      	ldrh	r3, [r3, #0]
    40a8:	b2db      	uxtb	r3, r3
    40aa:	429a      	cmp	r2, r3
    40ac:	d001      	beq.n	40b2 <_spi_check_config+0x10a>
			return STATUS_ERR_DENIED;
    40ae:	231c      	movs	r3, #28
    40b0:	e057      	b.n	4162 <_spi_check_config+0x1ba>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    40b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40b4:	220c      	movs	r2, #12
    40b6:	4313      	orrs	r3, r2
    40b8:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    40ba:	683b      	ldr	r3, [r7, #0]
    40bc:	685b      	ldr	r3, [r3, #4]
    40be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    40c0:	4313      	orrs	r3, r2
    40c2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    40c4:	683b      	ldr	r3, [r7, #0]
    40c6:	689b      	ldr	r3, [r3, #8]
    40c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    40ca:	4313      	orrs	r3, r2
    40cc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	68db      	ldr	r3, [r3, #12]
    40d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    40d4:	4313      	orrs	r3, r2
    40d6:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    40d8:	683b      	ldr	r3, [r7, #0]
    40da:	7c1b      	ldrb	r3, [r3, #16]
    40dc:	001a      	movs	r2, r3
    40de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40e0:	4313      	orrs	r3, r2
    40e2:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    40e4:	683b      	ldr	r3, [r7, #0]
    40e6:	7c5b      	ldrb	r3, [r3, #17]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d003      	beq.n	40f4 <_spi_check_config+0x14c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    40ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    40ee:	2280      	movs	r2, #128	; 0x80
    40f0:	4313      	orrs	r3, r2
    40f2:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    40f4:	683b      	ldr	r3, [r7, #0]
    40f6:	7c9b      	ldrb	r3, [r3, #18]
    40f8:	2b00      	cmp	r3, #0
    40fa:	d004      	beq.n	4106 <_spi_check_config+0x15e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    40fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40fe:	2280      	movs	r2, #128	; 0x80
    4100:	0292      	lsls	r2, r2, #10
    4102:	4313      	orrs	r3, r2
    4104:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4106:	683b      	ldr	r3, [r7, #0]
    4108:	7cdb      	ldrb	r3, [r3, #19]
    410a:	2b00      	cmp	r3, #0
    410c:	d004      	beq.n	4118 <_spi_check_config+0x170>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4110:	2280      	movs	r2, #128	; 0x80
    4112:	0092      	lsls	r2, r2, #2
    4114:	4313      	orrs	r3, r2
    4116:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4118:	683b      	ldr	r3, [r7, #0]
    411a:	7d1b      	ldrb	r3, [r3, #20]
    411c:	2b00      	cmp	r3, #0
    411e:	d004      	beq.n	412a <_spi_check_config+0x182>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4122:	2280      	movs	r2, #128	; 0x80
    4124:	0192      	lsls	r2, r2, #6
    4126:	4313      	orrs	r3, r2
    4128:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    412c:	2202      	movs	r2, #2
    412e:	4313      	orrs	r3, r2
    4130:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    4132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4134:	681a      	ldr	r2, [r3, #0]
    4136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4138:	429a      	cmp	r2, r3
    413a:	d10e      	bne.n	415a <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
    413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    413e:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    4140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4142:	429a      	cmp	r2, r3
    4144:	d109      	bne.n	415a <_spi_check_config+0x1b2>
		module->mode           = config->mode;
    4146:	683b      	ldr	r3, [r7, #0]
    4148:	781a      	ldrb	r2, [r3, #0]
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    414e:	683b      	ldr	r3, [r7, #0]
    4150:	7c1a      	ldrb	r2, [r3, #16]
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    4156:	2300      	movs	r3, #0
    4158:	e003      	b.n	4162 <_spi_check_config+0x1ba>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    415a:	687b      	ldr	r3, [r7, #4]
    415c:	2200      	movs	r2, #0
    415e:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    4160:	231c      	movs	r3, #28
}
    4162:	0018      	movs	r0, r3
    4164:	46bd      	mov	sp, r7
    4166:	b011      	add	sp, #68	; 0x44
    4168:	bd90      	pop	{r4, r7, pc}
    416a:	46c0      	nop			; (mov r8, r8)
    416c:	000036f1 	.word	0x000036f1
    4170:	00003ad1 	.word	0x00003ad1
    4174:	00005f59 	.word	0x00005f59
    4178:	00003427 	.word	0x00003427

0000417c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    417c:	b580      	push	{r7, lr}
    417e:	b08a      	sub	sp, #40	; 0x28
    4180:	af00      	add	r7, sp, #0
    4182:	60f8      	str	r0, [r7, #12]
    4184:	60b9      	str	r1, [r7, #8]
    4186:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4188:	68fb      	ldr	r3, [r7, #12]
    418a:	68ba      	ldr	r2, [r7, #8]
    418c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    418e:	68fb      	ldr	r3, [r7, #12]
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	61fb      	str	r3, [r7, #28]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4194:	69fb      	ldr	r3, [r7, #28]
    4196:	681b      	ldr	r3, [r3, #0]
    4198:	2202      	movs	r2, #2
    419a:	4013      	ands	r3, r2
    419c:	d007      	beq.n	41ae <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    419e:	687a      	ldr	r2, [r7, #4]
    41a0:	68fb      	ldr	r3, [r7, #12]
    41a2:	0011      	movs	r1, r2
    41a4:	0018      	movs	r0, r3
    41a6:	4b33      	ldr	r3, [pc, #204]	; (4274 <spi_init+0xf8>)
    41a8:	4798      	blx	r3
    41aa:	0003      	movs	r3, r0
    41ac:	e05e      	b.n	426c <spi_init+0xf0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    41ae:	69fb      	ldr	r3, [r7, #28]
    41b0:	681b      	ldr	r3, [r3, #0]
    41b2:	2201      	movs	r2, #1
    41b4:	4013      	ands	r3, r2
    41b6:	d001      	beq.n	41bc <spi_init+0x40>
		return STATUS_BUSY;
    41b8:	2305      	movs	r3, #5
    41ba:	e057      	b.n	426c <spi_init+0xf0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    41bc:	68fb      	ldr	r3, [r7, #12]
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	0018      	movs	r0, r3
    41c2:	4b2d      	ldr	r3, [pc, #180]	; (4278 <spi_init+0xfc>)
    41c4:	4798      	blx	r3
    41c6:	0003      	movs	r3, r0
    41c8:	61bb      	str	r3, [r7, #24]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    41ca:	69bb      	ldr	r3, [r7, #24]
    41cc:	2b05      	cmp	r3, #5
    41ce:	d104      	bne.n	41da <spi_init+0x5e>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    41d0:	2301      	movs	r3, #1
    41d2:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    41d4:	2318      	movs	r3, #24
    41d6:	623b      	str	r3, [r7, #32]
    41d8:	e004      	b.n	41e4 <spi_init+0x68>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    41da:	69bb      	ldr	r3, [r7, #24]
    41dc:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    41de:	69bb      	ldr	r3, [r7, #24]
    41e0:	3312      	adds	r3, #18
    41e2:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    41e4:	69bb      	ldr	r3, [r7, #24]
    41e6:	2b05      	cmp	r3, #5
    41e8:	d108      	bne.n	41fc <spi_init+0x80>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    41ea:	2201      	movs	r2, #1
    41ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41ee:	409a      	lsls	r2, r3
    41f0:	0013      	movs	r3, r2
    41f2:	0019      	movs	r1, r3
    41f4:	2003      	movs	r0, #3
    41f6:	4b21      	ldr	r3, [pc, #132]	; (427c <spi_init+0x100>)
    41f8:	4798      	blx	r3
    41fa:	e007      	b.n	420c <spi_init+0x90>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    41fc:	2201      	movs	r2, #1
    41fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4200:	409a      	lsls	r2, r3
    4202:	0013      	movs	r3, r2
    4204:	0019      	movs	r1, r3
    4206:	2002      	movs	r0, #2
    4208:	4b1c      	ldr	r3, [pc, #112]	; (427c <spi_init+0x100>)
    420a:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    420c:	2314      	movs	r3, #20
    420e:	18fb      	adds	r3, r7, r3
    4210:	0018      	movs	r0, r3
    4212:	4b1b      	ldr	r3, [pc, #108]	; (4280 <spi_init+0x104>)
    4214:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4216:	687b      	ldr	r3, [r7, #4]
    4218:	2224      	movs	r2, #36	; 0x24
    421a:	5c9a      	ldrb	r2, [r3, r2]
    421c:	2314      	movs	r3, #20
    421e:	18fb      	adds	r3, r7, r3
    4220:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4222:	6a3b      	ldr	r3, [r7, #32]
    4224:	b2db      	uxtb	r3, r3
    4226:	2214      	movs	r2, #20
    4228:	18ba      	adds	r2, r7, r2
    422a:	0011      	movs	r1, r2
    422c:	0018      	movs	r0, r3
    422e:	4b15      	ldr	r3, [pc, #84]	; (4284 <spi_init+0x108>)
    4230:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4232:	6a3b      	ldr	r3, [r7, #32]
    4234:	b2db      	uxtb	r3, r3
    4236:	0018      	movs	r0, r3
    4238:	4b13      	ldr	r3, [pc, #76]	; (4288 <spi_init+0x10c>)
    423a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	2224      	movs	r2, #36	; 0x24
    4240:	5c9b      	ldrb	r3, [r3, r2]
    4242:	2100      	movs	r1, #0
    4244:	0018      	movs	r0, r3
    4246:	4b11      	ldr	r3, [pc, #68]	; (428c <spi_init+0x110>)
    4248:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    424a:	687b      	ldr	r3, [r7, #4]
    424c:	781b      	ldrb	r3, [r3, #0]
    424e:	2b01      	cmp	r3, #1
    4250:	d105      	bne.n	425e <spi_init+0xe2>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4252:	69fb      	ldr	r3, [r7, #28]
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	220c      	movs	r2, #12
    4258:	431a      	orrs	r2, r3
    425a:	69fb      	ldr	r3, [r7, #28]
    425c:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    425e:	687a      	ldr	r2, [r7, #4]
    4260:	68fb      	ldr	r3, [r7, #12]
    4262:	0011      	movs	r1, r2
    4264:	0018      	movs	r0, r3
    4266:	4b0a      	ldr	r3, [pc, #40]	; (4290 <spi_init+0x114>)
    4268:	4798      	blx	r3
    426a:	0003      	movs	r3, r0
}
    426c:	0018      	movs	r0, r3
    426e:	46bd      	mov	sp, r7
    4270:	b00a      	add	sp, #40	; 0x28
    4272:	bd80      	pop	{r7, pc}
    4274:	00003fa9 	.word	0x00003fa9
    4278:	000038a5 	.word	0x000038a5
    427c:	00003bdd 	.word	0x00003bdd
    4280:	00003bc5 	.word	0x00003bc5
    4284:	00005e69 	.word	0x00005e69
    4288:	00005ea9 	.word	0x00005ea9
    428c:	00003665 	.word	0x00003665
    4290:	00003d99 	.word	0x00003d99

00004294 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4294:	b580      	push	{r7, lr}
    4296:	b086      	sub	sp, #24
    4298:	af00      	add	r7, sp, #0
    429a:	60f8      	str	r0, [r7, #12]
    429c:	60b9      	str	r1, [r7, #8]
    429e:	1dfb      	adds	r3, r7, #7
    42a0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	795b      	ldrb	r3, [r3, #5]
    42a6:	2b01      	cmp	r3, #1
    42a8:	d001      	beq.n	42ae <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    42aa:	2315      	movs	r3, #21
    42ac:	e05c      	b.n	4368 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	7a1b      	ldrb	r3, [r3, #8]
    42b2:	2201      	movs	r2, #1
    42b4:	4053      	eors	r3, r2
    42b6:	b2db      	uxtb	r3, r3
    42b8:	2b00      	cmp	r3, #0
    42ba:	d054      	beq.n	4366 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    42bc:	1dfb      	adds	r3, r7, #7
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	2b00      	cmp	r3, #0
    42c2:	d04a      	beq.n	435a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    42c4:	68bb      	ldr	r3, [r7, #8]
    42c6:	785b      	ldrb	r3, [r3, #1]
    42c8:	2b00      	cmp	r3, #0
    42ca:	d03f      	beq.n	434c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    42cc:	68fb      	ldr	r3, [r7, #12]
    42ce:	0018      	movs	r0, r3
    42d0:	4b27      	ldr	r3, [pc, #156]	; (4370 <spi_select_slave+0xdc>)
    42d2:	4798      	blx	r3
    42d4:	0003      	movs	r3, r0
    42d6:	001a      	movs	r2, r3
    42d8:	2301      	movs	r3, #1
    42da:	4053      	eors	r3, r2
    42dc:	b2db      	uxtb	r3, r3
    42de:	2b00      	cmp	r3, #0
    42e0:	d007      	beq.n	42f2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    42e2:	68bb      	ldr	r3, [r7, #8]
    42e4:	781b      	ldrb	r3, [r3, #0]
    42e6:	2101      	movs	r1, #1
    42e8:	0018      	movs	r0, r3
    42ea:	4b22      	ldr	r3, [pc, #136]	; (4374 <spi_select_slave+0xe0>)
    42ec:	4798      	blx	r3
					return STATUS_BUSY;
    42ee:	2305      	movs	r3, #5
    42f0:	e03a      	b.n	4368 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    42f2:	68bb      	ldr	r3, [r7, #8]
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	2100      	movs	r1, #0
    42f8:	0018      	movs	r0, r3
    42fa:	4b1e      	ldr	r3, [pc, #120]	; (4374 <spi_select_slave+0xe0>)
    42fc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    42fe:	68bb      	ldr	r3, [r7, #8]
    4300:	789b      	ldrb	r3, [r3, #2]
    4302:	b29a      	uxth	r2, r3
    4304:	68fb      	ldr	r3, [r7, #12]
    4306:	0011      	movs	r1, r2
    4308:	0018      	movs	r0, r3
    430a:	4b1b      	ldr	r3, [pc, #108]	; (4378 <spi_select_slave+0xe4>)
    430c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    430e:	68fb      	ldr	r3, [r7, #12]
    4310:	79db      	ldrb	r3, [r3, #7]
    4312:	2201      	movs	r2, #1
    4314:	4053      	eors	r3, r2
    4316:	b2db      	uxtb	r3, r3
    4318:	2b00      	cmp	r3, #0
    431a:	d024      	beq.n	4366 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    431c:	46c0      	nop			; (mov r8, r8)
    431e:	68fb      	ldr	r3, [r7, #12]
    4320:	0018      	movs	r0, r3
    4322:	4b16      	ldr	r3, [pc, #88]	; (437c <spi_select_slave+0xe8>)
    4324:	4798      	blx	r3
    4326:	0003      	movs	r3, r0
    4328:	001a      	movs	r2, r3
    432a:	2301      	movs	r3, #1
    432c:	4053      	eors	r3, r2
    432e:	b2db      	uxtb	r3, r3
    4330:	2b00      	cmp	r3, #0
    4332:	d1f4      	bne.n	431e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4334:	2316      	movs	r3, #22
    4336:	18fb      	adds	r3, r7, r3
    4338:	2200      	movs	r2, #0
    433a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    433c:	2316      	movs	r3, #22
    433e:	18fa      	adds	r2, r7, r3
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	0011      	movs	r1, r2
    4344:	0018      	movs	r0, r3
    4346:	4b0e      	ldr	r3, [pc, #56]	; (4380 <spi_select_slave+0xec>)
    4348:	4798      	blx	r3
    434a:	e00c      	b.n	4366 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    434c:	68bb      	ldr	r3, [r7, #8]
    434e:	781b      	ldrb	r3, [r3, #0]
    4350:	2100      	movs	r1, #0
    4352:	0018      	movs	r0, r3
    4354:	4b07      	ldr	r3, [pc, #28]	; (4374 <spi_select_slave+0xe0>)
    4356:	4798      	blx	r3
    4358:	e005      	b.n	4366 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    435a:	68bb      	ldr	r3, [r7, #8]
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	2101      	movs	r1, #1
    4360:	0018      	movs	r0, r3
    4362:	4b04      	ldr	r3, [pc, #16]	; (4374 <spi_select_slave+0xe0>)
    4364:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4366:	2300      	movs	r3, #0
}
    4368:	0018      	movs	r0, r3
    436a:	46bd      	mov	sp, r7
    436c:	b006      	add	sp, #24
    436e:	bd80      	pop	{r7, pc}
    4370:	00003c79 	.word	0x00003c79
    4374:	00003b71 	.word	0x00003b71
    4378:	00003cc9 	.word	0x00003cc9
    437c:	00003ca1 	.word	0x00003ca1
    4380:	00003d11 	.word	0x00003d11

00004384 <system_gclk_chan_get_config_defaults>:
{
    4384:	b580      	push	{r7, lr}
    4386:	b082      	sub	sp, #8
    4388:	af00      	add	r7, sp, #0
    438a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	2200      	movs	r2, #0
    4390:	701a      	strb	r2, [r3, #0]
}
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	46bd      	mov	sp, r7
    4396:	b002      	add	sp, #8
    4398:	bd80      	pop	{r7, pc}
	...

0000439c <system_apb_clock_set_mask>:
{
    439c:	b580      	push	{r7, lr}
    439e:	b082      	sub	sp, #8
    43a0:	af00      	add	r7, sp, #0
    43a2:	0002      	movs	r2, r0
    43a4:	6039      	str	r1, [r7, #0]
    43a6:	1dfb      	adds	r3, r7, #7
    43a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    43aa:	1dfb      	adds	r3, r7, #7
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b04      	cmp	r3, #4
    43b0:	d827      	bhi.n	4402 <system_apb_clock_set_mask+0x66>
    43b2:	009a      	lsls	r2, r3, #2
    43b4:	4b16      	ldr	r3, [pc, #88]	; (4410 <system_apb_clock_set_mask+0x74>)
    43b6:	18d3      	adds	r3, r2, r3
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    43bc:	4b15      	ldr	r3, [pc, #84]	; (4414 <system_apb_clock_set_mask+0x78>)
    43be:	4a15      	ldr	r2, [pc, #84]	; (4414 <system_apb_clock_set_mask+0x78>)
    43c0:	6951      	ldr	r1, [r2, #20]
    43c2:	683a      	ldr	r2, [r7, #0]
    43c4:	430a      	orrs	r2, r1
    43c6:	615a      	str	r2, [r3, #20]
			break;
    43c8:	e01d      	b.n	4406 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    43ca:	4b12      	ldr	r3, [pc, #72]	; (4414 <system_apb_clock_set_mask+0x78>)
    43cc:	4a11      	ldr	r2, [pc, #68]	; (4414 <system_apb_clock_set_mask+0x78>)
    43ce:	6991      	ldr	r1, [r2, #24]
    43d0:	683a      	ldr	r2, [r7, #0]
    43d2:	430a      	orrs	r2, r1
    43d4:	619a      	str	r2, [r3, #24]
			break;
    43d6:	e016      	b.n	4406 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    43d8:	4b0e      	ldr	r3, [pc, #56]	; (4414 <system_apb_clock_set_mask+0x78>)
    43da:	4a0e      	ldr	r2, [pc, #56]	; (4414 <system_apb_clock_set_mask+0x78>)
    43dc:	69d1      	ldr	r1, [r2, #28]
    43de:	683a      	ldr	r2, [r7, #0]
    43e0:	430a      	orrs	r2, r1
    43e2:	61da      	str	r2, [r3, #28]
			break;
    43e4:	e00f      	b.n	4406 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    43e6:	4b0b      	ldr	r3, [pc, #44]	; (4414 <system_apb_clock_set_mask+0x78>)
    43e8:	4a0a      	ldr	r2, [pc, #40]	; (4414 <system_apb_clock_set_mask+0x78>)
    43ea:	6a11      	ldr	r1, [r2, #32]
    43ec:	683a      	ldr	r2, [r7, #0]
    43ee:	430a      	orrs	r2, r1
    43f0:	621a      	str	r2, [r3, #32]
			break;
    43f2:	e008      	b.n	4406 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    43f4:	4b07      	ldr	r3, [pc, #28]	; (4414 <system_apb_clock_set_mask+0x78>)
    43f6:	4a07      	ldr	r2, [pc, #28]	; (4414 <system_apb_clock_set_mask+0x78>)
    43f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	430a      	orrs	r2, r1
    43fe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    4400:	e001      	b.n	4406 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    4402:	2317      	movs	r3, #23
    4404:	e000      	b.n	4408 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    4406:	2300      	movs	r3, #0
}
    4408:	0018      	movs	r0, r3
    440a:	46bd      	mov	sp, r7
    440c:	b002      	add	sp, #8
    440e:	bd80      	pop	{r7, pc}
    4410:	00016520 	.word	0x00016520
    4414:	40000400 	.word	0x40000400

00004418 <system_pinmux_get_config_defaults>:
{
    4418:	b580      	push	{r7, lr}
    441a:	b082      	sub	sp, #8
    441c:	af00      	add	r7, sp, #0
    441e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	2280      	movs	r2, #128	; 0x80
    4424:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	2200      	movs	r2, #0
    442a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    442c:	687b      	ldr	r3, [r7, #4]
    442e:	2201      	movs	r2, #1
    4430:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4432:	687b      	ldr	r3, [r7, #4]
    4434:	2200      	movs	r2, #0
    4436:	70da      	strb	r2, [r3, #3]
}
    4438:	46c0      	nop			; (mov r8, r8)
    443a:	46bd      	mov	sp, r7
    443c:	b002      	add	sp, #8
    443e:	bd80      	pop	{r7, pc}

00004440 <system_is_debugger_present>:
{
    4440:	b580      	push	{r7, lr}
    4442:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4444:	4b05      	ldr	r3, [pc, #20]	; (445c <system_is_debugger_present+0x1c>)
    4446:	789b      	ldrb	r3, [r3, #2]
    4448:	b2db      	uxtb	r3, r3
    444a:	001a      	movs	r2, r3
    444c:	2302      	movs	r3, #2
    444e:	4013      	ands	r3, r2
    4450:	1e5a      	subs	r2, r3, #1
    4452:	4193      	sbcs	r3, r2
    4454:	b2db      	uxtb	r3, r3
}
    4456:	0018      	movs	r0, r3
    4458:	46bd      	mov	sp, r7
    445a:	bd80      	pop	{r7, pc}
    445c:	41002000 	.word	0x41002000

00004460 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4460:	b580      	push	{r7, lr}
    4462:	b084      	sub	sp, #16
    4464:	af00      	add	r7, sp, #0
    4466:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4468:	687b      	ldr	r3, [r7, #4]
    446a:	681b      	ldr	r3, [r3, #0]
    446c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	69db      	ldr	r3, [r3, #28]
    4472:	1e5a      	subs	r2, r3, #1
    4474:	4193      	sbcs	r3, r2
    4476:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4478:	0018      	movs	r0, r3
    447a:	46bd      	mov	sp, r7
    447c:	b004      	add	sp, #16
    447e:	bd80      	pop	{r7, pc}

00004480 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4480:	b580      	push	{r7, lr}
    4482:	b082      	sub	sp, #8
    4484:	af00      	add	r7, sp, #0
    4486:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4488:	46c0      	nop			; (mov r8, r8)
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	0018      	movs	r0, r3
    448e:	4b04      	ldr	r3, [pc, #16]	; (44a0 <_usart_wait_for_sync+0x20>)
    4490:	4798      	blx	r3
    4492:	1e03      	subs	r3, r0, #0
    4494:	d1f9      	bne.n	448a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	46bd      	mov	sp, r7
    449a:	b002      	add	sp, #8
    449c:	bd80      	pop	{r7, pc}
    449e:	46c0      	nop			; (mov r8, r8)
    44a0:	00004461 	.word	0x00004461

000044a4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    44a4:	b5b0      	push	{r4, r5, r7, lr}
    44a6:	b08c      	sub	sp, #48	; 0x30
    44a8:	af02      	add	r7, sp, #8
    44aa:	6078      	str	r0, [r7, #4]
    44ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    44ae:	687b      	ldr	r3, [r7, #4]
    44b0:	681b      	ldr	r3, [r3, #0]
    44b2:	617b      	str	r3, [r7, #20]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	0018      	movs	r0, r3
    44ba:	4bac      	ldr	r3, [pc, #688]	; (476c <_usart_set_config+0x2c8>)
    44bc:	4798      	blx	r3
    44be:	0003      	movs	r3, r0
    44c0:	613b      	str	r3, [r7, #16]
	uint32_t gclk_index;

#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (SAMC21) || (WLR089)
	if (sercom_index == 5) {
    44c2:	693b      	ldr	r3, [r7, #16]
    44c4:	2b05      	cmp	r3, #5
    44c6:	d102      	bne.n	44ce <_usart_set_config+0x2a>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    44c8:	2318      	movs	r3, #24
    44ca:	627b      	str	r3, [r7, #36]	; 0x24
    44cc:	e002      	b.n	44d4 <_usart_set_config+0x30>
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    44ce:	693b      	ldr	r3, [r7, #16]
    44d0:	3312      	adds	r3, #18
    44d2:	627b      	str	r3, [r7, #36]	; 0x24
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    44d4:	2300      	movs	r3, #0
    44d6:	623b      	str	r3, [r7, #32]
	uint32_t ctrlb = 0;
    44d8:	2300      	movs	r3, #0
    44da:	61fb      	str	r3, [r7, #28]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    44dc:	230a      	movs	r3, #10
    44de:	18fb      	adds	r3, r7, r3
    44e0:	2200      	movs	r2, #0
    44e2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    44e4:	231b      	movs	r3, #27
    44e6:	18fb      	adds	r3, r7, r3
    44e8:	2200      	movs	r2, #0
    44ea:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    44ec:	231a      	movs	r3, #26
    44ee:	18fb      	adds	r3, r7, r3
    44f0:	2210      	movs	r2, #16
    44f2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    44f4:	683b      	ldr	r3, [r7, #0]
    44f6:	8a1b      	ldrh	r3, [r3, #16]
    44f8:	2280      	movs	r2, #128	; 0x80
    44fa:	01d2      	lsls	r2, r2, #7
    44fc:	4293      	cmp	r3, r2
    44fe:	d01c      	beq.n	453a <_usart_set_config+0x96>
    4500:	2280      	movs	r2, #128	; 0x80
    4502:	01d2      	lsls	r2, r2, #7
    4504:	4293      	cmp	r3, r2
    4506:	dc06      	bgt.n	4516 <_usart_set_config+0x72>
    4508:	2b00      	cmp	r3, #0
    450a:	d00d      	beq.n	4528 <_usart_set_config+0x84>
    450c:	2280      	movs	r2, #128	; 0x80
    450e:	0192      	lsls	r2, r2, #6
    4510:	4293      	cmp	r3, r2
    4512:	d024      	beq.n	455e <_usart_set_config+0xba>
    4514:	e035      	b.n	4582 <_usart_set_config+0xde>
    4516:	22c0      	movs	r2, #192	; 0xc0
    4518:	01d2      	lsls	r2, r2, #7
    451a:	4293      	cmp	r3, r2
    451c:	d028      	beq.n	4570 <_usart_set_config+0xcc>
    451e:	2280      	movs	r2, #128	; 0x80
    4520:	0212      	lsls	r2, r2, #8
    4522:	4293      	cmp	r3, r2
    4524:	d012      	beq.n	454c <_usart_set_config+0xa8>
    4526:	e02c      	b.n	4582 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4528:	231b      	movs	r3, #27
    452a:	18fb      	adds	r3, r7, r3
    452c:	2200      	movs	r2, #0
    452e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4530:	231a      	movs	r3, #26
    4532:	18fb      	adds	r3, r7, r3
    4534:	2210      	movs	r2, #16
    4536:	701a      	strb	r2, [r3, #0]
			break;
    4538:	e023      	b.n	4582 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    453a:	231b      	movs	r3, #27
    453c:	18fb      	adds	r3, r7, r3
    453e:	2200      	movs	r2, #0
    4540:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4542:	231a      	movs	r3, #26
    4544:	18fb      	adds	r3, r7, r3
    4546:	2208      	movs	r2, #8
    4548:	701a      	strb	r2, [r3, #0]
			break;
    454a:	e01a      	b.n	4582 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    454c:	231b      	movs	r3, #27
    454e:	18fb      	adds	r3, r7, r3
    4550:	2200      	movs	r2, #0
    4552:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4554:	231a      	movs	r3, #26
    4556:	18fb      	adds	r3, r7, r3
    4558:	2203      	movs	r2, #3
    455a:	701a      	strb	r2, [r3, #0]
			break;
    455c:	e011      	b.n	4582 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    455e:	231b      	movs	r3, #27
    4560:	18fb      	adds	r3, r7, r3
    4562:	2201      	movs	r2, #1
    4564:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4566:	231a      	movs	r3, #26
    4568:	18fb      	adds	r3, r7, r3
    456a:	2210      	movs	r2, #16
    456c:	701a      	strb	r2, [r3, #0]
			break;
    456e:	e008      	b.n	4582 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4570:	231b      	movs	r3, #27
    4572:	18fb      	adds	r3, r7, r3
    4574:	2201      	movs	r2, #1
    4576:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4578:	231a      	movs	r3, #26
    457a:	18fb      	adds	r3, r7, r3
    457c:	2208      	movs	r2, #8
    457e:	701a      	strb	r2, [r3, #0]
			break;
    4580:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4582:	683b      	ldr	r3, [r7, #0]
    4584:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4586:	683b      	ldr	r3, [r7, #0]
    4588:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    458a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    458c:	683b      	ldr	r3, [r7, #0]
    458e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4590:	4313      	orrs	r3, r2
		config->sample_rate |
    4592:	683a      	ldr	r2, [r7, #0]
    4594:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4596:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4598:	683a      	ldr	r2, [r7, #0]
    459a:	7e12      	ldrb	r2, [r2, #24]
    459c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    459e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    45a0:	683a      	ldr	r2, [r7, #0]
    45a2:	2126      	movs	r1, #38	; 0x26
    45a4:	5c52      	ldrb	r2, [r2, r1]
    45a6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    45a8:	4313      	orrs	r3, r2
    45aa:	623b      	str	r3, [r7, #32]

	enum status_code status_code = STATUS_OK;
    45ac:	2319      	movs	r3, #25
    45ae:	18fb      	adds	r3, r7, r3
    45b0:	2200      	movs	r2, #0
    45b2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    45b4:	683b      	ldr	r3, [r7, #0]
    45b6:	685b      	ldr	r3, [r3, #4]
    45b8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    45ba:	68fb      	ldr	r3, [r7, #12]
    45bc:	2b00      	cmp	r3, #0
    45be:	d01e      	beq.n	45fe <_usart_set_config+0x15a>
    45c0:	2280      	movs	r2, #128	; 0x80
    45c2:	0552      	lsls	r2, r2, #21
    45c4:	4293      	cmp	r3, r2
    45c6:	d14f      	bne.n	4668 <_usart_set_config+0x1c4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    45c8:	683b      	ldr	r3, [r7, #0]
    45ca:	2227      	movs	r2, #39	; 0x27
    45cc:	5c9b      	ldrb	r3, [r3, r2]
    45ce:	2201      	movs	r2, #1
    45d0:	4053      	eors	r3, r2
    45d2:	b2db      	uxtb	r3, r3
    45d4:	2b00      	cmp	r3, #0
    45d6:	d046      	beq.n	4666 <_usart_set_config+0x1c2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    45d8:	683b      	ldr	r3, [r7, #0]
    45da:	6a1d      	ldr	r5, [r3, #32]
    45dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45de:	b2db      	uxtb	r3, r3
    45e0:	0018      	movs	r0, r3
    45e2:	4b63      	ldr	r3, [pc, #396]	; (4770 <_usart_set_config+0x2cc>)
    45e4:	4798      	blx	r3
    45e6:	0001      	movs	r1, r0
    45e8:	2319      	movs	r3, #25
    45ea:	18fc      	adds	r4, r7, r3
    45ec:	230a      	movs	r3, #10
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	001a      	movs	r2, r3
    45f2:	0028      	movs	r0, r5
    45f4:	4b5f      	ldr	r3, [pc, #380]	; (4774 <_usart_set_config+0x2d0>)
    45f6:	4798      	blx	r3
    45f8:	0003      	movs	r3, r0
    45fa:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    45fc:	e033      	b.n	4666 <_usart_set_config+0x1c2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    45fe:	683b      	ldr	r3, [r7, #0]
    4600:	2227      	movs	r2, #39	; 0x27
    4602:	5c9b      	ldrb	r3, [r3, r2]
    4604:	2b00      	cmp	r3, #0
    4606:	d014      	beq.n	4632 <_usart_set_config+0x18e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4608:	683b      	ldr	r3, [r7, #0]
    460a:	6a18      	ldr	r0, [r3, #32]
    460c:	683b      	ldr	r3, [r7, #0]
    460e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4610:	2319      	movs	r3, #25
    4612:	18fc      	adds	r4, r7, r3
    4614:	231b      	movs	r3, #27
    4616:	18fb      	adds	r3, r7, r3
    4618:	781d      	ldrb	r5, [r3, #0]
    461a:	230a      	movs	r3, #10
    461c:	18fa      	adds	r2, r7, r3
    461e:	231a      	movs	r3, #26
    4620:	18fb      	adds	r3, r7, r3
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	9300      	str	r3, [sp, #0]
    4626:	002b      	movs	r3, r5
    4628:	4d53      	ldr	r5, [pc, #332]	; (4778 <_usart_set_config+0x2d4>)
    462a:	47a8      	blx	r5
    462c:	0003      	movs	r3, r0
    462e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4630:	e01a      	b.n	4668 <_usart_set_config+0x1c4>
						_sercom_get_async_baud_val(config->baudrate,
    4632:	683b      	ldr	r3, [r7, #0]
    4634:	6a1d      	ldr	r5, [r3, #32]
    4636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4638:	b2db      	uxtb	r3, r3
    463a:	0018      	movs	r0, r3
    463c:	4b4c      	ldr	r3, [pc, #304]	; (4770 <_usart_set_config+0x2cc>)
    463e:	4798      	blx	r3
				status_code =
    4640:	2319      	movs	r3, #25
    4642:	18fc      	adds	r4, r7, r3
    4644:	231b      	movs	r3, #27
    4646:	18fb      	adds	r3, r7, r3
    4648:	7819      	ldrb	r1, [r3, #0]
    464a:	230a      	movs	r3, #10
    464c:	18fa      	adds	r2, r7, r3
    464e:	231a      	movs	r3, #26
    4650:	18fb      	adds	r3, r7, r3
    4652:	781b      	ldrb	r3, [r3, #0]
    4654:	9300      	str	r3, [sp, #0]
    4656:	000b      	movs	r3, r1
    4658:	0001      	movs	r1, r0
    465a:	0028      	movs	r0, r5
    465c:	4d46      	ldr	r5, [pc, #280]	; (4778 <_usart_set_config+0x2d4>)
    465e:	47a8      	blx	r5
    4660:	0003      	movs	r3, r0
    4662:	7023      	strb	r3, [r4, #0]
			break;
    4664:	e000      	b.n	4668 <_usart_set_config+0x1c4>
			break;
    4666:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4668:	2319      	movs	r3, #25
    466a:	18fb      	adds	r3, r7, r3
    466c:	781b      	ldrb	r3, [r3, #0]
    466e:	2b00      	cmp	r3, #0
    4670:	d003      	beq.n	467a <_usart_set_config+0x1d6>
		/* Abort */
		return status_code;
    4672:	2319      	movs	r3, #25
    4674:	18fb      	adds	r3, r7, r3
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	e073      	b.n	4762 <_usart_set_config+0x2be>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	7e5b      	ldrb	r3, [r3, #25]
    467e:	2b00      	cmp	r3, #0
    4680:	d003      	beq.n	468a <_usart_set_config+0x1e6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4682:	683b      	ldr	r3, [r7, #0]
    4684:	7e9a      	ldrb	r2, [r3, #26]
    4686:	697b      	ldr	r3, [r7, #20]
    4688:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    468a:	230a      	movs	r3, #10
    468c:	18fb      	adds	r3, r7, r3
    468e:	881a      	ldrh	r2, [r3, #0]
    4690:	697b      	ldr	r3, [r7, #20]
    4692:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4694:	6a3a      	ldr	r2, [r7, #32]
    4696:	68fb      	ldr	r3, [r7, #12]
    4698:	4313      	orrs	r3, r2
    469a:	623b      	str	r3, [r7, #32]

	if (config->use_external_clock == false) {
    469c:	683b      	ldr	r3, [r7, #0]
    469e:	2227      	movs	r2, #39	; 0x27
    46a0:	5c9b      	ldrb	r3, [r3, r2]
    46a2:	2201      	movs	r2, #1
    46a4:	4053      	eors	r3, r2
    46a6:	b2db      	uxtb	r3, r3
    46a8:	2b00      	cmp	r3, #0
    46aa:	d003      	beq.n	46b4 <_usart_set_config+0x210>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    46ac:	6a3b      	ldr	r3, [r7, #32]
    46ae:	2204      	movs	r2, #4
    46b0:	4313      	orrs	r3, r2
    46b2:	623b      	str	r3, [r7, #32]
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    46b4:	683b      	ldr	r3, [r7, #0]
    46b6:	7e5b      	ldrb	r3, [r3, #25]
    46b8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    46ba:	683b      	ldr	r3, [r7, #0]
    46bc:	7f1b      	ldrb	r3, [r3, #28]
    46be:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    46c0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	7f5b      	ldrb	r3, [r3, #29]
    46c6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    46c8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    46ca:	683b      	ldr	r3, [r7, #0]
    46cc:	2124      	movs	r1, #36	; 0x24
    46ce:	5c5b      	ldrb	r3, [r3, r1]
    46d0:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    46d2:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    46d4:	683b      	ldr	r3, [r7, #0]
    46d6:	2125      	movs	r1, #37	; 0x25
    46d8:	5c5b      	ldrb	r3, [r3, r1]
    46da:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    46dc:	4313      	orrs	r3, r2
	ctrlb =  
    46de:	61fb      	str	r3, [r7, #28]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    46e0:	683b      	ldr	r3, [r7, #0]
    46e2:	7a9b      	ldrb	r3, [r3, #10]
    46e4:	001a      	movs	r2, r3
    46e6:	69fb      	ldr	r3, [r7, #28]
    46e8:	4313      	orrs	r3, r2
    46ea:	61fb      	str	r3, [r7, #28]
	ctrlb |= (uint32_t)config->character_size;
    46ec:	683b      	ldr	r3, [r7, #0]
    46ee:	7adb      	ldrb	r3, [r3, #11]
    46f0:	001a      	movs	r2, r3
    46f2:	69fb      	ldr	r3, [r7, #28]
    46f4:	4313      	orrs	r3, r2
    46f6:	61fb      	str	r3, [r7, #28]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    46f8:	683b      	ldr	r3, [r7, #0]
    46fa:	891b      	ldrh	r3, [r3, #8]
    46fc:	2bff      	cmp	r3, #255	; 0xff
    46fe:	d00b      	beq.n	4718 <_usart_set_config+0x274>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4700:	6a3b      	ldr	r3, [r7, #32]
    4702:	2280      	movs	r2, #128	; 0x80
    4704:	0452      	lsls	r2, r2, #17
    4706:	4313      	orrs	r3, r2
    4708:	623b      	str	r3, [r7, #32]
		ctrlb |= config->parity;
    470a:	683b      	ldr	r3, [r7, #0]
    470c:	891b      	ldrh	r3, [r3, #8]
    470e:	001a      	movs	r2, r3
    4710:	69fb      	ldr	r3, [r7, #28]
    4712:	4313      	orrs	r3, r2
    4714:	61fb      	str	r3, [r7, #28]
    4716:	e008      	b.n	472a <_usart_set_config+0x286>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4718:	683b      	ldr	r3, [r7, #0]
    471a:	7edb      	ldrb	r3, [r3, #27]
    471c:	2b00      	cmp	r3, #0
    471e:	d004      	beq.n	472a <_usart_set_config+0x286>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4720:	6a3b      	ldr	r3, [r7, #32]
    4722:	2280      	movs	r2, #128	; 0x80
    4724:	04d2      	lsls	r2, r2, #19
    4726:	4313      	orrs	r3, r2
    4728:	623b      	str	r3, [r7, #32]
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    472a:	683b      	ldr	r3, [r7, #0]
    472c:	222c      	movs	r2, #44	; 0x2c
    472e:	5c9b      	ldrb	r3, [r3, r2]
    4730:	2b00      	cmp	r3, #0
    4732:	d103      	bne.n	473c <_usart_set_config+0x298>
    4734:	4b11      	ldr	r3, [pc, #68]	; (477c <_usart_set_config+0x2d8>)
    4736:	4798      	blx	r3
    4738:	1e03      	subs	r3, r0, #0
    473a:	d003      	beq.n	4744 <_usart_set_config+0x2a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    473c:	6a3b      	ldr	r3, [r7, #32]
    473e:	2280      	movs	r2, #128	; 0x80
    4740:	4313      	orrs	r3, r2
    4742:	623b      	str	r3, [r7, #32]
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	0018      	movs	r0, r3
    4748:	4b0d      	ldr	r3, [pc, #52]	; (4780 <_usart_set_config+0x2dc>)
    474a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    474c:	697b      	ldr	r3, [r7, #20]
    474e:	69fa      	ldr	r2, [r7, #28]
    4750:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4752:	687b      	ldr	r3, [r7, #4]
    4754:	0018      	movs	r0, r3
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <_usart_set_config+0x2dc>)
    4758:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    475a:	697b      	ldr	r3, [r7, #20]
    475c:	6a3a      	ldr	r2, [r7, #32]
    475e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    4760:	2300      	movs	r3, #0
}
    4762:	0018      	movs	r0, r3
    4764:	46bd      	mov	sp, r7
    4766:	b00a      	add	sp, #40	; 0x28
    4768:	bdb0      	pop	{r4, r5, r7, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	000038a5 	.word	0x000038a5
    4770:	00005f59 	.word	0x00005f59
    4774:	00003427 	.word	0x00003427
    4778:	000034a5 	.word	0x000034a5
    477c:	00004441 	.word	0x00004441
    4780:	00004481 	.word	0x00004481

00004784 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4784:	b590      	push	{r4, r7, lr}
    4786:	b093      	sub	sp, #76	; 0x4c
    4788:	af00      	add	r7, sp, #0
    478a:	60f8      	str	r0, [r7, #12]
    478c:	60b9      	str	r1, [r7, #8]
    478e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4790:	2333      	movs	r3, #51	; 0x33
    4792:	18fb      	adds	r3, r7, r3
    4794:	2200      	movs	r2, #0
    4796:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4798:	68fb      	ldr	r3, [r7, #12]
    479a:	68ba      	ldr	r2, [r7, #8]
    479c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    479e:	68fb      	ldr	r3, [r7, #12]
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	0018      	movs	r0, r3
    47aa:	4b8f      	ldr	r3, [pc, #572]	; (49e8 <usart_init+0x264>)
    47ac:	4798      	blx	r3
    47ae:	0003      	movs	r3, r0
    47b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    47b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47b4:	2b05      	cmp	r3, #5
    47b6:	d104      	bne.n	47c2 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    47b8:	2301      	movs	r3, #1
    47ba:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    47bc:	2318      	movs	r3, #24
    47be:	643b      	str	r3, [r7, #64]	; 0x40
    47c0:	e004      	b.n	47cc <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    47c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47c4:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    47c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47c8:	3312      	adds	r3, #18
    47ca:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    47cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47ce:	681b      	ldr	r3, [r3, #0]
    47d0:	2201      	movs	r2, #1
    47d2:	4013      	ands	r3, r2
    47d4:	d001      	beq.n	47da <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    47d6:	2305      	movs	r3, #5
    47d8:	e102      	b.n	49e0 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    47da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47dc:	681b      	ldr	r3, [r3, #0]
    47de:	2202      	movs	r2, #2
    47e0:	4013      	ands	r3, r2
    47e2:	d001      	beq.n	47e8 <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    47e4:	231c      	movs	r3, #28
    47e6:	e0fb      	b.n	49e0 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    47e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47ea:	2b05      	cmp	r3, #5
    47ec:	d108      	bne.n	4800 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    47ee:	2201      	movs	r2, #1
    47f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    47f2:	409a      	lsls	r2, r3
    47f4:	0013      	movs	r3, r2
    47f6:	0019      	movs	r1, r3
    47f8:	2003      	movs	r0, #3
    47fa:	4b7c      	ldr	r3, [pc, #496]	; (49ec <usart_init+0x268>)
    47fc:	4798      	blx	r3
    47fe:	e007      	b.n	4810 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    4800:	2201      	movs	r2, #1
    4802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4804:	409a      	lsls	r2, r3
    4806:	0013      	movs	r3, r2
    4808:	0019      	movs	r1, r3
    480a:	2002      	movs	r0, #2
    480c:	4b77      	ldr	r3, [pc, #476]	; (49ec <usart_init+0x268>)
    480e:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4810:	2324      	movs	r3, #36	; 0x24
    4812:	18fb      	adds	r3, r7, r3
    4814:	0018      	movs	r0, r3
    4816:	4b76      	ldr	r3, [pc, #472]	; (49f0 <usart_init+0x26c>)
    4818:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	222d      	movs	r2, #45	; 0x2d
    481e:	5c9a      	ldrb	r2, [r3, r2]
    4820:	2324      	movs	r3, #36	; 0x24
    4822:	18fb      	adds	r3, r7, r3
    4824:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4828:	b2db      	uxtb	r3, r3
    482a:	2224      	movs	r2, #36	; 0x24
    482c:	18ba      	adds	r2, r7, r2
    482e:	0011      	movs	r1, r2
    4830:	0018      	movs	r0, r3
    4832:	4b70      	ldr	r3, [pc, #448]	; (49f4 <usart_init+0x270>)
    4834:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4838:	b2db      	uxtb	r3, r3
    483a:	0018      	movs	r0, r3
    483c:	4b6e      	ldr	r3, [pc, #440]	; (49f8 <usart_init+0x274>)
    483e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	222d      	movs	r2, #45	; 0x2d
    4844:	5c9b      	ldrb	r3, [r3, r2]
    4846:	2100      	movs	r1, #0
    4848:	0018      	movs	r0, r3
    484a:	4b6c      	ldr	r3, [pc, #432]	; (49fc <usart_init+0x278>)
    484c:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    484e:	687b      	ldr	r3, [r7, #4]
    4850:	7ada      	ldrb	r2, [r3, #11]
    4852:	68fb      	ldr	r3, [r7, #12]
    4854:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4856:	687b      	ldr	r3, [r7, #4]
    4858:	2224      	movs	r2, #36	; 0x24
    485a:	5c9a      	ldrb	r2, [r3, r2]
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4860:	687b      	ldr	r3, [r7, #4]
    4862:	2225      	movs	r2, #37	; 0x25
    4864:	5c9a      	ldrb	r2, [r3, r2]
    4866:	68fb      	ldr	r3, [r7, #12]
    4868:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	7eda      	ldrb	r2, [r3, #27]
    486e:	68fb      	ldr	r3, [r7, #12]
    4870:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4872:	687b      	ldr	r3, [r7, #4]
    4874:	7f1a      	ldrb	r2, [r3, #28]
    4876:	68fb      	ldr	r3, [r7, #12]
    4878:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    487a:	2333      	movs	r3, #51	; 0x33
    487c:	18fc      	adds	r4, r7, r3
    487e:	687a      	ldr	r2, [r7, #4]
    4880:	68fb      	ldr	r3, [r7, #12]
    4882:	0011      	movs	r1, r2
    4884:	0018      	movs	r0, r3
    4886:	4b5e      	ldr	r3, [pc, #376]	; (4a00 <usart_init+0x27c>)
    4888:	4798      	blx	r3
    488a:	0003      	movs	r3, r0
    488c:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    488e:	2333      	movs	r3, #51	; 0x33
    4890:	18fb      	adds	r3, r7, r3
    4892:	781b      	ldrb	r3, [r3, #0]
    4894:	2b00      	cmp	r3, #0
    4896:	d003      	beq.n	48a0 <usart_init+0x11c>
		return status_code;
    4898:	2333      	movs	r3, #51	; 0x33
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	e09f      	b.n	49e0 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    48a0:	2320      	movs	r3, #32
    48a2:	18fb      	adds	r3, r7, r3
    48a4:	0018      	movs	r0, r3
    48a6:	4b57      	ldr	r3, [pc, #348]	; (4a04 <usart_init+0x280>)
    48a8:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    48aa:	2320      	movs	r3, #32
    48ac:	18fb      	adds	r3, r7, r3
    48ae:	2200      	movs	r2, #0
    48b0:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    48b2:	2320      	movs	r3, #32
    48b4:	18fb      	adds	r3, r7, r3
    48b6:	2200      	movs	r2, #0
    48b8:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    48ba:	687b      	ldr	r3, [r7, #4]
    48bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    48be:	2310      	movs	r3, #16
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    48c8:	2310      	movs	r3, #16
    48ca:	18fb      	adds	r3, r7, r3
    48cc:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    48d2:	2310      	movs	r3, #16
    48d4:	18fb      	adds	r3, r7, r3
    48d6:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    48dc:	2310      	movs	r3, #16
    48de:	18fb      	adds	r3, r7, r3
    48e0:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    48e2:	233f      	movs	r3, #63	; 0x3f
    48e4:	18fb      	adds	r3, r7, r3
    48e6:	2200      	movs	r2, #0
    48e8:	701a      	strb	r2, [r3, #0]
    48ea:	e02c      	b.n	4946 <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    48ec:	233f      	movs	r3, #63	; 0x3f
    48ee:	18fb      	adds	r3, r7, r3
    48f0:	781a      	ldrb	r2, [r3, #0]
    48f2:	2310      	movs	r3, #16
    48f4:	18fb      	adds	r3, r7, r3
    48f6:	0092      	lsls	r2, r2, #2
    48f8:	58d3      	ldr	r3, [r2, r3]
    48fa:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    48fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    48fe:	2b00      	cmp	r3, #0
    4900:	d109      	bne.n	4916 <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4902:	233f      	movs	r3, #63	; 0x3f
    4904:	18fb      	adds	r3, r7, r3
    4906:	781a      	ldrb	r2, [r3, #0]
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	0011      	movs	r1, r2
    490c:	0018      	movs	r0, r3
    490e:	4b3e      	ldr	r3, [pc, #248]	; (4a08 <usart_init+0x284>)
    4910:	4798      	blx	r3
    4912:	0003      	movs	r3, r0
    4914:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4918:	3301      	adds	r3, #1
    491a:	d00d      	beq.n	4938 <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    491e:	b2da      	uxtb	r2, r3
    4920:	2320      	movs	r3, #32
    4922:	18fb      	adds	r3, r7, r3
    4924:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4928:	0c1b      	lsrs	r3, r3, #16
    492a:	b2db      	uxtb	r3, r3
    492c:	2220      	movs	r2, #32
    492e:	18ba      	adds	r2, r7, r2
    4930:	0011      	movs	r1, r2
    4932:	0018      	movs	r0, r3
    4934:	4b35      	ldr	r3, [pc, #212]	; (4a0c <usart_init+0x288>)
    4936:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4938:	233f      	movs	r3, #63	; 0x3f
    493a:	18fb      	adds	r3, r7, r3
    493c:	781a      	ldrb	r2, [r3, #0]
    493e:	233f      	movs	r3, #63	; 0x3f
    4940:	18fb      	adds	r3, r7, r3
    4942:	3201      	adds	r2, #1
    4944:	701a      	strb	r2, [r3, #0]
    4946:	233f      	movs	r3, #63	; 0x3f
    4948:	18fb      	adds	r3, r7, r3
    494a:	781b      	ldrb	r3, [r3, #0]
    494c:	2b03      	cmp	r3, #3
    494e:	d9cd      	bls.n	48ec <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4950:	2300      	movs	r3, #0
    4952:	637b      	str	r3, [r7, #52]	; 0x34
    4954:	e00a      	b.n	496c <usart_init+0x1e8>
		module->callback[i]            = NULL;
    4956:	68fa      	ldr	r2, [r7, #12]
    4958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    495a:	3302      	adds	r3, #2
    495c:	009b      	lsls	r3, r3, #2
    495e:	18d3      	adds	r3, r2, r3
    4960:	3304      	adds	r3, #4
    4962:	2200      	movs	r2, #0
    4964:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4968:	3301      	adds	r3, #1
    496a:	637b      	str	r3, [r7, #52]	; 0x34
    496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    496e:	2b05      	cmp	r3, #5
    4970:	d9f1      	bls.n	4956 <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
    4972:	68fb      	ldr	r3, [r7, #12]
    4974:	2200      	movs	r2, #0
    4976:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4978:	68fb      	ldr	r3, [r7, #12]
    497a:	2200      	movs	r2, #0
    497c:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    497e:	68fb      	ldr	r3, [r7, #12]
    4980:	2200      	movs	r2, #0
    4982:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4984:	68fb      	ldr	r3, [r7, #12]
    4986:	2200      	movs	r2, #0
    4988:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    498a:	68fb      	ldr	r3, [r7, #12]
    498c:	2230      	movs	r2, #48	; 0x30
    498e:	2100      	movs	r1, #0
    4990:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	2231      	movs	r2, #49	; 0x31
    4996:	2100      	movs	r1, #0
    4998:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    499a:	68fb      	ldr	r3, [r7, #12]
    499c:	2232      	movs	r2, #50	; 0x32
    499e:	2100      	movs	r1, #0
    49a0:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    49a2:	68fb      	ldr	r3, [r7, #12]
    49a4:	2233      	movs	r2, #51	; 0x33
    49a6:	2100      	movs	r1, #0
    49a8:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    49aa:	68fb      	ldr	r3, [r7, #12]
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	2227      	movs	r2, #39	; 0x27
    49b0:	18bc      	adds	r4, r7, r2
    49b2:	0018      	movs	r0, r3
    49b4:	4b0c      	ldr	r3, [pc, #48]	; (49e8 <usart_init+0x264>)
    49b6:	4798      	blx	r3
    49b8:	0003      	movs	r3, r0
    49ba:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    49bc:	4a14      	ldr	r2, [pc, #80]	; (4a10 <usart_init+0x28c>)
    49be:	2327      	movs	r3, #39	; 0x27
    49c0:	18fb      	adds	r3, r7, r3
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	0011      	movs	r1, r2
    49c6:	0018      	movs	r0, r3
    49c8:	4b12      	ldr	r3, [pc, #72]	; (4a14 <usart_init+0x290>)
    49ca:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    49cc:	2327      	movs	r3, #39	; 0x27
    49ce:	18fb      	adds	r3, r7, r3
    49d0:	781a      	ldrb	r2, [r3, #0]
    49d2:	4b11      	ldr	r3, [pc, #68]	; (4a18 <usart_init+0x294>)
    49d4:	0092      	lsls	r2, r2, #2
    49d6:	68f9      	ldr	r1, [r7, #12]
    49d8:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    49da:	2333      	movs	r3, #51	; 0x33
    49dc:	18fb      	adds	r3, r7, r3
    49de:	781b      	ldrb	r3, [r3, #0]
}
    49e0:	0018      	movs	r0, r3
    49e2:	46bd      	mov	sp, r7
    49e4:	b013      	add	sp, #76	; 0x4c
    49e6:	bd90      	pop	{r4, r7, pc}
    49e8:	000038a5 	.word	0x000038a5
    49ec:	0000439d 	.word	0x0000439d
    49f0:	00004385 	.word	0x00004385
    49f4:	00005e69 	.word	0x00005e69
    49f8:	00005ea9 	.word	0x00005ea9
    49fc:	00003665 	.word	0x00003665
    4a00:	000044a5 	.word	0x000044a5
    4a04:	00004419 	.word	0x00004419
    4a08:	000036f1 	.word	0x000036f1
    4a0c:	0000611d 	.word	0x0000611d
    4a10:	00004ca1 	.word	0x00004ca1
    4a14:	00003909 	.word	0x00003909
    4a18:	20000f50 	.word	0x20000f50

00004a1c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b084      	sub	sp, #16
    4a20:	af00      	add	r7, sp, #0
    4a22:	6078      	str	r0, [r7, #4]
    4a24:	000a      	movs	r2, r1
    4a26:	1cbb      	adds	r3, r7, #2
    4a28:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	79db      	ldrb	r3, [r3, #7]
    4a34:	2201      	movs	r2, #1
    4a36:	4053      	eors	r3, r2
    4a38:	b2db      	uxtb	r3, r3
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	d001      	beq.n	4a42 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    4a3e:	231c      	movs	r3, #28
    4a40:	e013      	b.n	4a6a <usart_write_wait+0x4e>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4a46:	b29b      	uxth	r3, r3
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d001      	beq.n	4a50 <usart_write_wait+0x34>
		return STATUS_BUSY;
    4a4c:	2305      	movs	r3, #5
    4a4e:	e00c      	b.n	4a6a <usart_write_wait+0x4e>
		return STATUS_BUSY;
	}
#endif

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    4a50:	68fb      	ldr	r3, [r7, #12]
    4a52:	1cba      	adds	r2, r7, #2
    4a54:	8812      	ldrh	r2, [r2, #0]
    4a56:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4a58:	46c0      	nop			; (mov r8, r8)
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	7e1b      	ldrb	r3, [r3, #24]
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	001a      	movs	r2, r3
    4a62:	2302      	movs	r3, #2
    4a64:	4013      	ands	r3, r2
    4a66:	d0f8      	beq.n	4a5a <usart_write_wait+0x3e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4a68:	2300      	movs	r3, #0
}
    4a6a:	0018      	movs	r0, r3
    4a6c:	46bd      	mov	sp, r7
    4a6e:	b004      	add	sp, #16
    4a70:	bd80      	pop	{r7, pc}

00004a72 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4a72:	b580      	push	{r7, lr}
    4a74:	b084      	sub	sp, #16
    4a76:	af00      	add	r7, sp, #0
    4a78:	6078      	str	r0, [r7, #4]
    4a7a:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	681b      	ldr	r3, [r3, #0]
    4a80:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	799b      	ldrb	r3, [r3, #6]
    4a86:	2201      	movs	r2, #1
    4a88:	4053      	eors	r3, r2
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d001      	beq.n	4a94 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    4a90:	231c      	movs	r3, #28
    4a92:	e05a      	b.n	4b4a <usart_read_wait+0xd8>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4a94:	687b      	ldr	r3, [r7, #4]
    4a96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4a98:	b29b      	uxth	r3, r3
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d001      	beq.n	4aa2 <usart_read_wait+0x30>
		return STATUS_BUSY;
    4a9e:	2305      	movs	r3, #5
    4aa0:	e053      	b.n	4b4a <usart_read_wait+0xd8>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4aa2:	68fb      	ldr	r3, [r7, #12]
    4aa4:	7e1b      	ldrb	r3, [r3, #24]
    4aa6:	b2db      	uxtb	r3, r3
    4aa8:	001a      	movs	r2, r3
    4aaa:	2304      	movs	r3, #4
    4aac:	4013      	ands	r3, r2
    4aae:	d101      	bne.n	4ab4 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    4ab0:	2305      	movs	r3, #5
    4ab2:	e04a      	b.n	4b4a <usart_read_wait+0xd8>
	}

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4ab4:	68fb      	ldr	r3, [r7, #12]
    4ab6:	8b5b      	ldrh	r3, [r3, #26]
    4ab8:	b29b      	uxth	r3, r3
    4aba:	b2da      	uxtb	r2, r3
    4abc:	230b      	movs	r3, #11
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	213f      	movs	r1, #63	; 0x3f
    4ac2:	400a      	ands	r2, r1
    4ac4:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4ac6:	230b      	movs	r3, #11
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	781b      	ldrb	r3, [r3, #0]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d036      	beq.n	4b3e <usart_read_wait+0xcc>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4ad0:	230b      	movs	r3, #11
    4ad2:	18fb      	adds	r3, r7, r3
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	2202      	movs	r2, #2
    4ad8:	4013      	ands	r3, r2
    4ada:	d004      	beq.n	4ae6 <usart_read_wait+0x74>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	2202      	movs	r2, #2
    4ae0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    4ae2:	231a      	movs	r3, #26
    4ae4:	e031      	b.n	4b4a <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4ae6:	230b      	movs	r3, #11
    4ae8:	18fb      	adds	r3, r7, r3
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	2204      	movs	r2, #4
    4aee:	4013      	ands	r3, r2
    4af0:	d004      	beq.n	4afc <usart_read_wait+0x8a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4af2:	68fb      	ldr	r3, [r7, #12]
    4af4:	2204      	movs	r2, #4
    4af6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    4af8:	231e      	movs	r3, #30
    4afa:	e026      	b.n	4b4a <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4afc:	230b      	movs	r3, #11
    4afe:	18fb      	adds	r3, r7, r3
    4b00:	781b      	ldrb	r3, [r3, #0]
    4b02:	2201      	movs	r2, #1
    4b04:	4013      	ands	r3, r2
    4b06:	d004      	beq.n	4b12 <usart_read_wait+0xa0>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	2201      	movs	r2, #1
    4b0c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    4b0e:	2313      	movs	r3, #19
    4b10:	e01b      	b.n	4b4a <usart_read_wait+0xd8>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4b12:	230b      	movs	r3, #11
    4b14:	18fb      	adds	r3, r7, r3
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	2210      	movs	r2, #16
    4b1a:	4013      	ands	r3, r2
    4b1c:	d004      	beq.n	4b28 <usart_read_wait+0xb6>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4b1e:	68fb      	ldr	r3, [r7, #12]
    4b20:	2210      	movs	r2, #16
    4b22:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    4b24:	2342      	movs	r3, #66	; 0x42
    4b26:	e010      	b.n	4b4a <usart_read_wait+0xd8>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4b28:	230b      	movs	r3, #11
    4b2a:	18fb      	adds	r3, r7, r3
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	2220      	movs	r2, #32
    4b30:	4013      	ands	r3, r2
    4b32:	d004      	beq.n	4b3e <usart_read_wait+0xcc>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4b34:	68fb      	ldr	r3, [r7, #12]
    4b36:	2220      	movs	r2, #32
    4b38:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4b3a:	2341      	movs	r3, #65	; 0x41
    4b3c:	e005      	b.n	4b4a <usart_read_wait+0xd8>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4b3e:	68fb      	ldr	r3, [r7, #12]
    4b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4b42:	b29a      	uxth	r2, r3
    4b44:	683b      	ldr	r3, [r7, #0]
    4b46:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    4b48:	2300      	movs	r3, #0
}
    4b4a:	0018      	movs	r0, r3
    4b4c:	46bd      	mov	sp, r7
    4b4e:	b004      	add	sp, #16
    4b50:	bd80      	pop	{r7, pc}
	...

00004b54 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4b54:	b590      	push	{r4, r7, lr}
    4b56:	b089      	sub	sp, #36	; 0x24
    4b58:	af00      	add	r7, sp, #0
    4b5a:	60f8      	str	r0, [r7, #12]
    4b5c:	60b9      	str	r1, [r7, #8]
    4b5e:	1dbb      	adds	r3, r7, #6
    4b60:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    4b62:	1dbb      	adds	r3, r7, #6
    4b64:	881b      	ldrh	r3, [r3, #0]
    4b66:	2b00      	cmp	r3, #0
    4b68:	d101      	bne.n	4b6e <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    4b6a:	2317      	movs	r3, #23
    4b6c:	e06d      	b.n	4c4a <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4b6e:	68fb      	ldr	r3, [r7, #12]
    4b70:	799b      	ldrb	r3, [r3, #6]
    4b72:	2201      	movs	r2, #1
    4b74:	4053      	eors	r3, r2
    4b76:	b2db      	uxtb	r3, r3
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d001      	beq.n	4b80 <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    4b7c:	231c      	movs	r3, #28
    4b7e:	e064      	b.n	4c4a <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    4b86:	231e      	movs	r3, #30
    4b88:	18fb      	adds	r3, r7, r3
    4b8a:	2200      	movs	r2, #0
    4b8c:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    4b8e:	e054      	b.n	4c3a <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4b90:	2300      	movs	r3, #0
    4b92:	61bb      	str	r3, [r7, #24]
    4b94:	e00f      	b.n	4bb6 <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    4b96:	697b      	ldr	r3, [r7, #20]
    4b98:	7e1b      	ldrb	r3, [r3, #24]
    4b9a:	b2db      	uxtb	r3, r3
    4b9c:	001a      	movs	r2, r3
    4b9e:	2304      	movs	r3, #4
    4ba0:	4013      	ands	r3, r2
    4ba2:	d10d      	bne.n	4bc0 <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    4ba4:	69bb      	ldr	r3, [r7, #24]
    4ba6:	4a2b      	ldr	r2, [pc, #172]	; (4c54 <usart_read_buffer_wait+0x100>)
    4ba8:	4293      	cmp	r3, r2
    4baa:	d101      	bne.n	4bb0 <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    4bac:	2312      	movs	r3, #18
    4bae:	e04c      	b.n	4c4a <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    4bb0:	69bb      	ldr	r3, [r7, #24]
    4bb2:	3301      	adds	r3, #1
    4bb4:	61bb      	str	r3, [r7, #24]
    4bb6:	69bb      	ldr	r3, [r7, #24]
    4bb8:	4a26      	ldr	r2, [pc, #152]	; (4c54 <usart_read_buffer_wait+0x100>)
    4bba:	4293      	cmp	r3, r2
    4bbc:	d9eb      	bls.n	4b96 <usart_read_buffer_wait+0x42>
    4bbe:	e000      	b.n	4bc2 <usart_read_buffer_wait+0x6e>
				break;
    4bc0:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    4bc2:	2310      	movs	r3, #16
    4bc4:	18fb      	adds	r3, r7, r3
    4bc6:	2200      	movs	r2, #0
    4bc8:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    4bca:	2313      	movs	r3, #19
    4bcc:	18fc      	adds	r4, r7, r3
    4bce:	2310      	movs	r3, #16
    4bd0:	18fa      	adds	r2, r7, r3
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	0011      	movs	r1, r2
    4bd6:	0018      	movs	r0, r3
    4bd8:	4b1f      	ldr	r3, [pc, #124]	; (4c58 <usart_read_buffer_wait+0x104>)
    4bda:	4798      	blx	r3
    4bdc:	0003      	movs	r3, r0
    4bde:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4be0:	2313      	movs	r3, #19
    4be2:	18fb      	adds	r3, r7, r3
    4be4:	781b      	ldrb	r3, [r3, #0]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d003      	beq.n	4bf2 <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    4bea:	2313      	movs	r3, #19
    4bec:	18fb      	adds	r3, r7, r3
    4bee:	781b      	ldrb	r3, [r3, #0]
    4bf0:	e02b      	b.n	4c4a <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4bf2:	231e      	movs	r3, #30
    4bf4:	18fb      	adds	r3, r7, r3
    4bf6:	881b      	ldrh	r3, [r3, #0]
    4bf8:	221e      	movs	r2, #30
    4bfa:	18ba      	adds	r2, r7, r2
    4bfc:	1c59      	adds	r1, r3, #1
    4bfe:	8011      	strh	r1, [r2, #0]
    4c00:	001a      	movs	r2, r3
    4c02:	68bb      	ldr	r3, [r7, #8]
    4c04:	189b      	adds	r3, r3, r2
    4c06:	2210      	movs	r2, #16
    4c08:	18ba      	adds	r2, r7, r2
    4c0a:	8812      	ldrh	r2, [r2, #0]
    4c0c:	b2d2      	uxtb	r2, r2
    4c0e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	795b      	ldrb	r3, [r3, #5]
    4c14:	2b01      	cmp	r3, #1
    4c16:	d110      	bne.n	4c3a <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    4c18:	231e      	movs	r3, #30
    4c1a:	18fb      	adds	r3, r7, r3
    4c1c:	881b      	ldrh	r3, [r3, #0]
    4c1e:	221e      	movs	r2, #30
    4c20:	18ba      	adds	r2, r7, r2
    4c22:	1c59      	adds	r1, r3, #1
    4c24:	8011      	strh	r1, [r2, #0]
    4c26:	001a      	movs	r2, r3
    4c28:	68bb      	ldr	r3, [r7, #8]
    4c2a:	189b      	adds	r3, r3, r2
    4c2c:	2210      	movs	r2, #16
    4c2e:	18ba      	adds	r2, r7, r2
    4c30:	8812      	ldrh	r2, [r2, #0]
    4c32:	0a12      	lsrs	r2, r2, #8
    4c34:	b292      	uxth	r2, r2
    4c36:	b2d2      	uxtb	r2, r2
    4c38:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4c3a:	1dbb      	adds	r3, r7, #6
    4c3c:	881b      	ldrh	r3, [r3, #0]
    4c3e:	1dba      	adds	r2, r7, #6
    4c40:	1e59      	subs	r1, r3, #1
    4c42:	8011      	strh	r1, [r2, #0]
    4c44:	2b00      	cmp	r3, #0
    4c46:	d1a3      	bne.n	4b90 <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
    4c48:	2300      	movs	r3, #0
}
    4c4a:	0018      	movs	r0, r3
    4c4c:	46bd      	mov	sp, r7
    4c4e:	b009      	add	sp, #36	; 0x24
    4c50:	bd90      	pop	{r4, r7, pc}
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	0000ffff 	.word	0x0000ffff
    4c58:	00004a73 	.word	0x00004a73

00004c5c <usart_is_syncing>:
{
    4c5c:	b580      	push	{r7, lr}
    4c5e:	b084      	sub	sp, #16
    4c60:	af00      	add	r7, sp, #0
    4c62:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4c6a:	68fb      	ldr	r3, [r7, #12]
    4c6c:	69db      	ldr	r3, [r3, #28]
    4c6e:	1e5a      	subs	r2, r3, #1
    4c70:	4193      	sbcs	r3, r2
    4c72:	b2db      	uxtb	r3, r3
}
    4c74:	0018      	movs	r0, r3
    4c76:	46bd      	mov	sp, r7
    4c78:	b004      	add	sp, #16
    4c7a:	bd80      	pop	{r7, pc}

00004c7c <_usart_wait_for_sync>:
{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b082      	sub	sp, #8
    4c80:	af00      	add	r7, sp, #0
    4c82:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4c84:	46c0      	nop			; (mov r8, r8)
    4c86:	687b      	ldr	r3, [r7, #4]
    4c88:	0018      	movs	r0, r3
    4c8a:	4b04      	ldr	r3, [pc, #16]	; (4c9c <_usart_wait_for_sync+0x20>)
    4c8c:	4798      	blx	r3
    4c8e:	1e03      	subs	r3, r0, #0
    4c90:	d1f9      	bne.n	4c86 <_usart_wait_for_sync+0xa>
}
    4c92:	46c0      	nop			; (mov r8, r8)
    4c94:	46bd      	mov	sp, r7
    4c96:	b002      	add	sp, #8
    4c98:	bd80      	pop	{r7, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	00004c5d 	.word	0x00004c5d

00004ca0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b088      	sub	sp, #32
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	1dfb      	adds	r3, r7, #7
    4caa:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    4cac:	1dfb      	adds	r3, r7, #7
    4cae:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    4cb0:	4ba3      	ldr	r3, [pc, #652]	; (4f40 <_usart_interrupt_handler+0x2a0>)
    4cb2:	0092      	lsls	r2, r2, #2
    4cb4:	58d3      	ldr	r3, [r2, r3]
    4cb6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4cb8:	69bb      	ldr	r3, [r7, #24]
    4cba:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    4cbc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4cbe:	69bb      	ldr	r3, [r7, #24]
    4cc0:	0018      	movs	r0, r3
    4cc2:	4ba0      	ldr	r3, [pc, #640]	; (4f44 <_usart_interrupt_handler+0x2a4>)
    4cc4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4cc6:	697b      	ldr	r3, [r7, #20]
    4cc8:	7e1b      	ldrb	r3, [r3, #24]
    4cca:	b2da      	uxtb	r2, r3
    4ccc:	2312      	movs	r3, #18
    4cce:	18fb      	adds	r3, r7, r3
    4cd0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    4cd2:	697b      	ldr	r3, [r7, #20]
    4cd4:	7d9b      	ldrb	r3, [r3, #22]
    4cd6:	b2db      	uxtb	r3, r3
    4cd8:	b29a      	uxth	r2, r3
    4cda:	2312      	movs	r3, #18
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	2112      	movs	r1, #18
    4ce0:	1879      	adds	r1, r7, r1
    4ce2:	8809      	ldrh	r1, [r1, #0]
    4ce4:	400a      	ands	r2, r1
    4ce6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    4ce8:	69bb      	ldr	r3, [r7, #24]
    4cea:	2230      	movs	r2, #48	; 0x30
    4cec:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    4cee:	69ba      	ldr	r2, [r7, #24]
    4cf0:	2131      	movs	r1, #49	; 0x31
    4cf2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    4cf4:	4013      	ands	r3, r2
    4cf6:	b2da      	uxtb	r2, r3
    4cf8:	2310      	movs	r3, #16
    4cfa:	18fb      	adds	r3, r7, r3
    4cfc:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4cfe:	2312      	movs	r3, #18
    4d00:	18fb      	adds	r3, r7, r3
    4d02:	881b      	ldrh	r3, [r3, #0]
    4d04:	2201      	movs	r2, #1
    4d06:	4013      	ands	r3, r2
    4d08:	d044      	beq.n	4d94 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    4d0a:	69bb      	ldr	r3, [r7, #24]
    4d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4d0e:	b29b      	uxth	r3, r3
    4d10:	2b00      	cmp	r3, #0
    4d12:	d03c      	beq.n	4d8e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d14:	69bb      	ldr	r3, [r7, #24]
    4d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d18:	781b      	ldrb	r3, [r3, #0]
    4d1a:	b2da      	uxtb	r2, r3
    4d1c:	231c      	movs	r3, #28
    4d1e:	18fb      	adds	r3, r7, r3
    4d20:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4d22:	69bb      	ldr	r3, [r7, #24]
    4d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d26:	1c5a      	adds	r2, r3, #1
    4d28:	69bb      	ldr	r3, [r7, #24]
    4d2a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4d2c:	69bb      	ldr	r3, [r7, #24]
    4d2e:	795b      	ldrb	r3, [r3, #5]
    4d30:	2b01      	cmp	r3, #1
    4d32:	d113      	bne.n	4d5c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4d34:	69bb      	ldr	r3, [r7, #24]
    4d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d38:	781b      	ldrb	r3, [r3, #0]
    4d3a:	b2db      	uxtb	r3, r3
    4d3c:	021b      	lsls	r3, r3, #8
    4d3e:	b21a      	sxth	r2, r3
    4d40:	231c      	movs	r3, #28
    4d42:	18fb      	adds	r3, r7, r3
    4d44:	2100      	movs	r1, #0
    4d46:	5e5b      	ldrsh	r3, [r3, r1]
    4d48:	4313      	orrs	r3, r2
    4d4a:	b21a      	sxth	r2, r3
    4d4c:	231c      	movs	r3, #28
    4d4e:	18fb      	adds	r3, r7, r3
    4d50:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4d52:	69bb      	ldr	r3, [r7, #24]
    4d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d56:	1c5a      	adds	r2, r3, #1
    4d58:	69bb      	ldr	r3, [r7, #24]
    4d5a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4d5c:	231c      	movs	r3, #28
    4d5e:	18fb      	adds	r3, r7, r3
    4d60:	881b      	ldrh	r3, [r3, #0]
    4d62:	05db      	lsls	r3, r3, #23
    4d64:	0ddb      	lsrs	r3, r3, #23
    4d66:	b29a      	uxth	r2, r3
    4d68:	697b      	ldr	r3, [r7, #20]
    4d6a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4d6c:	69bb      	ldr	r3, [r7, #24]
    4d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4d70:	b29b      	uxth	r3, r3
    4d72:	3b01      	subs	r3, #1
    4d74:	b29b      	uxth	r3, r3
    4d76:	69ba      	ldr	r2, [r7, #24]
    4d78:	1c19      	adds	r1, r3, #0
    4d7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	d109      	bne.n	4d94 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4d80:	697b      	ldr	r3, [r7, #20]
    4d82:	2201      	movs	r2, #1
    4d84:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4d86:	697b      	ldr	r3, [r7, #20]
    4d88:	2202      	movs	r2, #2
    4d8a:	759a      	strb	r2, [r3, #22]
    4d8c:	e002      	b.n	4d94 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4d8e:	697b      	ldr	r3, [r7, #20]
    4d90:	2201      	movs	r2, #1
    4d92:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4d94:	2312      	movs	r3, #18
    4d96:	18fb      	adds	r3, r7, r3
    4d98:	881b      	ldrh	r3, [r3, #0]
    4d9a:	2202      	movs	r2, #2
    4d9c:	4013      	ands	r3, r2
    4d9e:	d011      	beq.n	4dc4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4da0:	697b      	ldr	r3, [r7, #20]
    4da2:	2202      	movs	r2, #2
    4da4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    4da6:	69bb      	ldr	r3, [r7, #24]
    4da8:	2233      	movs	r2, #51	; 0x33
    4daa:	2100      	movs	r1, #0
    4dac:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4dae:	2310      	movs	r3, #16
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	881b      	ldrh	r3, [r3, #0]
    4db4:	2201      	movs	r2, #1
    4db6:	4013      	ands	r3, r2
    4db8:	d004      	beq.n	4dc4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4dba:	69bb      	ldr	r3, [r7, #24]
    4dbc:	68db      	ldr	r3, [r3, #12]
    4dbe:	69ba      	ldr	r2, [r7, #24]
    4dc0:	0010      	movs	r0, r2
    4dc2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4dc4:	2312      	movs	r3, #18
    4dc6:	18fb      	adds	r3, r7, r3
    4dc8:	881b      	ldrh	r3, [r3, #0]
    4dca:	2204      	movs	r2, #4
    4dcc:	4013      	ands	r3, r2
    4dce:	d100      	bne.n	4dd2 <_usart_interrupt_handler+0x132>
    4dd0:	e0bd      	b.n	4f4e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    4dd2:	69bb      	ldr	r3, [r7, #24]
    4dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4dd6:	b29b      	uxth	r3, r3
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d100      	bne.n	4dde <_usart_interrupt_handler+0x13e>
    4ddc:	e0b4      	b.n	4f48 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4dde:	697b      	ldr	r3, [r7, #20]
    4de0:	8b5b      	ldrh	r3, [r3, #26]
    4de2:	b29b      	uxth	r3, r3
    4de4:	b2da      	uxtb	r2, r3
    4de6:	231f      	movs	r3, #31
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	213f      	movs	r1, #63	; 0x3f
    4dec:	400a      	ands	r2, r1
    4dee:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4df0:	231f      	movs	r3, #31
    4df2:	18fb      	adds	r3, r7, r3
    4df4:	781b      	ldrb	r3, [r3, #0]
    4df6:	2208      	movs	r2, #8
    4df8:	4013      	ands	r3, r2
    4dfa:	d007      	beq.n	4e0c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4dfc:	231f      	movs	r3, #31
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	221f      	movs	r2, #31
    4e02:	18ba      	adds	r2, r7, r2
    4e04:	7812      	ldrb	r2, [r2, #0]
    4e06:	2108      	movs	r1, #8
    4e08:	438a      	bics	r2, r1
    4e0a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4e0c:	231f      	movs	r3, #31
    4e0e:	18fb      	adds	r3, r7, r3
    4e10:	781b      	ldrb	r3, [r3, #0]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d050      	beq.n	4eb8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4e16:	231f      	movs	r3, #31
    4e18:	18fb      	adds	r3, r7, r3
    4e1a:	781b      	ldrb	r3, [r3, #0]
    4e1c:	2202      	movs	r2, #2
    4e1e:	4013      	ands	r3, r2
    4e20:	d007      	beq.n	4e32 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4e22:	69bb      	ldr	r3, [r7, #24]
    4e24:	2232      	movs	r2, #50	; 0x32
    4e26:	211a      	movs	r1, #26
    4e28:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4e2a:	697b      	ldr	r3, [r7, #20]
    4e2c:	2202      	movs	r2, #2
    4e2e:	835a      	strh	r2, [r3, #26]
    4e30:	e036      	b.n	4ea0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4e32:	231f      	movs	r3, #31
    4e34:	18fb      	adds	r3, r7, r3
    4e36:	781b      	ldrb	r3, [r3, #0]
    4e38:	2204      	movs	r2, #4
    4e3a:	4013      	ands	r3, r2
    4e3c:	d007      	beq.n	4e4e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4e3e:	69bb      	ldr	r3, [r7, #24]
    4e40:	2232      	movs	r2, #50	; 0x32
    4e42:	211e      	movs	r1, #30
    4e44:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4e46:	697b      	ldr	r3, [r7, #20]
    4e48:	2204      	movs	r2, #4
    4e4a:	835a      	strh	r2, [r3, #26]
    4e4c:	e028      	b.n	4ea0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4e4e:	231f      	movs	r3, #31
    4e50:	18fb      	adds	r3, r7, r3
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	2201      	movs	r2, #1
    4e56:	4013      	ands	r3, r2
    4e58:	d007      	beq.n	4e6a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4e5a:	69bb      	ldr	r3, [r7, #24]
    4e5c:	2232      	movs	r2, #50	; 0x32
    4e5e:	2113      	movs	r1, #19
    4e60:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4e62:	697b      	ldr	r3, [r7, #20]
    4e64:	2201      	movs	r2, #1
    4e66:	835a      	strh	r2, [r3, #26]
    4e68:	e01a      	b.n	4ea0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4e6a:	231f      	movs	r3, #31
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	781b      	ldrb	r3, [r3, #0]
    4e70:	2210      	movs	r2, #16
    4e72:	4013      	ands	r3, r2
    4e74:	d007      	beq.n	4e86 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4e76:	69bb      	ldr	r3, [r7, #24]
    4e78:	2232      	movs	r2, #50	; 0x32
    4e7a:	2142      	movs	r1, #66	; 0x42
    4e7c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4e7e:	697b      	ldr	r3, [r7, #20]
    4e80:	2210      	movs	r2, #16
    4e82:	835a      	strh	r2, [r3, #26]
    4e84:	e00c      	b.n	4ea0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4e86:	231f      	movs	r3, #31
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	781b      	ldrb	r3, [r3, #0]
    4e8c:	2220      	movs	r2, #32
    4e8e:	4013      	ands	r3, r2
    4e90:	d006      	beq.n	4ea0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4e92:	69bb      	ldr	r3, [r7, #24]
    4e94:	2232      	movs	r2, #50	; 0x32
    4e96:	2141      	movs	r1, #65	; 0x41
    4e98:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4e9a:	697b      	ldr	r3, [r7, #20]
    4e9c:	2220      	movs	r2, #32
    4e9e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    4ea0:	2310      	movs	r3, #16
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	881b      	ldrh	r3, [r3, #0]
    4ea6:	2204      	movs	r2, #4
    4ea8:	4013      	ands	r3, r2
				if (callback_status
    4eaa:	d050      	beq.n	4f4e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4eac:	69bb      	ldr	r3, [r7, #24]
    4eae:	695b      	ldr	r3, [r3, #20]
    4eb0:	69ba      	ldr	r2, [r7, #24]
    4eb2:	0010      	movs	r0, r2
    4eb4:	4798      	blx	r3
    4eb6:	e04a      	b.n	4f4e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4eb8:	697b      	ldr	r3, [r7, #20]
    4eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4ebc:	b29a      	uxth	r2, r3
    4ebe:	230e      	movs	r3, #14
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	05d2      	lsls	r2, r2, #23
    4ec4:	0dd2      	lsrs	r2, r2, #23
    4ec6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4ec8:	69bb      	ldr	r3, [r7, #24]
    4eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ecc:	220e      	movs	r2, #14
    4ece:	18ba      	adds	r2, r7, r2
    4ed0:	8812      	ldrh	r2, [r2, #0]
    4ed2:	b2d2      	uxtb	r2, r2
    4ed4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4ed6:	69bb      	ldr	r3, [r7, #24]
    4ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4eda:	1c5a      	adds	r2, r3, #1
    4edc:	69bb      	ldr	r3, [r7, #24]
    4ede:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4ee0:	69bb      	ldr	r3, [r7, #24]
    4ee2:	795b      	ldrb	r3, [r3, #5]
    4ee4:	2b01      	cmp	r3, #1
    4ee6:	d10d      	bne.n	4f04 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4ee8:	69bb      	ldr	r3, [r7, #24]
    4eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4eec:	220e      	movs	r2, #14
    4eee:	18ba      	adds	r2, r7, r2
    4ef0:	8812      	ldrh	r2, [r2, #0]
    4ef2:	0a12      	lsrs	r2, r2, #8
    4ef4:	b292      	uxth	r2, r2
    4ef6:	b2d2      	uxtb	r2, r2
    4ef8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4efa:	69bb      	ldr	r3, [r7, #24]
    4efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4efe:	1c5a      	adds	r2, r3, #1
    4f00:	69bb      	ldr	r3, [r7, #24]
    4f02:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4f04:	69bb      	ldr	r3, [r7, #24]
    4f06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4f08:	b29b      	uxth	r3, r3
    4f0a:	3b01      	subs	r3, #1
    4f0c:	b29b      	uxth	r3, r3
    4f0e:	69ba      	ldr	r2, [r7, #24]
    4f10:	1c19      	adds	r1, r3, #0
    4f12:	8591      	strh	r1, [r2, #44]	; 0x2c
    4f14:	2b00      	cmp	r3, #0
    4f16:	d11a      	bne.n	4f4e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4f18:	697b      	ldr	r3, [r7, #20]
    4f1a:	2204      	movs	r2, #4
    4f1c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    4f1e:	69bb      	ldr	r3, [r7, #24]
    4f20:	2232      	movs	r2, #50	; 0x32
    4f22:	2100      	movs	r1, #0
    4f24:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    4f26:	2310      	movs	r3, #16
    4f28:	18fb      	adds	r3, r7, r3
    4f2a:	881b      	ldrh	r3, [r3, #0]
    4f2c:	2202      	movs	r2, #2
    4f2e:	4013      	ands	r3, r2
					if (callback_status
    4f30:	d00d      	beq.n	4f4e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4f32:	69bb      	ldr	r3, [r7, #24]
    4f34:	691b      	ldr	r3, [r3, #16]
    4f36:	69ba      	ldr	r2, [r7, #24]
    4f38:	0010      	movs	r0, r2
    4f3a:	4798      	blx	r3
    4f3c:	e007      	b.n	4f4e <_usart_interrupt_handler+0x2ae>
    4f3e:	46c0      	nop			; (mov r8, r8)
    4f40:	20000f50 	.word	0x20000f50
    4f44:	00004c7d 	.word	0x00004c7d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4f48:	697b      	ldr	r3, [r7, #20]
    4f4a:	2204      	movs	r2, #4
    4f4c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4f4e:	2312      	movs	r3, #18
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	881b      	ldrh	r3, [r3, #0]
    4f54:	2210      	movs	r2, #16
    4f56:	4013      	ands	r3, r2
    4f58:	d010      	beq.n	4f7c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4f5a:	697b      	ldr	r3, [r7, #20]
    4f5c:	2210      	movs	r2, #16
    4f5e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4f60:	697b      	ldr	r3, [r7, #20]
    4f62:	2210      	movs	r2, #16
    4f64:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4f66:	2310      	movs	r3, #16
    4f68:	18fb      	adds	r3, r7, r3
    4f6a:	881b      	ldrh	r3, [r3, #0]
    4f6c:	2210      	movs	r2, #16
    4f6e:	4013      	ands	r3, r2
    4f70:	d004      	beq.n	4f7c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4f72:	69bb      	ldr	r3, [r7, #24]
    4f74:	69db      	ldr	r3, [r3, #28]
    4f76:	69ba      	ldr	r2, [r7, #24]
    4f78:	0010      	movs	r0, r2
    4f7a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4f7c:	2312      	movs	r3, #18
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	881b      	ldrh	r3, [r3, #0]
    4f82:	2220      	movs	r2, #32
    4f84:	4013      	ands	r3, r2
    4f86:	d010      	beq.n	4faa <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	2220      	movs	r2, #32
    4f8c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4f8e:	697b      	ldr	r3, [r7, #20]
    4f90:	2220      	movs	r2, #32
    4f92:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4f94:	2310      	movs	r3, #16
    4f96:	18fb      	adds	r3, r7, r3
    4f98:	881b      	ldrh	r3, [r3, #0]
    4f9a:	2208      	movs	r2, #8
    4f9c:	4013      	ands	r3, r2
    4f9e:	d004      	beq.n	4faa <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4fa0:	69bb      	ldr	r3, [r7, #24]
    4fa2:	699b      	ldr	r3, [r3, #24]
    4fa4:	69ba      	ldr	r2, [r7, #24]
    4fa6:	0010      	movs	r0, r2
    4fa8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4faa:	2312      	movs	r3, #18
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	881b      	ldrh	r3, [r3, #0]
    4fb0:	2208      	movs	r2, #8
    4fb2:	4013      	ands	r3, r2
    4fb4:	d010      	beq.n	4fd8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4fb6:	697b      	ldr	r3, [r7, #20]
    4fb8:	2208      	movs	r2, #8
    4fba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4fbc:	697b      	ldr	r3, [r7, #20]
    4fbe:	2208      	movs	r2, #8
    4fc0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4fc2:	2310      	movs	r3, #16
    4fc4:	18fb      	adds	r3, r7, r3
    4fc6:	881b      	ldrh	r3, [r3, #0]
    4fc8:	2220      	movs	r2, #32
    4fca:	4013      	ands	r3, r2
    4fcc:	d004      	beq.n	4fd8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4fce:	69bb      	ldr	r3, [r7, #24]
    4fd0:	6a1b      	ldr	r3, [r3, #32]
    4fd2:	69ba      	ldr	r2, [r7, #24]
    4fd4:	0010      	movs	r0, r2
    4fd6:	4798      	blx	r3
		}
	}
#endif
}
    4fd8:	46c0      	nop			; (mov r8, r8)
    4fda:	46bd      	mov	sp, r7
    4fdc:	b008      	add	sp, #32
    4fde:	bd80      	pop	{r7, pc}

00004fe0 <system_gclk_gen_get_config_defaults>:
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	b082      	sub	sp, #8
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    4fe8:	687b      	ldr	r3, [r7, #4]
    4fea:	2201      	movs	r2, #1
    4fec:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4fee:	687b      	ldr	r3, [r7, #4]
    4ff0:	2200      	movs	r2, #0
    4ff2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	2206      	movs	r2, #6
    4ff8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	2200      	movs	r2, #0
    4ffe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5000:	687b      	ldr	r3, [r7, #4]
    5002:	2200      	movs	r2, #0
    5004:	725a      	strb	r2, [r3, #9]
}
    5006:	46c0      	nop			; (mov r8, r8)
    5008:	46bd      	mov	sp, r7
    500a:	b002      	add	sp, #8
    500c:	bd80      	pop	{r7, pc}

0000500e <system_gclk_chan_get_config_defaults>:
{
    500e:	b580      	push	{r7, lr}
    5010:	b082      	sub	sp, #8
    5012:	af00      	add	r7, sp, #0
    5014:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	2200      	movs	r2, #0
    501a:	701a      	strb	r2, [r3, #0]
}
    501c:	46c0      	nop			; (mov r8, r8)
    501e:	46bd      	mov	sp, r7
    5020:	b002      	add	sp, #8
    5022:	bd80      	pop	{r7, pc}

00005024 <system_clock_source_xosc32k_get_config_defaults>:
{
    5024:	b580      	push	{r7, lr}
    5026:	b082      	sub	sp, #8
    5028:	af00      	add	r7, sp, #0
    502a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	2200      	movs	r2, #0
    5030:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	2202      	movs	r2, #2
    5036:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	2280      	movs	r2, #128	; 0x80
    503c:	0212      	lsls	r2, r2, #8
    503e:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
    5040:	687b      	ldr	r3, [r7, #4]
    5042:	2200      	movs	r2, #0
    5044:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	2201      	movs	r2, #1
    504a:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	2200      	movs	r2, #0
    5050:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
    5052:	687b      	ldr	r3, [r7, #4]
    5054:	2201      	movs	r2, #1
    5056:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	2200      	movs	r2, #0
    505c:	729a      	strb	r2, [r3, #10]
}
    505e:	46c0      	nop			; (mov r8, r8)
    5060:	46bd      	mov	sp, r7
    5062:	b002      	add	sp, #8
    5064:	bd80      	pop	{r7, pc}

00005066 <system_clock_source_osc16m_get_config_defaults>:
{
    5066:	b580      	push	{r7, lr}
    5068:	b082      	sub	sp, #8
    506a:	af00      	add	r7, sp, #0
    506c:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	2200      	movs	r2, #0
    5072:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	2200      	movs	r2, #0
    5078:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	2201      	movs	r2, #1
    507e:	709a      	strb	r2, [r3, #2]
}
    5080:	46c0      	nop			; (mov r8, r8)
    5082:	46bd      	mov	sp, r7
    5084:	b002      	add	sp, #8
    5086:	bd80      	pop	{r7, pc}

00005088 <system_clock_source_dfll_get_config_defaults>:
{
    5088:	b580      	push	{r7, lr}
    508a:	b082      	sub	sp, #8
    508c:	af00      	add	r7, sp, #0
    508e:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5090:	687b      	ldr	r3, [r7, #4]
    5092:	2200      	movs	r2, #0
    5094:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	2200      	movs	r2, #0
    509a:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    509c:	687b      	ldr	r3, [r7, #4]
    509e:	2200      	movs	r2, #0
    50a0:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    50a2:	687b      	ldr	r3, [r7, #4]
    50a4:	2200      	movs	r2, #0
    50a6:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    50a8:	687b      	ldr	r3, [r7, #4]
    50aa:	2200      	movs	r2, #0
    50ac:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	2201      	movs	r2, #1
    50b2:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
    50b4:	687b      	ldr	r3, [r7, #4]
    50b6:	2200      	movs	r2, #0
    50b8:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    50ba:	687b      	ldr	r3, [r7, #4]
    50bc:	2207      	movs	r2, #7
    50be:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	223f      	movs	r2, #63	; 0x3f
    50c4:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	2201      	movs	r2, #1
    50ca:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	2201      	movs	r2, #1
    50d0:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
    50d2:	687b      	ldr	r3, [r7, #4]
    50d4:	220c      	movs	r2, #12
    50d6:	825a      	strh	r2, [r3, #18]
}
    50d8:	46c0      	nop			; (mov r8, r8)
    50da:	46bd      	mov	sp, r7
    50dc:	b002      	add	sp, #8
    50de:	bd80      	pop	{r7, pc}

000050e0 <system_main_clock_set_failure_detect>:
{
    50e0:	b580      	push	{r7, lr}
    50e2:	b082      	sub	sp, #8
    50e4:	af00      	add	r7, sp, #0
    50e6:	0002      	movs	r2, r0
    50e8:	1dfb      	adds	r3, r7, #7
    50ea:	701a      	strb	r2, [r3, #0]
}
    50ec:	46c0      	nop			; (mov r8, r8)
    50ee:	46bd      	mov	sp, r7
    50f0:	b002      	add	sp, #8
    50f2:	bd80      	pop	{r7, pc}

000050f4 <system_cpu_clock_set_divider>:
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b082      	sub	sp, #8
    50f8:	af00      	add	r7, sp, #0
    50fa:	0002      	movs	r2, r0
    50fc:	1dfb      	adds	r3, r7, #7
    50fe:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    5100:	4a05      	ldr	r2, [pc, #20]	; (5118 <system_cpu_clock_set_divider+0x24>)
    5102:	1dfb      	adds	r3, r7, #7
    5104:	781b      	ldrb	r3, [r3, #0]
    5106:	2101      	movs	r1, #1
    5108:	4099      	lsls	r1, r3
    510a:	000b      	movs	r3, r1
    510c:	b2db      	uxtb	r3, r3
    510e:	7113      	strb	r3, [r2, #4]
}
    5110:	46c0      	nop			; (mov r8, r8)
    5112:	46bd      	mov	sp, r7
    5114:	b002      	add	sp, #8
    5116:	bd80      	pop	{r7, pc}
    5118:	40000400 	.word	0x40000400

0000511c <system_low_power_clock_set_divider>:
{
    511c:	b580      	push	{r7, lr}
    511e:	b082      	sub	sp, #8
    5120:	af00      	add	r7, sp, #0
    5122:	0002      	movs	r2, r0
    5124:	1dfb      	adds	r3, r7, #7
    5126:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    5128:	4a05      	ldr	r2, [pc, #20]	; (5140 <system_low_power_clock_set_divider+0x24>)
    512a:	1dfb      	adds	r3, r7, #7
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2101      	movs	r1, #1
    5130:	4099      	lsls	r1, r3
    5132:	000b      	movs	r3, r1
    5134:	b2db      	uxtb	r3, r3
    5136:	7153      	strb	r3, [r2, #5]
}
    5138:	46c0      	nop			; (mov r8, r8)
    513a:	46bd      	mov	sp, r7
    513c:	b002      	add	sp, #8
    513e:	bd80      	pop	{r7, pc}
    5140:	40000400 	.word	0x40000400

00005144 <system_backup_clock_set_divider>:
{
    5144:	b580      	push	{r7, lr}
    5146:	b082      	sub	sp, #8
    5148:	af00      	add	r7, sp, #0
    514a:	0002      	movs	r2, r0
    514c:	1dfb      	adds	r3, r7, #7
    514e:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    5150:	4a05      	ldr	r2, [pc, #20]	; (5168 <system_backup_clock_set_divider+0x24>)
    5152:	1dfb      	adds	r3, r7, #7
    5154:	781b      	ldrb	r3, [r3, #0]
    5156:	2101      	movs	r1, #1
    5158:	4099      	lsls	r1, r3
    515a:	000b      	movs	r3, r1
    515c:	b2db      	uxtb	r3, r3
    515e:	7193      	strb	r3, [r2, #6]
}
    5160:	46c0      	nop			; (mov r8, r8)
    5162:	46bd      	mov	sp, r7
    5164:	b002      	add	sp, #8
    5166:	bd80      	pop	{r7, pc}
    5168:	40000400 	.word	0x40000400

0000516c <system_cpu_clock_get_hz>:
{
    516c:	b580      	push	{r7, lr}
    516e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    5170:	2000      	movs	r0, #0
    5172:	4b07      	ldr	r3, [pc, #28]	; (5190 <system_cpu_clock_get_hz+0x24>)
    5174:	4798      	blx	r3
    5176:	0002      	movs	r2, r0
    5178:	4b06      	ldr	r3, [pc, #24]	; (5194 <system_cpu_clock_get_hz+0x28>)
    517a:	791b      	ldrb	r3, [r3, #4]
    517c:	b2db      	uxtb	r3, r3
    517e:	0019      	movs	r1, r3
    5180:	4b05      	ldr	r3, [pc, #20]	; (5198 <system_cpu_clock_get_hz+0x2c>)
    5182:	0010      	movs	r0, r2
    5184:	4798      	blx	r3
    5186:	0003      	movs	r3, r0
}
    5188:	0018      	movs	r0, r3
    518a:	46bd      	mov	sp, r7
    518c:	bd80      	pop	{r7, pc}
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	00005da9 	.word	0x00005da9
    5194:	40000400 	.word	0x40000400
    5198:	0000e3a1 	.word	0x0000e3a1

0000519c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    519c:	b580      	push	{r7, lr}
    519e:	b082      	sub	sp, #8
    51a0:	af00      	add	r7, sp, #0
    51a2:	0002      	movs	r2, r0
    51a4:	1dfb      	adds	r3, r7, #7
    51a6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    51a8:	4a08      	ldr	r2, [pc, #32]	; (51cc <system_flash_set_waitstates+0x30>)
    51aa:	1dfb      	adds	r3, r7, #7
    51ac:	781b      	ldrb	r3, [r3, #0]
    51ae:	210f      	movs	r1, #15
    51b0:	400b      	ands	r3, r1
    51b2:	b2d9      	uxtb	r1, r3
    51b4:	6853      	ldr	r3, [r2, #4]
    51b6:	200f      	movs	r0, #15
    51b8:	4001      	ands	r1, r0
    51ba:	0049      	lsls	r1, r1, #1
    51bc:	201e      	movs	r0, #30
    51be:	4383      	bics	r3, r0
    51c0:	430b      	orrs	r3, r1
    51c2:	6053      	str	r3, [r2, #4]
}
    51c4:	46c0      	nop			; (mov r8, r8)
    51c6:	46bd      	mov	sp, r7
    51c8:	b002      	add	sp, #8
    51ca:	bd80      	pop	{r7, pc}
    51cc:	41004000 	.word	0x41004000

000051d0 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    51d0:	b580      	push	{r7, lr}
    51d2:	b082      	sub	sp, #8
    51d4:	af00      	add	r7, sp, #0
    51d6:	0002      	movs	r2, r0
    51d8:	1dfb      	adds	r3, r7, #7
    51da:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    51dc:	2380      	movs	r3, #128	; 0x80
    51de:	05db      	lsls	r3, r3, #23
    51e0:	789b      	ldrb	r3, [r3, #2]
    51e2:	b2db      	uxtb	r3, r3
    51e4:	1dfa      	adds	r2, r7, #7
    51e6:	7812      	ldrb	r2, [r2, #0]
    51e8:	429a      	cmp	r2, r3
    51ea:	d101      	bne.n	51f0 <system_switch_performance_level+0x20>
		return STATUS_OK;
    51ec:	2300      	movs	r3, #0
    51ee:	e019      	b.n	5224 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    51f0:	2380      	movs	r3, #128	; 0x80
    51f2:	05db      	lsls	r3, r3, #23
    51f4:	789b      	ldrb	r3, [r3, #2]
    51f6:	b2db      	uxtb	r3, r3
    51f8:	b25b      	sxtb	r3, r3
    51fa:	2b00      	cmp	r3, #0
    51fc:	da01      	bge.n	5202 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    51fe:	2317      	movs	r3, #23
    5200:	e010      	b.n	5224 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5202:	2380      	movs	r3, #128	; 0x80
    5204:	05db      	lsls	r3, r3, #23
    5206:	2201      	movs	r2, #1
    5208:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    520a:	2380      	movs	r3, #128	; 0x80
    520c:	05db      	lsls	r3, r3, #23
    520e:	1dfa      	adds	r2, r7, #7
    5210:	7812      	ldrb	r2, [r2, #0]
    5212:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    5214:	46c0      	nop			; (mov r8, r8)
    5216:	2380      	movs	r3, #128	; 0x80
    5218:	05db      	lsls	r3, r3, #23
    521a:	799b      	ldrb	r3, [r3, #6]
    521c:	b2db      	uxtb	r3, r3
    521e:	2b00      	cmp	r3, #0
    5220:	d0f9      	beq.n	5216 <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    5222:	2300      	movs	r3, #0
}
    5224:	0018      	movs	r0, r3
    5226:	46bd      	mov	sp, r7
    5228:	b002      	add	sp, #8
    522a:	bd80      	pop	{r7, pc}

0000522c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    522c:	b580      	push	{r7, lr}
    522e:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5230:	46c0      	nop			; (mov r8, r8)
    5232:	4b04      	ldr	r3, [pc, #16]	; (5244 <_system_dfll_wait_for_sync+0x18>)
    5234:	68da      	ldr	r2, [r3, #12]
    5236:	2380      	movs	r3, #128	; 0x80
    5238:	005b      	lsls	r3, r3, #1
    523a:	4013      	ands	r3, r2
    523c:	d0f9      	beq.n	5232 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	46bd      	mov	sp, r7
    5242:	bd80      	pop	{r7, pc}
    5244:	40000c00 	.word	0x40000c00

00005248 <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
    5248:	b580      	push	{r7, lr}
    524a:	b084      	sub	sp, #16
    524c:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    524e:	1d3b      	adds	r3, r7, #4
    5250:	0018      	movs	r0, r3
    5252:	4b1e      	ldr	r3, [pc, #120]	; (52cc <_system_clock_source_osc16m_freq_sel+0x84>)
    5254:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    5256:	1d3b      	adds	r3, r7, #4
    5258:	2203      	movs	r2, #3
    525a:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    525c:	1d3b      	adds	r3, r7, #4
    525e:	0019      	movs	r1, r3
    5260:	2000      	movs	r0, #0
    5262:	4b1b      	ldr	r3, [pc, #108]	; (52d0 <_system_clock_source_osc16m_freq_sel+0x88>)
    5264:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    5266:	2006      	movs	r0, #6
    5268:	4b1a      	ldr	r3, [pc, #104]	; (52d4 <_system_clock_source_osc16m_freq_sel+0x8c>)
    526a:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
    526c:	003b      	movs	r3, r7
    526e:	0018      	movs	r0, r3
    5270:	4b19      	ldr	r3, [pc, #100]	; (52d8 <_system_clock_source_osc16m_freq_sel+0x90>)
    5272:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    5274:	003b      	movs	r3, r7
    5276:	2201      	movs	r2, #1
    5278:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
    527a:	003b      	movs	r3, r7
    527c:	2200      	movs	r2, #0
    527e:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    5280:	003b      	movs	r3, r7
    5282:	2200      	movs	r2, #0
    5284:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    5286:	003b      	movs	r3, r7
    5288:	0018      	movs	r0, r3
    528a:	4b14      	ldr	r3, [pc, #80]	; (52dc <_system_clock_source_osc16m_freq_sel+0x94>)
    528c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    528e:	2006      	movs	r0, #6
    5290:	4b13      	ldr	r3, [pc, #76]	; (52e0 <_system_clock_source_osc16m_freq_sel+0x98>)
    5292:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    5294:	46c0      	nop			; (mov r8, r8)
    5296:	2006      	movs	r0, #6
    5298:	4b12      	ldr	r3, [pc, #72]	; (52e4 <_system_clock_source_osc16m_freq_sel+0x9c>)
    529a:	4798      	blx	r3
    529c:	0003      	movs	r3, r0
    529e:	001a      	movs	r2, r3
    52a0:	2301      	movs	r3, #1
    52a2:	4053      	eors	r3, r2
    52a4:	b2db      	uxtb	r3, r3
    52a6:	2b00      	cmp	r3, #0
    52a8:	d1f5      	bne.n	5296 <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    52aa:	1d3b      	adds	r3, r7, #4
    52ac:	0018      	movs	r0, r3
    52ae:	4b07      	ldr	r3, [pc, #28]	; (52cc <_system_clock_source_osc16m_freq_sel+0x84>)
    52b0:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
    52b2:	1d3b      	adds	r3, r7, #4
    52b4:	2206      	movs	r2, #6
    52b6:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    52b8:	1d3b      	adds	r3, r7, #4
    52ba:	0019      	movs	r1, r3
    52bc:	2000      	movs	r0, #0
    52be:	4b04      	ldr	r3, [pc, #16]	; (52d0 <_system_clock_source_osc16m_freq_sel+0x88>)
    52c0:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
	}
}
    52c2:	46c0      	nop			; (mov r8, r8)
    52c4:	46bd      	mov	sp, r7
    52c6:	b004      	add	sp, #16
    52c8:	bd80      	pop	{r7, pc}
    52ca:	46c0      	nop			; (mov r8, r8)
    52cc:	00004fe1 	.word	0x00004fe1
    52d0:	00005c3d 	.word	0x00005c3d
    52d4:	00005701 	.word	0x00005701
    52d8:	00005067 	.word	0x00005067
    52dc:	000053ed 	.word	0x000053ed
    52e0:	00005641 	.word	0x00005641
    52e4:	000057ad 	.word	0x000057ad

000052e8 <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    52e8:	b580      	push	{r7, lr}
    52ea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    52ec:	4b0c      	ldr	r3, [pc, #48]	; (5320 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52ee:	2202      	movs	r2, #2
    52f0:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    52f2:	4b0c      	ldr	r3, [pc, #48]	; (5324 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    52f4:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    52f6:	4a0a      	ldr	r2, [pc, #40]	; (5320 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    52f8:	4b0b      	ldr	r3, [pc, #44]	; (5328 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    52fa:	689b      	ldr	r3, [r3, #8]
    52fc:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    52fe:	4a08      	ldr	r2, [pc, #32]	; (5320 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5300:	4b09      	ldr	r3, [pc, #36]	; (5328 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5302:	685b      	ldr	r3, [r3, #4]
    5304:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    5306:	4b06      	ldr	r3, [pc, #24]	; (5320 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5308:	2200      	movs	r2, #0
    530a:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    530c:	4b05      	ldr	r3, [pc, #20]	; (5324 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    530e:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5310:	4a03      	ldr	r2, [pc, #12]	; (5320 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5312:	4b05      	ldr	r3, [pc, #20]	; (5328 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	b29b      	uxth	r3, r3
    5318:	8313      	strh	r3, [r2, #24]
}
    531a:	46c0      	nop			; (mov r8, r8)
    531c:	46bd      	mov	sp, r7
    531e:	bd80      	pop	{r7, pc}
    5320:	40000c00 	.word	0x40000c00
    5324:	0000522d 	.word	0x0000522d
    5328:	20000a70 	.word	0x20000a70

0000532c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    532c:	b580      	push	{r7, lr}
    532e:	b082      	sub	sp, #8
    5330:	af00      	add	r7, sp, #0
    5332:	0002      	movs	r2, r0
    5334:	1dfb      	adds	r3, r7, #7
    5336:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5338:	1dfb      	adds	r3, r7, #7
    533a:	781b      	ldrb	r3, [r3, #0]
    533c:	2b08      	cmp	r3, #8
    533e:	d841      	bhi.n	53c4 <system_clock_source_get_hz+0x98>
    5340:	009a      	lsls	r2, r3, #2
    5342:	4b23      	ldr	r3, [pc, #140]	; (53d0 <system_clock_source_get_hz+0xa4>)
    5344:	18d3      	adds	r3, r2, r3
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    534a:	4b22      	ldr	r3, [pc, #136]	; (53d4 <system_clock_source_get_hz+0xa8>)
    534c:	691b      	ldr	r3, [r3, #16]
    534e:	e03a      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    5350:	4b21      	ldr	r3, [pc, #132]	; (53d8 <system_clock_source_get_hz+0xac>)
    5352:	7d1b      	ldrb	r3, [r3, #20]
    5354:	071b      	lsls	r3, r3, #28
    5356:	0f9b      	lsrs	r3, r3, #30
    5358:	b2db      	uxtb	r3, r3
    535a:	3301      	adds	r3, #1
    535c:	001a      	movs	r2, r3
    535e:	4b1f      	ldr	r3, [pc, #124]	; (53dc <system_clock_source_get_hz+0xb0>)
    5360:	4353      	muls	r3, r2
    5362:	e030      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5364:	2380      	movs	r3, #128	; 0x80
    5366:	021b      	lsls	r3, r3, #8
    5368:	e02d      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    536a:	2380      	movs	r3, #128	; 0x80
    536c:	021b      	lsls	r3, r3, #8
    536e:	e02a      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5370:	4b18      	ldr	r3, [pc, #96]	; (53d4 <system_clock_source_get_hz+0xa8>)
    5372:	695b      	ldr	r3, [r3, #20]
    5374:	e027      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5376:	4b17      	ldr	r3, [pc, #92]	; (53d4 <system_clock_source_get_hz+0xa8>)
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	2202      	movs	r2, #2
    537c:	4013      	ands	r3, r2
    537e:	d101      	bne.n	5384 <system_clock_source_get_hz+0x58>
			return 0;
    5380:	2300      	movs	r3, #0
    5382:	e020      	b.n	53c6 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5384:	4b16      	ldr	r3, [pc, #88]	; (53e0 <system_clock_source_get_hz+0xb4>)
    5386:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    5388:	4b12      	ldr	r3, [pc, #72]	; (53d4 <system_clock_source_get_hz+0xa8>)
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	2204      	movs	r2, #4
    538e:	4013      	ands	r3, r2
    5390:	d009      	beq.n	53a6 <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    5392:	2000      	movs	r0, #0
    5394:	4b13      	ldr	r3, [pc, #76]	; (53e4 <system_clock_source_get_hz+0xb8>)
    5396:	4798      	blx	r3
    5398:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    539a:	4b0e      	ldr	r3, [pc, #56]	; (53d4 <system_clock_source_get_hz+0xa8>)
    539c:	689b      	ldr	r3, [r3, #8]
    539e:	041b      	lsls	r3, r3, #16
    53a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    53a2:	4353      	muls	r3, r2
    53a4:	e00f      	b.n	53c6 <system_clock_source_get_hz+0x9a>
		}

		return 48000000UL;
    53a6:	4b10      	ldr	r3, [pc, #64]	; (53e8 <system_clock_source_get_hz+0xbc>)
    53a8:	e00d      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    53aa:	4a0b      	ldr	r2, [pc, #44]	; (53d8 <system_clock_source_get_hz+0xac>)
    53ac:	2328      	movs	r3, #40	; 0x28
    53ae:	5cd3      	ldrb	r3, [r2, r3]
    53b0:	b2db      	uxtb	r3, r3
    53b2:	001a      	movs	r2, r3
    53b4:	2302      	movs	r3, #2
    53b6:	4013      	ands	r3, r2
    53b8:	d101      	bne.n	53be <system_clock_source_get_hz+0x92>
			return 0;
    53ba:	2300      	movs	r3, #0
    53bc:	e003      	b.n	53c6 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    53be:	4b05      	ldr	r3, [pc, #20]	; (53d4 <system_clock_source_get_hz+0xa8>)
    53c0:	68db      	ldr	r3, [r3, #12]
    53c2:	e000      	b.n	53c6 <system_clock_source_get_hz+0x9a>

	default:
		return 0;
    53c4:	2300      	movs	r3, #0
	}
}
    53c6:	0018      	movs	r0, r3
    53c8:	46bd      	mov	sp, r7
    53ca:	b002      	add	sp, #8
    53cc:	bd80      	pop	{r7, pc}
    53ce:	46c0      	nop			; (mov r8, r8)
    53d0:	00016534 	.word	0x00016534
    53d4:	20000a70 	.word	0x20000a70
    53d8:	40000c00 	.word	0x40000c00
    53dc:	003d0900 	.word	0x003d0900
    53e0:	0000522d 	.word	0x0000522d
    53e4:	00005f59 	.word	0x00005f59
    53e8:	02dc6c00 	.word	0x02dc6c00

000053ec <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    53ec:	b580      	push	{r7, lr}
    53ee:	b084      	sub	sp, #16
    53f0:	af00      	add	r7, sp, #0
    53f2:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    53f4:	4a1c      	ldr	r2, [pc, #112]	; (5468 <system_clock_source_osc16m_set_config+0x7c>)
    53f6:	230c      	movs	r3, #12
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	7d12      	ldrb	r2, [r2, #20]
    53fc:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
    53fe:	687b      	ldr	r3, [r7, #4]
    5400:	781b      	ldrb	r3, [r3, #0]
    5402:	1c1a      	adds	r2, r3, #0
    5404:	2303      	movs	r3, #3
    5406:	4013      	ands	r3, r2
    5408:	b2da      	uxtb	r2, r3
    540a:	230c      	movs	r3, #12
    540c:	18fb      	adds	r3, r7, r3
    540e:	2103      	movs	r1, #3
    5410:	400a      	ands	r2, r1
    5412:	0090      	lsls	r0, r2, #2
    5414:	781a      	ldrb	r2, [r3, #0]
    5416:	210c      	movs	r1, #12
    5418:	438a      	bics	r2, r1
    541a:	1c11      	adds	r1, r2, #0
    541c:	1c02      	adds	r2, r0, #0
    541e:	430a      	orrs	r2, r1
    5420:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	789a      	ldrb	r2, [r3, #2]
    5426:	230c      	movs	r3, #12
    5428:	18fb      	adds	r3, r7, r3
    542a:	01d0      	lsls	r0, r2, #7
    542c:	781a      	ldrb	r2, [r3, #0]
    542e:	217f      	movs	r1, #127	; 0x7f
    5430:	400a      	ands	r2, r1
    5432:	1c11      	adds	r1, r2, #0
    5434:	1c02      	adds	r2, r0, #0
    5436:	430a      	orrs	r2, r1
    5438:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    543a:	687b      	ldr	r3, [r7, #4]
    543c:	785a      	ldrb	r2, [r3, #1]
    543e:	230c      	movs	r3, #12
    5440:	18fb      	adds	r3, r7, r3
    5442:	2101      	movs	r1, #1
    5444:	400a      	ands	r2, r1
    5446:	0190      	lsls	r0, r2, #6
    5448:	781a      	ldrb	r2, [r3, #0]
    544a:	2140      	movs	r1, #64	; 0x40
    544c:	438a      	bics	r2, r1
    544e:	1c11      	adds	r1, r2, #0
    5450:	1c02      	adds	r2, r0, #0
    5452:	430a      	orrs	r2, r1
    5454:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
    5456:	4a04      	ldr	r2, [pc, #16]	; (5468 <system_clock_source_osc16m_set_config+0x7c>)
    5458:	230c      	movs	r3, #12
    545a:	18fb      	adds	r3, r7, r3
    545c:	781b      	ldrb	r3, [r3, #0]
    545e:	7513      	strb	r3, [r2, #20]
}
    5460:	46c0      	nop			; (mov r8, r8)
    5462:	46bd      	mov	sp, r7
    5464:	b004      	add	sp, #16
    5466:	bd80      	pop	{r7, pc}
    5468:	40000c00 	.word	0x40000c00

0000546c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    546c:	b580      	push	{r7, lr}
    546e:	b084      	sub	sp, #16
    5470:	af00      	add	r7, sp, #0
    5472:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    5474:	4b3a      	ldr	r3, [pc, #232]	; (5560 <system_clock_source_xosc32k_set_config+0xf4>)
    5476:	695b      	ldr	r3, [r3, #20]
    5478:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	785b      	ldrb	r3, [r3, #1]
    547e:	1c1a      	adds	r2, r3, #0
    5480:	2307      	movs	r3, #7
    5482:	4013      	ands	r3, r2
    5484:	b2da      	uxtb	r2, r3
    5486:	230d      	movs	r3, #13
    5488:	18fb      	adds	r3, r7, r3
    548a:	2107      	movs	r1, #7
    548c:	400a      	ands	r2, r1
    548e:	0010      	movs	r0, r2
    5490:	781a      	ldrb	r2, [r3, #0]
    5492:	2107      	movs	r1, #7
    5494:	438a      	bics	r2, r1
    5496:	1c11      	adds	r1, r2, #0
    5498:	1c02      	adds	r2, r0, #0
    549a:	430a      	orrs	r2, r1
    549c:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	781b      	ldrb	r3, [r3, #0]
    54a2:	2b00      	cmp	r3, #0
    54a4:	d106      	bne.n	54b4 <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
    54a6:	230c      	movs	r3, #12
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	781a      	ldrb	r2, [r3, #0]
    54ac:	2104      	movs	r1, #4
    54ae:	430a      	orrs	r2, r1
    54b0:	701a      	strb	r2, [r3, #0]
    54b2:	e005      	b.n	54c0 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    54b4:	230c      	movs	r3, #12
    54b6:	18fb      	adds	r3, r7, r3
    54b8:	781a      	ldrb	r2, [r3, #0]
    54ba:	2104      	movs	r1, #4
    54bc:	438a      	bics	r2, r1
    54be:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	789a      	ldrb	r2, [r3, #2]
    54c4:	230c      	movs	r3, #12
    54c6:	18fb      	adds	r3, r7, r3
    54c8:	2101      	movs	r1, #1
    54ca:	400a      	ands	r2, r1
    54cc:	0110      	lsls	r0, r2, #4
    54ce:	781a      	ldrb	r2, [r3, #0]
    54d0:	2110      	movs	r1, #16
    54d2:	438a      	bics	r2, r1
    54d4:	1c11      	adds	r1, r2, #0
    54d6:	1c02      	adds	r2, r0, #0
    54d8:	430a      	orrs	r2, r1
    54da:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	78da      	ldrb	r2, [r3, #3]
    54e0:	230c      	movs	r3, #12
    54e2:	18fb      	adds	r3, r7, r3
    54e4:	2101      	movs	r1, #1
    54e6:	400a      	ands	r2, r1
    54e8:	00d0      	lsls	r0, r2, #3
    54ea:	781a      	ldrb	r2, [r3, #0]
    54ec:	2108      	movs	r1, #8
    54ee:	438a      	bics	r2, r1
    54f0:	1c11      	adds	r1, r2, #0
    54f2:	1c02      	adds	r2, r0, #0
    54f4:	430a      	orrs	r2, r1
    54f6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	7a5a      	ldrb	r2, [r3, #9]
    54fc:	230c      	movs	r3, #12
    54fe:	18fb      	adds	r3, r7, r3
    5500:	01d0      	lsls	r0, r2, #7
    5502:	781a      	ldrb	r2, [r3, #0]
    5504:	217f      	movs	r1, #127	; 0x7f
    5506:	400a      	ands	r2, r1
    5508:	1c11      	adds	r1, r2, #0
    550a:	1c02      	adds	r2, r0, #0
    550c:	430a      	orrs	r2, r1
    550e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5510:	687b      	ldr	r3, [r7, #4]
    5512:	7a1a      	ldrb	r2, [r3, #8]
    5514:	230c      	movs	r3, #12
    5516:	18fb      	adds	r3, r7, r3
    5518:	2101      	movs	r1, #1
    551a:	400a      	ands	r2, r1
    551c:	0190      	lsls	r0, r2, #6
    551e:	781a      	ldrb	r2, [r3, #0]
    5520:	2140      	movs	r1, #64	; 0x40
    5522:	438a      	bics	r2, r1
    5524:	1c11      	adds	r1, r2, #0
    5526:	1c02      	adds	r2, r0, #0
    5528:	430a      	orrs	r2, r1
    552a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    552c:	687b      	ldr	r3, [r7, #4]
    552e:	7a9a      	ldrb	r2, [r3, #10]
    5530:	230d      	movs	r3, #13
    5532:	18fb      	adds	r3, r7, r3
    5534:	2101      	movs	r1, #1
    5536:	400a      	ands	r2, r1
    5538:	0110      	lsls	r0, r2, #4
    553a:	781a      	ldrb	r2, [r3, #0]
    553c:	2110      	movs	r1, #16
    553e:	438a      	bics	r2, r1
    5540:	1c11      	adds	r1, r2, #0
    5542:	1c02      	adds	r2, r0, #0
    5544:	430a      	orrs	r2, r1
    5546:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	685a      	ldr	r2, [r3, #4]
    554c:	4b05      	ldr	r3, [pc, #20]	; (5564 <system_clock_source_xosc32k_set_config+0xf8>)
    554e:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
    5550:	4b03      	ldr	r3, [pc, #12]	; (5560 <system_clock_source_xosc32k_set_config+0xf4>)
    5552:	68fa      	ldr	r2, [r7, #12]
    5554:	615a      	str	r2, [r3, #20]
}
    5556:	46c0      	nop			; (mov r8, r8)
    5558:	46bd      	mov	sp, r7
    555a:	b004      	add	sp, #16
    555c:	bd80      	pop	{r7, pc}
    555e:	46c0      	nop			; (mov r8, r8)
    5560:	40001000 	.word	0x40001000
    5564:	20000a70 	.word	0x20000a70

00005568 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5568:	b580      	push	{r7, lr}
    556a:	b082      	sub	sp, #8
    556c:	af00      	add	r7, sp, #0
    556e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	7a9b      	ldrb	r3, [r3, #10]
    5574:	029b      	lsls	r3, r3, #10
    5576:	041b      	lsls	r3, r3, #16
    5578:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	899b      	ldrh	r3, [r3, #12]
    557e:	059b      	lsls	r3, r3, #22
    5580:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5582:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5584:	4b2c      	ldr	r3, [pc, #176]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    5586:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
    5590:	4313      	orrs	r3, r2
    5592:	b2db      	uxtb	r3, r3
    5594:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5596:	687b      	ldr	r3, [r7, #4]
    5598:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
    559a:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    559c:	687a      	ldr	r2, [r7, #4]
    559e:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
    55a0:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    55a2:	687b      	ldr	r3, [r7, #4]
    55a4:	785b      	ldrb	r3, [r3, #1]
    55a6:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    55a8:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	789b      	ldrb	r3, [r3, #2]
    55ae:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    55b0:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    55b2:	4b21      	ldr	r3, [pc, #132]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    55b4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	2b04      	cmp	r3, #4
    55bc:	d116      	bne.n	55ec <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	7b9b      	ldrb	r3, [r3, #14]
    55c2:	069b      	lsls	r3, r3, #26
    55c4:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	8a1b      	ldrh	r3, [r3, #16]
    55ca:	041b      	lsls	r3, r3, #16
    55cc:	0019      	movs	r1, r3
    55ce:	4b1b      	ldr	r3, [pc, #108]	; (563c <system_clock_source_dfll_set_config+0xd4>)
    55d0:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55d2:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    55d4:	687a      	ldr	r2, [r7, #4]
    55d6:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55d8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    55da:	4b17      	ldr	r3, [pc, #92]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    55dc:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    55de:	4b16      	ldr	r3, [pc, #88]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	687a      	ldr	r2, [r7, #4]
    55e4:	7812      	ldrb	r2, [r2, #0]
    55e6:	431a      	orrs	r2, r3
    55e8:	4b13      	ldr	r3, [pc, #76]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    55ea:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    55ec:	687b      	ldr	r3, [r7, #4]
    55ee:	781b      	ldrb	r3, [r3, #0]
    55f0:	2b20      	cmp	r3, #32
    55f2:	d11c      	bne.n	562e <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    55f4:	687b      	ldr	r3, [r7, #4]
    55f6:	7b9b      	ldrb	r3, [r3, #14]
    55f8:	069b      	lsls	r3, r3, #26
    55fa:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	8a1b      	ldrh	r3, [r3, #16]
    5600:	041b      	lsls	r3, r3, #16
    5602:	0019      	movs	r1, r3
    5604:	4b0d      	ldr	r3, [pc, #52]	; (563c <system_clock_source_dfll_set_config+0xd4>)
    5606:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5608:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    560e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5610:	4b09      	ldr	r3, [pc, #36]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    5612:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5614:	4b08      	ldr	r3, [pc, #32]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	687a      	ldr	r2, [r7, #4]
    561a:	7812      	ldrb	r2, [r2, #0]
    561c:	2104      	movs	r1, #4
    561e:	430a      	orrs	r2, r1
    5620:	b2d2      	uxtb	r2, r2
    5622:	4313      	orrs	r3, r2
    5624:	2280      	movs	r2, #128	; 0x80
    5626:	00d2      	lsls	r2, r2, #3
    5628:	431a      	orrs	r2, r3
    562a:	4b03      	ldr	r3, [pc, #12]	; (5638 <system_clock_source_dfll_set_config+0xd0>)
    562c:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    562e:	46c0      	nop			; (mov r8, r8)
    5630:	46bd      	mov	sp, r7
    5632:	b002      	add	sp, #8
    5634:	bd80      	pop	{r7, pc}
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	20000a70 	.word	0x20000a70
    563c:	03ff0000 	.word	0x03ff0000

00005640 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	0002      	movs	r2, r0
    5648:	1dfb      	adds	r3, r7, #7
    564a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    564c:	1dfb      	adds	r3, r7, #7
    564e:	781b      	ldrb	r3, [r3, #0]
    5650:	2b08      	cmp	r3, #8
    5652:	d844      	bhi.n	56de <system_clock_source_enable+0x9e>
    5654:	009a      	lsls	r2, r3, #2
    5656:	4b25      	ldr	r3, [pc, #148]	; (56ec <system_clock_source_enable+0xac>)
    5658:	18d3      	adds	r3, r2, r3
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    565e:	4a24      	ldr	r2, [pc, #144]	; (56f0 <system_clock_source_enable+0xb0>)
    5660:	4b23      	ldr	r3, [pc, #140]	; (56f0 <system_clock_source_enable+0xb0>)
    5662:	7d1b      	ldrb	r3, [r3, #20]
    5664:	b2db      	uxtb	r3, r3
    5666:	2102      	movs	r1, #2
    5668:	430b      	orrs	r3, r1
    566a:	b2db      	uxtb	r3, r3
    566c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    566e:	2300      	movs	r3, #0
    5670:	e038      	b.n	56e4 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    5672:	4b20      	ldr	r3, [pc, #128]	; (56f4 <system_clock_source_enable+0xb4>)
    5674:	4a1f      	ldr	r2, [pc, #124]	; (56f4 <system_clock_source_enable+0xb4>)
    5676:	6992      	ldr	r2, [r2, #24]
    5678:	2102      	movs	r1, #2
    567a:	430a      	orrs	r2, r1
    567c:	619a      	str	r2, [r3, #24]
		break;
    567e:	e030      	b.n	56e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    5680:	4a1b      	ldr	r2, [pc, #108]	; (56f0 <system_clock_source_enable+0xb0>)
    5682:	4b1b      	ldr	r3, [pc, #108]	; (56f0 <system_clock_source_enable+0xb0>)
    5684:	8a1b      	ldrh	r3, [r3, #16]
    5686:	b29b      	uxth	r3, r3
    5688:	2102      	movs	r1, #2
    568a:	430b      	orrs	r3, r1
    568c:	b29b      	uxth	r3, r3
    568e:	8213      	strh	r3, [r2, #16]
		break;
    5690:	e027      	b.n	56e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    5692:	4b18      	ldr	r3, [pc, #96]	; (56f4 <system_clock_source_enable+0xb4>)
    5694:	4a17      	ldr	r2, [pc, #92]	; (56f4 <system_clock_source_enable+0xb4>)
    5696:	6952      	ldr	r2, [r2, #20]
    5698:	2102      	movs	r1, #2
    569a:	430a      	orrs	r2, r1
    569c:	615a      	str	r2, [r3, #20]
		break;
    569e:	e020      	b.n	56e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    56a0:	4b15      	ldr	r3, [pc, #84]	; (56f8 <system_clock_source_enable+0xb8>)
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	2202      	movs	r2, #2
    56a6:	431a      	orrs	r2, r3
    56a8:	4b13      	ldr	r3, [pc, #76]	; (56f8 <system_clock_source_enable+0xb8>)
    56aa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    56ac:	4b13      	ldr	r3, [pc, #76]	; (56fc <system_clock_source_enable+0xbc>)
    56ae:	4798      	blx	r3
		break;
    56b0:	e017      	b.n	56e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    56b2:	4a0f      	ldr	r2, [pc, #60]	; (56f0 <system_clock_source_enable+0xb0>)
    56b4:	490e      	ldr	r1, [pc, #56]	; (56f0 <system_clock_source_enable+0xb0>)
    56b6:	2328      	movs	r3, #40	; 0x28
    56b8:	5ccb      	ldrb	r3, [r1, r3]
    56ba:	b2db      	uxtb	r3, r3
    56bc:	2102      	movs	r1, #2
    56be:	430b      	orrs	r3, r1
    56c0:	b2d9      	uxtb	r1, r3
    56c2:	2328      	movs	r3, #40	; 0x28
    56c4:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	4a09      	ldr	r2, [pc, #36]	; (56f0 <system_clock_source_enable+0xb0>)
    56ca:	2338      	movs	r3, #56	; 0x38
    56cc:	5cd3      	ldrb	r3, [r2, r3]
    56ce:	b2db      	uxtb	r3, r3
    56d0:	001a      	movs	r2, r3
    56d2:	2302      	movs	r3, #2
    56d4:	4013      	ands	r3, r2
    56d6:	d1f7      	bne.n	56c8 <system_clock_source_enable+0x88>
		}
		break;
    56d8:	e003      	b.n	56e2 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    56da:	2300      	movs	r3, #0
    56dc:	e002      	b.n	56e4 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    56de:	2317      	movs	r3, #23
    56e0:	e000      	b.n	56e4 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
    56e2:	2300      	movs	r3, #0
}
    56e4:	0018      	movs	r0, r3
    56e6:	46bd      	mov	sp, r7
    56e8:	b002      	add	sp, #8
    56ea:	bd80      	pop	{r7, pc}
    56ec:	00016558 	.word	0x00016558
    56f0:	40000c00 	.word	0x40000c00
    56f4:	40001000 	.word	0x40001000
    56f8:	20000a70 	.word	0x20000a70
    56fc:	000052e9 	.word	0x000052e9

00005700 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
    5700:	b580      	push	{r7, lr}
    5702:	b082      	sub	sp, #8
    5704:	af00      	add	r7, sp, #0
    5706:	0002      	movs	r2, r0
    5708:	1dfb      	adds	r3, r7, #7
    570a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    570c:	1dfb      	adds	r3, r7, #7
    570e:	781b      	ldrb	r3, [r3, #0]
    5710:	2b08      	cmp	r3, #8
    5712:	d83c      	bhi.n	578e <system_clock_source_disable+0x8e>
    5714:	009a      	lsls	r2, r3, #2
    5716:	4b21      	ldr	r3, [pc, #132]	; (579c <system_clock_source_disable+0x9c>)
    5718:	18d3      	adds	r3, r2, r3
    571a:	681b      	ldr	r3, [r3, #0]
    571c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    571e:	4a20      	ldr	r2, [pc, #128]	; (57a0 <system_clock_source_disable+0xa0>)
    5720:	4b1f      	ldr	r3, [pc, #124]	; (57a0 <system_clock_source_disable+0xa0>)
    5722:	7d1b      	ldrb	r3, [r3, #20]
    5724:	b2db      	uxtb	r3, r3
    5726:	2102      	movs	r1, #2
    5728:	438b      	bics	r3, r1
    572a:	b2db      	uxtb	r3, r3
    572c:	7513      	strb	r3, [r2, #20]
		break;
    572e:	e030      	b.n	5792 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    5730:	4b1c      	ldr	r3, [pc, #112]	; (57a4 <system_clock_source_disable+0xa4>)
    5732:	4a1c      	ldr	r2, [pc, #112]	; (57a4 <system_clock_source_disable+0xa4>)
    5734:	6992      	ldr	r2, [r2, #24]
    5736:	2102      	movs	r1, #2
    5738:	438a      	bics	r2, r1
    573a:	619a      	str	r2, [r3, #24]
		break;
    573c:	e029      	b.n	5792 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    573e:	4a18      	ldr	r2, [pc, #96]	; (57a0 <system_clock_source_disable+0xa0>)
    5740:	4b17      	ldr	r3, [pc, #92]	; (57a0 <system_clock_source_disable+0xa0>)
    5742:	8a1b      	ldrh	r3, [r3, #16]
    5744:	b29b      	uxth	r3, r3
    5746:	2102      	movs	r1, #2
    5748:	438b      	bics	r3, r1
    574a:	b29b      	uxth	r3, r3
    574c:	8213      	strh	r3, [r2, #16]
		break;
    574e:	e020      	b.n	5792 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    5750:	4b14      	ldr	r3, [pc, #80]	; (57a4 <system_clock_source_disable+0xa4>)
    5752:	4a14      	ldr	r2, [pc, #80]	; (57a4 <system_clock_source_disable+0xa4>)
    5754:	6952      	ldr	r2, [r2, #20]
    5756:	2102      	movs	r1, #2
    5758:	438a      	bics	r2, r1
    575a:	615a      	str	r2, [r3, #20]
		break;
    575c:	e019      	b.n	5792 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    575e:	4b12      	ldr	r3, [pc, #72]	; (57a8 <system_clock_source_disable+0xa8>)
    5760:	681b      	ldr	r3, [r3, #0]
    5762:	2202      	movs	r2, #2
    5764:	4393      	bics	r3, r2
    5766:	001a      	movs	r2, r3
    5768:	4b0f      	ldr	r3, [pc, #60]	; (57a8 <system_clock_source_disable+0xa8>)
    576a:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    576c:	4a0c      	ldr	r2, [pc, #48]	; (57a0 <system_clock_source_disable+0xa0>)
    576e:	4b0e      	ldr	r3, [pc, #56]	; (57a8 <system_clock_source_disable+0xa8>)
    5770:	681b      	ldr	r3, [r3, #0]
    5772:	b29b      	uxth	r3, r3
    5774:	8313      	strh	r3, [r2, #24]
		break;
    5776:	e00c      	b.n	5792 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    5778:	4a09      	ldr	r2, [pc, #36]	; (57a0 <system_clock_source_disable+0xa0>)
    577a:	4909      	ldr	r1, [pc, #36]	; (57a0 <system_clock_source_disable+0xa0>)
    577c:	2328      	movs	r3, #40	; 0x28
    577e:	5ccb      	ldrb	r3, [r1, r3]
    5780:	b2db      	uxtb	r3, r3
    5782:	2102      	movs	r1, #2
    5784:	438b      	bics	r3, r1
    5786:	b2d9      	uxtb	r1, r3
    5788:	2328      	movs	r3, #40	; 0x28
    578a:	54d1      	strb	r1, [r2, r3]
		break;
    578c:	e001      	b.n	5792 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    578e:	2317      	movs	r3, #23
    5790:	e000      	b.n	5794 <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
    5792:	2300      	movs	r3, #0
}
    5794:	0018      	movs	r0, r3
    5796:	46bd      	mov	sp, r7
    5798:	b002      	add	sp, #8
    579a:	bd80      	pop	{r7, pc}
    579c:	0001657c 	.word	0x0001657c
    57a0:	40000c00 	.word	0x40000c00
    57a4:	40001000 	.word	0x40001000
    57a8:	20000a70 	.word	0x20000a70

000057ac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    57ac:	b580      	push	{r7, lr}
    57ae:	b084      	sub	sp, #16
    57b0:	af00      	add	r7, sp, #0
    57b2:	0002      	movs	r2, r0
    57b4:	1dfb      	adds	r3, r7, #7
    57b6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    57b8:	2300      	movs	r3, #0
    57ba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    57bc:	1dfb      	adds	r3, r7, #7
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	2b08      	cmp	r3, #8
    57c2:	d84f      	bhi.n	5864 <system_clock_source_is_ready+0xb8>
    57c4:	009a      	lsls	r2, r3, #2
    57c6:	4b2a      	ldr	r3, [pc, #168]	; (5870 <system_clock_source_is_ready+0xc4>)
    57c8:	18d3      	adds	r3, r2, r3
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
    57ce:	2310      	movs	r3, #16
    57d0:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    57d2:	4b28      	ldr	r3, [pc, #160]	; (5874 <system_clock_source_is_ready+0xc8>)
    57d4:	68db      	ldr	r3, [r3, #12]
    57d6:	68fa      	ldr	r2, [r7, #12]
    57d8:	401a      	ands	r2, r3
    57da:	68fb      	ldr	r3, [r7, #12]
    57dc:	1ad3      	subs	r3, r2, r3
    57de:	425a      	negs	r2, r3
    57e0:	4153      	adcs	r3, r2
    57e2:	b2db      	uxtb	r3, r3
    57e4:	e03f      	b.n	5866 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
    57e6:	2302      	movs	r3, #2
    57e8:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    57ea:	4b23      	ldr	r3, [pc, #140]	; (5878 <system_clock_source_is_ready+0xcc>)
    57ec:	68db      	ldr	r3, [r3, #12]
    57ee:	68fa      	ldr	r2, [r7, #12]
    57f0:	401a      	ands	r2, r3
    57f2:	68fb      	ldr	r3, [r7, #12]
    57f4:	1ad3      	subs	r3, r2, r3
    57f6:	425a      	negs	r2, r3
    57f8:	4153      	adcs	r3, r2
    57fa:	b2db      	uxtb	r3, r3
    57fc:	e033      	b.n	5866 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
    57fe:	2301      	movs	r3, #1
    5800:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    5802:	4b1c      	ldr	r3, [pc, #112]	; (5874 <system_clock_source_is_ready+0xc8>)
    5804:	68db      	ldr	r3, [r3, #12]
    5806:	68fa      	ldr	r2, [r7, #12]
    5808:	401a      	ands	r2, r3
    580a:	68fb      	ldr	r3, [r7, #12]
    580c:	1ad3      	subs	r3, r2, r3
    580e:	425a      	negs	r2, r3
    5810:	4153      	adcs	r3, r2
    5812:	b2db      	uxtb	r3, r3
    5814:	e027      	b.n	5866 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
    5816:	2301      	movs	r3, #1
    5818:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    581a:	4b17      	ldr	r3, [pc, #92]	; (5878 <system_clock_source_is_ready+0xcc>)
    581c:	68db      	ldr	r3, [r3, #12]
    581e:	68fa      	ldr	r2, [r7, #12]
    5820:	401a      	ands	r2, r3
    5822:	68fb      	ldr	r3, [r7, #12]
    5824:	1ad3      	subs	r3, r2, r3
    5826:	425a      	negs	r2, r3
    5828:	4153      	adcs	r3, r2
    582a:	b2db      	uxtb	r3, r3
    582c:	e01b      	b.n	5866 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
    582e:	23d0      	movs	r3, #208	; 0xd0
    5830:	011b      	lsls	r3, r3, #4
    5832:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    5834:	4b0f      	ldr	r3, [pc, #60]	; (5874 <system_clock_source_is_ready+0xc8>)
    5836:	68db      	ldr	r3, [r3, #12]
    5838:	68fa      	ldr	r2, [r7, #12]
    583a:	401a      	ands	r2, r3
    583c:	68fb      	ldr	r3, [r7, #12]
    583e:	1ad3      	subs	r3, r2, r3
    5840:	425a      	negs	r2, r3
    5842:	4153      	adcs	r3, r2
    5844:	b2db      	uxtb	r3, r3
    5846:	e00e      	b.n	5866 <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    5848:	4a0a      	ldr	r2, [pc, #40]	; (5874 <system_clock_source_is_ready+0xc8>)
    584a:	233c      	movs	r3, #60	; 0x3c
    584c:	5cd3      	ldrb	r3, [r2, r3]
    584e:	b2db      	uxtb	r3, r3
    5850:	001a      	movs	r2, r3
    5852:	2303      	movs	r3, #3
    5854:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
    5856:	3b03      	subs	r3, #3
    5858:	425a      	negs	r2, r3
    585a:	4153      	adcs	r3, r2
    585c:	b2db      	uxtb	r3, r3
    585e:	e002      	b.n	5866 <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5860:	2301      	movs	r3, #1
    5862:	e000      	b.n	5866 <system_clock_source_is_ready+0xba>

	default:
		return false;
    5864:	2300      	movs	r3, #0
	}
}
    5866:	0018      	movs	r0, r3
    5868:	46bd      	mov	sp, r7
    586a:	b004      	add	sp, #16
    586c:	bd80      	pop	{r7, pc}
    586e:	46c0      	nop			; (mov r8, r8)
    5870:	000165a0 	.word	0x000165a0
    5874:	40000c00 	.word	0x40000c00
    5878:	40001000 	.word	0x40001000

0000587c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    587c:	b580      	push	{r7, lr}
    587e:	b0aa      	sub	sp, #168	; 0xa8
    5880:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    5882:	4b91      	ldr	r3, [pc, #580]	; (5ac8 <system_clock_init+0x24c>)
    5884:	2280      	movs	r2, #128	; 0x80
    5886:	0052      	lsls	r2, r2, #1
    5888:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    588a:	4b90      	ldr	r3, [pc, #576]	; (5acc <system_clock_init+0x250>)
    588c:	2203      	movs	r2, #3
    588e:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5890:	2002      	movs	r0, #2
    5892:	4b8f      	ldr	r3, [pc, #572]	; (5ad0 <system_clock_init+0x254>)
    5894:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    5896:	2002      	movs	r0, #2
    5898:	4b8e      	ldr	r3, [pc, #568]	; (5ad4 <system_clock_init+0x258>)
    589a:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    589c:	2394      	movs	r3, #148	; 0x94
    589e:	18fb      	adds	r3, r7, r3
    58a0:	0018      	movs	r0, r3
    58a2:	4b8d      	ldr	r3, [pc, #564]	; (5ad8 <system_clock_init+0x25c>)
    58a4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    58a6:	2394      	movs	r3, #148	; 0x94
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	2280      	movs	r2, #128	; 0x80
    58ac:	0212      	lsls	r2, r2, #8
    58ae:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    58b0:	2394      	movs	r3, #148	; 0x94
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	2200      	movs	r2, #0
    58b6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    58b8:	2394      	movs	r3, #148	; 0x94
    58ba:	18fb      	adds	r3, r7, r3
    58bc:	2204      	movs	r2, #4
    58be:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    58c0:	2394      	movs	r3, #148	; 0x94
    58c2:	18fb      	adds	r3, r7, r3
    58c4:	2200      	movs	r2, #0
    58c6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    58c8:	2394      	movs	r3, #148	; 0x94
    58ca:	18fb      	adds	r3, r7, r3
    58cc:	2201      	movs	r2, #1
    58ce:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
    58d0:	2394      	movs	r3, #148	; 0x94
    58d2:	18fb      	adds	r3, r7, r3
    58d4:	2200      	movs	r2, #0
    58d6:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    58d8:	2394      	movs	r3, #148	; 0x94
    58da:	18fb      	adds	r3, r7, r3
    58dc:	2200      	movs	r2, #0
    58de:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    58e0:	2394      	movs	r3, #148	; 0x94
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	0018      	movs	r0, r3
    58e6:	4b7d      	ldr	r3, [pc, #500]	; (5adc <system_clock_init+0x260>)
    58e8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    58ea:	2005      	movs	r0, #5
    58ec:	4b7c      	ldr	r3, [pc, #496]	; (5ae0 <system_clock_init+0x264>)
    58ee:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    58f0:	46c0      	nop			; (mov r8, r8)
    58f2:	2005      	movs	r0, #5
    58f4:	4b7b      	ldr	r3, [pc, #492]	; (5ae4 <system_clock_init+0x268>)
    58f6:	4798      	blx	r3
    58f8:	0003      	movs	r3, r0
    58fa:	001a      	movs	r2, r3
    58fc:	2301      	movs	r3, #1
    58fe:	4053      	eors	r3, r2
    5900:	b2db      	uxtb	r3, r3
    5902:	2b00      	cmp	r3, #0
    5904:	d1f5      	bne.n	58f2 <system_clock_init+0x76>
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
    5906:	4b78      	ldr	r3, [pc, #480]	; (5ae8 <system_clock_init+0x26c>)
    5908:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    590a:	2380      	movs	r3, #128	; 0x80
    590c:	18fb      	adds	r3, r7, r3
    590e:	0018      	movs	r0, r3
    5910:	4b76      	ldr	r3, [pc, #472]	; (5aec <system_clock_init+0x270>)
    5912:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5914:	2380      	movs	r3, #128	; 0x80
    5916:	18fb      	adds	r3, r7, r3
    5918:	2204      	movs	r2, #4
    591a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    591c:	2380      	movs	r3, #128	; 0x80
    591e:	18fb      	adds	r3, r7, r3
    5920:	2200      	movs	r2, #0
    5922:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    5924:	2380      	movs	r3, #128	; 0x80
    5926:	18fb      	adds	r3, r7, r3
    5928:	2200      	movs	r2, #0
    592a:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    592c:	4b70      	ldr	r3, [pc, #448]	; (5af0 <system_clock_init+0x274>)
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	0e9b      	lsrs	r3, r3, #26
    5932:	22a4      	movs	r2, #164	; 0xa4
    5934:	18ba      	adds	r2, r7, r2
    5936:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    5938:	23a4      	movs	r3, #164	; 0xa4
    593a:	18fb      	adds	r3, r7, r3
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	2b3f      	cmp	r3, #63	; 0x3f
    5940:	d103      	bne.n	594a <system_clock_init+0xce>
		coarse = 0x1f;
    5942:	231f      	movs	r3, #31
    5944:	22a4      	movs	r2, #164	; 0xa4
    5946:	18ba      	adds	r2, r7, r2
    5948:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
    594a:	23a4      	movs	r3, #164	; 0xa4
    594c:	18fb      	adds	r3, r7, r3
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	b2da      	uxtb	r2, r3
    5952:	2380      	movs	r3, #128	; 0x80
    5954:	18fb      	adds	r3, r7, r3
    5956:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5958:	2380      	movs	r3, #128	; 0x80
    595a:	18fb      	adds	r3, r7, r3
    595c:	2200      	movs	r2, #0
    595e:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5960:	2380      	movs	r3, #128	; 0x80
    5962:	18fb      	adds	r3, r7, r3
    5964:	2200      	movs	r2, #0
    5966:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5968:	2380      	movs	r3, #128	; 0x80
    596a:	18fb      	adds	r3, r7, r3
    596c:	2200      	movs	r2, #0
    596e:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5970:	2380      	movs	r3, #128	; 0x80
    5972:	18fb      	adds	r3, r7, r3
    5974:	2200      	movs	r2, #0
    5976:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5978:	2380      	movs	r3, #128	; 0x80
    597a:	18fb      	adds	r3, r7, r3
    597c:	22b7      	movs	r2, #183	; 0xb7
    597e:	00d2      	lsls	r2, r2, #3
    5980:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5982:	2380      	movs	r3, #128	; 0x80
    5984:	18fb      	adds	r3, r7, r3
    5986:	2207      	movs	r2, #7
    5988:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    598a:	2380      	movs	r3, #128	; 0x80
    598c:	18fb      	adds	r3, r7, r3
    598e:	223f      	movs	r2, #63	; 0x3f
    5990:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5992:	2380      	movs	r3, #128	; 0x80
    5994:	18fb      	adds	r3, r7, r3
    5996:	0018      	movs	r0, r3
    5998:	4b56      	ldr	r3, [pc, #344]	; (5af4 <system_clock_init+0x278>)
    599a:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    599c:	4b56      	ldr	r3, [pc, #344]	; (5af8 <system_clock_init+0x27c>)
    599e:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    59a0:	2368      	movs	r3, #104	; 0x68
    59a2:	18fb      	adds	r3, r7, r3
    59a4:	0018      	movs	r0, r3
    59a6:	4b55      	ldr	r3, [pc, #340]	; (5afc <system_clock_init+0x280>)
    59a8:	4798      	blx	r3
    59aa:	2368      	movs	r3, #104	; 0x68
    59ac:	18fb      	adds	r3, r7, r3
    59ae:	2205      	movs	r2, #5
    59b0:	701a      	strb	r2, [r3, #0]
    59b2:	2368      	movs	r3, #104	; 0x68
    59b4:	18fb      	adds	r3, r7, r3
    59b6:	2201      	movs	r2, #1
    59b8:	605a      	str	r2, [r3, #4]
    59ba:	2368      	movs	r3, #104	; 0x68
    59bc:	18fb      	adds	r3, r7, r3
    59be:	2201      	movs	r2, #1
    59c0:	721a      	strb	r2, [r3, #8]
    59c2:	2368      	movs	r3, #104	; 0x68
    59c4:	18fb      	adds	r3, r7, r3
    59c6:	2200      	movs	r2, #0
    59c8:	725a      	strb	r2, [r3, #9]
    59ca:	2368      	movs	r3, #104	; 0x68
    59cc:	18fb      	adds	r3, r7, r3
    59ce:	0019      	movs	r1, r3
    59d0:	2001      	movs	r0, #1
    59d2:	4b4b      	ldr	r3, [pc, #300]	; (5b00 <system_clock_init+0x284>)
    59d4:	4798      	blx	r3
    59d6:	2001      	movs	r0, #1
    59d8:	4b4a      	ldr	r3, [pc, #296]	; (5b04 <system_clock_init+0x288>)
    59da:	4798      	blx	r3
    59dc:	235c      	movs	r3, #92	; 0x5c
    59de:	18fb      	adds	r3, r7, r3
    59e0:	0018      	movs	r0, r3
    59e2:	4b46      	ldr	r3, [pc, #280]	; (5afc <system_clock_init+0x280>)
    59e4:	4798      	blx	r3
    59e6:	235c      	movs	r3, #92	; 0x5c
    59e8:	18fb      	adds	r3, r7, r3
    59ea:	2206      	movs	r2, #6
    59ec:	701a      	strb	r2, [r3, #0]
    59ee:	235c      	movs	r3, #92	; 0x5c
    59f0:	18fb      	adds	r3, r7, r3
    59f2:	2205      	movs	r2, #5
    59f4:	605a      	str	r2, [r3, #4]
    59f6:	235c      	movs	r3, #92	; 0x5c
    59f8:	18fb      	adds	r3, r7, r3
    59fa:	2200      	movs	r2, #0
    59fc:	721a      	strb	r2, [r3, #8]
    59fe:	235c      	movs	r3, #92	; 0x5c
    5a00:	18fb      	adds	r3, r7, r3
    5a02:	2200      	movs	r2, #0
    5a04:	725a      	strb	r2, [r3, #9]
    5a06:	235c      	movs	r3, #92	; 0x5c
    5a08:	18fb      	adds	r3, r7, r3
    5a0a:	0019      	movs	r1, r3
    5a0c:	2002      	movs	r0, #2
    5a0e:	4b3c      	ldr	r3, [pc, #240]	; (5b00 <system_clock_init+0x284>)
    5a10:	4798      	blx	r3
    5a12:	2002      	movs	r0, #2
    5a14:	4b3b      	ldr	r3, [pc, #236]	; (5b04 <system_clock_init+0x288>)
    5a16:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    5a18:	2310      	movs	r3, #16
    5a1a:	18fb      	adds	r3, r7, r3
    5a1c:	0018      	movs	r0, r3
    5a1e:	4b3a      	ldr	r3, [pc, #232]	; (5b08 <system_clock_init+0x28c>)
    5a20:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5a22:	2310      	movs	r3, #16
    5a24:	18fb      	adds	r3, r7, r3
    5a26:	2201      	movs	r2, #1
    5a28:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5a2a:	2310      	movs	r3, #16
    5a2c:	18fb      	adds	r3, r7, r3
    5a2e:	0019      	movs	r1, r3
    5a30:	2000      	movs	r0, #0
    5a32:	4b36      	ldr	r3, [pc, #216]	; (5b0c <system_clock_init+0x290>)
    5a34:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    5a36:	2000      	movs	r0, #0
    5a38:	4b35      	ldr	r3, [pc, #212]	; (5b10 <system_clock_init+0x294>)
    5a3a:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5a3c:	2007      	movs	r0, #7
    5a3e:	4b28      	ldr	r3, [pc, #160]	; (5ae0 <system_clock_init+0x264>)
    5a40:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5a42:	46c0      	nop			; (mov r8, r8)
    5a44:	2007      	movs	r0, #7
    5a46:	4b27      	ldr	r3, [pc, #156]	; (5ae4 <system_clock_init+0x268>)
    5a48:	4798      	blx	r3
    5a4a:	0003      	movs	r3, r0
    5a4c:	001a      	movs	r2, r3
    5a4e:	2301      	movs	r3, #1
    5a50:	4053      	eors	r3, r2
    5a52:	b2db      	uxtb	r3, r3
    5a54:	2b00      	cmp	r3, #0
    5a56:	d1f5      	bne.n	5a44 <system_clock_init+0x1c8>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    5a58:	2000      	movs	r0, #0
    5a5a:	4b2e      	ldr	r3, [pc, #184]	; (5b14 <system_clock_init+0x298>)
    5a5c:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    5a5e:	2000      	movs	r0, #0
    5a60:	4b2d      	ldr	r3, [pc, #180]	; (5b18 <system_clock_init+0x29c>)
    5a62:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5a64:	2000      	movs	r0, #0
    5a66:	4b2d      	ldr	r3, [pc, #180]	; (5b1c <system_clock_init+0x2a0>)
    5a68:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    5a6a:	2000      	movs	r0, #0
    5a6c:	4b2c      	ldr	r3, [pc, #176]	; (5b20 <system_clock_init+0x2a4>)
    5a6e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5a70:	1d3b      	adds	r3, r7, #4
    5a72:	0018      	movs	r0, r3
    5a74:	4b21      	ldr	r3, [pc, #132]	; (5afc <system_clock_init+0x280>)
    5a76:	4798      	blx	r3
    5a78:	1d3b      	adds	r3, r7, #4
    5a7a:	2207      	movs	r2, #7
    5a7c:	701a      	strb	r2, [r3, #0]
    5a7e:	1d3b      	adds	r3, r7, #4
    5a80:	2206      	movs	r2, #6
    5a82:	605a      	str	r2, [r3, #4]
    5a84:	1d3b      	adds	r3, r7, #4
    5a86:	2200      	movs	r2, #0
    5a88:	721a      	strb	r2, [r3, #8]
    5a8a:	1d3b      	adds	r3, r7, #4
    5a8c:	2200      	movs	r2, #0
    5a8e:	725a      	strb	r2, [r3, #9]
    5a90:	1d3b      	adds	r3, r7, #4
    5a92:	0019      	movs	r1, r3
    5a94:	2000      	movs	r0, #0
    5a96:	4b1a      	ldr	r3, [pc, #104]	; (5b00 <system_clock_init+0x284>)
    5a98:	4798      	blx	r3
    5a9a:	2000      	movs	r0, #0
    5a9c:	4b19      	ldr	r3, [pc, #100]	; (5b04 <system_clock_init+0x288>)
    5a9e:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    5aa0:	4b20      	ldr	r3, [pc, #128]	; (5b24 <system_clock_init+0x2a8>)
    5aa2:	4798      	blx	r3
    5aa4:	0003      	movs	r3, r0
    5aa6:	22a0      	movs	r2, #160	; 0xa0
    5aa8:	18ba      	adds	r2, r7, r2
    5aaa:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
    5aac:	23a0      	movs	r3, #160	; 0xa0
    5aae:	18fb      	adds	r3, r7, r3
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	4a1d      	ldr	r2, [pc, #116]	; (5b28 <system_clock_init+0x2ac>)
    5ab4:	4293      	cmp	r3, r2
    5ab6:	d802      	bhi.n	5abe <system_clock_init+0x242>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    5ab8:	2000      	movs	r0, #0
    5aba:	4b06      	ldr	r3, [pc, #24]	; (5ad4 <system_clock_init+0x258>)
    5abc:	4798      	blx	r3
	}
}
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	46bd      	mov	sp, r7
    5ac2:	b02a      	add	sp, #168	; 0xa8
    5ac4:	bd80      	pop	{r7, pc}
    5ac6:	46c0      	nop			; (mov r8, r8)
    5ac8:	40000c00 	.word	0x40000c00
    5acc:	40001400 	.word	0x40001400
    5ad0:	0000519d 	.word	0x0000519d
    5ad4:	000051d1 	.word	0x000051d1
    5ad8:	00005025 	.word	0x00005025
    5adc:	0000546d 	.word	0x0000546d
    5ae0:	00005641 	.word	0x00005641
    5ae4:	000057ad 	.word	0x000057ad
    5ae8:	00005249 	.word	0x00005249
    5aec:	00005089 	.word	0x00005089
    5af0:	00806020 	.word	0x00806020
    5af4:	00005569 	.word	0x00005569
    5af8:	00005c0d 	.word	0x00005c0d
    5afc:	00004fe1 	.word	0x00004fe1
    5b00:	00005c3d 	.word	0x00005c3d
    5b04:	00005d4d 	.word	0x00005d4d
    5b08:	0000500f 	.word	0x0000500f
    5b0c:	00005e69 	.word	0x00005e69
    5b10:	00005ea9 	.word	0x00005ea9
    5b14:	00005145 	.word	0x00005145
    5b18:	0000511d 	.word	0x0000511d
    5b1c:	000050f5 	.word	0x000050f5
    5b20:	000050e1 	.word	0x000050e1
    5b24:	0000516d 	.word	0x0000516d
    5b28:	00b71b00 	.word	0x00b71b00

00005b2c <system_apb_clock_set_mask>:
{
    5b2c:	b580      	push	{r7, lr}
    5b2e:	b082      	sub	sp, #8
    5b30:	af00      	add	r7, sp, #0
    5b32:	0002      	movs	r2, r0
    5b34:	6039      	str	r1, [r7, #0]
    5b36:	1dfb      	adds	r3, r7, #7
    5b38:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5b3a:	1dfb      	adds	r3, r7, #7
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	2b04      	cmp	r3, #4
    5b40:	d827      	bhi.n	5b92 <system_apb_clock_set_mask+0x66>
    5b42:	009a      	lsls	r2, r3, #2
    5b44:	4b16      	ldr	r3, [pc, #88]	; (5ba0 <system_apb_clock_set_mask+0x74>)
    5b46:	18d3      	adds	r3, r2, r3
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    5b4c:	4b15      	ldr	r3, [pc, #84]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b4e:	4a15      	ldr	r2, [pc, #84]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b50:	6951      	ldr	r1, [r2, #20]
    5b52:	683a      	ldr	r2, [r7, #0]
    5b54:	430a      	orrs	r2, r1
    5b56:	615a      	str	r2, [r3, #20]
			break;
    5b58:	e01d      	b.n	5b96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    5b5a:	4b12      	ldr	r3, [pc, #72]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b5c:	4a11      	ldr	r2, [pc, #68]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b5e:	6991      	ldr	r1, [r2, #24]
    5b60:	683a      	ldr	r2, [r7, #0]
    5b62:	430a      	orrs	r2, r1
    5b64:	619a      	str	r2, [r3, #24]
			break;
    5b66:	e016      	b.n	5b96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    5b68:	4b0e      	ldr	r3, [pc, #56]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b6a:	4a0e      	ldr	r2, [pc, #56]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b6c:	69d1      	ldr	r1, [r2, #28]
    5b6e:	683a      	ldr	r2, [r7, #0]
    5b70:	430a      	orrs	r2, r1
    5b72:	61da      	str	r2, [r3, #28]
			break;
    5b74:	e00f      	b.n	5b96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    5b76:	4b0b      	ldr	r3, [pc, #44]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b78:	4a0a      	ldr	r2, [pc, #40]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b7a:	6a11      	ldr	r1, [r2, #32]
    5b7c:	683a      	ldr	r2, [r7, #0]
    5b7e:	430a      	orrs	r2, r1
    5b80:	621a      	str	r2, [r3, #32]
			break;
    5b82:	e008      	b.n	5b96 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    5b84:	4b07      	ldr	r3, [pc, #28]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b86:	4a07      	ldr	r2, [pc, #28]	; (5ba4 <system_apb_clock_set_mask+0x78>)
    5b88:	6a51      	ldr	r1, [r2, #36]	; 0x24
    5b8a:	683a      	ldr	r2, [r7, #0]
    5b8c:	430a      	orrs	r2, r1
    5b8e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    5b90:	e001      	b.n	5b96 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    5b92:	2317      	movs	r3, #23
    5b94:	e000      	b.n	5b98 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    5b96:	2300      	movs	r3, #0
}
    5b98:	0018      	movs	r0, r3
    5b9a:	46bd      	mov	sp, r7
    5b9c:	b002      	add	sp, #8
    5b9e:	bd80      	pop	{r7, pc}
    5ba0:	000165c4 	.word	0x000165c4
    5ba4:	40000400 	.word	0x40000400

00005ba8 <system_interrupt_enter_critical_section>:
{
    5ba8:	b580      	push	{r7, lr}
    5baa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5bac:	4b02      	ldr	r3, [pc, #8]	; (5bb8 <system_interrupt_enter_critical_section+0x10>)
    5bae:	4798      	blx	r3
}
    5bb0:	46c0      	nop			; (mov r8, r8)
    5bb2:	46bd      	mov	sp, r7
    5bb4:	bd80      	pop	{r7, pc}
    5bb6:	46c0      	nop			; (mov r8, r8)
    5bb8:	00000201 	.word	0x00000201

00005bbc <system_interrupt_leave_critical_section>:
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5bc0:	4b02      	ldr	r3, [pc, #8]	; (5bcc <system_interrupt_leave_critical_section+0x10>)
    5bc2:	4798      	blx	r3
}
    5bc4:	46c0      	nop			; (mov r8, r8)
    5bc6:	46bd      	mov	sp, r7
    5bc8:	bd80      	pop	{r7, pc}
    5bca:	46c0      	nop			; (mov r8, r8)
    5bcc:	00000255 	.word	0x00000255

00005bd0 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    5bd0:	b580      	push	{r7, lr}
    5bd2:	b082      	sub	sp, #8
    5bd4:	af00      	add	r7, sp, #0
    5bd6:	0002      	movs	r2, r0
    5bd8:	1dfb      	adds	r3, r7, #7
    5bda:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5bdc:	4b09      	ldr	r3, [pc, #36]	; (5c04 <system_gclk_is_syncing+0x34>)
    5bde:	685b      	ldr	r3, [r3, #4]
    5be0:	1dfa      	adds	r2, r7, #7
    5be2:	7812      	ldrb	r2, [r2, #0]
    5be4:	2101      	movs	r1, #1
    5be6:	4091      	lsls	r1, r2
    5be8:	000a      	movs	r2, r1
    5bea:	0092      	lsls	r2, r2, #2
    5bec:	4013      	ands	r3, r2
    5bee:	4a06      	ldr	r2, [pc, #24]	; (5c08 <system_gclk_is_syncing+0x38>)
    5bf0:	4013      	ands	r3, r2
    5bf2:	d001      	beq.n	5bf8 <system_gclk_is_syncing+0x28>
		 return true;
    5bf4:	2301      	movs	r3, #1
    5bf6:	e000      	b.n	5bfa <system_gclk_is_syncing+0x2a>
	}

	 return false;
    5bf8:	2300      	movs	r3, #0
}
    5bfa:	0018      	movs	r0, r3
    5bfc:	46bd      	mov	sp, r7
    5bfe:	b002      	add	sp, #8
    5c00:	bd80      	pop	{r7, pc}
    5c02:	46c0      	nop			; (mov r8, r8)
    5c04:	40001800 	.word	0x40001800
    5c08:	000007fc 	.word	0x000007fc

00005c0c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    5c10:	2140      	movs	r1, #64	; 0x40
    5c12:	2000      	movs	r0, #0
    5c14:	4b07      	ldr	r3, [pc, #28]	; (5c34 <system_gclk_init+0x28>)
    5c16:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    5c18:	4b07      	ldr	r3, [pc, #28]	; (5c38 <system_gclk_init+0x2c>)
    5c1a:	2201      	movs	r2, #1
    5c1c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5c1e:	46c0      	nop			; (mov r8, r8)
    5c20:	4b05      	ldr	r3, [pc, #20]	; (5c38 <system_gclk_init+0x2c>)
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	b2db      	uxtb	r3, r3
    5c26:	001a      	movs	r2, r3
    5c28:	2301      	movs	r3, #1
    5c2a:	4013      	ands	r3, r2
    5c2c:	d1f8      	bne.n	5c20 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5c2e:	46c0      	nop			; (mov r8, r8)
    5c30:	46bd      	mov	sp, r7
    5c32:	bd80      	pop	{r7, pc}
    5c34:	00005b2d 	.word	0x00005b2d
    5c38:	40001800 	.word	0x40001800

00005c3c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b086      	sub	sp, #24
    5c40:	af00      	add	r7, sp, #0
    5c42:	0002      	movs	r2, r0
    5c44:	6039      	str	r1, [r7, #0]
    5c46:	1dfb      	adds	r3, r7, #7
    5c48:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5c4a:	683b      	ldr	r3, [r7, #0]
    5c4c:	781b      	ldrb	r3, [r3, #0]
    5c4e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5c50:	683b      	ldr	r3, [r7, #0]
    5c52:	785b      	ldrb	r3, [r3, #1]
    5c54:	2b00      	cmp	r3, #0
    5c56:	d004      	beq.n	5c62 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5c58:	697b      	ldr	r3, [r7, #20]
    5c5a:	2280      	movs	r2, #128	; 0x80
    5c5c:	00d2      	lsls	r2, r2, #3
    5c5e:	4313      	orrs	r3, r2
    5c60:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5c62:	683b      	ldr	r3, [r7, #0]
    5c64:	7a5b      	ldrb	r3, [r3, #9]
    5c66:	2b00      	cmp	r3, #0
    5c68:	d004      	beq.n	5c74 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5c6a:	697b      	ldr	r3, [r7, #20]
    5c6c:	2280      	movs	r2, #128	; 0x80
    5c6e:	0112      	lsls	r2, r2, #4
    5c70:	4313      	orrs	r3, r2
    5c72:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5c74:	683b      	ldr	r3, [r7, #0]
    5c76:	685b      	ldr	r3, [r3, #4]
    5c78:	2b01      	cmp	r3, #1
    5c7a:	d92c      	bls.n	5cd6 <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5c7c:	683b      	ldr	r3, [r7, #0]
    5c7e:	685a      	ldr	r2, [r3, #4]
    5c80:	683b      	ldr	r3, [r7, #0]
    5c82:	685b      	ldr	r3, [r3, #4]
    5c84:	3b01      	subs	r3, #1
    5c86:	4013      	ands	r3, r2
    5c88:	d11a      	bne.n	5cc0 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5c8a:	2300      	movs	r3, #0
    5c8c:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5c8e:	2302      	movs	r3, #2
    5c90:	60fb      	str	r3, [r7, #12]
    5c92:	e005      	b.n	5ca0 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    5c94:	693b      	ldr	r3, [r7, #16]
    5c96:	3301      	adds	r3, #1
    5c98:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    5c9a:	68fb      	ldr	r3, [r7, #12]
    5c9c:	005b      	lsls	r3, r3, #1
    5c9e:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    5ca0:	683b      	ldr	r3, [r7, #0]
    5ca2:	685a      	ldr	r2, [r3, #4]
    5ca4:	68fb      	ldr	r3, [r7, #12]
    5ca6:	429a      	cmp	r2, r3
    5ca8:	d8f4      	bhi.n	5c94 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    5caa:	693b      	ldr	r3, [r7, #16]
    5cac:	041b      	lsls	r3, r3, #16
    5cae:	697a      	ldr	r2, [r7, #20]
    5cb0:	4313      	orrs	r3, r2
    5cb2:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5cb4:	697b      	ldr	r3, [r7, #20]
    5cb6:	2280      	movs	r2, #128	; 0x80
    5cb8:	0152      	lsls	r2, r2, #5
    5cba:	4313      	orrs	r3, r2
    5cbc:	617b      	str	r3, [r7, #20]
    5cbe:	e00a      	b.n	5cd6 <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    5cc0:	683b      	ldr	r3, [r7, #0]
    5cc2:	685b      	ldr	r3, [r3, #4]
    5cc4:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    5cc6:	697a      	ldr	r2, [r7, #20]
    5cc8:	4313      	orrs	r3, r2
    5cca:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5ccc:	697b      	ldr	r3, [r7, #20]
    5cce:	2280      	movs	r2, #128	; 0x80
    5cd0:	0092      	lsls	r2, r2, #2
    5cd2:	4313      	orrs	r3, r2
    5cd4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5cd6:	683b      	ldr	r3, [r7, #0]
    5cd8:	7a1b      	ldrb	r3, [r3, #8]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d004      	beq.n	5ce8 <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5cde:	697b      	ldr	r3, [r7, #20]
    5ce0:	2280      	movs	r2, #128	; 0x80
    5ce2:	0192      	lsls	r2, r2, #6
    5ce4:	4313      	orrs	r3, r2
    5ce6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    5ce8:	46c0      	nop			; (mov r8, r8)
    5cea:	1dfb      	adds	r3, r7, #7
    5cec:	781b      	ldrb	r3, [r3, #0]
    5cee:	0018      	movs	r0, r3
    5cf0:	4b12      	ldr	r3, [pc, #72]	; (5d3c <system_gclk_gen_set_config+0x100>)
    5cf2:	4798      	blx	r3
    5cf4:	1e03      	subs	r3, r0, #0
    5cf6:	d1f8      	bne.n	5cea <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5cf8:	4b11      	ldr	r3, [pc, #68]	; (5d40 <system_gclk_gen_set_config+0x104>)
    5cfa:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    5cfc:	4811      	ldr	r0, [pc, #68]	; (5d44 <system_gclk_gen_set_config+0x108>)
    5cfe:	1dfb      	adds	r3, r7, #7
    5d00:	781b      	ldrb	r3, [r3, #0]
    5d02:	4910      	ldr	r1, [pc, #64]	; (5d44 <system_gclk_gen_set_config+0x108>)
    5d04:	1dfa      	adds	r2, r7, #7
    5d06:	7812      	ldrb	r2, [r2, #0]
    5d08:	3208      	adds	r2, #8
    5d0a:	0092      	lsls	r2, r2, #2
    5d0c:	5851      	ldr	r1, [r2, r1]
    5d0e:	2280      	movs	r2, #128	; 0x80
    5d10:	0052      	lsls	r2, r2, #1
    5d12:	4011      	ands	r1, r2
    5d14:	697a      	ldr	r2, [r7, #20]
    5d16:	430a      	orrs	r2, r1
    5d18:	3308      	adds	r3, #8
    5d1a:	009b      	lsls	r3, r3, #2
    5d1c:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    5d1e:	46c0      	nop			; (mov r8, r8)
    5d20:	1dfb      	adds	r3, r7, #7
    5d22:	781b      	ldrb	r3, [r3, #0]
    5d24:	0018      	movs	r0, r3
    5d26:	4b05      	ldr	r3, [pc, #20]	; (5d3c <system_gclk_gen_set_config+0x100>)
    5d28:	4798      	blx	r3
    5d2a:	1e03      	subs	r3, r0, #0
    5d2c:	d1f8      	bne.n	5d20 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    5d2e:	4b06      	ldr	r3, [pc, #24]	; (5d48 <system_gclk_gen_set_config+0x10c>)
    5d30:	4798      	blx	r3
}
    5d32:	46c0      	nop			; (mov r8, r8)
    5d34:	46bd      	mov	sp, r7
    5d36:	b006      	add	sp, #24
    5d38:	bd80      	pop	{r7, pc}
    5d3a:	46c0      	nop			; (mov r8, r8)
    5d3c:	00005bd1 	.word	0x00005bd1
    5d40:	00005ba9 	.word	0x00005ba9
    5d44:	40001800 	.word	0x40001800
    5d48:	00005bbd 	.word	0x00005bbd

00005d4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b082      	sub	sp, #8
    5d50:	af00      	add	r7, sp, #0
    5d52:	0002      	movs	r2, r0
    5d54:	1dfb      	adds	r3, r7, #7
    5d56:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    5d58:	46c0      	nop			; (mov r8, r8)
    5d5a:	1dfb      	adds	r3, r7, #7
    5d5c:	781b      	ldrb	r3, [r3, #0]
    5d5e:	0018      	movs	r0, r3
    5d60:	4b0d      	ldr	r3, [pc, #52]	; (5d98 <system_gclk_gen_enable+0x4c>)
    5d62:	4798      	blx	r3
    5d64:	1e03      	subs	r3, r0, #0
    5d66:	d1f8      	bne.n	5d5a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5d68:	4b0c      	ldr	r3, [pc, #48]	; (5d9c <system_gclk_gen_enable+0x50>)
    5d6a:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    5d6c:	480c      	ldr	r0, [pc, #48]	; (5da0 <system_gclk_gen_enable+0x54>)
    5d6e:	1dfb      	adds	r3, r7, #7
    5d70:	781b      	ldrb	r3, [r3, #0]
    5d72:	490b      	ldr	r1, [pc, #44]	; (5da0 <system_gclk_gen_enable+0x54>)
    5d74:	1dfa      	adds	r2, r7, #7
    5d76:	7812      	ldrb	r2, [r2, #0]
    5d78:	3208      	adds	r2, #8
    5d7a:	0092      	lsls	r2, r2, #2
    5d7c:	5852      	ldr	r2, [r2, r1]
    5d7e:	2180      	movs	r1, #128	; 0x80
    5d80:	0049      	lsls	r1, r1, #1
    5d82:	430a      	orrs	r2, r1
    5d84:	3308      	adds	r3, #8
    5d86:	009b      	lsls	r3, r3, #2
    5d88:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    5d8a:	4b06      	ldr	r3, [pc, #24]	; (5da4 <system_gclk_gen_enable+0x58>)
    5d8c:	4798      	blx	r3
}
    5d8e:	46c0      	nop			; (mov r8, r8)
    5d90:	46bd      	mov	sp, r7
    5d92:	b002      	add	sp, #8
    5d94:	bd80      	pop	{r7, pc}
    5d96:	46c0      	nop			; (mov r8, r8)
    5d98:	00005bd1 	.word	0x00005bd1
    5d9c:	00005ba9 	.word	0x00005ba9
    5da0:	40001800 	.word	0x40001800
    5da4:	00005bbd 	.word	0x00005bbd

00005da8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5da8:	b580      	push	{r7, lr}
    5daa:	b086      	sub	sp, #24
    5dac:	af00      	add	r7, sp, #0
    5dae:	0002      	movs	r2, r0
    5db0:	1dfb      	adds	r3, r7, #7
    5db2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    5db4:	46c0      	nop			; (mov r8, r8)
    5db6:	1dfb      	adds	r3, r7, #7
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	0018      	movs	r0, r3
    5dbc:	4b24      	ldr	r3, [pc, #144]	; (5e50 <system_gclk_gen_get_hz+0xa8>)
    5dbe:	4798      	blx	r3
    5dc0:	1e03      	subs	r3, r0, #0
    5dc2:	d1f8      	bne.n	5db6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5dc4:	4b23      	ldr	r3, [pc, #140]	; (5e54 <system_gclk_gen_get_hz+0xac>)
    5dc6:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    5dc8:	4a23      	ldr	r2, [pc, #140]	; (5e58 <system_gclk_gen_get_hz+0xb0>)
    5dca:	1dfb      	adds	r3, r7, #7
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	3308      	adds	r3, #8
    5dd0:	009b      	lsls	r3, r3, #2
    5dd2:	589b      	ldr	r3, [r3, r2]
    5dd4:	071b      	lsls	r3, r3, #28
    5dd6:	0f1b      	lsrs	r3, r3, #28
    5dd8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5dda:	0018      	movs	r0, r3
    5ddc:	4b1f      	ldr	r3, [pc, #124]	; (5e5c <system_gclk_gen_get_hz+0xb4>)
    5dde:	4798      	blx	r3
    5de0:	0003      	movs	r3, r0
    5de2:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    5de4:	4a1c      	ldr	r2, [pc, #112]	; (5e58 <system_gclk_gen_get_hz+0xb0>)
    5de6:	1dfb      	adds	r3, r7, #7
    5de8:	781b      	ldrb	r3, [r3, #0]
    5dea:	3308      	adds	r3, #8
    5dec:	009b      	lsls	r3, r3, #2
    5dee:	589b      	ldr	r3, [r3, r2]
    5df0:	04db      	lsls	r3, r3, #19
    5df2:	0fdb      	lsrs	r3, r3, #31
    5df4:	b2da      	uxtb	r2, r3
    5df6:	2313      	movs	r3, #19
    5df8:	18fb      	adds	r3, r7, r3
    5dfa:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    5dfc:	4a16      	ldr	r2, [pc, #88]	; (5e58 <system_gclk_gen_get_hz+0xb0>)
    5dfe:	1dfb      	adds	r3, r7, #7
    5e00:	781b      	ldrb	r3, [r3, #0]
    5e02:	3308      	adds	r3, #8
    5e04:	009b      	lsls	r3, r3, #2
    5e06:	589b      	ldr	r3, [r3, r2]
    5e08:	0c1b      	lsrs	r3, r3, #16
    5e0a:	b29b      	uxth	r3, r3
    5e0c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5e0e:	4b14      	ldr	r3, [pc, #80]	; (5e60 <system_gclk_gen_get_hz+0xb8>)
    5e10:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5e12:	2313      	movs	r3, #19
    5e14:	18fb      	adds	r3, r7, r3
    5e16:	781b      	ldrb	r3, [r3, #0]
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d109      	bne.n	5e30 <system_gclk_gen_get_hz+0x88>
    5e1c:	68fb      	ldr	r3, [r7, #12]
    5e1e:	2b01      	cmp	r3, #1
    5e20:	d906      	bls.n	5e30 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    5e22:	4b10      	ldr	r3, [pc, #64]	; (5e64 <system_gclk_gen_get_hz+0xbc>)
    5e24:	68f9      	ldr	r1, [r7, #12]
    5e26:	6978      	ldr	r0, [r7, #20]
    5e28:	4798      	blx	r3
    5e2a:	0003      	movs	r3, r0
    5e2c:	617b      	str	r3, [r7, #20]
    5e2e:	e00a      	b.n	5e46 <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    5e30:	2313      	movs	r3, #19
    5e32:	18fb      	adds	r3, r7, r3
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	2b00      	cmp	r3, #0
    5e38:	d005      	beq.n	5e46 <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    5e3a:	68fb      	ldr	r3, [r7, #12]
    5e3c:	3301      	adds	r3, #1
    5e3e:	697a      	ldr	r2, [r7, #20]
    5e40:	40da      	lsrs	r2, r3
    5e42:	0013      	movs	r3, r2
    5e44:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    5e46:	697b      	ldr	r3, [r7, #20]
}
    5e48:	0018      	movs	r0, r3
    5e4a:	46bd      	mov	sp, r7
    5e4c:	b006      	add	sp, #24
    5e4e:	bd80      	pop	{r7, pc}
    5e50:	00005bd1 	.word	0x00005bd1
    5e54:	00005ba9 	.word	0x00005ba9
    5e58:	40001800 	.word	0x40001800
    5e5c:	0000532d 	.word	0x0000532d
    5e60:	00005bbd 	.word	0x00005bbd
    5e64:	0000e3a1 	.word	0x0000e3a1

00005e68 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5e68:	b580      	push	{r7, lr}
    5e6a:	b082      	sub	sp, #8
    5e6c:	af00      	add	r7, sp, #0
    5e6e:	0002      	movs	r2, r0
    5e70:	6039      	str	r1, [r7, #0]
    5e72:	1dfb      	adds	r3, r7, #7
    5e74:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    5e76:	1dfb      	adds	r3, r7, #7
    5e78:	781b      	ldrb	r3, [r3, #0]
    5e7a:	0018      	movs	r0, r3
    5e7c:	4b08      	ldr	r3, [pc, #32]	; (5ea0 <system_gclk_chan_set_config+0x38>)
    5e7e:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    5e80:	4908      	ldr	r1, [pc, #32]	; (5ea4 <system_gclk_chan_set_config+0x3c>)
    5e82:	1dfb      	adds	r3, r7, #7
    5e84:	781b      	ldrb	r3, [r3, #0]
    5e86:	683a      	ldr	r2, [r7, #0]
    5e88:	7812      	ldrb	r2, [r2, #0]
    5e8a:	0010      	movs	r0, r2
    5e8c:	220f      	movs	r2, #15
    5e8e:	4002      	ands	r2, r0
    5e90:	3320      	adds	r3, #32
    5e92:	009b      	lsls	r3, r3, #2
    5e94:	505a      	str	r2, [r3, r1]


}
    5e96:	46c0      	nop			; (mov r8, r8)
    5e98:	46bd      	mov	sp, r7
    5e9a:	b002      	add	sp, #8
    5e9c:	bd80      	pop	{r7, pc}
    5e9e:	46c0      	nop			; (mov r8, r8)
    5ea0:	00005f01 	.word	0x00005f01
    5ea4:	40001800 	.word	0x40001800

00005ea8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5ea8:	b580      	push	{r7, lr}
    5eaa:	b082      	sub	sp, #8
    5eac:	af00      	add	r7, sp, #0
    5eae:	0002      	movs	r2, r0
    5eb0:	1dfb      	adds	r3, r7, #7
    5eb2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5eb4:	4b0f      	ldr	r3, [pc, #60]	; (5ef4 <system_gclk_chan_enable+0x4c>)
    5eb6:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    5eb8:	490f      	ldr	r1, [pc, #60]	; (5ef8 <system_gclk_chan_enable+0x50>)
    5eba:	1dfb      	adds	r3, r7, #7
    5ebc:	781b      	ldrb	r3, [r3, #0]
    5ebe:	480e      	ldr	r0, [pc, #56]	; (5ef8 <system_gclk_chan_enable+0x50>)
    5ec0:	1dfa      	adds	r2, r7, #7
    5ec2:	7812      	ldrb	r2, [r2, #0]
    5ec4:	3220      	adds	r2, #32
    5ec6:	0092      	lsls	r2, r2, #2
    5ec8:	5812      	ldr	r2, [r2, r0]
    5eca:	2040      	movs	r0, #64	; 0x40
    5ecc:	4302      	orrs	r2, r0
    5ece:	3320      	adds	r3, #32
    5ed0:	009b      	lsls	r3, r3, #2
    5ed2:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    5ed4:	46c0      	nop			; (mov r8, r8)
    5ed6:	4a08      	ldr	r2, [pc, #32]	; (5ef8 <system_gclk_chan_enable+0x50>)
    5ed8:	1dfb      	adds	r3, r7, #7
    5eda:	781b      	ldrb	r3, [r3, #0]
    5edc:	3320      	adds	r3, #32
    5ede:	009b      	lsls	r3, r3, #2
    5ee0:	589b      	ldr	r3, [r3, r2]
    5ee2:	2240      	movs	r2, #64	; 0x40
    5ee4:	4013      	ands	r3, r2
    5ee6:	d0f6      	beq.n	5ed6 <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    5ee8:	4b04      	ldr	r3, [pc, #16]	; (5efc <system_gclk_chan_enable+0x54>)
    5eea:	4798      	blx	r3
}
    5eec:	46c0      	nop			; (mov r8, r8)
    5eee:	46bd      	mov	sp, r7
    5ef0:	b002      	add	sp, #8
    5ef2:	bd80      	pop	{r7, pc}
    5ef4:	00005ba9 	.word	0x00005ba9
    5ef8:	40001800 	.word	0x40001800
    5efc:	00005bbd 	.word	0x00005bbd

00005f00 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	af00      	add	r7, sp, #0
    5f06:	0002      	movs	r2, r0
    5f08:	1dfb      	adds	r3, r7, #7
    5f0a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5f0c:	4b0f      	ldr	r3, [pc, #60]	; (5f4c <system_gclk_chan_disable+0x4c>)
    5f0e:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    5f10:	490f      	ldr	r1, [pc, #60]	; (5f50 <system_gclk_chan_disable+0x50>)
    5f12:	1dfb      	adds	r3, r7, #7
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	480e      	ldr	r0, [pc, #56]	; (5f50 <system_gclk_chan_disable+0x50>)
    5f18:	1dfa      	adds	r2, r7, #7
    5f1a:	7812      	ldrb	r2, [r2, #0]
    5f1c:	3220      	adds	r2, #32
    5f1e:	0092      	lsls	r2, r2, #2
    5f20:	5812      	ldr	r2, [r2, r0]
    5f22:	2040      	movs	r0, #64	; 0x40
    5f24:	4382      	bics	r2, r0
    5f26:	3320      	adds	r3, #32
    5f28:	009b      	lsls	r3, r3, #2
    5f2a:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    5f2c:	46c0      	nop			; (mov r8, r8)
    5f2e:	4a08      	ldr	r2, [pc, #32]	; (5f50 <system_gclk_chan_disable+0x50>)
    5f30:	1dfb      	adds	r3, r7, #7
    5f32:	781b      	ldrb	r3, [r3, #0]
    5f34:	3320      	adds	r3, #32
    5f36:	009b      	lsls	r3, r3, #2
    5f38:	589b      	ldr	r3, [r3, r2]
    5f3a:	2240      	movs	r2, #64	; 0x40
    5f3c:	4013      	ands	r3, r2
    5f3e:	d1f6      	bne.n	5f2e <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    5f40:	4b04      	ldr	r3, [pc, #16]	; (5f54 <system_gclk_chan_disable+0x54>)
    5f42:	4798      	blx	r3
}
    5f44:	46c0      	nop			; (mov r8, r8)
    5f46:	46bd      	mov	sp, r7
    5f48:	b002      	add	sp, #8
    5f4a:	bd80      	pop	{r7, pc}
    5f4c:	00005ba9 	.word	0x00005ba9
    5f50:	40001800 	.word	0x40001800
    5f54:	00005bbd 	.word	0x00005bbd

00005f58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b084      	sub	sp, #16
    5f5c:	af00      	add	r7, sp, #0
    5f5e:	0002      	movs	r2, r0
    5f60:	1dfb      	adds	r3, r7, #7
    5f62:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    5f64:	4b0d      	ldr	r3, [pc, #52]	; (5f9c <system_gclk_chan_get_hz+0x44>)
    5f66:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    5f68:	4a0d      	ldr	r2, [pc, #52]	; (5fa0 <system_gclk_chan_get_hz+0x48>)
    5f6a:	1dfb      	adds	r3, r7, #7
    5f6c:	781b      	ldrb	r3, [r3, #0]
    5f6e:	3320      	adds	r3, #32
    5f70:	009b      	lsls	r3, r3, #2
    5f72:	589b      	ldr	r3, [r3, r2]
    5f74:	071b      	lsls	r3, r3, #28
    5f76:	0f1b      	lsrs	r3, r3, #28
    5f78:	b2da      	uxtb	r2, r3
    5f7a:	230f      	movs	r3, #15
    5f7c:	18fb      	adds	r3, r7, r3
    5f7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    5f80:	4b08      	ldr	r3, [pc, #32]	; (5fa4 <system_gclk_chan_get_hz+0x4c>)
    5f82:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5f84:	230f      	movs	r3, #15
    5f86:	18fb      	adds	r3, r7, r3
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	0018      	movs	r0, r3
    5f8c:	4b06      	ldr	r3, [pc, #24]	; (5fa8 <system_gclk_chan_get_hz+0x50>)
    5f8e:	4798      	blx	r3
    5f90:	0003      	movs	r3, r0
}
    5f92:	0018      	movs	r0, r3
    5f94:	46bd      	mov	sp, r7
    5f96:	b004      	add	sp, #16
    5f98:	bd80      	pop	{r7, pc}
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	00005ba9 	.word	0x00005ba9
    5fa0:	40001800 	.word	0x40001800
    5fa4:	00005bbd 	.word	0x00005bbd
    5fa8:	00005da9 	.word	0x00005da9

00005fac <system_pinmux_get_group_from_gpio_pin>:
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b084      	sub	sp, #16
    5fb0:	af00      	add	r7, sp, #0
    5fb2:	0002      	movs	r2, r0
    5fb4:	1dfb      	adds	r3, r7, #7
    5fb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5fb8:	230f      	movs	r3, #15
    5fba:	18fb      	adds	r3, r7, r3
    5fbc:	1dfa      	adds	r2, r7, #7
    5fbe:	7812      	ldrb	r2, [r2, #0]
    5fc0:	09d2      	lsrs	r2, r2, #7
    5fc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5fc4:	230e      	movs	r3, #14
    5fc6:	18fb      	adds	r3, r7, r3
    5fc8:	1dfa      	adds	r2, r7, #7
    5fca:	7812      	ldrb	r2, [r2, #0]
    5fcc:	0952      	lsrs	r2, r2, #5
    5fce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5fd0:	4b0d      	ldr	r3, [pc, #52]	; (6008 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5fd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5fd4:	230f      	movs	r3, #15
    5fd6:	18fb      	adds	r3, r7, r3
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d10f      	bne.n	5ffe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5fde:	230f      	movs	r3, #15
    5fe0:	18fb      	adds	r3, r7, r3
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	009b      	lsls	r3, r3, #2
    5fe6:	2210      	movs	r2, #16
    5fe8:	4694      	mov	ip, r2
    5fea:	44bc      	add	ip, r7
    5fec:	4463      	add	r3, ip
    5fee:	3b08      	subs	r3, #8
    5ff0:	681a      	ldr	r2, [r3, #0]
    5ff2:	230e      	movs	r3, #14
    5ff4:	18fb      	adds	r3, r7, r3
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	01db      	lsls	r3, r3, #7
    5ffa:	18d3      	adds	r3, r2, r3
    5ffc:	e000      	b.n	6000 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5ffe:	2300      	movs	r3, #0
}
    6000:	0018      	movs	r0, r3
    6002:	46bd      	mov	sp, r7
    6004:	b004      	add	sp, #16
    6006:	bd80      	pop	{r7, pc}
    6008:	40002800 	.word	0x40002800

0000600c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    600c:	b580      	push	{r7, lr}
    600e:	b088      	sub	sp, #32
    6010:	af00      	add	r7, sp, #0
    6012:	60f8      	str	r0, [r7, #12]
    6014:	60b9      	str	r1, [r7, #8]
    6016:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6018:	2300      	movs	r3, #0
    601a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	78db      	ldrb	r3, [r3, #3]
    6020:	2201      	movs	r2, #1
    6022:	4053      	eors	r3, r2
    6024:	b2db      	uxtb	r3, r3
    6026:	2b00      	cmp	r3, #0
    6028:	d035      	beq.n	6096 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    602a:	687b      	ldr	r3, [r7, #4]
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	2b80      	cmp	r3, #128	; 0x80
    6030:	d00b      	beq.n	604a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6032:	69fb      	ldr	r3, [r7, #28]
    6034:	2280      	movs	r2, #128	; 0x80
    6036:	0252      	lsls	r2, r2, #9
    6038:	4313      	orrs	r3, r2
    603a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    603c:	687b      	ldr	r3, [r7, #4]
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	061b      	lsls	r3, r3, #24
    6042:	001a      	movs	r2, r3
    6044:	69fb      	ldr	r3, [r7, #28]
    6046:	4313      	orrs	r3, r2
    6048:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    604a:	687b      	ldr	r3, [r7, #4]
    604c:	785b      	ldrb	r3, [r3, #1]
    604e:	2b00      	cmp	r3, #0
    6050:	d003      	beq.n	605a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6056:	2b02      	cmp	r3, #2
    6058:	d110      	bne.n	607c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    605a:	69fb      	ldr	r3, [r7, #28]
    605c:	2280      	movs	r2, #128	; 0x80
    605e:	0292      	lsls	r2, r2, #10
    6060:	4313      	orrs	r3, r2
    6062:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	789b      	ldrb	r3, [r3, #2]
    6068:	2b00      	cmp	r3, #0
    606a:	d004      	beq.n	6076 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    606c:	69fb      	ldr	r3, [r7, #28]
    606e:	2280      	movs	r2, #128	; 0x80
    6070:	02d2      	lsls	r2, r2, #11
    6072:	4313      	orrs	r3, r2
    6074:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6076:	68fb      	ldr	r3, [r7, #12]
    6078:	68ba      	ldr	r2, [r7, #8]
    607a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	785b      	ldrb	r3, [r3, #1]
    6080:	2b01      	cmp	r3, #1
    6082:	d003      	beq.n	608c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6084:	687b      	ldr	r3, [r7, #4]
    6086:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6088:	2b02      	cmp	r3, #2
    608a:	d107      	bne.n	609c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    608c:	69fb      	ldr	r3, [r7, #28]
    608e:	4a22      	ldr	r2, [pc, #136]	; (6118 <_system_pinmux_config+0x10c>)
    6090:	4013      	ands	r3, r2
    6092:	61fb      	str	r3, [r7, #28]
    6094:	e002      	b.n	609c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6096:	68fb      	ldr	r3, [r7, #12]
    6098:	68ba      	ldr	r2, [r7, #8]
    609a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    609c:	68bb      	ldr	r3, [r7, #8]
    609e:	041b      	lsls	r3, r3, #16
    60a0:	0c1b      	lsrs	r3, r3, #16
    60a2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    60a4:	68bb      	ldr	r3, [r7, #8]
    60a6:	0c1b      	lsrs	r3, r3, #16
    60a8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60aa:	69ba      	ldr	r2, [r7, #24]
    60ac:	69fb      	ldr	r3, [r7, #28]
    60ae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    60b0:	22a0      	movs	r2, #160	; 0xa0
    60b2:	05d2      	lsls	r2, r2, #23
    60b4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60b6:	68fb      	ldr	r3, [r7, #12]
    60b8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60ba:	697a      	ldr	r2, [r7, #20]
    60bc:	69fb      	ldr	r3, [r7, #28]
    60be:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    60c0:	22d0      	movs	r2, #208	; 0xd0
    60c2:	0612      	lsls	r2, r2, #24
    60c4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60c6:	68fb      	ldr	r3, [r7, #12]
    60c8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    60ca:	687b      	ldr	r3, [r7, #4]
    60cc:	78db      	ldrb	r3, [r3, #3]
    60ce:	2201      	movs	r2, #1
    60d0:	4053      	eors	r3, r2
    60d2:	b2db      	uxtb	r3, r3
    60d4:	2b00      	cmp	r3, #0
    60d6:	d01a      	beq.n	610e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    60d8:	69fa      	ldr	r2, [r7, #28]
    60da:	2380      	movs	r3, #128	; 0x80
    60dc:	02db      	lsls	r3, r3, #11
    60de:	4013      	ands	r3, r2
    60e0:	d00a      	beq.n	60f8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	789b      	ldrb	r3, [r3, #2]
    60e6:	2b01      	cmp	r3, #1
    60e8:	d103      	bne.n	60f2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    60ea:	68fb      	ldr	r3, [r7, #12]
    60ec:	68ba      	ldr	r2, [r7, #8]
    60ee:	619a      	str	r2, [r3, #24]
    60f0:	e002      	b.n	60f8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    60f2:	68fb      	ldr	r3, [r7, #12]
    60f4:	68ba      	ldr	r2, [r7, #8]
    60f6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	785b      	ldrb	r3, [r3, #1]
    60fc:	2b01      	cmp	r3, #1
    60fe:	d003      	beq.n	6108 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6100:	687b      	ldr	r3, [r7, #4]
    6102:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6104:	2b02      	cmp	r3, #2
    6106:	d102      	bne.n	610e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6108:	68fb      	ldr	r3, [r7, #12]
    610a:	68ba      	ldr	r2, [r7, #8]
    610c:	609a      	str	r2, [r3, #8]
		}
	}
}
    610e:	46c0      	nop			; (mov r8, r8)
    6110:	46bd      	mov	sp, r7
    6112:	b008      	add	sp, #32
    6114:	bd80      	pop	{r7, pc}
    6116:	46c0      	nop			; (mov r8, r8)
    6118:	fffbffff 	.word	0xfffbffff

0000611c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    611c:	b580      	push	{r7, lr}
    611e:	b084      	sub	sp, #16
    6120:	af00      	add	r7, sp, #0
    6122:	0002      	movs	r2, r0
    6124:	6039      	str	r1, [r7, #0]
    6126:	1dfb      	adds	r3, r7, #7
    6128:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    612a:	1dfb      	adds	r3, r7, #7
    612c:	781b      	ldrb	r3, [r3, #0]
    612e:	0018      	movs	r0, r3
    6130:	4b0a      	ldr	r3, [pc, #40]	; (615c <system_pinmux_pin_set_config+0x40>)
    6132:	4798      	blx	r3
    6134:	0003      	movs	r3, r0
    6136:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6138:	1dfb      	adds	r3, r7, #7
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	221f      	movs	r2, #31
    613e:	4013      	ands	r3, r2
    6140:	2201      	movs	r2, #1
    6142:	409a      	lsls	r2, r3
    6144:	0013      	movs	r3, r2
    6146:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6148:	683a      	ldr	r2, [r7, #0]
    614a:	68b9      	ldr	r1, [r7, #8]
    614c:	68fb      	ldr	r3, [r7, #12]
    614e:	0018      	movs	r0, r3
    6150:	4b03      	ldr	r3, [pc, #12]	; (6160 <system_pinmux_pin_set_config+0x44>)
    6152:	4798      	blx	r3
}
    6154:	46c0      	nop			; (mov r8, r8)
    6156:	46bd      	mov	sp, r7
    6158:	b004      	add	sp, #16
    615a:	bd80      	pop	{r7, pc}
    615c:	00005fad 	.word	0x00005fad
    6160:	0000600d 	.word	0x0000600d

00006164 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6164:	b580      	push	{r7, lr}
    6166:	af00      	add	r7, sp, #0
	return;
    6168:	46c0      	nop			; (mov r8, r8)
}
    616a:	46bd      	mov	sp, r7
    616c:	bd80      	pop	{r7, pc}
	...

00006170 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6170:	b580      	push	{r7, lr}
    6172:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6174:	4b06      	ldr	r3, [pc, #24]	; (6190 <system_init+0x20>)
    6176:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6178:	4b06      	ldr	r3, [pc, #24]	; (6194 <system_init+0x24>)
    617a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    617c:	4b06      	ldr	r3, [pc, #24]	; (6198 <system_init+0x28>)
    617e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6180:	4b06      	ldr	r3, [pc, #24]	; (619c <system_init+0x2c>)
    6182:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6184:	4b06      	ldr	r3, [pc, #24]	; (61a0 <system_init+0x30>)
    6186:	4798      	blx	r3
}
    6188:	46c0      	nop			; (mov r8, r8)
    618a:	46bd      	mov	sp, r7
    618c:	bd80      	pop	{r7, pc}
    618e:	46c0      	nop			; (mov r8, r8)
    6190:	0000587d 	.word	0x0000587d
    6194:	00000391 	.word	0x00000391
    6198:	00006165 	.word	0x00006165
    619c:	00001441 	.word	0x00001441
    61a0:	00006165 	.word	0x00006165

000061a4 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    61a4:	b580      	push	{r7, lr}
    61a6:	b084      	sub	sp, #16
    61a8:	af00      	add	r7, sp, #0
    61aa:	60f8      	str	r0, [r7, #12]
    61ac:	60b9      	str	r1, [r7, #8]
    61ae:	1dfb      	adds	r3, r7, #7
    61b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    61b2:	1dfb      	adds	r3, r7, #7
    61b4:	781a      	ldrb	r2, [r3, #0]
    61b6:	68fb      	ldr	r3, [r7, #12]
    61b8:	3202      	adds	r2, #2
    61ba:	0092      	lsls	r2, r2, #2
    61bc:	68b9      	ldr	r1, [r7, #8]
    61be:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    61c0:	1dfb      	adds	r3, r7, #7
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	2b02      	cmp	r3, #2
    61c6:	d107      	bne.n	61d8 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    61c8:	68fb      	ldr	r3, [r7, #12]
    61ca:	7e1b      	ldrb	r3, [r3, #24]
    61cc:	2210      	movs	r2, #16
    61ce:	4313      	orrs	r3, r2
    61d0:	b2da      	uxtb	r2, r3
    61d2:	68fb      	ldr	r3, [r7, #12]
    61d4:	761a      	strb	r2, [r3, #24]
    61d6:	e019      	b.n	620c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    61d8:	1dfb      	adds	r3, r7, #7
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	2b03      	cmp	r3, #3
    61de:	d107      	bne.n	61f0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    61e0:	68fb      	ldr	r3, [r7, #12]
    61e2:	7e1b      	ldrb	r3, [r3, #24]
    61e4:	2220      	movs	r2, #32
    61e6:	4313      	orrs	r3, r2
    61e8:	b2da      	uxtb	r2, r3
    61ea:	68fb      	ldr	r3, [r7, #12]
    61ec:	761a      	strb	r2, [r3, #24]
    61ee:	e00d      	b.n	620c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	7e1b      	ldrb	r3, [r3, #24]
    61f4:	b25a      	sxtb	r2, r3
    61f6:	1dfb      	adds	r3, r7, #7
    61f8:	781b      	ldrb	r3, [r3, #0]
    61fa:	2101      	movs	r1, #1
    61fc:	4099      	lsls	r1, r3
    61fe:	000b      	movs	r3, r1
    6200:	b25b      	sxtb	r3, r3
    6202:	4313      	orrs	r3, r2
    6204:	b25b      	sxtb	r3, r3
    6206:	b2da      	uxtb	r2, r3
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    620c:	2300      	movs	r3, #0
}
    620e:	0018      	movs	r0, r3
    6210:	46bd      	mov	sp, r7
    6212:	b004      	add	sp, #16
    6214:	bd80      	pop	{r7, pc}
	...

00006218 <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    6218:	b580      	push	{r7, lr}
    621a:	af00      	add	r7, sp, #0
    621c:	2000      	movs	r0, #0
    621e:	4b02      	ldr	r3, [pc, #8]	; (6228 <TC0_Handler+0x10>)
    6220:	4798      	blx	r3
    6222:	46c0      	nop			; (mov r8, r8)
    6224:	46bd      	mov	sp, r7
    6226:	bd80      	pop	{r7, pc}
    6228:	0000627d 	.word	0x0000627d

0000622c <TC1_Handler>:
    622c:	b580      	push	{r7, lr}
    622e:	af00      	add	r7, sp, #0
    6230:	2001      	movs	r0, #1
    6232:	4b02      	ldr	r3, [pc, #8]	; (623c <TC1_Handler+0x10>)
    6234:	4798      	blx	r3
    6236:	46c0      	nop			; (mov r8, r8)
    6238:	46bd      	mov	sp, r7
    623a:	bd80      	pop	{r7, pc}
    623c:	0000627d 	.word	0x0000627d

00006240 <TC2_Handler>:
    6240:	b580      	push	{r7, lr}
    6242:	af00      	add	r7, sp, #0
    6244:	2002      	movs	r0, #2
    6246:	4b02      	ldr	r3, [pc, #8]	; (6250 <TC2_Handler+0x10>)
    6248:	4798      	blx	r3
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	46bd      	mov	sp, r7
    624e:	bd80      	pop	{r7, pc}
    6250:	0000627d 	.word	0x0000627d

00006254 <TC3_Handler>:
    6254:	b580      	push	{r7, lr}
    6256:	af00      	add	r7, sp, #0
    6258:	2003      	movs	r0, #3
    625a:	4b02      	ldr	r3, [pc, #8]	; (6264 <TC3_Handler+0x10>)
    625c:	4798      	blx	r3
    625e:	46c0      	nop			; (mov r8, r8)
    6260:	46bd      	mov	sp, r7
    6262:	bd80      	pop	{r7, pc}
    6264:	0000627d 	.word	0x0000627d

00006268 <TC4_Handler>:
    6268:	b580      	push	{r7, lr}
    626a:	af00      	add	r7, sp, #0
    626c:	2004      	movs	r0, #4
    626e:	4b02      	ldr	r3, [pc, #8]	; (6278 <TC4_Handler+0x10>)
    6270:	4798      	blx	r3
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	46bd      	mov	sp, r7
    6276:	bd80      	pop	{r7, pc}
    6278:	0000627d 	.word	0x0000627d

0000627c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    627c:	b580      	push	{r7, lr}
    627e:	b084      	sub	sp, #16
    6280:	af00      	add	r7, sp, #0
    6282:	0002      	movs	r2, r0
    6284:	1dfb      	adds	r3, r7, #7
    6286:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    6288:	1dfb      	adds	r3, r7, #7
    628a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    628c:	4b28      	ldr	r3, [pc, #160]	; (6330 <_tc_interrupt_handler+0xb4>)
    628e:	0092      	lsls	r2, r2, #2
    6290:	58d3      	ldr	r3, [r2, r3]
    6292:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6294:	68fb      	ldr	r3, [r7, #12]
    6296:	681b      	ldr	r3, [r3, #0]
    6298:	7a9b      	ldrb	r3, [r3, #10]
    629a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    629c:	68fa      	ldr	r2, [r7, #12]
    629e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    62a0:	4013      	ands	r3, r2
    62a2:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    62a4:	68fb      	ldr	r3, [r7, #12]
    62a6:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    62a8:	230b      	movs	r3, #11
    62aa:	18fb      	adds	r3, r7, r3
    62ac:	400a      	ands	r2, r1
    62ae:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    62b0:	230b      	movs	r3, #11
    62b2:	18fb      	adds	r3, r7, r3
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	2201      	movs	r2, #1
    62b8:	4013      	ands	r3, r2
    62ba:	d008      	beq.n	62ce <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    62bc:	68fb      	ldr	r3, [r7, #12]
    62be:	689b      	ldr	r3, [r3, #8]
    62c0:	68fa      	ldr	r2, [r7, #12]
    62c2:	0010      	movs	r0, r2
    62c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    62c6:	68fb      	ldr	r3, [r7, #12]
    62c8:	681b      	ldr	r3, [r3, #0]
    62ca:	2201      	movs	r2, #1
    62cc:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    62ce:	230b      	movs	r3, #11
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	781b      	ldrb	r3, [r3, #0]
    62d4:	2202      	movs	r2, #2
    62d6:	4013      	ands	r3, r2
    62d8:	d008      	beq.n	62ec <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    62da:	68fb      	ldr	r3, [r7, #12]
    62dc:	68db      	ldr	r3, [r3, #12]
    62de:	68fa      	ldr	r2, [r7, #12]
    62e0:	0010      	movs	r0, r2
    62e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    62e4:	68fb      	ldr	r3, [r7, #12]
    62e6:	681b      	ldr	r3, [r3, #0]
    62e8:	2202      	movs	r2, #2
    62ea:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    62ec:	230b      	movs	r3, #11
    62ee:	18fb      	adds	r3, r7, r3
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	2210      	movs	r2, #16
    62f4:	4013      	ands	r3, r2
    62f6:	d008      	beq.n	630a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    62f8:	68fb      	ldr	r3, [r7, #12]
    62fa:	691b      	ldr	r3, [r3, #16]
    62fc:	68fa      	ldr	r2, [r7, #12]
    62fe:	0010      	movs	r0, r2
    6300:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    6302:	68fb      	ldr	r3, [r7, #12]
    6304:	681b      	ldr	r3, [r3, #0]
    6306:	2210      	movs	r2, #16
    6308:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    630a:	230b      	movs	r3, #11
    630c:	18fb      	adds	r3, r7, r3
    630e:	781b      	ldrb	r3, [r3, #0]
    6310:	2220      	movs	r2, #32
    6312:	4013      	ands	r3, r2
    6314:	d008      	beq.n	6328 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    6316:	68fb      	ldr	r3, [r7, #12]
    6318:	695b      	ldr	r3, [r3, #20]
    631a:	68fa      	ldr	r2, [r7, #12]
    631c:	0010      	movs	r0, r2
    631e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6320:	68fb      	ldr	r3, [r7, #12]
    6322:	681b      	ldr	r3, [r3, #0]
    6324:	2220      	movs	r2, #32
    6326:	729a      	strb	r2, [r3, #10]
	}
}
    6328:	46c0      	nop			; (mov r8, r8)
    632a:	46bd      	mov	sp, r7
    632c:	b004      	add	sp, #16
    632e:	bd80      	pop	{r7, pc}
    6330:	20000f68 	.word	0x20000f68

00006334 <system_gclk_chan_get_config_defaults>:
{
    6334:	b580      	push	{r7, lr}
    6336:	b082      	sub	sp, #8
    6338:	af00      	add	r7, sp, #0
    633a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	2200      	movs	r2, #0
    6340:	701a      	strb	r2, [r3, #0]
}
    6342:	46c0      	nop			; (mov r8, r8)
    6344:	46bd      	mov	sp, r7
    6346:	b002      	add	sp, #8
    6348:	bd80      	pop	{r7, pc}
	...

0000634c <system_apb_clock_set_mask>:
{
    634c:	b580      	push	{r7, lr}
    634e:	b082      	sub	sp, #8
    6350:	af00      	add	r7, sp, #0
    6352:	0002      	movs	r2, r0
    6354:	6039      	str	r1, [r7, #0]
    6356:	1dfb      	adds	r3, r7, #7
    6358:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    635a:	1dfb      	adds	r3, r7, #7
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	2b04      	cmp	r3, #4
    6360:	d827      	bhi.n	63b2 <system_apb_clock_set_mask+0x66>
    6362:	009a      	lsls	r2, r3, #2
    6364:	4b16      	ldr	r3, [pc, #88]	; (63c0 <system_apb_clock_set_mask+0x74>)
    6366:	18d3      	adds	r3, r2, r3
    6368:	681b      	ldr	r3, [r3, #0]
    636a:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    636c:	4b15      	ldr	r3, [pc, #84]	; (63c4 <system_apb_clock_set_mask+0x78>)
    636e:	4a15      	ldr	r2, [pc, #84]	; (63c4 <system_apb_clock_set_mask+0x78>)
    6370:	6951      	ldr	r1, [r2, #20]
    6372:	683a      	ldr	r2, [r7, #0]
    6374:	430a      	orrs	r2, r1
    6376:	615a      	str	r2, [r3, #20]
			break;
    6378:	e01d      	b.n	63b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    637a:	4b12      	ldr	r3, [pc, #72]	; (63c4 <system_apb_clock_set_mask+0x78>)
    637c:	4a11      	ldr	r2, [pc, #68]	; (63c4 <system_apb_clock_set_mask+0x78>)
    637e:	6991      	ldr	r1, [r2, #24]
    6380:	683a      	ldr	r2, [r7, #0]
    6382:	430a      	orrs	r2, r1
    6384:	619a      	str	r2, [r3, #24]
			break;
    6386:	e016      	b.n	63b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    6388:	4b0e      	ldr	r3, [pc, #56]	; (63c4 <system_apb_clock_set_mask+0x78>)
    638a:	4a0e      	ldr	r2, [pc, #56]	; (63c4 <system_apb_clock_set_mask+0x78>)
    638c:	69d1      	ldr	r1, [r2, #28]
    638e:	683a      	ldr	r2, [r7, #0]
    6390:	430a      	orrs	r2, r1
    6392:	61da      	str	r2, [r3, #28]
			break;
    6394:	e00f      	b.n	63b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    6396:	4b0b      	ldr	r3, [pc, #44]	; (63c4 <system_apb_clock_set_mask+0x78>)
    6398:	4a0a      	ldr	r2, [pc, #40]	; (63c4 <system_apb_clock_set_mask+0x78>)
    639a:	6a11      	ldr	r1, [r2, #32]
    639c:	683a      	ldr	r2, [r7, #0]
    639e:	430a      	orrs	r2, r1
    63a0:	621a      	str	r2, [r3, #32]
			break;
    63a2:	e008      	b.n	63b6 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    63a4:	4b07      	ldr	r3, [pc, #28]	; (63c4 <system_apb_clock_set_mask+0x78>)
    63a6:	4a07      	ldr	r2, [pc, #28]	; (63c4 <system_apb_clock_set_mask+0x78>)
    63a8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    63aa:	683a      	ldr	r2, [r7, #0]
    63ac:	430a      	orrs	r2, r1
    63ae:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    63b0:	e001      	b.n	63b6 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    63b2:	2317      	movs	r3, #23
    63b4:	e000      	b.n	63b8 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    63b6:	2300      	movs	r3, #0
}
    63b8:	0018      	movs	r0, r3
    63ba:	46bd      	mov	sp, r7
    63bc:	b002      	add	sp, #8
    63be:	bd80      	pop	{r7, pc}
    63c0:	000165d8 	.word	0x000165d8
    63c4:	40000400 	.word	0x40000400

000063c8 <system_pinmux_get_config_defaults>:
{
    63c8:	b580      	push	{r7, lr}
    63ca:	b082      	sub	sp, #8
    63cc:	af00      	add	r7, sp, #0
    63ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	2280      	movs	r2, #128	; 0x80
    63d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	2200      	movs	r2, #0
    63da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	2201      	movs	r2, #1
    63e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    63e2:	687b      	ldr	r3, [r7, #4]
    63e4:	2200      	movs	r2, #0
    63e6:	70da      	strb	r2, [r3, #3]
}
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	46bd      	mov	sp, r7
    63ec:	b002      	add	sp, #8
    63ee:	bd80      	pop	{r7, pc}

000063f0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b084      	sub	sp, #16
    63f4:	af00      	add	r7, sp, #0
    63f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    63f8:	687b      	ldr	r3, [r7, #4]
    63fa:	681b      	ldr	r3, [r3, #0]
    63fc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	691b      	ldr	r3, [r3, #16]
    6402:	1e5a      	subs	r2, r3, #1
    6404:	4193      	sbcs	r3, r2
    6406:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
    6408:	0018      	movs	r0, r3
    640a:	46bd      	mov	sp, r7
    640c:	b004      	add	sp, #16
    640e:	bd80      	pop	{r7, pc}

00006410 <tc_sync_read_count>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_sync_read_count(
		const struct tc_module *const module_inst)
{
    6410:	b580      	push	{r7, lr}
    6412:	b084      	sub	sp, #16
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	687b      	ldr	r3, [r7, #4]
    6422:	0018      	movs	r0, r3
    6424:	4b0a      	ldr	r3, [pc, #40]	; (6450 <tc_sync_read_count+0x40>)
    6426:	4798      	blx	r3
    6428:	1e03      	subs	r3, r0, #0
    642a:	d1f9      	bne.n	6420 <tc_sync_read_count+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    642c:	68fb      	ldr	r3, [r7, #12]
    642e:	2200      	movs	r2, #0
    6430:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    6432:	46c0      	nop			; (mov r8, r8)
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	0018      	movs	r0, r3
    6438:	4b05      	ldr	r3, [pc, #20]	; (6450 <tc_sync_read_count+0x40>)
    643a:	4798      	blx	r3
    643c:	1e03      	subs	r3, r0, #0
    643e:	d1f9      	bne.n	6434 <tc_sync_read_count+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    6440:	68fb      	ldr	r3, [r7, #12]
    6442:	2280      	movs	r2, #128	; 0x80
    6444:	715a      	strb	r2, [r3, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
#endif
}
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	46bd      	mov	sp, r7
    644a:	b004      	add	sp, #16
    644c:	bd80      	pop	{r7, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	000063f1 	.word	0x000063f1

00006454 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    6454:	b590      	push	{r4, r7, lr}
    6456:	b089      	sub	sp, #36	; 0x24
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    645c:	2308      	movs	r3, #8
    645e:	18fb      	adds	r3, r7, r3
    6460:	4a0e      	ldr	r2, [pc, #56]	; (649c <_tc_get_inst_index+0x48>)
    6462:	ca13      	ldmia	r2!, {r0, r1, r4}
    6464:	c313      	stmia	r3!, {r0, r1, r4}
    6466:	ca03      	ldmia	r2!, {r0, r1}
    6468:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    646a:	2300      	movs	r3, #0
    646c:	61fb      	str	r3, [r7, #28]
    646e:	e00d      	b.n	648c <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    6470:	2308      	movs	r3, #8
    6472:	18fb      	adds	r3, r7, r3
    6474:	69fa      	ldr	r2, [r7, #28]
    6476:	0092      	lsls	r2, r2, #2
    6478:	58d2      	ldr	r2, [r2, r3]
    647a:	687b      	ldr	r3, [r7, #4]
    647c:	429a      	cmp	r2, r3
    647e:	d102      	bne.n	6486 <_tc_get_inst_index+0x32>
			return i;
    6480:	69fb      	ldr	r3, [r7, #28]
    6482:	b2db      	uxtb	r3, r3
    6484:	e006      	b.n	6494 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    6486:	69fb      	ldr	r3, [r7, #28]
    6488:	3301      	adds	r3, #1
    648a:	61fb      	str	r3, [r7, #28]
    648c:	69fb      	ldr	r3, [r7, #28]
    648e:	2b04      	cmp	r3, #4
    6490:	d9ee      	bls.n	6470 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6492:	2300      	movs	r3, #0
}
    6494:	0018      	movs	r0, r3
    6496:	46bd      	mov	sp, r7
    6498:	b009      	add	sp, #36	; 0x24
    649a:	bd90      	pop	{r4, r7, pc}
    649c:	000165ec 	.word	0x000165ec

000064a0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    64a0:	b590      	push	{r4, r7, lr}
    64a2:	b095      	sub	sp, #84	; 0x54
    64a4:	af00      	add	r7, sp, #0
    64a6:	60f8      	str	r0, [r7, #12]
    64a8:	60b9      	str	r1, [r7, #8]
    64aa:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
    64ac:	2300      	movs	r3, #0
    64ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    64b0:	234b      	movs	r3, #75	; 0x4b
    64b2:	18fb      	adds	r3, r7, r3
    64b4:	2200      	movs	r2, #0
    64b6:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    64b8:	2347      	movs	r3, #71	; 0x47
    64ba:	18fc      	adds	r4, r7, r3
    64bc:	68bb      	ldr	r3, [r7, #8]
    64be:	0018      	movs	r0, r3
    64c0:	4bd6      	ldr	r3, [pc, #856]	; (681c <tc_init+0x37c>)
    64c2:	4798      	blx	r3
    64c4:	0003      	movs	r3, r0
    64c6:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    64c8:	2340      	movs	r3, #64	; 0x40
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	4ad4      	ldr	r2, [pc, #848]	; (6820 <tc_init+0x380>)
    64ce:	6811      	ldr	r1, [r2, #0]
    64d0:	6019      	str	r1, [r3, #0]
    64d2:	7912      	ldrb	r2, [r2, #4]
    64d4:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    64d6:	2318      	movs	r3, #24
    64d8:	18fb      	adds	r3, r7, r3
    64da:	4ad2      	ldr	r2, [pc, #840]	; (6824 <tc_init+0x384>)
    64dc:	ca13      	ldmia	r2!, {r0, r1, r4}
    64de:	c313      	stmia	r3!, {r0, r1, r4}
    64e0:	ca13      	ldmia	r2!, {r0, r1, r4}
    64e2:	c313      	stmia	r3!, {r0, r1, r4}
    64e4:	ca13      	ldmia	r2!, {r0, r1, r4}
    64e6:	c313      	stmia	r3!, {r0, r1, r4}
    64e8:	6812      	ldr	r2, [r2, #0]
    64ea:	601a      	str	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    64ec:	234a      	movs	r3, #74	; 0x4a
    64ee:	18fb      	adds	r3, r7, r3
    64f0:	2200      	movs	r2, #0
    64f2:	701a      	strb	r2, [r3, #0]
    64f4:	e00e      	b.n	6514 <tc_init+0x74>
		module_inst->callback[i]        = NULL;
    64f6:	234a      	movs	r3, #74	; 0x4a
    64f8:	18fb      	adds	r3, r7, r3
    64fa:	781a      	ldrb	r2, [r3, #0]
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	3202      	adds	r2, #2
    6500:	0092      	lsls	r2, r2, #2
    6502:	2100      	movs	r1, #0
    6504:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    6506:	234a      	movs	r3, #74	; 0x4a
    6508:	18fb      	adds	r3, r7, r3
    650a:	781a      	ldrb	r2, [r3, #0]
    650c:	234a      	movs	r3, #74	; 0x4a
    650e:	18fb      	adds	r3, r7, r3
    6510:	3201      	adds	r2, #1
    6512:	701a      	strb	r2, [r3, #0]
    6514:	234a      	movs	r3, #74	; 0x4a
    6516:	18fb      	adds	r3, r7, r3
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	2b03      	cmp	r3, #3
    651c:	d9eb      	bls.n	64f6 <tc_init+0x56>
	}
	module_inst->register_callback_mask     = 0x00;
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	2200      	movs	r2, #0
    6522:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	2200      	movs	r2, #0
    6528:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    652a:	2347      	movs	r3, #71	; 0x47
    652c:	18fb      	adds	r3, r7, r3
    652e:	781a      	ldrb	r2, [r3, #0]
    6530:	4bbd      	ldr	r3, [pc, #756]	; (6828 <tc_init+0x388>)
    6532:	0092      	lsls	r2, r2, #2
    6534:	68f9      	ldr	r1, [r7, #12]
    6536:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	68ba      	ldr	r2, [r7, #8]
    653c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	2234      	movs	r2, #52	; 0x34
    6542:	5c9a      	ldrb	r2, [r3, r2]
    6544:	68fb      	ldr	r3, [r7, #12]
    6546:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    6548:	687b      	ldr	r3, [r7, #4]
    654a:	78db      	ldrb	r3, [r3, #3]
    654c:	2b08      	cmp	r3, #8
    654e:	d107      	bne.n	6560 <tc_init+0xc0>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    6550:	2347      	movs	r3, #71	; 0x47
    6552:	18fb      	adds	r3, r7, r3
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	2201      	movs	r2, #1
    6558:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    655a:	d001      	beq.n	6560 <tc_init+0xc0>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    655c:	2317      	movs	r3, #23
    655e:	e1ec      	b.n	693a <tc_init+0x49a>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    6560:	687b      	ldr	r3, [r7, #4]
    6562:	78da      	ldrb	r2, [r3, #3]
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    6568:	68bb      	ldr	r3, [r7, #8]
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	2201      	movs	r2, #1
    656e:	4013      	ands	r3, r2
    6570:	d001      	beq.n	6576 <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6572:	2305      	movs	r3, #5
    6574:	e1e1      	b.n	693a <tc_init+0x49a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    6576:	68bb      	ldr	r3, [r7, #8]
    6578:	7adb      	ldrb	r3, [r3, #11]
    657a:	b2db      	uxtb	r3, r3
    657c:	001a      	movs	r2, r3
    657e:	2302      	movs	r3, #2
    6580:	4013      	ands	r3, r2
    6582:	d001      	beq.n	6588 <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    6584:	231c      	movs	r3, #28
    6586:	e1d8      	b.n	693a <tc_init+0x49a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    6588:	68bb      	ldr	r3, [r7, #8]
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	2202      	movs	r2, #2
    658e:	4013      	ands	r3, r2
    6590:	d001      	beq.n	6596 <tc_init+0xf6>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    6592:	231c      	movs	r3, #28
    6594:	e1d1      	b.n	693a <tc_init+0x49a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    6596:	687b      	ldr	r3, [r7, #4]
    6598:	7c1b      	ldrb	r3, [r3, #16]
    659a:	2b00      	cmp	r3, #0
    659c:	d017      	beq.n	65ce <tc_init+0x12e>
		system_pinmux_get_config_defaults(&pin_config);
    659e:	2314      	movs	r3, #20
    65a0:	18fb      	adds	r3, r7, r3
    65a2:	0018      	movs	r0, r3
    65a4:	4ba1      	ldr	r3, [pc, #644]	; (682c <tc_init+0x38c>)
    65a6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    65a8:	687b      	ldr	r3, [r7, #4]
    65aa:	699b      	ldr	r3, [r3, #24]
    65ac:	b2da      	uxtb	r2, r3
    65ae:	2314      	movs	r3, #20
    65b0:	18fb      	adds	r3, r7, r3
    65b2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    65b4:	2314      	movs	r3, #20
    65b6:	18fb      	adds	r3, r7, r3
    65b8:	2201      	movs	r2, #1
    65ba:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    65bc:	687b      	ldr	r3, [r7, #4]
    65be:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    65c0:	b2db      	uxtb	r3, r3
    65c2:	2214      	movs	r2, #20
    65c4:	18ba      	adds	r2, r7, r2
    65c6:	0011      	movs	r1, r2
    65c8:	0018      	movs	r0, r3
    65ca:	4b99      	ldr	r3, [pc, #612]	; (6830 <tc_init+0x390>)
    65cc:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    65ce:	687b      	ldr	r3, [r7, #4]
    65d0:	7f1b      	ldrb	r3, [r3, #28]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d017      	beq.n	6606 <tc_init+0x166>
		system_pinmux_get_config_defaults(&pin_config);
    65d6:	2314      	movs	r3, #20
    65d8:	18fb      	adds	r3, r7, r3
    65da:	0018      	movs	r0, r3
    65dc:	4b93      	ldr	r3, [pc, #588]	; (682c <tc_init+0x38c>)
    65de:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65e4:	b2da      	uxtb	r2, r3
    65e6:	2314      	movs	r3, #20
    65e8:	18fb      	adds	r3, r7, r3
    65ea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    65ec:	2314      	movs	r3, #20
    65ee:	18fb      	adds	r3, r7, r3
    65f0:	2201      	movs	r2, #1
    65f2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    65f8:	b2db      	uxtb	r3, r3
    65fa:	2214      	movs	r2, #20
    65fc:	18ba      	adds	r2, r7, r2
    65fe:	0011      	movs	r1, r2
    6600:	0018      	movs	r0, r3
    6602:	4b8b      	ldr	r3, [pc, #556]	; (6830 <tc_init+0x390>)
    6604:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6606:	2347      	movs	r3, #71	; 0x47
    6608:	18fb      	adds	r3, r7, r3
    660a:	781b      	ldrb	r3, [r3, #0]
    660c:	005a      	lsls	r2, r3, #1
    660e:	2318      	movs	r3, #24
    6610:	18fb      	adds	r3, r7, r3
    6612:	0092      	lsls	r2, r2, #2
    6614:	58d3      	ldr	r3, [r2, r3]
    6616:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    6618:	2347      	movs	r3, #71	; 0x47
    661a:	18fb      	adds	r3, r7, r3
    661c:	781b      	ldrb	r3, [r3, #0]
    661e:	005b      	lsls	r3, r3, #1
    6620:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    6622:	2318      	movs	r3, #24
    6624:	18fb      	adds	r3, r7, r3
    6626:	0092      	lsls	r2, r2, #2
    6628:	58d3      	ldr	r3, [r2, r3]
    662a:	0019      	movs	r1, r3
    662c:	4b81      	ldr	r3, [pc, #516]	; (6834 <tc_init+0x394>)
    662e:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    6630:	687b      	ldr	r3, [r7, #4]
    6632:	78db      	ldrb	r3, [r3, #3]
    6634:	2b08      	cmp	r3, #8
    6636:	d11c      	bne.n	6672 <tc_init+0x1d2>
    6638:	2347      	movs	r3, #71	; 0x47
    663a:	18fb      	adds	r3, r7, r3
    663c:	781b      	ldrb	r3, [r3, #0]
    663e:	3301      	adds	r3, #1
    6640:	2b04      	cmp	r3, #4
    6642:	dc16      	bgt.n	6672 <tc_init+0x1d2>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6644:	2347      	movs	r3, #71	; 0x47
    6646:	18fb      	adds	r3, r7, r3
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	3301      	adds	r3, #1
    664c:	005a      	lsls	r2, r3, #1
    664e:	2318      	movs	r3, #24
    6650:	18fb      	adds	r3, r7, r3
    6652:	0092      	lsls	r2, r2, #2
    6654:	58d3      	ldr	r3, [r2, r3]
    6656:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    6658:	2347      	movs	r3, #71	; 0x47
    665a:	18fb      	adds	r3, r7, r3
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	3301      	adds	r3, #1
    6660:	005b      	lsls	r3, r3, #1
    6662:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    6664:	2318      	movs	r3, #24
    6666:	18fb      	adds	r3, r7, r3
    6668:	0092      	lsls	r2, r2, #2
    666a:	58d3      	ldr	r3, [r2, r3]
    666c:	0019      	movs	r1, r3
    666e:	4b71      	ldr	r3, [pc, #452]	; (6834 <tc_init+0x394>)
    6670:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    6672:	2310      	movs	r3, #16
    6674:	18fb      	adds	r3, r7, r3
    6676:	0018      	movs	r0, r3
    6678:	4b6f      	ldr	r3, [pc, #444]	; (6838 <tc_init+0x398>)
    667a:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	781a      	ldrb	r2, [r3, #0]
    6680:	2310      	movs	r3, #16
    6682:	18fb      	adds	r3, r7, r3
    6684:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    6686:	2347      	movs	r3, #71	; 0x47
    6688:	18fb      	adds	r3, r7, r3
    668a:	781b      	ldrb	r3, [r3, #0]
    668c:	2240      	movs	r2, #64	; 0x40
    668e:	18ba      	adds	r2, r7, r2
    6690:	5cd3      	ldrb	r3, [r2, r3]
    6692:	2210      	movs	r2, #16
    6694:	18ba      	adds	r2, r7, r2
    6696:	0011      	movs	r1, r2
    6698:	0018      	movs	r0, r3
    669a:	4b68      	ldr	r3, [pc, #416]	; (683c <tc_init+0x39c>)
    669c:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    669e:	2347      	movs	r3, #71	; 0x47
    66a0:	18fb      	adds	r3, r7, r3
    66a2:	781b      	ldrb	r3, [r3, #0]
    66a4:	2240      	movs	r2, #64	; 0x40
    66a6:	18ba      	adds	r2, r7, r2
    66a8:	5cd3      	ldrb	r3, [r2, r3]
    66aa:	0018      	movs	r0, r3
    66ac:	4b64      	ldr	r3, [pc, #400]	; (6840 <tc_init+0x3a0>)
    66ae:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    66b4:	687b      	ldr	r3, [r7, #4]
    66b6:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    66b8:	4313      	orrs	r3, r2
    66ba:	b2db      	uxtb	r3, r3
    66bc:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    66be:	687b      	ldr	r3, [r7, #4]
    66c0:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    66c2:	4313      	orrs	r3, r2
    66c4:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    66c6:	2349      	movs	r3, #73	; 0x49
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	2200      	movs	r2, #0
    66cc:	701a      	strb	r2, [r3, #0]
    66ce:	e018      	b.n	6702 <tc_init+0x262>
		if (config->enable_capture_on_channel[i] == true) {
    66d0:	2349      	movs	r3, #73	; 0x49
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	687a      	ldr	r2, [r7, #4]
    66d8:	18d3      	adds	r3, r2, r3
    66da:	7a5b      	ldrb	r3, [r3, #9]
    66dc:	2b00      	cmp	r3, #0
    66de:	d009      	beq.n	66f4 <tc_init+0x254>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    66e0:	2349      	movs	r3, #73	; 0x49
    66e2:	18fb      	adds	r3, r7, r3
    66e4:	781b      	ldrb	r3, [r3, #0]
    66e6:	2280      	movs	r2, #128	; 0x80
    66e8:	0252      	lsls	r2, r2, #9
    66ea:	409a      	lsls	r2, r3
    66ec:	0013      	movs	r3, r2
    66ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    66f0:	4313      	orrs	r3, r2
    66f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    66f4:	2349      	movs	r3, #73	; 0x49
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	781a      	ldrb	r2, [r3, #0]
    66fa:	2349      	movs	r3, #73	; 0x49
    66fc:	18fb      	adds	r3, r7, r3
    66fe:	3201      	adds	r2, #1
    6700:	701a      	strb	r2, [r3, #0]
    6702:	2349      	movs	r3, #73	; 0x49
    6704:	18fb      	adds	r3, r7, r3
    6706:	781b      	ldrb	r3, [r3, #0]
    6708:	2b01      	cmp	r3, #1
    670a:	d9e1      	bls.n	66d0 <tc_init+0x230>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    670c:	2348      	movs	r3, #72	; 0x48
    670e:	18fb      	adds	r3, r7, r3
    6710:	2200      	movs	r2, #0
    6712:	701a      	strb	r2, [r3, #0]
    6714:	e018      	b.n	6748 <tc_init+0x2a8>
		if (config->enable_capture_on_IO[i] == true) {
    6716:	2348      	movs	r3, #72	; 0x48
    6718:	18fb      	adds	r3, r7, r3
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	687a      	ldr	r2, [r7, #4]
    671e:	18d3      	adds	r3, r2, r3
    6720:	7adb      	ldrb	r3, [r3, #11]
    6722:	2b00      	cmp	r3, #0
    6724:	d009      	beq.n	673a <tc_init+0x29a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    6726:	2348      	movs	r3, #72	; 0x48
    6728:	18fb      	adds	r3, r7, r3
    672a:	781b      	ldrb	r3, [r3, #0]
    672c:	2280      	movs	r2, #128	; 0x80
    672e:	0352      	lsls	r2, r2, #13
    6730:	409a      	lsls	r2, r3
    6732:	0013      	movs	r3, r2
    6734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6736:	4313      	orrs	r3, r2
    6738:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    673a:	2348      	movs	r3, #72	; 0x48
    673c:	18fb      	adds	r3, r7, r3
    673e:	781a      	ldrb	r2, [r3, #0]
    6740:	2348      	movs	r3, #72	; 0x48
    6742:	18fb      	adds	r3, r7, r3
    6744:	3201      	adds	r2, #1
    6746:	701a      	strb	r2, [r3, #0]
    6748:	2348      	movs	r3, #72	; 0x48
    674a:	18fb      	adds	r3, r7, r3
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	2b01      	cmp	r3, #1
    6750:	d9e1      	bls.n	6716 <tc_init+0x276>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	785b      	ldrb	r3, [r3, #1]
    6756:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	789b      	ldrb	r3, [r3, #2]
    675c:	01db      	lsls	r3, r3, #7
    675e:	4313      	orrs	r3, r2
    6760:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    6762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6764:	4313      	orrs	r3, r2
    6766:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    6768:	46c0      	nop			; (mov r8, r8)
    676a:	68fb      	ldr	r3, [r7, #12]
    676c:	0018      	movs	r0, r3
    676e:	4b35      	ldr	r3, [pc, #212]	; (6844 <tc_init+0x3a4>)
    6770:	4798      	blx	r3
    6772:	1e03      	subs	r3, r0, #0
    6774:	d1f9      	bne.n	676a <tc_init+0x2ca>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    6776:	68bb      	ldr	r3, [r7, #8]
    6778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    677a:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    677c:	46c0      	nop			; (mov r8, r8)
    677e:	68fb      	ldr	r3, [r7, #12]
    6780:	0018      	movs	r0, r3
    6782:	4b30      	ldr	r3, [pc, #192]	; (6844 <tc_init+0x3a4>)
    6784:	4798      	blx	r3
    6786:	1e03      	subs	r3, r0, #0
    6788:	d1f9      	bne.n	677e <tc_init+0x2de>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	799a      	ldrb	r2, [r3, #6]
    678e:	68bb      	ldr	r3, [r7, #8]
    6790:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    6792:	687b      	ldr	r3, [r7, #4]
    6794:	7b5b      	ldrb	r3, [r3, #13]
    6796:	2b00      	cmp	r3, #0
    6798:	d003      	beq.n	67a2 <tc_init+0x302>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    679a:	234b      	movs	r3, #75	; 0x4b
    679c:	18fb      	adds	r3, r7, r3
    679e:	2204      	movs	r2, #4
    67a0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	7b9b      	ldrb	r3, [r3, #14]
    67a6:	2b00      	cmp	r3, #0
    67a8:	d007      	beq.n	67ba <tc_init+0x31a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    67aa:	234b      	movs	r3, #75	; 0x4b
    67ac:	18fb      	adds	r3, r7, r3
    67ae:	224b      	movs	r2, #75	; 0x4b
    67b0:	18ba      	adds	r2, r7, r2
    67b2:	7812      	ldrb	r2, [r2, #0]
    67b4:	2101      	movs	r1, #1
    67b6:	430a      	orrs	r2, r1
    67b8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    67ba:	46c0      	nop			; (mov r8, r8)
    67bc:	68fb      	ldr	r3, [r7, #12]
    67be:	0018      	movs	r0, r3
    67c0:	4b20      	ldr	r3, [pc, #128]	; (6844 <tc_init+0x3a4>)
    67c2:	4798      	blx	r3
    67c4:	1e03      	subs	r3, r0, #0
    67c6:	d1f9      	bne.n	67bc <tc_init+0x31c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    67c8:	68bb      	ldr	r3, [r7, #8]
    67ca:	22ff      	movs	r2, #255	; 0xff
    67cc:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    67ce:	234b      	movs	r3, #75	; 0x4b
    67d0:	18fb      	adds	r3, r7, r3
    67d2:	781b      	ldrb	r3, [r3, #0]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d00b      	beq.n	67f0 <tc_init+0x350>
		while (tc_is_syncing(module_inst)) {
    67d8:	46c0      	nop			; (mov r8, r8)
    67da:	68fb      	ldr	r3, [r7, #12]
    67dc:	0018      	movs	r0, r3
    67de:	4b19      	ldr	r3, [pc, #100]	; (6844 <tc_init+0x3a4>)
    67e0:	4798      	blx	r3
    67e2:	1e03      	subs	r3, r0, #0
    67e4:	d1f9      	bne.n	67da <tc_init+0x33a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    67e6:	68bb      	ldr	r3, [r7, #8]
    67e8:	224b      	movs	r2, #75	; 0x4b
    67ea:	18ba      	adds	r2, r7, r2
    67ec:	7812      	ldrb	r2, [r2, #0]
    67ee:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    67f0:	687b      	ldr	r3, [r7, #4]
    67f2:	7a1a      	ldrb	r2, [r3, #8]
    67f4:	68bb      	ldr	r3, [r7, #8]
    67f6:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    67f8:	46c0      	nop			; (mov r8, r8)
    67fa:	68fb      	ldr	r3, [r7, #12]
    67fc:	0018      	movs	r0, r3
    67fe:	4b11      	ldr	r3, [pc, #68]	; (6844 <tc_init+0x3a4>)
    6800:	4798      	blx	r3
    6802:	1e03      	subs	r3, r0, #0
    6804:	d1f9      	bne.n	67fa <tc_init+0x35a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    6806:	68fb      	ldr	r3, [r7, #12]
    6808:	791b      	ldrb	r3, [r3, #4]
    680a:	2b04      	cmp	r3, #4
    680c:	d01c      	beq.n	6848 <tc_init+0x3a8>
    680e:	2b08      	cmp	r3, #8
    6810:	d100      	bne.n	6814 <tc_init+0x374>
    6812:	e06e      	b.n	68f2 <tc_init+0x452>
    6814:	2b00      	cmp	r3, #0
    6816:	d049      	beq.n	68ac <tc_init+0x40c>
    6818:	e08e      	b.n	6938 <tc_init+0x498>
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	00006455 	.word	0x00006455
    6820:	00016600 	.word	0x00016600
    6824:	00016608 	.word	0x00016608
    6828:	20000f68 	.word	0x20000f68
    682c:	000063c9 	.word	0x000063c9
    6830:	0000611d 	.word	0x0000611d
    6834:	0000634d 	.word	0x0000634d
    6838:	00006335 	.word	0x00006335
    683c:	00005e69 	.word	0x00005e69
    6840:	00005ea9 	.word	0x00005ea9
    6844:	000063f1 	.word	0x000063f1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    6848:	46c0      	nop			; (mov r8, r8)
    684a:	68fb      	ldr	r3, [r7, #12]
    684c:	0018      	movs	r0, r3
    684e:	4b3d      	ldr	r3, [pc, #244]	; (6944 <tc_init+0x4a4>)
    6850:	4798      	blx	r3
    6852:	1e03      	subs	r3, r0, #0
    6854:	d1f9      	bne.n	684a <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    6856:	687b      	ldr	r3, [r7, #4]
    6858:	2228      	movs	r2, #40	; 0x28
    685a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    685c:	68bb      	ldr	r3, [r7, #8]
    685e:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    6860:	46c0      	nop			; (mov r8, r8)
    6862:	68fb      	ldr	r3, [r7, #12]
    6864:	0018      	movs	r0, r3
    6866:	4b37      	ldr	r3, [pc, #220]	; (6944 <tc_init+0x4a4>)
    6868:	4798      	blx	r3
    686a:	1e03      	subs	r3, r0, #0
    686c:	d1f9      	bne.n	6862 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    686e:	687b      	ldr	r3, [r7, #4]
    6870:	2229      	movs	r2, #41	; 0x29
    6872:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    6874:	68bb      	ldr	r3, [r7, #8]
    6876:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    6878:	46c0      	nop			; (mov r8, r8)
    687a:	68fb      	ldr	r3, [r7, #12]
    687c:	0018      	movs	r0, r3
    687e:	4b31      	ldr	r3, [pc, #196]	; (6944 <tc_init+0x4a4>)
    6880:	4798      	blx	r3
    6882:	1e03      	subs	r3, r0, #0
    6884:	d1f9      	bne.n	687a <tc_init+0x3da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	222a      	movs	r2, #42	; 0x2a
    688a:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    688c:	68bb      	ldr	r3, [r7, #8]
    688e:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    6890:	46c0      	nop			; (mov r8, r8)
    6892:	68fb      	ldr	r3, [r7, #12]
    6894:	0018      	movs	r0, r3
    6896:	4b2b      	ldr	r3, [pc, #172]	; (6944 <tc_init+0x4a4>)
    6898:	4798      	blx	r3
    689a:	1e03      	subs	r3, r0, #0
    689c:	d1f9      	bne.n	6892 <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	222b      	movs	r2, #43	; 0x2b
    68a2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    68a4:	68bb      	ldr	r3, [r7, #8]
    68a6:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    68a8:	2300      	movs	r3, #0
    68aa:	e046      	b.n	693a <tc_init+0x49a>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    68ac:	46c0      	nop			; (mov r8, r8)
    68ae:	68fb      	ldr	r3, [r7, #12]
    68b0:	0018      	movs	r0, r3
    68b2:	4b24      	ldr	r3, [pc, #144]	; (6944 <tc_init+0x4a4>)
    68b4:	4798      	blx	r3
    68b6:	1e03      	subs	r3, r0, #0
    68b8:	d1f9      	bne.n	68ae <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    68be:	68bb      	ldr	r3, [r7, #8]
    68c0:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    68c2:	46c0      	nop			; (mov r8, r8)
    68c4:	68fb      	ldr	r3, [r7, #12]
    68c6:	0018      	movs	r0, r3
    68c8:	4b1e      	ldr	r3, [pc, #120]	; (6944 <tc_init+0x4a4>)
    68ca:	4798      	blx	r3
    68cc:	1e03      	subs	r3, r0, #0
    68ce:	d1f9      	bne.n	68c4 <tc_init+0x424>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    68d4:	68bb      	ldr	r3, [r7, #8]
    68d6:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    68d8:	46c0      	nop			; (mov r8, r8)
    68da:	68fb      	ldr	r3, [r7, #12]
    68dc:	0018      	movs	r0, r3
    68de:	4b19      	ldr	r3, [pc, #100]	; (6944 <tc_init+0x4a4>)
    68e0:	4798      	blx	r3
    68e2:	1e03      	subs	r3, r0, #0
    68e4:	d1f9      	bne.n	68da <tc_init+0x43a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    68ea:	68bb      	ldr	r3, [r7, #8]
    68ec:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    68ee:	2300      	movs	r3, #0
    68f0:	e023      	b.n	693a <tc_init+0x49a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    68f2:	46c0      	nop			; (mov r8, r8)
    68f4:	68fb      	ldr	r3, [r7, #12]
    68f6:	0018      	movs	r0, r3
    68f8:	4b12      	ldr	r3, [pc, #72]	; (6944 <tc_init+0x4a4>)
    68fa:	4798      	blx	r3
    68fc:	1e03      	subs	r3, r0, #0
    68fe:	d1f9      	bne.n	68f4 <tc_init+0x454>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6904:	68bb      	ldr	r3, [r7, #8]
    6906:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    6908:	46c0      	nop			; (mov r8, r8)
    690a:	68fb      	ldr	r3, [r7, #12]
    690c:	0018      	movs	r0, r3
    690e:	4b0d      	ldr	r3, [pc, #52]	; (6944 <tc_init+0x4a4>)
    6910:	4798      	blx	r3
    6912:	1e03      	subs	r3, r0, #0
    6914:	d1f9      	bne.n	690a <tc_init+0x46a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    6916:	687b      	ldr	r3, [r7, #4]
    6918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    691a:	68bb      	ldr	r3, [r7, #8]
    691c:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	68fb      	ldr	r3, [r7, #12]
    6922:	0018      	movs	r0, r3
    6924:	4b07      	ldr	r3, [pc, #28]	; (6944 <tc_init+0x4a4>)
    6926:	4798      	blx	r3
    6928:	1e03      	subs	r3, r0, #0
    692a:	d1f9      	bne.n	6920 <tc_init+0x480>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    6930:	68bb      	ldr	r3, [r7, #8]
    6932:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    6934:	2300      	movs	r3, #0
    6936:	e000      	b.n	693a <tc_init+0x49a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    6938:	2317      	movs	r3, #23
}
    693a:	0018      	movs	r0, r3
    693c:	46bd      	mov	sp, r7
    693e:	b015      	add	sp, #84	; 0x54
    6940:	bd90      	pop	{r4, r7, pc}
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	000063f1 	.word	0x000063f1

00006948 <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    6948:	b580      	push	{r7, lr}
    694a:	b084      	sub	sp, #16
    694c:	af00      	add	r7, sp, #0
    694e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Read synchronization */
	tc_sync_read_count(module_inst);
    6950:	687b      	ldr	r3, [r7, #4]
    6952:	0018      	movs	r0, r3
    6954:	4b12      	ldr	r3, [pc, #72]	; (69a0 <tc_get_count_value+0x58>)
    6956:	4798      	blx	r3
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    6958:	687b      	ldr	r3, [r7, #4]
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	687b      	ldr	r3, [r7, #4]
    6962:	0018      	movs	r0, r3
    6964:	4b0f      	ldr	r3, [pc, #60]	; (69a4 <tc_get_count_value+0x5c>)
    6966:	4798      	blx	r3
    6968:	1e03      	subs	r3, r0, #0
    696a:	d1f9      	bne.n	6960 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    696c:	687b      	ldr	r3, [r7, #4]
    696e:	791b      	ldrb	r3, [r3, #4]
    6970:	2b04      	cmp	r3, #4
    6972:	d004      	beq.n	697e <tc_get_count_value+0x36>
    6974:	2b08      	cmp	r3, #8
    6976:	d00a      	beq.n	698e <tc_get_count_value+0x46>
    6978:	2b00      	cmp	r3, #0
    697a:	d004      	beq.n	6986 <tc_get_count_value+0x3e>
    697c:	e00a      	b.n	6994 <tc_get_count_value+0x4c>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    697e:	68fb      	ldr	r3, [r7, #12]
    6980:	7d1b      	ldrb	r3, [r3, #20]
    6982:	b2db      	uxtb	r3, r3
    6984:	e007      	b.n	6996 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    6986:	68fb      	ldr	r3, [r7, #12]
    6988:	8a9b      	ldrh	r3, [r3, #20]
    698a:	b29b      	uxth	r3, r3
    698c:	e003      	b.n	6996 <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    698e:	68fb      	ldr	r3, [r7, #12]
    6990:	695b      	ldr	r3, [r3, #20]
    6992:	e000      	b.n	6996 <tc_get_count_value+0x4e>
	}

	Assert(false);
	return 0;
    6994:	2300      	movs	r3, #0
}
    6996:	0018      	movs	r0, r3
    6998:	46bd      	mov	sp, r7
    699a:	b004      	add	sp, #16
    699c:	bd80      	pop	{r7, pc}
    699e:	46c0      	nop			; (mov r8, r8)
    69a0:	00006411 	.word	0x00006411
    69a4:	000063f1 	.word	0x000063f1

000069a8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    69a8:	b580      	push	{r7, lr}
    69aa:	b086      	sub	sp, #24
    69ac:	af00      	add	r7, sp, #0
    69ae:	60f8      	str	r0, [r7, #12]
    69b0:	607a      	str	r2, [r7, #4]
    69b2:	230b      	movs	r3, #11
    69b4:	18fb      	adds	r3, r7, r3
    69b6:	1c0a      	adds	r2, r1, #0
    69b8:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    69ba:	68fb      	ldr	r3, [r7, #12]
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    69c0:	46c0      	nop			; (mov r8, r8)
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	0018      	movs	r0, r3
    69c6:	4b38      	ldr	r3, [pc, #224]	; (6aa8 <tc_set_compare_value+0x100>)
    69c8:	4798      	blx	r3
    69ca:	1e03      	subs	r3, r0, #0
    69cc:	d1f9      	bne.n	69c2 <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    69ce:	68fb      	ldr	r3, [r7, #12]
    69d0:	791b      	ldrb	r3, [r3, #4]
    69d2:	2b04      	cmp	r3, #4
    69d4:	d004      	beq.n	69e0 <tc_set_compare_value+0x38>
    69d6:	2b08      	cmp	r3, #8
    69d8:	d043      	beq.n	6a62 <tc_set_compare_value+0xba>
    69da:	2b00      	cmp	r3, #0
    69dc:	d020      	beq.n	6a20 <tc_set_compare_value+0x78>
    69de:	e05e      	b.n	6a9e <tc_set_compare_value+0xf6>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    69e0:	230b      	movs	r3, #11
    69e2:	18fb      	adds	r3, r7, r3
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	2b01      	cmp	r3, #1
    69e8:	d81a      	bhi.n	6a20 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    69ea:	68fb      	ldr	r3, [r7, #12]
    69ec:	7e9b      	ldrb	r3, [r3, #26]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d00b      	beq.n	6a0a <tc_set_compare_value+0x62>
					tc_module->COUNT8.CCBUF[channel_index].reg =
    69f2:	230b      	movs	r3, #11
    69f4:	18fb      	adds	r3, r7, r3
    69f6:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    69f8:	687a      	ldr	r2, [r7, #4]
    69fa:	b2d0      	uxtb	r0, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    69fc:	697a      	ldr	r2, [r7, #20]
    69fe:	2130      	movs	r1, #48	; 0x30
    6a00:	18d3      	adds	r3, r2, r3
    6a02:	185b      	adds	r3, r3, r1
    6a04:	1c02      	adds	r2, r0, #0
    6a06:	701a      	strb	r2, [r3, #0]
    6a08:	e008      	b.n	6a1c <tc_set_compare_value+0x74>
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    6a0a:	230b      	movs	r3, #11
    6a0c:	18fb      	adds	r3, r7, r3
    6a0e:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    6a10:	687a      	ldr	r2, [r7, #4]
    6a12:	b2d1      	uxtb	r1, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    6a14:	697a      	ldr	r2, [r7, #20]
    6a16:	18d3      	adds	r3, r2, r3
    6a18:	1c0a      	adds	r2, r1, #0
    6a1a:	771a      	strb	r2, [r3, #28]
				}
				return STATUS_OK;
    6a1c:	2300      	movs	r3, #0
    6a1e:	e03f      	b.n	6aa0 <tc_set_compare_value+0xf8>
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    6a20:	230b      	movs	r3, #11
    6a22:	18fb      	adds	r3, r7, r3
    6a24:	781b      	ldrb	r3, [r3, #0]
    6a26:	2b01      	cmp	r3, #1
    6a28:	d81b      	bhi.n	6a62 <tc_set_compare_value+0xba>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    6a2a:	68fb      	ldr	r3, [r7, #12]
    6a2c:	7e9b      	ldrb	r3, [r3, #26]
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d009      	beq.n	6a46 <tc_set_compare_value+0x9e>
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6a32:	230b      	movs	r3, #11
    6a34:	18fb      	adds	r3, r7, r3
    6a36:	781a      	ldrb	r2, [r3, #0]
							(uint16_t)compare;
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	b299      	uxth	r1, r3
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6a3c:	697b      	ldr	r3, [r7, #20]
    6a3e:	3218      	adds	r2, #24
    6a40:	0052      	lsls	r2, r2, #1
    6a42:	52d1      	strh	r1, [r2, r3]
    6a44:	e00b      	b.n	6a5e <tc_set_compare_value+0xb6>
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    6a46:	230b      	movs	r3, #11
    6a48:	18fb      	adds	r3, r7, r3
    6a4a:	781b      	ldrb	r3, [r3, #0]
							(uint16_t)compare;
    6a4c:	687a      	ldr	r2, [r7, #4]
    6a4e:	b291      	uxth	r1, r2
					tc_module->COUNT16.CC[channel_index].reg =
    6a50:	697a      	ldr	r2, [r7, #20]
    6a52:	330c      	adds	r3, #12
    6a54:	005b      	lsls	r3, r3, #1
    6a56:	18d3      	adds	r3, r2, r3
    6a58:	3304      	adds	r3, #4
    6a5a:	1c0a      	adds	r2, r1, #0
    6a5c:	801a      	strh	r2, [r3, #0]
				}
				return STATUS_OK;
    6a5e:	2300      	movs	r3, #0
    6a60:	e01e      	b.n	6aa0 <tc_set_compare_value+0xf8>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    6a62:	230b      	movs	r3, #11
    6a64:	18fb      	adds	r3, r7, r3
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	2b01      	cmp	r3, #1
    6a6a:	d818      	bhi.n	6a9e <tc_set_compare_value+0xf6>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    6a6c:	68fb      	ldr	r3, [r7, #12]
    6a6e:	7e9b      	ldrb	r3, [r3, #26]
    6a70:	2b00      	cmp	r3, #0
    6a72:	d008      	beq.n	6a86 <tc_set_compare_value+0xde>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    6a74:	230b      	movs	r3, #11
    6a76:	18fb      	adds	r3, r7, r3
    6a78:	781a      	ldrb	r2, [r3, #0]
    6a7a:	697b      	ldr	r3, [r7, #20]
    6a7c:	320c      	adds	r2, #12
    6a7e:	0092      	lsls	r2, r2, #2
    6a80:	6879      	ldr	r1, [r7, #4]
    6a82:	50d1      	str	r1, [r2, r3]
    6a84:	e009      	b.n	6a9a <tc_set_compare_value+0xf2>
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    6a86:	230b      	movs	r3, #11
    6a88:	18fb      	adds	r3, r7, r3
    6a8a:	781b      	ldrb	r3, [r3, #0]
    6a8c:	697a      	ldr	r2, [r7, #20]
    6a8e:	3306      	adds	r3, #6
    6a90:	009b      	lsls	r3, r3, #2
    6a92:	18d3      	adds	r3, r2, r3
    6a94:	3304      	adds	r3, #4
    6a96:	687a      	ldr	r2, [r7, #4]
    6a98:	601a      	str	r2, [r3, #0]
						(uint32_t)compare;
				}
				return STATUS_OK;
    6a9a:	2300      	movs	r3, #0
    6a9c:	e000      	b.n	6aa0 <tc_set_compare_value+0xf8>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    6a9e:	2317      	movs	r3, #23
}
    6aa0:	0018      	movs	r0, r3
    6aa2:	46bd      	mov	sp, r7
    6aa4:	b006      	add	sp, #24
    6aa6:	bd80      	pop	{r7, pc}
    6aa8:	000063f1 	.word	0x000063f1

00006aac <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6aac:	b580      	push	{r7, lr}
    6aae:	b082      	sub	sp, #8
    6ab0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6ab2:	4b19      	ldr	r3, [pc, #100]	; (6b18 <Reset_Handler+0x6c>)
    6ab4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6ab6:	4b19      	ldr	r3, [pc, #100]	; (6b1c <Reset_Handler+0x70>)
    6ab8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6aba:	687a      	ldr	r2, [r7, #4]
    6abc:	683b      	ldr	r3, [r7, #0]
    6abe:	429a      	cmp	r2, r3
    6ac0:	d00c      	beq.n	6adc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6ac2:	e007      	b.n	6ad4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6ac4:	683b      	ldr	r3, [r7, #0]
    6ac6:	1d1a      	adds	r2, r3, #4
    6ac8:	603a      	str	r2, [r7, #0]
    6aca:	687a      	ldr	r2, [r7, #4]
    6acc:	1d11      	adds	r1, r2, #4
    6ace:	6079      	str	r1, [r7, #4]
    6ad0:	6812      	ldr	r2, [r2, #0]
    6ad2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6ad4:	683a      	ldr	r2, [r7, #0]
    6ad6:	4b12      	ldr	r3, [pc, #72]	; (6b20 <Reset_Handler+0x74>)
    6ad8:	429a      	cmp	r2, r3
    6ada:	d3f3      	bcc.n	6ac4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6adc:	4b11      	ldr	r3, [pc, #68]	; (6b24 <Reset_Handler+0x78>)
    6ade:	603b      	str	r3, [r7, #0]
    6ae0:	e004      	b.n	6aec <Reset_Handler+0x40>
                *pDest++ = 0;
    6ae2:	683b      	ldr	r3, [r7, #0]
    6ae4:	1d1a      	adds	r2, r3, #4
    6ae6:	603a      	str	r2, [r7, #0]
    6ae8:	2200      	movs	r2, #0
    6aea:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6aec:	683a      	ldr	r2, [r7, #0]
    6aee:	4b0e      	ldr	r3, [pc, #56]	; (6b28 <Reset_Handler+0x7c>)
    6af0:	429a      	cmp	r2, r3
    6af2:	d3f6      	bcc.n	6ae2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6af4:	4b0d      	ldr	r3, [pc, #52]	; (6b2c <Reset_Handler+0x80>)
    6af6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6af8:	4b0d      	ldr	r3, [pc, #52]	; (6b30 <Reset_Handler+0x84>)
    6afa:	687a      	ldr	r2, [r7, #4]
    6afc:	21ff      	movs	r1, #255	; 0xff
    6afe:	438a      	bics	r2, r1
    6b00:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6b02:	4a0c      	ldr	r2, [pc, #48]	; (6b34 <Reset_Handler+0x88>)
    6b04:	6853      	ldr	r3, [r2, #4]
    6b06:	2180      	movs	r1, #128	; 0x80
    6b08:	430b      	orrs	r3, r1
    6b0a:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6b0c:	4b0a      	ldr	r3, [pc, #40]	; (6b38 <Reset_Handler+0x8c>)
    6b0e:	4798      	blx	r3

        /* Branch to main function */
        main();
    6b10:	4b0a      	ldr	r3, [pc, #40]	; (6b3c <Reset_Handler+0x90>)
    6b12:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6b14:	e7fe      	b.n	6b14 <Reset_Handler+0x68>
    6b16:	46c0      	nop			; (mov r8, r8)
    6b18:	00017bbc 	.word	0x00017bbc
    6b1c:	20000000 	.word	0x20000000
    6b20:	20000a28 	.word	0x20000a28
    6b24:	20000a28 	.word	0x20000a28
    6b28:	20001924 	.word	0x20001924
    6b2c:	00000000 	.word	0x00000000
    6b30:	e000ed00 	.word	0xe000ed00
    6b34:	41004000 	.word	0x41004000
    6b38:	0001142d 	.word	0x0001142d
    6b3c:	0000b4a5 	.word	0x0000b4a5

00006b40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6b40:	b580      	push	{r7, lr}
    6b42:	af00      	add	r7, sp, #0
        while (1) {
    6b44:	e7fe      	b.n	6b44 <Dummy_Handler+0x4>
	...

00006b48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6b48:	b580      	push	{r7, lr}
    6b4a:	b086      	sub	sp, #24
    6b4c:	af00      	add	r7, sp, #0
    6b4e:	60f8      	str	r0, [r7, #12]
    6b50:	60b9      	str	r1, [r7, #8]
    6b52:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6b54:	2300      	movs	r3, #0
    6b56:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6b58:	68fb      	ldr	r3, [r7, #12]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d012      	beq.n	6b84 <_read+0x3c>
		return -1;
    6b5e:	2301      	movs	r3, #1
    6b60:	425b      	negs	r3, r3
    6b62:	e013      	b.n	6b8c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6b64:	4b0b      	ldr	r3, [pc, #44]	; (6b94 <_read+0x4c>)
    6b66:	681a      	ldr	r2, [r3, #0]
    6b68:	4b0b      	ldr	r3, [pc, #44]	; (6b98 <_read+0x50>)
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	68b9      	ldr	r1, [r7, #8]
    6b6e:	0018      	movs	r0, r3
    6b70:	4790      	blx	r2
		ptr++;
    6b72:	68bb      	ldr	r3, [r7, #8]
    6b74:	3301      	adds	r3, #1
    6b76:	60bb      	str	r3, [r7, #8]
		nChars++;
    6b78:	697b      	ldr	r3, [r7, #20]
    6b7a:	3301      	adds	r3, #1
    6b7c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	3b01      	subs	r3, #1
    6b82:	607b      	str	r3, [r7, #4]
    6b84:	687b      	ldr	r3, [r7, #4]
    6b86:	2b00      	cmp	r3, #0
    6b88:	dcec      	bgt.n	6b64 <_read+0x1c>
	}
	return nChars;
    6b8a:	697b      	ldr	r3, [r7, #20]
}
    6b8c:	0018      	movs	r0, r3
    6b8e:	46bd      	mov	sp, r7
    6b90:	b006      	add	sp, #24
    6b92:	bd80      	pop	{r7, pc}
    6b94:	20000f7c 	.word	0x20000f7c
    6b98:	20000f84 	.word	0x20000f84

00006b9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6b9c:	b580      	push	{r7, lr}
    6b9e:	b086      	sub	sp, #24
    6ba0:	af00      	add	r7, sp, #0
    6ba2:	60f8      	str	r0, [r7, #12]
    6ba4:	60b9      	str	r1, [r7, #8]
    6ba6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6ba8:	2300      	movs	r3, #0
    6baa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6bac:	68fb      	ldr	r3, [r7, #12]
    6bae:	2b01      	cmp	r3, #1
    6bb0:	d01d      	beq.n	6bee <_write+0x52>
    6bb2:	68fb      	ldr	r3, [r7, #12]
    6bb4:	2b02      	cmp	r3, #2
    6bb6:	d01a      	beq.n	6bee <_write+0x52>
    6bb8:	68fb      	ldr	r3, [r7, #12]
    6bba:	2b03      	cmp	r3, #3
    6bbc:	d017      	beq.n	6bee <_write+0x52>
		return -1;
    6bbe:	2301      	movs	r3, #1
    6bc0:	425b      	negs	r3, r3
    6bc2:	e018      	b.n	6bf6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6bc4:	4b0e      	ldr	r3, [pc, #56]	; (6c00 <_write+0x64>)
    6bc6:	681a      	ldr	r2, [r3, #0]
    6bc8:	4b0e      	ldr	r3, [pc, #56]	; (6c04 <_write+0x68>)
    6bca:	6818      	ldr	r0, [r3, #0]
    6bcc:	68bb      	ldr	r3, [r7, #8]
    6bce:	1c59      	adds	r1, r3, #1
    6bd0:	60b9      	str	r1, [r7, #8]
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	0019      	movs	r1, r3
    6bd6:	4790      	blx	r2
    6bd8:	1e03      	subs	r3, r0, #0
    6bda:	da02      	bge.n	6be2 <_write+0x46>
			return -1;
    6bdc:	2301      	movs	r3, #1
    6bde:	425b      	negs	r3, r3
    6be0:	e009      	b.n	6bf6 <_write+0x5a>
		}
		++nChars;
    6be2:	697b      	ldr	r3, [r7, #20]
    6be4:	3301      	adds	r3, #1
    6be6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	3b01      	subs	r3, #1
    6bec:	607b      	str	r3, [r7, #4]
    6bee:	687b      	ldr	r3, [r7, #4]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d1e7      	bne.n	6bc4 <_write+0x28>
	}
	return nChars;
    6bf4:	697b      	ldr	r3, [r7, #20]
}
    6bf6:	0018      	movs	r0, r3
    6bf8:	46bd      	mov	sp, r7
    6bfa:	b006      	add	sp, #24
    6bfc:	bd80      	pop	{r7, pc}
    6bfe:	46c0      	nop			; (mov r8, r8)
    6c00:	20000f80 	.word	0x20000f80
    6c04:	20000f84 	.word	0x20000f84

00006c08 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	b084      	sub	sp, #16
    6c0c:	af00      	add	r7, sp, #0
    6c0e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6c10:	4b0a      	ldr	r3, [pc, #40]	; (6c3c <_sbrk+0x34>)
    6c12:	681b      	ldr	r3, [r3, #0]
    6c14:	2b00      	cmp	r3, #0
    6c16:	d102      	bne.n	6c1e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6c18:	4b08      	ldr	r3, [pc, #32]	; (6c3c <_sbrk+0x34>)
    6c1a:	4a09      	ldr	r2, [pc, #36]	; (6c40 <_sbrk+0x38>)
    6c1c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6c1e:	4b07      	ldr	r3, [pc, #28]	; (6c3c <_sbrk+0x34>)
    6c20:	681b      	ldr	r3, [r3, #0]
    6c22:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6c24:	4b05      	ldr	r3, [pc, #20]	; (6c3c <_sbrk+0x34>)
    6c26:	681a      	ldr	r2, [r3, #0]
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	18d2      	adds	r2, r2, r3
    6c2c:	4b03      	ldr	r3, [pc, #12]	; (6c3c <_sbrk+0x34>)
    6c2e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6c30:	68fb      	ldr	r3, [r7, #12]
}
    6c32:	0018      	movs	r0, r3
    6c34:	46bd      	mov	sp, r7
    6c36:	b004      	add	sp, #16
    6c38:	bd80      	pop	{r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	20000a88 	.word	0x20000a88
    6c40:	20003928 	.word	0x20003928

00006c44 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6c44:	b580      	push	{r7, lr}
    6c46:	b082      	sub	sp, #8
    6c48:	af00      	add	r7, sp, #0
    6c4a:	6078      	str	r0, [r7, #4]
	return -1;
    6c4c:	2301      	movs	r3, #1
    6c4e:	425b      	negs	r3, r3
}
    6c50:	0018      	movs	r0, r3
    6c52:	46bd      	mov	sp, r7
    6c54:	b002      	add	sp, #8
    6c56:	bd80      	pop	{r7, pc}

00006c58 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6c58:	b580      	push	{r7, lr}
    6c5a:	b082      	sub	sp, #8
    6c5c:	af00      	add	r7, sp, #0
    6c5e:	6078      	str	r0, [r7, #4]
    6c60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6c62:	683b      	ldr	r3, [r7, #0]
    6c64:	2280      	movs	r2, #128	; 0x80
    6c66:	0192      	lsls	r2, r2, #6
    6c68:	605a      	str	r2, [r3, #4]

	return 0;
    6c6a:	2300      	movs	r3, #0
}
    6c6c:	0018      	movs	r0, r3
    6c6e:	46bd      	mov	sp, r7
    6c70:	b002      	add	sp, #8
    6c72:	bd80      	pop	{r7, pc}

00006c74 <_isatty>:

extern int _isatty(int file)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b082      	sub	sp, #8
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
	return 1;
    6c7c:	2301      	movs	r3, #1
}
    6c7e:	0018      	movs	r0, r3
    6c80:	46bd      	mov	sp, r7
    6c82:	b002      	add	sp, #8
    6c84:	bd80      	pop	{r7, pc}

00006c86 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    6c86:	b580      	push	{r7, lr}
    6c88:	b084      	sub	sp, #16
    6c8a:	af00      	add	r7, sp, #0
    6c8c:	60f8      	str	r0, [r7, #12]
    6c8e:	60b9      	str	r1, [r7, #8]
    6c90:	607a      	str	r2, [r7, #4]
	return 0;
    6c92:	2300      	movs	r3, #0
}
    6c94:	0018      	movs	r0, r3
    6c96:	46bd      	mov	sp, r7
    6c98:	b004      	add	sp, #16
    6c9a:	bd80      	pop	{r7, pc}

00006c9c <system_interrupt_enable>:
{
    6c9c:	b580      	push	{r7, lr}
    6c9e:	b082      	sub	sp, #8
    6ca0:	af00      	add	r7, sp, #0
    6ca2:	0002      	movs	r2, r0
    6ca4:	1dfb      	adds	r3, r7, #7
    6ca6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ca8:	4b06      	ldr	r3, [pc, #24]	; (6cc4 <system_interrupt_enable+0x28>)
    6caa:	1dfa      	adds	r2, r7, #7
    6cac:	7812      	ldrb	r2, [r2, #0]
    6cae:	0011      	movs	r1, r2
    6cb0:	221f      	movs	r2, #31
    6cb2:	400a      	ands	r2, r1
    6cb4:	2101      	movs	r1, #1
    6cb6:	4091      	lsls	r1, r2
    6cb8:	000a      	movs	r2, r1
    6cba:	601a      	str	r2, [r3, #0]
}
    6cbc:	46c0      	nop			; (mov r8, r8)
    6cbe:	46bd      	mov	sp, r7
    6cc0:	b002      	add	sp, #8
    6cc2:	bd80      	pop	{r7, pc}
    6cc4:	e000e100 	.word	0xe000e100

00006cc8 <usart_is_syncing>:
{
    6cc8:	b580      	push	{r7, lr}
    6cca:	b084      	sub	sp, #16
    6ccc:	af00      	add	r7, sp, #0
    6cce:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	681b      	ldr	r3, [r3, #0]
    6cd4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    6cd6:	68fb      	ldr	r3, [r7, #12]
    6cd8:	69db      	ldr	r3, [r3, #28]
    6cda:	1e5a      	subs	r2, r3, #1
    6cdc:	4193      	sbcs	r3, r2
    6cde:	b2db      	uxtb	r3, r3
}
    6ce0:	0018      	movs	r0, r3
    6ce2:	46bd      	mov	sp, r7
    6ce4:	b004      	add	sp, #16
    6ce6:	bd80      	pop	{r7, pc}

00006ce8 <_usart_wait_for_sync>:
{
    6ce8:	b580      	push	{r7, lr}
    6cea:	b082      	sub	sp, #8
    6cec:	af00      	add	r7, sp, #0
    6cee:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6cf0:	46c0      	nop			; (mov r8, r8)
    6cf2:	687b      	ldr	r3, [r7, #4]
    6cf4:	0018      	movs	r0, r3
    6cf6:	4b04      	ldr	r3, [pc, #16]	; (6d08 <_usart_wait_for_sync+0x20>)
    6cf8:	4798      	blx	r3
    6cfa:	1e03      	subs	r3, r0, #0
    6cfc:	d1f9      	bne.n	6cf2 <_usart_wait_for_sync+0xa>
}
    6cfe:	46c0      	nop			; (mov r8, r8)
    6d00:	46bd      	mov	sp, r7
    6d02:	b002      	add	sp, #8
    6d04:	bd80      	pop	{r7, pc}
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	00006cc9 	.word	0x00006cc9

00006d0c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    6d0c:	b580      	push	{r7, lr}
    6d0e:	b082      	sub	sp, #8
    6d10:	af00      	add	r7, sp, #0
    6d12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6d14:	687b      	ldr	r3, [r7, #4]
    6d16:	2280      	movs	r2, #128	; 0x80
    6d18:	05d2      	lsls	r2, r2, #23
    6d1a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	2200      	movs	r2, #0
    6d20:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    6d22:	687b      	ldr	r3, [r7, #4]
    6d24:	22ff      	movs	r2, #255	; 0xff
    6d26:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    6d28:	687b      	ldr	r3, [r7, #4]
    6d2a:	2200      	movs	r2, #0
    6d2c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    6d2e:	687b      	ldr	r3, [r7, #4]
    6d30:	2200      	movs	r2, #0
    6d32:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	2296      	movs	r2, #150	; 0x96
    6d38:	0192      	lsls	r2, r2, #6
    6d3a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    6d3c:	687b      	ldr	r3, [r7, #4]
    6d3e:	2224      	movs	r2, #36	; 0x24
    6d40:	2101      	movs	r1, #1
    6d42:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    6d44:	687b      	ldr	r3, [r7, #4]
    6d46:	2225      	movs	r2, #37	; 0x25
    6d48:	2101      	movs	r1, #1
    6d4a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    6d4c:	687b      	ldr	r3, [r7, #4]
    6d4e:	2226      	movs	r2, #38	; 0x26
    6d50:	2100      	movs	r1, #0
    6d52:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	2227      	movs	r2, #39	; 0x27
    6d58:	2100      	movs	r1, #0
    6d5a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	2200      	movs	r2, #0
    6d60:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	2288      	movs	r2, #136	; 0x88
    6d66:	0352      	lsls	r2, r2, #13
    6d68:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	222c      	movs	r2, #44	; 0x2c
    6d6e:	2100      	movs	r1, #0
    6d70:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	222d      	movs	r2, #45	; 0x2d
    6d76:	2100      	movs	r1, #0
    6d78:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    6d7a:	687b      	ldr	r3, [r7, #4]
    6d7c:	2200      	movs	r2, #0
    6d7e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    6d80:	687b      	ldr	r3, [r7, #4]
    6d82:	2200      	movs	r2, #0
    6d84:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	2200      	movs	r2, #0
    6d8a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	2200      	movs	r2, #0
    6d90:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6d92:	687b      	ldr	r3, [r7, #4]
    6d94:	2200      	movs	r2, #0
    6d96:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	2200      	movs	r2, #0
    6d9c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	2200      	movs	r2, #0
    6da2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	2200      	movs	r2, #0
    6da8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	2200      	movs	r2, #0
    6dae:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6db0:	687b      	ldr	r3, [r7, #4]
    6db2:	2200      	movs	r2, #0
    6db4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    6db6:	687b      	ldr	r3, [r7, #4]
    6db8:	2213      	movs	r2, #19
    6dba:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6dbc:	687b      	ldr	r3, [r7, #4]
    6dbe:	2200      	movs	r2, #0
    6dc0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    6dc2:	46c0      	nop			; (mov r8, r8)
    6dc4:	46bd      	mov	sp, r7
    6dc6:	b002      	add	sp, #8
    6dc8:	bd80      	pop	{r7, pc}
	...

00006dcc <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    6dcc:	b580      	push	{r7, lr}
    6dce:	b084      	sub	sp, #16
    6dd0:	af00      	add	r7, sp, #0
    6dd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6dd4:	687b      	ldr	r3, [r7, #4]
    6dd6:	681b      	ldr	r3, [r3, #0]
    6dd8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    6dda:	687b      	ldr	r3, [r7, #4]
    6ddc:	681b      	ldr	r3, [r3, #0]
    6dde:	0018      	movs	r0, r3
    6de0:	4b09      	ldr	r3, [pc, #36]	; (6e08 <usart_enable+0x3c>)
    6de2:	4798      	blx	r3
    6de4:	0003      	movs	r3, r0
    6de6:	0018      	movs	r0, r3
    6de8:	4b08      	ldr	r3, [pc, #32]	; (6e0c <usart_enable+0x40>)
    6dea:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6dec:	687b      	ldr	r3, [r7, #4]
    6dee:	0018      	movs	r0, r3
    6df0:	4b07      	ldr	r3, [pc, #28]	; (6e10 <usart_enable+0x44>)
    6df2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6df4:	68fb      	ldr	r3, [r7, #12]
    6df6:	681b      	ldr	r3, [r3, #0]
    6df8:	2202      	movs	r2, #2
    6dfa:	431a      	orrs	r2, r3
    6dfc:	68fb      	ldr	r3, [r7, #12]
    6dfe:	601a      	str	r2, [r3, #0]
}
    6e00:	46c0      	nop			; (mov r8, r8)
    6e02:	46bd      	mov	sp, r7
    6e04:	b004      	add	sp, #16
    6e06:	bd80      	pop	{r7, pc}
    6e08:	00003975 	.word	0x00003975
    6e0c:	00006c9d 	.word	0x00006c9d
    6e10:	00006ce9 	.word	0x00006ce9

00006e14 <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    6e14:	b580      	push	{r7, lr}
    6e16:	b084      	sub	sp, #16
    6e18:	af00      	add	r7, sp, #0
    6e1a:	6078      	str	r0, [r7, #4]
    6e1c:	000a      	movs	r2, r1
    6e1e:	1cfb      	adds	r3, r7, #3
    6e20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6e28:	687b      	ldr	r3, [r7, #4]
    6e2a:	0018      	movs	r0, r3
    6e2c:	4b13      	ldr	r3, [pc, #76]	; (6e7c <usart_enable_transceiver+0x68>)
    6e2e:	4798      	blx	r3

	switch (transceiver_type) {
    6e30:	1cfb      	adds	r3, r7, #3
    6e32:	781b      	ldrb	r3, [r3, #0]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d002      	beq.n	6e3e <usart_enable_transceiver+0x2a>
    6e38:	2b01      	cmp	r3, #1
    6e3a:	d00b      	beq.n	6e54 <usart_enable_transceiver+0x40>
    6e3c:	e015      	b.n	6e6a <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    6e3e:	68fb      	ldr	r3, [r7, #12]
    6e40:	685b      	ldr	r3, [r3, #4]
    6e42:	2280      	movs	r2, #128	; 0x80
    6e44:	0292      	lsls	r2, r2, #10
    6e46:	431a      	orrs	r2, r3
    6e48:	68fb      	ldr	r3, [r7, #12]
    6e4a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    6e4c:	687b      	ldr	r3, [r7, #4]
    6e4e:	2201      	movs	r2, #1
    6e50:	719a      	strb	r2, [r3, #6]
			break;
    6e52:	e00a      	b.n	6e6a <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    6e54:	68fb      	ldr	r3, [r7, #12]
    6e56:	685b      	ldr	r3, [r3, #4]
    6e58:	2280      	movs	r2, #128	; 0x80
    6e5a:	0252      	lsls	r2, r2, #9
    6e5c:	431a      	orrs	r2, r3
    6e5e:	68fb      	ldr	r3, [r7, #12]
    6e60:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    6e62:	687b      	ldr	r3, [r7, #4]
    6e64:	2201      	movs	r2, #1
    6e66:	71da      	strb	r2, [r3, #7]
			break;
    6e68:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
    6e6a:	687b      	ldr	r3, [r7, #4]
    6e6c:	0018      	movs	r0, r3
    6e6e:	4b03      	ldr	r3, [pc, #12]	; (6e7c <usart_enable_transceiver+0x68>)
    6e70:	4798      	blx	r3
}
    6e72:	46c0      	nop			; (mov r8, r8)
    6e74:	46bd      	mov	sp, r7
    6e76:	b004      	add	sp, #16
    6e78:	bd80      	pop	{r7, pc}
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	00006ce9 	.word	0x00006ce9

00006e80 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b084      	sub	sp, #16
    6e84:	af00      	add	r7, sp, #0
    6e86:	60f8      	str	r0, [r7, #12]
    6e88:	60b9      	str	r1, [r7, #8]
    6e8a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    6e8c:	687a      	ldr	r2, [r7, #4]
    6e8e:	68b9      	ldr	r1, [r7, #8]
    6e90:	68fb      	ldr	r3, [r7, #12]
    6e92:	0018      	movs	r0, r3
    6e94:	4b05      	ldr	r3, [pc, #20]	; (6eac <usart_serial_init+0x2c>)
    6e96:	4798      	blx	r3
    6e98:	1e03      	subs	r3, r0, #0
    6e9a:	d101      	bne.n	6ea0 <usart_serial_init+0x20>
		return true;
    6e9c:	2301      	movs	r3, #1
    6e9e:	e000      	b.n	6ea2 <usart_serial_init+0x22>
	}
	else {
		return false;
    6ea0:	2300      	movs	r3, #0
	}
}
    6ea2:	0018      	movs	r0, r3
    6ea4:	46bd      	mov	sp, r7
    6ea6:	b004      	add	sp, #16
    6ea8:	bd80      	pop	{r7, pc}
    6eaa:	46c0      	nop			; (mov r8, r8)
    6eac:	00004785 	.word	0x00004785

00006eb0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b082      	sub	sp, #8
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	6078      	str	r0, [r7, #4]
    6eb8:	000a      	movs	r2, r1
    6eba:	1cfb      	adds	r3, r7, #3
    6ebc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	1cfb      	adds	r3, r7, #3
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	b29a      	uxth	r2, r3
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	0011      	movs	r1, r2
    6eca:	0018      	movs	r0, r3
    6ecc:	4b04      	ldr	r3, [pc, #16]	; (6ee0 <usart_serial_putchar+0x30>)
    6ece:	4798      	blx	r3
    6ed0:	1e03      	subs	r3, r0, #0
    6ed2:	d1f5      	bne.n	6ec0 <usart_serial_putchar+0x10>

	return STATUS_OK;
    6ed4:	2300      	movs	r3, #0
}
    6ed6:	0018      	movs	r0, r3
    6ed8:	46bd      	mov	sp, r7
    6eda:	b002      	add	sp, #8
    6edc:	bd80      	pop	{r7, pc}
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	00004a1d 	.word	0x00004a1d

00006ee4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6ee4:	b580      	push	{r7, lr}
    6ee6:	b084      	sub	sp, #16
    6ee8:	af00      	add	r7, sp, #0
    6eea:	6078      	str	r0, [r7, #4]
    6eec:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    6eee:	230e      	movs	r3, #14
    6ef0:	18fb      	adds	r3, r7, r3
    6ef2:	2200      	movs	r2, #0
    6ef4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6ef6:	46c0      	nop			; (mov r8, r8)
    6ef8:	230e      	movs	r3, #14
    6efa:	18fa      	adds	r2, r7, r3
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	0011      	movs	r1, r2
    6f00:	0018      	movs	r0, r3
    6f02:	4b07      	ldr	r3, [pc, #28]	; (6f20 <usart_serial_getchar+0x3c>)
    6f04:	4798      	blx	r3
    6f06:	1e03      	subs	r3, r0, #0
    6f08:	d1f6      	bne.n	6ef8 <usart_serial_getchar+0x14>

	*c = temp;
    6f0a:	230e      	movs	r3, #14
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	881b      	ldrh	r3, [r3, #0]
    6f10:	b2da      	uxtb	r2, r3
    6f12:	683b      	ldr	r3, [r7, #0]
    6f14:	701a      	strb	r2, [r3, #0]
}
    6f16:	46c0      	nop			; (mov r8, r8)
    6f18:	46bd      	mov	sp, r7
    6f1a:	b004      	add	sp, #16
    6f1c:	bd80      	pop	{r7, pc}
    6f1e:	46c0      	nop			; (mov r8, r8)
    6f20:	00004a73 	.word	0x00004a73

00006f24 <usart_serial_read_packet>:
 */
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    6f24:	b580      	push	{r7, lr}
    6f26:	b084      	sub	sp, #16
    6f28:	af00      	add	r7, sp, #0
    6f2a:	60f8      	str	r0, [r7, #12]
    6f2c:	60b9      	str	r1, [r7, #8]
    6f2e:	1dbb      	adds	r3, r7, #6
    6f30:	801a      	strh	r2, [r3, #0]
	return usart_read_buffer_wait(module, rx_data, length);
    6f32:	1dbb      	adds	r3, r7, #6
    6f34:	881a      	ldrh	r2, [r3, #0]
    6f36:	68b9      	ldr	r1, [r7, #8]
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	0018      	movs	r0, r3
    6f3c:	4b03      	ldr	r3, [pc, #12]	; (6f4c <usart_serial_read_packet+0x28>)
    6f3e:	4798      	blx	r3
    6f40:	0003      	movs	r3, r0
}
    6f42:	0018      	movs	r0, r3
    6f44:	46bd      	mov	sp, r7
    6f46:	b004      	add	sp, #16
    6f48:	bd80      	pop	{r7, pc}
    6f4a:	46c0      	nop			; (mov r8, r8)
    6f4c:	00004b55 	.word	0x00004b55

00006f50 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    6f50:	b580      	push	{r7, lr}
    6f52:	b084      	sub	sp, #16
    6f54:	af00      	add	r7, sp, #0
    6f56:	60f8      	str	r0, [r7, #12]
    6f58:	60b9      	str	r1, [r7, #8]
    6f5a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    6f5c:	4b10      	ldr	r3, [pc, #64]	; (6fa0 <stdio_serial_init+0x50>)
    6f5e:	68fa      	ldr	r2, [r7, #12]
    6f60:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6f62:	4b10      	ldr	r3, [pc, #64]	; (6fa4 <stdio_serial_init+0x54>)
    6f64:	4a10      	ldr	r2, [pc, #64]	; (6fa8 <stdio_serial_init+0x58>)
    6f66:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6f68:	4b10      	ldr	r3, [pc, #64]	; (6fac <stdio_serial_init+0x5c>)
    6f6a:	4a11      	ldr	r2, [pc, #68]	; (6fb0 <stdio_serial_init+0x60>)
    6f6c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    6f6e:	687a      	ldr	r2, [r7, #4]
    6f70:	68b9      	ldr	r1, [r7, #8]
    6f72:	68fb      	ldr	r3, [r7, #12]
    6f74:	0018      	movs	r0, r3
    6f76:	4b0f      	ldr	r3, [pc, #60]	; (6fb4 <stdio_serial_init+0x64>)
    6f78:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6f7a:	4b0f      	ldr	r3, [pc, #60]	; (6fb8 <stdio_serial_init+0x68>)
    6f7c:	681b      	ldr	r3, [r3, #0]
    6f7e:	689b      	ldr	r3, [r3, #8]
    6f80:	2100      	movs	r1, #0
    6f82:	0018      	movs	r0, r3
    6f84:	4b0d      	ldr	r3, [pc, #52]	; (6fbc <stdio_serial_init+0x6c>)
    6f86:	4798      	blx	r3
	setbuf(stdin, NULL);
    6f88:	4b0b      	ldr	r3, [pc, #44]	; (6fb8 <stdio_serial_init+0x68>)
    6f8a:	681b      	ldr	r3, [r3, #0]
    6f8c:	685b      	ldr	r3, [r3, #4]
    6f8e:	2100      	movs	r1, #0
    6f90:	0018      	movs	r0, r3
    6f92:	4b0a      	ldr	r3, [pc, #40]	; (6fbc <stdio_serial_init+0x6c>)
    6f94:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    6f96:	46c0      	nop			; (mov r8, r8)
    6f98:	46bd      	mov	sp, r7
    6f9a:	b004      	add	sp, #16
    6f9c:	bd80      	pop	{r7, pc}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	20000f84 	.word	0x20000f84
    6fa4:	20000f80 	.word	0x20000f80
    6fa8:	00006eb1 	.word	0x00006eb1
    6fac:	20000f7c 	.word	0x20000f7c
    6fb0:	00006ee5 	.word	0x00006ee5
    6fb4:	00006e81 	.word	0x00006e81
    6fb8:	2000007c 	.word	0x2000007c
    6fbc:	000116ad 	.word	0x000116ad

00006fc0 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    6fc0:	b580      	push	{r7, lr}
    6fc2:	b090      	sub	sp, #64	; 0x40
    6fc4:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35  || (WLR089)
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
    6fc6:	003b      	movs	r3, r7
    6fc8:	0018      	movs	r0, r3
    6fca:	4b1e      	ldr	r3, [pc, #120]	; (7044 <sio2host_init+0x84>)
    6fcc:	4798      	blx	r3
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    6fce:	003b      	movs	r3, r7
    6fd0:	2280      	movs	r2, #128	; 0x80
    6fd2:	0352      	lsls	r2, r2, #13
    6fd4:	60da      	str	r2, [r3, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    6fd6:	003b      	movs	r3, r7
    6fd8:	4a1b      	ldr	r2, [pc, #108]	; (7048 <sio2host_init+0x88>)
    6fda:	631a      	str	r2, [r3, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    6fdc:	003b      	movs	r3, r7
    6fde:	4a1b      	ldr	r2, [pc, #108]	; (704c <sio2host_init+0x8c>)
    6fe0:	635a      	str	r2, [r3, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    6fe2:	003b      	movs	r3, r7
    6fe4:	2201      	movs	r2, #1
    6fe6:	4252      	negs	r2, r2
    6fe8:	639a      	str	r2, [r3, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    6fea:	003b      	movs	r3, r7
    6fec:	2201      	movs	r2, #1
    6fee:	4252      	negs	r2, r2
    6ff0:	63da      	str	r2, [r3, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    6ff2:	003b      	movs	r3, r7
    6ff4:	22e1      	movs	r2, #225	; 0xe1
    6ff6:	0252      	lsls	r2, r2, #9
    6ff8:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&host_uart_module, USART_HOST, &host_uart_config);
    6ffa:	003a      	movs	r2, r7
    6ffc:	2384      	movs	r3, #132	; 0x84
    6ffe:	05d9      	lsls	r1, r3, #23
    7000:	4b13      	ldr	r3, [pc, #76]	; (7050 <sio2host_init+0x90>)
    7002:	0018      	movs	r0, r3
    7004:	4b13      	ldr	r3, [pc, #76]	; (7054 <sio2host_init+0x94>)
    7006:	4798      	blx	r3
	usart_enable(&host_uart_module);
    7008:	4b11      	ldr	r3, [pc, #68]	; (7050 <sio2host_init+0x90>)
    700a:	0018      	movs	r0, r3
    700c:	4b12      	ldr	r3, [pc, #72]	; (7058 <sio2host_init+0x98>)
    700e:	4798      	blx	r3
	/* Enable transceivers */
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
    7010:	4b0f      	ldr	r3, [pc, #60]	; (7050 <sio2host_init+0x90>)
    7012:	2101      	movs	r1, #1
    7014:	0018      	movs	r0, r3
    7016:	4b11      	ldr	r3, [pc, #68]	; (705c <sio2host_init+0x9c>)
    7018:	4798      	blx	r3
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
    701a:	4b0d      	ldr	r3, [pc, #52]	; (7050 <sio2host_init+0x90>)
    701c:	2100      	movs	r1, #0
    701e:	0018      	movs	r0, r3
    7020:	4b0e      	ldr	r3, [pc, #56]	; (705c <sio2host_init+0x9c>)
    7022:	4798      	blx	r3
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    7024:	4b0e      	ldr	r3, [pc, #56]	; (7060 <sio2host_init+0xa0>)
    7026:	0019      	movs	r1, r3
    7028:	2000      	movs	r0, #0
    702a:	4b0e      	ldr	r3, [pc, #56]	; (7064 <sio2host_init+0xa4>)
    702c:	4798      	blx	r3
    702e:	2384      	movs	r3, #132	; 0x84
    7030:	05db      	lsls	r3, r3, #23
    7032:	2204      	movs	r2, #4
    7034:	759a      	strb	r2, [r3, #22]
    7036:	2008      	movs	r0, #8
    7038:	4b0b      	ldr	r3, [pc, #44]	; (7068 <sio2host_init+0xa8>)
    703a:	4798      	blx	r3
}
    703c:	46c0      	nop			; (mov r8, r8)
    703e:	46bd      	mov	sp, r7
    7040:	b010      	add	sp, #64	; 0x40
    7042:	bd80      	pop	{r7, pc}
    7044:	00006d0d 	.word	0x00006d0d
    7048:	00040003 	.word	0x00040003
    704c:	00050003 	.word	0x00050003
    7050:	20000a8c 	.word	0x20000a8c
    7054:	00006f51 	.word	0x00006f51
    7058:	00006dcd 	.word	0x00006dcd
    705c:	00006e15 	.word	0x00006e15
    7060:	0000716d 	.word	0x0000716d
    7064:	00003909 	.word	0x00003909
    7068:	00006c9d 	.word	0x00006c9d

0000706c <sio2host_rx>:
	} while (status != STATUS_OK);
	return length;
}

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
    706c:	b580      	push	{r7, lr}
    706e:	b084      	sub	sp, #16
    7070:	af00      	add	r7, sp, #0
    7072:	6078      	str	r0, [r7, #4]
    7074:	000a      	movs	r2, r1
    7076:	1cfb      	adds	r3, r7, #3
    7078:	701a      	strb	r2, [r3, #0]
	uint8_t data_received = 0;
    707a:	230f      	movs	r3, #15
    707c:	18fb      	adds	r3, r7, r3
    707e:	2200      	movs	r2, #0
    7080:	701a      	strb	r2, [r3, #0]
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    7082:	4b36      	ldr	r3, [pc, #216]	; (715c <sio2host_rx+0xf0>)
    7084:	781a      	ldrb	r2, [r3, #0]
    7086:	4b36      	ldr	r3, [pc, #216]	; (7160 <sio2host_rx+0xf4>)
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	429a      	cmp	r2, r3
    708c:	d308      	bcc.n	70a0 <sio2host_rx+0x34>
	{
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    708e:	4b33      	ldr	r3, [pc, #204]	; (715c <sio2host_rx+0xf0>)
    7090:	781a      	ldrb	r2, [r3, #0]
    7092:	4b33      	ldr	r3, [pc, #204]	; (7160 <sio2host_rx+0xf4>)
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	1ad3      	subs	r3, r2, r3
    7098:	b2da      	uxtb	r2, r3
    709a:	4b32      	ldr	r3, [pc, #200]	; (7164 <sio2host_rx+0xf8>)
    709c:	701a      	strb	r2, [r3, #0]
    709e:	e009      	b.n	70b4 <sio2host_rx+0x48>
	}
	else
	{
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    70a0:	4b2e      	ldr	r3, [pc, #184]	; (715c <sio2host_rx+0xf0>)
    70a2:	781a      	ldrb	r2, [r3, #0]
    70a4:	4b2e      	ldr	r3, [pc, #184]	; (7160 <sio2host_rx+0xf4>)
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	1ad3      	subs	r3, r2, r3
    70aa:	b2db      	uxtb	r3, r3
    70ac:	3b80      	subs	r3, #128	; 0x80
    70ae:	b2da      	uxtb	r2, r3
    70b0:	4b2c      	ldr	r3, [pc, #176]	; (7164 <sio2host_rx+0xf8>)
    70b2:	701a      	strb	r2, [r3, #0]
	}
	
	if (0 == serial_rx_count) {
    70b4:	4b2b      	ldr	r3, [pc, #172]	; (7164 <sio2host_rx+0xf8>)
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	2b00      	cmp	r3, #0
    70ba:	d101      	bne.n	70c0 <sio2host_rx+0x54>
		return 0;
    70bc:	2300      	movs	r3, #0
    70be:	e048      	b.n	7152 <sio2host_rx+0xe6>
	}

	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    70c0:	4b28      	ldr	r3, [pc, #160]	; (7164 <sio2host_rx+0xf8>)
    70c2:	781b      	ldrb	r3, [r3, #0]
    70c4:	b25b      	sxtb	r3, r3
    70c6:	2b00      	cmp	r3, #0
    70c8:	da0f      	bge.n	70ea <sio2host_rx+0x7e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		serial_rx_buf_head = serial_rx_buf_tail;
    70ca:	4b24      	ldr	r3, [pc, #144]	; (715c <sio2host_rx+0xf0>)
    70cc:	781a      	ldrb	r2, [r3, #0]
    70ce:	4b24      	ldr	r3, [pc, #144]	; (7160 <sio2host_rx+0xf4>)
    70d0:	701a      	strb	r2, [r3, #0]
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    70d2:	4b24      	ldr	r3, [pc, #144]	; (7164 <sio2host_rx+0xf8>)
    70d4:	2280      	movs	r2, #128	; 0x80
    70d6:	701a      	strb	r2, [r3, #0]

		/* Bytes received is more than or equal to buffer. */
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    70d8:	1cfb      	adds	r3, r7, #3
    70da:	781b      	ldrb	r3, [r3, #0]
    70dc:	b25b      	sxtb	r3, r3
    70de:	2b00      	cmp	r3, #0
    70e0:	da0d      	bge.n	70fe <sio2host_rx+0x92>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    70e2:	1cfb      	adds	r3, r7, #3
    70e4:	2280      	movs	r2, #128	; 0x80
    70e6:	701a      	strb	r2, [r3, #0]
    70e8:	e009      	b.n	70fe <sio2host_rx+0x92>
		}
	} else {
		/* Bytes received is less than receive buffer maximum length. */
		if (max_length > serial_rx_count) {
    70ea:	4b1e      	ldr	r3, [pc, #120]	; (7164 <sio2host_rx+0xf8>)
    70ec:	781b      	ldrb	r3, [r3, #0]
    70ee:	1cfa      	adds	r2, r7, #3
    70f0:	7812      	ldrb	r2, [r2, #0]
    70f2:	429a      	cmp	r2, r3
    70f4:	d903      	bls.n	70fe <sio2host_rx+0x92>
			 * the data
			 * present in receive buffer. Hence only the number of
			 * bytes
			 * present in receive buffer are read.
			 */
			max_length = serial_rx_count;
    70f6:	1cfb      	adds	r3, r7, #3
    70f8:	4a1a      	ldr	r2, [pc, #104]	; (7164 <sio2host_rx+0xf8>)
    70fa:	7812      	ldrb	r2, [r2, #0]
    70fc:	701a      	strb	r2, [r3, #0]
		}
	}

	data_received = max_length;
    70fe:	230f      	movs	r3, #15
    7100:	18fb      	adds	r3, r7, r3
    7102:	1cfa      	adds	r2, r7, #3
    7104:	7812      	ldrb	r2, [r2, #0]
    7106:	701a      	strb	r2, [r3, #0]
	while (max_length > 0) {
    7108:	e01c      	b.n	7144 <sio2host_rx+0xd8>
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    710a:	4b15      	ldr	r3, [pc, #84]	; (7160 <sio2host_rx+0xf4>)
    710c:	781b      	ldrb	r3, [r3, #0]
    710e:	001a      	movs	r2, r3
    7110:	4b15      	ldr	r3, [pc, #84]	; (7168 <sio2host_rx+0xfc>)
    7112:	5c9a      	ldrb	r2, [r3, r2]
    7114:	687b      	ldr	r3, [r7, #4]
    7116:	701a      	strb	r2, [r3, #0]
		data++;
    7118:	687b      	ldr	r3, [r7, #4]
    711a:	3301      	adds	r3, #1
    711c:	607b      	str	r3, [r7, #4]
		max_length--;
    711e:	1cfb      	adds	r3, r7, #3
    7120:	781a      	ldrb	r2, [r3, #0]
    7122:	1cfb      	adds	r3, r7, #3
    7124:	3a01      	subs	r2, #1
    7126:	701a      	strb	r2, [r3, #0]
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    7128:	4b0d      	ldr	r3, [pc, #52]	; (7160 <sio2host_rx+0xf4>)
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	2b7f      	cmp	r3, #127	; 0x7f
    712e:	d103      	bne.n	7138 <sio2host_rx+0xcc>
			serial_rx_buf_head = 0;
    7130:	4b0b      	ldr	r3, [pc, #44]	; (7160 <sio2host_rx+0xf4>)
    7132:	2200      	movs	r2, #0
    7134:	701a      	strb	r2, [r3, #0]
    7136:	e005      	b.n	7144 <sio2host_rx+0xd8>
		}
		else
		{
			serial_rx_buf_head++;
    7138:	4b09      	ldr	r3, [pc, #36]	; (7160 <sio2host_rx+0xf4>)
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	3301      	adds	r3, #1
    713e:	b2da      	uxtb	r2, r3
    7140:	4b07      	ldr	r3, [pc, #28]	; (7160 <sio2host_rx+0xf4>)
    7142:	701a      	strb	r2, [r3, #0]
	while (max_length > 0) {
    7144:	1cfb      	adds	r3, r7, #3
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	2b00      	cmp	r3, #0
    714a:	d1de      	bne.n	710a <sio2host_rx+0x9e>
		}
	}
	return data_received;
    714c:	230f      	movs	r3, #15
    714e:	18fb      	adds	r3, r7, r3
    7150:	781b      	ldrb	r3, [r3, #0]
}
    7152:	0018      	movs	r0, r3
    7154:	46bd      	mov	sp, r7
    7156:	b004      	add	sp, #16
    7158:	bd80      	pop	{r7, pc}
    715a:	46c0      	nop			; (mov r8, r8)
    715c:	20000b41 	.word	0x20000b41
    7160:	20000b40 	.word	0x20000b40
    7164:	20000b42 	.word	0x20000b42
    7168:	20000ac0 	.word	0x20000ac0

0000716c <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    716c:	b580      	push	{r7, lr}
    716e:	b084      	sub	sp, #16
    7170:	af00      	add	r7, sp, #0
    7172:	0002      	movs	r2, r0
    7174:	1dfb      	adds	r3, r7, #7
    7176:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
	usart_serial_read_packet(&host_uart_module, &temp, 1);
    7178:	230f      	movs	r3, #15
    717a:	18f9      	adds	r1, r7, r3
    717c:	4b15      	ldr	r3, [pc, #84]	; (71d4 <USART_HOST_ISR_VECT+0x68>)
    717e:	2201      	movs	r2, #1
    7180:	0018      	movs	r0, r3
    7182:	4b15      	ldr	r3, [pc, #84]	; (71d8 <USART_HOST_ISR_VECT+0x6c>)
    7184:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    7186:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7188:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    718c:	4b13      	ldr	r3, [pc, #76]	; (71dc <USART_HOST_ISR_VECT+0x70>)
    718e:	2200      	movs	r2, #0
    7190:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    7192:	4b13      	ldr	r3, [pc, #76]	; (71e0 <USART_HOST_ISR_VECT+0x74>)
    7194:	781b      	ldrb	r3, [r3, #0]
    7196:	001a      	movs	r2, r3
    7198:	230f      	movs	r3, #15
    719a:	18fb      	adds	r3, r7, r3
    719c:	7819      	ldrb	r1, [r3, #0]
    719e:	4b11      	ldr	r3, [pc, #68]	; (71e4 <USART_HOST_ISR_VECT+0x78>)
    71a0:	5499      	strb	r1, [r3, r2]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    71a2:	4b0f      	ldr	r3, [pc, #60]	; (71e0 <USART_HOST_ISR_VECT+0x74>)
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	2b7f      	cmp	r3, #127	; 0x7f
    71a8:	d103      	bne.n	71b2 <USART_HOST_ISR_VECT+0x46>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    71aa:	4b0d      	ldr	r3, [pc, #52]	; (71e0 <USART_HOST_ISR_VECT+0x74>)
    71ac:	2200      	movs	r2, #0
    71ae:	701a      	strb	r2, [r3, #0]
    71b0:	e005      	b.n	71be <USART_HOST_ISR_VECT+0x52>
	} else {
		serial_rx_buf_tail++;
    71b2:	4b0b      	ldr	r3, [pc, #44]	; (71e0 <USART_HOST_ISR_VECT+0x74>)
    71b4:	781b      	ldrb	r3, [r3, #0]
    71b6:	3301      	adds	r3, #1
    71b8:	b2da      	uxtb	r2, r3
    71ba:	4b09      	ldr	r3, [pc, #36]	; (71e0 <USART_HOST_ISR_VECT+0x74>)
    71bc:	701a      	strb	r2, [r3, #0]
	}

	cpu_irq_enable();
    71be:	4b07      	ldr	r3, [pc, #28]	; (71dc <USART_HOST_ISR_VECT+0x70>)
    71c0:	2201      	movs	r2, #1
    71c2:	701a      	strb	r2, [r3, #0]
    71c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    71c8:	b662      	cpsie	i
}
    71ca:	46c0      	nop			; (mov r8, r8)
    71cc:	46bd      	mov	sp, r7
    71ce:	b004      	add	sp, #16
    71d0:	bd80      	pop	{r7, pc}
    71d2:	46c0      	nop			; (mov r8, r8)
    71d4:	20000a8c 	.word	0x20000a8c
    71d8:	00006f25 	.word	0x00006f25
    71dc:	20000008 	.word	0x20000008
    71e0:	20000b41 	.word	0x20000b41
    71e4:	20000ac0 	.word	0x20000ac0

000071e8 <system_pinmux_get_group_from_gpio_pin>:
{
    71e8:	b580      	push	{r7, lr}
    71ea:	b084      	sub	sp, #16
    71ec:	af00      	add	r7, sp, #0
    71ee:	0002      	movs	r2, r0
    71f0:	1dfb      	adds	r3, r7, #7
    71f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    71f4:	230f      	movs	r3, #15
    71f6:	18fb      	adds	r3, r7, r3
    71f8:	1dfa      	adds	r2, r7, #7
    71fa:	7812      	ldrb	r2, [r2, #0]
    71fc:	09d2      	lsrs	r2, r2, #7
    71fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7200:	230e      	movs	r3, #14
    7202:	18fb      	adds	r3, r7, r3
    7204:	1dfa      	adds	r2, r7, #7
    7206:	7812      	ldrb	r2, [r2, #0]
    7208:	0952      	lsrs	r2, r2, #5
    720a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    720c:	4b0d      	ldr	r3, [pc, #52]	; (7244 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    720e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7210:	230f      	movs	r3, #15
    7212:	18fb      	adds	r3, r7, r3
    7214:	781b      	ldrb	r3, [r3, #0]
    7216:	2b00      	cmp	r3, #0
    7218:	d10f      	bne.n	723a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    721a:	230f      	movs	r3, #15
    721c:	18fb      	adds	r3, r7, r3
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	009b      	lsls	r3, r3, #2
    7222:	2210      	movs	r2, #16
    7224:	4694      	mov	ip, r2
    7226:	44bc      	add	ip, r7
    7228:	4463      	add	r3, ip
    722a:	3b08      	subs	r3, #8
    722c:	681a      	ldr	r2, [r3, #0]
    722e:	230e      	movs	r3, #14
    7230:	18fb      	adds	r3, r7, r3
    7232:	781b      	ldrb	r3, [r3, #0]
    7234:	01db      	lsls	r3, r3, #7
    7236:	18d3      	adds	r3, r2, r3
    7238:	e000      	b.n	723c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    723a:	2300      	movs	r3, #0
}
    723c:	0018      	movs	r0, r3
    723e:	46bd      	mov	sp, r7
    7240:	b004      	add	sp, #16
    7242:	bd80      	pop	{r7, pc}
    7244:	40002800 	.word	0x40002800

00007248 <port_get_group_from_gpio_pin>:
{
    7248:	b580      	push	{r7, lr}
    724a:	b082      	sub	sp, #8
    724c:	af00      	add	r7, sp, #0
    724e:	0002      	movs	r2, r0
    7250:	1dfb      	adds	r3, r7, #7
    7252:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7254:	1dfb      	adds	r3, r7, #7
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	0018      	movs	r0, r3
    725a:	4b03      	ldr	r3, [pc, #12]	; (7268 <port_get_group_from_gpio_pin+0x20>)
    725c:	4798      	blx	r3
    725e:	0003      	movs	r3, r0
}
    7260:	0018      	movs	r0, r3
    7262:	46bd      	mov	sp, r7
    7264:	b002      	add	sp, #8
    7266:	bd80      	pop	{r7, pc}
    7268:	000071e9 	.word	0x000071e9

0000726c <port_get_config_defaults>:
{
    726c:	b580      	push	{r7, lr}
    726e:	b082      	sub	sp, #8
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	2200      	movs	r2, #0
    7278:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	2201      	movs	r2, #1
    727e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    7280:	687b      	ldr	r3, [r7, #4]
    7282:	2200      	movs	r2, #0
    7284:	709a      	strb	r2, [r3, #2]
}
    7286:	46c0      	nop			; (mov r8, r8)
    7288:	46bd      	mov	sp, r7
    728a:	b002      	add	sp, #8
    728c:	bd80      	pop	{r7, pc}
	...

00007290 <port_pin_set_output_level>:
{
    7290:	b580      	push	{r7, lr}
    7292:	b084      	sub	sp, #16
    7294:	af00      	add	r7, sp, #0
    7296:	0002      	movs	r2, r0
    7298:	1dfb      	adds	r3, r7, #7
    729a:	701a      	strb	r2, [r3, #0]
    729c:	1dbb      	adds	r3, r7, #6
    729e:	1c0a      	adds	r2, r1, #0
    72a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    72a2:	1dfb      	adds	r3, r7, #7
    72a4:	781b      	ldrb	r3, [r3, #0]
    72a6:	0018      	movs	r0, r3
    72a8:	4b0d      	ldr	r3, [pc, #52]	; (72e0 <port_pin_set_output_level+0x50>)
    72aa:	4798      	blx	r3
    72ac:	0003      	movs	r3, r0
    72ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    72b0:	1dfb      	adds	r3, r7, #7
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	221f      	movs	r2, #31
    72b6:	4013      	ands	r3, r2
    72b8:	2201      	movs	r2, #1
    72ba:	409a      	lsls	r2, r3
    72bc:	0013      	movs	r3, r2
    72be:	60bb      	str	r3, [r7, #8]
	if (level) {
    72c0:	1dbb      	adds	r3, r7, #6
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d003      	beq.n	72d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    72c8:	68fb      	ldr	r3, [r7, #12]
    72ca:	68ba      	ldr	r2, [r7, #8]
    72cc:	619a      	str	r2, [r3, #24]
}
    72ce:	e002      	b.n	72d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    72d0:	68fb      	ldr	r3, [r7, #12]
    72d2:	68ba      	ldr	r2, [r7, #8]
    72d4:	615a      	str	r2, [r3, #20]
}
    72d6:	46c0      	nop			; (mov r8, r8)
    72d8:	46bd      	mov	sp, r7
    72da:	b004      	add	sp, #16
    72dc:	bd80      	pop	{r7, pc}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	00007249 	.word	0x00007249

000072e4 <spi_is_syncing>:
{
    72e4:	b580      	push	{r7, lr}
    72e6:	b084      	sub	sp, #16
    72e8:	af00      	add	r7, sp, #0
    72ea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    72f2:	68fb      	ldr	r3, [r7, #12]
    72f4:	69db      	ldr	r3, [r3, #28]
    72f6:	1e5a      	subs	r2, r3, #1
    72f8:	4193      	sbcs	r3, r2
    72fa:	b2db      	uxtb	r3, r3
}
    72fc:	0018      	movs	r0, r3
    72fe:	46bd      	mov	sp, r7
    7300:	b004      	add	sp, #16
    7302:	bd80      	pop	{r7, pc}

00007304 <spi_get_config_defaults>:
{
    7304:	b580      	push	{r7, lr}
    7306:	b082      	sub	sp, #8
    7308:	af00      	add	r7, sp, #0
    730a:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	2201      	movs	r2, #1
    7310:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	2200      	movs	r2, #0
    7316:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	2200      	movs	r2, #0
    731c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	22c0      	movs	r2, #192	; 0xc0
    7322:	0392      	lsls	r2, r2, #14
    7324:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7326:	687b      	ldr	r3, [r7, #4]
    7328:	2200      	movs	r2, #0
    732a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    732c:	687b      	ldr	r3, [r7, #4]
    732e:	2200      	movs	r2, #0
    7330:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	2201      	movs	r2, #1
    7336:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    7338:	687b      	ldr	r3, [r7, #4]
    733a:	2201      	movs	r2, #1
    733c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	2200      	movs	r2, #0
    7342:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7344:	687b      	ldr	r3, [r7, #4]
    7346:	2224      	movs	r2, #36	; 0x24
    7348:	2100      	movs	r1, #0
    734a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	3318      	adds	r3, #24
    7350:	220c      	movs	r2, #12
    7352:	2100      	movs	r1, #0
    7354:	0018      	movs	r0, r3
    7356:	4b0a      	ldr	r3, [pc, #40]	; (7380 <spi_get_config_defaults+0x7c>)
    7358:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    735a:	687b      	ldr	r3, [r7, #4]
    735c:	4a09      	ldr	r2, [pc, #36]	; (7384 <spi_get_config_defaults+0x80>)
    735e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    7360:	687b      	ldr	r3, [r7, #4]
    7362:	2200      	movs	r2, #0
    7364:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    7366:	687b      	ldr	r3, [r7, #4]
    7368:	2200      	movs	r2, #0
    736a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    736c:	687b      	ldr	r3, [r7, #4]
    736e:	2200      	movs	r2, #0
    7370:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    7372:	687b      	ldr	r3, [r7, #4]
    7374:	2200      	movs	r2, #0
    7376:	635a      	str	r2, [r3, #52]	; 0x34
};
    7378:	46c0      	nop			; (mov r8, r8)
    737a:	46bd      	mov	sp, r7
    737c:	b002      	add	sp, #8
    737e:	bd80      	pop	{r7, pc}
    7380:	000114f9 	.word	0x000114f9
    7384:	000186a0 	.word	0x000186a0

00007388 <spi_slave_inst_get_config_defaults>:
{
    7388:	b580      	push	{r7, lr}
    738a:	b082      	sub	sp, #8
    738c:	af00      	add	r7, sp, #0
    738e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    7390:	687b      	ldr	r3, [r7, #4]
    7392:	220a      	movs	r2, #10
    7394:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    7396:	687b      	ldr	r3, [r7, #4]
    7398:	2200      	movs	r2, #0
    739a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	2200      	movs	r2, #0
    73a0:	709a      	strb	r2, [r3, #2]
}
    73a2:	46c0      	nop			; (mov r8, r8)
    73a4:	46bd      	mov	sp, r7
    73a6:	b002      	add	sp, #8
    73a8:	bd80      	pop	{r7, pc}
	...

000073ac <spi_attach_slave>:
{
    73ac:	b580      	push	{r7, lr}
    73ae:	b084      	sub	sp, #16
    73b0:	af00      	add	r7, sp, #0
    73b2:	6078      	str	r0, [r7, #4]
    73b4:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    73b6:	683b      	ldr	r3, [r7, #0]
    73b8:	781a      	ldrb	r2, [r3, #0]
    73ba:	687b      	ldr	r3, [r7, #4]
    73bc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    73be:	683b      	ldr	r3, [r7, #0]
    73c0:	785a      	ldrb	r2, [r3, #1]
    73c2:	687b      	ldr	r3, [r7, #4]
    73c4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    73c6:	683b      	ldr	r3, [r7, #0]
    73c8:	789a      	ldrb	r2, [r3, #2]
    73ca:	687b      	ldr	r3, [r7, #4]
    73cc:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    73ce:	230c      	movs	r3, #12
    73d0:	18fb      	adds	r3, r7, r3
    73d2:	0018      	movs	r0, r3
    73d4:	4b0b      	ldr	r3, [pc, #44]	; (7404 <spi_attach_slave+0x58>)
    73d6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    73d8:	230c      	movs	r3, #12
    73da:	18fb      	adds	r3, r7, r3
    73dc:	2201      	movs	r2, #1
    73de:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    73e0:	687b      	ldr	r3, [r7, #4]
    73e2:	781b      	ldrb	r3, [r3, #0]
    73e4:	220c      	movs	r2, #12
    73e6:	18ba      	adds	r2, r7, r2
    73e8:	0011      	movs	r1, r2
    73ea:	0018      	movs	r0, r3
    73ec:	4b06      	ldr	r3, [pc, #24]	; (7408 <spi_attach_slave+0x5c>)
    73ee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2101      	movs	r1, #1
    73f6:	0018      	movs	r0, r3
    73f8:	4b04      	ldr	r3, [pc, #16]	; (740c <spi_attach_slave+0x60>)
    73fa:	4798      	blx	r3
}
    73fc:	46c0      	nop			; (mov r8, r8)
    73fe:	46bd      	mov	sp, r7
    7400:	b004      	add	sp, #16
    7402:	bd80      	pop	{r7, pc}
    7404:	0000726d 	.word	0x0000726d
    7408:	00001991 	.word	0x00001991
    740c:	00007291 	.word	0x00007291

00007410 <spi_enable>:
{
    7410:	b580      	push	{r7, lr}
    7412:	b084      	sub	sp, #16
    7414:	af00      	add	r7, sp, #0
    7416:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	681b      	ldr	r3, [r3, #0]
    741c:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
    741e:	46c0      	nop			; (mov r8, r8)
    7420:	687b      	ldr	r3, [r7, #4]
    7422:	0018      	movs	r0, r3
    7424:	4b06      	ldr	r3, [pc, #24]	; (7440 <spi_enable+0x30>)
    7426:	4798      	blx	r3
    7428:	1e03      	subs	r3, r0, #0
    742a:	d1f9      	bne.n	7420 <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    742c:	68fb      	ldr	r3, [r7, #12]
    742e:	681b      	ldr	r3, [r3, #0]
    7430:	2202      	movs	r2, #2
    7432:	431a      	orrs	r2, r3
    7434:	68fb      	ldr	r3, [r7, #12]
    7436:	601a      	str	r2, [r3, #0]
}
    7438:	46c0      	nop			; (mov r8, r8)
    743a:	46bd      	mov	sp, r7
    743c:	b004      	add	sp, #16
    743e:	bd80      	pop	{r7, pc}
    7440:	000072e5 	.word	0x000072e5

00007444 <spi_is_write_complete>:
{
    7444:	b580      	push	{r7, lr}
    7446:	b084      	sub	sp, #16
    7448:	af00      	add	r7, sp, #0
    744a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    744c:	687b      	ldr	r3, [r7, #4]
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7452:	68fb      	ldr	r3, [r7, #12]
    7454:	7e1b      	ldrb	r3, [r3, #24]
    7456:	b2db      	uxtb	r3, r3
    7458:	001a      	movs	r2, r3
    745a:	2302      	movs	r3, #2
    745c:	4013      	ands	r3, r2
    745e:	1e5a      	subs	r2, r3, #1
    7460:	4193      	sbcs	r3, r2
    7462:	b2db      	uxtb	r3, r3
}
    7464:	0018      	movs	r0, r3
    7466:	46bd      	mov	sp, r7
    7468:	b004      	add	sp, #16
    746a:	bd80      	pop	{r7, pc}

0000746c <spi_is_ready_to_write>:
{
    746c:	b580      	push	{r7, lr}
    746e:	b084      	sub	sp, #16
    7470:	af00      	add	r7, sp, #0
    7472:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7474:	687b      	ldr	r3, [r7, #4]
    7476:	681b      	ldr	r3, [r3, #0]
    7478:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    747a:	68fb      	ldr	r3, [r7, #12]
    747c:	7e1b      	ldrb	r3, [r3, #24]
    747e:	b2db      	uxtb	r3, r3
    7480:	001a      	movs	r2, r3
    7482:	2301      	movs	r3, #1
    7484:	4013      	ands	r3, r2
    7486:	1e5a      	subs	r2, r3, #1
    7488:	4193      	sbcs	r3, r2
    748a:	b2db      	uxtb	r3, r3
}
    748c:	0018      	movs	r0, r3
    748e:	46bd      	mov	sp, r7
    7490:	b004      	add	sp, #16
    7492:	bd80      	pop	{r7, pc}

00007494 <spi_is_ready_to_read>:
{
    7494:	b580      	push	{r7, lr}
    7496:	b084      	sub	sp, #16
    7498:	af00      	add	r7, sp, #0
    749a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	681b      	ldr	r3, [r3, #0]
    74a0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    74a2:	68fb      	ldr	r3, [r7, #12]
    74a4:	7e1b      	ldrb	r3, [r3, #24]
    74a6:	b2db      	uxtb	r3, r3
    74a8:	001a      	movs	r2, r3
    74aa:	2304      	movs	r3, #4
    74ac:	4013      	ands	r3, r2
    74ae:	1e5a      	subs	r2, r3, #1
    74b0:	4193      	sbcs	r3, r2
    74b2:	b2db      	uxtb	r3, r3
}
    74b4:	0018      	movs	r0, r3
    74b6:	46bd      	mov	sp, r7
    74b8:	b004      	add	sp, #16
    74ba:	bd80      	pop	{r7, pc}

000074bc <spi_write>:
{
    74bc:	b580      	push	{r7, lr}
    74be:	b084      	sub	sp, #16
    74c0:	af00      	add	r7, sp, #0
    74c2:	6078      	str	r0, [r7, #4]
    74c4:	000a      	movs	r2, r1
    74c6:	1cbb      	adds	r3, r7, #2
    74c8:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    74ca:	687b      	ldr	r3, [r7, #4]
    74cc:	681b      	ldr	r3, [r3, #0]
    74ce:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    74d0:	687b      	ldr	r3, [r7, #4]
    74d2:	0018      	movs	r0, r3
    74d4:	4b0a      	ldr	r3, [pc, #40]	; (7500 <spi_write+0x44>)
    74d6:	4798      	blx	r3
    74d8:	0003      	movs	r3, r0
    74da:	001a      	movs	r2, r3
    74dc:	2301      	movs	r3, #1
    74de:	4053      	eors	r3, r2
    74e0:	b2db      	uxtb	r3, r3
    74e2:	2b00      	cmp	r3, #0
    74e4:	d001      	beq.n	74ea <spi_write+0x2e>
		return STATUS_BUSY;
    74e6:	2305      	movs	r3, #5
    74e8:	e006      	b.n	74f8 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    74ea:	1cbb      	adds	r3, r7, #2
    74ec:	881b      	ldrh	r3, [r3, #0]
    74ee:	05db      	lsls	r3, r3, #23
    74f0:	0dda      	lsrs	r2, r3, #23
    74f2:	68fb      	ldr	r3, [r7, #12]
    74f4:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    74f6:	2300      	movs	r3, #0
}
    74f8:	0018      	movs	r0, r3
    74fa:	46bd      	mov	sp, r7
    74fc:	b004      	add	sp, #16
    74fe:	bd80      	pop	{r7, pc}
    7500:	0000746d 	.word	0x0000746d

00007504 <spi_read>:
{
    7504:	b580      	push	{r7, lr}
    7506:	b084      	sub	sp, #16
    7508:	af00      	add	r7, sp, #0
    750a:	6078      	str	r0, [r7, #4]
    750c:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    750e:	687b      	ldr	r3, [r7, #4]
    7510:	681b      	ldr	r3, [r3, #0]
    7512:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    7514:	687b      	ldr	r3, [r7, #4]
    7516:	0018      	movs	r0, r3
    7518:	4b1b      	ldr	r3, [pc, #108]	; (7588 <spi_read+0x84>)
    751a:	4798      	blx	r3
    751c:	0003      	movs	r3, r0
    751e:	001a      	movs	r2, r3
    7520:	2301      	movs	r3, #1
    7522:	4053      	eors	r3, r2
    7524:	b2db      	uxtb	r3, r3
    7526:	2b00      	cmp	r3, #0
    7528:	d001      	beq.n	752e <spi_read+0x2a>
		return STATUS_ERR_IO;
    752a:	2310      	movs	r3, #16
    752c:	e027      	b.n	757e <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    752e:	230f      	movs	r3, #15
    7530:	18fb      	adds	r3, r7, r3
    7532:	2200      	movs	r2, #0
    7534:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7536:	68bb      	ldr	r3, [r7, #8]
    7538:	8b5b      	ldrh	r3, [r3, #26]
    753a:	b29b      	uxth	r3, r3
    753c:	001a      	movs	r2, r3
    753e:	2304      	movs	r3, #4
    7540:	4013      	ands	r3, r2
    7542:	d006      	beq.n	7552 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    7544:	230f      	movs	r3, #15
    7546:	18fb      	adds	r3, r7, r3
    7548:	221e      	movs	r2, #30
    754a:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    754c:	68bb      	ldr	r3, [r7, #8]
    754e:	2204      	movs	r2, #4
    7550:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	799b      	ldrb	r3, [r3, #6]
    7556:	2b01      	cmp	r3, #1
    7558:	d108      	bne.n	756c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    755a:	68bb      	ldr	r3, [r7, #8]
    755c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    755e:	b29b      	uxth	r3, r3
    7560:	05db      	lsls	r3, r3, #23
    7562:	0ddb      	lsrs	r3, r3, #23
    7564:	b29a      	uxth	r2, r3
    7566:	683b      	ldr	r3, [r7, #0]
    7568:	801a      	strh	r2, [r3, #0]
    756a:	e005      	b.n	7578 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    756c:	68bb      	ldr	r3, [r7, #8]
    756e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7570:	b2db      	uxtb	r3, r3
    7572:	b29a      	uxth	r2, r3
    7574:	683b      	ldr	r3, [r7, #0]
    7576:	801a      	strh	r2, [r3, #0]
	return retval;
    7578:	230f      	movs	r3, #15
    757a:	18fb      	adds	r3, r7, r3
    757c:	781b      	ldrb	r3, [r3, #0]
}
    757e:	0018      	movs	r0, r3
    7580:	46bd      	mov	sp, r7
    7582:	b004      	add	sp, #16
    7584:	bd80      	pop	{r7, pc}
    7586:	46c0      	nop			; (mov r8, r8)
    7588:	00007495 	.word	0x00007495

0000758c <HAL_RadioInit>:
/** 
 * \brief This function is used to initialize the Radio Hardware
 * The SPI interface,DIO and reset pins are initialized by this api
 */
void HAL_RadioInit(void)
{
    758c:	b580      	push	{r7, lr}
    758e:	af00      	add	r7, sp, #0
	HAL_RadioIOInit();
    7590:	4b03      	ldr	r3, [pc, #12]	; (75a0 <HAL_RadioInit+0x14>)
    7592:	4798      	blx	r3
	HAL_RadioSpiInit();
    7594:	4b03      	ldr	r3, [pc, #12]	; (75a4 <HAL_RadioInit+0x18>)
    7596:	4798      	blx	r3
}
    7598:	46c0      	nop			; (mov r8, r8)
    759a:	46bd      	mov	sp, r7
    759c:	bd80      	pop	{r7, pc}
    759e:	46c0      	nop			; (mov r8, r8)
    75a0:	0000788d 	.word	0x0000788d
    75a4:	000077e1 	.word	0x000077e1

000075a8 <RADIO_Reset>:
 
/** 
 * \brief This function resets the Radio hardware by pulling the reset pin low
 */
void RADIO_Reset(void)
{
    75a8:	b580      	push	{r7, lr}
    75aa:	af00      	add	r7, sp, #0
	HAL_ResetPinMakeOutput();
    75ac:	4b08      	ldr	r3, [pc, #32]	; (75d0 <RADIO_Reset+0x28>)
    75ae:	4798      	blx	r3
	HAL_ResetPinOutputValue(0);
    75b0:	2000      	movs	r0, #0
    75b2:	4b08      	ldr	r3, [pc, #32]	; (75d4 <RADIO_Reset+0x2c>)
    75b4:	4798      	blx	r3
	SystemBlockingWaitMs(1);
    75b6:	2001      	movs	r0, #1
    75b8:	4b07      	ldr	r3, [pc, #28]	; (75d8 <RADIO_Reset+0x30>)
    75ba:	4798      	blx	r3
	HAL_ResetPinMakeInput();
    75bc:	4b07      	ldr	r3, [pc, #28]	; (75dc <RADIO_Reset+0x34>)
    75be:	4798      	blx	r3
		
	//Added these two lines to make sure this pin is not left in floating state during sleep
	HAL_ResetPinOutputValue(1);
    75c0:	2001      	movs	r0, #1
    75c2:	4b04      	ldr	r3, [pc, #16]	; (75d4 <RADIO_Reset+0x2c>)
    75c4:	4798      	blx	r3
	HAL_ResetPinMakeOutput();
    75c6:	4b02      	ldr	r3, [pc, #8]	; (75d0 <RADIO_Reset+0x28>)
    75c8:	4798      	blx	r3
}
    75ca:	46c0      	nop			; (mov r8, r8)
    75cc:	46bd      	mov	sp, r7
    75ce:	bd80      	pop	{r7, pc}
    75d0:	000079d5 	.word	0x000079d5
    75d4:	00007a35 	.word	0x00007a35
    75d8:	00007d99 	.word	0x00007d99
    75dc:	00007a05 	.word	0x00007a05

000075e0 <RADIO_RegisterWrite>:
 * \brief This function is used to write a byte of data to the radio register
 * \param[in] reg Radio register to be written
 * \param[in] value Value to be written into the radio register
 */
void RADIO_RegisterWrite(uint8_t reg, uint8_t value)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	0002      	movs	r2, r0
    75e8:	1dfb      	adds	r3, r7, #7
    75ea:	701a      	strb	r2, [r3, #0]
    75ec:	1dbb      	adds	r3, r7, #6
    75ee:	1c0a      	adds	r2, r1, #0
    75f0:	701a      	strb	r2, [r3, #0]
	HAL_SPICSAssert();
    75f2:	4b0b      	ldr	r3, [pc, #44]	; (7620 <RADIO_RegisterWrite+0x40>)
    75f4:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    75f6:	1dfb      	adds	r3, r7, #7
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2280      	movs	r2, #128	; 0x80
    75fc:	4252      	negs	r2, r2
    75fe:	4313      	orrs	r3, r2
    7600:	b2db      	uxtb	r3, r3
    7602:	0018      	movs	r0, r3
    7604:	4b07      	ldr	r3, [pc, #28]	; (7624 <RADIO_RegisterWrite+0x44>)
    7606:	4798      	blx	r3
	HAL_SPISend(value);
    7608:	1dbb      	adds	r3, r7, #6
    760a:	781b      	ldrb	r3, [r3, #0]
    760c:	0018      	movs	r0, r3
    760e:	4b05      	ldr	r3, [pc, #20]	; (7624 <RADIO_RegisterWrite+0x44>)
    7610:	4798      	blx	r3
	HAL_SPICSDeassert();
    7612:	4b05      	ldr	r3, [pc, #20]	; (7628 <RADIO_RegisterWrite+0x48>)
    7614:	4798      	blx	r3
}
    7616:	46c0      	nop			; (mov r8, r8)
    7618:	46bd      	mov	sp, r7
    761a:	b002      	add	sp, #8
    761c:	bd80      	pop	{r7, pc}
    761e:	46c0      	nop			; (mov r8, r8)
    7620:	00007a71 	.word	0x00007a71
    7624:	00007ab9 	.word	0x00007ab9
    7628:	00007a95 	.word	0x00007a95

0000762c <RADIO_RegisterRead>:
 * \brief This function is used to read a byte of data from the radio register
 * \param[in] reg Radio register to be read
 * \retval  Value read from the radio register
 */
uint8_t RADIO_RegisterRead(uint8_t reg)
{
    762c:	b590      	push	{r4, r7, lr}
    762e:	b085      	sub	sp, #20
    7630:	af00      	add	r7, sp, #0
    7632:	0002      	movs	r2, r0
    7634:	1dfb      	adds	r3, r7, #7
    7636:	701a      	strb	r2, [r3, #0]
	uint8_t readValue;
	reg &= 0x7F;    // Make sure write bit is not set
    7638:	1dfb      	adds	r3, r7, #7
    763a:	1dfa      	adds	r2, r7, #7
    763c:	7812      	ldrb	r2, [r2, #0]
    763e:	217f      	movs	r1, #127	; 0x7f
    7640:	400a      	ands	r2, r1
    7642:	701a      	strb	r2, [r3, #0]
	HAL_SPICSAssert();
    7644:	4b0b      	ldr	r3, [pc, #44]	; (7674 <RADIO_RegisterRead+0x48>)
    7646:	4798      	blx	r3
	HAL_SPISend(reg);
    7648:	1dfb      	adds	r3, r7, #7
    764a:	781b      	ldrb	r3, [r3, #0]
    764c:	0018      	movs	r0, r3
    764e:	4b0a      	ldr	r3, [pc, #40]	; (7678 <RADIO_RegisterRead+0x4c>)
    7650:	4798      	blx	r3
	readValue = HAL_SPISend(0xFF);
    7652:	230f      	movs	r3, #15
    7654:	18fc      	adds	r4, r7, r3
    7656:	20ff      	movs	r0, #255	; 0xff
    7658:	4b07      	ldr	r3, [pc, #28]	; (7678 <RADIO_RegisterRead+0x4c>)
    765a:	4798      	blx	r3
    765c:	0003      	movs	r3, r0
    765e:	7023      	strb	r3, [r4, #0]
	HAL_SPICSDeassert();
    7660:	4b06      	ldr	r3, [pc, #24]	; (767c <RADIO_RegisterRead+0x50>)
    7662:	4798      	blx	r3
	return readValue;
    7664:	230f      	movs	r3, #15
    7666:	18fb      	adds	r3, r7, r3
    7668:	781b      	ldrb	r3, [r3, #0]
}
    766a:	0018      	movs	r0, r3
    766c:	46bd      	mov	sp, r7
    766e:	b005      	add	sp, #20
    7670:	bd90      	pop	{r4, r7, pc}
    7672:	46c0      	nop			; (mov r8, r8)
    7674:	00007a71 	.word	0x00007a71
    7678:	00007ab9 	.word	0x00007ab9
    767c:	00007a95 	.word	0x00007a95

00007680 <RADIO_FrameWrite>:
 * \param[in] FIFO offset to be written to
 * \param[in] buffer Pointer to the data to be written into the frame buffer
 * \param[in] bufferLen Length of the data to be written
 */
void RADIO_FrameWrite(uint8_t offset, uint8_t* buffer, uint8_t bufferLen)
{
    7680:	b580      	push	{r7, lr}
    7682:	b084      	sub	sp, #16
    7684:	af00      	add	r7, sp, #0
    7686:	6039      	str	r1, [r7, #0]
    7688:	0011      	movs	r1, r2
    768a:	1dfb      	adds	r3, r7, #7
    768c:	1c02      	adds	r2, r0, #0
    768e:	701a      	strb	r2, [r3, #0]
    7690:	1dbb      	adds	r3, r7, #6
    7692:	1c0a      	adds	r2, r1, #0
    7694:	701a      	strb	r2, [r3, #0]
    HAL_SPICSAssert();
    7696:	4b16      	ldr	r3, [pc, #88]	; (76f0 <RADIO_FrameWrite+0x70>)
    7698:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    769a:	1dfb      	adds	r3, r7, #7
    769c:	781b      	ldrb	r3, [r3, #0]
    769e:	2280      	movs	r2, #128	; 0x80
    76a0:	4252      	negs	r2, r2
    76a2:	4313      	orrs	r3, r2
    76a4:	b2db      	uxtb	r3, r3
    76a6:	0018      	movs	r0, r3
    76a8:	4b12      	ldr	r3, [pc, #72]	; (76f4 <RADIO_FrameWrite+0x74>)
    76aa:	4798      	blx	r3

    for (uint8_t i = 0; i < bufferLen; i++)
    76ac:	230f      	movs	r3, #15
    76ae:	18fb      	adds	r3, r7, r3
    76b0:	2200      	movs	r2, #0
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	e00f      	b.n	76d6 <RADIO_FrameWrite+0x56>
    {
	    HAL_SPISend(buffer[i]);
    76b6:	230f      	movs	r3, #15
    76b8:	18fb      	adds	r3, r7, r3
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	683a      	ldr	r2, [r7, #0]
    76be:	18d3      	adds	r3, r2, r3
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	0018      	movs	r0, r3
    76c4:	4b0b      	ldr	r3, [pc, #44]	; (76f4 <RADIO_FrameWrite+0x74>)
    76c6:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    76c8:	230f      	movs	r3, #15
    76ca:	18fb      	adds	r3, r7, r3
    76cc:	781a      	ldrb	r2, [r3, #0]
    76ce:	230f      	movs	r3, #15
    76d0:	18fb      	adds	r3, r7, r3
    76d2:	3201      	adds	r2, #1
    76d4:	701a      	strb	r2, [r3, #0]
    76d6:	230f      	movs	r3, #15
    76d8:	18fa      	adds	r2, r7, r3
    76da:	1dbb      	adds	r3, r7, #6
    76dc:	7812      	ldrb	r2, [r2, #0]
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	429a      	cmp	r2, r3
    76e2:	d3e8      	bcc.n	76b6 <RADIO_FrameWrite+0x36>
    }
    HAL_SPICSDeassert();
    76e4:	4b04      	ldr	r3, [pc, #16]	; (76f8 <RADIO_FrameWrite+0x78>)
    76e6:	4798      	blx	r3

}
    76e8:	46c0      	nop			; (mov r8, r8)
    76ea:	46bd      	mov	sp, r7
    76ec:	b004      	add	sp, #16
    76ee:	bd80      	pop	{r7, pc}
    76f0:	00007a71 	.word	0x00007a71
    76f4:	00007ab9 	.word	0x00007ab9
    76f8:	00007a95 	.word	0x00007a95

000076fc <RADIO_FrameRead>:
 * \param[in] FIFO offset to be read from
 * \param[in] buffer Pointer to the data where the data is read and stored
 * \param[in] bufferLen Length of the data to be read from the frame buffer
 */
void RADIO_FrameRead(uint8_t offset, uint8_t* buffer, uint8_t bufferLen)
{
    76fc:	b590      	push	{r4, r7, lr}
    76fe:	b085      	sub	sp, #20
    7700:	af00      	add	r7, sp, #0
    7702:	6039      	str	r1, [r7, #0]
    7704:	0011      	movs	r1, r2
    7706:	1dfb      	adds	r3, r7, #7
    7708:	1c02      	adds	r2, r0, #0
    770a:	701a      	strb	r2, [r3, #0]
    770c:	1dbb      	adds	r3, r7, #6
    770e:	1c0a      	adds	r2, r1, #0
    7710:	701a      	strb	r2, [r3, #0]
    HAL_SPICSAssert();
    7712:	4b15      	ldr	r3, [pc, #84]	; (7768 <RADIO_FrameRead+0x6c>)
    7714:	4798      	blx	r3
    HAL_SPISend(offset);
    7716:	1dfb      	adds	r3, r7, #7
    7718:	781b      	ldrb	r3, [r3, #0]
    771a:	0018      	movs	r0, r3
    771c:	4b13      	ldr	r3, [pc, #76]	; (776c <RADIO_FrameRead+0x70>)
    771e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    7720:	230f      	movs	r3, #15
    7722:	18fb      	adds	r3, r7, r3
    7724:	2200      	movs	r2, #0
    7726:	701a      	strb	r2, [r3, #0]
    7728:	e010      	b.n	774c <RADIO_FrameRead+0x50>
    {
	    buffer[i] = HAL_SPISend(0xFF);
    772a:	230f      	movs	r3, #15
    772c:	18fb      	adds	r3, r7, r3
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	683a      	ldr	r2, [r7, #0]
    7732:	18d4      	adds	r4, r2, r3
    7734:	20ff      	movs	r0, #255	; 0xff
    7736:	4b0d      	ldr	r3, [pc, #52]	; (776c <RADIO_FrameRead+0x70>)
    7738:	4798      	blx	r3
    773a:	0003      	movs	r3, r0
    773c:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < bufferLen; i++)
    773e:	230f      	movs	r3, #15
    7740:	18fb      	adds	r3, r7, r3
    7742:	781a      	ldrb	r2, [r3, #0]
    7744:	230f      	movs	r3, #15
    7746:	18fb      	adds	r3, r7, r3
    7748:	3201      	adds	r2, #1
    774a:	701a      	strb	r2, [r3, #0]
    774c:	230f      	movs	r3, #15
    774e:	18fa      	adds	r2, r7, r3
    7750:	1dbb      	adds	r3, r7, #6
    7752:	7812      	ldrb	r2, [r2, #0]
    7754:	781b      	ldrb	r3, [r3, #0]
    7756:	429a      	cmp	r2, r3
    7758:	d3e7      	bcc.n	772a <RADIO_FrameRead+0x2e>
    }
    HAL_SPICSDeassert();
    775a:	4b05      	ldr	r3, [pc, #20]	; (7770 <RADIO_FrameRead+0x74>)
    775c:	4798      	blx	r3
}
    775e:	46c0      	nop			; (mov r8, r8)
    7760:	46bd      	mov	sp, r7
    7762:	b005      	add	sp, #20
    7764:	bd90      	pop	{r4, r7, pc}
    7766:	46c0      	nop			; (mov r8, r8)
    7768:	00007a71 	.word	0x00007a71
    776c:	00007ab9 	.word	0x00007ab9
    7770:	00007a95 	.word	0x00007a95

00007774 <HAL_RadioDIO0Callback>:
{
	return port_pin_get_input_level(DIO0_EIC_PIN);
}

static void HAL_RadioDIO0Callback(void)
{
    7774:	b580      	push	{r7, lr}
    7776:	af00      	add	r7, sp, #0
  if (interruptHandlerDio0)
    7778:	4b05      	ldr	r3, [pc, #20]	; (7790 <HAL_RadioDIO0Callback+0x1c>)
    777a:	681b      	ldr	r3, [r3, #0]
    777c:	2b00      	cmp	r3, #0
    777e:	d004      	beq.n	778a <HAL_RadioDIO0Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    7780:	4b04      	ldr	r3, [pc, #16]	; (7794 <HAL_RadioDIO0Callback+0x20>)
    7782:	4798      	blx	r3
#endif	
    interruptHandlerDio0();
    7784:	4b02      	ldr	r3, [pc, #8]	; (7790 <HAL_RadioDIO0Callback+0x1c>)
    7786:	681b      	ldr	r3, [r3, #0]
    7788:	4798      	blx	r3
  }    
}
    778a:	46c0      	nop			; (mov r8, r8)
    778c:	46bd      	mov	sp, r7
    778e:	bd80      	pop	{r7, pc}
    7790:	20000b44 	.word	0x20000b44
    7794:	00007df1 	.word	0x00007df1

00007798 <HAL_RadioDIO1Callback>:
{
	return port_pin_get_input_level(DIO1_EIC_PIN);
}

static void HAL_RadioDIO1Callback(void)
{
    7798:	b580      	push	{r7, lr}
    779a:	af00      	add	r7, sp, #0
  if (interruptHandlerDio1)
    779c:	4b05      	ldr	r3, [pc, #20]	; (77b4 <HAL_RadioDIO1Callback+0x1c>)
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d004      	beq.n	77ae <HAL_RadioDIO1Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    77a4:	4b04      	ldr	r3, [pc, #16]	; (77b8 <HAL_RadioDIO1Callback+0x20>)
    77a6:	4798      	blx	r3
#endif
    interruptHandlerDio1();
    77a8:	4b02      	ldr	r3, [pc, #8]	; (77b4 <HAL_RadioDIO1Callback+0x1c>)
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	4798      	blx	r3
  }
}
    77ae:	46c0      	nop			; (mov r8, r8)
    77b0:	46bd      	mov	sp, r7
    77b2:	bd80      	pop	{r7, pc}
    77b4:	20000b48 	.word	0x20000b48
    77b8:	00007df1 	.word	0x00007df1

000077bc <HAL_RadioDIO2Callback>:
{
	return port_pin_get_input_level(DIO2_EIC_PIN);
}

static void HAL_RadioDIO2Callback(void)
{
    77bc:	b580      	push	{r7, lr}
    77be:	af00      	add	r7, sp, #0
  if (interruptHandlerDio2)
    77c0:	4b05      	ldr	r3, [pc, #20]	; (77d8 <HAL_RadioDIO2Callback+0x1c>)
    77c2:	681b      	ldr	r3, [r3, #0]
    77c4:	2b00      	cmp	r3, #0
    77c6:	d004      	beq.n	77d2 <HAL_RadioDIO2Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    77c8:	4b04      	ldr	r3, [pc, #16]	; (77dc <HAL_RadioDIO2Callback+0x20>)
    77ca:	4798      	blx	r3
#endif
    interruptHandlerDio2();
    77cc:	4b02      	ldr	r3, [pc, #8]	; (77d8 <HAL_RadioDIO2Callback+0x1c>)
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	4798      	blx	r3
  }
}
    77d2:	46c0      	nop			; (mov r8, r8)
    77d4:	46bd      	mov	sp, r7
    77d6:	bd80      	pop	{r7, pc}
    77d8:	20000b4c 	.word	0x20000b4c
    77dc:	00007df1 	.word	0x00007df1

000077e0 <HAL_RadioSpiInit>:

/*
 * \brief Initializes the Radio SPI Interface
 */
void HAL_RadioSpiInit(void)
{
    77e0:	b580      	push	{r7, lr}
    77e2:	b090      	sub	sp, #64	; 0x40
    77e4:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    77e6:	1d3b      	adds	r3, r7, #4
    77e8:	0018      	movs	r0, r3
    77ea:	4b1c      	ldr	r3, [pc, #112]	; (785c <HAL_RadioSpiInit+0x7c>)
    77ec:	4798      	blx	r3
	
	slave_dev_config.ss_pin = SX_RF_SPI_CS;
    77ee:	1d3b      	adds	r3, r7, #4
    77f0:	223f      	movs	r2, #63	; 0x3f
    77f2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    77f4:	1d3a      	adds	r2, r7, #4
    77f6:	4b1a      	ldr	r3, [pc, #104]	; (7860 <HAL_RadioSpiInit+0x80>)
    77f8:	0011      	movs	r1, r2
    77fa:	0018      	movs	r0, r3
    77fc:	4b19      	ldr	r3, [pc, #100]	; (7864 <HAL_RadioSpiInit+0x84>)
    77fe:	4798      	blx	r3
	
	spi_get_config_defaults(&config_spi_master);
    7800:	2308      	movs	r3, #8
    7802:	18fb      	adds	r3, r7, r3
    7804:	0018      	movs	r0, r3
    7806:	4b18      	ldr	r3, [pc, #96]	; (7868 <HAL_RadioSpiInit+0x88>)
    7808:	4798      	blx	r3

	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    780a:	2308      	movs	r3, #8
    780c:	18fb      	adds	r3, r7, r3
    780e:	4a17      	ldr	r2, [pc, #92]	; (786c <HAL_RadioSpiInit+0x8c>)
    7810:	619a      	str	r2, [r3, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7812:	2308      	movs	r3, #8
    7814:	18fb      	adds	r3, r7, r3
    7816:	2280      	movs	r2, #128	; 0x80
    7818:	0252      	lsls	r2, r2, #9
    781a:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    781c:	2308      	movs	r3, #8
    781e:	18fb      	adds	r3, r7, r3
    7820:	4a13      	ldr	r2, [pc, #76]	; (7870 <HAL_RadioSpiInit+0x90>)
    7822:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    7824:	2308      	movs	r3, #8
    7826:	18fb      	adds	r3, r7, r3
    7828:	2201      	movs	r2, #1
    782a:	4252      	negs	r2, r2
    782c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    782e:	2308      	movs	r3, #8
    7830:	18fb      	adds	r3, r7, r3
    7832:	4a10      	ldr	r2, [pc, #64]	; (7874 <HAL_RadioSpiInit+0x94>)
    7834:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    7836:	2308      	movs	r3, #8
    7838:	18fb      	adds	r3, r7, r3
    783a:	4a0f      	ldr	r2, [pc, #60]	; (7878 <HAL_RadioSpiInit+0x98>)
    783c:	635a      	str	r2, [r3, #52]	; 0x34
	
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    783e:	2308      	movs	r3, #8
    7840:	18fa      	adds	r2, r7, r3
    7842:	490e      	ldr	r1, [pc, #56]	; (787c <HAL_RadioSpiInit+0x9c>)
    7844:	4b0e      	ldr	r3, [pc, #56]	; (7880 <HAL_RadioSpiInit+0xa0>)
    7846:	0018      	movs	r0, r3
    7848:	4b0e      	ldr	r3, [pc, #56]	; (7884 <HAL_RadioSpiInit+0xa4>)
    784a:	4798      	blx	r3
	spi_enable(&master);
    784c:	4b0c      	ldr	r3, [pc, #48]	; (7880 <HAL_RadioSpiInit+0xa0>)
    784e:	0018      	movs	r0, r3
    7850:	4b0d      	ldr	r3, [pc, #52]	; (7888 <HAL_RadioSpiInit+0xa8>)
    7852:	4798      	blx	r3
	
}
    7854:	46c0      	nop			; (mov r8, r8)
    7856:	46bd      	mov	sp, r7
    7858:	b010      	add	sp, #64	; 0x40
    785a:	bd80      	pop	{r7, pc}
    785c:	00007389 	.word	0x00007389
    7860:	20000f88 	.word	0x20000f88
    7864:	000073ad 	.word	0x000073ad
    7868:	00007305 	.word	0x00007305
    786c:	001e8480 	.word	0x001e8480
    7870:	00530005 	.word	0x00530005
    7874:	003e0005 	.word	0x003e0005
    7878:	00520005 	.word	0x00520005
    787c:	42001000 	.word	0x42001000
    7880:	20000b50 	.word	0x20000b50
    7884:	0000417d 	.word	0x0000417d
    7888:	00007411 	.word	0x00007411

0000788c <HAL_RadioIOInit>:

/*
 * \brief Initializes the Radio Digital IO's,Reset Pins
 */ 
static void HAL_RadioIOInit(void)
{
    788c:	b580      	push	{r7, lr}
    788e:	b084      	sub	sp, #16
    7890:	af00      	add	r7, sp, #0

	struct extint_chan_conf config_extint_chan;
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    7892:	003b      	movs	r3, r7
    7894:	0018      	movs	r0, r3
    7896:	4b45      	ldr	r3, [pc, #276]	; (79ac <HAL_RadioIOInit+0x120>)
    7898:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    789a:	003b      	movs	r3, r7
    789c:	2201      	movs	r2, #1
    789e:	701a      	strb	r2, [r3, #0]
	
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    78a0:	003b      	movs	r3, r7
    78a2:	0019      	movs	r1, r3
    78a4:	2052      	movs	r0, #82	; 0x52
    78a6:	4b42      	ldr	r3, [pc, #264]	; (79b0 <HAL_RadioIOInit+0x124>)
    78a8:	4798      	blx	r3
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    78aa:	003b      	movs	r3, r7
    78ac:	0019      	movs	r1, r3
    78ae:	203e      	movs	r0, #62	; 0x3e
    78b0:	4b3f      	ldr	r3, [pc, #252]	; (79b0 <HAL_RadioIOInit+0x124>)
    78b2:	4798      	blx	r3
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    78b4:	003b      	movs	r3, r7
    78b6:	0019      	movs	r1, r3
    78b8:	203f      	movs	r0, #63	; 0x3f
    78ba:	4b3d      	ldr	r3, [pc, #244]	; (79b0 <HAL_RadioIOInit+0x124>)
    78bc:	4798      	blx	r3
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    78be:	003b      	movs	r3, r7
    78c0:	0019      	movs	r1, r3
    78c2:	202f      	movs	r0, #47	; 0x2f
    78c4:	4b3a      	ldr	r3, [pc, #232]	; (79b0 <HAL_RadioIOInit+0x124>)
    78c6:	4798      	blx	r3
	
	port_pin_set_output_level(SX_RF_SPI_SCK, true);
    78c8:	2101      	movs	r1, #1
    78ca:	2052      	movs	r0, #82	; 0x52
    78cc:	4b39      	ldr	r3, [pc, #228]	; (79b4 <HAL_RadioIOInit+0x128>)
    78ce:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_SPI_MOSI, true);
    78d0:	2101      	movs	r1, #1
    78d2:	203e      	movs	r0, #62	; 0x3e
    78d4:	4b37      	ldr	r3, [pc, #220]	; (79b4 <HAL_RadioIOInit+0x128>)
    78d6:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_SPI_CS, true);
    78d8:	2101      	movs	r1, #1
    78da:	203f      	movs	r0, #63	; 0x3f
    78dc:	4b35      	ldr	r3, [pc, #212]	; (79b4 <HAL_RadioIOInit+0x128>)
    78de:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_RESET_PIN, true);
    78e0:	2101      	movs	r1, #1
    78e2:	202f      	movs	r0, #47	; 0x2f
    78e4:	4b33      	ldr	r3, [pc, #204]	; (79b4 <HAL_RadioIOInit+0x128>)
    78e6:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    78e8:	003b      	movs	r3, r7
    78ea:	2200      	movs	r2, #0
    78ec:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    78ee:	003b      	movs	r3, r7
    78f0:	0019      	movs	r1, r3
    78f2:	2053      	movs	r0, #83	; 0x53
    78f4:	4b2e      	ldr	r3, [pc, #184]	; (79b0 <HAL_RadioIOInit+0x124>)
    78f6:	4798      	blx	r3
	
	#ifdef ENABLE_DIO0
	extint_chan_get_config_defaults(&config_extint_chan);
    78f8:	1d3b      	adds	r3, r7, #4
    78fa:	0018      	movs	r0, r3
    78fc:	4b2e      	ldr	r3, [pc, #184]	; (79b8 <HAL_RadioIOInit+0x12c>)
    78fe:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7900:	1d3b      	adds	r3, r7, #4
    7902:	2230      	movs	r2, #48	; 0x30
    7904:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7906:	1d3b      	adds	r3, r7, #4
    7908:	2200      	movs	r2, #0
    790a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    790c:	1d3b      	adds	r3, r7, #4
    790e:	2200      	movs	r2, #0
    7910:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7912:	1d3b      	adds	r3, r7, #4
    7914:	2201      	movs	r2, #1
    7916:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7918:	1d3b      	adds	r3, r7, #4
    791a:	0019      	movs	r1, r3
    791c:	2000      	movs	r0, #0
    791e:	4b27      	ldr	r3, [pc, #156]	; (79bc <HAL_RadioIOInit+0x130>)
    7920:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7922:	4b27      	ldr	r3, [pc, #156]	; (79c0 <HAL_RadioIOInit+0x134>)
    7924:	2200      	movs	r2, #0
    7926:	2100      	movs	r1, #0
    7928:	0018      	movs	r0, r3
    792a:	4b26      	ldr	r3, [pc, #152]	; (79c4 <HAL_RadioIOInit+0x138>)
    792c:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    792e:	2100      	movs	r1, #0
    7930:	2000      	movs	r0, #0
    7932:	4b25      	ldr	r3, [pc, #148]	; (79c8 <HAL_RadioIOInit+0x13c>)
    7934:	4798      	blx	r3
	#endif

	#ifdef ENABLE_DIO1
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7936:	1d3b      	adds	r3, r7, #4
    7938:	220b      	movs	r2, #11
    793a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    793c:	1d3b      	adds	r3, r7, #4
    793e:	2200      	movs	r2, #0
    7940:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7942:	1d3b      	adds	r3, r7, #4
    7944:	2200      	movs	r2, #0
    7946:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7948:	1d3b      	adds	r3, r7, #4
    794a:	2201      	movs	r2, #1
    794c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    794e:	1d3b      	adds	r3, r7, #4
    7950:	0019      	movs	r1, r3
    7952:	200b      	movs	r0, #11
    7954:	4b19      	ldr	r3, [pc, #100]	; (79bc <HAL_RadioIOInit+0x130>)
    7956:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7958:	4b1c      	ldr	r3, [pc, #112]	; (79cc <HAL_RadioIOInit+0x140>)
    795a:	2200      	movs	r2, #0
    795c:	210b      	movs	r1, #11
    795e:	0018      	movs	r0, r3
    7960:	4b18      	ldr	r3, [pc, #96]	; (79c4 <HAL_RadioIOInit+0x138>)
    7962:	4798      	blx	r3
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7964:	2100      	movs	r1, #0
    7966:	200b      	movs	r0, #11
    7968:	4b17      	ldr	r3, [pc, #92]	; (79c8 <HAL_RadioIOInit+0x13c>)
    796a:	4798      	blx	r3
	#endif

	#ifdef ENABLE_DIO2
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    796c:	1d3b      	adds	r3, r7, #4
    796e:	220c      	movs	r2, #12
    7970:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7972:	1d3b      	adds	r3, r7, #4
    7974:	2200      	movs	r2, #0
    7976:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7978:	1d3b      	adds	r3, r7, #4
    797a:	2200      	movs	r2, #0
    797c:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    797e:	1d3b      	adds	r3, r7, #4
    7980:	2201      	movs	r2, #1
    7982:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    7984:	1d3b      	adds	r3, r7, #4
    7986:	0019      	movs	r1, r3
    7988:	200c      	movs	r0, #12
    798a:	4b0c      	ldr	r3, [pc, #48]	; (79bc <HAL_RadioIOInit+0x130>)
    798c:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    798e:	4b10      	ldr	r3, [pc, #64]	; (79d0 <HAL_RadioIOInit+0x144>)
    7990:	2200      	movs	r2, #0
    7992:	210c      	movs	r1, #12
    7994:	0018      	movs	r0, r3
    7996:	4b0b      	ldr	r3, [pc, #44]	; (79c4 <HAL_RadioIOInit+0x138>)
    7998:	4798      	blx	r3
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    799a:	2100      	movs	r1, #0
    799c:	200c      	movs	r0, #12
    799e:	4b0a      	ldr	r3, [pc, #40]	; (79c8 <HAL_RadioIOInit+0x13c>)
    79a0:	4798      	blx	r3
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
	extint_chan_set_config(DIO5_EIC_LINE, &config_extint_chan);
	extint_register_callback(HAL_RadioDIO5Callback,DIO5_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(DIO5_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	#endif
}
    79a2:	46c0      	nop			; (mov r8, r8)
    79a4:	46bd      	mov	sp, r7
    79a6:	b004      	add	sp, #16
    79a8:	bd80      	pop	{r7, pc}
    79aa:	46c0      	nop			; (mov r8, r8)
    79ac:	0000726d 	.word	0x0000726d
    79b0:	00001991 	.word	0x00001991
    79b4:	00007291 	.word	0x00007291
    79b8:	000015e1 	.word	0x000015e1
    79bc:	00001615 	.word	0x00001615
    79c0:	00007775 	.word	0x00007775
    79c4:	000011ad 	.word	0x000011ad
    79c8:	00001211 	.word	0x00001211
    79cc:	00007799 	.word	0x00007799
    79d0:	000077bd 	.word	0x000077bd

000079d4 <HAL_ResetPinMakeOutput>:
/*
 * \brief This function is used to make the Reset Pin as Output Pin
 */

static void HAL_ResetPinMakeOutput(void)
{
    79d4:	b580      	push	{r7, lr}
    79d6:	b082      	sub	sp, #8
    79d8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    79da:	1d3b      	adds	r3, r7, #4
    79dc:	0018      	movs	r0, r3
    79de:	4b07      	ldr	r3, [pc, #28]	; (79fc <HAL_ResetPinMakeOutput+0x28>)
    79e0:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    79e2:	1d3b      	adds	r3, r7, #4
    79e4:	2201      	movs	r2, #1
    79e6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    79e8:	1d3b      	adds	r3, r7, #4
    79ea:	0019      	movs	r1, r3
    79ec:	202f      	movs	r0, #47	; 0x2f
    79ee:	4b04      	ldr	r3, [pc, #16]	; (7a00 <HAL_ResetPinMakeOutput+0x2c>)
    79f0:	4798      	blx	r3
}
    79f2:	46c0      	nop			; (mov r8, r8)
    79f4:	46bd      	mov	sp, r7
    79f6:	b002      	add	sp, #8
    79f8:	bd80      	pop	{r7, pc}
    79fa:	46c0      	nop			; (mov r8, r8)
    79fc:	0000726d 	.word	0x0000726d
    7a00:	00001991 	.word	0x00001991

00007a04 <HAL_ResetPinMakeInput>:
/*
 * \brief This function is used to make the Reset Pin as Input Pin
 */
static void HAL_ResetPinMakeInput(void)
{
    7a04:	b580      	push	{r7, lr}
    7a06:	b082      	sub	sp, #8
    7a08:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    7a0a:	1d3b      	adds	r3, r7, #4
    7a0c:	0018      	movs	r0, r3
    7a0e:	4b07      	ldr	r3, [pc, #28]	; (7a2c <HAL_ResetPinMakeInput+0x28>)
    7a10:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    7a12:	1d3b      	adds	r3, r7, #4
    7a14:	2200      	movs	r2, #0
    7a16:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7a18:	1d3b      	adds	r3, r7, #4
    7a1a:	0019      	movs	r1, r3
    7a1c:	202f      	movs	r0, #47	; 0x2f
    7a1e:	4b04      	ldr	r3, [pc, #16]	; (7a30 <HAL_ResetPinMakeInput+0x2c>)
    7a20:	4798      	blx	r3
}
    7a22:	46c0      	nop			; (mov r8, r8)
    7a24:	46bd      	mov	sp, r7
    7a26:	b002      	add	sp, #8
    7a28:	bd80      	pop	{r7, pc}
    7a2a:	46c0      	nop			; (mov r8, r8)
    7a2c:	0000726d 	.word	0x0000726d
    7a30:	00001991 	.word	0x00001991

00007a34 <HAL_ResetPinOutputValue>:
/*
 * \brief This function is used to set/clear the Radio Reset Pin
 * \param[in] value Set/Clear the Radio Reset pin 
 */
static void HAL_ResetPinOutputValue(uint8_t value)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b082      	sub	sp, #8
    7a38:	af00      	add	r7, sp, #0
    7a3a:	0002      	movs	r2, r0
    7a3c:	1dfb      	adds	r3, r7, #7
    7a3e:	701a      	strb	r2, [r3, #0]
	if (value == 0)
    7a40:	1dfb      	adds	r3, r7, #7
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	2b00      	cmp	r3, #0
    7a46:	d104      	bne.n	7a52 <HAL_ResetPinOutputValue+0x1e>
	{
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_LOW);
    7a48:	2100      	movs	r1, #0
    7a4a:	202f      	movs	r0, #47	; 0x2f
    7a4c:	4b07      	ldr	r3, [pc, #28]	; (7a6c <HAL_ResetPinOutputValue+0x38>)
    7a4e:	4798      	blx	r3
	}
	else if (value == 1)
	{
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_HIGH);
	}
}
    7a50:	e007      	b.n	7a62 <HAL_ResetPinOutputValue+0x2e>
	else if (value == 1)
    7a52:	1dfb      	adds	r3, r7, #7
    7a54:	781b      	ldrb	r3, [r3, #0]
    7a56:	2b01      	cmp	r3, #1
    7a58:	d103      	bne.n	7a62 <HAL_ResetPinOutputValue+0x2e>
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_HIGH);
    7a5a:	2101      	movs	r1, #1
    7a5c:	202f      	movs	r0, #47	; 0x2f
    7a5e:	4b03      	ldr	r3, [pc, #12]	; (7a6c <HAL_ResetPinOutputValue+0x38>)
    7a60:	4798      	blx	r3
}
    7a62:	46c0      	nop			; (mov r8, r8)
    7a64:	46bd      	mov	sp, r7
    7a66:	b002      	add	sp, #8
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	46c0      	nop			; (mov r8, r8)
    7a6c:	00007291 	.word	0x00007291

00007a70 <HAL_SPICSAssert>:
/*
 * \brief This function is called to select a SPI slave
 */
static void HAL_SPICSAssert(void)
{
    7a70:	b580      	push	{r7, lr}
    7a72:	af00      	add	r7, sp, #0
	spi_select_slave(&master, &slave, true);
    7a74:	4904      	ldr	r1, [pc, #16]	; (7a88 <HAL_SPICSAssert+0x18>)
    7a76:	4b05      	ldr	r3, [pc, #20]	; (7a8c <HAL_SPICSAssert+0x1c>)
    7a78:	2201      	movs	r2, #1
    7a7a:	0018      	movs	r0, r3
    7a7c:	4b04      	ldr	r3, [pc, #16]	; (7a90 <HAL_SPICSAssert+0x20>)
    7a7e:	4798      	blx	r3
}
    7a80:	46c0      	nop			; (mov r8, r8)
    7a82:	46bd      	mov	sp, r7
    7a84:	bd80      	pop	{r7, pc}
    7a86:	46c0      	nop			; (mov r8, r8)
    7a88:	20000f88 	.word	0x20000f88
    7a8c:	20000b50 	.word	0x20000b50
    7a90:	00004295 	.word	0x00004295

00007a94 <HAL_SPICSDeassert>:

/*
 * \brief This function is called to deselect a SPI slave
 */
static void HAL_SPICSDeassert(void)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	af00      	add	r7, sp, #0
	spi_select_slave(&master, &slave, false);
    7a98:	4904      	ldr	r1, [pc, #16]	; (7aac <HAL_SPICSDeassert+0x18>)
    7a9a:	4b05      	ldr	r3, [pc, #20]	; (7ab0 <HAL_SPICSDeassert+0x1c>)
    7a9c:	2200      	movs	r2, #0
    7a9e:	0018      	movs	r0, r3
    7aa0:	4b04      	ldr	r3, [pc, #16]	; (7ab4 <HAL_SPICSDeassert+0x20>)
    7aa2:	4798      	blx	r3
}
    7aa4:	46c0      	nop			; (mov r8, r8)
    7aa6:	46bd      	mov	sp, r7
    7aa8:	bd80      	pop	{r7, pc}
    7aaa:	46c0      	nop			; (mov r8, r8)
    7aac:	20000f88 	.word	0x20000f88
    7ab0:	20000b50 	.word	0x20000b50
    7ab4:	00004295 	.word	0x00004295

00007ab8 <HAL_SPISend>:
/*
 * \brief This function is used to write a byte of data to the SPI DATA register
 * \param[in] data Byte of data to be written into the SPI DATA register
 */
static uint8_t HAL_SPISend(uint8_t data)
{
    7ab8:	b580      	push	{r7, lr}
    7aba:	b084      	sub	sp, #16
    7abc:	af00      	add	r7, sp, #0
    7abe:	0002      	movs	r2, r0
    7ac0:	1dfb      	adds	r3, r7, #7
    7ac2:	701a      	strb	r2, [r3, #0]
	uint16_t read_val = 0;
    7ac4:	230e      	movs	r3, #14
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	2200      	movs	r2, #0
    7aca:	801a      	strh	r2, [r3, #0]
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    7acc:	46c0      	nop			; (mov r8, r8)
    7ace:	4b1d      	ldr	r3, [pc, #116]	; (7b44 <HAL_SPISend+0x8c>)
    7ad0:	0018      	movs	r0, r3
    7ad2:	4b1d      	ldr	r3, [pc, #116]	; (7b48 <HAL_SPISend+0x90>)
    7ad4:	4798      	blx	r3
    7ad6:	0003      	movs	r3, r0
    7ad8:	001a      	movs	r2, r3
    7ada:	2301      	movs	r3, #1
    7adc:	4053      	eors	r3, r2
    7ade:	b2db      	uxtb	r3, r3
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d1f4      	bne.n	7ace <HAL_SPISend+0x16>
	spi_write(&master, data);
    7ae4:	1dfb      	adds	r3, r7, #7
    7ae6:	781b      	ldrb	r3, [r3, #0]
    7ae8:	b29a      	uxth	r2, r3
    7aea:	4b16      	ldr	r3, [pc, #88]	; (7b44 <HAL_SPISend+0x8c>)
    7aec:	0011      	movs	r1, r2
    7aee:	0018      	movs	r0, r3
    7af0:	4b16      	ldr	r3, [pc, #88]	; (7b4c <HAL_SPISend+0x94>)
    7af2:	4798      	blx	r3
	while (!spi_is_write_complete(&master));
    7af4:	46c0      	nop			; (mov r8, r8)
    7af6:	4b13      	ldr	r3, [pc, #76]	; (7b44 <HAL_SPISend+0x8c>)
    7af8:	0018      	movs	r0, r3
    7afa:	4b15      	ldr	r3, [pc, #84]	; (7b50 <HAL_SPISend+0x98>)
    7afc:	4798      	blx	r3
    7afe:	0003      	movs	r3, r0
    7b00:	001a      	movs	r2, r3
    7b02:	2301      	movs	r3, #1
    7b04:	4053      	eors	r3, r2
    7b06:	b2db      	uxtb	r3, r3
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d1f4      	bne.n	7af6 <HAL_SPISend+0x3e>
	
	while (!spi_is_ready_to_read(&master));
    7b0c:	46c0      	nop			; (mov r8, r8)
    7b0e:	4b0d      	ldr	r3, [pc, #52]	; (7b44 <HAL_SPISend+0x8c>)
    7b10:	0018      	movs	r0, r3
    7b12:	4b10      	ldr	r3, [pc, #64]	; (7b54 <HAL_SPISend+0x9c>)
    7b14:	4798      	blx	r3
    7b16:	0003      	movs	r3, r0
    7b18:	001a      	movs	r2, r3
    7b1a:	2301      	movs	r3, #1
    7b1c:	4053      	eors	r3, r2
    7b1e:	b2db      	uxtb	r3, r3
    7b20:	2b00      	cmp	r3, #0
    7b22:	d1f4      	bne.n	7b0e <HAL_SPISend+0x56>
	spi_read(&master, &read_val);
    7b24:	230e      	movs	r3, #14
    7b26:	18fa      	adds	r2, r7, r3
    7b28:	4b06      	ldr	r3, [pc, #24]	; (7b44 <HAL_SPISend+0x8c>)
    7b2a:	0011      	movs	r1, r2
    7b2c:	0018      	movs	r0, r3
    7b2e:	4b0a      	ldr	r3, [pc, #40]	; (7b58 <HAL_SPISend+0xa0>)
    7b30:	4798      	blx	r3
	
	return ((uint8_t)read_val);
    7b32:	230e      	movs	r3, #14
    7b34:	18fb      	adds	r3, r7, r3
    7b36:	881b      	ldrh	r3, [r3, #0]
    7b38:	b2db      	uxtb	r3, r3
}
    7b3a:	0018      	movs	r0, r3
    7b3c:	46bd      	mov	sp, r7
    7b3e:	b004      	add	sp, #16
    7b40:	bd80      	pop	{r7, pc}
    7b42:	46c0      	nop			; (mov r8, r8)
    7b44:	20000b50 	.word	0x20000b50
    7b48:	0000746d 	.word	0x0000746d
    7b4c:	000074bd 	.word	0x000074bd
    7b50:	00007445 	.word	0x00007445
    7b54:	00007495 	.word	0x00007495
    7b58:	00007505 	.word	0x00007505

00007b5c <HAL_RegisterDioInterruptHandler>:
 *
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	b082      	sub	sp, #8
    7b60:	af00      	add	r7, sp, #0
    7b62:	0002      	movs	r2, r0
    7b64:	6039      	str	r1, [r7, #0]
    7b66:	1dfb      	adds	r3, r7, #7
    7b68:	701a      	strb	r2, [r3, #0]
  switch (dioPin)
    7b6a:	1dfb      	adds	r3, r7, #7
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	2b02      	cmp	r3, #2
    7b70:	d008      	beq.n	7b84 <HAL_RegisterDioInterruptHandler+0x28>
    7b72:	2b04      	cmp	r3, #4
    7b74:	d00a      	beq.n	7b8c <HAL_RegisterDioInterruptHandler+0x30>
    7b76:	2b01      	cmp	r3, #1
    7b78:	d000      	beq.n	7b7c <HAL_RegisterDioInterruptHandler+0x20>
      interruptHandlerDio5 = handler;
      break;
#endif

    default:
      break;
    7b7a:	e00b      	b.n	7b94 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio0 = handler;
    7b7c:	4b07      	ldr	r3, [pc, #28]	; (7b9c <HAL_RegisterDioInterruptHandler+0x40>)
    7b7e:	683a      	ldr	r2, [r7, #0]
    7b80:	601a      	str	r2, [r3, #0]
      break;
    7b82:	e007      	b.n	7b94 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio1 = handler;
    7b84:	4b06      	ldr	r3, [pc, #24]	; (7ba0 <HAL_RegisterDioInterruptHandler+0x44>)
    7b86:	683a      	ldr	r2, [r7, #0]
    7b88:	601a      	str	r2, [r3, #0]
      break;
    7b8a:	e003      	b.n	7b94 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio2 = handler;
    7b8c:	4b05      	ldr	r3, [pc, #20]	; (7ba4 <HAL_RegisterDioInterruptHandler+0x48>)
    7b8e:	683a      	ldr	r2, [r7, #0]
    7b90:	601a      	str	r2, [r3, #0]
      break;
    7b92:	46c0      	nop			; (mov r8, r8)
  }
}
    7b94:	46c0      	nop			; (mov r8, r8)
    7b96:	46bd      	mov	sp, r7
    7b98:	b002      	add	sp, #8
    7b9a:	bd80      	pop	{r7, pc}
    7b9c:	20000b44 	.word	0x20000b44
    7ba0:	20000b48 	.word	0x20000b48
    7ba4:	20000b4c 	.word	0x20000b4c

00007ba8 <HAL_EnableRFCtrl>:
 *				TX = 1 
 * \param[out] None
 */

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
    7ba8:	b580      	push	{r7, lr}
    7baa:	b082      	sub	sp, #8
    7bac:	af00      	add	r7, sp, #0
    7bae:	0002      	movs	r2, r0
    7bb0:	1dfb      	adds	r3, r7, #7
    7bb2:	701a      	strb	r2, [r3, #0]
    7bb4:	1dbb      	adds	r3, r7, #6
    7bb6:	1c0a      	adds	r2, r1, #0
    7bb8:	701a      	strb	r2, [r3, #0]
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    7bba:	1dfb      	adds	r3, r7, #7
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	2b01      	cmp	r3, #1
    7bc0:	d003      	beq.n	7bca <HAL_EnableRFCtrl+0x22>
    7bc2:	1dbb      	adds	r3, r7, #6
    7bc4:	781b      	ldrb	r3, [r3, #0]
    7bc6:	2b00      	cmp	r3, #0
    7bc8:	d104      	bne.n	7bd4 <HAL_EnableRFCtrl+0x2c>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
    7bca:	2101      	movs	r1, #1
    7bcc:	200d      	movs	r0, #13
    7bce:	4b09      	ldr	r3, [pc, #36]	; (7bf4 <HAL_EnableRFCtrl+0x4c>)
    7bd0:	4798      	blx	r3
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    7bd2:	e00b      	b.n	7bec <HAL_EnableRFCtrl+0x44>
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    7bd4:	1dfb      	adds	r3, r7, #7
    7bd6:	781b      	ldrb	r3, [r3, #0]
    7bd8:	2b02      	cmp	r3, #2
    7bda:	d107      	bne.n	7bec <HAL_EnableRFCtrl+0x44>
    7bdc:	1dbb      	adds	r3, r7, #6
    7bde:	781b      	ldrb	r3, [r3, #0]
    7be0:	2b01      	cmp	r3, #1
    7be2:	d103      	bne.n	7bec <HAL_EnableRFCtrl+0x44>
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
    7be4:	2100      	movs	r1, #0
    7be6:	200d      	movs	r0, #13
    7be8:	4b02      	ldr	r3, [pc, #8]	; (7bf4 <HAL_EnableRFCtrl+0x4c>)
    7bea:	4798      	blx	r3
}
    7bec:	46c0      	nop			; (mov r8, r8)
    7bee:	46bd      	mov	sp, r7
    7bf0:	b002      	add	sp, #8
    7bf2:	bd80      	pop	{r7, pc}
    7bf4:	00007291 	.word	0x00007291

00007bf8 <HAL_DisableRFCtrl>:
 *				TX = 1 
 * \param[out] None
 */

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
    7bf8:	b580      	push	{r7, lr}
    7bfa:	b082      	sub	sp, #8
    7bfc:	af00      	add	r7, sp, #0
    7bfe:	0002      	movs	r2, r0
    7c00:	1dfb      	adds	r3, r7, #7
    7c02:	701a      	strb	r2, [r3, #0]
    7c04:	1dbb      	adds	r3, r7, #6
    7c06:	1c0a      	adds	r2, r1, #0
    7c08:	701a      	strb	r2, [r3, #0]
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    7c0a:	1dfb      	adds	r3, r7, #7
    7c0c:	781b      	ldrb	r3, [r3, #0]
    7c0e:	2b01      	cmp	r3, #1
    7c10:	d003      	beq.n	7c1a <HAL_DisableRFCtrl+0x22>
    7c12:	1dbb      	adds	r3, r7, #6
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	2b00      	cmp	r3, #0
    7c18:	d103      	bne.n	7c22 <HAL_DisableRFCtrl+0x2a>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
    7c1a:	2100      	movs	r1, #0
    7c1c:	200d      	movs	r0, #13
    7c1e:	4b03      	ldr	r3, [pc, #12]	; (7c2c <HAL_DisableRFCtrl+0x34>)
    7c20:	4798      	blx	r3
	}
#endif	
}
    7c22:	46c0      	nop			; (mov r8, r8)
    7c24:	46bd      	mov	sp, r7
    7c26:	b002      	add	sp, #8
    7c28:	bd80      	pop	{r7, pc}
    7c2a:	46c0      	nop			; (mov r8, r8)
    7c2c:	00007291 	.word	0x00007291

00007c30 <HAL_GetRadioClkStabilizationDelay>:
 *
 * \param[in] None
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
    7c30:	b580      	push	{r7, lr}
    7c32:	af00      	add	r7, sp, #0
	return RADIO_CLK_STABILITATION_DELAY;
    7c34:	2302      	movs	r3, #2
}
    7c36:	0018      	movs	r0, r3
    7c38:	46bd      	mov	sp, r7
    7c3a:	bd80      	pop	{r7, pc}

00007c3c <HAL_GetRadioClkSrc>:
 *
 * \param[in] None
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
    7c3c:	b580      	push	{r7, lr}
    7c3e:	af00      	add	r7, sp, #0
	return RADIO_CLK_SRC;
    7c40:	2300      	movs	r3, #0
}
    7c42:	0018      	movs	r0, r3
    7c44:	46bd      	mov	sp, r7
    7c46:	bd80      	pop	{r7, pc}

00007c48 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    7c48:	b580      	push	{r7, lr}
    7c4a:	af00      	add	r7, sp, #0
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
    7c4c:	2101      	movs	r1, #1
    7c4e:	2009      	movs	r0, #9
    7c50:	4b03      	ldr	r3, [pc, #12]	; (7c60 <HAL_TCXOPowerOn+0x18>)
    7c52:	4798      	blx	r3
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    7c54:	2002      	movs	r0, #2
    7c56:	4b03      	ldr	r3, [pc, #12]	; (7c64 <HAL_TCXOPowerOn+0x1c>)
    7c58:	4798      	blx	r3
#endif
}
    7c5a:	46c0      	nop			; (mov r8, r8)
    7c5c:	46bd      	mov	sp, r7
    7c5e:	bd80      	pop	{r7, pc}
    7c60:	00007291 	.word	0x00007291
    7c64:	000001d1 	.word	0x000001d1

00007c68 <HAL_TCXOPowerOff>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOff(void)
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	af00      	add	r7, sp, #0
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
    7c6c:	2100      	movs	r1, #0
    7c6e:	2009      	movs	r0, #9
    7c70:	4b02      	ldr	r3, [pc, #8]	; (7c7c <HAL_TCXOPowerOff+0x14>)
    7c72:	4798      	blx	r3
#endif
#endif
}
    7c74:	46c0      	nop			; (mov r8, r8)
    7c76:	46bd      	mov	sp, r7
    7c78:	bd80      	pop	{r7, pc}
    7c7a:	46c0      	nop			; (mov r8, r8)
    7c7c:	00007291 	.word	0x00007291

00007c80 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    7c80:	b580      	push	{r7, lr}
    7c82:	b084      	sub	sp, #16
    7c84:	af00      	add	r7, sp, #0
    7c86:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    7c88:	687b      	ldr	r3, [r7, #4]
    7c8a:	22b0      	movs	r2, #176	; 0xb0
    7c8c:	0112      	lsls	r2, r2, #4
    7c8e:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	2201      	movs	r2, #1
    7c94:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	2200      	movs	r2, #0
    7c9a:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	2201      	movs	r2, #1
    7ca0:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    7ca2:	230f      	movs	r3, #15
    7ca4:	18fb      	adds	r3, r7, r3
    7ca6:	2200      	movs	r2, #0
    7ca8:	701a      	strb	r2, [r3, #0]
    7caa:	e00e      	b.n	7cca <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    7cac:	230f      	movs	r3, #15
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	781a      	ldrb	r2, [r3, #0]
    7cb2:	687b      	ldr	r3, [r7, #4]
    7cb4:	3202      	adds	r2, #2
    7cb6:	0092      	lsls	r2, r2, #2
    7cb8:	2100      	movs	r1, #0
    7cba:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    7cbc:	230f      	movs	r3, #15
    7cbe:	18fb      	adds	r3, r7, r3
    7cc0:	781a      	ldrb	r2, [r3, #0]
    7cc2:	230f      	movs	r3, #15
    7cc4:	18fb      	adds	r3, r7, r3
    7cc6:	3201      	adds	r2, #1
    7cc8:	701a      	strb	r2, [r3, #0]
    7cca:	230f      	movs	r3, #15
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	2b01      	cmp	r3, #1
    7cd2:	d9eb      	bls.n	7cac <rtc_count_get_config_defaults+0x2c>
	}
}
    7cd4:	46c0      	nop			; (mov r8, r8)
    7cd6:	46bd      	mov	sp, r7
    7cd8:	b004      	add	sp, #16
    7cda:	bd80      	pop	{r7, pc}

00007cdc <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    7cdc:	b580      	push	{r7, lr}
    7cde:	b084      	sub	sp, #16
    7ce0:	af00      	add	r7, sp, #0
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
    7ce2:	003b      	movs	r3, r7
    7ce4:	0018      	movs	r0, r3
    7ce6:	4b0f      	ldr	r3, [pc, #60]	; (7d24 <SleepTimerInit+0x48>)
    7ce8:	4798      	blx	r3
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    7cea:	003b      	movs	r3, r7
    7cec:	2200      	movs	r2, #0
    7cee:	801a      	strh	r2, [r3, #0]
	rtc_config.enable_read_sync = true;
    7cf0:	003b      	movs	r3, r7
    7cf2:	2201      	movs	r2, #1
    7cf4:	711a      	strb	r2, [r3, #4]
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    7cf6:	003b      	movs	r3, r7
    7cf8:	2201      	movs	r2, #1
    7cfa:	4252      	negs	r2, r2
    7cfc:	609a      	str	r2, [r3, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    7cfe:	003b      	movs	r3, r7
    7d00:	2201      	movs	r2, #1
    7d02:	4252      	negs	r2, r2
    7d04:	60da      	str	r2, [r3, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    7d06:	003a      	movs	r2, r7
    7d08:	4907      	ldr	r1, [pc, #28]	; (7d28 <SleepTimerInit+0x4c>)
    7d0a:	4b08      	ldr	r3, [pc, #32]	; (7d2c <SleepTimerInit+0x50>)
    7d0c:	0018      	movs	r0, r3
    7d0e:	4b08      	ldr	r3, [pc, #32]	; (7d30 <SleepTimerInit+0x54>)
    7d10:	4798      	blx	r3
	rtc_count_enable(&rtc);
    7d12:	4b06      	ldr	r3, [pc, #24]	; (7d2c <SleepTimerInit+0x50>)
    7d14:	0018      	movs	r0, r3
    7d16:	4b07      	ldr	r3, [pc, #28]	; (7d34 <SleepTimerInit+0x58>)
    7d18:	4798      	blx	r3
}
    7d1a:	46c0      	nop			; (mov r8, r8)
    7d1c:	46bd      	mov	sp, r7
    7d1e:	b004      	add	sp, #16
    7d20:	bd80      	pop	{r7, pc}
    7d22:	46c0      	nop			; (mov r8, r8)
    7d24:	00007c81 	.word	0x00007c81
    7d28:	40002000 	.word	0x40002000
    7d2c:	20000f8c 	.word	0x20000f8c
    7d30:	00001d01 	.word	0x00001d01
    7d34:	00001aed 	.word	0x00001aed

00007d38 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    7d38:	b580      	push	{r7, lr}
    7d3a:	af00      	add	r7, sp, #0
	return rtc_count_get_count(&rtc);
    7d3c:	4b03      	ldr	r3, [pc, #12]	; (7d4c <SleepTimerGetElapsedTime+0x14>)
    7d3e:	0018      	movs	r0, r3
    7d40:	4b03      	ldr	r3, [pc, #12]	; (7d50 <SleepTimerGetElapsedTime+0x18>)
    7d42:	4798      	blx	r3
    7d44:	0003      	movs	r3, r0
}
    7d46:	0018      	movs	r0, r3
    7d48:	46bd      	mov	sp, r7
    7d4a:	bd80      	pop	{r7, pc}
    7d4c:	20000f8c 	.word	0x20000f8c
    7d50:	00001d65 	.word	0x00001d65

00007d54 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    7d54:	b580      	push	{r7, lr}
    7d56:	af00      	add	r7, sp, #0
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    7d58:	4b03      	ldr	r3, [pc, #12]	; (7d68 <SleepTimerStop+0x14>)
    7d5a:	2108      	movs	r1, #8
    7d5c:	0018      	movs	r0, r3
    7d5e:	4b03      	ldr	r3, [pc, #12]	; (7d6c <SleepTimerStop+0x18>)
    7d60:	4798      	blx	r3
}
    7d62:	46c0      	nop			; (mov r8, r8)
    7d64:	46bd      	mov	sp, r7
    7d66:	bd80      	pop	{r7, pc}
    7d68:	20000f8c 	.word	0x20000f8c
    7d6c:	00001e4d 	.word	0x00001e4d

00007d70 <system_interrupt_enter_critical_section>:
{
    7d70:	b580      	push	{r7, lr}
    7d72:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7d74:	4b02      	ldr	r3, [pc, #8]	; (7d80 <system_interrupt_enter_critical_section+0x10>)
    7d76:	4798      	blx	r3
}
    7d78:	46c0      	nop			; (mov r8, r8)
    7d7a:	46bd      	mov	sp, r7
    7d7c:	bd80      	pop	{r7, pc}
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	00000201 	.word	0x00000201

00007d84 <system_interrupt_leave_critical_section>:
{
    7d84:	b580      	push	{r7, lr}
    7d86:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7d88:	4b02      	ldr	r3, [pc, #8]	; (7d94 <system_interrupt_leave_critical_section+0x10>)
    7d8a:	4798      	blx	r3
}
    7d8c:	46c0      	nop			; (mov r8, r8)
    7d8e:	46bd      	mov	sp, r7
    7d90:	bd80      	pop	{r7, pc}
    7d92:	46c0      	nop			; (mov r8, r8)
    7d94:	00000255 	.word	0x00000255

00007d98 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
#ifndef UT
    delay_ms(ms);
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	2b00      	cmp	r3, #0
    7da4:	d004      	beq.n	7db0 <SystemBlockingWaitMs+0x18>
    7da6:	687b      	ldr	r3, [r7, #4]
    7da8:	0018      	movs	r0, r3
    7daa:	4b05      	ldr	r3, [pc, #20]	; (7dc0 <SystemBlockingWaitMs+0x28>)
    7dac:	4798      	blx	r3
#endif
}
    7dae:	e002      	b.n	7db6 <SystemBlockingWaitMs+0x1e>
    delay_ms(ms);
    7db0:	2001      	movs	r0, #1
    7db2:	4b04      	ldr	r3, [pc, #16]	; (7dc4 <SystemBlockingWaitMs+0x2c>)
    7db4:	4798      	blx	r3
}
    7db6:	46c0      	nop			; (mov r8, r8)
    7db8:	46bd      	mov	sp, r7
    7dba:	b002      	add	sp, #8
    7dbc:	bd80      	pop	{r7, pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	000001d1 	.word	0x000001d1
    7dc4:	000001a1 	.word	0x000001a1

00007dc8 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    7dc8:	b580      	push	{r7, lr}
    7dca:	af00      	add	r7, sp, #0
#ifndef UT
	system_interrupt_enter_critical_section();
    7dcc:	4b02      	ldr	r3, [pc, #8]	; (7dd8 <system_enter_critical_section+0x10>)
    7dce:	4798      	blx	r3
#endif
}
    7dd0:	46c0      	nop			; (mov r8, r8)
    7dd2:	46bd      	mov	sp, r7
    7dd4:	bd80      	pop	{r7, pc}
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	00007d71 	.word	0x00007d71

00007ddc <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    7ddc:	b580      	push	{r7, lr}
    7dde:	af00      	add	r7, sp, #0
#ifndef UT
	system_interrupt_leave_critical_section();
    7de0:	4b02      	ldr	r3, [pc, #8]	; (7dec <system_leave_critical_section+0x10>)
    7de2:	4798      	blx	r3
#endif
}
    7de4:	46c0      	nop			; (mov r8, r8)
    7de6:	46bd      	mov	sp, r7
    7de8:	bd80      	pop	{r7, pc}
    7dea:	46c0      	nop			; (mov r8, r8)
    7dec:	00007d85 	.word	0x00007d85

00007df0 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    7df0:	b5b0      	push	{r4, r5, r7, lr}
    7df2:	b082      	sub	sp, #8
    7df4:	af00      	add	r7, sp, #0
    uint64_t sleptTimeUs = 0;
    7df6:	2300      	movs	r3, #0
    7df8:	2400      	movs	r4, #0
    7dfa:	603b      	str	r3, [r7, #0]
    7dfc:	607c      	str	r4, [r7, #4]

    if (PMM_STATE_SLEEP == pmmState)
    7dfe:	4b21      	ldr	r3, [pc, #132]	; (7e84 <PMM_Wakeup+0x94>)
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	2b01      	cmp	r3, #1
    7e04:	d139      	bne.n	7e7a <PMM_Wakeup+0x8a>
    {

		pmmState = PMM_STATE_ACTIVE;
    7e06:	4b1f      	ldr	r3, [pc, #124]	; (7e84 <PMM_Wakeup+0x94>)
    7e08:	2200      	movs	r2, #0
    7e0a:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    7e0c:	4b1e      	ldr	r3, [pc, #120]	; (7e88 <PMM_Wakeup+0x98>)
    7e0e:	4798      	blx	r3
    7e10:	0002      	movs	r2, r0
    7e12:	4b1e      	ldr	r3, [pc, #120]	; (7e8c <PMM_Wakeup+0x9c>)
    7e14:	0010      	movs	r0, r2
    7e16:	4798      	blx	r3
    7e18:	1c02      	adds	r2, r0, #0
    7e1a:	4b1d      	ldr	r3, [pc, #116]	; (7e90 <PMM_Wakeup+0xa0>)
    7e1c:	491d      	ldr	r1, [pc, #116]	; (7e94 <PMM_Wakeup+0xa4>)
    7e1e:	1c10      	adds	r0, r2, #0
    7e20:	4798      	blx	r3
    7e22:	1c03      	adds	r3, r0, #0
    7e24:	1c1a      	adds	r2, r3, #0
    7e26:	4b1c      	ldr	r3, [pc, #112]	; (7e98 <PMM_Wakeup+0xa8>)
    7e28:	1c10      	adds	r0, r2, #0
    7e2a:	4798      	blx	r3
    7e2c:	0003      	movs	r3, r0
    7e2e:	000c      	movs	r4, r1
    7e30:	603b      	str	r3, [r7, #0]
    7e32:	607c      	str	r4, [r7, #4]
        SleepTimerStop();
    7e34:	4b19      	ldr	r3, [pc, #100]	; (7e9c <PMM_Wakeup+0xac>)
    7e36:	4798      	blx	r3

        SystemTimerSync(sleptTimeUs);
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	687c      	ldr	r4, [r7, #4]
    7e3c:	0018      	movs	r0, r3
    7e3e:	0021      	movs	r1, r4
    7e40:	4b17      	ldr	r3, [pc, #92]	; (7ea0 <PMM_Wakeup+0xb0>)
    7e42:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    7e44:	4b17      	ldr	r3, [pc, #92]	; (7ea4 <PMM_Wakeup+0xb4>)
    7e46:	681b      	ldr	r3, [r3, #0]
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d016      	beq.n	7e7a <PMM_Wakeup+0x8a>
    7e4c:	4b15      	ldr	r3, [pc, #84]	; (7ea4 <PMM_Wakeup+0xb4>)
    7e4e:	681b      	ldr	r3, [r3, #0]
    7e50:	689b      	ldr	r3, [r3, #8]
    7e52:	2b00      	cmp	r3, #0
    7e54:	d011      	beq.n	7e7a <PMM_Wakeup+0x8a>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    7e56:	4b13      	ldr	r3, [pc, #76]	; (7ea4 <PMM_Wakeup+0xb4>)
    7e58:	681b      	ldr	r3, [r3, #0]
    7e5a:	689c      	ldr	r4, [r3, #8]
    7e5c:	6838      	ldr	r0, [r7, #0]
    7e5e:	6879      	ldr	r1, [r7, #4]
    7e60:	4d11      	ldr	r5, [pc, #68]	; (7ea8 <PMM_Wakeup+0xb8>)
    7e62:	22fa      	movs	r2, #250	; 0xfa
    7e64:	0092      	lsls	r2, r2, #2
    7e66:	2300      	movs	r3, #0
    7e68:	47a8      	blx	r5
    7e6a:	0002      	movs	r2, r0
    7e6c:	000b      	movs	r3, r1
    7e6e:	0013      	movs	r3, r2
    7e70:	0018      	movs	r0, r3
    7e72:	47a0      	blx	r4
            sleepReq = NULL;
    7e74:	4b0b      	ldr	r3, [pc, #44]	; (7ea4 <PMM_Wakeup+0xb4>)
    7e76:	2200      	movs	r2, #0
    7e78:	601a      	str	r2, [r3, #0]
        }
    }
}
    7e7a:	46c0      	nop			; (mov r8, r8)
    7e7c:	46bd      	mov	sp, r7
    7e7e:	b002      	add	sp, #8
    7e80:	bdb0      	pop	{r4, r5, r7, pc}
    7e82:	46c0      	nop			; (mov r8, r8)
    7e84:	20000b60 	.word	0x20000b60
    7e88:	00007d39 	.word	0x00007d39
    7e8c:	0000f799 	.word	0x0000f799
    7e90:	0000f141 	.word	0x0000f141
    7e94:	41f423d7 	.word	0x41f423d7
    7e98:	0000e87d 	.word	0x0000e87d
    7e9c:	00007d55 	.word	0x00007d55
    7ea0:	00009a4d 	.word	0x00009a4d
    7ea4:	20000b5c 	.word	0x20000b5c
    7ea8:	0000e77d 	.word	0x0000e77d

00007eac <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    7eac:	b5b0      	push	{r4, r5, r7, lr}
    7eae:	b086      	sub	sp, #24
    7eb0:	af00      	add	r7, sp, #0
    7eb2:	60b9      	str	r1, [r7, #8]
    7eb4:	607a      	str	r2, [r7, #4]
    7eb6:	230f      	movs	r3, #15
    7eb8:	18fb      	adds	r3, r7, r3
    7eba:	1c02      	adds	r2, r0, #0
    7ebc:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7ebe:	2317      	movs	r3, #23
    7ec0:	18fb      	adds	r3, r7, r3
    7ec2:	220a      	movs	r2, #10
    7ec4:	701a      	strb	r2, [r3, #0]
	if(attrType < REG_NUM_ATTRIBUTES)
    7ec6:	230f      	movs	r3, #15
    7ec8:	18fb      	adds	r3, r7, r3
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	2b3c      	cmp	r3, #60	; 0x3c
    7ece:	d810      	bhi.n	7ef2 <LORAREG_GetAttr+0x46>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    7ed0:	230f      	movs	r3, #15
    7ed2:	18fb      	adds	r3, r7, r3
    7ed4:	781a      	ldrb	r2, [r3, #0]
    7ed6:	4b0a      	ldr	r3, [pc, #40]	; (7f00 <LORAREG_GetAttr+0x54>)
    7ed8:	0092      	lsls	r2, r2, #2
    7eda:	58d3      	ldr	r3, [r2, r3]
    7edc:	2217      	movs	r2, #23
    7ede:	18bc      	adds	r4, r7, r2
    7ee0:	687d      	ldr	r5, [r7, #4]
    7ee2:	68b9      	ldr	r1, [r7, #8]
    7ee4:	220f      	movs	r2, #15
    7ee6:	18ba      	adds	r2, r7, r2
    7ee8:	7810      	ldrb	r0, [r2, #0]
    7eea:	002a      	movs	r2, r5
    7eec:	4798      	blx	r3
    7eee:	0003      	movs	r3, r0
    7ef0:	7023      	strb	r3, [r4, #0]
	}

	return result;
    7ef2:	2317      	movs	r3, #23
    7ef4:	18fb      	adds	r3, r7, r3
    7ef6:	781b      	ldrb	r3, [r3, #0]
}
    7ef8:	0018      	movs	r0, r3
    7efa:	46bd      	mov	sp, r7
    7efc:	b006      	add	sp, #24
    7efe:	bdb0      	pop	{r4, r5, r7, pc}
    7f00:	20000b64 	.word	0x20000b64

00007f04 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    7f04:	b590      	push	{r4, r7, lr}
    7f06:	b085      	sub	sp, #20
    7f08:	af00      	add	r7, sp, #0
    7f0a:	0002      	movs	r2, r0
    7f0c:	6039      	str	r1, [r7, #0]
    7f0e:	1dfb      	adds	r3, r7, #7
    7f10:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7f12:	230f      	movs	r3, #15
    7f14:	18fb      	adds	r3, r7, r3
    7f16:	220a      	movs	r2, #10
    7f18:	701a      	strb	r2, [r3, #0]
	if(attrType < REG_NUM_ATTRIBUTES)
    7f1a:	1dfb      	adds	r3, r7, #7
    7f1c:	781b      	ldrb	r3, [r3, #0]
    7f1e:	2b3c      	cmp	r3, #60	; 0x3c
    7f20:	d80d      	bhi.n	7f3e <LORAREG_SetAttr+0x3a>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
    7f22:	1dfb      	adds	r3, r7, #7
    7f24:	781a      	ldrb	r2, [r3, #0]
    7f26:	4b09      	ldr	r3, [pc, #36]	; (7f4c <LORAREG_SetAttr+0x48>)
    7f28:	0092      	lsls	r2, r2, #2
    7f2a:	58d3      	ldr	r3, [r2, r3]
    7f2c:	220f      	movs	r2, #15
    7f2e:	18bc      	adds	r4, r7, r2
    7f30:	6839      	ldr	r1, [r7, #0]
    7f32:	1dfa      	adds	r2, r7, #7
    7f34:	7812      	ldrb	r2, [r2, #0]
    7f36:	0010      	movs	r0, r2
    7f38:	4798      	blx	r3
    7f3a:	0003      	movs	r3, r0
    7f3c:	7023      	strb	r3, [r4, #0]
	}

	return result;
    7f3e:	230f      	movs	r3, #15
    7f40:	18fb      	adds	r3, r7, r3
    7f42:	781b      	ldrb	r3, [r3, #0]
}
    7f44:	0018      	movs	r0, r3
    7f46:	46bd      	mov	sp, r7
    7f48:	b005      	add	sp, #20
    7f4a:	bd90      	pop	{r4, r7, pc}
    7f4c:	20000c58 	.word	0x20000c58

00007f50 <LORAREG_SupportedBands>:
	return LORAWAN_SUCCESS;
}
#endif

StackRetStatus_t LORAREG_SupportedBands(uint16_t *bands)
{
    7f50:	b580      	push	{r7, lr}
    7f52:	b084      	sub	sp, #16
    7f54:	af00      	add	r7, sp, #0
    7f56:	6078      	str	r0, [r7, #4]
	StackRetStatus_t  status = LORAWAN_SUCCESS;
    7f58:	230f      	movs	r3, #15
    7f5a:	18fb      	adds	r3, r7, r3
    7f5c:	2208      	movs	r2, #8
    7f5e:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
    7f60:	230c      	movs	r3, #12
    7f62:	18fb      	adds	r3, r7, r3
    7f64:	2200      	movs	r2, #0
    7f66:	801a      	strh	r2, [r3, #0]
	
	value  = value |
    7f68:	230c      	movs	r3, #12
    7f6a:	18fb      	adds	r3, r7, r3
    7f6c:	2201      	movs	r2, #1
    7f6e:	4252      	negs	r2, r2
    7f70:	801a      	strh	r2, [r3, #0]
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	220c      	movs	r2, #12
    7f76:	18ba      	adds	r2, r7, r2
    7f78:	8812      	ldrh	r2, [r2, #0]
    7f7a:	801a      	strh	r2, [r3, #0]
	
	return status;
    7f7c:	230f      	movs	r3, #15
    7f7e:	18fb      	adds	r3, r7, r3
    7f80:	781b      	ldrb	r3, [r3, #0]
}
    7f82:	0018      	movs	r0, r3
    7f84:	46bd      	mov	sp, r7
    7f86:	b004      	add	sp, #16
    7f88:	bd80      	pop	{r7, pc}
	...

00007f8c <SAL_Init>:
 * \return value of type SalStatus_t
 *         SAL_SUCCESS -- when initialization is successful
 *         SAL_FAILURE -- when initialization of AES/ECC608 is failed
 */
SalStatus_t SAL_Init(void)
{
    7f8c:	b580      	push	{r7, lr}
    7f8e:	b082      	sub	sp, #8
    7f90:	af00      	add	r7, sp, #0
	SalStatus_t sal_status = SAL_SUCCESS;
    7f92:	1dfb      	adds	r3, r7, #7
    7f94:	2200      	movs	r2, #0
    7f96:	701a      	strb	r2, [r3, #0]
#ifndef UT	
	/* Initialize the AES Engine */
	AESInit();
    7f98:	4b03      	ldr	r3, [pc, #12]	; (7fa8 <SAL_Init+0x1c>)
    7f9a:	4798      	blx	r3
		/* Write Key Encryption Key to KEK Slot in ECC608A */
		sal_status = sal_WriteKeyEncryptionKey();
	}
#endif	
#endif
   return sal_status;	
    7f9c:	1dfb      	adds	r3, r7, #7
    7f9e:	781b      	ldrb	r3, [r3, #0]
}
    7fa0:	0018      	movs	r0, r3
    7fa2:	46bd      	mov	sp, r7
    7fa4:	b002      	add	sp, #8
    7fa6:	bd80      	pop	{r7, pc}
    7fa8:	00007fd9 	.word	0x00007fd9

00007fac <SAL_Read>:
 *         SAL_SUCCESS			-- when the key is successfully read back from ECC608 device
 *         SAL_FAILURE			-- when the read function got failed
 *		   SAL_INVALID_KEY_TYPE -- when invalid key_type is given as input parameter
 */
SalStatus_t SAL_Read(salItems_t key_type, uint8_t* key)
{
    7fac:	b580      	push	{r7, lr}
    7fae:	b084      	sub	sp, #16
    7fb0:	af00      	add	r7, sp, #0
    7fb2:	0002      	movs	r2, r0
    7fb4:	6039      	str	r1, [r7, #0]
    7fb6:	1dfb      	adds	r3, r7, #7
    7fb8:	701a      	strb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
    7fba:	230f      	movs	r3, #15
    7fbc:	18fb      	adds	r3, r7, r3
    7fbe:	2200      	movs	r2, #0
    7fc0:	701a      	strb	r2, [r3, #0]
		sal_status = SAL_FAILURE;
	}
	
#else	
	/* Keep Compiler Happy */
	key_type = key_type;
    7fc2:	1dfb      	adds	r3, r7, #7
    7fc4:	1dfa      	adds	r2, r7, #7
    7fc6:	7812      	ldrb	r2, [r2, #0]
    7fc8:	701a      	strb	r2, [r3, #0]
	key = key;
#endif
    return sal_status;
    7fca:	230f      	movs	r3, #15
    7fcc:	18fb      	adds	r3, r7, r3
    7fce:	781b      	ldrb	r3, [r3, #0]
}
    7fd0:	0018      	movs	r0, r3
    7fd2:	46bd      	mov	sp, r7
    7fd4:	b004      	add	sp, #16
    7fd6:	bd80      	pop	{r7, pc}

00007fd8 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    7fd8:	b580      	push	{r7, lr}
    7fda:	af00      	add	r7, sp, #0
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    7fdc:	4b08      	ldr	r3, [pc, #32]	; (8000 <AESInit+0x28>)
    7fde:	0018      	movs	r0, r3
    7fe0:	4b08      	ldr	r3, [pc, #32]	; (8004 <AESInit+0x2c>)
    7fe2:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    7fe4:	4a06      	ldr	r2, [pc, #24]	; (8000 <AESInit+0x28>)
    7fe6:	4908      	ldr	r1, [pc, #32]	; (8008 <AESInit+0x30>)
    7fe8:	4b08      	ldr	r3, [pc, #32]	; (800c <AESInit+0x34>)
    7fea:	0018      	movs	r0, r3
    7fec:	4b08      	ldr	r3, [pc, #32]	; (8010 <AESInit+0x38>)
    7fee:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    7ff0:	4b06      	ldr	r3, [pc, #24]	; (800c <AESInit+0x34>)
    7ff2:	0018      	movs	r0, r3
    7ff4:	4b07      	ldr	r3, [pc, #28]	; (8014 <AESInit+0x3c>)
    7ff6:	4798      	blx	r3
#endif	
}
    7ff8:	46c0      	nop			; (mov r8, r8)
    7ffa:	46bd      	mov	sp, r7
    7ffc:	bd80      	pop	{r7, pc}
    7ffe:	46c0      	nop			; (mov r8, r8)
    8000:	20000fc4 	.word	0x20000fc4
    8004:	00000f51 	.word	0x00000f51
    8008:	42003400 	.word	0x42003400
    800c:	20000fd0 	.word	0x20000fd0
    8010:	00000f99 	.word	0x00000f99
    8014:	00000fd5 	.word	0x00000fd5

00008018 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    8018:	b590      	push	{r4, r7, lr}
    801a:	b083      	sub	sp, #12
    801c:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    801e:	1dfc      	adds	r4, r7, #7
    8020:	4b06      	ldr	r3, [pc, #24]	; (803c <PDS_Init+0x24>)
    8022:	4798      	blx	r3
    8024:	0003      	movs	r3, r0
    8026:	7023      	strb	r3, [r4, #0]
	pdsUnInitFlag = false;
    8028:	4b05      	ldr	r3, [pc, #20]	; (8040 <PDS_Init+0x28>)
    802a:	2200      	movs	r2, #0
    802c:	701a      	strb	r2, [r3, #0]
	return status;
    802e:	1dfb      	adds	r3, r7, #7
    8030:	781b      	ldrb	r3, [r3, #0]
#else
	return PDS_OK;
#endif
}
    8032:	0018      	movs	r0, r3
    8034:	46bd      	mov	sp, r7
    8036:	b003      	add	sp, #12
    8038:	bd90      	pop	{r4, r7, pc}
    803a:	46c0      	nop			; (mov r8, r8)
    803c:	000087ed 	.word	0x000087ed
    8040:	20000d4c 	.word	0x20000d4c

00008044 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    8044:	b580      	push	{r7, lr}
    8046:	b084      	sub	sp, #16
    8048:	af00      	add	r7, sp, #0
    804a:	0002      	movs	r2, r0
    804c:	1dfb      	adds	r3, r7, #7
    804e:	701a      	strb	r2, [r3, #0]
    8050:	1dbb      	adds	r3, r7, #6
    8052:	1c0a      	adds	r2, r1, #0
    8054:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    8056:	230f      	movs	r3, #15
    8058:	18fb      	adds	r3, r7, r3
    805a:	2200      	movs	r2, #0
    805c:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    805e:	4b23      	ldr	r3, [pc, #140]	; (80ec <PDS_Store+0xa8>)
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2201      	movs	r2, #1
    8064:	4053      	eors	r3, r2
    8066:	b2db      	uxtb	r3, r3
    8068:	2b00      	cmp	r3, #0
    806a:	d038      	beq.n	80de <PDS_Store+0x9a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    806c:	1dfb      	adds	r3, r7, #7
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	4a1f      	ldr	r2, [pc, #124]	; (80f0 <PDS_Store+0xac>)
    8072:	011b      	lsls	r3, r3, #4
    8074:	18d3      	adds	r3, r2, r3
    8076:	3304      	adds	r3, #4
    8078:	781b      	ldrb	r3, [r3, #0]
    807a:	2b00      	cmp	r3, #0
    807c:	d02b      	beq.n	80d6 <PDS_Store+0x92>
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    807e:	1dfb      	adds	r3, r7, #7
    8080:	781a      	ldrb	r2, [r3, #0]
    8082:	4b1b      	ldr	r3, [pc, #108]	; (80f0 <PDS_Store+0xac>)
    8084:	0112      	lsls	r2, r2, #4
    8086:	58d3      	ldr	r3, [r2, r3]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    8088:	2b00      	cmp	r3, #0
    808a:	d024      	beq.n	80d6 <PDS_Store+0x92>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    808c:	1dfb      	adds	r3, r7, #7
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	4a17      	ldr	r2, [pc, #92]	; (80f0 <PDS_Store+0xac>)
    8092:	011b      	lsls	r3, r3, #4
    8094:	18d3      	adds	r3, r2, r3
    8096:	3308      	adds	r3, #8
    8098:	681b      	ldr	r3, [r3, #0]
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    809a:	2b00      	cmp	r3, #0
    809c:	d01b      	beq.n	80d6 <PDS_Store+0x92>
			   )
		{
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    809e:	1dfb      	adds	r3, r7, #7
    80a0:	781b      	ldrb	r3, [r3, #0]
    80a2:	2b0c      	cmp	r3, #12
    80a4:	d812      	bhi.n	80cc <PDS_Store+0x88>
			{
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    80a6:	1dfb      	adds	r3, r7, #7
    80a8:	781a      	ldrb	r2, [r3, #0]
    80aa:	4b11      	ldr	r3, [pc, #68]	; (80f0 <PDS_Store+0xac>)
    80ac:	0112      	lsls	r2, r2, #4
    80ae:	58d2      	ldr	r2, [r2, r3]
    80b0:	1dbb      	adds	r3, r7, #6
    80b2:	781b      	ldrb	r3, [r3, #0]
    80b4:	18d3      	adds	r3, r2, r3
    80b6:	2201      	movs	r2, #1
    80b8:	701a      	strb	r2, [r3, #0]
				isFileSet[pdsFileItemIdx] = true;
    80ba:	1dfb      	adds	r3, r7, #7
    80bc:	781b      	ldrb	r3, [r3, #0]
    80be:	4a0d      	ldr	r2, [pc, #52]	; (80f4 <PDS_Store+0xb0>)
    80c0:	2101      	movs	r1, #1
    80c2:	54d1      	strb	r1, [r2, r3]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    80c4:	2001      	movs	r0, #1
    80c6:	4b0c      	ldr	r3, [pc, #48]	; (80f8 <PDS_Store+0xb4>)
    80c8:	4798      	blx	r3
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    80ca:	e008      	b.n	80de <PDS_Store+0x9a>
			}
			else
			{
				status = PDS_INVLIAD_FILE_IDX;
    80cc:	230f      	movs	r3, #15
    80ce:	18fb      	adds	r3, r7, r3
    80d0:	2205      	movs	r2, #5
    80d2:	701a      	strb	r2, [r3, #0]
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    80d4:	e003      	b.n	80de <PDS_Store+0x9a>
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    80d6:	230f      	movs	r3, #15
    80d8:	18fb      	adds	r3, r7, r3
    80da:	2205      	movs	r2, #5
    80dc:	701a      	strb	r2, [r3, #0]
		}
	}
#endif	
	return status; 
    80de:	230f      	movs	r3, #15
    80e0:	18fb      	adds	r3, r7, r3
    80e2:	781b      	ldrb	r3, [r3, #0]
}
    80e4:	0018      	movs	r0, r3
    80e6:	46bd      	mov	sp, r7
    80e8:	b004      	add	sp, #16
    80ea:	bd80      	pop	{r7, pc}
    80ec:	20000d4c 	.word	0x20000d4c
    80f0:	20000fe8 	.word	0x20000fe8
    80f4:	20000fd8 	.word	0x20000fd8
    80f8:	000087a9 	.word	0x000087a9

000080fc <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    80fc:	b580      	push	{r7, lr}
    80fe:	b082      	sub	sp, #8
    8100:	af00      	add	r7, sp, #0
	bool return_status = false;
    8102:	1dbb      	adds	r3, r7, #6
    8104:	2200      	movs	r2, #0
    8106:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8108:	4b22      	ldr	r3, [pc, #136]	; (8194 <PDS_IsRestorable+0x98>)
    810a:	781b      	ldrb	r3, [r3, #0]
    810c:	2201      	movs	r2, #1
    810e:	4053      	eors	r3, r2
    8110:	b2db      	uxtb	r3, r3
    8112:	2b00      	cmp	r3, #0
    8114:	d034      	beq.n	8180 <PDS_IsRestorable+0x84>
	{
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    8116:	1dfb      	adds	r3, r7, #7
    8118:	2200      	movs	r2, #0
    811a:	701a      	strb	r2, [r3, #0]
    811c:	e02c      	b.n	8178 <PDS_IsRestorable+0x7c>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    811e:	1dfb      	adds	r3, r7, #7
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	4a1d      	ldr	r2, [pc, #116]	; (8198 <PDS_IsRestorable+0x9c>)
    8124:	011b      	lsls	r3, r3, #4
    8126:	18d3      	adds	r3, r2, r3
    8128:	3304      	adds	r3, #4
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	2b00      	cmp	r3, #0
    812e:	d01e      	beq.n	816e <PDS_IsRestorable+0x72>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    8130:	1dfb      	adds	r3, r7, #7
    8132:	781a      	ldrb	r2, [r3, #0]
    8134:	4b18      	ldr	r3, [pc, #96]	; (8198 <PDS_IsRestorable+0x9c>)
    8136:	0112      	lsls	r2, r2, #4
    8138:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    813a:	2b00      	cmp	r3, #0
    813c:	d017      	beq.n	816e <PDS_IsRestorable+0x72>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    813e:	1dfb      	adds	r3, r7, #7
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	4a15      	ldr	r2, [pc, #84]	; (8198 <PDS_IsRestorable+0x9c>)
    8144:	011b      	lsls	r3, r3, #4
    8146:	18d3      	adds	r3, r2, r3
    8148:	3308      	adds	r3, #8
    814a:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    814c:	2b00      	cmp	r3, #0
    814e:	d00e      	beq.n	816e <PDS_IsRestorable+0x72>
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    8150:	1dfb      	adds	r3, r7, #7
    8152:	781b      	ldrb	r3, [r3, #0]
    8154:	0018      	movs	r0, r3
    8156:	4b11      	ldr	r3, [pc, #68]	; (819c <PDS_IsRestorable+0xa0>)
    8158:	4798      	blx	r3
    815a:	0003      	movs	r3, r0
    815c:	001a      	movs	r2, r3
    815e:	2301      	movs	r3, #1
    8160:	4053      	eors	r3, r2
    8162:	b2db      	uxtb	r3, r3
    8164:	2b00      	cmp	r3, #0
    8166:	d002      	beq.n	816e <PDS_IsRestorable+0x72>
				{
					return return_status;
    8168:	1dbb      	adds	r3, r7, #6
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	e00d      	b.n	818a <PDS_IsRestorable+0x8e>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    816e:	1dfb      	adds	r3, r7, #7
    8170:	781a      	ldrb	r2, [r3, #0]
    8172:	1dfb      	adds	r3, r7, #7
    8174:	3201      	adds	r2, #1
    8176:	701a      	strb	r2, [r3, #0]
    8178:	1dfb      	adds	r3, r7, #7
    817a:	781b      	ldrb	r3, [r3, #0]
    817c:	2b0c      	cmp	r3, #12
    817e:	d9ce      	bls.n	811e <PDS_IsRestorable+0x22>
				}
			}
		}
	}
	return_status = true;
    8180:	1dbb      	adds	r3, r7, #6
    8182:	2201      	movs	r2, #1
    8184:	701a      	strb	r2, [r3, #0]
#endif
	return return_status;
    8186:	1dbb      	adds	r3, r7, #6
    8188:	781b      	ldrb	r3, [r3, #0]
}
    818a:	0018      	movs	r0, r3
    818c:	46bd      	mov	sp, r7
    818e:	b002      	add	sp, #8
    8190:	bd80      	pop	{r7, pc}
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	20000d4c 	.word	0x20000d4c
    8198:	20000fe8 	.word	0x20000fe8
    819c:	00008c51 	.word	0x00008c51

000081a0 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    81a0:	b590      	push	{r4, r7, lr}
    81a2:	b0c9      	sub	sp, #292	; 0x124
    81a4:	af00      	add	r7, sp, #0
	PdsStatus_t status = PDS_OK;
    81a6:	2320      	movs	r3, #32
    81a8:	33ff      	adds	r3, #255	; 0xff
    81aa:	18fb      	adds	r3, r7, r3
    81ac:	2200      	movs	r2, #0
    81ae:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    81b0:	4b91      	ldr	r3, [pc, #580]	; (83f8 <PDS_RestoreAll+0x258>)
    81b2:	781b      	ldrb	r3, [r3, #0]
    81b4:	2201      	movs	r2, #1
    81b6:	4053      	eors	r3, r2
    81b8:	b2db      	uxtb	r3, r3
    81ba:	2b00      	cmp	r3, #0
    81bc:	d100      	bne.n	81c0 <PDS_RestoreAll+0x20>
    81be:	e112      	b.n	83e6 <PDS_RestoreAll+0x246>
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		PdsMem_t buffer;
		uint16_t size;
		
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    81c0:	238f      	movs	r3, #143	; 0x8f
    81c2:	005b      	lsls	r3, r3, #1
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	2200      	movs	r2, #0
    81c8:	701a      	strb	r2, [r3, #0]
    81ca:	e105      	b.n	83d8 <PDS_RestoreAll+0x238>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    81cc:	238f      	movs	r3, #143	; 0x8f
    81ce:	005b      	lsls	r3, r3, #1
    81d0:	18fb      	adds	r3, r7, r3
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	4a89      	ldr	r2, [pc, #548]	; (83fc <PDS_RestoreAll+0x25c>)
    81d6:	011b      	lsls	r3, r3, #4
    81d8:	18d3      	adds	r3, r2, r3
    81da:	3304      	adds	r3, #4
    81dc:	781b      	ldrb	r3, [r3, #0]
    81de:	2b00      	cmp	r3, #0
    81e0:	d100      	bne.n	81e4 <PDS_RestoreAll+0x44>
    81e2:	e0f0      	b.n	83c6 <PDS_RestoreAll+0x226>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    81e4:	238f      	movs	r3, #143	; 0x8f
    81e6:	005b      	lsls	r3, r3, #1
    81e8:	18fb      	adds	r3, r7, r3
    81ea:	781a      	ldrb	r2, [r3, #0]
    81ec:	4b83      	ldr	r3, [pc, #524]	; (83fc <PDS_RestoreAll+0x25c>)
    81ee:	0112      	lsls	r2, r2, #4
    81f0:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    81f2:	2b00      	cmp	r3, #0
    81f4:	d100      	bne.n	81f8 <PDS_RestoreAll+0x58>
    81f6:	e0e6      	b.n	83c6 <PDS_RestoreAll+0x226>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    81f8:	238f      	movs	r3, #143	; 0x8f
    81fa:	005b      	lsls	r3, r3, #1
    81fc:	18fb      	adds	r3, r7, r3
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	4a7e      	ldr	r2, [pc, #504]	; (83fc <PDS_RestoreAll+0x25c>)
    8202:	011b      	lsls	r3, r3, #4
    8204:	18d3      	adds	r3, r2, r3
    8206:	3308      	adds	r3, #8
    8208:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    820a:	2b00      	cmp	r3, #0
    820c:	d100      	bne.n	8210 <PDS_RestoreAll+0x70>
    820e:	e0da      	b.n	83c6 <PDS_RestoreAll+0x226>
			)
			{
				memset(&buffer, 0, sizeof(PdsMem_t));
    8210:	2380      	movs	r3, #128	; 0x80
    8212:	005a      	lsls	r2, r3, #1
    8214:	1d3b      	adds	r3, r7, #4
    8216:	2100      	movs	r1, #0
    8218:	0018      	movs	r0, r3
    821a:	4b79      	ldr	r3, [pc, #484]	; (8400 <PDS_RestoreAll+0x260>)
    821c:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    821e:	238f      	movs	r3, #143	; 0x8f
    8220:	005b      	lsls	r3, r3, #1
    8222:	18fb      	adds	r3, r7, r3
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	4a75      	ldr	r2, [pc, #468]	; (83fc <PDS_RestoreAll+0x25c>)
    8228:	011b      	lsls	r3, r3, #4
    822a:	18d3      	adds	r3, r2, r3
    822c:	3308      	adds	r3, #8
    822e:	681a      	ldr	r2, [r3, #0]
    8230:	238f      	movs	r3, #143	; 0x8f
    8232:	005b      	lsls	r3, r3, #1
    8234:	18fb      	adds	r3, r7, r3
    8236:	781b      	ldrb	r3, [r3, #0]
    8238:	4970      	ldr	r1, [pc, #448]	; (83fc <PDS_RestoreAll+0x25c>)
    823a:	011b      	lsls	r3, r3, #4
    823c:	18cb      	adds	r3, r1, r3
    823e:	3304      	adds	r3, #4
    8240:	781b      	ldrb	r3, [r3, #0]
    8242:	4970      	ldr	r1, [pc, #448]	; (8404 <PDS_RestoreAll+0x264>)
    8244:	468c      	mov	ip, r1
    8246:	4463      	add	r3, ip
    8248:	00db      	lsls	r3, r3, #3
    824a:	18d1      	adds	r1, r2, r3
    824c:	2386      	movs	r3, #134	; 0x86
    824e:	005b      	lsls	r3, r3, #1
    8250:	18fb      	adds	r3, r7, r3
    8252:	2208      	movs	r2, #8
    8254:	0018      	movs	r0, r3
    8256:	4b6c      	ldr	r3, [pc, #432]	; (8408 <PDS_RestoreAll+0x268>)
    8258:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    825a:	2386      	movs	r3, #134	; 0x86
    825c:	005b      	lsls	r3, r3, #1
    825e:	18fb      	adds	r3, r7, r3
    8260:	79db      	ldrb	r3, [r3, #7]
    8262:	b29a      	uxth	r2, r3
    8264:	2386      	movs	r3, #134	; 0x86
    8266:	005b      	lsls	r3, r3, #1
    8268:	18fb      	adds	r3, r7, r3
    826a:	799b      	ldrb	r3, [r3, #6]
    826c:	b29b      	uxth	r3, r3
    826e:	18d3      	adds	r3, r2, r3
    8270:	b29a      	uxth	r2, r3
    8272:	238d      	movs	r3, #141	; 0x8d
    8274:	005b      	lsls	r3, r3, #1
    8276:	18fb      	adds	r3, r7, r3
    8278:	3205      	adds	r2, #5
    827a:	801a      	strh	r2, [r3, #0]
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    827c:	2320      	movs	r3, #32
    827e:	33ff      	adds	r3, #255	; 0xff
    8280:	18fc      	adds	r4, r7, r3
    8282:	238d      	movs	r3, #141	; 0x8d
    8284:	005b      	lsls	r3, r3, #1
    8286:	18fb      	adds	r3, r7, r3
    8288:	881a      	ldrh	r2, [r3, #0]
    828a:	1d39      	adds	r1, r7, #4
    828c:	238f      	movs	r3, #143	; 0x8f
    828e:	005b      	lsls	r3, r3, #1
    8290:	18fb      	adds	r3, r7, r3
    8292:	781b      	ldrb	r3, [r3, #0]
    8294:	0018      	movs	r0, r3
    8296:	4b5d      	ldr	r3, [pc, #372]	; (840c <PDS_RestoreAll+0x26c>)
    8298:	4798      	blx	r3
    829a:	0003      	movs	r3, r0
    829c:	7023      	strb	r3, [r4, #0]
				if (status != PDS_OK)
    829e:	2320      	movs	r3, #32
    82a0:	33ff      	adds	r3, #255	; 0xff
    82a2:	18fb      	adds	r3, r7, r3
    82a4:	781b      	ldrb	r3, [r3, #0]
    82a6:	2b00      	cmp	r3, #0
    82a8:	d004      	beq.n	82b4 <PDS_RestoreAll+0x114>
				{
					return status;
    82aa:	2320      	movs	r3, #32
    82ac:	33ff      	adds	r3, #255	; 0xff
    82ae:	18fb      	adds	r3, r7, r3
    82b0:	781b      	ldrb	r3, [r3, #0]
    82b2:	e09c      	b.n	83ee <PDS_RestoreAll+0x24e>
				}
				
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    82b4:	231e      	movs	r3, #30
    82b6:	33ff      	adds	r3, #255	; 0xff
    82b8:	18fb      	adds	r3, r7, r3
    82ba:	2200      	movs	r2, #0
    82bc:	701a      	strb	r2, [r3, #0]
    82be:	e05e      	b.n	837e <PDS_RestoreAll+0x1de>
				{
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    82c0:	238f      	movs	r3, #143	; 0x8f
    82c2:	005b      	lsls	r3, r3, #1
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	781b      	ldrb	r3, [r3, #0]
    82c8:	4a4c      	ldr	r2, [pc, #304]	; (83fc <PDS_RestoreAll+0x25c>)
    82ca:	011b      	lsls	r3, r3, #4
    82cc:	18d3      	adds	r3, r2, r3
    82ce:	3308      	adds	r3, #8
    82d0:	681a      	ldr	r2, [r3, #0]
    82d2:	231e      	movs	r3, #30
    82d4:	33ff      	adds	r3, #255	; 0xff
    82d6:	18fb      	adds	r3, r7, r3
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	00db      	lsls	r3, r3, #3
    82dc:	18d1      	adds	r1, r2, r3
    82de:	2386      	movs	r3, #134	; 0x86
    82e0:	005b      	lsls	r3, r3, #1
    82e2:	18fb      	adds	r3, r7, r3
    82e4:	2208      	movs	r2, #8
    82e6:	0018      	movs	r0, r3
    82e8:	4b47      	ldr	r3, [pc, #284]	; (8408 <PDS_RestoreAll+0x268>)
    82ea:	4798      	blx	r3
					ptr = (uint8_t *)(&(buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
    82ec:	1d3b      	adds	r3, r7, #4
    82ee:	330d      	adds	r3, #13
    82f0:	228a      	movs	r2, #138	; 0x8a
    82f2:	0052      	lsls	r2, r2, #1
    82f4:	18ba      	adds	r2, r7, r2
    82f6:	6013      	str	r3, [r2, #0]
					ptr += itemInfo.itemOffset;
    82f8:	2386      	movs	r3, #134	; 0x86
    82fa:	005b      	lsls	r3, r3, #1
    82fc:	18fb      	adds	r3, r7, r3
    82fe:	79db      	ldrb	r3, [r3, #7]
    8300:	001a      	movs	r2, r3
    8302:	238a      	movs	r3, #138	; 0x8a
    8304:	005b      	lsls	r3, r3, #1
    8306:	18fb      	adds	r3, r7, r3
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	189b      	adds	r3, r3, r2
    830c:	228a      	movs	r2, #138	; 0x8a
    830e:	0052      	lsls	r2, r2, #1
    8310:	18ba      	adds	r2, r7, r2
    8312:	6013      	str	r3, [r2, #0]
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
    8314:	1d7a      	adds	r2, r7, #5
    8316:	32ff      	adds	r2, #255	; 0xff
    8318:	238a      	movs	r3, #138	; 0x8a
    831a:	005b      	lsls	r3, r3, #1
    831c:	18fb      	adds	r3, r7, r3
    831e:	681b      	ldr	r3, [r3, #0]
    8320:	0010      	movs	r0, r2
    8322:	0019      	movs	r1, r3
    8324:	2305      	movs	r3, #5
    8326:	001a      	movs	r2, r3
    8328:	4b37      	ldr	r3, [pc, #220]	; (8408 <PDS_RestoreAll+0x268>)
    832a:	4798      	blx	r3
					ptr += sizeof(ItemHeader_t);
    832c:	238a      	movs	r3, #138	; 0x8a
    832e:	005b      	lsls	r3, r3, #1
    8330:	18fb      	adds	r3, r7, r3
    8332:	681b      	ldr	r3, [r3, #0]
    8334:	3305      	adds	r3, #5
    8336:	228a      	movs	r2, #138	; 0x8a
    8338:	0052      	lsls	r2, r2, #1
    833a:	18ba      	adds	r2, r7, r2
    833c:	6013      	str	r3, [r2, #0]
					if (false == itemHeader.delete)
    833e:	1d7b      	adds	r3, r7, #5
    8340:	33ff      	adds	r3, #255	; 0xff
    8342:	791b      	ldrb	r3, [r3, #4]
    8344:	2201      	movs	r2, #1
    8346:	4053      	eors	r3, r2
    8348:	b2db      	uxtb	r3, r3
    834a:	2b00      	cmp	r3, #0
    834c:	d00e      	beq.n	836c <PDS_RestoreAll+0x1cc>
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    834e:	2386      	movs	r3, #134	; 0x86
    8350:	005b      	lsls	r3, r3, #1
    8352:	18fb      	adds	r3, r7, r3
    8354:	6818      	ldr	r0, [r3, #0]
    8356:	1d7b      	adds	r3, r7, #5
    8358:	33ff      	adds	r3, #255	; 0xff
    835a:	789b      	ldrb	r3, [r3, #2]
    835c:	001a      	movs	r2, r3
    835e:	238a      	movs	r3, #138	; 0x8a
    8360:	005b      	lsls	r3, r3, #1
    8362:	18fb      	adds	r3, r7, r3
    8364:	681b      	ldr	r3, [r3, #0]
    8366:	0019      	movs	r1, r3
    8368:	4b27      	ldr	r3, [pc, #156]	; (8408 <PDS_RestoreAll+0x268>)
    836a:	4798      	blx	r3
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    836c:	231e      	movs	r3, #30
    836e:	33ff      	adds	r3, #255	; 0xff
    8370:	18fb      	adds	r3, r7, r3
    8372:	781a      	ldrb	r2, [r3, #0]
    8374:	231e      	movs	r3, #30
    8376:	33ff      	adds	r3, #255	; 0xff
    8378:	18fb      	adds	r3, r7, r3
    837a:	3201      	adds	r2, #1
    837c:	701a      	strb	r2, [r3, #0]
    837e:	238f      	movs	r3, #143	; 0x8f
    8380:	005b      	lsls	r3, r3, #1
    8382:	18fb      	adds	r3, r7, r3
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	4a1d      	ldr	r2, [pc, #116]	; (83fc <PDS_RestoreAll+0x25c>)
    8388:	011b      	lsls	r3, r3, #4
    838a:	18d3      	adds	r3, r2, r3
    838c:	3304      	adds	r3, #4
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	221e      	movs	r2, #30
    8392:	32ff      	adds	r2, #255	; 0xff
    8394:	18ba      	adds	r2, r7, r2
    8396:	7812      	ldrb	r2, [r2, #0]
    8398:	429a      	cmp	r2, r3
    839a:	d391      	bcc.n	82c0 <PDS_RestoreAll+0x120>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    839c:	238f      	movs	r3, #143	; 0x8f
    839e:	005b      	lsls	r3, r3, #1
    83a0:	18fb      	adds	r3, r7, r3
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	4a15      	ldr	r2, [pc, #84]	; (83fc <PDS_RestoreAll+0x25c>)
    83a6:	011b      	lsls	r3, r3, #4
    83a8:	18d3      	adds	r3, r2, r3
    83aa:	330c      	adds	r3, #12
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	2b00      	cmp	r3, #0
    83b0:	d009      	beq.n	83c6 <PDS_RestoreAll+0x226>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    83b2:	238f      	movs	r3, #143	; 0x8f
    83b4:	005b      	lsls	r3, r3, #1
    83b6:	18fb      	adds	r3, r7, r3
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	4a10      	ldr	r2, [pc, #64]	; (83fc <PDS_RestoreAll+0x25c>)
    83bc:	011b      	lsls	r3, r3, #4
    83be:	18d3      	adds	r3, r2, r3
    83c0:	330c      	adds	r3, #12
    83c2:	681b      	ldr	r3, [r3, #0]
    83c4:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    83c6:	238f      	movs	r3, #143	; 0x8f
    83c8:	005b      	lsls	r3, r3, #1
    83ca:	18fb      	adds	r3, r7, r3
    83cc:	781a      	ldrb	r2, [r3, #0]
    83ce:	238f      	movs	r3, #143	; 0x8f
    83d0:	005b      	lsls	r3, r3, #1
    83d2:	18fb      	adds	r3, r7, r3
    83d4:	3201      	adds	r2, #1
    83d6:	701a      	strb	r2, [r3, #0]
    83d8:	238f      	movs	r3, #143	; 0x8f
    83da:	005b      	lsls	r3, r3, #1
    83dc:	18fb      	adds	r3, r7, r3
    83de:	781b      	ldrb	r3, [r3, #0]
    83e0:	2b0c      	cmp	r3, #12
    83e2:	d800      	bhi.n	83e6 <PDS_RestoreAll+0x246>
    83e4:	e6f2      	b.n	81cc <PDS_RestoreAll+0x2c>
				}
			}
		}
	}
#endif	
	return status;
    83e6:	2320      	movs	r3, #32
    83e8:	33ff      	adds	r3, #255	; 0xff
    83ea:	18fb      	adds	r3, r7, r3
    83ec:	781b      	ldrb	r3, [r3, #0]
}
    83ee:	0018      	movs	r0, r3
    83f0:	46bd      	mov	sp, r7
    83f2:	b049      	add	sp, #292	; 0x124
    83f4:	bd90      	pop	{r4, r7, pc}
    83f6:	46c0      	nop			; (mov r8, r8)
    83f8:	20000d4c 	.word	0x20000d4c
    83fc:	20000fe8 	.word	0x20000fe8
    8400:	000114f9 	.word	0x000114f9
    8404:	1fffffff 	.word	0x1fffffff
    8408:	00011475 	.word	0x00011475
    840c:	0000899d 	.word	0x0000899d

00008410 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    8410:	b580      	push	{r7, lr}
    8412:	b082      	sub	sp, #8
    8414:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8416:	4b2c      	ldr	r3, [pc, #176]	; (84c8 <PDS_StoreAll+0xb8>)
    8418:	781b      	ldrb	r3, [r3, #0]
    841a:	2201      	movs	r2, #1
    841c:	4053      	eors	r3, r2
    841e:	b2db      	uxtb	r3, r3
    8420:	2b00      	cmp	r3, #0
    8422:	d04b      	beq.n	84bc <PDS_StoreAll+0xac>
	{
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    8424:	1dfb      	adds	r3, r7, #7
    8426:	2200      	movs	r2, #0
    8428:	701a      	strb	r2, [r3, #0]
    842a:	e040      	b.n	84ae <PDS_StoreAll+0x9e>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    842c:	1dfb      	adds	r3, r7, #7
    842e:	781b      	ldrb	r3, [r3, #0]
    8430:	4a26      	ldr	r2, [pc, #152]	; (84cc <PDS_StoreAll+0xbc>)
    8432:	011b      	lsls	r3, r3, #4
    8434:	18d3      	adds	r3, r2, r3
    8436:	3304      	adds	r3, #4
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2b00      	cmp	r3, #0
    843c:	d032      	beq.n	84a4 <PDS_StoreAll+0x94>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    843e:	1dfb      	adds	r3, r7, #7
    8440:	781a      	ldrb	r2, [r3, #0]
    8442:	4b22      	ldr	r3, [pc, #136]	; (84cc <PDS_StoreAll+0xbc>)
    8444:	0112      	lsls	r2, r2, #4
    8446:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    8448:	2b00      	cmp	r3, #0
    844a:	d02b      	beq.n	84a4 <PDS_StoreAll+0x94>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    844c:	1dfb      	adds	r3, r7, #7
    844e:	781b      	ldrb	r3, [r3, #0]
    8450:	4a1e      	ldr	r2, [pc, #120]	; (84cc <PDS_StoreAll+0xbc>)
    8452:	011b      	lsls	r3, r3, #4
    8454:	18d3      	adds	r3, r2, r3
    8456:	3308      	adds	r3, #8
    8458:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    845a:	2b00      	cmp	r3, #0
    845c:	d022      	beq.n	84a4 <PDS_StoreAll+0x94>
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    845e:	1dbb      	adds	r3, r7, #6
    8460:	2200      	movs	r2, #0
    8462:	701a      	strb	r2, [r3, #0]
    8464:	e00e      	b.n	8484 <PDS_StoreAll+0x74>
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    8466:	1dfb      	adds	r3, r7, #7
    8468:	781a      	ldrb	r2, [r3, #0]
    846a:	4b18      	ldr	r3, [pc, #96]	; (84cc <PDS_StoreAll+0xbc>)
    846c:	0112      	lsls	r2, r2, #4
    846e:	58d2      	ldr	r2, [r2, r3]
    8470:	1dbb      	adds	r3, r7, #6
    8472:	781b      	ldrb	r3, [r3, #0]
    8474:	18d3      	adds	r3, r2, r3
    8476:	2201      	movs	r2, #1
    8478:	701a      	strb	r2, [r3, #0]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    847a:	1dbb      	adds	r3, r7, #6
    847c:	781a      	ldrb	r2, [r3, #0]
    847e:	1dbb      	adds	r3, r7, #6
    8480:	3201      	adds	r2, #1
    8482:	701a      	strb	r2, [r3, #0]
    8484:	1dfb      	adds	r3, r7, #7
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	4a10      	ldr	r2, [pc, #64]	; (84cc <PDS_StoreAll+0xbc>)
    848a:	011b      	lsls	r3, r3, #4
    848c:	18d3      	adds	r3, r2, r3
    848e:	3304      	adds	r3, #4
    8490:	781b      	ldrb	r3, [r3, #0]
    8492:	1dba      	adds	r2, r7, #6
    8494:	7812      	ldrb	r2, [r2, #0]
    8496:	429a      	cmp	r2, r3
    8498:	d3e5      	bcc.n	8466 <PDS_StoreAll+0x56>
				}
				isFileSet[pdsFileItemIdx] = true;
    849a:	1dfb      	adds	r3, r7, #7
    849c:	781b      	ldrb	r3, [r3, #0]
    849e:	4a0c      	ldr	r2, [pc, #48]	; (84d0 <PDS_StoreAll+0xc0>)
    84a0:	2101      	movs	r1, #1
    84a2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    84a4:	1dfb      	adds	r3, r7, #7
    84a6:	781a      	ldrb	r2, [r3, #0]
    84a8:	1dfb      	adds	r3, r7, #7
    84aa:	3201      	adds	r2, #1
    84ac:	701a      	strb	r2, [r3, #0]
    84ae:	1dfb      	adds	r3, r7, #7
    84b0:	781b      	ldrb	r3, [r3, #0]
    84b2:	2b0c      	cmp	r3, #12
    84b4:	d9ba      	bls.n	842c <PDS_StoreAll+0x1c>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    84b6:	2001      	movs	r0, #1
    84b8:	4b06      	ldr	r3, [pc, #24]	; (84d4 <PDS_StoreAll+0xc4>)
    84ba:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
    84bc:	2300      	movs	r3, #0
}
    84be:	0018      	movs	r0, r3
    84c0:	46bd      	mov	sp, r7
    84c2:	b002      	add	sp, #8
    84c4:	bd80      	pop	{r7, pc}
    84c6:	46c0      	nop			; (mov r8, r8)
    84c8:	20000d4c 	.word	0x20000d4c
    84cc:	20000fe8 	.word	0x20000fe8
    84d0:	20000fd8 	.word	0x20000fd8
    84d4:	000087a9 	.word	0x000087a9

000084d8 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    84d8:	b084      	sub	sp, #16
    84da:	b5b0      	push	{r4, r5, r7, lr}
    84dc:	b084      	sub	sp, #16
    84de:	af00      	add	r7, sp, #0
    84e0:	0004      	movs	r4, r0
    84e2:	2004      	movs	r0, #4
    84e4:	2520      	movs	r5, #32
    84e6:	46ac      	mov	ip, r5
    84e8:	44bc      	add	ip, r7
    84ea:	4460      	add	r0, ip
    84ec:	6001      	str	r1, [r0, #0]
    84ee:	6042      	str	r2, [r0, #4]
    84f0:	6083      	str	r3, [r0, #8]
    84f2:	1dfb      	adds	r3, r7, #7
    84f4:	1c22      	adds	r2, r4, #0
    84f6:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    84f8:	230f      	movs	r3, #15
    84fa:	18fb      	adds	r3, r7, r3
    84fc:	2200      	movs	r2, #0
    84fe:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    8500:	4b12      	ldr	r3, [pc, #72]	; (854c <PDS_RegFile+0x74>)
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2201      	movs	r2, #1
    8506:	4053      	eors	r3, r2
    8508:	b2db      	uxtb	r3, r3
    850a:	2b00      	cmp	r3, #0
    850c:	d013      	beq.n	8536 <PDS_RegFile+0x5e>
	{
		if (PDS_MAX_FILE_IDX > argFileId)
    850e:	1dfb      	adds	r3, r7, #7
    8510:	781b      	ldrb	r3, [r3, #0]
    8512:	2b0c      	cmp	r3, #12
    8514:	d80b      	bhi.n	852e <PDS_RegFile+0x56>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    8516:	1dfb      	adds	r3, r7, #7
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	011a      	lsls	r2, r3, #4
    851c:	4b0c      	ldr	r3, [pc, #48]	; (8550 <PDS_RegFile+0x78>)
    851e:	18d3      	adds	r3, r2, r3
    8520:	2224      	movs	r2, #36	; 0x24
    8522:	18b9      	adds	r1, r7, r2
    8524:	2210      	movs	r2, #16
    8526:	0018      	movs	r0, r3
    8528:	4b0a      	ldr	r3, [pc, #40]	; (8554 <PDS_RegFile+0x7c>)
    852a:	4798      	blx	r3
    852c:	e003      	b.n	8536 <PDS_RegFile+0x5e>
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    852e:	230f      	movs	r3, #15
    8530:	18fb      	adds	r3, r7, r3
    8532:	2205      	movs	r2, #5
    8534:	701a      	strb	r2, [r3, #0]
		}
	}
#endif	
	return status;
    8536:	230f      	movs	r3, #15
    8538:	18fb      	adds	r3, r7, r3
    853a:	781b      	ldrb	r3, [r3, #0]
}
    853c:	0018      	movs	r0, r3
    853e:	46bd      	mov	sp, r7
    8540:	b004      	add	sp, #16
    8542:	bcb0      	pop	{r4, r5, r7}
    8544:	bc08      	pop	{r3}
    8546:	b004      	add	sp, #16
    8548:	4718      	bx	r3
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	20000d4c 	.word	0x20000d4c
    8550:	20000fe8 	.word	0x20000fe8
    8554:	00011475 	.word	0x00011475

00008558 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    8558:	b590      	push	{r4, r7, lr}
    855a:	b087      	sub	sp, #28
    855c:	af00      	add	r7, sp, #0
	PdsStatus_t status = PDS_OK;
    855e:	2317      	movs	r3, #23
    8560:	18fb      	adds	r3, r7, r3
    8562:	2200      	movs	r2, #0
    8564:	701a      	strb	r2, [r3, #0]
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    8566:	1d3b      	adds	r3, r7, #4
    8568:	0018      	movs	r0, r3
    856a:	4b11      	ldr	r3, [pc, #68]	; (85b0 <pdsNvmInit+0x58>)
    856c:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    856e:	2316      	movs	r3, #22
    8570:	18fc      	adds	r4, r7, r3
    8572:	2000      	movs	r0, #0
    8574:	4b0f      	ldr	r3, [pc, #60]	; (85b4 <pdsNvmInit+0x5c>)
    8576:	4798      	blx	r3
    8578:	0003      	movs	r3, r0
    857a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != (status_code_genare_t) statusCode)
    857c:	2316      	movs	r3, #22
    857e:	18fb      	adds	r3, r7, r3
    8580:	781b      	ldrb	r3, [r3, #0]
    8582:	b25b      	sxtb	r3, r3
    8584:	2b00      	cmp	r3, #0
    8586:	d001      	beq.n	858c <pdsNvmInit+0x34>
	{
		return PDS_ERROR;
    8588:	2302      	movs	r3, #2
    858a:	e00c      	b.n	85a6 <pdsNvmInit+0x4e>
	}

	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    858c:	1d3b      	adds	r3, r7, #4
    858e:	899b      	ldrh	r3, [r3, #12]
    8590:	089b      	lsrs	r3, r3, #2
    8592:	b29b      	uxth	r3, r3
    8594:	021b      	lsls	r3, r3, #8
    8596:	4a08      	ldr	r2, [pc, #32]	; (85b8 <pdsNvmInit+0x60>)
    8598:	4293      	cmp	r3, r2
    859a:	dc01      	bgt.n	85a0 <pdsNvmInit+0x48>
	{
		return PDS_NOT_ENOUGH_MEMORY;
    859c:	2304      	movs	r3, #4
    859e:	e002      	b.n	85a6 <pdsNvmInit+0x4e>
	}
	
	return status;
    85a0:	2317      	movs	r3, #23
    85a2:	18fb      	adds	r3, r7, r3
    85a4:	781b      	ldrb	r3, [r3, #0]
}
    85a6:	0018      	movs	r0, r3
    85a8:	46bd      	mov	sp, r7
    85aa:	b007      	add	sp, #28
    85ac:	bd90      	pop	{r4, r7, pc}
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	000018a5 	.word	0x000018a5
    85b4:	0000a6c1 	.word	0x0000a6c1
    85b8:	00001fff 	.word	0x00001fff

000085bc <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    85bc:	b590      	push	{r4, r7, lr}
    85be:	b087      	sub	sp, #28
    85c0:	af00      	add	r7, sp, #0
    85c2:	6039      	str	r1, [r7, #0]
    85c4:	0011      	movs	r1, r2
    85c6:	1dbb      	adds	r3, r7, #6
    85c8:	1c02      	adds	r2, r0, #0
    85ca:	801a      	strh	r2, [r3, #0]
    85cc:	1d3b      	adds	r3, r7, #4
    85ce:	1c0a      	adds	r2, r1, #0
    85d0:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    85d2:	2316      	movs	r3, #22
    85d4:	18fb      	adds	r3, r7, r3
    85d6:	2200      	movs	r2, #0
    85d8:	701a      	strb	r2, [r3, #0]
	status_code_genare_t statusCode;
	uint16_t crc;
	uint32_t addr = nvmLogicalRowToPhysicalAddr(rowId);
    85da:	1dbb      	adds	r3, r7, #6
    85dc:	881b      	ldrh	r3, [r3, #0]
    85de:	0018      	movs	r0, r3
    85e0:	4b2c      	ldr	r3, [pc, #176]	; (8694 <pdsNvmRead+0xd8>)
    85e2:	4798      	blx	r3
    85e4:	0003      	movs	r3, r0
    85e6:	613b      	str	r3, [r7, #16]
	if (EEPROM_ROW_SIZE == size)
    85e8:	1d3b      	adds	r3, r7, #4
    85ea:	881a      	ldrh	r2, [r3, #0]
    85ec:	2380      	movs	r3, #128	; 0x80
    85ee:	005b      	lsls	r3, r3, #1
    85f0:	429a      	cmp	r2, r3
    85f2:	d111      	bne.n	8618 <pdsNvmRead+0x5c>
	{
		do 
		{
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    85f4:	1d3b      	adds	r3, r7, #4
    85f6:	881b      	ldrh	r3, [r3, #0]
    85f8:	683a      	ldr	r2, [r7, #0]
    85fa:	6939      	ldr	r1, [r7, #16]
    85fc:	2000      	movs	r0, #0
    85fe:	4c26      	ldr	r4, [pc, #152]	; (8698 <pdsNvmRead+0xdc>)
    8600:	47a0      	blx	r4
    8602:	0003      	movs	r3, r0
    8604:	001a      	movs	r2, r3
    8606:	2317      	movs	r3, #23
    8608:	18fb      	adds	r3, r7, r3
    860a:	701a      	strb	r2, [r3, #0]
		} while (statusCode == STATUS_BUSY);
    860c:	2317      	movs	r3, #23
    860e:	18fb      	adds	r3, r7, r3
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	2b05      	cmp	r3, #5
    8614:	d0ee      	beq.n	85f4 <pdsNvmRead+0x38>
    8616:	e015      	b.n	8644 <pdsNvmRead+0x88>
		
	}
	else
	{
		size += sizeof(PdsNvmHeader_t);
    8618:	1d3b      	adds	r3, r7, #4
    861a:	1d3a      	adds	r2, r7, #4
    861c:	8812      	ldrh	r2, [r2, #0]
    861e:	3204      	adds	r2, #4
    8620:	801a      	strh	r2, [r3, #0]
		do 
		{
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    8622:	1d3b      	adds	r3, r7, #4
    8624:	881b      	ldrh	r3, [r3, #0]
    8626:	683a      	ldr	r2, [r7, #0]
    8628:	6939      	ldr	r1, [r7, #16]
    862a:	2000      	movs	r0, #0
    862c:	4c1a      	ldr	r4, [pc, #104]	; (8698 <pdsNvmRead+0xdc>)
    862e:	47a0      	blx	r4
    8630:	0003      	movs	r3, r0
    8632:	001a      	movs	r2, r3
    8634:	2317      	movs	r3, #23
    8636:	18fb      	adds	r3, r7, r3
    8638:	701a      	strb	r2, [r3, #0]
		} while (statusCode == STATUS_BUSY);		
    863a:	2317      	movs	r3, #23
    863c:	18fb      	adds	r3, r7, r3
    863e:	781b      	ldrb	r3, [r3, #0]
    8640:	2b05      	cmp	r3, #5
    8642:	d0ee      	beq.n	8622 <pdsNvmRead+0x66>
	}
	
	if (STATUS_OK != statusCode)
    8644:	2317      	movs	r3, #23
    8646:	18fb      	adds	r3, r7, r3
    8648:	781b      	ldrb	r3, [r3, #0]
    864a:	2b00      	cmp	r3, #0
    864c:	d001      	beq.n	8652 <pdsNvmRead+0x96>
	{
		return PDS_ERROR;
    864e:	2302      	movs	r3, #2
    8650:	e01c      	b.n	868c <pdsNvmRead+0xd0>
	}
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    8652:	230e      	movs	r3, #14
    8654:	18fa      	adds	r2, r7, r3
    8656:	683b      	ldr	r3, [r7, #0]
    8658:	7819      	ldrb	r1, [r3, #0]
    865a:	785b      	ldrb	r3, [r3, #1]
    865c:	021b      	lsls	r3, r3, #8
    865e:	430b      	orrs	r3, r1
    8660:	8013      	strh	r3, [r2, #0]
	
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    8662:	683b      	ldr	r3, [r7, #0]
    8664:	789b      	ldrb	r3, [r3, #2]
    8666:	b29a      	uxth	r2, r3
    8668:	683b      	ldr	r3, [r7, #0]
    866a:	3304      	adds	r3, #4
    866c:	0019      	movs	r1, r3
    866e:	0010      	movs	r0, r2
    8670:	4b0a      	ldr	r3, [pc, #40]	; (869c <pdsNvmRead+0xe0>)
    8672:	4798      	blx	r3
    8674:	0003      	movs	r3, r0
    8676:	001a      	movs	r2, r3
    8678:	230e      	movs	r3, #14
    867a:	18fb      	adds	r3, r7, r3
    867c:	881b      	ldrh	r3, [r3, #0]
    867e:	4293      	cmp	r3, r2
    8680:	d001      	beq.n	8686 <pdsNvmRead+0xca>
	{
		return PDS_CRC_ERROR;
    8682:	2301      	movs	r3, #1
    8684:	e002      	b.n	868c <pdsNvmRead+0xd0>
	}
	return status;
    8686:	2316      	movs	r3, #22
    8688:	18fb      	adds	r3, r7, r3
    868a:	781b      	ldrb	r3, [r3, #0]
}
    868c:	0018      	movs	r0, r3
    868e:	46bd      	mov	sp, r7
    8690:	b007      	add	sp, #28
    8692:	bd90      	pop	{r4, r7, pc}
    8694:	00008785 	.word	0x00008785
    8698:	0000a5a9 	.word	0x0000a5a9
    869c:	00008715 	.word	0x00008715

000086a0 <Crc16Ccitt>:
\param[in] 	initValue - The rowId to be erased.
\param[in] 	byte - The rowId to be erased.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
uint16_t Crc16Ccitt(uint16_t initValue, uint8_t byte)
{
    86a0:	b580      	push	{r7, lr}
    86a2:	b082      	sub	sp, #8
    86a4:	af00      	add	r7, sp, #0
    86a6:	0002      	movs	r2, r0
    86a8:	1dbb      	adds	r3, r7, #6
    86aa:	801a      	strh	r2, [r3, #0]
    86ac:	1d7b      	adds	r3, r7, #5
    86ae:	1c0a      	adds	r2, r1, #0
    86b0:	701a      	strb	r2, [r3, #0]
  byte ^= initValue & 0xffU;
    86b2:	1dbb      	adds	r3, r7, #6
    86b4:	881b      	ldrh	r3, [r3, #0]
    86b6:	b2d9      	uxtb	r1, r3
    86b8:	1d7b      	adds	r3, r7, #5
    86ba:	1d7a      	adds	r2, r7, #5
    86bc:	7812      	ldrb	r2, [r2, #0]
    86be:	404a      	eors	r2, r1
    86c0:	701a      	strb	r2, [r3, #0]
  byte ^= byte << 4U;
    86c2:	1d7b      	adds	r3, r7, #5
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	011b      	lsls	r3, r3, #4
    86c8:	b25a      	sxtb	r2, r3
    86ca:	1d7b      	adds	r3, r7, #5
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	b25b      	sxtb	r3, r3
    86d0:	4053      	eors	r3, r2
    86d2:	b25a      	sxtb	r2, r3
    86d4:	1d7b      	adds	r3, r7, #5
    86d6:	701a      	strb	r2, [r3, #0]

  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    86d8:	1d7b      	adds	r3, r7, #5
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	b29b      	uxth	r3, r3
    86de:	021b      	lsls	r3, r3, #8
    86e0:	b29a      	uxth	r2, r3
    86e2:	1dbb      	adds	r3, r7, #6
    86e4:	881b      	ldrh	r3, [r3, #0]
    86e6:	0a1b      	lsrs	r3, r3, #8
    86e8:	b29b      	uxth	r3, r3
    86ea:	4313      	orrs	r3, r2
    86ec:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    86ee:	1d7b      	adds	r3, r7, #5
    86f0:	781b      	ldrb	r3, [r3, #0]
    86f2:	091b      	lsrs	r3, r3, #4
    86f4:	b2db      	uxtb	r3, r3
    86f6:	b29b      	uxth	r3, r3
    86f8:	4053      	eors	r3, r2
    86fa:	b29a      	uxth	r2, r3
    86fc:	1d7b      	adds	r3, r7, #5
    86fe:	781b      	ldrb	r3, [r3, #0]
    8700:	b29b      	uxth	r3, r3
    8702:	00db      	lsls	r3, r3, #3
    8704:	b29b      	uxth	r3, r3
    8706:	4053      	eors	r3, r2
    8708:	b29b      	uxth	r3, r3
}
    870a:	0018      	movs	r0, r3
    870c:	46bd      	mov	sp, r7
    870e:	b002      	add	sp, #8
    8710:	bd80      	pop	{r7, pc}
	...

00008714 <calculate_crc>:
\param[in] 	length - The amount of data for which CRC is to be calculated.
\param[in] 	data - The data.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint16_t calculate_crc(uint16_t length, uint8_t *data)
{
    8714:	b590      	push	{r4, r7, lr}
    8716:	b085      	sub	sp, #20
    8718:	af00      	add	r7, sp, #0
    871a:	0002      	movs	r2, r0
    871c:	6039      	str	r1, [r7, #0]
    871e:	1dbb      	adds	r3, r7, #6
    8720:	801a      	strh	r2, [r3, #0]
  uint16_t eeprom_crc = 0U;
    8722:	230e      	movs	r3, #14
    8724:	18fb      	adds	r3, r7, r3
    8726:	2200      	movs	r2, #0
    8728:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < length; i++)
    872a:	230c      	movs	r3, #12
    872c:	18fb      	adds	r3, r7, r3
    872e:	2200      	movs	r2, #0
    8730:	801a      	strh	r2, [r3, #0]
    8732:	e017      	b.n	8764 <calculate_crc+0x50>
  {
    eeprom_crc = Crc16Ccitt(eeprom_crc, data[i]);
    8734:	230c      	movs	r3, #12
    8736:	18fb      	adds	r3, r7, r3
    8738:	881b      	ldrh	r3, [r3, #0]
    873a:	683a      	ldr	r2, [r7, #0]
    873c:	18d3      	adds	r3, r2, r3
    873e:	781a      	ldrb	r2, [r3, #0]
    8740:	230e      	movs	r3, #14
    8742:	18fc      	adds	r4, r7, r3
    8744:	230e      	movs	r3, #14
    8746:	18fb      	adds	r3, r7, r3
    8748:	881b      	ldrh	r3, [r3, #0]
    874a:	0011      	movs	r1, r2
    874c:	0018      	movs	r0, r3
    874e:	4b0c      	ldr	r3, [pc, #48]	; (8780 <calculate_crc+0x6c>)
    8750:	4798      	blx	r3
    8752:	0003      	movs	r3, r0
    8754:	8023      	strh	r3, [r4, #0]
  for (uint16_t i = 0; i < length; i++)
    8756:	230c      	movs	r3, #12
    8758:	18fb      	adds	r3, r7, r3
    875a:	881a      	ldrh	r2, [r3, #0]
    875c:	230c      	movs	r3, #12
    875e:	18fb      	adds	r3, r7, r3
    8760:	3201      	adds	r2, #1
    8762:	801a      	strh	r2, [r3, #0]
    8764:	230c      	movs	r3, #12
    8766:	18fa      	adds	r2, r7, r3
    8768:	1dbb      	adds	r3, r7, #6
    876a:	8812      	ldrh	r2, [r2, #0]
    876c:	881b      	ldrh	r3, [r3, #0]
    876e:	429a      	cmp	r2, r3
    8770:	d3e0      	bcc.n	8734 <calculate_crc+0x20>
  }
  return eeprom_crc;
    8772:	230e      	movs	r3, #14
    8774:	18fb      	adds	r3, r7, r3
    8776:	881b      	ldrh	r3, [r3, #0]
}
    8778:	0018      	movs	r0, r3
    877a:	46bd      	mov	sp, r7
    877c:	b005      	add	sp, #20
    877e:	bd90      	pop	{r4, r7, pc}
    8780:	000086a1 	.word	0x000086a1

00008784 <nvmLogicalRowToPhysicalAddr>:

\param[in] 	logicalRow - The logical row.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
    8784:	b580      	push	{r7, lr}
    8786:	b082      	sub	sp, #8
    8788:	af00      	add	r7, sp, #0
    878a:	0002      	movs	r2, r0
    878c:	1dbb      	adds	r3, r7, #6
    878e:	801a      	strh	r2, [r3, #0]
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    8790:	1dbb      	adds	r3, r7, #6
    8792:	881b      	ldrh	r3, [r3, #0]
    8794:	2280      	movs	r2, #128	; 0x80
    8796:	01d2      	lsls	r2, r2, #7
    8798:	4694      	mov	ip, r2
    879a:	4463      	add	r3, ip
    879c:	021b      	lsls	r3, r3, #8
}
    879e:	0018      	movs	r0, r3
    87a0:	46bd      	mov	sp, r7
    87a2:	b002      	add	sp, #8
    87a4:	bd80      	pop	{r7, pc}
	...

000087a8 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    87a8:	b580      	push	{r7, lr}
    87aa:	b082      	sub	sp, #8
    87ac:	af00      	add	r7, sp, #0
    87ae:	0002      	movs	r2, r0
    87b0:	1dfb      	adds	r3, r7, #7
    87b2:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
    87b4:	4b09      	ldr	r3, [pc, #36]	; (87dc <pdsPostTask+0x34>)
    87b6:	4798      	blx	r3
    pdsTaskFlags |= id;
    87b8:	4b09      	ldr	r3, [pc, #36]	; (87e0 <pdsPostTask+0x38>)
    87ba:	781b      	ldrb	r3, [r3, #0]
    87bc:	b2da      	uxtb	r2, r3
    87be:	1dfb      	adds	r3, r7, #7
    87c0:	781b      	ldrb	r3, [r3, #0]
    87c2:	4313      	orrs	r3, r2
    87c4:	b2da      	uxtb	r2, r3
    87c6:	4b06      	ldr	r3, [pc, #24]	; (87e0 <pdsPostTask+0x38>)
    87c8:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
    87ca:	4b06      	ldr	r3, [pc, #24]	; (87e4 <pdsPostTask+0x3c>)
    87cc:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    87ce:	2008      	movs	r0, #8
    87d0:	4b05      	ldr	r3, [pc, #20]	; (87e8 <pdsPostTask+0x40>)
    87d2:	4798      	blx	r3
}
    87d4:	46c0      	nop			; (mov r8, r8)
    87d6:	46bd      	mov	sp, r7
    87d8:	b002      	add	sp, #8
    87da:	bd80      	pop	{r7, pc}
    87dc:	00007dc9 	.word	0x00007dc9
    87e0:	20000d4d 	.word	0x20000d4d
    87e4:	00007ddd 	.word	0x00007ddd
    87e8:	00009cb5 	.word	0x00009cb5

000087ec <pdsWlInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsWlInit(void)
{
    87ec:	b590      	push	{r4, r7, lr}
    87ee:	b0c5      	sub	sp, #276	; 0x114
    87f0:	af00      	add	r7, sp, #0

	PdsStatus_t status = pdsNvmInit();
    87f2:	2387      	movs	r3, #135	; 0x87
    87f4:	005b      	lsls	r3, r3, #1
    87f6:	18fc      	adds	r4, r7, r3
    87f8:	4b5f      	ldr	r3, [pc, #380]	; (8978 <pdsWlInit+0x18c>)
    87fa:	4798      	blx	r3
    87fc:	0003      	movs	r3, r0
    87fe:	7023      	strb	r3, [r4, #0]
	if (PDS_OK != status)
    8800:	2387      	movs	r3, #135	; 0x87
    8802:	005b      	lsls	r3, r3, #1
    8804:	18fb      	adds	r3, r7, r3
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	2b00      	cmp	r3, #0
    880a:	d004      	beq.n	8816 <pdsWlInit+0x2a>
	{
		return status;
    880c:	2387      	movs	r3, #135	; 0x87
    880e:	005b      	lsls	r3, r3, #1
    8810:	18fb      	adds	r3, r7, r3
    8812:	781b      	ldrb	r3, [r3, #0]
    8814:	e0ac      	b.n	8970 <pdsWlInit+0x184>
	}
	PdsMem_t buffer;
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    8816:	2380      	movs	r3, #128	; 0x80
    8818:	005a      	lsls	r2, r3, #1
    881a:	4b58      	ldr	r3, [pc, #352]	; (897c <pdsWlInit+0x190>)
    881c:	21ff      	movs	r1, #255	; 0xff
    881e:	0018      	movs	r0, r3
    8820:	4b57      	ldr	r3, [pc, #348]	; (8980 <pdsWlInit+0x194>)
    8822:	4798      	blx	r3
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    8824:	4b57      	ldr	r3, [pc, #348]	; (8984 <pdsWlInit+0x198>)
    8826:	221a      	movs	r2, #26
    8828:	21ff      	movs	r1, #255	; 0xff
    882a:	0018      	movs	r0, r3
    882c:	4b54      	ldr	r3, [pc, #336]	; (8980 <pdsWlInit+0x194>)
    882e:	4798      	blx	r3
	memset(&buffer, 0, sizeof(PdsMem_t));
    8830:	2380      	movs	r3, #128	; 0x80
    8832:	005a      	lsls	r2, r3, #1
    8834:	230c      	movs	r3, #12
    8836:	18fb      	adds	r3, r7, r3
    8838:	2100      	movs	r1, #0
    883a:	0018      	movs	r0, r3
    883c:	4b50      	ldr	r3, [pc, #320]	; (8980 <pdsWlInit+0x194>)
    883e:	4798      	blx	r3
    UpdateFileMap_t updateFileMap;
	
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    8840:	2310      	movs	r3, #16
    8842:	33ff      	adds	r3, #255	; 0xff
    8844:	18fb      	adds	r3, r7, r3
    8846:	2200      	movs	r2, #0
    8848:	701a      	strb	r2, [r3, #0]
    884a:	e087      	b.n	895c <pdsWlInit+0x170>
    {
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    884c:	2310      	movs	r3, #16
    884e:	33ff      	adds	r3, #255	; 0xff
    8850:	18fb      	adds	r3, r7, r3
    8852:	781b      	ldrb	r3, [r3, #0]
    8854:	b298      	uxth	r0, r3
    8856:	2387      	movs	r3, #135	; 0x87
    8858:	005b      	lsls	r3, r3, #1
    885a:	18fc      	adds	r4, r7, r3
    885c:	2380      	movs	r3, #128	; 0x80
    885e:	005a      	lsls	r2, r3, #1
    8860:	230c      	movs	r3, #12
    8862:	18fb      	adds	r3, r7, r3
    8864:	0019      	movs	r1, r3
    8866:	4b48      	ldr	r3, [pc, #288]	; (8988 <pdsWlInit+0x19c>)
    8868:	4798      	blx	r3
    886a:	0003      	movs	r3, r0
    886c:	7023      	strb	r3, [r4, #0]
		if (PDS_OK == status)
    886e:	2387      	movs	r3, #135	; 0x87
    8870:	005b      	lsls	r3, r3, #1
    8872:	18fb      	adds	r3, r7, r3
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	2b00      	cmp	r3, #0
    8878:	d167      	bne.n	894a <pdsWlInit+0x15e>
		{
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    887a:	2310      	movs	r3, #16
    887c:	33ff      	adds	r3, #255	; 0xff
    887e:	18fb      	adds	r3, r7, r3
    8880:	781a      	ldrb	r2, [r3, #0]
    8882:	4b42      	ldr	r3, [pc, #264]	; (898c <pdsWlInit+0x1a0>)
    8884:	2188      	movs	r1, #136	; 0x88
    8886:	0049      	lsls	r1, r1, #1
    8888:	468c      	mov	ip, r1
    888a:	44bc      	add	ip, r7
    888c:	4463      	add	r3, ip
    888e:	6899      	ldr	r1, [r3, #8]
    8890:	0a09      	lsrs	r1, r1, #8
    8892:	7b1b      	ldrb	r3, [r3, #12]
    8894:	061b      	lsls	r3, r3, #24
    8896:	430b      	orrs	r3, r1
    8898:	0019      	movs	r1, r3
    889a:	4b38      	ldr	r3, [pc, #224]	; (897c <pdsWlInit+0x190>)
    889c:	00d2      	lsls	r2, r2, #3
    889e:	50d1      	str	r1, [r2, r3]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    88a0:	2310      	movs	r3, #16
    88a2:	33ff      	adds	r3, #255	; 0xff
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	7819      	ldrb	r1, [r3, #0]
    88a8:	4b38      	ldr	r3, [pc, #224]	; (898c <pdsWlInit+0x1a0>)
    88aa:	2288      	movs	r2, #136	; 0x88
    88ac:	0052      	lsls	r2, r2, #1
    88ae:	4694      	mov	ip, r2
    88b0:	44bc      	add	ip, r7
    88b2:	4463      	add	r3, ip
    88b4:	79da      	ldrb	r2, [r3, #7]
    88b6:	7a1b      	ldrb	r3, [r3, #8]
    88b8:	021b      	lsls	r3, r3, #8
    88ba:	4313      	orrs	r3, r2
    88bc:	b298      	uxth	r0, r3
    88be:	4a2f      	ldr	r2, [pc, #188]	; (897c <pdsWlInit+0x190>)
    88c0:	00cb      	lsls	r3, r1, #3
    88c2:	18d3      	adds	r3, r2, r3
    88c4:	3304      	adds	r3, #4
    88c6:	1c02      	adds	r2, r0, #0
    88c8:	801a      	strh	r2, [r3, #0]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    88ca:	2310      	movs	r3, #16
    88cc:	33ff      	adds	r3, #255	; 0xff
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	4a2a      	ldr	r2, [pc, #168]	; (897c <pdsWlInit+0x190>)
    88d4:	00db      	lsls	r3, r3, #3
    88d6:	18d3      	adds	r3, r2, r3
    88d8:	3306      	adds	r3, #6
    88da:	2201      	movs	r2, #1
    88dc:	4252      	negs	r2, r2
    88de:	801a      	strh	r2, [r3, #0]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    88e0:	4b2a      	ldr	r3, [pc, #168]	; (898c <pdsWlInit+0x1a0>)
    88e2:	2288      	movs	r2, #136	; 0x88
    88e4:	0052      	lsls	r2, r2, #1
    88e6:	4694      	mov	ip, r2
    88e8:	44bc      	add	ip, r7
    88ea:	4463      	add	r3, ip
    88ec:	689a      	ldr	r2, [r3, #8]
    88ee:	0a12      	lsrs	r2, r2, #8
    88f0:	7b1b      	ldrb	r3, [r3, #12]
    88f2:	061b      	lsls	r3, r3, #24
    88f4:	4313      	orrs	r3, r2
    88f6:	001a      	movs	r2, r3
    88f8:	4b25      	ldr	r3, [pc, #148]	; (8990 <pdsWlInit+0x1a4>)
    88fa:	2188      	movs	r1, #136	; 0x88
    88fc:	0049      	lsls	r1, r1, #1
    88fe:	468c      	mov	ip, r1
    8900:	44bc      	add	ip, r7
    8902:	4463      	add	r3, ip
    8904:	601a      	str	r2, [r3, #0]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    8906:	4b21      	ldr	r3, [pc, #132]	; (898c <pdsWlInit+0x1a0>)
    8908:	2288      	movs	r2, #136	; 0x88
    890a:	0052      	lsls	r2, r2, #1
    890c:	4694      	mov	ip, r2
    890e:	44bc      	add	ip, r7
    8910:	4463      	add	r3, ip
    8912:	79da      	ldrb	r2, [r3, #7]
    8914:	7a1b      	ldrb	r3, [r3, #8]
    8916:	021b      	lsls	r3, r3, #8
    8918:	4313      	orrs	r3, r2
    891a:	b29a      	uxth	r2, r3
    891c:	4b1c      	ldr	r3, [pc, #112]	; (8990 <pdsWlInit+0x1a4>)
    891e:	2188      	movs	r1, #136	; 0x88
    8920:	0049      	lsls	r1, r1, #1
    8922:	468c      	mov	ip, r1
    8924:	44bc      	add	ip, r7
    8926:	4463      	add	r3, ip
    8928:	809a      	strh	r2, [r3, #4]
            updateFileMap.rowIdx = rowIdx;
    892a:	2310      	movs	r3, #16
    892c:	33ff      	adds	r3, #255	; 0xff
    892e:	18fb      	adds	r3, r7, r3
    8930:	781b      	ldrb	r3, [r3, #0]
    8932:	b29a      	uxth	r2, r3
    8934:	4b16      	ldr	r3, [pc, #88]	; (8990 <pdsWlInit+0x1a4>)
    8936:	2188      	movs	r1, #136	; 0x88
    8938:	0049      	lsls	r1, r1, #1
    893a:	468c      	mov	ip, r1
    893c:	44bc      	add	ip, r7
    893e:	4463      	add	r3, ip
    8940:	80da      	strh	r2, [r3, #6]
            pdsUpdateFileMap(&updateFileMap);
    8942:	1d3b      	adds	r3, r7, #4
    8944:	0018      	movs	r0, r3
    8946:	4b13      	ldr	r3, [pc, #76]	; (8994 <pdsWlInit+0x1a8>)
    8948:	4798      	blx	r3
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    894a:	2310      	movs	r3, #16
    894c:	33ff      	adds	r3, #255	; 0xff
    894e:	18fb      	adds	r3, r7, r3
    8950:	781a      	ldrb	r2, [r3, #0]
    8952:	2310      	movs	r3, #16
    8954:	33ff      	adds	r3, #255	; 0xff
    8956:	18fb      	adds	r3, r7, r3
    8958:	3201      	adds	r2, #1
    895a:	701a      	strb	r2, [r3, #0]
    895c:	2310      	movs	r3, #16
    895e:	33ff      	adds	r3, #255	; 0xff
    8960:	18fb      	adds	r3, r7, r3
    8962:	781b      	ldrb	r3, [r3, #0]
    8964:	2b1f      	cmp	r3, #31
    8966:	d800      	bhi.n	896a <pdsWlInit+0x17e>
    8968:	e770      	b.n	884c <pdsWlInit+0x60>
		}
    }
    pdsUpdateRowMap();
    896a:	4b0b      	ldr	r3, [pc, #44]	; (8998 <pdsWlInit+0x1ac>)
    896c:	4798      	blx	r3
	
	return PDS_OK;
    896e:	2300      	movs	r3, #0
}
    8970:	0018      	movs	r0, r3
    8972:	46bd      	mov	sp, r7
    8974:	b045      	add	sp, #276	; 0x114
    8976:	bd90      	pop	{r4, r7, pc}
    8978:	00008559 	.word	0x00008559
    897c:	20000d50 	.word	0x20000d50
    8980:	000114f9 	.word	0x000114f9
    8984:	20000e50 	.word	0x20000e50
    8988:	000085bd 	.word	0x000085bd
    898c:	fffffefc 	.word	0xfffffefc
    8990:	fffffef4 	.word	0xfffffef4
    8994:	00008af5 	.word	0x00008af5
    8998:	00008a19 	.word	0x00008a19

0000899c <pdsWlRead>:
\param[in] 	buffer - The buffer containing data to be written.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsWlRead(PdsFileItemIdx_t pdsFileItemIdx, PdsMem_t *buffer, uint16_t size)
{
    899c:	b590      	push	{r4, r7, lr}
    899e:	b085      	sub	sp, #20
    89a0:	af00      	add	r7, sp, #0
    89a2:	6039      	str	r1, [r7, #0]
    89a4:	0011      	movs	r1, r2
    89a6:	1dfb      	adds	r3, r7, #7
    89a8:	1c02      	adds	r2, r0, #0
    89aa:	701a      	strb	r2, [r3, #0]
    89ac:	1d3b      	adds	r3, r7, #4
    89ae:	1c0a      	adds	r2, r1, #0
    89b0:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    89b2:	230f      	movs	r3, #15
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	2200      	movs	r2, #0
    89b8:	701a      	strb	r2, [r3, #0]
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    89ba:	1dfb      	adds	r3, r7, #7
    89bc:	7819      	ldrb	r1, [r3, #0]
    89be:	230c      	movs	r3, #12
    89c0:	18fb      	adds	r3, r7, r3
    89c2:	4a12      	ldr	r2, [pc, #72]	; (8a0c <pdsWlRead+0x70>)
    89c4:	0049      	lsls	r1, r1, #1
    89c6:	5a8a      	ldrh	r2, [r1, r2]
    89c8:	801a      	strh	r2, [r3, #0]
	if (USHRT_MAX == rowIdx)
    89ca:	230c      	movs	r3, #12
    89cc:	18fb      	adds	r3, r7, r3
    89ce:	881b      	ldrh	r3, [r3, #0]
    89d0:	4a0f      	ldr	r2, [pc, #60]	; (8a10 <pdsWlRead+0x74>)
    89d2:	4293      	cmp	r3, r2
    89d4:	d101      	bne.n	89da <pdsWlRead+0x3e>
	{
		return PDS_NOT_FOUND;
    89d6:	2303      	movs	r3, #3
    89d8:	e014      	b.n	8a04 <pdsWlRead+0x68>
	}
	
	size += sizeof(PdsWlHeader_t);
    89da:	1d3b      	adds	r3, r7, #4
    89dc:	1d3a      	adds	r2, r7, #4
    89de:	8812      	ldrh	r2, [r2, #0]
    89e0:	3209      	adds	r2, #9
    89e2:	801a      	strh	r2, [r3, #0]
	status = pdsNvmRead(rowIdx, buffer, size);
    89e4:	230f      	movs	r3, #15
    89e6:	18fc      	adds	r4, r7, r3
    89e8:	1d3b      	adds	r3, r7, #4
    89ea:	881a      	ldrh	r2, [r3, #0]
    89ec:	6839      	ldr	r1, [r7, #0]
    89ee:	230c      	movs	r3, #12
    89f0:	18fb      	adds	r3, r7, r3
    89f2:	881b      	ldrh	r3, [r3, #0]
    89f4:	0018      	movs	r0, r3
    89f6:	4b07      	ldr	r3, [pc, #28]	; (8a14 <pdsWlRead+0x78>)
    89f8:	4798      	blx	r3
    89fa:	0003      	movs	r3, r0
    89fc:	7023      	strb	r3, [r4, #0]
	
	return status;
    89fe:	230f      	movs	r3, #15
    8a00:	18fb      	adds	r3, r7, r3
    8a02:	781b      	ldrb	r3, [r3, #0]
}
    8a04:	0018      	movs	r0, r3
    8a06:	46bd      	mov	sp, r7
    8a08:	b005      	add	sp, #20
    8a0a:	bd90      	pop	{r4, r7, pc}
    8a0c:	20000e50 	.word	0x20000e50
    8a10:	0000ffff 	.word	0x0000ffff
    8a14:	000085bd 	.word	0x000085bd

00008a18 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    8a18:	b580      	push	{r7, lr}
    8a1a:	b082      	sub	sp, #8
    8a1c:	af00      	add	r7, sp, #0
	uint16_t rowIdx = USHRT_MAX;
    8a1e:	1dbb      	adds	r3, r7, #6
    8a20:	2201      	movs	r2, #1
    8a22:	4252      	negs	r2, r2
    8a24:	801a      	strh	r2, [r3, #0]
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    8a26:	1d3b      	adds	r3, r7, #4
    8a28:	2200      	movs	r2, #0
    8a2a:	801a      	strh	r2, [r3, #0]
    8a2c:	1cbb      	adds	r3, r7, #2
    8a2e:	2200      	movs	r2, #0
    8a30:	801a      	strh	r2, [r3, #0]
    8a32:	e051      	b.n	8ad8 <pdsUpdateRowMap+0xc0>
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    8a34:	1d3b      	adds	r3, r7, #4
    8a36:	881a      	ldrh	r2, [r3, #0]
    8a38:	4b2b      	ldr	r3, [pc, #172]	; (8ae8 <pdsUpdateRowMap+0xd0>)
    8a3a:	0052      	lsls	r2, r2, #1
    8a3c:	5ad3      	ldrh	r3, [r2, r3]
    8a3e:	4a2b      	ldr	r2, [pc, #172]	; (8aec <pdsUpdateRowMap+0xd4>)
    8a40:	4293      	cmp	r3, r2
    8a42:	d044      	beq.n	8ace <pdsUpdateRowMap+0xb6>
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    8a44:	1d3b      	adds	r3, r7, #4
    8a46:	881a      	ldrh	r2, [r3, #0]
    8a48:	4b27      	ldr	r3, [pc, #156]	; (8ae8 <pdsUpdateRowMap+0xd0>)
    8a4a:	0052      	lsls	r2, r2, #1
    8a4c:	5ad3      	ldrh	r3, [r2, r3]
    8a4e:	001a      	movs	r2, r3
    8a50:	1dbb      	adds	r3, r7, #6
    8a52:	4927      	ldr	r1, [pc, #156]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8a54:	00d2      	lsls	r2, r2, #3
    8a56:	188a      	adds	r2, r1, r2
    8a58:	3206      	adds	r2, #6
    8a5a:	8812      	ldrh	r2, [r2, #0]
    8a5c:	801a      	strh	r2, [r3, #0]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    8a5e:	1d3b      	adds	r3, r7, #4
    8a60:	881a      	ldrh	r2, [r3, #0]
    8a62:	4b21      	ldr	r3, [pc, #132]	; (8ae8 <pdsUpdateRowMap+0xd0>)
    8a64:	0052      	lsls	r2, r2, #1
    8a66:	5ad3      	ldrh	r3, [r2, r3]
    8a68:	4a21      	ldr	r2, [pc, #132]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8a6a:	00db      	lsls	r3, r3, #3
    8a6c:	18d3      	adds	r3, r2, r3
    8a6e:	3306      	adds	r3, #6
    8a70:	2201      	movs	r2, #1
    8a72:	4252      	negs	r2, r2
    8a74:	801a      	strh	r2, [r3, #0]
			while(rowIdx != USHRT_MAX)
    8a76:	e025      	b.n	8ac4 <pdsUpdateRowMap+0xac>
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    8a78:	1dbb      	adds	r3, r7, #6
    8a7a:	881a      	ldrh	r2, [r3, #0]
    8a7c:	1cbb      	adds	r3, r7, #2
    8a7e:	491c      	ldr	r1, [pc, #112]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8a80:	00d2      	lsls	r2, r2, #3
    8a82:	188a      	adds	r2, r1, r2
    8a84:	3206      	adds	r2, #6
    8a86:	8812      	ldrh	r2, [r2, #0]
    8a88:	801a      	strh	r2, [r3, #0]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    8a8a:	1dbb      	adds	r3, r7, #6
    8a8c:	881b      	ldrh	r3, [r3, #0]
    8a8e:	4a18      	ldr	r2, [pc, #96]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8a90:	00db      	lsls	r3, r3, #3
    8a92:	18d3      	adds	r3, r2, r3
    8a94:	3306      	adds	r3, #6
    8a96:	2201      	movs	r2, #1
    8a98:	4252      	negs	r2, r2
    8a9a:	801a      	strh	r2, [r3, #0]
				rowMap[rowIdx].counter = UINT_MAX;
    8a9c:	1dbb      	adds	r3, r7, #6
    8a9e:	881a      	ldrh	r2, [r3, #0]
    8aa0:	4b13      	ldr	r3, [pc, #76]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8aa2:	00d2      	lsls	r2, r2, #3
    8aa4:	2101      	movs	r1, #1
    8aa6:	4249      	negs	r1, r1
    8aa8:	50d1      	str	r1, [r2, r3]
				rowMap[rowIdx].memId = USHRT_MAX;
    8aaa:	1dbb      	adds	r3, r7, #6
    8aac:	881b      	ldrh	r3, [r3, #0]
    8aae:	4a10      	ldr	r2, [pc, #64]	; (8af0 <pdsUpdateRowMap+0xd8>)
    8ab0:	00db      	lsls	r3, r3, #3
    8ab2:	18d3      	adds	r3, r2, r3
    8ab4:	3304      	adds	r3, #4
    8ab6:	2201      	movs	r2, #1
    8ab8:	4252      	negs	r2, r2
    8aba:	801a      	strh	r2, [r3, #0]
				rowIdx = rowIdxLocal;
    8abc:	1dbb      	adds	r3, r7, #6
    8abe:	1cba      	adds	r2, r7, #2
    8ac0:	8812      	ldrh	r2, [r2, #0]
    8ac2:	801a      	strh	r2, [r3, #0]
			while(rowIdx != USHRT_MAX)
    8ac4:	1dbb      	adds	r3, r7, #6
    8ac6:	881b      	ldrh	r3, [r3, #0]
    8ac8:	4a08      	ldr	r2, [pc, #32]	; (8aec <pdsUpdateRowMap+0xd4>)
    8aca:	4293      	cmp	r3, r2
    8acc:	d1d4      	bne.n	8a78 <pdsUpdateRowMap+0x60>
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    8ace:	1d3b      	adds	r3, r7, #4
    8ad0:	881a      	ldrh	r2, [r3, #0]
    8ad2:	1d3b      	adds	r3, r7, #4
    8ad4:	3201      	adds	r2, #1
    8ad6:	801a      	strh	r2, [r3, #0]
    8ad8:	1d3b      	adds	r3, r7, #4
    8ada:	881b      	ldrh	r3, [r3, #0]
    8adc:	2b0c      	cmp	r3, #12
    8ade:	d9a9      	bls.n	8a34 <pdsUpdateRowMap+0x1c>
			}
		}
    }
}
    8ae0:	46c0      	nop			; (mov r8, r8)
    8ae2:	46bd      	mov	sp, r7
    8ae4:	b002      	add	sp, #8
    8ae6:	bd80      	pop	{r7, pc}
    8ae8:	20000e50 	.word	0x20000e50
    8aec:	0000ffff 	.word	0x0000ffff
    8af0:	20000d50 	.word	0x20000d50

00008af4 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    8af4:	b580      	push	{r7, lr}
    8af6:	b086      	sub	sp, #24
    8af8:	af00      	add	r7, sp, #0
    8afa:	6078      	str	r0, [r7, #4]
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    8afc:	687b      	ldr	r3, [r7, #4]
    8afe:	889b      	ldrh	r3, [r3, #4]
    8b00:	001a      	movs	r2, r3
    8b02:	4b50      	ldr	r3, [pc, #320]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b04:	0052      	lsls	r2, r2, #1
    8b06:	5ad3      	ldrh	r3, [r2, r3]
    8b08:	4a4f      	ldr	r2, [pc, #316]	; (8c48 <pdsUpdateFileMap+0x154>)
    8b0a:	4293      	cmp	r3, r2
    8b0c:	d108      	bne.n	8b20 <pdsUpdateFileMap+0x2c>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    8b0e:	687b      	ldr	r3, [r7, #4]
    8b10:	889b      	ldrh	r3, [r3, #4]
    8b12:	001a      	movs	r2, r3
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	88d9      	ldrh	r1, [r3, #6]
    8b18:	4b4a      	ldr	r3, [pc, #296]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b1a:	0052      	lsls	r2, r2, #1
    8b1c:	52d1      	strh	r1, [r2, r3]
    8b1e:	e08d      	b.n	8c3c <pdsUpdateFileMap+0x148>

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	889b      	ldrh	r3, [r3, #4]
    8b24:	001a      	movs	r2, r3
    8b26:	4b47      	ldr	r3, [pc, #284]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b28:	0052      	lsls	r2, r2, #1
    8b2a:	5ad3      	ldrh	r3, [r2, r3]
    8b2c:	001a      	movs	r2, r3
    8b2e:	4b47      	ldr	r3, [pc, #284]	; (8c4c <pdsUpdateFileMap+0x158>)
    8b30:	00d2      	lsls	r2, r2, #3
    8b32:	58d2      	ldr	r2, [r2, r3]
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	88db      	ldrh	r3, [r3, #6]
    8b38:	0019      	movs	r1, r3
    8b3a:	4b44      	ldr	r3, [pc, #272]	; (8c4c <pdsUpdateFileMap+0x158>)
    8b3c:	00c9      	lsls	r1, r1, #3
    8b3e:	58cb      	ldr	r3, [r1, r3]
    8b40:	429a      	cmp	r2, r3
    8b42:	d217      	bcs.n	8b74 <pdsUpdateFileMap+0x80>
    {
        /* If the entry in filemap is lesser than  current rowidx update current idx as maxcounteridx*/
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	88db      	ldrh	r3, [r3, #6]
    8b48:	0018      	movs	r0, r3
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	889b      	ldrh	r3, [r3, #4]
    8b4e:	001a      	movs	r2, r3
    8b50:	4b3c      	ldr	r3, [pc, #240]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b52:	0052      	lsls	r2, r2, #1
    8b54:	5ad1      	ldrh	r1, [r2, r3]
    8b56:	4a3d      	ldr	r2, [pc, #244]	; (8c4c <pdsUpdateFileMap+0x158>)
    8b58:	00c3      	lsls	r3, r0, #3
    8b5a:	18d3      	adds	r3, r2, r3
    8b5c:	3306      	adds	r3, #6
    8b5e:	1c0a      	adds	r2, r1, #0
    8b60:	801a      	strh	r2, [r3, #0]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	889b      	ldrh	r3, [r3, #4]
    8b66:	001a      	movs	r2, r3
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	88d9      	ldrh	r1, [r3, #6]
    8b6c:	4b35      	ldr	r3, [pc, #212]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b6e:	0052      	lsls	r2, r2, #1
    8b70:	52d1      	strh	r1, [r2, r3]
    8b72:	e063      	b.n	8c3c <pdsUpdateFileMap+0x148>

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	889b      	ldrh	r3, [r3, #4]
    8b78:	001a      	movs	r2, r3
    8b7a:	4b32      	ldr	r3, [pc, #200]	; (8c44 <pdsUpdateFileMap+0x150>)
    8b7c:	0052      	lsls	r2, r2, #1
    8b7e:	5ad3      	ldrh	r3, [r2, r3]
    8b80:	001a      	movs	r2, r3
    8b82:	4b32      	ldr	r3, [pc, #200]	; (8c4c <pdsUpdateFileMap+0x158>)
    8b84:	00d2      	lsls	r2, r2, #3
    8b86:	58d2      	ldr	r2, [r2, r3]
    8b88:	687b      	ldr	r3, [r7, #4]
    8b8a:	88db      	ldrh	r3, [r3, #6]
    8b8c:	0019      	movs	r1, r3
    8b8e:	4b2f      	ldr	r3, [pc, #188]	; (8c4c <pdsUpdateFileMap+0x158>)
    8b90:	00c9      	lsls	r1, r1, #3
    8b92:	58cb      	ldr	r3, [r1, r3]
    8b94:	429a      	cmp	r2, r3
    8b96:	d050      	beq.n	8c3a <pdsUpdateFileMap+0x146>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    8b98:	687b      	ldr	r3, [r7, #4]
    8b9a:	889b      	ldrh	r3, [r3, #4]
    8b9c:	001a      	movs	r2, r3
    8b9e:	4b29      	ldr	r3, [pc, #164]	; (8c44 <pdsUpdateFileMap+0x150>)
    8ba0:	0052      	lsls	r2, r2, #1
    8ba2:	5ad3      	ldrh	r3, [r2, r3]
    8ba4:	00da      	lsls	r2, r3, #3
    8ba6:	4b29      	ldr	r3, [pc, #164]	; (8c4c <pdsUpdateFileMap+0x158>)
    8ba8:	18d3      	adds	r3, r2, r3
    8baa:	3306      	adds	r3, #6
    8bac:	617b      	str	r3, [r7, #20]
        presentRowIdx = &updateFileMap->rowIdx;
    8bae:	687b      	ldr	r3, [r7, #4]
    8bb0:	3306      	adds	r3, #6
    8bb2:	60fb      	str	r3, [r7, #12]
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    8bb4:	687b      	ldr	r3, [r7, #4]
    8bb6:	889b      	ldrh	r3, [r3, #4]
    8bb8:	005a      	lsls	r2, r3, #1
    8bba:	4b22      	ldr	r3, [pc, #136]	; (8c44 <pdsUpdateFileMap+0x150>)
    8bbc:	18d3      	adds	r3, r2, r3
    8bbe:	613b      	str	r3, [r7, #16]
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    8bc0:	697b      	ldr	r3, [r7, #20]
    8bc2:	881b      	ldrh	r3, [r3, #0]
    8bc4:	4a20      	ldr	r2, [pc, #128]	; (8c48 <pdsUpdateFileMap+0x154>)
    8bc6:	4293      	cmp	r3, r2
    8bc8:	d104      	bne.n	8bd4 <pdsUpdateFileMap+0xe0>
			{
				*previousRowIdx = *presentRowIdx;
    8bca:	68fb      	ldr	r3, [r7, #12]
    8bcc:	881a      	ldrh	r2, [r3, #0]
    8bce:	697b      	ldr	r3, [r7, #20]
    8bd0:	801a      	strh	r2, [r3, #0]
				break;
    8bd2:	e033      	b.n	8c3c <pdsUpdateFileMap+0x148>
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    8bd4:	697b      	ldr	r3, [r7, #20]
    8bd6:	881b      	ldrh	r3, [r3, #0]
    8bd8:	001a      	movs	r2, r3
    8bda:	4b1c      	ldr	r3, [pc, #112]	; (8c4c <pdsUpdateFileMap+0x158>)
    8bdc:	00d2      	lsls	r2, r2, #3
    8bde:	58d2      	ldr	r2, [r2, r3]
    8be0:	68fb      	ldr	r3, [r7, #12]
    8be2:	881b      	ldrh	r3, [r3, #0]
    8be4:	0019      	movs	r1, r3
    8be6:	4b19      	ldr	r3, [pc, #100]	; (8c4c <pdsUpdateFileMap+0x158>)
    8be8:	00c9      	lsls	r1, r1, #3
    8bea:	58cb      	ldr	r3, [r1, r3]
    8bec:	429a      	cmp	r2, r3
    8bee:	d909      	bls.n	8c04 <pdsUpdateFileMap+0x110>
			{
				lastRowIdx = previousRowIdx;
    8bf0:	697b      	ldr	r3, [r7, #20]
    8bf2:	613b      	str	r3, [r7, #16]
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    8bf4:	697b      	ldr	r3, [r7, #20]
    8bf6:	881b      	ldrh	r3, [r3, #0]
    8bf8:	00da      	lsls	r2, r3, #3
    8bfa:	4b14      	ldr	r3, [pc, #80]	; (8c4c <pdsUpdateFileMap+0x158>)
    8bfc:	18d3      	adds	r3, r2, r3
    8bfe:	3306      	adds	r3, #6
    8c00:	617b      	str	r3, [r7, #20]
    8c02:	e7dd      	b.n	8bc0 <pdsUpdateFileMap+0xcc>
			}
			else
			{
			    prevTemp = *previousRowIdx;
    8c04:	230a      	movs	r3, #10
    8c06:	18fb      	adds	r3, r7, r3
    8c08:	697a      	ldr	r2, [r7, #20]
    8c0a:	8812      	ldrh	r2, [r2, #0]
    8c0c:	801a      	strh	r2, [r3, #0]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    8c0e:	693b      	ldr	r3, [r7, #16]
    8c10:	881b      	ldrh	r3, [r3, #0]
    8c12:	0018      	movs	r0, r3
    8c14:	68fb      	ldr	r3, [r7, #12]
    8c16:	8819      	ldrh	r1, [r3, #0]
    8c18:	4a0c      	ldr	r2, [pc, #48]	; (8c4c <pdsUpdateFileMap+0x158>)
    8c1a:	00c3      	lsls	r3, r0, #3
    8c1c:	18d3      	adds	r3, r2, r3
    8c1e:	3306      	adds	r3, #6
    8c20:	1c0a      	adds	r2, r1, #0
    8c22:	801a      	strh	r2, [r3, #0]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    8c24:	68fb      	ldr	r3, [r7, #12]
    8c26:	881b      	ldrh	r3, [r3, #0]
    8c28:	4a08      	ldr	r2, [pc, #32]	; (8c4c <pdsUpdateFileMap+0x158>)
    8c2a:	00db      	lsls	r3, r3, #3
    8c2c:	18d3      	adds	r3, r2, r3
    8c2e:	3306      	adds	r3, #6
    8c30:	220a      	movs	r2, #10
    8c32:	18ba      	adds	r2, r7, r2
    8c34:	8812      	ldrh	r2, [r2, #0]
    8c36:	801a      	strh	r2, [r3, #0]
				break;
    8c38:	e000      	b.n	8c3c <pdsUpdateFileMap+0x148>
		return;
    8c3a:	46c0      	nop			; (mov r8, r8)
			}
		} while(true);

    }
}
    8c3c:	46bd      	mov	sp, r7
    8c3e:	b006      	add	sp, #24
    8c40:	bd80      	pop	{r7, pc}
    8c42:	46c0      	nop			; (mov r8, r8)
    8c44:	20000e50 	.word	0x20000e50
    8c48:	0000ffff 	.word	0x0000ffff
    8c4c:	20000d50 	.word	0x20000d50

00008c50 <isFileFound>:
\brief This function checks if a file is found in the file map.

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b084      	sub	sp, #16
    8c54:	af00      	add	r7, sp, #0
    8c56:	0002      	movs	r2, r0
    8c58:	1dfb      	adds	r3, r7, #7
    8c5a:	701a      	strb	r2, [r3, #0]
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    8c5c:	1dfb      	adds	r3, r7, #7
    8c5e:	7819      	ldrb	r1, [r3, #0]
    8c60:	230e      	movs	r3, #14
    8c62:	18fb      	adds	r3, r7, r3
    8c64:	4a08      	ldr	r2, [pc, #32]	; (8c88 <isFileFound+0x38>)
    8c66:	0049      	lsls	r1, r1, #1
    8c68:	5a8a      	ldrh	r2, [r1, r2]
    8c6a:	801a      	strh	r2, [r3, #0]
	if (USHRT_MAX == rowIdx)
    8c6c:	230e      	movs	r3, #14
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	881b      	ldrh	r3, [r3, #0]
    8c72:	4a06      	ldr	r2, [pc, #24]	; (8c8c <isFileFound+0x3c>)
    8c74:	4293      	cmp	r3, r2
    8c76:	d101      	bne.n	8c7c <isFileFound+0x2c>
	{
		return false;
    8c78:	2300      	movs	r3, #0
    8c7a:	e000      	b.n	8c7e <isFileFound+0x2e>
	}
	else
	{
		return true;
    8c7c:	2301      	movs	r3, #1
	}
}
    8c7e:	0018      	movs	r0, r3
    8c80:	46bd      	mov	sp, r7
    8c82:	b004      	add	sp, #16
    8c84:	bd80      	pop	{r7, pc}
    8c86:	46c0      	nop			; (mov r8, r8)
    8c88:	20000e50 	.word	0x20000e50
    8c8c:	0000ffff 	.word	0x0000ffff

00008c90 <system_pinmux_get_group_from_gpio_pin>:
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b084      	sub	sp, #16
    8c94:	af00      	add	r7, sp, #0
    8c96:	0002      	movs	r2, r0
    8c98:	1dfb      	adds	r3, r7, #7
    8c9a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8c9c:	230f      	movs	r3, #15
    8c9e:	18fb      	adds	r3, r7, r3
    8ca0:	1dfa      	adds	r2, r7, #7
    8ca2:	7812      	ldrb	r2, [r2, #0]
    8ca4:	09d2      	lsrs	r2, r2, #7
    8ca6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8ca8:	230e      	movs	r3, #14
    8caa:	18fb      	adds	r3, r7, r3
    8cac:	1dfa      	adds	r2, r7, #7
    8cae:	7812      	ldrb	r2, [r2, #0]
    8cb0:	0952      	lsrs	r2, r2, #5
    8cb2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8cb4:	4b0d      	ldr	r3, [pc, #52]	; (8cec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8cb6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8cb8:	230f      	movs	r3, #15
    8cba:	18fb      	adds	r3, r7, r3
    8cbc:	781b      	ldrb	r3, [r3, #0]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d10f      	bne.n	8ce2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8cc2:	230f      	movs	r3, #15
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	781b      	ldrb	r3, [r3, #0]
    8cc8:	009b      	lsls	r3, r3, #2
    8cca:	2210      	movs	r2, #16
    8ccc:	4694      	mov	ip, r2
    8cce:	44bc      	add	ip, r7
    8cd0:	4463      	add	r3, ip
    8cd2:	3b08      	subs	r3, #8
    8cd4:	681a      	ldr	r2, [r3, #0]
    8cd6:	230e      	movs	r3, #14
    8cd8:	18fb      	adds	r3, r7, r3
    8cda:	781b      	ldrb	r3, [r3, #0]
    8cdc:	01db      	lsls	r3, r3, #7
    8cde:	18d3      	adds	r3, r2, r3
    8ce0:	e000      	b.n	8ce4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8ce2:	2300      	movs	r3, #0
}
    8ce4:	0018      	movs	r0, r3
    8ce6:	46bd      	mov	sp, r7
    8ce8:	b004      	add	sp, #16
    8cea:	bd80      	pop	{r7, pc}
    8cec:	40002800 	.word	0x40002800

00008cf0 <port_get_group_from_gpio_pin>:
{
    8cf0:	b580      	push	{r7, lr}
    8cf2:	b082      	sub	sp, #8
    8cf4:	af00      	add	r7, sp, #0
    8cf6:	0002      	movs	r2, r0
    8cf8:	1dfb      	adds	r3, r7, #7
    8cfa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8cfc:	1dfb      	adds	r3, r7, #7
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	0018      	movs	r0, r3
    8d02:	4b03      	ldr	r3, [pc, #12]	; (8d10 <port_get_group_from_gpio_pin+0x20>)
    8d04:	4798      	blx	r3
    8d06:	0003      	movs	r3, r0
}
    8d08:	0018      	movs	r0, r3
    8d0a:	46bd      	mov	sp, r7
    8d0c:	b002      	add	sp, #8
    8d0e:	bd80      	pop	{r7, pc}
    8d10:	00008c91 	.word	0x00008c91

00008d14 <port_pin_set_output_level>:
{
    8d14:	b580      	push	{r7, lr}
    8d16:	b084      	sub	sp, #16
    8d18:	af00      	add	r7, sp, #0
    8d1a:	0002      	movs	r2, r0
    8d1c:	1dfb      	adds	r3, r7, #7
    8d1e:	701a      	strb	r2, [r3, #0]
    8d20:	1dbb      	adds	r3, r7, #6
    8d22:	1c0a      	adds	r2, r1, #0
    8d24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8d26:	1dfb      	adds	r3, r7, #7
    8d28:	781b      	ldrb	r3, [r3, #0]
    8d2a:	0018      	movs	r0, r3
    8d2c:	4b0d      	ldr	r3, [pc, #52]	; (8d64 <port_pin_set_output_level+0x50>)
    8d2e:	4798      	blx	r3
    8d30:	0003      	movs	r3, r0
    8d32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8d34:	1dfb      	adds	r3, r7, #7
    8d36:	781b      	ldrb	r3, [r3, #0]
    8d38:	221f      	movs	r2, #31
    8d3a:	4013      	ands	r3, r2
    8d3c:	2201      	movs	r2, #1
    8d3e:	409a      	lsls	r2, r3
    8d40:	0013      	movs	r3, r2
    8d42:	60bb      	str	r3, [r7, #8]
	if (level) {
    8d44:	1dbb      	adds	r3, r7, #6
    8d46:	781b      	ldrb	r3, [r3, #0]
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d003      	beq.n	8d54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8d4c:	68fb      	ldr	r3, [r7, #12]
    8d4e:	68ba      	ldr	r2, [r7, #8]
    8d50:	619a      	str	r2, [r3, #24]
}
    8d52:	e002      	b.n	8d5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    8d54:	68fb      	ldr	r3, [r7, #12]
    8d56:	68ba      	ldr	r2, [r7, #8]
    8d58:	615a      	str	r2, [r3, #20]
}
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	46bd      	mov	sp, r7
    8d5e:	b004      	add	sp, #16
    8d60:	bd80      	pop	{r7, pc}
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	00008cf1 	.word	0x00008cf1

00008d68 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
    8d68:	b580      	push	{r7, lr}
    8d6a:	b084      	sub	sp, #16
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	0002      	movs	r2, r0
    8d70:	1dfb      	adds	r3, r7, #7
    8d72:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8d74:	1dfb      	adds	r3, r7, #7
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	0018      	movs	r0, r3
    8d7a:	4b09      	ldr	r3, [pc, #36]	; (8da0 <port_pin_toggle_output_level+0x38>)
    8d7c:	4798      	blx	r3
    8d7e:	0003      	movs	r3, r0
    8d80:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8d82:	1dfb      	adds	r3, r7, #7
    8d84:	781b      	ldrb	r3, [r3, #0]
    8d86:	221f      	movs	r2, #31
    8d88:	4013      	ands	r3, r2
    8d8a:	2201      	movs	r2, #1
    8d8c:	409a      	lsls	r2, r3
    8d8e:	0013      	movs	r3, r2
    8d90:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	68ba      	ldr	r2, [r7, #8]
    8d96:	61da      	str	r2, [r3, #28]
}
    8d98:	46c0      	nop			; (mov r8, r8)
    8d9a:	46bd      	mov	sp, r7
    8d9c:	b004      	add	sp, #16
    8d9e:	bd80      	pop	{r7, pc}
    8da0:	00008cf1 	.word	0x00008cf1

00008da4 <set_LED_data>:
 \param[in]  data  - could be LOFF, LON, LTOGGLE
             LED_0_PIN - Pin number of the LED0 in the board
 ************************************************************************/

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    8da4:	b580      	push	{r7, lr}
    8da6:	b084      	sub	sp, #16
    8da8:	af00      	add	r7, sp, #0
    8daa:	0002      	movs	r2, r0
    8dac:	6039      	str	r1, [r7, #0]
    8dae:	1dfb      	adds	r3, r7, #7
    8db0:	701a      	strb	r2, [r3, #0]
    int8_t status = 0;
    8db2:	230f      	movs	r3, #15
    8db4:	18fb      	adds	r3, r7, r3
    8db6:	2200      	movs	r2, #0
    8db8:	701a      	strb	r2, [r3, #0]
    int8_t ledPin = -1;
    8dba:	230e      	movs	r3, #14
    8dbc:	18fb      	adds	r3, r7, r3
    8dbe:	22ff      	movs	r2, #255	; 0xff
    8dc0:	701a      	strb	r2, [r3, #0]
    uint8_t value = *data;
    8dc2:	230d      	movs	r3, #13
    8dc4:	18fb      	adds	r3, r7, r3
    8dc6:	683a      	ldr	r2, [r7, #0]
    8dc8:	7812      	ldrb	r2, [r2, #0]
    8dca:	701a      	strb	r2, [r3, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    8dcc:	1dfb      	adds	r3, r7, #7
    8dce:	781b      	ldrb	r3, [r3, #0]
    8dd0:	2b02      	cmp	r3, #2
    8dd2:	d104      	bne.n	8dde <set_LED_data+0x3a>
    {
        ledPin = LED_0_PIN;
    8dd4:	230e      	movs	r3, #14
    8dd6:	18fb      	adds	r3, r7, r3
    8dd8:	2213      	movs	r2, #19
    8dda:	701a      	strb	r2, [r3, #0]
    8ddc:	e010      	b.n	8e00 <set_LED_data+0x5c>
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    8dde:	1dfb      	adds	r3, r7, #7
    8de0:	781b      	ldrb	r3, [r3, #0]
    8de2:	2b03      	cmp	r3, #3
    8de4:	d104      	bne.n	8df0 <set_LED_data+0x4c>
    {
        ledPin = LED_1_PIN;
    8de6:	230e      	movs	r3, #14
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	2212      	movs	r2, #18
    8dec:	701a      	strb	r2, [r3, #0]
    8dee:	e007      	b.n	8e00 <set_LED_data+0x5c>
    }
    else
#endif
    {
        ledPin = UNSUPPORTED_RESOURCE;
    8df0:	230e      	movs	r3, #14
    8df2:	18fb      	adds	r3, r7, r3
    8df4:	22ff      	movs	r2, #255	; 0xff
    8df6:	701a      	strb	r2, [r3, #0]
        value = UNSUPPORTED_RESOURCE;
    8df8:	230d      	movs	r3, #13
    8dfa:	18fb      	adds	r3, r7, r3
    8dfc:	22ff      	movs	r2, #255	; 0xff
    8dfe:	701a      	strb	r2, [r3, #0]
    }

    switch(value)
    8e00:	230d      	movs	r3, #13
    8e02:	18fb      	adds	r3, r7, r3
    8e04:	781b      	ldrb	r3, [r3, #0]
    8e06:	2b01      	cmp	r3, #1
    8e08:	d00b      	beq.n	8e22 <set_LED_data+0x7e>
    8e0a:	2b02      	cmp	r3, #2
    8e0c:	d011      	beq.n	8e32 <set_LED_data+0x8e>
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d116      	bne.n	8e40 <set_LED_data+0x9c>
    {
        case LOFF:
        {
            LED_Off(ledPin);
    8e12:	230e      	movs	r3, #14
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	2101      	movs	r1, #1
    8e1a:	0018      	movs	r0, r3
    8e1c:	4b0f      	ldr	r3, [pc, #60]	; (8e5c <set_LED_data+0xb8>)
    8e1e:	4798      	blx	r3
            break;
    8e20:	e013      	b.n	8e4a <set_LED_data+0xa6>
        }
        case LON:
        {
            LED_On(ledPin);
    8e22:	230e      	movs	r3, #14
    8e24:	18fb      	adds	r3, r7, r3
    8e26:	781b      	ldrb	r3, [r3, #0]
    8e28:	2100      	movs	r1, #0
    8e2a:	0018      	movs	r0, r3
    8e2c:	4b0b      	ldr	r3, [pc, #44]	; (8e5c <set_LED_data+0xb8>)
    8e2e:	4798      	blx	r3
            break;
    8e30:	e00b      	b.n	8e4a <set_LED_data+0xa6>
        }
        case LTOGGLE:
        {
            LED_Toggle(ledPin);
    8e32:	230e      	movs	r3, #14
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	781b      	ldrb	r3, [r3, #0]
    8e38:	0018      	movs	r0, r3
    8e3a:	4b09      	ldr	r3, [pc, #36]	; (8e60 <set_LED_data+0xbc>)
    8e3c:	4798      	blx	r3
            break;
    8e3e:	e004      	b.n	8e4a <set_LED_data+0xa6>
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    8e40:	230f      	movs	r3, #15
    8e42:	18fb      	adds	r3, r7, r3
    8e44:	22ff      	movs	r2, #255	; 0xff
    8e46:	701a      	strb	r2, [r3, #0]
            break;
    8e48:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
    8e4a:	230f      	movs	r3, #15
    8e4c:	18fb      	adds	r3, r7, r3
    8e4e:	781b      	ldrb	r3, [r3, #0]
    8e50:	b25b      	sxtb	r3, r3
}
    8e52:	0018      	movs	r0, r3
    8e54:	46bd      	mov	sp, r7
    8e56:	b004      	add	sp, #16
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	46c0      	nop			; (mov r8, r8)
    8e5c:	00008d15 	.word	0x00008d15
    8e60:	00008d69 	.word	0x00008d69

00008e64 <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    8e64:	b580      	push	{r7, lr}
    8e66:	af00      	add	r7, sp, #0
    //temp_sensor_init();
    //LED_init();
}
    8e68:	46c0      	nop			; (mov r8, r8)
    8e6a:	46bd      	mov	sp, r7
    8e6c:	bd80      	pop	{r7, pc}
	...

00008e70 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    8e70:	b580      	push	{r7, lr}
    8e72:	b082      	sub	sp, #8
    8e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    8e76:	f3ef 8310 	mrs	r3, PRIMASK
    8e7a:	607b      	str	r3, [r7, #4]
  return(result);
    8e7c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    8e7e:	425a      	negs	r2, r3
    8e80:	4153      	adcs	r3, r2
    8e82:	b2db      	uxtb	r3, r3
    8e84:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    8e86:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8e88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    8e8c:	4b03      	ldr	r3, [pc, #12]	; (8e9c <cpu_irq_save+0x2c>)
    8e8e:	2200      	movs	r2, #0
    8e90:	701a      	strb	r2, [r3, #0]
	return flags;
    8e92:	683b      	ldr	r3, [r7, #0]
}
    8e94:	0018      	movs	r0, r3
    8e96:	46bd      	mov	sp, r7
    8e98:	b002      	add	sp, #8
    8e9a:	bd80      	pop	{r7, pc}
    8e9c:	20000008 	.word	0x20000008

00008ea0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    8ea0:	b580      	push	{r7, lr}
    8ea2:	b082      	sub	sp, #8
    8ea4:	af00      	add	r7, sp, #0
    8ea6:	6078      	str	r0, [r7, #4]
	return (flags);
    8ea8:	687b      	ldr	r3, [r7, #4]
    8eaa:	1e5a      	subs	r2, r3, #1
    8eac:	4193      	sbcs	r3, r2
    8eae:	b2db      	uxtb	r3, r3
}
    8eb0:	0018      	movs	r0, r3
    8eb2:	46bd      	mov	sp, r7
    8eb4:	b002      	add	sp, #8
    8eb6:	bd80      	pop	{r7, pc}

00008eb8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    8eb8:	b580      	push	{r7, lr}
    8eba:	b082      	sub	sp, #8
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	0018      	movs	r0, r3
    8ec4:	4b06      	ldr	r3, [pc, #24]	; (8ee0 <cpu_irq_restore+0x28>)
    8ec6:	4798      	blx	r3
    8ec8:	1e03      	subs	r3, r0, #0
    8eca:	d005      	beq.n	8ed8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
    8ecc:	4b05      	ldr	r3, [pc, #20]	; (8ee4 <cpu_irq_restore+0x2c>)
    8ece:	2201      	movs	r2, #1
    8ed0:	701a      	strb	r2, [r3, #0]
    8ed2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8ed6:	b662      	cpsie	i
}
    8ed8:	46c0      	nop			; (mov r8, r8)
    8eda:	46bd      	mov	sp, r7
    8edc:	b002      	add	sp, #8
    8ede:	bd80      	pop	{r7, pc}
    8ee0:	00008ea1 	.word	0x00008ea1
    8ee4:	20000008 	.word	0x20000008

00008ee8 <hwTimerOverflowCallback>:
/******************************************************************************
                     Interrupt service routines
******************************************************************************/
/* ISR to handle OVF interrupt from TC0 */
static void hwTimerOverflowCallback(void)
{
    8ee8:	b580      	push	{r7, lr}
    8eea:	b082      	sub	sp, #8
    8eec:	af00      	add	r7, sp, #0
    uint16_t temp = sysTime;
    8eee:	1dbb      	adds	r3, r7, #6
    8ef0:	4a0c      	ldr	r2, [pc, #48]	; (8f24 <hwTimerOverflowCallback+0x3c>)
    8ef2:	8812      	ldrh	r2, [r2, #0]
    8ef4:	801a      	strh	r2, [r3, #0]
    if (++sysTime < temp)
    8ef6:	4b0b      	ldr	r3, [pc, #44]	; (8f24 <hwTimerOverflowCallback+0x3c>)
    8ef8:	881b      	ldrh	r3, [r3, #0]
    8efa:	b29b      	uxth	r3, r3
    8efc:	3301      	adds	r3, #1
    8efe:	b29b      	uxth	r3, r3
    8f00:	4a08      	ldr	r2, [pc, #32]	; (8f24 <hwTimerOverflowCallback+0x3c>)
    8f02:	1c19      	adds	r1, r3, #0
    8f04:	8011      	strh	r1, [r2, #0]
    8f06:	1dba      	adds	r2, r7, #6
    8f08:	8812      	ldrh	r2, [r2, #0]
    8f0a:	429a      	cmp	r2, r3
    8f0c:	d904      	bls.n	8f18 <hwTimerOverflowCallback+0x30>
    {
        sysTimeOvf++;
    8f0e:	4b06      	ldr	r3, [pc, #24]	; (8f28 <hwTimerOverflowCallback+0x40>)
    8f10:	681b      	ldr	r3, [r3, #0]
    8f12:	1c5a      	adds	r2, r3, #1
    8f14:	4b04      	ldr	r3, [pc, #16]	; (8f28 <hwTimerOverflowCallback+0x40>)
    8f16:	601a      	str	r2, [r3, #0]
    }

    swtimerProcessOverflow();
    8f18:	4b04      	ldr	r3, [pc, #16]	; (8f2c <hwTimerOverflowCallback+0x44>)
    8f1a:	4798      	blx	r3
}
    8f1c:	46c0      	nop			; (mov r8, r8)
    8f1e:	46bd      	mov	sp, r7
    8f20:	b002      	add	sp, #8
    8f22:	bd80      	pop	{r7, pc}
    8f24:	20001278 	.word	0x20001278
    8f28:	2000127c 	.word	0x2000127c
    8f2c:	000092f1 	.word	0x000092f1

00008f30 <hwTimerExpiryCallback>:

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    8f30:	b580      	push	{r7, lr}
    8f32:	af00      	add	r7, sp, #0
    if (0 < runningTimers)
    8f34:	4b06      	ldr	r3, [pc, #24]	; (8f50 <hwTimerExpiryCallback+0x20>)
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	b2db      	uxtb	r3, r3
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d005      	beq.n	8f4a <hwTimerExpiryCallback+0x1a>
    {
        isTimerTriggered = true;
    8f3e:	4b05      	ldr	r3, [pc, #20]	; (8f54 <hwTimerExpiryCallback+0x24>)
    8f40:	2201      	movs	r2, #1
    8f42:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    8f44:	2001      	movs	r0, #1
    8f46:	4b04      	ldr	r3, [pc, #16]	; (8f58 <hwTimerExpiryCallback+0x28>)
    8f48:	4798      	blx	r3
    }
}
    8f4a:	46c0      	nop			; (mov r8, r8)
    8f4c:	46bd      	mov	sp, r7
    8f4e:	bd80      	pop	{r7, pc}
    8f50:	20000e6a 	.word	0x20000e6a
    8f54:	2000127a 	.word	0x2000127a
    8f58:	00009cb5 	.word	0x00009cb5

00008f5c <swtimerStartAbsoluteTimer>:
/**************************************************************************//**
\brief Inserts the timer in running timers queue in sorted order
******************************************************************************/
static void swtimerStartAbsoluteTimer(uint8_t timerId, uint32_t pointInTime,
    void *handlerCb, void *parameter)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b086      	sub	sp, #24
    8f60:	af00      	add	r7, sp, #0
    8f62:	60b9      	str	r1, [r7, #8]
    8f64:	607a      	str	r2, [r7, #4]
    8f66:	603b      	str	r3, [r7, #0]
    8f68:	230f      	movs	r3, #15
    8f6a:	18fb      	adds	r3, r7, r3
    8f6c:	1c02      	adds	r2, r0, #0
    8f6e:	701a      	strb	r2, [r3, #0]
    uint8_t flags = cpu_irq_save();
    8f70:	4b71      	ldr	r3, [pc, #452]	; (9138 <swtimerStartAbsoluteTimer+0x1dc>)
    8f72:	4798      	blx	r3
    8f74:	0002      	movs	r2, r0
    8f76:	2313      	movs	r3, #19
    8f78:	18fb      	adds	r3, r7, r3
    8f7a:	701a      	strb	r2, [r3, #0]

    /* Check is done to see if any timer has expired */
    swtimerInternalHandler();
    8f7c:	4b6f      	ldr	r3, [pc, #444]	; (913c <swtimerStartAbsoluteTimer+0x1e0>)
    8f7e:	4798      	blx	r3

    swTimers[timerId].absoluteExpiryTime = pointInTime;
    8f80:	230f      	movs	r3, #15
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	781a      	ldrb	r2, [r3, #0]
    8f86:	4b6e      	ldr	r3, [pc, #440]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    8f88:	0112      	lsls	r2, r2, #4
    8f8a:	68b9      	ldr	r1, [r7, #8]
    8f8c:	50d1      	str	r1, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    8f8e:	230f      	movs	r3, #15
    8f90:	18fb      	adds	r3, r7, r3
    8f92:	781b      	ldrb	r3, [r3, #0]
    8f94:	687a      	ldr	r2, [r7, #4]
    8f96:	496a      	ldr	r1, [pc, #424]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    8f98:	011b      	lsls	r3, r3, #4
    8f9a:	18cb      	adds	r3, r1, r3
    8f9c:	3304      	adds	r3, #4
    8f9e:	601a      	str	r2, [r3, #0]
    swTimers[timerId].paramCb = parameter;
    8fa0:	230f      	movs	r3, #15
    8fa2:	18fb      	adds	r3, r7, r3
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	4a66      	ldr	r2, [pc, #408]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    8fa8:	011b      	lsls	r3, r3, #4
    8faa:	18d3      	adds	r3, r2, r3
    8fac:	3308      	adds	r3, #8
    8fae:	683a      	ldr	r2, [r7, #0]
    8fb0:	601a      	str	r2, [r3, #0]
    swTimers[timerId].loaded = false;
    8fb2:	230f      	movs	r3, #15
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	781b      	ldrb	r3, [r3, #0]
    8fb8:	4a61      	ldr	r2, [pc, #388]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    8fba:	011b      	lsls	r3, r3, #4
    8fbc:	18d3      	adds	r3, r2, r3
    8fbe:	330d      	adds	r3, #13
    8fc0:	2200      	movs	r2, #0
    8fc2:	701a      	strb	r2, [r3, #0]
    runningTimers++;
    8fc4:	4b5f      	ldr	r3, [pc, #380]	; (9144 <swtimerStartAbsoluteTimer+0x1e8>)
    8fc6:	781b      	ldrb	r3, [r3, #0]
    8fc8:	b2db      	uxtb	r3, r3
    8fca:	3301      	adds	r3, #1
    8fcc:	b2da      	uxtb	r2, r3
    8fce:	4b5d      	ldr	r3, [pc, #372]	; (9144 <swtimerStartAbsoluteTimer+0x1e8>)
    8fd0:	701a      	strb	r2, [r3, #0]

    if (SWTIMER_INVALID == runningTimerQueueHead)
    8fd2:	4b5d      	ldr	r3, [pc, #372]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    8fd4:	681b      	ldr	r3, [r3, #0]
    8fd6:	2bff      	cmp	r3, #255	; 0xff
    8fd8:	d10b      	bne.n	8ff2 <swtimerStartAbsoluteTimer+0x96>
    {
        runningTimerQueueHead = timerId;
    8fda:	230f      	movs	r3, #15
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	781a      	ldrb	r2, [r3, #0]
    8fe0:	4b59      	ldr	r3, [pc, #356]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    8fe2:	601a      	str	r2, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    8fe4:	4b58      	ldr	r3, [pc, #352]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    8fe6:	681b      	ldr	r3, [r3, #0]
    8fe8:	b2db      	uxtb	r3, r3
    8fea:	0018      	movs	r0, r3
    8fec:	4b57      	ldr	r3, [pc, #348]	; (914c <swtimerStartAbsoluteTimer+0x1f0>)
    8fee:	4798      	blx	r3
    8ff0:	e098      	b.n	9124 <swtimerStartAbsoluteTimer+0x1c8>
    }
    else
    {
        uint8_t index;
        bool isTimerInserted = false;
    8ff2:	2316      	movs	r3, #22
    8ff4:	18fb      	adds	r3, r7, r3
    8ff6:	2200      	movs	r2, #0
    8ff8:	701a      	strb	r2, [r3, #0]
        uint8_t currIndex = runningTimerQueueHead;
    8ffa:	4b53      	ldr	r3, [pc, #332]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    8ffc:	681a      	ldr	r2, [r3, #0]
    8ffe:	2315      	movs	r3, #21
    9000:	18fb      	adds	r3, r7, r3
    9002:	701a      	strb	r2, [r3, #0]
        uint8_t prevIndex = runningTimerQueueHead;
    9004:	4b50      	ldr	r3, [pc, #320]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    9006:	681a      	ldr	r2, [r3, #0]
    9008:	2314      	movs	r3, #20
    900a:	18fb      	adds	r3, r7, r3
    900c:	701a      	strb	r2, [r3, #0]
        /*
        * Loop through the running timers in the array of swTimers.
        * Find the correct position for timer identified by 'timerId'
        * to be inserted in the runningTimersQueue.
        */
        for (index = 0; index < runningTimers; index++)
    900e:	2317      	movs	r3, #23
    9010:	18fb      	adds	r3, r7, r3
    9012:	2200      	movs	r2, #0
    9014:	701a      	strb	r2, [r3, #0]
    9016:	e061      	b.n	90dc <swtimerStartAbsoluteTimer+0x180>
        {
            if (SWTIMER_INVALID != currIndex)
    9018:	2315      	movs	r3, #21
    901a:	18fb      	adds	r3, r7, r3
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	2bff      	cmp	r3, #255	; 0xff
    9020:	d055      	beq.n	90ce <swtimerStartAbsoluteTimer+0x172>
            {
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    9022:	2315      	movs	r3, #21
    9024:	18fb      	adds	r3, r7, r3
    9026:	781a      	ldrb	r2, [r3, #0]
    9028:	4b45      	ldr	r3, [pc, #276]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    902a:	0112      	lsls	r2, r2, #4
    902c:	58d3      	ldr	r3, [r2, r3]
    902e:	68ba      	ldr	r2, [r7, #8]
    9030:	0011      	movs	r1, r2
    9032:	0018      	movs	r0, r3
    9034:	4b46      	ldr	r3, [pc, #280]	; (9150 <swtimerStartAbsoluteTimer+0x1f4>)
    9036:	4798      	blx	r3
    9038:	1e03      	subs	r3, r0, #0
    903a:	d011      	beq.n	9060 <swtimerStartAbsoluteTimer+0x104>
                {
                    /*
                    * Requested absolute time value is greater than the time
                    * value pointed by the curr_index in the timer array
                    */
                    prevIndex = currIndex;
    903c:	2314      	movs	r3, #20
    903e:	18fb      	adds	r3, r7, r3
    9040:	2215      	movs	r2, #21
    9042:	18ba      	adds	r2, r7, r2
    9044:	7812      	ldrb	r2, [r2, #0]
    9046:	701a      	strb	r2, [r3, #0]
                    currIndex = swTimers[currIndex].nextTimer;
    9048:	2315      	movs	r3, #21
    904a:	18fb      	adds	r3, r7, r3
    904c:	781a      	ldrb	r2, [r3, #0]
    904e:	2315      	movs	r3, #21
    9050:	18fb      	adds	r3, r7, r3
    9052:	493b      	ldr	r1, [pc, #236]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    9054:	0112      	lsls	r2, r2, #4
    9056:	188a      	adds	r2, r1, r2
    9058:	320c      	adds	r2, #12
    905a:	7812      	ldrb	r2, [r2, #0]
    905c:	701a      	strb	r2, [r3, #0]
    905e:	e036      	b.n	90ce <swtimerStartAbsoluteTimer+0x172>
                {
                /*
                * New timer 'timerId' to be inserted is having expiryDuration
                * that is lesser than the timer pointed by 'currentIndex'.
                */
                    swTimers[timerId].nextTimer = currIndex;
    9060:	230f      	movs	r3, #15
    9062:	18fb      	adds	r3, r7, r3
    9064:	781b      	ldrb	r3, [r3, #0]
    9066:	4a36      	ldr	r2, [pc, #216]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    9068:	011b      	lsls	r3, r3, #4
    906a:	18d3      	adds	r3, r2, r3
    906c:	330c      	adds	r3, #12
    906e:	2215      	movs	r2, #21
    9070:	18ba      	adds	r2, r7, r2
    9072:	7812      	ldrb	r2, [r2, #0]
    9074:	701a      	strb	r2, [r3, #0]
                    swTimers[currIndex].loaded = false;
    9076:	2315      	movs	r3, #21
    9078:	18fb      	adds	r3, r7, r3
    907a:	781b      	ldrb	r3, [r3, #0]
    907c:	4a30      	ldr	r2, [pc, #192]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    907e:	011b      	lsls	r3, r3, #4
    9080:	18d3      	adds	r3, r2, r3
    9082:	330d      	adds	r3, #13
    9084:	2200      	movs	r2, #0
    9086:	701a      	strb	r2, [r3, #0]
                    if (runningTimerQueueHead == currIndex)
    9088:	2315      	movs	r3, #21
    908a:	18fb      	adds	r3, r7, r3
    908c:	781a      	ldrb	r2, [r3, #0]
    908e:	4b2e      	ldr	r3, [pc, #184]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    9090:	681b      	ldr	r3, [r3, #0]
    9092:	429a      	cmp	r2, r3
    9094:	d10b      	bne.n	90ae <swtimerStartAbsoluteTimer+0x152>
                    {
                        /* Insertion at the head of the timer queue. */
                        runningTimerQueueHead = timerId;
    9096:	230f      	movs	r3, #15
    9098:	18fb      	adds	r3, r7, r3
    909a:	781a      	ldrb	r2, [r3, #0]
    909c:	4b2a      	ldr	r3, [pc, #168]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    909e:	601a      	str	r2, [r3, #0]

                        loadHwTimer(runningTimerQueueHead);
    90a0:	4b29      	ldr	r3, [pc, #164]	; (9148 <swtimerStartAbsoluteTimer+0x1ec>)
    90a2:	681b      	ldr	r3, [r3, #0]
    90a4:	b2db      	uxtb	r3, r3
    90a6:	0018      	movs	r0, r3
    90a8:	4b28      	ldr	r3, [pc, #160]	; (914c <swtimerStartAbsoluteTimer+0x1f0>)
    90aa:	4798      	blx	r3
    90ac:	e00a      	b.n	90c4 <swtimerStartAbsoluteTimer+0x168>
                    }
                    else
                    {
                    /* Insertion at somewhere in the middle of timer queue. */
                        swTimers[prevIndex].nextTimer = timerId;
    90ae:	2314      	movs	r3, #20
    90b0:	18fb      	adds	r3, r7, r3
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	4a22      	ldr	r2, [pc, #136]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    90b6:	011b      	lsls	r3, r3, #4
    90b8:	18d3      	adds	r3, r2, r3
    90ba:	330c      	adds	r3, #12
    90bc:	220f      	movs	r2, #15
    90be:	18ba      	adds	r2, r7, r2
    90c0:	7812      	ldrb	r2, [r2, #0]
    90c2:	701a      	strb	r2, [r3, #0]
                    }

                    isTimerInserted = true;
    90c4:	2316      	movs	r3, #22
    90c6:	18fb      	adds	r3, r7, r3
    90c8:	2201      	movs	r2, #1
    90ca:	701a      	strb	r2, [r3, #0]
                    break;
    90cc:	e00e      	b.n	90ec <swtimerStartAbsoluteTimer+0x190>
        for (index = 0; index < runningTimers; index++)
    90ce:	2317      	movs	r3, #23
    90d0:	18fb      	adds	r3, r7, r3
    90d2:	781a      	ldrb	r2, [r3, #0]
    90d4:	2317      	movs	r3, #23
    90d6:	18fb      	adds	r3, r7, r3
    90d8:	3201      	adds	r2, #1
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	4b19      	ldr	r3, [pc, #100]	; (9144 <swtimerStartAbsoluteTimer+0x1e8>)
    90de:	781b      	ldrb	r3, [r3, #0]
    90e0:	b2db      	uxtb	r3, r3
    90e2:	2217      	movs	r2, #23
    90e4:	18ba      	adds	r2, r7, r2
    90e6:	7812      	ldrb	r2, [r2, #0]
    90e8:	429a      	cmp	r2, r3
    90ea:	d395      	bcc.n	9018 <swtimerStartAbsoluteTimer+0xbc>
                }
            }
        }

        if (!isTimerInserted)
    90ec:	2316      	movs	r3, #22
    90ee:	18fb      	adds	r3, r7, r3
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	2201      	movs	r2, #1
    90f4:	4053      	eors	r3, r2
    90f6:	b2db      	uxtb	r3, r3
    90f8:	2b00      	cmp	r3, #0
    90fa:	d013      	beq.n	9124 <swtimerStartAbsoluteTimer+0x1c8>
        {
            /* Insertion at the tail of the timer queue. */
            swTimers[prevIndex].nextTimer = timerId;
    90fc:	2314      	movs	r3, #20
    90fe:	18fb      	adds	r3, r7, r3
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	4a0f      	ldr	r2, [pc, #60]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    9104:	011b      	lsls	r3, r3, #4
    9106:	18d3      	adds	r3, r2, r3
    9108:	330c      	adds	r3, #12
    910a:	220f      	movs	r2, #15
    910c:	18ba      	adds	r2, r7, r2
    910e:	7812      	ldrb	r2, [r2, #0]
    9110:	701a      	strb	r2, [r3, #0]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    9112:	230f      	movs	r3, #15
    9114:	18fb      	adds	r3, r7, r3
    9116:	781b      	ldrb	r3, [r3, #0]
    9118:	4a09      	ldr	r2, [pc, #36]	; (9140 <swtimerStartAbsoluteTimer+0x1e4>)
    911a:	011b      	lsls	r3, r3, #4
    911c:	18d3      	adds	r3, r2, r3
    911e:	330c      	adds	r3, #12
    9120:	22ff      	movs	r2, #255	; 0xff
    9122:	701a      	strb	r2, [r3, #0]
        }
    }

    cpu_irq_restore(flags);
    9124:	2313      	movs	r3, #19
    9126:	18fb      	adds	r3, r7, r3
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	0018      	movs	r0, r3
    912c:	4b09      	ldr	r3, [pc, #36]	; (9154 <swtimerStartAbsoluteTimer+0x1f8>)
    912e:	4798      	blx	r3
}
    9130:	46c0      	nop			; (mov r8, r8)
    9132:	46bd      	mov	sp, r7
    9134:	b006      	add	sp, #24
    9136:	bd80      	pop	{r7, pc}
    9138:	00008e71 	.word	0x00008e71
    913c:	000093b1 	.word	0x000093b1
    9140:	200010e8 	.word	0x200010e8
    9144:	20000e6a 	.word	0x20000e6a
    9148:	20000e6c 	.word	0x20000e6c
    914c:	00009159 	.word	0x00009159
    9150:	00009239 	.word	0x00009239
    9154:	00008eb9 	.word	0x00008eb9

00009158 <loadHwTimer>:
/**************************************************************************//**
\brief Sets the timer compare value for the given timer, if it is
       within the overflow limit, else it will not load compare
******************************************************************************/
static void loadHwTimer(uint8_t timerId)
{
    9158:	b590      	push	{r4, r7, lr}
    915a:	b087      	sub	sp, #28
    915c:	af00      	add	r7, sp, #0
    915e:	0002      	movs	r2, r0
    9160:	1dfb      	adds	r3, r7, #7
    9162:	701a      	strb	r2, [r3, #0]
    if (SWTIMER_INVALID != timerId)
    9164:	1dfb      	adds	r3, r7, #7
    9166:	781b      	ldrb	r3, [r3, #0]
    9168:	2bff      	cmp	r3, #255	; 0xff
    916a:	d04e      	beq.n	920a <loadHwTimer+0xb2>
    {
        uint32_t now = gettime();
    916c:	4b2a      	ldr	r3, [pc, #168]	; (9218 <loadHwTimer+0xc0>)
    916e:	4798      	blx	r3
    9170:	0003      	movs	r3, r0
    9172:	000c      	movs	r4, r1
    9174:	617b      	str	r3, [r7, #20]
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    9176:	1dfb      	adds	r3, r7, #7
    9178:	781a      	ldrb	r2, [r3, #0]
    917a:	4b28      	ldr	r3, [pc, #160]	; (921c <loadHwTimer+0xc4>)
    917c:	0112      	lsls	r2, r2, #4
    917e:	58d3      	ldr	r3, [r2, r3]
    9180:	613b      	str	r3, [r7, #16]
        if (swtimerCompareTime(now, expiryTime))
    9182:	693a      	ldr	r2, [r7, #16]
    9184:	697b      	ldr	r3, [r7, #20]
    9186:	0011      	movs	r1, r2
    9188:	0018      	movs	r0, r3
    918a:	4b25      	ldr	r3, [pc, #148]	; (9220 <loadHwTimer+0xc8>)
    918c:	4798      	blx	r3
    918e:	1e03      	subs	r3, r0, #0
    9190:	d034      	beq.n	91fc <loadHwTimer+0xa4>
        {
            if (!swTimers[timerId].loaded)
    9192:	1dfb      	adds	r3, r7, #7
    9194:	781b      	ldrb	r3, [r3, #0]
    9196:	4a21      	ldr	r2, [pc, #132]	; (921c <loadHwTimer+0xc4>)
    9198:	011b      	lsls	r3, r3, #4
    919a:	18d3      	adds	r3, r2, r3
    919c:	330d      	adds	r3, #13
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	2201      	movs	r2, #1
    91a2:	4053      	eors	r3, r2
    91a4:	b2db      	uxtb	r3, r3
    91a6:	2b00      	cmp	r3, #0
    91a8:	d031      	beq.n	920e <loadHwTimer+0xb6>
            {
                uint32_t timeDiff = expiryTime - now;
    91aa:	693a      	ldr	r2, [r7, #16]
    91ac:	697b      	ldr	r3, [r7, #20]
    91ae:	1ad3      	subs	r3, r2, r3
    91b0:	60fb      	str	r3, [r7, #12]

                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    91b2:	68fb      	ldr	r3, [r7, #12]
    91b4:	2bff      	cmp	r3, #255	; 0xff
    91b6:	d806      	bhi.n	91c6 <loadHwTimer+0x6e>
                {
                    isTimerTriggered = true;
    91b8:	4b1a      	ldr	r3, [pc, #104]	; (9224 <loadHwTimer+0xcc>)
    91ba:	2201      	movs	r2, #1
    91bc:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    91be:	2001      	movs	r0, #1
    91c0:	4b19      	ldr	r3, [pc, #100]	; (9228 <loadHwTimer+0xd0>)
    91c2:	4798      	blx	r3
    }
    else
    {
        common_tc_compare_stop();
    }
}
    91c4:	e023      	b.n	920e <loadHwTimer+0xb6>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    91c6:	68fb      	ldr	r3, [r7, #12]
    91c8:	4a18      	ldr	r2, [pc, #96]	; (922c <loadHwTimer+0xd4>)
    91ca:	4293      	cmp	r3, r2
    91cc:	d80d      	bhi.n	91ea <loadHwTimer+0x92>
                    common_tc_delay((uint16_t)timeDiff);
    91ce:	68fb      	ldr	r3, [r7, #12]
    91d0:	b29b      	uxth	r3, r3
    91d2:	0018      	movs	r0, r3
    91d4:	4b16      	ldr	r3, [pc, #88]	; (9230 <loadHwTimer+0xd8>)
    91d6:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    91d8:	1dfb      	adds	r3, r7, #7
    91da:	781b      	ldrb	r3, [r3, #0]
    91dc:	4a0f      	ldr	r2, [pc, #60]	; (921c <loadHwTimer+0xc4>)
    91de:	011b      	lsls	r3, r3, #4
    91e0:	18d3      	adds	r3, r2, r3
    91e2:	330d      	adds	r3, #13
    91e4:	2201      	movs	r2, #1
    91e6:	701a      	strb	r2, [r3, #0]
}
    91e8:	e011      	b.n	920e <loadHwTimer+0xb6>
                    swTimers[timerId].loaded = false;
    91ea:	1dfb      	adds	r3, r7, #7
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	4a0b      	ldr	r2, [pc, #44]	; (921c <loadHwTimer+0xc4>)
    91f0:	011b      	lsls	r3, r3, #4
    91f2:	18d3      	adds	r3, r2, r3
    91f4:	330d      	adds	r3, #13
    91f6:	2200      	movs	r2, #0
    91f8:	701a      	strb	r2, [r3, #0]
}
    91fa:	e008      	b.n	920e <loadHwTimer+0xb6>
            isTimerTriggered = true;
    91fc:	4b09      	ldr	r3, [pc, #36]	; (9224 <loadHwTimer+0xcc>)
    91fe:	2201      	movs	r2, #1
    9200:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9202:	2001      	movs	r0, #1
    9204:	4b08      	ldr	r3, [pc, #32]	; (9228 <loadHwTimer+0xd0>)
    9206:	4798      	blx	r3
}
    9208:	e001      	b.n	920e <loadHwTimer+0xb6>
        common_tc_compare_stop();
    920a:	4b0a      	ldr	r3, [pc, #40]	; (9234 <loadHwTimer+0xdc>)
    920c:	4798      	blx	r3
}
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	46bd      	mov	sp, r7
    9212:	b007      	add	sp, #28
    9214:	bd90      	pop	{r4, r7, pc}
    9216:	46c0      	nop			; (mov r8, r8)
    9218:	00009261 	.word	0x00009261
    921c:	200010e8 	.word	0x200010e8
    9220:	00009239 	.word	0x00009239
    9224:	2000127a 	.word	0x2000127a
    9228:	00009cb5 	.word	0x00009cb5
    922c:	0000ffff 	.word	0x0000ffff
    9230:	0000baf9 	.word	0x0000baf9
    9234:	0000bad1 	.word	0x0000bad1

00009238 <swtimerCompareTime>:
\param[in] t2   Second timer's value in microseconds

\return True if "t1 is lesser than or equal to t2" else False
******************************************************************************/
static inline bool swtimerCompareTime(uint32_t t1, uint32_t t2)
{
    9238:	b580      	push	{r7, lr}
    923a:	b082      	sub	sp, #8
    923c:	af00      	add	r7, sp, #0
    923e:	6078      	str	r0, [r7, #4]
    9240:	6039      	str	r1, [r7, #0]
    return ((t2 - t1) < INT32_MAX);
    9242:	683a      	ldr	r2, [r7, #0]
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	1ad2      	subs	r2, r2, r3
    9248:	4904      	ldr	r1, [pc, #16]	; (925c <swtimerCompareTime+0x24>)
    924a:	2300      	movs	r3, #0
    924c:	4291      	cmp	r1, r2
    924e:	415b      	adcs	r3, r3
    9250:	b2db      	uxtb	r3, r3
}
    9252:	0018      	movs	r0, r3
    9254:	46bd      	mov	sp, r7
    9256:	b002      	add	sp, #8
    9258:	bd80      	pop	{r7, pc}
    925a:	46c0      	nop			; (mov r8, r8)
    925c:	7ffffffe 	.word	0x7ffffffe

00009260 <gettime>:
/**************************************************************************//**
\brief Returns the system time in microseconds
\return System time in us
******************************************************************************/
static inline uint64_t gettime(void)
{
    9260:	b5f0      	push	{r4, r5, r6, r7, lr}
    9262:	b089      	sub	sp, #36	; 0x24
    9264:	af00      	add	r7, sp, #0
    uint64_t time = 0uL;
    9266:	2300      	movs	r3, #0
    9268:	2400      	movs	r4, #0
    926a:	61bb      	str	r3, [r7, #24]
    926c:	61fc      	str	r4, [r7, #28]
    time |= ((uint64_t) sysTimeOvf) << 32;
    926e:	481d      	ldr	r0, [pc, #116]	; (92e4 <gettime+0x84>)
    9270:	6800      	ldr	r0, [r0, #0]
    9272:	6138      	str	r0, [r7, #16]
    9274:	2000      	movs	r0, #0
    9276:	6178      	str	r0, [r7, #20]
    9278:	693b      	ldr	r3, [r7, #16]
    927a:	001a      	movs	r2, r3
    927c:	2000      	movs	r0, #0
    927e:	0001      	movs	r1, r0
    9280:	69b8      	ldr	r0, [r7, #24]
    9282:	4308      	orrs	r0, r1
    9284:	61b8      	str	r0, [r7, #24]
    9286:	69f8      	ldr	r0, [r7, #28]
    9288:	4302      	orrs	r2, r0
    928a:	61fa      	str	r2, [r7, #28]
    time |= ((uint64_t) sysTime) << 16;
    928c:	4a16      	ldr	r2, [pc, #88]	; (92e8 <gettime+0x88>)
    928e:	8812      	ldrh	r2, [r2, #0]
    9290:	b292      	uxth	r2, r2
    9292:	60ba      	str	r2, [r7, #8]
    9294:	2200      	movs	r2, #0
    9296:	60fa      	str	r2, [r7, #12]
    9298:	68b9      	ldr	r1, [r7, #8]
    929a:	68fa      	ldr	r2, [r7, #12]
    929c:	000b      	movs	r3, r1
    929e:	0c1b      	lsrs	r3, r3, #16
    92a0:	607b      	str	r3, [r7, #4]
    92a2:	000b      	movs	r3, r1
    92a4:	041b      	lsls	r3, r3, #16
    92a6:	603b      	str	r3, [r7, #0]
    92a8:	69ba      	ldr	r2, [r7, #24]
    92aa:	6838      	ldr	r0, [r7, #0]
    92ac:	6879      	ldr	r1, [r7, #4]
    92ae:	0003      	movs	r3, r0
    92b0:	431a      	orrs	r2, r3
    92b2:	61ba      	str	r2, [r7, #24]
    92b4:	69fa      	ldr	r2, [r7, #28]
    92b6:	0013      	movs	r3, r2
    92b8:	000a      	movs	r2, r1
    92ba:	4313      	orrs	r3, r2
    92bc:	61fb      	str	r3, [r7, #28]
    time |= (uint64_t) common_tc_read_count();
    92be:	4b0b      	ldr	r3, [pc, #44]	; (92ec <gettime+0x8c>)
    92c0:	4798      	blx	r3
    92c2:	0003      	movs	r3, r0
    92c4:	001d      	movs	r5, r3
    92c6:	2300      	movs	r3, #0
    92c8:	001e      	movs	r6, r3
    92ca:	69bb      	ldr	r3, [r7, #24]
    92cc:	432b      	orrs	r3, r5
    92ce:	61bb      	str	r3, [r7, #24]
    92d0:	69fb      	ldr	r3, [r7, #28]
    92d2:	4333      	orrs	r3, r6
    92d4:	61fb      	str	r3, [r7, #28]
    return time;
    92d6:	69bb      	ldr	r3, [r7, #24]
    92d8:	69fc      	ldr	r4, [r7, #28]
}
    92da:	0018      	movs	r0, r3
    92dc:	0021      	movs	r1, r4
    92de:	46bd      	mov	sp, r7
    92e0:	b009      	add	sp, #36	; 0x24
    92e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e4:	2000127c 	.word	0x2000127c
    92e8:	20001278 	.word	0x20001278
    92ec:	0000ba85 	.word	0x0000ba85

000092f0 <swtimerProcessOverflow>:

/**************************************************************************//**
\brief Process the overflow interrupt of TC0
******************************************************************************/
static void swtimerProcessOverflow(void)
{
    92f0:	b580      	push	{r7, lr}
    92f2:	b084      	sub	sp, #16
    92f4:	af00      	add	r7, sp, #0
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();
    92f6:	4b26      	ldr	r3, [pc, #152]	; (9390 <swtimerProcessOverflow+0xa0>)
    92f8:	4798      	blx	r3
    92fa:	0002      	movs	r2, r0
    92fc:	230f      	movs	r3, #15
    92fe:	18fb      	adds	r3, r7, r3
    9300:	701a      	strb	r2, [r3, #0]

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    9302:	4b24      	ldr	r3, [pc, #144]	; (9394 <swtimerProcessOverflow+0xa4>)
    9304:	681b      	ldr	r3, [r3, #0]
    9306:	2bff      	cmp	r3, #255	; 0xff
    9308:	d037      	beq.n	937a <swtimerProcessOverflow+0x8a>
    930a:	4b22      	ldr	r3, [pc, #136]	; (9394 <swtimerProcessOverflow+0xa4>)
    930c:	681b      	ldr	r3, [r3, #0]
    930e:	4a22      	ldr	r2, [pc, #136]	; (9398 <swtimerProcessOverflow+0xa8>)
    9310:	011b      	lsls	r3, r3, #4
    9312:	18d3      	adds	r3, r2, r3
    9314:	330d      	adds	r3, #13
    9316:	781b      	ldrb	r3, [r3, #0]
    9318:	2201      	movs	r2, #1
    931a:	4053      	eors	r3, r2
    931c:	b2db      	uxtb	r3, r3
    931e:	2b00      	cmp	r3, #0
    9320:	d02b      	beq.n	937a <swtimerProcessOverflow+0x8a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    9322:	4b1c      	ldr	r3, [pc, #112]	; (9394 <swtimerProcessOverflow+0xa4>)
    9324:	681a      	ldr	r2, [r3, #0]
    9326:	4b1c      	ldr	r3, [pc, #112]	; (9398 <swtimerProcessOverflow+0xa8>)
    9328:	0112      	lsls	r2, r2, #4
    932a:	58d3      	ldr	r3, [r2, r3]
    932c:	60bb      	str	r3, [r7, #8]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);
    932e:	68bb      	ldr	r3, [r7, #8]
    9330:	0c1a      	lsrs	r2, r3, #16
    9332:	1dbb      	adds	r3, r7, #6
    9334:	801a      	strh	r2, [r3, #0]

        if (tmoHigh16 == sysTime)
    9336:	4b19      	ldr	r3, [pc, #100]	; (939c <swtimerProcessOverflow+0xac>)
    9338:	881b      	ldrh	r3, [r3, #0]
    933a:	b29b      	uxth	r3, r3
    933c:	1dba      	adds	r2, r7, #6
    933e:	8812      	ldrh	r2, [r2, #0]
    9340:	429a      	cmp	r2, r3
    9342:	d11a      	bne.n	937a <swtimerProcessOverflow+0x8a>
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    9344:	1d3b      	adds	r3, r7, #4
    9346:	68ba      	ldr	r2, [r7, #8]
    9348:	801a      	strh	r2, [r3, #0]
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    934a:	1d3b      	adds	r3, r7, #4
    934c:	881b      	ldrh	r3, [r3, #0]
    934e:	2bff      	cmp	r3, #255	; 0xff
    9350:	d90d      	bls.n	936e <swtimerProcessOverflow+0x7e>
            {
                common_tc_delay(tmoLow16);
    9352:	1d3b      	adds	r3, r7, #4
    9354:	881b      	ldrh	r3, [r3, #0]
    9356:	0018      	movs	r0, r3
    9358:	4b11      	ldr	r3, [pc, #68]	; (93a0 <swtimerProcessOverflow+0xb0>)
    935a:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    935c:	4b0d      	ldr	r3, [pc, #52]	; (9394 <swtimerProcessOverflow+0xa4>)
    935e:	681b      	ldr	r3, [r3, #0]
    9360:	4a0d      	ldr	r2, [pc, #52]	; (9398 <swtimerProcessOverflow+0xa8>)
    9362:	011b      	lsls	r3, r3, #4
    9364:	18d3      	adds	r3, r2, r3
    9366:	330d      	adds	r3, #13
    9368:	2201      	movs	r2, #1
    936a:	701a      	strb	r2, [r3, #0]
    936c:	e005      	b.n	937a <swtimerProcessOverflow+0x8a>
            }
            else
            {
                isTimerTriggered = true;
    936e:	4b0d      	ldr	r3, [pc, #52]	; (93a4 <swtimerProcessOverflow+0xb4>)
    9370:	2201      	movs	r2, #1
    9372:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    9374:	2001      	movs	r0, #1
    9376:	4b0c      	ldr	r3, [pc, #48]	; (93a8 <swtimerProcessOverflow+0xb8>)
    9378:	4798      	blx	r3
            }
        }
    }

    cpu_irq_restore(flags);
    937a:	230f      	movs	r3, #15
    937c:	18fb      	adds	r3, r7, r3
    937e:	781b      	ldrb	r3, [r3, #0]
    9380:	0018      	movs	r0, r3
    9382:	4b0a      	ldr	r3, [pc, #40]	; (93ac <swtimerProcessOverflow+0xbc>)
    9384:	4798      	blx	r3
}
    9386:	46c0      	nop			; (mov r8, r8)
    9388:	46bd      	mov	sp, r7
    938a:	b004      	add	sp, #16
    938c:	bd80      	pop	{r7, pc}
    938e:	46c0      	nop			; (mov r8, r8)
    9390:	00008e71 	.word	0x00008e71
    9394:	20000e6c 	.word	0x20000e6c
    9398:	200010e8 	.word	0x200010e8
    939c:	20001278 	.word	0x20001278
    93a0:	0000baf9 	.word	0x0000baf9
    93a4:	2000127a 	.word	0x2000127a
    93a8:	00009cb5 	.word	0x00009cb5
    93ac:	00008eb9 	.word	0x00008eb9

000093b0 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    93b0:	b580      	push	{r7, lr}
    93b2:	af00      	add	r7, sp, #0
    if (isTimerTriggered)
    93b4:	4b28      	ldr	r3, [pc, #160]	; (9458 <swtimerInternalHandler+0xa8>)
    93b6:	781b      	ldrb	r3, [r3, #0]
    93b8:	b2db      	uxtb	r3, r3
    93ba:	2b00      	cmp	r3, #0
    93bc:	d049      	beq.n	9452 <swtimerInternalHandler+0xa2>
    {
        isTimerTriggered = false;
    93be:	4b26      	ldr	r3, [pc, #152]	; (9458 <swtimerInternalHandler+0xa8>)
    93c0:	2200      	movs	r2, #0
    93c2:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    93c4:	4b25      	ldr	r3, [pc, #148]	; (945c <swtimerInternalHandler+0xac>)
    93c6:	781b      	ldrb	r3, [r3, #0]
    93c8:	b2db      	uxtb	r3, r3
    93ca:	2b00      	cmp	r3, #0
    93cc:	d041      	beq.n	9452 <swtimerInternalHandler+0xa2>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    93ce:	4b24      	ldr	r3, [pc, #144]	; (9460 <swtimerInternalHandler+0xb0>)
    93d0:	681b      	ldr	r3, [r3, #0]
    93d2:	2bff      	cmp	r3, #255	; 0xff
    93d4:	d10c      	bne.n	93f0 <swtimerInternalHandler+0x40>
                (expiredTimerQueueTail == SWTIMER_INVALID))
    93d6:	4b23      	ldr	r3, [pc, #140]	; (9464 <swtimerInternalHandler+0xb4>)
    93d8:	681b      	ldr	r3, [r3, #0]
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    93da:	2bff      	cmp	r3, #255	; 0xff
    93dc:	d108      	bne.n	93f0 <swtimerInternalHandler+0x40>
            { /* in case of this is the only timer that has expired so far */
                expiredTimerQueueHead = runningTimerQueueHead;
    93de:	4b22      	ldr	r3, [pc, #136]	; (9468 <swtimerInternalHandler+0xb8>)
    93e0:	681a      	ldr	r2, [r3, #0]
    93e2:	4b1f      	ldr	r3, [pc, #124]	; (9460 <swtimerInternalHandler+0xb0>)
    93e4:	601a      	str	r2, [r3, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    93e6:	4b20      	ldr	r3, [pc, #128]	; (9468 <swtimerInternalHandler+0xb8>)
    93e8:	681a      	ldr	r2, [r3, #0]
    93ea:	4b1e      	ldr	r3, [pc, #120]	; (9464 <swtimerInternalHandler+0xb4>)
    93ec:	601a      	str	r2, [r3, #0]
    93ee:	e00e      	b.n	940e <swtimerInternalHandler+0x5e>
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    93f0:	4b1c      	ldr	r3, [pc, #112]	; (9464 <swtimerInternalHandler+0xb4>)
    93f2:	6819      	ldr	r1, [r3, #0]
    93f4:	4b1c      	ldr	r3, [pc, #112]	; (9468 <swtimerInternalHandler+0xb8>)
    93f6:	681b      	ldr	r3, [r3, #0]
    93f8:	b2d8      	uxtb	r0, r3
    93fa:	4a1c      	ldr	r2, [pc, #112]	; (946c <swtimerInternalHandler+0xbc>)
    93fc:	010b      	lsls	r3, r1, #4
    93fe:	18d3      	adds	r3, r2, r3
    9400:	330c      	adds	r3, #12
    9402:	1c02      	adds	r2, r0, #0
    9404:	701a      	strb	r2, [r3, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    9406:	4b18      	ldr	r3, [pc, #96]	; (9468 <swtimerInternalHandler+0xb8>)
    9408:	681a      	ldr	r2, [r3, #0]
    940a:	4b16      	ldr	r3, [pc, #88]	; (9464 <swtimerInternalHandler+0xb4>)
    940c:	601a      	str	r2, [r3, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    940e:	4b16      	ldr	r3, [pc, #88]	; (9468 <swtimerInternalHandler+0xb8>)
    9410:	681b      	ldr	r3, [r3, #0]
    9412:	4a16      	ldr	r2, [pc, #88]	; (946c <swtimerInternalHandler+0xbc>)
    9414:	011b      	lsls	r3, r3, #4
    9416:	18d3      	adds	r3, r2, r3
    9418:	330c      	adds	r3, #12
    941a:	781b      	ldrb	r3, [r3, #0]
    941c:	001a      	movs	r2, r3
    941e:	4b12      	ldr	r3, [pc, #72]	; (9468 <swtimerInternalHandler+0xb8>)
    9420:	601a      	str	r2, [r3, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    9422:	4b10      	ldr	r3, [pc, #64]	; (9464 <swtimerInternalHandler+0xb4>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	4a11      	ldr	r2, [pc, #68]	; (946c <swtimerInternalHandler+0xbc>)
    9428:	011b      	lsls	r3, r3, #4
    942a:	18d3      	adds	r3, r2, r3
    942c:	330c      	adds	r3, #12
    942e:	22ff      	movs	r2, #255	; 0xff
    9430:	701a      	strb	r2, [r3, #0]

            if ((--runningTimers) > 0)
    9432:	4b0a      	ldr	r3, [pc, #40]	; (945c <swtimerInternalHandler+0xac>)
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	b2db      	uxtb	r3, r3
    9438:	3b01      	subs	r3, #1
    943a:	b2db      	uxtb	r3, r3
    943c:	4a07      	ldr	r2, [pc, #28]	; (945c <swtimerInternalHandler+0xac>)
    943e:	1c19      	adds	r1, r3, #0
    9440:	7011      	strb	r1, [r2, #0]
    9442:	2b00      	cmp	r3, #0
    9444:	d005      	beq.n	9452 <swtimerInternalHandler+0xa2>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
    9446:	4b08      	ldr	r3, [pc, #32]	; (9468 <swtimerInternalHandler+0xb8>)
    9448:	681b      	ldr	r3, [r3, #0]
    944a:	b2db      	uxtb	r3, r3
    944c:	0018      	movs	r0, r3
    944e:	4b08      	ldr	r3, [pc, #32]	; (9470 <swtimerInternalHandler+0xc0>)
    9450:	4798      	blx	r3
            }
        }
    }
}
    9452:	46c0      	nop			; (mov r8, r8)
    9454:	46bd      	mov	sp, r7
    9456:	bd80      	pop	{r7, pc}
    9458:	2000127a 	.word	0x2000127a
    945c:	20000e6a 	.word	0x20000e6a
    9460:	20000e70 	.word	0x20000e70
    9464:	20000e74 	.word	0x20000e74
    9468:	20000e6c 	.word	0x20000e6c
    946c:	200010e8 	.word	0x200010e8
    9470:	00009159 	.word	0x00009159

00009474 <SwTimerReset>:

/**************************************************************************//**
\brief Resets the Software Timer module
******************************************************************************/
void SwTimerReset(void)
{
    9474:	b580      	push	{r7, lr}
    9476:	b082      	sub	sp, #8
    9478:	af00      	add	r7, sp, #0
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    947a:	4b19      	ldr	r3, [pc, #100]	; (94e0 <SwTimerReset+0x6c>)
    947c:	2200      	movs	r2, #0
    947e:	701a      	strb	r2, [r3, #0]
    isTimerTriggered = false;
    9480:	4b18      	ldr	r3, [pc, #96]	; (94e4 <SwTimerReset+0x70>)
    9482:	2200      	movs	r2, #0
    9484:	701a      	strb	r2, [r3, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    9486:	4b18      	ldr	r3, [pc, #96]	; (94e8 <SwTimerReset+0x74>)
    9488:	22ff      	movs	r2, #255	; 0xff
    948a:	601a      	str	r2, [r3, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    948c:	4b17      	ldr	r3, [pc, #92]	; (94ec <SwTimerReset+0x78>)
    948e:	22ff      	movs	r2, #255	; 0xff
    9490:	601a      	str	r2, [r3, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    9492:	4b17      	ldr	r3, [pc, #92]	; (94f0 <SwTimerReset+0x7c>)
    9494:	22ff      	movs	r2, #255	; 0xff
    9496:	601a      	str	r2, [r3, #0]

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    9498:	1dfb      	adds	r3, r7, #7
    949a:	2200      	movs	r2, #0
    949c:	701a      	strb	r2, [r3, #0]
    949e:	e014      	b.n	94ca <SwTimerReset+0x56>
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    94a0:	1dfb      	adds	r3, r7, #7
    94a2:	781b      	ldrb	r3, [r3, #0]
    94a4:	4a13      	ldr	r2, [pc, #76]	; (94f4 <SwTimerReset+0x80>)
    94a6:	011b      	lsls	r3, r3, #4
    94a8:	18d3      	adds	r3, r2, r3
    94aa:	330c      	adds	r3, #12
    94ac:	22ff      	movs	r2, #255	; 0xff
    94ae:	701a      	strb	r2, [r3, #0]
        swTimers[index].timerCb = NULL;
    94b0:	1dfb      	adds	r3, r7, #7
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	4a0f      	ldr	r2, [pc, #60]	; (94f4 <SwTimerReset+0x80>)
    94b6:	011b      	lsls	r3, r3, #4
    94b8:	18d3      	adds	r3, r2, r3
    94ba:	3304      	adds	r3, #4
    94bc:	2200      	movs	r2, #0
    94be:	601a      	str	r2, [r3, #0]
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    94c0:	1dfb      	adds	r3, r7, #7
    94c2:	781a      	ldrb	r2, [r3, #0]
    94c4:	1dfb      	adds	r3, r7, #7
    94c6:	3201      	adds	r2, #1
    94c8:	701a      	strb	r2, [r3, #0]
    94ca:	1dfb      	adds	r3, r7, #7
    94cc:	781b      	ldrb	r3, [r3, #0]
    94ce:	2b18      	cmp	r3, #24
    94d0:	d9e6      	bls.n	94a0 <SwTimerReset+0x2c>
    }

    allocatedTimerId = 0u;
    94d2:	4b09      	ldr	r3, [pc, #36]	; (94f8 <SwTimerReset+0x84>)
    94d4:	2200      	movs	r2, #0
    94d6:	701a      	strb	r2, [r3, #0]
}
    94d8:	46c0      	nop			; (mov r8, r8)
    94da:	46bd      	mov	sp, r7
    94dc:	b002      	add	sp, #8
    94de:	bd80      	pop	{r7, pc}
    94e0:	20000e6a 	.word	0x20000e6a
    94e4:	2000127a 	.word	0x2000127a
    94e8:	20000e6c 	.word	0x20000e6c
    94ec:	20000e70 	.word	0x20000e70
    94f0:	20000e74 	.word	0x20000e74
    94f4:	200010e8 	.word	0x200010e8
    94f8:	20000e78 	.word	0x20000e78

000094fc <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    94fc:	b580      	push	{r7, lr}
    94fe:	af00      	add	r7, sp, #0
    SwTimerReset();
    9500:	4b0a      	ldr	r3, [pc, #40]	; (952c <SystemTimerInit+0x30>)
    9502:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    9504:	4b0a      	ldr	r3, [pc, #40]	; (9530 <SystemTimerInit+0x34>)
    9506:	2200      	movs	r2, #0
    9508:	601a      	str	r2, [r3, #0]
    sysTime = 0x0000;
    950a:	4b0a      	ldr	r3, [pc, #40]	; (9534 <SystemTimerInit+0x38>)
    950c:	2200      	movs	r2, #0
    950e:	801a      	strh	r2, [r3, #0]

    common_tc_init();
    9510:	4b09      	ldr	r3, [pc, #36]	; (9538 <SystemTimerInit+0x3c>)
    9512:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9514:	4b09      	ldr	r3, [pc, #36]	; (953c <SystemTimerInit+0x40>)
    9516:	0018      	movs	r0, r3
    9518:	4b09      	ldr	r3, [pc, #36]	; (9540 <SystemTimerInit+0x44>)
    951a:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    951c:	4b09      	ldr	r3, [pc, #36]	; (9544 <SystemTimerInit+0x48>)
    951e:	0018      	movs	r0, r3
    9520:	4b09      	ldr	r3, [pc, #36]	; (9548 <SystemTimerInit+0x4c>)
    9522:	4798      	blx	r3
}
    9524:	46c0      	nop			; (mov r8, r8)
    9526:	46bd      	mov	sp, r7
    9528:	bd80      	pop	{r7, pc}
    952a:	46c0      	nop			; (mov r8, r8)
    952c:	00009475 	.word	0x00009475
    9530:	2000127c 	.word	0x2000127c
    9534:	20001278 	.word	0x20001278
    9538:	0000bb65 	.word	0x0000bb65
    953c:	00008ee9 	.word	0x00008ee9
    9540:	0000bbe9 	.word	0x0000bbe9
    9544:	00008f31 	.word	0x00008f31
    9548:	0000bbf5 	.word	0x0000bbf5

0000954c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    954c:	b5b0      	push	{r4, r5, r7, lr}
    954e:	af00      	add	r7, sp, #0
    return gettime();
    9550:	4b03      	ldr	r3, [pc, #12]	; (9560 <SwTimerGetTime+0x14>)
    9552:	4798      	blx	r3
    9554:	0003      	movs	r3, r0
    9556:	000c      	movs	r4, r1
}
    9558:	0018      	movs	r0, r3
    955a:	0021      	movs	r1, r4
    955c:	46bd      	mov	sp, r7
    955e:	bdb0      	pop	{r4, r5, r7, pc}
    9560:	00009261 	.word	0x00009261

00009564 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    9564:	b580      	push	{r7, lr}
    9566:	b084      	sub	sp, #16
    9568:	af00      	add	r7, sp, #0
    956a:	6078      	str	r0, [r7, #4]
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    956c:	230f      	movs	r3, #15
    956e:	18fb      	adds	r3, r7, r3
    9570:	2208      	movs	r2, #8
    9572:	701a      	strb	r2, [r3, #0]

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    9574:	4b0e      	ldr	r3, [pc, #56]	; (95b0 <SwTimerCreate+0x4c>)
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	2b18      	cmp	r3, #24
    957a:	d80e      	bhi.n	959a <SwTimerCreate+0x36>
    {
        ATOMIC_SECTION_ENTER
    957c:	4b0d      	ldr	r3, [pc, #52]	; (95b4 <SwTimerCreate+0x50>)
    957e:	4798      	blx	r3
        *timerId = allocatedTimerId;
    9580:	4b0b      	ldr	r3, [pc, #44]	; (95b0 <SwTimerCreate+0x4c>)
    9582:	781a      	ldrb	r2, [r3, #0]
    9584:	687b      	ldr	r3, [r7, #4]
    9586:	701a      	strb	r2, [r3, #0]
        allocatedTimerId++;
    9588:	4b09      	ldr	r3, [pc, #36]	; (95b0 <SwTimerCreate+0x4c>)
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	3301      	adds	r3, #1
    958e:	b2da      	uxtb	r2, r3
    9590:	4b07      	ldr	r3, [pc, #28]	; (95b0 <SwTimerCreate+0x4c>)
    9592:	701a      	strb	r2, [r3, #0]
        ATOMIC_SECTION_EXIT
    9594:	4b08      	ldr	r3, [pc, #32]	; (95b8 <SwTimerCreate+0x54>)
    9596:	4798      	blx	r3
    9598:	e003      	b.n	95a2 <SwTimerCreate+0x3e>
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    959a:	230f      	movs	r3, #15
    959c:	18fb      	adds	r3, r7, r3
    959e:	2214      	movs	r2, #20
    95a0:	701a      	strb	r2, [r3, #0]
    }

    return retVal;
    95a2:	230f      	movs	r3, #15
    95a4:	18fb      	adds	r3, r7, r3
    95a6:	781b      	ldrb	r3, [r3, #0]
}
    95a8:	0018      	movs	r0, r3
    95aa:	46bd      	mov	sp, r7
    95ac:	b004      	add	sp, #16
    95ae:	bd80      	pop	{r7, pc}
    95b0:	20000e78 	.word	0x20000e78
    95b4:	00007dc9 	.word	0x00007dc9
    95b8:	00007ddd 	.word	0x00007ddd

000095bc <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    95bc:	b590      	push	{r4, r7, lr}
    95be:	b089      	sub	sp, #36	; 0x24
    95c0:	af00      	add	r7, sp, #0
    95c2:	60b9      	str	r1, [r7, #8]
    95c4:	0011      	movs	r1, r2
    95c6:	607b      	str	r3, [r7, #4]
    95c8:	230f      	movs	r3, #15
    95ca:	18fb      	adds	r3, r7, r3
    95cc:	1c02      	adds	r2, r0, #0
    95ce:	701a      	strb	r2, [r3, #0]
    95d0:	230e      	movs	r3, #14
    95d2:	18fb      	adds	r3, r7, r3
    95d4:	1c0a      	adds	r2, r1, #0
    95d6:	701a      	strb	r2, [r3, #0]
    uint32_t now = 0;
    95d8:	2300      	movs	r3, #0
    95da:	61bb      	str	r3, [r7, #24]
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    95dc:	230f      	movs	r3, #15
    95de:	18fb      	adds	r3, r7, r3
    95e0:	781b      	ldrb	r3, [r3, #0]
    95e2:	2b18      	cmp	r3, #24
    95e4:	d802      	bhi.n	95ec <SwTimerStart+0x30>
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	2b00      	cmp	r3, #0
    95ea:	d101      	bne.n	95f0 <SwTimerStart+0x34>
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    95ec:	230a      	movs	r3, #10
    95ee:	e040      	b.n	9672 <SwTimerStart+0xb6>
    }

    if (NULL != swTimers[timerId].timerCb)
    95f0:	230f      	movs	r3, #15
    95f2:	18fb      	adds	r3, r7, r3
    95f4:	781b      	ldrb	r3, [r3, #0]
    95f6:	4a21      	ldr	r2, [pc, #132]	; (967c <SwTimerStart+0xc0>)
    95f8:	011b      	lsls	r3, r3, #4
    95fa:	18d3      	adds	r3, r2, r3
    95fc:	3304      	adds	r3, #4
    95fe:	681b      	ldr	r3, [r3, #0]
    9600:	2b00      	cmp	r3, #0
    9602:	d001      	beq.n	9608 <SwTimerStart+0x4c>
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    9604:	2315      	movs	r3, #21
    9606:	e034      	b.n	9672 <SwTimerStart+0xb6>
    }

    now = (uint32_t) gettime();
    9608:	4b1d      	ldr	r3, [pc, #116]	; (9680 <SwTimerStart+0xc4>)
    960a:	4798      	blx	r3
    960c:	0003      	movs	r3, r0
    960e:	000c      	movs	r4, r1
    9610:	61bb      	str	r3, [r7, #24]

    switch (timeoutType)
    9612:	230e      	movs	r3, #14
    9614:	18fb      	adds	r3, r7, r3
    9616:	781b      	ldrb	r3, [r3, #0]
    9618:	2b00      	cmp	r3, #0
    961a:	d002      	beq.n	9622 <SwTimerStart+0x66>
    961c:	2b01      	cmp	r3, #1
    961e:	d00d      	beq.n	963c <SwTimerStart+0x80>
    9620:	e01b      	b.n	965a <SwTimerStart+0x9e>
    {
        case SW_TIMEOUT_RELATIVE:
        {
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    9622:	68bb      	ldr	r3, [r7, #8]
    9624:	2b00      	cmp	r3, #0
    9626:	db02      	blt.n	962e <SwTimerStart+0x72>
    9628:	68bb      	ldr	r3, [r7, #8]
    962a:	2bfe      	cmp	r3, #254	; 0xfe
    962c:	d801      	bhi.n	9632 <SwTimerStart+0x76>
            (timerCount < SWTIMER_MIN_TIMEOUT))
            {
                SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
                return LORAWAN_INVALID_PARAMETER;
    962e:	230a      	movs	r3, #10
    9630:	e01f      	b.n	9672 <SwTimerStart+0xb6>
            }

            pointInTime = ADD_TIME(timerCount, now);
    9632:	68ba      	ldr	r2, [r7, #8]
    9634:	69bb      	ldr	r3, [r7, #24]
    9636:	18d3      	adds	r3, r2, r3
    9638:	61fb      	str	r3, [r7, #28]
        }
        break;
    963a:	e010      	b.n	965e <SwTimerStart+0xa2>

        case SW_TIMEOUT_ABSOLUTE:
        {
            uint32_t timeout;
            timeout = SUB_TIME(timerCount, now);
    963c:	68ba      	ldr	r2, [r7, #8]
    963e:	69bb      	ldr	r3, [r7, #24]
    9640:	1ad3      	subs	r3, r2, r3
    9642:	617b      	str	r3, [r7, #20]

            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    9644:	697b      	ldr	r3, [r7, #20]
    9646:	2b00      	cmp	r3, #0
    9648:	db02      	blt.n	9650 <SwTimerStart+0x94>
    964a:	697b      	ldr	r3, [r7, #20]
    964c:	2bfe      	cmp	r3, #254	; 0xfe
    964e:	d801      	bhi.n	9654 <SwTimerStart+0x98>
            (timeout < SWTIMER_MIN_TIMEOUT))
            {
                SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
                return LORAWAN_INVALID_PARAMETER;
    9650:	230a      	movs	r3, #10
    9652:	e00e      	b.n	9672 <SwTimerStart+0xb6>
            }

            pointInTime = timerCount;
    9654:	68bb      	ldr	r3, [r7, #8]
    9656:	61fb      	str	r3, [r7, #28]
        }
        break;
    9658:	e001      	b.n	965e <SwTimerStart+0xa2>

        default:
        {
            SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
            return LORAWAN_INVALID_PARAMETER;
    965a:	230a      	movs	r3, #10
    965c:	e009      	b.n	9672 <SwTimerStart+0xb6>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    965e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    9660:	687a      	ldr	r2, [r7, #4]
    9662:	69f9      	ldr	r1, [r7, #28]
    9664:	230f      	movs	r3, #15
    9666:	18fb      	adds	r3, r7, r3
    9668:	7818      	ldrb	r0, [r3, #0]
    966a:	0023      	movs	r3, r4
    966c:	4c05      	ldr	r4, [pc, #20]	; (9684 <SwTimerStart+0xc8>)
    966e:	47a0      	blx	r4
    return LORAWAN_SUCCESS;
    9670:	2308      	movs	r3, #8
}
    9672:	0018      	movs	r0, r3
    9674:	46bd      	mov	sp, r7
    9676:	b009      	add	sp, #36	; 0x24
    9678:	bd90      	pop	{r4, r7, pc}
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	200010e8 	.word	0x200010e8
    9680:	00009261 	.word	0x00009261
    9684:	00008f5d 	.word	0x00008f5d

00009688 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    9688:	b590      	push	{r4, r7, lr}
    968a:	b087      	sub	sp, #28
    968c:	af00      	add	r7, sp, #0
    968e:	0002      	movs	r2, r0
    9690:	1dfb      	adds	r3, r7, #7
    9692:	701a      	strb	r2, [r3, #0]
    uint32_t remainingTime = 0u;
    9694:	2300      	movs	r3, #0
    9696:	617b      	str	r3, [r7, #20]
    uint32_t timerExpiryTime = 0u;
    9698:	2300      	movs	r3, #0
    969a:	613b      	str	r3, [r7, #16]
    uint32_t currentSysTime = 0u;
    969c:	2300      	movs	r3, #0
    969e:	60fb      	str	r3, [r7, #12]
    if ( NULL != swTimers[timerId].timerCb )
    96a0:	1dfb      	adds	r3, r7, #7
    96a2:	781b      	ldrb	r3, [r3, #0]
    96a4:	4a17      	ldr	r2, [pc, #92]	; (9704 <SwTimerReadValue+0x7c>)
    96a6:	011b      	lsls	r3, r3, #4
    96a8:	18d3      	adds	r3, r2, r3
    96aa:	3304      	adds	r3, #4
    96ac:	681b      	ldr	r3, [r3, #0]
    96ae:	2b00      	cmp	r3, #0
    96b0:	d022      	beq.n	96f8 <SwTimerReadValue+0x70>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    96b2:	1dfb      	adds	r3, r7, #7
    96b4:	781a      	ldrb	r2, [r3, #0]
    96b6:	4b13      	ldr	r3, [pc, #76]	; (9704 <SwTimerReadValue+0x7c>)
    96b8:	0112      	lsls	r2, r2, #4
    96ba:	58d3      	ldr	r3, [r2, r3]
    96bc:	613b      	str	r3, [r7, #16]
	    currentSysTime = (uint32_t) gettime();
    96be:	4b12      	ldr	r3, [pc, #72]	; (9708 <SwTimerReadValue+0x80>)
    96c0:	4798      	blx	r3
    96c2:	0003      	movs	r3, r0
    96c4:	000c      	movs	r4, r1
    96c6:	60fb      	str	r3, [r7, #12]
	    if ( currentSysTime <= timerExpiryTime )
    96c8:	68fa      	ldr	r2, [r7, #12]
    96ca:	693b      	ldr	r3, [r7, #16]
    96cc:	429a      	cmp	r2, r3
    96ce:	d804      	bhi.n	96da <SwTimerReadValue+0x52>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    96d0:	693a      	ldr	r2, [r7, #16]
    96d2:	68fb      	ldr	r3, [r7, #12]
    96d4:	1ad3      	subs	r3, r2, r3
    96d6:	617b      	str	r3, [r7, #20]
    96d8:	e008      	b.n	96ec <SwTimerReadValue+0x64>
	    }
	    else if ( currentSysTime > timerExpiryTime )
    96da:	68fa      	ldr	r2, [r7, #12]
    96dc:	693b      	ldr	r3, [r7, #16]
    96de:	429a      	cmp	r2, r3
    96e0:	d904      	bls.n	96ec <SwTimerReadValue+0x64>
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    96e2:	693a      	ldr	r2, [r7, #16]
    96e4:	68fb      	ldr	r3, [r7, #12]
    96e6:	1ad3      	subs	r3, r2, r3
    96e8:	3b01      	subs	r3, #1
    96ea:	617b      	str	r3, [r7, #20]
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    96ec:	697b      	ldr	r3, [r7, #20]
    96ee:	4a07      	ldr	r2, [pc, #28]	; (970c <SwTimerReadValue+0x84>)
    96f0:	4293      	cmp	r3, r2
    96f2:	d901      	bls.n	96f8 <SwTimerReadValue+0x70>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    96f4:	2300      	movs	r3, #0
    96f6:	617b      	str	r3, [r7, #20]
        }
    }
    return remainingTime;
    96f8:	697b      	ldr	r3, [r7, #20]
}
    96fa:	0018      	movs	r0, r3
    96fc:	46bd      	mov	sp, r7
    96fe:	b007      	add	sp, #28
    9700:	bd90      	pop	{r4, r7, pc}
    9702:	46c0      	nop			; (mov r8, r8)
    9704:	200010e8 	.word	0x200010e8
    9708:	00009261 	.word	0x00009261
    970c:	7ffffffe 	.word	0x7ffffffe

00009710 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    9710:	b580      	push	{r7, lr}
    9712:	b082      	sub	sp, #8
    9714:	af00      	add	r7, sp, #0
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    9716:	2301      	movs	r3, #1
    9718:	425b      	negs	r3, r3
    971a:	607b      	str	r3, [r7, #4]

    if (SWTIMER_INVALID != runningTimerQueueHead)
    971c:	4b08      	ldr	r3, [pc, #32]	; (9740 <SwTimerNextExpiryDuration+0x30>)
    971e:	681b      	ldr	r3, [r3, #0]
    9720:	2bff      	cmp	r3, #255	; 0xff
    9722:	d007      	beq.n	9734 <SwTimerNextExpiryDuration+0x24>
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    9724:	4b06      	ldr	r3, [pc, #24]	; (9740 <SwTimerNextExpiryDuration+0x30>)
    9726:	681b      	ldr	r3, [r3, #0]
    9728:	b2db      	uxtb	r3, r3
    972a:	0018      	movs	r0, r3
    972c:	4b05      	ldr	r3, [pc, #20]	; (9744 <SwTimerNextExpiryDuration+0x34>)
    972e:	4798      	blx	r3
    9730:	0003      	movs	r3, r0
    9732:	607b      	str	r3, [r7, #4]
    }

    return duration;
    9734:	687b      	ldr	r3, [r7, #4]
}
    9736:	0018      	movs	r0, r3
    9738:	46bd      	mov	sp, r7
    973a:	b002      	add	sp, #8
    973c:	bd80      	pop	{r7, pc}
    973e:	46c0      	nop			; (mov r8, r8)
    9740:	20000e6c 	.word	0x20000e6c
    9744:	00009689 	.word	0x00009689

00009748 <SwTimerRunRemainingTime>:
/**************************************************************************//**
\brief Run the running timer for the given offset
\param[in] offset New time duration for the running timer
******************************************************************************/
void SwTimerRunRemainingTime(uint32_t offset)
{
    9748:	b590      	push	{r4, r7, lr}
    974a:	b089      	sub	sp, #36	; 0x24
    974c:	af02      	add	r7, sp, #8
    974e:	6078      	str	r0, [r7, #4]
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    9750:	4b16      	ldr	r3, [pc, #88]	; (97ac <SwTimerRunRemainingTime+0x64>)
    9752:	681b      	ldr	r3, [r3, #0]
    9754:	4a16      	ldr	r2, [pc, #88]	; (97b0 <SwTimerRunRemainingTime+0x68>)
    9756:	011b      	lsls	r3, r3, #4
    9758:	18d3      	adds	r3, r2, r3
    975a:	3304      	adds	r3, #4
    975c:	681b      	ldr	r3, [r3, #0]
    975e:	617b      	str	r3, [r7, #20]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    9760:	4b12      	ldr	r3, [pc, #72]	; (97ac <SwTimerRunRemainingTime+0x64>)
    9762:	681b      	ldr	r3, [r3, #0]
    9764:	4a12      	ldr	r2, [pc, #72]	; (97b0 <SwTimerRunRemainingTime+0x68>)
    9766:	011b      	lsls	r3, r3, #4
    9768:	18d3      	adds	r3, r2, r3
    976a:	3308      	adds	r3, #8
    976c:	681b      	ldr	r3, [r3, #0]
    976e:	613b      	str	r3, [r7, #16]
    uint8_t timerId = runningTimerQueueHead;
    9770:	4b0e      	ldr	r3, [pc, #56]	; (97ac <SwTimerRunRemainingTime+0x64>)
    9772:	681a      	ldr	r2, [r3, #0]
    9774:	230f      	movs	r3, #15
    9776:	18fb      	adds	r3, r7, r3
    9778:	701a      	strb	r2, [r3, #0]

    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    977a:	4b0c      	ldr	r3, [pc, #48]	; (97ac <SwTimerRunRemainingTime+0x64>)
    977c:	681b      	ldr	r3, [r3, #0]
    977e:	b2db      	uxtb	r3, r3
    9780:	0018      	movs	r0, r3
    9782:	4b0c      	ldr	r3, [pc, #48]	; (97b4 <SwTimerRunRemainingTime+0x6c>)
    9784:	4798      	blx	r3
    9786:	0003      	movs	r3, r0
    9788:	2b08      	cmp	r3, #8
    978a:	d10a      	bne.n	97a2 <SwTimerRunRemainingTime+0x5a>
    {
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    978c:	697a      	ldr	r2, [r7, #20]
    978e:	6879      	ldr	r1, [r7, #4]
    9790:	230f      	movs	r3, #15
    9792:	18fb      	adds	r3, r7, r3
    9794:	7818      	ldrb	r0, [r3, #0]
    9796:	693b      	ldr	r3, [r7, #16]
    9798:	9300      	str	r3, [sp, #0]
    979a:	0013      	movs	r3, r2
    979c:	2200      	movs	r2, #0
    979e:	4c06      	ldr	r4, [pc, #24]	; (97b8 <SwTimerRunRemainingTime+0x70>)
    97a0:	47a0      	blx	r4
    }
}
    97a2:	46c0      	nop			; (mov r8, r8)
    97a4:	46bd      	mov	sp, r7
    97a6:	b007      	add	sp, #28
    97a8:	bd90      	pop	{r4, r7, pc}
    97aa:	46c0      	nop			; (mov r8, r8)
    97ac:	20000e6c 	.word	0x20000e6c
    97b0:	200010e8 	.word	0x200010e8
    97b4:	000097bd 	.word	0x000097bd
    97b8:	000095bd 	.word	0x000095bd

000097bc <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    97bc:	b580      	push	{r7, lr}
    97be:	b084      	sub	sp, #16
    97c0:	af00      	add	r7, sp, #0
    97c2:	0002      	movs	r2, r0
    97c4:	1dfb      	adds	r3, r7, #7
    97c6:	701a      	strb	r2, [r3, #0]
    bool timerStopReqStatus = false;
    97c8:	230f      	movs	r3, #15
    97ca:	18fb      	adds	r3, r7, r3
    97cc:	2200      	movs	r2, #0
    97ce:	701a      	strb	r2, [r3, #0]
    uint8_t currIndex;
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    97d0:	1dfb      	adds	r3, r7, #7
    97d2:	781b      	ldrb	r3, [r3, #0]
    97d4:	2b18      	cmp	r3, #24
    97d6:	d901      	bls.n	97dc <SwTimerStop+0x20>
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    97d8:	230a      	movs	r3, #10
    97da:	e11f      	b.n	9a1c <SwTimerStop+0x260>
    }

    uint8_t flags = cpu_irq_save();
    97dc:	4b91      	ldr	r3, [pc, #580]	; (9a24 <SwTimerStop+0x268>)
    97de:	4798      	blx	r3
    97e0:	0002      	movs	r2, r0
    97e2:	230b      	movs	r3, #11
    97e4:	18fb      	adds	r3, r7, r3
    97e6:	701a      	strb	r2, [r3, #0]

    /* Check if any timer has expired. */
    swtimerInternalHandler();
    97e8:	4b8f      	ldr	r3, [pc, #572]	; (9a28 <SwTimerStop+0x26c>)
    97ea:	4798      	blx	r3

    /* The requested timer is first searched in the running timer queue */
    if (runningTimers > 0)
    97ec:	4b8f      	ldr	r3, [pc, #572]	; (9a2c <SwTimerStop+0x270>)
    97ee:	781b      	ldrb	r3, [r3, #0]
    97f0:	b2db      	uxtb	r3, r3
    97f2:	2b00      	cmp	r3, #0
    97f4:	d100      	bne.n	97f8 <SwTimerStop+0x3c>
    97f6:	e076      	b.n	98e6 <SwTimerStop+0x12a>
    {
        uint8_t timer_count = runningTimers;
    97f8:	230c      	movs	r3, #12
    97fa:	18fb      	adds	r3, r7, r3
    97fc:	4a8b      	ldr	r2, [pc, #556]	; (9a2c <SwTimerStop+0x270>)
    97fe:	7812      	ldrb	r2, [r2, #0]
    9800:	701a      	strb	r2, [r3, #0]
        prevIndex = currIndex = runningTimerQueueHead;
    9802:	4b8b      	ldr	r3, [pc, #556]	; (9a30 <SwTimerStop+0x274>)
    9804:	681a      	ldr	r2, [r3, #0]
    9806:	230e      	movs	r3, #14
    9808:	18fb      	adds	r3, r7, r3
    980a:	701a      	strb	r2, [r3, #0]
    980c:	230d      	movs	r3, #13
    980e:	18fb      	adds	r3, r7, r3
    9810:	220e      	movs	r2, #14
    9812:	18ba      	adds	r2, r7, r2
    9814:	7812      	ldrb	r2, [r2, #0]
    9816:	701a      	strb	r2, [r3, #0]
        while (timer_count > 0)
    9818:	e054      	b.n	98c4 <SwTimerStop+0x108>
        {
            if (timerId == currIndex)
    981a:	1dfa      	adds	r2, r7, #7
    981c:	230e      	movs	r3, #14
    981e:	18fb      	adds	r3, r7, r3
    9820:	7812      	ldrb	r2, [r2, #0]
    9822:	781b      	ldrb	r3, [r3, #0]
    9824:	429a      	cmp	r2, r3
    9826:	d135      	bne.n	9894 <SwTimerStop+0xd8>
            {
                timerStopReqStatus = true;
    9828:	230f      	movs	r3, #15
    982a:	18fb      	adds	r3, r7, r3
    982c:	2201      	movs	r2, #1
    982e:	701a      	strb	r2, [r3, #0]
                if (timerId == runningTimerQueueHead)
    9830:	1dfb      	adds	r3, r7, #7
    9832:	781a      	ldrb	r2, [r3, #0]
    9834:	4b7e      	ldr	r3, [pc, #504]	; (9a30 <SwTimerStop+0x274>)
    9836:	681b      	ldr	r3, [r3, #0]
    9838:	429a      	cmp	r2, r3
    983a:	d112      	bne.n	9862 <SwTimerStop+0xa6>
                {
                    common_tc_compare_stop();
    983c:	4b7d      	ldr	r3, [pc, #500]	; (9a34 <SwTimerStop+0x278>)
    983e:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    9840:	1dfb      	adds	r3, r7, #7
    9842:	781b      	ldrb	r3, [r3, #0]
    9844:	4a7c      	ldr	r2, [pc, #496]	; (9a38 <SwTimerStop+0x27c>)
    9846:	011b      	lsls	r3, r3, #4
    9848:	18d3      	adds	r3, r2, r3
    984a:	330c      	adds	r3, #12
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	001a      	movs	r2, r3
    9850:	4b77      	ldr	r3, [pc, #476]	; (9a30 <SwTimerStop+0x274>)
    9852:	601a      	str	r2, [r3, #0]
                    * The value in OVF corresponds to the timeout pointed
                    * by the 'running_timer_queue_head'. As the head has
                    * changed here, OVF needs to be loaded by the new
                    * timeout value, if any.
                    */
                    loadHwTimer(runningTimerQueueHead);
    9854:	4b76      	ldr	r3, [pc, #472]	; (9a30 <SwTimerStop+0x274>)
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	b2db      	uxtb	r3, r3
    985a:	0018      	movs	r0, r3
    985c:	4b77      	ldr	r3, [pc, #476]	; (9a3c <SwTimerStop+0x280>)
    985e:	4798      	blx	r3
    9860:	e00f      	b.n	9882 <SwTimerStop+0xc6>
                }
                else
                {
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    9862:	230d      	movs	r3, #13
    9864:	18fb      	adds	r3, r7, r3
    9866:	781b      	ldrb	r3, [r3, #0]
    9868:	1dfa      	adds	r2, r7, #7
    986a:	7812      	ldrb	r2, [r2, #0]
    986c:	4972      	ldr	r1, [pc, #456]	; (9a38 <SwTimerStop+0x27c>)
    986e:	0112      	lsls	r2, r2, #4
    9870:	188a      	adds	r2, r1, r2
    9872:	320c      	adds	r2, #12
    9874:	7811      	ldrb	r1, [r2, #0]
    9876:	4a70      	ldr	r2, [pc, #448]	; (9a38 <SwTimerStop+0x27c>)
    9878:	011b      	lsls	r3, r3, #4
    987a:	18d3      	adds	r3, r2, r3
    987c:	330c      	adds	r3, #12
    987e:	1c0a      	adds	r2, r1, #0
    9880:	701a      	strb	r2, [r3, #0]

                /*
                * The next timer element of the stopped timer is updated
                * to its default value.
                */
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    9882:	1dfb      	adds	r3, r7, #7
    9884:	781b      	ldrb	r3, [r3, #0]
    9886:	4a6c      	ldr	r2, [pc, #432]	; (9a38 <SwTimerStop+0x27c>)
    9888:	011b      	lsls	r3, r3, #4
    988a:	18d3      	adds	r3, r2, r3
    988c:	330c      	adds	r3, #12
    988e:	22ff      	movs	r2, #255	; 0xff
    9890:	701a      	strb	r2, [r3, #0]
                break;
    9892:	e01c      	b.n	98ce <SwTimerStop+0x112>
            }
            else
            {
                prevIndex = currIndex;
    9894:	230d      	movs	r3, #13
    9896:	18fb      	adds	r3, r7, r3
    9898:	220e      	movs	r2, #14
    989a:	18ba      	adds	r2, r7, r2
    989c:	7812      	ldrb	r2, [r2, #0]
    989e:	701a      	strb	r2, [r3, #0]
                currIndex = swTimers[currIndex].nextTimer;
    98a0:	230e      	movs	r3, #14
    98a2:	18fb      	adds	r3, r7, r3
    98a4:	781a      	ldrb	r2, [r3, #0]
    98a6:	230e      	movs	r3, #14
    98a8:	18fb      	adds	r3, r7, r3
    98aa:	4963      	ldr	r1, [pc, #396]	; (9a38 <SwTimerStop+0x27c>)
    98ac:	0112      	lsls	r2, r2, #4
    98ae:	188a      	adds	r2, r1, r2
    98b0:	320c      	adds	r2, #12
    98b2:	7812      	ldrb	r2, [r2, #0]
    98b4:	701a      	strb	r2, [r3, #0]
            }

            timer_count--;
    98b6:	230c      	movs	r3, #12
    98b8:	18fb      	adds	r3, r7, r3
    98ba:	781a      	ldrb	r2, [r3, #0]
    98bc:	230c      	movs	r3, #12
    98be:	18fb      	adds	r3, r7, r3
    98c0:	3a01      	subs	r2, #1
    98c2:	701a      	strb	r2, [r3, #0]
        while (timer_count > 0)
    98c4:	230c      	movs	r3, #12
    98c6:	18fb      	adds	r3, r7, r3
    98c8:	781b      	ldrb	r3, [r3, #0]
    98ca:	2b00      	cmp	r3, #0
    98cc:	d1a5      	bne.n	981a <SwTimerStop+0x5e>
        }

        if (timerStopReqStatus)
    98ce:	230f      	movs	r3, #15
    98d0:	18fb      	adds	r3, r7, r3
    98d2:	781b      	ldrb	r3, [r3, #0]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d006      	beq.n	98e6 <SwTimerStop+0x12a>
        {
            runningTimers--;
    98d8:	4b54      	ldr	r3, [pc, #336]	; (9a2c <SwTimerStop+0x270>)
    98da:	781b      	ldrb	r3, [r3, #0]
    98dc:	b2db      	uxtb	r3, r3
    98de:	3b01      	subs	r3, #1
    98e0:	b2da      	uxtb	r2, r3
    98e2:	4b52      	ldr	r3, [pc, #328]	; (9a2c <SwTimerStop+0x270>)
    98e4:	701a      	strb	r2, [r3, #0]

    /*
    * The requested timer is not present in the running timer queue.
    * It will be now searched in the expired timer queue
    */
    if (!timerStopReqStatus)
    98e6:	230f      	movs	r3, #15
    98e8:	18fb      	adds	r3, r7, r3
    98ea:	781b      	ldrb	r3, [r3, #0]
    98ec:	2201      	movs	r2, #1
    98ee:	4053      	eors	r3, r2
    98f0:	b2db      	uxtb	r3, r3
    98f2:	2b00      	cmp	r3, #0
    98f4:	d067      	beq.n	99c6 <SwTimerStop+0x20a>
    {
        prevIndex = currIndex = expiredTimerQueueHead;
    98f6:	4b52      	ldr	r3, [pc, #328]	; (9a40 <SwTimerStop+0x284>)
    98f8:	681a      	ldr	r2, [r3, #0]
    98fa:	230e      	movs	r3, #14
    98fc:	18fb      	adds	r3, r7, r3
    98fe:	701a      	strb	r2, [r3, #0]
    9900:	230d      	movs	r3, #13
    9902:	18fb      	adds	r3, r7, r3
    9904:	220e      	movs	r2, #14
    9906:	18ba      	adds	r2, r7, r2
    9908:	7812      	ldrb	r2, [r2, #0]
    990a:	701a      	strb	r2, [r3, #0]
        while (SWTIMER_INVALID != currIndex)
    990c:	e056      	b.n	99bc <SwTimerStop+0x200>
        {
            if (timerId == currIndex)
    990e:	1dfa      	adds	r2, r7, #7
    9910:	230e      	movs	r3, #14
    9912:	18fb      	adds	r3, r7, r3
    9914:	7812      	ldrb	r2, [r2, #0]
    9916:	781b      	ldrb	r3, [r3, #0]
    9918:	429a      	cmp	r2, r3
    991a:	d13e      	bne.n	999a <SwTimerStop+0x1de>
            {
                if (timerId == expiredTimerQueueHead)
    991c:	1dfb      	adds	r3, r7, #7
    991e:	781a      	ldrb	r2, [r3, #0]
    9920:	4b47      	ldr	r3, [pc, #284]	; (9a40 <SwTimerStop+0x284>)
    9922:	681b      	ldr	r3, [r3, #0]
    9924:	429a      	cmp	r2, r3
    9926:	d118      	bne.n	995a <SwTimerStop+0x19e>
                {
                    /* The requested timer is the head of the expired timer queue */
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    9928:	4b45      	ldr	r3, [pc, #276]	; (9a40 <SwTimerStop+0x284>)
    992a:	681a      	ldr	r2, [r3, #0]
    992c:	4b45      	ldr	r3, [pc, #276]	; (9a44 <SwTimerStop+0x288>)
    992e:	681b      	ldr	r3, [r3, #0]
    9930:	429a      	cmp	r2, r3
    9932:	d107      	bne.n	9944 <SwTimerStop+0x188>
                    {
                        /* Only one timer in expired timer queue */
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    9934:	4b43      	ldr	r3, [pc, #268]	; (9a44 <SwTimerStop+0x288>)
    9936:	22ff      	movs	r2, #255	; 0xff
    9938:	601a      	str	r2, [r3, #0]
    993a:	4b42      	ldr	r3, [pc, #264]	; (9a44 <SwTimerStop+0x288>)
    993c:	681a      	ldr	r2, [r3, #0]
    993e:	4b40      	ldr	r3, [pc, #256]	; (9a40 <SwTimerStop+0x284>)
    9940:	601a      	str	r2, [r3, #0]
    9942:	e025      	b.n	9990 <SwTimerStop+0x1d4>
                    {
                        /*
                        * The head of the expired timer queue is moved to next
                        * timer in the expired timer queue.
                        */
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    9944:	4b3e      	ldr	r3, [pc, #248]	; (9a40 <SwTimerStop+0x284>)
    9946:	681b      	ldr	r3, [r3, #0]
    9948:	4a3b      	ldr	r2, [pc, #236]	; (9a38 <SwTimerStop+0x27c>)
    994a:	011b      	lsls	r3, r3, #4
    994c:	18d3      	adds	r3, r2, r3
    994e:	330c      	adds	r3, #12
    9950:	781b      	ldrb	r3, [r3, #0]
    9952:	001a      	movs	r2, r3
    9954:	4b3a      	ldr	r3, [pc, #232]	; (9a40 <SwTimerStop+0x284>)
    9956:	601a      	str	r2, [r3, #0]
    9958:	e01a      	b.n	9990 <SwTimerStop+0x1d4>
                {
                    /*
                    * The requested timer is present in the middle or at the
                    * end of the expired timer queue.
                    */
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    995a:	230d      	movs	r3, #13
    995c:	18fb      	adds	r3, r7, r3
    995e:	781b      	ldrb	r3, [r3, #0]
    9960:	1dfa      	adds	r2, r7, #7
    9962:	7812      	ldrb	r2, [r2, #0]
    9964:	4934      	ldr	r1, [pc, #208]	; (9a38 <SwTimerStop+0x27c>)
    9966:	0112      	lsls	r2, r2, #4
    9968:	188a      	adds	r2, r1, r2
    996a:	320c      	adds	r2, #12
    996c:	7811      	ldrb	r1, [r2, #0]
    996e:	4a32      	ldr	r2, [pc, #200]	; (9a38 <SwTimerStop+0x27c>)
    9970:	011b      	lsls	r3, r3, #4
    9972:	18d3      	adds	r3, r2, r3
    9974:	330c      	adds	r3, #12
    9976:	1c0a      	adds	r2, r1, #0
    9978:	701a      	strb	r2, [r3, #0]

                    /*
                    * If the stopped timer is the one which is at the tail of
                    * the expired timer queue, then the tail is updated.
                    */
                    if (timerId == expiredTimerQueueTail)
    997a:	1dfb      	adds	r3, r7, #7
    997c:	781a      	ldrb	r2, [r3, #0]
    997e:	4b31      	ldr	r3, [pc, #196]	; (9a44 <SwTimerStop+0x288>)
    9980:	681b      	ldr	r3, [r3, #0]
    9982:	429a      	cmp	r2, r3
    9984:	d104      	bne.n	9990 <SwTimerStop+0x1d4>
                    {
                        expiredTimerQueueTail = prevIndex;
    9986:	230d      	movs	r3, #13
    9988:	18fb      	adds	r3, r7, r3
    998a:	781a      	ldrb	r2, [r3, #0]
    998c:	4b2d      	ldr	r3, [pc, #180]	; (9a44 <SwTimerStop+0x288>)
    998e:	601a      	str	r2, [r3, #0]
                    }
                }

                timerStopReqStatus = true;
    9990:	230f      	movs	r3, #15
    9992:	18fb      	adds	r3, r7, r3
    9994:	2201      	movs	r2, #1
    9996:	701a      	strb	r2, [r3, #0]
                break;
    9998:	e015      	b.n	99c6 <SwTimerStop+0x20a>
            }
            else
            {
                prevIndex = currIndex;
    999a:	230d      	movs	r3, #13
    999c:	18fb      	adds	r3, r7, r3
    999e:	220e      	movs	r2, #14
    99a0:	18ba      	adds	r2, r7, r2
    99a2:	7812      	ldrb	r2, [r2, #0]
    99a4:	701a      	strb	r2, [r3, #0]
                currIndex = swTimers[currIndex].nextTimer;
    99a6:	230e      	movs	r3, #14
    99a8:	18fb      	adds	r3, r7, r3
    99aa:	781a      	ldrb	r2, [r3, #0]
    99ac:	230e      	movs	r3, #14
    99ae:	18fb      	adds	r3, r7, r3
    99b0:	4921      	ldr	r1, [pc, #132]	; (9a38 <SwTimerStop+0x27c>)
    99b2:	0112      	lsls	r2, r2, #4
    99b4:	188a      	adds	r2, r1, r2
    99b6:	320c      	adds	r2, #12
    99b8:	7812      	ldrb	r2, [r2, #0]
    99ba:	701a      	strb	r2, [r3, #0]
        while (SWTIMER_INVALID != currIndex)
    99bc:	230e      	movs	r3, #14
    99be:	18fb      	adds	r3, r7, r3
    99c0:	781b      	ldrb	r3, [r3, #0]
    99c2:	2bff      	cmp	r3, #255	; 0xff
    99c4:	d1a3      	bne.n	990e <SwTimerStop+0x152>
            }
        }
    }

    if (timerStopReqStatus)
    99c6:	230f      	movs	r3, #15
    99c8:	18fb      	adds	r3, r7, r3
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	2b00      	cmp	r3, #0
    99ce:	d017      	beq.n	9a00 <SwTimerStop+0x244>
    {
        /*
        * The requested timer is stopped, hence the structure elements
        * of the timer are updated.
        */
        swTimers[timerId].timerCb = NULL;
    99d0:	1dfb      	adds	r3, r7, #7
    99d2:	781b      	ldrb	r3, [r3, #0]
    99d4:	4a18      	ldr	r2, [pc, #96]	; (9a38 <SwTimerStop+0x27c>)
    99d6:	011b      	lsls	r3, r3, #4
    99d8:	18d3      	adds	r3, r2, r3
    99da:	3304      	adds	r3, #4
    99dc:	2200      	movs	r2, #0
    99de:	601a      	str	r2, [r3, #0]
        swTimers[timerId].paramCb = NULL;
    99e0:	1dfb      	adds	r3, r7, #7
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	4a14      	ldr	r2, [pc, #80]	; (9a38 <SwTimerStop+0x27c>)
    99e6:	011b      	lsls	r3, r3, #4
    99e8:	18d3      	adds	r3, r2, r3
    99ea:	3308      	adds	r3, #8
    99ec:	2200      	movs	r2, #0
    99ee:	601a      	str	r2, [r3, #0]
        swTimers[timerId].loaded = false;
    99f0:	1dfb      	adds	r3, r7, #7
    99f2:	781b      	ldrb	r3, [r3, #0]
    99f4:	4a10      	ldr	r2, [pc, #64]	; (9a38 <SwTimerStop+0x27c>)
    99f6:	011b      	lsls	r3, r3, #4
    99f8:	18d3      	adds	r3, r2, r3
    99fa:	330d      	adds	r3, #13
    99fc:	2200      	movs	r2, #0
    99fe:	701a      	strb	r2, [r3, #0]
    }

    cpu_irq_restore(flags);
    9a00:	230b      	movs	r3, #11
    9a02:	18fb      	adds	r3, r7, r3
    9a04:	781b      	ldrb	r3, [r3, #0]
    9a06:	0018      	movs	r0, r3
    9a08:	4b0f      	ldr	r3, [pc, #60]	; (9a48 <SwTimerStop+0x28c>)
    9a0a:	4798      	blx	r3

    if (timerStopReqStatus)
    9a0c:	230f      	movs	r3, #15
    9a0e:	18fb      	adds	r3, r7, r3
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d001      	beq.n	9a1a <SwTimerStop+0x25e>
    {
        return LORAWAN_SUCCESS;
    9a16:	2308      	movs	r3, #8
    9a18:	e000      	b.n	9a1c <SwTimerStop+0x260>
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
    9a1a:	2315      	movs	r3, #21
}
    9a1c:	0018      	movs	r0, r3
    9a1e:	46bd      	mov	sp, r7
    9a20:	b004      	add	sp, #16
    9a22:	bd80      	pop	{r7, pc}
    9a24:	00008e71 	.word	0x00008e71
    9a28:	000093b1 	.word	0x000093b1
    9a2c:	20000e6a 	.word	0x20000e6a
    9a30:	20000e6c 	.word	0x20000e6c
    9a34:	0000bad1 	.word	0x0000bad1
    9a38:	200010e8 	.word	0x200010e8
    9a3c:	00009159 	.word	0x00009159
    9a40:	20000e70 	.word	0x20000e70
    9a44:	20000e74 	.word	0x20000e74
    9a48:	00008eb9 	.word	0x00008eb9

00009a4c <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    9a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a4e:	b087      	sub	sp, #28
    9a50:	af00      	add	r7, sp, #0
    9a52:	60b8      	str	r0, [r7, #8]
    9a54:	60f9      	str	r1, [r7, #12]
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    9a56:	4b55      	ldr	r3, [pc, #340]	; (9bac <SystemTimerSync+0x160>)
    9a58:	6819      	ldr	r1, [r3, #0]
    9a5a:	685a      	ldr	r2, [r3, #4]
    9a5c:	68bb      	ldr	r3, [r7, #8]
    9a5e:	68fc      	ldr	r4, [r7, #12]
    9a60:	185b      	adds	r3, r3, r1
    9a62:	4154      	adcs	r4, r2
    9a64:	4a51      	ldr	r2, [pc, #324]	; (9bac <SystemTimerSync+0x160>)
    9a66:	6013      	str	r3, [r2, #0]
    9a68:	6054      	str	r4, [r2, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    9a6a:	4b50      	ldr	r3, [pc, #320]	; (9bac <SystemTimerSync+0x160>)
    9a6c:	685c      	ldr	r4, [r3, #4]
    9a6e:	681b      	ldr	r3, [r3, #0]
    9a70:	0023      	movs	r3, r4
    9a72:	603b      	str	r3, [r7, #0]
    9a74:	2300      	movs	r3, #0
    9a76:	607b      	str	r3, [r7, #4]
    9a78:	683a      	ldr	r2, [r7, #0]
    9a7a:	4b4d      	ldr	r3, [pc, #308]	; (9bb0 <SystemTimerSync+0x164>)
    9a7c:	601a      	str	r2, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    9a7e:	4b4b      	ldr	r3, [pc, #300]	; (9bac <SystemTimerSync+0x160>)
    9a80:	685c      	ldr	r4, [r3, #4]
    9a82:	681b      	ldr	r3, [r3, #0]
    9a84:	0422      	lsls	r2, r4, #16
    9a86:	0c1d      	lsrs	r5, r3, #16
    9a88:	4315      	orrs	r5, r2
    9a8a:	0c26      	lsrs	r6, r4, #16
    9a8c:	b2aa      	uxth	r2, r5
    9a8e:	4b49      	ldr	r3, [pc, #292]	; (9bb4 <SystemTimerSync+0x168>)
    9a90:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    9a92:	4b46      	ldr	r3, [pc, #280]	; (9bac <SystemTimerSync+0x160>)
    9a94:	685c      	ldr	r4, [r3, #4]
    9a96:	681b      	ldr	r3, [r3, #0]
    9a98:	220c      	movs	r2, #12
    9a9a:	2108      	movs	r1, #8
    9a9c:	468c      	mov	ip, r1
    9a9e:	44bc      	add	ip, r7
    9aa0:	4462      	add	r2, ip
    9aa2:	8013      	strh	r3, [r2, #0]
    timerId = runningTimerQueueHead;
    9aa4:	4b44      	ldr	r3, [pc, #272]	; (9bb8 <SystemTimerSync+0x16c>)
    9aa6:	681a      	ldr	r2, [r3, #0]
    9aa8:	230f      	movs	r3, #15
    9aaa:	2108      	movs	r1, #8
    9aac:	468c      	mov	ip, r1
    9aae:	44bc      	add	ip, r7
    9ab0:	4463      	add	r3, ip
    9ab2:	701a      	strb	r2, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    9ab4:	230e      	movs	r3, #14
    9ab6:	2208      	movs	r2, #8
    9ab8:	4694      	mov	ip, r2
    9aba:	44bc      	add	ip, r7
    9abc:	4463      	add	r3, ip
    9abe:	2200      	movs	r2, #0
    9ac0:	701a      	strb	r2, [r3, #0]
    9ac2:	e03e      	b.n	9b42 <SystemTimerSync+0xf6>
    {
        if (SWTIMER_INVALID != timerId)
    9ac4:	230f      	movs	r3, #15
    9ac6:	2208      	movs	r2, #8
    9ac8:	4694      	mov	ip, r2
    9aca:	44bc      	add	ip, r7
    9acc:	4463      	add	r3, ip
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	2bff      	cmp	r3, #255	; 0xff
    9ad2:	d029      	beq.n	9b28 <SystemTimerSync+0xdc>
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    9ad4:	230f      	movs	r3, #15
    9ad6:	2208      	movs	r2, #8
    9ad8:	4694      	mov	ip, r2
    9ada:	44bc      	add	ip, r7
    9adc:	4463      	add	r3, ip
    9ade:	781a      	ldrb	r2, [r3, #0]
    9ae0:	230f      	movs	r3, #15
    9ae2:	2108      	movs	r1, #8
    9ae4:	468c      	mov	ip, r1
    9ae6:	44bc      	add	ip, r7
    9ae8:	4463      	add	r3, ip
    9aea:	7819      	ldrb	r1, [r3, #0]
    9aec:	4b33      	ldr	r3, [pc, #204]	; (9bbc <SystemTimerSync+0x170>)
    9aee:	0109      	lsls	r1, r1, #4
    9af0:	58c9      	ldr	r1, [r1, r3]
    9af2:	230c      	movs	r3, #12
    9af4:	2008      	movs	r0, #8
    9af6:	4684      	mov	ip, r0
    9af8:	44bc      	add	ip, r7
    9afa:	4463      	add	r3, ip
    9afc:	881b      	ldrh	r3, [r3, #0]
    9afe:	1ac9      	subs	r1, r1, r3
    9b00:	4b2e      	ldr	r3, [pc, #184]	; (9bbc <SystemTimerSync+0x170>)
    9b02:	0112      	lsls	r2, r2, #4
    9b04:	50d1      	str	r1, [r2, r3]
            timerId = swTimers[timerId].nextTimer;
    9b06:	230f      	movs	r3, #15
    9b08:	2208      	movs	r2, #8
    9b0a:	4694      	mov	ip, r2
    9b0c:	44bc      	add	ip, r7
    9b0e:	4463      	add	r3, ip
    9b10:	781a      	ldrb	r2, [r3, #0]
    9b12:	230f      	movs	r3, #15
    9b14:	2108      	movs	r1, #8
    9b16:	468c      	mov	ip, r1
    9b18:	44bc      	add	ip, r7
    9b1a:	4463      	add	r3, ip
    9b1c:	4927      	ldr	r1, [pc, #156]	; (9bbc <SystemTimerSync+0x170>)
    9b1e:	0112      	lsls	r2, r2, #4
    9b20:	188a      	adds	r2, r1, r2
    9b22:	320c      	adds	r2, #12
    9b24:	7812      	ldrb	r2, [r2, #0]
    9b26:	701a      	strb	r2, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    9b28:	230e      	movs	r3, #14
    9b2a:	2208      	movs	r2, #8
    9b2c:	4694      	mov	ip, r2
    9b2e:	44bc      	add	ip, r7
    9b30:	4463      	add	r3, ip
    9b32:	781a      	ldrb	r2, [r3, #0]
    9b34:	230e      	movs	r3, #14
    9b36:	2108      	movs	r1, #8
    9b38:	468c      	mov	ip, r1
    9b3a:	44bc      	add	ip, r7
    9b3c:	4463      	add	r3, ip
    9b3e:	3201      	adds	r2, #1
    9b40:	701a      	strb	r2, [r3, #0]
    9b42:	4b1f      	ldr	r3, [pc, #124]	; (9bc0 <SystemTimerSync+0x174>)
    9b44:	781b      	ldrb	r3, [r3, #0]
    9b46:	b2db      	uxtb	r3, r3
    9b48:	220e      	movs	r2, #14
    9b4a:	2108      	movs	r1, #8
    9b4c:	468c      	mov	ip, r1
    9b4e:	44bc      	add	ip, r7
    9b50:	4462      	add	r2, ip
    9b52:	7812      	ldrb	r2, [r2, #0]
    9b54:	429a      	cmp	r2, r3
    9b56:	d3b5      	bcc.n	9ac4 <SystemTimerSync+0x78>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    9b58:	4b1a      	ldr	r3, [pc, #104]	; (9bc4 <SystemTimerSync+0x178>)
    9b5a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    9b5c:	4b1a      	ldr	r3, [pc, #104]	; (9bc8 <SystemTimerSync+0x17c>)
    9b5e:	0018      	movs	r0, r3
    9b60:	4b1a      	ldr	r3, [pc, #104]	; (9bcc <SystemTimerSync+0x180>)
    9b62:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    9b64:	4b1a      	ldr	r3, [pc, #104]	; (9bd0 <SystemTimerSync+0x184>)
    9b66:	0018      	movs	r0, r3
    9b68:	4b1a      	ldr	r3, [pc, #104]	; (9bd4 <SystemTimerSync+0x188>)
    9b6a:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    9b6c:	4b14      	ldr	r3, [pc, #80]	; (9bc0 <SystemTimerSync+0x174>)
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	b2db      	uxtb	r3, r3
    9b72:	2b00      	cmp	r3, #0
    9b74:	d015      	beq.n	9ba2 <SystemTimerSync+0x156>
    9b76:	4b10      	ldr	r3, [pc, #64]	; (9bb8 <SystemTimerSync+0x16c>)
    9b78:	681b      	ldr	r3, [r3, #0]
    9b7a:	2bff      	cmp	r3, #255	; 0xff
    9b7c:	d011      	beq.n	9ba2 <SystemTimerSync+0x156>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    9b7e:	4b16      	ldr	r3, [pc, #88]	; (9bd8 <SystemTimerSync+0x18c>)
    9b80:	4798      	blx	r3
    9b82:	0003      	movs	r3, r0
    9b84:	613b      	str	r3, [r7, #16]

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    9b86:	693b      	ldr	r3, [r7, #16]
    9b88:	2bfe      	cmp	r3, #254	; 0xfe
    9b8a:	d806      	bhi.n	9b9a <SystemTimerSync+0x14e>
        {
            /*
            * Since head timer has very less duration...
            * It cannot be restarted. So, expire head timer.
            */
            isTimerTriggered = true;
    9b8c:	4b13      	ldr	r3, [pc, #76]	; (9bdc <SystemTimerSync+0x190>)
    9b8e:	2201      	movs	r2, #1
    9b90:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    9b92:	2001      	movs	r0, #1
    9b94:	4b12      	ldr	r3, [pc, #72]	; (9be0 <SystemTimerSync+0x194>)
    9b96:	4798      	blx	r3
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
        }
    }
}
    9b98:	e003      	b.n	9ba2 <SystemTimerSync+0x156>
            SwTimerRunRemainingTime(remainingTime);
    9b9a:	693b      	ldr	r3, [r7, #16]
    9b9c:	0018      	movs	r0, r3
    9b9e:	4b11      	ldr	r3, [pc, #68]	; (9be4 <SystemTimerSync+0x198>)
    9ba0:	4798      	blx	r3
}
    9ba2:	46c0      	nop			; (mov r8, r8)
    9ba4:	46bd      	mov	sp, r7
    9ba6:	b007      	add	sp, #28
    9ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9baa:	46c0      	nop			; (mov r8, r8)
    9bac:	20000e80 	.word	0x20000e80
    9bb0:	2000127c 	.word	0x2000127c
    9bb4:	20001278 	.word	0x20001278
    9bb8:	20000e6c 	.word	0x20000e6c
    9bbc:	200010e8 	.word	0x200010e8
    9bc0:	20000e6a 	.word	0x20000e6a
    9bc4:	0000bb65 	.word	0x0000bb65
    9bc8:	00008ee9 	.word	0x00008ee9
    9bcc:	0000bbe9 	.word	0x0000bbe9
    9bd0:	00008f31 	.word	0x00008f31
    9bd4:	0000bbf5 	.word	0x0000bbf5
    9bd8:	00009711 	.word	0x00009711
    9bdc:	2000127a 	.word	0x2000127a
    9be0:	00009cb5 	.word	0x00009cb5
    9be4:	00009749 	.word	0x00009749

00009be8 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    9be8:	b580      	push	{r7, lr}
    9bea:	b084      	sub	sp, #16
    9bec:	af00      	add	r7, sp, #0
    9bee:	6078      	str	r0, [r7, #4]
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9bf0:	230f      	movs	r3, #15
    9bf2:	18fb      	adds	r3, r7, r3
    9bf4:	2208      	movs	r2, #8
    9bf6:	701a      	strb	r2, [r3, #0]

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    9bf8:	4b0e      	ldr	r3, [pc, #56]	; (9c34 <SwTimerTimestampCreate+0x4c>)
    9bfa:	781b      	ldrb	r3, [r3, #0]
    9bfc:	2b01      	cmp	r3, #1
    9bfe:	d80e      	bhi.n	9c1e <SwTimerTimestampCreate+0x36>
    {
        ATOMIC_SECTION_ENTER
    9c00:	4b0d      	ldr	r3, [pc, #52]	; (9c38 <SwTimerTimestampCreate+0x50>)
    9c02:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    9c04:	4b0b      	ldr	r3, [pc, #44]	; (9c34 <SwTimerTimestampCreate+0x4c>)
    9c06:	781a      	ldrb	r2, [r3, #0]
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	701a      	strb	r2, [r3, #0]
        allocatedTimestampId++;
    9c0c:	4b09      	ldr	r3, [pc, #36]	; (9c34 <SwTimerTimestampCreate+0x4c>)
    9c0e:	781b      	ldrb	r3, [r3, #0]
    9c10:	3301      	adds	r3, #1
    9c12:	b2da      	uxtb	r2, r3
    9c14:	4b07      	ldr	r3, [pc, #28]	; (9c34 <SwTimerTimestampCreate+0x4c>)
    9c16:	701a      	strb	r2, [r3, #0]
        ATOMIC_SECTION_EXIT
    9c18:	4b08      	ldr	r3, [pc, #32]	; (9c3c <SwTimerTimestampCreate+0x54>)
    9c1a:	4798      	blx	r3
    9c1c:	e003      	b.n	9c26 <SwTimerTimestampCreate+0x3e>
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    9c1e:	230f      	movs	r3, #15
    9c20:	18fb      	adds	r3, r7, r3
    9c22:	2214      	movs	r2, #20
    9c24:	701a      	strb	r2, [r3, #0]
    }

    return retVal;
    9c26:	230f      	movs	r3, #15
    9c28:	18fb      	adds	r3, r7, r3
    9c2a:	781b      	ldrb	r3, [r3, #0]
}
    9c2c:	0018      	movs	r0, r3
    9c2e:	46bd      	mov	sp, r7
    9c30:	b004      	add	sp, #16
    9c32:	bd80      	pop	{r7, pc}
    9c34:	20000e79 	.word	0x20000e79
    9c38:	00007dc9 	.word	0x00007dc9
    9c3c:	00007ddd 	.word	0x00007ddd

00009c40 <SwTimerReadTimestamp>:
\brief Returns the timestamp stored in the given timestamp index
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    9c40:	b590      	push	{r4, r7, lr}
    9c42:	b083      	sub	sp, #12
    9c44:	af00      	add	r7, sp, #0
    9c46:	0002      	movs	r2, r0
    9c48:	6039      	str	r1, [r7, #0]
    9c4a:	1dfb      	adds	r3, r7, #7
    9c4c:	701a      	strb	r2, [r3, #0]
	*timestamp = swTimestamp[index];
    9c4e:	1dfb      	adds	r3, r7, #7
    9c50:	781b      	ldrb	r3, [r3, #0]
    9c52:	4a06      	ldr	r2, [pc, #24]	; (9c6c <SwTimerReadTimestamp+0x2c>)
    9c54:	00db      	lsls	r3, r3, #3
    9c56:	18d3      	adds	r3, r2, r3
    9c58:	685c      	ldr	r4, [r3, #4]
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	683a      	ldr	r2, [r7, #0]
    9c5e:	6013      	str	r3, [r2, #0]
    9c60:	6054      	str	r4, [r2, #4]
}
    9c62:	46c0      	nop			; (mov r8, r8)
    9c64:	46bd      	mov	sp, r7
    9c66:	b003      	add	sp, #12
    9c68:	bd90      	pop	{r4, r7, pc}
    9c6a:	46c0      	nop			; (mov r8, r8)
    9c6c:	200010d8 	.word	0x200010d8

00009c70 <SwTimerWriteTimestamp>:
\brief Stores the timestamp in the given timestamp index
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    9c70:	b590      	push	{r4, r7, lr}
    9c72:	b083      	sub	sp, #12
    9c74:	af00      	add	r7, sp, #0
    9c76:	0002      	movs	r2, r0
    9c78:	6039      	str	r1, [r7, #0]
    9c7a:	1dfb      	adds	r3, r7, #7
    9c7c:	701a      	strb	r2, [r3, #0]
    swTimestamp[index] = *timestamp;
    9c7e:	1dfb      	adds	r3, r7, #7
    9c80:	781a      	ldrb	r2, [r3, #0]
    9c82:	683b      	ldr	r3, [r7, #0]
    9c84:	685c      	ldr	r4, [r3, #4]
    9c86:	681b      	ldr	r3, [r3, #0]
    9c88:	4904      	ldr	r1, [pc, #16]	; (9c9c <SwTimerWriteTimestamp+0x2c>)
    9c8a:	00d2      	lsls	r2, r2, #3
    9c8c:	188a      	adds	r2, r1, r2
    9c8e:	6013      	str	r3, [r2, #0]
    9c90:	6054      	str	r4, [r2, #4]
}
    9c92:	46c0      	nop			; (mov r8, r8)
    9c94:	46bd      	mov	sp, r7
    9c96:	b003      	add	sp, #12
    9c98:	bd90      	pop	{r4, r7, pc}
    9c9a:	46c0      	nop			; (mov r8, r8)
    9c9c:	200010d8 	.word	0x200010d8

00009ca0 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	af00      	add	r7, sp, #0
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    9ca4:	2010      	movs	r0, #16
    9ca6:	4b02      	ldr	r3, [pc, #8]	; (9cb0 <Stack_Init+0x10>)
    9ca8:	4798      	blx	r3
}
    9caa:	46c0      	nop			; (mov r8, r8)
    9cac:	46bd      	mov	sp, r7
    9cae:	bd80      	pop	{r7, pc}
    9cb0:	00009cb5 	.word	0x00009cb5

00009cb4 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    9cb4:	b580      	push	{r7, lr}
    9cb6:	b082      	sub	sp, #8
    9cb8:	af00      	add	r7, sp, #0
    9cba:	0002      	movs	r2, r0
    9cbc:	1dfb      	adds	r3, r7, #7
    9cbe:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
    9cc0:	4b08      	ldr	r3, [pc, #32]	; (9ce4 <SYSTEM_PostTask+0x30>)
    9cc2:	4798      	blx	r3
    sysTaskFlag |= task;
    9cc4:	1dfb      	adds	r3, r7, #7
    9cc6:	781b      	ldrb	r3, [r3, #0]
    9cc8:	b29a      	uxth	r2, r3
    9cca:	4b07      	ldr	r3, [pc, #28]	; (9ce8 <SYSTEM_PostTask+0x34>)
    9ccc:	881b      	ldrh	r3, [r3, #0]
    9cce:	b29b      	uxth	r3, r3
    9cd0:	4313      	orrs	r3, r2
    9cd2:	b29a      	uxth	r2, r3
    9cd4:	4b04      	ldr	r3, [pc, #16]	; (9ce8 <SYSTEM_PostTask+0x34>)
    9cd6:	801a      	strh	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
    9cd8:	4b04      	ldr	r3, [pc, #16]	; (9cec <SYSTEM_PostTask+0x38>)
    9cda:	4798      	blx	r3
}
    9cdc:	46c0      	nop			; (mov r8, r8)
    9cde:	46bd      	mov	sp, r7
    9ce0:	b002      	add	sp, #8
    9ce2:	bd80      	pop	{r7, pc}
    9ce4:	00007dc9 	.word	0x00007dc9
    9ce8:	20000e88 	.word	0x20000e88
    9cec:	00007ddd 	.word	0x00007ddd

00009cf0 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    9cf0:	b590      	push	{r4, r7, lr}
    9cf2:	b085      	sub	sp, #20
    9cf4:	af00      	add	r7, sp, #0
    9cf6:	0004      	movs	r4, r0
    9cf8:	0008      	movs	r0, r1
    9cfa:	0011      	movs	r1, r2
    9cfc:	1dfb      	adds	r3, r7, #7
    9cfe:	1c22      	adds	r2, r4, #0
    9d00:	701a      	strb	r2, [r3, #0]
    9d02:	1dbb      	adds	r3, r7, #6
    9d04:	1c02      	adds	r2, r0, #0
    9d06:	701a      	strb	r2, [r3, #0]
    9d08:	1d7b      	adds	r3, r7, #5
    9d0a:	1c0a      	adds	r2, r1, #0
    9d0c:	701a      	strb	r2, [r3, #0]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    9d0e:	1dbb      	adds	r3, r7, #6
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	2b00      	cmp	r3, #0
    9d14:	d109      	bne.n	9d2a <Radio_WriteMode+0x3a>
    9d16:	1dfb      	adds	r3, r7, #7
    9d18:	781b      	ldrb	r3, [r3, #0]
    9d1a:	2b06      	cmp	r3, #6
    9d1c:	d100      	bne.n	9d20 <Radio_WriteMode+0x30>
    9d1e:	e0c4      	b.n	9eaa <Radio_WriteMode+0x1ba>
        ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
    9d20:	1dfb      	adds	r3, r7, #7
    9d22:	781b      	ldrb	r3, [r3, #0]
    9d24:	2b07      	cmp	r3, #7
    9d26:	d100      	bne.n	9d2a <Radio_WriteMode+0x3a>
    9d28:	e0bf      	b.n	9eaa <Radio_WriteMode+0x1ba>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    9d2a:	1dfb      	adds	r3, r7, #7
    9d2c:	1dfa      	adds	r2, r7, #7
    9d2e:	7812      	ldrb	r2, [r2, #0]
    9d30:	2107      	movs	r1, #7
    9d32:	400a      	ands	r2, r1
    9d34:	701a      	strb	r2, [r3, #0]
    newModulation &= 0x01;
    9d36:	1dbb      	adds	r3, r7, #6
    9d38:	1dba      	adds	r2, r7, #6
    9d3a:	7812      	ldrb	r2, [r2, #0]
    9d3c:	2101      	movs	r1, #1
    9d3e:	400a      	ands	r2, r1
    9d40:	701a      	strb	r2, [r3, #0]

    opMode = RADIO_RegisterRead(REG_OPMODE);
    9d42:	230f      	movs	r3, #15
    9d44:	18fc      	adds	r4, r7, r3
    9d46:	2001      	movs	r0, #1
    9d48:	4b5a      	ldr	r3, [pc, #360]	; (9eb4 <Radio_WriteMode+0x1c4>)
    9d4a:	4798      	blx	r3
    9d4c:	0003      	movs	r3, r0
    9d4e:	7023      	strb	r3, [r4, #0]

    if ((opMode & 0x80) != 0)
    9d50:	230f      	movs	r3, #15
    9d52:	18fb      	adds	r3, r7, r3
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	b25b      	sxtb	r3, r3
    9d58:	2b00      	cmp	r3, #0
    9d5a:	da04      	bge.n	9d66 <Radio_WriteMode+0x76>
    {
        currentModulation = MODULATION_LORA;
    9d5c:	230d      	movs	r3, #13
    9d5e:	18fb      	adds	r3, r7, r3
    9d60:	2201      	movs	r2, #1
    9d62:	701a      	strb	r2, [r3, #0]
    9d64:	e003      	b.n	9d6e <Radio_WriteMode+0x7e>
    }
    else
    {
        currentModulation = MODULATION_FSK;
    9d66:	230d      	movs	r3, #13
    9d68:	18fb      	adds	r3, r7, r3
    9d6a:	2200      	movs	r2, #0
    9d6c:	701a      	strb	r2, [r3, #0]
    }

    currentMode = opMode & 0x07;
    9d6e:	230c      	movs	r3, #12
    9d70:	18fb      	adds	r3, r7, r3
    9d72:	220f      	movs	r2, #15
    9d74:	18ba      	adds	r2, r7, r2
    9d76:	7812      	ldrb	r2, [r2, #0]
    9d78:	2107      	movs	r1, #7
    9d7a:	400a      	ands	r2, r1
    9d7c:	701a      	strb	r2, [r3, #0]

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    9d7e:	1dba      	adds	r2, r7, #6
    9d80:	230d      	movs	r3, #13
    9d82:	18fb      	adds	r3, r7, r3
    9d84:	7812      	ldrb	r2, [r2, #0]
    9d86:	781b      	ldrb	r3, [r3, #0]
    9d88:	429a      	cmp	r2, r3
    9d8a:	d034      	beq.n	9df6 <Radio_WriteMode+0x106>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    9d8c:	230c      	movs	r3, #12
    9d8e:	18fb      	adds	r3, r7, r3
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	2b00      	cmp	r3, #0
    9d94:	d00d      	beq.n	9db2 <Radio_WriteMode+0xc2>
        {
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    9d96:	230f      	movs	r3, #15
    9d98:	18fb      	adds	r3, r7, r3
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	2207      	movs	r2, #7
    9d9e:	4393      	bics	r3, r2
    9da0:	b2db      	uxtb	r3, r3
    9da2:	0019      	movs	r1, r3
    9da4:	2001      	movs	r0, #1
    9da6:	4b44      	ldr	r3, [pc, #272]	; (9eb8 <Radio_WriteMode+0x1c8>)
    9da8:	4798      	blx	r3
            currentMode = MODE_SLEEP;
    9daa:	230c      	movs	r3, #12
    9dac:	18fb      	adds	r3, r7, r3
    9dae:	2200      	movs	r2, #0
    9db0:	701a      	strb	r2, [r3, #0]
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    9db2:	1dbb      	adds	r3, r7, #6
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d108      	bne.n	9dcc <Radio_WriteMode+0xdc>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    9dba:	230f      	movs	r3, #15
    9dbc:	18fb      	adds	r3, r7, r3
    9dbe:	220f      	movs	r2, #15
    9dc0:	18ba      	adds	r2, r7, r2
    9dc2:	7812      	ldrb	r2, [r2, #0]
    9dc4:	2178      	movs	r1, #120	; 0x78
    9dc6:	400a      	ands	r2, r1
    9dc8:	701a      	strb	r2, [r3, #0]
    9dca:	e00d      	b.n	9de8 <Radio_WriteMode+0xf8>
        }
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
    9dcc:	230f      	movs	r3, #15
    9dce:	18fb      	adds	r3, r7, r3
    9dd0:	781b      	ldrb	r3, [r3, #0]
    9dd2:	b25b      	sxtb	r3, r3
    9dd4:	2278      	movs	r2, #120	; 0x78
    9dd6:	4013      	ands	r3, r2
    9dd8:	b25b      	sxtb	r3, r3
    9dda:	2280      	movs	r2, #128	; 0x80
    9ddc:	4252      	negs	r2, r2
    9dde:	4313      	orrs	r3, r2
    9de0:	b25a      	sxtb	r2, r3
    9de2:	230f      	movs	r3, #15
    9de4:	18fb      	adds	r3, r7, r3
    9de6:	701a      	strb	r2, [r3, #0]
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9de8:	230f      	movs	r3, #15
    9dea:	18fb      	adds	r3, r7, r3
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	0019      	movs	r1, r3
    9df0:	2001      	movs	r0, #1
    9df2:	4b31      	ldr	r3, [pc, #196]	; (9eb8 <Radio_WriteMode+0x1c8>)
    9df4:	4798      	blx	r3

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    9df6:	1dfa      	adds	r2, r7, #7
    9df8:	230c      	movs	r3, #12
    9dfa:	18fb      	adds	r3, r7, r3
    9dfc:	7812      	ldrb	r2, [r2, #0]
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	429a      	cmp	r2, r3
    9e02:	d053      	beq.n	9eac <Radio_WriteMode+0x1bc>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    9e04:	1dfb      	adds	r3, r7, #7
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	2b00      	cmp	r3, #0
    9e0a:	d026      	beq.n	9e5a <Radio_WriteMode+0x16a>
    9e0c:	1d7b      	adds	r3, r7, #5
    9e0e:	781b      	ldrb	r3, [r3, #0]
    9e10:	2b01      	cmp	r3, #1
    9e12:	d122      	bne.n	9e5a <Radio_WriteMode+0x16a>
        {
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    9e14:	230e      	movs	r3, #14
    9e16:	18fc      	adds	r4, r7, r3
    9e18:	2041      	movs	r0, #65	; 0x41
    9e1a:	4b26      	ldr	r3, [pc, #152]	; (9eb4 <Radio_WriteMode+0x1c4>)
    9e1c:	4798      	blx	r3
    9e1e:	0003      	movs	r3, r0
    9e20:	7023      	strb	r3, [r4, #0]
            if (MODULATION_FSK == newModulation)
    9e22:	1dbb      	adds	r3, r7, #6
    9e24:	781b      	ldrb	r3, [r3, #0]
    9e26:	2b00      	cmp	r3, #0
    9e28:	d108      	bne.n	9e3c <Radio_WriteMode+0x14c>
            {
                // FSK mode
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    9e2a:	230e      	movs	r3, #14
    9e2c:	18fb      	adds	r3, r7, r3
    9e2e:	220e      	movs	r2, #14
    9e30:	18ba      	adds	r2, r7, r2
    9e32:	7812      	ldrb	r2, [r2, #0]
    9e34:	2130      	movs	r1, #48	; 0x30
    9e36:	430a      	orrs	r2, r1
    9e38:	701a      	strb	r2, [r3, #0]
    9e3a:	e007      	b.n	9e4c <Radio_WriteMode+0x15c>
            }
            else
            {
                // LoRa mode
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    9e3c:	230e      	movs	r3, #14
    9e3e:	18fb      	adds	r3, r7, r3
    9e40:	220e      	movs	r2, #14
    9e42:	18ba      	adds	r2, r7, r2
    9e44:	7812      	ldrb	r2, [r2, #0]
    9e46:	2130      	movs	r1, #48	; 0x30
    9e48:	438a      	bics	r2, r1
    9e4a:	701a      	strb	r2, [r3, #0]
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    9e4c:	230e      	movs	r3, #14
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	781b      	ldrb	r3, [r3, #0]
    9e52:	0019      	movs	r1, r3
    9e54:	2041      	movs	r0, #65	; 0x41
    9e56:	4b18      	ldr	r3, [pc, #96]	; (9eb8 <Radio_WriteMode+0x1c8>)
    9e58:	4798      	blx	r3
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    9e5a:	230f      	movs	r3, #15
    9e5c:	18fb      	adds	r3, r7, r3
    9e5e:	220f      	movs	r2, #15
    9e60:	18ba      	adds	r2, r7, r2
    9e62:	7812      	ldrb	r2, [r2, #0]
    9e64:	2107      	movs	r1, #7
    9e66:	438a      	bics	r2, r1
    9e68:	701a      	strb	r2, [r3, #0]
        opMode |= newMode;              // Set new mode bits
    9e6a:	230f      	movs	r3, #15
    9e6c:	18fb      	adds	r3, r7, r3
    9e6e:	220f      	movs	r2, #15
    9e70:	18b9      	adds	r1, r7, r2
    9e72:	1dfa      	adds	r2, r7, #7
    9e74:	7809      	ldrb	r1, [r1, #0]
    9e76:	7812      	ldrb	r2, [r2, #0]
    9e78:	430a      	orrs	r2, r1
    9e7a:	701a      	strb	r2, [r3, #0]
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    9e7c:	230f      	movs	r3, #15
    9e7e:	18fb      	adds	r3, r7, r3
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	0019      	movs	r1, r3
    9e84:	2001      	movs	r0, #1
    9e86:	4b0c      	ldr	r3, [pc, #48]	; (9eb8 <Radio_WriteMode+0x1c8>)
    9e88:	4798      	blx	r3

        // If required and possible, wait for switch to complete
        if (1 == blocking)
    9e8a:	1d7b      	adds	r3, r7, #5
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	2b01      	cmp	r3, #1
    9e90:	d10c      	bne.n	9eac <Radio_WriteMode+0x1bc>
        {
            if (MODE_SLEEP != newMode)
    9e92:	1dfb      	adds	r3, r7, #7
    9e94:	781b      	ldrb	r3, [r3, #0]
    9e96:	2b00      	cmp	r3, #0
    9e98:	d003      	beq.n	9ea2 <Radio_WriteMode+0x1b2>
            {
               // while (HAL_DIO5PinValue() == 0);
			   /* Wait for Mode change to happen */
			   delay_ms(1);
    9e9a:	2001      	movs	r0, #1
    9e9c:	4b07      	ldr	r3, [pc, #28]	; (9ebc <Radio_WriteMode+0x1cc>)
    9e9e:	4798      	blx	r3
    9ea0:	e004      	b.n	9eac <Radio_WriteMode+0x1bc>
            }
            else
            {
                SystemBlockingWaitMs(1);
    9ea2:	2001      	movs	r0, #1
    9ea4:	4b06      	ldr	r3, [pc, #24]	; (9ec0 <Radio_WriteMode+0x1d0>)
    9ea6:	4798      	blx	r3
    9ea8:	e000      	b.n	9eac <Radio_WriteMode+0x1bc>
        return;
    9eaa:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
#endif
}
    9eac:	46bd      	mov	sp, r7
    9eae:	b005      	add	sp, #20
    9eb0:	bd90      	pop	{r4, r7, pc}
    9eb2:	46c0      	nop			; (mov r8, r8)
    9eb4:	0000762d 	.word	0x0000762d
    9eb8:	000075e1 	.word	0x000075e1
    9ebc:	000001d1 	.word	0x000001d1
    9ec0:	00007d99 	.word	0x00007d99

00009ec4 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    9ec4:	b580      	push	{r7, lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	af00      	add	r7, sp, #0
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    9eca:	2012      	movs	r0, #18
    9ecc:	4b11      	ldr	r3, [pc, #68]	; (9f14 <RADIO_FHSSChangeChannel+0x50>)
    9ece:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    9ed0:	4b11      	ldr	r3, [pc, #68]	; (9f18 <RADIO_FHSSChangeChannel+0x54>)
    9ed2:	8adb      	ldrh	r3, [r3, #22]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d014      	beq.n	9f02 <RADIO_FHSSChangeChannel+0x3e>
    {
        if ((radioConfiguration.radioCallback) &&
    9ed8:	4b0f      	ldr	r3, [pc, #60]	; (9f18 <RADIO_FHSSChangeChannel+0x54>)
    9eda:	691b      	ldr	r3, [r3, #16]
    9edc:	2b00      	cmp	r3, #0
    9ede:	d010      	beq.n	9f02 <RADIO_FHSSChangeChannel+0x3e>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    9ee0:	4b0e      	ldr	r3, [pc, #56]	; (9f1c <RADIO_FHSSChangeChannel+0x58>)
    9ee2:	781b      	ldrb	r3, [r3, #0]
    9ee4:	069b      	lsls	r3, r3, #26
    9ee6:	0fdb      	lsrs	r3, r3, #31
    9ee8:	b2db      	uxtb	r3, r3
        if ((radioConfiguration.radioCallback) &&
    9eea:	2b01      	cmp	r3, #1
    9eec:	d109      	bne.n	9f02 <RADIO_FHSSChangeChannel+0x3e>
        {
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    9eee:	4b0a      	ldr	r3, [pc, #40]	; (9f18 <RADIO_FHSSChangeChannel+0x54>)
    9ef0:	691b      	ldr	r3, [r3, #16]
    9ef2:	1d3a      	adds	r2, r7, #4
    9ef4:	0011      	movs	r1, r2
    9ef6:	2020      	movs	r0, #32
    9ef8:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	0018      	movs	r0, r3
    9efe:	4b08      	ldr	r3, [pc, #32]	; (9f20 <RADIO_FHSSChangeChannel+0x5c>)
    9f00:	4798      	blx	r3
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    9f02:	2102      	movs	r1, #2
    9f04:	2012      	movs	r0, #18
    9f06:	4b07      	ldr	r3, [pc, #28]	; (9f24 <RADIO_FHSSChangeChannel+0x60>)
    9f08:	4798      	blx	r3
}
    9f0a:	46c0      	nop			; (mov r8, r8)
    9f0c:	46bd      	mov	sp, r7
    9f0e:	b002      	add	sp, #8
    9f10:	bd80      	pop	{r7, pc}
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	0000762d 	.word	0x0000762d
    9f18:	20001280 	.word	0x20001280
    9f1c:	200018fa 	.word	0x200018fa
    9f20:	0000d8b9 	.word	0x0000d8b9
    9f24:	000075e1 	.word	0x000075e1

00009f28 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    9f28:	b580      	push	{r7, lr}
    9f2a:	b082      	sub	sp, #8
    9f2c:	af00      	add	r7, sp, #0
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
    9f2e:	1d3b      	adds	r3, r7, #4
    9f30:	2200      	movs	r2, #0
    9f32:	801a      	strh	r2, [r3, #0]
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    9f34:	2000      	movs	r0, #0
    9f36:	4b27      	ldr	r3, [pc, #156]	; (9fd4 <RADIO_ReadRandom+0xac>)
    9f38:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    9f3a:	4b27      	ldr	r3, [pc, #156]	; (9fd8 <RADIO_ReadRandom+0xb0>)
    9f3c:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9f3e:	2201      	movs	r2, #1
    9f40:	2101      	movs	r1, #1
    9f42:	2000      	movs	r0, #0
    9f44:	4b25      	ldr	r3, [pc, #148]	; (9fdc <RADIO_ReadRandom+0xb4>)
    9f46:	4798      	blx	r3
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    9f48:	21ff      	movs	r1, #255	; 0xff
    9f4a:	2011      	movs	r0, #17
    9f4c:	4b24      	ldr	r3, [pc, #144]	; (9fe0 <RADIO_ReadRandom+0xb8>)
    9f4e:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    9f50:	2201      	movs	r2, #1
    9f52:	2101      	movs	r1, #1
    9f54:	2005      	movs	r0, #5
    9f56:	4b21      	ldr	r3, [pc, #132]	; (9fdc <RADIO_ReadRandom+0xb4>)
    9f58:	4798      	blx	r3
    for (i = 0; i < 16; i++)
    9f5a:	1dfb      	adds	r3, r7, #7
    9f5c:	2200      	movs	r2, #0
    9f5e:	701a      	strb	r2, [r3, #0]
    9f60:	e01b      	b.n	9f9a <RADIO_ReadRandom+0x72>
    {
        SystemBlockingWaitMs(1);
    9f62:	2001      	movs	r0, #1
    9f64:	4b1f      	ldr	r3, [pc, #124]	; (9fe4 <RADIO_ReadRandom+0xbc>)
    9f66:	4798      	blx	r3
        retVal <<= SHIFT1;
    9f68:	1d3a      	adds	r2, r7, #4
    9f6a:	1d3b      	adds	r3, r7, #4
    9f6c:	881b      	ldrh	r3, [r3, #0]
    9f6e:	18db      	adds	r3, r3, r3
    9f70:	8013      	strh	r3, [r2, #0]
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    9f72:	202c      	movs	r0, #44	; 0x2c
    9f74:	4b1c      	ldr	r3, [pc, #112]	; (9fe8 <RADIO_ReadRandom+0xc0>)
    9f76:	4798      	blx	r3
    9f78:	0003      	movs	r3, r0
    9f7a:	001a      	movs	r2, r3
    9f7c:	2301      	movs	r3, #1
    9f7e:	4013      	ands	r3, r2
    9f80:	b21a      	sxth	r2, r3
    9f82:	1d3b      	adds	r3, r7, #4
    9f84:	2100      	movs	r1, #0
    9f86:	5e5b      	ldrsh	r3, [r3, r1]
    9f88:	4313      	orrs	r3, r2
    9f8a:	b21a      	sxth	r2, r3
    9f8c:	1d3b      	adds	r3, r7, #4
    9f8e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < 16; i++)
    9f90:	1dfb      	adds	r3, r7, #7
    9f92:	781a      	ldrb	r2, [r3, #0]
    9f94:	1dfb      	adds	r3, r7, #7
    9f96:	3201      	adds	r2, #1
    9f98:	701a      	strb	r2, [r3, #0]
    9f9a:	1dfb      	adds	r3, r7, #7
    9f9c:	781b      	ldrb	r3, [r3, #0]
    9f9e:	2b0f      	cmp	r3, #15
    9fa0:	d9df      	bls.n	9f62 <RADIO_ReadRandom+0x3a>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    9fa2:	2000      	movs	r0, #0
    9fa4:	4b11      	ldr	r3, [pc, #68]	; (9fec <RADIO_ReadRandom+0xc4>)
    9fa6:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    9fa8:	2201      	movs	r2, #1
    9faa:	2101      	movs	r1, #1
    9fac:	2000      	movs	r0, #0
    9fae:	4b0b      	ldr	r3, [pc, #44]	; (9fdc <RADIO_ReadRandom+0xb4>)
    9fb0:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    9fb2:	21ff      	movs	r1, #255	; 0xff
    9fb4:	2012      	movs	r0, #18
    9fb6:	4b0a      	ldr	r3, [pc, #40]	; (9fe0 <RADIO_ReadRandom+0xb8>)
    9fb8:	4798      	blx	r3
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    9fba:	2100      	movs	r1, #0
    9fbc:	2011      	movs	r0, #17
    9fbe:	4b08      	ldr	r3, [pc, #32]	; (9fe0 <RADIO_ReadRandom+0xb8>)
    9fc0:	4798      	blx	r3
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    9fc2:	4b0b      	ldr	r3, [pc, #44]	; (9ff0 <RADIO_ReadRandom+0xc8>)
    9fc4:	4798      	blx	r3
	
    return retVal;
    9fc6:	1d3b      	adds	r3, r7, #4
    9fc8:	881b      	ldrh	r3, [r3, #0]
}
    9fca:	0018      	movs	r0, r3
    9fcc:	46bd      	mov	sp, r7
    9fce:	b002      	add	sp, #8
    9fd0:	bd80      	pop	{r7, pc}
    9fd2:	46c0      	nop			; (mov r8, r8)
    9fd4:	0000dd41 	.word	0x0000dd41
    9fd8:	0000e079 	.word	0x0000e079
    9fdc:	00009cf1 	.word	0x00009cf1
    9fe0:	000075e1 	.word	0x000075e1
    9fe4:	00007d99 	.word	0x00007d99
    9fe8:	0000762d 	.word	0x0000762d
    9fec:	0000dd75 	.word	0x0000dd75
    9ff0:	0000e0ad 	.word	0x0000e0ad

00009ff4 <cpu_irq_save>:
{
    9ff4:	b580      	push	{r7, lr}
    9ff6:	b082      	sub	sp, #8
    9ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9ffa:	f3ef 8310 	mrs	r3, PRIMASK
    9ffe:	607b      	str	r3, [r7, #4]
  return(result);
    a000:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    a002:	425a      	negs	r2, r3
    a004:	4153      	adcs	r3, r2
    a006:	b2db      	uxtb	r3, r3
    a008:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    a00a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    a00c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    a010:	4b03      	ldr	r3, [pc, #12]	; (a020 <cpu_irq_save+0x2c>)
    a012:	2200      	movs	r2, #0
    a014:	701a      	strb	r2, [r3, #0]
	return flags;
    a016:	683b      	ldr	r3, [r7, #0]
}
    a018:	0018      	movs	r0, r3
    a01a:	46bd      	mov	sp, r7
    a01c:	b002      	add	sp, #8
    a01e:	bd80      	pop	{r7, pc}
    a020:	20000008 	.word	0x20000008

0000a024 <cpu_irq_is_enabled_flags>:
{
    a024:	b580      	push	{r7, lr}
    a026:	b082      	sub	sp, #8
    a028:	af00      	add	r7, sp, #0
    a02a:	6078      	str	r0, [r7, #4]
	return (flags);
    a02c:	687b      	ldr	r3, [r7, #4]
    a02e:	1e5a      	subs	r2, r3, #1
    a030:	4193      	sbcs	r3, r2
    a032:	b2db      	uxtb	r3, r3
}
    a034:	0018      	movs	r0, r3
    a036:	46bd      	mov	sp, r7
    a038:	b002      	add	sp, #8
    a03a:	bd80      	pop	{r7, pc}

0000a03c <cpu_irq_restore>:
{
    a03c:	b580      	push	{r7, lr}
    a03e:	b082      	sub	sp, #8
    a040:	af00      	add	r7, sp, #0
    a042:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    a044:	687b      	ldr	r3, [r7, #4]
    a046:	0018      	movs	r0, r3
    a048:	4b06      	ldr	r3, [pc, #24]	; (a064 <cpu_irq_restore+0x28>)
    a04a:	4798      	blx	r3
    a04c:	1e03      	subs	r3, r0, #0
    a04e:	d005      	beq.n	a05c <cpu_irq_restore+0x20>
		cpu_irq_enable();
    a050:	4b05      	ldr	r3, [pc, #20]	; (a068 <cpu_irq_restore+0x2c>)
    a052:	2201      	movs	r2, #1
    a054:	701a      	strb	r2, [r3, #0]
    a056:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    a05a:	b662      	cpsie	i
}
    a05c:	46c0      	nop			; (mov r8, r8)
    a05e:	46bd      	mov	sp, r7
    a060:	b002      	add	sp, #8
    a062:	bd80      	pop	{r7, pc}
    a064:	0000a025 	.word	0x0000a025
    a068:	20000008 	.word	0x20000008

0000a06c <system_interrupt_enable>:
{
    a06c:	b580      	push	{r7, lr}
    a06e:	b082      	sub	sp, #8
    a070:	af00      	add	r7, sp, #0
    a072:	0002      	movs	r2, r0
    a074:	1dfb      	adds	r3, r7, #7
    a076:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a078:	4b06      	ldr	r3, [pc, #24]	; (a094 <system_interrupt_enable+0x28>)
    a07a:	1dfa      	adds	r2, r7, #7
    a07c:	7812      	ldrb	r2, [r2, #0]
    a07e:	0011      	movs	r1, r2
    a080:	221f      	movs	r2, #31
    a082:	400a      	ands	r2, r1
    a084:	2101      	movs	r1, #1
    a086:	4091      	lsls	r1, r2
    a088:	000a      	movs	r2, r1
    a08a:	601a      	str	r2, [r3, #0]
}
    a08c:	46c0      	nop			; (mov r8, r8)
    a08e:	46bd      	mov	sp, r7
    a090:	b002      	add	sp, #8
    a092:	bd80      	pop	{r7, pc}
    a094:	e000e100 	.word	0xe000e100

0000a098 <tc_is_syncing>:
{
    a098:	b580      	push	{r7, lr}
    a09a:	b084      	sub	sp, #16
    a09c:	af00      	add	r7, sp, #0
    a09e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a0a0:	687b      	ldr	r3, [r7, #4]
    a0a2:	681b      	ldr	r3, [r3, #0]
    a0a4:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
    a0a6:	68fb      	ldr	r3, [r7, #12]
    a0a8:	691b      	ldr	r3, [r3, #16]
    a0aa:	1e5a      	subs	r2, r3, #1
    a0ac:	4193      	sbcs	r3, r2
    a0ae:	b2db      	uxtb	r3, r3
}
    a0b0:	0018      	movs	r0, r3
    a0b2:	46bd      	mov	sp, r7
    a0b4:	b004      	add	sp, #16
    a0b6:	bd80      	pop	{r7, pc}

0000a0b8 <tc_get_config_defaults>:
{
    a0b8:	b580      	push	{r7, lr}
    a0ba:	b082      	sub	sp, #8
    a0bc:	af00      	add	r7, sp, #0
    a0be:	6078      	str	r0, [r7, #4]
	config->clock_source               = GCLK_GENERATOR_0;
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	2200      	movs	r2, #0
    a0c4:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a0c6:	687b      	ldr	r3, [r7, #4]
    a0c8:	2200      	movs	r2, #0
    a0ca:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	2200      	movs	r2, #0
    a0d0:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a0d2:	687b      	ldr	r3, [r7, #4]
    a0d4:	2200      	movs	r2, #0
    a0d6:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	2200      	movs	r2, #0
    a0dc:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	2200      	movs	r2, #0
    a0e2:	705a      	strb	r2, [r3, #1]
	config->on_demand                  = false;
    a0e4:	687b      	ldr	r3, [r7, #4]
    a0e6:	2200      	movs	r2, #0
    a0e8:	709a      	strb	r2, [r3, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a0ea:	687b      	ldr	r3, [r7, #4]
    a0ec:	2200      	movs	r2, #0
    a0ee:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	2200      	movs	r2, #0
    a0f4:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	2200      	movs	r2, #0
    a0fa:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	2200      	movs	r2, #0
    a100:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a102:	687b      	ldr	r3, [r7, #4]
    a104:	2200      	movs	r2, #0
    a106:	731a      	strb	r2, [r3, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	2200      	movs	r2, #0
    a10c:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    a10e:	687b      	ldr	r3, [r7, #4]
    a110:	2200      	movs	r2, #0
    a112:	735a      	strb	r2, [r3, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	2200      	movs	r2, #0
    a118:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a11a:	687b      	ldr	r3, [r7, #4]
    a11c:	2200      	movs	r2, #0
    a11e:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a120:	687b      	ldr	r3, [r7, #4]
    a122:	2200      	movs	r2, #0
    a124:	619a      	str	r2, [r3, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a126:	687b      	ldr	r3, [r7, #4]
    a128:	2200      	movs	r2, #0
    a12a:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	2200      	movs	r2, #0
    a130:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	2200      	movs	r2, #0
    a136:	625a      	str	r2, [r3, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    a138:	687b      	ldr	r3, [r7, #4]
    a13a:	2200      	movs	r2, #0
    a13c:	851a      	strh	r2, [r3, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    a13e:	687b      	ldr	r3, [r7, #4]
    a140:	2200      	movs	r2, #0
    a142:	855a      	strh	r2, [r3, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	2200      	movs	r2, #0
    a148:	859a      	strh	r2, [r3, #44]	; 0x2c
	config->double_buffering_enabled = false;
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	2234      	movs	r2, #52	; 0x34
    a14e:	2100      	movs	r1, #0
    a150:	5499      	strb	r1, [r3, r2]
}
    a152:	46c0      	nop			; (mov r8, r8)
    a154:	46bd      	mov	sp, r7
    a156:	b002      	add	sp, #8
    a158:	bd80      	pop	{r7, pc}
	...

0000a15c <tc_enable>:
{
    a15c:	b580      	push	{r7, lr}
    a15e:	b084      	sub	sp, #16
    a160:	af00      	add	r7, sp, #0
    a162:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a164:	687b      	ldr	r3, [r7, #4]
    a166:	681b      	ldr	r3, [r3, #0]
    a168:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
    a16a:	46c0      	nop			; (mov r8, r8)
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	0018      	movs	r0, r3
    a170:	4b06      	ldr	r3, [pc, #24]	; (a18c <tc_enable+0x30>)
    a172:	4798      	blx	r3
    a174:	1e03      	subs	r3, r0, #0
    a176:	d1f9      	bne.n	a16c <tc_enable+0x10>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a178:	68fb      	ldr	r3, [r7, #12]
    a17a:	681b      	ldr	r3, [r3, #0]
    a17c:	2202      	movs	r2, #2
    a17e:	431a      	orrs	r2, r3
    a180:	68fb      	ldr	r3, [r7, #12]
    a182:	601a      	str	r2, [r3, #0]
}
    a184:	46c0      	nop			; (mov r8, r8)
    a186:	46bd      	mov	sp, r7
    a188:	b004      	add	sp, #16
    a18a:	bd80      	pop	{r7, pc}
    a18c:	0000a099 	.word	0x0000a099

0000a190 <tc_clear_status>:
 * \param[in] status_flags  Bitmask of \c TC_STATUS_* flags to clear
 */
static inline void tc_clear_status(
		struct tc_module *const module_inst,
		const uint32_t status_flags)
{
    a190:	b580      	push	{r7, lr}
    a192:	b084      	sub	sp, #16
    a194:	af00      	add	r7, sp, #0
    a196:	6078      	str	r0, [r7, #4]
    a198:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	681b      	ldr	r3, [r3, #0]
    a19e:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    a1a0:	2300      	movs	r3, #0
    a1a2:	60fb      	str	r3, [r7, #12]

	/* Check for TC channel 0 match */
	if (status_flags & TC_STATUS_CHANNEL_0_MATCH) {
    a1a4:	683b      	ldr	r3, [r7, #0]
    a1a6:	2201      	movs	r2, #1
    a1a8:	4013      	ands	r3, r2
    a1aa:	d003      	beq.n	a1b4 <tc_clear_status+0x24>
		int_flags |= TC_INTFLAG_MC(1);
    a1ac:	68fb      	ldr	r3, [r7, #12]
    a1ae:	2210      	movs	r2, #16
    a1b0:	4313      	orrs	r3, r2
    a1b2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC channel 1 match */
	if (status_flags & TC_STATUS_CHANNEL_1_MATCH) {
    a1b4:	683b      	ldr	r3, [r7, #0]
    a1b6:	2202      	movs	r2, #2
    a1b8:	4013      	ands	r3, r2
    a1ba:	d003      	beq.n	a1c4 <tc_clear_status+0x34>
		int_flags |= TC_INTFLAG_MC(2);
    a1bc:	68fb      	ldr	r3, [r7, #12]
    a1be:	2220      	movs	r2, #32
    a1c0:	4313      	orrs	r3, r2
    a1c2:	60fb      	str	r3, [r7, #12]
		int_flags |= TC_INTFLAG_SYNCRDY;
	}
#endif

	/* Check for TC capture overflow */
	if (status_flags & TC_STATUS_CAPTURE_OVERFLOW) {
    a1c4:	683b      	ldr	r3, [r7, #0]
    a1c6:	2208      	movs	r2, #8
    a1c8:	4013      	ands	r3, r2
    a1ca:	d003      	beq.n	a1d4 <tc_clear_status+0x44>
		int_flags |= TC_INTFLAG_ERR;
    a1cc:	68fb      	ldr	r3, [r7, #12]
    a1ce:	2202      	movs	r2, #2
    a1d0:	4313      	orrs	r3, r2
    a1d2:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC count overflow */
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
    a1d4:	683b      	ldr	r3, [r7, #0]
    a1d6:	2210      	movs	r2, #16
    a1d8:	4013      	ands	r3, r2
    a1da:	d003      	beq.n	a1e4 <tc_clear_status+0x54>
		int_flags |= TC_INTFLAG_OVF;
    a1dc:	68fb      	ldr	r3, [r7, #12]
    a1de:	2201      	movs	r2, #1
    a1e0:	4313      	orrs	r3, r2
    a1e2:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    a1e4:	68fb      	ldr	r3, [r7, #12]
    a1e6:	b2da      	uxtb	r2, r3
    a1e8:	68bb      	ldr	r3, [r7, #8]
    a1ea:	729a      	strb	r2, [r3, #10]
}
    a1ec:	46c0      	nop			; (mov r8, r8)
    a1ee:	46bd      	mov	sp, r7
    a1f0:	b004      	add	sp, #16
    a1f2:	bd80      	pop	{r7, pc}

0000a1f4 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    a1f4:	b580      	push	{r7, lr}
    a1f6:	b082      	sub	sp, #8
    a1f8:	af00      	add	r7, sp, #0
    a1fa:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    a1fc:	4a04      	ldr	r2, [pc, #16]	; (a210 <_tc_interrupt_get_interrupt_vector+0x1c>)
    a1fe:	687b      	ldr	r3, [r7, #4]
    a200:	18d3      	adds	r3, r2, r3
    a202:	781b      	ldrb	r3, [r3, #0]
    a204:	b25b      	sxtb	r3, r3
}
    a206:	0018      	movs	r0, r3
    a208:	46bd      	mov	sp, r7
    a20a:	b002      	add	sp, #8
    a20c:	bd80      	pop	{r7, pc}
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	2000000c 	.word	0x2000000c

0000a214 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
    a214:	b580      	push	{r7, lr}
    a216:	b082      	sub	sp, #8
    a218:	af00      	add	r7, sp, #0
    a21a:	6078      	str	r0, [r7, #4]
    a21c:	000a      	movs	r2, r1
    a21e:	1cfb      	adds	r3, r7, #3
    a220:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    a222:	687b      	ldr	r3, [r7, #4]
    a224:	681b      	ldr	r3, [r3, #0]
    a226:	0018      	movs	r0, r3
    a228:	4b22      	ldr	r3, [pc, #136]	; (a2b4 <tc_enable_callback+0xa0>)
    a22a:	4798      	blx	r3
    a22c:	0003      	movs	r3, r0
    a22e:	0018      	movs	r0, r3
    a230:	4b21      	ldr	r3, [pc, #132]	; (a2b8 <tc_enable_callback+0xa4>)
    a232:	4798      	blx	r3
    a234:	0003      	movs	r3, r0
    a236:	0018      	movs	r0, r3
    a238:	4b20      	ldr	r3, [pc, #128]	; (a2bc <tc_enable_callback+0xa8>)
    a23a:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    a23c:	1cfb      	adds	r3, r7, #3
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	2b02      	cmp	r3, #2
    a242:	d10b      	bne.n	a25c <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    a244:	687b      	ldr	r3, [r7, #4]
    a246:	7e5b      	ldrb	r3, [r3, #25]
    a248:	2210      	movs	r2, #16
    a24a:	4313      	orrs	r3, r2
    a24c:	b2da      	uxtb	r2, r3
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    a252:	687b      	ldr	r3, [r7, #4]
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	2210      	movs	r2, #16
    a258:	725a      	strb	r2, [r3, #9]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
    a25a:	e026      	b.n	a2aa <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    a25c:	1cfb      	adds	r3, r7, #3
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	2b03      	cmp	r3, #3
    a262:	d10b      	bne.n	a27c <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    a264:	687b      	ldr	r3, [r7, #4]
    a266:	7e5b      	ldrb	r3, [r3, #25]
    a268:	2220      	movs	r2, #32
    a26a:	4313      	orrs	r3, r2
    a26c:	b2da      	uxtb	r2, r3
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    a272:	687b      	ldr	r3, [r7, #4]
    a274:	681b      	ldr	r3, [r3, #0]
    a276:	2220      	movs	r2, #32
    a278:	725a      	strb	r2, [r3, #9]
}
    a27a:	e016      	b.n	a2aa <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	7e5b      	ldrb	r3, [r3, #25]
    a280:	b25a      	sxtb	r2, r3
    a282:	1cfb      	adds	r3, r7, #3
    a284:	781b      	ldrb	r3, [r3, #0]
    a286:	2101      	movs	r1, #1
    a288:	4099      	lsls	r1, r3
    a28a:	000b      	movs	r3, r1
    a28c:	b25b      	sxtb	r3, r3
    a28e:	4313      	orrs	r3, r2
    a290:	b25b      	sxtb	r3, r3
    a292:	b2da      	uxtb	r2, r3
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	681b      	ldr	r3, [r3, #0]
    a29c:	1cfa      	adds	r2, r7, #3
    a29e:	7812      	ldrb	r2, [r2, #0]
    a2a0:	2101      	movs	r1, #1
    a2a2:	4091      	lsls	r1, r2
    a2a4:	000a      	movs	r2, r1
    a2a6:	b2d2      	uxtb	r2, r2
    a2a8:	725a      	strb	r2, [r3, #9]
}
    a2aa:	46c0      	nop			; (mov r8, r8)
    a2ac:	46bd      	mov	sp, r7
    a2ae:	b002      	add	sp, #8
    a2b0:	bd80      	pop	{r7, pc}
    a2b2:	46c0      	nop			; (mov r8, r8)
    a2b4:	00006455 	.word	0x00006455
    a2b8:	0000a1f5 	.word	0x0000a1f5
    a2bc:	0000a06d 	.word	0x0000a06d

0000a2c0 <tc_disable_callback>:
 * \param[in]     module        Pointer to TC software instance struct
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_disable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type){
    a2c0:	b580      	push	{r7, lr}
    a2c2:	b082      	sub	sp, #8
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	6078      	str	r0, [r7, #4]
    a2c8:	000a      	movs	r2, r1
    a2ca:	1cfb      	adds	r3, r7, #3
    a2cc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    a2ce:	1cfb      	adds	r3, r7, #3
    a2d0:	781b      	ldrb	r3, [r3, #0]
    a2d2:	2b02      	cmp	r3, #2
    a2d4:	d10b      	bne.n	a2ee <tc_disable_callback+0x2e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    a2d6:	687b      	ldr	r3, [r7, #4]
    a2d8:	681b      	ldr	r3, [r3, #0]
    a2da:	2210      	movs	r2, #16
    a2dc:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    a2de:	687b      	ldr	r3, [r7, #4]
    a2e0:	7e5b      	ldrb	r3, [r3, #25]
    a2e2:	2210      	movs	r2, #16
    a2e4:	4393      	bics	r3, r2
    a2e6:	b2da      	uxtb	r2, r3
    a2e8:	687b      	ldr	r3, [r7, #4]
    a2ea:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
    a2ec:	e028      	b.n	a340 <tc_disable_callback+0x80>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    a2ee:	1cfb      	adds	r3, r7, #3
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	2b03      	cmp	r3, #3
    a2f4:	d10b      	bne.n	a30e <tc_disable_callback+0x4e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
    a2f6:	687b      	ldr	r3, [r7, #4]
    a2f8:	681b      	ldr	r3, [r3, #0]
    a2fa:	2220      	movs	r2, #32
    a2fc:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
    a2fe:	687b      	ldr	r3, [r7, #4]
    a300:	7e5b      	ldrb	r3, [r3, #25]
    a302:	2220      	movs	r2, #32
    a304:	4393      	bics	r3, r2
    a306:	b2da      	uxtb	r2, r3
    a308:	687b      	ldr	r3, [r7, #4]
    a30a:	765a      	strb	r2, [r3, #25]
}
    a30c:	e018      	b.n	a340 <tc_disable_callback+0x80>
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	1cfa      	adds	r2, r7, #3
    a314:	7812      	ldrb	r2, [r2, #0]
    a316:	2101      	movs	r1, #1
    a318:	4091      	lsls	r1, r2
    a31a:	000a      	movs	r2, r1
    a31c:	b2d2      	uxtb	r2, r2
    a31e:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    a320:	687b      	ldr	r3, [r7, #4]
    a322:	7e5b      	ldrb	r3, [r3, #25]
    a324:	b25b      	sxtb	r3, r3
    a326:	1cfa      	adds	r2, r7, #3
    a328:	7812      	ldrb	r2, [r2, #0]
    a32a:	2101      	movs	r1, #1
    a32c:	4091      	lsls	r1, r2
    a32e:	000a      	movs	r2, r1
    a330:	b252      	sxtb	r2, r2
    a332:	43d2      	mvns	r2, r2
    a334:	b252      	sxtb	r2, r2
    a336:	4013      	ands	r3, r2
    a338:	b25b      	sxtb	r3, r3
    a33a:	b2da      	uxtb	r2, r3
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	765a      	strb	r2, [r3, #25]
}
    a340:	46c0      	nop			; (mov r8, r8)
    a342:	46bd      	mov	sp, r7
    a344:	b002      	add	sp, #8
    a346:	bd80      	pop	{r7, pc}

0000a348 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
    a348:	b580      	push	{r7, lr}
    a34a:	af00      	add	r7, sp, #0
	return ((uint16_t)tc_get_count_value(&module_inst));
    a34c:	4b04      	ldr	r3, [pc, #16]	; (a360 <tmr_read_count+0x18>)
    a34e:	0018      	movs	r0, r3
    a350:	4b04      	ldr	r3, [pc, #16]	; (a364 <tmr_read_count+0x1c>)
    a352:	4798      	blx	r3
    a354:	0003      	movs	r3, r0
    a356:	b29b      	uxth	r3, r3
}
    a358:	0018      	movs	r0, r3
    a35a:	46bd      	mov	sp, r7
    a35c:	bd80      	pop	{r7, pc}
    a35e:	46c0      	nop			; (mov r8, r8)
    a360:	20001314 	.word	0x20001314
    a364:	00006949 	.word	0x00006949

0000a368 <tmr_disable_cc_interrupt>:

/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
    a368:	b580      	push	{r7, lr}
    a36a:	af00      	add	r7, sp, #0
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    a36c:	4b03      	ldr	r3, [pc, #12]	; (a37c <tmr_disable_cc_interrupt+0x14>)
    a36e:	2102      	movs	r1, #2
    a370:	0018      	movs	r0, r3
    a372:	4b03      	ldr	r3, [pc, #12]	; (a380 <tmr_disable_cc_interrupt+0x18>)
    a374:	4798      	blx	r3
}
    a376:	46c0      	nop			; (mov r8, r8)
    a378:	46bd      	mov	sp, r7
    a37a:	bd80      	pop	{r7, pc}
    a37c:	20001314 	.word	0x20001314
    a380:	0000a2c1 	.word	0x0000a2c1

0000a384 <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
    a384:	b580      	push	{r7, lr}
    a386:	af00      	add	r7, sp, #0
	tc_clear_status(&module_inst, TC_STATUS_CHANNEL_0_MATCH);
    a388:	4b06      	ldr	r3, [pc, #24]	; (a3a4 <tmr_enable_cc_interrupt+0x20>)
    a38a:	2101      	movs	r1, #1
    a38c:	0018      	movs	r0, r3
    a38e:	4b06      	ldr	r3, [pc, #24]	; (a3a8 <tmr_enable_cc_interrupt+0x24>)
    a390:	4798      	blx	r3
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
    a392:	4b04      	ldr	r3, [pc, #16]	; (a3a4 <tmr_enable_cc_interrupt+0x20>)
    a394:	2102      	movs	r1, #2
    a396:	0018      	movs	r0, r3
    a398:	4b04      	ldr	r3, [pc, #16]	; (a3ac <tmr_enable_cc_interrupt+0x28>)
    a39a:	4798      	blx	r3
}
    a39c:	46c0      	nop			; (mov r8, r8)
    a39e:	46bd      	mov	sp, r7
    a3a0:	bd80      	pop	{r7, pc}
    a3a2:	46c0      	nop			; (mov r8, r8)
    a3a4:	20001314 	.word	0x20001314
    a3a8:	0000a191 	.word	0x0000a191
    a3ac:	0000a215 	.word	0x0000a215

0000a3b0 <tmr_write_cmpreg>:
}

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
    a3b0:	b580      	push	{r7, lr}
    a3b2:	b082      	sub	sp, #8
    a3b4:	af00      	add	r7, sp, #0
    a3b6:	0002      	movs	r2, r0
    a3b8:	1dbb      	adds	r3, r7, #6
    a3ba:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    a3bc:	1dbb      	adds	r3, r7, #6
    a3be:	881a      	ldrh	r2, [r3, #0]
    a3c0:	4b04      	ldr	r3, [pc, #16]	; (a3d4 <tmr_write_cmpreg+0x24>)
    a3c2:	2100      	movs	r1, #0
    a3c4:	0018      	movs	r0, r3
    a3c6:	4b04      	ldr	r3, [pc, #16]	; (a3d8 <tmr_write_cmpreg+0x28>)
    a3c8:	4798      	blx	r3
			(uint32_t)compare_value);
}
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	46bd      	mov	sp, r7
    a3ce:	b002      	add	sp, #8
    a3d0:	bd80      	pop	{r7, pc}
    a3d2:	46c0      	nop			; (mov r8, r8)
    a3d4:	20001314 	.word	0x20001314
    a3d8:	000069a9 	.word	0x000069a9

0000a3dc <save_cpu_interrupt>:

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
    a3dc:	b580      	push	{r7, lr}
    a3de:	af00      	add	r7, sp, #0
	return cpu_irq_save();
    a3e0:	4b03      	ldr	r3, [pc, #12]	; (a3f0 <save_cpu_interrupt+0x14>)
    a3e2:	4798      	blx	r3
    a3e4:	0003      	movs	r3, r0
    a3e6:	b2db      	uxtb	r3, r3
}
    a3e8:	0018      	movs	r0, r3
    a3ea:	46bd      	mov	sp, r7
    a3ec:	bd80      	pop	{r7, pc}
    a3ee:	46c0      	nop			; (mov r8, r8)
    a3f0:	00009ff5 	.word	0x00009ff5

0000a3f4 <restore_cpu_interrupt>:

/*! \brief  to restore saved interrupts status
 *  \param  saved interrupt status
 */
void restore_cpu_interrupt(uint8_t flags)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b082      	sub	sp, #8
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	0002      	movs	r2, r0
    a3fc:	1dfb      	adds	r3, r7, #7
    a3fe:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore((uint32_t)flags);
    a400:	1dfb      	adds	r3, r7, #7
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	0018      	movs	r0, r3
    a406:	4b03      	ldr	r3, [pc, #12]	; (a414 <restore_cpu_interrupt+0x20>)
    a408:	4798      	blx	r3
}
    a40a:	46c0      	nop			; (mov r8, r8)
    a40c:	46bd      	mov	sp, r7
    a40e:	b002      	add	sp, #8
    a410:	bd80      	pop	{r7, pc}
    a412:	46c0      	nop			; (mov r8, r8)
    a414:	0000a03d 	.word	0x0000a03d

0000a418 <tc_ovf_callback>:

static void tc_ovf_callback(struct tc_module *const module_instance)
{
    a418:	b580      	push	{r7, lr}
    a41a:	b082      	sub	sp, #8
    a41c:	af00      	add	r7, sp, #0
    a41e:	6078      	str	r0, [r7, #4]
	tmr_ovf_callback();
    a420:	4b02      	ldr	r3, [pc, #8]	; (a42c <tc_ovf_callback+0x14>)
    a422:	4798      	blx	r3
}
    a424:	46c0      	nop			; (mov r8, r8)
    a426:	46bd      	mov	sp, r7
    a428:	b002      	add	sp, #8
    a42a:	bd80      	pop	{r7, pc}
    a42c:	0000bb85 	.word	0x0000bb85

0000a430 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    a430:	b580      	push	{r7, lr}
    a432:	b082      	sub	sp, #8
    a434:	af00      	add	r7, sp, #0
    a436:	6078      	str	r0, [r7, #4]
	tmr_cca_callback();
    a438:	4b02      	ldr	r3, [pc, #8]	; (a444 <tc_cca_callback+0x14>)
    a43a:	4798      	blx	r3
}
    a43c:	46c0      	nop			; (mov r8, r8)
    a43e:	46bd      	mov	sp, r7
    a440:	b002      	add	sp, #8
    a442:	bd80      	pop	{r7, pc}
    a444:	0000bbcd 	.word	0x0000bbcd

0000a448 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    a448:	b580      	push	{r7, lr}
    a44a:	b082      	sub	sp, #8
    a44c:	af00      	add	r7, sp, #0
	float timer_multiplier;
	tc_get_config_defaults(&timer_config);
    a44e:	4b2b      	ldr	r3, [pc, #172]	; (a4fc <tmr_init+0xb4>)
    a450:	0018      	movs	r0, r3
    a452:	4b2b      	ldr	r3, [pc, #172]	; (a500 <tmr_init+0xb8>)
    a454:	4798      	blx	r3
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    a456:	4b29      	ldr	r3, [pc, #164]	; (a4fc <tmr_init+0xb4>)
    a458:	2201      	movs	r2, #1
    a45a:	4252      	negs	r2, r2
    a45c:	855a      	strh	r2, [r3, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    a45e:	4a27      	ldr	r2, [pc, #156]	; (a4fc <tmr_init+0xb4>)
    a460:	4928      	ldr	r1, [pc, #160]	; (a504 <tmr_init+0xbc>)
    a462:	4b29      	ldr	r3, [pc, #164]	; (a508 <tmr_init+0xc0>)
    a464:	0018      	movs	r0, r3
    a466:	4b29      	ldr	r3, [pc, #164]	; (a50c <tmr_init+0xc4>)
    a468:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    a46a:	4929      	ldr	r1, [pc, #164]	; (a510 <tmr_init+0xc8>)
    a46c:	4b26      	ldr	r3, [pc, #152]	; (a508 <tmr_init+0xc0>)
    a46e:	2200      	movs	r2, #0
    a470:	0018      	movs	r0, r3
    a472:	4b28      	ldr	r3, [pc, #160]	; (a514 <tmr_init+0xcc>)
    a474:	4798      	blx	r3
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    a476:	4928      	ldr	r1, [pc, #160]	; (a518 <tmr_init+0xd0>)
    a478:	4b23      	ldr	r3, [pc, #140]	; (a508 <tmr_init+0xc0>)
    a47a:	2202      	movs	r2, #2
    a47c:	0018      	movs	r0, r3
    a47e:	4b25      	ldr	r3, [pc, #148]	; (a514 <tmr_init+0xcc>)
    a480:	4798      	blx	r3
			TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&module_inst, TC_CALLBACK_OVERFLOW);
    a482:	4b21      	ldr	r3, [pc, #132]	; (a508 <tmr_init+0xc0>)
    a484:	2100      	movs	r1, #0
    a486:	0018      	movs	r0, r3
    a488:	4b24      	ldr	r3, [pc, #144]	; (a51c <tmr_init+0xd4>)
    a48a:	4798      	blx	r3
	/*tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);*/

	tc_enable(&module_inst);
    a48c:	4b1e      	ldr	r3, [pc, #120]	; (a508 <tmr_init+0xc0>)
    a48e:	0018      	movs	r0, r3
    a490:	4b23      	ldr	r3, [pc, #140]	; (a520 <tmr_init+0xd8>)
    a492:	4798      	blx	r3
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    a494:	2000      	movs	r0, #0
    a496:	4b23      	ldr	r3, [pc, #140]	; (a524 <tmr_init+0xdc>)
    a498:	4798      	blx	r3
    a49a:	0002      	movs	r2, r0
    a49c:	4b22      	ldr	r3, [pc, #136]	; (a528 <tmr_init+0xe0>)
    a49e:	0010      	movs	r0, r2
    a4a0:	4798      	blx	r3
    a4a2:	1c02      	adds	r2, r0, #0
    a4a4:	4b21      	ldr	r3, [pc, #132]	; (a52c <tmr_init+0xe4>)
    a4a6:	4922      	ldr	r1, [pc, #136]	; (a530 <tmr_init+0xe8>)
    a4a8:	1c10      	adds	r0, r2, #0
    a4aa:	4798      	blx	r3
    a4ac:	1c03      	adds	r3, r0, #0
    a4ae:	607b      	str	r3, [r7, #4]
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    a4b0:	4b20      	ldr	r3, [pc, #128]	; (a534 <tmr_init+0xec>)
    a4b2:	6878      	ldr	r0, [r7, #4]
    a4b4:	4798      	blx	r3
    a4b6:	0002      	movs	r2, r0
    a4b8:	4b1b      	ldr	r3, [pc, #108]	; (a528 <tmr_init+0xe0>)
    a4ba:	0010      	movs	r0, r2
    a4bc:	4798      	blx	r3
    a4be:	1c02      	adds	r2, r0, #0
    a4c0:	4b1d      	ldr	r3, [pc, #116]	; (a538 <tmr_init+0xf0>)
    a4c2:	1c11      	adds	r1, r2, #0
    a4c4:	6878      	ldr	r0, [r7, #4]
    a4c6:	4798      	blx	r3
    a4c8:	1c03      	adds	r3, r0, #0
    a4ca:	1c1a      	adds	r2, r3, #0
    a4cc:	4b1b      	ldr	r3, [pc, #108]	; (a53c <tmr_init+0xf4>)
    a4ce:	21fc      	movs	r1, #252	; 0xfc
    a4d0:	0589      	lsls	r1, r1, #22
    a4d2:	1c10      	adds	r0, r2, #0
    a4d4:	4798      	blx	r3
    a4d6:	1e03      	subs	r3, r0, #0
    a4d8:	d006      	beq.n	a4e8 <tmr_init+0xa0>
	{
		timer_multiplier += 1.0f;
    a4da:	4b19      	ldr	r3, [pc, #100]	; (a540 <tmr_init+0xf8>)
    a4dc:	21fe      	movs	r1, #254	; 0xfe
    a4de:	0589      	lsls	r1, r1, #22
    a4e0:	6878      	ldr	r0, [r7, #4]
    a4e2:	4798      	blx	r3
    a4e4:	1c03      	adds	r3, r0, #0
    a4e6:	607b      	str	r3, [r7, #4]
	}
	
	return (uint8_t) timer_multiplier;
    a4e8:	4b12      	ldr	r3, [pc, #72]	; (a534 <tmr_init+0xec>)
    a4ea:	6878      	ldr	r0, [r7, #4]
    a4ec:	4798      	blx	r3
    a4ee:	0003      	movs	r3, r0
    a4f0:	b2db      	uxtb	r3, r3
}
    a4f2:	0018      	movs	r0, r3
    a4f4:	46bd      	mov	sp, r7
    a4f6:	b002      	add	sp, #8
    a4f8:	bd80      	pop	{r7, pc}
    a4fa:	46c0      	nop			; (mov r8, r8)
    a4fc:	200012dc 	.word	0x200012dc
    a500:	0000a0b9 	.word	0x0000a0b9
    a504:	42002000 	.word	0x42002000
    a508:	20001314 	.word	0x20001314
    a50c:	000064a1 	.word	0x000064a1
    a510:	0000a419 	.word	0x0000a419
    a514:	000061a5 	.word	0x000061a5
    a518:	0000a431 	.word	0x0000a431
    a51c:	0000a215 	.word	0x0000a215
    a520:	0000a15d 	.word	0x0000a15d
    a524:	00005da9 	.word	0x00005da9
    a528:	0000f799 	.word	0x0000f799
    a52c:	0000ed61 	.word	0x0000ed61
    a530:	49742400 	.word	0x49742400
    a534:	0000e811 	.word	0x0000e811
    a538:	0000f381 	.word	0x0000f381
    a53c:	0000e769 	.word	0x0000e769
    a540:	0000ea3d 	.word	0x0000ea3d

0000a544 <nvm_get_config_defaults>:
{
    a544:	b580      	push	{r7, lr}
    a546:	b082      	sub	sp, #8
    a548:	af00      	add	r7, sp, #0
    a54a:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    a54c:	687b      	ldr	r3, [r7, #4]
    a54e:	2200      	movs	r2, #0
    a550:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    a552:	687b      	ldr	r3, [r7, #4]
    a554:	2201      	movs	r2, #1
    a556:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    a558:	4b08      	ldr	r3, [pc, #32]	; (a57c <nvm_get_config_defaults+0x38>)
    a55a:	685b      	ldr	r3, [r3, #4]
    a55c:	06db      	lsls	r3, r3, #27
    a55e:	0f1b      	lsrs	r3, r3, #28
    a560:	b2db      	uxtb	r3, r3
    a562:	001a      	movs	r2, r3
    a564:	687b      	ldr	r3, [r7, #4]
    a566:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    a568:	687b      	ldr	r3, [r7, #4]
    a56a:	2200      	movs	r2, #0
    a56c:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	2200      	movs	r2, #0
    a572:	711a      	strb	r2, [r3, #4]
}
    a574:	46c0      	nop			; (mov r8, r8)
    a576:	46bd      	mov	sp, r7
    a578:	b002      	add	sp, #8
    a57a:	bd80      	pop	{r7, pc}
    a57c:	41004000 	.word	0x41004000

0000a580 <nvm_is_ready>:
{
    a580:	b580      	push	{r7, lr}
    a582:	b082      	sub	sp, #8
    a584:	af00      	add	r7, sp, #0
	Nvmctrl *const nvm_module = NVMCTRL;
    a586:	4b07      	ldr	r3, [pc, #28]	; (a5a4 <nvm_is_ready+0x24>)
    a588:	607b      	str	r3, [r7, #4]
	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    a58a:	687b      	ldr	r3, [r7, #4]
    a58c:	7d1b      	ldrb	r3, [r3, #20]
    a58e:	b2db      	uxtb	r3, r3
    a590:	001a      	movs	r2, r3
    a592:	2301      	movs	r3, #1
    a594:	4013      	ands	r3, r2
    a596:	1e5a      	subs	r2, r3, #1
    a598:	4193      	sbcs	r3, r2
    a59a:	b2db      	uxtb	r3, r3
}
    a59c:	0018      	movs	r0, r3
    a59e:	46bd      	mov	sp, r7
    a5a0:	b002      	add	sp, #8
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	41004000 	.word	0x41004000

0000a5a8 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    a5a8:	b5b0      	push	{r4, r5, r7, lr}
    a5aa:	b086      	sub	sp, #24
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	60b9      	str	r1, [r7, #8]
    a5b0:	607a      	str	r2, [r7, #4]
    a5b2:	603b      	str	r3, [r7, #0]
    a5b4:	230f      	movs	r3, #15
    a5b6:	18fb      	adds	r3, r7, r3
    a5b8:	1c02      	adds	r2, r0, #0
    a5ba:	701a      	strb	r2, [r3, #0]
	status_code_t status = nvm_sam0_read(mem, address, buffer, len);
    a5bc:	2317      	movs	r3, #23
    a5be:	18fc      	adds	r4, r7, r3
    a5c0:	683d      	ldr	r5, [r7, #0]
    a5c2:	687a      	ldr	r2, [r7, #4]
    a5c4:	68b9      	ldr	r1, [r7, #8]
    a5c6:	230f      	movs	r3, #15
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	7818      	ldrb	r0, [r3, #0]
    a5cc:	002b      	movs	r3, r5
    a5ce:	4d06      	ldr	r5, [pc, #24]	; (a5e8 <nvm_read+0x40>)
    a5d0:	47a8      	blx	r5
    a5d2:	0003      	movs	r3, r0
    a5d4:	7023      	strb	r3, [r4, #0]
	return status;//STATUS_OK;
    a5d6:	2317      	movs	r3, #23
    a5d8:	18fb      	adds	r3, r7, r3
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	b25b      	sxtb	r3, r3
}
    a5de:	0018      	movs	r0, r3
    a5e0:	46bd      	mov	sp, r7
    a5e2:	b006      	add	sp, #24
    a5e4:	bdb0      	pop	{r4, r5, r7, pc}
    a5e6:	46c0      	nop			; (mov r8, r8)
    a5e8:	0000a5ed 	.word	0x0000a5ed

0000a5ec <nvm_sam0_read>:

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
    a5ec:	b580      	push	{r7, lr}
    a5ee:	b088      	sub	sp, #32
    a5f0:	af00      	add	r7, sp, #0
    a5f2:	60b9      	str	r1, [r7, #8]
    a5f4:	607a      	str	r2, [r7, #4]
    a5f6:	603b      	str	r3, [r7, #0]
    a5f8:	230f      	movs	r3, #15
    a5fa:	18fb      	adds	r3, r7, r3
    a5fc:	1c02      	adds	r2, r0, #0
    a5fe:	701a      	strb	r2, [r3, #0]
	switch (mem) {
    a600:	230f      	movs	r3, #15
    a602:	18fb      	adds	r3, r7, r3
    a604:	781b      	ldrb	r3, [r3, #0]
    a606:	2b00      	cmp	r3, #0
    a608:	d14d      	bne.n	a6a6 <nvm_sam0_read+0xba>
		

	case INT_FLASH:
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
    a60a:	4b2b      	ldr	r3, [pc, #172]	; (a6b8 <nvm_sam0_read+0xcc>)
    a60c:	617b      	str	r3, [r7, #20]
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
    a60e:	4b2b      	ldr	r3, [pc, #172]	; (a6bc <nvm_sam0_read+0xd0>)
    a610:	4798      	blx	r3
    a612:	0003      	movs	r3, r0
    a614:	001a      	movs	r2, r3
    a616:	2301      	movs	r3, #1
    a618:	4053      	eors	r3, r2
    a61a:	b2db      	uxtb	r3, r3
    a61c:	2b00      	cmp	r3, #0
    a61e:	d001      	beq.n	a624 <nvm_sam0_read+0x38>
			return STATUS_BUSY;
    a620:	2305      	movs	r3, #5
    a622:	e044      	b.n	a6ae <nvm_sam0_read+0xc2>
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    a624:	697b      	ldr	r3, [r7, #20]
    a626:	2220      	movs	r2, #32
    a628:	32ff      	adds	r2, #255	; 0xff
    a62a:	831a      	strh	r2, [r3, #24]

		uint32_t page_address = address / 2;
    a62c:	68bb      	ldr	r3, [r7, #8]
    a62e:	085b      	lsrs	r3, r3, #1
    a630:	61fb      	str	r3, [r7, #28]

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    a632:	231a      	movs	r3, #26
    a634:	18fb      	adds	r3, r7, r3
    a636:	2200      	movs	r2, #0
    a638:	801a      	strh	r2, [r3, #0]
    a63a:	e02d      	b.n	a698 <nvm_sam0_read+0xac>
			/* Fetch next 16-bit chunk from the NVM memory space */
			uint16_t data = NVM_MEMORY[page_address++];
    a63c:	69fb      	ldr	r3, [r7, #28]
    a63e:	1c5a      	adds	r2, r3, #1
    a640:	61fa      	str	r2, [r7, #28]
    a642:	005b      	lsls	r3, r3, #1
    a644:	001a      	movs	r2, r3
    a646:	2312      	movs	r3, #18
    a648:	18fb      	adds	r3, r7, r3
    a64a:	8812      	ldrh	r2, [r2, #0]
    a64c:	801a      	strh	r2, [r3, #0]

			/* Copy first byte of the 16-bit chunk to the
			 *destination buffer */
			buffer[i] = (data & 0xFF);
    a64e:	231a      	movs	r3, #26
    a650:	18fb      	adds	r3, r7, r3
    a652:	881b      	ldrh	r3, [r3, #0]
    a654:	687a      	ldr	r2, [r7, #4]
    a656:	18d3      	adds	r3, r2, r3
    a658:	2212      	movs	r2, #18
    a65a:	18ba      	adds	r2, r7, r2
    a65c:	8812      	ldrh	r2, [r2, #0]
    a65e:	b2d2      	uxtb	r2, r2
    a660:	701a      	strb	r2, [r3, #0]

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    a662:	231a      	movs	r3, #26
    a664:	18fb      	adds	r3, r7, r3
    a666:	881a      	ldrh	r2, [r3, #0]
    a668:	683b      	ldr	r3, [r7, #0]
    a66a:	3b01      	subs	r3, #1
    a66c:	429a      	cmp	r2, r3
    a66e:	d20c      	bcs.n	a68a <nvm_sam0_read+0x9e>
				buffer[i + 1] = (data >> 8);
    a670:	231a      	movs	r3, #26
    a672:	18fb      	adds	r3, r7, r3
    a674:	881b      	ldrh	r3, [r3, #0]
    a676:	3301      	adds	r3, #1
    a678:	687a      	ldr	r2, [r7, #4]
    a67a:	18d3      	adds	r3, r2, r3
    a67c:	2212      	movs	r2, #18
    a67e:	18ba      	adds	r2, r7, r2
    a680:	8812      	ldrh	r2, [r2, #0]
    a682:	0a12      	lsrs	r2, r2, #8
    a684:	b292      	uxth	r2, r2
    a686:	b2d2      	uxtb	r2, r2
    a688:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < len; i += 2) {
    a68a:	231a      	movs	r3, #26
    a68c:	18fb      	adds	r3, r7, r3
    a68e:	221a      	movs	r2, #26
    a690:	18ba      	adds	r2, r7, r2
    a692:	8812      	ldrh	r2, [r2, #0]
    a694:	3202      	adds	r2, #2
    a696:	801a      	strh	r2, [r3, #0]
    a698:	231a      	movs	r3, #26
    a69a:	18fb      	adds	r3, r7, r3
    a69c:	881a      	ldrh	r2, [r3, #0]
    a69e:	683b      	ldr	r3, [r7, #0]
    a6a0:	429a      	cmp	r2, r3
    a6a2:	d3cb      	bcc.n	a63c <nvm_sam0_read+0x50>
			}
		}
     }

		break;
    a6a4:	e002      	b.n	a6ac <nvm_sam0_read+0xc0>

	default:
		return ERR_INVALID_ARG;
    a6a6:	2308      	movs	r3, #8
    a6a8:	425b      	negs	r3, r3
    a6aa:	e000      	b.n	a6ae <nvm_sam0_read+0xc2>
	}

	return STATUS_OK;
    a6ac:	2300      	movs	r3, #0
}
    a6ae:	0018      	movs	r0, r3
    a6b0:	46bd      	mov	sp, r7
    a6b2:	b008      	add	sp, #32
    a6b4:	bd80      	pop	{r7, pc}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	41004000 	.word	0x41004000
    a6bc:	0000a581 	.word	0x0000a581

0000a6c0 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    a6c0:	b580      	push	{r7, lr}
    a6c2:	b084      	sub	sp, #16
    a6c4:	af00      	add	r7, sp, #0
    a6c6:	0002      	movs	r2, r0
    a6c8:	1dfb      	adds	r3, r7, #7
    a6ca:	701a      	strb	r2, [r3, #0]
	if (INT_FLASH == mem) {
    a6cc:	1dfb      	adds	r3, r7, #7
    a6ce:	781b      	ldrb	r3, [r3, #0]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d113      	bne.n	a6fc <nvm_init+0x3c>
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);
    a6d4:	2308      	movs	r3, #8
    a6d6:	18fb      	adds	r3, r7, r3
    a6d8:	0018      	movs	r0, r3
    a6da:	4b0b      	ldr	r3, [pc, #44]	; (a708 <nvm_init+0x48>)
    a6dc:	4798      	blx	r3

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    a6de:	2308      	movs	r3, #8
    a6e0:	18fb      	adds	r3, r7, r3
    a6e2:	2200      	movs	r2, #0
    a6e4:	705a      	strb	r2, [r3, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    a6e6:	2308      	movs	r3, #8
    a6e8:	18fb      	adds	r3, r7, r3
    a6ea:	2202      	movs	r2, #2
    a6ec:	709a      	strb	r2, [r3, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    a6ee:	2308      	movs	r3, #8
    a6f0:	18fb      	adds	r3, r7, r3
    a6f2:	0018      	movs	r0, r3
    a6f4:	4b05      	ldr	r3, [pc, #20]	; (a70c <nvm_init+0x4c>)
    a6f6:	4798      	blx	r3

		return STATUS_OK;
    a6f8:	2300      	movs	r3, #0
    a6fa:	e001      	b.n	a700 <nvm_init+0x40>
	}

	return ERR_INVALID_ARG;
    a6fc:	2308      	movs	r3, #8
    a6fe:	425b      	negs	r3, r3
}
    a700:	0018      	movs	r0, r3
    a702:	46bd      	mov	sp, r7
    a704:	b004      	add	sp, #16
    a706:	bd80      	pop	{r7, pc}
    a708:	0000a545 	.word	0x0000a545
    a70c:	000017cd 	.word	0x000017cd

0000a710 <mote_demo_init>:

/*********************************************************************//**
\brief    Initialization the Demo application
*************************************************************************/
void mote_demo_init(void)
{
    a710:	b590      	push	{r4, r7, lr}
    a712:	b087      	sub	sp, #28
    a714:	af02      	add	r7, sp, #8
    bool status = false;
    a716:	1dfb      	adds	r3, r7, #7
    a718:	2200      	movs	r2, #0
    a71a:	701a      	strb	r2, [r3, #0]
    /* Initialize the resources */
    resource_init();
    a71c:	4b3c      	ldr	r3, [pc, #240]	; (a810 <mote_demo_init+0x100>)
    a71e:	4798      	blx	r3

	startReceiving = false;
    a720:	4b3c      	ldr	r3, [pc, #240]	; (a814 <mote_demo_init+0x104>)
    a722:	2200      	movs	r2, #0
    a724:	701a      	strb	r2, [r3, #0]
    /* Initialize the LORAWAN Stack */
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    a726:	4a3c      	ldr	r2, [pc, #240]	; (a818 <mote_demo_init+0x108>)
    a728:	4b3c      	ldr	r3, [pc, #240]	; (a81c <mote_demo_init+0x10c>)
    a72a:	0011      	movs	r1, r2
    a72c:	0018      	movs	r0, r3
    a72e:	4b3c      	ldr	r3, [pc, #240]	; (a820 <mote_demo_init+0x110>)
    a730:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    a732:	4b3c      	ldr	r3, [pc, #240]	; (a824 <mote_demo_init+0x114>)
    a734:	0018      	movs	r0, r3
    a736:	4b3c      	ldr	r3, [pc, #240]	; (a828 <mote_demo_init+0x118>)
    a738:	4798      	blx	r3
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    a73a:	4a3c      	ldr	r2, [pc, #240]	; (a82c <mote_demo_init+0x11c>)
    a73c:	4b3c      	ldr	r3, [pc, #240]	; (a830 <mote_demo_init+0x120>)
    a73e:	0011      	movs	r1, r2
    a740:	0018      	movs	r0, r3
    a742:	4b39      	ldr	r3, [pc, #228]	; (a828 <mote_demo_init+0x118>)
    a744:	4798      	blx	r3
    printf("\r\nInit - Successful\r\n");
    a746:	4b3b      	ldr	r3, [pc, #236]	; (a834 <mote_demo_init+0x124>)
    a748:	0018      	movs	r0, r3
    a74a:	4b3b      	ldr	r3, [pc, #236]	; (a838 <mote_demo_init+0x128>)
    a74c:	4798      	blx	r3

    status = PDS_IsRestorable();
    a74e:	1dfc      	adds	r4, r7, #7
    a750:	4b3a      	ldr	r3, [pc, #232]	; (a83c <mote_demo_init+0x12c>)
    a752:	4798      	blx	r3
    a754:	0003      	movs	r3, r0
    a756:	7023      	strb	r3, [r4, #0]
    if(status)
    a758:	1dfb      	adds	r3, r7, #7
    a75a:	781b      	ldrb	r3, [r3, #0]
    a75c:	2b00      	cmp	r3, #0
    a75e:	d04d      	beq.n	a7fc <mote_demo_init+0xec>
    {
        static uint8_t prevBand = 0xFF;
        uint8_t prevChoice = 0xFF;
    a760:	230f      	movs	r3, #15
    a762:	18fb      	adds	r3, r7, r3
    a764:	22ff      	movs	r2, #255	; 0xff
    a766:	701a      	strb	r2, [r3, #0]
        PDS_RestoreAll();
    a768:	4b35      	ldr	r3, [pc, #212]	; (a840 <mote_demo_init+0x130>)
    a76a:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    a76c:	4b35      	ldr	r3, [pc, #212]	; (a844 <mote_demo_init+0x134>)
    a76e:	001a      	movs	r2, r3
    a770:	2100      	movs	r1, #0
    a772:	2024      	movs	r0, #36	; 0x24
    a774:	4b34      	ldr	r3, [pc, #208]	; (a848 <mote_demo_init+0x138>)
    a776:	4798      	blx	r3
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    a778:	2300      	movs	r3, #0
    a77a:	60bb      	str	r3, [r7, #8]
    a77c:	e00f      	b.n	a79e <mote_demo_init+0x8e>
        {
            if(bandTable[i] == prevBand)
    a77e:	4a33      	ldr	r2, [pc, #204]	; (a84c <mote_demo_init+0x13c>)
    a780:	68bb      	ldr	r3, [r7, #8]
    a782:	18d3      	adds	r3, r2, r3
    a784:	781a      	ldrb	r2, [r3, #0]
    a786:	4b2f      	ldr	r3, [pc, #188]	; (a844 <mote_demo_init+0x134>)
    a788:	781b      	ldrb	r3, [r3, #0]
    a78a:	429a      	cmp	r2, r3
    a78c:	d104      	bne.n	a798 <mote_demo_init+0x88>
            {
                prevChoice = i;
    a78e:	230f      	movs	r3, #15
    a790:	18fb      	adds	r3, r7, r3
    a792:	68ba      	ldr	r2, [r7, #8]
    a794:	701a      	strb	r2, [r3, #0]
                break;
    a796:	e005      	b.n	a7a4 <mote_demo_init+0x94>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    a798:	68bb      	ldr	r3, [r7, #8]
    a79a:	3301      	adds	r3, #1
    a79c:	60bb      	str	r3, [r7, #8]
    a79e:	68bb      	ldr	r3, [r7, #8]
    a7a0:	2b08      	cmp	r3, #8
    a7a2:	d9ec      	bls.n	a77e <mote_demo_init+0x6e>
            }
        }
        memset(rxchar,0,sizeof(rxchar));
    a7a4:	4b2a      	ldr	r3, [pc, #168]	; (a850 <mote_demo_init+0x140>)
    a7a6:	220b      	movs	r2, #11
    a7a8:	2100      	movs	r1, #0
    a7aa:	0018      	movs	r0, r3
    a7ac:	4b29      	ldr	r3, [pc, #164]	; (a854 <mote_demo_init+0x144>)
    a7ae:	4798      	blx	r3
        sio2host_rx(rxchar,10);
    a7b0:	4b27      	ldr	r3, [pc, #156]	; (a850 <mote_demo_init+0x140>)
    a7b2:	210a      	movs	r1, #10
    a7b4:	0018      	movs	r0, r3
    a7b6:	4b28      	ldr	r3, [pc, #160]	; (a858 <mote_demo_init+0x148>)
    a7b8:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
    a7ba:	230f      	movs	r3, #15
    a7bc:	18fb      	adds	r3, r7, r3
    a7be:	781a      	ldrb	r2, [r3, #0]
    a7c0:	4b26      	ldr	r3, [pc, #152]	; (a85c <mote_demo_init+0x14c>)
    a7c2:	0092      	lsls	r2, r2, #2
    a7c4:	58d2      	ldr	r2, [r2, r3]
    a7c6:	4b26      	ldr	r3, [pc, #152]	; (a860 <mote_demo_init+0x150>)
    a7c8:	0011      	movs	r1, r2
    a7ca:	0018      	movs	r0, r3
    a7cc:	4b16      	ldr	r3, [pc, #88]	; (a828 <mote_demo_init+0x118>)
    a7ce:	4798      	blx	r3
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
    a7d0:	230f      	movs	r3, #15
    a7d2:	18fb      	adds	r3, r7, r3
    a7d4:	781a      	ldrb	r2, [r3, #0]
    a7d6:	4b21      	ldr	r3, [pc, #132]	; (a85c <mote_demo_init+0x14c>)
    a7d8:	0092      	lsls	r2, r2, #2
    a7da:	58d2      	ldr	r2, [r2, r3]
    a7dc:	4b21      	ldr	r3, [pc, #132]	; (a864 <mote_demo_init+0x154>)
    a7de:	0011      	movs	r1, r2
    a7e0:	0018      	movs	r0, r3
    a7e2:	4b11      	ldr	r3, [pc, #68]	; (a828 <mote_demo_init+0x118>)
    a7e4:	4798      	blx	r3

        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    a7e6:	4b20      	ldr	r3, [pc, #128]	; (a868 <mote_demo_init+0x158>)
    a7e8:	7818      	ldrb	r0, [r3, #0]
    a7ea:	4a20      	ldr	r2, [pc, #128]	; (a86c <mote_demo_init+0x15c>)
    a7ec:	4920      	ldr	r1, [pc, #128]	; (a870 <mote_demo_init+0x160>)
    a7ee:	2300      	movs	r3, #0
    a7f0:	9300      	str	r3, [sp, #0]
    a7f2:	0013      	movs	r3, r2
    a7f4:	2200      	movs	r2, #0
    a7f6:	4c1f      	ldr	r4, [pc, #124]	; (a874 <mote_demo_init+0x164>)
    a7f8:	47a0      	blx	r4
    else
    {
		appTaskState = DEMO_CERT_APP_STATE;
        appPostTask(DISPLAY_TASK_HANDLER);
    }
}
    a7fa:	e005      	b.n	a808 <mote_demo_init+0xf8>
		appTaskState = DEMO_CERT_APP_STATE;
    a7fc:	4b1e      	ldr	r3, [pc, #120]	; (a878 <mote_demo_init+0x168>)
    a7fe:	2201      	movs	r2, #1
    a800:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    a802:	2000      	movs	r0, #0
    a804:	4b1d      	ldr	r3, [pc, #116]	; (a87c <mote_demo_init+0x16c>)
    a806:	4798      	blx	r3
}
    a808:	46c0      	nop			; (mov r8, r8)
    a80a:	46bd      	mov	sp, r7
    a80c:	b005      	add	sp, #20
    a80e:	bd90      	pop	{r4, r7, pc}
    a810:	00008e65 	.word	0x00008e65
    a814:	20000e9b 	.word	0x20000e9b
    a818:	0000aced 	.word	0x0000aced
    a81c:	0000a975 	.word	0x0000a975
    a820:	0000bd69 	.word	0x0000bd69
    a824:	000168cc 	.word	0x000168cc
    a828:	0001158d 	.word	0x0001158d
    a82c:	0001690c 	.word	0x0001690c
    a830:	0001691c 	.word	0x0001691c
    a834:	0001693c 	.word	0x0001693c
    a838:	00011651 	.word	0x00011651
    a83c:	000080fd 	.word	0x000080fd
    a840:	000081a1 	.word	0x000081a1
    a844:	20000046 	.word	0x20000046
    a848:	0000c591 	.word	0x0000c591
    a84c:	2000003c 	.word	0x2000003c
    a850:	20000e90 	.word	0x20000e90
    a854:	000114f9 	.word	0x000114f9
    a858:	0000706d 	.word	0x0000706d
    a85c:	20000014 	.word	0x20000014
    a860:	00016954 	.word	0x00016954
    a864:	00016978 	.word	0x00016978
    a868:	20000047 	.word	0x20000047
    a86c:	0000ae51 	.word	0x0000ae51
    a870:	000f4240 	.word	0x000f4240
    a874:	000095bd 	.word	0x000095bd
    a878:	20000e9c 	.word	0x20000e9c
    a87c:	0000afad 	.word	0x0000afad

0000a880 <demo_handle_evt_rx_data>:
 \brief      Function that processes the Rx data
 \param[in]  data - Rx data payload
 \param[in]  dataLen - The number of Rx bytes
 ************************************************************************/
static void demo_handle_evt_rx_data(void *appHandle, appCbParams_t *appdata)
{
    a880:	b580      	push	{r7, lr}
    a882:	b086      	sub	sp, #24
    a884:	af00      	add	r7, sp, #0
    a886:	6078      	str	r0, [r7, #4]
    a888:	6039      	str	r1, [r7, #0]
    uint8_t *pData = appdata->param.rxData.pData;
    a88a:	683b      	ldr	r3, [r7, #0]
    a88c:	689b      	ldr	r3, [r3, #8]
    a88e:	613b      	str	r3, [r7, #16]
    uint8_t dataLength = appdata->param.rxData.dataLength;
    a890:	230f      	movs	r3, #15
    a892:	18fb      	adds	r3, r7, r3
    a894:	683a      	ldr	r2, [r7, #0]
    a896:	7b12      	ldrb	r2, [r2, #12]
    a898:	701a      	strb	r2, [r3, #0]
    uint32_t devAddress = appdata->param.rxData.devAddr;
    a89a:	683b      	ldr	r3, [r7, #0]
    a89c:	685b      	ldr	r3, [r3, #4]
    a89e:	60bb      	str	r3, [r7, #8]

    //Successful transmission
    if((dataLength > 0U) && (NULL != pData))
    a8a0:	230f      	movs	r3, #15
    a8a2:	18fb      	adds	r3, r7, r3
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d047      	beq.n	a93a <demo_handle_evt_rx_data+0xba>
    a8aa:	693b      	ldr	r3, [r7, #16]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d044      	beq.n	a93a <demo_handle_evt_rx_data+0xba>
    {
        printf("*** Received DL Data ***\n\r");
    a8b0:	4b26      	ldr	r3, [pc, #152]	; (a94c <demo_handle_evt_rx_data+0xcc>)
    a8b2:	0018      	movs	r0, r3
    a8b4:	4b26      	ldr	r3, [pc, #152]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a8b6:	4798      	blx	r3
        printf("\nFrame Received at port %d\n\r",pData[0]);
    a8b8:	693b      	ldr	r3, [r7, #16]
    a8ba:	781b      	ldrb	r3, [r3, #0]
    a8bc:	001a      	movs	r2, r3
    a8be:	4b25      	ldr	r3, [pc, #148]	; (a954 <demo_handle_evt_rx_data+0xd4>)
    a8c0:	0011      	movs	r1, r2
    a8c2:	0018      	movs	r0, r3
    a8c4:	4b22      	ldr	r3, [pc, #136]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a8c6:	4798      	blx	r3
        printf("\nFrame Length - %d\n\r",dataLength);
    a8c8:	230f      	movs	r3, #15
    a8ca:	18fb      	adds	r3, r7, r3
    a8cc:	781a      	ldrb	r2, [r3, #0]
    a8ce:	4b22      	ldr	r3, [pc, #136]	; (a958 <demo_handle_evt_rx_data+0xd8>)
    a8d0:	0011      	movs	r1, r2
    a8d2:	0018      	movs	r0, r3
    a8d4:	4b1e      	ldr	r3, [pc, #120]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a8d6:	4798      	blx	r3
        printf("\nAddress - 0x%lx\n\r", devAddress);
    a8d8:	68ba      	ldr	r2, [r7, #8]
    a8da:	4b20      	ldr	r3, [pc, #128]	; (a95c <demo_handle_evt_rx_data+0xdc>)
    a8dc:	0011      	movs	r1, r2
    a8de:	0018      	movs	r0, r3
    a8e0:	4b1b      	ldr	r3, [pc, #108]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a8e2:	4798      	blx	r3
        printf ("\nPayload: ");
    a8e4:	4b1e      	ldr	r3, [pc, #120]	; (a960 <demo_handle_evt_rx_data+0xe0>)
    a8e6:	0018      	movs	r0, r3
    a8e8:	4b19      	ldr	r3, [pc, #100]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a8ea:	4798      	blx	r3
        for (uint8_t i =0; i<dataLength - 1; i++)
    a8ec:	2317      	movs	r3, #23
    a8ee:	18fb      	adds	r3, r7, r3
    a8f0:	2200      	movs	r2, #0
    a8f2:	701a      	strb	r2, [r3, #0]
    a8f4:	e013      	b.n	a91e <demo_handle_evt_rx_data+0x9e>
        {
            printf("%x",pData[i+1]);
    a8f6:	2317      	movs	r3, #23
    a8f8:	18fb      	adds	r3, r7, r3
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	3301      	adds	r3, #1
    a8fe:	693a      	ldr	r2, [r7, #16]
    a900:	18d3      	adds	r3, r2, r3
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	001a      	movs	r2, r3
    a906:	4b17      	ldr	r3, [pc, #92]	; (a964 <demo_handle_evt_rx_data+0xe4>)
    a908:	0011      	movs	r1, r2
    a90a:	0018      	movs	r0, r3
    a90c:	4b10      	ldr	r3, [pc, #64]	; (a950 <demo_handle_evt_rx_data+0xd0>)
    a90e:	4798      	blx	r3
        for (uint8_t i =0; i<dataLength - 1; i++)
    a910:	2317      	movs	r3, #23
    a912:	18fb      	adds	r3, r7, r3
    a914:	781a      	ldrb	r2, [r3, #0]
    a916:	2317      	movs	r3, #23
    a918:	18fb      	adds	r3, r7, r3
    a91a:	3201      	adds	r2, #1
    a91c:	701a      	strb	r2, [r3, #0]
    a91e:	2317      	movs	r3, #23
    a920:	18fb      	adds	r3, r7, r3
    a922:	781a      	ldrb	r2, [r3, #0]
    a924:	230f      	movs	r3, #15
    a926:	18fb      	adds	r3, r7, r3
    a928:	781b      	ldrb	r3, [r3, #0]
    a92a:	3b01      	subs	r3, #1
    a92c:	429a      	cmp	r2, r3
    a92e:	dbe2      	blt.n	a8f6 <demo_handle_evt_rx_data+0x76>
        }
        printf("\r\n*************************\r\n");
    a930:	4b0d      	ldr	r3, [pc, #52]	; (a968 <demo_handle_evt_rx_data+0xe8>)
    a932:	0018      	movs	r0, r3
    a934:	4b0d      	ldr	r3, [pc, #52]	; (a96c <demo_handle_evt_rx_data+0xec>)
    a936:	4798      	blx	r3
    a938:	e003      	b.n	a942 <demo_handle_evt_rx_data+0xc2>
    }
    else
    {
        printf("Received ACK for Confirmed data\r\n");
    a93a:	4b0d      	ldr	r3, [pc, #52]	; (a970 <demo_handle_evt_rx_data+0xf0>)
    a93c:	0018      	movs	r0, r3
    a93e:	4b0b      	ldr	r3, [pc, #44]	; (a96c <demo_handle_evt_rx_data+0xec>)
    a940:	4798      	blx	r3
    }
}
    a942:	46c0      	nop			; (mov r8, r8)
    a944:	46bd      	mov	sp, r7
    a946:	b006      	add	sp, #24
    a948:	bd80      	pop	{r7, pc}
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	000169ac 	.word	0x000169ac
    a950:	0001158d 	.word	0x0001158d
    a954:	000169c8 	.word	0x000169c8
    a958:	000169e8 	.word	0x000169e8
    a95c:	00016a00 	.word	0x00016a00
    a960:	00016a14 	.word	0x00016a14
    a964:	00016a20 	.word	0x00016a20
    a968:	00016a24 	.word	0x00016a24
    a96c:	00011651 	.word	0x00011651
    a970:	00016a44 	.word	0x00016a44

0000a974 <demo_appdata_callback>:
/*********************************************************************//**
\brief Callback function for the ending of Bidirectional communication of
       Application data
 *************************************************************************/
void demo_appdata_callback(void *appHandle, appCbParams_t *appdata)
{
    a974:	b580      	push	{r7, lr}
    a976:	b084      	sub	sp, #16
    a978:	af00      	add	r7, sp, #0
    a97a:	6078      	str	r0, [r7, #4]
    a97c:	6039      	str	r1, [r7, #0]
    StackRetStatus_t status = LORAWAN_INVALID_REQUEST;
    a97e:	230f      	movs	r3, #15
    a980:	18fb      	adds	r3, r7, r3
    a982:	2215      	movs	r2, #21
    a984:	701a      	strb	r2, [r3, #0]

    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    a986:	683b      	ldr	r3, [r7, #0]
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	2b02      	cmp	r3, #2
    a98c:	d000      	beq.n	a990 <demo_appdata_callback+0x1c>
    a98e:	e099      	b.n	aac4 <demo_appdata_callback+0x150>
    {
        status = appdata->param.rxData.status;
    a990:	230f      	movs	r3, #15
    a992:	18fb      	adds	r3, r7, r3
    a994:	683a      	ldr	r2, [r7, #0]
    a996:	7b52      	ldrb	r2, [r2, #13]
    a998:	701a      	strb	r2, [r3, #0]
        switch(status)
    a99a:	230f      	movs	r3, #15
    a99c:	18fb      	adds	r3, r7, r3
    a99e:	781b      	ldrb	r3, [r3, #0]
    a9a0:	2b1e      	cmp	r3, #30
    a9a2:	d900      	bls.n	a9a6 <demo_appdata_callback+0x32>
    a9a4:	e088      	b.n	aab8 <demo_appdata_callback+0x144>
    a9a6:	009a      	lsls	r2, r3, #2
    a9a8:	4ba8      	ldr	r3, [pc, #672]	; (ac4c <demo_appdata_callback+0x2d8>)
    a9aa:	18d3      	adds	r3, r2, r3
    a9ac:	681b      	ldr	r3, [r3, #0]
    a9ae:	469f      	mov	pc, r3
        {
            case LORAWAN_SUCCESS:
            {
                demo_handle_evt_rx_data(appHandle, appdata);
    a9b0:	683a      	ldr	r2, [r7, #0]
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	0011      	movs	r1, r2
    a9b6:	0018      	movs	r0, r3
    a9b8:	4ba5      	ldr	r3, [pc, #660]	; (ac50 <demo_appdata_callback+0x2dc>)
    a9ba:	4798      	blx	r3
            }
            break;
    a9bc:	e128      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_NO_DATA:
            {
                printf("\n\rRADIO_NO_DATA \n\r");
    a9be:	4ba5      	ldr	r3, [pc, #660]	; (ac54 <demo_appdata_callback+0x2e0>)
    a9c0:	0018      	movs	r0, r3
    a9c2:	4ba5      	ldr	r3, [pc, #660]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9c4:	4798      	blx	r3
            }
            break;
    a9c6:	e123      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_DATA_SIZE:
                printf("\n\rRADIO_DATA_SIZE \n\r");
    a9c8:	4ba4      	ldr	r3, [pc, #656]	; (ac5c <demo_appdata_callback+0x2e8>)
    a9ca:	0018      	movs	r0, r3
    a9cc:	4ba2      	ldr	r3, [pc, #648]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9ce:	4798      	blx	r3
            break;
    a9d0:	e11e      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_INVALID_REQ:
                printf("\n\rRADIO_INVALID_REQ \n\r");
    a9d2:	4ba3      	ldr	r3, [pc, #652]	; (ac60 <demo_appdata_callback+0x2ec>)
    a9d4:	0018      	movs	r0, r3
    a9d6:	4ba0      	ldr	r3, [pc, #640]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9d8:	4798      	blx	r3
            break;
    a9da:	e119      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_BUSY:
                printf("\n\rRADIO_BUSY \n\r");
    a9dc:	4ba1      	ldr	r3, [pc, #644]	; (ac64 <demo_appdata_callback+0x2f0>)
    a9de:	0018      	movs	r0, r3
    a9e0:	4b9d      	ldr	r3, [pc, #628]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9e2:	4798      	blx	r3
            break;
    a9e4:	e114      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_OUT_OF_RANGE:
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    a9e6:	4ba0      	ldr	r3, [pc, #640]	; (ac68 <demo_appdata_callback+0x2f4>)
    a9e8:	0018      	movs	r0, r3
    a9ea:	4b9b      	ldr	r3, [pc, #620]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9ec:	4798      	blx	r3
            break;
    a9ee:	e10f      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_UNSUPPORTED_ATTR:
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    a9f0:	4b9e      	ldr	r3, [pc, #632]	; (ac6c <demo_appdata_callback+0x2f8>)
    a9f2:	0018      	movs	r0, r3
    a9f4:	4b98      	ldr	r3, [pc, #608]	; (ac58 <demo_appdata_callback+0x2e4>)
    a9f6:	4798      	blx	r3
            break;
    a9f8:	e10a      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_CHANNEL_BUSY:
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    a9fa:	4b9d      	ldr	r3, [pc, #628]	; (ac70 <demo_appdata_callback+0x2fc>)
    a9fc:	0018      	movs	r0, r3
    a9fe:	4b96      	ldr	r3, [pc, #600]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa00:	4798      	blx	r3
            break;
    aa02:	e105      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_NOT_JOINED:
                printf("\n\rNWK_NOT_JOINED \n\r");
    aa04:	4b9b      	ldr	r3, [pc, #620]	; (ac74 <demo_appdata_callback+0x300>)
    aa06:	0018      	movs	r0, r3
    aa08:	4b93      	ldr	r3, [pc, #588]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa0a:	4798      	blx	r3
            break;
    aa0c:	e100      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_PARAMETER:
                printf("\n\rINVALID_PARAMETER \n\r");
    aa0e:	4b9a      	ldr	r3, [pc, #616]	; (ac78 <demo_appdata_callback+0x304>)
    aa10:	0018      	movs	r0, r3
    aa12:	4b91      	ldr	r3, [pc, #580]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa14:	4798      	blx	r3
            break;
    aa16:	e0fb      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_KEYS_NOT_INITIALIZED:
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    aa18:	4b98      	ldr	r3, [pc, #608]	; (ac7c <demo_appdata_callback+0x308>)
    aa1a:	0018      	movs	r0, r3
    aa1c:	4b8e      	ldr	r3, [pc, #568]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa1e:	4798      	blx	r3
            break;
    aa20:	e0f6      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_SILENT_IMMEDIATELY_ACTIVE:
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    aa22:	4b97      	ldr	r3, [pc, #604]	; (ac80 <demo_appdata_callback+0x30c>)
    aa24:	0018      	movs	r0, r3
    aa26:	4b8c      	ldr	r3, [pc, #560]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa28:	4798      	blx	r3
            break;
    aa2a:	e0f1      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR_REJOIN_NEEDED:
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    aa2c:	4b95      	ldr	r3, [pc, #596]	; (ac84 <demo_appdata_callback+0x310>)
    aa2e:	0018      	movs	r0, r3
    aa30:	4b89      	ldr	r3, [pc, #548]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa32:	4798      	blx	r3
            break;
    aa34:	e0ec      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_BUFFER_LENGTH:
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    aa36:	4b94      	ldr	r3, [pc, #592]	; (ac88 <demo_appdata_callback+0x314>)
    aa38:	0018      	movs	r0, r3
    aa3a:	4b87      	ldr	r3, [pc, #540]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa3c:	4798      	blx	r3
            break;
    aa3e:	e0e7      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MAC_PAUSED :
                printf("\n\rMAC_PAUSED  \n\r");
    aa40:	4b92      	ldr	r3, [pc, #584]	; (ac8c <demo_appdata_callback+0x318>)
    aa42:	0018      	movs	r0, r3
    aa44:	4b84      	ldr	r3, [pc, #528]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa46:	4798      	blx	r3
            break;
    aa48:	e0e2      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_CHANNELS_FOUND:
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    aa4a:	4b91      	ldr	r3, [pc, #580]	; (ac90 <demo_appdata_callback+0x31c>)
    aa4c:	0018      	movs	r0, r3
    aa4e:	4b82      	ldr	r3, [pc, #520]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa50:	4798      	blx	r3
            break;
    aa52:	e0dd      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_BUSY:
                printf("\n\rBUSY\n\r");
    aa54:	4b8f      	ldr	r3, [pc, #572]	; (ac94 <demo_appdata_callback+0x320>)
    aa56:	0018      	movs	r0, r3
    aa58:	4b7f      	ldr	r3, [pc, #508]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa5a:	4798      	blx	r3
            break;
    aa5c:	e0d8      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_ACK:
                printf("\n\rNO_ACK \n\r");
    aa5e:	4b8e      	ldr	r3, [pc, #568]	; (ac98 <demo_appdata_callback+0x324>)
    aa60:	0018      	movs	r0, r3
    aa62:	4b7d      	ldr	r3, [pc, #500]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa64:	4798      	blx	r3
            break;
    aa66:	e0d3      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_JOIN_IN_PROGRESS:
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    aa68:	4b8c      	ldr	r3, [pc, #560]	; (ac9c <demo_appdata_callback+0x328>)
    aa6a:	0018      	movs	r0, r3
    aa6c:	4b7a      	ldr	r3, [pc, #488]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa6e:	4798      	blx	r3
            break;
    aa70:	e0ce      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RESOURCE_UNAVAILABLE:
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    aa72:	4b8b      	ldr	r3, [pc, #556]	; (aca0 <demo_appdata_callback+0x32c>)
    aa74:	0018      	movs	r0, r3
    aa76:	4b78      	ldr	r3, [pc, #480]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa78:	4798      	blx	r3
            break;
    aa7a:	e0c9      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_REQUEST:
                printf("\n\rINVALID_REQUEST \n\r");
    aa7c:	4b89      	ldr	r3, [pc, #548]	; (aca4 <demo_appdata_callback+0x330>)
    aa7e:	0018      	movs	r0, r3
    aa80:	4b75      	ldr	r3, [pc, #468]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa82:	4798      	blx	r3
            break;
    aa84:	e0c4      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR:
                printf("\n\rFCNTR_ERROR \n\r");
    aa86:	4b88      	ldr	r3, [pc, #544]	; (aca8 <demo_appdata_callback+0x334>)
    aa88:	0018      	movs	r0, r3
    aa8a:	4b73      	ldr	r3, [pc, #460]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa8c:	4798      	blx	r3
            break;
    aa8e:	e0bf      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MIC_ERROR:
                printf("\n\rMIC_ERROR \n\r");
    aa90:	4b86      	ldr	r3, [pc, #536]	; (acac <demo_appdata_callback+0x338>)
    aa92:	0018      	movs	r0, r3
    aa94:	4b70      	ldr	r3, [pc, #448]	; (ac58 <demo_appdata_callback+0x2e4>)
    aa96:	4798      	blx	r3
            break;
    aa98:	e0ba      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_MTYPE:
                printf("\n\rINVALID_MTYPE \n\r");
    aa9a:	4b85      	ldr	r3, [pc, #532]	; (acb0 <demo_appdata_callback+0x33c>)
    aa9c:	0018      	movs	r0, r3
    aa9e:	4b6e      	ldr	r3, [pc, #440]	; (ac58 <demo_appdata_callback+0x2e4>)
    aaa0:	4798      	blx	r3
            break;
    aaa2:	e0b5      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MCAST_HDR_INVALID:
                printf("\n\rMCAST_HDR_INVALID \n\r");
    aaa4:	4b83      	ldr	r3, [pc, #524]	; (acb4 <demo_appdata_callback+0x340>)
    aaa6:	0018      	movs	r0, r3
    aaa8:	4b6b      	ldr	r3, [pc, #428]	; (ac58 <demo_appdata_callback+0x2e4>)
    aaaa:	4798      	blx	r3
            break;
    aaac:	e0b0      	b.n	ac10 <demo_appdata_callback+0x29c>
			case LORAWAN_INVALID_PACKET:
				printf("\n\rINVALID_PACKET \n\r");
    aaae:	4b82      	ldr	r3, [pc, #520]	; (acb8 <demo_appdata_callback+0x344>)
    aab0:	0018      	movs	r0, r3
    aab2:	4b69      	ldr	r3, [pc, #420]	; (ac58 <demo_appdata_callback+0x2e4>)
    aab4:	4798      	blx	r3
			break;
    aab6:	e0ab      	b.n	ac10 <demo_appdata_callback+0x29c>
            default:
                printf("UNKNOWN ERROR\n\r");
    aab8:	4b80      	ldr	r3, [pc, #512]	; (acbc <demo_appdata_callback+0x348>)
    aaba:	0018      	movs	r0, r3
    aabc:	4b66      	ldr	r3, [pc, #408]	; (ac58 <demo_appdata_callback+0x2e4>)
    aabe:	4798      	blx	r3
            break;
    aac0:	46c0      	nop			; (mov r8, r8)
    aac2:	e0a5      	b.n	ac10 <demo_appdata_callback+0x29c>
        }
    }
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    aac4:	683b      	ldr	r3, [r7, #0]
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	2b04      	cmp	r3, #4
    aaca:	d000      	beq.n	aace <demo_appdata_callback+0x15a>
    aacc:	e0a0      	b.n	ac10 <demo_appdata_callback+0x29c>
    {
        switch(status = appdata->param.transCmpl.status)
    aace:	230f      	movs	r3, #15
    aad0:	18fb      	adds	r3, r7, r3
    aad2:	683a      	ldr	r2, [r7, #0]
    aad4:	7912      	ldrb	r2, [r2, #4]
    aad6:	701a      	strb	r2, [r3, #0]
    aad8:	230f      	movs	r3, #15
    aada:	18fb      	adds	r3, r7, r3
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	2b1e      	cmp	r3, #30
    aae0:	d900      	bls.n	aae4 <demo_appdata_callback+0x170>
    aae2:	e090      	b.n	ac06 <demo_appdata_callback+0x292>
    aae4:	009a      	lsls	r2, r3, #2
    aae6:	4b76      	ldr	r3, [pc, #472]	; (acc0 <demo_appdata_callback+0x34c>)
    aae8:	18d3      	adds	r3, r2, r3
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	469f      	mov	pc, r3
        {
            case LORAWAN_SUCCESS:
            {
                printf("Transmission Success\r\n");
    aaee:	4b75      	ldr	r3, [pc, #468]	; (acc4 <demo_appdata_callback+0x350>)
    aaf0:	0018      	movs	r0, r3
    aaf2:	4b75      	ldr	r3, [pc, #468]	; (acc8 <demo_appdata_callback+0x354>)
    aaf4:	4798      	blx	r3
            }
            break;
    aaf6:	e08b      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_SUCCESS:
            {
                printf("Transmission Success\r\n");
    aaf8:	4b72      	ldr	r3, [pc, #456]	; (acc4 <demo_appdata_callback+0x350>)
    aafa:	0018      	movs	r0, r3
    aafc:	4b72      	ldr	r3, [pc, #456]	; (acc8 <demo_appdata_callback+0x354>)
    aafe:	4798      	blx	r3
            }
            break;
    ab00:	e086      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_NO_DATA:
            {
                printf("\n\rRADIO_NO_DATA \n\r");
    ab02:	4b54      	ldr	r3, [pc, #336]	; (ac54 <demo_appdata_callback+0x2e0>)
    ab04:	0018      	movs	r0, r3
    ab06:	4b54      	ldr	r3, [pc, #336]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab08:	4798      	blx	r3
            }
            break;
    ab0a:	e081      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_DATA_SIZE:
                printf("\n\rRADIO_DATA_SIZE \n\r");
    ab0c:	4b53      	ldr	r3, [pc, #332]	; (ac5c <demo_appdata_callback+0x2e8>)
    ab0e:	0018      	movs	r0, r3
    ab10:	4b51      	ldr	r3, [pc, #324]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab12:	4798      	blx	r3
            break;
    ab14:	e07c      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_INVALID_REQ:
                printf("\n\rRADIO_INVALID_REQ \n\r");
    ab16:	4b52      	ldr	r3, [pc, #328]	; (ac60 <demo_appdata_callback+0x2ec>)
    ab18:	0018      	movs	r0, r3
    ab1a:	4b4f      	ldr	r3, [pc, #316]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab1c:	4798      	blx	r3
            break;
    ab1e:	e077      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_BUSY:
                printf("\n\rRADIO_BUSY \n\r");
    ab20:	4b50      	ldr	r3, [pc, #320]	; (ac64 <demo_appdata_callback+0x2f0>)
    ab22:	0018      	movs	r0, r3
    ab24:	4b4c      	ldr	r3, [pc, #304]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab26:	4798      	blx	r3
            break;
    ab28:	e072      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_TX_TIMEOUT:
                printf("\nTx Timeout\n\r");
    ab2a:	4b68      	ldr	r3, [pc, #416]	; (accc <demo_appdata_callback+0x358>)
    ab2c:	0018      	movs	r0, r3
    ab2e:	4b4a      	ldr	r3, [pc, #296]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab30:	4798      	blx	r3
            break;
    ab32:	e06d      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_OUT_OF_RANGE:
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    ab34:	4b4c      	ldr	r3, [pc, #304]	; (ac68 <demo_appdata_callback+0x2f4>)
    ab36:	0018      	movs	r0, r3
    ab38:	4b47      	ldr	r3, [pc, #284]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab3a:	4798      	blx	r3
            break;
    ab3c:	e068      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_UNSUPPORTED_ATTR:
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    ab3e:	4b4b      	ldr	r3, [pc, #300]	; (ac6c <demo_appdata_callback+0x2f8>)
    ab40:	0018      	movs	r0, r3
    ab42:	4b45      	ldr	r3, [pc, #276]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab44:	4798      	blx	r3
            break;
    ab46:	e063      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_CHANNEL_BUSY:
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    ab48:	4b49      	ldr	r3, [pc, #292]	; (ac70 <demo_appdata_callback+0x2fc>)
    ab4a:	0018      	movs	r0, r3
    ab4c:	4b42      	ldr	r3, [pc, #264]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab4e:	4798      	blx	r3
            break;
    ab50:	e05e      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_NOT_JOINED:
                printf("\n\rNWK_NOT_JOINED \n\r");
    ab52:	4b48      	ldr	r3, [pc, #288]	; (ac74 <demo_appdata_callback+0x300>)
    ab54:	0018      	movs	r0, r3
    ab56:	4b40      	ldr	r3, [pc, #256]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab58:	4798      	blx	r3
            break;
    ab5a:	e059      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_PARAMETER:
                printf("\n\rINVALID_PARAMETER \n\r");
    ab5c:	4b46      	ldr	r3, [pc, #280]	; (ac78 <demo_appdata_callback+0x304>)
    ab5e:	0018      	movs	r0, r3
    ab60:	4b3d      	ldr	r3, [pc, #244]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab62:	4798      	blx	r3
            break;
    ab64:	e054      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_KEYS_NOT_INITIALIZED:
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    ab66:	4b45      	ldr	r3, [pc, #276]	; (ac7c <demo_appdata_callback+0x308>)
    ab68:	0018      	movs	r0, r3
    ab6a:	4b3b      	ldr	r3, [pc, #236]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab6c:	4798      	blx	r3
            break;
    ab6e:	e04f      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_SILENT_IMMEDIATELY_ACTIVE:
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    ab70:	4b43      	ldr	r3, [pc, #268]	; (ac80 <demo_appdata_callback+0x30c>)
    ab72:	0018      	movs	r0, r3
    ab74:	4b38      	ldr	r3, [pc, #224]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab76:	4798      	blx	r3
            break;
    ab78:	e04a      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR_REJOIN_NEEDED:
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    ab7a:	4b42      	ldr	r3, [pc, #264]	; (ac84 <demo_appdata_callback+0x310>)
    ab7c:	0018      	movs	r0, r3
    ab7e:	4b36      	ldr	r3, [pc, #216]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab80:	4798      	blx	r3
            break;
    ab82:	e045      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_BUFFER_LENGTH:
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    ab84:	4b40      	ldr	r3, [pc, #256]	; (ac88 <demo_appdata_callback+0x314>)
    ab86:	0018      	movs	r0, r3
    ab88:	4b33      	ldr	r3, [pc, #204]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab8a:	4798      	blx	r3
            break;
    ab8c:	e040      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MAC_PAUSED :
                printf("\n\rMAC_PAUSED  \n\r");
    ab8e:	4b3f      	ldr	r3, [pc, #252]	; (ac8c <demo_appdata_callback+0x318>)
    ab90:	0018      	movs	r0, r3
    ab92:	4b31      	ldr	r3, [pc, #196]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab94:	4798      	blx	r3
            break;
    ab96:	e03b      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_CHANNELS_FOUND:
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    ab98:	4b3d      	ldr	r3, [pc, #244]	; (ac90 <demo_appdata_callback+0x31c>)
    ab9a:	0018      	movs	r0, r3
    ab9c:	4b2e      	ldr	r3, [pc, #184]	; (ac58 <demo_appdata_callback+0x2e4>)
    ab9e:	4798      	blx	r3
            break;
    aba0:	e036      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_BUSY:
                printf("\n\rBUSY\n\r");
    aba2:	4b3c      	ldr	r3, [pc, #240]	; (ac94 <demo_appdata_callback+0x320>)
    aba4:	0018      	movs	r0, r3
    aba6:	4b2c      	ldr	r3, [pc, #176]	; (ac58 <demo_appdata_callback+0x2e4>)
    aba8:	4798      	blx	r3
            break;
    abaa:	e031      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_ACK:
                printf("\n\rNO_ACK \n\r");
    abac:	4b3a      	ldr	r3, [pc, #232]	; (ac98 <demo_appdata_callback+0x324>)
    abae:	0018      	movs	r0, r3
    abb0:	4b29      	ldr	r3, [pc, #164]	; (ac58 <demo_appdata_callback+0x2e4>)
    abb2:	4798      	blx	r3
            break;
    abb4:	e02c      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_JOIN_IN_PROGRESS:
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    abb6:	4b39      	ldr	r3, [pc, #228]	; (ac9c <demo_appdata_callback+0x328>)
    abb8:	0018      	movs	r0, r3
    abba:	4b27      	ldr	r3, [pc, #156]	; (ac58 <demo_appdata_callback+0x2e4>)
    abbc:	4798      	blx	r3
            break;
    abbe:	e027      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_RESOURCE_UNAVAILABLE:
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    abc0:	4b37      	ldr	r3, [pc, #220]	; (aca0 <demo_appdata_callback+0x32c>)
    abc2:	0018      	movs	r0, r3
    abc4:	4b24      	ldr	r3, [pc, #144]	; (ac58 <demo_appdata_callback+0x2e4>)
    abc6:	4798      	blx	r3
            break;
    abc8:	e022      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_REQUEST:
                printf("\n\rINVALID_REQUEST \n\r");
    abca:	4b36      	ldr	r3, [pc, #216]	; (aca4 <demo_appdata_callback+0x330>)
    abcc:	0018      	movs	r0, r3
    abce:	4b22      	ldr	r3, [pc, #136]	; (ac58 <demo_appdata_callback+0x2e4>)
    abd0:	4798      	blx	r3
            break;
    abd2:	e01d      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR:
                printf("\n\rFCNTR_ERROR \n\r");
    abd4:	4b34      	ldr	r3, [pc, #208]	; (aca8 <demo_appdata_callback+0x334>)
    abd6:	0018      	movs	r0, r3
    abd8:	4b1f      	ldr	r3, [pc, #124]	; (ac58 <demo_appdata_callback+0x2e4>)
    abda:	4798      	blx	r3
            break;
    abdc:	e018      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MIC_ERROR:
                printf("\n\rMIC_ERROR \n\r");
    abde:	4b33      	ldr	r3, [pc, #204]	; (acac <demo_appdata_callback+0x338>)
    abe0:	0018      	movs	r0, r3
    abe2:	4b1d      	ldr	r3, [pc, #116]	; (ac58 <demo_appdata_callback+0x2e4>)
    abe4:	4798      	blx	r3
            break;
    abe6:	e013      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_MTYPE:
                printf("\n\rINVALID_MTYPE \n\r");
    abe8:	4b31      	ldr	r3, [pc, #196]	; (acb0 <demo_appdata_callback+0x33c>)
    abea:	0018      	movs	r0, r3
    abec:	4b1a      	ldr	r3, [pc, #104]	; (ac58 <demo_appdata_callback+0x2e4>)
    abee:	4798      	blx	r3
            break;
    abf0:	e00e      	b.n	ac10 <demo_appdata_callback+0x29c>
            case LORAWAN_MCAST_HDR_INVALID:
                printf("\n\rMCAST_HDR_INVALID \n\r");
    abf2:	4b30      	ldr	r3, [pc, #192]	; (acb4 <demo_appdata_callback+0x340>)
    abf4:	0018      	movs	r0, r3
    abf6:	4b18      	ldr	r3, [pc, #96]	; (ac58 <demo_appdata_callback+0x2e4>)
    abf8:	4798      	blx	r3
            break;
    abfa:	e009      	b.n	ac10 <demo_appdata_callback+0x29c>
			case LORAWAN_INVALID_PACKET:
				printf("\n\rINVALID_PACKET \n\r");
    abfc:	4b2e      	ldr	r3, [pc, #184]	; (acb8 <demo_appdata_callback+0x344>)
    abfe:	0018      	movs	r0, r3
    ac00:	4b15      	ldr	r3, [pc, #84]	; (ac58 <demo_appdata_callback+0x2e4>)
    ac02:	4798      	blx	r3
			break;
    ac04:	e004      	b.n	ac10 <demo_appdata_callback+0x29c>
            default:
                printf("\n\rUNKNOWN ERROR\n\r");
    ac06:	4b32      	ldr	r3, [pc, #200]	; (acd0 <demo_appdata_callback+0x35c>)
    ac08:	0018      	movs	r0, r3
    ac0a:	4b13      	ldr	r3, [pc, #76]	; (ac58 <demo_appdata_callback+0x2e4>)
    ac0c:	4798      	blx	r3
            break;
    ac0e:	46c0      	nop			; (mov r8, r8)

                    }
        //printf("\n\r*************************************************\n\r");
    }

    SwTimerStop(lTimerId);
    ac10:	4b30      	ldr	r3, [pc, #192]	; (acd4 <demo_appdata_callback+0x360>)
    ac12:	781b      	ldrb	r3, [r3, #0]
    ac14:	0018      	movs	r0, r3
    ac16:	4b30      	ldr	r3, [pc, #192]	; (acd8 <demo_appdata_callback+0x364>)
    ac18:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    ac1a:	4b30      	ldr	r3, [pc, #192]	; (acdc <demo_appdata_callback+0x368>)
    ac1c:	0019      	movs	r1, r3
    ac1e:	2003      	movs	r0, #3
    ac20:	4b2f      	ldr	r3, [pc, #188]	; (ace0 <demo_appdata_callback+0x36c>)
    ac22:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    ac24:	230f      	movs	r3, #15
    ac26:	18fb      	adds	r3, r7, r3
    ac28:	781b      	ldrb	r3, [r3, #0]
    ac2a:	2b08      	cmp	r3, #8
    ac2c:	d004      	beq.n	ac38 <demo_appdata_callback+0x2c4>
    {
        //set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
    ac2e:	4b2b      	ldr	r3, [pc, #172]	; (acdc <demo_appdata_callback+0x368>)
    ac30:	0019      	movs	r1, r3
    ac32:	2002      	movs	r0, #2
    ac34:	4b2a      	ldr	r3, [pc, #168]	; (ace0 <demo_appdata_callback+0x36c>)
    ac36:	4798      	blx	r3
    }
	appTaskState = JOIN_SEND_STATE;
    ac38:	4b2a      	ldr	r3, [pc, #168]	; (ace4 <demo_appdata_callback+0x370>)
    ac3a:	2203      	movs	r2, #3
    ac3c:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    ac3e:	2000      	movs	r0, #0
    ac40:	4b29      	ldr	r3, [pc, #164]	; (ace8 <demo_appdata_callback+0x374>)
    ac42:	4798      	blx	r3
}
    ac44:	46c0      	nop			; (mov r8, r8)
    ac46:	46bd      	mov	sp, r7
    ac48:	b004      	add	sp, #16
    ac4a:	bd80      	pop	{r7, pc}
    ac4c:	00017268 	.word	0x00017268
    ac50:	0000a881 	.word	0x0000a881
    ac54:	00016a68 	.word	0x00016a68
    ac58:	0001158d 	.word	0x0001158d
    ac5c:	00016a7c 	.word	0x00016a7c
    ac60:	00016a94 	.word	0x00016a94
    ac64:	00016aac 	.word	0x00016aac
    ac68:	00016abc 	.word	0x00016abc
    ac6c:	00016ad4 	.word	0x00016ad4
    ac70:	00016af0 	.word	0x00016af0
    ac74:	00016b08 	.word	0x00016b08
    ac78:	00016b1c 	.word	0x00016b1c
    ac7c:	00016b34 	.word	0x00016b34
    ac80:	00016b50 	.word	0x00016b50
    ac84:	00016b70 	.word	0x00016b70
    ac88:	00016b90 	.word	0x00016b90
    ac8c:	00016bac 	.word	0x00016bac
    ac90:	00016bc0 	.word	0x00016bc0
    ac94:	00016bd8 	.word	0x00016bd8
    ac98:	00016be4 	.word	0x00016be4
    ac9c:	00016bf0 	.word	0x00016bf0
    aca0:	00016c14 	.word	0x00016c14
    aca4:	00016c30 	.word	0x00016c30
    aca8:	00016c48 	.word	0x00016c48
    acac:	00016c5c 	.word	0x00016c5c
    acb0:	00016c6c 	.word	0x00016c6c
    acb4:	00016c80 	.word	0x00016c80
    acb8:	00016c98 	.word	0x00016c98
    acbc:	00016cac 	.word	0x00016cac
    acc0:	000172e4 	.word	0x000172e4
    acc4:	00016cbc 	.word	0x00016cbc
    acc8:	00011651 	.word	0x00011651
    accc:	00016cd4 	.word	0x00016cd4
    acd0:	00016ce4 	.word	0x00016ce4
    acd4:	20000048 	.word	0x20000048
    acd8:	000097bd 	.word	0x000097bd
    acdc:	20000e8b 	.word	0x20000e8b
    ace0:	00008da5 	.word	0x00008da5
    ace4:	20000e9c 	.word	0x20000e9c
    ace8:	0000afad 	.word	0x0000afad

0000acec <demo_joindata_callback>:

/*********************************************************************//*
\brief Callback function for the ending of Activation procedure
 ************************************************************************/
void demo_joindata_callback(StackRetStatus_t status)
{
    acec:	b580      	push	{r7, lr}
    acee:	b084      	sub	sp, #16
    acf0:	af00      	add	r7, sp, #0
    acf2:	0002      	movs	r2, r0
    acf4:	1dfb      	adds	r3, r7, #7
    acf6:	701a      	strb	r2, [r3, #0]
    /* This is called every time the join process is finished */
    set_LED_data(LED_GREEN,&off);
    acf8:	4b44      	ldr	r3, [pc, #272]	; (ae0c <demo_joindata_callback+0x120>)
    acfa:	0019      	movs	r1, r3
    acfc:	2003      	movs	r0, #3
    acfe:	4b44      	ldr	r3, [pc, #272]	; (ae10 <demo_joindata_callback+0x124>)
    ad00:	4798      	blx	r3
    if(LORAWAN_SUCCESS == status)
    ad02:	1dfb      	adds	r3, r7, #7
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	2b08      	cmp	r3, #8
    ad08:	d134      	bne.n	ad74 <demo_joindata_callback+0x88>
    {
        uint32_t devAddress;
        bool mcastEnabled;

        joined = true;
    ad0a:	4b42      	ldr	r3, [pc, #264]	; (ae14 <demo_joindata_callback+0x128>)
    ad0c:	2201      	movs	r2, #1
    ad0e:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    ad10:	4b41      	ldr	r3, [pc, #260]	; (ae18 <demo_joindata_callback+0x12c>)
    ad12:	0018      	movs	r0, r3
    ad14:	4b41      	ldr	r3, [pc, #260]	; (ae1c <demo_joindata_callback+0x130>)
    ad16:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    ad18:	230c      	movs	r3, #12
    ad1a:	18fb      	adds	r3, r7, r3
    ad1c:	001a      	movs	r2, r3
    ad1e:	2100      	movs	r1, #0
    ad20:	2002      	movs	r0, #2
    ad22:	4b3f      	ldr	r3, [pc, #252]	; (ae20 <demo_joindata_callback+0x134>)
    ad24:	4798      	blx	r3
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    ad26:	230b      	movs	r3, #11
    ad28:	18fb      	adds	r3, r7, r3
    ad2a:	001a      	movs	r2, r3
    ad2c:	2100      	movs	r1, #0
    ad2e:	2029      	movs	r0, #41	; 0x29
    ad30:	4b3b      	ldr	r3, [pc, #236]	; (ae20 <demo_joindata_callback+0x134>)
    ad32:	4798      	blx	r3

        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    ad34:	68fb      	ldr	r3, [r7, #12]
    ad36:	4a3b      	ldr	r2, [pc, #236]	; (ae24 <demo_joindata_callback+0x138>)
    ad38:	4293      	cmp	r3, r2
    ad3a:	d006      	beq.n	ad4a <demo_joindata_callback+0x5e>
        {
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    ad3c:	68fa      	ldr	r2, [r7, #12]
    ad3e:	4b3a      	ldr	r3, [pc, #232]	; (ae28 <demo_joindata_callback+0x13c>)
    ad40:	0011      	movs	r1, r2
    ad42:	0018      	movs	r0, r3
    ad44:	4b35      	ldr	r3, [pc, #212]	; (ae1c <demo_joindata_callback+0x130>)
    ad46:	4798      	blx	r3
    ad48:	e00c      	b.n	ad64 <demo_joindata_callback+0x78>
        }
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    ad4a:	68fb      	ldr	r3, [r7, #12]
    ad4c:	4a35      	ldr	r2, [pc, #212]	; (ae24 <demo_joindata_callback+0x138>)
    ad4e:	4293      	cmp	r3, r2
    ad50:	d108      	bne.n	ad64 <demo_joindata_callback+0x78>
    ad52:	230b      	movs	r3, #11
    ad54:	18fb      	adds	r3, r7, r3
    ad56:	781b      	ldrb	r3, [r3, #0]
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d003      	beq.n	ad64 <demo_joindata_callback+0x78>
        {
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    ad5c:	4b33      	ldr	r3, [pc, #204]	; (ae2c <demo_joindata_callback+0x140>)
    ad5e:	0018      	movs	r0, r3
    ad60:	4b2e      	ldr	r3, [pc, #184]	; (ae1c <demo_joindata_callback+0x130>)
    ad62:	4798      	blx	r3
        }
        print_application_config();
    ad64:	4b32      	ldr	r3, [pc, #200]	; (ae30 <demo_joindata_callback+0x144>)
    ad66:	4798      	blx	r3
        //set_LED_data(LED_GREEN,&on);
		set_LED_data(LED_GREEN,&off);
    ad68:	4b28      	ldr	r3, [pc, #160]	; (ae0c <demo_joindata_callback+0x120>)
    ad6a:	0019      	movs	r1, r3
    ad6c:	2003      	movs	r0, #3
    ad6e:	4b28      	ldr	r3, [pc, #160]	; (ae10 <demo_joindata_callback+0x124>)
    ad70:	4798      	blx	r3
    ad72:	e03e      	b.n	adf2 <demo_joindata_callback+0x106>
    }
	else if(LORAWAN_NO_CHANNELS_FOUND == status)
    ad74:	1dfb      	adds	r3, r7, #7
    ad76:	781b      	ldrb	r3, [r3, #0]
    ad78:	2b10      	cmp	r3, #16
    ad7a:	d10c      	bne.n	ad96 <demo_joindata_callback+0xaa>
	{
		joined = false;
    ad7c:	4b25      	ldr	r3, [pc, #148]	; (ae14 <demo_joindata_callback+0x128>)
    ad7e:	2200      	movs	r2, #0
    ad80:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
    ad82:	4b22      	ldr	r3, [pc, #136]	; (ae0c <demo_joindata_callback+0x120>)
    ad84:	0019      	movs	r1, r3
    ad86:	2002      	movs	r0, #2
    ad88:	4b21      	ldr	r3, [pc, #132]	; (ae10 <demo_joindata_callback+0x124>)
    ad8a:	4798      	blx	r3
		printf("\n No Free Channel found");
    ad8c:	4b29      	ldr	r3, [pc, #164]	; (ae34 <demo_joindata_callback+0x148>)
    ad8e:	0018      	movs	r0, r3
    ad90:	4b22      	ldr	r3, [pc, #136]	; (ae1c <demo_joindata_callback+0x130>)
    ad92:	4798      	blx	r3
    ad94:	e02d      	b.n	adf2 <demo_joindata_callback+0x106>
	}
	else if (LORAWAN_MIC_ERROR == status)
    ad96:	1dfb      	adds	r3, r7, #7
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	2b18      	cmp	r3, #24
    ad9c:	d10c      	bne.n	adb8 <demo_joindata_callback+0xcc>
	{
		joined = false;
    ad9e:	4b1d      	ldr	r3, [pc, #116]	; (ae14 <demo_joindata_callback+0x128>)
    ada0:	2200      	movs	r2, #0
    ada2:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
    ada4:	4b19      	ldr	r3, [pc, #100]	; (ae0c <demo_joindata_callback+0x120>)
    ada6:	0019      	movs	r1, r3
    ada8:	2002      	movs	r0, #2
    adaa:	4b19      	ldr	r3, [pc, #100]	; (ae10 <demo_joindata_callback+0x124>)
    adac:	4798      	blx	r3
		printf("\n MIC Error");
    adae:	4b22      	ldr	r3, [pc, #136]	; (ae38 <demo_joindata_callback+0x14c>)
    adb0:	0018      	movs	r0, r3
    adb2:	4b1a      	ldr	r3, [pc, #104]	; (ae1c <demo_joindata_callback+0x130>)
    adb4:	4798      	blx	r3
    adb6:	e01c      	b.n	adf2 <demo_joindata_callback+0x106>
	}
	else if (LORAWAN_TX_TIMEOUT == status)
    adb8:	1dfb      	adds	r3, r7, #7
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	2b1b      	cmp	r3, #27
    adbe:	d10c      	bne.n	adda <demo_joindata_callback+0xee>
	{
		joined = false;
    adc0:	4b14      	ldr	r3, [pc, #80]	; (ae14 <demo_joindata_callback+0x128>)
    adc2:	2200      	movs	r2, #0
    adc4:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
    adc6:	4b11      	ldr	r3, [pc, #68]	; (ae0c <demo_joindata_callback+0x120>)
    adc8:	0019      	movs	r1, r3
    adca:	2002      	movs	r0, #2
    adcc:	4b10      	ldr	r3, [pc, #64]	; (ae10 <demo_joindata_callback+0x124>)
    adce:	4798      	blx	r3
		printf("\n Transmission Timeout");
    add0:	4b1a      	ldr	r3, [pc, #104]	; (ae3c <demo_joindata_callback+0x150>)
    add2:	0018      	movs	r0, r3
    add4:	4b11      	ldr	r3, [pc, #68]	; (ae1c <demo_joindata_callback+0x130>)
    add6:	4798      	blx	r3
    add8:	e00b      	b.n	adf2 <demo_joindata_callback+0x106>
	}
    else
    {
        joined = false;
    adda:	4b0e      	ldr	r3, [pc, #56]	; (ae14 <demo_joindata_callback+0x128>)
    addc:	2200      	movs	r2, #0
    adde:	701a      	strb	r2, [r3, #0]
        //set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
    ade0:	4b0a      	ldr	r3, [pc, #40]	; (ae0c <demo_joindata_callback+0x120>)
    ade2:	0019      	movs	r1, r3
    ade4:	2002      	movs	r0, #2
    ade6:	4b0a      	ldr	r3, [pc, #40]	; (ae10 <demo_joindata_callback+0x124>)
    ade8:	4798      	blx	r3
        printf("\nJoining Denied\n\r");
    adea:	4b15      	ldr	r3, [pc, #84]	; (ae40 <demo_joindata_callback+0x154>)
    adec:	0018      	movs	r0, r3
    adee:	4b0b      	ldr	r3, [pc, #44]	; (ae1c <demo_joindata_callback+0x130>)
    adf0:	4798      	blx	r3
    }
    //printf("\n\r*******************************************************\n\r");
    PDS_StoreAll();
    adf2:	4b14      	ldr	r3, [pc, #80]	; (ae44 <demo_joindata_callback+0x158>)
    adf4:	4798      	blx	r3
	
	appTaskState = JOIN_SEND_STATE;
    adf6:	4b14      	ldr	r3, [pc, #80]	; (ae48 <demo_joindata_callback+0x15c>)
    adf8:	2203      	movs	r2, #3
    adfa:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    adfc:	2000      	movs	r0, #0
    adfe:	4b13      	ldr	r3, [pc, #76]	; (ae4c <demo_joindata_callback+0x160>)
    ae00:	4798      	blx	r3
}
    ae02:	46c0      	nop			; (mov r8, r8)
    ae04:	46bd      	mov	sp, r7
    ae06:	b004      	add	sp, #16
    ae08:	bd80      	pop	{r7, pc}
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	20000e8b 	.word	0x20000e8b
    ae10:	00008da5 	.word	0x00008da5
    ae14:	20000e8a 	.word	0x20000e8a
    ae18:	00016cf8 	.word	0x00016cf8
    ae1c:	0001158d 	.word	0x0001158d
    ae20:	0000c591 	.word	0x0000c591
    ae24:	0037cc56 	.word	0x0037cc56
    ae28:	00016d10 	.word	0x00016d10
    ae2c:	00016d24 	.word	0x00016d24
    ae30:	0000affd 	.word	0x0000affd
    ae34:	00016d6c 	.word	0x00016d6c
    ae38:	00016d84 	.word	0x00016d84
    ae3c:	00016d90 	.word	0x00016d90
    ae40:	00016da8 	.word	0x00016da8
    ae44:	00008411 	.word	0x00008411
    ae48:	20000e9c 	.word	0x20000e9c
    ae4c:	0000afad 	.word	0x0000afad

0000ae50 <demoTimerCb>:
 \brief      Timer callback for demo application.
             Used during the initial 5 sec wait period.
 \param[in]  cnt - not used
 ************************************************************************/
void demoTimerCb(void * cnt)
{
    ae50:	b590      	push	{r4, r7, lr}
    ae52:	b087      	sub	sp, #28
    ae54:	af02      	add	r7, sp, #8
    ae56:	6078      	str	r0, [r7, #4]
    uint8_t i = 10;
    ae58:	230f      	movs	r3, #15
    ae5a:	18fb      	adds	r3, r7, r3
    ae5c:	220a      	movs	r2, #10
    ae5e:	701a      	strb	r2, [r3, #0]
    int8_t rxdata = 0;
    ae60:	230e      	movs	r3, #14
    ae62:	18fb      	adds	r3, r7, r3
    ae64:	2200      	movs	r2, #0
    ae66:	701a      	strb	r2, [r3, #0]
    printf("%d..",count);
    ae68:	4b42      	ldr	r3, [pc, #264]	; (af74 <demoTimerCb+0x124>)
    ae6a:	781b      	ldrb	r3, [r3, #0]
    ae6c:	b2db      	uxtb	r3, r3
    ae6e:	001a      	movs	r2, r3
    ae70:	4b41      	ldr	r3, [pc, #260]	; (af78 <demoTimerCb+0x128>)
    ae72:	0011      	movs	r1, r2
    ae74:	0018      	movs	r0, r3
    ae76:	4b41      	ldr	r3, [pc, #260]	; (af7c <demoTimerCb+0x12c>)
    ae78:	4798      	blx	r3
    count--;
    ae7a:	4b3e      	ldr	r3, [pc, #248]	; (af74 <demoTimerCb+0x124>)
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	b2db      	uxtb	r3, r3
    ae80:	3b01      	subs	r3, #1
    ae82:	b2da      	uxtb	r2, r3
    ae84:	4b3b      	ldr	r3, [pc, #236]	; (af74 <demoTimerCb+0x124>)
    ae86:	701a      	strb	r2, [r3, #0]
	startReceiving = false;
    ae88:	4b3d      	ldr	r3, [pc, #244]	; (af80 <demoTimerCb+0x130>)
    ae8a:	2200      	movs	r2, #0
    ae8c:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
    ae8e:	4b3d      	ldr	r3, [pc, #244]	; (af84 <demoTimerCb+0x134>)
    ae90:	210a      	movs	r1, #10
    ae92:	0018      	movs	r0, r3
    ae94:	4b3c      	ldr	r3, [pc, #240]	; (af88 <demoTimerCb+0x138>)
    ae96:	4798      	blx	r3
    for(i = 0;i<=10;i++)
    ae98:	230f      	movs	r3, #15
    ae9a:	18fb      	adds	r3, r7, r3
    ae9c:	2200      	movs	r2, #0
    ae9e:	701a      	strb	r2, [r3, #0]
    aea0:	e01d      	b.n	aede <demoTimerCb+0x8e>
    {
        if(rxchar[i] != 13 && rxchar[i] != 10)
    aea2:	230f      	movs	r3, #15
    aea4:	18fb      	adds	r3, r7, r3
    aea6:	781b      	ldrb	r3, [r3, #0]
    aea8:	4a36      	ldr	r2, [pc, #216]	; (af84 <demoTimerCb+0x134>)
    aeaa:	5cd3      	ldrb	r3, [r2, r3]
    aeac:	2b0d      	cmp	r3, #13
    aeae:	d00f      	beq.n	aed0 <demoTimerCb+0x80>
    aeb0:	230f      	movs	r3, #15
    aeb2:	18fb      	adds	r3, r7, r3
    aeb4:	781b      	ldrb	r3, [r3, #0]
    aeb6:	4a33      	ldr	r2, [pc, #204]	; (af84 <demoTimerCb+0x134>)
    aeb8:	5cd3      	ldrb	r3, [r2, r3]
    aeba:	2b0a      	cmp	r3, #10
    aebc:	d008      	beq.n	aed0 <demoTimerCb+0x80>
        {
            rxdata = rxchar[i];
    aebe:	230f      	movs	r3, #15
    aec0:	18fb      	adds	r3, r7, r3
    aec2:	781b      	ldrb	r3, [r3, #0]
    aec4:	4a2f      	ldr	r2, [pc, #188]	; (af84 <demoTimerCb+0x134>)
    aec6:	5cd2      	ldrb	r2, [r2, r3]
    aec8:	230e      	movs	r3, #14
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	701a      	strb	r2, [r3, #0]
            break;
    aece:	e00b      	b.n	aee8 <demoTimerCb+0x98>
    for(i = 0;i<=10;i++)
    aed0:	230f      	movs	r3, #15
    aed2:	18fb      	adds	r3, r7, r3
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	230f      	movs	r3, #15
    aed8:	18fb      	adds	r3, r7, r3
    aeda:	3201      	adds	r2, #1
    aedc:	701a      	strb	r2, [r3, #0]
    aede:	230f      	movs	r3, #15
    aee0:	18fb      	adds	r3, r7, r3
    aee2:	781b      	ldrb	r3, [r3, #0]
    aee4:	2b0a      	cmp	r3, #10
    aee6:	d9dc      	bls.n	aea2 <demoTimerCb+0x52>
        }
    }
    if(!count)
    aee8:	4b22      	ldr	r3, [pc, #136]	; (af74 <demoTimerCb+0x124>)
    aeea:	781b      	ldrb	r3, [r3, #0]
    aeec:	b2db      	uxtb	r3, r3
    aeee:	2b00      	cmp	r3, #0
    aef0:	d103      	bne.n	aefa <demoTimerCb+0xaa>
    {
        printf("\r\n");
    aef2:	4b26      	ldr	r3, [pc, #152]	; (af8c <demoTimerCb+0x13c>)
    aef4:	0018      	movs	r0, r3
    aef6:	4b26      	ldr	r3, [pc, #152]	; (af90 <demoTimerCb+0x140>)
    aef8:	4798      	blx	r3
    }
    /* No input so far. start timer till expiry */
    if(count > 0 && (!rxdata))
    aefa:	4b1e      	ldr	r3, [pc, #120]	; (af74 <demoTimerCb+0x124>)
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	b2db      	uxtb	r3, r3
    af00:	2b00      	cmp	r3, #0
    af02:	d010      	beq.n	af26 <demoTimerCb+0xd6>
    af04:	230e      	movs	r3, #14
    af06:	18fb      	adds	r3, r7, r3
    af08:	781b      	ldrb	r3, [r3, #0]
    af0a:	b25b      	sxtb	r3, r3
    af0c:	2b00      	cmp	r3, #0
    af0e:	d10a      	bne.n	af26 <demoTimerCb+0xd6>
    {
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    af10:	4b20      	ldr	r3, [pc, #128]	; (af94 <demoTimerCb+0x144>)
    af12:	7818      	ldrb	r0, [r3, #0]
    af14:	4a20      	ldr	r2, [pc, #128]	; (af98 <demoTimerCb+0x148>)
    af16:	4921      	ldr	r1, [pc, #132]	; (af9c <demoTimerCb+0x14c>)
    af18:	2300      	movs	r3, #0
    af1a:	9300      	str	r3, [sp, #0]
    af1c:	0013      	movs	r3, r2
    af1e:	2200      	movs	r2, #0
    af20:	4c1f      	ldr	r4, [pc, #124]	; (afa0 <demoTimerCb+0x150>)
    af22:	47a0      	blx	r4
    af24:	e022      	b.n	af6c <demoTimerCb+0x11c>
    }
    /* user did not press any input */
    else if(count == 0 && (!rxdata))
    af26:	4b13      	ldr	r3, [pc, #76]	; (af74 <demoTimerCb+0x124>)
    af28:	781b      	ldrb	r3, [r3, #0]
    af2a:	b2db      	uxtb	r3, r3
    af2c:	2b00      	cmp	r3, #0
    af2e:	d10c      	bne.n	af4a <demoTimerCb+0xfa>
    af30:	230e      	movs	r3, #14
    af32:	18fb      	adds	r3, r7, r3
    af34:	781b      	ldrb	r3, [r3, #0]
    af36:	b25b      	sxtb	r3, r3
    af38:	2b00      	cmp	r3, #0
    af3a:	d106      	bne.n	af4a <demoTimerCb+0xfa>
    {
		appTaskState = RESTORE_BAND_STATE;
    af3c:	4b19      	ldr	r3, [pc, #100]	; (afa4 <demoTimerCb+0x154>)
    af3e:	2200      	movs	r2, #0
    af40:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    af42:	2000      	movs	r0, #0
    af44:	4b18      	ldr	r3, [pc, #96]	; (afa8 <demoTimerCb+0x158>)
    af46:	4798      	blx	r3
    af48:	e010      	b.n	af6c <demoTimerCb+0x11c>
    }
    /* User pressed a key */
    else if(rxdata)
    af4a:	230e      	movs	r3, #14
    af4c:	18fb      	adds	r3, r7, r3
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	b25b      	sxtb	r3, r3
    af52:	2b00      	cmp	r3, #0
    af54:	d00a      	beq.n	af6c <demoTimerCb+0x11c>
    {
        printf("\r\n");
    af56:	4b0d      	ldr	r3, [pc, #52]	; (af8c <demoTimerCb+0x13c>)
    af58:	0018      	movs	r0, r3
    af5a:	4b0d      	ldr	r3, [pc, #52]	; (af90 <demoTimerCb+0x140>)
    af5c:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    af5e:	4b11      	ldr	r3, [pc, #68]	; (afa4 <demoTimerCb+0x154>)
    af60:	2201      	movs	r2, #1
    af62:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    af64:	2000      	movs	r0, #0
    af66:	4b10      	ldr	r3, [pc, #64]	; (afa8 <demoTimerCb+0x158>)
    af68:	4798      	blx	r3
    }

}
    af6a:	e7ff      	b.n	af6c <demoTimerCb+0x11c>
    af6c:	46c0      	nop			; (mov r8, r8)
    af6e:	46bd      	mov	sp, r7
    af70:	b005      	add	sp, #20
    af72:	bd90      	pop	{r4, r7, pc}
    af74:	20000011 	.word	0x20000011
    af78:	00016df0 	.word	0x00016df0
    af7c:	0001158d 	.word	0x0001158d
    af80:	20000e9b 	.word	0x20000e9b
    af84:	20000e90 	.word	0x20000e90
    af88:	0000706d 	.word	0x0000706d
    af8c:	000166ac 	.word	0x000166ac
    af90:	00011651 	.word	0x00011651
    af94:	20000047 	.word	0x20000047
    af98:	0000ae51 	.word	0x0000ae51
    af9c:	000f4240 	.word	0x000f4240
    afa0:	000095bd 	.word	0x000095bd
    afa4:	20000e9c 	.word	0x20000e9c
    afa8:	0000afad 	.word	0x0000afad

0000afac <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    afac:	b580      	push	{r7, lr}
    afae:	b082      	sub	sp, #8
    afb0:	af00      	add	r7, sp, #0
    afb2:	0002      	movs	r2, r0
    afb4:	1dfb      	adds	r3, r7, #7
    afb6:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
    afb8:	4b0c      	ldr	r3, [pc, #48]	; (afec <appPostTask+0x40>)
    afba:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    afbc:	1dfb      	adds	r3, r7, #7
    afbe:	781b      	ldrb	r3, [r3, #0]
    afc0:	2201      	movs	r2, #1
    afc2:	409a      	lsls	r2, r3
    afc4:	0013      	movs	r3, r2
    afc6:	b25a      	sxtb	r2, r3
    afc8:	4b09      	ldr	r3, [pc, #36]	; (aff0 <appPostTask+0x44>)
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	b2db      	uxtb	r3, r3
    afce:	b25b      	sxtb	r3, r3
    afd0:	4313      	orrs	r3, r2
    afd2:	b25b      	sxtb	r3, r3
    afd4:	b2da      	uxtb	r2, r3
    afd6:	4b06      	ldr	r3, [pc, #24]	; (aff0 <appPostTask+0x44>)
    afd8:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
    afda:	4b06      	ldr	r3, [pc, #24]	; (aff4 <appPostTask+0x48>)
    afdc:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    afde:	2010      	movs	r0, #16
    afe0:	4b05      	ldr	r3, [pc, #20]	; (aff8 <appPostTask+0x4c>)
    afe2:	4798      	blx	r3
}
    afe4:	46c0      	nop			; (mov r8, r8)
    afe6:	46bd      	mov	sp, r7
    afe8:	b002      	add	sp, #8
    afea:	bd80      	pop	{r7, pc}
    afec:	00007dc9 	.word	0x00007dc9
    aff0:	20000e8c 	.word	0x20000e8c
    aff4:	00007ddd 	.word	0x00007ddd
    aff8:	00009cb5 	.word	0x00009cb5

0000affc <print_application_config>:

/*********************************************************************//*
 \brief      Function to Print application configuration
 ************************************************************************/
void  print_application_config (void)
{
    affc:	b580      	push	{r7, lr}
    affe:	b082      	sub	sp, #8
    b000:	af00      	add	r7, sp, #0
    EdClass_t edClass;
    printf("\n***************Application Configuration***************\n\r");
    b002:	4b1e      	ldr	r3, [pc, #120]	; (b07c <print_application_config+0x80>)
    b004:	0018      	movs	r0, r3
    b006:	4b1e      	ldr	r3, [pc, #120]	; (b080 <print_application_config+0x84>)
    b008:	4798      	blx	r3
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    b00a:	1dfb      	adds	r3, r7, #7
    b00c:	001a      	movs	r2, r3
    b00e:	2100      	movs	r1, #0
    b010:	201a      	movs	r0, #26
    b012:	4b1c      	ldr	r3, [pc, #112]	; (b084 <print_application_config+0x88>)
    b014:	4798      	blx	r3
    printf("\nDevType : ");
    b016:	4b1c      	ldr	r3, [pc, #112]	; (b088 <print_application_config+0x8c>)
    b018:	0018      	movs	r0, r3
    b01a:	4b19      	ldr	r3, [pc, #100]	; (b080 <print_application_config+0x84>)
    b01c:	4798      	blx	r3

    if(edClass == CLASS_A)
    b01e:	1dfb      	adds	r3, r7, #7
    b020:	781b      	ldrb	r3, [r3, #0]
    b022:	2b01      	cmp	r3, #1
    b024:	d104      	bne.n	b030 <print_application_config+0x34>
    {
        printf("CLASS A\n\r");
    b026:	4b19      	ldr	r3, [pc, #100]	; (b08c <print_application_config+0x90>)
    b028:	0018      	movs	r0, r3
    b02a:	4b15      	ldr	r3, [pc, #84]	; (b080 <print_application_config+0x84>)
    b02c:	4798      	blx	r3
    b02e:	e007      	b.n	b040 <print_application_config+0x44>
    }
    else if(edClass == CLASS_C)
    b030:	1dfb      	adds	r3, r7, #7
    b032:	781b      	ldrb	r3, [r3, #0]
    b034:	2b04      	cmp	r3, #4
    b036:	d103      	bne.n	b040 <print_application_config+0x44>
    {
        printf("CLASS C\n\r");
    b038:	4b15      	ldr	r3, [pc, #84]	; (b090 <print_application_config+0x94>)
    b03a:	0018      	movs	r0, r3
    b03c:	4b10      	ldr	r3, [pc, #64]	; (b080 <print_application_config+0x84>)
    b03e:	4798      	blx	r3
    }

    printf("\nActivationType : ");
    b040:	4b14      	ldr	r3, [pc, #80]	; (b094 <print_application_config+0x98>)
    b042:	0018      	movs	r0, r3
    b044:	4b0e      	ldr	r3, [pc, #56]	; (b080 <print_application_config+0x84>)
    b046:	4798      	blx	r3

    if(DEMO_APP_ACTIVATION_TYPE == OVER_THE_AIR_ACTIVATION)
    {
        printf("OTAA\n\r");
    b048:	4b13      	ldr	r3, [pc, #76]	; (b098 <print_application_config+0x9c>)
    b04a:	0018      	movs	r0, r3
    b04c:	4b0c      	ldr	r3, [pc, #48]	; (b080 <print_application_config+0x84>)
    b04e:	4798      	blx	r3
    else if(DEMO_APP_ACTIVATION_TYPE == ACTIVATION_BY_PERSONALIZATION)
    {
        printf("ABP\n\r");
    }

    printf("\nTransmission Type - ");
    b050:	4b12      	ldr	r3, [pc, #72]	; (b09c <print_application_config+0xa0>)
    b052:	0018      	movs	r0, r3
    b054:	4b0a      	ldr	r3, [pc, #40]	; (b080 <print_application_config+0x84>)
    b056:	4798      	blx	r3
    {
        printf("CONFIRMED\n\r");
    }
    else if(DEMO_APP_TRANSMISSION_TYPE == UNCONFIRMED)
    {
        printf("UNCONFIRMED\n\r");
    b058:	4b11      	ldr	r3, [pc, #68]	; (b0a0 <print_application_config+0xa4>)
    b05a:	0018      	movs	r0, r3
    b05c:	4b08      	ldr	r3, [pc, #32]	; (b080 <print_application_config+0x84>)
    b05e:	4798      	blx	r3
    }

    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    b060:	4b10      	ldr	r3, [pc, #64]	; (b0a4 <print_application_config+0xa8>)
    b062:	2101      	movs	r1, #1
    b064:	0018      	movs	r0, r3
    b066:	4b06      	ldr	r3, [pc, #24]	; (b080 <print_application_config+0x84>)
    b068:	4798      	blx	r3

    printf("\n*******************************************************\n\r");
    b06a:	4b0f      	ldr	r3, [pc, #60]	; (b0a8 <print_application_config+0xac>)
    b06c:	0018      	movs	r0, r3
    b06e:	4b04      	ldr	r3, [pc, #16]	; (b080 <print_application_config+0x84>)
    b070:	4798      	blx	r3
}
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	46bd      	mov	sp, r7
    b076:	b002      	add	sp, #8
    b078:	bd80      	pop	{r7, pc}
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	00017018 	.word	0x00017018
    b080:	0001158d 	.word	0x0001158d
    b084:	0000c591 	.word	0x0000c591
    b088:	00017054 	.word	0x00017054
    b08c:	00017060 	.word	0x00017060
    b090:	0001706c 	.word	0x0001706c
    b094:	00017078 	.word	0x00017078
    b098:	0001708c 	.word	0x0001708c
    b09c:	00017094 	.word	0x00017094
    b0a0:	000170ac 	.word	0x000170ac
    b0a4:	000170bc 	.word	0x000170bc
    b0a8:	000170cc 	.word	0x000170cc

0000b0ac <dev_eui_read>:

/*************************************************************************************************//*
 \brief      Reads the DEV EUI if it is flashed in EDBG MCU(SAMR34 Xplained Pro)/ Module(WLR089) 
 **************************************************************************************************/
void dev_eui_read(void)
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	af00      	add	r7, sp, #0
				/* Set EUI addr in Module if there */
				memcpy(demoDevEui, moduleDevEUI, sizeof(demoDevEui));
			}
		#endif
	#endif
}
    b0b0:	46c0      	nop			; (mov r8, r8)
    b0b2:	46bd      	mov	sp, r7
    b0b4:	bd80      	pop	{r7, pc}
	...

0000b0b8 <system_pinmux_get_group_from_gpio_pin>:
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b084      	sub	sp, #16
    b0bc:	af00      	add	r7, sp, #0
    b0be:	0002      	movs	r2, r0
    b0c0:	1dfb      	adds	r3, r7, #7
    b0c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    b0c4:	230f      	movs	r3, #15
    b0c6:	18fb      	adds	r3, r7, r3
    b0c8:	1dfa      	adds	r2, r7, #7
    b0ca:	7812      	ldrb	r2, [r2, #0]
    b0cc:	09d2      	lsrs	r2, r2, #7
    b0ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    b0d0:	230e      	movs	r3, #14
    b0d2:	18fb      	adds	r3, r7, r3
    b0d4:	1dfa      	adds	r2, r7, #7
    b0d6:	7812      	ldrb	r2, [r2, #0]
    b0d8:	0952      	lsrs	r2, r2, #5
    b0da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    b0dc:	4b0d      	ldr	r3, [pc, #52]	; (b114 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    b0de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    b0e0:	230f      	movs	r3, #15
    b0e2:	18fb      	adds	r3, r7, r3
    b0e4:	781b      	ldrb	r3, [r3, #0]
    b0e6:	2b00      	cmp	r3, #0
    b0e8:	d10f      	bne.n	b10a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    b0ea:	230f      	movs	r3, #15
    b0ec:	18fb      	adds	r3, r7, r3
    b0ee:	781b      	ldrb	r3, [r3, #0]
    b0f0:	009b      	lsls	r3, r3, #2
    b0f2:	2210      	movs	r2, #16
    b0f4:	4694      	mov	ip, r2
    b0f6:	44bc      	add	ip, r7
    b0f8:	4463      	add	r3, ip
    b0fa:	3b08      	subs	r3, #8
    b0fc:	681a      	ldr	r2, [r3, #0]
    b0fe:	230e      	movs	r3, #14
    b100:	18fb      	adds	r3, r7, r3
    b102:	781b      	ldrb	r3, [r3, #0]
    b104:	01db      	lsls	r3, r3, #7
    b106:	18d3      	adds	r3, r2, r3
    b108:	e000      	b.n	b10c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    b10a:	2300      	movs	r3, #0
}
    b10c:	0018      	movs	r0, r3
    b10e:	46bd      	mov	sp, r7
    b110:	b004      	add	sp, #16
    b112:	bd80      	pop	{r7, pc}
    b114:	40002800 	.word	0x40002800

0000b118 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
    b118:	b580      	push	{r7, lr}
    b11a:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    b11c:	4b02      	ldr	r3, [pc, #8]	; (b128 <system_get_reset_cause+0x10>)
    b11e:	781b      	ldrb	r3, [r3, #0]
    b120:	b2db      	uxtb	r3, r3
}
    b122:	0018      	movs	r0, r3
    b124:	46bd      	mov	sp, r7
    b126:	bd80      	pop	{r7, pc}
    b128:	40000800 	.word	0x40000800

0000b12c <system_interrupt_enable>:
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	0002      	movs	r2, r0
    b134:	1dfb      	adds	r3, r7, #7
    b136:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b138:	4b06      	ldr	r3, [pc, #24]	; (b154 <system_interrupt_enable+0x28>)
    b13a:	1dfa      	adds	r2, r7, #7
    b13c:	7812      	ldrb	r2, [r2, #0]
    b13e:	0011      	movs	r1, r2
    b140:	221f      	movs	r2, #31
    b142:	400a      	ands	r2, r1
    b144:	2101      	movs	r1, #1
    b146:	4091      	lsls	r1, r2
    b148:	000a      	movs	r2, r1
    b14a:	601a      	str	r2, [r3, #0]
}
    b14c:	46c0      	nop			; (mov r8, r8)
    b14e:	46bd      	mov	sp, r7
    b150:	b002      	add	sp, #8
    b152:	bd80      	pop	{r7, pc}
    b154:	e000e100 	.word	0xe000e100

0000b158 <adc_is_syncing>:
{
    b158:	b580      	push	{r7, lr}
    b15a:	b084      	sub	sp, #16
    b15c:	af00      	add	r7, sp, #0
    b15e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	681b      	ldr	r3, [r3, #0]
    b164:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
    b166:	68fb      	ldr	r3, [r7, #12]
    b168:	8c1b      	ldrh	r3, [r3, #32]
    b16a:	b29b      	uxth	r3, r3
    b16c:	2b00      	cmp	r3, #0
    b16e:	d001      	beq.n	b174 <adc_is_syncing+0x1c>
		return true;
    b170:	2301      	movs	r3, #1
    b172:	e000      	b.n	b176 <adc_is_syncing+0x1e>
	return false;
    b174:	2300      	movs	r3, #0
}
    b176:	0018      	movs	r0, r3
    b178:	46bd      	mov	sp, r7
    b17a:	b004      	add	sp, #16
    b17c:	bd80      	pop	{r7, pc}
	...

0000b180 <adc_enable>:
{
    b180:	b580      	push	{r7, lr}
    b182:	b084      	sub	sp, #16
    b184:	af00      	add	r7, sp, #0
    b186:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	681b      	ldr	r3, [r3, #0]
    b18c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	687b      	ldr	r3, [r7, #4]
    b192:	0018      	movs	r0, r3
    b194:	4b10      	ldr	r3, [pc, #64]	; (b1d8 <adc_enable+0x58>)
    b196:	4798      	blx	r3
    b198:	1e03      	subs	r3, r0, #0
    b19a:	d1f9      	bne.n	b190 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    b19c:	2016      	movs	r0, #22
    b19e:	4b0f      	ldr	r3, [pc, #60]	; (b1dc <adc_enable+0x5c>)
    b1a0:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    b1a2:	68fb      	ldr	r3, [r7, #12]
    b1a4:	2207      	movs	r2, #7
    b1a6:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    b1a8:	68fb      	ldr	r3, [r7, #12]
    b1aa:	2207      	movs	r2, #7
    b1ac:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	b2db      	uxtb	r3, r3
    b1b4:	2202      	movs	r2, #2
    b1b6:	4313      	orrs	r3, r2
    b1b8:	b2da      	uxtb	r2, r3
    b1ba:	68fb      	ldr	r3, [r7, #12]
    b1bc:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
    b1be:	46c0      	nop			; (mov r8, r8)
    b1c0:	687b      	ldr	r3, [r7, #4]
    b1c2:	0018      	movs	r0, r3
    b1c4:	4b04      	ldr	r3, [pc, #16]	; (b1d8 <adc_enable+0x58>)
    b1c6:	4798      	blx	r3
    b1c8:	1e03      	subs	r3, r0, #0
    b1ca:	d1f9      	bne.n	b1c0 <adc_enable+0x40>
	return STATUS_OK;
    b1cc:	2300      	movs	r3, #0
}
    b1ce:	0018      	movs	r0, r3
    b1d0:	46bd      	mov	sp, r7
    b1d2:	b004      	add	sp, #16
    b1d4:	bd80      	pop	{r7, pc}
    b1d6:	46c0      	nop			; (mov r8, r8)
    b1d8:	0000b159 	.word	0x0000b159
    b1dc:	0000b12d 	.word	0x0000b12d

0000b1e0 <port_get_group_from_gpio_pin>:
{
    b1e0:	b580      	push	{r7, lr}
    b1e2:	b082      	sub	sp, #8
    b1e4:	af00      	add	r7, sp, #0
    b1e6:	0002      	movs	r2, r0
    b1e8:	1dfb      	adds	r3, r7, #7
    b1ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    b1ec:	1dfb      	adds	r3, r7, #7
    b1ee:	781b      	ldrb	r3, [r3, #0]
    b1f0:	0018      	movs	r0, r3
    b1f2:	4b03      	ldr	r3, [pc, #12]	; (b200 <port_get_group_from_gpio_pin+0x20>)
    b1f4:	4798      	blx	r3
    b1f6:	0003      	movs	r3, r0
}
    b1f8:	0018      	movs	r0, r3
    b1fa:	46bd      	mov	sp, r7
    b1fc:	b002      	add	sp, #8
    b1fe:	bd80      	pop	{r7, pc}
    b200:	0000b0b9 	.word	0x0000b0b9

0000b204 <port_get_config_defaults>:
{
    b204:	b580      	push	{r7, lr}
    b206:	b082      	sub	sp, #8
    b208:	af00      	add	r7, sp, #0
    b20a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	2200      	movs	r2, #0
    b210:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b212:	687b      	ldr	r3, [r7, #4]
    b214:	2201      	movs	r2, #1
    b216:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    b218:	687b      	ldr	r3, [r7, #4]
    b21a:	2200      	movs	r2, #0
    b21c:	709a      	strb	r2, [r3, #2]
}
    b21e:	46c0      	nop			; (mov r8, r8)
    b220:	46bd      	mov	sp, r7
    b222:	b002      	add	sp, #8
    b224:	bd80      	pop	{r7, pc}
	...

0000b228 <port_pin_set_output_level>:
{
    b228:	b580      	push	{r7, lr}
    b22a:	b084      	sub	sp, #16
    b22c:	af00      	add	r7, sp, #0
    b22e:	0002      	movs	r2, r0
    b230:	1dfb      	adds	r3, r7, #7
    b232:	701a      	strb	r2, [r3, #0]
    b234:	1dbb      	adds	r3, r7, #6
    b236:	1c0a      	adds	r2, r1, #0
    b238:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    b23a:	1dfb      	adds	r3, r7, #7
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	0018      	movs	r0, r3
    b240:	4b0d      	ldr	r3, [pc, #52]	; (b278 <port_pin_set_output_level+0x50>)
    b242:	4798      	blx	r3
    b244:	0003      	movs	r3, r0
    b246:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b248:	1dfb      	adds	r3, r7, #7
    b24a:	781b      	ldrb	r3, [r3, #0]
    b24c:	221f      	movs	r2, #31
    b24e:	4013      	ands	r3, r2
    b250:	2201      	movs	r2, #1
    b252:	409a      	lsls	r2, r3
    b254:	0013      	movs	r3, r2
    b256:	60bb      	str	r3, [r7, #8]
	if (level) {
    b258:	1dbb      	adds	r3, r7, #6
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2b00      	cmp	r3, #0
    b25e:	d003      	beq.n	b268 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    b260:	68fb      	ldr	r3, [r7, #12]
    b262:	68ba      	ldr	r2, [r7, #8]
    b264:	619a      	str	r2, [r3, #24]
}
    b266:	e002      	b.n	b26e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    b268:	68fb      	ldr	r3, [r7, #12]
    b26a:	68ba      	ldr	r2, [r7, #8]
    b26c:	615a      	str	r2, [r3, #20]
}
    b26e:	46c0      	nop			; (mov r8, r8)
    b270:	46bd      	mov	sp, r7
    b272:	b004      	add	sp, #16
    b274:	bd80      	pop	{r7, pc}
    b276:	46c0      	nop			; (mov r8, r8)
    b278:	0000b1e1 	.word	0x0000b1e1

0000b27c <i2c_master_is_syncing>:
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b084      	sub	sp, #16
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    b284:	687b      	ldr	r3, [r7, #4]
    b286:	681b      	ldr	r3, [r3, #0]
    b288:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b28a:	68fb      	ldr	r3, [r7, #12]
    b28c:	69db      	ldr	r3, [r3, #28]
    b28e:	2207      	movs	r2, #7
    b290:	4013      	ands	r3, r2
    b292:	1e5a      	subs	r2, r3, #1
    b294:	4193      	sbcs	r3, r2
    b296:	b2db      	uxtb	r3, r3
}
    b298:	0018      	movs	r0, r3
    b29a:	46bd      	mov	sp, r7
    b29c:	b004      	add	sp, #16
    b29e:	bd80      	pop	{r7, pc}

0000b2a0 <_i2c_master_wait_for_sync>:
{
    b2a0:	b580      	push	{r7, lr}
    b2a2:	b082      	sub	sp, #8
    b2a4:	af00      	add	r7, sp, #0
    b2a6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
    b2a8:	46c0      	nop			; (mov r8, r8)
    b2aa:	687b      	ldr	r3, [r7, #4]
    b2ac:	0018      	movs	r0, r3
    b2ae:	4b04      	ldr	r3, [pc, #16]	; (b2c0 <_i2c_master_wait_for_sync+0x20>)
    b2b0:	4798      	blx	r3
    b2b2:	1e03      	subs	r3, r0, #0
    b2b4:	d1f9      	bne.n	b2aa <_i2c_master_wait_for_sync+0xa>
}
    b2b6:	46c0      	nop			; (mov r8, r8)
    b2b8:	46bd      	mov	sp, r7
    b2ba:	b002      	add	sp, #8
    b2bc:	bd80      	pop	{r7, pc}
    b2be:	46c0      	nop			; (mov r8, r8)
    b2c0:	0000b27d 	.word	0x0000b27d

0000b2c4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    b2c4:	b580      	push	{r7, lr}
    b2c6:	b082      	sub	sp, #8
    b2c8:	af00      	add	r7, sp, #0
    b2ca:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	2264      	movs	r2, #100	; 0x64
    b2d0:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	4a1b      	ldr	r2, [pc, #108]	; (b344 <i2c_master_get_config_defaults+0x80>)
    b2d6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    b2d8:	687b      	ldr	r3, [r7, #4]
    b2da:	2200      	movs	r2, #0
    b2dc:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    b2de:	687b      	ldr	r3, [r7, #4]
    b2e0:	2200      	movs	r2, #0
    b2e2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    b2e4:	687b      	ldr	r3, [r7, #4]
    b2e6:	2200      	movs	r2, #0
    b2e8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    b2ea:	687b      	ldr	r3, [r7, #4]
    b2ec:	2280      	movs	r2, #128	; 0x80
    b2ee:	0392      	lsls	r2, r2, #14
    b2f0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    b2f2:	687b      	ldr	r3, [r7, #4]
    b2f4:	2201      	movs	r2, #1
    b2f6:	4252      	negs	r2, r2
    b2f8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    b2fa:	687b      	ldr	r3, [r7, #4]
    b2fc:	2201      	movs	r2, #1
    b2fe:	4252      	negs	r2, r2
    b300:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    b302:	687b      	ldr	r3, [r7, #4]
    b304:	2200      	movs	r2, #0
    b306:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    b308:	687b      	ldr	r3, [r7, #4]
    b30a:	2200      	movs	r2, #0
    b30c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	2224      	movs	r2, #36	; 0x24
    b312:	2100      	movs	r1, #0
    b314:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    b316:	687b      	ldr	r3, [r7, #4]
    b318:	2200      	movs	r2, #0
    b31a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    b31c:	687b      	ldr	r3, [r7, #4]
    b31e:	222c      	movs	r2, #44	; 0x2c
    b320:	2100      	movs	r1, #0
    b322:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    b324:	687b      	ldr	r3, [r7, #4]
    b326:	222d      	movs	r2, #45	; 0x2d
    b328:	2100      	movs	r1, #0
    b32a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    b32c:	687b      	ldr	r3, [r7, #4]
    b32e:	222e      	movs	r2, #46	; 0x2e
    b330:	2100      	movs	r1, #0
    b332:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    b334:	687b      	ldr	r3, [r7, #4]
    b336:	22d7      	movs	r2, #215	; 0xd7
    b338:	861a      	strh	r2, [r3, #48]	; 0x30
}
    b33a:	46c0      	nop			; (mov r8, r8)
    b33c:	46bd      	mov	sp, r7
    b33e:	b002      	add	sp, #8
    b340:	bd80      	pop	{r7, pc}
    b342:	46c0      	nop			; (mov r8, r8)
    b344:	00000d48 	.word	0x00000d48

0000b348 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    b348:	b580      	push	{r7, lr}
    b34a:	b084      	sub	sp, #16
    b34c:	af00      	add	r7, sp, #0
    b34e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    b356:	2300      	movs	r3, #0
    b358:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    b35a:	687b      	ldr	r3, [r7, #4]
    b35c:	0018      	movs	r0, r3
    b35e:	4b14      	ldr	r3, [pc, #80]	; (b3b0 <i2c_master_enable+0x68>)
    b360:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    b362:	68bb      	ldr	r3, [r7, #8]
    b364:	681b      	ldr	r3, [r3, #0]
    b366:	2202      	movs	r2, #2
    b368:	431a      	orrs	r2, r3
    b36a:	68bb      	ldr	r3, [r7, #8]
    b36c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b36e:	687b      	ldr	r3, [r7, #4]
    b370:	681b      	ldr	r3, [r3, #0]
    b372:	0018      	movs	r0, r3
    b374:	4b0f      	ldr	r3, [pc, #60]	; (b3b4 <i2c_master_enable+0x6c>)
    b376:	4798      	blx	r3
    b378:	0003      	movs	r3, r0
    b37a:	0018      	movs	r0, r3
    b37c:	4b0e      	ldr	r3, [pc, #56]	; (b3b8 <i2c_master_enable+0x70>)
    b37e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    b380:	e00c      	b.n	b39c <i2c_master_enable+0x54>
		timeout_counter++;
    b382:	68fb      	ldr	r3, [r7, #12]
    b384:	3301      	adds	r3, #1
    b386:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    b388:	687b      	ldr	r3, [r7, #4]
    b38a:	88db      	ldrh	r3, [r3, #6]
    b38c:	001a      	movs	r2, r3
    b38e:	68fb      	ldr	r3, [r7, #12]
    b390:	429a      	cmp	r2, r3
    b392:	d803      	bhi.n	b39c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    b394:	68bb      	ldr	r3, [r7, #8]
    b396:	2210      	movs	r2, #16
    b398:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    b39a:	e006      	b.n	b3aa <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    b39c:	68bb      	ldr	r3, [r7, #8]
    b39e:	8b5b      	ldrh	r3, [r3, #26]
    b3a0:	b29b      	uxth	r3, r3
    b3a2:	001a      	movs	r2, r3
    b3a4:	2310      	movs	r3, #16
    b3a6:	4013      	ands	r3, r2
    b3a8:	d0eb      	beq.n	b382 <i2c_master_enable+0x3a>
		}
	}
}
    b3aa:	46bd      	mov	sp, r7
    b3ac:	b004      	add	sp, #16
    b3ae:	bd80      	pop	{r7, pc}
    b3b0:	0000b2a1 	.word	0x0000b2a1
    b3b4:	00003975 	.word	0x00003975
    b3b8:	0000b12d 	.word	0x0000b12d

0000b3bc <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
    b3bc:	b580      	push	{r7, lr}
    b3be:	b082      	sub	sp, #8
    b3c0:	af00      	add	r7, sp, #0
    b3c2:	6078      	str	r0, [r7, #4]
    b3c4:	000a      	movs	r2, r1
    b3c6:	1cfb      	adds	r3, r7, #3
    b3c8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	7e5b      	ldrb	r3, [r3, #25]
    b3ce:	b2db      	uxtb	r3, r3
    b3d0:	b25a      	sxtb	r2, r3
    b3d2:	1cfb      	adds	r3, r7, #3
    b3d4:	781b      	ldrb	r3, [r3, #0]
    b3d6:	2101      	movs	r1, #1
    b3d8:	4099      	lsls	r1, r3
    b3da:	000b      	movs	r3, r1
    b3dc:	b25b      	sxtb	r3, r3
    b3de:	4313      	orrs	r3, r2
    b3e0:	b25b      	sxtb	r3, r3
    b3e2:	b2da      	uxtb	r2, r3
    b3e4:	687b      	ldr	r3, [r7, #4]
    b3e6:	765a      	strb	r2, [r3, #25]
}
    b3e8:	46c0      	nop			; (mov r8, r8)
    b3ea:	46bd      	mov	sp, r7
    b3ec:	b002      	add	sp, #8
    b3ee:	bd80      	pop	{r7, pc}

0000b3f0 <print_reset_causes>:
#endif

/****************************** FUNCTIONS **************************************/

static void print_reset_causes(void)
{
    b3f0:	b590      	push	{r4, r7, lr}
    b3f2:	b083      	sub	sp, #12
    b3f4:	af00      	add	r7, sp, #0
    enum system_reset_cause rcause = system_get_reset_cause();
    b3f6:	1dfc      	adds	r4, r7, #7
    b3f8:	4b20      	ldr	r3, [pc, #128]	; (b47c <print_reset_causes+0x8c>)
    b3fa:	4798      	blx	r3
    b3fc:	0003      	movs	r3, r0
    b3fe:	7023      	strb	r3, [r4, #0]
    printf("Last reset cause: ");
    b400:	4b1f      	ldr	r3, [pc, #124]	; (b480 <print_reset_causes+0x90>)
    b402:	0018      	movs	r0, r3
    b404:	4b1f      	ldr	r3, [pc, #124]	; (b484 <print_reset_causes+0x94>)
    b406:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    b408:	1dfb      	adds	r3, r7, #7
    b40a:	781b      	ldrb	r3, [r3, #0]
    b40c:	2240      	movs	r2, #64	; 0x40
    b40e:	4013      	ands	r3, r2
    b410:	d003      	beq.n	b41a <print_reset_causes+0x2a>
        printf("System Reset Request\r\n");
    b412:	4b1d      	ldr	r3, [pc, #116]	; (b488 <print_reset_causes+0x98>)
    b414:	0018      	movs	r0, r3
    b416:	4b1d      	ldr	r3, [pc, #116]	; (b48c <print_reset_causes+0x9c>)
    b418:	4798      	blx	r3
    }
    if(rcause & (1 << 5)) {
    b41a:	1dfb      	adds	r3, r7, #7
    b41c:	781b      	ldrb	r3, [r3, #0]
    b41e:	2220      	movs	r2, #32
    b420:	4013      	ands	r3, r2
    b422:	d003      	beq.n	b42c <print_reset_causes+0x3c>
        printf("Watchdog Reset\r\n");
    b424:	4b1a      	ldr	r3, [pc, #104]	; (b490 <print_reset_causes+0xa0>)
    b426:	0018      	movs	r0, r3
    b428:	4b18      	ldr	r3, [pc, #96]	; (b48c <print_reset_causes+0x9c>)
    b42a:	4798      	blx	r3
    }
    if(rcause & (1 << 4)) {
    b42c:	1dfb      	adds	r3, r7, #7
    b42e:	781b      	ldrb	r3, [r3, #0]
    b430:	2210      	movs	r2, #16
    b432:	4013      	ands	r3, r2
    b434:	d003      	beq.n	b43e <print_reset_causes+0x4e>
        printf("External Reset\r\n");
    b436:	4b17      	ldr	r3, [pc, #92]	; (b494 <print_reset_causes+0xa4>)
    b438:	0018      	movs	r0, r3
    b43a:	4b14      	ldr	r3, [pc, #80]	; (b48c <print_reset_causes+0x9c>)
    b43c:	4798      	blx	r3
    }
    if(rcause & (1 << 2)) {
    b43e:	1dfb      	adds	r3, r7, #7
    b440:	781b      	ldrb	r3, [r3, #0]
    b442:	2204      	movs	r2, #4
    b444:	4013      	ands	r3, r2
    b446:	d003      	beq.n	b450 <print_reset_causes+0x60>
        printf("Brown Out 33 Detector Reset\r\n");
    b448:	4b13      	ldr	r3, [pc, #76]	; (b498 <print_reset_causes+0xa8>)
    b44a:	0018      	movs	r0, r3
    b44c:	4b0f      	ldr	r3, [pc, #60]	; (b48c <print_reset_causes+0x9c>)
    b44e:	4798      	blx	r3
    }
    if(rcause & (1 << 1)) {
    b450:	1dfb      	adds	r3, r7, #7
    b452:	781b      	ldrb	r3, [r3, #0]
    b454:	2202      	movs	r2, #2
    b456:	4013      	ands	r3, r2
    b458:	d003      	beq.n	b462 <print_reset_causes+0x72>
        printf("Brown Out 12 Detector Reset\r\n");
    b45a:	4b10      	ldr	r3, [pc, #64]	; (b49c <print_reset_causes+0xac>)
    b45c:	0018      	movs	r0, r3
    b45e:	4b0b      	ldr	r3, [pc, #44]	; (b48c <print_reset_causes+0x9c>)
    b460:	4798      	blx	r3
    }
    if(rcause & (1 << 0)) {
    b462:	1dfb      	adds	r3, r7, #7
    b464:	781b      	ldrb	r3, [r3, #0]
    b466:	2201      	movs	r2, #1
    b468:	4013      	ands	r3, r2
    b46a:	d003      	beq.n	b474 <print_reset_causes+0x84>
        printf("Power-On Reset\r\n");
    b46c:	4b0c      	ldr	r3, [pc, #48]	; (b4a0 <print_reset_causes+0xb0>)
    b46e:	0018      	movs	r0, r3
    b470:	4b06      	ldr	r3, [pc, #24]	; (b48c <print_reset_causes+0x9c>)
    b472:	4798      	blx	r3
    }
}
    b474:	46c0      	nop			; (mov r8, r8)
    b476:	46bd      	mov	sp, r7
    b478:	b003      	add	sp, #12
    b47a:	bd90      	pop	{r4, r7, pc}
    b47c:	0000b119 	.word	0x0000b119
    b480:	00017360 	.word	0x00017360
    b484:	0001158d 	.word	0x0001158d
    b488:	00017374 	.word	0x00017374
    b48c:	00011651 	.word	0x00011651
    b490:	0001738c 	.word	0x0001738c
    b494:	0001739c 	.word	0x0001739c
    b498:	000173ac 	.word	0x000173ac
    b49c:	000173cc 	.word	0x000173cc
    b4a0:	000173ec 	.word	0x000173ec

0000b4a4 <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
    b4a4:	b580      	push	{r7, lr}
    b4a6:	b084      	sub	sp, #16
    b4a8:	af00      	add	r7, sp, #0
	
    /* System Initialization */
    system_init();
    b4aa:	4b17      	ldr	r3, [pc, #92]	; (b508 <main+0x64>)
    b4ac:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    b4ae:	4b17      	ldr	r3, [pc, #92]	; (b50c <main+0x68>)
    b4b0:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    b4b2:	4b17      	ldr	r3, [pc, #92]	; (b510 <main+0x6c>)
    b4b4:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    b4b6:	4b17      	ldr	r3, [pc, #92]	; (b514 <main+0x70>)
    b4b8:	2201      	movs	r2, #1
    b4ba:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    b4bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    b4c0:	b662      	cpsie	i
	/* Initialize the Serial Interface */
	sio2host_init();
    b4c2:	4b15      	ldr	r3, [pc, #84]	; (b518 <main+0x74>)
    b4c4:	4798      	blx	r3
#ifndef CRYPTO_DEV_ENABLED
 	/* Read DEV EUI from EDBG */
    dev_eui_read();
    b4c6:	4b15      	ldr	r3, [pc, #84]	; (b51c <main+0x78>)
    b4c8:	4798      	blx	r3
#endif
    /* Initialize Hardware and Software Modules */
	driver_init();
    b4ca:	4b15      	ldr	r3, [pc, #84]	; (b520 <main+0x7c>)
    b4cc:	4798      	blx	r3
	
    delay_ms(5);
    b4ce:	2005      	movs	r0, #5
    b4d0:	4b14      	ldr	r3, [pc, #80]	; (b524 <main+0x80>)
    b4d2:	4798      	blx	r3
    print_reset_causes();
    b4d4:	4b14      	ldr	r3, [pc, #80]	; (b528 <main+0x84>)
    b4d6:	4798      	blx	r3
#if (_DEBUG_ == 1)
    SYSTEM_AssertSubscribe(assertHandler);
#endif
    /* Initialize demo application */
    Stack_Init();
    b4d8:	4b14      	ldr	r3, [pc, #80]	; (b52c <main+0x88>)
    b4da:	4798      	blx	r3

    SwTimerCreate(&demoTimerId);
    b4dc:	4b14      	ldr	r3, [pc, #80]	; (b530 <main+0x8c>)
    b4de:	0018      	movs	r0, r3
    b4e0:	4b14      	ldr	r3, [pc, #80]	; (b534 <main+0x90>)
    b4e2:	4798      	blx	r3
    SwTimerCreate(&lTimerId);
    b4e4:	4b14      	ldr	r3, [pc, #80]	; (b538 <main+0x94>)
    b4e6:	0018      	movs	r0, r3
    b4e8:	4b12      	ldr	r3, [pc, #72]	; (b534 <main+0x90>)
    b4ea:	4798      	blx	r3

    mote_demo_init();
    b4ec:	4b13      	ldr	r3, [pc, #76]	; (b53c <main+0x98>)
    b4ee:	4798      	blx	r3
	setup_ADC();   //Temperature
    b4f0:	4b13      	ldr	r3, [pc, #76]	; (b540 <main+0x9c>)
    b4f2:	4798      	blx	r3
	config_board();
    b4f4:	4b13      	ldr	r3, [pc, #76]	; (b544 <main+0xa0>)
    b4f6:	4798      	blx	r3
	setup_I2C();
    b4f8:	4b13      	ldr	r3, [pc, #76]	; (b548 <main+0xa4>)
    b4fa:	4798      	blx	r3
	configure_i2c_callbacks();
    b4fc:	4b13      	ldr	r3, [pc, #76]	; (b54c <main+0xa8>)
    b4fe:	4798      	blx	r3
	while(1){
		read_SHTC3();
    b500:	4b13      	ldr	r3, [pc, #76]	; (b550 <main+0xac>)
    b502:	4798      	blx	r3
    b504:	e7fc      	b.n	b500 <main+0x5c>
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	00006171 	.word	0x00006171
    b50c:	00000149 	.word	0x00000149
    b510:	00000391 	.word	0x00000391
    b514:	20000008 	.word	0x20000008
    b518:	00006fc1 	.word	0x00006fc1
    b51c:	0000b0ad 	.word	0x0000b0ad
    b520:	0000b555 	.word	0x0000b555
    b524:	000001d1 	.word	0x000001d1
    b528:	0000b3f1 	.word	0x0000b3f1
    b52c:	00009ca1 	.word	0x00009ca1
    b530:	20000047 	.word	0x20000047
    b534:	00009565 	.word	0x00009565
    b538:	20000048 	.word	0x20000048
    b53c:	0000a711 	.word	0x0000a711
    b540:	0000b5b1 	.word	0x0000b5b1
    b544:	0000b651 	.word	0x0000b651
    b548:	0000b6ad 	.word	0x0000b6ad
    b54c:	0000b76d 	.word	0x0000b76d
    b550:	0000b79d 	.word	0x0000b79d

0000b554 <driver_init>:
    }
}

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
    b554:	b590      	push	{r4, r7, lr}
    b556:	b083      	sub	sp, #12
    b558:	af00      	add	r7, sp, #0
	SalStatus_t sal_status = SAL_SUCCESS;
    b55a:	1dfb      	adds	r3, r7, #7
    b55c:	2200      	movs	r2, #0
    b55e:	701a      	strb	r2, [r3, #0]
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    b560:	4b0c      	ldr	r3, [pc, #48]	; (b594 <driver_init+0x40>)
    b562:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    b564:	4b0c      	ldr	r3, [pc, #48]	; (b598 <driver_init+0x44>)
    b566:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    b568:	4b0c      	ldr	r3, [pc, #48]	; (b59c <driver_init+0x48>)
    b56a:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
    b56c:	4b0c      	ldr	r3, [pc, #48]	; (b5a0 <driver_init+0x4c>)
    b56e:	4798      	blx	r3
#endif
	/* Initializes the Security modules */
	sal_status = SAL_Init();
    b570:	1dfc      	adds	r4, r7, #7
    b572:	4b0c      	ldr	r3, [pc, #48]	; (b5a4 <driver_init+0x50>)
    b574:	4798      	blx	r3
    b576:	0003      	movs	r3, r0
    b578:	7023      	strb	r3, [r4, #0]
	
	if (SAL_SUCCESS != sal_status)
    b57a:	1dfb      	adds	r3, r7, #7
    b57c:	781b      	ldrb	r3, [r3, #0]
    b57e:	2b00      	cmp	r3, #0
    b580:	d004      	beq.n	b58c <driver_init+0x38>
	{
		printf("Initialization of Security module is failed\r\n");
    b582:	4b09      	ldr	r3, [pc, #36]	; (b5a8 <driver_init+0x54>)
    b584:	0018      	movs	r0, r3
    b586:	4b09      	ldr	r3, [pc, #36]	; (b5ac <driver_init+0x58>)
    b588:	4798      	blx	r3
		/* Stop Further execution */
		while (1) {
    b58a:	e7fe      	b.n	b58a <driver_init+0x36>
		}
	}
}
    b58c:	46c0      	nop			; (mov r8, r8)
    b58e:	46bd      	mov	sp, r7
    b590:	b003      	add	sp, #12
    b592:	bd90      	pop	{r4, r7, pc}
    b594:	0000758d 	.word	0x0000758d
    b598:	000094fd 	.word	0x000094fd
    b59c:	00007cdd 	.word	0x00007cdd
    b5a0:	00008019 	.word	0x00008019
    b5a4:	00007f8d 	.word	0x00007f8d
    b5a8:	00017410 	.word	0x00017410
    b5ac:	00011651 	.word	0x00011651

0000b5b0 <setup_ADC>:

static void setup_ADC(void){
    b5b0:	b580      	push	{r7, lr}
    b5b2:	b08c      	sub	sp, #48	; 0x30
    b5b4:	af00      	add	r7, sp, #0
	//Get the default ADC config settings
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
    b5b6:	1d3b      	adds	r3, r7, #4
    b5b8:	0018      	movs	r0, r3
    b5ba:	4b1b      	ldr	r3, [pc, #108]	; (b628 <setup_ADC+0x78>)
    b5bc:	4798      	blx	r3
		No reference compensation
		No gain/offset correction
		No added sampling time
	*/
	//Set the first pin to be read by the ADC
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;  //PA06 ADC+   //Only need the first positive channel in the sequence
    b5be:	1d3b      	adds	r3, r7, #4
    b5c0:	2206      	movs	r2, #6
    b5c2:	711a      	strb	r2, [r3, #4]
	//Set the absolute pins that will be used for ADC.
	//This should set the SEQCTRL register, but it doesn't.
	config_adc.positive_input_sequence_mask_enable = 0x100C0;  //Pins PA06,PA07,PA08 are Ain 6,7,16  1 0000 0000 1100 0000b
    b5c4:	1d3b      	adds	r3, r7, #4
    b5c6:	4a19      	ldr	r2, [pc, #100]	; (b62c <setup_ADC+0x7c>)
    b5c8:	611a      	str	r2, [r3, #16]
	//Instead, manually set the SEQCTRL register.  Doing in 3 calls because I couldn't think to do it properly.
	//Set the Sequence control
	memset((uint8_t *)0x43000C28U, 0xC0U, sizeof(uint8_t));  //ADC SEQCTRL base address.
    b5ca:	4b19      	ldr	r3, [pc, #100]	; (b630 <setup_ADC+0x80>)
    b5cc:	2201      	movs	r2, #1
    b5ce:	21c0      	movs	r1, #192	; 0xc0
    b5d0:	0018      	movs	r0, r3
    b5d2:	4b18      	ldr	r3, [pc, #96]	; (b634 <setup_ADC+0x84>)
    b5d4:	4798      	blx	r3
	memset((uint8_t *)0x43000C29U, 0x00U, sizeof(uint8_t));  //
    b5d6:	4b18      	ldr	r3, [pc, #96]	; (b638 <setup_ADC+0x88>)
    b5d8:	2201      	movs	r2, #1
    b5da:	2100      	movs	r1, #0
    b5dc:	0018      	movs	r0, r3
    b5de:	4b15      	ldr	r3, [pc, #84]	; (b634 <setup_ADC+0x84>)
    b5e0:	4798      	blx	r3
	memset((uint8_t *)0x43000C2AU, 0x01U, sizeof(uint8_t));  //
    b5e2:	4b16      	ldr	r3, [pc, #88]	; (b63c <setup_ADC+0x8c>)
    b5e4:	2201      	movs	r2, #1
    b5e6:	2101      	movs	r1, #1
    b5e8:	0018      	movs	r0, r3
    b5ea:	4b12      	ldr	r3, [pc, #72]	; (b634 <setup_ADC+0x84>)
    b5ec:	4798      	blx	r3
	
	//Set the analogue reference and differential mode.
	config_adc.reference = ADC_REFERENCE_INTVCC2; //VDD_ANA  (Should be 3.3V, default gives 0-1V)
    b5ee:	1d3b      	adds	r3, r7, #4
    b5f0:	2205      	movs	r2, #5
    b5f2:	705a      	strb	r2, [r3, #1]
	config_adc.differential_mode = false;
    b5f4:	1d3b      	adds	r3, r7, #4
    b5f6:	2200      	movs	r2, #0
    b5f8:	72da      	strb	r2, [r3, #11]

	//Make ADC 16 bit.  Resolution will depend on sensor range.
	config_adc.resolution = ADC_RESOLUTION_16BIT;
    b5fa:	1d3b      	adds	r3, r7, #4
    b5fc:	2210      	movs	r2, #16
    b5fe:	70da      	strb	r2, [r3, #3]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
    b600:	1d3b      	adds	r3, r7, #4
    b602:	2204      	movs	r2, #4
    b604:	721a      	strb	r2, [r3, #8]
	config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;
    b606:	1d3b      	adds	r3, r7, #4
    b608:	2200      	movs	r2, #0
    b60a:	725a      	strb	r2, [r3, #9]
	
	//initialize ADC
	adc_init(&adc_instance, ADC, &config_adc);
    b60c:	1d3a      	adds	r2, r7, #4
    b60e:	490c      	ldr	r1, [pc, #48]	; (b640 <setup_ADC+0x90>)
    b610:	4b0c      	ldr	r3, [pc, #48]	; (b644 <setup_ADC+0x94>)
    b612:	0018      	movs	r0, r3
    b614:	4b0c      	ldr	r3, [pc, #48]	; (b648 <setup_ADC+0x98>)
    b616:	4798      	blx	r3

	//Enables ADC
	adc_enable(&adc_instance);
    b618:	4b0a      	ldr	r3, [pc, #40]	; (b644 <setup_ADC+0x94>)
    b61a:	0018      	movs	r0, r3
    b61c:	4b0b      	ldr	r3, [pc, #44]	; (b64c <setup_ADC+0x9c>)
    b61e:	4798      	blx	r3
}
    b620:	46c0      	nop			; (mov r8, r8)
    b622:	46bd      	mov	sp, r7
    b624:	b00c      	add	sp, #48	; 0x30
    b626:	bd80      	pop	{r7, pc}
    b628:	00000595 	.word	0x00000595
    b62c:	000100c0 	.word	0x000100c0
    b630:	43000c28 	.word	0x43000c28
    b634:	000114f9 	.word	0x000114f9
    b638:	43000c29 	.word	0x43000c29
    b63c:	43000c2a 	.word	0x43000c2a
    b640:	43000c00 	.word	0x43000c00
    b644:	200010b8 	.word	0x200010b8
    b648:	00000bcd 	.word	0x00000bcd
    b64c:	0000b181 	.word	0x0000b181

0000b650 <config_board>:


static void config_board(void)
{
    b650:	b580      	push	{r7, lr}
    b652:	b082      	sub	sp, #8
    b654:	af00      	add	r7, sp, #0
	//port_pin_set_config(PIN_PA14, &pin_conf);
	//port_pin_set_output_level(PIN_PA14, false);
	
	//BATTERY TEST CHANGE
	//PIN_PA15 is being used for battery measurement sink.
	port_get_config_defaults(&pin_conf);
    b656:	1d3b      	adds	r3, r7, #4
    b658:	0018      	movs	r0, r3
    b65a:	4b11      	ldr	r3, [pc, #68]	; (b6a0 <config_board+0x50>)
    b65c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b65e:	1d3b      	adds	r3, r7, #4
    b660:	2201      	movs	r2, #1
    b662:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA15, &pin_conf);
    b664:	1d3b      	adds	r3, r7, #4
    b666:	0019      	movs	r1, r3
    b668:	200f      	movs	r0, #15
    b66a:	4b0e      	ldr	r3, [pc, #56]	; (b6a4 <config_board+0x54>)
    b66c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA15, true);  // Set high to reduce current sink with resistor divider
    b66e:	2101      	movs	r1, #1
    b670:	200f      	movs	r0, #15
    b672:	4b0d      	ldr	r3, [pc, #52]	; (b6a8 <config_board+0x58>)
    b674:	4798      	blx	r3
	//port_get_config_defaults(&pin_conf);
	//pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PA19, &pin_conf);
	//port_pin_set_output_level(PIN_PA19, false);
	//VSen Power
	port_get_config_defaults(&pin_conf);
    b676:	1d3b      	adds	r3, r7, #4
    b678:	0018      	movs	r0, r3
    b67a:	4b09      	ldr	r3, [pc, #36]	; (b6a0 <config_board+0x50>)
    b67c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b67e:	1d3b      	adds	r3, r7, #4
    b680:	2201      	movs	r2, #1
    b682:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA27, &pin_conf);
    b684:	1d3b      	adds	r3, r7, #4
    b686:	0019      	movs	r1, r3
    b688:	201b      	movs	r0, #27
    b68a:	4b06      	ldr	r3, [pc, #24]	; (b6a4 <config_board+0x54>)
    b68c:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA27, false);
    b68e:	2100      	movs	r1, #0
    b690:	201b      	movs	r0, #27
    b692:	4b05      	ldr	r3, [pc, #20]	; (b6a8 <config_board+0x58>)
    b694:	4798      	blx	r3
	//port_get_config_defaults(&pin_conf);
	//pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PB03, &pin_conf);
	//port_pin_set_output_level(PIN_PB03, true);
	
}
    b696:	46c0      	nop			; (mov r8, r8)
    b698:	46bd      	mov	sp, r7
    b69a:	b002      	add	sp, #8
    b69c:	bd80      	pop	{r7, pc}
    b69e:	46c0      	nop			; (mov r8, r8)
    b6a0:	0000b205 	.word	0x0000b205
    b6a4:	00001991 	.word	0x00001991
    b6a8:	0000b229 	.word	0x0000b229

0000b6ac <setup_I2C>:

static void setup_I2C(void){
    b6ac:	b590      	push	{r4, r7, lr}
    b6ae:	b08f      	sub	sp, #60	; 0x3c
    b6b0:	af00      	add	r7, sp, #0
	//C:\Users\Tim\Dropbox\Uni2021\LoRaWAN\Design Files\src\APPS_ENDDEVICE_SN346\APPS_ENDDEVICE_SN346\src\ASF\sam0\boards\wlr089_xplained_pro\wlr089_xplained_pro.h
	struct port_config pin_conf;
	enum status_code status;
	//int timeout = 0;
	//Vsen enable Pin
	port_get_config_defaults(&pin_conf);
    b6b2:	2334      	movs	r3, #52	; 0x34
    b6b4:	18fb      	adds	r3, r7, r3
    b6b6:	0018      	movs	r0, r3
    b6b8:	4b17      	ldr	r3, [pc, #92]	; (b718 <setup_I2C+0x6c>)
    b6ba:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b6bc:	2334      	movs	r3, #52	; 0x34
    b6be:	18fb      	adds	r3, r7, r3
    b6c0:	2201      	movs	r2, #1
    b6c2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA27, &pin_conf);
    b6c4:	2334      	movs	r3, #52	; 0x34
    b6c6:	18fb      	adds	r3, r7, r3
    b6c8:	0019      	movs	r1, r3
    b6ca:	201b      	movs	r0, #27
    b6cc:	4b13      	ldr	r3, [pc, #76]	; (b71c <setup_I2C+0x70>)
    b6ce:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA27, true);
    b6d0:	2101      	movs	r1, #1
    b6d2:	201b      	movs	r0, #27
    b6d4:	4b12      	ldr	r3, [pc, #72]	; (b720 <setup_I2C+0x74>)
    b6d6:	4798      	blx	r3

	/* Initialize config structure and software module. */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
    b6d8:	003b      	movs	r3, r7
    b6da:	0018      	movs	r0, r3
    b6dc:	4b11      	ldr	r3, [pc, #68]	; (b724 <setup_I2C+0x78>)
    b6de:	4798      	blx	r3
	/* Change buffer timeout to something longer. */
	config_i2c_master.buffer_timeout = 10000;
    b6e0:	003b      	movs	r3, r7
    b6e2:	4a11      	ldr	r2, [pc, #68]	; (b728 <setup_I2C+0x7c>)
    b6e4:	82da      	strh	r2, [r3, #22]
	config_i2c_master.pinmux_pad0    = EXT1_I2C_SERCOM_PINMUX_PAD0;
    b6e6:	003b      	movs	r3, r7
    b6e8:	4a10      	ldr	r2, [pc, #64]	; (b72c <setup_I2C+0x80>)
    b6ea:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1    = EXT1_I2C_SERCOM_PINMUX_PAD1;
    b6ec:	003b      	movs	r3, r7
    b6ee:	4a10      	ldr	r2, [pc, #64]	; (b730 <setup_I2C+0x84>)
    b6f0:	621a      	str	r2, [r3, #32]

	/* Initialize and enable device with config. */
	status = i2c_master_init(&SHTC_master_instance, EXT1_I2C_MODULE, &config_i2c_master);
    b6f2:	2337      	movs	r3, #55	; 0x37
    b6f4:	18fc      	adds	r4, r7, r3
    b6f6:	003a      	movs	r2, r7
    b6f8:	490e      	ldr	r1, [pc, #56]	; (b734 <setup_I2C+0x88>)
    b6fa:	4b0f      	ldr	r3, [pc, #60]	; (b738 <setup_I2C+0x8c>)
    b6fc:	0018      	movs	r0, r3
    b6fe:	4b0f      	ldr	r3, [pc, #60]	; (b73c <setup_I2C+0x90>)
    b700:	4798      	blx	r3
    b702:	0003      	movs	r3, r0
    b704:	7023      	strb	r3, [r4, #0]
	i2c_master_enable(&SHTC_master_instance);
    b706:	4b0c      	ldr	r3, [pc, #48]	; (b738 <setup_I2C+0x8c>)
    b708:	0018      	movs	r0, r3
    b70a:	4b0d      	ldr	r3, [pc, #52]	; (b740 <setup_I2C+0x94>)
    b70c:	4798      	blx	r3

}
    b70e:	46c0      	nop			; (mov r8, r8)
    b710:	46bd      	mov	sp, r7
    b712:	b00f      	add	sp, #60	; 0x3c
    b714:	bd90      	pop	{r4, r7, pc}
    b716:	46c0      	nop			; (mov r8, r8)
    b718:	0000b205 	.word	0x0000b205
    b71c:	00001991 	.word	0x00001991
    b720:	0000b229 	.word	0x0000b229
    b724:	0000b2c5 	.word	0x0000b2c5
    b728:	00002710 	.word	0x00002710
    b72c:	00100002 	.word	0x00100002
    b730:	00110002 	.word	0x00110002
    b734:	42000400 	.word	0x42000400
    b738:	20001330 	.word	0x20001330
    b73c:	00002599 	.word	0x00002599
    b740:	0000b349 	.word	0x0000b349

0000b744 <i2c_write_complete_callback>:

void i2c_write_complete_callback(struct i2c_master_module *const module){
    b744:	b580      	push	{r7, lr}
    b746:	b082      	sub	sp, #8
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    /* Initiate new packet read */
    i2c_master_read_packet_job(&SHTC_master_instance,&SHTC_read_packet);
    b74c:	4a04      	ldr	r2, [pc, #16]	; (b760 <i2c_write_complete_callback+0x1c>)
    b74e:	4b05      	ldr	r3, [pc, #20]	; (b764 <i2c_write_complete_callback+0x20>)
    b750:	0011      	movs	r1, r2
    b752:	0018      	movs	r0, r3
    b754:	4b04      	ldr	r3, [pc, #16]	; (b768 <i2c_write_complete_callback+0x24>)
    b756:	4798      	blx	r3
}
    b758:	46c0      	nop			; (mov r8, r8)
    b75a:	46bd      	mov	sp, r7
    b75c:	b002      	add	sp, #8
    b75e:	bd80      	pop	{r7, pc}
    b760:	20000058 	.word	0x20000058
    b764:	20001330 	.word	0x20001330
    b768:	0000307d 	.word	0x0000307d

0000b76c <configure_i2c_callbacks>:

void configure_i2c_callbacks(void){
    b76c:	b580      	push	{r7, lr}
    b76e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&SHTC_master_instance, i2c_write_complete_callback, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    b770:	4906      	ldr	r1, [pc, #24]	; (b78c <configure_i2c_callbacks+0x20>)
    b772:	4b07      	ldr	r3, [pc, #28]	; (b790 <configure_i2c_callbacks+0x24>)
    b774:	2200      	movs	r2, #0
    b776:	0018      	movs	r0, r3
    b778:	4b06      	ldr	r3, [pc, #24]	; (b794 <configure_i2c_callbacks+0x28>)
    b77a:	4798      	blx	r3
    i2c_master_enable_callback(&SHTC_master_instance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    b77c:	4b04      	ldr	r3, [pc, #16]	; (b790 <configure_i2c_callbacks+0x24>)
    b77e:	2100      	movs	r1, #0
    b780:	0018      	movs	r0, r3
    b782:	4b05      	ldr	r3, [pc, #20]	; (b798 <configure_i2c_callbacks+0x2c>)
    b784:	4798      	blx	r3
}
    b786:	46c0      	nop			; (mov r8, r8)
    b788:	46bd      	mov	sp, r7
    b78a:	bd80      	pop	{r7, pc}
    b78c:	0000b745 	.word	0x0000b745
    b790:	20001330 	.word	0x20001330
    b794:	00002edd 	.word	0x00002edd
    b798:	0000b3bd 	.word	0x0000b3bd

0000b79c <read_SHTC3>:


static void	read_SHTC3(void){
    b79c:	b590      	push	{r4, r7, lr}
    b79e:	b089      	sub	sp, #36	; 0x24
    b7a0:	af00      	add	r7, sp, #0
	//Dev Board Colours
	//Yellow - SDA PA16
	//Green - SCL PA17

	//Timeout counter.
	uint16_t timeout = 0;
    b7a2:	231e      	movs	r3, #30
    b7a4:	18fb      	adds	r3, r7, r3
    b7a6:	2200      	movs	r2, #0
    b7a8:	801a      	strh	r2, [r3, #0]

	port_pin_set_output_level(PIN_PA18, true); //yellow LED on
    b7aa:	2101      	movs	r1, #1
    b7ac:	2012      	movs	r0, #18
    b7ae:	4b9c      	ldr	r3, [pc, #624]	; (ba20 <read_SHTC3+0x284>)
    b7b0:	4798      	blx	r3
	//Set device into sleep mode
	SHTC_write_buffer[0] = 0xB0;
    b7b2:	4b9c      	ldr	r3, [pc, #624]	; (ba24 <read_SHTC3+0x288>)
    b7b4:	22b0      	movs	r2, #176	; 0xb0
    b7b6:	701a      	strb	r2, [r3, #0]
	SHTC_write_buffer[1] = 0x98;
    b7b8:	4b9a      	ldr	r3, [pc, #616]	; (ba24 <read_SHTC3+0x288>)
    b7ba:	2298      	movs	r2, #152	; 0x98
    b7bc:	705a      	strb	r2, [r3, #1]
	SHTC_write_packet.data_length = 2;
    b7be:	4b9a      	ldr	r3, [pc, #616]	; (ba28 <read_SHTC3+0x28c>)
    b7c0:	2202      	movs	r2, #2
    b7c2:	805a      	strh	r2, [r3, #2]
	//send
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b7c4:	e00e      	b.n	b7e4 <read_SHTC3+0x48>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == SHTC_TIMEOUT) {
    b7c6:	231e      	movs	r3, #30
    b7c8:	18fb      	adds	r3, r7, r3
    b7ca:	881b      	ldrh	r3, [r3, #0]
    b7cc:	221e      	movs	r2, #30
    b7ce:	18ba      	adds	r2, r7, r2
    b7d0:	1c59      	adds	r1, r3, #1
    b7d2:	8011      	strh	r1, [r2, #0]
    b7d4:	4a95      	ldr	r2, [pc, #596]	; (ba2c <read_SHTC3+0x290>)
    b7d6:	4293      	cmp	r3, r2
    b7d8:	d104      	bne.n	b7e4 <read_SHTC3+0x48>
			printf("\r\nWrite Sleep Timeout\r\n");
    b7da:	4b95      	ldr	r3, [pc, #596]	; (ba30 <read_SHTC3+0x294>)
    b7dc:	0018      	movs	r0, r3
    b7de:	4b95      	ldr	r3, [pc, #596]	; (ba34 <read_SHTC3+0x298>)
    b7e0:	4798      	blx	r3
			break;
    b7e2:	e007      	b.n	b7f4 <read_SHTC3+0x58>
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b7e4:	4a90      	ldr	r2, [pc, #576]	; (ba28 <read_SHTC3+0x28c>)
    b7e6:	4b94      	ldr	r3, [pc, #592]	; (ba38 <read_SHTC3+0x29c>)
    b7e8:	0011      	movs	r1, r2
    b7ea:	0018      	movs	r0, r3
    b7ec:	4b93      	ldr	r3, [pc, #588]	; (ba3c <read_SHTC3+0x2a0>)
    b7ee:	4798      	blx	r3
    b7f0:	1e03      	subs	r3, r0, #0
    b7f2:	d1e8      	bne.n	b7c6 <read_SHTC3+0x2a>
		//0x35 for Wakeup MSB
		//3 ACK
		//0x17 for Wakeup LSB
		//4 ACK
		//P
	timeout = 0;
    b7f4:	231e      	movs	r3, #30
    b7f6:	18fb      	adds	r3, r7, r3
    b7f8:	2200      	movs	r2, #0
    b7fa:	801a      	strh	r2, [r3, #0]
	SHTC_write_buffer[0] = 0x35;
    b7fc:	4b89      	ldr	r3, [pc, #548]	; (ba24 <read_SHTC3+0x288>)
    b7fe:	2235      	movs	r2, #53	; 0x35
    b800:	701a      	strb	r2, [r3, #0]
	SHTC_write_buffer[1] = 0x17;
    b802:	4b88      	ldr	r3, [pc, #544]	; (ba24 <read_SHTC3+0x288>)
    b804:	2217      	movs	r2, #23
    b806:	705a      	strb	r2, [r3, #1]

	//send
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b808:	e00e      	b.n	b828 <read_SHTC3+0x8c>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == SHTC_TIMEOUT) {
    b80a:	231e      	movs	r3, #30
    b80c:	18fb      	adds	r3, r7, r3
    b80e:	881b      	ldrh	r3, [r3, #0]
    b810:	221e      	movs	r2, #30
    b812:	18ba      	adds	r2, r7, r2
    b814:	1c59      	adds	r1, r3, #1
    b816:	8011      	strh	r1, [r2, #0]
    b818:	4a84      	ldr	r2, [pc, #528]	; (ba2c <read_SHTC3+0x290>)
    b81a:	4293      	cmp	r3, r2
    b81c:	d104      	bne.n	b828 <read_SHTC3+0x8c>
			printf("\r\nWrite Wakeup Timeout\r\n");
    b81e:	4b88      	ldr	r3, [pc, #544]	; (ba40 <read_SHTC3+0x2a4>)
    b820:	0018      	movs	r0, r3
    b822:	4b84      	ldr	r3, [pc, #528]	; (ba34 <read_SHTC3+0x298>)
    b824:	4798      	blx	r3
			break;
    b826:	e007      	b.n	b838 <read_SHTC3+0x9c>
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b828:	4a7f      	ldr	r2, [pc, #508]	; (ba28 <read_SHTC3+0x28c>)
    b82a:	4b83      	ldr	r3, [pc, #524]	; (ba38 <read_SHTC3+0x29c>)
    b82c:	0011      	movs	r1, r2
    b82e:	0018      	movs	r0, r3
    b830:	4b82      	ldr	r3, [pc, #520]	; (ba3c <read_SHTC3+0x2a0>)
    b832:	4798      	blx	r3
    b834:	1e03      	subs	r3, r0, #0
    b836:	d1e8      	bne.n	b80a <read_SHTC3+0x6e>
	//0x5C for Measurement Command MSB
	//3 ACK
	//0x24 for Measurement Command LSB
	//4 ACK
	//P
	timeout = 0;
    b838:	231e      	movs	r3, #30
    b83a:	18fb      	adds	r3, r7, r3
    b83c:	2200      	movs	r2, #0
    b83e:	801a      	strh	r2, [r3, #0]

	//temperature first, clock stretching disabled, Normal mode
	SHTC_write_buffer[0] = 0x78;
    b840:	4b78      	ldr	r3, [pc, #480]	; (ba24 <read_SHTC3+0x288>)
    b842:	2278      	movs	r2, #120	; 0x78
    b844:	701a      	strb	r2, [r3, #0]
	SHTC_write_buffer[1] = 0x66;
    b846:	4b77      	ldr	r3, [pc, #476]	; (ba24 <read_SHTC3+0x288>)
    b848:	2266      	movs	r2, #102	; 0x66
    b84a:	705a      	strb	r2, [r3, #1]
	//relative humidity first, clock stretching disabled, Normal mode
	//SHTC_write_buffer[0] = 0x58;
	//SHTC_write_buffer[1] = 0xE0;
	//send
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b84c:	e00e      	b.n	b86c <read_SHTC3+0xd0>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == SHTC_TIMEOUT) {
    b84e:	231e      	movs	r3, #30
    b850:	18fb      	adds	r3, r7, r3
    b852:	881b      	ldrh	r3, [r3, #0]
    b854:	221e      	movs	r2, #30
    b856:	18ba      	adds	r2, r7, r2
    b858:	1c59      	adds	r1, r3, #1
    b85a:	8011      	strh	r1, [r2, #0]
    b85c:	4a73      	ldr	r2, [pc, #460]	; (ba2c <read_SHTC3+0x290>)
    b85e:	4293      	cmp	r3, r2
    b860:	d104      	bne.n	b86c <read_SHTC3+0xd0>
			printf("\r\nWrite Measurement Timeout\r\n");
    b862:	4b78      	ldr	r3, [pc, #480]	; (ba44 <read_SHTC3+0x2a8>)
    b864:	0018      	movs	r0, r3
    b866:	4b73      	ldr	r3, [pc, #460]	; (ba34 <read_SHTC3+0x298>)
    b868:	4798      	blx	r3
			break;
    b86a:	e007      	b.n	b87c <read_SHTC3+0xe0>
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b86c:	4a6e      	ldr	r2, [pc, #440]	; (ba28 <read_SHTC3+0x28c>)
    b86e:	4b72      	ldr	r3, [pc, #456]	; (ba38 <read_SHTC3+0x29c>)
    b870:	0011      	movs	r1, r2
    b872:	0018      	movs	r0, r3
    b874:	4b71      	ldr	r3, [pc, #452]	; (ba3c <read_SHTC3+0x2a0>)
    b876:	4798      	blx	r3
    b878:	1e03      	subs	r3, r0, #0
    b87a:	d1e8      	bne.n	b84e <read_SHTC3+0xb2>
		}
	}

	port_pin_set_output_level(PIN_PA18, false);  //Yellow LED off
    b87c:	2100      	movs	r1, #0
    b87e:	2012      	movs	r0, #18
    b880:	4b67      	ldr	r3, [pc, #412]	; (ba20 <read_SHTC3+0x284>)
    b882:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA19, true);	//Green LED on
    b884:	2101      	movs	r1, #1
    b886:	2013      	movs	r0, #19
    b888:	4b65      	ldr	r3, [pc, #404]	; (ba20 <read_SHTC3+0x284>)
    b88a:	4798      	blx	r3



	//Read data command
	timeout = 0;
    b88c:	231e      	movs	r3, #30
    b88e:	18fb      	adds	r3, r7, r3
    b890:	2200      	movs	r2, #0
    b892:	801a      	strh	r2, [r3, #0]
	SHTC_read_packet.data = SHTC_read_buffer;
    b894:	4b6c      	ldr	r3, [pc, #432]	; (ba48 <read_SHTC3+0x2ac>)
    b896:	4a6d      	ldr	r2, [pc, #436]	; (ba4c <read_SHTC3+0x2b0>)
    b898:	605a      	str	r2, [r3, #4]
	SHTC_read_packet.data_length = SHTC_DATA_LENGTH;
    b89a:	4b6b      	ldr	r3, [pc, #428]	; (ba48 <read_SHTC3+0x2ac>)
    b89c:	220a      	movs	r2, #10
    b89e:	805a      	strh	r2, [r3, #2]
	//read
	while (i2c_master_read_packet_wait(&SHTC_master_instance, &SHTC_read_packet) != STATUS_OK) {
    b8a0:	e00e      	b.n	b8c0 <read_SHTC3+0x124>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == SHTC_TIMEOUT) {
    b8a2:	231e      	movs	r3, #30
    b8a4:	18fb      	adds	r3, r7, r3
    b8a6:	881b      	ldrh	r3, [r3, #0]
    b8a8:	221e      	movs	r2, #30
    b8aa:	18ba      	adds	r2, r7, r2
    b8ac:	1c59      	adds	r1, r3, #1
    b8ae:	8011      	strh	r1, [r2, #0]
    b8b0:	4a5e      	ldr	r2, [pc, #376]	; (ba2c <read_SHTC3+0x290>)
    b8b2:	4293      	cmp	r3, r2
    b8b4:	d104      	bne.n	b8c0 <read_SHTC3+0x124>
			printf("\r\nRead Timeout\r\n");
    b8b6:	4b66      	ldr	r3, [pc, #408]	; (ba50 <read_SHTC3+0x2b4>)
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b5e      	ldr	r3, [pc, #376]	; (ba34 <read_SHTC3+0x298>)
    b8bc:	4798      	blx	r3
			break;
    b8be:	e007      	b.n	b8d0 <read_SHTC3+0x134>
	while (i2c_master_read_packet_wait(&SHTC_master_instance, &SHTC_read_packet) != STATUS_OK) {
    b8c0:	4a61      	ldr	r2, [pc, #388]	; (ba48 <read_SHTC3+0x2ac>)
    b8c2:	4b5d      	ldr	r3, [pc, #372]	; (ba38 <read_SHTC3+0x29c>)
    b8c4:	0011      	movs	r1, r2
    b8c6:	0018      	movs	r0, r3
    b8c8:	4b62      	ldr	r3, [pc, #392]	; (ba54 <read_SHTC3+0x2b8>)
    b8ca:	4798      	blx	r3
    b8cc:	1e03      	subs	r3, r0, #0
    b8ce:	d1e8      	bne.n	b8a2 <read_SHTC3+0x106>
	}
	//temp first
	uint16_t temperature_reading, humidity_reading;
	//printf("%d\rn",(uint16_t)SHTC_read_buffer[0]<<(1*8));
	uint16_t temp_msb, temp_lsb, humid_msb, humid_lsb;
	temp_msb = SHTC_read_buffer[0];
    b8d0:	4b5e      	ldr	r3, [pc, #376]	; (ba4c <read_SHTC3+0x2b0>)
    b8d2:	781a      	ldrb	r2, [r3, #0]
    b8d4:	231c      	movs	r3, #28
    b8d6:	18fb      	adds	r3, r7, r3
    b8d8:	801a      	strh	r2, [r3, #0]
	temp_lsb = SHTC_read_buffer[1];
    b8da:	4b5c      	ldr	r3, [pc, #368]	; (ba4c <read_SHTC3+0x2b0>)
    b8dc:	785a      	ldrb	r2, [r3, #1]
    b8de:	231a      	movs	r3, #26
    b8e0:	18fb      	adds	r3, r7, r3
    b8e2:	801a      	strh	r2, [r3, #0]
	humid_msb = SHTC_read_buffer[3];
    b8e4:	4b59      	ldr	r3, [pc, #356]	; (ba4c <read_SHTC3+0x2b0>)
    b8e6:	78da      	ldrb	r2, [r3, #3]
    b8e8:	2318      	movs	r3, #24
    b8ea:	18fb      	adds	r3, r7, r3
    b8ec:	801a      	strh	r2, [r3, #0]
	humid_lsb = SHTC_read_buffer[4];
    b8ee:	4b57      	ldr	r3, [pc, #348]	; (ba4c <read_SHTC3+0x2b0>)
    b8f0:	791a      	ldrb	r2, [r3, #4]
    b8f2:	2316      	movs	r3, #22
    b8f4:	18fb      	adds	r3, r7, r3
    b8f6:	801a      	strh	r2, [r3, #0]
	
	temp_msb = temp_msb<<8;
    b8f8:	231c      	movs	r3, #28
    b8fa:	18fb      	adds	r3, r7, r3
    b8fc:	221c      	movs	r2, #28
    b8fe:	18ba      	adds	r2, r7, r2
    b900:	8812      	ldrh	r2, [r2, #0]
    b902:	0212      	lsls	r2, r2, #8
    b904:	801a      	strh	r2, [r3, #0]
	humid_msb = humid_msb<<8;
    b906:	2318      	movs	r3, #24
    b908:	18fb      	adds	r3, r7, r3
    b90a:	2218      	movs	r2, #24
    b90c:	18ba      	adds	r2, r7, r2
    b90e:	8812      	ldrh	r2, [r2, #0]
    b910:	0212      	lsls	r2, r2, #8
    b912:	801a      	strh	r2, [r3, #0]
	temperature_reading = temp_lsb + temp_msb;
    b914:	2314      	movs	r3, #20
    b916:	18fb      	adds	r3, r7, r3
    b918:	221a      	movs	r2, #26
    b91a:	18b9      	adds	r1, r7, r2
    b91c:	221c      	movs	r2, #28
    b91e:	18ba      	adds	r2, r7, r2
    b920:	8809      	ldrh	r1, [r1, #0]
    b922:	8812      	ldrh	r2, [r2, #0]
    b924:	188a      	adds	r2, r1, r2
    b926:	801a      	strh	r2, [r3, #0]
	humidity_reading = humid_lsb + humid_msb;
    b928:	2312      	movs	r3, #18
    b92a:	18fb      	adds	r3, r7, r3
    b92c:	2216      	movs	r2, #22
    b92e:	18b9      	adds	r1, r7, r2
    b930:	2218      	movs	r2, #24
    b932:	18ba      	adds	r2, r7, r2
    b934:	8809      	ldrh	r1, [r1, #0]
    b936:	8812      	ldrh	r2, [r2, #0]
    b938:	188a      	adds	r2, r1, r2
    b93a:	801a      	strh	r2, [r3, #0]
	//temperature_reading = (uint16_t)SHTC_read_buffer[0]<<8 + (uint16_t)SHTC_read_buffer[1];
	//humidity_reading = (uint16_t)SHTC_read_buffer[3]<<(1*8) + (uint16_t)SHTC_read_buffer[4];

	double temperature, relative_humidity;
	
	temperature = -45+175*((double)temperature_reading/65536);
    b93c:	2314      	movs	r3, #20
    b93e:	18fb      	adds	r3, r7, r3
    b940:	881a      	ldrh	r2, [r3, #0]
    b942:	4b45      	ldr	r3, [pc, #276]	; (ba58 <read_SHTC3+0x2bc>)
    b944:	0010      	movs	r0, r2
    b946:	4798      	blx	r3
    b948:	4c44      	ldr	r4, [pc, #272]	; (ba5c <read_SHTC3+0x2c0>)
    b94a:	2200      	movs	r2, #0
    b94c:	4b44      	ldr	r3, [pc, #272]	; (ba60 <read_SHTC3+0x2c4>)
    b94e:	47a0      	blx	r4
    b950:	0003      	movs	r3, r0
    b952:	000c      	movs	r4, r1
    b954:	0018      	movs	r0, r3
    b956:	0021      	movs	r1, r4
    b958:	4c42      	ldr	r4, [pc, #264]	; (ba64 <read_SHTC3+0x2c8>)
    b95a:	2200      	movs	r2, #0
    b95c:	4b42      	ldr	r3, [pc, #264]	; (ba68 <read_SHTC3+0x2cc>)
    b95e:	47a0      	blx	r4
    b960:	0003      	movs	r3, r0
    b962:	000c      	movs	r4, r1
    b964:	0018      	movs	r0, r3
    b966:	0021      	movs	r1, r4
    b968:	4c40      	ldr	r4, [pc, #256]	; (ba6c <read_SHTC3+0x2d0>)
    b96a:	2200      	movs	r2, #0
    b96c:	4b40      	ldr	r3, [pc, #256]	; (ba70 <read_SHTC3+0x2d4>)
    b96e:	47a0      	blx	r4
    b970:	0003      	movs	r3, r0
    b972:	000c      	movs	r4, r1
    b974:	60bb      	str	r3, [r7, #8]
    b976:	60fc      	str	r4, [r7, #12]
	relative_humidity = 100*((double)humidity_reading/65536);
    b978:	2312      	movs	r3, #18
    b97a:	18fb      	adds	r3, r7, r3
    b97c:	881a      	ldrh	r2, [r3, #0]
    b97e:	4b36      	ldr	r3, [pc, #216]	; (ba58 <read_SHTC3+0x2bc>)
    b980:	0010      	movs	r0, r2
    b982:	4798      	blx	r3
    b984:	4c35      	ldr	r4, [pc, #212]	; (ba5c <read_SHTC3+0x2c0>)
    b986:	2200      	movs	r2, #0
    b988:	4b35      	ldr	r3, [pc, #212]	; (ba60 <read_SHTC3+0x2c4>)
    b98a:	47a0      	blx	r4
    b98c:	0003      	movs	r3, r0
    b98e:	000c      	movs	r4, r1
    b990:	0018      	movs	r0, r3
    b992:	0021      	movs	r1, r4
    b994:	4c33      	ldr	r4, [pc, #204]	; (ba64 <read_SHTC3+0x2c8>)
    b996:	2200      	movs	r2, #0
    b998:	4b36      	ldr	r3, [pc, #216]	; (ba74 <read_SHTC3+0x2d8>)
    b99a:	47a0      	blx	r4
    b99c:	0003      	movs	r3, r0
    b99e:	000c      	movs	r4, r1
    b9a0:	603b      	str	r3, [r7, #0]
    b9a2:	607c      	str	r4, [r7, #4]
	
	printf("The temperature is %g degrees Celsius.\r\n", temperature);
    b9a4:	68bb      	ldr	r3, [r7, #8]
    b9a6:	68fc      	ldr	r4, [r7, #12]
    b9a8:	4933      	ldr	r1, [pc, #204]	; (ba78 <read_SHTC3+0x2dc>)
    b9aa:	001a      	movs	r2, r3
    b9ac:	0023      	movs	r3, r4
    b9ae:	0008      	movs	r0, r1
    b9b0:	4932      	ldr	r1, [pc, #200]	; (ba7c <read_SHTC3+0x2e0>)
    b9b2:	4788      	blx	r1
	printf("The relative humidity is %g Percent.\r\n", relative_humidity);
    b9b4:	683b      	ldr	r3, [r7, #0]
    b9b6:	687c      	ldr	r4, [r7, #4]
    b9b8:	4931      	ldr	r1, [pc, #196]	; (ba80 <read_SHTC3+0x2e4>)
    b9ba:	001a      	movs	r2, r3
    b9bc:	0023      	movs	r3, r4
    b9be:	0008      	movs	r0, r1
    b9c0:	492e      	ldr	r1, [pc, #184]	; (ba7c <read_SHTC3+0x2e0>)
    b9c2:	4788      	blx	r1
	//Set device into sleep mode
	timeout = 0;
    b9c4:	231e      	movs	r3, #30
    b9c6:	18fb      	adds	r3, r7, r3
    b9c8:	2200      	movs	r2, #0
    b9ca:	801a      	strh	r2, [r3, #0]
	//Set device into sleep mode
	SHTC_write_buffer[0] = 0xB0;
    b9cc:	4b15      	ldr	r3, [pc, #84]	; (ba24 <read_SHTC3+0x288>)
    b9ce:	22b0      	movs	r2, #176	; 0xb0
    b9d0:	701a      	strb	r2, [r3, #0]
	SHTC_write_buffer[1] = 0x98;
    b9d2:	4b14      	ldr	r3, [pc, #80]	; (ba24 <read_SHTC3+0x288>)
    b9d4:	2298      	movs	r2, #152	; 0x98
    b9d6:	705a      	strb	r2, [r3, #1]
	SHTC_write_packet.data_length = 2;
    b9d8:	4b13      	ldr	r3, [pc, #76]	; (ba28 <read_SHTC3+0x28c>)
    b9da:	2202      	movs	r2, #2
    b9dc:	805a      	strh	r2, [r3, #2]
	//send
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b9de:	e00e      	b.n	b9fe <read_SHTC3+0x262>
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == SHTC_TIMEOUT) {
    b9e0:	231e      	movs	r3, #30
    b9e2:	18fb      	adds	r3, r7, r3
    b9e4:	881b      	ldrh	r3, [r3, #0]
    b9e6:	221e      	movs	r2, #30
    b9e8:	18ba      	adds	r2, r7, r2
    b9ea:	1c59      	adds	r1, r3, #1
    b9ec:	8011      	strh	r1, [r2, #0]
    b9ee:	4a0f      	ldr	r2, [pc, #60]	; (ba2c <read_SHTC3+0x290>)
    b9f0:	4293      	cmp	r3, r2
    b9f2:	d104      	bne.n	b9fe <read_SHTC3+0x262>
			printf("\r\nWrite Sleep Timeout\r\n");
    b9f4:	4b0e      	ldr	r3, [pc, #56]	; (ba30 <read_SHTC3+0x294>)
    b9f6:	0018      	movs	r0, r3
    b9f8:	4b0e      	ldr	r3, [pc, #56]	; (ba34 <read_SHTC3+0x298>)
    b9fa:	4798      	blx	r3
			break;
    b9fc:	e007      	b.n	ba0e <read_SHTC3+0x272>
	while (i2c_master_write_packet_wait(&SHTC_master_instance, &SHTC_write_packet) != STATUS_OK) {
    b9fe:	4a0a      	ldr	r2, [pc, #40]	; (ba28 <read_SHTC3+0x28c>)
    ba00:	4b0d      	ldr	r3, [pc, #52]	; (ba38 <read_SHTC3+0x29c>)
    ba02:	0011      	movs	r1, r2
    ba04:	0018      	movs	r0, r3
    ba06:	4b0d      	ldr	r3, [pc, #52]	; (ba3c <read_SHTC3+0x2a0>)
    ba08:	4798      	blx	r3
    ba0a:	1e03      	subs	r3, r0, #0
    ba0c:	d1e8      	bne.n	b9e0 <read_SHTC3+0x244>
		}
	}

	port_pin_set_output_level(PIN_PA18, false); //Green LED off
    ba0e:	2100      	movs	r1, #0
    ba10:	2012      	movs	r0, #18
    ba12:	4b03      	ldr	r3, [pc, #12]	; (ba20 <read_SHTC3+0x284>)
    ba14:	4798      	blx	r3
}
    ba16:	46c0      	nop			; (mov r8, r8)
    ba18:	46bd      	mov	sp, r7
    ba1a:	b009      	add	sp, #36	; 0x24
    ba1c:	bd90      	pop	{r4, r7, pc}
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	0000b229 	.word	0x0000b229
    ba24:	20000064 	.word	0x20000064
    ba28:	20000070 	.word	0x20000070
    ba2c:	00002710 	.word	0x00002710
    ba30:	00017440 	.word	0x00017440
    ba34:	00011651 	.word	0x00011651
    ba38:	20001330 	.word	0x20001330
    ba3c:	00002c2d 	.word	0x00002c2d
    ba40:	00017458 	.word	0x00017458
    ba44:	00017470 	.word	0x00017470
    ba48:	20000058 	.word	0x20000058
    ba4c:	2000004c 	.word	0x2000004c
    ba50:	00017490 	.word	0x00017490
    ba54:	00002a75 	.word	0x00002a75
    ba58:	000112c5 	.word	0x000112c5
    ba5c:	0000fe45 	.word	0x0000fe45
    ba60:	40f00000 	.word	0x40f00000
    ba64:	000106ad 	.word	0x000106ad
    ba68:	4065e000 	.word	0x4065e000
    ba6c:	00010bad 	.word	0x00010bad
    ba70:	40468000 	.word	0x40468000
    ba74:	40590000 	.word	0x40590000
    ba78:	000174a0 	.word	0x000174a0
    ba7c:	0001158d 	.word	0x0001158d
    ba80:	000174cc 	.word	0x000174cc

0000ba84 <common_tc_read_count>:
    ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba86:	4b0d      	ldr	r3, [pc, #52]	; (babc <common_tc_read_count+0x38>)
    ba88:	4798      	blx	r3
    ba8a:	4b0d      	ldr	r3, [pc, #52]	; (bac0 <common_tc_read_count+0x3c>)
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	2b00      	cmp	r3, #0
    ba90:	d00e      	beq.n	bab0 <common_tc_read_count+0x2c>
    ba92:	4b0c      	ldr	r3, [pc, #48]	; (bac4 <common_tc_read_count+0x40>)
    ba94:	781d      	ldrb	r5, [r3, #0]
    ba96:	4b0a      	ldr	r3, [pc, #40]	; (bac0 <common_tc_read_count+0x3c>)
    ba98:	781f      	ldrb	r7, [r3, #0]
    ba9a:	4c0b      	ldr	r4, [pc, #44]	; (bac8 <common_tc_read_count+0x44>)
    ba9c:	1c29      	adds	r1, r5, #0
    ba9e:	47a0      	blx	r4
    baa0:	1c06      	adds	r6, r0, #0
    baa2:	480a      	ldr	r0, [pc, #40]	; (bacc <common_tc_read_count+0x48>)
    baa4:	1c29      	adds	r1, r5, #0
    baa6:	47a0      	blx	r4
    baa8:	4378      	muls	r0, r7
    baaa:	1830      	adds	r0, r6, r0
    baac:	b280      	uxth	r0, r0
    baae:	e004      	b.n	baba <common_tc_read_count+0x36>
    bab0:	4b04      	ldr	r3, [pc, #16]	; (bac4 <common_tc_read_count+0x40>)
    bab2:	7819      	ldrb	r1, [r3, #0]
    bab4:	4b04      	ldr	r3, [pc, #16]	; (bac8 <common_tc_read_count+0x44>)
    bab6:	4798      	blx	r3
    bab8:	b280      	uxth	r0, r0
    baba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    babc:	0000a349 	.word	0x0000a349
    bac0:	20000ea0 	.word	0x20000ea0
    bac4:	20001358 	.word	0x20001358
    bac8:	0000e4b5 	.word	0x0000e4b5
    bacc:	0000ffff 	.word	0x0000ffff

0000bad0 <common_tc_compare_stop>:
    bad0:	b508      	push	{r3, lr}
    bad2:	4b05      	ldr	r3, [pc, #20]	; (bae8 <common_tc_compare_stop+0x18>)
    bad4:	4798      	blx	r3
    bad6:	4b05      	ldr	r3, [pc, #20]	; (baec <common_tc_compare_stop+0x1c>)
    bad8:	4798      	blx	r3
    bada:	4b05      	ldr	r3, [pc, #20]	; (baf0 <common_tc_compare_stop+0x20>)
    badc:	2200      	movs	r2, #0
    bade:	605a      	str	r2, [r3, #4]
    bae0:	811a      	strh	r2, [r3, #8]
    bae2:	4b04      	ldr	r3, [pc, #16]	; (baf4 <common_tc_compare_stop+0x24>)
    bae4:	4798      	blx	r3
    bae6:	bd08      	pop	{r3, pc}
    bae8:	0000a369 	.word	0x0000a369
    baec:	0000a3dd 	.word	0x0000a3dd
    baf0:	20000ea0 	.word	0x20000ea0
    baf4:	0000a3f5 	.word	0x0000a3f5

0000baf8 <common_tc_delay>:
    baf8:	b510      	push	{r4, lr}
    bafa:	1c04      	adds	r4, r0, #0
    bafc:	4b13      	ldr	r3, [pc, #76]	; (bb4c <common_tc_delay+0x54>)
    bafe:	4798      	blx	r3
    bb00:	4b13      	ldr	r3, [pc, #76]	; (bb50 <common_tc_delay+0x58>)
    bb02:	781a      	ldrb	r2, [r3, #0]
    bb04:	4362      	muls	r2, r4
    bb06:	1881      	adds	r1, r0, r2
    bb08:	4b12      	ldr	r3, [pc, #72]	; (bb54 <common_tc_delay+0x5c>)
    bb0a:	6059      	str	r1, [r3, #4]
    bb0c:	6859      	ldr	r1, [r3, #4]
    bb0e:	0c09      	lsrs	r1, r1, #16
    bb10:	6059      	str	r1, [r3, #4]
    bb12:	685b      	ldr	r3, [r3, #4]
    bb14:	2b00      	cmp	r3, #0
    bb16:	d007      	beq.n	bb28 <common_tc_delay+0x30>
    bb18:	4b0e      	ldr	r3, [pc, #56]	; (bb54 <common_tc_delay+0x5c>)
    bb1a:	6859      	ldr	r1, [r3, #4]
    bb1c:	3201      	adds	r2, #1
    bb1e:	1880      	adds	r0, r0, r2
    bb20:	8118      	strh	r0, [r3, #8]
    bb22:	4b0d      	ldr	r3, [pc, #52]	; (bb58 <common_tc_delay+0x60>)
    bb24:	4798      	blx	r3
    bb26:	e004      	b.n	bb32 <common_tc_delay+0x3a>
    bb28:	1882      	adds	r2, r0, r2
    bb2a:	4b0a      	ldr	r3, [pc, #40]	; (bb54 <common_tc_delay+0x5c>)
    bb2c:	811a      	strh	r2, [r3, #8]
    bb2e:	4b0b      	ldr	r3, [pc, #44]	; (bb5c <common_tc_delay+0x64>)
    bb30:	4798      	blx	r3
    bb32:	4b08      	ldr	r3, [pc, #32]	; (bb54 <common_tc_delay+0x5c>)
    bb34:	891b      	ldrh	r3, [r3, #8]
    bb36:	2b63      	cmp	r3, #99	; 0x63
    bb38:	d802      	bhi.n	bb40 <common_tc_delay+0x48>
    bb3a:	3364      	adds	r3, #100	; 0x64
    bb3c:	4a05      	ldr	r2, [pc, #20]	; (bb54 <common_tc_delay+0x5c>)
    bb3e:	8113      	strh	r3, [r2, #8]
    bb40:	4b04      	ldr	r3, [pc, #16]	; (bb54 <common_tc_delay+0x5c>)
    bb42:	8918      	ldrh	r0, [r3, #8]
    bb44:	4b06      	ldr	r3, [pc, #24]	; (bb60 <common_tc_delay+0x68>)
    bb46:	4798      	blx	r3
    bb48:	bd10      	pop	{r4, pc}
    bb4a:	46c0      	nop			; (mov r8, r8)
    bb4c:	0000a349 	.word	0x0000a349
    bb50:	20001358 	.word	0x20001358
    bb54:	20000ea0 	.word	0x20000ea0
    bb58:	0000a369 	.word	0x0000a369
    bb5c:	0000a385 	.word	0x0000a385
    bb60:	0000a3b1 	.word	0x0000a3b1

0000bb64 <common_tc_init>:
    bb64:	b508      	push	{r3, lr}
    bb66:	2200      	movs	r2, #0
    bb68:	4b03      	ldr	r3, [pc, #12]	; (bb78 <common_tc_init+0x14>)
    bb6a:	701a      	strb	r2, [r3, #0]
    bb6c:	4b03      	ldr	r3, [pc, #12]	; (bb7c <common_tc_init+0x18>)
    bb6e:	4798      	blx	r3
    bb70:	4b03      	ldr	r3, [pc, #12]	; (bb80 <common_tc_init+0x1c>)
    bb72:	7018      	strb	r0, [r3, #0]
    bb74:	bd08      	pop	{r3, pc}
    bb76:	46c0      	nop			; (mov r8, r8)
    bb78:	20000ea0 	.word	0x20000ea0
    bb7c:	0000a449 	.word	0x0000a449
    bb80:	20001358 	.word	0x20001358

0000bb84 <tmr_ovf_callback>:
    bb84:	b508      	push	{r3, lr}
    bb86:	4b0e      	ldr	r3, [pc, #56]	; (bbc0 <tmr_ovf_callback+0x3c>)
    bb88:	685b      	ldr	r3, [r3, #4]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d007      	beq.n	bb9e <tmr_ovf_callback+0x1a>
    bb8e:	4a0c      	ldr	r2, [pc, #48]	; (bbc0 <tmr_ovf_callback+0x3c>)
    bb90:	6853      	ldr	r3, [r2, #4]
    bb92:	3b01      	subs	r3, #1
    bb94:	6053      	str	r3, [r2, #4]
    bb96:	2b00      	cmp	r3, #0
    bb98:	d101      	bne.n	bb9e <tmr_ovf_callback+0x1a>
    bb9a:	4b0a      	ldr	r3, [pc, #40]	; (bbc4 <tmr_ovf_callback+0x40>)
    bb9c:	4798      	blx	r3
    bb9e:	4a08      	ldr	r2, [pc, #32]	; (bbc0 <tmr_ovf_callback+0x3c>)
    bba0:	7813      	ldrb	r3, [r2, #0]
    bba2:	3301      	adds	r3, #1
    bba4:	b2db      	uxtb	r3, r3
    bba6:	7013      	strb	r3, [r2, #0]
    bba8:	4a07      	ldr	r2, [pc, #28]	; (bbc8 <tmr_ovf_callback+0x44>)
    bbaa:	7812      	ldrb	r2, [r2, #0]
    bbac:	429a      	cmp	r2, r3
    bbae:	d806      	bhi.n	bbbe <tmr_ovf_callback+0x3a>
    bbb0:	4b03      	ldr	r3, [pc, #12]	; (bbc0 <tmr_ovf_callback+0x3c>)
    bbb2:	2200      	movs	r2, #0
    bbb4:	701a      	strb	r2, [r3, #0]
    bbb6:	68db      	ldr	r3, [r3, #12]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d000      	beq.n	bbbe <tmr_ovf_callback+0x3a>
    bbbc:	4798      	blx	r3
    bbbe:	bd08      	pop	{r3, pc}
    bbc0:	20000ea0 	.word	0x20000ea0
    bbc4:	0000a385 	.word	0x0000a385
    bbc8:	20001358 	.word	0x20001358

0000bbcc <tmr_cca_callback>:
    bbcc:	b508      	push	{r3, lr}
    bbce:	4b04      	ldr	r3, [pc, #16]	; (bbe0 <tmr_cca_callback+0x14>)
    bbd0:	4798      	blx	r3
    bbd2:	4b04      	ldr	r3, [pc, #16]	; (bbe4 <tmr_cca_callback+0x18>)
    bbd4:	691b      	ldr	r3, [r3, #16]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d000      	beq.n	bbdc <tmr_cca_callback+0x10>
    bbda:	4798      	blx	r3
    bbdc:	bd08      	pop	{r3, pc}
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	0000a369 	.word	0x0000a369
    bbe4:	20000ea0 	.word	0x20000ea0

0000bbe8 <set_common_tc_overflow_callback>:
    bbe8:	4b01      	ldr	r3, [pc, #4]	; (bbf0 <set_common_tc_overflow_callback+0x8>)
    bbea:	60d8      	str	r0, [r3, #12]
    bbec:	4770      	bx	lr
    bbee:	46c0      	nop			; (mov r8, r8)
    bbf0:	20000ea0 	.word	0x20000ea0

0000bbf4 <set_common_tc_expiry_callback>:
    bbf4:	4b01      	ldr	r3, [pc, #4]	; (bbfc <set_common_tc_expiry_callback+0x8>)
    bbf6:	6118      	str	r0, [r3, #16]
    bbf8:	4770      	bx	lr
    bbfa:	46c0      	nop			; (mov r8, r8)
    bbfc:	20000ea0 	.word	0x20000ea0

0000bc00 <MacClearCommands>:
    bc00:	490e      	ldr	r1, [pc, #56]	; (bc3c <MacClearCommands+0x3c>)
    bc02:	b570      	push	{r4, r5, r6, lr}
    bc04:	000b      	movs	r3, r1
    bc06:	33e0      	adds	r3, #224	; 0xe0
    bc08:	7818      	ldrb	r0, [r3, #0]
    bc0a:	2303      	movs	r3, #3
    bc0c:	25a4      	movs	r5, #164	; 0xa4
    bc0e:	4343      	muls	r3, r0
    bc10:	2401      	movs	r4, #1
    bc12:	20ff      	movs	r0, #255	; 0xff
    bc14:	3399      	adds	r3, #153	; 0x99
    bc16:	4a0a      	ldr	r2, [pc, #40]	; (bc40 <MacClearCommands+0x40>)
    bc18:	185b      	adds	r3, r3, r1
    bc1a:	00ed      	lsls	r5, r5, #3
    bc1c:	429a      	cmp	r2, r3
    bc1e:	d100      	bne.n	bc22 <MacClearCommands+0x22>
    bc20:	bd70      	pop	{r4, r5, r6, pc}
    bc22:	7811      	ldrb	r1, [r2, #0]
    bc24:	29ff      	cmp	r1, #255	; 0xff
    bc26:	d006      	beq.n	bc36 <MacClearCommands+0x36>
    bc28:	290a      	cmp	r1, #10
    bc2a:	d803      	bhi.n	bc34 <MacClearCommands+0x34>
    bc2c:	0026      	movs	r6, r4
    bc2e:	408e      	lsls	r6, r1
    bc30:	422e      	tst	r6, r5
    bc32:	d100      	bne.n	bc36 <MacClearCommands+0x36>
    bc34:	7010      	strb	r0, [r2, #0]
    bc36:	3203      	adds	r2, #3
    bc38:	e7f0      	b.n	bc1c <MacClearCommands+0x1c>
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	20001484 	.word	0x20001484
    bc40:	2000151d 	.word	0x2000151d

0000bc44 <CountfOptsLength>:
    bc44:	2200      	movs	r2, #0
    bc46:	490d      	ldr	r1, [pc, #52]	; (bc7c <CountfOptsLength+0x38>)
    bc48:	b570      	push	{r4, r5, r6, lr}
    bc4a:	000b      	movs	r3, r1
    bc4c:	0010      	movs	r0, r2
    bc4e:	2503      	movs	r5, #3
    bc50:	33e0      	adds	r3, #224	; 0xe0
    bc52:	781c      	ldrb	r4, [r3, #0]
    bc54:	4e0a      	ldr	r6, [pc, #40]	; (bc80 <CountfOptsLength+0x3c>)
    bc56:	b2d3      	uxtb	r3, r2
    bc58:	429c      	cmp	r4, r3
    bc5a:	d800      	bhi.n	bc5e <CountfOptsLength+0x1a>
    bc5c:	bd70      	pop	{r4, r5, r6, pc}
    bc5e:	002b      	movs	r3, r5
    bc60:	4353      	muls	r3, r2
    bc62:	3399      	adds	r3, #153	; 0x99
    bc64:	5ccb      	ldrb	r3, [r1, r3]
    bc66:	2bff      	cmp	r3, #255	; 0xff
    bc68:	d006      	beq.n	bc78 <CountfOptsLength+0x34>
    bc6a:	18f3      	adds	r3, r6, r3
    bc6c:	3b02      	subs	r3, #2
    bc6e:	781b      	ldrb	r3, [r3, #0]
    bc70:	18c3      	adds	r3, r0, r3
    bc72:	2b0f      	cmp	r3, #15
    bc74:	dcf2      	bgt.n	bc5c <CountfOptsLength+0x18>
    bc76:	b2d8      	uxtb	r0, r3
    bc78:	3201      	adds	r2, #1
    bc7a:	e7ec      	b.n	bc56 <CountfOptsLength+0x12>
    bc7c:	20001484 	.word	0x20001484
    bc80:	00017513 	.word	0x00017513

0000bc84 <StopAllSoftwareTimers>:
    bc84:	b570      	push	{r4, r5, r6, lr}
    bc86:	4d17      	ldr	r5, [pc, #92]	; (bce4 <StopAllSoftwareTimers+0x60>)
    bc88:	4c17      	ldr	r4, [pc, #92]	; (bce8 <StopAllSoftwareTimers+0x64>)
    bc8a:	002b      	movs	r3, r5
    bc8c:	33eb      	adds	r3, #235	; 0xeb
    bc8e:	7818      	ldrb	r0, [r3, #0]
    bc90:	47a0      	blx	r4
    bc92:	002b      	movs	r3, r5
    bc94:	33ec      	adds	r3, #236	; 0xec
    bc96:	7818      	ldrb	r0, [r3, #0]
    bc98:	47a0      	blx	r4
    bc9a:	002b      	movs	r3, r5
    bc9c:	33f0      	adds	r3, #240	; 0xf0
    bc9e:	7818      	ldrb	r0, [r3, #0]
    bca0:	47a0      	blx	r4
    bca2:	002b      	movs	r3, r5
    bca4:	33ed      	adds	r3, #237	; 0xed
    bca6:	7818      	ldrb	r0, [r3, #0]
    bca8:	47a0      	blx	r4
    bcaa:	002b      	movs	r3, r5
    bcac:	33ee      	adds	r3, #238	; 0xee
    bcae:	7818      	ldrb	r0, [r3, #0]
    bcb0:	47a0      	blx	r4
    bcb2:	002b      	movs	r3, r5
    bcb4:	33f1      	adds	r3, #241	; 0xf1
    bcb6:	7818      	ldrb	r0, [r3, #0]
    bcb8:	47a0      	blx	r4
    bcba:	002b      	movs	r3, r5
    bcbc:	33ef      	adds	r3, #239	; 0xef
    bcbe:	7818      	ldrb	r0, [r3, #0]
    bcc0:	47a0      	blx	r4
    bcc2:	002b      	movs	r3, r5
    bcc4:	33f2      	adds	r3, #242	; 0xf2
    bcc6:	7818      	ldrb	r0, [r3, #0]
    bcc8:	47a0      	blx	r4
    bcca:	002b      	movs	r3, r5
    bccc:	33fb      	adds	r3, #251	; 0xfb
    bcce:	7818      	ldrb	r0, [r3, #0]
    bcd0:	47a0      	blx	r4
    bcd2:	002b      	movs	r3, r5
    bcd4:	33fc      	adds	r3, #252	; 0xfc
    bcd6:	7818      	ldrb	r0, [r3, #0]
    bcd8:	47a0      	blx	r4
    bcda:	2394      	movs	r3, #148	; 0x94
    bcdc:	005b      	lsls	r3, r3, #1
    bcde:	5ce8      	ldrb	r0, [r5, r3]
    bce0:	47a0      	blx	r4
    bce2:	bd70      	pop	{r4, r5, r6, pc}
    bce4:	20001484 	.word	0x20001484
    bce8:	000097bd 	.word	0x000097bd

0000bcec <LorawanGetMaxPayloadSize>:
    bcec:	b513      	push	{r0, r1, r4, lr}
    bcee:	466b      	mov	r3, sp
    bcf0:	1ddc      	adds	r4, r3, #7
    bcf2:	2300      	movs	r3, #0
    bcf4:	0022      	movs	r2, r4
    bcf6:	7023      	strb	r3, [r4, #0]
    bcf8:	4903      	ldr	r1, [pc, #12]	; (bd08 <LorawanGetMaxPayloadSize+0x1c>)
    bcfa:	4b04      	ldr	r3, [pc, #16]	; (bd0c <LorawanGetMaxPayloadSize+0x20>)
    bcfc:	2005      	movs	r0, #5
    bcfe:	4798      	blx	r3
    bd00:	7820      	ldrb	r0, [r4, #0]
    bd02:	3808      	subs	r0, #8
    bd04:	b2c0      	uxtb	r0, r0
    bd06:	bd16      	pop	{r1, r2, r4, pc}
    bd08:	2000156b 	.word	0x2000156b
    bd0c:	00007ead 	.word	0x00007ead

0000bd10 <ConfigureRadio>:
    bd10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bd12:	0001      	movs	r1, r0
    bd14:	0005      	movs	r5, r0
    bd16:	4c11      	ldr	r4, [pc, #68]	; (bd5c <ConfigureRadio+0x4c>)
    bd18:	3109      	adds	r1, #9
    bd1a:	2009      	movs	r0, #9
    bd1c:	47a0      	blx	r4
    bd1e:	0029      	movs	r1, r5
    bd20:	2001      	movs	r0, #1
    bd22:	47a0      	blx	r4
    bd24:	1d29      	adds	r1, r5, #4
    bd26:	200a      	movs	r0, #10
    bd28:	47a0      	blx	r4
    bd2a:	7a6b      	ldrb	r3, [r5, #9]
    bd2c:	2b01      	cmp	r3, #1
    bd2e:	d10b      	bne.n	bd48 <ConfigureRadio+0x38>
    bd30:	0029      	movs	r1, r5
    bd32:	2016      	movs	r0, #22
    bd34:	310b      	adds	r1, #11
    bd36:	47a0      	blx	r4
    bd38:	0029      	movs	r1, r5
    bd3a:	2007      	movs	r0, #7
    bd3c:	310a      	adds	r1, #10
    bd3e:	47a0      	blx	r4
    bd40:	2000      	movs	r0, #0
    bd42:	4907      	ldr	r1, [pc, #28]	; (bd60 <ConfigureRadio+0x50>)
    bd44:	47a0      	blx	r4
    bd46:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    bd48:	466b      	mov	r3, sp
    bd4a:	1dd9      	adds	r1, r3, #7
    bd4c:	2303      	movs	r3, #3
    bd4e:	2013      	movs	r0, #19
    bd50:	700b      	strb	r3, [r1, #0]
    bd52:	47a0      	blx	r4
    bd54:	4903      	ldr	r1, [pc, #12]	; (bd64 <ConfigureRadio+0x54>)
    bd56:	2012      	movs	r0, #18
    bd58:	e7f4      	b.n	bd44 <ConfigureRadio+0x34>
    bd5a:	46c0      	nop			; (mov r8, r8)
    bd5c:	0000d665 	.word	0x0000d665
    bd60:	20001584 	.word	0x20001584
    bd64:	00017510 	.word	0x00017510

0000bd68 <LORAWAN_Init>:
    bd68:	2270      	movs	r2, #112	; 0x70
    bd6a:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd6c:	4b52      	ldr	r3, [pc, #328]	; (beb8 <LORAWAN_Init+0x150>)
    bd6e:	b087      	sub	sp, #28
    bd70:	781b      	ldrb	r3, [r3, #0]
    bd72:	0006      	movs	r6, r0
    bd74:	011b      	lsls	r3, r3, #4
    bd76:	4013      	ands	r3, r2
    bd78:	4a50      	ldr	r2, [pc, #320]	; (bebc <LORAWAN_Init+0x154>)
    bd7a:	000f      	movs	r7, r1
    bd7c:	7812      	ldrb	r2, [r2, #0]
    bd7e:	0912      	lsrs	r2, r2, #4
    bd80:	4313      	orrs	r3, r2
    bd82:	2b1f      	cmp	r3, #31
    bd84:	d000      	beq.n	bd88 <LORAWAN_Init+0x20>
    bd86:	e7fe      	b.n	bd86 <LORAWAN_Init+0x1e>
    bd88:	4d4d      	ldr	r5, [pc, #308]	; (bec0 <LORAWAN_Init+0x158>)
    bd8a:	002b      	movs	r3, r5
    bd8c:	33f8      	adds	r3, #248	; 0xf8
    bd8e:	781b      	ldrb	r3, [r3, #0]
    bd90:	2b00      	cmp	r3, #0
    bd92:	d000      	beq.n	bd96 <LORAWAN_Init+0x2e>
    bd94:	e08c      	b.n	beb0 <LORAWAN_Init+0x148>
    bd96:	484b      	ldr	r0, [pc, #300]	; (bec4 <LORAWAN_Init+0x15c>)
    bd98:	4c4b      	ldr	r4, [pc, #300]	; (bec8 <LORAWAN_Init+0x160>)
    bd9a:	47a0      	blx	r4
    bd9c:	2808      	cmp	r0, #8
    bd9e:	d050      	beq.n	be42 <LORAWAN_Init+0xda>
    bda0:	4b4a      	ldr	r3, [pc, #296]	; (becc <LORAWAN_Init+0x164>)
    bda2:	4798      	blx	r3
    bda4:	002b      	movs	r3, r5
    bda6:	33f8      	adds	r3, #248	; 0xf8
    bda8:	781b      	ldrb	r3, [r3, #0]
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d018      	beq.n	bde0 <LORAWAN_Init+0x78>
    bdae:	4b48      	ldr	r3, [pc, #288]	; (bed0 <LORAWAN_Init+0x168>)
    bdb0:	0a32      	lsrs	r2, r6, #8
    bdb2:	705a      	strb	r2, [r3, #1]
    bdb4:	0c32      	lsrs	r2, r6, #16
    bdb6:	709a      	strb	r2, [r3, #2]
    bdb8:	0a3a      	lsrs	r2, r7, #8
    bdba:	701e      	strb	r6, [r3, #0]
    bdbc:	711f      	strb	r7, [r3, #4]
    bdbe:	715a      	strb	r2, [r3, #5]
    bdc0:	0e36      	lsrs	r6, r6, #24
    bdc2:	0c3a      	lsrs	r2, r7, #16
    bdc4:	0e3f      	lsrs	r7, r7, #24
    bdc6:	719a      	strb	r2, [r3, #6]
    bdc8:	70de      	strb	r6, [r3, #3]
    bdca:	71df      	strb	r7, [r3, #7]
    bdcc:	4b41      	ldr	r3, [pc, #260]	; (bed4 <LORAWAN_Init+0x16c>)
    bdce:	4798      	blx	r3
    bdd0:	4941      	ldr	r1, [pc, #260]	; (bed8 <LORAWAN_Init+0x170>)
    bdd2:	4b42      	ldr	r3, [pc, #264]	; (bedc <LORAWAN_Init+0x174>)
    bdd4:	201a      	movs	r0, #26
    bdd6:	4798      	blx	r3
    bdd8:	4b41      	ldr	r3, [pc, #260]	; (bee0 <LORAWAN_Init+0x178>)
    bdda:	4798      	blx	r3
    bddc:	4b41      	ldr	r3, [pc, #260]	; (bee4 <LORAWAN_Init+0x17c>)
    bdde:	4798      	blx	r3
    bde0:	2317      	movs	r3, #23
    bde2:	ac02      	add	r4, sp, #8
    bde4:	4a40      	ldr	r2, [pc, #256]	; (bee8 <LORAWAN_Init+0x180>)
    bde6:	7123      	strb	r3, [r4, #4]
    bde8:	4940      	ldr	r1, [pc, #256]	; (beec <LORAWAN_Init+0x184>)
    bdea:	4b41      	ldr	r3, [pc, #260]	; (bef0 <LORAWAN_Init+0x188>)
    bdec:	9205      	str	r2, [sp, #20]
    bdee:	9200      	str	r2, [sp, #0]
    bdf0:	4e40      	ldr	r6, [pc, #256]	; (bef4 <LORAWAN_Init+0x18c>)
    bdf2:	9a03      	ldr	r2, [sp, #12]
    bdf4:	2000      	movs	r0, #0
    bdf6:	9102      	str	r1, [sp, #8]
    bdf8:	9304      	str	r3, [sp, #16]
    bdfa:	47b0      	blx	r6
    bdfc:	2310      	movs	r3, #16
    bdfe:	4a3e      	ldr	r2, [pc, #248]	; (bef8 <LORAWAN_Init+0x190>)
    be00:	7123      	strb	r3, [r4, #4]
    be02:	4b3e      	ldr	r3, [pc, #248]	; (befc <LORAWAN_Init+0x194>)
    be04:	60e2      	str	r2, [r4, #12]
    be06:	60a3      	str	r3, [r4, #8]
    be08:	493d      	ldr	r1, [pc, #244]	; (bf00 <LORAWAN_Init+0x198>)
    be0a:	9200      	str	r2, [sp, #0]
    be0c:	6862      	ldr	r2, [r4, #4]
    be0e:	2001      	movs	r0, #1
    be10:	9102      	str	r1, [sp, #8]
    be12:	47b0      	blx	r6
    be14:	2201      	movs	r2, #1
    be16:	4252      	negs	r2, r2
    be18:	17d3      	asrs	r3, r2, #31
    be1a:	9202      	str	r2, [sp, #8]
    be1c:	9303      	str	r3, [sp, #12]
    be1e:	4b39      	ldr	r3, [pc, #228]	; (bf04 <LORAWAN_Init+0x19c>)
    be20:	0021      	movs	r1, r4
    be22:	5ce8      	ldrb	r0, [r5, r3]
    be24:	4b38      	ldr	r3, [pc, #224]	; (bf08 <LORAWAN_Init+0x1a0>)
    be26:	4798      	blx	r3
    be28:	238e      	movs	r3, #142	; 0x8e
    be2a:	22ff      	movs	r2, #255	; 0xff
    be2c:	009b      	lsls	r3, r3, #2
    be2e:	54ea      	strb	r2, [r5, r3]
    be30:	3a01      	subs	r2, #1
    be32:	3aff      	subs	r2, #255	; 0xff
    be34:	3b04      	subs	r3, #4
    be36:	50ea      	str	r2, [r5, r3]
    be38:	2200      	movs	r2, #0
    be3a:	3b04      	subs	r3, #4
    be3c:	54ea      	strb	r2, [r5, r3]
    be3e:	b007      	add	sp, #28
    be40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be42:	4832      	ldr	r0, [pc, #200]	; (bf0c <LORAWAN_Init+0x1a4>)
    be44:	47a0      	blx	r4
    be46:	2808      	cmp	r0, #8
    be48:	d1aa      	bne.n	bda0 <LORAWAN_Init+0x38>
    be4a:	4831      	ldr	r0, [pc, #196]	; (bf10 <LORAWAN_Init+0x1a8>)
    be4c:	47a0      	blx	r4
    be4e:	2808      	cmp	r0, #8
    be50:	d1a6      	bne.n	bda0 <LORAWAN_Init+0x38>
    be52:	4830      	ldr	r0, [pc, #192]	; (bf14 <LORAWAN_Init+0x1ac>)
    be54:	47a0      	blx	r4
    be56:	2808      	cmp	r0, #8
    be58:	d1a2      	bne.n	bda0 <LORAWAN_Init+0x38>
    be5a:	482f      	ldr	r0, [pc, #188]	; (bf18 <LORAWAN_Init+0x1b0>)
    be5c:	47a0      	blx	r4
    be5e:	2808      	cmp	r0, #8
    be60:	d19e      	bne.n	bda0 <LORAWAN_Init+0x38>
    be62:	482e      	ldr	r0, [pc, #184]	; (bf1c <LORAWAN_Init+0x1b4>)
    be64:	47a0      	blx	r4
    be66:	2808      	cmp	r0, #8
    be68:	d19a      	bne.n	bda0 <LORAWAN_Init+0x38>
    be6a:	482d      	ldr	r0, [pc, #180]	; (bf20 <LORAWAN_Init+0x1b8>)
    be6c:	47a0      	blx	r4
    be6e:	2808      	cmp	r0, #8
    be70:	d196      	bne.n	bda0 <LORAWAN_Init+0x38>
    be72:	482c      	ldr	r0, [pc, #176]	; (bf24 <LORAWAN_Init+0x1bc>)
    be74:	47a0      	blx	r4
    be76:	2808      	cmp	r0, #8
    be78:	d000      	beq.n	be7c <LORAWAN_Init+0x114>
    be7a:	e791      	b.n	bda0 <LORAWAN_Init+0x38>
    be7c:	482a      	ldr	r0, [pc, #168]	; (bf28 <LORAWAN_Init+0x1c0>)
    be7e:	47a0      	blx	r4
    be80:	2808      	cmp	r0, #8
    be82:	d000      	beq.n	be86 <LORAWAN_Init+0x11e>
    be84:	e78c      	b.n	bda0 <LORAWAN_Init+0x38>
    be86:	4829      	ldr	r0, [pc, #164]	; (bf2c <LORAWAN_Init+0x1c4>)
    be88:	47a0      	blx	r4
    be8a:	2808      	cmp	r0, #8
    be8c:	d000      	beq.n	be90 <LORAWAN_Init+0x128>
    be8e:	e787      	b.n	bda0 <LORAWAN_Init+0x38>
    be90:	4827      	ldr	r0, [pc, #156]	; (bf30 <LORAWAN_Init+0x1c8>)
    be92:	47a0      	blx	r4
    be94:	2808      	cmp	r0, #8
    be96:	d000      	beq.n	be9a <LORAWAN_Init+0x132>
    be98:	e782      	b.n	bda0 <LORAWAN_Init+0x38>
    be9a:	4826      	ldr	r0, [pc, #152]	; (bf34 <LORAWAN_Init+0x1cc>)
    be9c:	4b26      	ldr	r3, [pc, #152]	; (bf38 <LORAWAN_Init+0x1d0>)
    be9e:	4798      	blx	r3
    bea0:	2808      	cmp	r0, #8
    bea2:	d000      	beq.n	bea6 <LORAWAN_Init+0x13e>
    bea4:	e77c      	b.n	bda0 <LORAWAN_Init+0x38>
    bea6:	002b      	movs	r3, r5
    bea8:	2201      	movs	r2, #1
    beaa:	33f8      	adds	r3, #248	; 0xf8
    beac:	701a      	strb	r2, [r3, #0]
    beae:	e779      	b.n	bda4 <LORAWAN_Init+0x3c>
    beb0:	4b22      	ldr	r3, [pc, #136]	; (bf3c <LORAWAN_Init+0x1d4>)
    beb2:	4798      	blx	r3
    beb4:	e776      	b.n	bda4 <LORAWAN_Init+0x3c>
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	41003fe8 	.word	0x41003fe8
    bebc:	41003fe4 	.word	0x41003fe4
    bec0:	20001484 	.word	0x20001484
    bec4:	2000156f 	.word	0x2000156f
    bec8:	00009565 	.word	0x00009565
    becc:	00009475 	.word	0x00009475
    bed0:	200017e0 	.word	0x200017e0
    bed4:	0000d861 	.word	0x0000d861
    bed8:	0000d085 	.word	0x0000d085
    bedc:	0000d665 	.word	0x0000d665
    bee0:	00009f29 	.word	0x00009f29
    bee4:	00011665 	.word	0x00011665
    bee8:	0000d4b5 	.word	0x0000d4b5
    beec:	2000146c 	.word	0x2000146c
    bef0:	00017528 	.word	0x00017528
    bef4:	000084d9 	.word	0x000084d9
    bef8:	0000d4b9 	.word	0x0000d4b9
    befc:	000175e0 	.word	0x000175e0
    bf00:	2000135c 	.word	0x2000135c
    bf04:	00000231 	.word	0x00000231
    bf08:	00009c71 	.word	0x00009c71
    bf0c:	20001570 	.word	0x20001570
    bf10:	20001571 	.word	0x20001571
    bf14:	20001572 	.word	0x20001572
    bf18:	20001574 	.word	0x20001574
    bf1c:	20001575 	.word	0x20001575
    bf20:	20001573 	.word	0x20001573
    bf24:	20001576 	.word	0x20001576
    bf28:	2000157f 	.word	0x2000157f
    bf2c:	20001580 	.word	0x20001580
    bf30:	200015ac 	.word	0x200015ac
    bf34:	200016b5 	.word	0x200016b5
    bf38:	00009be9 	.word	0x00009be9
    bf3c:	0000bc85 	.word	0x0000bc85

0000bf40 <UpdateRetransmissionAckTimeoutState>:
    bf40:	4b10      	ldr	r3, [pc, #64]	; (bf84 <UpdateRetransmissionAckTimeoutState+0x44>)
    bf42:	b513      	push	{r0, r1, r4, lr}
    bf44:	001a      	movs	r2, r3
    bf46:	32fd      	adds	r2, #253	; 0xfd
    bf48:	7812      	ldrb	r2, [r2, #0]
    bf4a:	2a01      	cmp	r2, #1
    bf4c:	d108      	bne.n	bf60 <UpdateRetransmissionAckTimeoutState+0x20>
    bf4e:	0018      	movs	r0, r3
    bf50:	210e      	movs	r1, #14
    bf52:	3084      	adds	r0, #132	; 0x84
    bf54:	7802      	ldrb	r2, [r0, #0]
    bf56:	438a      	bics	r2, r1
    bf58:	0011      	movs	r1, r2
    bf5a:	220c      	movs	r2, #12
    bf5c:	430a      	orrs	r2, r1
    bf5e:	7002      	strb	r2, [r0, #0]
    bf60:	001a      	movs	r2, r3
    bf62:	32da      	adds	r2, #218	; 0xda
    bf64:	8811      	ldrh	r1, [r2, #0]
    bf66:	4a08      	ldr	r2, [pc, #32]	; (bf88 <UpdateRetransmissionAckTimeoutState+0x48>)
    bf68:	4c08      	ldr	r4, [pc, #32]	; (bf8c <UpdateRetransmissionAckTimeoutState+0x4c>)
    bf6a:	5c9a      	ldrb	r2, [r3, r2]
    bf6c:	33f1      	adds	r3, #241	; 0xf1
    bf6e:	1a8a      	subs	r2, r1, r2
    bf70:	21fa      	movs	r1, #250	; 0xfa
    bf72:	0089      	lsls	r1, r1, #2
    bf74:	4351      	muls	r1, r2
    bf76:	2200      	movs	r2, #0
    bf78:	7818      	ldrb	r0, [r3, #0]
    bf7a:	9200      	str	r2, [sp, #0]
    bf7c:	4b04      	ldr	r3, [pc, #16]	; (bf90 <UpdateRetransmissionAckTimeoutState+0x50>)
    bf7e:	47a0      	blx	r4
    bf80:	bd13      	pop	{r0, r1, r4, pc}
    bf82:	46c0      	nop			; (mov r8, r8)
    bf84:	20001484 	.word	0x20001484
    bf88:	0000022b 	.word	0x0000022b
    bf8c:	000095bd 	.word	0x000095bd
    bf90:	0000d1dd 	.word	0x0000d1dd

0000bf94 <ResetParametersForConfirmedTransmission>:
    bf94:	4b0a      	ldr	r3, [pc, #40]	; (bfc0 <ResetParametersForConfirmedTransmission+0x2c>)
    bf96:	001a      	movs	r2, r3
    bf98:	32fd      	adds	r2, #253	; 0xfd
    bf9a:	7812      	ldrb	r2, [r2, #0]
    bf9c:	2a01      	cmp	r2, #1
    bf9e:	d105      	bne.n	bfac <ResetParametersForConfirmedTransmission+0x18>
    bfa0:	0019      	movs	r1, r3
    bfa2:	200e      	movs	r0, #14
    bfa4:	3184      	adds	r1, #132	; 0x84
    bfa6:	780a      	ldrb	r2, [r1, #0]
    bfa8:	4382      	bics	r2, r0
    bfaa:	700a      	strb	r2, [r1, #0]
    bfac:	001a      	movs	r2, r3
    bfae:	2100      	movs	r1, #0
    bfb0:	3394      	adds	r3, #148	; 0x94
    bfb2:	32e4      	adds	r2, #228	; 0xe4
    bfb4:	7011      	strb	r1, [r2, #0]
    bfb6:	781a      	ldrb	r2, [r3, #0]
    bfb8:	3101      	adds	r1, #1
    bfba:	438a      	bics	r2, r1
    bfbc:	701a      	strb	r2, [r3, #0]
    bfbe:	4770      	bx	lr
    bfc0:	20001484 	.word	0x20001484

0000bfc4 <ResetParametersForUnconfirmedTransmission>:
    bfc4:	4b07      	ldr	r3, [pc, #28]	; (bfe4 <ResetParametersForUnconfirmedTransmission+0x20>)
    bfc6:	001a      	movs	r2, r3
    bfc8:	32fd      	adds	r2, #253	; 0xfd
    bfca:	7812      	ldrb	r2, [r2, #0]
    bfcc:	2a01      	cmp	r2, #1
    bfce:	d105      	bne.n	bfdc <ResetParametersForUnconfirmedTransmission+0x18>
    bfd0:	0019      	movs	r1, r3
    bfd2:	200e      	movs	r0, #14
    bfd4:	3184      	adds	r1, #132	; 0x84
    bfd6:	780a      	ldrb	r2, [r1, #0]
    bfd8:	4382      	bics	r2, r0
    bfda:	700a      	strb	r2, [r1, #0]
    bfdc:	2200      	movs	r2, #0
    bfde:	33e3      	adds	r3, #227	; 0xe3
    bfe0:	701a      	strb	r2, [r3, #0]
    bfe2:	4770      	bx	lr
    bfe4:	20001484 	.word	0x20001484

0000bfe8 <SetJoinFailState>:
    bfe8:	b570      	push	{r4, r5, r6, lr}
    bfea:	4c15      	ldr	r4, [pc, #84]	; (c040 <SetJoinFailState+0x58>)
    bfec:	2604      	movs	r6, #4
    bfee:	0025      	movs	r5, r4
    bff0:	3594      	adds	r5, #148	; 0x94
    bff2:	782a      	ldrb	r2, [r5, #0]
    bff4:	0021      	movs	r1, r4
    bff6:	43b2      	bics	r2, r6
    bff8:	702a      	strb	r2, [r5, #0]
    bffa:	22f0      	movs	r2, #240	; 0xf0
    bffc:	3184      	adds	r1, #132	; 0x84
    bffe:	780b      	ldrb	r3, [r1, #0]
    c000:	4013      	ands	r3, r2
    c002:	700b      	strb	r3, [r1, #0]
    c004:	0023      	movs	r3, r4
    c006:	33ff      	adds	r3, #255	; 0xff
    c008:	7f5b      	ldrb	r3, [r3, #29]
    c00a:	069b      	lsls	r3, r3, #26
    c00c:	d503      	bpl.n	c016 <SetJoinFailState+0x2e>
    c00e:	0023      	movs	r3, r4
    c010:	2200      	movs	r2, #0
    c012:	3380      	adds	r3, #128	; 0x80
    c014:	701a      	strb	r2, [r3, #0]
    c016:	490b      	ldr	r1, [pc, #44]	; (c044 <SetJoinFailState+0x5c>)
    c018:	794a      	ldrb	r2, [r1, #5]
    c01a:	790b      	ldrb	r3, [r1, #4]
    c01c:	0212      	lsls	r2, r2, #8
    c01e:	431a      	orrs	r2, r3
    c020:	798b      	ldrb	r3, [r1, #6]
    c022:	041b      	lsls	r3, r3, #16
    c024:	431a      	orrs	r2, r3
    c026:	79cb      	ldrb	r3, [r1, #7]
    c028:	061b      	lsls	r3, r3, #24
    c02a:	4313      	orrs	r3, r2
    c02c:	d000      	beq.n	c030 <SetJoinFailState+0x48>
    c02e:	4798      	blx	r3
    c030:	2300      	movs	r3, #0
    c032:	34f9      	adds	r4, #249	; 0xf9
    c034:	7023      	strb	r3, [r4, #0]
    c036:	210b      	movs	r1, #11
    c038:	4b03      	ldr	r3, [pc, #12]	; (c048 <SetJoinFailState+0x60>)
    c03a:	2001      	movs	r0, #1
    c03c:	4798      	blx	r3
    c03e:	bd70      	pop	{r4, r5, r6, pc}
    c040:	20001484 	.word	0x20001484
    c044:	200017e0 	.word	0x200017e0
    c048:	00008045 	.word	0x00008045

0000c04c <ConfigureRadioRx>:
    c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c04e:	b087      	sub	sp, #28
    c050:	466b      	mov	r3, sp
    c052:	2600      	movs	r6, #0
    c054:	1ddc      	adds	r4, r3, #7
    c056:	71d8      	strb	r0, [r3, #7]
    c058:	729e      	strb	r6, [r3, #10]
    c05a:	466a      	mov	r2, sp
    c05c:	2301      	movs	r3, #1
    c05e:	72d3      	strb	r3, [r2, #11]
    c060:	2215      	movs	r2, #21
    c062:	ad03      	add	r5, sp, #12
    c064:	4f11      	ldr	r7, [pc, #68]	; (c0ac <ConfigureRadioRx+0x60>)
    c066:	9100      	str	r1, [sp, #0]
    c068:	446a      	add	r2, sp
    c06a:	0021      	movs	r1, r4
    c06c:	2023      	movs	r0, #35	; 0x23
    c06e:	80ae      	strh	r6, [r5, #4]
    c070:	47b8      	blx	r7
    c072:	2216      	movs	r2, #22
    c074:	0021      	movs	r1, r4
    c076:	446a      	add	r2, sp
    c078:	2024      	movs	r0, #36	; 0x24
    c07a:	47b8      	blx	r7
    c07c:	2217      	movs	r2, #23
    c07e:	0021      	movs	r1, r4
    c080:	446a      	add	r2, sp
    c082:	2025      	movs	r0, #37	; 0x25
    c084:	47b8      	blx	r7
    c086:	9b00      	ldr	r3, [sp, #0]
    c088:	0028      	movs	r0, r5
    c08a:	9303      	str	r3, [sp, #12]
    c08c:	4b08      	ldr	r3, [pc, #32]	; (c0b0 <ConfigureRadioRx+0x64>)
    c08e:	80ae      	strh	r6, [r5, #4]
    c090:	4798      	blx	r3
    c092:	230a      	movs	r3, #10
    c094:	446b      	add	r3, sp
    c096:	0019      	movs	r1, r3
    c098:	4c06      	ldr	r4, [pc, #24]	; (c0b4 <ConfigureRadioRx+0x68>)
    c09a:	2014      	movs	r0, #20
    c09c:	47a0      	blx	r4
    c09e:	230b      	movs	r3, #11
    c0a0:	446b      	add	r3, sp
    c0a2:	0019      	movs	r1, r3
    c0a4:	2006      	movs	r0, #6
    c0a6:	47a0      	blx	r4
    c0a8:	b007      	add	sp, #28
    c0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0ac:	00007ead 	.word	0x00007ead
    c0b0:	0000bd11 	.word	0x0000bd11
    c0b4:	0000d665 	.word	0x0000d665

0000c0b8 <LorawanReceiveWindow1Callback>:
    c0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c0ba:	4c1a      	ldr	r4, [pc, #104]	; (c124 <LorawanReceiveWindow1Callback+0x6c>)
    c0bc:	0023      	movs	r3, r4
    c0be:	3384      	adds	r3, #132	; 0x84
    c0c0:	781b      	ldrb	r3, [r3, #0]
    c0c2:	b25a      	sxtb	r2, r3
    c0c4:	2a00      	cmp	r2, #0
    c0c6:	db2c      	blt.n	c122 <LorawanReceiveWindow1Callback+0x6a>
    c0c8:	0022      	movs	r2, r4
    c0ca:	32fd      	adds	r2, #253	; 0xfd
    c0cc:	7812      	ldrb	r2, [r2, #0]
    c0ce:	2a04      	cmp	r2, #4
    c0d0:	d107      	bne.n	c0e2 <LorawanReceiveWindow1Callback+0x2a>
    c0d2:	07db      	lsls	r3, r3, #31
    c0d4:	d505      	bpl.n	c0e2 <LorawanReceiveWindow1Callback+0x2a>
    c0d6:	2390      	movs	r3, #144	; 0x90
    c0d8:	2200      	movs	r2, #0
    c0da:	009b      	lsls	r3, r3, #2
    c0dc:	54e2      	strb	r2, [r4, r3]
    c0de:	4b12      	ldr	r3, [pc, #72]	; (c128 <LorawanReceiveWindow1Callback+0x70>)
    c0e0:	4798      	blx	r3
    c0e2:	0021      	movs	r1, r4
    c0e4:	220e      	movs	r2, #14
    c0e6:	3184      	adds	r1, #132	; 0x84
    c0e8:	780b      	ldrb	r3, [r1, #0]
    c0ea:	ad01      	add	r5, sp, #4
    c0ec:	4393      	bics	r3, r2
    c0ee:	001a      	movs	r2, r3
    c0f0:	2306      	movs	r3, #6
    c0f2:	4313      	orrs	r3, r2
    c0f4:	0022      	movs	r2, r4
    c0f6:	700b      	strb	r3, [r1, #0]
    c0f8:	3268      	adds	r2, #104	; 0x68
    c0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c0fc:	7811      	ldrb	r1, [r2, #0]
    c0fe:	0a1b      	lsrs	r3, r3, #8
    c100:	3469      	adds	r4, #105	; 0x69
    c102:	0609      	lsls	r1, r1, #24
    c104:	4319      	orrs	r1, r3
    c106:	7820      	ldrb	r0, [r4, #0]
    c108:	4b08      	ldr	r3, [pc, #32]	; (c12c <LorawanReceiveWindow1Callback+0x74>)
    c10a:	4798      	blx	r3
    c10c:	2300      	movs	r3, #0
    c10e:	702b      	strb	r3, [r5, #0]
    c110:	466b      	mov	r3, sp
    c112:	0021      	movs	r1, r4
    c114:	1d9a      	adds	r2, r3, #6
    c116:	2003      	movs	r0, #3
    c118:	4b05      	ldr	r3, [pc, #20]	; (c130 <LorawanReceiveWindow1Callback+0x78>)
    c11a:	4798      	blx	r3
    c11c:	0028      	movs	r0, r5
    c11e:	4b05      	ldr	r3, [pc, #20]	; (c134 <LorawanReceiveWindow1Callback+0x7c>)
    c120:	4798      	blx	r3
    c122:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    c124:	20001484 	.word	0x20001484
    c128:	0000d3dd 	.word	0x0000d3dd
    c12c:	0000c04d 	.word	0x0000c04d
    c130:	00007ead 	.word	0x00007ead
    c134:	0000e2bd 	.word	0x0000e2bd

0000c138 <ConfigureRadioTx>:
    c138:	b5f0      	push	{r4, r5, r6, r7, lr}
    c13a:	2517      	movs	r5, #23
    c13c:	2300      	movs	r3, #0
    c13e:	2616      	movs	r6, #22
    c140:	2701      	movs	r7, #1
    c142:	b087      	sub	sp, #28
    c144:	ac01      	add	r4, sp, #4
    c146:	446d      	add	r5, sp
    c148:	9001      	str	r0, [sp, #4]
    c14a:	702b      	strb	r3, [r5, #0]
    c14c:	0020      	movs	r0, r4
    c14e:	4b10      	ldr	r3, [pc, #64]	; (c190 <ConfigureRadioTx+0x58>)
    c150:	446e      	add	r6, sp
    c152:	9102      	str	r1, [sp, #8]
    c154:	9203      	str	r2, [sp, #12]
    c156:	7037      	strb	r7, [r6, #0]
    c158:	4798      	blx	r3
    c15a:	79e3      	ldrb	r3, [r4, #7]
    c15c:	4c0d      	ldr	r4, [pc, #52]	; (c194 <ConfigureRadioTx+0x5c>)
    c15e:	2b00      	cmp	r3, #0
    c160:	d00a      	beq.n	c178 <ConfigureRadioTx+0x40>
    c162:	4b0d      	ldr	r3, [pc, #52]	; (c198 <ConfigureRadioTx+0x60>)
    c164:	4a0d      	ldr	r2, [pc, #52]	; (c19c <ConfigureRadioTx+0x64>)
    c166:	490e      	ldr	r1, [pc, #56]	; (c1a0 <ConfigureRadioTx+0x68>)
    c168:	54d7      	strb	r7, [r2, r3]
    c16a:	200b      	movs	r0, #11
    c16c:	4b0d      	ldr	r3, [pc, #52]	; (c1a4 <ConfigureRadioTx+0x6c>)
    c16e:	4798      	blx	r3
    c170:	210a      	movs	r1, #10
    c172:	200b      	movs	r0, #11
    c174:	4469      	add	r1, sp
    c176:	47a0      	blx	r4
    c178:	a903      	add	r1, sp, #12
    c17a:	2004      	movs	r0, #4
    c17c:	47a0      	blx	r4
    c17e:	0031      	movs	r1, r6
    c180:	2014      	movs	r0, #20
    c182:	47a0      	blx	r4
    c184:	0029      	movs	r1, r5
    c186:	2006      	movs	r0, #6
    c188:	47a0      	blx	r4
    c18a:	b007      	add	sp, #28
    c18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	0000bd11 	.word	0x0000bd11
    c194:	0000d665 	.word	0x0000d665
    c198:	00000222 	.word	0x00000222
    c19c:	20001484 	.word	0x20001484
    c1a0:	200016a5 	.word	0x200016a5
    c1a4:	0000d575 	.word	0x0000d575

0000c1a8 <LorawanGetChAndInitiateRadioTransmit>:
    c1a8:	2301      	movs	r3, #1
    c1aa:	b530      	push	{r4, r5, lr}
    c1ac:	4c46      	ldr	r4, [pc, #280]	; (c2c8 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    c1ae:	b089      	sub	sp, #36	; 0x24
    c1b0:	a902      	add	r1, sp, #8
    c1b2:	700b      	strb	r3, [r1, #0]
    c1b4:	0023      	movs	r3, r4
    c1b6:	33e9      	adds	r3, #233	; 0xe9
    c1b8:	781b      	ldrb	r3, [r3, #0]
    c1ba:	704b      	strb	r3, [r1, #1]
    c1bc:	0023      	movs	r3, r4
    c1be:	33e7      	adds	r3, #231	; 0xe7
    c1c0:	781b      	ldrb	r3, [r3, #0]
    c1c2:	708b      	strb	r3, [r1, #2]
    c1c4:	0023      	movs	r3, r4
    c1c6:	33fd      	adds	r3, #253	; 0xfd
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	2b01      	cmp	r3, #1
    c1cc:	d108      	bne.n	c1e0 <LorawanGetChAndInitiateRadioTransmit+0x38>
    c1ce:	0020      	movs	r0, r4
    c1d0:	220e      	movs	r2, #14
    c1d2:	3084      	adds	r0, #132	; 0x84
    c1d4:	7803      	ldrb	r3, [r0, #0]
    c1d6:	4393      	bics	r3, r2
    c1d8:	001a      	movs	r2, r3
    c1da:	230c      	movs	r3, #12
    c1dc:	4313      	orrs	r3, r2
    c1de:	7003      	strb	r3, [r0, #0]
    c1e0:	aa05      	add	r2, sp, #20
    c1e2:	202e      	movs	r0, #46	; 0x2e
    c1e4:	4d39      	ldr	r5, [pc, #228]	; (c2cc <LorawanGetChAndInitiateRadioTransmit+0x124>)
    c1e6:	47a8      	blx	r5
    c1e8:	0023      	movs	r3, r4
    c1ea:	2808      	cmp	r0, #8
    c1ec:	d135      	bne.n	c25a <LorawanGetChAndInitiateRadioTransmit+0xb2>
    c1ee:	33fd      	adds	r3, #253	; 0xfd
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	ad03      	add	r5, sp, #12
    c1f4:	2b04      	cmp	r3, #4
    c1f6:	d108      	bne.n	c20a <LorawanGetChAndInitiateRadioTransmit+0x62>
    c1f8:	2390      	movs	r3, #144	; 0x90
    c1fa:	2200      	movs	r2, #0
    c1fc:	009b      	lsls	r3, r3, #2
    c1fe:	54e2      	strb	r2, [r4, r3]
    c200:	2301      	movs	r3, #1
    c202:	0028      	movs	r0, r5
    c204:	702b      	strb	r3, [r5, #0]
    c206:	4b32      	ldr	r3, [pc, #200]	; (c2d0 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    c208:	4798      	blx	r3
    c20a:	9805      	ldr	r0, [sp, #20]
    c20c:	4b31      	ldr	r3, [pc, #196]	; (c2d4 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    c20e:	9906      	ldr	r1, [sp, #24]
    c210:	9a07      	ldr	r2, [sp, #28]
    c212:	4798      	blx	r3
    c214:	0023      	movs	r3, r4
    c216:	33ce      	adds	r3, #206	; 0xce
    c218:	881b      	ldrh	r3, [r3, #0]
    c21a:	0028      	movs	r0, r5
    c21c:	702b      	strb	r3, [r5, #0]
    c21e:	4b2e      	ldr	r3, [pc, #184]	; (c2d8 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    c220:	606b      	str	r3, [r5, #4]
    c222:	4b2e      	ldr	r3, [pc, #184]	; (c2dc <LorawanGetChAndInitiateRadioTransmit+0x134>)
    c224:	4798      	blx	r3
    c226:	2800      	cmp	r0, #0
    c228:	d109      	bne.n	c23e <LorawanGetChAndInitiateRadioTransmit+0x96>
    c22a:	220e      	movs	r2, #14
    c22c:	3484      	adds	r4, #132	; 0x84
    c22e:	7823      	ldrb	r3, [r4, #0]
    c230:	4393      	bics	r3, r2
    c232:	001a      	movs	r2, r3
    c234:	2302      	movs	r3, #2
    c236:	4313      	orrs	r3, r2
    c238:	7023      	strb	r3, [r4, #0]
    c23a:	b009      	add	sp, #36	; 0x24
    c23c:	bd30      	pop	{r4, r5, pc}
    c23e:	2200      	movs	r2, #0
    c240:	4b27      	ldr	r3, [pc, #156]	; (c2e0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c242:	4928      	ldr	r1, [pc, #160]	; (c2e4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c244:	5ce3      	ldrb	r3, [r4, r3]
    c246:	34fc      	adds	r4, #252	; 0xfc
    c248:	4359      	muls	r1, r3
    c24a:	4b27      	ldr	r3, [pc, #156]	; (c2e8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    c24c:	7820      	ldrb	r0, [r4, #0]
    c24e:	18c9      	adds	r1, r1, r3
    c250:	4b26      	ldr	r3, [pc, #152]	; (c2ec <LorawanGetChAndInitiateRadioTransmit+0x144>)
    c252:	9200      	str	r2, [sp, #0]
    c254:	4c26      	ldr	r4, [pc, #152]	; (c2f0 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    c256:	47a0      	blx	r4
    c258:	e7ef      	b.n	c23a <LorawanGetChAndInitiateRadioTransmit+0x92>
    c25a:	33ff      	adds	r3, #255	; 0xff
    c25c:	7f5b      	ldrb	r3, [r3, #29]
    c25e:	079a      	lsls	r2, r3, #30
    c260:	d515      	bpl.n	c28e <LorawanGetChAndInitiateRadioTransmit+0xe6>
    c262:	aa03      	add	r2, sp, #12
    c264:	4923      	ldr	r1, [pc, #140]	; (c2f4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    c266:	2026      	movs	r0, #38	; 0x26
    c268:	47a8      	blx	r5
    c26a:	9b03      	ldr	r3, [sp, #12]
    c26c:	1c5a      	adds	r2, r3, #1
    c26e:	d001      	beq.n	c274 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    c270:	3314      	adds	r3, #20
    c272:	9303      	str	r3, [sp, #12]
    c274:	21fa      	movs	r1, #250	; 0xfa
    c276:	4b1a      	ldr	r3, [pc, #104]	; (c2e0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c278:	9a03      	ldr	r2, [sp, #12]
    c27a:	5ce3      	ldrb	r3, [r4, r3]
    c27c:	0089      	lsls	r1, r1, #2
    c27e:	1ad3      	subs	r3, r2, r3
    c280:	2200      	movs	r2, #0
    c282:	4359      	muls	r1, r3
    c284:	34f2      	adds	r4, #242	; 0xf2
    c286:	7820      	ldrb	r0, [r4, #0]
    c288:	9200      	str	r2, [sp, #0]
    c28a:	4b1b      	ldr	r3, [pc, #108]	; (c2f8 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    c28c:	e7e2      	b.n	c254 <LorawanGetChAndInitiateRadioTransmit+0xac>
    c28e:	075b      	lsls	r3, r3, #29
    c290:	d508      	bpl.n	c2a4 <LorawanGetChAndInitiateRadioTransmit+0xfc>
    c292:	aa03      	add	r2, sp, #12
    c294:	4917      	ldr	r1, [pc, #92]	; (c2f4 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    c296:	2032      	movs	r0, #50	; 0x32
    c298:	47a8      	blx	r5
    c29a:	9b03      	ldr	r3, [sp, #12]
    c29c:	1c5a      	adds	r2, r3, #1
    c29e:	d0e9      	beq.n	c274 <LorawanGetChAndInitiateRadioTransmit+0xcc>
    c2a0:	3301      	adds	r3, #1
    c2a2:	e7e6      	b.n	c272 <LorawanGetChAndInitiateRadioTransmit+0xca>
    c2a4:	0023      	movs	r3, r4
    c2a6:	2201      	movs	r2, #1
    c2a8:	3394      	adds	r3, #148	; 0x94
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	401a      	ands	r2, r3
    c2ae:	d108      	bne.n	c2c2 <LorawanGetChAndInitiateRadioTransmit+0x11a>
    c2b0:	4b0b      	ldr	r3, [pc, #44]	; (c2e0 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    c2b2:	490c      	ldr	r1, [pc, #48]	; (c2e4 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    c2b4:	5ce3      	ldrb	r3, [r4, r3]
    c2b6:	34f2      	adds	r4, #242	; 0xf2
    c2b8:	4359      	muls	r1, r3
    c2ba:	4b0b      	ldr	r3, [pc, #44]	; (c2e8 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    c2bc:	7820      	ldrb	r0, [r4, #0]
    c2be:	18c9      	adds	r1, r1, r3
    c2c0:	e7e2      	b.n	c288 <LorawanGetChAndInitiateRadioTransmit+0xe0>
    c2c2:	4b0e      	ldr	r3, [pc, #56]	; (c2fc <LorawanGetChAndInitiateRadioTransmit+0x154>)
    c2c4:	4798      	blx	r3
    c2c6:	e7b8      	b.n	c23a <LorawanGetChAndInitiateRadioTransmit+0x92>
    c2c8:	20001484 	.word	0x20001484
    c2cc:	00007ead 	.word	0x00007ead
    c2d0:	0000e2bd 	.word	0x0000e2bd
    c2d4:	0000c139 	.word	0x0000c139
    c2d8:	200016dd 	.word	0x200016dd
    c2dc:	0000db75 	.word	0x0000db75
    c2e0:	0000022b 	.word	0x0000022b
    c2e4:	fffffc18 	.word	0xfffffc18
    c2e8:	001e8480 	.word	0x001e8480
    c2ec:	0000c301 	.word	0x0000c301
    c2f0:	000095bd 	.word	0x000095bd
    c2f4:	2000156b 	.word	0x2000156b
    c2f8:	0000c3b9 	.word	0x0000c3b9
    c2fc:	0000bf41 	.word	0x0000bf41

0000c300 <TransmissionErrorCallback>:
    c300:	b530      	push	{r4, r5, lr}
    c302:	4c22      	ldr	r4, [pc, #136]	; (c38c <TransmissionErrorCallback+0x8c>)
    c304:	2501      	movs	r5, #1
    c306:	0023      	movs	r3, r4
    c308:	b08b      	sub	sp, #44	; 0x2c
    c30a:	a903      	add	r1, sp, #12
    c30c:	700d      	strb	r5, [r1, #0]
    c30e:	33e9      	adds	r3, #233	; 0xe9
    c310:	781b      	ldrb	r3, [r3, #0]
    c312:	aa07      	add	r2, sp, #28
    c314:	704b      	strb	r3, [r1, #1]
    c316:	0023      	movs	r3, r4
    c318:	33e7      	adds	r3, #231	; 0xe7
    c31a:	781b      	ldrb	r3, [r3, #0]
    c31c:	202e      	movs	r0, #46	; 0x2e
    c31e:	708b      	strb	r3, [r1, #2]
    c320:	4b1b      	ldr	r3, [pc, #108]	; (c390 <TransmissionErrorCallback+0x90>)
    c322:	4798      	blx	r3
    c324:	2808      	cmp	r0, #8
    c326:	d121      	bne.n	c36c <TransmissionErrorCallback+0x6c>
    c328:	a804      	add	r0, sp, #16
    c32a:	4b1a      	ldr	r3, [pc, #104]	; (c394 <TransmissionErrorCallback+0x94>)
    c32c:	7005      	strb	r5, [r0, #0]
    c32e:	4798      	blx	r3
    c330:	9807      	ldr	r0, [sp, #28]
    c332:	4b19      	ldr	r3, [pc, #100]	; (c398 <TransmissionErrorCallback+0x98>)
    c334:	9908      	ldr	r1, [sp, #32]
    c336:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c338:	4798      	blx	r3
    c33a:	0023      	movs	r3, r4
    c33c:	33ce      	adds	r3, #206	; 0xce
    c33e:	881b      	ldrh	r3, [r3, #0]
    c340:	a805      	add	r0, sp, #20
    c342:	7003      	strb	r3, [r0, #0]
    c344:	4b15      	ldr	r3, [pc, #84]	; (c39c <TransmissionErrorCallback+0x9c>)
    c346:	6043      	str	r3, [r0, #4]
    c348:	4b15      	ldr	r3, [pc, #84]	; (c3a0 <TransmissionErrorCallback+0xa0>)
    c34a:	4798      	blx	r3
    c34c:	2800      	cmp	r0, #0
    c34e:	d01a      	beq.n	c386 <TransmissionErrorCallback+0x86>
    c350:	0023      	movs	r3, r4
    c352:	33fd      	adds	r3, #253	; 0xfd
    c354:	781b      	ldrb	r3, [r3, #0]
    c356:	42ab      	cmp	r3, r5
    c358:	d108      	bne.n	c36c <TransmissionErrorCallback+0x6c>
    c35a:	0021      	movs	r1, r4
    c35c:	220e      	movs	r2, #14
    c35e:	3184      	adds	r1, #132	; 0x84
    c360:	780b      	ldrb	r3, [r1, #0]
    c362:	4393      	bics	r3, r2
    c364:	001a      	movs	r2, r3
    c366:	230c      	movs	r3, #12
    c368:	4313      	orrs	r3, r2
    c36a:	700b      	strb	r3, [r1, #0]
    c36c:	2200      	movs	r2, #0
    c36e:	4b0d      	ldr	r3, [pc, #52]	; (c3a4 <TransmissionErrorCallback+0xa4>)
    c370:	490d      	ldr	r1, [pc, #52]	; (c3a8 <TransmissionErrorCallback+0xa8>)
    c372:	5ce3      	ldrb	r3, [r4, r3]
    c374:	34fc      	adds	r4, #252	; 0xfc
    c376:	4359      	muls	r1, r3
    c378:	4b0c      	ldr	r3, [pc, #48]	; (c3ac <TransmissionErrorCallback+0xac>)
    c37a:	7820      	ldrb	r0, [r4, #0]
    c37c:	18c9      	adds	r1, r1, r3
    c37e:	9200      	str	r2, [sp, #0]
    c380:	4b0b      	ldr	r3, [pc, #44]	; (c3b0 <TransmissionErrorCallback+0xb0>)
    c382:	4c0c      	ldr	r4, [pc, #48]	; (c3b4 <TransmissionErrorCallback+0xb4>)
    c384:	47a0      	blx	r4
    c386:	b00b      	add	sp, #44	; 0x2c
    c388:	bd30      	pop	{r4, r5, pc}
    c38a:	46c0      	nop			; (mov r8, r8)
    c38c:	20001484 	.word	0x20001484
    c390:	00007ead 	.word	0x00007ead
    c394:	0000e2bd 	.word	0x0000e2bd
    c398:	0000c139 	.word	0x0000c139
    c39c:	200016dd 	.word	0x200016dd
    c3a0:	0000db75 	.word	0x0000db75
    c3a4:	0000022b 	.word	0x0000022b
    c3a8:	fffffc18 	.word	0xfffffc18
    c3ac:	001e8480 	.word	0x001e8480
    c3b0:	0000c301 	.word	0x0000c301
    c3b4:	000095bd 	.word	0x000095bd

0000c3b8 <UnconfirmedTransmissionCallback>:
    c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3ba:	4c3a      	ldr	r4, [pc, #232]	; (c4a4 <UnconfirmedTransmissionCallback+0xec>)
    c3bc:	b08b      	sub	sp, #44	; 0x2c
    c3be:	0023      	movs	r3, r4
    c3c0:	33ce      	adds	r3, #206	; 0xce
    c3c2:	881b      	ldrh	r3, [r3, #0]
    c3c4:	af05      	add	r7, sp, #20
    c3c6:	703b      	strb	r3, [r7, #0]
    c3c8:	4b37      	ldr	r3, [pc, #220]	; (c4a8 <UnconfirmedTransmissionCallback+0xf0>)
    c3ca:	a903      	add	r1, sp, #12
    c3cc:	9306      	str	r3, [sp, #24]
    c3ce:	2301      	movs	r3, #1
    c3d0:	700b      	strb	r3, [r1, #0]
    c3d2:	0023      	movs	r3, r4
    c3d4:	0026      	movs	r6, r4
    c3d6:	33e9      	adds	r3, #233	; 0xe9
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	36e7      	adds	r6, #231	; 0xe7
    c3dc:	704b      	strb	r3, [r1, #1]
    c3de:	7833      	ldrb	r3, [r6, #0]
    c3e0:	aa07      	add	r2, sp, #28
    c3e2:	202e      	movs	r0, #46	; 0x2e
    c3e4:	4d31      	ldr	r5, [pc, #196]	; (c4ac <UnconfirmedTransmissionCallback+0xf4>)
    c3e6:	708b      	strb	r3, [r1, #2]
    c3e8:	47a8      	blx	r5
    c3ea:	2808      	cmp	r0, #8
    c3ec:	d12b      	bne.n	c446 <UnconfirmedTransmissionCallback+0x8e>
    c3ee:	2301      	movs	r3, #1
    c3f0:	a804      	add	r0, sp, #16
    c3f2:	7003      	strb	r3, [r0, #0]
    c3f4:	4b2e      	ldr	r3, [pc, #184]	; (c4b0 <UnconfirmedTransmissionCallback+0xf8>)
    c3f6:	4798      	blx	r3
    c3f8:	9807      	ldr	r0, [sp, #28]
    c3fa:	4b2e      	ldr	r3, [pc, #184]	; (c4b4 <UnconfirmedTransmissionCallback+0xfc>)
    c3fc:	9908      	ldr	r1, [sp, #32]
    c3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c400:	4798      	blx	r3
    c402:	0038      	movs	r0, r7
    c404:	4b2c      	ldr	r3, [pc, #176]	; (c4b8 <UnconfirmedTransmissionCallback+0x100>)
    c406:	4798      	blx	r3
    c408:	2800      	cmp	r0, #0
    c40a:	d01a      	beq.n	c442 <UnconfirmedTransmissionCallback+0x8a>
    c40c:	0023      	movs	r3, r4
    c40e:	33fd      	adds	r3, #253	; 0xfd
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	2b01      	cmp	r3, #1
    c414:	d108      	bne.n	c428 <UnconfirmedTransmissionCallback+0x70>
    c416:	0021      	movs	r1, r4
    c418:	220e      	movs	r2, #14
    c41a:	3184      	adds	r1, #132	; 0x84
    c41c:	780b      	ldrb	r3, [r1, #0]
    c41e:	4393      	bics	r3, r2
    c420:	001a      	movs	r2, r3
    c422:	230c      	movs	r3, #12
    c424:	4313      	orrs	r3, r2
    c426:	700b      	strb	r3, [r1, #0]
    c428:	2200      	movs	r2, #0
    c42a:	4b24      	ldr	r3, [pc, #144]	; (c4bc <UnconfirmedTransmissionCallback+0x104>)
    c42c:	4924      	ldr	r1, [pc, #144]	; (c4c0 <UnconfirmedTransmissionCallback+0x108>)
    c42e:	5ce3      	ldrb	r3, [r4, r3]
    c430:	34fc      	adds	r4, #252	; 0xfc
    c432:	4359      	muls	r1, r3
    c434:	4b23      	ldr	r3, [pc, #140]	; (c4c4 <UnconfirmedTransmissionCallback+0x10c>)
    c436:	7820      	ldrb	r0, [r4, #0]
    c438:	18c9      	adds	r1, r1, r3
    c43a:	4b23      	ldr	r3, [pc, #140]	; (c4c8 <UnconfirmedTransmissionCallback+0x110>)
    c43c:	9200      	str	r2, [sp, #0]
    c43e:	4c23      	ldr	r4, [pc, #140]	; (c4cc <UnconfirmedTransmissionCallback+0x114>)
    c440:	47a0      	blx	r4
    c442:	b00b      	add	sp, #44	; 0x2c
    c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c446:	4b22      	ldr	r3, [pc, #136]	; (c4d0 <UnconfirmedTransmissionCallback+0x118>)
    c448:	4798      	blx	r3
    c44a:	4b22      	ldr	r3, [pc, #136]	; (c4d4 <UnconfirmedTransmissionCallback+0x11c>)
    c44c:	4922      	ldr	r1, [pc, #136]	; (c4d8 <UnconfirmedTransmissionCallback+0x120>)
    c44e:	4798      	blx	r3
    c450:	23fa      	movs	r3, #250	; 0xfa
    c452:	009b      	lsls	r3, r3, #2
    c454:	18c9      	adds	r1, r1, r3
    c456:	0023      	movs	r3, r4
    c458:	9104      	str	r1, [sp, #16]
    c45a:	33ff      	adds	r3, #255	; 0xff
    c45c:	7f5b      	ldrb	r3, [r3, #29]
    c45e:	079a      	lsls	r2, r3, #30
    c460:	d515      	bpl.n	c48e <UnconfirmedTransmissionCallback+0xd6>
    c462:	aa04      	add	r2, sp, #16
    c464:	0031      	movs	r1, r6
    c466:	2026      	movs	r0, #38	; 0x26
    c468:	47a8      	blx	r5
    c46a:	9b04      	ldr	r3, [sp, #16]
    c46c:	1c5a      	adds	r2, r3, #1
    c46e:	d001      	beq.n	c474 <UnconfirmedTransmissionCallback+0xbc>
    c470:	3314      	adds	r3, #20
    c472:	9304      	str	r3, [sp, #16]
    c474:	4b11      	ldr	r3, [pc, #68]	; (c4bc <UnconfirmedTransmissionCallback+0x104>)
    c476:	9a04      	ldr	r2, [sp, #16]
    c478:	5ce3      	ldrb	r3, [r4, r3]
    c47a:	21fa      	movs	r1, #250	; 0xfa
    c47c:	1ad3      	subs	r3, r2, r3
    c47e:	2200      	movs	r2, #0
    c480:	0089      	lsls	r1, r1, #2
    c482:	34f2      	adds	r4, #242	; 0xf2
    c484:	4359      	muls	r1, r3
    c486:	7820      	ldrb	r0, [r4, #0]
    c488:	4b14      	ldr	r3, [pc, #80]	; (c4dc <UnconfirmedTransmissionCallback+0x124>)
    c48a:	9200      	str	r2, [sp, #0]
    c48c:	e7d7      	b.n	c43e <UnconfirmedTransmissionCallback+0x86>
    c48e:	075b      	lsls	r3, r3, #29
    c490:	d5f0      	bpl.n	c474 <UnconfirmedTransmissionCallback+0xbc>
    c492:	aa04      	add	r2, sp, #16
    c494:	0031      	movs	r1, r6
    c496:	2032      	movs	r0, #50	; 0x32
    c498:	47a8      	blx	r5
    c49a:	9b04      	ldr	r3, [sp, #16]
    c49c:	1c5a      	adds	r2, r3, #1
    c49e:	d0e9      	beq.n	c474 <UnconfirmedTransmissionCallback+0xbc>
    c4a0:	3301      	adds	r3, #1
    c4a2:	e7e6      	b.n	c472 <UnconfirmedTransmissionCallback+0xba>
    c4a4:	20001484 	.word	0x20001484
    c4a8:	200016dd 	.word	0x200016dd
    c4ac:	00007ead 	.word	0x00007ead
    c4b0:	0000e2bd 	.word	0x0000e2bd
    c4b4:	0000c139 	.word	0x0000c139
    c4b8:	0000db75 	.word	0x0000db75
    c4bc:	0000022b 	.word	0x0000022b
    c4c0:	fffffc18 	.word	0xfffffc18
    c4c4:	001e8480 	.word	0x001e8480
    c4c8:	0000c301 	.word	0x0000c301
    c4cc:	000095bd 	.word	0x000095bd
    c4d0:	00011679 	.word	0x00011679
    c4d4:	0000e681 	.word	0x0000e681
    c4d8:	000007d1 	.word	0x000007d1
    c4dc:	0000c3b9 	.word	0x0000c3b9

0000c4e0 <UpdateTransactionCompleteCbParams>:
    c4e0:	2388      	movs	r3, #136	; 0x88
    c4e2:	2201      	movs	r2, #1
    c4e4:	b570      	push	{r4, r5, r6, lr}
    c4e6:	0001      	movs	r1, r0
    c4e8:	4c13      	ldr	r4, [pc, #76]	; (c538 <UpdateTransactionCompleteCbParams+0x58>)
    c4ea:	4814      	ldr	r0, [pc, #80]	; (c53c <UpdateTransactionCompleteCbParams+0x5c>)
    c4ec:	009b      	lsls	r3, r3, #2
    c4ee:	54e2      	strb	r2, [r4, r3]
    c4f0:	7842      	ldrb	r2, [r0, #1]
    c4f2:	7803      	ldrb	r3, [r0, #0]
    c4f4:	0212      	lsls	r2, r2, #8
    c4f6:	431a      	orrs	r2, r3
    c4f8:	7883      	ldrb	r3, [r0, #2]
    c4fa:	041b      	lsls	r3, r3, #16
    c4fc:	431a      	orrs	r2, r3
    c4fe:	78c3      	ldrb	r3, [r0, #3]
    c500:	061b      	lsls	r3, r3, #24
    c502:	4313      	orrs	r3, r2
    c504:	d00e      	beq.n	c524 <UpdateTransactionCompleteCbParams+0x44>
    c506:	0022      	movs	r2, r4
    c508:	2504      	movs	r5, #4
    c50a:	32fc      	adds	r2, #252	; 0xfc
    c50c:	6890      	ldr	r0, [r2, #8]
    c50e:	4228      	tst	r0, r5
    c510:	d008      	beq.n	c524 <UpdateTransactionCompleteCbParams+0x44>
    c512:	68d0      	ldr	r0, [r2, #12]
    c514:	2800      	cmp	r0, #0
    c516:	d005      	beq.n	c524 <UpdateTransactionCompleteCbParams+0x44>
    c518:	0022      	movs	r2, r4
    c51a:	32ff      	adds	r2, #255	; 0xff
    c51c:	7451      	strb	r1, [r2, #17]
    c51e:	7355      	strb	r5, [r2, #13]
    c520:	4907      	ldr	r1, [pc, #28]	; (c540 <UpdateTransactionCompleteCbParams+0x60>)
    c522:	4798      	blx	r3
    c524:	2388      	movs	r3, #136	; 0x88
    c526:	009b      	lsls	r3, r3, #2
    c528:	5ce3      	ldrb	r3, [r4, r3]
    c52a:	2b00      	cmp	r3, #0
    c52c:	d002      	beq.n	c534 <UpdateTransactionCompleteCbParams+0x54>
    c52e:	2300      	movs	r3, #0
    c530:	34fc      	adds	r4, #252	; 0xfc
    c532:	60e3      	str	r3, [r4, #12]
    c534:	bd70      	pop	{r4, r5, r6, pc}
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	20001484 	.word	0x20001484
    c53c:	200017e0 	.word	0x200017e0
    c540:	20001590 	.word	0x20001590

0000c544 <LorawanGetReceiveWindow2Parameters>:
    c544:	4a06      	ldr	r2, [pc, #24]	; (c560 <LorawanGetReceiveWindow2Parameters+0x1c>)
    c546:	0013      	movs	r3, r2
    c548:	336e      	adds	r3, #110	; 0x6e
    c54a:	781b      	ldrb	r3, [r3, #0]
    c54c:	7103      	strb	r3, [r0, #4]
    c54e:	0013      	movs	r3, r2
    c550:	326c      	adds	r2, #108	; 0x6c
    c552:	336a      	adds	r3, #106	; 0x6a
    c554:	8819      	ldrh	r1, [r3, #0]
    c556:	8813      	ldrh	r3, [r2, #0]
    c558:	041b      	lsls	r3, r3, #16
    c55a:	430b      	orrs	r3, r1
    c55c:	6003      	str	r3, [r0, #0]
    c55e:	4770      	bx	lr
    c560:	20001484 	.word	0x20001484

0000c564 <LorawanGetReceiveWindowCParameters>:
    c564:	4a09      	ldr	r2, [pc, #36]	; (c58c <LorawanGetReceiveWindowCParameters+0x28>)
    c566:	0013      	movs	r3, r2
    c568:	3373      	adds	r3, #115	; 0x73
    c56a:	781b      	ldrb	r3, [r3, #0]
    c56c:	7103      	strb	r3, [r0, #4]
    c56e:	0013      	movs	r3, r2
    c570:	336f      	adds	r3, #111	; 0x6f
    c572:	7819      	ldrb	r1, [r3, #0]
    c574:	6f13      	ldr	r3, [r2, #112]	; 0x70
    c576:	021b      	lsls	r3, r3, #8
    c578:	430b      	orrs	r3, r1
    c57a:	0a1a      	lsrs	r2, r3, #8
    c57c:	7003      	strb	r3, [r0, #0]
    c57e:	7042      	strb	r2, [r0, #1]
    c580:	0c1a      	lsrs	r2, r3, #16
    c582:	0e1b      	lsrs	r3, r3, #24
    c584:	7082      	strb	r2, [r0, #2]
    c586:	70c3      	strb	r3, [r0, #3]
    c588:	4770      	bx	lr
    c58a:	46c0      	nop			; (mov r8, r8)
    c58c:	20001484 	.word	0x20001484

0000c590 <LORAWAN_GetAttr>:
    c590:	b5f0      	push	{r4, r5, r6, r7, lr}
    c592:	000b      	movs	r3, r1
    c594:	b093      	sub	sp, #76	; 0x4c
    c596:	0016      	movs	r6, r2
    c598:	2845      	cmp	r0, #69	; 0x45
    c59a:	d847      	bhi.n	c62c <LORAWAN_GetAttr+0x9c>
    c59c:	f001 fef6 	bl	e38c <__gnu_thumb1_case_uhi>
    c5a0:	00650049 	.word	0x00650049
    c5a4:	00790069 	.word	0x00790069
    c5a8:	00750071 	.word	0x00750071
    c5ac:	0082007d 	.word	0x0082007d
    c5b0:	00890086 	.word	0x00890086
    c5b4:	0092008e 	.word	0x0092008e
    c5b8:	009d0095 	.word	0x009d0095
    c5bc:	00a300a0 	.word	0x00a300a0
    c5c0:	00aa00a7 	.word	0x00aa00a7
    c5c4:	00b000ad 	.word	0x00b000ad
    c5c8:	00de00b3 	.word	0x00de00b3
    c5cc:	00b900e2 	.word	0x00b900e2
    c5d0:	00ee00b6 	.word	0x00ee00b6
    c5d4:	00d900e8 	.word	0x00d900e8
    c5d8:	00cd00d4 	.word	0x00cd00d4
    c5dc:	009a0046 	.word	0x009a0046
    c5e0:	00c900c5 	.word	0x00c900c5
    c5e4:	00bf00c2 	.word	0x00bf00c2
    c5e8:	00eb00e5 	.word	0x00eb00e5
    c5ec:	004f004f 	.word	0x004f004f
    c5f0:	00f70051 	.word	0x00f70051
    c5f4:	0115011e 	.word	0x0115011e
    c5f8:	012b0108 	.word	0x012b0108
    c5fc:	01450139 	.word	0x01450139
    c600:	015d0151 	.word	0x015d0151
    c604:	0046016a 	.word	0x0046016a
    c608:	017501a0 	.word	0x017501a0
    c60c:	017e0179 	.word	0x017e0179
    c610:	01880183 	.word	0x01880183
    c614:	018f018c 	.word	0x018f018c
    c618:	01950192 	.word	0x01950192
    c61c:	0046019d 	.word	0x0046019d
    c620:	00460046 	.word	0x00460046
    c624:	01a901a4 	.word	0x01a901a4
    c628:	02c601fc 	.word	0x02c601fc
    c62c:	200a      	movs	r0, #10
    c62e:	b013      	add	sp, #76	; 0x4c
    c630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c632:	2208      	movs	r2, #8
    c634:	49c8      	ldr	r1, [pc, #800]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c636:	315d      	adds	r1, #93	; 0x5d
    c638:	0030      	movs	r0, r6
    c63a:	4bc8      	ldr	r3, [pc, #800]	; (c95c <LORAWAN_GetAttr+0x3cc>)
    c63c:	4798      	blx	r3
    c63e:	2008      	movs	r0, #8
    c640:	e7f5      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c642:	ac0e      	add	r4, sp, #56	; 0x38
    c644:	0021      	movs	r1, r4
    c646:	4bc6      	ldr	r3, [pc, #792]	; (c960 <LORAWAN_GetAttr+0x3d0>)
    c648:	201d      	movs	r0, #29
    c64a:	4798      	blx	r3
    c64c:	4bc2      	ldr	r3, [pc, #776]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c64e:	a910      	add	r1, sp, #64	; 0x40
    c650:	33fe      	adds	r3, #254	; 0xfe
    c652:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
    c654:	2208      	movs	r2, #8
    c656:	808b      	strh	r3, [r1, #4]
    c658:	7923      	ldrb	r3, [r4, #4]
    c65a:	718b      	strb	r3, [r1, #6]
    c65c:	8823      	ldrh	r3, [r4, #0]
    c65e:	800b      	strh	r3, [r1, #0]
    c660:	8863      	ldrh	r3, [r4, #2]
    c662:	804b      	strh	r3, [r1, #2]
    c664:	7963      	ldrb	r3, [r4, #5]
    c666:	71cb      	strb	r3, [r1, #7]
    c668:	e7e6      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c66a:	49bb      	ldr	r1, [pc, #748]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c66c:	2208      	movs	r2, #8
    c66e:	3155      	adds	r1, #85	; 0x55
    c670:	e7e2      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c672:	4bb9      	ldr	r3, [pc, #740]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c674:	681a      	ldr	r2, [r3, #0]
    c676:	791b      	ldrb	r3, [r3, #4]
    c678:	0a12      	lsrs	r2, r2, #8
    c67a:	061b      	lsls	r3, r3, #24
    c67c:	4313      	orrs	r3, r2
    c67e:	6033      	str	r3, [r6, #0]
    c680:	e7dd      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c682:	49b5      	ldr	r1, [pc, #724]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c684:	2210      	movs	r2, #16
    c686:	3105      	adds	r1, #5
    c688:	e7d6      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c68a:	49b3      	ldr	r1, [pc, #716]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c68c:	2210      	movs	r2, #16
    c68e:	3115      	adds	r1, #21
    c690:	e7d2      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c692:	49b1      	ldr	r1, [pc, #708]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c694:	2210      	movs	r2, #16
    c696:	3145      	adds	r1, #69	; 0x45
    c698:	e7ce      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c69a:	4baf      	ldr	r3, [pc, #700]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c69c:	3384      	adds	r3, #132	; 0x84
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	069b      	lsls	r3, r3, #26
    c6a2:	e03a      	b.n	c71a <LORAWAN_GetAttr+0x18a>
    c6a4:	4bac      	ldr	r3, [pc, #688]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6a6:	33e7      	adds	r3, #231	; 0xe7
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	e005      	b.n	c6b8 <LORAWAN_GetAttr+0x128>
    c6ac:	4baa      	ldr	r3, [pc, #680]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6ae:	33e9      	adds	r3, #233	; 0xe9
    c6b0:	e7fa      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c6b2:	4ba9      	ldr	r3, [pc, #676]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6b4:	33ff      	adds	r3, #255	; 0xff
    c6b6:	785b      	ldrb	r3, [r3, #1]
    c6b8:	7033      	strb	r3, [r6, #0]
    c6ba:	e7c0      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c6bc:	4ba6      	ldr	r3, [pc, #664]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6be:	3388      	adds	r3, #136	; 0x88
    c6c0:	681b      	ldr	r3, [r3, #0]
    c6c2:	e7dc      	b.n	c67e <LORAWAN_GetAttr+0xee>
    c6c4:	4ba4      	ldr	r3, [pc, #656]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6c6:	338c      	adds	r3, #140	; 0x8c
    c6c8:	e7fa      	b.n	c6c0 <LORAWAN_GetAttr+0x130>
    c6ca:	4ba3      	ldr	r3, [pc, #652]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6cc:	33d0      	adds	r3, #208	; 0xd0
    c6ce:	881b      	ldrh	r3, [r3, #0]
    c6d0:	8033      	strh	r3, [r6, #0]
    c6d2:	e7b4      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c6d4:	4ba0      	ldr	r3, [pc, #640]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6d6:	33d2      	adds	r3, #210	; 0xd2
    c6d8:	e7f9      	b.n	c6ce <LORAWAN_GetAttr+0x13e>
    c6da:	4b9f      	ldr	r3, [pc, #636]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6dc:	33d4      	adds	r3, #212	; 0xd4
    c6de:	e7f6      	b.n	c6ce <LORAWAN_GetAttr+0x13e>
    c6e0:	4b9d      	ldr	r3, [pc, #628]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6e2:	33d6      	adds	r3, #214	; 0xd6
    c6e4:	e7f3      	b.n	c6ce <LORAWAN_GetAttr+0x13e>
    c6e6:	4b9c      	ldr	r3, [pc, #624]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6e8:	33d8      	adds	r3, #216	; 0xd8
    c6ea:	881b      	ldrh	r3, [r3, #0]
    c6ec:	e7e4      	b.n	c6b8 <LORAWAN_GetAttr+0x128>
    c6ee:	4b9a      	ldr	r3, [pc, #616]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6f0:	33dc      	adds	r3, #220	; 0xdc
    c6f2:	e7d9      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c6f4:	4b98      	ldr	r3, [pc, #608]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6f6:	33dd      	adds	r3, #221	; 0xdd
    c6f8:	e7d6      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c6fa:	4b97      	ldr	r3, [pc, #604]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c6fc:	33da      	adds	r3, #218	; 0xda
    c6fe:	e7e6      	b.n	c6ce <LORAWAN_GetAttr+0x13e>
    c700:	4b95      	ldr	r3, [pc, #596]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c702:	33e2      	adds	r3, #226	; 0xe2
    c704:	e7d0      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c706:	4b94      	ldr	r3, [pc, #592]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c708:	33e1      	adds	r3, #225	; 0xe1
    c70a:	e7cd      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c70c:	4b92      	ldr	r3, [pc, #584]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c70e:	33e8      	adds	r3, #232	; 0xe8
    c710:	e7ca      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c712:	4b91      	ldr	r3, [pc, #580]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c714:	3384      	adds	r3, #132	; 0x84
    c716:	781b      	ldrb	r3, [r3, #0]
    c718:	06db      	lsls	r3, r3, #27
    c71a:	0fdb      	lsrs	r3, r3, #31
    c71c:	e7cc      	b.n	c6b8 <LORAWAN_GetAttr+0x128>
    c71e:	4b8e      	ldr	r3, [pc, #568]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c720:	33e6      	adds	r3, #230	; 0xe6
    c722:	e7c1      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c724:	4b8c      	ldr	r3, [pc, #560]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c726:	33e5      	adds	r3, #229	; 0xe5
    c728:	e7be      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c72a:	4b8b      	ldr	r3, [pc, #556]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c72c:	3398      	adds	r3, #152	; 0x98
    c72e:	781b      	ldrb	r3, [r3, #0]
    c730:	e7ce      	b.n	c6d0 <LORAWAN_GetAttr+0x140>
    c732:	4b89      	ldr	r3, [pc, #548]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c734:	3308      	adds	r3, #8
    c736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    c738:	e7a1      	b.n	c67e <LORAWAN_GetAttr+0xee>
    c73a:	2016      	movs	r0, #22
    c73c:	781b      	ldrb	r3, [r3, #0]
    c73e:	a910      	add	r1, sp, #64	; 0x40
    c740:	700b      	strb	r3, [r1, #0]
    c742:	4b88      	ldr	r3, [pc, #544]	; (c964 <LORAWAN_GetAttr+0x3d4>)
    c744:	4798      	blx	r3
    c746:	e77a      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c748:	781b      	ldrb	r3, [r3, #0]
    c74a:	a910      	add	r1, sp, #64	; 0x40
    c74c:	700b      	strb	r3, [r1, #0]
    c74e:	2012      	movs	r0, #18
    c750:	e7f7      	b.n	c742 <LORAWAN_GetAttr+0x1b2>
    c752:	781b      	ldrb	r3, [r3, #0]
    c754:	a910      	add	r1, sp, #64	; 0x40
    c756:	700b      	strb	r3, [r1, #0]
    c758:	2000      	movs	r0, #0
    c75a:	e7f2      	b.n	c742 <LORAWAN_GetAttr+0x1b2>
    c75c:	0010      	movs	r0, r2
    c75e:	4b82      	ldr	r3, [pc, #520]	; (c968 <LORAWAN_GetAttr+0x3d8>)
    c760:	4798      	blx	r3
    c762:	e76c      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c764:	0010      	movs	r0, r2
    c766:	4b81      	ldr	r3, [pc, #516]	; (c96c <LORAWAN_GetAttr+0x3dc>)
    c768:	e7fa      	b.n	c760 <LORAWAN_GetAttr+0x1d0>
    c76a:	4b7b      	ldr	r3, [pc, #492]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c76c:	33ff      	adds	r3, #255	; 0xff
    c76e:	e79b      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c770:	4b79      	ldr	r3, [pc, #484]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c772:	33fd      	adds	r3, #253	; 0xfd
    c774:	e798      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c776:	4b78      	ldr	r3, [pc, #480]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c778:	33fe      	adds	r3, #254	; 0xfe
    c77a:	e795      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c77c:	21fa      	movs	r1, #250	; 0xfa
    c77e:	4b76      	ldr	r3, [pc, #472]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c780:	0089      	lsls	r1, r1, #2
    c782:	3390      	adds	r3, #144	; 0x90
    c784:	6818      	ldr	r0, [r3, #0]
    c786:	4b7a      	ldr	r3, [pc, #488]	; (c970 <LORAWAN_GetAttr+0x3e0>)
    c788:	4798      	blx	r3
    c78a:	8030      	strh	r0, [r6, #0]
    c78c:	e757      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c78e:	780a      	ldrb	r2, [r1, #0]
    c790:	200a      	movs	r0, #10
    c792:	2a03      	cmp	r2, #3
    c794:	d900      	bls.n	c798 <LORAWAN_GetAttr+0x208>
    c796:	e74a      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c798:	232e      	movs	r3, #46	; 0x2e
    c79a:	496f      	ldr	r1, [pc, #444]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c79c:	33ff      	adds	r3, #255	; 0xff
    c79e:	5cc9      	ldrb	r1, [r1, r3]
    c7a0:	3b2d      	subs	r3, #45	; 0x2d
    c7a2:	3bff      	subs	r3, #255	; 0xff
    c7a4:	4093      	lsls	r3, r2
    c7a6:	400b      	ands	r3, r1
    c7a8:	1e5a      	subs	r2, r3, #1
    c7aa:	4193      	sbcs	r3, r2
    c7ac:	7033      	strb	r3, [r6, #0]
    c7ae:	e02e      	b.n	c80e <LORAWAN_GetAttr+0x27e>
    c7b0:	780b      	ldrb	r3, [r1, #0]
    c7b2:	200a      	movs	r0, #10
    c7b4:	2b03      	cmp	r3, #3
    c7b6:	d900      	bls.n	c7ba <LORAWAN_GetAttr+0x22a>
    c7b8:	e739      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c7ba:	213c      	movs	r1, #60	; 0x3c
    c7bc:	4359      	muls	r1, r3
    c7be:	3145      	adds	r1, #69	; 0x45
    c7c0:	4b65      	ldr	r3, [pc, #404]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c7c2:	31ff      	adds	r1, #255	; 0xff
    c7c4:	18c9      	adds	r1, r1, r3
    c7c6:	2210      	movs	r2, #16
    c7c8:	e736      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c7ca:	780b      	ldrb	r3, [r1, #0]
    c7cc:	200a      	movs	r0, #10
    c7ce:	2b03      	cmp	r3, #3
    c7d0:	d900      	bls.n	c7d4 <LORAWAN_GetAttr+0x244>
    c7d2:	e72c      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c7d4:	213c      	movs	r1, #60	; 0x3c
    c7d6:	4359      	muls	r1, r3
    c7d8:	3135      	adds	r1, #53	; 0x35
    c7da:	e7f1      	b.n	c7c0 <LORAWAN_GetAttr+0x230>
    c7dc:	780b      	ldrb	r3, [r1, #0]
    c7de:	200a      	movs	r0, #10
    c7e0:	2b03      	cmp	r3, #3
    c7e2:	d900      	bls.n	c7e6 <LORAWAN_GetAttr+0x256>
    c7e4:	e723      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c7e6:	213c      	movs	r1, #60	; 0x3c
    c7e8:	4359      	muls	r1, r3
    c7ea:	4b5b      	ldr	r3, [pc, #364]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c7ec:	3131      	adds	r1, #49	; 0x31
    c7ee:	31ff      	adds	r1, #255	; 0xff
    c7f0:	18c9      	adds	r1, r1, r3
    c7f2:	2204      	movs	r2, #4
    c7f4:	e720      	b.n	c638 <LORAWAN_GetAttr+0xa8>
    c7f6:	780a      	ldrb	r2, [r1, #0]
    c7f8:	200a      	movs	r0, #10
    c7fa:	2a03      	cmp	r2, #3
    c7fc:	d900      	bls.n	c800 <LORAWAN_GetAttr+0x270>
    c7fe:	e716      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c800:	233c      	movs	r3, #60	; 0x3c
    c802:	435a      	muls	r2, r3
    c804:	4b54      	ldr	r3, [pc, #336]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c806:	189b      	adds	r3, r3, r2
    c808:	33fc      	adds	r3, #252	; 0xfc
    c80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c80c:	6033      	str	r3, [r6, #0]
    c80e:	3802      	subs	r0, #2
    c810:	e70d      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c812:	780a      	ldrb	r2, [r1, #0]
    c814:	200a      	movs	r0, #10
    c816:	2a03      	cmp	r2, #3
    c818:	d900      	bls.n	c81c <LORAWAN_GetAttr+0x28c>
    c81a:	e708      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c81c:	233c      	movs	r3, #60	; 0x3c
    c81e:	435a      	muls	r2, r3
    c820:	4b4d      	ldr	r3, [pc, #308]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c822:	189b      	adds	r3, r3, r2
    c824:	33fc      	adds	r3, #252	; 0xfc
    c826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c828:	e7f0      	b.n	c80c <LORAWAN_GetAttr+0x27c>
    c82a:	780a      	ldrb	r2, [r1, #0]
    c82c:	200a      	movs	r0, #10
    c82e:	2a03      	cmp	r2, #3
    c830:	d900      	bls.n	c834 <LORAWAN_GetAttr+0x2a4>
    c832:	e6fc      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c834:	233c      	movs	r3, #60	; 0x3c
    c836:	435a      	muls	r2, r3
    c838:	4b47      	ldr	r3, [pc, #284]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c83a:	189b      	adds	r3, r3, r2
    c83c:	33fc      	adds	r3, #252	; 0xfc
    c83e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c840:	e7e4      	b.n	c80c <LORAWAN_GetAttr+0x27c>
    c842:	780a      	ldrb	r2, [r1, #0]
    c844:	200a      	movs	r0, #10
    c846:	2a03      	cmp	r2, #3
    c848:	d900      	bls.n	c84c <LORAWAN_GetAttr+0x2bc>
    c84a:	e6f0      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c84c:	233c      	movs	r3, #60	; 0x3c
    c84e:	435a      	muls	r2, r3
    c850:	4b41      	ldr	r3, [pc, #260]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c852:	189b      	adds	r3, r3, r2
    c854:	33fc      	adds	r3, #252	; 0xfc
    c856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c858:	e7d8      	b.n	c80c <LORAWAN_GetAttr+0x27c>
    c85a:	780a      	ldrb	r2, [r1, #0]
    c85c:	200a      	movs	r0, #10
    c85e:	2a03      	cmp	r2, #3
    c860:	d900      	bls.n	c864 <LORAWAN_GetAttr+0x2d4>
    c862:	e6e4      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c864:	233c      	movs	r3, #60	; 0x3c
    c866:	435a      	muls	r2, r3
    c868:	4b3b      	ldr	r3, [pc, #236]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c86a:	189b      	adds	r3, r3, r2
    c86c:	3369      	adds	r3, #105	; 0x69
    c86e:	33ff      	adds	r3, #255	; 0xff
    c870:	781b      	ldrb	r3, [r3, #0]
    c872:	e79b      	b.n	c7ac <LORAWAN_GetAttr+0x21c>
    c874:	780a      	ldrb	r2, [r1, #0]
    c876:	200a      	movs	r0, #10
    c878:	2a03      	cmp	r2, #3
    c87a:	d900      	bls.n	c87e <LORAWAN_GetAttr+0x2ee>
    c87c:	e6d7      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c87e:	233c      	movs	r3, #60	; 0x3c
    c880:	435a      	muls	r2, r3
    c882:	4b35      	ldr	r3, [pc, #212]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c884:	189b      	adds	r3, r3, r2
    c886:	336a      	adds	r3, #106	; 0x6a
    c888:	e7f1      	b.n	c86e <LORAWAN_GetAttr+0x2de>
    c88a:	0010      	movs	r0, r2
    c88c:	4b39      	ldr	r3, [pc, #228]	; (c974 <LORAWAN_GetAttr+0x3e4>)
    c88e:	4798      	blx	r3
    c890:	e6cd      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c892:	0011      	movs	r1, r2
    c894:	4b32      	ldr	r3, [pc, #200]	; (c960 <LORAWAN_GetAttr+0x3d0>)
    c896:	201f      	movs	r0, #31
    c898:	4798      	blx	r3
    c89a:	e6d0      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c89c:	4b2e      	ldr	r3, [pc, #184]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c89e:	3394      	adds	r3, #148	; 0x94
    c8a0:	781b      	ldrb	r3, [r3, #0]
    c8a2:	071b      	lsls	r3, r3, #28
    c8a4:	e739      	b.n	c71a <LORAWAN_GetAttr+0x18a>
    c8a6:	4b2c      	ldr	r3, [pc, #176]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8a8:	3394      	adds	r3, #148	; 0x94
    c8aa:	781b      	ldrb	r3, [r3, #0]
    c8ac:	07db      	lsls	r3, r3, #31
    c8ae:	e734      	b.n	c71a <LORAWAN_GetAttr+0x18a>
    c8b0:	2030      	movs	r0, #48	; 0x30
    c8b2:	4b2c      	ldr	r3, [pc, #176]	; (c964 <LORAWAN_GetAttr+0x3d4>)
    c8b4:	4798      	blx	r3
    c8b6:	e6ba      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c8b8:	492f      	ldr	r1, [pc, #188]	; (c978 <LORAWAN_GetAttr+0x3e8>)
    c8ba:	2026      	movs	r0, #38	; 0x26
    c8bc:	e7f9      	b.n	c8b2 <LORAWAN_GetAttr+0x322>
    c8be:	4b26      	ldr	r3, [pc, #152]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8c0:	33e4      	adds	r3, #228	; 0xe4
    c8c2:	e6f1      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c8c4:	4b24      	ldr	r3, [pc, #144]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8c6:	33e3      	adds	r3, #227	; 0xe3
    c8c8:	e6ee      	b.n	c6a8 <LORAWAN_GetAttr+0x118>
    c8ca:	4b2c      	ldr	r3, [pc, #176]	; (c97c <LORAWAN_GetAttr+0x3ec>)
    c8cc:	4798      	blx	r3
    c8ce:	4b2c      	ldr	r3, [pc, #176]	; (c980 <LORAWAN_GetAttr+0x3f0>)
    c8d0:	0004      	movs	r4, r0
    c8d2:	4798      	blx	r3
    c8d4:	1b00      	subs	r0, r0, r4
    c8d6:	7030      	strb	r0, [r6, #0]
    c8d8:	e6b1      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c8da:	2100      	movs	r1, #0
    c8dc:	2020      	movs	r0, #32
    c8de:	e7e8      	b.n	c8b2 <LORAWAN_GetAttr+0x322>
    c8e0:	4b1d      	ldr	r3, [pc, #116]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8e2:	33ff      	adds	r3, #255	; 0xff
    c8e4:	7f5b      	ldrb	r3, [r3, #29]
    c8e6:	e6db      	b.n	c6a0 <LORAWAN_GetAttr+0x110>
    c8e8:	238f      	movs	r3, #143	; 0x8f
    c8ea:	4a1b      	ldr	r2, [pc, #108]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8ec:	009b      	lsls	r3, r3, #2
    c8ee:	58d3      	ldr	r3, [r2, r3]
    c8f0:	e6c5      	b.n	c67e <LORAWAN_GetAttr+0xee>
    c8f2:	258d      	movs	r5, #141	; 0x8d
    c8f4:	4c18      	ldr	r4, [pc, #96]	; (c958 <LORAWAN_GetAttr+0x3c8>)
    c8f6:	00ad      	lsls	r5, r5, #2
    c8f8:	5963      	ldr	r3, [r4, r5]
    c8fa:	2015      	movs	r0, #21
    c8fc:	3301      	adds	r3, #1
    c8fe:	d100      	bne.n	c902 <LORAWAN_GetAttr+0x372>
    c900:	e695      	b.n	c62e <LORAWAN_GetAttr+0x9e>
    c902:	4b20      	ldr	r3, [pc, #128]	; (c984 <LORAWAN_GetAttr+0x3f4>)
    c904:	a910      	add	r1, sp, #64	; 0x40
    c906:	5ce0      	ldrb	r0, [r4, r3]
    c908:	4b1f      	ldr	r3, [pc, #124]	; (c988 <LORAWAN_GetAttr+0x3f8>)
    c90a:	4798      	blx	r3
    c90c:	4b1f      	ldr	r3, [pc, #124]	; (c98c <LORAWAN_GetAttr+0x3fc>)
    c90e:	4798      	blx	r3
    c910:	22fa      	movs	r2, #250	; 0xfa
    c912:	9000      	str	r0, [sp, #0]
    c914:	9101      	str	r1, [sp, #4]
    c916:	0092      	lsls	r2, r2, #2
    c918:	5960      	ldr	r0, [r4, r5]
    c91a:	2300      	movs	r3, #0
    c91c:	4d1c      	ldr	r5, [pc, #112]	; (c990 <LORAWAN_GetAttr+0x400>)
    c91e:	2100      	movs	r1, #0
    c920:	47a8      	blx	r5
    c922:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c924:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c926:	9002      	str	r0, [sp, #8]
    c928:	9103      	str	r1, [sp, #12]
    c92a:	9800      	ldr	r0, [sp, #0]
    c92c:	9901      	ldr	r1, [sp, #4]
    c92e:	1a80      	subs	r0, r0, r2
    c930:	4199      	sbcs	r1, r3
    c932:	22fa      	movs	r2, #250	; 0xfa
    c934:	2300      	movs	r3, #0
    c936:	0092      	lsls	r2, r2, #2
    c938:	4d16      	ldr	r5, [pc, #88]	; (c994 <LORAWAN_GetAttr+0x404>)
    c93a:	47a8      	blx	r5
    c93c:	238e      	movs	r3, #142	; 0x8e
    c93e:	009b      	lsls	r3, r3, #2
    c940:	5ce4      	ldrb	r4, [r4, r3]
    c942:	2300      	movs	r3, #0
    c944:	00a2      	lsls	r2, r4, #2
    c946:	9c02      	ldr	r4, [sp, #8]
    c948:	9d03      	ldr	r5, [sp, #12]
    c94a:	1912      	adds	r2, r2, r4
    c94c:	416b      	adcs	r3, r5
    c94e:	1812      	adds	r2, r2, r0
    c950:	414b      	adcs	r3, r1
    c952:	6032      	str	r2, [r6, #0]
    c954:	6073      	str	r3, [r6, #4]
    c956:	e672      	b.n	c63e <LORAWAN_GetAttr+0xae>
    c958:	20001484 	.word	0x20001484
    c95c:	00011475 	.word	0x00011475
    c960:	0000d575 	.word	0x0000d575
    c964:	00007ead 	.word	0x00007ead
    c968:	0000c545 	.word	0x0000c545
    c96c:	0000c565 	.word	0x0000c565
    c970:	0000e3a1 	.word	0x0000e3a1
    c974:	00007f51 	.word	0x00007f51
    c978:	2000156b 	.word	0x2000156b
    c97c:	0000bc45 	.word	0x0000bc45
    c980:	0000bced 	.word	0x0000bced
    c984:	00000231 	.word	0x00000231
    c988:	00009c41 	.word	0x00009c41
    c98c:	0000954d 	.word	0x0000954d
    c990:	0000e7bd 	.word	0x0000e7bd
    c994:	0000e77d 	.word	0x0000e77d
    c998:	88ca      	ldrh	r2, [r1, #6]
    c99a:	780b      	ldrb	r3, [r1, #0]
    c99c:	9206      	str	r2, [sp, #24]
    c99e:	784a      	ldrb	r2, [r1, #1]
    c9a0:	af0e      	add	r7, sp, #56	; 0x38
    c9a2:	9209      	str	r2, [sp, #36]	; 0x24
    c9a4:	788a      	ldrb	r2, [r1, #2]
    c9a6:	2025      	movs	r0, #37	; 0x25
    c9a8:	920a      	str	r2, [sp, #40]	; 0x28
    c9aa:	78ca      	ldrb	r2, [r1, #3]
    c9ac:	920b      	str	r2, [sp, #44]	; 0x2c
    c9ae:	790a      	ldrb	r2, [r1, #4]
    c9b0:	9208      	str	r2, [sp, #32]
    c9b2:	aa0c      	add	r2, sp, #48	; 0x30
    c9b4:	1d94      	adds	r4, r2, #6
    c9b6:	7193      	strb	r3, [r2, #6]
    c9b8:	0021      	movs	r1, r4
    c9ba:	003a      	movs	r2, r7
    c9bc:	4b5e      	ldr	r3, [pc, #376]	; (cb38 <LORAWAN_GetAttr+0x5a8>)
    c9be:	4798      	blx	r3
    c9c0:	ab0c      	add	r3, sp, #48	; 0x30
    c9c2:	1ddd      	adds	r5, r3, #7
    c9c4:	002a      	movs	r2, r5
    c9c6:	0021      	movs	r1, r4
    c9c8:	2023      	movs	r0, #35	; 0x23
    c9ca:	4b5b      	ldr	r3, [pc, #364]	; (cb38 <LORAWAN_GetAttr+0x5a8>)
    c9cc:	4798      	blx	r3
    c9ce:	782d      	ldrb	r5, [r5, #0]
    c9d0:	2d01      	cmp	r5, #1
    c9d2:	d000      	beq.n	c9d6 <LORAWAN_GetAttr+0x446>
    c9d4:	e0a1      	b.n	cb1a <LORAWAN_GetAttr+0x58a>
    c9d6:	ac10      	add	r4, sp, #64	; 0x40
    c9d8:	4b58      	ldr	r3, [pc, #352]	; (cb3c <LORAWAN_GetAttr+0x5ac>)
    c9da:	0021      	movs	r1, r4
    c9dc:	2007      	movs	r0, #7
    c9de:	4798      	blx	r3
    c9e0:	783b      	ldrb	r3, [r7, #0]
    c9e2:	2b0c      	cmp	r3, #12
    c9e4:	d000      	beq.n	c9e8 <LORAWAN_GetAttr+0x458>
    c9e6:	e08a      	b.n	cafe <LORAWAN_GetAttr+0x56e>
    c9e8:	2700      	movs	r7, #0
    c9ea:	7823      	ldrb	r3, [r4, #0]
    c9ec:	3b07      	subs	r3, #7
    c9ee:	b2db      	uxtb	r3, r3
    c9f0:	429d      	cmp	r5, r3
    c9f2:	417f      	adcs	r7, r7
    c9f4:	b2fb      	uxtb	r3, r7
    c9f6:	9302      	str	r3, [sp, #8]
    c9f8:	ac10      	add	r4, sp, #64	; 0x40
    c9fa:	ab0c      	add	r3, sp, #48	; 0x30
    c9fc:	1d99      	adds	r1, r3, #6
    c9fe:	0022      	movs	r2, r4
    ca00:	4b4d      	ldr	r3, [pc, #308]	; (cb38 <LORAWAN_GetAttr+0x5a8>)
    ca02:	2024      	movs	r0, #36	; 0x24
    ca04:	4798      	blx	r3
    ca06:	7823      	ldrb	r3, [r4, #0]
    ca08:	3b07      	subs	r3, #7
    ca0a:	b2db      	uxtb	r3, r3
    ca0c:	2b02      	cmp	r3, #2
    ca0e:	d900      	bls.n	ca12 <LORAWAN_GetAttr+0x482>
    ca10:	e080      	b.n	cb14 <LORAWAN_GetAttr+0x584>
    ca12:	4a4b      	ldr	r2, [pc, #300]	; (cb40 <LORAWAN_GetAttr+0x5b0>)
    ca14:	00db      	lsls	r3, r3, #3
    ca16:	18d3      	adds	r3, r2, r3
    ca18:	681c      	ldr	r4, [r3, #0]
    ca1a:	685d      	ldr	r5, [r3, #4]
    ca1c:	2001      	movs	r0, #1
    ca1e:	ab0e      	add	r3, sp, #56	; 0x38
    ca20:	781b      	ldrb	r3, [r3, #0]
    ca22:	4f48      	ldr	r7, [pc, #288]	; (cb44 <LORAWAN_GetAttr+0x5b4>)
    ca24:	9300      	str	r3, [sp, #0]
    ca26:	4098      	lsls	r0, r3
    ca28:	47b8      	blx	r7
    ca2a:	0002      	movs	r2, r0
    ca2c:	000b      	movs	r3, r1
    ca2e:	0020      	movs	r0, r4
    ca30:	0029      	movs	r1, r5
    ca32:	4c45      	ldr	r4, [pc, #276]	; (cb48 <LORAWAN_GetAttr+0x5b8>)
    ca34:	47a0      	blx	r4
    ca36:	0002      	movs	r2, r0
    ca38:	000b      	movs	r3, r1
    ca3a:	2000      	movs	r0, #0
    ca3c:	4943      	ldr	r1, [pc, #268]	; (cb4c <LORAWAN_GetAttr+0x5bc>)
    ca3e:	47a0      	blx	r4
    ca40:	466b      	mov	r3, sp
    ca42:	9004      	str	r0, [sp, #16]
    ca44:	9105      	str	r1, [sp, #20]
    ca46:	7e18      	ldrb	r0, [r3, #24]
    ca48:	47b8      	blx	r7
    ca4a:	4c41      	ldr	r4, [pc, #260]	; (cb50 <LORAWAN_GetAttr+0x5c0>)
    ca4c:	2200      	movs	r2, #0
    ca4e:	4b41      	ldr	r3, [pc, #260]	; (cb54 <LORAWAN_GetAttr+0x5c4>)
    ca50:	47a0      	blx	r4
    ca52:	9a04      	ldr	r2, [sp, #16]
    ca54:	9b05      	ldr	r3, [sp, #20]
    ca56:	4c40      	ldr	r4, [pc, #256]	; (cb58 <LORAWAN_GetAttr+0x5c8>)
    ca58:	47a0      	blx	r4
    ca5a:	9b08      	ldr	r3, [sp, #32]
    ca5c:	9006      	str	r0, [sp, #24]
    ca5e:	9107      	str	r1, [sp, #28]
    ca60:	0058      	lsls	r0, r3, #1
    ca62:	9b00      	ldr	r3, [sp, #0]
    ca64:	2214      	movs	r2, #20
    ca66:	1ac0      	subs	r0, r0, r3
    ca68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca6a:	3007      	adds	r0, #7
    ca6c:	009b      	lsls	r3, r3, #2
    ca6e:	18c0      	adds	r0, r0, r3
    ca70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca72:	0080      	lsls	r0, r0, #2
    ca74:	1e59      	subs	r1, r3, #1
    ca76:	418b      	sbcs	r3, r1
    ca78:	425b      	negs	r3, r3
    ca7a:	401a      	ands	r2, r3
    ca7c:	1a80      	subs	r0, r0, r2
    ca7e:	47b8      	blx	r7
    ca80:	0004      	movs	r4, r0
    ca82:	9802      	ldr	r0, [sp, #8]
    ca84:	000d      	movs	r5, r1
    ca86:	1e43      	subs	r3, r0, #1
    ca88:	4198      	sbcs	r0, r3
    ca8a:	9b00      	ldr	r3, [sp, #0]
    ca8c:	0040      	lsls	r0, r0, #1
    ca8e:	1a18      	subs	r0, r3, r0
    ca90:	0080      	lsls	r0, r0, #2
    ca92:	47b8      	blx	r7
    ca94:	0002      	movs	r2, r0
    ca96:	000b      	movs	r3, r1
    ca98:	0020      	movs	r0, r4
    ca9a:	0029      	movs	r1, r5
    ca9c:	4c2a      	ldr	r4, [pc, #168]	; (cb48 <LORAWAN_GetAttr+0x5b8>)
    ca9e:	47a0      	blx	r4
    caa0:	4b2e      	ldr	r3, [pc, #184]	; (cb5c <LORAWAN_GetAttr+0x5cc>)
    caa2:	0004      	movs	r4, r0
    caa4:	000d      	movs	r5, r1
    caa6:	4798      	blx	r3
    caa8:	4b2d      	ldr	r3, [pc, #180]	; (cb60 <LORAWAN_GetAttr+0x5d0>)
    caaa:	0007      	movs	r7, r0
    caac:	4798      	blx	r3
    caae:	0002      	movs	r2, r0
    cab0:	000b      	movs	r3, r1
    cab2:	0020      	movs	r0, r4
    cab4:	0029      	movs	r1, r5
    cab6:	4c2b      	ldr	r4, [pc, #172]	; (cb64 <LORAWAN_GetAttr+0x5d4>)
    cab8:	47a0      	blx	r4
    caba:	2200      	movs	r2, #0
    cabc:	2300      	movs	r3, #0
    cabe:	4c2a      	ldr	r4, [pc, #168]	; (cb68 <LORAWAN_GetAttr+0x5d8>)
    cac0:	47a0      	blx	r4
    cac2:	1e43      	subs	r3, r0, #1
    cac4:	4198      	sbcs	r0, r3
    cac6:	183f      	adds	r7, r7, r0
    cac8:	003b      	movs	r3, r7
    caca:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cacc:	3004      	adds	r0, #4
    cace:	4343      	muls	r3, r0
    cad0:	3308      	adds	r3, #8
    cad2:	0018      	movs	r0, r3
    cad4:	4b22      	ldr	r3, [pc, #136]	; (cb60 <LORAWAN_GetAttr+0x5d0>)
    cad6:	4798      	blx	r3
    cad8:	9a04      	ldr	r2, [sp, #16]
    cada:	9b05      	ldr	r3, [sp, #20]
    cadc:	4c1e      	ldr	r4, [pc, #120]	; (cb58 <LORAWAN_GetAttr+0x5c8>)
    cade:	47a0      	blx	r4
    cae0:	9a06      	ldr	r2, [sp, #24]
    cae2:	9b07      	ldr	r3, [sp, #28]
    cae4:	4c1a      	ldr	r4, [pc, #104]	; (cb50 <LORAWAN_GetAttr+0x5c0>)
    cae6:	47a0      	blx	r4
    cae8:	2200      	movs	r2, #0
    caea:	4b20      	ldr	r3, [pc, #128]	; (cb6c <LORAWAN_GetAttr+0x5dc>)
    caec:	4c1a      	ldr	r4, [pc, #104]	; (cb58 <LORAWAN_GetAttr+0x5c8>)
    caee:	47a0      	blx	r4
    caf0:	2200      	movs	r2, #0
    caf2:	4b1e      	ldr	r3, [pc, #120]	; (cb6c <LORAWAN_GetAttr+0x5dc>)
    caf4:	47a0      	blx	r4
    caf6:	4b19      	ldr	r3, [pc, #100]	; (cb5c <LORAWAN_GetAttr+0x5cc>)
    caf8:	4798      	blx	r3
    cafa:	6030      	str	r0, [r6, #0]
    cafc:	e59f      	b.n	c63e <LORAWAN_GetAttr+0xae>
    cafe:	2200      	movs	r2, #0
    cb00:	9202      	str	r2, [sp, #8]
    cb02:	2b0b      	cmp	r3, #11
    cb04:	d000      	beq.n	cb08 <LORAWAN_GetAttr+0x578>
    cb06:	e777      	b.n	c9f8 <LORAWAN_GetAttr+0x468>
    cb08:	7827      	ldrb	r7, [r4, #0]
    cb0a:	3f07      	subs	r7, #7
    cb0c:	427a      	negs	r2, r7
    cb0e:	417a      	adcs	r2, r7
    cb10:	b2d3      	uxtb	r3, r2
    cb12:	e770      	b.n	c9f6 <LORAWAN_GetAttr+0x466>
    cb14:	2400      	movs	r4, #0
    cb16:	2500      	movs	r5, #0
    cb18:	e780      	b.n	ca1c <LORAWAN_GetAttr+0x48c>
    cb1a:	20a0      	movs	r0, #160	; 0xa0
    cb1c:	9b08      	ldr	r3, [sp, #32]
    cb1e:	4358      	muls	r0, r3
    cb20:	23c8      	movs	r3, #200	; 0xc8
    cb22:	009b      	lsls	r3, r3, #2
    cb24:	18c0      	adds	r0, r0, r3
    cb26:	4b0e      	ldr	r3, [pc, #56]	; (cb60 <LORAWAN_GetAttr+0x5d0>)
    cb28:	4798      	blx	r3
    cb2a:	e7e4      	b.n	caf6 <LORAWAN_GetAttr+0x566>
    cb2c:	4b10      	ldr	r3, [pc, #64]	; (cb70 <LORAWAN_GetAttr+0x5e0>)
    cb2e:	33ff      	adds	r3, #255	; 0xff
    cb30:	7f5b      	ldrb	r3, [r3, #29]
    cb32:	079b      	lsls	r3, r3, #30
    cb34:	e5f1      	b.n	c71a <LORAWAN_GetAttr+0x18a>
    cb36:	46c0      	nop			; (mov r8, r8)
    cb38:	00007ead 	.word	0x00007ead
    cb3c:	0000d575 	.word	0x0000d575
    cb40:	000174f8 	.word	0x000174f8
    cb44:	00011241 	.word	0x00011241
    cb48:	0000fe45 	.word	0x0000fe45
    cb4c:	3ff00000 	.word	0x3ff00000
    cb50:	0000f825 	.word	0x0000f825
    cb54:	40110000 	.word	0x40110000
    cb58:	000106ad 	.word	0x000106ad
    cb5c:	0000e841 	.word	0x0000e841
    cb60:	000112c5 	.word	0x000112c5
    cb64:	00010bad 	.word	0x00010bad
    cb68:	0000e6e1 	.word	0x0000e6e1
    cb6c:	408f4000 	.word	0x408f4000
    cb70:	20001484 	.word	0x20001484

0000cb74 <LORAWAN_TxDone>:
    cb74:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb76:	6843      	ldr	r3, [r0, #4]
    cb78:	b091      	sub	sp, #68	; 0x44
    cb7a:	ae08      	add	r6, sp, #32
    cb7c:	7804      	ldrb	r4, [r0, #0]
    cb7e:	9302      	str	r3, [sp, #8]
    cb80:	2100      	movs	r1, #0
    cb82:	4b84      	ldr	r3, [pc, #528]	; (cd94 <LORAWAN_TxDone+0x220>)
    cb84:	0032      	movs	r2, r6
    cb86:	2028      	movs	r0, #40	; 0x28
    cb88:	4798      	blx	r3
    cb8a:	4d83      	ldr	r5, [pc, #524]	; (cd98 <LORAWAN_TxDone+0x224>)
    cb8c:	0029      	movs	r1, r5
    cb8e:	3184      	adds	r1, #132	; 0x84
    cb90:	780b      	ldrb	r3, [r1, #0]
    cb92:	2b7f      	cmp	r3, #127	; 0x7f
    cb94:	d900      	bls.n	cb98 <LORAWAN_TxDone+0x24>
    cb96:	e236      	b.n	d006 <LORAWAN_TxDone+0x492>
    cb98:	4a80      	ldr	r2, [pc, #512]	; (cd9c <LORAWAN_TxDone+0x228>)
    cb9a:	7810      	ldrb	r0, [r2, #0]
    cb9c:	2804      	cmp	r0, #4
    cb9e:	d10b      	bne.n	cbb8 <LORAWAN_TxDone+0x44>
    cba0:	220e      	movs	r2, #14
    cba2:	4393      	bics	r3, r2
    cba4:	700b      	strb	r3, [r1, #0]
    cba6:	3017      	adds	r0, #23
    cba8:	07db      	lsls	r3, r3, #31
    cbaa:	d500      	bpl.n	cbae <LORAWAN_TxDone+0x3a>
    cbac:	e0b0      	b.n	cd10 <LORAWAN_TxDone+0x19c>
    cbae:	201b      	movs	r0, #27
    cbb0:	4b7b      	ldr	r3, [pc, #492]	; (cda0 <LORAWAN_TxDone+0x22c>)
    cbb2:	4798      	blx	r3
    cbb4:	b011      	add	sp, #68	; 0x44
    cbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbb8:	7813      	ldrb	r3, [r2, #0]
    cbba:	2b02      	cmp	r3, #2
    cbbc:	d1fa      	bne.n	cbb4 <LORAWAN_TxDone+0x40>
    cbbe:	4b79      	ldr	r3, [pc, #484]	; (cda4 <LORAWAN_TxDone+0x230>)
    cbc0:	5cea      	ldrb	r2, [r5, r3]
    cbc2:	2a00      	cmp	r2, #0
    cbc4:	d005      	beq.n	cbd2 <LORAWAN_TxDone+0x5e>
    cbc6:	2200      	movs	r2, #0
    cbc8:	4977      	ldr	r1, [pc, #476]	; (cda8 <LORAWAN_TxDone+0x234>)
    cbca:	54ea      	strb	r2, [r5, r3]
    cbcc:	200b      	movs	r0, #11
    cbce:	4b77      	ldr	r3, [pc, #476]	; (cdac <LORAWAN_TxDone+0x238>)
    cbd0:	4798      	blx	r3
    cbd2:	2c07      	cmp	r4, #7
    cbd4:	d000      	beq.n	cbd8 <LORAWAN_TxDone+0x64>
    cbd6:	e09f      	b.n	cd18 <LORAWAN_TxDone+0x1a4>
    cbd8:	79f3      	ldrb	r3, [r6, #7]
    cbda:	2b00      	cmp	r3, #0
    cbdc:	d0ea      	beq.n	cbb4 <LORAWAN_TxDone+0x40>
    cbde:	002b      	movs	r3, r5
    cbe0:	3394      	adds	r3, #148	; 0x94
    cbe2:	7818      	ldrb	r0, [r3, #0]
    cbe4:	002f      	movs	r7, r5
    cbe6:	2304      	movs	r3, #4
    cbe8:	37fe      	adds	r7, #254	; 0xfe
    cbea:	4018      	ands	r0, r3
    cbec:	4e70      	ldr	r6, [pc, #448]	; (cdb0 <LORAWAN_TxDone+0x23c>)
    cbee:	d005      	beq.n	cbfc <LORAWAN_TxDone+0x88>
    cbf0:	2000      	movs	r0, #0
    cbf2:	2109      	movs	r1, #9
    cbf4:	8438      	strh	r0, [r7, #32]
    cbf6:	47b0      	blx	r6
    cbf8:	0020      	movs	r0, r4
    cbfa:	e7d9      	b.n	cbb0 <LORAWAN_TxDone+0x3c>
    cbfc:	8c3b      	ldrh	r3, [r7, #32]
    cbfe:	2109      	movs	r1, #9
    cc00:	3301      	adds	r3, #1
    cc02:	843b      	strh	r3, [r7, #32]
    cc04:	47b0      	blx	r6
    cc06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    cc08:	4a6a      	ldr	r2, [pc, #424]	; (cdb4 <LORAWAN_TxDone+0x240>)
    cc0a:	4293      	cmp	r3, r2
    cc0c:	d002      	beq.n	cc14 <LORAWAN_TxDone+0xa0>
    cc0e:	8c3a      	ldrh	r2, [r7, #32]
    cc10:	429a      	cmp	r2, r3
    cc12:	d265      	bcs.n	cce0 <LORAWAN_TxDone+0x16c>
    cc14:	4b68      	ldr	r3, [pc, #416]	; (cdb8 <LORAWAN_TxDone+0x244>)
    cc16:	5ceb      	ldrb	r3, [r5, r3]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d061      	beq.n	cce0 <LORAWAN_TxDone+0x16c>
    cc1c:	2701      	movs	r7, #1
    cc1e:	002b      	movs	r3, r5
    cc20:	a906      	add	r1, sp, #24
    cc22:	700f      	strb	r7, [r1, #0]
    cc24:	33e9      	adds	r3, #233	; 0xe9
    cc26:	781b      	ldrb	r3, [r3, #0]
    cc28:	aa0c      	add	r2, sp, #48	; 0x30
    cc2a:	704b      	strb	r3, [r1, #1]
    cc2c:	002b      	movs	r3, r5
    cc2e:	33e7      	adds	r3, #231	; 0xe7
    cc30:	781b      	ldrb	r3, [r3, #0]
    cc32:	202e      	movs	r0, #46	; 0x2e
    cc34:	708b      	strb	r3, [r1, #2]
    cc36:	4b61      	ldr	r3, [pc, #388]	; (cdbc <LORAWAN_TxDone+0x248>)
    cc38:	4798      	blx	r3
    cc3a:	2808      	cmp	r0, #8
    cc3c:	d135      	bne.n	ccaa <LORAWAN_TxDone+0x136>
    cc3e:	a807      	add	r0, sp, #28
    cc40:	4b5f      	ldr	r3, [pc, #380]	; (cdc0 <LORAWAN_TxDone+0x24c>)
    cc42:	7007      	strb	r7, [r0, #0]
    cc44:	4798      	blx	r3
    cc46:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc48:	990d      	ldr	r1, [sp, #52]	; 0x34
    cc4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cc4c:	4b5d      	ldr	r3, [pc, #372]	; (cdc4 <LORAWAN_TxDone+0x250>)
    cc4e:	4798      	blx	r3
    cc50:	002b      	movs	r3, r5
    cc52:	33ce      	adds	r3, #206	; 0xce
    cc54:	881b      	ldrh	r3, [r3, #0]
    cc56:	a80a      	add	r0, sp, #40	; 0x28
    cc58:	7003      	strb	r3, [r0, #0]
    cc5a:	4b5b      	ldr	r3, [pc, #364]	; (cdc8 <LORAWAN_TxDone+0x254>)
    cc5c:	6043      	str	r3, [r0, #4]
    cc5e:	4b5b      	ldr	r3, [pc, #364]	; (cdcc <LORAWAN_TxDone+0x258>)
    cc60:	4798      	blx	r3
    cc62:	1e04      	subs	r4, r0, #0
    cc64:	d108      	bne.n	cc78 <LORAWAN_TxDone+0x104>
    cc66:	220e      	movs	r2, #14
    cc68:	3584      	adds	r5, #132	; 0x84
    cc6a:	782b      	ldrb	r3, [r5, #0]
    cc6c:	4393      	bics	r3, r2
    cc6e:	001a      	movs	r2, r3
    cc70:	2302      	movs	r3, #2
    cc72:	4313      	orrs	r3, r2
    cc74:	702b      	strb	r3, [r5, #0]
    cc76:	e79d      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    cc78:	002b      	movs	r3, r5
    cc7a:	3394      	adds	r3, #148	; 0x94
    cc7c:	7818      	ldrb	r0, [r3, #0]
    cc7e:	002b      	movs	r3, r5
    cc80:	4038      	ands	r0, r7
    cc82:	33fe      	adds	r3, #254	; 0xfe
    cc84:	4f52      	ldr	r7, [pc, #328]	; (cdd0 <LORAWAN_TxDone+0x25c>)
    cc86:	4d53      	ldr	r5, [pc, #332]	; (cdd4 <LORAWAN_TxDone+0x260>)
    cc88:	2800      	cmp	r0, #0
    cc8a:	d009      	beq.n	cca0 <LORAWAN_TxDone+0x12c>
    cc8c:	2000      	movs	r0, #0
    cc8e:	2109      	movs	r1, #9
    cc90:	8418      	strh	r0, [r3, #32]
    cc92:	47b0      	blx	r6
    cc94:	4b50      	ldr	r3, [pc, #320]	; (cdd8 <LORAWAN_TxDone+0x264>)
    cc96:	4798      	blx	r3
    cc98:	47a8      	blx	r5
    cc9a:	0020      	movs	r0, r4
    cc9c:	47b8      	blx	r7
    cc9e:	e789      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    cca0:	2109      	movs	r1, #9
    cca2:	8418      	strh	r0, [r3, #32]
    cca4:	47b0      	blx	r6
    cca6:	4b4d      	ldr	r3, [pc, #308]	; (cddc <LORAWAN_TxDone+0x268>)
    cca8:	e7f5      	b.n	cc96 <LORAWAN_TxDone+0x122>
    ccaa:	002b      	movs	r3, r5
    ccac:	3394      	adds	r3, #148	; 0x94
    ccae:	7818      	ldrb	r0, [r3, #0]
    ccb0:	002b      	movs	r3, r5
    ccb2:	4007      	ands	r7, r0
    ccb4:	4c46      	ldr	r4, [pc, #280]	; (cdd0 <LORAWAN_TxDone+0x25c>)
    ccb6:	33fe      	adds	r3, #254	; 0xfe
    ccb8:	4d46      	ldr	r5, [pc, #280]	; (cdd4 <LORAWAN_TxDone+0x260>)
    ccba:	2f00      	cmp	r7, #0
    ccbc:	d00a      	beq.n	ccd4 <LORAWAN_TxDone+0x160>
    ccbe:	2700      	movs	r7, #0
    ccc0:	2109      	movs	r1, #9
    ccc2:	0038      	movs	r0, r7
    ccc4:	841f      	strh	r7, [r3, #32]
    ccc6:	47b0      	blx	r6
    ccc8:	4b43      	ldr	r3, [pc, #268]	; (cdd8 <LORAWAN_TxDone+0x264>)
    ccca:	4798      	blx	r3
    cccc:	47a8      	blx	r5
    ccce:	0038      	movs	r0, r7
    ccd0:	47a0      	blx	r4
    ccd2:	e76f      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    ccd4:	2109      	movs	r1, #9
    ccd6:	0038      	movs	r0, r7
    ccd8:	841f      	strh	r7, [r3, #32]
    ccda:	47b0      	blx	r6
    ccdc:	4b3f      	ldr	r3, [pc, #252]	; (cddc <LORAWAN_TxDone+0x268>)
    ccde:	e7f4      	b.n	ccca <LORAWAN_TxDone+0x156>
    cce0:	002b      	movs	r3, r5
    cce2:	2000      	movs	r0, #0
    cce4:	33fe      	adds	r3, #254	; 0xfe
    cce6:	2109      	movs	r1, #9
    cce8:	8418      	strh	r0, [r3, #32]
    ccea:	47b0      	blx	r6
    ccec:	002a      	movs	r2, r5
    ccee:	210e      	movs	r1, #14
    ccf0:	3284      	adds	r2, #132	; 0x84
    ccf2:	7813      	ldrb	r3, [r2, #0]
    ccf4:	3594      	adds	r5, #148	; 0x94
    ccf6:	438b      	bics	r3, r1
    ccf8:	7013      	strb	r3, [r2, #0]
    ccfa:	2220      	movs	r2, #32
    ccfc:	782b      	ldrb	r3, [r5, #0]
    ccfe:	4c35      	ldr	r4, [pc, #212]	; (cdd4 <LORAWAN_TxDone+0x260>)
    cd00:	4393      	bics	r3, r2
    cd02:	702b      	strb	r3, [r5, #0]
    cd04:	07db      	lsls	r3, r3, #31
    cd06:	d505      	bpl.n	cd14 <LORAWAN_TxDone+0x1a0>
    cd08:	4b33      	ldr	r3, [pc, #204]	; (cdd8 <LORAWAN_TxDone+0x264>)
    cd0a:	4798      	blx	r3
    cd0c:	47a0      	blx	r4
    cd0e:	2007      	movs	r0, #7
    cd10:	4b2f      	ldr	r3, [pc, #188]	; (cdd0 <LORAWAN_TxDone+0x25c>)
    cd12:	e74e      	b.n	cbb2 <LORAWAN_TxDone+0x3e>
    cd14:	4b31      	ldr	r3, [pc, #196]	; (cddc <LORAWAN_TxDone+0x268>)
    cd16:	e7f8      	b.n	cd0a <LORAWAN_TxDone+0x196>
    cd18:	2c00      	cmp	r4, #0
    cd1a:	d000      	beq.n	cd1e <LORAWAN_TxDone+0x1aa>
    cd1c:	e74a      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    cd1e:	002b      	movs	r3, r5
    cd20:	33fc      	adds	r3, #252	; 0xfc
    cd22:	68de      	ldr	r6, [r3, #12]
    cd24:	002b      	movs	r3, r5
    cd26:	33fe      	adds	r3, #254	; 0xfe
    cd28:	841c      	strh	r4, [r3, #32]
    cd2a:	0020      	movs	r0, r4
    cd2c:	2109      	movs	r1, #9
    cd2e:	4c20      	ldr	r4, [pc, #128]	; (cdb0 <LORAWAN_TxDone+0x23c>)
    cd30:	47a0      	blx	r4
    cd32:	002b      	movs	r3, r5
    cd34:	33e3      	adds	r3, #227	; 0xe3
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d151      	bne.n	cde0 <LORAWAN_TxDone+0x26c>
    cd3c:	002a      	movs	r2, r5
    cd3e:	32e4      	adds	r2, #228	; 0xe4
    cd40:	7812      	ldrb	r2, [r2, #0]
    cd42:	2a00      	cmp	r2, #0
    cd44:	d14c      	bne.n	cde0 <LORAWAN_TxDone+0x26c>
    cd46:	002b      	movs	r3, r5
    cd48:	3384      	adds	r3, #132	; 0x84
    cd4a:	781a      	ldrb	r2, [r3, #0]
    cd4c:	2301      	movs	r3, #1
    cd4e:	421a      	tst	r2, r3
    cd50:	d055      	beq.n	cdfe <LORAWAN_TxDone+0x28a>
    cd52:	0029      	movs	r1, r5
    cd54:	3188      	adds	r1, #136	; 0x88
    cd56:	680a      	ldr	r2, [r1, #0]
    cd58:	18d2      	adds	r2, r2, r3
    cd5a:	600a      	str	r2, [r1, #0]
    cd5c:	218b      	movs	r1, #139	; 0x8b
    cd5e:	0089      	lsls	r1, r1, #2
    cd60:	5c69      	ldrb	r1, [r5, r1]
    cd62:	2900      	cmp	r1, #0
    cd64:	d003      	beq.n	cd6e <LORAWAN_TxDone+0x1fa>
    cd66:	408b      	lsls	r3, r1
    cd68:	3b01      	subs	r3, #1
    cd6a:	421a      	tst	r2, r3
    cd6c:	d102      	bne.n	cd74 <LORAWAN_TxDone+0x200>
    cd6e:	2115      	movs	r1, #21
    cd70:	2000      	movs	r0, #0
    cd72:	47a0      	blx	r4
    cd74:	7833      	ldrb	r3, [r6, #0]
    cd76:	002a      	movs	r2, r5
    cd78:	2b01      	cmp	r3, #1
    cd7a:	d106      	bne.n	cd8a <LORAWAN_TxDone+0x216>
    cd7c:	3294      	adds	r2, #148	; 0x94
    cd7e:	7811      	ldrb	r1, [r2, #0]
    cd80:	430b      	orrs	r3, r1
    cd82:	7013      	strb	r3, [r2, #0]
    cd84:	002a      	movs	r2, r5
    cd86:	32e4      	adds	r2, #228	; 0xe4
    cd88:	e000      	b.n	cd8c <LORAWAN_TxDone+0x218>
    cd8a:	32e3      	adds	r2, #227	; 0xe3
    cd8c:	7813      	ldrb	r3, [r2, #0]
    cd8e:	3301      	adds	r3, #1
    cd90:	e034      	b.n	cdfc <LORAWAN_TxDone+0x288>
    cd92:	46c0      	nop			; (mov r8, r8)
    cd94:	0000c591 	.word	0x0000c591
    cd98:	20001484 	.word	0x20001484
    cd9c:	200016cc 	.word	0x200016cc
    cda0:	0000bfe9 	.word	0x0000bfe9
    cda4:	00000222 	.word	0x00000222
    cda8:	200016a5 	.word	0x200016a5
    cdac:	0000d665 	.word	0x0000d665
    cdb0:	00008045 	.word	0x00008045
    cdb4:	0000ffff 	.word	0x0000ffff
    cdb8:	0000022a 	.word	0x0000022a
    cdbc:	00007ead 	.word	0x00007ead
    cdc0:	0000e2bd 	.word	0x0000e2bd
    cdc4:	0000c139 	.word	0x0000c139
    cdc8:	200016dd 	.word	0x200016dd
    cdcc:	0000db75 	.word	0x0000db75
    cdd0:	0000c4e1 	.word	0x0000c4e1
    cdd4:	0000bc01 	.word	0x0000bc01
    cdd8:	0000bf95 	.word	0x0000bf95
    cddc:	0000bfc5 	.word	0x0000bfc5
    cde0:	002a      	movs	r2, r5
    cde2:	3284      	adds	r2, #132	; 0x84
    cde4:	7811      	ldrb	r1, [r2, #0]
    cde6:	2201      	movs	r2, #1
    cde8:	4211      	tst	r1, r2
    cdea:	d008      	beq.n	cdfe <LORAWAN_TxDone+0x28a>
    cdec:	0029      	movs	r1, r5
    cdee:	3194      	adds	r1, #148	; 0x94
    cdf0:	7809      	ldrb	r1, [r1, #0]
    cdf2:	4211      	tst	r1, r2
    cdf4:	d1c6      	bne.n	cd84 <LORAWAN_TxDone+0x210>
    cdf6:	189b      	adds	r3, r3, r2
    cdf8:	002a      	movs	r2, r5
    cdfa:	32e3      	adds	r2, #227	; 0xe3
    cdfc:	7013      	strb	r3, [r2, #0]
    cdfe:	002b      	movs	r3, r5
    ce00:	2200      	movs	r2, #0
    ce02:	33f9      	adds	r3, #249	; 0xf9
    ce04:	701a      	strb	r2, [r3, #0]
    ce06:	002a      	movs	r2, r5
    ce08:	210e      	movs	r1, #14
    ce0a:	2604      	movs	r6, #4
    ce0c:	3284      	adds	r2, #132	; 0x84
    ce0e:	7813      	ldrb	r3, [r2, #0]
    ce10:	002f      	movs	r7, r5
    ce12:	438b      	bics	r3, r1
    ce14:	4333      	orrs	r3, r6
    ce16:	7013      	strb	r3, [r2, #0]
    ce18:	002b      	movs	r3, r5
    ce1a:	33e7      	adds	r3, #231	; 0xe7
    ce1c:	781b      	ldrb	r3, [r3, #0]
    ce1e:	a907      	add	r1, sp, #28
    ce20:	708b      	strb	r3, [r1, #2]
    ce22:	002b      	movs	r3, r5
    ce24:	33f7      	adds	r3, #247	; 0xf7
    ce26:	781b      	ldrb	r3, [r3, #0]
    ce28:	3794      	adds	r7, #148	; 0x94
    ce2a:	704b      	strb	r3, [r1, #1]
    ce2c:	783b      	ldrb	r3, [r7, #0]
    ce2e:	ac0a      	add	r4, sp, #40	; 0x28
    ce30:	075b      	lsls	r3, r3, #29
    ce32:	0fdb      	lsrs	r3, r3, #31
    ce34:	700b      	strb	r3, [r1, #0]
    ce36:	0022      	movs	r2, r4
    ce38:	4b83      	ldr	r3, [pc, #524]	; (d048 <LORAWAN_TxDone+0x4d4>)
    ce3a:	2019      	movs	r0, #25
    ce3c:	4798      	blx	r3
    ce3e:	783b      	ldrb	r3, [r7, #0]
    ce40:	4233      	tst	r3, r6
    ce42:	d100      	bne.n	ce46 <LORAWAN_TxDone+0x2d2>
    ce44:	e0a4      	b.n	cf90 <LORAWAN_TxDone+0x41c>
    ce46:	2300      	movs	r3, #0
    ce48:	af0c      	add	r7, sp, #48	; 0x30
    ce4a:	703b      	strb	r3, [r7, #0]
    ce4c:	003a      	movs	r2, r7
    ce4e:	2100      	movs	r1, #0
    ce50:	2009      	movs	r0, #9
    ce52:	4b7d      	ldr	r3, [pc, #500]	; (d048 <LORAWAN_TxDone+0x4d4>)
    ce54:	4798      	blx	r3
    ce56:	0039      	movs	r1, r7
    ce58:	aa06      	add	r2, sp, #24
    ce5a:	0030      	movs	r0, r6
    ce5c:	4b7a      	ldr	r3, [pc, #488]	; (d048 <LORAWAN_TxDone+0x4d4>)
    ce5e:	4798      	blx	r3
    ce60:	0029      	movs	r1, r5
    ce62:	7923      	ldrb	r3, [r4, #4]
    ce64:	3169      	adds	r1, #105	; 0x69
    ce66:	700b      	strb	r3, [r1, #0]
    ce68:	002b      	movs	r3, r5
    ce6a:	270f      	movs	r7, #15
    ce6c:	7822      	ldrb	r2, [r4, #0]
    ce6e:	3365      	adds	r3, #101	; 0x65
    ce70:	701a      	strb	r2, [r3, #0]
    ce72:	7862      	ldrb	r2, [r4, #1]
    ce74:	2004      	movs	r0, #4
    ce76:	705a      	strb	r2, [r3, #1]
    ce78:	78a2      	ldrb	r2, [r4, #2]
    ce7a:	2600      	movs	r6, #0
    ce7c:	709a      	strb	r2, [r3, #2]
    ce7e:	78e2      	ldrb	r2, [r4, #3]
    ce80:	2404      	movs	r4, #4
    ce82:	70da      	strb	r2, [r3, #3]
    ce84:	ab02      	add	r3, sp, #8
    ce86:	18ff      	adds	r7, r7, r3
    ce88:	003a      	movs	r2, r7
    ce8a:	4b6f      	ldr	r3, [pc, #444]	; (d048 <LORAWAN_TxDone+0x4d4>)
    ce8c:	4798      	blx	r3
    ce8e:	002b      	movs	r3, r5
    ce90:	3394      	adds	r3, #148	; 0x94
    ce92:	781a      	ldrb	r2, [r3, #0]
    ce94:	2300      	movs	r3, #0
    ce96:	4014      	ands	r4, r2
    ce98:	56fb      	ldrsb	r3, [r7, r3]
    ce9a:	002a      	movs	r2, r5
    ce9c:	42b4      	cmp	r4, r6
    ce9e:	d07a      	beq.n	cf96 <LORAWAN_TxDone+0x422>
    cea0:	a902      	add	r1, sp, #8
    cea2:	7c09      	ldrb	r1, [r1, #16]
    cea4:	32d6      	adds	r2, #214	; 0xd6
    cea6:	8812      	ldrh	r2, [r2, #0]
    cea8:	b249      	sxtb	r1, r1
    ceaa:	1852      	adds	r2, r2, r1
    ceac:	9203      	str	r2, [sp, #12]
    ceae:	002a      	movs	r2, r5
    ceb0:	32d4      	adds	r2, #212	; 0xd4
    ceb2:	8811      	ldrh	r1, [r2, #0]
    ceb4:	24fa      	movs	r4, #250	; 0xfa
    ceb6:	18c9      	adds	r1, r1, r3
    ceb8:	4b64      	ldr	r3, [pc, #400]	; (d04c <LORAWAN_TxDone+0x4d8>)
    ceba:	00a4      	lsls	r4, r4, #2
    cebc:	5ceb      	ldrb	r3, [r5, r3]
    cebe:	0032      	movs	r2, r6
    cec0:	1ac9      	subs	r1, r1, r3
    cec2:	002b      	movs	r3, r5
    cec4:	33eb      	adds	r3, #235	; 0xeb
    cec6:	7818      	ldrb	r0, [r3, #0]
    cec8:	4361      	muls	r1, r4
    ceca:	4b61      	ldr	r3, [pc, #388]	; (d050 <LORAWAN_TxDone+0x4dc>)
    cecc:	4f61      	ldr	r7, [pc, #388]	; (d054 <LORAWAN_TxDone+0x4e0>)
    cece:	9600      	str	r6, [sp, #0]
    ced0:	47b8      	blx	r7
    ced2:	4b5e      	ldr	r3, [pc, #376]	; (d04c <LORAWAN_TxDone+0x4d8>)
    ced4:	0032      	movs	r2, r6
    ced6:	5ce9      	ldrb	r1, [r5, r3]
    ced8:	9b03      	ldr	r3, [sp, #12]
    ceda:	1a59      	subs	r1, r3, r1
    cedc:	002b      	movs	r3, r5
    cede:	33ec      	adds	r3, #236	; 0xec
    cee0:	7818      	ldrb	r0, [r3, #0]
    cee2:	4361      	muls	r1, r4
    cee4:	4b5c      	ldr	r3, [pc, #368]	; (d058 <LORAWAN_TxDone+0x4e4>)
    cee6:	9600      	str	r6, [sp, #0]
    cee8:	47b8      	blx	r7
    ceea:	002b      	movs	r3, r5
    ceec:	33ff      	adds	r3, #255	; 0xff
    ceee:	7f5b      	ldrb	r3, [r3, #29]
    cef0:	069b      	lsls	r3, r3, #26
    cef2:	d521      	bpl.n	cf38 <LORAWAN_TxDone+0x3c4>
    cef4:	9b02      	ldr	r3, [sp, #8]
    cef6:	ac0c      	add	r4, sp, #48	; 0x30
    cef8:	67eb      	str	r3, [r5, #124]	; 0x7c
    cefa:	002b      	movs	r3, r5
    cefc:	3380      	adds	r3, #128	; 0x80
    cefe:	781b      	ldrb	r3, [r3, #0]
    cf00:	4f56      	ldr	r7, [pc, #344]	; (d05c <LORAWAN_TxDone+0x4e8>)
    cf02:	42b3      	cmp	r3, r6
    cf04:	d010      	beq.n	cf28 <LORAWAN_TxDone+0x3b4>
    cf06:	6f6e      	ldr	r6, [r5, #116]	; 0x74
    cf08:	6fab      	ldr	r3, [r5, #120]	; 0x78
    cf0a:	431e      	orrs	r6, r3
    cf0c:	d10c      	bne.n	cf28 <LORAWAN_TxDone+0x3b4>
    cf0e:	2301      	movs	r3, #1
    cf10:	0021      	movs	r1, r4
    cf12:	2021      	movs	r0, #33	; 0x21
    cf14:	7023      	strb	r3, [r4, #0]
    cf16:	47b8      	blx	r7
    cf18:	4b51      	ldr	r3, [pc, #324]	; (d060 <LORAWAN_TxDone+0x4ec>)
    cf1a:	4798      	blx	r3
    cf1c:	0033      	movs	r3, r6
    cf1e:	9a02      	ldr	r2, [sp, #8]
    cf20:	1a80      	subs	r0, r0, r2
    cf22:	4199      	sbcs	r1, r3
    cf24:	6768      	str	r0, [r5, #116]	; 0x74
    cf26:	67a9      	str	r1, [r5, #120]	; 0x78
    cf28:	4b4e      	ldr	r3, [pc, #312]	; (d064 <LORAWAN_TxDone+0x4f0>)
    cf2a:	0021      	movs	r1, r4
    cf2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    cf2e:	2020      	movs	r0, #32
    cf30:	930c      	str	r3, [sp, #48]	; 0x30
    cf32:	2301      	movs	r3, #1
    cf34:	7123      	strb	r3, [r4, #4]
    cf36:	47b8      	blx	r7
    cf38:	4c4a      	ldr	r4, [pc, #296]	; (d064 <LORAWAN_TxDone+0x4f0>)
    cf3a:	2102      	movs	r1, #2
    cf3c:	0023      	movs	r3, r4
    cf3e:	33ff      	adds	r3, #255	; 0xff
    cf40:	7f5b      	ldrb	r3, [r3, #29]
    cf42:	4019      	ands	r1, r3
    cf44:	d05b      	beq.n	cffe <LORAWAN_TxDone+0x48a>
    cf46:	466b      	mov	r3, sp
    cf48:	891b      	ldrh	r3, [r3, #8]
    cf4a:	a90c      	add	r1, sp, #48	; 0x30
    cf4c:	800b      	strh	r3, [r1, #0]
    cf4e:	0023      	movs	r3, r4
    cf50:	3394      	adds	r3, #148	; 0x94
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	201f      	movs	r0, #31
    cf56:	075b      	lsls	r3, r3, #29
    cf58:	0fdb      	lsrs	r3, r3, #31
    cf5a:	710b      	strb	r3, [r1, #4]
    cf5c:	0023      	movs	r3, r4
    cf5e:	3398      	adds	r3, #152	; 0x98
    cf60:	781a      	ldrb	r2, [r3, #0]
    cf62:	2301      	movs	r3, #1
    cf64:	4093      	lsls	r3, r2
    cf66:	804b      	strh	r3, [r1, #2]
    cf68:	4b3c      	ldr	r3, [pc, #240]	; (d05c <LORAWAN_TxDone+0x4e8>)
    cf6a:	4798      	blx	r3
    cf6c:	258c      	movs	r5, #140	; 0x8c
    cf6e:	00ad      	lsls	r5, r5, #2
    cf70:	5d63      	ldrb	r3, [r4, r5]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d100      	bne.n	cf78 <LORAWAN_TxDone+0x404>
    cf76:	e61d      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    cf78:	4b39      	ldr	r3, [pc, #228]	; (d060 <LORAWAN_TxDone+0x4ec>)
    cf7a:	4798      	blx	r3
    cf7c:	2300      	movs	r3, #0
    cf7e:	900c      	str	r0, [sp, #48]	; 0x30
    cf80:	910d      	str	r1, [sp, #52]	; 0x34
    cf82:	5563      	strb	r3, [r4, r5]
    cf84:	4b38      	ldr	r3, [pc, #224]	; (d068 <LORAWAN_TxDone+0x4f4>)
    cf86:	a90c      	add	r1, sp, #48	; 0x30
    cf88:	5ce0      	ldrb	r0, [r4, r3]
    cf8a:	4b38      	ldr	r3, [pc, #224]	; (d06c <LORAWAN_TxDone+0x4f8>)
    cf8c:	4798      	blx	r3
    cf8e:	e611      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    cf90:	aa06      	add	r2, sp, #24
    cf92:	4937      	ldr	r1, [pc, #220]	; (d070 <LORAWAN_TxDone+0x4fc>)
    cf94:	e761      	b.n	ce5a <LORAWAN_TxDone+0x2e6>
    cf96:	2110      	movs	r1, #16
    cf98:	32d2      	adds	r2, #210	; 0xd2
    cf9a:	8817      	ldrh	r7, [r2, #0]
    cf9c:	aa02      	add	r2, sp, #8
    cf9e:	5651      	ldrsb	r1, [r2, r1]
    cfa0:	4e2c      	ldr	r6, [pc, #176]	; (d054 <LORAWAN_TxDone+0x4e0>)
    cfa2:	187a      	adds	r2, r7, r1
    cfa4:	9203      	str	r2, [sp, #12]
    cfa6:	002a      	movs	r2, r5
    cfa8:	32d0      	adds	r2, #208	; 0xd0
    cfaa:	8811      	ldrh	r1, [r2, #0]
    cfac:	27fa      	movs	r7, #250	; 0xfa
    cfae:	18c9      	adds	r1, r1, r3
    cfb0:	4b26      	ldr	r3, [pc, #152]	; (d04c <LORAWAN_TxDone+0x4d8>)
    cfb2:	00bf      	lsls	r7, r7, #2
    cfb4:	5ceb      	ldrb	r3, [r5, r3]
    cfb6:	0022      	movs	r2, r4
    cfb8:	1ac9      	subs	r1, r1, r3
    cfba:	002b      	movs	r3, r5
    cfbc:	33ed      	adds	r3, #237	; 0xed
    cfbe:	7818      	ldrb	r0, [r3, #0]
    cfc0:	4379      	muls	r1, r7
    cfc2:	4b23      	ldr	r3, [pc, #140]	; (d050 <LORAWAN_TxDone+0x4dc>)
    cfc4:	9400      	str	r4, [sp, #0]
    cfc6:	47b0      	blx	r6
    cfc8:	4b20      	ldr	r3, [pc, #128]	; (d04c <LORAWAN_TxDone+0x4d8>)
    cfca:	0022      	movs	r2, r4
    cfcc:	5ce9      	ldrb	r1, [r5, r3]
    cfce:	9b03      	ldr	r3, [sp, #12]
    cfd0:	1a59      	subs	r1, r3, r1
    cfd2:	002b      	movs	r3, r5
    cfd4:	33ee      	adds	r3, #238	; 0xee
    cfd6:	7818      	ldrb	r0, [r3, #0]
    cfd8:	4379      	muls	r1, r7
    cfda:	4b1f      	ldr	r3, [pc, #124]	; (d058 <LORAWAN_TxDone+0x4e4>)
    cfdc:	9400      	str	r4, [sp, #0]
    cfde:	47b0      	blx	r6
    cfe0:	002b      	movs	r3, r5
    cfe2:	33fd      	adds	r3, #253	; 0xfd
    cfe4:	781b      	ldrb	r3, [r3, #0]
    cfe6:	2b04      	cmp	r3, #4
    cfe8:	d1a6      	bne.n	cf38 <LORAWAN_TxDone+0x3c4>
    cfea:	2390      	movs	r3, #144	; 0x90
    cfec:	2201      	movs	r2, #1
    cfee:	2010      	movs	r0, #16
    cff0:	009b      	lsls	r3, r3, #2
    cff2:	54ea      	strb	r2, [r5, r3]
    cff4:	ab02      	add	r3, sp, #8
    cff6:	5618      	ldrsb	r0, [r3, r0]
    cff8:	4b1e      	ldr	r3, [pc, #120]	; (d074 <LORAWAN_TxDone+0x500>)
    cffa:	4798      	blx	r3
    cffc:	e79c      	b.n	cf38 <LORAWAN_TxDone+0x3c4>
    cffe:	075b      	lsls	r3, r3, #29
    d000:	d5b4      	bpl.n	cf6c <LORAWAN_TxDone+0x3f8>
    d002:	2022      	movs	r0, #34	; 0x22
    d004:	e7b0      	b.n	cf68 <LORAWAN_TxDone+0x3f4>
    d006:	491c      	ldr	r1, [pc, #112]	; (d078 <LORAWAN_TxDone+0x504>)
    d008:	784a      	ldrb	r2, [r1, #1]
    d00a:	780b      	ldrb	r3, [r1, #0]
    d00c:	0212      	lsls	r2, r2, #8
    d00e:	431a      	orrs	r2, r3
    d010:	788b      	ldrb	r3, [r1, #2]
    d012:	041b      	lsls	r3, r3, #16
    d014:	431a      	orrs	r2, r3
    d016:	78cb      	ldrb	r3, [r1, #3]
    d018:	061b      	lsls	r3, r3, #24
    d01a:	4313      	orrs	r3, r2
    d01c:	d100      	bne.n	d020 <LORAWAN_TxDone+0x4ac>
    d01e:	e5c9      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    d020:	4a16      	ldr	r2, [pc, #88]	; (d07c <LORAWAN_TxDone+0x508>)
    d022:	7811      	ldrb	r1, [r2, #0]
    d024:	221c      	movs	r2, #28
    d026:	2904      	cmp	r1, #4
    d028:	d003      	beq.n	d032 <LORAWAN_TxDone+0x4be>
    d02a:	2200      	movs	r2, #0
    d02c:	2c07      	cmp	r4, #7
    d02e:	d100      	bne.n	d032 <LORAWAN_TxDone+0x4be>
    d030:	0022      	movs	r2, r4
    d032:	0029      	movs	r1, r5
    d034:	2004      	movs	r0, #4
    d036:	31ff      	adds	r1, #255	; 0xff
    d038:	35fc      	adds	r5, #252	; 0xfc
    d03a:	7348      	strb	r0, [r1, #13]
    d03c:	744a      	strb	r2, [r1, #17]
    d03e:	68e8      	ldr	r0, [r5, #12]
    d040:	490f      	ldr	r1, [pc, #60]	; (d080 <LORAWAN_TxDone+0x50c>)
    d042:	4798      	blx	r3
    d044:	e5b6      	b.n	cbb4 <LORAWAN_TxDone+0x40>
    d046:	46c0      	nop			; (mov r8, r8)
    d048:	00007ead 	.word	0x00007ead
    d04c:	0000022b 	.word	0x0000022b
    d050:	0000c0b9 	.word	0x0000c0b9
    d054:	000095bd 	.word	0x000095bd
    d058:	0000d345 	.word	0x0000d345
    d05c:	00007f05 	.word	0x00007f05
    d060:	0000954d 	.word	0x0000954d
    d064:	20001484 	.word	0x20001484
    d068:	00000231 	.word	0x00000231
    d06c:	00009c71 	.word	0x00009c71
    d070:	200014f2 	.word	0x200014f2
    d074:	0000d3f1 	.word	0x0000d3f1
    d078:	200017e0 	.word	0x200017e0
    d07c:	200016cc 	.word	0x200016cc
    d080:	20001590 	.word	0x20001590

0000d084 <radioCallback>:
    d084:	4b10      	ldr	r3, [pc, #64]	; (d0c8 <radioCallback+0x44>)
    d086:	b510      	push	{r4, lr}
    d088:	7018      	strb	r0, [r3, #0]
    d08a:	3801      	subs	r0, #1
    d08c:	b2c0      	uxtb	r0, r0
    d08e:	000c      	movs	r4, r1
    d090:	281f      	cmp	r0, #31
    d092:	d809      	bhi.n	d0a8 <radioCallback+0x24>
    d094:	2301      	movs	r3, #1
    d096:	4083      	lsls	r3, r0
    d098:	4a0c      	ldr	r2, [pc, #48]	; (d0cc <radioCallback+0x48>)
    d09a:	4213      	tst	r3, r2
    d09c:	d109      	bne.n	d0b2 <radioCallback+0x2e>
    d09e:	220a      	movs	r2, #10
    d0a0:	4213      	tst	r3, r2
    d0a2:	d102      	bne.n	d0aa <radioCallback+0x26>
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	db08      	blt.n	d0ba <radioCallback+0x36>
    d0a8:	bd10      	pop	{r4, pc}
    d0aa:	0008      	movs	r0, r1
    d0ac:	4b08      	ldr	r3, [pc, #32]	; (d0d0 <radioCallback+0x4c>)
    d0ae:	4798      	blx	r3
    d0b0:	e7fa      	b.n	d0a8 <radioCallback+0x24>
    d0b2:	2002      	movs	r0, #2
    d0b4:	4b07      	ldr	r3, [pc, #28]	; (d0d4 <radioCallback+0x50>)
    d0b6:	4798      	blx	r3
    d0b8:	e7f6      	b.n	d0a8 <radioCallback+0x24>
    d0ba:	4b07      	ldr	r3, [pc, #28]	; (d0d8 <radioCallback+0x54>)
    d0bc:	681b      	ldr	r3, [r3, #0]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d0f2      	beq.n	d0a8 <radioCallback+0x24>
    d0c2:	4798      	blx	r3
    d0c4:	6020      	str	r0, [r4, #0]
    d0c6:	e7ef      	b.n	d0a8 <radioCallback+0x24>
    d0c8:	200016cc 	.word	0x200016cc
    d0cc:	00008081 	.word	0x00008081
    d0d0:	0000cb75 	.word	0x0000cb75
    d0d4:	0000d541 	.word	0x0000d541
    d0d8:	200017dc 	.word	0x200017dc

0000d0dc <LorawanCheckAndDoRetryOnTimeout>:
    d0dc:	b513      	push	{r0, r1, r4, lr}
    d0de:	4c33      	ldr	r4, [pc, #204]	; (d1ac <LorawanCheckAndDoRetryOnTimeout+0xd0>)
    d0e0:	0023      	movs	r3, r4
    d0e2:	3394      	adds	r3, #148	; 0x94
    d0e4:	781b      	ldrb	r3, [r3, #0]
    d0e6:	0022      	movs	r2, r4
    d0e8:	07db      	lsls	r3, r3, #31
    d0ea:	d54b      	bpl.n	d184 <LorawanCheckAndDoRetryOnTimeout+0xa8>
    d0ec:	0023      	movs	r3, r4
    d0ee:	32e4      	adds	r2, #228	; 0xe4
    d0f0:	33e2      	adds	r3, #226	; 0xe2
    d0f2:	7812      	ldrb	r2, [r2, #0]
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	429a      	cmp	r2, r3
    d0f8:	d836      	bhi.n	d168 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    d0fa:	4b2d      	ldr	r3, [pc, #180]	; (d1b0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    d0fc:	5ce3      	ldrb	r3, [r4, r3]
    d0fe:	2b00      	cmp	r3, #0
    d100:	d032      	beq.n	d168 <LorawanCheckAndDoRetryOnTimeout+0x8c>
    d102:	0023      	movs	r3, r4
    d104:	33fd      	adds	r3, #253	; 0xfd
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	2b01      	cmp	r3, #1
    d10a:	d119      	bne.n	d140 <LorawanCheckAndDoRetryOnTimeout+0x64>
    d10c:	0021      	movs	r1, r4
    d10e:	220e      	movs	r2, #14
    d110:	3184      	adds	r1, #132	; 0x84
    d112:	780b      	ldrb	r3, [r1, #0]
    d114:	4393      	bics	r3, r2
    d116:	001a      	movs	r2, r3
    d118:	230c      	movs	r3, #12
    d11a:	4313      	orrs	r3, r2
    d11c:	700b      	strb	r3, [r1, #0]
    d11e:	0023      	movs	r3, r4
    d120:	33da      	adds	r3, #218	; 0xda
    d122:	8819      	ldrh	r1, [r3, #0]
    d124:	4b23      	ldr	r3, [pc, #140]	; (d1b4 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    d126:	2200      	movs	r2, #0
    d128:	5ce3      	ldrb	r3, [r4, r3]
    d12a:	34f1      	adds	r4, #241	; 0xf1
    d12c:	1acb      	subs	r3, r1, r3
    d12e:	21fa      	movs	r1, #250	; 0xfa
    d130:	0089      	lsls	r1, r1, #2
    d132:	7820      	ldrb	r0, [r4, #0]
    d134:	4359      	muls	r1, r3
    d136:	9200      	str	r2, [sp, #0]
    d138:	4b1f      	ldr	r3, [pc, #124]	; (d1b8 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    d13a:	4c20      	ldr	r4, [pc, #128]	; (d1bc <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    d13c:	47a0      	blx	r4
    d13e:	bd13      	pop	{r0, r1, r4, pc}
    d140:	2b04      	cmp	r3, #4
    d142:	d1fc      	bne.n	d13e <LorawanCheckAndDoRetryOnTimeout+0x62>
    d144:	4b1e      	ldr	r3, [pc, #120]	; (d1c0 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    d146:	4798      	blx	r3
    d148:	34ce      	adds	r4, #206	; 0xce
    d14a:	300d      	adds	r0, #13
    d14c:	8823      	ldrh	r3, [r4, #0]
    d14e:	b280      	uxth	r0, r0
    d150:	4283      	cmp	r3, r0
    d152:	d802      	bhi.n	d15a <LorawanCheckAndDoRetryOnTimeout+0x7e>
    d154:	4b1b      	ldr	r3, [pc, #108]	; (d1c4 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    d156:	4798      	blx	r3
    d158:	e7f1      	b.n	d13e <LorawanCheckAndDoRetryOnTimeout+0x62>
    d15a:	200e      	movs	r0, #14
    d15c:	4b1a      	ldr	r3, [pc, #104]	; (d1c8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d15e:	4798      	blx	r3
    d160:	4b1a      	ldr	r3, [pc, #104]	; (d1cc <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d162:	4798      	blx	r3
    d164:	4b1a      	ldr	r3, [pc, #104]	; (d1d0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    d166:	e7f6      	b.n	d156 <LorawanCheckAndDoRetryOnTimeout+0x7a>
    d168:	2012      	movs	r0, #18
    d16a:	4b17      	ldr	r3, [pc, #92]	; (d1c8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d16c:	4798      	blx	r3
    d16e:	4b17      	ldr	r3, [pc, #92]	; (d1cc <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    d170:	4798      	blx	r3
    d172:	34fd      	adds	r4, #253	; 0xfd
    d174:	4b16      	ldr	r3, [pc, #88]	; (d1d0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    d176:	4798      	blx	r3
    d178:	7823      	ldrb	r3, [r4, #0]
    d17a:	2b04      	cmp	r3, #4
    d17c:	d1df      	bne.n	d13e <LorawanCheckAndDoRetryOnTimeout+0x62>
    d17e:	4b15      	ldr	r3, [pc, #84]	; (d1d4 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    d180:	4798      	blx	r3
    d182:	e7dc      	b.n	d13e <LorawanCheckAndDoRetryOnTimeout+0x62>
    d184:	0023      	movs	r3, r4
    d186:	32e3      	adds	r2, #227	; 0xe3
    d188:	33e1      	adds	r3, #225	; 0xe1
    d18a:	7812      	ldrb	r2, [r2, #0]
    d18c:	781b      	ldrb	r3, [r3, #0]
    d18e:	429a      	cmp	r2, r3
    d190:	d803      	bhi.n	d19a <LorawanCheckAndDoRetryOnTimeout+0xbe>
    d192:	4b07      	ldr	r3, [pc, #28]	; (d1b0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    d194:	5ce3      	ldrb	r3, [r4, r3]
    d196:	2b00      	cmp	r3, #0
    d198:	d1dc      	bne.n	d154 <LorawanCheckAndDoRetryOnTimeout+0x78>
    d19a:	4b0f      	ldr	r3, [pc, #60]	; (d1d8 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
    d19c:	4798      	blx	r3
    d19e:	4b0c      	ldr	r3, [pc, #48]	; (d1d0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    d1a0:	4798      	blx	r3
    d1a2:	2008      	movs	r0, #8
    d1a4:	4b08      	ldr	r3, [pc, #32]	; (d1c8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    d1a6:	4798      	blx	r3
    d1a8:	e7c9      	b.n	d13e <LorawanCheckAndDoRetryOnTimeout+0x62>
    d1aa:	46c0      	nop			; (mov r8, r8)
    d1ac:	20001484 	.word	0x20001484
    d1b0:	0000022a 	.word	0x0000022a
    d1b4:	0000022b 	.word	0x0000022b
    d1b8:	0000d1dd 	.word	0x0000d1dd
    d1bc:	000095bd 	.word	0x000095bd
    d1c0:	0000bced 	.word	0x0000bced
    d1c4:	0000c1a9 	.word	0x0000c1a9
    d1c8:	0000c4e1 	.word	0x0000c4e1
    d1cc:	0000bf95 	.word	0x0000bf95
    d1d0:	0000bc01 	.word	0x0000bc01
    d1d4:	0000db59 	.word	0x0000db59
    d1d8:	0000bfc5 	.word	0x0000bfc5

0000d1dc <AckRetransmissionCallback>:
    d1dc:	b510      	push	{r4, lr}
    d1de:	4c1c      	ldr	r4, [pc, #112]	; (d250 <AckRetransmissionCallback+0x74>)
    d1e0:	0023      	movs	r3, r4
    d1e2:	3384      	adds	r3, #132	; 0x84
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b7f      	cmp	r3, #127	; 0x7f
    d1e8:	d82d      	bhi.n	d246 <AckRetransmissionCallback+0x6a>
    d1ea:	0023      	movs	r3, r4
    d1ec:	33fd      	adds	r3, #253	; 0xfd
    d1ee:	781b      	ldrb	r3, [r3, #0]
    d1f0:	2b04      	cmp	r3, #4
    d1f2:	d102      	bne.n	d1fa <AckRetransmissionCallback+0x1e>
    d1f4:	4b17      	ldr	r3, [pc, #92]	; (d254 <AckRetransmissionCallback+0x78>)
    d1f6:	4798      	blx	r3
    d1f8:	e01e      	b.n	d238 <AckRetransmissionCallback+0x5c>
    d1fa:	2b01      	cmp	r3, #1
    d1fc:	d11c      	bne.n	d238 <AckRetransmissionCallback+0x5c>
    d1fe:	0022      	movs	r2, r4
    d200:	0023      	movs	r3, r4
    d202:	32e4      	adds	r2, #228	; 0xe4
    d204:	33e2      	adds	r3, #226	; 0xe2
    d206:	7812      	ldrb	r2, [r2, #0]
    d208:	781b      	ldrb	r3, [r3, #0]
    d20a:	429a      	cmp	r2, r3
    d20c:	d815      	bhi.n	d23a <AckRetransmissionCallback+0x5e>
    d20e:	4b12      	ldr	r3, [pc, #72]	; (d258 <AckRetransmissionCallback+0x7c>)
    d210:	5ce3      	ldrb	r3, [r4, r3]
    d212:	2b00      	cmp	r3, #0
    d214:	d011      	beq.n	d23a <AckRetransmissionCallback+0x5e>
    d216:	4b11      	ldr	r3, [pc, #68]	; (d25c <AckRetransmissionCallback+0x80>)
    d218:	4798      	blx	r3
    d21a:	34ce      	adds	r4, #206	; 0xce
    d21c:	300d      	adds	r0, #13
    d21e:	8823      	ldrh	r3, [r4, #0]
    d220:	b280      	uxth	r0, r0
    d222:	4283      	cmp	r3, r0
    d224:	d801      	bhi.n	d22a <AckRetransmissionCallback+0x4e>
    d226:	4b0e      	ldr	r3, [pc, #56]	; (d260 <AckRetransmissionCallback+0x84>)
    d228:	e7e5      	b.n	d1f6 <AckRetransmissionCallback+0x1a>
    d22a:	4b0e      	ldr	r3, [pc, #56]	; (d264 <AckRetransmissionCallback+0x88>)
    d22c:	4798      	blx	r3
    d22e:	4b0e      	ldr	r3, [pc, #56]	; (d268 <AckRetransmissionCallback+0x8c>)
    d230:	4798      	blx	r3
    d232:	200e      	movs	r0, #14
    d234:	4b0d      	ldr	r3, [pc, #52]	; (d26c <AckRetransmissionCallback+0x90>)
    d236:	4798      	blx	r3
    d238:	bd10      	pop	{r4, pc}
    d23a:	4b0a      	ldr	r3, [pc, #40]	; (d264 <AckRetransmissionCallback+0x88>)
    d23c:	4798      	blx	r3
    d23e:	4b0a      	ldr	r3, [pc, #40]	; (d268 <AckRetransmissionCallback+0x8c>)
    d240:	4798      	blx	r3
    d242:	2012      	movs	r0, #18
    d244:	e7f6      	b.n	d234 <AckRetransmissionCallback+0x58>
    d246:	4b07      	ldr	r3, [pc, #28]	; (d264 <AckRetransmissionCallback+0x88>)
    d248:	4798      	blx	r3
    d24a:	4b07      	ldr	r3, [pc, #28]	; (d268 <AckRetransmissionCallback+0x8c>)
    d24c:	e7d3      	b.n	d1f6 <AckRetransmissionCallback+0x1a>
    d24e:	46c0      	nop			; (mov r8, r8)
    d250:	20001484 	.word	0x20001484
    d254:	0000d0dd 	.word	0x0000d0dd
    d258:	0000022a 	.word	0x0000022a
    d25c:	0000bced 	.word	0x0000bced
    d260:	0000c1a9 	.word	0x0000c1a9
    d264:	0000bf95 	.word	0x0000bf95
    d268:	0000bc01 	.word	0x0000bc01
    d26c:	0000c4e1 	.word	0x0000c4e1

0000d270 <LorawanConfigureRadioForRX2>:
    d270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d272:	466b      	mov	r3, sp
    d274:	1cdd      	adds	r5, r3, #3
    d276:	2300      	movs	r3, #0
    d278:	702b      	strb	r3, [r5, #0]
    d27a:	2390      	movs	r3, #144	; 0x90
    d27c:	4c29      	ldr	r4, [pc, #164]	; (d324 <LorawanConfigureRadioForRX2+0xb4>)
    d27e:	009b      	lsls	r3, r3, #2
    d280:	5ce1      	ldrb	r1, [r4, r3]
    d282:	0006      	movs	r6, r0
    d284:	0023      	movs	r3, r4
    d286:	2900      	cmp	r1, #0
    d288:	d02f      	beq.n	d2ea <LorawanConfigureRadioForRX2+0x7a>
    d28a:	3373      	adds	r3, #115	; 0x73
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	702b      	strb	r3, [r5, #0]
    d290:	0023      	movs	r3, r4
    d292:	6f22      	ldr	r2, [r4, #112]	; 0x70
    d294:	336f      	adds	r3, #111	; 0x6f
    d296:	781b      	ldrb	r3, [r3, #0]
    d298:	0211      	lsls	r1, r2, #8
    d29a:	4319      	orrs	r1, r3
    d29c:	7828      	ldrb	r0, [r5, #0]
    d29e:	4b22      	ldr	r3, [pc, #136]	; (d328 <LorawanConfigureRadioForRX2+0xb8>)
    d2a0:	4798      	blx	r3
    d2a2:	2300      	movs	r3, #0
    d2a4:	0022      	movs	r2, r4
    d2a6:	af01      	add	r7, sp, #4
    d2a8:	703b      	strb	r3, [r7, #0]
    d2aa:	32fd      	adds	r2, #253	; 0xfd
    d2ac:	7812      	ldrb	r2, [r2, #0]
    d2ae:	2a04      	cmp	r2, #4
    d2b0:	d130      	bne.n	d314 <LorawanConfigureRadioForRX2+0xa4>
    d2b2:	0022      	movs	r2, r4
    d2b4:	3284      	adds	r2, #132	; 0x84
    d2b6:	7812      	ldrb	r2, [r2, #0]
    d2b8:	07d2      	lsls	r2, r2, #31
    d2ba:	d52b      	bpl.n	d314 <LorawanConfigureRadioForRX2+0xa4>
    d2bc:	2290      	movs	r2, #144	; 0x90
    d2be:	0092      	lsls	r2, r2, #2
    d2c0:	5ca2      	ldrb	r2, [r4, r2]
    d2c2:	429a      	cmp	r2, r3
    d2c4:	d026      	beq.n	d314 <LorawanConfigureRadioForRX2+0xa4>
    d2c6:	807b      	strh	r3, [r7, #2]
    d2c8:	0038      	movs	r0, r7
    d2ca:	4b18      	ldr	r3, [pc, #96]	; (d32c <LorawanConfigureRadioForRX2+0xbc>)
    d2cc:	4798      	blx	r3
    d2ce:	1e04      	subs	r4, r0, #0
    d2d0:	d00a      	beq.n	d2e8 <LorawanConfigureRadioForRX2+0x78>
    d2d2:	4b17      	ldr	r3, [pc, #92]	; (d330 <LorawanConfigureRadioForRX2+0xc0>)
    d2d4:	4798      	blx	r3
    d2d6:	4b17      	ldr	r3, [pc, #92]	; (d334 <LorawanConfigureRadioForRX2+0xc4>)
    d2d8:	4798      	blx	r3
    d2da:	4b17      	ldr	r3, [pc, #92]	; (d338 <LorawanConfigureRadioForRX2+0xc8>)
    d2dc:	4798      	blx	r3
    d2de:	2e00      	cmp	r6, #0
    d2e0:	d002      	beq.n	d2e8 <LorawanConfigureRadioForRX2+0x78>
    d2e2:	0020      	movs	r0, r4
    d2e4:	4b15      	ldr	r3, [pc, #84]	; (d33c <LorawanConfigureRadioForRX2+0xcc>)
    d2e6:	4798      	blx	r3
    d2e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d2ea:	3394      	adds	r3, #148	; 0x94
    d2ec:	781b      	ldrb	r3, [r3, #0]
    d2ee:	075b      	lsls	r3, r3, #29
    d2f0:	d50b      	bpl.n	d30a <LorawanConfigureRadioForRX2+0x9a>
    d2f2:	002a      	movs	r2, r5
    d2f4:	2009      	movs	r0, #9
    d2f6:	4b12      	ldr	r3, [pc, #72]	; (d340 <LorawanConfigureRadioForRX2+0xd0>)
    d2f8:	4798      	blx	r3
    d2fa:	0022      	movs	r2, r4
    d2fc:	0023      	movs	r3, r4
    d2fe:	326c      	adds	r2, #108	; 0x6c
    d300:	8811      	ldrh	r1, [r2, #0]
    d302:	336a      	adds	r3, #106	; 0x6a
    d304:	881b      	ldrh	r3, [r3, #0]
    d306:	0409      	lsls	r1, r1, #16
    d308:	e7c7      	b.n	d29a <LorawanConfigureRadioForRX2+0x2a>
    d30a:	0023      	movs	r3, r4
    d30c:	336e      	adds	r3, #110	; 0x6e
    d30e:	781b      	ldrb	r3, [r3, #0]
    d310:	702b      	strb	r3, [r5, #0]
    d312:	e7f2      	b.n	d2fa <LorawanConfigureRadioForRX2+0x8a>
    d314:	466b      	mov	r3, sp
    d316:	0029      	movs	r1, r5
    d318:	1d9a      	adds	r2, r3, #6
    d31a:	2003      	movs	r0, #3
    d31c:	4b08      	ldr	r3, [pc, #32]	; (d340 <LorawanConfigureRadioForRX2+0xd0>)
    d31e:	4798      	blx	r3
    d320:	e7d2      	b.n	d2c8 <LorawanConfigureRadioForRX2+0x58>
    d322:	46c0      	nop			; (mov r8, r8)
    d324:	20001484 	.word	0x20001484
    d328:	0000c04d 	.word	0x0000c04d
    d32c:	0000e2bd 	.word	0x0000e2bd
    d330:	0000bf95 	.word	0x0000bf95
    d334:	0000bfc5 	.word	0x0000bfc5
    d338:	0000bc01 	.word	0x0000bc01
    d33c:	0000c4e1 	.word	0x0000c4e1
    d340:	00007ead 	.word	0x00007ead

0000d344 <LorawanReceiveWindow2Callback>:
    d344:	b510      	push	{r4, lr}
    d346:	4c1d      	ldr	r4, [pc, #116]	; (d3bc <LorawanReceiveWindow2Callback+0x78>)
    d348:	0021      	movs	r1, r4
    d34a:	3184      	adds	r1, #132	; 0x84
    d34c:	780b      	ldrb	r3, [r1, #0]
    d34e:	b25a      	sxtb	r2, r3
    d350:	2a00      	cmp	r2, #0
    d352:	db1f      	blt.n	d394 <LorawanReceiveWindow2Callback+0x50>
    d354:	0022      	movs	r2, r4
    d356:	32fd      	adds	r2, #253	; 0xfd
    d358:	7812      	ldrb	r2, [r2, #0]
    d35a:	2a04      	cmp	r2, #4
    d35c:	d107      	bne.n	d36e <LorawanReceiveWindow2Callback+0x2a>
    d35e:	07db      	lsls	r3, r3, #31
    d360:	d505      	bpl.n	d36e <LorawanReceiveWindow2Callback+0x2a>
    d362:	2390      	movs	r3, #144	; 0x90
    d364:	2200      	movs	r2, #0
    d366:	009b      	lsls	r3, r3, #2
    d368:	54e2      	strb	r2, [r4, r3]
    d36a:	4b15      	ldr	r3, [pc, #84]	; (d3c0 <LorawanReceiveWindow2Callback+0x7c>)
    d36c:	4798      	blx	r3
    d36e:	4b15      	ldr	r3, [pc, #84]	; (d3c4 <LorawanReceiveWindow2Callback+0x80>)
    d370:	4798      	blx	r3
    d372:	2801      	cmp	r0, #1
    d374:	d10a      	bne.n	d38c <LorawanReceiveWindow2Callback+0x48>
    d376:	220e      	movs	r2, #14
    d378:	3484      	adds	r4, #132	; 0x84
    d37a:	7823      	ldrb	r3, [r4, #0]
    d37c:	4393      	bics	r3, r2
    d37e:	001a      	movs	r2, r3
    d380:	230a      	movs	r3, #10
    d382:	4313      	orrs	r3, r2
    d384:	7023      	strb	r3, [r4, #0]
    d386:	4b10      	ldr	r3, [pc, #64]	; (d3c8 <LorawanReceiveWindow2Callback+0x84>)
    d388:	4798      	blx	r3
    d38a:	bd10      	pop	{r4, pc}
    d38c:	2301      	movs	r3, #1
    d38e:	34f9      	adds	r4, #249	; 0xf9
    d390:	7023      	strb	r3, [r4, #0]
    d392:	e7fa      	b.n	d38a <LorawanReceiveWindow2Callback+0x46>
    d394:	2004      	movs	r0, #4
    d396:	3494      	adds	r4, #148	; 0x94
    d398:	7822      	ldrb	r2, [r4, #0]
    d39a:	4202      	tst	r2, r0
    d39c:	d007      	beq.n	d3ae <LorawanReceiveWindow2Callback+0x6a>
    d39e:	4382      	bics	r2, r0
    d3a0:	3803      	subs	r0, #3
    d3a2:	4383      	bics	r3, r0
    d3a4:	700b      	strb	r3, [r1, #0]
    d3a6:	210b      	movs	r1, #11
    d3a8:	4b08      	ldr	r3, [pc, #32]	; (d3cc <LorawanReceiveWindow2Callback+0x88>)
    d3aa:	7022      	strb	r2, [r4, #0]
    d3ac:	4798      	blx	r3
    d3ae:	4b08      	ldr	r3, [pc, #32]	; (d3d0 <LorawanReceiveWindow2Callback+0x8c>)
    d3b0:	4798      	blx	r3
    d3b2:	4b08      	ldr	r3, [pc, #32]	; (d3d4 <LorawanReceiveWindow2Callback+0x90>)
    d3b4:	4798      	blx	r3
    d3b6:	4b08      	ldr	r3, [pc, #32]	; (d3d8 <LorawanReceiveWindow2Callback+0x94>)
    d3b8:	4798      	blx	r3
    d3ba:	e7e6      	b.n	d38a <LorawanReceiveWindow2Callback+0x46>
    d3bc:	20001484 	.word	0x20001484
    d3c0:	0000d3dd 	.word	0x0000d3dd
    d3c4:	0000db59 	.word	0x0000db59
    d3c8:	0000d271 	.word	0x0000d271
    d3cc:	00008045 	.word	0x00008045
    d3d0:	0000bfc5 	.word	0x0000bfc5
    d3d4:	0000bf95 	.word	0x0000bf95
    d3d8:	0000bc01 	.word	0x0000bc01

0000d3dc <LorawanClasscReceiveWindowCallback>:
    d3dc:	2301      	movs	r3, #1
    d3de:	b507      	push	{r0, r1, r2, lr}
    d3e0:	a801      	add	r0, sp, #4
    d3e2:	7003      	strb	r3, [r0, #0]
    d3e4:	4b01      	ldr	r3, [pc, #4]	; (d3ec <LorawanClasscReceiveWindowCallback+0x10>)
    d3e6:	4798      	blx	r3
    d3e8:	bd07      	pop	{r0, r1, r2, pc}
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	0000e2bd 	.word	0x0000e2bd

0000d3f0 <LorawanClasscTxDone>:
    d3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d3f2:	4c27      	ldr	r4, [pc, #156]	; (d490 <LorawanClasscTxDone+0xa0>)
    d3f4:	0006      	movs	r6, r0
    d3f6:	0023      	movs	r3, r4
    d3f8:	33d2      	adds	r3, #210	; 0xd2
    d3fa:	881d      	ldrh	r5, [r3, #0]
    d3fc:	0023      	movs	r3, r4
    d3fe:	3394      	adds	r3, #148	; 0x94
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	2700      	movs	r7, #0
    d404:	07db      	lsls	r3, r3, #31
    d406:	d516      	bpl.n	d436 <LorawanClasscTxDone+0x46>
    d408:	0023      	movs	r3, r4
    d40a:	0022      	movs	r2, r4
    d40c:	33e2      	adds	r3, #226	; 0xe2
    d40e:	781b      	ldrb	r3, [r3, #0]
    d410:	32e4      	adds	r2, #228	; 0xe4
    d412:	7812      	ldrb	r2, [r2, #0]
    d414:	3301      	adds	r3, #1
    d416:	4293      	cmp	r3, r2
    d418:	db0d      	blt.n	d436 <LorawanClasscTxDone+0x46>
    d41a:	4b1e      	ldr	r3, [pc, #120]	; (d494 <LorawanClasscTxDone+0xa4>)
    d41c:	5ce7      	ldrb	r7, [r4, r3]
    d41e:	2f00      	cmp	r7, #0
    d420:	d009      	beq.n	d436 <LorawanClasscTxDone+0x46>
    d422:	4b1d      	ldr	r3, [pc, #116]	; (d498 <LorawanClasscTxDone+0xa8>)
    d424:	4798      	blx	r3
    d426:	4b1d      	ldr	r3, [pc, #116]	; (d49c <LorawanClasscTxDone+0xac>)
    d428:	491d      	ldr	r1, [pc, #116]	; (d4a0 <LorawanClasscTxDone+0xb0>)
    d42a:	4798      	blx	r3
    d42c:	23fa      	movs	r3, #250	; 0xfa
    d42e:	009b      	lsls	r3, r3, #2
    d430:	1975      	adds	r5, r6, r5
    d432:	18c9      	adds	r1, r1, r3
    d434:	194d      	adds	r5, r1, r5
    d436:	0023      	movs	r3, r4
    d438:	3394      	adds	r3, #148	; 0x94
    d43a:	781b      	ldrb	r3, [r3, #0]
    d43c:	07db      	lsls	r3, r3, #31
    d43e:	d411      	bmi.n	d464 <LorawanClasscTxDone+0x74>
    d440:	0023      	movs	r3, r4
    d442:	0022      	movs	r2, r4
    d444:	33e1      	adds	r3, #225	; 0xe1
    d446:	781b      	ldrb	r3, [r3, #0]
    d448:	32e3      	adds	r2, #227	; 0xe3
    d44a:	7812      	ldrb	r2, [r2, #0]
    d44c:	3301      	adds	r3, #1
    d44e:	4293      	cmp	r3, r2
    d450:	db08      	blt.n	d464 <LorawanClasscTxDone+0x74>
    d452:	4b10      	ldr	r3, [pc, #64]	; (d494 <LorawanClasscTxDone+0xa4>)
    d454:	5ce3      	ldrb	r3, [r4, r3]
    d456:	2b00      	cmp	r3, #0
    d458:	d004      	beq.n	d464 <LorawanClasscTxDone+0x74>
    d45a:	23fa      	movs	r3, #250	; 0xfa
    d45c:	00db      	lsls	r3, r3, #3
    d45e:	18f6      	adds	r6, r6, r3
    d460:	19ad      	adds	r5, r5, r6
    d462:	e001      	b.n	d468 <LorawanClasscTxDone+0x78>
    d464:	2f00      	cmp	r7, #0
    d466:	d0fb      	beq.n	d460 <LorawanClasscTxDone+0x70>
    d468:	2394      	movs	r3, #148	; 0x94
    d46a:	005b      	lsls	r3, r3, #1
    d46c:	5ce0      	ldrb	r0, [r4, r3]
    d46e:	4b0d      	ldr	r3, [pc, #52]	; (d4a4 <LorawanClasscTxDone+0xb4>)
    d470:	4798      	blx	r3
    d472:	34f1      	adds	r4, #241	; 0xf1
    d474:	21fa      	movs	r1, #250	; 0xfa
    d476:	7820      	ldrb	r0, [r4, #0]
    d478:	2400      	movs	r4, #0
    d47a:	0089      	lsls	r1, r1, #2
    d47c:	4369      	muls	r1, r5
    d47e:	0022      	movs	r2, r4
    d480:	4d09      	ldr	r5, [pc, #36]	; (d4a8 <LorawanClasscTxDone+0xb8>)
    d482:	9400      	str	r4, [sp, #0]
    d484:	4b09      	ldr	r3, [pc, #36]	; (d4ac <LorawanClasscTxDone+0xbc>)
    d486:	47a8      	blx	r5
    d488:	0020      	movs	r0, r4
    d48a:	4b09      	ldr	r3, [pc, #36]	; (d4b0 <LorawanClasscTxDone+0xc0>)
    d48c:	4798      	blx	r3
    d48e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d490:	20001484 	.word	0x20001484
    d494:	0000022a 	.word	0x0000022a
    d498:	00011679 	.word	0x00011679
    d49c:	0000e681 	.word	0x0000e681
    d4a0:	000007d1 	.word	0x000007d1
    d4a4:	000097bd 	.word	0x000097bd
    d4a8:	000095bd 	.word	0x000095bd
    d4ac:	0000d1dd 	.word	0x0000d1dd
    d4b0:	0000d271 	.word	0x0000d271

0000d4b4 <Lorawan_Pds_fid1_CB>:
    d4b4:	4770      	bx	lr
	...

0000d4b8 <Lorawan_Pds_fid2_CB>:
    d4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4ba:	4c1a      	ldr	r4, [pc, #104]	; (d524 <Lorawan_Pds_fid2_CB+0x6c>)
    d4bc:	2271      	movs	r2, #113	; 0x71
    d4be:	0025      	movs	r5, r4
    d4c0:	2701      	movs	r7, #1
    d4c2:	3584      	adds	r5, #132	; 0x84
    d4c4:	782b      	ldrb	r3, [r5, #0]
    d4c6:	4013      	ands	r3, r2
    d4c8:	702b      	strb	r3, [r5, #0]
    d4ca:	786b      	ldrb	r3, [r5, #1]
    d4cc:	43bb      	bics	r3, r7
    d4ce:	706b      	strb	r3, [r5, #1]
    d4d0:	4b15      	ldr	r3, [pc, #84]	; (d528 <Lorawan_Pds_fid2_CB+0x70>)
    d4d2:	5ce3      	ldrb	r3, [r4, r3]
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d018      	beq.n	d50a <Lorawan_Pds_fid2_CB+0x52>
    d4d8:	4914      	ldr	r1, [pc, #80]	; (d52c <Lorawan_Pds_fid2_CB+0x74>)
    d4da:	2006      	movs	r0, #6
    d4dc:	4e14      	ldr	r6, [pc, #80]	; (d530 <Lorawan_Pds_fid2_CB+0x78>)
    d4de:	47b0      	blx	r6
    d4e0:	2800      	cmp	r0, #0
    d4e2:	d002      	beq.n	d4ea <Lorawan_Pds_fid2_CB+0x32>
    d4e4:	782b      	ldrb	r3, [r5, #0]
    d4e6:	43bb      	bics	r3, r7
    d4e8:	702b      	strb	r3, [r5, #0]
    d4ea:	0023      	movs	r3, r4
    d4ec:	2501      	movs	r5, #1
    d4ee:	3384      	adds	r3, #132	; 0x84
    d4f0:	781b      	ldrb	r3, [r3, #0]
    d4f2:	422b      	tst	r3, r5
    d4f4:	d008      	beq.n	d508 <Lorawan_Pds_fid2_CB+0x50>
    d4f6:	7823      	ldrb	r3, [r4, #0]
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	d106      	bne.n	d50a <Lorawan_Pds_fid2_CB+0x52>
    d4fc:	490d      	ldr	r1, [pc, #52]	; (d534 <Lorawan_Pds_fid2_CB+0x7c>)
    d4fe:	2002      	movs	r0, #2
    d500:	47b0      	blx	r6
    d502:	490d      	ldr	r1, [pc, #52]	; (d538 <Lorawan_Pds_fid2_CB+0x80>)
    d504:	0028      	movs	r0, r5
    d506:	47b0      	blx	r6
    d508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d50a:	0020      	movs	r0, r4
    d50c:	0021      	movs	r1, r4
    d50e:	2210      	movs	r2, #16
    d510:	3115      	adds	r1, #21
    d512:	4d0a      	ldr	r5, [pc, #40]	; (d53c <Lorawan_Pds_fid2_CB+0x84>)
    d514:	3035      	adds	r0, #53	; 0x35
    d516:	47a8      	blx	r5
    d518:	0020      	movs	r0, r4
    d51a:	1d61      	adds	r1, r4, #5
    d51c:	2210      	movs	r2, #16
    d51e:	3025      	adds	r0, #37	; 0x25
    d520:	47a8      	blx	r5
    d522:	e7f1      	b.n	d508 <Lorawan_Pds_fid2_CB+0x50>
    d524:	20001484 	.word	0x20001484
    d528:	0000022d 	.word	0x0000022d
    d52c:	200014d9 	.word	0x200014d9
    d530:	00007fad 	.word	0x00007fad
    d534:	200014a9 	.word	0x200014a9
    d538:	200014b9 	.word	0x200014b9
    d53c:	00011475 	.word	0x00011475

0000d540 <LORAWAN_PostTask>:
    d540:	b510      	push	{r4, lr}
    d542:	4b08      	ldr	r3, [pc, #32]	; (d564 <LORAWAN_PostTask+0x24>)
    d544:	0004      	movs	r4, r0
    d546:	4798      	blx	r3
    d548:	2201      	movs	r2, #1
    d54a:	40a2      	lsls	r2, r4
    d54c:	4906      	ldr	r1, [pc, #24]	; (d568 <LORAWAN_PostTask+0x28>)
    d54e:	780b      	ldrb	r3, [r1, #0]
    d550:	4313      	orrs	r3, r2
    d552:	b2db      	uxtb	r3, r3
    d554:	700b      	strb	r3, [r1, #0]
    d556:	4b05      	ldr	r3, [pc, #20]	; (d56c <LORAWAN_PostTask+0x2c>)
    d558:	4798      	blx	r3
    d55a:	2004      	movs	r0, #4
    d55c:	4b04      	ldr	r3, [pc, #16]	; (d570 <LORAWAN_PostTask+0x30>)
    d55e:	4798      	blx	r3
    d560:	bd10      	pop	{r4, pc}
    d562:	46c0      	nop			; (mov r8, r8)
    d564:	00007dc9 	.word	0x00007dc9
    d568:	20000eb4 	.word	0x20000eb4
    d56c:	00007ddd 	.word	0x00007ddd
    d570:	00009cb5 	.word	0x00009cb5

0000d574 <RADIO_GetAttr>:
    d574:	b510      	push	{r4, lr}
    d576:	000b      	movs	r3, r1
    d578:	281f      	cmp	r0, #31
    d57a:	d900      	bls.n	d57e <RADIO_GetAttr+0xa>
    d57c:	e069      	b.n	d652 <RADIO_GetAttr+0xde>
    d57e:	f000 fefb 	bl	e378 <__gnu_thumb1_case_uqi>
    d582:	1410      	.short	0x1410
    d584:	68201c19 	.word	0x68201c19
    d588:	312e2a27 	.word	0x312e2a27
    d58c:	3d3a3734 	.word	0x3d3a3734
    d590:	46434054 	.word	0x46434054
    d594:	68245149 	.word	0x68245149
    d598:	68686859 	.word	0x68686859
    d59c:	5c686817 	.word	0x5c686817
    d5a0:	6360      	.short	0x6360
    d5a2:	4a2d      	ldr	r2, [pc, #180]	; (d658 <RADIO_GetAttr+0xe4>)
    d5a4:	7e12      	ldrb	r2, [r2, #24]
    d5a6:	701a      	strb	r2, [r3, #0]
    d5a8:	e002      	b.n	d5b0 <RADIO_GetAttr+0x3c>
    d5aa:	4a2b      	ldr	r2, [pc, #172]	; (d658 <RADIO_GetAttr+0xe4>)
    d5ac:	6812      	ldr	r2, [r2, #0]
    d5ae:	601a      	str	r2, [r3, #0]
    d5b0:	2000      	movs	r0, #0
    d5b2:	bd10      	pop	{r4, pc}
    d5b4:	4a28      	ldr	r2, [pc, #160]	; (d658 <RADIO_GetAttr+0xe4>)
    d5b6:	6852      	ldr	r2, [r2, #4]
    d5b8:	e7f9      	b.n	d5ae <RADIO_GetAttr+0x3a>
    d5ba:	4a27      	ldr	r2, [pc, #156]	; (d658 <RADIO_GetAttr+0xe4>)
    d5bc:	8a92      	ldrh	r2, [r2, #20]
    d5be:	801a      	strh	r2, [r3, #0]
    d5c0:	e7f6      	b.n	d5b0 <RADIO_GetAttr+0x3c>
    d5c2:	4a25      	ldr	r2, [pc, #148]	; (d658 <RADIO_GetAttr+0xe4>)
    d5c4:	3203      	adds	r2, #3
    d5c6:	7fd2      	ldrb	r2, [r2, #31]
    d5c8:	e7ed      	b.n	d5a6 <RADIO_GetAttr+0x32>
    d5ca:	4a23      	ldr	r2, [pc, #140]	; (d658 <RADIO_GetAttr+0xe4>)
    d5cc:	3204      	adds	r2, #4
    d5ce:	e7fa      	b.n	d5c6 <RADIO_GetAttr+0x52>
    d5d0:	4a21      	ldr	r2, [pc, #132]	; (d658 <RADIO_GetAttr+0xe4>)
    d5d2:	3206      	adds	r2, #6
    d5d4:	e7f7      	b.n	d5c6 <RADIO_GetAttr+0x52>
    d5d6:	4a20      	ldr	r2, [pc, #128]	; (d658 <RADIO_GetAttr+0xe4>)
    d5d8:	3236      	adds	r2, #54	; 0x36
    d5da:	7812      	ldrb	r2, [r2, #0]
    d5dc:	e7e3      	b.n	d5a6 <RADIO_GetAttr+0x32>
    d5de:	4a1e      	ldr	r2, [pc, #120]	; (d658 <RADIO_GetAttr+0xe4>)
    d5e0:	3205      	adds	r2, #5
    d5e2:	e7f0      	b.n	d5c6 <RADIO_GetAttr+0x52>
    d5e4:	4a1c      	ldr	r2, [pc, #112]	; (d658 <RADIO_GetAttr+0xe4>)
    d5e6:	3234      	adds	r2, #52	; 0x34
    d5e8:	e7f7      	b.n	d5da <RADIO_GetAttr+0x66>
    d5ea:	4a1b      	ldr	r2, [pc, #108]	; (d658 <RADIO_GetAttr+0xe4>)
    d5ec:	8ad2      	ldrh	r2, [r2, #22]
    d5ee:	e7e6      	b.n	d5be <RADIO_GetAttr+0x4a>
    d5f0:	4a19      	ldr	r2, [pc, #100]	; (d658 <RADIO_GetAttr+0xe4>)
    d5f2:	3233      	adds	r2, #51	; 0x33
    d5f4:	e7f1      	b.n	d5da <RADIO_GetAttr+0x66>
    d5f6:	4a18      	ldr	r2, [pc, #96]	; (d658 <RADIO_GetAttr+0xe4>)
    d5f8:	68d2      	ldr	r2, [r2, #12]
    d5fa:	e7d8      	b.n	d5ae <RADIO_GetAttr+0x3a>
    d5fc:	4a16      	ldr	r2, [pc, #88]	; (d658 <RADIO_GetAttr+0xe4>)
    d5fe:	6892      	ldr	r2, [r2, #8]
    d600:	e7d5      	b.n	d5ae <RADIO_GetAttr+0x3a>
    d602:	4a15      	ldr	r2, [pc, #84]	; (d658 <RADIO_GetAttr+0xe4>)
    d604:	3237      	adds	r2, #55	; 0x37
    d606:	e7e8      	b.n	d5da <RADIO_GetAttr+0x66>
    d608:	4a13      	ldr	r2, [pc, #76]	; (d658 <RADIO_GetAttr+0xe4>)
    d60a:	3238      	adds	r2, #56	; 0x38
    d60c:	e7e5      	b.n	d5da <RADIO_GetAttr+0x66>
    d60e:	4a12      	ldr	r2, [pc, #72]	; (d658 <RADIO_GetAttr+0xe4>)
    d610:	3239      	adds	r2, #57	; 0x39
    d612:	e7e2      	b.n	d5da <RADIO_GetAttr+0x66>
    d614:	4a10      	ldr	r2, [pc, #64]	; (d658 <RADIO_GetAttr+0xe4>)
    d616:	4911      	ldr	r1, [pc, #68]	; (d65c <RADIO_GetAttr+0xe8>)
    d618:	3202      	adds	r2, #2
    d61a:	7fd2      	ldrb	r2, [r2, #31]
    d61c:	0018      	movs	r0, r3
    d61e:	4b10      	ldr	r3, [pc, #64]	; (d660 <RADIO_GetAttr+0xec>)
    d620:	4798      	blx	r3
    d622:	e7c5      	b.n	d5b0 <RADIO_GetAttr+0x3c>
    d624:	4a0c      	ldr	r2, [pc, #48]	; (d658 <RADIO_GetAttr+0xe4>)
    d626:	3202      	adds	r2, #2
    d628:	e7cd      	b.n	d5c6 <RADIO_GetAttr+0x52>
    d62a:	4a0b      	ldr	r2, [pc, #44]	; (d658 <RADIO_GetAttr+0xe4>)
    d62c:	3232      	adds	r2, #50	; 0x32
    d62e:	7812      	ldrb	r2, [r2, #0]
    d630:	b252      	sxtb	r2, r2
    d632:	e7b8      	b.n	d5a6 <RADIO_GetAttr+0x32>
    d634:	4a08      	ldr	r2, [pc, #32]	; (d658 <RADIO_GetAttr+0xe4>)
    d636:	3235      	adds	r2, #53	; 0x35
    d638:	e7cf      	b.n	d5da <RADIO_GetAttr+0x66>
    d63a:	4907      	ldr	r1, [pc, #28]	; (d658 <RADIO_GetAttr+0xe4>)
    d63c:	2206      	movs	r2, #6
    d63e:	313c      	adds	r1, #60	; 0x3c
    d640:	e7ec      	b.n	d61c <RADIO_GetAttr+0xa8>
    d642:	4a05      	ldr	r2, [pc, #20]	; (d658 <RADIO_GetAttr+0xe4>)
    d644:	3254      	adds	r2, #84	; 0x54
    d646:	e7c8      	b.n	d5da <RADIO_GetAttr+0x66>
    d648:	4a03      	ldr	r2, [pc, #12]	; (d658 <RADIO_GetAttr+0xe4>)
    d64a:	3256      	adds	r2, #86	; 0x56
    d64c:	2100      	movs	r1, #0
    d64e:	5e52      	ldrsh	r2, [r2, r1]
    d650:	e7b5      	b.n	d5be <RADIO_GetAttr+0x4a>
    d652:	2005      	movs	r0, #5
    d654:	e7ad      	b.n	d5b2 <RADIO_GetAttr+0x3e>
    d656:	46c0      	nop			; (mov r8, r8)
    d658:	20001280 	.word	0x20001280
    d65c:	20001299 	.word	0x20001299
    d660:	00011475 	.word	0x00011475

0000d664 <RADIO_SetAttr>:
    d664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d666:	4b71      	ldr	r3, [pc, #452]	; (d82c <RADIO_SetAttr+0x1c8>)
    d668:	0004      	movs	r4, r0
    d66a:	000d      	movs	r5, r1
    d66c:	4798      	blx	r3
    d66e:	2304      	movs	r3, #4
    d670:	2801      	cmp	r0, #1
    d672:	d11a      	bne.n	d6aa <RADIO_SetAttr+0x46>
    d674:	2c1d      	cmp	r4, #29
    d676:	d900      	bls.n	d67a <RADIO_SetAttr+0x16>
    d678:	e0d5      	b.n	d826 <RADIO_SetAttr+0x1c2>
    d67a:	0020      	movs	r0, r4
    d67c:	f000 fe7c 	bl	e378 <__gnu_thumb1_case_uqi>
    d680:	605c4844 	.word	0x605c4844
    d684:	7770d364 	.word	0x7770d364
    d688:	908c8480 	.word	0x908c8480
    d68c:	a0d39c99 	.word	0xa0d39c99
    d690:	c2bab1a8 	.word	0xc2bab1a8
    d694:	d3cad369 	.word	0xd3cad369
    d698:	d30fd3d3 	.word	0xd30fd3d3
    d69c:	17d3      	.short	0x17d3
    d69e:	2303      	movs	r3, #3
    d6a0:	2d00      	cmp	r5, #0
    d6a2:	d002      	beq.n	d6aa <RADIO_SetAttr+0x46>
    d6a4:	4b62      	ldr	r3, [pc, #392]	; (d830 <RADIO_SetAttr+0x1cc>)
    d6a6:	611d      	str	r5, [r3, #16]
    d6a8:	2300      	movs	r3, #0
    d6aa:	0018      	movs	r0, r3
    d6ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d6ae:	796c      	ldrb	r4, [r5, #5]
    d6b0:	2c00      	cmp	r4, #0
    d6b2:	d109      	bne.n	d6c8 <RADIO_SetAttr+0x64>
    d6b4:	4b5e      	ldr	r3, [pc, #376]	; (d830 <RADIO_SetAttr+0x1cc>)
    d6b6:	001a      	movs	r2, r3
    d6b8:	649c      	str	r4, [r3, #72]	; 0x48
    d6ba:	879c      	strh	r4, [r3, #60]	; 0x3c
    d6bc:	87dc      	strh	r4, [r3, #62]	; 0x3e
    d6be:	3240      	adds	r2, #64	; 0x40
    d6c0:	3341      	adds	r3, #65	; 0x41
    d6c2:	7014      	strb	r4, [r2, #0]
    d6c4:	701c      	strb	r4, [r3, #0]
    d6c6:	e7ef      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d6c8:	882f      	ldrh	r7, [r5, #0]
    d6ca:	2303      	movs	r3, #3
    d6cc:	2f00      	cmp	r7, #0
    d6ce:	d0ec      	beq.n	d6aa <RADIO_SetAttr+0x46>
    d6d0:	792e      	ldrb	r6, [r5, #4]
    d6d2:	2e00      	cmp	r6, #0
    d6d4:	d0e9      	beq.n	d6aa <RADIO_SetAttr+0x46>
    d6d6:	20fa      	movs	r0, #250	; 0xfa
    d6d8:	2202      	movs	r2, #2
    d6da:	5eab      	ldrsh	r3, [r5, r2]
    d6dc:	0080      	lsls	r0, r0, #2
    d6de:	0031      	movs	r1, r6
    d6e0:	9301      	str	r3, [sp, #4]
    d6e2:	4378      	muls	r0, r7
    d6e4:	4b53      	ldr	r3, [pc, #332]	; (d834 <RADIO_SetAttr+0x1d0>)
    d6e6:	4798      	blx	r3
    d6e8:	4b53      	ldr	r3, [pc, #332]	; (d838 <RADIO_SetAttr+0x1d4>)
    d6ea:	4798      	blx	r3
    d6ec:	4b53      	ldr	r3, [pc, #332]	; (d83c <RADIO_SetAttr+0x1d8>)
    d6ee:	4798      	blx	r3
    d6f0:	466b      	mov	r3, sp
    d6f2:	4d4f      	ldr	r5, [pc, #316]	; (d830 <RADIO_SetAttr+0x1cc>)
    d6f4:	889b      	ldrh	r3, [r3, #4]
    d6f6:	64a8      	str	r0, [r5, #72]	; 0x48
    d6f8:	87eb      	strh	r3, [r5, #62]	; 0x3e
    d6fa:	002b      	movs	r3, r5
    d6fc:	87af      	strh	r7, [r5, #60]	; 0x3c
    d6fe:	3340      	adds	r3, #64	; 0x40
    d700:	3541      	adds	r5, #65	; 0x41
    d702:	701e      	strb	r6, [r3, #0]
    d704:	702c      	strb	r4, [r5, #0]
    d706:	e7cf      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d708:	782a      	ldrb	r2, [r5, #0]
    d70a:	4b49      	ldr	r3, [pc, #292]	; (d830 <RADIO_SetAttr+0x1cc>)
    d70c:	761a      	strb	r2, [r3, #24]
    d70e:	e7cb      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d710:	4b4b      	ldr	r3, [pc, #300]	; (d840 <RADIO_SetAttr+0x1dc>)
    d712:	682a      	ldr	r2, [r5, #0]
    d714:	18d1      	adds	r1, r2, r3
    d716:	4b4b      	ldr	r3, [pc, #300]	; (d844 <RADIO_SetAttr+0x1e0>)
    d718:	4299      	cmp	r1, r3
    d71a:	d90a      	bls.n	d732 <RADIO_SetAttr+0xce>
    d71c:	4b4a      	ldr	r3, [pc, #296]	; (d848 <RADIO_SetAttr+0x1e4>)
    d71e:	494b      	ldr	r1, [pc, #300]	; (d84c <RADIO_SetAttr+0x1e8>)
    d720:	18d3      	adds	r3, r2, r3
    d722:	428b      	cmp	r3, r1
    d724:	d905      	bls.n	d732 <RADIO_SetAttr+0xce>
    d726:	494a      	ldr	r1, [pc, #296]	; (d850 <RADIO_SetAttr+0x1ec>)
    d728:	484a      	ldr	r0, [pc, #296]	; (d854 <RADIO_SetAttr+0x1f0>)
    d72a:	1851      	adds	r1, r2, r1
    d72c:	2305      	movs	r3, #5
    d72e:	4281      	cmp	r1, r0
    d730:	d8bb      	bhi.n	d6aa <RADIO_SetAttr+0x46>
    d732:	4b3f      	ldr	r3, [pc, #252]	; (d830 <RADIO_SetAttr+0x1cc>)
    d734:	601a      	str	r2, [r3, #0]
    d736:	e7b7      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d738:	682a      	ldr	r2, [r5, #0]
    d73a:	4b3d      	ldr	r3, [pc, #244]	; (d830 <RADIO_SetAttr+0x1cc>)
    d73c:	605a      	str	r2, [r3, #4]
    d73e:	e7b3      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d740:	882a      	ldrh	r2, [r5, #0]
    d742:	4b3b      	ldr	r3, [pc, #236]	; (d830 <RADIO_SetAttr+0x1cc>)
    d744:	829a      	strh	r2, [r3, #20]
    d746:	e7af      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d748:	4b39      	ldr	r3, [pc, #228]	; (d830 <RADIO_SetAttr+0x1cc>)
    d74a:	782a      	ldrb	r2, [r5, #0]
    d74c:	3303      	adds	r3, #3
    d74e:	77da      	strb	r2, [r3, #31]
    d750:	e7aa      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d752:	782a      	ldrb	r2, [r5, #0]
    d754:	2305      	movs	r3, #5
    d756:	2a01      	cmp	r2, #1
    d758:	d8a7      	bhi.n	d6aa <RADIO_SetAttr+0x46>
    d75a:	4b35      	ldr	r3, [pc, #212]	; (d830 <RADIO_SetAttr+0x1cc>)
    d75c:	3304      	adds	r3, #4
    d75e:	e7f6      	b.n	d74e <RADIO_SetAttr+0xea>
    d760:	782a      	ldrb	r2, [r5, #0]
    d762:	2305      	movs	r3, #5
    d764:	2a01      	cmp	r2, #1
    d766:	d8a0      	bhi.n	d6aa <RADIO_SetAttr+0x46>
    d768:	4b31      	ldr	r3, [pc, #196]	; (d830 <RADIO_SetAttr+0x1cc>)
    d76a:	3306      	adds	r3, #6
    d76c:	e7ef      	b.n	d74e <RADIO_SetAttr+0xea>
    d76e:	782a      	ldrb	r2, [r5, #0]
    d770:	2305      	movs	r3, #5
    d772:	1fd1      	subs	r1, r2, #7
    d774:	2902      	cmp	r1, #2
    d776:	d898      	bhi.n	d6aa <RADIO_SetAttr+0x46>
    d778:	4b2d      	ldr	r3, [pc, #180]	; (d830 <RADIO_SetAttr+0x1cc>)
    d77a:	3336      	adds	r3, #54	; 0x36
    d77c:	701a      	strb	r2, [r3, #0]
    d77e:	e793      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d780:	4b2b      	ldr	r3, [pc, #172]	; (d830 <RADIO_SetAttr+0x1cc>)
    d782:	782a      	ldrb	r2, [r5, #0]
    d784:	3305      	adds	r3, #5
    d786:	e7e2      	b.n	d74e <RADIO_SetAttr+0xea>
    d788:	782a      	ldrb	r2, [r5, #0]
    d78a:	2305      	movs	r3, #5
    d78c:	2a01      	cmp	r2, #1
    d78e:	d900      	bls.n	d792 <RADIO_SetAttr+0x12e>
    d790:	e78b      	b.n	d6aa <RADIO_SetAttr+0x46>
    d792:	4b27      	ldr	r3, [pc, #156]	; (d830 <RADIO_SetAttr+0x1cc>)
    d794:	3334      	adds	r3, #52	; 0x34
    d796:	e7f1      	b.n	d77c <RADIO_SetAttr+0x118>
    d798:	882a      	ldrh	r2, [r5, #0]
    d79a:	4b25      	ldr	r3, [pc, #148]	; (d830 <RADIO_SetAttr+0x1cc>)
    d79c:	82da      	strh	r2, [r3, #22]
    d79e:	e783      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d7a0:	782a      	ldrb	r2, [r5, #0]
    d7a2:	2305      	movs	r3, #5
    d7a4:	1e51      	subs	r1, r2, #1
    d7a6:	2903      	cmp	r1, #3
    d7a8:	d900      	bls.n	d7ac <RADIO_SetAttr+0x148>
    d7aa:	e77e      	b.n	d6aa <RADIO_SetAttr+0x46>
    d7ac:	4b20      	ldr	r3, [pc, #128]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7ae:	3333      	adds	r3, #51	; 0x33
    d7b0:	e7e4      	b.n	d77c <RADIO_SetAttr+0x118>
    d7b2:	4b1f      	ldr	r3, [pc, #124]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7b4:	682a      	ldr	r2, [r5, #0]
    d7b6:	60da      	str	r2, [r3, #12]
    d7b8:	682a      	ldr	r2, [r5, #0]
    d7ba:	4b1d      	ldr	r3, [pc, #116]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7bc:	609a      	str	r2, [r3, #8]
    d7be:	e773      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d7c0:	782a      	ldrb	r2, [r5, #0]
    d7c2:	2305      	movs	r3, #5
    d7c4:	2a03      	cmp	r2, #3
    d7c6:	d900      	bls.n	d7ca <RADIO_SetAttr+0x166>
    d7c8:	e76f      	b.n	d6aa <RADIO_SetAttr+0x46>
    d7ca:	4b19      	ldr	r3, [pc, #100]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7cc:	3337      	adds	r3, #55	; 0x37
    d7ce:	e7d5      	b.n	d77c <RADIO_SetAttr+0x118>
    d7d0:	782a      	ldrb	r2, [r5, #0]
    d7d2:	2305      	movs	r3, #5
    d7d4:	1e51      	subs	r1, r2, #1
    d7d6:	2916      	cmp	r1, #22
    d7d8:	d900      	bls.n	d7dc <RADIO_SetAttr+0x178>
    d7da:	e766      	b.n	d6aa <RADIO_SetAttr+0x46>
    d7dc:	4b14      	ldr	r3, [pc, #80]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7de:	3338      	adds	r3, #56	; 0x38
    d7e0:	e7cc      	b.n	d77c <RADIO_SetAttr+0x118>
    d7e2:	782a      	ldrb	r2, [r5, #0]
    d7e4:	2305      	movs	r3, #5
    d7e6:	1e51      	subs	r1, r2, #1
    d7e8:	2916      	cmp	r1, #22
    d7ea:	d900      	bls.n	d7ee <RADIO_SetAttr+0x18a>
    d7ec:	e75d      	b.n	d6aa <RADIO_SetAttr+0x46>
    d7ee:	4b10      	ldr	r3, [pc, #64]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7f0:	3339      	adds	r3, #57	; 0x39
    d7f2:	e7c3      	b.n	d77c <RADIO_SetAttr+0x118>
    d7f4:	4b0e      	ldr	r3, [pc, #56]	; (d830 <RADIO_SetAttr+0x1cc>)
    d7f6:	0029      	movs	r1, r5
    d7f8:	3302      	adds	r3, #2
    d7fa:	7fda      	ldrb	r2, [r3, #31]
    d7fc:	4816      	ldr	r0, [pc, #88]	; (d858 <RADIO_SetAttr+0x1f4>)
    d7fe:	4b17      	ldr	r3, [pc, #92]	; (d85c <RADIO_SetAttr+0x1f8>)
    d800:	4798      	blx	r3
    d802:	e751      	b.n	d6a8 <RADIO_SetAttr+0x44>
    d804:	782b      	ldrb	r3, [r5, #0]
    d806:	1c1a      	adds	r2, r3, #0
    d808:	2b08      	cmp	r3, #8
    d80a:	d900      	bls.n	d80e <RADIO_SetAttr+0x1aa>
    d80c:	2208      	movs	r2, #8
    d80e:	4b08      	ldr	r3, [pc, #32]	; (d830 <RADIO_SetAttr+0x1cc>)
    d810:	3302      	adds	r3, #2
    d812:	e79c      	b.n	d74e <RADIO_SetAttr+0xea>
    d814:	2305      	movs	r3, #5
    d816:	782a      	ldrb	r2, [r5, #0]
    d818:	1fd1      	subs	r1, r2, #7
    d81a:	4299      	cmp	r1, r3
    d81c:	d900      	bls.n	d820 <RADIO_SetAttr+0x1bc>
    d81e:	e744      	b.n	d6aa <RADIO_SetAttr+0x46>
    d820:	4b03      	ldr	r3, [pc, #12]	; (d830 <RADIO_SetAttr+0x1cc>)
    d822:	3335      	adds	r3, #53	; 0x35
    d824:	e7aa      	b.n	d77c <RADIO_SetAttr+0x118>
    d826:	2305      	movs	r3, #5
    d828:	e73f      	b.n	d6aa <RADIO_SetAttr+0x46>
    d82a:	46c0      	nop			; (mov r8, r8)
    d82c:	0000db59 	.word	0x0000db59
    d830:	20001280 	.word	0x20001280
    d834:	0000e4b5 	.word	0x0000e4b5
    d838:	0000f6f9 	.word	0x0000f6f9
    d83c:	0000e811 	.word	0x0000e811
    d840:	f7d58bc0 	.word	0xf7d58bc0
    d844:	0243d580 	.word	0x0243d580
    d848:	e78fe580 	.word	0xe78fe580
    d84c:	06dac2c0 	.word	0x06dac2c0
    d850:	cc9eec80 	.word	0xcc9eec80
    d854:	096ae380 	.word	0x096ae380
    d858:	20001299 	.word	0x20001299
    d85c:	00011475 	.word	0x00011475

0000d860 <RADIO_Init>:
    d860:	b510      	push	{r4, lr}
    d862:	4b0c      	ldr	r3, [pc, #48]	; (d894 <RADIO_Init+0x34>)
    d864:	4798      	blx	r3
    d866:	4b0c      	ldr	r3, [pc, #48]	; (d898 <RADIO_Init+0x38>)
    d868:	201f      	movs	r0, #31
    d86a:	4798      	blx	r3
    d86c:	4c0b      	ldr	r4, [pc, #44]	; (d89c <RADIO_Init+0x3c>)
    d86e:	490c      	ldr	r1, [pc, #48]	; (d8a0 <RADIO_Init+0x40>)
    d870:	2001      	movs	r0, #1
    d872:	47a0      	blx	r4
    d874:	490b      	ldr	r1, [pc, #44]	; (d8a4 <RADIO_Init+0x44>)
    d876:	2002      	movs	r0, #2
    d878:	47a0      	blx	r4
    d87a:	490b      	ldr	r1, [pc, #44]	; (d8a8 <RADIO_Init+0x48>)
    d87c:	2004      	movs	r0, #4
    d87e:	47a0      	blx	r4
    d880:	490a      	ldr	r1, [pc, #40]	; (d8ac <RADIO_Init+0x4c>)
    d882:	2008      	movs	r0, #8
    d884:	47a0      	blx	r4
    d886:	490a      	ldr	r1, [pc, #40]	; (d8b0 <RADIO_Init+0x50>)
    d888:	2010      	movs	r0, #16
    d88a:	47a0      	blx	r4
    d88c:	4909      	ldr	r1, [pc, #36]	; (d8b4 <RADIO_Init+0x54>)
    d88e:	2020      	movs	r0, #32
    d890:	47a0      	blx	r4
    d892:	bd10      	pop	{r4, pc}
    d894:	0000e0c9 	.word	0x0000e0c9
    d898:	0000db65 	.word	0x0000db65
    d89c:	00007b5d 	.word	0x00007b5d
    d8a0:	0000d959 	.word	0x0000d959
    d8a4:	0000d9d1 	.word	0x0000d9d1
    d8a8:	0000da41 	.word	0x0000da41
    d8ac:	0000da91 	.word	0x0000da91
    d8b0:	0000dab9 	.word	0x0000dab9
    d8b4:	0000dae1 	.word	0x0000dae1

0000d8b8 <Radio_WriteFrequency>:
    d8b8:	b570      	push	{r4, r5, r6, lr}
    d8ba:	490d      	ldr	r1, [pc, #52]	; (d8f0 <Radio_WriteFrequency+0x38>)
    d8bc:	4d0d      	ldr	r5, [pc, #52]	; (d8f4 <Radio_WriteFrequency+0x3c>)
    d8be:	0006      	movs	r6, r0
    d8c0:	47a8      	blx	r5
    d8c2:	4b0d      	ldr	r3, [pc, #52]	; (d8f8 <Radio_WriteFrequency+0x40>)
    d8c4:	0004      	movs	r4, r0
    d8c6:	490a      	ldr	r1, [pc, #40]	; (d8f0 <Radio_WriteFrequency+0x38>)
    d8c8:	0030      	movs	r0, r6
    d8ca:	4798      	blx	r3
    d8cc:	0208      	lsls	r0, r1, #8
    d8ce:	4908      	ldr	r1, [pc, #32]	; (d8f0 <Radio_WriteFrequency+0x38>)
    d8d0:	47a8      	blx	r5
    d8d2:	0224      	lsls	r4, r4, #8
    d8d4:	1904      	adds	r4, r0, r4
    d8d6:	0c21      	lsrs	r1, r4, #16
    d8d8:	4d08      	ldr	r5, [pc, #32]	; (d8fc <Radio_WriteFrequency+0x44>)
    d8da:	b2c9      	uxtb	r1, r1
    d8dc:	2006      	movs	r0, #6
    d8de:	47a8      	blx	r5
    d8e0:	0a21      	lsrs	r1, r4, #8
    d8e2:	b2c9      	uxtb	r1, r1
    d8e4:	2007      	movs	r0, #7
    d8e6:	47a8      	blx	r5
    d8e8:	b2e1      	uxtb	r1, r4
    d8ea:	2008      	movs	r0, #8
    d8ec:	47a8      	blx	r5
    d8ee:	bd70      	pop	{r4, r5, r6, pc}
    d8f0:	00003d09 	.word	0x00003d09
    d8f4:	0000e3a1 	.word	0x0000e3a1
    d8f8:	0000e4ad 	.word	0x0000e4ad
    d8fc:	000075e1 	.word	0x000075e1

0000d900 <RADIO_getMappingAndOpmode>:
    d900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d902:	0006      	movs	r6, r0
    d904:	4d06      	ldr	r5, [pc, #24]	; (d920 <RADIO_getMappingAndOpmode+0x20>)
    d906:	2040      	movs	r0, #64	; 0x40
    d908:	001f      	movs	r7, r3
    d90a:	0014      	movs	r4, r2
    d90c:	9101      	str	r1, [sp, #4]
    d90e:	47a8      	blx	r5
    d910:	4004      	ands	r4, r0
    d912:	413c      	asrs	r4, r7
    d914:	2001      	movs	r0, #1
    d916:	7034      	strb	r4, [r6, #0]
    d918:	47a8      	blx	r5
    d91a:	9b01      	ldr	r3, [sp, #4]
    d91c:	7018      	strb	r0, [r3, #0]
    d91e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d920:	0000762d 	.word	0x0000762d

0000d924 <RADIO_UnhandledInterrupt.part.0>:
    d924:	b510      	push	{r4, lr}
    d926:	21ff      	movs	r1, #255	; 0xff
    d928:	2012      	movs	r0, #18
    d92a:	4b01      	ldr	r3, [pc, #4]	; (d930 <RADIO_UnhandledInterrupt.part.0+0xc>)
    d92c:	4798      	blx	r3
    d92e:	bd10      	pop	{r4, pc}
    d930:	000075e1 	.word	0x000075e1

0000d934 <RADIO_UnhandledInterrupt>:
    d934:	b510      	push	{r4, lr}
    d936:	2801      	cmp	r0, #1
    d938:	d102      	bne.n	d940 <RADIO_UnhandledInterrupt+0xc>
    d93a:	4b05      	ldr	r3, [pc, #20]	; (d950 <RADIO_UnhandledInterrupt+0x1c>)
    d93c:	4798      	blx	r3
    d93e:	bd10      	pop	{r4, pc}
    d940:	21ff      	movs	r1, #255	; 0xff
    d942:	203e      	movs	r0, #62	; 0x3e
    d944:	4c03      	ldr	r4, [pc, #12]	; (d954 <RADIO_UnhandledInterrupt+0x20>)
    d946:	47a0      	blx	r4
    d948:	21ff      	movs	r1, #255	; 0xff
    d94a:	203f      	movs	r0, #63	; 0x3f
    d94c:	47a0      	blx	r4
    d94e:	e7f6      	b.n	d93e <RADIO_UnhandledInterrupt+0xa>
    d950:	0000d925 	.word	0x0000d925
    d954:	000075e1 	.word	0x000075e1

0000d958 <RADIO_DIO0>:
    d958:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d95a:	466b      	mov	r3, sp
    d95c:	1ddc      	adds	r4, r3, #7
    d95e:	1d9d      	adds	r5, r3, #6
    d960:	22c0      	movs	r2, #192	; 0xc0
    d962:	2306      	movs	r3, #6
    d964:	0028      	movs	r0, r5
    d966:	0021      	movs	r1, r4
    d968:	4e12      	ldr	r6, [pc, #72]	; (d9b4 <RADIO_DIO0+0x5c>)
    d96a:	47b0      	blx	r6
    d96c:	7823      	ldrb	r3, [r4, #0]
    d96e:	7828      	ldrb	r0, [r5, #0]
    d970:	b25a      	sxtb	r2, r3
    d972:	b2c0      	uxtb	r0, r0
    d974:	2a00      	cmp	r2, #0
    d976:	da0b      	bge.n	d990 <RADIO_DIO0+0x38>
    d978:	2800      	cmp	r0, #0
    d97a:	d004      	beq.n	d986 <RADIO_DIO0+0x2e>
    d97c:	2801      	cmp	r0, #1
    d97e:	d005      	beq.n	d98c <RADIO_DIO0+0x34>
    d980:	4b0d      	ldr	r3, [pc, #52]	; (d9b8 <RADIO_DIO0+0x60>)
    d982:	4798      	blx	r3
    d984:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d986:	4b0d      	ldr	r3, [pc, #52]	; (d9bc <RADIO_DIO0+0x64>)
    d988:	4798      	blx	r3
    d98a:	e7fb      	b.n	d984 <RADIO_DIO0+0x2c>
    d98c:	4b0c      	ldr	r3, [pc, #48]	; (d9c0 <RADIO_DIO0+0x68>)
    d98e:	e7fb      	b.n	d988 <RADIO_DIO0+0x30>
    d990:	2800      	cmp	r0, #0
    d992:	d10a      	bne.n	d9aa <RADIO_DIO0+0x52>
    d994:	2207      	movs	r2, #7
    d996:	4013      	ands	r3, r2
    d998:	7023      	strb	r3, [r4, #0]
    d99a:	2b03      	cmp	r3, #3
    d99c:	d101      	bne.n	d9a2 <RADIO_DIO0+0x4a>
    d99e:	4b09      	ldr	r3, [pc, #36]	; (d9c4 <RADIO_DIO0+0x6c>)
    d9a0:	e7f2      	b.n	d988 <RADIO_DIO0+0x30>
    d9a2:	2b05      	cmp	r3, #5
    d9a4:	d102      	bne.n	d9ac <RADIO_DIO0+0x54>
    d9a6:	4b08      	ldr	r3, [pc, #32]	; (d9c8 <RADIO_DIO0+0x70>)
    d9a8:	e7ee      	b.n	d988 <RADIO_DIO0+0x30>
    d9aa:	2000      	movs	r0, #0
    d9ac:	4b07      	ldr	r3, [pc, #28]	; (d9cc <RADIO_DIO0+0x74>)
    d9ae:	4798      	blx	r3
    d9b0:	e7e8      	b.n	d984 <RADIO_DIO0+0x2c>
    d9b2:	46c0      	nop			; (mov r8, r8)
    d9b4:	0000d901 	.word	0x0000d901
    d9b8:	0000d925 	.word	0x0000d925
    d9bc:	0000dee9 	.word	0x0000dee9
    d9c0:	0000dded 	.word	0x0000dded
    d9c4:	0000de69 	.word	0x0000de69
    d9c8:	0000df65 	.word	0x0000df65
    d9cc:	0000d935 	.word	0x0000d935

0000d9d0 <RADIO_DIO1>:
    d9d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d9d2:	466b      	mov	r3, sp
    d9d4:	1ddc      	adds	r4, r3, #7
    d9d6:	1d9d      	adds	r5, r3, #6
    d9d8:	2230      	movs	r2, #48	; 0x30
    d9da:	2304      	movs	r3, #4
    d9dc:	0021      	movs	r1, r4
    d9de:	0028      	movs	r0, r5
    d9e0:	4e11      	ldr	r6, [pc, #68]	; (da28 <RADIO_DIO1+0x58>)
    d9e2:	47b0      	blx	r6
    d9e4:	7822      	ldrb	r2, [r4, #0]
    d9e6:	782b      	ldrb	r3, [r5, #0]
    d9e8:	b251      	sxtb	r1, r2
    d9ea:	2900      	cmp	r1, #0
    d9ec:	da0c      	bge.n	da08 <RADIO_DIO1+0x38>
    d9ee:	b2db      	uxtb	r3, r3
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d004      	beq.n	d9fe <RADIO_DIO1+0x2e>
    d9f4:	2b01      	cmp	r3, #1
    d9f6:	d005      	beq.n	da04 <RADIO_DIO1+0x34>
    d9f8:	4b0c      	ldr	r3, [pc, #48]	; (da2c <RADIO_DIO1+0x5c>)
    d9fa:	4798      	blx	r3
    d9fc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d9fe:	4b0c      	ldr	r3, [pc, #48]	; (da30 <RADIO_DIO1+0x60>)
    da00:	4798      	blx	r3
    da02:	e7fb      	b.n	d9fc <RADIO_DIO1+0x2c>
    da04:	4b0b      	ldr	r3, [pc, #44]	; (da34 <RADIO_DIO1+0x64>)
    da06:	e7fb      	b.n	da00 <RADIO_DIO1+0x30>
    da08:	2107      	movs	r1, #7
    da0a:	b2db      	uxtb	r3, r3
    da0c:	400a      	ands	r2, r1
    da0e:	7022      	strb	r2, [r4, #0]
    da10:	2b00      	cmp	r3, #0
    da12:	d005      	beq.n	da20 <RADIO_DIO1+0x50>
    da14:	2b01      	cmp	r3, #1
    da16:	d1f1      	bne.n	d9fc <RADIO_DIO1+0x2c>
    da18:	2a03      	cmp	r2, #3
    da1a:	d1ef      	bne.n	d9fc <RADIO_DIO1+0x2c>
    da1c:	4b06      	ldr	r3, [pc, #24]	; (da38 <RADIO_DIO1+0x68>)
    da1e:	e7ef      	b.n	da00 <RADIO_DIO1+0x30>
    da20:	4b06      	ldr	r3, [pc, #24]	; (da3c <RADIO_DIO1+0x6c>)
    da22:	2a05      	cmp	r2, #5
    da24:	d1ea      	bne.n	d9fc <RADIO_DIO1+0x2c>
    da26:	e7eb      	b.n	da00 <RADIO_DIO1+0x30>
    da28:	0000d901 	.word	0x0000d901
    da2c:	0000d925 	.word	0x0000d925
    da30:	0000dda9 	.word	0x0000dda9
    da34:	00009ec5 	.word	0x00009ec5
    da38:	0000dd25 	.word	0x0000dd25
    da3c:	0000dc89 	.word	0x0000dc89

0000da40 <RADIO_DIO2>:
    da40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    da42:	466b      	mov	r3, sp
    da44:	1ddc      	adds	r4, r3, #7
    da46:	1d9d      	adds	r5, r3, #6
    da48:	220c      	movs	r2, #12
    da4a:	2302      	movs	r3, #2
    da4c:	0021      	movs	r1, r4
    da4e:	0028      	movs	r0, r5
    da50:	4e0b      	ldr	r6, [pc, #44]	; (da80 <RADIO_DIO2+0x40>)
    da52:	47b0      	blx	r6
    da54:	7823      	ldrb	r3, [r4, #0]
    da56:	782a      	ldrb	r2, [r5, #0]
    da58:	b259      	sxtb	r1, r3
    da5a:	2900      	cmp	r1, #0
    da5c:	da05      	bge.n	da6a <RADIO_DIO2+0x2a>
    da5e:	4b09      	ldr	r3, [pc, #36]	; (da84 <RADIO_DIO2+0x44>)
    da60:	2a02      	cmp	r2, #2
    da62:	d90a      	bls.n	da7a <RADIO_DIO2+0x3a>
    da64:	4b08      	ldr	r3, [pc, #32]	; (da88 <RADIO_DIO2+0x48>)
    da66:	4798      	blx	r3
    da68:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    da6a:	2107      	movs	r1, #7
    da6c:	400b      	ands	r3, r1
    da6e:	7023      	strb	r3, [r4, #0]
    da70:	2a03      	cmp	r2, #3
    da72:	d1f9      	bne.n	da68 <RADIO_DIO2+0x28>
    da74:	2b05      	cmp	r3, #5
    da76:	d1f7      	bne.n	da68 <RADIO_DIO2+0x28>
    da78:	4b04      	ldr	r3, [pc, #16]	; (da8c <RADIO_DIO2+0x4c>)
    da7a:	4798      	blx	r3
    da7c:	e7f4      	b.n	da68 <RADIO_DIO2+0x28>
    da7e:	46c0      	nop			; (mov r8, r8)
    da80:	0000d901 	.word	0x0000d901
    da84:	00009ec5 	.word	0x00009ec5
    da88:	0000d925 	.word	0x0000d925
    da8c:	0000dc59 	.word	0x0000dc59

0000da90 <RADIO_DIO3>:
    da90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da92:	466b      	mov	r3, sp
    da94:	4668      	mov	r0, sp
    da96:	1ddc      	adds	r4, r3, #7
    da98:	2203      	movs	r2, #3
    da9a:	2300      	movs	r3, #0
    da9c:	0021      	movs	r1, r4
    da9e:	3006      	adds	r0, #6
    daa0:	4d03      	ldr	r5, [pc, #12]	; (dab0 <RADIO_DIO3+0x20>)
    daa2:	47a8      	blx	r5
    daa4:	7823      	ldrb	r3, [r4, #0]
    daa6:	2b7f      	cmp	r3, #127	; 0x7f
    daa8:	d901      	bls.n	daae <RADIO_DIO3+0x1e>
    daaa:	4b02      	ldr	r3, [pc, #8]	; (dab4 <RADIO_DIO3+0x24>)
    daac:	4798      	blx	r3
    daae:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dab0:	0000d901 	.word	0x0000d901
    dab4:	0000d925 	.word	0x0000d925

0000dab8 <RADIO_DIO4>:
    dab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    daba:	466b      	mov	r3, sp
    dabc:	4668      	mov	r0, sp
    dabe:	1ddc      	adds	r4, r3, #7
    dac0:	2306      	movs	r3, #6
    dac2:	22c0      	movs	r2, #192	; 0xc0
    dac4:	18c0      	adds	r0, r0, r3
    dac6:	0021      	movs	r1, r4
    dac8:	4d03      	ldr	r5, [pc, #12]	; (dad8 <RADIO_DIO4+0x20>)
    daca:	47a8      	blx	r5
    dacc:	7823      	ldrb	r3, [r4, #0]
    dace:	2b7f      	cmp	r3, #127	; 0x7f
    dad0:	d901      	bls.n	dad6 <RADIO_DIO4+0x1e>
    dad2:	4b02      	ldr	r3, [pc, #8]	; (dadc <RADIO_DIO4+0x24>)
    dad4:	4798      	blx	r3
    dad6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    dad8:	0000d901 	.word	0x0000d901
    dadc:	0000d925 	.word	0x0000d925

0000dae0 <RADIO_DIO5>:
    dae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dae2:	466b      	mov	r3, sp
    dae4:	4668      	mov	r0, sp
    dae6:	1ddc      	adds	r4, r3, #7
    dae8:	2230      	movs	r2, #48	; 0x30
    daea:	2304      	movs	r3, #4
    daec:	0021      	movs	r1, r4
    daee:	3006      	adds	r0, #6
    daf0:	4d03      	ldr	r5, [pc, #12]	; (db00 <RADIO_DIO5+0x20>)
    daf2:	47a8      	blx	r5
    daf4:	7823      	ldrb	r3, [r4, #0]
    daf6:	2b7f      	cmp	r3, #127	; 0x7f
    daf8:	d901      	bls.n	dafe <RADIO_DIO5+0x1e>
    dafa:	4b02      	ldr	r3, [pc, #8]	; (db04 <RADIO_DIO5+0x24>)
    dafc:	4798      	blx	r3
    dafe:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    db00:	0000d901 	.word	0x0000d901
    db04:	0000d925 	.word	0x0000d925

0000db08 <radioPostTask>:
    db08:	b510      	push	{r4, lr}
    db0a:	0004      	movs	r4, r0
    db0c:	4b05      	ldr	r3, [pc, #20]	; (db24 <radioPostTask+0x1c>)
    db0e:	4798      	blx	r3
    db10:	4b05      	ldr	r3, [pc, #20]	; (db28 <radioPostTask+0x20>)
    db12:	8818      	ldrh	r0, [r3, #0]
    db14:	4320      	orrs	r0, r4
    db16:	8018      	strh	r0, [r3, #0]
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <radioPostTask+0x24>)
    db1a:	4798      	blx	r3
    db1c:	2002      	movs	r0, #2
    db1e:	4b04      	ldr	r3, [pc, #16]	; (db30 <radioPostTask+0x28>)
    db20:	4798      	blx	r3
    db22:	bd10      	pop	{r4, pc}
    db24:	00007dc9 	.word	0x00007dc9
    db28:	20000eb6 	.word	0x20000eb6
    db2c:	00007ddd 	.word	0x00007ddd
    db30:	00009cb5 	.word	0x00009cb5

0000db34 <radioClearTask>:
    db34:	b510      	push	{r4, lr}
    db36:	0004      	movs	r4, r0
    db38:	4b04      	ldr	r3, [pc, #16]	; (db4c <radioClearTask+0x18>)
    db3a:	4798      	blx	r3
    db3c:	4a04      	ldr	r2, [pc, #16]	; (db50 <radioClearTask+0x1c>)
    db3e:	8813      	ldrh	r3, [r2, #0]
    db40:	43a3      	bics	r3, r4
    db42:	8013      	strh	r3, [r2, #0]
    db44:	4b03      	ldr	r3, [pc, #12]	; (db54 <radioClearTask+0x20>)
    db46:	4798      	blx	r3
    db48:	bd10      	pop	{r4, pc}
    db4a:	46c0      	nop			; (mov r8, r8)
    db4c:	00007dc9 	.word	0x00007dc9
    db50:	20000eb6 	.word	0x20000eb6
    db54:	00007ddd 	.word	0x00007ddd

0000db58 <RADIO_GetState>:
    db58:	4b01      	ldr	r3, [pc, #4]	; (db60 <RADIO_GetState+0x8>)
    db5a:	7818      	ldrb	r0, [r3, #0]
    db5c:	b2c0      	uxtb	r0, r0
    db5e:	4770      	bx	lr
    db60:	200018fb 	.word	0x200018fb

0000db64 <RADIO_SetCallbackBitmask>:
    db64:	4a02      	ldr	r2, [pc, #8]	; (db70 <RADIO_SetCallbackBitmask+0xc>)
    db66:	7813      	ldrb	r3, [r2, #0]
    db68:	4318      	orrs	r0, r3
    db6a:	7010      	strb	r0, [r2, #0]
    db6c:	4770      	bx	lr
    db6e:	46c0      	nop			; (mov r8, r8)
    db70:	200018fa 	.word	0x200018fa

0000db74 <RADIO_Transmit>:
    db74:	b570      	push	{r4, r5, r6, lr}
    db76:	4d10      	ldr	r5, [pc, #64]	; (dbb8 <RADIO_Transmit+0x44>)
    db78:	0006      	movs	r6, r0
    db7a:	782b      	ldrb	r3, [r5, #0]
    db7c:	2004      	movs	r0, #4
    db7e:	2b01      	cmp	r3, #1
    db80:	d118      	bne.n	dbb4 <RADIO_Transmit+0x40>
    db82:	4c0e      	ldr	r4, [pc, #56]	; (dbbc <RADIO_Transmit+0x48>)
    db84:	0023      	movs	r3, r4
    db86:	332f      	adds	r3, #47	; 0x2f
    db88:	7818      	ldrb	r0, [r3, #0]
    db8a:	4b0d      	ldr	r3, [pc, #52]	; (dbc0 <RADIO_Transmit+0x4c>)
    db8c:	4798      	blx	r3
    db8e:	4b0d      	ldr	r3, [pc, #52]	; (dbc4 <RADIO_Transmit+0x50>)
    db90:	7832      	ldrb	r2, [r6, #0]
    db92:	6871      	ldr	r1, [r6, #4]
    db94:	701a      	strb	r2, [r3, #0]
    db96:	4b0c      	ldr	r3, [pc, #48]	; (dbc8 <RADIO_Transmit+0x54>)
    db98:	3434      	adds	r4, #52	; 0x34
    db9a:	6019      	str	r1, [r3, #0]
    db9c:	7821      	ldrb	r1, [r4, #0]
    db9e:	2302      	movs	r3, #2
    dba0:	2900      	cmp	r1, #0
    dba2:	d102      	bne.n	dbaa <RADIO_Transmit+0x36>
    dba4:	0018      	movs	r0, r3
    dba6:	2a3f      	cmp	r2, #63	; 0x3f
    dba8:	d804      	bhi.n	dbb4 <RADIO_Transmit+0x40>
    dbaa:	702b      	strb	r3, [r5, #0]
    dbac:	2004      	movs	r0, #4
    dbae:	4b07      	ldr	r3, [pc, #28]	; (dbcc <RADIO_Transmit+0x58>)
    dbb0:	4798      	blx	r3
    dbb2:	2000      	movs	r0, #0
    dbb4:	bd70      	pop	{r4, r5, r6, pc}
    dbb6:	46c0      	nop			; (mov r8, r8)
    dbb8:	200018fb 	.word	0x200018fb
    dbbc:	20001280 	.word	0x20001280
    dbc0:	000097bd 	.word	0x000097bd
    dbc4:	20000ecc 	.word	0x20000ecc
    dbc8:	20000ec8 	.word	0x20000ec8
    dbcc:	0000db09 	.word	0x0000db09

0000dbd0 <Radio_FSKTxPayloadHandler>:
    dbd0:	b570      	push	{r4, r5, r6, lr}
    dbd2:	4b1c      	ldr	r3, [pc, #112]	; (dc44 <Radio_FSKTxPayloadHandler+0x74>)
    dbd4:	000d      	movs	r5, r1
    dbd6:	4798      	blx	r3
    dbd8:	4c1b      	ldr	r4, [pc, #108]	; (dc48 <Radio_FSKTxPayloadHandler+0x78>)
    dbda:	3458      	adds	r4, #88	; 0x58
    dbdc:	7820      	ldrb	r0, [r4, #0]
    dbde:	b2c0      	uxtb	r0, r0
    dbe0:	2800      	cmp	r0, #0
    dbe2:	d112      	bne.n	dc0a <Radio_FSKTxPayloadHandler+0x3a>
    dbe4:	2d00      	cmp	r5, #0
    dbe6:	d007      	beq.n	dbf8 <Radio_FSKTxPayloadHandler+0x28>
    dbe8:	4918      	ldr	r1, [pc, #96]	; (dc4c <Radio_FSKTxPayloadHandler+0x7c>)
    dbea:	4b19      	ldr	r3, [pc, #100]	; (dc50 <Radio_FSKTxPayloadHandler+0x80>)
    dbec:	2d3e      	cmp	r5, #62	; 0x3e
    dbee:	d806      	bhi.n	dbfe <Radio_FSKTxPayloadHandler+0x2e>
    dbf0:	002a      	movs	r2, r5
    dbf2:	6809      	ldr	r1, [r1, #0]
    dbf4:	4798      	blx	r3
    dbf6:	7025      	strb	r5, [r4, #0]
    dbf8:	4b16      	ldr	r3, [pc, #88]	; (dc54 <Radio_FSKTxPayloadHandler+0x84>)
    dbfa:	4798      	blx	r3
    dbfc:	bd70      	pop	{r4, r5, r6, pc}
    dbfe:	223f      	movs	r2, #63	; 0x3f
    dc00:	6809      	ldr	r1, [r1, #0]
    dc02:	4798      	blx	r3
    dc04:	233f      	movs	r3, #63	; 0x3f
    dc06:	7023      	strb	r3, [r4, #0]
    dc08:	e7f6      	b.n	dbf8 <Radio_FSKTxPayloadHandler+0x28>
    dc0a:	7823      	ldrb	r3, [r4, #0]
    dc0c:	429d      	cmp	r5, r3
    dc0e:	d0f3      	beq.n	dbf8 <Radio_FSKTxPayloadHandler+0x28>
    dc10:	7822      	ldrb	r2, [r4, #0]
    dc12:	480e      	ldr	r0, [pc, #56]	; (dc4c <Radio_FSKTxPayloadHandler+0x7c>)
    dc14:	1aaa      	subs	r2, r5, r2
    dc16:	b2d2      	uxtb	r2, r2
    dc18:	4b0d      	ldr	r3, [pc, #52]	; (dc50 <Radio_FSKTxPayloadHandler+0x80>)
    dc1a:	2a3f      	cmp	r2, #63	; 0x3f
    dc1c:	d807      	bhi.n	dc2e <Radio_FSKTxPayloadHandler+0x5e>
    dc1e:	7826      	ldrb	r6, [r4, #0]
    dc20:	7822      	ldrb	r2, [r4, #0]
    dc22:	6801      	ldr	r1, [r0, #0]
    dc24:	1aaa      	subs	r2, r5, r2
    dc26:	b2d2      	uxtb	r2, r2
    dc28:	1989      	adds	r1, r1, r6
    dc2a:	2000      	movs	r0, #0
    dc2c:	e7e2      	b.n	dbf4 <Radio_FSKTxPayloadHandler+0x24>
    dc2e:	7822      	ldrb	r2, [r4, #0]
    dc30:	6801      	ldr	r1, [r0, #0]
    dc32:	2000      	movs	r0, #0
    dc34:	1889      	adds	r1, r1, r2
    dc36:	223f      	movs	r2, #63	; 0x3f
    dc38:	4798      	blx	r3
    dc3a:	7823      	ldrb	r3, [r4, #0]
    dc3c:	333f      	adds	r3, #63	; 0x3f
    dc3e:	b2db      	uxtb	r3, r3
    dc40:	e7e1      	b.n	dc06 <Radio_FSKTxPayloadHandler+0x36>
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	00000201 	.word	0x00000201
    dc48:	20001280 	.word	0x20001280
    dc4c:	20000ec8 	.word	0x20000ec8
    dc50:	00007681 	.word	0x00007681
    dc54:	00000255 	.word	0x00000255

0000dc58 <RADIO_FSKSyncAddr>:
    dc58:	4b08      	ldr	r3, [pc, #32]	; (dc7c <RADIO_FSKSyncAddr+0x24>)
    dc5a:	b510      	push	{r4, lr}
    dc5c:	4798      	blx	r3
    dc5e:	4b08      	ldr	r3, [pc, #32]	; (dc80 <RADIO_FSKSyncAddr+0x28>)
    dc60:	001a      	movs	r2, r3
    dc62:	3234      	adds	r2, #52	; 0x34
    dc64:	7812      	ldrb	r2, [r2, #0]
    dc66:	2a00      	cmp	r2, #0
    dc68:	d104      	bne.n	dc74 <RADIO_FSKSyncAddr+0x1c>
    dc6a:	0019      	movs	r1, r3
    dc6c:	3358      	adds	r3, #88	; 0x58
    dc6e:	312c      	adds	r1, #44	; 0x2c
    dc70:	700a      	strb	r2, [r1, #0]
    dc72:	701a      	strb	r2, [r3, #0]
    dc74:	4b03      	ldr	r3, [pc, #12]	; (dc84 <RADIO_FSKSyncAddr+0x2c>)
    dc76:	4798      	blx	r3
    dc78:	bd10      	pop	{r4, pc}
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	00000201 	.word	0x00000201
    dc80:	20001280 	.word	0x20001280
    dc84:	00000255 	.word	0x00000255

0000dc88 <RADIO_FSKFifoLevel>:
    dc88:	b570      	push	{r4, r5, r6, lr}
    dc8a:	4b22      	ldr	r3, [pc, #136]	; (dd14 <RADIO_FSKFifoLevel+0x8c>)
    dc8c:	4798      	blx	r3
    dc8e:	4d22      	ldr	r5, [pc, #136]	; (dd18 <RADIO_FSKFifoLevel+0x90>)
    dc90:	002a      	movs	r2, r5
    dc92:	002b      	movs	r3, r5
    dc94:	322c      	adds	r2, #44	; 0x2c
    dc96:	3358      	adds	r3, #88	; 0x58
    dc98:	7810      	ldrb	r0, [r2, #0]
    dc9a:	7819      	ldrb	r1, [r3, #0]
    dc9c:	4288      	cmp	r0, r1
    dc9e:	d105      	bne.n	dcac <RADIO_FSKFifoLevel+0x24>
    dca0:	7812      	ldrb	r2, [r2, #0]
    dca2:	2a00      	cmp	r2, #0
    dca4:	d002      	beq.n	dcac <RADIO_FSKFifoLevel+0x24>
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	2b00      	cmp	r3, #0
    dcaa:	d11f      	bne.n	dcec <RADIO_FSKFifoLevel+0x64>
    dcac:	0029      	movs	r1, r5
    dcae:	312c      	adds	r1, #44	; 0x2c
    dcb0:	7808      	ldrb	r0, [r1, #0]
    dcb2:	b2c0      	uxtb	r0, r0
    dcb4:	2800      	cmp	r0, #0
    dcb6:	d102      	bne.n	dcbe <RADIO_FSKFifoLevel+0x36>
    dcb8:	2201      	movs	r2, #1
    dcba:	4b18      	ldr	r3, [pc, #96]	; (dd1c <RADIO_FSKFifoLevel+0x94>)
    dcbc:	4798      	blx	r3
    dcbe:	002e      	movs	r6, r5
    dcc0:	002c      	movs	r4, r5
    dcc2:	362c      	adds	r6, #44	; 0x2c
    dcc4:	3458      	adds	r4, #88	; 0x58
    dcc6:	7833      	ldrb	r3, [r6, #0]
    dcc8:	7822      	ldrb	r2, [r4, #0]
    dcca:	1a9b      	subs	r3, r3, r2
    dccc:	b2db      	uxtb	r3, r3
    dcce:	2b3e      	cmp	r3, #62	; 0x3e
    dcd0:	d80f      	bhi.n	dcf2 <RADIO_FSKFifoLevel+0x6a>
    dcd2:	7823      	ldrb	r3, [r4, #0]
    dcd4:	7832      	ldrb	r2, [r6, #0]
    dcd6:	7821      	ldrb	r1, [r4, #0]
    dcd8:	2000      	movs	r0, #0
    dcda:	1a52      	subs	r2, r2, r1
    dcdc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    dcde:	b2d2      	uxtb	r2, r2
    dce0:	18c9      	adds	r1, r1, r3
    dce2:	4b0e      	ldr	r3, [pc, #56]	; (dd1c <RADIO_FSKFifoLevel+0x94>)
    dce4:	4798      	blx	r3
    dce6:	7833      	ldrb	r3, [r6, #0]
    dce8:	b2db      	uxtb	r3, r3
    dcea:	7023      	strb	r3, [r4, #0]
    dcec:	4b0c      	ldr	r3, [pc, #48]	; (dd20 <RADIO_FSKFifoLevel+0x98>)
    dcee:	4798      	blx	r3
    dcf0:	bd70      	pop	{r4, r5, r6, pc}
    dcf2:	7833      	ldrb	r3, [r6, #0]
    dcf4:	7822      	ldrb	r2, [r4, #0]
    dcf6:	1a9b      	subs	r3, r3, r2
    dcf8:	b2db      	uxtb	r3, r3
    dcfa:	2b3f      	cmp	r3, #63	; 0x3f
    dcfc:	d9f6      	bls.n	dcec <RADIO_FSKFifoLevel+0x64>
    dcfe:	7823      	ldrb	r3, [r4, #0]
    dd00:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    dd02:	223f      	movs	r2, #63	; 0x3f
    dd04:	18c9      	adds	r1, r1, r3
    dd06:	2000      	movs	r0, #0
    dd08:	4b04      	ldr	r3, [pc, #16]	; (dd1c <RADIO_FSKFifoLevel+0x94>)
    dd0a:	4798      	blx	r3
    dd0c:	7823      	ldrb	r3, [r4, #0]
    dd0e:	333f      	adds	r3, #63	; 0x3f
    dd10:	e7ea      	b.n	dce8 <RADIO_FSKFifoLevel+0x60>
    dd12:	46c0      	nop			; (mov r8, r8)
    dd14:	00000201 	.word	0x00000201
    dd18:	20001280 	.word	0x20001280
    dd1c:	000076fd 	.word	0x000076fd
    dd20:	00000255 	.word	0x00000255

0000dd24 <RADIO_FSKFifoEmpty>:
    dd24:	b510      	push	{r4, lr}
    dd26:	4b03      	ldr	r3, [pc, #12]	; (dd34 <RADIO_FSKFifoEmpty+0x10>)
    dd28:	7819      	ldrb	r1, [r3, #0]
    dd2a:	4b03      	ldr	r3, [pc, #12]	; (dd38 <RADIO_FSKFifoEmpty+0x14>)
    dd2c:	6818      	ldr	r0, [r3, #0]
    dd2e:	4b03      	ldr	r3, [pc, #12]	; (dd3c <RADIO_FSKFifoEmpty+0x18>)
    dd30:	4798      	blx	r3
    dd32:	bd10      	pop	{r4, pc}
    dd34:	20000ecc 	.word	0x20000ecc
    dd38:	20000ec8 	.word	0x20000ec8
    dd3c:	0000dbd1 	.word	0x0000dbd1

0000dd40 <Radio_EnableRfControl>:
    dd40:	b510      	push	{r4, lr}
    dd42:	4b08      	ldr	r3, [pc, #32]	; (dd64 <Radio_EnableRfControl+0x24>)
    dd44:	0001      	movs	r1, r0
    dd46:	681a      	ldr	r2, [r3, #0]
    dd48:	4807      	ldr	r0, [pc, #28]	; (dd68 <Radio_EnableRfControl+0x28>)
    dd4a:	4c08      	ldr	r4, [pc, #32]	; (dd6c <Radio_EnableRfControl+0x2c>)
    dd4c:	1812      	adds	r2, r2, r0
    dd4e:	2000      	movs	r0, #0
    dd50:	42a2      	cmp	r2, r4
    dd52:	d804      	bhi.n	dd5e <Radio_EnableRfControl+0x1e>
    dd54:	3305      	adds	r3, #5
    dd56:	7fdb      	ldrb	r3, [r3, #31]
    dd58:	1e58      	subs	r0, r3, #1
    dd5a:	4183      	sbcs	r3, r0
    dd5c:	1c58      	adds	r0, r3, #1
    dd5e:	4b04      	ldr	r3, [pc, #16]	; (dd70 <Radio_EnableRfControl+0x30>)
    dd60:	4798      	blx	r3
    dd62:	bd10      	pop	{r4, pc}
    dd64:	20001280 	.word	0x20001280
    dd68:	cc9eec80 	.word	0xcc9eec80
    dd6c:	096ae380 	.word	0x096ae380
    dd70:	00007ba9 	.word	0x00007ba9

0000dd74 <Radio_DisableRfControl>:
    dd74:	b510      	push	{r4, lr}
    dd76:	4b08      	ldr	r3, [pc, #32]	; (dd98 <Radio_DisableRfControl+0x24>)
    dd78:	0001      	movs	r1, r0
    dd7a:	681a      	ldr	r2, [r3, #0]
    dd7c:	4807      	ldr	r0, [pc, #28]	; (dd9c <Radio_DisableRfControl+0x28>)
    dd7e:	4c08      	ldr	r4, [pc, #32]	; (dda0 <Radio_DisableRfControl+0x2c>)
    dd80:	1812      	adds	r2, r2, r0
    dd82:	2000      	movs	r0, #0
    dd84:	42a2      	cmp	r2, r4
    dd86:	d804      	bhi.n	dd92 <Radio_DisableRfControl+0x1e>
    dd88:	3305      	adds	r3, #5
    dd8a:	7fdb      	ldrb	r3, [r3, #31]
    dd8c:	1e58      	subs	r0, r3, #1
    dd8e:	4183      	sbcs	r3, r0
    dd90:	1c58      	adds	r0, r3, #1
    dd92:	4b04      	ldr	r3, [pc, #16]	; (dda4 <Radio_DisableRfControl+0x30>)
    dd94:	4798      	blx	r3
    dd96:	bd10      	pop	{r4, pc}
    dd98:	20001280 	.word	0x20001280
    dd9c:	cc9eec80 	.word	0xcc9eec80
    dda0:	096ae380 	.word	0x096ae380
    dda4:	00007bf9 	.word	0x00007bf9

0000dda8 <RADIO_RxTimeout>:
    dda8:	b510      	push	{r4, lr}
    ddaa:	4b0a      	ldr	r3, [pc, #40]	; (ddd4 <RADIO_RxTimeout+0x2c>)
    ddac:	332f      	adds	r3, #47	; 0x2f
    ddae:	7818      	ldrb	r0, [r3, #0]
    ddb0:	4b09      	ldr	r3, [pc, #36]	; (ddd8 <RADIO_RxTimeout+0x30>)
    ddb2:	4798      	blx	r3
    ddb4:	2000      	movs	r0, #0
    ddb6:	4b09      	ldr	r3, [pc, #36]	; (dddc <RADIO_RxTimeout+0x34>)
    ddb8:	4798      	blx	r3
    ddba:	2180      	movs	r1, #128	; 0x80
    ddbc:	2012      	movs	r0, #18
    ddbe:	4b08      	ldr	r3, [pc, #32]	; (dde0 <RADIO_RxTimeout+0x38>)
    ddc0:	4798      	blx	r3
    ddc2:	2340      	movs	r3, #64	; 0x40
    ddc4:	4a07      	ldr	r2, [pc, #28]	; (dde4 <RADIO_RxTimeout+0x3c>)
    ddc6:	2002      	movs	r0, #2
    ddc8:	8811      	ldrh	r1, [r2, #0]
    ddca:	430b      	orrs	r3, r1
    ddcc:	8013      	strh	r3, [r2, #0]
    ddce:	4b06      	ldr	r3, [pc, #24]	; (dde8 <RADIO_RxTimeout+0x40>)
    ddd0:	4798      	blx	r3
    ddd2:	bd10      	pop	{r4, pc}
    ddd4:	20001280 	.word	0x20001280
    ddd8:	000097bd 	.word	0x000097bd
    dddc:	0000dd75 	.word	0x0000dd75
    dde0:	000075e1 	.word	0x000075e1
    dde4:	200018f8 	.word	0x200018f8
    dde8:	0000db09 	.word	0x0000db09

0000ddec <RADIO_TxDone>:
    ddec:	b570      	push	{r4, r5, r6, lr}
    ddee:	4b14      	ldr	r3, [pc, #80]	; (de40 <RADIO_TxDone+0x54>)
    ddf0:	332f      	adds	r3, #47	; 0x2f
    ddf2:	7818      	ldrb	r0, [r3, #0]
    ddf4:	4b13      	ldr	r3, [pc, #76]	; (de44 <RADIO_TxDone+0x58>)
    ddf6:	4798      	blx	r3
    ddf8:	2001      	movs	r0, #1
    ddfa:	4b13      	ldr	r3, [pc, #76]	; (de48 <RADIO_TxDone+0x5c>)
    ddfc:	4798      	blx	r3
    ddfe:	4b13      	ldr	r3, [pc, #76]	; (de4c <RADIO_TxDone+0x60>)
    de00:	2108      	movs	r1, #8
    de02:	2012      	movs	r0, #18
    de04:	4798      	blx	r3
    de06:	4b12      	ldr	r3, [pc, #72]	; (de50 <RADIO_TxDone+0x64>)
    de08:	781a      	ldrb	r2, [r3, #0]
    de0a:	4b12      	ldr	r3, [pc, #72]	; (de54 <RADIO_TxDone+0x68>)
    de0c:	2a02      	cmp	r2, #2
    de0e:	d002      	beq.n	de16 <RADIO_TxDone+0x2a>
    de10:	881a      	ldrh	r2, [r3, #0]
    de12:	0692      	lsls	r2, r2, #26
    de14:	d413      	bmi.n	de3e <RADIO_TxDone+0x52>
    de16:	2001      	movs	r0, #1
    de18:	881a      	ldrh	r2, [r3, #0]
    de1a:	4302      	orrs	r2, r0
    de1c:	801a      	strh	r2, [r3, #0]
    de1e:	4b0e      	ldr	r3, [pc, #56]	; (de58 <RADIO_TxDone+0x6c>)
    de20:	4798      	blx	r3
    de22:	4b0e      	ldr	r3, [pc, #56]	; (de5c <RADIO_TxDone+0x70>)
    de24:	4798      	blx	r3
    de26:	4c0e      	ldr	r4, [pc, #56]	; (de60 <RADIO_TxDone+0x74>)
    de28:	4d0e      	ldr	r5, [pc, #56]	; (de64 <RADIO_TxDone+0x78>)
    de2a:	6822      	ldr	r2, [r4, #0]
    de2c:	6863      	ldr	r3, [r4, #4]
    de2e:	1a80      	subs	r0, r0, r2
    de30:	4199      	sbcs	r1, r3
    de32:	22fa      	movs	r2, #250	; 0xfa
    de34:	2300      	movs	r3, #0
    de36:	0092      	lsls	r2, r2, #2
    de38:	47a8      	blx	r5
    de3a:	6020      	str	r0, [r4, #0]
    de3c:	6061      	str	r1, [r4, #4]
    de3e:	bd70      	pop	{r4, r5, r6, pc}
    de40:	20001280 	.word	0x20001280
    de44:	000097bd 	.word	0x000097bd
    de48:	0000dd75 	.word	0x0000dd75
    de4c:	000075e1 	.word	0x000075e1
    de50:	200018fb 	.word	0x200018fb
    de54:	200018f8 	.word	0x200018f8
    de58:	0000db09 	.word	0x0000db09
    de5c:	0000954d 	.word	0x0000954d
    de60:	20000ec0 	.word	0x20000ec0
    de64:	0000e77d 	.word	0x0000e77d

0000de68 <RADIO_FSKPacketSent>:
    de68:	b570      	push	{r4, r5, r6, lr}
    de6a:	4b15      	ldr	r3, [pc, #84]	; (dec0 <RADIO_FSKPacketSent+0x58>)
    de6c:	203f      	movs	r0, #63	; 0x3f
    de6e:	4798      	blx	r3
    de70:	0703      	lsls	r3, r0, #28
    de72:	d524      	bpl.n	debe <RADIO_FSKPacketSent+0x56>
    de74:	4b13      	ldr	r3, [pc, #76]	; (dec4 <RADIO_FSKPacketSent+0x5c>)
    de76:	332f      	adds	r3, #47	; 0x2f
    de78:	7818      	ldrb	r0, [r3, #0]
    de7a:	4b13      	ldr	r3, [pc, #76]	; (dec8 <RADIO_FSKPacketSent+0x60>)
    de7c:	4798      	blx	r3
    de7e:	4b13      	ldr	r3, [pc, #76]	; (decc <RADIO_FSKPacketSent+0x64>)
    de80:	2001      	movs	r0, #1
    de82:	4798      	blx	r3
    de84:	4b12      	ldr	r3, [pc, #72]	; (ded0 <RADIO_FSKPacketSent+0x68>)
    de86:	4c13      	ldr	r4, [pc, #76]	; (ded4 <RADIO_FSKPacketSent+0x6c>)
    de88:	781b      	ldrb	r3, [r3, #0]
    de8a:	2b02      	cmp	r3, #2
    de8c:	d002      	beq.n	de94 <RADIO_FSKPacketSent+0x2c>
    de8e:	8823      	ldrh	r3, [r4, #0]
    de90:	069b      	lsls	r3, r3, #26
    de92:	d414      	bmi.n	debe <RADIO_FSKPacketSent+0x56>
    de94:	4b10      	ldr	r3, [pc, #64]	; (ded8 <RADIO_FSKPacketSent+0x70>)
    de96:	4798      	blx	r3
    de98:	4d10      	ldr	r5, [pc, #64]	; (dedc <RADIO_FSKPacketSent+0x74>)
    de9a:	4e11      	ldr	r6, [pc, #68]	; (dee0 <RADIO_FSKPacketSent+0x78>)
    de9c:	682a      	ldr	r2, [r5, #0]
    de9e:	686b      	ldr	r3, [r5, #4]
    dea0:	1a80      	subs	r0, r0, r2
    dea2:	4199      	sbcs	r1, r3
    dea4:	22fa      	movs	r2, #250	; 0xfa
    dea6:	2300      	movs	r3, #0
    dea8:	0092      	lsls	r2, r2, #2
    deaa:	47b0      	blx	r6
    deac:	4b0d      	ldr	r3, [pc, #52]	; (dee4 <RADIO_FSKPacketSent+0x7c>)
    deae:	6028      	str	r0, [r5, #0]
    deb0:	6069      	str	r1, [r5, #4]
    deb2:	2001      	movs	r0, #1
    deb4:	4798      	blx	r3
    deb6:	2304      	movs	r3, #4
    deb8:	8822      	ldrh	r2, [r4, #0]
    deba:	4313      	orrs	r3, r2
    debc:	8023      	strh	r3, [r4, #0]
    debe:	bd70      	pop	{r4, r5, r6, pc}
    dec0:	0000762d 	.word	0x0000762d
    dec4:	20001280 	.word	0x20001280
    dec8:	000097bd 	.word	0x000097bd
    decc:	0000dd75 	.word	0x0000dd75
    ded0:	200018fb 	.word	0x200018fb
    ded4:	200018f8 	.word	0x200018f8
    ded8:	0000954d 	.word	0x0000954d
    dedc:	20000ec0 	.word	0x20000ec0
    dee0:	0000e77d 	.word	0x0000e77d
    dee4:	0000db09 	.word	0x0000db09

0000dee8 <RADIO_RxDone>:
    dee8:	b570      	push	{r4, r5, r6, lr}
    deea:	2012      	movs	r0, #18
    deec:	4e16      	ldr	r6, [pc, #88]	; (df48 <RADIO_RxDone+0x60>)
    deee:	47b0      	blx	r6
    def0:	4b16      	ldr	r3, [pc, #88]	; (df4c <RADIO_RxDone+0x64>)
    def2:	0005      	movs	r5, r0
    def4:	2170      	movs	r1, #112	; 0x70
    def6:	2012      	movs	r0, #18
    def8:	4798      	blx	r3
    defa:	2350      	movs	r3, #80	; 0x50
    defc:	402b      	ands	r3, r5
    defe:	2b50      	cmp	r3, #80	; 0x50
    df00:	d119      	bne.n	df36 <RADIO_RxDone+0x4e>
    df02:	4c13      	ldr	r4, [pc, #76]	; (df50 <RADIO_RxDone+0x68>)
    df04:	0023      	movs	r3, r4
    df06:	332f      	adds	r3, #47	; 0x2f
    df08:	7818      	ldrb	r0, [r3, #0]
    df0a:	4b12      	ldr	r3, [pc, #72]	; (df54 <RADIO_RxDone+0x6c>)
    df0c:	4798      	blx	r3
    df0e:	4b12      	ldr	r3, [pc, #72]	; (df58 <RADIO_RxDone+0x70>)
    df10:	2000      	movs	r0, #0
    df12:	4798      	blx	r3
    df14:	3404      	adds	r4, #4
    df16:	201c      	movs	r0, #28
    df18:	47b0      	blx	r6
    df1a:	7fe2      	ldrb	r2, [r4, #31]
    df1c:	4b0f      	ldr	r3, [pc, #60]	; (df5c <RADIO_RxDone+0x74>)
    df1e:	4910      	ldr	r1, [pc, #64]	; (df60 <RADIO_RxDone+0x78>)
    df20:	2a00      	cmp	r2, #0
    df22:	d003      	beq.n	df2c <RADIO_RxDone+0x44>
    df24:	06aa      	lsls	r2, r5, #26
    df26:	d407      	bmi.n	df38 <RADIO_RxDone+0x50>
    df28:	0642      	lsls	r2, r0, #25
    df2a:	d505      	bpl.n	df38 <RADIO_RxDone+0x50>
    df2c:	2002      	movs	r0, #2
    df2e:	881a      	ldrh	r2, [r3, #0]
    df30:	4302      	orrs	r2, r0
    df32:	801a      	strh	r2, [r3, #0]
    df34:	4788      	blx	r1
    df36:	bd70      	pop	{r4, r5, r6, pc}
    df38:	2280      	movs	r2, #128	; 0x80
    df3a:	8818      	ldrh	r0, [r3, #0]
    df3c:	0052      	lsls	r2, r2, #1
    df3e:	4302      	orrs	r2, r0
    df40:	801a      	strh	r2, [r3, #0]
    df42:	2002      	movs	r0, #2
    df44:	e7f6      	b.n	df34 <RADIO_RxDone+0x4c>
    df46:	46c0      	nop			; (mov r8, r8)
    df48:	0000762d 	.word	0x0000762d
    df4c:	000075e1 	.word	0x000075e1
    df50:	20001280 	.word	0x20001280
    df54:	000097bd 	.word	0x000097bd
    df58:	0000dd75 	.word	0x0000dd75
    df5c:	200018f8 	.word	0x200018f8
    df60:	0000db09 	.word	0x0000db09

0000df64 <RADIO_FSKPayloadReady>:
    df64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df66:	203f      	movs	r0, #63	; 0x3f
    df68:	4b39      	ldr	r3, [pc, #228]	; (e050 <RADIO_FSKPayloadReady+0xec>)
    df6a:	4798      	blx	r3
    df6c:	0743      	lsls	r3, r0, #29
    df6e:	d559      	bpl.n	e024 <RADIO_FSKPayloadReady+0xc0>
    df70:	4c38      	ldr	r4, [pc, #224]	; (e054 <RADIO_FSKPayloadReady+0xf0>)
    df72:	4d39      	ldr	r5, [pc, #228]	; (e058 <RADIO_FSKPayloadReady+0xf4>)
    df74:	1d23      	adds	r3, r4, #4
    df76:	7fdb      	ldrb	r3, [r3, #31]
    df78:	2b01      	cmp	r3, #1
    df7a:	d154      	bne.n	e026 <RADIO_FSKPayloadReady+0xc2>
    df7c:	2202      	movs	r2, #2
    df7e:	4210      	tst	r0, r2
    df80:	d048      	beq.n	e014 <RADIO_FSKPayloadReady+0xb0>
    df82:	0023      	movs	r3, r4
    df84:	332f      	adds	r3, #47	; 0x2f
    df86:	7818      	ldrb	r0, [r3, #0]
    df88:	4e34      	ldr	r6, [pc, #208]	; (e05c <RADIO_FSKPayloadReady+0xf8>)
    df8a:	47b0      	blx	r6
    df8c:	0023      	movs	r3, r4
    df8e:	332e      	adds	r3, #46	; 0x2e
    df90:	7818      	ldrb	r0, [r3, #0]
    df92:	47b0      	blx	r6
    df94:	4b32      	ldr	r3, [pc, #200]	; (e060 <RADIO_FSKPayloadReady+0xfc>)
    df96:	4798      	blx	r3
    df98:	0022      	movs	r2, r4
    df9a:	0023      	movs	r3, r4
    df9c:	322c      	adds	r2, #44	; 0x2c
    df9e:	3358      	adds	r3, #88	; 0x58
    dfa0:	7810      	ldrb	r0, [r2, #0]
    dfa2:	7819      	ldrb	r1, [r3, #0]
    dfa4:	4288      	cmp	r0, r1
    dfa6:	d105      	bne.n	dfb4 <RADIO_FSKPayloadReady+0x50>
    dfa8:	7812      	ldrb	r2, [r2, #0]
    dfaa:	2a00      	cmp	r2, #0
    dfac:	d002      	beq.n	dfb4 <RADIO_FSKPayloadReady+0x50>
    dfae:	781b      	ldrb	r3, [r3, #0]
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d118      	bne.n	dfe6 <RADIO_FSKPayloadReady+0x82>
    dfb4:	0021      	movs	r1, r4
    dfb6:	312c      	adds	r1, #44	; 0x2c
    dfb8:	7808      	ldrb	r0, [r1, #0]
    dfba:	b2c0      	uxtb	r0, r0
    dfbc:	2800      	cmp	r0, #0
    dfbe:	d102      	bne.n	dfc6 <RADIO_FSKPayloadReady+0x62>
    dfc0:	2201      	movs	r2, #1
    dfc2:	4b28      	ldr	r3, [pc, #160]	; (e064 <RADIO_FSKPayloadReady+0x100>)
    dfc4:	4798      	blx	r3
    dfc6:	0026      	movs	r6, r4
    dfc8:	0027      	movs	r7, r4
    dfca:	3658      	adds	r6, #88	; 0x58
    dfcc:	7830      	ldrb	r0, [r6, #0]
    dfce:	372c      	adds	r7, #44	; 0x2c
    dfd0:	b2c0      	uxtb	r0, r0
    dfd2:	2800      	cmp	r0, #0
    dfd4:	d110      	bne.n	dff8 <RADIO_FSKPayloadReady+0x94>
    dfd6:	783a      	ldrb	r2, [r7, #0]
    dfd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    dfda:	b2d2      	uxtb	r2, r2
    dfdc:	4b21      	ldr	r3, [pc, #132]	; (e064 <RADIO_FSKPayloadReady+0x100>)
    dfde:	4798      	blx	r3
    dfe0:	783b      	ldrb	r3, [r7, #0]
    dfe2:	b2db      	uxtb	r3, r3
    dfe4:	7033      	strb	r3, [r6, #0]
    dfe6:	4b20      	ldr	r3, [pc, #128]	; (e068 <RADIO_FSKPayloadReady+0x104>)
    dfe8:	4798      	blx	r3
    dfea:	4b20      	ldr	r3, [pc, #128]	; (e06c <RADIO_FSKPayloadReady+0x108>)
    dfec:	2000      	movs	r0, #0
    dfee:	4798      	blx	r3
    dff0:	2308      	movs	r3, #8
    dff2:	882a      	ldrh	r2, [r5, #0]
    dff4:	4313      	orrs	r3, r2
    dff6:	e011      	b.n	e01c <RADIO_FSKPayloadReady+0xb8>
    dff8:	783b      	ldrb	r3, [r7, #0]
    dffa:	7832      	ldrb	r2, [r6, #0]
    dffc:	1a9b      	subs	r3, r3, r2
    dffe:	2b00      	cmp	r3, #0
    e000:	ddf1      	ble.n	dfe6 <RADIO_FSKPayloadReady+0x82>
    e002:	7833      	ldrb	r3, [r6, #0]
    e004:	783a      	ldrb	r2, [r7, #0]
    e006:	7831      	ldrb	r1, [r6, #0]
    e008:	2000      	movs	r0, #0
    e00a:	1a52      	subs	r2, r2, r1
    e00c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e00e:	b2d2      	uxtb	r2, r2
    e010:	18c9      	adds	r1, r1, r3
    e012:	e7e3      	b.n	dfdc <RADIO_FSKPayloadReady+0x78>
    e014:	2380      	movs	r3, #128	; 0x80
    e016:	8829      	ldrh	r1, [r5, #0]
    e018:	005b      	lsls	r3, r3, #1
    e01a:	430b      	orrs	r3, r1
    e01c:	802b      	strh	r3, [r5, #0]
    e01e:	2002      	movs	r0, #2
    e020:	4b13      	ldr	r3, [pc, #76]	; (e070 <RADIO_FSKPayloadReady+0x10c>)
    e022:	4798      	blx	r3
    e024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e026:	0023      	movs	r3, r4
    e028:	332f      	adds	r3, #47	; 0x2f
    e02a:	4e0c      	ldr	r6, [pc, #48]	; (e05c <RADIO_FSKPayloadReady+0xf8>)
    e02c:	7818      	ldrb	r0, [r3, #0]
    e02e:	47b0      	blx	r6
    e030:	0023      	movs	r3, r4
    e032:	332e      	adds	r3, #46	; 0x2e
    e034:	7818      	ldrb	r0, [r3, #0]
    e036:	47b0      	blx	r6
    e038:	4e0e      	ldr	r6, [pc, #56]	; (e074 <RADIO_FSKPayloadReady+0x110>)
    e03a:	2201      	movs	r2, #1
    e03c:	0031      	movs	r1, r6
    e03e:	2000      	movs	r0, #0
    e040:	4f08      	ldr	r7, [pc, #32]	; (e064 <RADIO_FSKPayloadReady+0x100>)
    e042:	47b8      	blx	r7
    e044:	7832      	ldrb	r2, [r6, #0]
    e046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e048:	b2d2      	uxtb	r2, r2
    e04a:	2000      	movs	r0, #0
    e04c:	47b8      	blx	r7
    e04e:	e7cc      	b.n	dfea <RADIO_FSKPayloadReady+0x86>
    e050:	0000762d 	.word	0x0000762d
    e054:	20001280 	.word	0x20001280
    e058:	200018f8 	.word	0x200018f8
    e05c:	000097bd 	.word	0x000097bd
    e060:	00000201 	.word	0x00000201
    e064:	000076fd 	.word	0x000076fd
    e068:	00000255 	.word	0x00000255
    e06c:	0000dd75 	.word	0x0000dd75
    e070:	0000db09 	.word	0x0000db09
    e074:	200012ac 	.word	0x200012ac

0000e078 <Radio_SetClockInput>:
    e078:	b510      	push	{r4, lr}
    e07a:	4b08      	ldr	r3, [pc, #32]	; (e09c <Radio_SetClockInput+0x24>)
    e07c:	3355      	adds	r3, #85	; 0x55
    e07e:	781b      	ldrb	r3, [r3, #0]
    e080:	2b00      	cmp	r3, #0
    e082:	d10a      	bne.n	e09a <Radio_SetClockInput+0x22>
    e084:	4b06      	ldr	r3, [pc, #24]	; (e0a0 <Radio_SetClockInput+0x28>)
    e086:	204b      	movs	r0, #75	; 0x4b
    e088:	4798      	blx	r3
    e08a:	2110      	movs	r1, #16
    e08c:	4301      	orrs	r1, r0
    e08e:	4b05      	ldr	r3, [pc, #20]	; (e0a4 <Radio_SetClockInput+0x2c>)
    e090:	b2c9      	uxtb	r1, r1
    e092:	204b      	movs	r0, #75	; 0x4b
    e094:	4798      	blx	r3
    e096:	4b04      	ldr	r3, [pc, #16]	; (e0a8 <Radio_SetClockInput+0x30>)
    e098:	4798      	blx	r3
    e09a:	bd10      	pop	{r4, pc}
    e09c:	20001280 	.word	0x20001280
    e0a0:	0000762d 	.word	0x0000762d
    e0a4:	000075e1 	.word	0x000075e1
    e0a8:	00007c49 	.word	0x00007c49

0000e0ac <Radio_ResetClockInput>:
    e0ac:	b510      	push	{r4, lr}
    e0ae:	4b04      	ldr	r3, [pc, #16]	; (e0c0 <Radio_ResetClockInput+0x14>)
    e0b0:	3355      	adds	r3, #85	; 0x55
    e0b2:	781b      	ldrb	r3, [r3, #0]
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d101      	bne.n	e0bc <Radio_ResetClockInput+0x10>
    e0b8:	4b02      	ldr	r3, [pc, #8]	; (e0c4 <Radio_ResetClockInput+0x18>)
    e0ba:	4798      	blx	r3
    e0bc:	bd10      	pop	{r4, pc}
    e0be:	46c0      	nop			; (mov r8, r8)
    e0c0:	20001280 	.word	0x20001280
    e0c4:	00007c69 	.word	0x00007c69

0000e0c8 <RADIO_InitDefaultAttributes>:
    e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0ca:	2501      	movs	r5, #1
    e0cc:	4b64      	ldr	r3, [pc, #400]	; (e260 <RADIO_InitDefaultAttributes+0x198>)
    e0ce:	4c65      	ldr	r4, [pc, #404]	; (e264 <RADIO_InitDefaultAttributes+0x19c>)
    e0d0:	701d      	strb	r5, [r3, #0]
    e0d2:	4b65      	ldr	r3, [pc, #404]	; (e268 <RADIO_InitDefaultAttributes+0x1a0>)
    e0d4:	2207      	movs	r2, #7
    e0d6:	6023      	str	r3, [r4, #0]
    e0d8:	4b64      	ldr	r3, [pc, #400]	; (e26c <RADIO_InitDefaultAttributes+0x1a4>)
    e0da:	18a1      	adds	r1, r4, r2
    e0dc:	6063      	str	r3, [r4, #4]
    e0de:	4b64      	ldr	r3, [pc, #400]	; (e270 <RADIO_InitDefaultAttributes+0x1a8>)
    e0e0:	0027      	movs	r7, r4
    e0e2:	60a3      	str	r3, [r4, #8]
    e0e4:	0023      	movs	r3, r4
    e0e6:	3334      	adds	r3, #52	; 0x34
    e0e8:	701d      	strb	r5, [r3, #0]
    e0ea:	0023      	movs	r3, r4
    e0ec:	3336      	adds	r3, #54	; 0x36
    e0ee:	701a      	strb	r2, [r3, #0]
    e0f0:	1ce3      	adds	r3, r4, #3
    e0f2:	77dd      	strb	r5, [r3, #31]
    e0f4:	0023      	movs	r3, r4
    e0f6:	3333      	adds	r3, #51	; 0x33
    e0f8:	701d      	strb	r5, [r3, #0]
    e0fa:	2300      	movs	r3, #0
    e0fc:	77cb      	strb	r3, [r1, #31]
    e0fe:	2108      	movs	r1, #8
    e100:	82a1      	strh	r1, [r4, #20]
    e102:	0021      	movs	r1, r4
    e104:	3135      	adds	r1, #53	; 0x35
    e106:	700a      	strb	r2, [r1, #0]
    e108:	1d22      	adds	r2, r4, #4
    e10a:	77d5      	strb	r5, [r2, #31]
    e10c:	1d62      	adds	r2, r4, #5
    e10e:	77d3      	strb	r3, [r2, #31]
    e110:	1da2      	adds	r2, r4, #6
    e112:	77d3      	strb	r3, [r2, #31]
    e114:	2194      	movs	r1, #148	; 0x94
    e116:	22c1      	movs	r2, #193	; 0xc1
    e118:	76a1      	strb	r1, [r4, #26]
    e11a:	7662      	strb	r2, [r4, #25]
    e11c:	76e2      	strb	r2, [r4, #27]
    e11e:	3991      	subs	r1, #145	; 0x91
    e120:	1ca2      	adds	r2, r4, #2
    e122:	77d1      	strb	r1, [r2, #31]
    e124:	2234      	movs	r2, #52	; 0x34
    e126:	7622      	strb	r2, [r4, #24]
    e128:	0022      	movs	r2, r4
    e12a:	317d      	adds	r1, #125	; 0x7d
    e12c:	3232      	adds	r2, #50	; 0x32
    e12e:	7011      	strb	r1, [r2, #0]
    e130:	4a50      	ldr	r2, [pc, #320]	; (e274 <RADIO_InitDefaultAttributes+0x1ac>)
    e132:	397e      	subs	r1, #126	; 0x7e
    e134:	60e2      	str	r2, [r4, #12]
    e136:	0022      	movs	r2, r4
    e138:	3237      	adds	r2, #55	; 0x37
    e13a:	7011      	strb	r1, [r2, #0]
    e13c:	0022      	movs	r2, r4
    e13e:	3109      	adds	r1, #9
    e140:	3238      	adds	r2, #56	; 0x38
    e142:	7011      	strb	r1, [r2, #0]
    e144:	0022      	movs	r2, r4
    e146:	3107      	adds	r1, #7
    e148:	3239      	adds	r2, #57	; 0x39
    e14a:	7011      	strb	r1, [r2, #0]
    e14c:	0022      	movs	r2, r4
    e14e:	322c      	adds	r2, #44	; 0x2c
    e150:	7013      	strb	r3, [r2, #0]
    e152:	4a49      	ldr	r2, [pc, #292]	; (e278 <RADIO_InitDefaultAttributes+0x1b0>)
    e154:	82e3      	strh	r3, [r4, #22]
    e156:	62a2      	str	r2, [r4, #40]	; 0x28
    e158:	0022      	movs	r2, r4
    e15a:	324c      	adds	r2, #76	; 0x4c
    e15c:	8013      	strh	r3, [r2, #0]
    e15e:	0022      	movs	r2, r4
    e160:	324e      	adds	r2, #78	; 0x4e
    e162:	7013      	strb	r3, [r2, #0]
    e164:	0022      	movs	r2, r4
    e166:	324f      	adds	r2, #79	; 0x4f
    e168:	7013      	strb	r3, [r2, #0]
    e16a:	0022      	movs	r2, r4
    e16c:	3240      	adds	r2, #64	; 0x40
    e16e:	7013      	strb	r3, [r2, #0]
    e170:	0022      	movs	r2, r4
    e172:	3241      	adds	r2, #65	; 0x41
    e174:	7013      	strb	r3, [r2, #0]
    e176:	0022      	movs	r2, r4
    e178:	3254      	adds	r2, #84	; 0x54
    e17a:	7013      	strb	r3, [r2, #0]
    e17c:	0022      	movs	r2, r4
    e17e:	3255      	adds	r2, #85	; 0x55
    e180:	7015      	strb	r5, [r2, #0]
    e182:	0022      	movs	r2, r4
    e184:	3258      	adds	r2, #88	; 0x58
    e186:	6463      	str	r3, [r4, #68]	; 0x44
    e188:	64a3      	str	r3, [r4, #72]	; 0x48
    e18a:	87a3      	strh	r3, [r4, #60]	; 0x3c
    e18c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    e18e:	7013      	strb	r3, [r2, #0]
    e190:	3730      	adds	r7, #48	; 0x30
    e192:	783b      	ldrb	r3, [r7, #0]
    e194:	2b00      	cmp	r3, #0
    e196:	d151      	bne.n	e23c <RADIO_InitDefaultAttributes+0x174>
    e198:	4838      	ldr	r0, [pc, #224]	; (e27c <RADIO_InitDefaultAttributes+0x1b4>)
    e19a:	4e39      	ldr	r6, [pc, #228]	; (e280 <RADIO_InitDefaultAttributes+0x1b8>)
    e19c:	47b0      	blx	r6
    e19e:	2808      	cmp	r0, #8
    e1a0:	d149      	bne.n	e236 <RADIO_InitDefaultAttributes+0x16e>
    e1a2:	4838      	ldr	r0, [pc, #224]	; (e284 <RADIO_InitDefaultAttributes+0x1bc>)
    e1a4:	47b0      	blx	r6
    e1a6:	2808      	cmp	r0, #8
    e1a8:	d145      	bne.n	e236 <RADIO_InitDefaultAttributes+0x16e>
    e1aa:	4837      	ldr	r0, [pc, #220]	; (e288 <RADIO_InitDefaultAttributes+0x1c0>)
    e1ac:	47b0      	blx	r6
    e1ae:	2808      	cmp	r0, #8
    e1b0:	d141      	bne.n	e236 <RADIO_InitDefaultAttributes+0x16e>
    e1b2:	4836      	ldr	r0, [pc, #216]	; (e28c <RADIO_InitDefaultAttributes+0x1c4>)
    e1b4:	47b0      	blx	r6
    e1b6:	2808      	cmp	r0, #8
    e1b8:	d13d      	bne.n	e236 <RADIO_InitDefaultAttributes+0x16e>
    e1ba:	703d      	strb	r5, [r7, #0]
    e1bc:	4b34      	ldr	r3, [pc, #208]	; (e290 <RADIO_InitDefaultAttributes+0x1c8>)
    e1be:	4798      	blx	r3
    e1c0:	4b34      	ldr	r3, [pc, #208]	; (e294 <RADIO_InitDefaultAttributes+0x1cc>)
    e1c2:	4798      	blx	r3
    e1c4:	2800      	cmp	r0, #0
    e1c6:	d107      	bne.n	e1d8 <RADIO_InitDefaultAttributes+0x110>
    e1c8:	0023      	movs	r3, r4
    e1ca:	3355      	adds	r3, #85	; 0x55
    e1cc:	7018      	strb	r0, [r3, #0]
    e1ce:	4b32      	ldr	r3, [pc, #200]	; (e298 <RADIO_InitDefaultAttributes+0x1d0>)
    e1d0:	4798      	blx	r3
    e1d2:	0023      	movs	r3, r4
    e1d4:	3354      	adds	r3, #84	; 0x54
    e1d6:	7018      	strb	r0, [r3, #0]
    e1d8:	4b30      	ldr	r3, [pc, #192]	; (e29c <RADIO_InitDefaultAttributes+0x1d4>)
    e1da:	4798      	blx	r3
    e1dc:	2201      	movs	r2, #1
    e1de:	2100      	movs	r1, #0
    e1e0:	0010      	movs	r0, r2
    e1e2:	4f2f      	ldr	r7, [pc, #188]	; (e2a0 <RADIO_InitDefaultAttributes+0x1d8>)
    e1e4:	47b8      	blx	r7
    e1e6:	6820      	ldr	r0, [r4, #0]
    e1e8:	4b2e      	ldr	r3, [pc, #184]	; (e2a4 <RADIO_InitDefaultAttributes+0x1dc>)
    e1ea:	4798      	blx	r3
    e1ec:	2142      	movs	r1, #66	; 0x42
    e1ee:	203b      	movs	r0, #59	; 0x3b
    e1f0:	4d2d      	ldr	r5, [pc, #180]	; (e2a8 <RADIO_InitDefaultAttributes+0x1e0>)
    e1f2:	47a8      	blx	r5
    e1f4:	203b      	movs	r0, #59	; 0x3b
    e1f6:	4b2d      	ldr	r3, [pc, #180]	; (e2ac <RADIO_InitDefaultAttributes+0x1e4>)
    e1f8:	4798      	blx	r3
    e1fa:	2620      	movs	r6, #32
    e1fc:	4006      	ands	r6, r0
    e1fe:	d1f9      	bne.n	e1f4 <RADIO_InitDefaultAttributes+0x12c>
    e200:	2123      	movs	r1, #35	; 0x23
    e202:	200c      	movs	r0, #12
    e204:	47a8      	blx	r5
    e206:	21aa      	movs	r1, #170	; 0xaa
    e208:	201f      	movs	r0, #31
    e20a:	47a8      	blx	r5
    e20c:	21ff      	movs	r1, #255	; 0xff
    e20e:	2032      	movs	r0, #50	; 0x32
    e210:	47a8      	blx	r5
    e212:	2140      	movs	r1, #64	; 0x40
    e214:	2031      	movs	r0, #49	; 0x31
    e216:	47a8      	blx	r5
    e218:	2201      	movs	r2, #1
    e21a:	0030      	movs	r0, r6
    e21c:	0011      	movs	r1, r2
    e21e:	47b8      	blx	r7
    e220:	21ff      	movs	r1, #255	; 0xff
    e222:	2023      	movs	r0, #35	; 0x23
    e224:	47a8      	blx	r5
    e226:	4b21      	ldr	r3, [pc, #132]	; (e2ac <RADIO_InitDefaultAttributes+0x1e4>)
    e228:	2042      	movs	r0, #66	; 0x42
    e22a:	4798      	blx	r3
    e22c:	3431      	adds	r4, #49	; 0x31
    e22e:	4b20      	ldr	r3, [pc, #128]	; (e2b0 <RADIO_InitDefaultAttributes+0x1e8>)
    e230:	7020      	strb	r0, [r4, #0]
    e232:	4798      	blx	r3
    e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e236:	4b1f      	ldr	r3, [pc, #124]	; (e2b4 <RADIO_InitDefaultAttributes+0x1ec>)
    e238:	4798      	blx	r3
    e23a:	e7bf      	b.n	e1bc <RADIO_InitDefaultAttributes+0xf4>
    e23c:	0023      	movs	r3, r4
    e23e:	332d      	adds	r3, #45	; 0x2d
    e240:	4d1d      	ldr	r5, [pc, #116]	; (e2b8 <RADIO_InitDefaultAttributes+0x1f0>)
    e242:	7818      	ldrb	r0, [r3, #0]
    e244:	47a8      	blx	r5
    e246:	0023      	movs	r3, r4
    e248:	332e      	adds	r3, #46	; 0x2e
    e24a:	7818      	ldrb	r0, [r3, #0]
    e24c:	47a8      	blx	r5
    e24e:	0023      	movs	r3, r4
    e250:	332f      	adds	r3, #47	; 0x2f
    e252:	7818      	ldrb	r0, [r3, #0]
    e254:	47a8      	blx	r5
    e256:	0023      	movs	r3, r4
    e258:	3350      	adds	r3, #80	; 0x50
    e25a:	7818      	ldrb	r0, [r3, #0]
    e25c:	47a8      	blx	r5
    e25e:	e7ad      	b.n	e1bc <RADIO_InitDefaultAttributes+0xf4>
    e260:	200018fb 	.word	0x200018fb
    e264:	20001280 	.word	0x20001280
    e268:	33be27a0 	.word	0x33be27a0
    e26c:	000061a8 	.word	0x000061a8
    e270:	0000c350 	.word	0x0000c350
    e274:	00003a98 	.word	0x00003a98
    e278:	200017f8 	.word	0x200017f8
    e27c:	200012ad 	.word	0x200012ad
    e280:	00009565 	.word	0x00009565
    e284:	200012ae 	.word	0x200012ae
    e288:	200012af 	.word	0x200012af
    e28c:	200012d0 	.word	0x200012d0
    e290:	000075a9 	.word	0x000075a9
    e294:	00007c3d 	.word	0x00007c3d
    e298:	00007c31 	.word	0x00007c31
    e29c:	0000e079 	.word	0x0000e079
    e2a0:	00009cf1 	.word	0x00009cf1
    e2a4:	0000d8b9 	.word	0x0000d8b9
    e2a8:	000075e1 	.word	0x000075e1
    e2ac:	0000762d 	.word	0x0000762d
    e2b0:	0000e0ad 	.word	0x0000e0ad
    e2b4:	00009475 	.word	0x00009475
    e2b8:	000097bd 	.word	0x000097bd

0000e2bc <RADIO_Receive>:
    e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2be:	7803      	ldrb	r3, [r0, #0]
    e2c0:	0006      	movs	r6, r0
    e2c2:	4d24      	ldr	r5, [pc, #144]	; (e354 <RADIO_Receive+0x98>)
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d11d      	bne.n	e304 <RADIO_Receive+0x48>
    e2c8:	782b      	ldrb	r3, [r5, #0]
    e2ca:	2004      	movs	r0, #4
    e2cc:	2b01      	cmp	r3, #1
    e2ce:	d118      	bne.n	e302 <RADIO_Receive+0x46>
    e2d0:	4c21      	ldr	r4, [pc, #132]	; (e358 <RADIO_Receive+0x9c>)
    e2d2:	4f22      	ldr	r7, [pc, #136]	; (e35c <RADIO_Receive+0xa0>)
    e2d4:	0023      	movs	r3, r4
    e2d6:	332f      	adds	r3, #47	; 0x2f
    e2d8:	7818      	ldrb	r0, [r3, #0]
    e2da:	47b8      	blx	r7
    e2dc:	0023      	movs	r3, r4
    e2de:	3334      	adds	r3, #52	; 0x34
    e2e0:	781b      	ldrb	r3, [r3, #0]
    e2e2:	2b00      	cmp	r3, #0
    e2e4:	d102      	bne.n	e2ec <RADIO_Receive+0x30>
    e2e6:	342e      	adds	r4, #46	; 0x2e
    e2e8:	7820      	ldrb	r0, [r4, #0]
    e2ea:	47b8      	blx	r7
    e2ec:	8872      	ldrh	r2, [r6, #2]
    e2ee:	4b1c      	ldr	r3, [pc, #112]	; (e360 <RADIO_Receive+0xa4>)
    e2f0:	2008      	movs	r0, #8
    e2f2:	801a      	strh	r2, [r3, #0]
    e2f4:	2304      	movs	r3, #4
    e2f6:	702b      	strb	r3, [r5, #0]
    e2f8:	4b1a      	ldr	r3, [pc, #104]	; (e364 <RADIO_Receive+0xa8>)
    e2fa:	4798      	blx	r3
    e2fc:	4b1a      	ldr	r3, [pc, #104]	; (e368 <RADIO_Receive+0xac>)
    e2fe:	4798      	blx	r3
    e300:	2000      	movs	r0, #0
    e302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e304:	782b      	ldrb	r3, [r5, #0]
    e306:	2000      	movs	r0, #0
    e308:	2b01      	cmp	r3, #1
    e30a:	d0fa      	beq.n	e302 <RADIO_Receive+0x46>
    e30c:	782b      	ldrb	r3, [r5, #0]
    e30e:	3003      	adds	r0, #3
    e310:	2b04      	cmp	r3, #4
    e312:	d1f6      	bne.n	e302 <RADIO_Receive+0x46>
    e314:	4c10      	ldr	r4, [pc, #64]	; (e358 <RADIO_Receive+0x9c>)
    e316:	4e11      	ldr	r6, [pc, #68]	; (e35c <RADIO_Receive+0xa0>)
    e318:	0023      	movs	r3, r4
    e31a:	332f      	adds	r3, #47	; 0x2f
    e31c:	7818      	ldrb	r0, [r3, #0]
    e31e:	47b0      	blx	r6
    e320:	0023      	movs	r3, r4
    e322:	3334      	adds	r3, #52	; 0x34
    e324:	781b      	ldrb	r3, [r3, #0]
    e326:	2b00      	cmp	r3, #0
    e328:	d103      	bne.n	e332 <RADIO_Receive+0x76>
    e32a:	0023      	movs	r3, r4
    e32c:	332e      	adds	r3, #46	; 0x2e
    e32e:	7818      	ldrb	r0, [r3, #0]
    e330:	47b0      	blx	r6
    e332:	2200      	movs	r2, #0
    e334:	3434      	adds	r4, #52	; 0x34
    e336:	7821      	ldrb	r1, [r4, #0]
    e338:	0010      	movs	r0, r2
    e33a:	4b0c      	ldr	r3, [pc, #48]	; (e36c <RADIO_Receive+0xb0>)
    e33c:	4798      	blx	r3
    e33e:	4b0c      	ldr	r3, [pc, #48]	; (e370 <RADIO_Receive+0xb4>)
    e340:	4798      	blx	r3
    e342:	2301      	movs	r3, #1
    e344:	2008      	movs	r0, #8
    e346:	4c0b      	ldr	r4, [pc, #44]	; (e374 <RADIO_Receive+0xb8>)
    e348:	702b      	strb	r3, [r5, #0]
    e34a:	47a0      	blx	r4
    e34c:	2002      	movs	r0, #2
    e34e:	47a0      	blx	r4
    e350:	e7d6      	b.n	e300 <RADIO_Receive+0x44>
    e352:	46c0      	nop			; (mov r8, r8)
    e354:	200018fb 	.word	0x200018fb
    e358:	20001280 	.word	0x20001280
    e35c:	000097bd 	.word	0x000097bd
    e360:	20000eb8 	.word	0x20000eb8
    e364:	0000db09 	.word	0x0000db09
    e368:	0000e079 	.word	0x0000e079
    e36c:	00009cf1 	.word	0x00009cf1
    e370:	0000e0ad 	.word	0x0000e0ad
    e374:	0000db35 	.word	0x0000db35

0000e378 <__gnu_thumb1_case_uqi>:
    e378:	b402      	push	{r1}
    e37a:	4671      	mov	r1, lr
    e37c:	0849      	lsrs	r1, r1, #1
    e37e:	0049      	lsls	r1, r1, #1
    e380:	5c09      	ldrb	r1, [r1, r0]
    e382:	0049      	lsls	r1, r1, #1
    e384:	448e      	add	lr, r1
    e386:	bc02      	pop	{r1}
    e388:	4770      	bx	lr
    e38a:	46c0      	nop			; (mov r8, r8)

0000e38c <__gnu_thumb1_case_uhi>:
    e38c:	b403      	push	{r0, r1}
    e38e:	4671      	mov	r1, lr
    e390:	0849      	lsrs	r1, r1, #1
    e392:	0040      	lsls	r0, r0, #1
    e394:	0049      	lsls	r1, r1, #1
    e396:	5a09      	ldrh	r1, [r1, r0]
    e398:	0049      	lsls	r1, r1, #1
    e39a:	448e      	add	lr, r1
    e39c:	bc03      	pop	{r0, r1}
    e39e:	4770      	bx	lr

0000e3a0 <__udivsi3>:
    e3a0:	2200      	movs	r2, #0
    e3a2:	0843      	lsrs	r3, r0, #1
    e3a4:	428b      	cmp	r3, r1
    e3a6:	d374      	bcc.n	e492 <__udivsi3+0xf2>
    e3a8:	0903      	lsrs	r3, r0, #4
    e3aa:	428b      	cmp	r3, r1
    e3ac:	d35f      	bcc.n	e46e <__udivsi3+0xce>
    e3ae:	0a03      	lsrs	r3, r0, #8
    e3b0:	428b      	cmp	r3, r1
    e3b2:	d344      	bcc.n	e43e <__udivsi3+0x9e>
    e3b4:	0b03      	lsrs	r3, r0, #12
    e3b6:	428b      	cmp	r3, r1
    e3b8:	d328      	bcc.n	e40c <__udivsi3+0x6c>
    e3ba:	0c03      	lsrs	r3, r0, #16
    e3bc:	428b      	cmp	r3, r1
    e3be:	d30d      	bcc.n	e3dc <__udivsi3+0x3c>
    e3c0:	22ff      	movs	r2, #255	; 0xff
    e3c2:	0209      	lsls	r1, r1, #8
    e3c4:	ba12      	rev	r2, r2
    e3c6:	0c03      	lsrs	r3, r0, #16
    e3c8:	428b      	cmp	r3, r1
    e3ca:	d302      	bcc.n	e3d2 <__udivsi3+0x32>
    e3cc:	1212      	asrs	r2, r2, #8
    e3ce:	0209      	lsls	r1, r1, #8
    e3d0:	d065      	beq.n	e49e <__udivsi3+0xfe>
    e3d2:	0b03      	lsrs	r3, r0, #12
    e3d4:	428b      	cmp	r3, r1
    e3d6:	d319      	bcc.n	e40c <__udivsi3+0x6c>
    e3d8:	e000      	b.n	e3dc <__udivsi3+0x3c>
    e3da:	0a09      	lsrs	r1, r1, #8
    e3dc:	0bc3      	lsrs	r3, r0, #15
    e3de:	428b      	cmp	r3, r1
    e3e0:	d301      	bcc.n	e3e6 <__udivsi3+0x46>
    e3e2:	03cb      	lsls	r3, r1, #15
    e3e4:	1ac0      	subs	r0, r0, r3
    e3e6:	4152      	adcs	r2, r2
    e3e8:	0b83      	lsrs	r3, r0, #14
    e3ea:	428b      	cmp	r3, r1
    e3ec:	d301      	bcc.n	e3f2 <__udivsi3+0x52>
    e3ee:	038b      	lsls	r3, r1, #14
    e3f0:	1ac0      	subs	r0, r0, r3
    e3f2:	4152      	adcs	r2, r2
    e3f4:	0b43      	lsrs	r3, r0, #13
    e3f6:	428b      	cmp	r3, r1
    e3f8:	d301      	bcc.n	e3fe <__udivsi3+0x5e>
    e3fa:	034b      	lsls	r3, r1, #13
    e3fc:	1ac0      	subs	r0, r0, r3
    e3fe:	4152      	adcs	r2, r2
    e400:	0b03      	lsrs	r3, r0, #12
    e402:	428b      	cmp	r3, r1
    e404:	d301      	bcc.n	e40a <__udivsi3+0x6a>
    e406:	030b      	lsls	r3, r1, #12
    e408:	1ac0      	subs	r0, r0, r3
    e40a:	4152      	adcs	r2, r2
    e40c:	0ac3      	lsrs	r3, r0, #11
    e40e:	428b      	cmp	r3, r1
    e410:	d301      	bcc.n	e416 <__udivsi3+0x76>
    e412:	02cb      	lsls	r3, r1, #11
    e414:	1ac0      	subs	r0, r0, r3
    e416:	4152      	adcs	r2, r2
    e418:	0a83      	lsrs	r3, r0, #10
    e41a:	428b      	cmp	r3, r1
    e41c:	d301      	bcc.n	e422 <__udivsi3+0x82>
    e41e:	028b      	lsls	r3, r1, #10
    e420:	1ac0      	subs	r0, r0, r3
    e422:	4152      	adcs	r2, r2
    e424:	0a43      	lsrs	r3, r0, #9
    e426:	428b      	cmp	r3, r1
    e428:	d301      	bcc.n	e42e <__udivsi3+0x8e>
    e42a:	024b      	lsls	r3, r1, #9
    e42c:	1ac0      	subs	r0, r0, r3
    e42e:	4152      	adcs	r2, r2
    e430:	0a03      	lsrs	r3, r0, #8
    e432:	428b      	cmp	r3, r1
    e434:	d301      	bcc.n	e43a <__udivsi3+0x9a>
    e436:	020b      	lsls	r3, r1, #8
    e438:	1ac0      	subs	r0, r0, r3
    e43a:	4152      	adcs	r2, r2
    e43c:	d2cd      	bcs.n	e3da <__udivsi3+0x3a>
    e43e:	09c3      	lsrs	r3, r0, #7
    e440:	428b      	cmp	r3, r1
    e442:	d301      	bcc.n	e448 <__udivsi3+0xa8>
    e444:	01cb      	lsls	r3, r1, #7
    e446:	1ac0      	subs	r0, r0, r3
    e448:	4152      	adcs	r2, r2
    e44a:	0983      	lsrs	r3, r0, #6
    e44c:	428b      	cmp	r3, r1
    e44e:	d301      	bcc.n	e454 <__udivsi3+0xb4>
    e450:	018b      	lsls	r3, r1, #6
    e452:	1ac0      	subs	r0, r0, r3
    e454:	4152      	adcs	r2, r2
    e456:	0943      	lsrs	r3, r0, #5
    e458:	428b      	cmp	r3, r1
    e45a:	d301      	bcc.n	e460 <__udivsi3+0xc0>
    e45c:	014b      	lsls	r3, r1, #5
    e45e:	1ac0      	subs	r0, r0, r3
    e460:	4152      	adcs	r2, r2
    e462:	0903      	lsrs	r3, r0, #4
    e464:	428b      	cmp	r3, r1
    e466:	d301      	bcc.n	e46c <__udivsi3+0xcc>
    e468:	010b      	lsls	r3, r1, #4
    e46a:	1ac0      	subs	r0, r0, r3
    e46c:	4152      	adcs	r2, r2
    e46e:	08c3      	lsrs	r3, r0, #3
    e470:	428b      	cmp	r3, r1
    e472:	d301      	bcc.n	e478 <__udivsi3+0xd8>
    e474:	00cb      	lsls	r3, r1, #3
    e476:	1ac0      	subs	r0, r0, r3
    e478:	4152      	adcs	r2, r2
    e47a:	0883      	lsrs	r3, r0, #2
    e47c:	428b      	cmp	r3, r1
    e47e:	d301      	bcc.n	e484 <__udivsi3+0xe4>
    e480:	008b      	lsls	r3, r1, #2
    e482:	1ac0      	subs	r0, r0, r3
    e484:	4152      	adcs	r2, r2
    e486:	0843      	lsrs	r3, r0, #1
    e488:	428b      	cmp	r3, r1
    e48a:	d301      	bcc.n	e490 <__udivsi3+0xf0>
    e48c:	004b      	lsls	r3, r1, #1
    e48e:	1ac0      	subs	r0, r0, r3
    e490:	4152      	adcs	r2, r2
    e492:	1a41      	subs	r1, r0, r1
    e494:	d200      	bcs.n	e498 <__udivsi3+0xf8>
    e496:	4601      	mov	r1, r0
    e498:	4152      	adcs	r2, r2
    e49a:	4610      	mov	r0, r2
    e49c:	4770      	bx	lr
    e49e:	e7ff      	b.n	e4a0 <__udivsi3+0x100>
    e4a0:	b501      	push	{r0, lr}
    e4a2:	2000      	movs	r0, #0
    e4a4:	f000 f8f0 	bl	e688 <__aeabi_idiv0>
    e4a8:	bd02      	pop	{r1, pc}
    e4aa:	46c0      	nop			; (mov r8, r8)

0000e4ac <__aeabi_uidivmod>:
    e4ac:	2900      	cmp	r1, #0
    e4ae:	d0f7      	beq.n	e4a0 <__udivsi3+0x100>
    e4b0:	e776      	b.n	e3a0 <__udivsi3>
    e4b2:	4770      	bx	lr

0000e4b4 <__divsi3>:
    e4b4:	4603      	mov	r3, r0
    e4b6:	430b      	orrs	r3, r1
    e4b8:	d47f      	bmi.n	e5ba <__divsi3+0x106>
    e4ba:	2200      	movs	r2, #0
    e4bc:	0843      	lsrs	r3, r0, #1
    e4be:	428b      	cmp	r3, r1
    e4c0:	d374      	bcc.n	e5ac <__divsi3+0xf8>
    e4c2:	0903      	lsrs	r3, r0, #4
    e4c4:	428b      	cmp	r3, r1
    e4c6:	d35f      	bcc.n	e588 <__divsi3+0xd4>
    e4c8:	0a03      	lsrs	r3, r0, #8
    e4ca:	428b      	cmp	r3, r1
    e4cc:	d344      	bcc.n	e558 <__divsi3+0xa4>
    e4ce:	0b03      	lsrs	r3, r0, #12
    e4d0:	428b      	cmp	r3, r1
    e4d2:	d328      	bcc.n	e526 <__divsi3+0x72>
    e4d4:	0c03      	lsrs	r3, r0, #16
    e4d6:	428b      	cmp	r3, r1
    e4d8:	d30d      	bcc.n	e4f6 <__divsi3+0x42>
    e4da:	22ff      	movs	r2, #255	; 0xff
    e4dc:	0209      	lsls	r1, r1, #8
    e4de:	ba12      	rev	r2, r2
    e4e0:	0c03      	lsrs	r3, r0, #16
    e4e2:	428b      	cmp	r3, r1
    e4e4:	d302      	bcc.n	e4ec <__divsi3+0x38>
    e4e6:	1212      	asrs	r2, r2, #8
    e4e8:	0209      	lsls	r1, r1, #8
    e4ea:	d065      	beq.n	e5b8 <__divsi3+0x104>
    e4ec:	0b03      	lsrs	r3, r0, #12
    e4ee:	428b      	cmp	r3, r1
    e4f0:	d319      	bcc.n	e526 <__divsi3+0x72>
    e4f2:	e000      	b.n	e4f6 <__divsi3+0x42>
    e4f4:	0a09      	lsrs	r1, r1, #8
    e4f6:	0bc3      	lsrs	r3, r0, #15
    e4f8:	428b      	cmp	r3, r1
    e4fa:	d301      	bcc.n	e500 <__divsi3+0x4c>
    e4fc:	03cb      	lsls	r3, r1, #15
    e4fe:	1ac0      	subs	r0, r0, r3
    e500:	4152      	adcs	r2, r2
    e502:	0b83      	lsrs	r3, r0, #14
    e504:	428b      	cmp	r3, r1
    e506:	d301      	bcc.n	e50c <__divsi3+0x58>
    e508:	038b      	lsls	r3, r1, #14
    e50a:	1ac0      	subs	r0, r0, r3
    e50c:	4152      	adcs	r2, r2
    e50e:	0b43      	lsrs	r3, r0, #13
    e510:	428b      	cmp	r3, r1
    e512:	d301      	bcc.n	e518 <__divsi3+0x64>
    e514:	034b      	lsls	r3, r1, #13
    e516:	1ac0      	subs	r0, r0, r3
    e518:	4152      	adcs	r2, r2
    e51a:	0b03      	lsrs	r3, r0, #12
    e51c:	428b      	cmp	r3, r1
    e51e:	d301      	bcc.n	e524 <__divsi3+0x70>
    e520:	030b      	lsls	r3, r1, #12
    e522:	1ac0      	subs	r0, r0, r3
    e524:	4152      	adcs	r2, r2
    e526:	0ac3      	lsrs	r3, r0, #11
    e528:	428b      	cmp	r3, r1
    e52a:	d301      	bcc.n	e530 <__divsi3+0x7c>
    e52c:	02cb      	lsls	r3, r1, #11
    e52e:	1ac0      	subs	r0, r0, r3
    e530:	4152      	adcs	r2, r2
    e532:	0a83      	lsrs	r3, r0, #10
    e534:	428b      	cmp	r3, r1
    e536:	d301      	bcc.n	e53c <__divsi3+0x88>
    e538:	028b      	lsls	r3, r1, #10
    e53a:	1ac0      	subs	r0, r0, r3
    e53c:	4152      	adcs	r2, r2
    e53e:	0a43      	lsrs	r3, r0, #9
    e540:	428b      	cmp	r3, r1
    e542:	d301      	bcc.n	e548 <__divsi3+0x94>
    e544:	024b      	lsls	r3, r1, #9
    e546:	1ac0      	subs	r0, r0, r3
    e548:	4152      	adcs	r2, r2
    e54a:	0a03      	lsrs	r3, r0, #8
    e54c:	428b      	cmp	r3, r1
    e54e:	d301      	bcc.n	e554 <__divsi3+0xa0>
    e550:	020b      	lsls	r3, r1, #8
    e552:	1ac0      	subs	r0, r0, r3
    e554:	4152      	adcs	r2, r2
    e556:	d2cd      	bcs.n	e4f4 <__divsi3+0x40>
    e558:	09c3      	lsrs	r3, r0, #7
    e55a:	428b      	cmp	r3, r1
    e55c:	d301      	bcc.n	e562 <__divsi3+0xae>
    e55e:	01cb      	lsls	r3, r1, #7
    e560:	1ac0      	subs	r0, r0, r3
    e562:	4152      	adcs	r2, r2
    e564:	0983      	lsrs	r3, r0, #6
    e566:	428b      	cmp	r3, r1
    e568:	d301      	bcc.n	e56e <__divsi3+0xba>
    e56a:	018b      	lsls	r3, r1, #6
    e56c:	1ac0      	subs	r0, r0, r3
    e56e:	4152      	adcs	r2, r2
    e570:	0943      	lsrs	r3, r0, #5
    e572:	428b      	cmp	r3, r1
    e574:	d301      	bcc.n	e57a <__divsi3+0xc6>
    e576:	014b      	lsls	r3, r1, #5
    e578:	1ac0      	subs	r0, r0, r3
    e57a:	4152      	adcs	r2, r2
    e57c:	0903      	lsrs	r3, r0, #4
    e57e:	428b      	cmp	r3, r1
    e580:	d301      	bcc.n	e586 <__divsi3+0xd2>
    e582:	010b      	lsls	r3, r1, #4
    e584:	1ac0      	subs	r0, r0, r3
    e586:	4152      	adcs	r2, r2
    e588:	08c3      	lsrs	r3, r0, #3
    e58a:	428b      	cmp	r3, r1
    e58c:	d301      	bcc.n	e592 <__divsi3+0xde>
    e58e:	00cb      	lsls	r3, r1, #3
    e590:	1ac0      	subs	r0, r0, r3
    e592:	4152      	adcs	r2, r2
    e594:	0883      	lsrs	r3, r0, #2
    e596:	428b      	cmp	r3, r1
    e598:	d301      	bcc.n	e59e <__divsi3+0xea>
    e59a:	008b      	lsls	r3, r1, #2
    e59c:	1ac0      	subs	r0, r0, r3
    e59e:	4152      	adcs	r2, r2
    e5a0:	0843      	lsrs	r3, r0, #1
    e5a2:	428b      	cmp	r3, r1
    e5a4:	d301      	bcc.n	e5aa <__divsi3+0xf6>
    e5a6:	004b      	lsls	r3, r1, #1
    e5a8:	1ac0      	subs	r0, r0, r3
    e5aa:	4152      	adcs	r2, r2
    e5ac:	1a41      	subs	r1, r0, r1
    e5ae:	d200      	bcs.n	e5b2 <__divsi3+0xfe>
    e5b0:	4601      	mov	r1, r0
    e5b2:	4152      	adcs	r2, r2
    e5b4:	4610      	mov	r0, r2
    e5b6:	4770      	bx	lr
    e5b8:	e05d      	b.n	e676 <__divsi3+0x1c2>
    e5ba:	0fca      	lsrs	r2, r1, #31
    e5bc:	d000      	beq.n	e5c0 <__divsi3+0x10c>
    e5be:	4249      	negs	r1, r1
    e5c0:	1003      	asrs	r3, r0, #32
    e5c2:	d300      	bcc.n	e5c6 <__divsi3+0x112>
    e5c4:	4240      	negs	r0, r0
    e5c6:	4053      	eors	r3, r2
    e5c8:	2200      	movs	r2, #0
    e5ca:	469c      	mov	ip, r3
    e5cc:	0903      	lsrs	r3, r0, #4
    e5ce:	428b      	cmp	r3, r1
    e5d0:	d32d      	bcc.n	e62e <__divsi3+0x17a>
    e5d2:	0a03      	lsrs	r3, r0, #8
    e5d4:	428b      	cmp	r3, r1
    e5d6:	d312      	bcc.n	e5fe <__divsi3+0x14a>
    e5d8:	22fc      	movs	r2, #252	; 0xfc
    e5da:	0189      	lsls	r1, r1, #6
    e5dc:	ba12      	rev	r2, r2
    e5de:	0a03      	lsrs	r3, r0, #8
    e5e0:	428b      	cmp	r3, r1
    e5e2:	d30c      	bcc.n	e5fe <__divsi3+0x14a>
    e5e4:	0189      	lsls	r1, r1, #6
    e5e6:	1192      	asrs	r2, r2, #6
    e5e8:	428b      	cmp	r3, r1
    e5ea:	d308      	bcc.n	e5fe <__divsi3+0x14a>
    e5ec:	0189      	lsls	r1, r1, #6
    e5ee:	1192      	asrs	r2, r2, #6
    e5f0:	428b      	cmp	r3, r1
    e5f2:	d304      	bcc.n	e5fe <__divsi3+0x14a>
    e5f4:	0189      	lsls	r1, r1, #6
    e5f6:	d03a      	beq.n	e66e <__divsi3+0x1ba>
    e5f8:	1192      	asrs	r2, r2, #6
    e5fa:	e000      	b.n	e5fe <__divsi3+0x14a>
    e5fc:	0989      	lsrs	r1, r1, #6
    e5fe:	09c3      	lsrs	r3, r0, #7
    e600:	428b      	cmp	r3, r1
    e602:	d301      	bcc.n	e608 <__divsi3+0x154>
    e604:	01cb      	lsls	r3, r1, #7
    e606:	1ac0      	subs	r0, r0, r3
    e608:	4152      	adcs	r2, r2
    e60a:	0983      	lsrs	r3, r0, #6
    e60c:	428b      	cmp	r3, r1
    e60e:	d301      	bcc.n	e614 <__divsi3+0x160>
    e610:	018b      	lsls	r3, r1, #6
    e612:	1ac0      	subs	r0, r0, r3
    e614:	4152      	adcs	r2, r2
    e616:	0943      	lsrs	r3, r0, #5
    e618:	428b      	cmp	r3, r1
    e61a:	d301      	bcc.n	e620 <__divsi3+0x16c>
    e61c:	014b      	lsls	r3, r1, #5
    e61e:	1ac0      	subs	r0, r0, r3
    e620:	4152      	adcs	r2, r2
    e622:	0903      	lsrs	r3, r0, #4
    e624:	428b      	cmp	r3, r1
    e626:	d301      	bcc.n	e62c <__divsi3+0x178>
    e628:	010b      	lsls	r3, r1, #4
    e62a:	1ac0      	subs	r0, r0, r3
    e62c:	4152      	adcs	r2, r2
    e62e:	08c3      	lsrs	r3, r0, #3
    e630:	428b      	cmp	r3, r1
    e632:	d301      	bcc.n	e638 <__divsi3+0x184>
    e634:	00cb      	lsls	r3, r1, #3
    e636:	1ac0      	subs	r0, r0, r3
    e638:	4152      	adcs	r2, r2
    e63a:	0883      	lsrs	r3, r0, #2
    e63c:	428b      	cmp	r3, r1
    e63e:	d301      	bcc.n	e644 <__divsi3+0x190>
    e640:	008b      	lsls	r3, r1, #2
    e642:	1ac0      	subs	r0, r0, r3
    e644:	4152      	adcs	r2, r2
    e646:	d2d9      	bcs.n	e5fc <__divsi3+0x148>
    e648:	0843      	lsrs	r3, r0, #1
    e64a:	428b      	cmp	r3, r1
    e64c:	d301      	bcc.n	e652 <__divsi3+0x19e>
    e64e:	004b      	lsls	r3, r1, #1
    e650:	1ac0      	subs	r0, r0, r3
    e652:	4152      	adcs	r2, r2
    e654:	1a41      	subs	r1, r0, r1
    e656:	d200      	bcs.n	e65a <__divsi3+0x1a6>
    e658:	4601      	mov	r1, r0
    e65a:	4663      	mov	r3, ip
    e65c:	4152      	adcs	r2, r2
    e65e:	105b      	asrs	r3, r3, #1
    e660:	4610      	mov	r0, r2
    e662:	d301      	bcc.n	e668 <__divsi3+0x1b4>
    e664:	4240      	negs	r0, r0
    e666:	2b00      	cmp	r3, #0
    e668:	d500      	bpl.n	e66c <__divsi3+0x1b8>
    e66a:	4249      	negs	r1, r1
    e66c:	4770      	bx	lr
    e66e:	4663      	mov	r3, ip
    e670:	105b      	asrs	r3, r3, #1
    e672:	d300      	bcc.n	e676 <__divsi3+0x1c2>
    e674:	4240      	negs	r0, r0
    e676:	b501      	push	{r0, lr}
    e678:	2000      	movs	r0, #0
    e67a:	f000 f805 	bl	e688 <__aeabi_idiv0>
    e67e:	bd02      	pop	{r1, pc}

0000e680 <__aeabi_idivmod>:
    e680:	2900      	cmp	r1, #0
    e682:	d0f8      	beq.n	e676 <__divsi3+0x1c2>
    e684:	e716      	b.n	e4b4 <__divsi3>
    e686:	4770      	bx	lr

0000e688 <__aeabi_idiv0>:
    e688:	4770      	bx	lr
    e68a:	46c0      	nop			; (mov r8, r8)

0000e68c <__aeabi_cdrcmple>:
    e68c:	4684      	mov	ip, r0
    e68e:	1c10      	adds	r0, r2, #0
    e690:	4662      	mov	r2, ip
    e692:	468c      	mov	ip, r1
    e694:	1c19      	adds	r1, r3, #0
    e696:	4663      	mov	r3, ip
    e698:	e000      	b.n	e69c <__aeabi_cdcmpeq>
    e69a:	46c0      	nop			; (mov r8, r8)

0000e69c <__aeabi_cdcmpeq>:
    e69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e69e:	f001 ffa3 	bl	105e8 <__ledf2>
    e6a2:	2800      	cmp	r0, #0
    e6a4:	d401      	bmi.n	e6aa <__aeabi_cdcmpeq+0xe>
    e6a6:	2100      	movs	r1, #0
    e6a8:	42c8      	cmn	r0, r1
    e6aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000e6ac <__aeabi_dcmpeq>:
    e6ac:	b510      	push	{r4, lr}
    e6ae:	f001 fefd 	bl	104ac <__eqdf2>
    e6b2:	4240      	negs	r0, r0
    e6b4:	3001      	adds	r0, #1
    e6b6:	bd10      	pop	{r4, pc}

0000e6b8 <__aeabi_dcmplt>:
    e6b8:	b510      	push	{r4, lr}
    e6ba:	f001 ff95 	bl	105e8 <__ledf2>
    e6be:	2800      	cmp	r0, #0
    e6c0:	db01      	blt.n	e6c6 <__aeabi_dcmplt+0xe>
    e6c2:	2000      	movs	r0, #0
    e6c4:	bd10      	pop	{r4, pc}
    e6c6:	2001      	movs	r0, #1
    e6c8:	bd10      	pop	{r4, pc}
    e6ca:	46c0      	nop			; (mov r8, r8)

0000e6cc <__aeabi_dcmple>:
    e6cc:	b510      	push	{r4, lr}
    e6ce:	f001 ff8b 	bl	105e8 <__ledf2>
    e6d2:	2800      	cmp	r0, #0
    e6d4:	dd01      	ble.n	e6da <__aeabi_dcmple+0xe>
    e6d6:	2000      	movs	r0, #0
    e6d8:	bd10      	pop	{r4, pc}
    e6da:	2001      	movs	r0, #1
    e6dc:	bd10      	pop	{r4, pc}
    e6de:	46c0      	nop			; (mov r8, r8)

0000e6e0 <__aeabi_dcmpgt>:
    e6e0:	b510      	push	{r4, lr}
    e6e2:	f001 ff1d 	bl	10520 <__gedf2>
    e6e6:	2800      	cmp	r0, #0
    e6e8:	dc01      	bgt.n	e6ee <__aeabi_dcmpgt+0xe>
    e6ea:	2000      	movs	r0, #0
    e6ec:	bd10      	pop	{r4, pc}
    e6ee:	2001      	movs	r0, #1
    e6f0:	bd10      	pop	{r4, pc}
    e6f2:	46c0      	nop			; (mov r8, r8)

0000e6f4 <__aeabi_dcmpge>:
    e6f4:	b510      	push	{r4, lr}
    e6f6:	f001 ff13 	bl	10520 <__gedf2>
    e6fa:	2800      	cmp	r0, #0
    e6fc:	da01      	bge.n	e702 <__aeabi_dcmpge+0xe>
    e6fe:	2000      	movs	r0, #0
    e700:	bd10      	pop	{r4, pc}
    e702:	2001      	movs	r0, #1
    e704:	bd10      	pop	{r4, pc}
    e706:	46c0      	nop			; (mov r8, r8)

0000e708 <__aeabi_cfrcmple>:
    e708:	4684      	mov	ip, r0
    e70a:	1c08      	adds	r0, r1, #0
    e70c:	4661      	mov	r1, ip
    e70e:	e7ff      	b.n	e710 <__aeabi_cfcmpeq>

0000e710 <__aeabi_cfcmpeq>:
    e710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e712:	f000 fcd3 	bl	f0bc <__lesf2>
    e716:	2800      	cmp	r0, #0
    e718:	d401      	bmi.n	e71e <__aeabi_cfcmpeq+0xe>
    e71a:	2100      	movs	r1, #0
    e71c:	42c8      	cmn	r0, r1
    e71e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000e720 <__aeabi_fcmpeq>:
    e720:	b510      	push	{r4, lr}
    e722:	f000 fc65 	bl	eff0 <__eqsf2>
    e726:	4240      	negs	r0, r0
    e728:	3001      	adds	r0, #1
    e72a:	bd10      	pop	{r4, pc}

0000e72c <__aeabi_fcmplt>:
    e72c:	b510      	push	{r4, lr}
    e72e:	f000 fcc5 	bl	f0bc <__lesf2>
    e732:	2800      	cmp	r0, #0
    e734:	db01      	blt.n	e73a <__aeabi_fcmplt+0xe>
    e736:	2000      	movs	r0, #0
    e738:	bd10      	pop	{r4, pc}
    e73a:	2001      	movs	r0, #1
    e73c:	bd10      	pop	{r4, pc}
    e73e:	46c0      	nop			; (mov r8, r8)

0000e740 <__aeabi_fcmple>:
    e740:	b510      	push	{r4, lr}
    e742:	f000 fcbb 	bl	f0bc <__lesf2>
    e746:	2800      	cmp	r0, #0
    e748:	dd01      	ble.n	e74e <__aeabi_fcmple+0xe>
    e74a:	2000      	movs	r0, #0
    e74c:	bd10      	pop	{r4, pc}
    e74e:	2001      	movs	r0, #1
    e750:	bd10      	pop	{r4, pc}
    e752:	46c0      	nop			; (mov r8, r8)

0000e754 <__aeabi_fcmpgt>:
    e754:	b510      	push	{r4, lr}
    e756:	f000 fc71 	bl	f03c <__gesf2>
    e75a:	2800      	cmp	r0, #0
    e75c:	dc01      	bgt.n	e762 <__aeabi_fcmpgt+0xe>
    e75e:	2000      	movs	r0, #0
    e760:	bd10      	pop	{r4, pc}
    e762:	2001      	movs	r0, #1
    e764:	bd10      	pop	{r4, pc}
    e766:	46c0      	nop			; (mov r8, r8)

0000e768 <__aeabi_fcmpge>:
    e768:	b510      	push	{r4, lr}
    e76a:	f000 fc67 	bl	f03c <__gesf2>
    e76e:	2800      	cmp	r0, #0
    e770:	da01      	bge.n	e776 <__aeabi_fcmpge+0xe>
    e772:	2000      	movs	r0, #0
    e774:	bd10      	pop	{r4, pc}
    e776:	2001      	movs	r0, #1
    e778:	bd10      	pop	{r4, pc}
    e77a:	46c0      	nop			; (mov r8, r8)

0000e77c <__aeabi_uldivmod>:
    e77c:	2b00      	cmp	r3, #0
    e77e:	d111      	bne.n	e7a4 <__aeabi_uldivmod+0x28>
    e780:	2a00      	cmp	r2, #0
    e782:	d10f      	bne.n	e7a4 <__aeabi_uldivmod+0x28>
    e784:	2900      	cmp	r1, #0
    e786:	d100      	bne.n	e78a <__aeabi_uldivmod+0xe>
    e788:	2800      	cmp	r0, #0
    e78a:	d002      	beq.n	e792 <__aeabi_uldivmod+0x16>
    e78c:	2100      	movs	r1, #0
    e78e:	43c9      	mvns	r1, r1
    e790:	1c08      	adds	r0, r1, #0
    e792:	b407      	push	{r0, r1, r2}
    e794:	4802      	ldr	r0, [pc, #8]	; (e7a0 <__aeabi_uldivmod+0x24>)
    e796:	a102      	add	r1, pc, #8	; (adr r1, e7a0 <__aeabi_uldivmod+0x24>)
    e798:	1840      	adds	r0, r0, r1
    e79a:	9002      	str	r0, [sp, #8]
    e79c:	bd03      	pop	{r0, r1, pc}
    e79e:	46c0      	nop			; (mov r8, r8)
    e7a0:	fffffee9 	.word	0xfffffee9
    e7a4:	b403      	push	{r0, r1}
    e7a6:	4668      	mov	r0, sp
    e7a8:	b501      	push	{r0, lr}
    e7aa:	9802      	ldr	r0, [sp, #8]
    e7ac:	f000 f886 	bl	e8bc <__udivmoddi4>
    e7b0:	9b01      	ldr	r3, [sp, #4]
    e7b2:	469e      	mov	lr, r3
    e7b4:	b002      	add	sp, #8
    e7b6:	bc0c      	pop	{r2, r3}
    e7b8:	4770      	bx	lr
    e7ba:	46c0      	nop			; (mov r8, r8)

0000e7bc <__aeabi_lmul>:
    e7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7be:	46ce      	mov	lr, r9
    e7c0:	4647      	mov	r7, r8
    e7c2:	0415      	lsls	r5, r2, #16
    e7c4:	0c2d      	lsrs	r5, r5, #16
    e7c6:	002e      	movs	r6, r5
    e7c8:	b580      	push	{r7, lr}
    e7ca:	0407      	lsls	r7, r0, #16
    e7cc:	0c14      	lsrs	r4, r2, #16
    e7ce:	0c3f      	lsrs	r7, r7, #16
    e7d0:	4699      	mov	r9, r3
    e7d2:	0c03      	lsrs	r3, r0, #16
    e7d4:	437e      	muls	r6, r7
    e7d6:	435d      	muls	r5, r3
    e7d8:	4367      	muls	r7, r4
    e7da:	4363      	muls	r3, r4
    e7dc:	197f      	adds	r7, r7, r5
    e7de:	0c34      	lsrs	r4, r6, #16
    e7e0:	19e4      	adds	r4, r4, r7
    e7e2:	469c      	mov	ip, r3
    e7e4:	42a5      	cmp	r5, r4
    e7e6:	d903      	bls.n	e7f0 <__aeabi_lmul+0x34>
    e7e8:	2380      	movs	r3, #128	; 0x80
    e7ea:	025b      	lsls	r3, r3, #9
    e7ec:	4698      	mov	r8, r3
    e7ee:	44c4      	add	ip, r8
    e7f0:	464b      	mov	r3, r9
    e7f2:	4351      	muls	r1, r2
    e7f4:	4343      	muls	r3, r0
    e7f6:	0436      	lsls	r6, r6, #16
    e7f8:	0c36      	lsrs	r6, r6, #16
    e7fa:	0c25      	lsrs	r5, r4, #16
    e7fc:	0424      	lsls	r4, r4, #16
    e7fe:	4465      	add	r5, ip
    e800:	19a4      	adds	r4, r4, r6
    e802:	1859      	adds	r1, r3, r1
    e804:	1949      	adds	r1, r1, r5
    e806:	0020      	movs	r0, r4
    e808:	bc0c      	pop	{r2, r3}
    e80a:	4690      	mov	r8, r2
    e80c:	4699      	mov	r9, r3
    e80e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e810 <__aeabi_f2uiz>:
    e810:	219e      	movs	r1, #158	; 0x9e
    e812:	b510      	push	{r4, lr}
    e814:	05c9      	lsls	r1, r1, #23
    e816:	1c04      	adds	r4, r0, #0
    e818:	f7ff ffa6 	bl	e768 <__aeabi_fcmpge>
    e81c:	2800      	cmp	r0, #0
    e81e:	d103      	bne.n	e828 <__aeabi_f2uiz+0x18>
    e820:	1c20      	adds	r0, r4, #0
    e822:	f000 ff49 	bl	f6b8 <__aeabi_f2iz>
    e826:	bd10      	pop	{r4, pc}
    e828:	219e      	movs	r1, #158	; 0x9e
    e82a:	1c20      	adds	r0, r4, #0
    e82c:	05c9      	lsls	r1, r1, #23
    e82e:	f000 fda7 	bl	f380 <__aeabi_fsub>
    e832:	f000 ff41 	bl	f6b8 <__aeabi_f2iz>
    e836:	2380      	movs	r3, #128	; 0x80
    e838:	061b      	lsls	r3, r3, #24
    e83a:	469c      	mov	ip, r3
    e83c:	4460      	add	r0, ip
    e83e:	e7f2      	b.n	e826 <__aeabi_f2uiz+0x16>

0000e840 <__aeabi_d2uiz>:
    e840:	b570      	push	{r4, r5, r6, lr}
    e842:	2200      	movs	r2, #0
    e844:	4b0c      	ldr	r3, [pc, #48]	; (e878 <__aeabi_d2uiz+0x38>)
    e846:	0004      	movs	r4, r0
    e848:	000d      	movs	r5, r1
    e84a:	f7ff ff53 	bl	e6f4 <__aeabi_dcmpge>
    e84e:	2800      	cmp	r0, #0
    e850:	d104      	bne.n	e85c <__aeabi_d2uiz+0x1c>
    e852:	0020      	movs	r0, r4
    e854:	0029      	movs	r1, r5
    e856:	f002 fcbf 	bl	111d8 <__aeabi_d2iz>
    e85a:	bd70      	pop	{r4, r5, r6, pc}
    e85c:	4b06      	ldr	r3, [pc, #24]	; (e878 <__aeabi_d2uiz+0x38>)
    e85e:	2200      	movs	r2, #0
    e860:	0020      	movs	r0, r4
    e862:	0029      	movs	r1, r5
    e864:	f002 f9a2 	bl	10bac <__aeabi_dsub>
    e868:	f002 fcb6 	bl	111d8 <__aeabi_d2iz>
    e86c:	2380      	movs	r3, #128	; 0x80
    e86e:	061b      	lsls	r3, r3, #24
    e870:	469c      	mov	ip, r3
    e872:	4460      	add	r0, ip
    e874:	e7f1      	b.n	e85a <__aeabi_d2uiz+0x1a>
    e876:	46c0      	nop			; (mov r8, r8)
    e878:	41e00000 	.word	0x41e00000

0000e87c <__aeabi_f2ulz>:
    e87c:	b570      	push	{r4, r5, r6, lr}
    e87e:	f002 fd59 	bl	11334 <__aeabi_f2d>
    e882:	2200      	movs	r2, #0
    e884:	4b0b      	ldr	r3, [pc, #44]	; (e8b4 <__aeabi_f2ulz+0x38>)
    e886:	000d      	movs	r5, r1
    e888:	0004      	movs	r4, r0
    e88a:	f001 ff0f 	bl	106ac <__aeabi_dmul>
    e88e:	f7ff ffd7 	bl	e840 <__aeabi_d2uiz>
    e892:	0006      	movs	r6, r0
    e894:	f002 fd16 	bl	112c4 <__aeabi_ui2d>
    e898:	2200      	movs	r2, #0
    e89a:	4b07      	ldr	r3, [pc, #28]	; (e8b8 <__aeabi_f2ulz+0x3c>)
    e89c:	f001 ff06 	bl	106ac <__aeabi_dmul>
    e8a0:	0002      	movs	r2, r0
    e8a2:	000b      	movs	r3, r1
    e8a4:	0020      	movs	r0, r4
    e8a6:	0029      	movs	r1, r5
    e8a8:	f002 f980 	bl	10bac <__aeabi_dsub>
    e8ac:	f7ff ffc8 	bl	e840 <__aeabi_d2uiz>
    e8b0:	0031      	movs	r1, r6
    e8b2:	bd70      	pop	{r4, r5, r6, pc}
    e8b4:	3df00000 	.word	0x3df00000
    e8b8:	41f00000 	.word	0x41f00000

0000e8bc <__udivmoddi4>:
    e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8be:	4657      	mov	r7, sl
    e8c0:	464e      	mov	r6, r9
    e8c2:	4645      	mov	r5, r8
    e8c4:	46de      	mov	lr, fp
    e8c6:	b5e0      	push	{r5, r6, r7, lr}
    e8c8:	0004      	movs	r4, r0
    e8ca:	b083      	sub	sp, #12
    e8cc:	000d      	movs	r5, r1
    e8ce:	4692      	mov	sl, r2
    e8d0:	4699      	mov	r9, r3
    e8d2:	428b      	cmp	r3, r1
    e8d4:	d82f      	bhi.n	e936 <__udivmoddi4+0x7a>
    e8d6:	d02c      	beq.n	e932 <__udivmoddi4+0x76>
    e8d8:	4649      	mov	r1, r9
    e8da:	4650      	mov	r0, sl
    e8dc:	f002 fd9a 	bl	11414 <__clzdi2>
    e8e0:	0029      	movs	r1, r5
    e8e2:	0006      	movs	r6, r0
    e8e4:	0020      	movs	r0, r4
    e8e6:	f002 fd95 	bl	11414 <__clzdi2>
    e8ea:	1a33      	subs	r3, r6, r0
    e8ec:	4698      	mov	r8, r3
    e8ee:	3b20      	subs	r3, #32
    e8f0:	469b      	mov	fp, r3
    e8f2:	d500      	bpl.n	e8f6 <__udivmoddi4+0x3a>
    e8f4:	e074      	b.n	e9e0 <__udivmoddi4+0x124>
    e8f6:	4653      	mov	r3, sl
    e8f8:	465a      	mov	r2, fp
    e8fa:	4093      	lsls	r3, r2
    e8fc:	001f      	movs	r7, r3
    e8fe:	4653      	mov	r3, sl
    e900:	4642      	mov	r2, r8
    e902:	4093      	lsls	r3, r2
    e904:	001e      	movs	r6, r3
    e906:	42af      	cmp	r7, r5
    e908:	d829      	bhi.n	e95e <__udivmoddi4+0xa2>
    e90a:	d026      	beq.n	e95a <__udivmoddi4+0x9e>
    e90c:	465b      	mov	r3, fp
    e90e:	1ba4      	subs	r4, r4, r6
    e910:	41bd      	sbcs	r5, r7
    e912:	2b00      	cmp	r3, #0
    e914:	da00      	bge.n	e918 <__udivmoddi4+0x5c>
    e916:	e079      	b.n	ea0c <__udivmoddi4+0x150>
    e918:	2200      	movs	r2, #0
    e91a:	2300      	movs	r3, #0
    e91c:	9200      	str	r2, [sp, #0]
    e91e:	9301      	str	r3, [sp, #4]
    e920:	2301      	movs	r3, #1
    e922:	465a      	mov	r2, fp
    e924:	4093      	lsls	r3, r2
    e926:	9301      	str	r3, [sp, #4]
    e928:	2301      	movs	r3, #1
    e92a:	4642      	mov	r2, r8
    e92c:	4093      	lsls	r3, r2
    e92e:	9300      	str	r3, [sp, #0]
    e930:	e019      	b.n	e966 <__udivmoddi4+0xaa>
    e932:	4282      	cmp	r2, r0
    e934:	d9d0      	bls.n	e8d8 <__udivmoddi4+0x1c>
    e936:	2200      	movs	r2, #0
    e938:	2300      	movs	r3, #0
    e93a:	9200      	str	r2, [sp, #0]
    e93c:	9301      	str	r3, [sp, #4]
    e93e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e940:	2b00      	cmp	r3, #0
    e942:	d001      	beq.n	e948 <__udivmoddi4+0x8c>
    e944:	601c      	str	r4, [r3, #0]
    e946:	605d      	str	r5, [r3, #4]
    e948:	9800      	ldr	r0, [sp, #0]
    e94a:	9901      	ldr	r1, [sp, #4]
    e94c:	b003      	add	sp, #12
    e94e:	bc3c      	pop	{r2, r3, r4, r5}
    e950:	4690      	mov	r8, r2
    e952:	4699      	mov	r9, r3
    e954:	46a2      	mov	sl, r4
    e956:	46ab      	mov	fp, r5
    e958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e95a:	42a3      	cmp	r3, r4
    e95c:	d9d6      	bls.n	e90c <__udivmoddi4+0x50>
    e95e:	2200      	movs	r2, #0
    e960:	2300      	movs	r3, #0
    e962:	9200      	str	r2, [sp, #0]
    e964:	9301      	str	r3, [sp, #4]
    e966:	4643      	mov	r3, r8
    e968:	2b00      	cmp	r3, #0
    e96a:	d0e8      	beq.n	e93e <__udivmoddi4+0x82>
    e96c:	07fb      	lsls	r3, r7, #31
    e96e:	0872      	lsrs	r2, r6, #1
    e970:	431a      	orrs	r2, r3
    e972:	4646      	mov	r6, r8
    e974:	087b      	lsrs	r3, r7, #1
    e976:	e00e      	b.n	e996 <__udivmoddi4+0xda>
    e978:	42ab      	cmp	r3, r5
    e97a:	d101      	bne.n	e980 <__udivmoddi4+0xc4>
    e97c:	42a2      	cmp	r2, r4
    e97e:	d80c      	bhi.n	e99a <__udivmoddi4+0xde>
    e980:	1aa4      	subs	r4, r4, r2
    e982:	419d      	sbcs	r5, r3
    e984:	2001      	movs	r0, #1
    e986:	1924      	adds	r4, r4, r4
    e988:	416d      	adcs	r5, r5
    e98a:	2100      	movs	r1, #0
    e98c:	3e01      	subs	r6, #1
    e98e:	1824      	adds	r4, r4, r0
    e990:	414d      	adcs	r5, r1
    e992:	2e00      	cmp	r6, #0
    e994:	d006      	beq.n	e9a4 <__udivmoddi4+0xe8>
    e996:	42ab      	cmp	r3, r5
    e998:	d9ee      	bls.n	e978 <__udivmoddi4+0xbc>
    e99a:	3e01      	subs	r6, #1
    e99c:	1924      	adds	r4, r4, r4
    e99e:	416d      	adcs	r5, r5
    e9a0:	2e00      	cmp	r6, #0
    e9a2:	d1f8      	bne.n	e996 <__udivmoddi4+0xda>
    e9a4:	465b      	mov	r3, fp
    e9a6:	9800      	ldr	r0, [sp, #0]
    e9a8:	9901      	ldr	r1, [sp, #4]
    e9aa:	1900      	adds	r0, r0, r4
    e9ac:	4169      	adcs	r1, r5
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	db22      	blt.n	e9f8 <__udivmoddi4+0x13c>
    e9b2:	002b      	movs	r3, r5
    e9b4:	465a      	mov	r2, fp
    e9b6:	40d3      	lsrs	r3, r2
    e9b8:	002a      	movs	r2, r5
    e9ba:	4644      	mov	r4, r8
    e9bc:	40e2      	lsrs	r2, r4
    e9be:	001c      	movs	r4, r3
    e9c0:	465b      	mov	r3, fp
    e9c2:	0015      	movs	r5, r2
    e9c4:	2b00      	cmp	r3, #0
    e9c6:	db2c      	blt.n	ea22 <__udivmoddi4+0x166>
    e9c8:	0026      	movs	r6, r4
    e9ca:	409e      	lsls	r6, r3
    e9cc:	0033      	movs	r3, r6
    e9ce:	0026      	movs	r6, r4
    e9d0:	4647      	mov	r7, r8
    e9d2:	40be      	lsls	r6, r7
    e9d4:	0032      	movs	r2, r6
    e9d6:	1a80      	subs	r0, r0, r2
    e9d8:	4199      	sbcs	r1, r3
    e9da:	9000      	str	r0, [sp, #0]
    e9dc:	9101      	str	r1, [sp, #4]
    e9de:	e7ae      	b.n	e93e <__udivmoddi4+0x82>
    e9e0:	4642      	mov	r2, r8
    e9e2:	2320      	movs	r3, #32
    e9e4:	1a9b      	subs	r3, r3, r2
    e9e6:	4652      	mov	r2, sl
    e9e8:	40da      	lsrs	r2, r3
    e9ea:	4641      	mov	r1, r8
    e9ec:	0013      	movs	r3, r2
    e9ee:	464a      	mov	r2, r9
    e9f0:	408a      	lsls	r2, r1
    e9f2:	0017      	movs	r7, r2
    e9f4:	431f      	orrs	r7, r3
    e9f6:	e782      	b.n	e8fe <__udivmoddi4+0x42>
    e9f8:	4642      	mov	r2, r8
    e9fa:	2320      	movs	r3, #32
    e9fc:	1a9b      	subs	r3, r3, r2
    e9fe:	002a      	movs	r2, r5
    ea00:	4646      	mov	r6, r8
    ea02:	409a      	lsls	r2, r3
    ea04:	0023      	movs	r3, r4
    ea06:	40f3      	lsrs	r3, r6
    ea08:	4313      	orrs	r3, r2
    ea0a:	e7d5      	b.n	e9b8 <__udivmoddi4+0xfc>
    ea0c:	4642      	mov	r2, r8
    ea0e:	2320      	movs	r3, #32
    ea10:	2100      	movs	r1, #0
    ea12:	1a9b      	subs	r3, r3, r2
    ea14:	2200      	movs	r2, #0
    ea16:	9100      	str	r1, [sp, #0]
    ea18:	9201      	str	r2, [sp, #4]
    ea1a:	2201      	movs	r2, #1
    ea1c:	40da      	lsrs	r2, r3
    ea1e:	9201      	str	r2, [sp, #4]
    ea20:	e782      	b.n	e928 <__udivmoddi4+0x6c>
    ea22:	4642      	mov	r2, r8
    ea24:	2320      	movs	r3, #32
    ea26:	0026      	movs	r6, r4
    ea28:	1a9b      	subs	r3, r3, r2
    ea2a:	40de      	lsrs	r6, r3
    ea2c:	002f      	movs	r7, r5
    ea2e:	46b4      	mov	ip, r6
    ea30:	4097      	lsls	r7, r2
    ea32:	4666      	mov	r6, ip
    ea34:	003b      	movs	r3, r7
    ea36:	4333      	orrs	r3, r6
    ea38:	e7c9      	b.n	e9ce <__udivmoddi4+0x112>
    ea3a:	46c0      	nop			; (mov r8, r8)

0000ea3c <__aeabi_fadd>:
    ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea3e:	46c6      	mov	lr, r8
    ea40:	024e      	lsls	r6, r1, #9
    ea42:	0247      	lsls	r7, r0, #9
    ea44:	0a76      	lsrs	r6, r6, #9
    ea46:	0a7b      	lsrs	r3, r7, #9
    ea48:	0044      	lsls	r4, r0, #1
    ea4a:	0fc5      	lsrs	r5, r0, #31
    ea4c:	00f7      	lsls	r7, r6, #3
    ea4e:	0048      	lsls	r0, r1, #1
    ea50:	4698      	mov	r8, r3
    ea52:	b500      	push	{lr}
    ea54:	0e24      	lsrs	r4, r4, #24
    ea56:	002a      	movs	r2, r5
    ea58:	00db      	lsls	r3, r3, #3
    ea5a:	0e00      	lsrs	r0, r0, #24
    ea5c:	0fc9      	lsrs	r1, r1, #31
    ea5e:	46bc      	mov	ip, r7
    ea60:	428d      	cmp	r5, r1
    ea62:	d067      	beq.n	eb34 <__aeabi_fadd+0xf8>
    ea64:	1a22      	subs	r2, r4, r0
    ea66:	2a00      	cmp	r2, #0
    ea68:	dc00      	bgt.n	ea6c <__aeabi_fadd+0x30>
    ea6a:	e0a5      	b.n	ebb8 <__aeabi_fadd+0x17c>
    ea6c:	2800      	cmp	r0, #0
    ea6e:	d13a      	bne.n	eae6 <__aeabi_fadd+0xaa>
    ea70:	2f00      	cmp	r7, #0
    ea72:	d100      	bne.n	ea76 <__aeabi_fadd+0x3a>
    ea74:	e093      	b.n	eb9e <__aeabi_fadd+0x162>
    ea76:	1e51      	subs	r1, r2, #1
    ea78:	2900      	cmp	r1, #0
    ea7a:	d000      	beq.n	ea7e <__aeabi_fadd+0x42>
    ea7c:	e0bc      	b.n	ebf8 <__aeabi_fadd+0x1bc>
    ea7e:	2401      	movs	r4, #1
    ea80:	1bdb      	subs	r3, r3, r7
    ea82:	015a      	lsls	r2, r3, #5
    ea84:	d546      	bpl.n	eb14 <__aeabi_fadd+0xd8>
    ea86:	019b      	lsls	r3, r3, #6
    ea88:	099e      	lsrs	r6, r3, #6
    ea8a:	0030      	movs	r0, r6
    ea8c:	f002 fca4 	bl	113d8 <__clzsi2>
    ea90:	3805      	subs	r0, #5
    ea92:	4086      	lsls	r6, r0
    ea94:	4284      	cmp	r4, r0
    ea96:	dd00      	ble.n	ea9a <__aeabi_fadd+0x5e>
    ea98:	e09d      	b.n	ebd6 <__aeabi_fadd+0x19a>
    ea9a:	1b04      	subs	r4, r0, r4
    ea9c:	0032      	movs	r2, r6
    ea9e:	2020      	movs	r0, #32
    eaa0:	3401      	adds	r4, #1
    eaa2:	40e2      	lsrs	r2, r4
    eaa4:	1b04      	subs	r4, r0, r4
    eaa6:	40a6      	lsls	r6, r4
    eaa8:	0033      	movs	r3, r6
    eaaa:	1e5e      	subs	r6, r3, #1
    eaac:	41b3      	sbcs	r3, r6
    eaae:	2400      	movs	r4, #0
    eab0:	4313      	orrs	r3, r2
    eab2:	075a      	lsls	r2, r3, #29
    eab4:	d004      	beq.n	eac0 <__aeabi_fadd+0x84>
    eab6:	220f      	movs	r2, #15
    eab8:	401a      	ands	r2, r3
    eaba:	2a04      	cmp	r2, #4
    eabc:	d000      	beq.n	eac0 <__aeabi_fadd+0x84>
    eabe:	3304      	adds	r3, #4
    eac0:	015a      	lsls	r2, r3, #5
    eac2:	d529      	bpl.n	eb18 <__aeabi_fadd+0xdc>
    eac4:	3401      	adds	r4, #1
    eac6:	2cff      	cmp	r4, #255	; 0xff
    eac8:	d100      	bne.n	eacc <__aeabi_fadd+0x90>
    eaca:	e081      	b.n	ebd0 <__aeabi_fadd+0x194>
    eacc:	002a      	movs	r2, r5
    eace:	019b      	lsls	r3, r3, #6
    ead0:	0a5b      	lsrs	r3, r3, #9
    ead2:	b2e4      	uxtb	r4, r4
    ead4:	025b      	lsls	r3, r3, #9
    ead6:	05e4      	lsls	r4, r4, #23
    ead8:	0a58      	lsrs	r0, r3, #9
    eada:	07d2      	lsls	r2, r2, #31
    eadc:	4320      	orrs	r0, r4
    eade:	4310      	orrs	r0, r2
    eae0:	bc04      	pop	{r2}
    eae2:	4690      	mov	r8, r2
    eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eae6:	2cff      	cmp	r4, #255	; 0xff
    eae8:	d0e3      	beq.n	eab2 <__aeabi_fadd+0x76>
    eaea:	2180      	movs	r1, #128	; 0x80
    eaec:	0038      	movs	r0, r7
    eaee:	04c9      	lsls	r1, r1, #19
    eaf0:	4308      	orrs	r0, r1
    eaf2:	4684      	mov	ip, r0
    eaf4:	2a1b      	cmp	r2, #27
    eaf6:	dd00      	ble.n	eafa <__aeabi_fadd+0xbe>
    eaf8:	e082      	b.n	ec00 <__aeabi_fadd+0x1c4>
    eafa:	2020      	movs	r0, #32
    eafc:	4661      	mov	r1, ip
    eafe:	40d1      	lsrs	r1, r2
    eb00:	1a82      	subs	r2, r0, r2
    eb02:	4660      	mov	r0, ip
    eb04:	4090      	lsls	r0, r2
    eb06:	0002      	movs	r2, r0
    eb08:	1e50      	subs	r0, r2, #1
    eb0a:	4182      	sbcs	r2, r0
    eb0c:	430a      	orrs	r2, r1
    eb0e:	1a9b      	subs	r3, r3, r2
    eb10:	015a      	lsls	r2, r3, #5
    eb12:	d4b8      	bmi.n	ea86 <__aeabi_fadd+0x4a>
    eb14:	075a      	lsls	r2, r3, #29
    eb16:	d1ce      	bne.n	eab6 <__aeabi_fadd+0x7a>
    eb18:	08de      	lsrs	r6, r3, #3
    eb1a:	002a      	movs	r2, r5
    eb1c:	2cff      	cmp	r4, #255	; 0xff
    eb1e:	d13a      	bne.n	eb96 <__aeabi_fadd+0x15a>
    eb20:	2e00      	cmp	r6, #0
    eb22:	d100      	bne.n	eb26 <__aeabi_fadd+0xea>
    eb24:	e0ae      	b.n	ec84 <__aeabi_fadd+0x248>
    eb26:	2380      	movs	r3, #128	; 0x80
    eb28:	03db      	lsls	r3, r3, #15
    eb2a:	4333      	orrs	r3, r6
    eb2c:	025b      	lsls	r3, r3, #9
    eb2e:	0a5b      	lsrs	r3, r3, #9
    eb30:	24ff      	movs	r4, #255	; 0xff
    eb32:	e7cf      	b.n	ead4 <__aeabi_fadd+0x98>
    eb34:	1a21      	subs	r1, r4, r0
    eb36:	2900      	cmp	r1, #0
    eb38:	dd52      	ble.n	ebe0 <__aeabi_fadd+0x1a4>
    eb3a:	2800      	cmp	r0, #0
    eb3c:	d031      	beq.n	eba2 <__aeabi_fadd+0x166>
    eb3e:	2cff      	cmp	r4, #255	; 0xff
    eb40:	d0b7      	beq.n	eab2 <__aeabi_fadd+0x76>
    eb42:	2080      	movs	r0, #128	; 0x80
    eb44:	003e      	movs	r6, r7
    eb46:	04c0      	lsls	r0, r0, #19
    eb48:	4306      	orrs	r6, r0
    eb4a:	46b4      	mov	ip, r6
    eb4c:	291b      	cmp	r1, #27
    eb4e:	dd00      	ble.n	eb52 <__aeabi_fadd+0x116>
    eb50:	e0aa      	b.n	eca8 <__aeabi_fadd+0x26c>
    eb52:	2620      	movs	r6, #32
    eb54:	4660      	mov	r0, ip
    eb56:	40c8      	lsrs	r0, r1
    eb58:	1a71      	subs	r1, r6, r1
    eb5a:	4666      	mov	r6, ip
    eb5c:	408e      	lsls	r6, r1
    eb5e:	0031      	movs	r1, r6
    eb60:	1e4e      	subs	r6, r1, #1
    eb62:	41b1      	sbcs	r1, r6
    eb64:	4301      	orrs	r1, r0
    eb66:	185b      	adds	r3, r3, r1
    eb68:	0159      	lsls	r1, r3, #5
    eb6a:	d5d3      	bpl.n	eb14 <__aeabi_fadd+0xd8>
    eb6c:	3401      	adds	r4, #1
    eb6e:	2cff      	cmp	r4, #255	; 0xff
    eb70:	d100      	bne.n	eb74 <__aeabi_fadd+0x138>
    eb72:	e087      	b.n	ec84 <__aeabi_fadd+0x248>
    eb74:	2201      	movs	r2, #1
    eb76:	4978      	ldr	r1, [pc, #480]	; (ed58 <__aeabi_fadd+0x31c>)
    eb78:	401a      	ands	r2, r3
    eb7a:	085b      	lsrs	r3, r3, #1
    eb7c:	400b      	ands	r3, r1
    eb7e:	4313      	orrs	r3, r2
    eb80:	e797      	b.n	eab2 <__aeabi_fadd+0x76>
    eb82:	2c00      	cmp	r4, #0
    eb84:	d000      	beq.n	eb88 <__aeabi_fadd+0x14c>
    eb86:	e0a7      	b.n	ecd8 <__aeabi_fadd+0x29c>
    eb88:	2b00      	cmp	r3, #0
    eb8a:	d000      	beq.n	eb8e <__aeabi_fadd+0x152>
    eb8c:	e0b6      	b.n	ecfc <__aeabi_fadd+0x2c0>
    eb8e:	1e3b      	subs	r3, r7, #0
    eb90:	d162      	bne.n	ec58 <__aeabi_fadd+0x21c>
    eb92:	2600      	movs	r6, #0
    eb94:	2200      	movs	r2, #0
    eb96:	0273      	lsls	r3, r6, #9
    eb98:	0a5b      	lsrs	r3, r3, #9
    eb9a:	b2e4      	uxtb	r4, r4
    eb9c:	e79a      	b.n	ead4 <__aeabi_fadd+0x98>
    eb9e:	0014      	movs	r4, r2
    eba0:	e787      	b.n	eab2 <__aeabi_fadd+0x76>
    eba2:	2f00      	cmp	r7, #0
    eba4:	d04d      	beq.n	ec42 <__aeabi_fadd+0x206>
    eba6:	1e48      	subs	r0, r1, #1
    eba8:	2800      	cmp	r0, #0
    ebaa:	d157      	bne.n	ec5c <__aeabi_fadd+0x220>
    ebac:	4463      	add	r3, ip
    ebae:	2401      	movs	r4, #1
    ebb0:	015a      	lsls	r2, r3, #5
    ebb2:	d5af      	bpl.n	eb14 <__aeabi_fadd+0xd8>
    ebb4:	2402      	movs	r4, #2
    ebb6:	e7dd      	b.n	eb74 <__aeabi_fadd+0x138>
    ebb8:	2a00      	cmp	r2, #0
    ebba:	d124      	bne.n	ec06 <__aeabi_fadd+0x1ca>
    ebbc:	1c62      	adds	r2, r4, #1
    ebbe:	b2d2      	uxtb	r2, r2
    ebc0:	2a01      	cmp	r2, #1
    ebc2:	ddde      	ble.n	eb82 <__aeabi_fadd+0x146>
    ebc4:	1bde      	subs	r6, r3, r7
    ebc6:	0172      	lsls	r2, r6, #5
    ebc8:	d535      	bpl.n	ec36 <__aeabi_fadd+0x1fa>
    ebca:	1afe      	subs	r6, r7, r3
    ebcc:	000d      	movs	r5, r1
    ebce:	e75c      	b.n	ea8a <__aeabi_fadd+0x4e>
    ebd0:	002a      	movs	r2, r5
    ebd2:	2300      	movs	r3, #0
    ebd4:	e77e      	b.n	ead4 <__aeabi_fadd+0x98>
    ebd6:	0033      	movs	r3, r6
    ebd8:	4a60      	ldr	r2, [pc, #384]	; (ed5c <__aeabi_fadd+0x320>)
    ebda:	1a24      	subs	r4, r4, r0
    ebdc:	4013      	ands	r3, r2
    ebde:	e768      	b.n	eab2 <__aeabi_fadd+0x76>
    ebe0:	2900      	cmp	r1, #0
    ebe2:	d163      	bne.n	ecac <__aeabi_fadd+0x270>
    ebe4:	1c61      	adds	r1, r4, #1
    ebe6:	b2c8      	uxtb	r0, r1
    ebe8:	2801      	cmp	r0, #1
    ebea:	dd4e      	ble.n	ec8a <__aeabi_fadd+0x24e>
    ebec:	29ff      	cmp	r1, #255	; 0xff
    ebee:	d049      	beq.n	ec84 <__aeabi_fadd+0x248>
    ebf0:	4463      	add	r3, ip
    ebf2:	085b      	lsrs	r3, r3, #1
    ebf4:	000c      	movs	r4, r1
    ebf6:	e75c      	b.n	eab2 <__aeabi_fadd+0x76>
    ebf8:	2aff      	cmp	r2, #255	; 0xff
    ebfa:	d041      	beq.n	ec80 <__aeabi_fadd+0x244>
    ebfc:	000a      	movs	r2, r1
    ebfe:	e779      	b.n	eaf4 <__aeabi_fadd+0xb8>
    ec00:	2201      	movs	r2, #1
    ec02:	1a9b      	subs	r3, r3, r2
    ec04:	e784      	b.n	eb10 <__aeabi_fadd+0xd4>
    ec06:	2c00      	cmp	r4, #0
    ec08:	d01d      	beq.n	ec46 <__aeabi_fadd+0x20a>
    ec0a:	28ff      	cmp	r0, #255	; 0xff
    ec0c:	d022      	beq.n	ec54 <__aeabi_fadd+0x218>
    ec0e:	2480      	movs	r4, #128	; 0x80
    ec10:	04e4      	lsls	r4, r4, #19
    ec12:	4252      	negs	r2, r2
    ec14:	4323      	orrs	r3, r4
    ec16:	2a1b      	cmp	r2, #27
    ec18:	dd00      	ble.n	ec1c <__aeabi_fadd+0x1e0>
    ec1a:	e08a      	b.n	ed32 <__aeabi_fadd+0x2f6>
    ec1c:	001c      	movs	r4, r3
    ec1e:	2520      	movs	r5, #32
    ec20:	40d4      	lsrs	r4, r2
    ec22:	1aaa      	subs	r2, r5, r2
    ec24:	4093      	lsls	r3, r2
    ec26:	1e5a      	subs	r2, r3, #1
    ec28:	4193      	sbcs	r3, r2
    ec2a:	4323      	orrs	r3, r4
    ec2c:	4662      	mov	r2, ip
    ec2e:	0004      	movs	r4, r0
    ec30:	1ad3      	subs	r3, r2, r3
    ec32:	000d      	movs	r5, r1
    ec34:	e725      	b.n	ea82 <__aeabi_fadd+0x46>
    ec36:	2e00      	cmp	r6, #0
    ec38:	d000      	beq.n	ec3c <__aeabi_fadd+0x200>
    ec3a:	e726      	b.n	ea8a <__aeabi_fadd+0x4e>
    ec3c:	2200      	movs	r2, #0
    ec3e:	2400      	movs	r4, #0
    ec40:	e7a9      	b.n	eb96 <__aeabi_fadd+0x15a>
    ec42:	000c      	movs	r4, r1
    ec44:	e735      	b.n	eab2 <__aeabi_fadd+0x76>
    ec46:	2b00      	cmp	r3, #0
    ec48:	d04d      	beq.n	ece6 <__aeabi_fadd+0x2aa>
    ec4a:	43d2      	mvns	r2, r2
    ec4c:	2a00      	cmp	r2, #0
    ec4e:	d0ed      	beq.n	ec2c <__aeabi_fadd+0x1f0>
    ec50:	28ff      	cmp	r0, #255	; 0xff
    ec52:	d1e0      	bne.n	ec16 <__aeabi_fadd+0x1da>
    ec54:	4663      	mov	r3, ip
    ec56:	24ff      	movs	r4, #255	; 0xff
    ec58:	000d      	movs	r5, r1
    ec5a:	e72a      	b.n	eab2 <__aeabi_fadd+0x76>
    ec5c:	29ff      	cmp	r1, #255	; 0xff
    ec5e:	d00f      	beq.n	ec80 <__aeabi_fadd+0x244>
    ec60:	0001      	movs	r1, r0
    ec62:	e773      	b.n	eb4c <__aeabi_fadd+0x110>
    ec64:	2b00      	cmp	r3, #0
    ec66:	d061      	beq.n	ed2c <__aeabi_fadd+0x2f0>
    ec68:	24ff      	movs	r4, #255	; 0xff
    ec6a:	2f00      	cmp	r7, #0
    ec6c:	d100      	bne.n	ec70 <__aeabi_fadd+0x234>
    ec6e:	e720      	b.n	eab2 <__aeabi_fadd+0x76>
    ec70:	2280      	movs	r2, #128	; 0x80
    ec72:	4641      	mov	r1, r8
    ec74:	03d2      	lsls	r2, r2, #15
    ec76:	4211      	tst	r1, r2
    ec78:	d002      	beq.n	ec80 <__aeabi_fadd+0x244>
    ec7a:	4216      	tst	r6, r2
    ec7c:	d100      	bne.n	ec80 <__aeabi_fadd+0x244>
    ec7e:	003b      	movs	r3, r7
    ec80:	24ff      	movs	r4, #255	; 0xff
    ec82:	e716      	b.n	eab2 <__aeabi_fadd+0x76>
    ec84:	24ff      	movs	r4, #255	; 0xff
    ec86:	2300      	movs	r3, #0
    ec88:	e724      	b.n	ead4 <__aeabi_fadd+0x98>
    ec8a:	2c00      	cmp	r4, #0
    ec8c:	d1ea      	bne.n	ec64 <__aeabi_fadd+0x228>
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d058      	beq.n	ed44 <__aeabi_fadd+0x308>
    ec92:	2f00      	cmp	r7, #0
    ec94:	d100      	bne.n	ec98 <__aeabi_fadd+0x25c>
    ec96:	e70c      	b.n	eab2 <__aeabi_fadd+0x76>
    ec98:	4463      	add	r3, ip
    ec9a:	015a      	lsls	r2, r3, #5
    ec9c:	d400      	bmi.n	eca0 <__aeabi_fadd+0x264>
    ec9e:	e739      	b.n	eb14 <__aeabi_fadd+0xd8>
    eca0:	4a2e      	ldr	r2, [pc, #184]	; (ed5c <__aeabi_fadd+0x320>)
    eca2:	000c      	movs	r4, r1
    eca4:	4013      	ands	r3, r2
    eca6:	e704      	b.n	eab2 <__aeabi_fadd+0x76>
    eca8:	2101      	movs	r1, #1
    ecaa:	e75c      	b.n	eb66 <__aeabi_fadd+0x12a>
    ecac:	2c00      	cmp	r4, #0
    ecae:	d11e      	bne.n	ecee <__aeabi_fadd+0x2b2>
    ecb0:	2b00      	cmp	r3, #0
    ecb2:	d040      	beq.n	ed36 <__aeabi_fadd+0x2fa>
    ecb4:	43c9      	mvns	r1, r1
    ecb6:	2900      	cmp	r1, #0
    ecb8:	d00b      	beq.n	ecd2 <__aeabi_fadd+0x296>
    ecba:	28ff      	cmp	r0, #255	; 0xff
    ecbc:	d036      	beq.n	ed2c <__aeabi_fadd+0x2f0>
    ecbe:	291b      	cmp	r1, #27
    ecc0:	dc47      	bgt.n	ed52 <__aeabi_fadd+0x316>
    ecc2:	001c      	movs	r4, r3
    ecc4:	2620      	movs	r6, #32
    ecc6:	40cc      	lsrs	r4, r1
    ecc8:	1a71      	subs	r1, r6, r1
    ecca:	408b      	lsls	r3, r1
    eccc:	1e59      	subs	r1, r3, #1
    ecce:	418b      	sbcs	r3, r1
    ecd0:	4323      	orrs	r3, r4
    ecd2:	4463      	add	r3, ip
    ecd4:	0004      	movs	r4, r0
    ecd6:	e747      	b.n	eb68 <__aeabi_fadd+0x12c>
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d118      	bne.n	ed0e <__aeabi_fadd+0x2d2>
    ecdc:	1e3b      	subs	r3, r7, #0
    ecde:	d02d      	beq.n	ed3c <__aeabi_fadd+0x300>
    ece0:	000d      	movs	r5, r1
    ece2:	24ff      	movs	r4, #255	; 0xff
    ece4:	e6e5      	b.n	eab2 <__aeabi_fadd+0x76>
    ece6:	003b      	movs	r3, r7
    ece8:	0004      	movs	r4, r0
    ecea:	000d      	movs	r5, r1
    ecec:	e6e1      	b.n	eab2 <__aeabi_fadd+0x76>
    ecee:	28ff      	cmp	r0, #255	; 0xff
    ecf0:	d01c      	beq.n	ed2c <__aeabi_fadd+0x2f0>
    ecf2:	2480      	movs	r4, #128	; 0x80
    ecf4:	04e4      	lsls	r4, r4, #19
    ecf6:	4249      	negs	r1, r1
    ecf8:	4323      	orrs	r3, r4
    ecfa:	e7e0      	b.n	ecbe <__aeabi_fadd+0x282>
    ecfc:	2f00      	cmp	r7, #0
    ecfe:	d100      	bne.n	ed02 <__aeabi_fadd+0x2c6>
    ed00:	e6d7      	b.n	eab2 <__aeabi_fadd+0x76>
    ed02:	1bde      	subs	r6, r3, r7
    ed04:	0172      	lsls	r2, r6, #5
    ed06:	d51f      	bpl.n	ed48 <__aeabi_fadd+0x30c>
    ed08:	1afb      	subs	r3, r7, r3
    ed0a:	000d      	movs	r5, r1
    ed0c:	e6d1      	b.n	eab2 <__aeabi_fadd+0x76>
    ed0e:	24ff      	movs	r4, #255	; 0xff
    ed10:	2f00      	cmp	r7, #0
    ed12:	d100      	bne.n	ed16 <__aeabi_fadd+0x2da>
    ed14:	e6cd      	b.n	eab2 <__aeabi_fadd+0x76>
    ed16:	2280      	movs	r2, #128	; 0x80
    ed18:	4640      	mov	r0, r8
    ed1a:	03d2      	lsls	r2, r2, #15
    ed1c:	4210      	tst	r0, r2
    ed1e:	d0af      	beq.n	ec80 <__aeabi_fadd+0x244>
    ed20:	4216      	tst	r6, r2
    ed22:	d1ad      	bne.n	ec80 <__aeabi_fadd+0x244>
    ed24:	003b      	movs	r3, r7
    ed26:	000d      	movs	r5, r1
    ed28:	24ff      	movs	r4, #255	; 0xff
    ed2a:	e6c2      	b.n	eab2 <__aeabi_fadd+0x76>
    ed2c:	4663      	mov	r3, ip
    ed2e:	24ff      	movs	r4, #255	; 0xff
    ed30:	e6bf      	b.n	eab2 <__aeabi_fadd+0x76>
    ed32:	2301      	movs	r3, #1
    ed34:	e77a      	b.n	ec2c <__aeabi_fadd+0x1f0>
    ed36:	003b      	movs	r3, r7
    ed38:	0004      	movs	r4, r0
    ed3a:	e6ba      	b.n	eab2 <__aeabi_fadd+0x76>
    ed3c:	2680      	movs	r6, #128	; 0x80
    ed3e:	2200      	movs	r2, #0
    ed40:	03f6      	lsls	r6, r6, #15
    ed42:	e6f0      	b.n	eb26 <__aeabi_fadd+0xea>
    ed44:	003b      	movs	r3, r7
    ed46:	e6b4      	b.n	eab2 <__aeabi_fadd+0x76>
    ed48:	1e33      	subs	r3, r6, #0
    ed4a:	d000      	beq.n	ed4e <__aeabi_fadd+0x312>
    ed4c:	e6e2      	b.n	eb14 <__aeabi_fadd+0xd8>
    ed4e:	2200      	movs	r2, #0
    ed50:	e721      	b.n	eb96 <__aeabi_fadd+0x15a>
    ed52:	2301      	movs	r3, #1
    ed54:	e7bd      	b.n	ecd2 <__aeabi_fadd+0x296>
    ed56:	46c0      	nop			; (mov r8, r8)
    ed58:	7dffffff 	.word	0x7dffffff
    ed5c:	fbffffff 	.word	0xfbffffff

0000ed60 <__aeabi_fdiv>:
    ed60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed62:	4657      	mov	r7, sl
    ed64:	464e      	mov	r6, r9
    ed66:	46de      	mov	lr, fp
    ed68:	4645      	mov	r5, r8
    ed6a:	b5e0      	push	{r5, r6, r7, lr}
    ed6c:	0244      	lsls	r4, r0, #9
    ed6e:	0043      	lsls	r3, r0, #1
    ed70:	0fc6      	lsrs	r6, r0, #31
    ed72:	b083      	sub	sp, #12
    ed74:	1c0f      	adds	r7, r1, #0
    ed76:	0a64      	lsrs	r4, r4, #9
    ed78:	0e1b      	lsrs	r3, r3, #24
    ed7a:	46b2      	mov	sl, r6
    ed7c:	d053      	beq.n	ee26 <__aeabi_fdiv+0xc6>
    ed7e:	2bff      	cmp	r3, #255	; 0xff
    ed80:	d027      	beq.n	edd2 <__aeabi_fdiv+0x72>
    ed82:	2280      	movs	r2, #128	; 0x80
    ed84:	00e4      	lsls	r4, r4, #3
    ed86:	04d2      	lsls	r2, r2, #19
    ed88:	4314      	orrs	r4, r2
    ed8a:	227f      	movs	r2, #127	; 0x7f
    ed8c:	4252      	negs	r2, r2
    ed8e:	4690      	mov	r8, r2
    ed90:	4498      	add	r8, r3
    ed92:	2300      	movs	r3, #0
    ed94:	4699      	mov	r9, r3
    ed96:	469b      	mov	fp, r3
    ed98:	027d      	lsls	r5, r7, #9
    ed9a:	0078      	lsls	r0, r7, #1
    ed9c:	0ffb      	lsrs	r3, r7, #31
    ed9e:	0a6d      	lsrs	r5, r5, #9
    eda0:	0e00      	lsrs	r0, r0, #24
    eda2:	9300      	str	r3, [sp, #0]
    eda4:	d024      	beq.n	edf0 <__aeabi_fdiv+0x90>
    eda6:	28ff      	cmp	r0, #255	; 0xff
    eda8:	d046      	beq.n	ee38 <__aeabi_fdiv+0xd8>
    edaa:	2380      	movs	r3, #128	; 0x80
    edac:	2100      	movs	r1, #0
    edae:	00ed      	lsls	r5, r5, #3
    edb0:	04db      	lsls	r3, r3, #19
    edb2:	431d      	orrs	r5, r3
    edb4:	387f      	subs	r0, #127	; 0x7f
    edb6:	4647      	mov	r7, r8
    edb8:	1a38      	subs	r0, r7, r0
    edba:	464f      	mov	r7, r9
    edbc:	430f      	orrs	r7, r1
    edbe:	00bf      	lsls	r7, r7, #2
    edc0:	46b9      	mov	r9, r7
    edc2:	0033      	movs	r3, r6
    edc4:	9a00      	ldr	r2, [sp, #0]
    edc6:	4f87      	ldr	r7, [pc, #540]	; (efe4 <__aeabi_fdiv+0x284>)
    edc8:	4053      	eors	r3, r2
    edca:	464a      	mov	r2, r9
    edcc:	58ba      	ldr	r2, [r7, r2]
    edce:	9301      	str	r3, [sp, #4]
    edd0:	4697      	mov	pc, r2
    edd2:	2c00      	cmp	r4, #0
    edd4:	d14e      	bne.n	ee74 <__aeabi_fdiv+0x114>
    edd6:	2308      	movs	r3, #8
    edd8:	4699      	mov	r9, r3
    edda:	33f7      	adds	r3, #247	; 0xf7
    eddc:	4698      	mov	r8, r3
    edde:	3bfd      	subs	r3, #253	; 0xfd
    ede0:	469b      	mov	fp, r3
    ede2:	027d      	lsls	r5, r7, #9
    ede4:	0078      	lsls	r0, r7, #1
    ede6:	0ffb      	lsrs	r3, r7, #31
    ede8:	0a6d      	lsrs	r5, r5, #9
    edea:	0e00      	lsrs	r0, r0, #24
    edec:	9300      	str	r3, [sp, #0]
    edee:	d1da      	bne.n	eda6 <__aeabi_fdiv+0x46>
    edf0:	2d00      	cmp	r5, #0
    edf2:	d126      	bne.n	ee42 <__aeabi_fdiv+0xe2>
    edf4:	2000      	movs	r0, #0
    edf6:	2101      	movs	r1, #1
    edf8:	0033      	movs	r3, r6
    edfa:	9a00      	ldr	r2, [sp, #0]
    edfc:	4f7a      	ldr	r7, [pc, #488]	; (efe8 <__aeabi_fdiv+0x288>)
    edfe:	4053      	eors	r3, r2
    ee00:	4642      	mov	r2, r8
    ee02:	1a10      	subs	r0, r2, r0
    ee04:	464a      	mov	r2, r9
    ee06:	430a      	orrs	r2, r1
    ee08:	0092      	lsls	r2, r2, #2
    ee0a:	58ba      	ldr	r2, [r7, r2]
    ee0c:	001d      	movs	r5, r3
    ee0e:	4697      	mov	pc, r2
    ee10:	9b00      	ldr	r3, [sp, #0]
    ee12:	002c      	movs	r4, r5
    ee14:	469a      	mov	sl, r3
    ee16:	468b      	mov	fp, r1
    ee18:	465b      	mov	r3, fp
    ee1a:	2b02      	cmp	r3, #2
    ee1c:	d131      	bne.n	ee82 <__aeabi_fdiv+0x122>
    ee1e:	4653      	mov	r3, sl
    ee20:	21ff      	movs	r1, #255	; 0xff
    ee22:	2400      	movs	r4, #0
    ee24:	e038      	b.n	ee98 <__aeabi_fdiv+0x138>
    ee26:	2c00      	cmp	r4, #0
    ee28:	d117      	bne.n	ee5a <__aeabi_fdiv+0xfa>
    ee2a:	2304      	movs	r3, #4
    ee2c:	4699      	mov	r9, r3
    ee2e:	2300      	movs	r3, #0
    ee30:	4698      	mov	r8, r3
    ee32:	3301      	adds	r3, #1
    ee34:	469b      	mov	fp, r3
    ee36:	e7af      	b.n	ed98 <__aeabi_fdiv+0x38>
    ee38:	20ff      	movs	r0, #255	; 0xff
    ee3a:	2d00      	cmp	r5, #0
    ee3c:	d10b      	bne.n	ee56 <__aeabi_fdiv+0xf6>
    ee3e:	2102      	movs	r1, #2
    ee40:	e7da      	b.n	edf8 <__aeabi_fdiv+0x98>
    ee42:	0028      	movs	r0, r5
    ee44:	f002 fac8 	bl	113d8 <__clzsi2>
    ee48:	1f43      	subs	r3, r0, #5
    ee4a:	409d      	lsls	r5, r3
    ee4c:	2376      	movs	r3, #118	; 0x76
    ee4e:	425b      	negs	r3, r3
    ee50:	1a18      	subs	r0, r3, r0
    ee52:	2100      	movs	r1, #0
    ee54:	e7af      	b.n	edb6 <__aeabi_fdiv+0x56>
    ee56:	2103      	movs	r1, #3
    ee58:	e7ad      	b.n	edb6 <__aeabi_fdiv+0x56>
    ee5a:	0020      	movs	r0, r4
    ee5c:	f002 fabc 	bl	113d8 <__clzsi2>
    ee60:	1f43      	subs	r3, r0, #5
    ee62:	409c      	lsls	r4, r3
    ee64:	2376      	movs	r3, #118	; 0x76
    ee66:	425b      	negs	r3, r3
    ee68:	1a1b      	subs	r3, r3, r0
    ee6a:	4698      	mov	r8, r3
    ee6c:	2300      	movs	r3, #0
    ee6e:	4699      	mov	r9, r3
    ee70:	469b      	mov	fp, r3
    ee72:	e791      	b.n	ed98 <__aeabi_fdiv+0x38>
    ee74:	230c      	movs	r3, #12
    ee76:	4699      	mov	r9, r3
    ee78:	33f3      	adds	r3, #243	; 0xf3
    ee7a:	4698      	mov	r8, r3
    ee7c:	3bfc      	subs	r3, #252	; 0xfc
    ee7e:	469b      	mov	fp, r3
    ee80:	e78a      	b.n	ed98 <__aeabi_fdiv+0x38>
    ee82:	2b03      	cmp	r3, #3
    ee84:	d100      	bne.n	ee88 <__aeabi_fdiv+0x128>
    ee86:	e0a5      	b.n	efd4 <__aeabi_fdiv+0x274>
    ee88:	4655      	mov	r5, sl
    ee8a:	2b01      	cmp	r3, #1
    ee8c:	d000      	beq.n	ee90 <__aeabi_fdiv+0x130>
    ee8e:	e081      	b.n	ef94 <__aeabi_fdiv+0x234>
    ee90:	2301      	movs	r3, #1
    ee92:	2100      	movs	r1, #0
    ee94:	2400      	movs	r4, #0
    ee96:	402b      	ands	r3, r5
    ee98:	0264      	lsls	r4, r4, #9
    ee9a:	05c9      	lsls	r1, r1, #23
    ee9c:	0a60      	lsrs	r0, r4, #9
    ee9e:	07db      	lsls	r3, r3, #31
    eea0:	4308      	orrs	r0, r1
    eea2:	4318      	orrs	r0, r3
    eea4:	b003      	add	sp, #12
    eea6:	bc3c      	pop	{r2, r3, r4, r5}
    eea8:	4690      	mov	r8, r2
    eeaa:	4699      	mov	r9, r3
    eeac:	46a2      	mov	sl, r4
    eeae:	46ab      	mov	fp, r5
    eeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eeb2:	2480      	movs	r4, #128	; 0x80
    eeb4:	2300      	movs	r3, #0
    eeb6:	03e4      	lsls	r4, r4, #15
    eeb8:	21ff      	movs	r1, #255	; 0xff
    eeba:	e7ed      	b.n	ee98 <__aeabi_fdiv+0x138>
    eebc:	21ff      	movs	r1, #255	; 0xff
    eebe:	2400      	movs	r4, #0
    eec0:	e7ea      	b.n	ee98 <__aeabi_fdiv+0x138>
    eec2:	2301      	movs	r3, #1
    eec4:	1a59      	subs	r1, r3, r1
    eec6:	291b      	cmp	r1, #27
    eec8:	dd66      	ble.n	ef98 <__aeabi_fdiv+0x238>
    eeca:	9a01      	ldr	r2, [sp, #4]
    eecc:	4013      	ands	r3, r2
    eece:	2100      	movs	r1, #0
    eed0:	2400      	movs	r4, #0
    eed2:	e7e1      	b.n	ee98 <__aeabi_fdiv+0x138>
    eed4:	2380      	movs	r3, #128	; 0x80
    eed6:	03db      	lsls	r3, r3, #15
    eed8:	421c      	tst	r4, r3
    eeda:	d038      	beq.n	ef4e <__aeabi_fdiv+0x1ee>
    eedc:	421d      	tst	r5, r3
    eede:	d051      	beq.n	ef84 <__aeabi_fdiv+0x224>
    eee0:	431c      	orrs	r4, r3
    eee2:	0264      	lsls	r4, r4, #9
    eee4:	0a64      	lsrs	r4, r4, #9
    eee6:	0033      	movs	r3, r6
    eee8:	21ff      	movs	r1, #255	; 0xff
    eeea:	e7d5      	b.n	ee98 <__aeabi_fdiv+0x138>
    eeec:	0163      	lsls	r3, r4, #5
    eeee:	016c      	lsls	r4, r5, #5
    eef0:	42a3      	cmp	r3, r4
    eef2:	d23b      	bcs.n	ef6c <__aeabi_fdiv+0x20c>
    eef4:	261b      	movs	r6, #27
    eef6:	2100      	movs	r1, #0
    eef8:	3801      	subs	r0, #1
    eefa:	2501      	movs	r5, #1
    eefc:	001f      	movs	r7, r3
    eefe:	0049      	lsls	r1, r1, #1
    ef00:	005b      	lsls	r3, r3, #1
    ef02:	2f00      	cmp	r7, #0
    ef04:	db01      	blt.n	ef0a <__aeabi_fdiv+0x1aa>
    ef06:	429c      	cmp	r4, r3
    ef08:	d801      	bhi.n	ef0e <__aeabi_fdiv+0x1ae>
    ef0a:	1b1b      	subs	r3, r3, r4
    ef0c:	4329      	orrs	r1, r5
    ef0e:	3e01      	subs	r6, #1
    ef10:	2e00      	cmp	r6, #0
    ef12:	d1f3      	bne.n	eefc <__aeabi_fdiv+0x19c>
    ef14:	001c      	movs	r4, r3
    ef16:	1e63      	subs	r3, r4, #1
    ef18:	419c      	sbcs	r4, r3
    ef1a:	430c      	orrs	r4, r1
    ef1c:	0001      	movs	r1, r0
    ef1e:	317f      	adds	r1, #127	; 0x7f
    ef20:	2900      	cmp	r1, #0
    ef22:	ddce      	ble.n	eec2 <__aeabi_fdiv+0x162>
    ef24:	0763      	lsls	r3, r4, #29
    ef26:	d004      	beq.n	ef32 <__aeabi_fdiv+0x1d2>
    ef28:	230f      	movs	r3, #15
    ef2a:	4023      	ands	r3, r4
    ef2c:	2b04      	cmp	r3, #4
    ef2e:	d000      	beq.n	ef32 <__aeabi_fdiv+0x1d2>
    ef30:	3404      	adds	r4, #4
    ef32:	0123      	lsls	r3, r4, #4
    ef34:	d503      	bpl.n	ef3e <__aeabi_fdiv+0x1de>
    ef36:	0001      	movs	r1, r0
    ef38:	4b2c      	ldr	r3, [pc, #176]	; (efec <__aeabi_fdiv+0x28c>)
    ef3a:	3180      	adds	r1, #128	; 0x80
    ef3c:	401c      	ands	r4, r3
    ef3e:	29fe      	cmp	r1, #254	; 0xfe
    ef40:	dd0d      	ble.n	ef5e <__aeabi_fdiv+0x1fe>
    ef42:	2301      	movs	r3, #1
    ef44:	9a01      	ldr	r2, [sp, #4]
    ef46:	21ff      	movs	r1, #255	; 0xff
    ef48:	4013      	ands	r3, r2
    ef4a:	2400      	movs	r4, #0
    ef4c:	e7a4      	b.n	ee98 <__aeabi_fdiv+0x138>
    ef4e:	2380      	movs	r3, #128	; 0x80
    ef50:	03db      	lsls	r3, r3, #15
    ef52:	431c      	orrs	r4, r3
    ef54:	0264      	lsls	r4, r4, #9
    ef56:	0a64      	lsrs	r4, r4, #9
    ef58:	0033      	movs	r3, r6
    ef5a:	21ff      	movs	r1, #255	; 0xff
    ef5c:	e79c      	b.n	ee98 <__aeabi_fdiv+0x138>
    ef5e:	2301      	movs	r3, #1
    ef60:	9a01      	ldr	r2, [sp, #4]
    ef62:	01a4      	lsls	r4, r4, #6
    ef64:	0a64      	lsrs	r4, r4, #9
    ef66:	b2c9      	uxtb	r1, r1
    ef68:	4013      	ands	r3, r2
    ef6a:	e795      	b.n	ee98 <__aeabi_fdiv+0x138>
    ef6c:	1b1b      	subs	r3, r3, r4
    ef6e:	261a      	movs	r6, #26
    ef70:	2101      	movs	r1, #1
    ef72:	e7c2      	b.n	eefa <__aeabi_fdiv+0x19a>
    ef74:	9b00      	ldr	r3, [sp, #0]
    ef76:	468b      	mov	fp, r1
    ef78:	469a      	mov	sl, r3
    ef7a:	2400      	movs	r4, #0
    ef7c:	e74c      	b.n	ee18 <__aeabi_fdiv+0xb8>
    ef7e:	0263      	lsls	r3, r4, #9
    ef80:	d5e5      	bpl.n	ef4e <__aeabi_fdiv+0x1ee>
    ef82:	2500      	movs	r5, #0
    ef84:	2480      	movs	r4, #128	; 0x80
    ef86:	03e4      	lsls	r4, r4, #15
    ef88:	432c      	orrs	r4, r5
    ef8a:	0264      	lsls	r4, r4, #9
    ef8c:	0a64      	lsrs	r4, r4, #9
    ef8e:	9b00      	ldr	r3, [sp, #0]
    ef90:	21ff      	movs	r1, #255	; 0xff
    ef92:	e781      	b.n	ee98 <__aeabi_fdiv+0x138>
    ef94:	9501      	str	r5, [sp, #4]
    ef96:	e7c1      	b.n	ef1c <__aeabi_fdiv+0x1bc>
    ef98:	0023      	movs	r3, r4
    ef9a:	2020      	movs	r0, #32
    ef9c:	40cb      	lsrs	r3, r1
    ef9e:	1a41      	subs	r1, r0, r1
    efa0:	408c      	lsls	r4, r1
    efa2:	1e61      	subs	r1, r4, #1
    efa4:	418c      	sbcs	r4, r1
    efa6:	431c      	orrs	r4, r3
    efa8:	0763      	lsls	r3, r4, #29
    efaa:	d004      	beq.n	efb6 <__aeabi_fdiv+0x256>
    efac:	230f      	movs	r3, #15
    efae:	4023      	ands	r3, r4
    efb0:	2b04      	cmp	r3, #4
    efb2:	d000      	beq.n	efb6 <__aeabi_fdiv+0x256>
    efb4:	3404      	adds	r4, #4
    efb6:	0163      	lsls	r3, r4, #5
    efb8:	d505      	bpl.n	efc6 <__aeabi_fdiv+0x266>
    efba:	2301      	movs	r3, #1
    efbc:	9a01      	ldr	r2, [sp, #4]
    efbe:	2101      	movs	r1, #1
    efc0:	4013      	ands	r3, r2
    efc2:	2400      	movs	r4, #0
    efc4:	e768      	b.n	ee98 <__aeabi_fdiv+0x138>
    efc6:	2301      	movs	r3, #1
    efc8:	9a01      	ldr	r2, [sp, #4]
    efca:	01a4      	lsls	r4, r4, #6
    efcc:	0a64      	lsrs	r4, r4, #9
    efce:	4013      	ands	r3, r2
    efd0:	2100      	movs	r1, #0
    efd2:	e761      	b.n	ee98 <__aeabi_fdiv+0x138>
    efd4:	2380      	movs	r3, #128	; 0x80
    efd6:	03db      	lsls	r3, r3, #15
    efd8:	431c      	orrs	r4, r3
    efda:	0264      	lsls	r4, r4, #9
    efdc:	0a64      	lsrs	r4, r4, #9
    efde:	4653      	mov	r3, sl
    efe0:	21ff      	movs	r1, #255	; 0xff
    efe2:	e759      	b.n	ee98 <__aeabi_fdiv+0x138>
    efe4:	00017660 	.word	0x00017660
    efe8:	000176a0 	.word	0x000176a0
    efec:	f7ffffff 	.word	0xf7ffffff

0000eff0 <__eqsf2>:
    eff0:	b570      	push	{r4, r5, r6, lr}
    eff2:	0042      	lsls	r2, r0, #1
    eff4:	0245      	lsls	r5, r0, #9
    eff6:	024e      	lsls	r6, r1, #9
    eff8:	004c      	lsls	r4, r1, #1
    effa:	0fc3      	lsrs	r3, r0, #31
    effc:	0a6d      	lsrs	r5, r5, #9
    effe:	0e12      	lsrs	r2, r2, #24
    f000:	0a76      	lsrs	r6, r6, #9
    f002:	0e24      	lsrs	r4, r4, #24
    f004:	0fc9      	lsrs	r1, r1, #31
    f006:	2001      	movs	r0, #1
    f008:	2aff      	cmp	r2, #255	; 0xff
    f00a:	d006      	beq.n	f01a <__eqsf2+0x2a>
    f00c:	2cff      	cmp	r4, #255	; 0xff
    f00e:	d003      	beq.n	f018 <__eqsf2+0x28>
    f010:	42a2      	cmp	r2, r4
    f012:	d101      	bne.n	f018 <__eqsf2+0x28>
    f014:	42b5      	cmp	r5, r6
    f016:	d006      	beq.n	f026 <__eqsf2+0x36>
    f018:	bd70      	pop	{r4, r5, r6, pc}
    f01a:	2d00      	cmp	r5, #0
    f01c:	d1fc      	bne.n	f018 <__eqsf2+0x28>
    f01e:	2cff      	cmp	r4, #255	; 0xff
    f020:	d1fa      	bne.n	f018 <__eqsf2+0x28>
    f022:	2e00      	cmp	r6, #0
    f024:	d1f8      	bne.n	f018 <__eqsf2+0x28>
    f026:	428b      	cmp	r3, r1
    f028:	d006      	beq.n	f038 <__eqsf2+0x48>
    f02a:	2001      	movs	r0, #1
    f02c:	2a00      	cmp	r2, #0
    f02e:	d1f3      	bne.n	f018 <__eqsf2+0x28>
    f030:	0028      	movs	r0, r5
    f032:	1e45      	subs	r5, r0, #1
    f034:	41a8      	sbcs	r0, r5
    f036:	e7ef      	b.n	f018 <__eqsf2+0x28>
    f038:	2000      	movs	r0, #0
    f03a:	e7ed      	b.n	f018 <__eqsf2+0x28>

0000f03c <__gesf2>:
    f03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f03e:	0042      	lsls	r2, r0, #1
    f040:	0245      	lsls	r5, r0, #9
    f042:	024c      	lsls	r4, r1, #9
    f044:	0fc3      	lsrs	r3, r0, #31
    f046:	0048      	lsls	r0, r1, #1
    f048:	0a6d      	lsrs	r5, r5, #9
    f04a:	0e12      	lsrs	r2, r2, #24
    f04c:	0a64      	lsrs	r4, r4, #9
    f04e:	0e00      	lsrs	r0, r0, #24
    f050:	0fc9      	lsrs	r1, r1, #31
    f052:	2aff      	cmp	r2, #255	; 0xff
    f054:	d01e      	beq.n	f094 <__gesf2+0x58>
    f056:	28ff      	cmp	r0, #255	; 0xff
    f058:	d021      	beq.n	f09e <__gesf2+0x62>
    f05a:	2a00      	cmp	r2, #0
    f05c:	d10a      	bne.n	f074 <__gesf2+0x38>
    f05e:	426e      	negs	r6, r5
    f060:	416e      	adcs	r6, r5
    f062:	b2f6      	uxtb	r6, r6
    f064:	2800      	cmp	r0, #0
    f066:	d10f      	bne.n	f088 <__gesf2+0x4c>
    f068:	2c00      	cmp	r4, #0
    f06a:	d10d      	bne.n	f088 <__gesf2+0x4c>
    f06c:	2000      	movs	r0, #0
    f06e:	2d00      	cmp	r5, #0
    f070:	d009      	beq.n	f086 <__gesf2+0x4a>
    f072:	e005      	b.n	f080 <__gesf2+0x44>
    f074:	2800      	cmp	r0, #0
    f076:	d101      	bne.n	f07c <__gesf2+0x40>
    f078:	2c00      	cmp	r4, #0
    f07a:	d001      	beq.n	f080 <__gesf2+0x44>
    f07c:	428b      	cmp	r3, r1
    f07e:	d011      	beq.n	f0a4 <__gesf2+0x68>
    f080:	2101      	movs	r1, #1
    f082:	4258      	negs	r0, r3
    f084:	4308      	orrs	r0, r1
    f086:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f088:	2e00      	cmp	r6, #0
    f08a:	d0f7      	beq.n	f07c <__gesf2+0x40>
    f08c:	2001      	movs	r0, #1
    f08e:	3901      	subs	r1, #1
    f090:	4308      	orrs	r0, r1
    f092:	e7f8      	b.n	f086 <__gesf2+0x4a>
    f094:	2d00      	cmp	r5, #0
    f096:	d0de      	beq.n	f056 <__gesf2+0x1a>
    f098:	2002      	movs	r0, #2
    f09a:	4240      	negs	r0, r0
    f09c:	e7f3      	b.n	f086 <__gesf2+0x4a>
    f09e:	2c00      	cmp	r4, #0
    f0a0:	d0db      	beq.n	f05a <__gesf2+0x1e>
    f0a2:	e7f9      	b.n	f098 <__gesf2+0x5c>
    f0a4:	4282      	cmp	r2, r0
    f0a6:	dceb      	bgt.n	f080 <__gesf2+0x44>
    f0a8:	db04      	blt.n	f0b4 <__gesf2+0x78>
    f0aa:	42a5      	cmp	r5, r4
    f0ac:	d8e8      	bhi.n	f080 <__gesf2+0x44>
    f0ae:	2000      	movs	r0, #0
    f0b0:	42a5      	cmp	r5, r4
    f0b2:	d2e8      	bcs.n	f086 <__gesf2+0x4a>
    f0b4:	2101      	movs	r1, #1
    f0b6:	1e58      	subs	r0, r3, #1
    f0b8:	4308      	orrs	r0, r1
    f0ba:	e7e4      	b.n	f086 <__gesf2+0x4a>

0000f0bc <__lesf2>:
    f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0be:	0042      	lsls	r2, r0, #1
    f0c0:	024d      	lsls	r5, r1, #9
    f0c2:	004c      	lsls	r4, r1, #1
    f0c4:	0246      	lsls	r6, r0, #9
    f0c6:	0a76      	lsrs	r6, r6, #9
    f0c8:	0e12      	lsrs	r2, r2, #24
    f0ca:	0fc3      	lsrs	r3, r0, #31
    f0cc:	0a6d      	lsrs	r5, r5, #9
    f0ce:	0e24      	lsrs	r4, r4, #24
    f0d0:	0fc9      	lsrs	r1, r1, #31
    f0d2:	2aff      	cmp	r2, #255	; 0xff
    f0d4:	d016      	beq.n	f104 <__lesf2+0x48>
    f0d6:	2cff      	cmp	r4, #255	; 0xff
    f0d8:	d018      	beq.n	f10c <__lesf2+0x50>
    f0da:	2a00      	cmp	r2, #0
    f0dc:	d10a      	bne.n	f0f4 <__lesf2+0x38>
    f0de:	4270      	negs	r0, r6
    f0e0:	4170      	adcs	r0, r6
    f0e2:	b2c0      	uxtb	r0, r0
    f0e4:	2c00      	cmp	r4, #0
    f0e6:	d015      	beq.n	f114 <__lesf2+0x58>
    f0e8:	2800      	cmp	r0, #0
    f0ea:	d005      	beq.n	f0f8 <__lesf2+0x3c>
    f0ec:	2001      	movs	r0, #1
    f0ee:	3901      	subs	r1, #1
    f0f0:	4308      	orrs	r0, r1
    f0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0f4:	2c00      	cmp	r4, #0
    f0f6:	d013      	beq.n	f120 <__lesf2+0x64>
    f0f8:	4299      	cmp	r1, r3
    f0fa:	d014      	beq.n	f126 <__lesf2+0x6a>
    f0fc:	2001      	movs	r0, #1
    f0fe:	425b      	negs	r3, r3
    f100:	4318      	orrs	r0, r3
    f102:	e7f6      	b.n	f0f2 <__lesf2+0x36>
    f104:	2002      	movs	r0, #2
    f106:	2e00      	cmp	r6, #0
    f108:	d1f3      	bne.n	f0f2 <__lesf2+0x36>
    f10a:	e7e4      	b.n	f0d6 <__lesf2+0x1a>
    f10c:	2002      	movs	r0, #2
    f10e:	2d00      	cmp	r5, #0
    f110:	d1ef      	bne.n	f0f2 <__lesf2+0x36>
    f112:	e7e2      	b.n	f0da <__lesf2+0x1e>
    f114:	2d00      	cmp	r5, #0
    f116:	d1e7      	bne.n	f0e8 <__lesf2+0x2c>
    f118:	2000      	movs	r0, #0
    f11a:	2e00      	cmp	r6, #0
    f11c:	d0e9      	beq.n	f0f2 <__lesf2+0x36>
    f11e:	e7ed      	b.n	f0fc <__lesf2+0x40>
    f120:	2d00      	cmp	r5, #0
    f122:	d1e9      	bne.n	f0f8 <__lesf2+0x3c>
    f124:	e7ea      	b.n	f0fc <__lesf2+0x40>
    f126:	42a2      	cmp	r2, r4
    f128:	dc06      	bgt.n	f138 <__lesf2+0x7c>
    f12a:	dbdf      	blt.n	f0ec <__lesf2+0x30>
    f12c:	42ae      	cmp	r6, r5
    f12e:	d803      	bhi.n	f138 <__lesf2+0x7c>
    f130:	2000      	movs	r0, #0
    f132:	42ae      	cmp	r6, r5
    f134:	d3da      	bcc.n	f0ec <__lesf2+0x30>
    f136:	e7dc      	b.n	f0f2 <__lesf2+0x36>
    f138:	2001      	movs	r0, #1
    f13a:	4249      	negs	r1, r1
    f13c:	4308      	orrs	r0, r1
    f13e:	e7d8      	b.n	f0f2 <__lesf2+0x36>

0000f140 <__aeabi_fmul>:
    f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f142:	4657      	mov	r7, sl
    f144:	464e      	mov	r6, r9
    f146:	4645      	mov	r5, r8
    f148:	46de      	mov	lr, fp
    f14a:	b5e0      	push	{r5, r6, r7, lr}
    f14c:	0247      	lsls	r7, r0, #9
    f14e:	0046      	lsls	r6, r0, #1
    f150:	4688      	mov	r8, r1
    f152:	0a7f      	lsrs	r7, r7, #9
    f154:	0e36      	lsrs	r6, r6, #24
    f156:	0fc4      	lsrs	r4, r0, #31
    f158:	2e00      	cmp	r6, #0
    f15a:	d047      	beq.n	f1ec <__aeabi_fmul+0xac>
    f15c:	2eff      	cmp	r6, #255	; 0xff
    f15e:	d024      	beq.n	f1aa <__aeabi_fmul+0x6a>
    f160:	00fb      	lsls	r3, r7, #3
    f162:	2780      	movs	r7, #128	; 0x80
    f164:	04ff      	lsls	r7, r7, #19
    f166:	431f      	orrs	r7, r3
    f168:	2300      	movs	r3, #0
    f16a:	4699      	mov	r9, r3
    f16c:	469a      	mov	sl, r3
    f16e:	3e7f      	subs	r6, #127	; 0x7f
    f170:	4643      	mov	r3, r8
    f172:	025d      	lsls	r5, r3, #9
    f174:	0058      	lsls	r0, r3, #1
    f176:	0fdb      	lsrs	r3, r3, #31
    f178:	0a6d      	lsrs	r5, r5, #9
    f17a:	0e00      	lsrs	r0, r0, #24
    f17c:	4698      	mov	r8, r3
    f17e:	d043      	beq.n	f208 <__aeabi_fmul+0xc8>
    f180:	28ff      	cmp	r0, #255	; 0xff
    f182:	d03b      	beq.n	f1fc <__aeabi_fmul+0xbc>
    f184:	00eb      	lsls	r3, r5, #3
    f186:	2580      	movs	r5, #128	; 0x80
    f188:	2200      	movs	r2, #0
    f18a:	04ed      	lsls	r5, r5, #19
    f18c:	431d      	orrs	r5, r3
    f18e:	387f      	subs	r0, #127	; 0x7f
    f190:	1836      	adds	r6, r6, r0
    f192:	1c73      	adds	r3, r6, #1
    f194:	4641      	mov	r1, r8
    f196:	469b      	mov	fp, r3
    f198:	464b      	mov	r3, r9
    f19a:	4061      	eors	r1, r4
    f19c:	4313      	orrs	r3, r2
    f19e:	2b0f      	cmp	r3, #15
    f1a0:	d864      	bhi.n	f26c <__aeabi_fmul+0x12c>
    f1a2:	4875      	ldr	r0, [pc, #468]	; (f378 <__aeabi_fmul+0x238>)
    f1a4:	009b      	lsls	r3, r3, #2
    f1a6:	58c3      	ldr	r3, [r0, r3]
    f1a8:	469f      	mov	pc, r3
    f1aa:	2f00      	cmp	r7, #0
    f1ac:	d142      	bne.n	f234 <__aeabi_fmul+0xf4>
    f1ae:	2308      	movs	r3, #8
    f1b0:	4699      	mov	r9, r3
    f1b2:	3b06      	subs	r3, #6
    f1b4:	26ff      	movs	r6, #255	; 0xff
    f1b6:	469a      	mov	sl, r3
    f1b8:	e7da      	b.n	f170 <__aeabi_fmul+0x30>
    f1ba:	4641      	mov	r1, r8
    f1bc:	2a02      	cmp	r2, #2
    f1be:	d028      	beq.n	f212 <__aeabi_fmul+0xd2>
    f1c0:	2a03      	cmp	r2, #3
    f1c2:	d100      	bne.n	f1c6 <__aeabi_fmul+0x86>
    f1c4:	e0ce      	b.n	f364 <__aeabi_fmul+0x224>
    f1c6:	2a01      	cmp	r2, #1
    f1c8:	d000      	beq.n	f1cc <__aeabi_fmul+0x8c>
    f1ca:	e0ac      	b.n	f326 <__aeabi_fmul+0x1e6>
    f1cc:	4011      	ands	r1, r2
    f1ce:	2000      	movs	r0, #0
    f1d0:	2200      	movs	r2, #0
    f1d2:	b2cc      	uxtb	r4, r1
    f1d4:	0240      	lsls	r0, r0, #9
    f1d6:	05d2      	lsls	r2, r2, #23
    f1d8:	0a40      	lsrs	r0, r0, #9
    f1da:	07e4      	lsls	r4, r4, #31
    f1dc:	4310      	orrs	r0, r2
    f1de:	4320      	orrs	r0, r4
    f1e0:	bc3c      	pop	{r2, r3, r4, r5}
    f1e2:	4690      	mov	r8, r2
    f1e4:	4699      	mov	r9, r3
    f1e6:	46a2      	mov	sl, r4
    f1e8:	46ab      	mov	fp, r5
    f1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f1ec:	2f00      	cmp	r7, #0
    f1ee:	d115      	bne.n	f21c <__aeabi_fmul+0xdc>
    f1f0:	2304      	movs	r3, #4
    f1f2:	4699      	mov	r9, r3
    f1f4:	3b03      	subs	r3, #3
    f1f6:	2600      	movs	r6, #0
    f1f8:	469a      	mov	sl, r3
    f1fa:	e7b9      	b.n	f170 <__aeabi_fmul+0x30>
    f1fc:	20ff      	movs	r0, #255	; 0xff
    f1fe:	2202      	movs	r2, #2
    f200:	2d00      	cmp	r5, #0
    f202:	d0c5      	beq.n	f190 <__aeabi_fmul+0x50>
    f204:	2203      	movs	r2, #3
    f206:	e7c3      	b.n	f190 <__aeabi_fmul+0x50>
    f208:	2d00      	cmp	r5, #0
    f20a:	d119      	bne.n	f240 <__aeabi_fmul+0x100>
    f20c:	2000      	movs	r0, #0
    f20e:	2201      	movs	r2, #1
    f210:	e7be      	b.n	f190 <__aeabi_fmul+0x50>
    f212:	2401      	movs	r4, #1
    f214:	22ff      	movs	r2, #255	; 0xff
    f216:	400c      	ands	r4, r1
    f218:	2000      	movs	r0, #0
    f21a:	e7db      	b.n	f1d4 <__aeabi_fmul+0x94>
    f21c:	0038      	movs	r0, r7
    f21e:	f002 f8db 	bl	113d8 <__clzsi2>
    f222:	2676      	movs	r6, #118	; 0x76
    f224:	1f43      	subs	r3, r0, #5
    f226:	409f      	lsls	r7, r3
    f228:	2300      	movs	r3, #0
    f22a:	4276      	negs	r6, r6
    f22c:	1a36      	subs	r6, r6, r0
    f22e:	4699      	mov	r9, r3
    f230:	469a      	mov	sl, r3
    f232:	e79d      	b.n	f170 <__aeabi_fmul+0x30>
    f234:	230c      	movs	r3, #12
    f236:	4699      	mov	r9, r3
    f238:	3b09      	subs	r3, #9
    f23a:	26ff      	movs	r6, #255	; 0xff
    f23c:	469a      	mov	sl, r3
    f23e:	e797      	b.n	f170 <__aeabi_fmul+0x30>
    f240:	0028      	movs	r0, r5
    f242:	f002 f8c9 	bl	113d8 <__clzsi2>
    f246:	1f43      	subs	r3, r0, #5
    f248:	409d      	lsls	r5, r3
    f24a:	2376      	movs	r3, #118	; 0x76
    f24c:	425b      	negs	r3, r3
    f24e:	1a18      	subs	r0, r3, r0
    f250:	2200      	movs	r2, #0
    f252:	e79d      	b.n	f190 <__aeabi_fmul+0x50>
    f254:	2080      	movs	r0, #128	; 0x80
    f256:	2400      	movs	r4, #0
    f258:	03c0      	lsls	r0, r0, #15
    f25a:	22ff      	movs	r2, #255	; 0xff
    f25c:	e7ba      	b.n	f1d4 <__aeabi_fmul+0x94>
    f25e:	003d      	movs	r5, r7
    f260:	4652      	mov	r2, sl
    f262:	e7ab      	b.n	f1bc <__aeabi_fmul+0x7c>
    f264:	003d      	movs	r5, r7
    f266:	0021      	movs	r1, r4
    f268:	4652      	mov	r2, sl
    f26a:	e7a7      	b.n	f1bc <__aeabi_fmul+0x7c>
    f26c:	0c3b      	lsrs	r3, r7, #16
    f26e:	469c      	mov	ip, r3
    f270:	042a      	lsls	r2, r5, #16
    f272:	0c12      	lsrs	r2, r2, #16
    f274:	0c2b      	lsrs	r3, r5, #16
    f276:	0014      	movs	r4, r2
    f278:	4660      	mov	r0, ip
    f27a:	4665      	mov	r5, ip
    f27c:	043f      	lsls	r7, r7, #16
    f27e:	0c3f      	lsrs	r7, r7, #16
    f280:	437c      	muls	r4, r7
    f282:	4342      	muls	r2, r0
    f284:	435d      	muls	r5, r3
    f286:	437b      	muls	r3, r7
    f288:	0c27      	lsrs	r7, r4, #16
    f28a:	189b      	adds	r3, r3, r2
    f28c:	18ff      	adds	r7, r7, r3
    f28e:	42ba      	cmp	r2, r7
    f290:	d903      	bls.n	f29a <__aeabi_fmul+0x15a>
    f292:	2380      	movs	r3, #128	; 0x80
    f294:	025b      	lsls	r3, r3, #9
    f296:	469c      	mov	ip, r3
    f298:	4465      	add	r5, ip
    f29a:	0424      	lsls	r4, r4, #16
    f29c:	043a      	lsls	r2, r7, #16
    f29e:	0c24      	lsrs	r4, r4, #16
    f2a0:	1912      	adds	r2, r2, r4
    f2a2:	0193      	lsls	r3, r2, #6
    f2a4:	1e5c      	subs	r4, r3, #1
    f2a6:	41a3      	sbcs	r3, r4
    f2a8:	0c3f      	lsrs	r7, r7, #16
    f2aa:	0e92      	lsrs	r2, r2, #26
    f2ac:	197d      	adds	r5, r7, r5
    f2ae:	431a      	orrs	r2, r3
    f2b0:	01ad      	lsls	r5, r5, #6
    f2b2:	4315      	orrs	r5, r2
    f2b4:	012b      	lsls	r3, r5, #4
    f2b6:	d504      	bpl.n	f2c2 <__aeabi_fmul+0x182>
    f2b8:	2301      	movs	r3, #1
    f2ba:	465e      	mov	r6, fp
    f2bc:	086a      	lsrs	r2, r5, #1
    f2be:	401d      	ands	r5, r3
    f2c0:	4315      	orrs	r5, r2
    f2c2:	0032      	movs	r2, r6
    f2c4:	327f      	adds	r2, #127	; 0x7f
    f2c6:	2a00      	cmp	r2, #0
    f2c8:	dd25      	ble.n	f316 <__aeabi_fmul+0x1d6>
    f2ca:	076b      	lsls	r3, r5, #29
    f2cc:	d004      	beq.n	f2d8 <__aeabi_fmul+0x198>
    f2ce:	230f      	movs	r3, #15
    f2d0:	402b      	ands	r3, r5
    f2d2:	2b04      	cmp	r3, #4
    f2d4:	d000      	beq.n	f2d8 <__aeabi_fmul+0x198>
    f2d6:	3504      	adds	r5, #4
    f2d8:	012b      	lsls	r3, r5, #4
    f2da:	d503      	bpl.n	f2e4 <__aeabi_fmul+0x1a4>
    f2dc:	0032      	movs	r2, r6
    f2de:	4b27      	ldr	r3, [pc, #156]	; (f37c <__aeabi_fmul+0x23c>)
    f2e0:	3280      	adds	r2, #128	; 0x80
    f2e2:	401d      	ands	r5, r3
    f2e4:	2afe      	cmp	r2, #254	; 0xfe
    f2e6:	dc94      	bgt.n	f212 <__aeabi_fmul+0xd2>
    f2e8:	2401      	movs	r4, #1
    f2ea:	01a8      	lsls	r0, r5, #6
    f2ec:	0a40      	lsrs	r0, r0, #9
    f2ee:	b2d2      	uxtb	r2, r2
    f2f0:	400c      	ands	r4, r1
    f2f2:	e76f      	b.n	f1d4 <__aeabi_fmul+0x94>
    f2f4:	2080      	movs	r0, #128	; 0x80
    f2f6:	03c0      	lsls	r0, r0, #15
    f2f8:	4207      	tst	r7, r0
    f2fa:	d007      	beq.n	f30c <__aeabi_fmul+0x1cc>
    f2fc:	4205      	tst	r5, r0
    f2fe:	d105      	bne.n	f30c <__aeabi_fmul+0x1cc>
    f300:	4328      	orrs	r0, r5
    f302:	0240      	lsls	r0, r0, #9
    f304:	0a40      	lsrs	r0, r0, #9
    f306:	4644      	mov	r4, r8
    f308:	22ff      	movs	r2, #255	; 0xff
    f30a:	e763      	b.n	f1d4 <__aeabi_fmul+0x94>
    f30c:	4338      	orrs	r0, r7
    f30e:	0240      	lsls	r0, r0, #9
    f310:	0a40      	lsrs	r0, r0, #9
    f312:	22ff      	movs	r2, #255	; 0xff
    f314:	e75e      	b.n	f1d4 <__aeabi_fmul+0x94>
    f316:	2401      	movs	r4, #1
    f318:	1aa3      	subs	r3, r4, r2
    f31a:	2b1b      	cmp	r3, #27
    f31c:	dd05      	ble.n	f32a <__aeabi_fmul+0x1ea>
    f31e:	400c      	ands	r4, r1
    f320:	2200      	movs	r2, #0
    f322:	2000      	movs	r0, #0
    f324:	e756      	b.n	f1d4 <__aeabi_fmul+0x94>
    f326:	465e      	mov	r6, fp
    f328:	e7cb      	b.n	f2c2 <__aeabi_fmul+0x182>
    f32a:	002a      	movs	r2, r5
    f32c:	2020      	movs	r0, #32
    f32e:	40da      	lsrs	r2, r3
    f330:	1ac3      	subs	r3, r0, r3
    f332:	409d      	lsls	r5, r3
    f334:	002b      	movs	r3, r5
    f336:	1e5d      	subs	r5, r3, #1
    f338:	41ab      	sbcs	r3, r5
    f33a:	4313      	orrs	r3, r2
    f33c:	075a      	lsls	r2, r3, #29
    f33e:	d004      	beq.n	f34a <__aeabi_fmul+0x20a>
    f340:	220f      	movs	r2, #15
    f342:	401a      	ands	r2, r3
    f344:	2a04      	cmp	r2, #4
    f346:	d000      	beq.n	f34a <__aeabi_fmul+0x20a>
    f348:	3304      	adds	r3, #4
    f34a:	015a      	lsls	r2, r3, #5
    f34c:	d504      	bpl.n	f358 <__aeabi_fmul+0x218>
    f34e:	2401      	movs	r4, #1
    f350:	2201      	movs	r2, #1
    f352:	400c      	ands	r4, r1
    f354:	2000      	movs	r0, #0
    f356:	e73d      	b.n	f1d4 <__aeabi_fmul+0x94>
    f358:	2401      	movs	r4, #1
    f35a:	019b      	lsls	r3, r3, #6
    f35c:	0a58      	lsrs	r0, r3, #9
    f35e:	400c      	ands	r4, r1
    f360:	2200      	movs	r2, #0
    f362:	e737      	b.n	f1d4 <__aeabi_fmul+0x94>
    f364:	2080      	movs	r0, #128	; 0x80
    f366:	2401      	movs	r4, #1
    f368:	03c0      	lsls	r0, r0, #15
    f36a:	4328      	orrs	r0, r5
    f36c:	0240      	lsls	r0, r0, #9
    f36e:	0a40      	lsrs	r0, r0, #9
    f370:	400c      	ands	r4, r1
    f372:	22ff      	movs	r2, #255	; 0xff
    f374:	e72e      	b.n	f1d4 <__aeabi_fmul+0x94>
    f376:	46c0      	nop			; (mov r8, r8)
    f378:	000176e0 	.word	0x000176e0
    f37c:	f7ffffff 	.word	0xf7ffffff

0000f380 <__aeabi_fsub>:
    f380:	b5f0      	push	{r4, r5, r6, r7, lr}
    f382:	464f      	mov	r7, r9
    f384:	46d6      	mov	lr, sl
    f386:	4646      	mov	r6, r8
    f388:	0044      	lsls	r4, r0, #1
    f38a:	b5c0      	push	{r6, r7, lr}
    f38c:	0fc2      	lsrs	r2, r0, #31
    f38e:	0247      	lsls	r7, r0, #9
    f390:	0248      	lsls	r0, r1, #9
    f392:	0a40      	lsrs	r0, r0, #9
    f394:	4684      	mov	ip, r0
    f396:	4666      	mov	r6, ip
    f398:	0a7b      	lsrs	r3, r7, #9
    f39a:	0048      	lsls	r0, r1, #1
    f39c:	0fc9      	lsrs	r1, r1, #31
    f39e:	469a      	mov	sl, r3
    f3a0:	0e24      	lsrs	r4, r4, #24
    f3a2:	0015      	movs	r5, r2
    f3a4:	00db      	lsls	r3, r3, #3
    f3a6:	0e00      	lsrs	r0, r0, #24
    f3a8:	4689      	mov	r9, r1
    f3aa:	00f6      	lsls	r6, r6, #3
    f3ac:	28ff      	cmp	r0, #255	; 0xff
    f3ae:	d100      	bne.n	f3b2 <__aeabi_fsub+0x32>
    f3b0:	e08f      	b.n	f4d2 <__aeabi_fsub+0x152>
    f3b2:	2101      	movs	r1, #1
    f3b4:	464f      	mov	r7, r9
    f3b6:	404f      	eors	r7, r1
    f3b8:	0039      	movs	r1, r7
    f3ba:	4291      	cmp	r1, r2
    f3bc:	d066      	beq.n	f48c <__aeabi_fsub+0x10c>
    f3be:	1a22      	subs	r2, r4, r0
    f3c0:	2a00      	cmp	r2, #0
    f3c2:	dc00      	bgt.n	f3c6 <__aeabi_fsub+0x46>
    f3c4:	e09d      	b.n	f502 <__aeabi_fsub+0x182>
    f3c6:	2800      	cmp	r0, #0
    f3c8:	d13d      	bne.n	f446 <__aeabi_fsub+0xc6>
    f3ca:	2e00      	cmp	r6, #0
    f3cc:	d100      	bne.n	f3d0 <__aeabi_fsub+0x50>
    f3ce:	e08b      	b.n	f4e8 <__aeabi_fsub+0x168>
    f3d0:	1e51      	subs	r1, r2, #1
    f3d2:	2900      	cmp	r1, #0
    f3d4:	d000      	beq.n	f3d8 <__aeabi_fsub+0x58>
    f3d6:	e0b5      	b.n	f544 <__aeabi_fsub+0x1c4>
    f3d8:	2401      	movs	r4, #1
    f3da:	1b9b      	subs	r3, r3, r6
    f3dc:	015a      	lsls	r2, r3, #5
    f3de:	d544      	bpl.n	f46a <__aeabi_fsub+0xea>
    f3e0:	019b      	lsls	r3, r3, #6
    f3e2:	099f      	lsrs	r7, r3, #6
    f3e4:	0038      	movs	r0, r7
    f3e6:	f001 fff7 	bl	113d8 <__clzsi2>
    f3ea:	3805      	subs	r0, #5
    f3ec:	4087      	lsls	r7, r0
    f3ee:	4284      	cmp	r4, r0
    f3f0:	dd00      	ble.n	f3f4 <__aeabi_fsub+0x74>
    f3f2:	e096      	b.n	f522 <__aeabi_fsub+0x1a2>
    f3f4:	1b04      	subs	r4, r0, r4
    f3f6:	003a      	movs	r2, r7
    f3f8:	2020      	movs	r0, #32
    f3fa:	3401      	adds	r4, #1
    f3fc:	40e2      	lsrs	r2, r4
    f3fe:	1b04      	subs	r4, r0, r4
    f400:	40a7      	lsls	r7, r4
    f402:	003b      	movs	r3, r7
    f404:	1e5f      	subs	r7, r3, #1
    f406:	41bb      	sbcs	r3, r7
    f408:	2400      	movs	r4, #0
    f40a:	4313      	orrs	r3, r2
    f40c:	075a      	lsls	r2, r3, #29
    f40e:	d004      	beq.n	f41a <__aeabi_fsub+0x9a>
    f410:	220f      	movs	r2, #15
    f412:	401a      	ands	r2, r3
    f414:	2a04      	cmp	r2, #4
    f416:	d000      	beq.n	f41a <__aeabi_fsub+0x9a>
    f418:	3304      	adds	r3, #4
    f41a:	015a      	lsls	r2, r3, #5
    f41c:	d527      	bpl.n	f46e <__aeabi_fsub+0xee>
    f41e:	3401      	adds	r4, #1
    f420:	2cff      	cmp	r4, #255	; 0xff
    f422:	d100      	bne.n	f426 <__aeabi_fsub+0xa6>
    f424:	e079      	b.n	f51a <__aeabi_fsub+0x19a>
    f426:	2201      	movs	r2, #1
    f428:	019b      	lsls	r3, r3, #6
    f42a:	0a5b      	lsrs	r3, r3, #9
    f42c:	b2e4      	uxtb	r4, r4
    f42e:	402a      	ands	r2, r5
    f430:	025b      	lsls	r3, r3, #9
    f432:	05e4      	lsls	r4, r4, #23
    f434:	0a58      	lsrs	r0, r3, #9
    f436:	07d2      	lsls	r2, r2, #31
    f438:	4320      	orrs	r0, r4
    f43a:	4310      	orrs	r0, r2
    f43c:	bc1c      	pop	{r2, r3, r4}
    f43e:	4690      	mov	r8, r2
    f440:	4699      	mov	r9, r3
    f442:	46a2      	mov	sl, r4
    f444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f446:	2cff      	cmp	r4, #255	; 0xff
    f448:	d0e0      	beq.n	f40c <__aeabi_fsub+0x8c>
    f44a:	2180      	movs	r1, #128	; 0x80
    f44c:	04c9      	lsls	r1, r1, #19
    f44e:	430e      	orrs	r6, r1
    f450:	2a1b      	cmp	r2, #27
    f452:	dc7b      	bgt.n	f54c <__aeabi_fsub+0x1cc>
    f454:	0031      	movs	r1, r6
    f456:	2020      	movs	r0, #32
    f458:	40d1      	lsrs	r1, r2
    f45a:	1a82      	subs	r2, r0, r2
    f45c:	4096      	lsls	r6, r2
    f45e:	1e72      	subs	r2, r6, #1
    f460:	4196      	sbcs	r6, r2
    f462:	430e      	orrs	r6, r1
    f464:	1b9b      	subs	r3, r3, r6
    f466:	015a      	lsls	r2, r3, #5
    f468:	d4ba      	bmi.n	f3e0 <__aeabi_fsub+0x60>
    f46a:	075a      	lsls	r2, r3, #29
    f46c:	d1d0      	bne.n	f410 <__aeabi_fsub+0x90>
    f46e:	2201      	movs	r2, #1
    f470:	08df      	lsrs	r7, r3, #3
    f472:	402a      	ands	r2, r5
    f474:	2cff      	cmp	r4, #255	; 0xff
    f476:	d133      	bne.n	f4e0 <__aeabi_fsub+0x160>
    f478:	2f00      	cmp	r7, #0
    f47a:	d100      	bne.n	f47e <__aeabi_fsub+0xfe>
    f47c:	e0a8      	b.n	f5d0 <__aeabi_fsub+0x250>
    f47e:	2380      	movs	r3, #128	; 0x80
    f480:	03db      	lsls	r3, r3, #15
    f482:	433b      	orrs	r3, r7
    f484:	025b      	lsls	r3, r3, #9
    f486:	0a5b      	lsrs	r3, r3, #9
    f488:	24ff      	movs	r4, #255	; 0xff
    f48a:	e7d1      	b.n	f430 <__aeabi_fsub+0xb0>
    f48c:	1a21      	subs	r1, r4, r0
    f48e:	2900      	cmp	r1, #0
    f490:	dd4c      	ble.n	f52c <__aeabi_fsub+0x1ac>
    f492:	2800      	cmp	r0, #0
    f494:	d02a      	beq.n	f4ec <__aeabi_fsub+0x16c>
    f496:	2cff      	cmp	r4, #255	; 0xff
    f498:	d0b8      	beq.n	f40c <__aeabi_fsub+0x8c>
    f49a:	2080      	movs	r0, #128	; 0x80
    f49c:	04c0      	lsls	r0, r0, #19
    f49e:	4306      	orrs	r6, r0
    f4a0:	291b      	cmp	r1, #27
    f4a2:	dd00      	ble.n	f4a6 <__aeabi_fsub+0x126>
    f4a4:	e0af      	b.n	f606 <__aeabi_fsub+0x286>
    f4a6:	0030      	movs	r0, r6
    f4a8:	2720      	movs	r7, #32
    f4aa:	40c8      	lsrs	r0, r1
    f4ac:	1a79      	subs	r1, r7, r1
    f4ae:	408e      	lsls	r6, r1
    f4b0:	1e71      	subs	r1, r6, #1
    f4b2:	418e      	sbcs	r6, r1
    f4b4:	4306      	orrs	r6, r0
    f4b6:	199b      	adds	r3, r3, r6
    f4b8:	0159      	lsls	r1, r3, #5
    f4ba:	d5d6      	bpl.n	f46a <__aeabi_fsub+0xea>
    f4bc:	3401      	adds	r4, #1
    f4be:	2cff      	cmp	r4, #255	; 0xff
    f4c0:	d100      	bne.n	f4c4 <__aeabi_fsub+0x144>
    f4c2:	e085      	b.n	f5d0 <__aeabi_fsub+0x250>
    f4c4:	2201      	movs	r2, #1
    f4c6:	497a      	ldr	r1, [pc, #488]	; (f6b0 <__aeabi_fsub+0x330>)
    f4c8:	401a      	ands	r2, r3
    f4ca:	085b      	lsrs	r3, r3, #1
    f4cc:	400b      	ands	r3, r1
    f4ce:	4313      	orrs	r3, r2
    f4d0:	e79c      	b.n	f40c <__aeabi_fsub+0x8c>
    f4d2:	2e00      	cmp	r6, #0
    f4d4:	d000      	beq.n	f4d8 <__aeabi_fsub+0x158>
    f4d6:	e770      	b.n	f3ba <__aeabi_fsub+0x3a>
    f4d8:	e76b      	b.n	f3b2 <__aeabi_fsub+0x32>
    f4da:	1e3b      	subs	r3, r7, #0
    f4dc:	d1c5      	bne.n	f46a <__aeabi_fsub+0xea>
    f4de:	2200      	movs	r2, #0
    f4e0:	027b      	lsls	r3, r7, #9
    f4e2:	0a5b      	lsrs	r3, r3, #9
    f4e4:	b2e4      	uxtb	r4, r4
    f4e6:	e7a3      	b.n	f430 <__aeabi_fsub+0xb0>
    f4e8:	0014      	movs	r4, r2
    f4ea:	e78f      	b.n	f40c <__aeabi_fsub+0x8c>
    f4ec:	2e00      	cmp	r6, #0
    f4ee:	d04d      	beq.n	f58c <__aeabi_fsub+0x20c>
    f4f0:	1e48      	subs	r0, r1, #1
    f4f2:	2800      	cmp	r0, #0
    f4f4:	d157      	bne.n	f5a6 <__aeabi_fsub+0x226>
    f4f6:	199b      	adds	r3, r3, r6
    f4f8:	2401      	movs	r4, #1
    f4fa:	015a      	lsls	r2, r3, #5
    f4fc:	d5b5      	bpl.n	f46a <__aeabi_fsub+0xea>
    f4fe:	2402      	movs	r4, #2
    f500:	e7e0      	b.n	f4c4 <__aeabi_fsub+0x144>
    f502:	2a00      	cmp	r2, #0
    f504:	d125      	bne.n	f552 <__aeabi_fsub+0x1d2>
    f506:	1c62      	adds	r2, r4, #1
    f508:	b2d2      	uxtb	r2, r2
    f50a:	2a01      	cmp	r2, #1
    f50c:	dd72      	ble.n	f5f4 <__aeabi_fsub+0x274>
    f50e:	1b9f      	subs	r7, r3, r6
    f510:	017a      	lsls	r2, r7, #5
    f512:	d535      	bpl.n	f580 <__aeabi_fsub+0x200>
    f514:	1af7      	subs	r7, r6, r3
    f516:	000d      	movs	r5, r1
    f518:	e764      	b.n	f3e4 <__aeabi_fsub+0x64>
    f51a:	2201      	movs	r2, #1
    f51c:	2300      	movs	r3, #0
    f51e:	402a      	ands	r2, r5
    f520:	e786      	b.n	f430 <__aeabi_fsub+0xb0>
    f522:	003b      	movs	r3, r7
    f524:	4a63      	ldr	r2, [pc, #396]	; (f6b4 <__aeabi_fsub+0x334>)
    f526:	1a24      	subs	r4, r4, r0
    f528:	4013      	ands	r3, r2
    f52a:	e76f      	b.n	f40c <__aeabi_fsub+0x8c>
    f52c:	2900      	cmp	r1, #0
    f52e:	d16c      	bne.n	f60a <__aeabi_fsub+0x28a>
    f530:	1c61      	adds	r1, r4, #1
    f532:	b2c8      	uxtb	r0, r1
    f534:	2801      	cmp	r0, #1
    f536:	dd4e      	ble.n	f5d6 <__aeabi_fsub+0x256>
    f538:	29ff      	cmp	r1, #255	; 0xff
    f53a:	d049      	beq.n	f5d0 <__aeabi_fsub+0x250>
    f53c:	199b      	adds	r3, r3, r6
    f53e:	085b      	lsrs	r3, r3, #1
    f540:	000c      	movs	r4, r1
    f542:	e763      	b.n	f40c <__aeabi_fsub+0x8c>
    f544:	2aff      	cmp	r2, #255	; 0xff
    f546:	d041      	beq.n	f5cc <__aeabi_fsub+0x24c>
    f548:	000a      	movs	r2, r1
    f54a:	e781      	b.n	f450 <__aeabi_fsub+0xd0>
    f54c:	2601      	movs	r6, #1
    f54e:	1b9b      	subs	r3, r3, r6
    f550:	e789      	b.n	f466 <__aeabi_fsub+0xe6>
    f552:	2c00      	cmp	r4, #0
    f554:	d01c      	beq.n	f590 <__aeabi_fsub+0x210>
    f556:	28ff      	cmp	r0, #255	; 0xff
    f558:	d021      	beq.n	f59e <__aeabi_fsub+0x21e>
    f55a:	2480      	movs	r4, #128	; 0x80
    f55c:	04e4      	lsls	r4, r4, #19
    f55e:	4252      	negs	r2, r2
    f560:	4323      	orrs	r3, r4
    f562:	2a1b      	cmp	r2, #27
    f564:	dd00      	ble.n	f568 <__aeabi_fsub+0x1e8>
    f566:	e096      	b.n	f696 <__aeabi_fsub+0x316>
    f568:	001c      	movs	r4, r3
    f56a:	2520      	movs	r5, #32
    f56c:	40d4      	lsrs	r4, r2
    f56e:	1aaa      	subs	r2, r5, r2
    f570:	4093      	lsls	r3, r2
    f572:	1e5a      	subs	r2, r3, #1
    f574:	4193      	sbcs	r3, r2
    f576:	4323      	orrs	r3, r4
    f578:	1af3      	subs	r3, r6, r3
    f57a:	0004      	movs	r4, r0
    f57c:	000d      	movs	r5, r1
    f57e:	e72d      	b.n	f3dc <__aeabi_fsub+0x5c>
    f580:	2f00      	cmp	r7, #0
    f582:	d000      	beq.n	f586 <__aeabi_fsub+0x206>
    f584:	e72e      	b.n	f3e4 <__aeabi_fsub+0x64>
    f586:	2200      	movs	r2, #0
    f588:	2400      	movs	r4, #0
    f58a:	e7a9      	b.n	f4e0 <__aeabi_fsub+0x160>
    f58c:	000c      	movs	r4, r1
    f58e:	e73d      	b.n	f40c <__aeabi_fsub+0x8c>
    f590:	2b00      	cmp	r3, #0
    f592:	d058      	beq.n	f646 <__aeabi_fsub+0x2c6>
    f594:	43d2      	mvns	r2, r2
    f596:	2a00      	cmp	r2, #0
    f598:	d0ee      	beq.n	f578 <__aeabi_fsub+0x1f8>
    f59a:	28ff      	cmp	r0, #255	; 0xff
    f59c:	d1e1      	bne.n	f562 <__aeabi_fsub+0x1e2>
    f59e:	0033      	movs	r3, r6
    f5a0:	24ff      	movs	r4, #255	; 0xff
    f5a2:	000d      	movs	r5, r1
    f5a4:	e732      	b.n	f40c <__aeabi_fsub+0x8c>
    f5a6:	29ff      	cmp	r1, #255	; 0xff
    f5a8:	d010      	beq.n	f5cc <__aeabi_fsub+0x24c>
    f5aa:	0001      	movs	r1, r0
    f5ac:	e778      	b.n	f4a0 <__aeabi_fsub+0x120>
    f5ae:	2b00      	cmp	r3, #0
    f5b0:	d06e      	beq.n	f690 <__aeabi_fsub+0x310>
    f5b2:	24ff      	movs	r4, #255	; 0xff
    f5b4:	2e00      	cmp	r6, #0
    f5b6:	d100      	bne.n	f5ba <__aeabi_fsub+0x23a>
    f5b8:	e728      	b.n	f40c <__aeabi_fsub+0x8c>
    f5ba:	2280      	movs	r2, #128	; 0x80
    f5bc:	4651      	mov	r1, sl
    f5be:	03d2      	lsls	r2, r2, #15
    f5c0:	4211      	tst	r1, r2
    f5c2:	d003      	beq.n	f5cc <__aeabi_fsub+0x24c>
    f5c4:	4661      	mov	r1, ip
    f5c6:	4211      	tst	r1, r2
    f5c8:	d100      	bne.n	f5cc <__aeabi_fsub+0x24c>
    f5ca:	0033      	movs	r3, r6
    f5cc:	24ff      	movs	r4, #255	; 0xff
    f5ce:	e71d      	b.n	f40c <__aeabi_fsub+0x8c>
    f5d0:	24ff      	movs	r4, #255	; 0xff
    f5d2:	2300      	movs	r3, #0
    f5d4:	e72c      	b.n	f430 <__aeabi_fsub+0xb0>
    f5d6:	2c00      	cmp	r4, #0
    f5d8:	d1e9      	bne.n	f5ae <__aeabi_fsub+0x22e>
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d063      	beq.n	f6a6 <__aeabi_fsub+0x326>
    f5de:	2e00      	cmp	r6, #0
    f5e0:	d100      	bne.n	f5e4 <__aeabi_fsub+0x264>
    f5e2:	e713      	b.n	f40c <__aeabi_fsub+0x8c>
    f5e4:	199b      	adds	r3, r3, r6
    f5e6:	015a      	lsls	r2, r3, #5
    f5e8:	d400      	bmi.n	f5ec <__aeabi_fsub+0x26c>
    f5ea:	e73e      	b.n	f46a <__aeabi_fsub+0xea>
    f5ec:	4a31      	ldr	r2, [pc, #196]	; (f6b4 <__aeabi_fsub+0x334>)
    f5ee:	000c      	movs	r4, r1
    f5f0:	4013      	ands	r3, r2
    f5f2:	e70b      	b.n	f40c <__aeabi_fsub+0x8c>
    f5f4:	2c00      	cmp	r4, #0
    f5f6:	d11e      	bne.n	f636 <__aeabi_fsub+0x2b6>
    f5f8:	2b00      	cmp	r3, #0
    f5fa:	d12f      	bne.n	f65c <__aeabi_fsub+0x2dc>
    f5fc:	2e00      	cmp	r6, #0
    f5fe:	d04f      	beq.n	f6a0 <__aeabi_fsub+0x320>
    f600:	0033      	movs	r3, r6
    f602:	000d      	movs	r5, r1
    f604:	e702      	b.n	f40c <__aeabi_fsub+0x8c>
    f606:	2601      	movs	r6, #1
    f608:	e755      	b.n	f4b6 <__aeabi_fsub+0x136>
    f60a:	2c00      	cmp	r4, #0
    f60c:	d11f      	bne.n	f64e <__aeabi_fsub+0x2ce>
    f60e:	2b00      	cmp	r3, #0
    f610:	d043      	beq.n	f69a <__aeabi_fsub+0x31a>
    f612:	43c9      	mvns	r1, r1
    f614:	2900      	cmp	r1, #0
    f616:	d00b      	beq.n	f630 <__aeabi_fsub+0x2b0>
    f618:	28ff      	cmp	r0, #255	; 0xff
    f61a:	d039      	beq.n	f690 <__aeabi_fsub+0x310>
    f61c:	291b      	cmp	r1, #27
    f61e:	dc44      	bgt.n	f6aa <__aeabi_fsub+0x32a>
    f620:	001c      	movs	r4, r3
    f622:	2720      	movs	r7, #32
    f624:	40cc      	lsrs	r4, r1
    f626:	1a79      	subs	r1, r7, r1
    f628:	408b      	lsls	r3, r1
    f62a:	1e59      	subs	r1, r3, #1
    f62c:	418b      	sbcs	r3, r1
    f62e:	4323      	orrs	r3, r4
    f630:	199b      	adds	r3, r3, r6
    f632:	0004      	movs	r4, r0
    f634:	e740      	b.n	f4b8 <__aeabi_fsub+0x138>
    f636:	2b00      	cmp	r3, #0
    f638:	d11a      	bne.n	f670 <__aeabi_fsub+0x2f0>
    f63a:	2e00      	cmp	r6, #0
    f63c:	d124      	bne.n	f688 <__aeabi_fsub+0x308>
    f63e:	2780      	movs	r7, #128	; 0x80
    f640:	2200      	movs	r2, #0
    f642:	03ff      	lsls	r7, r7, #15
    f644:	e71b      	b.n	f47e <__aeabi_fsub+0xfe>
    f646:	0033      	movs	r3, r6
    f648:	0004      	movs	r4, r0
    f64a:	000d      	movs	r5, r1
    f64c:	e6de      	b.n	f40c <__aeabi_fsub+0x8c>
    f64e:	28ff      	cmp	r0, #255	; 0xff
    f650:	d01e      	beq.n	f690 <__aeabi_fsub+0x310>
    f652:	2480      	movs	r4, #128	; 0x80
    f654:	04e4      	lsls	r4, r4, #19
    f656:	4249      	negs	r1, r1
    f658:	4323      	orrs	r3, r4
    f65a:	e7df      	b.n	f61c <__aeabi_fsub+0x29c>
    f65c:	2e00      	cmp	r6, #0
    f65e:	d100      	bne.n	f662 <__aeabi_fsub+0x2e2>
    f660:	e6d4      	b.n	f40c <__aeabi_fsub+0x8c>
    f662:	1b9f      	subs	r7, r3, r6
    f664:	017a      	lsls	r2, r7, #5
    f666:	d400      	bmi.n	f66a <__aeabi_fsub+0x2ea>
    f668:	e737      	b.n	f4da <__aeabi_fsub+0x15a>
    f66a:	1af3      	subs	r3, r6, r3
    f66c:	000d      	movs	r5, r1
    f66e:	e6cd      	b.n	f40c <__aeabi_fsub+0x8c>
    f670:	24ff      	movs	r4, #255	; 0xff
    f672:	2e00      	cmp	r6, #0
    f674:	d100      	bne.n	f678 <__aeabi_fsub+0x2f8>
    f676:	e6c9      	b.n	f40c <__aeabi_fsub+0x8c>
    f678:	2280      	movs	r2, #128	; 0x80
    f67a:	4650      	mov	r0, sl
    f67c:	03d2      	lsls	r2, r2, #15
    f67e:	4210      	tst	r0, r2
    f680:	d0a4      	beq.n	f5cc <__aeabi_fsub+0x24c>
    f682:	4660      	mov	r0, ip
    f684:	4210      	tst	r0, r2
    f686:	d1a1      	bne.n	f5cc <__aeabi_fsub+0x24c>
    f688:	0033      	movs	r3, r6
    f68a:	000d      	movs	r5, r1
    f68c:	24ff      	movs	r4, #255	; 0xff
    f68e:	e6bd      	b.n	f40c <__aeabi_fsub+0x8c>
    f690:	0033      	movs	r3, r6
    f692:	24ff      	movs	r4, #255	; 0xff
    f694:	e6ba      	b.n	f40c <__aeabi_fsub+0x8c>
    f696:	2301      	movs	r3, #1
    f698:	e76e      	b.n	f578 <__aeabi_fsub+0x1f8>
    f69a:	0033      	movs	r3, r6
    f69c:	0004      	movs	r4, r0
    f69e:	e6b5      	b.n	f40c <__aeabi_fsub+0x8c>
    f6a0:	2700      	movs	r7, #0
    f6a2:	2200      	movs	r2, #0
    f6a4:	e71c      	b.n	f4e0 <__aeabi_fsub+0x160>
    f6a6:	0033      	movs	r3, r6
    f6a8:	e6b0      	b.n	f40c <__aeabi_fsub+0x8c>
    f6aa:	2301      	movs	r3, #1
    f6ac:	e7c0      	b.n	f630 <__aeabi_fsub+0x2b0>
    f6ae:	46c0      	nop			; (mov r8, r8)
    f6b0:	7dffffff 	.word	0x7dffffff
    f6b4:	fbffffff 	.word	0xfbffffff

0000f6b8 <__aeabi_f2iz>:
    f6b8:	0241      	lsls	r1, r0, #9
    f6ba:	0043      	lsls	r3, r0, #1
    f6bc:	0fc2      	lsrs	r2, r0, #31
    f6be:	0a49      	lsrs	r1, r1, #9
    f6c0:	0e1b      	lsrs	r3, r3, #24
    f6c2:	2000      	movs	r0, #0
    f6c4:	2b7e      	cmp	r3, #126	; 0x7e
    f6c6:	dd0d      	ble.n	f6e4 <__aeabi_f2iz+0x2c>
    f6c8:	2b9d      	cmp	r3, #157	; 0x9d
    f6ca:	dc0c      	bgt.n	f6e6 <__aeabi_f2iz+0x2e>
    f6cc:	2080      	movs	r0, #128	; 0x80
    f6ce:	0400      	lsls	r0, r0, #16
    f6d0:	4301      	orrs	r1, r0
    f6d2:	2b95      	cmp	r3, #149	; 0x95
    f6d4:	dc0a      	bgt.n	f6ec <__aeabi_f2iz+0x34>
    f6d6:	2096      	movs	r0, #150	; 0x96
    f6d8:	1ac3      	subs	r3, r0, r3
    f6da:	40d9      	lsrs	r1, r3
    f6dc:	4248      	negs	r0, r1
    f6de:	2a00      	cmp	r2, #0
    f6e0:	d100      	bne.n	f6e4 <__aeabi_f2iz+0x2c>
    f6e2:	0008      	movs	r0, r1
    f6e4:	4770      	bx	lr
    f6e6:	4b03      	ldr	r3, [pc, #12]	; (f6f4 <__aeabi_f2iz+0x3c>)
    f6e8:	18d0      	adds	r0, r2, r3
    f6ea:	e7fb      	b.n	f6e4 <__aeabi_f2iz+0x2c>
    f6ec:	3b96      	subs	r3, #150	; 0x96
    f6ee:	4099      	lsls	r1, r3
    f6f0:	e7f4      	b.n	f6dc <__aeabi_f2iz+0x24>
    f6f2:	46c0      	nop			; (mov r8, r8)
    f6f4:	7fffffff 	.word	0x7fffffff

0000f6f8 <__aeabi_i2f>:
    f6f8:	b570      	push	{r4, r5, r6, lr}
    f6fa:	2800      	cmp	r0, #0
    f6fc:	d030      	beq.n	f760 <__aeabi_i2f+0x68>
    f6fe:	17c3      	asrs	r3, r0, #31
    f700:	18c4      	adds	r4, r0, r3
    f702:	405c      	eors	r4, r3
    f704:	0fc5      	lsrs	r5, r0, #31
    f706:	0020      	movs	r0, r4
    f708:	f001 fe66 	bl	113d8 <__clzsi2>
    f70c:	239e      	movs	r3, #158	; 0x9e
    f70e:	1a1b      	subs	r3, r3, r0
    f710:	2b96      	cmp	r3, #150	; 0x96
    f712:	dc0d      	bgt.n	f730 <__aeabi_i2f+0x38>
    f714:	2296      	movs	r2, #150	; 0x96
    f716:	1ad2      	subs	r2, r2, r3
    f718:	4094      	lsls	r4, r2
    f71a:	002a      	movs	r2, r5
    f71c:	0264      	lsls	r4, r4, #9
    f71e:	0a64      	lsrs	r4, r4, #9
    f720:	b2db      	uxtb	r3, r3
    f722:	0264      	lsls	r4, r4, #9
    f724:	05db      	lsls	r3, r3, #23
    f726:	0a60      	lsrs	r0, r4, #9
    f728:	07d2      	lsls	r2, r2, #31
    f72a:	4318      	orrs	r0, r3
    f72c:	4310      	orrs	r0, r2
    f72e:	bd70      	pop	{r4, r5, r6, pc}
    f730:	2b99      	cmp	r3, #153	; 0x99
    f732:	dc19      	bgt.n	f768 <__aeabi_i2f+0x70>
    f734:	2299      	movs	r2, #153	; 0x99
    f736:	1ad2      	subs	r2, r2, r3
    f738:	2a00      	cmp	r2, #0
    f73a:	dd29      	ble.n	f790 <__aeabi_i2f+0x98>
    f73c:	4094      	lsls	r4, r2
    f73e:	0022      	movs	r2, r4
    f740:	4c14      	ldr	r4, [pc, #80]	; (f794 <__aeabi_i2f+0x9c>)
    f742:	4014      	ands	r4, r2
    f744:	0751      	lsls	r1, r2, #29
    f746:	d004      	beq.n	f752 <__aeabi_i2f+0x5a>
    f748:	210f      	movs	r1, #15
    f74a:	400a      	ands	r2, r1
    f74c:	2a04      	cmp	r2, #4
    f74e:	d000      	beq.n	f752 <__aeabi_i2f+0x5a>
    f750:	3404      	adds	r4, #4
    f752:	0162      	lsls	r2, r4, #5
    f754:	d413      	bmi.n	f77e <__aeabi_i2f+0x86>
    f756:	01a4      	lsls	r4, r4, #6
    f758:	0a64      	lsrs	r4, r4, #9
    f75a:	b2db      	uxtb	r3, r3
    f75c:	002a      	movs	r2, r5
    f75e:	e7e0      	b.n	f722 <__aeabi_i2f+0x2a>
    f760:	2200      	movs	r2, #0
    f762:	2300      	movs	r3, #0
    f764:	2400      	movs	r4, #0
    f766:	e7dc      	b.n	f722 <__aeabi_i2f+0x2a>
    f768:	2205      	movs	r2, #5
    f76a:	0021      	movs	r1, r4
    f76c:	1a12      	subs	r2, r2, r0
    f76e:	40d1      	lsrs	r1, r2
    f770:	22b9      	movs	r2, #185	; 0xb9
    f772:	1ad2      	subs	r2, r2, r3
    f774:	4094      	lsls	r4, r2
    f776:	1e62      	subs	r2, r4, #1
    f778:	4194      	sbcs	r4, r2
    f77a:	430c      	orrs	r4, r1
    f77c:	e7da      	b.n	f734 <__aeabi_i2f+0x3c>
    f77e:	4b05      	ldr	r3, [pc, #20]	; (f794 <__aeabi_i2f+0x9c>)
    f780:	002a      	movs	r2, r5
    f782:	401c      	ands	r4, r3
    f784:	239f      	movs	r3, #159	; 0x9f
    f786:	01a4      	lsls	r4, r4, #6
    f788:	1a1b      	subs	r3, r3, r0
    f78a:	0a64      	lsrs	r4, r4, #9
    f78c:	b2db      	uxtb	r3, r3
    f78e:	e7c8      	b.n	f722 <__aeabi_i2f+0x2a>
    f790:	0022      	movs	r2, r4
    f792:	e7d5      	b.n	f740 <__aeabi_i2f+0x48>
    f794:	fbffffff 	.word	0xfbffffff

0000f798 <__aeabi_ui2f>:
    f798:	b510      	push	{r4, lr}
    f79a:	1e04      	subs	r4, r0, #0
    f79c:	d027      	beq.n	f7ee <__aeabi_ui2f+0x56>
    f79e:	f001 fe1b 	bl	113d8 <__clzsi2>
    f7a2:	239e      	movs	r3, #158	; 0x9e
    f7a4:	1a1b      	subs	r3, r3, r0
    f7a6:	2b96      	cmp	r3, #150	; 0x96
    f7a8:	dc0a      	bgt.n	f7c0 <__aeabi_ui2f+0x28>
    f7aa:	2296      	movs	r2, #150	; 0x96
    f7ac:	1ad2      	subs	r2, r2, r3
    f7ae:	4094      	lsls	r4, r2
    f7b0:	0264      	lsls	r4, r4, #9
    f7b2:	0a64      	lsrs	r4, r4, #9
    f7b4:	b2db      	uxtb	r3, r3
    f7b6:	0264      	lsls	r4, r4, #9
    f7b8:	05db      	lsls	r3, r3, #23
    f7ba:	0a60      	lsrs	r0, r4, #9
    f7bc:	4318      	orrs	r0, r3
    f7be:	bd10      	pop	{r4, pc}
    f7c0:	2b99      	cmp	r3, #153	; 0x99
    f7c2:	dc17      	bgt.n	f7f4 <__aeabi_ui2f+0x5c>
    f7c4:	2299      	movs	r2, #153	; 0x99
    f7c6:	1ad2      	subs	r2, r2, r3
    f7c8:	2a00      	cmp	r2, #0
    f7ca:	dd27      	ble.n	f81c <__aeabi_ui2f+0x84>
    f7cc:	4094      	lsls	r4, r2
    f7ce:	0022      	movs	r2, r4
    f7d0:	4c13      	ldr	r4, [pc, #76]	; (f820 <__aeabi_ui2f+0x88>)
    f7d2:	4014      	ands	r4, r2
    f7d4:	0751      	lsls	r1, r2, #29
    f7d6:	d004      	beq.n	f7e2 <__aeabi_ui2f+0x4a>
    f7d8:	210f      	movs	r1, #15
    f7da:	400a      	ands	r2, r1
    f7dc:	2a04      	cmp	r2, #4
    f7de:	d000      	beq.n	f7e2 <__aeabi_ui2f+0x4a>
    f7e0:	3404      	adds	r4, #4
    f7e2:	0162      	lsls	r2, r4, #5
    f7e4:	d412      	bmi.n	f80c <__aeabi_ui2f+0x74>
    f7e6:	01a4      	lsls	r4, r4, #6
    f7e8:	0a64      	lsrs	r4, r4, #9
    f7ea:	b2db      	uxtb	r3, r3
    f7ec:	e7e3      	b.n	f7b6 <__aeabi_ui2f+0x1e>
    f7ee:	2300      	movs	r3, #0
    f7f0:	2400      	movs	r4, #0
    f7f2:	e7e0      	b.n	f7b6 <__aeabi_ui2f+0x1e>
    f7f4:	22b9      	movs	r2, #185	; 0xb9
    f7f6:	0021      	movs	r1, r4
    f7f8:	1ad2      	subs	r2, r2, r3
    f7fa:	4091      	lsls	r1, r2
    f7fc:	000a      	movs	r2, r1
    f7fe:	1e51      	subs	r1, r2, #1
    f800:	418a      	sbcs	r2, r1
    f802:	2105      	movs	r1, #5
    f804:	1a09      	subs	r1, r1, r0
    f806:	40cc      	lsrs	r4, r1
    f808:	4314      	orrs	r4, r2
    f80a:	e7db      	b.n	f7c4 <__aeabi_ui2f+0x2c>
    f80c:	4b04      	ldr	r3, [pc, #16]	; (f820 <__aeabi_ui2f+0x88>)
    f80e:	401c      	ands	r4, r3
    f810:	239f      	movs	r3, #159	; 0x9f
    f812:	01a4      	lsls	r4, r4, #6
    f814:	1a1b      	subs	r3, r3, r0
    f816:	0a64      	lsrs	r4, r4, #9
    f818:	b2db      	uxtb	r3, r3
    f81a:	e7cc      	b.n	f7b6 <__aeabi_ui2f+0x1e>
    f81c:	0022      	movs	r2, r4
    f81e:	e7d7      	b.n	f7d0 <__aeabi_ui2f+0x38>
    f820:	fbffffff 	.word	0xfbffffff

0000f824 <__aeabi_dadd>:
    f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f826:	4645      	mov	r5, r8
    f828:	46de      	mov	lr, fp
    f82a:	4657      	mov	r7, sl
    f82c:	464e      	mov	r6, r9
    f82e:	030c      	lsls	r4, r1, #12
    f830:	b5e0      	push	{r5, r6, r7, lr}
    f832:	004e      	lsls	r6, r1, #1
    f834:	0fc9      	lsrs	r1, r1, #31
    f836:	4688      	mov	r8, r1
    f838:	000d      	movs	r5, r1
    f83a:	0a61      	lsrs	r1, r4, #9
    f83c:	0f44      	lsrs	r4, r0, #29
    f83e:	430c      	orrs	r4, r1
    f840:	00c7      	lsls	r7, r0, #3
    f842:	0319      	lsls	r1, r3, #12
    f844:	0058      	lsls	r0, r3, #1
    f846:	0fdb      	lsrs	r3, r3, #31
    f848:	469b      	mov	fp, r3
    f84a:	0a4b      	lsrs	r3, r1, #9
    f84c:	0f51      	lsrs	r1, r2, #29
    f84e:	430b      	orrs	r3, r1
    f850:	0d76      	lsrs	r6, r6, #21
    f852:	0d40      	lsrs	r0, r0, #21
    f854:	0019      	movs	r1, r3
    f856:	00d2      	lsls	r2, r2, #3
    f858:	45d8      	cmp	r8, fp
    f85a:	d100      	bne.n	f85e <__aeabi_dadd+0x3a>
    f85c:	e0ae      	b.n	f9bc <__aeabi_dadd+0x198>
    f85e:	1a35      	subs	r5, r6, r0
    f860:	2d00      	cmp	r5, #0
    f862:	dc00      	bgt.n	f866 <__aeabi_dadd+0x42>
    f864:	e0f6      	b.n	fa54 <__aeabi_dadd+0x230>
    f866:	2800      	cmp	r0, #0
    f868:	d10f      	bne.n	f88a <__aeabi_dadd+0x66>
    f86a:	4313      	orrs	r3, r2
    f86c:	d100      	bne.n	f870 <__aeabi_dadd+0x4c>
    f86e:	e0db      	b.n	fa28 <__aeabi_dadd+0x204>
    f870:	1e6b      	subs	r3, r5, #1
    f872:	2b00      	cmp	r3, #0
    f874:	d000      	beq.n	f878 <__aeabi_dadd+0x54>
    f876:	e137      	b.n	fae8 <__aeabi_dadd+0x2c4>
    f878:	1aba      	subs	r2, r7, r2
    f87a:	4297      	cmp	r7, r2
    f87c:	41bf      	sbcs	r7, r7
    f87e:	1a64      	subs	r4, r4, r1
    f880:	427f      	negs	r7, r7
    f882:	1be4      	subs	r4, r4, r7
    f884:	2601      	movs	r6, #1
    f886:	0017      	movs	r7, r2
    f888:	e024      	b.n	f8d4 <__aeabi_dadd+0xb0>
    f88a:	4bc6      	ldr	r3, [pc, #792]	; (fba4 <__aeabi_dadd+0x380>)
    f88c:	429e      	cmp	r6, r3
    f88e:	d04d      	beq.n	f92c <__aeabi_dadd+0x108>
    f890:	2380      	movs	r3, #128	; 0x80
    f892:	041b      	lsls	r3, r3, #16
    f894:	4319      	orrs	r1, r3
    f896:	2d38      	cmp	r5, #56	; 0x38
    f898:	dd00      	ble.n	f89c <__aeabi_dadd+0x78>
    f89a:	e107      	b.n	faac <__aeabi_dadd+0x288>
    f89c:	2d1f      	cmp	r5, #31
    f89e:	dd00      	ble.n	f8a2 <__aeabi_dadd+0x7e>
    f8a0:	e138      	b.n	fb14 <__aeabi_dadd+0x2f0>
    f8a2:	2020      	movs	r0, #32
    f8a4:	1b43      	subs	r3, r0, r5
    f8a6:	469a      	mov	sl, r3
    f8a8:	000b      	movs	r3, r1
    f8aa:	4650      	mov	r0, sl
    f8ac:	4083      	lsls	r3, r0
    f8ae:	4699      	mov	r9, r3
    f8b0:	0013      	movs	r3, r2
    f8b2:	4648      	mov	r0, r9
    f8b4:	40eb      	lsrs	r3, r5
    f8b6:	4318      	orrs	r0, r3
    f8b8:	0003      	movs	r3, r0
    f8ba:	4650      	mov	r0, sl
    f8bc:	4082      	lsls	r2, r0
    f8be:	1e50      	subs	r0, r2, #1
    f8c0:	4182      	sbcs	r2, r0
    f8c2:	40e9      	lsrs	r1, r5
    f8c4:	431a      	orrs	r2, r3
    f8c6:	1aba      	subs	r2, r7, r2
    f8c8:	1a61      	subs	r1, r4, r1
    f8ca:	4297      	cmp	r7, r2
    f8cc:	41a4      	sbcs	r4, r4
    f8ce:	0017      	movs	r7, r2
    f8d0:	4264      	negs	r4, r4
    f8d2:	1b0c      	subs	r4, r1, r4
    f8d4:	0223      	lsls	r3, r4, #8
    f8d6:	d562      	bpl.n	f99e <__aeabi_dadd+0x17a>
    f8d8:	0264      	lsls	r4, r4, #9
    f8da:	0a65      	lsrs	r5, r4, #9
    f8dc:	2d00      	cmp	r5, #0
    f8de:	d100      	bne.n	f8e2 <__aeabi_dadd+0xbe>
    f8e0:	e0df      	b.n	faa2 <__aeabi_dadd+0x27e>
    f8e2:	0028      	movs	r0, r5
    f8e4:	f001 fd78 	bl	113d8 <__clzsi2>
    f8e8:	0003      	movs	r3, r0
    f8ea:	3b08      	subs	r3, #8
    f8ec:	2b1f      	cmp	r3, #31
    f8ee:	dd00      	ble.n	f8f2 <__aeabi_dadd+0xce>
    f8f0:	e0d2      	b.n	fa98 <__aeabi_dadd+0x274>
    f8f2:	2220      	movs	r2, #32
    f8f4:	003c      	movs	r4, r7
    f8f6:	1ad2      	subs	r2, r2, r3
    f8f8:	409d      	lsls	r5, r3
    f8fa:	40d4      	lsrs	r4, r2
    f8fc:	409f      	lsls	r7, r3
    f8fe:	4325      	orrs	r5, r4
    f900:	429e      	cmp	r6, r3
    f902:	dd00      	ble.n	f906 <__aeabi_dadd+0xe2>
    f904:	e0c4      	b.n	fa90 <__aeabi_dadd+0x26c>
    f906:	1b9e      	subs	r6, r3, r6
    f908:	1c73      	adds	r3, r6, #1
    f90a:	2b1f      	cmp	r3, #31
    f90c:	dd00      	ble.n	f910 <__aeabi_dadd+0xec>
    f90e:	e0f1      	b.n	faf4 <__aeabi_dadd+0x2d0>
    f910:	2220      	movs	r2, #32
    f912:	0038      	movs	r0, r7
    f914:	0029      	movs	r1, r5
    f916:	1ad2      	subs	r2, r2, r3
    f918:	40d8      	lsrs	r0, r3
    f91a:	4091      	lsls	r1, r2
    f91c:	4097      	lsls	r7, r2
    f91e:	002c      	movs	r4, r5
    f920:	4301      	orrs	r1, r0
    f922:	1e78      	subs	r0, r7, #1
    f924:	4187      	sbcs	r7, r0
    f926:	40dc      	lsrs	r4, r3
    f928:	2600      	movs	r6, #0
    f92a:	430f      	orrs	r7, r1
    f92c:	077b      	lsls	r3, r7, #29
    f92e:	d009      	beq.n	f944 <__aeabi_dadd+0x120>
    f930:	230f      	movs	r3, #15
    f932:	403b      	ands	r3, r7
    f934:	2b04      	cmp	r3, #4
    f936:	d005      	beq.n	f944 <__aeabi_dadd+0x120>
    f938:	1d3b      	adds	r3, r7, #4
    f93a:	42bb      	cmp	r3, r7
    f93c:	41bf      	sbcs	r7, r7
    f93e:	427f      	negs	r7, r7
    f940:	19e4      	adds	r4, r4, r7
    f942:	001f      	movs	r7, r3
    f944:	0223      	lsls	r3, r4, #8
    f946:	d52c      	bpl.n	f9a2 <__aeabi_dadd+0x17e>
    f948:	4b96      	ldr	r3, [pc, #600]	; (fba4 <__aeabi_dadd+0x380>)
    f94a:	3601      	adds	r6, #1
    f94c:	429e      	cmp	r6, r3
    f94e:	d100      	bne.n	f952 <__aeabi_dadd+0x12e>
    f950:	e09a      	b.n	fa88 <__aeabi_dadd+0x264>
    f952:	4645      	mov	r5, r8
    f954:	4b94      	ldr	r3, [pc, #592]	; (fba8 <__aeabi_dadd+0x384>)
    f956:	08ff      	lsrs	r7, r7, #3
    f958:	401c      	ands	r4, r3
    f95a:	0760      	lsls	r0, r4, #29
    f95c:	0576      	lsls	r6, r6, #21
    f95e:	0264      	lsls	r4, r4, #9
    f960:	4307      	orrs	r7, r0
    f962:	0b24      	lsrs	r4, r4, #12
    f964:	0d76      	lsrs	r6, r6, #21
    f966:	2100      	movs	r1, #0
    f968:	0324      	lsls	r4, r4, #12
    f96a:	0b23      	lsrs	r3, r4, #12
    f96c:	0d0c      	lsrs	r4, r1, #20
    f96e:	4a8f      	ldr	r2, [pc, #572]	; (fbac <__aeabi_dadd+0x388>)
    f970:	0524      	lsls	r4, r4, #20
    f972:	431c      	orrs	r4, r3
    f974:	4014      	ands	r4, r2
    f976:	0533      	lsls	r3, r6, #20
    f978:	4323      	orrs	r3, r4
    f97a:	005b      	lsls	r3, r3, #1
    f97c:	07ed      	lsls	r5, r5, #31
    f97e:	085b      	lsrs	r3, r3, #1
    f980:	432b      	orrs	r3, r5
    f982:	0038      	movs	r0, r7
    f984:	0019      	movs	r1, r3
    f986:	bc3c      	pop	{r2, r3, r4, r5}
    f988:	4690      	mov	r8, r2
    f98a:	4699      	mov	r9, r3
    f98c:	46a2      	mov	sl, r4
    f98e:	46ab      	mov	fp, r5
    f990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f992:	4664      	mov	r4, ip
    f994:	4304      	orrs	r4, r0
    f996:	d100      	bne.n	f99a <__aeabi_dadd+0x176>
    f998:	e211      	b.n	fdbe <__aeabi_dadd+0x59a>
    f99a:	0004      	movs	r4, r0
    f99c:	4667      	mov	r7, ip
    f99e:	077b      	lsls	r3, r7, #29
    f9a0:	d1c6      	bne.n	f930 <__aeabi_dadd+0x10c>
    f9a2:	4645      	mov	r5, r8
    f9a4:	0760      	lsls	r0, r4, #29
    f9a6:	08ff      	lsrs	r7, r7, #3
    f9a8:	4307      	orrs	r7, r0
    f9aa:	08e4      	lsrs	r4, r4, #3
    f9ac:	4b7d      	ldr	r3, [pc, #500]	; (fba4 <__aeabi_dadd+0x380>)
    f9ae:	429e      	cmp	r6, r3
    f9b0:	d030      	beq.n	fa14 <__aeabi_dadd+0x1f0>
    f9b2:	0324      	lsls	r4, r4, #12
    f9b4:	0576      	lsls	r6, r6, #21
    f9b6:	0b24      	lsrs	r4, r4, #12
    f9b8:	0d76      	lsrs	r6, r6, #21
    f9ba:	e7d4      	b.n	f966 <__aeabi_dadd+0x142>
    f9bc:	1a33      	subs	r3, r6, r0
    f9be:	469a      	mov	sl, r3
    f9c0:	2b00      	cmp	r3, #0
    f9c2:	dd78      	ble.n	fab6 <__aeabi_dadd+0x292>
    f9c4:	2800      	cmp	r0, #0
    f9c6:	d031      	beq.n	fa2c <__aeabi_dadd+0x208>
    f9c8:	4876      	ldr	r0, [pc, #472]	; (fba4 <__aeabi_dadd+0x380>)
    f9ca:	4286      	cmp	r6, r0
    f9cc:	d0ae      	beq.n	f92c <__aeabi_dadd+0x108>
    f9ce:	2080      	movs	r0, #128	; 0x80
    f9d0:	0400      	lsls	r0, r0, #16
    f9d2:	4301      	orrs	r1, r0
    f9d4:	4653      	mov	r3, sl
    f9d6:	2b38      	cmp	r3, #56	; 0x38
    f9d8:	dc00      	bgt.n	f9dc <__aeabi_dadd+0x1b8>
    f9da:	e0e9      	b.n	fbb0 <__aeabi_dadd+0x38c>
    f9dc:	430a      	orrs	r2, r1
    f9de:	1e51      	subs	r1, r2, #1
    f9e0:	418a      	sbcs	r2, r1
    f9e2:	2100      	movs	r1, #0
    f9e4:	19d2      	adds	r2, r2, r7
    f9e6:	42ba      	cmp	r2, r7
    f9e8:	41bf      	sbcs	r7, r7
    f9ea:	1909      	adds	r1, r1, r4
    f9ec:	427c      	negs	r4, r7
    f9ee:	0017      	movs	r7, r2
    f9f0:	190c      	adds	r4, r1, r4
    f9f2:	0223      	lsls	r3, r4, #8
    f9f4:	d5d3      	bpl.n	f99e <__aeabi_dadd+0x17a>
    f9f6:	4b6b      	ldr	r3, [pc, #428]	; (fba4 <__aeabi_dadd+0x380>)
    f9f8:	3601      	adds	r6, #1
    f9fa:	429e      	cmp	r6, r3
    f9fc:	d100      	bne.n	fa00 <__aeabi_dadd+0x1dc>
    f9fe:	e13a      	b.n	fc76 <__aeabi_dadd+0x452>
    fa00:	2001      	movs	r0, #1
    fa02:	4b69      	ldr	r3, [pc, #420]	; (fba8 <__aeabi_dadd+0x384>)
    fa04:	401c      	ands	r4, r3
    fa06:	087b      	lsrs	r3, r7, #1
    fa08:	4007      	ands	r7, r0
    fa0a:	431f      	orrs	r7, r3
    fa0c:	07e0      	lsls	r0, r4, #31
    fa0e:	4307      	orrs	r7, r0
    fa10:	0864      	lsrs	r4, r4, #1
    fa12:	e78b      	b.n	f92c <__aeabi_dadd+0x108>
    fa14:	0023      	movs	r3, r4
    fa16:	433b      	orrs	r3, r7
    fa18:	d100      	bne.n	fa1c <__aeabi_dadd+0x1f8>
    fa1a:	e1cb      	b.n	fdb4 <__aeabi_dadd+0x590>
    fa1c:	2280      	movs	r2, #128	; 0x80
    fa1e:	0312      	lsls	r2, r2, #12
    fa20:	4314      	orrs	r4, r2
    fa22:	0324      	lsls	r4, r4, #12
    fa24:	0b24      	lsrs	r4, r4, #12
    fa26:	e79e      	b.n	f966 <__aeabi_dadd+0x142>
    fa28:	002e      	movs	r6, r5
    fa2a:	e77f      	b.n	f92c <__aeabi_dadd+0x108>
    fa2c:	0008      	movs	r0, r1
    fa2e:	4310      	orrs	r0, r2
    fa30:	d100      	bne.n	fa34 <__aeabi_dadd+0x210>
    fa32:	e0b4      	b.n	fb9e <__aeabi_dadd+0x37a>
    fa34:	1e58      	subs	r0, r3, #1
    fa36:	2800      	cmp	r0, #0
    fa38:	d000      	beq.n	fa3c <__aeabi_dadd+0x218>
    fa3a:	e0de      	b.n	fbfa <__aeabi_dadd+0x3d6>
    fa3c:	18ba      	adds	r2, r7, r2
    fa3e:	42ba      	cmp	r2, r7
    fa40:	419b      	sbcs	r3, r3
    fa42:	1864      	adds	r4, r4, r1
    fa44:	425b      	negs	r3, r3
    fa46:	18e4      	adds	r4, r4, r3
    fa48:	0017      	movs	r7, r2
    fa4a:	2601      	movs	r6, #1
    fa4c:	0223      	lsls	r3, r4, #8
    fa4e:	d5a6      	bpl.n	f99e <__aeabi_dadd+0x17a>
    fa50:	2602      	movs	r6, #2
    fa52:	e7d5      	b.n	fa00 <__aeabi_dadd+0x1dc>
    fa54:	2d00      	cmp	r5, #0
    fa56:	d16e      	bne.n	fb36 <__aeabi_dadd+0x312>
    fa58:	1c70      	adds	r0, r6, #1
    fa5a:	0540      	lsls	r0, r0, #21
    fa5c:	0d40      	lsrs	r0, r0, #21
    fa5e:	2801      	cmp	r0, #1
    fa60:	dc00      	bgt.n	fa64 <__aeabi_dadd+0x240>
    fa62:	e0f9      	b.n	fc58 <__aeabi_dadd+0x434>
    fa64:	1ab8      	subs	r0, r7, r2
    fa66:	4684      	mov	ip, r0
    fa68:	4287      	cmp	r7, r0
    fa6a:	4180      	sbcs	r0, r0
    fa6c:	1ae5      	subs	r5, r4, r3
    fa6e:	4240      	negs	r0, r0
    fa70:	1a2d      	subs	r5, r5, r0
    fa72:	0228      	lsls	r0, r5, #8
    fa74:	d400      	bmi.n	fa78 <__aeabi_dadd+0x254>
    fa76:	e089      	b.n	fb8c <__aeabi_dadd+0x368>
    fa78:	1bd7      	subs	r7, r2, r7
    fa7a:	42ba      	cmp	r2, r7
    fa7c:	4192      	sbcs	r2, r2
    fa7e:	1b1c      	subs	r4, r3, r4
    fa80:	4252      	negs	r2, r2
    fa82:	1aa5      	subs	r5, r4, r2
    fa84:	46d8      	mov	r8, fp
    fa86:	e729      	b.n	f8dc <__aeabi_dadd+0xb8>
    fa88:	4645      	mov	r5, r8
    fa8a:	2400      	movs	r4, #0
    fa8c:	2700      	movs	r7, #0
    fa8e:	e76a      	b.n	f966 <__aeabi_dadd+0x142>
    fa90:	4c45      	ldr	r4, [pc, #276]	; (fba8 <__aeabi_dadd+0x384>)
    fa92:	1af6      	subs	r6, r6, r3
    fa94:	402c      	ands	r4, r5
    fa96:	e749      	b.n	f92c <__aeabi_dadd+0x108>
    fa98:	003d      	movs	r5, r7
    fa9a:	3828      	subs	r0, #40	; 0x28
    fa9c:	4085      	lsls	r5, r0
    fa9e:	2700      	movs	r7, #0
    faa0:	e72e      	b.n	f900 <__aeabi_dadd+0xdc>
    faa2:	0038      	movs	r0, r7
    faa4:	f001 fc98 	bl	113d8 <__clzsi2>
    faa8:	3020      	adds	r0, #32
    faaa:	e71d      	b.n	f8e8 <__aeabi_dadd+0xc4>
    faac:	430a      	orrs	r2, r1
    faae:	1e51      	subs	r1, r2, #1
    fab0:	418a      	sbcs	r2, r1
    fab2:	2100      	movs	r1, #0
    fab4:	e707      	b.n	f8c6 <__aeabi_dadd+0xa2>
    fab6:	2b00      	cmp	r3, #0
    fab8:	d000      	beq.n	fabc <__aeabi_dadd+0x298>
    faba:	e0f3      	b.n	fca4 <__aeabi_dadd+0x480>
    fabc:	1c70      	adds	r0, r6, #1
    fabe:	0543      	lsls	r3, r0, #21
    fac0:	0d5b      	lsrs	r3, r3, #21
    fac2:	2b01      	cmp	r3, #1
    fac4:	dc00      	bgt.n	fac8 <__aeabi_dadd+0x2a4>
    fac6:	e0ad      	b.n	fc24 <__aeabi_dadd+0x400>
    fac8:	4b36      	ldr	r3, [pc, #216]	; (fba4 <__aeabi_dadd+0x380>)
    faca:	4298      	cmp	r0, r3
    facc:	d100      	bne.n	fad0 <__aeabi_dadd+0x2ac>
    face:	e0d1      	b.n	fc74 <__aeabi_dadd+0x450>
    fad0:	18ba      	adds	r2, r7, r2
    fad2:	42ba      	cmp	r2, r7
    fad4:	41bf      	sbcs	r7, r7
    fad6:	1864      	adds	r4, r4, r1
    fad8:	427f      	negs	r7, r7
    fada:	19e4      	adds	r4, r4, r7
    fadc:	07e7      	lsls	r7, r4, #31
    fade:	0852      	lsrs	r2, r2, #1
    fae0:	4317      	orrs	r7, r2
    fae2:	0864      	lsrs	r4, r4, #1
    fae4:	0006      	movs	r6, r0
    fae6:	e721      	b.n	f92c <__aeabi_dadd+0x108>
    fae8:	482e      	ldr	r0, [pc, #184]	; (fba4 <__aeabi_dadd+0x380>)
    faea:	4285      	cmp	r5, r0
    faec:	d100      	bne.n	faf0 <__aeabi_dadd+0x2cc>
    faee:	e093      	b.n	fc18 <__aeabi_dadd+0x3f4>
    faf0:	001d      	movs	r5, r3
    faf2:	e6d0      	b.n	f896 <__aeabi_dadd+0x72>
    faf4:	0029      	movs	r1, r5
    faf6:	3e1f      	subs	r6, #31
    faf8:	40f1      	lsrs	r1, r6
    fafa:	2b20      	cmp	r3, #32
    fafc:	d100      	bne.n	fb00 <__aeabi_dadd+0x2dc>
    fafe:	e08d      	b.n	fc1c <__aeabi_dadd+0x3f8>
    fb00:	2240      	movs	r2, #64	; 0x40
    fb02:	1ad3      	subs	r3, r2, r3
    fb04:	409d      	lsls	r5, r3
    fb06:	432f      	orrs	r7, r5
    fb08:	1e7d      	subs	r5, r7, #1
    fb0a:	41af      	sbcs	r7, r5
    fb0c:	2400      	movs	r4, #0
    fb0e:	430f      	orrs	r7, r1
    fb10:	2600      	movs	r6, #0
    fb12:	e744      	b.n	f99e <__aeabi_dadd+0x17a>
    fb14:	002b      	movs	r3, r5
    fb16:	0008      	movs	r0, r1
    fb18:	3b20      	subs	r3, #32
    fb1a:	40d8      	lsrs	r0, r3
    fb1c:	0003      	movs	r3, r0
    fb1e:	2d20      	cmp	r5, #32
    fb20:	d100      	bne.n	fb24 <__aeabi_dadd+0x300>
    fb22:	e07d      	b.n	fc20 <__aeabi_dadd+0x3fc>
    fb24:	2040      	movs	r0, #64	; 0x40
    fb26:	1b45      	subs	r5, r0, r5
    fb28:	40a9      	lsls	r1, r5
    fb2a:	430a      	orrs	r2, r1
    fb2c:	1e51      	subs	r1, r2, #1
    fb2e:	418a      	sbcs	r2, r1
    fb30:	2100      	movs	r1, #0
    fb32:	431a      	orrs	r2, r3
    fb34:	e6c7      	b.n	f8c6 <__aeabi_dadd+0xa2>
    fb36:	2e00      	cmp	r6, #0
    fb38:	d050      	beq.n	fbdc <__aeabi_dadd+0x3b8>
    fb3a:	4e1a      	ldr	r6, [pc, #104]	; (fba4 <__aeabi_dadd+0x380>)
    fb3c:	42b0      	cmp	r0, r6
    fb3e:	d057      	beq.n	fbf0 <__aeabi_dadd+0x3cc>
    fb40:	2680      	movs	r6, #128	; 0x80
    fb42:	426b      	negs	r3, r5
    fb44:	4699      	mov	r9, r3
    fb46:	0436      	lsls	r6, r6, #16
    fb48:	4334      	orrs	r4, r6
    fb4a:	464b      	mov	r3, r9
    fb4c:	2b38      	cmp	r3, #56	; 0x38
    fb4e:	dd00      	ble.n	fb52 <__aeabi_dadd+0x32e>
    fb50:	e0d6      	b.n	fd00 <__aeabi_dadd+0x4dc>
    fb52:	2b1f      	cmp	r3, #31
    fb54:	dd00      	ble.n	fb58 <__aeabi_dadd+0x334>
    fb56:	e135      	b.n	fdc4 <__aeabi_dadd+0x5a0>
    fb58:	2620      	movs	r6, #32
    fb5a:	1af5      	subs	r5, r6, r3
    fb5c:	0026      	movs	r6, r4
    fb5e:	40ae      	lsls	r6, r5
    fb60:	46b2      	mov	sl, r6
    fb62:	003e      	movs	r6, r7
    fb64:	40de      	lsrs	r6, r3
    fb66:	46ac      	mov	ip, r5
    fb68:	0035      	movs	r5, r6
    fb6a:	4656      	mov	r6, sl
    fb6c:	432e      	orrs	r6, r5
    fb6e:	4665      	mov	r5, ip
    fb70:	40af      	lsls	r7, r5
    fb72:	1e7d      	subs	r5, r7, #1
    fb74:	41af      	sbcs	r7, r5
    fb76:	40dc      	lsrs	r4, r3
    fb78:	4337      	orrs	r7, r6
    fb7a:	1bd7      	subs	r7, r2, r7
    fb7c:	42ba      	cmp	r2, r7
    fb7e:	4192      	sbcs	r2, r2
    fb80:	1b0c      	subs	r4, r1, r4
    fb82:	4252      	negs	r2, r2
    fb84:	1aa4      	subs	r4, r4, r2
    fb86:	0006      	movs	r6, r0
    fb88:	46d8      	mov	r8, fp
    fb8a:	e6a3      	b.n	f8d4 <__aeabi_dadd+0xb0>
    fb8c:	4664      	mov	r4, ip
    fb8e:	4667      	mov	r7, ip
    fb90:	432c      	orrs	r4, r5
    fb92:	d000      	beq.n	fb96 <__aeabi_dadd+0x372>
    fb94:	e6a2      	b.n	f8dc <__aeabi_dadd+0xb8>
    fb96:	2500      	movs	r5, #0
    fb98:	2600      	movs	r6, #0
    fb9a:	2700      	movs	r7, #0
    fb9c:	e706      	b.n	f9ac <__aeabi_dadd+0x188>
    fb9e:	001e      	movs	r6, r3
    fba0:	e6c4      	b.n	f92c <__aeabi_dadd+0x108>
    fba2:	46c0      	nop			; (mov r8, r8)
    fba4:	000007ff 	.word	0x000007ff
    fba8:	ff7fffff 	.word	0xff7fffff
    fbac:	800fffff 	.word	0x800fffff
    fbb0:	2b1f      	cmp	r3, #31
    fbb2:	dc63      	bgt.n	fc7c <__aeabi_dadd+0x458>
    fbb4:	2020      	movs	r0, #32
    fbb6:	1ac3      	subs	r3, r0, r3
    fbb8:	0008      	movs	r0, r1
    fbba:	4098      	lsls	r0, r3
    fbbc:	469c      	mov	ip, r3
    fbbe:	4683      	mov	fp, r0
    fbc0:	4653      	mov	r3, sl
    fbc2:	0010      	movs	r0, r2
    fbc4:	40d8      	lsrs	r0, r3
    fbc6:	0003      	movs	r3, r0
    fbc8:	4658      	mov	r0, fp
    fbca:	4318      	orrs	r0, r3
    fbcc:	4663      	mov	r3, ip
    fbce:	409a      	lsls	r2, r3
    fbd0:	1e53      	subs	r3, r2, #1
    fbd2:	419a      	sbcs	r2, r3
    fbd4:	4653      	mov	r3, sl
    fbd6:	4302      	orrs	r2, r0
    fbd8:	40d9      	lsrs	r1, r3
    fbda:	e703      	b.n	f9e4 <__aeabi_dadd+0x1c0>
    fbdc:	0026      	movs	r6, r4
    fbde:	433e      	orrs	r6, r7
    fbe0:	d006      	beq.n	fbf0 <__aeabi_dadd+0x3cc>
    fbe2:	43eb      	mvns	r3, r5
    fbe4:	4699      	mov	r9, r3
    fbe6:	2b00      	cmp	r3, #0
    fbe8:	d0c7      	beq.n	fb7a <__aeabi_dadd+0x356>
    fbea:	4e94      	ldr	r6, [pc, #592]	; (fe3c <__aeabi_dadd+0x618>)
    fbec:	42b0      	cmp	r0, r6
    fbee:	d1ac      	bne.n	fb4a <__aeabi_dadd+0x326>
    fbf0:	000c      	movs	r4, r1
    fbf2:	0017      	movs	r7, r2
    fbf4:	0006      	movs	r6, r0
    fbf6:	46d8      	mov	r8, fp
    fbf8:	e698      	b.n	f92c <__aeabi_dadd+0x108>
    fbfa:	4b90      	ldr	r3, [pc, #576]	; (fe3c <__aeabi_dadd+0x618>)
    fbfc:	459a      	cmp	sl, r3
    fbfe:	d00b      	beq.n	fc18 <__aeabi_dadd+0x3f4>
    fc00:	4682      	mov	sl, r0
    fc02:	e6e7      	b.n	f9d4 <__aeabi_dadd+0x1b0>
    fc04:	2800      	cmp	r0, #0
    fc06:	d000      	beq.n	fc0a <__aeabi_dadd+0x3e6>
    fc08:	e09e      	b.n	fd48 <__aeabi_dadd+0x524>
    fc0a:	0018      	movs	r0, r3
    fc0c:	4310      	orrs	r0, r2
    fc0e:	d100      	bne.n	fc12 <__aeabi_dadd+0x3ee>
    fc10:	e0e9      	b.n	fde6 <__aeabi_dadd+0x5c2>
    fc12:	001c      	movs	r4, r3
    fc14:	0017      	movs	r7, r2
    fc16:	46d8      	mov	r8, fp
    fc18:	4e88      	ldr	r6, [pc, #544]	; (fe3c <__aeabi_dadd+0x618>)
    fc1a:	e687      	b.n	f92c <__aeabi_dadd+0x108>
    fc1c:	2500      	movs	r5, #0
    fc1e:	e772      	b.n	fb06 <__aeabi_dadd+0x2e2>
    fc20:	2100      	movs	r1, #0
    fc22:	e782      	b.n	fb2a <__aeabi_dadd+0x306>
    fc24:	0023      	movs	r3, r4
    fc26:	433b      	orrs	r3, r7
    fc28:	2e00      	cmp	r6, #0
    fc2a:	d000      	beq.n	fc2e <__aeabi_dadd+0x40a>
    fc2c:	e0ab      	b.n	fd86 <__aeabi_dadd+0x562>
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d100      	bne.n	fc34 <__aeabi_dadd+0x410>
    fc32:	e0e7      	b.n	fe04 <__aeabi_dadd+0x5e0>
    fc34:	000b      	movs	r3, r1
    fc36:	4313      	orrs	r3, r2
    fc38:	d100      	bne.n	fc3c <__aeabi_dadd+0x418>
    fc3a:	e677      	b.n	f92c <__aeabi_dadd+0x108>
    fc3c:	18ba      	adds	r2, r7, r2
    fc3e:	42ba      	cmp	r2, r7
    fc40:	41bf      	sbcs	r7, r7
    fc42:	1864      	adds	r4, r4, r1
    fc44:	427f      	negs	r7, r7
    fc46:	19e4      	adds	r4, r4, r7
    fc48:	0223      	lsls	r3, r4, #8
    fc4a:	d400      	bmi.n	fc4e <__aeabi_dadd+0x42a>
    fc4c:	e0f2      	b.n	fe34 <__aeabi_dadd+0x610>
    fc4e:	4b7c      	ldr	r3, [pc, #496]	; (fe40 <__aeabi_dadd+0x61c>)
    fc50:	0017      	movs	r7, r2
    fc52:	401c      	ands	r4, r3
    fc54:	0006      	movs	r6, r0
    fc56:	e669      	b.n	f92c <__aeabi_dadd+0x108>
    fc58:	0020      	movs	r0, r4
    fc5a:	4338      	orrs	r0, r7
    fc5c:	2e00      	cmp	r6, #0
    fc5e:	d1d1      	bne.n	fc04 <__aeabi_dadd+0x3e0>
    fc60:	2800      	cmp	r0, #0
    fc62:	d15b      	bne.n	fd1c <__aeabi_dadd+0x4f8>
    fc64:	001c      	movs	r4, r3
    fc66:	4314      	orrs	r4, r2
    fc68:	d100      	bne.n	fc6c <__aeabi_dadd+0x448>
    fc6a:	e0a8      	b.n	fdbe <__aeabi_dadd+0x59a>
    fc6c:	001c      	movs	r4, r3
    fc6e:	0017      	movs	r7, r2
    fc70:	46d8      	mov	r8, fp
    fc72:	e65b      	b.n	f92c <__aeabi_dadd+0x108>
    fc74:	0006      	movs	r6, r0
    fc76:	2400      	movs	r4, #0
    fc78:	2700      	movs	r7, #0
    fc7a:	e697      	b.n	f9ac <__aeabi_dadd+0x188>
    fc7c:	4650      	mov	r0, sl
    fc7e:	000b      	movs	r3, r1
    fc80:	3820      	subs	r0, #32
    fc82:	40c3      	lsrs	r3, r0
    fc84:	4699      	mov	r9, r3
    fc86:	4653      	mov	r3, sl
    fc88:	2b20      	cmp	r3, #32
    fc8a:	d100      	bne.n	fc8e <__aeabi_dadd+0x46a>
    fc8c:	e095      	b.n	fdba <__aeabi_dadd+0x596>
    fc8e:	2340      	movs	r3, #64	; 0x40
    fc90:	4650      	mov	r0, sl
    fc92:	1a1b      	subs	r3, r3, r0
    fc94:	4099      	lsls	r1, r3
    fc96:	430a      	orrs	r2, r1
    fc98:	1e51      	subs	r1, r2, #1
    fc9a:	418a      	sbcs	r2, r1
    fc9c:	464b      	mov	r3, r9
    fc9e:	2100      	movs	r1, #0
    fca0:	431a      	orrs	r2, r3
    fca2:	e69f      	b.n	f9e4 <__aeabi_dadd+0x1c0>
    fca4:	2e00      	cmp	r6, #0
    fca6:	d130      	bne.n	fd0a <__aeabi_dadd+0x4e6>
    fca8:	0026      	movs	r6, r4
    fcaa:	433e      	orrs	r6, r7
    fcac:	d067      	beq.n	fd7e <__aeabi_dadd+0x55a>
    fcae:	43db      	mvns	r3, r3
    fcb0:	469a      	mov	sl, r3
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	d01c      	beq.n	fcf0 <__aeabi_dadd+0x4cc>
    fcb6:	4e61      	ldr	r6, [pc, #388]	; (fe3c <__aeabi_dadd+0x618>)
    fcb8:	42b0      	cmp	r0, r6
    fcba:	d060      	beq.n	fd7e <__aeabi_dadd+0x55a>
    fcbc:	4653      	mov	r3, sl
    fcbe:	2b38      	cmp	r3, #56	; 0x38
    fcc0:	dd00      	ble.n	fcc4 <__aeabi_dadd+0x4a0>
    fcc2:	e096      	b.n	fdf2 <__aeabi_dadd+0x5ce>
    fcc4:	2b1f      	cmp	r3, #31
    fcc6:	dd00      	ble.n	fcca <__aeabi_dadd+0x4a6>
    fcc8:	e09f      	b.n	fe0a <__aeabi_dadd+0x5e6>
    fcca:	2620      	movs	r6, #32
    fccc:	1af3      	subs	r3, r6, r3
    fcce:	0026      	movs	r6, r4
    fcd0:	409e      	lsls	r6, r3
    fcd2:	469c      	mov	ip, r3
    fcd4:	46b3      	mov	fp, r6
    fcd6:	4653      	mov	r3, sl
    fcd8:	003e      	movs	r6, r7
    fcda:	40de      	lsrs	r6, r3
    fcdc:	0033      	movs	r3, r6
    fcde:	465e      	mov	r6, fp
    fce0:	431e      	orrs	r6, r3
    fce2:	4663      	mov	r3, ip
    fce4:	409f      	lsls	r7, r3
    fce6:	1e7b      	subs	r3, r7, #1
    fce8:	419f      	sbcs	r7, r3
    fcea:	4653      	mov	r3, sl
    fcec:	40dc      	lsrs	r4, r3
    fcee:	4337      	orrs	r7, r6
    fcf0:	18bf      	adds	r7, r7, r2
    fcf2:	4297      	cmp	r7, r2
    fcf4:	4192      	sbcs	r2, r2
    fcf6:	1864      	adds	r4, r4, r1
    fcf8:	4252      	negs	r2, r2
    fcfa:	18a4      	adds	r4, r4, r2
    fcfc:	0006      	movs	r6, r0
    fcfe:	e678      	b.n	f9f2 <__aeabi_dadd+0x1ce>
    fd00:	4327      	orrs	r7, r4
    fd02:	1e7c      	subs	r4, r7, #1
    fd04:	41a7      	sbcs	r7, r4
    fd06:	2400      	movs	r4, #0
    fd08:	e737      	b.n	fb7a <__aeabi_dadd+0x356>
    fd0a:	4e4c      	ldr	r6, [pc, #304]	; (fe3c <__aeabi_dadd+0x618>)
    fd0c:	42b0      	cmp	r0, r6
    fd0e:	d036      	beq.n	fd7e <__aeabi_dadd+0x55a>
    fd10:	2680      	movs	r6, #128	; 0x80
    fd12:	425b      	negs	r3, r3
    fd14:	0436      	lsls	r6, r6, #16
    fd16:	469a      	mov	sl, r3
    fd18:	4334      	orrs	r4, r6
    fd1a:	e7cf      	b.n	fcbc <__aeabi_dadd+0x498>
    fd1c:	0018      	movs	r0, r3
    fd1e:	4310      	orrs	r0, r2
    fd20:	d100      	bne.n	fd24 <__aeabi_dadd+0x500>
    fd22:	e603      	b.n	f92c <__aeabi_dadd+0x108>
    fd24:	1ab8      	subs	r0, r7, r2
    fd26:	4684      	mov	ip, r0
    fd28:	4567      	cmp	r7, ip
    fd2a:	41ad      	sbcs	r5, r5
    fd2c:	1ae0      	subs	r0, r4, r3
    fd2e:	426d      	negs	r5, r5
    fd30:	1b40      	subs	r0, r0, r5
    fd32:	0205      	lsls	r5, r0, #8
    fd34:	d400      	bmi.n	fd38 <__aeabi_dadd+0x514>
    fd36:	e62c      	b.n	f992 <__aeabi_dadd+0x16e>
    fd38:	1bd7      	subs	r7, r2, r7
    fd3a:	42ba      	cmp	r2, r7
    fd3c:	4192      	sbcs	r2, r2
    fd3e:	1b1c      	subs	r4, r3, r4
    fd40:	4252      	negs	r2, r2
    fd42:	1aa4      	subs	r4, r4, r2
    fd44:	46d8      	mov	r8, fp
    fd46:	e5f1      	b.n	f92c <__aeabi_dadd+0x108>
    fd48:	0018      	movs	r0, r3
    fd4a:	4310      	orrs	r0, r2
    fd4c:	d100      	bne.n	fd50 <__aeabi_dadd+0x52c>
    fd4e:	e763      	b.n	fc18 <__aeabi_dadd+0x3f4>
    fd50:	08f8      	lsrs	r0, r7, #3
    fd52:	0767      	lsls	r7, r4, #29
    fd54:	4307      	orrs	r7, r0
    fd56:	2080      	movs	r0, #128	; 0x80
    fd58:	08e4      	lsrs	r4, r4, #3
    fd5a:	0300      	lsls	r0, r0, #12
    fd5c:	4204      	tst	r4, r0
    fd5e:	d008      	beq.n	fd72 <__aeabi_dadd+0x54e>
    fd60:	08dd      	lsrs	r5, r3, #3
    fd62:	4205      	tst	r5, r0
    fd64:	d105      	bne.n	fd72 <__aeabi_dadd+0x54e>
    fd66:	08d2      	lsrs	r2, r2, #3
    fd68:	0759      	lsls	r1, r3, #29
    fd6a:	4311      	orrs	r1, r2
    fd6c:	000f      	movs	r7, r1
    fd6e:	002c      	movs	r4, r5
    fd70:	46d8      	mov	r8, fp
    fd72:	0f7b      	lsrs	r3, r7, #29
    fd74:	00e4      	lsls	r4, r4, #3
    fd76:	431c      	orrs	r4, r3
    fd78:	00ff      	lsls	r7, r7, #3
    fd7a:	4e30      	ldr	r6, [pc, #192]	; (fe3c <__aeabi_dadd+0x618>)
    fd7c:	e5d6      	b.n	f92c <__aeabi_dadd+0x108>
    fd7e:	000c      	movs	r4, r1
    fd80:	0017      	movs	r7, r2
    fd82:	0006      	movs	r6, r0
    fd84:	e5d2      	b.n	f92c <__aeabi_dadd+0x108>
    fd86:	2b00      	cmp	r3, #0
    fd88:	d038      	beq.n	fdfc <__aeabi_dadd+0x5d8>
    fd8a:	000b      	movs	r3, r1
    fd8c:	4313      	orrs	r3, r2
    fd8e:	d100      	bne.n	fd92 <__aeabi_dadd+0x56e>
    fd90:	e742      	b.n	fc18 <__aeabi_dadd+0x3f4>
    fd92:	08f8      	lsrs	r0, r7, #3
    fd94:	0767      	lsls	r7, r4, #29
    fd96:	4307      	orrs	r7, r0
    fd98:	2080      	movs	r0, #128	; 0x80
    fd9a:	08e4      	lsrs	r4, r4, #3
    fd9c:	0300      	lsls	r0, r0, #12
    fd9e:	4204      	tst	r4, r0
    fda0:	d0e7      	beq.n	fd72 <__aeabi_dadd+0x54e>
    fda2:	08cb      	lsrs	r3, r1, #3
    fda4:	4203      	tst	r3, r0
    fda6:	d1e4      	bne.n	fd72 <__aeabi_dadd+0x54e>
    fda8:	08d2      	lsrs	r2, r2, #3
    fdaa:	0749      	lsls	r1, r1, #29
    fdac:	4311      	orrs	r1, r2
    fdae:	000f      	movs	r7, r1
    fdb0:	001c      	movs	r4, r3
    fdb2:	e7de      	b.n	fd72 <__aeabi_dadd+0x54e>
    fdb4:	2700      	movs	r7, #0
    fdb6:	2400      	movs	r4, #0
    fdb8:	e5d5      	b.n	f966 <__aeabi_dadd+0x142>
    fdba:	2100      	movs	r1, #0
    fdbc:	e76b      	b.n	fc96 <__aeabi_dadd+0x472>
    fdbe:	2500      	movs	r5, #0
    fdc0:	2700      	movs	r7, #0
    fdc2:	e5f3      	b.n	f9ac <__aeabi_dadd+0x188>
    fdc4:	464e      	mov	r6, r9
    fdc6:	0025      	movs	r5, r4
    fdc8:	3e20      	subs	r6, #32
    fdca:	40f5      	lsrs	r5, r6
    fdcc:	464b      	mov	r3, r9
    fdce:	002e      	movs	r6, r5
    fdd0:	2b20      	cmp	r3, #32
    fdd2:	d02d      	beq.n	fe30 <__aeabi_dadd+0x60c>
    fdd4:	2540      	movs	r5, #64	; 0x40
    fdd6:	1aed      	subs	r5, r5, r3
    fdd8:	40ac      	lsls	r4, r5
    fdda:	4327      	orrs	r7, r4
    fddc:	1e7c      	subs	r4, r7, #1
    fdde:	41a7      	sbcs	r7, r4
    fde0:	2400      	movs	r4, #0
    fde2:	4337      	orrs	r7, r6
    fde4:	e6c9      	b.n	fb7a <__aeabi_dadd+0x356>
    fde6:	2480      	movs	r4, #128	; 0x80
    fde8:	2500      	movs	r5, #0
    fdea:	0324      	lsls	r4, r4, #12
    fdec:	4e13      	ldr	r6, [pc, #76]	; (fe3c <__aeabi_dadd+0x618>)
    fdee:	2700      	movs	r7, #0
    fdf0:	e5dc      	b.n	f9ac <__aeabi_dadd+0x188>
    fdf2:	4327      	orrs	r7, r4
    fdf4:	1e7c      	subs	r4, r7, #1
    fdf6:	41a7      	sbcs	r7, r4
    fdf8:	2400      	movs	r4, #0
    fdfa:	e779      	b.n	fcf0 <__aeabi_dadd+0x4cc>
    fdfc:	000c      	movs	r4, r1
    fdfe:	0017      	movs	r7, r2
    fe00:	4e0e      	ldr	r6, [pc, #56]	; (fe3c <__aeabi_dadd+0x618>)
    fe02:	e593      	b.n	f92c <__aeabi_dadd+0x108>
    fe04:	000c      	movs	r4, r1
    fe06:	0017      	movs	r7, r2
    fe08:	e590      	b.n	f92c <__aeabi_dadd+0x108>
    fe0a:	4656      	mov	r6, sl
    fe0c:	0023      	movs	r3, r4
    fe0e:	3e20      	subs	r6, #32
    fe10:	40f3      	lsrs	r3, r6
    fe12:	4699      	mov	r9, r3
    fe14:	4653      	mov	r3, sl
    fe16:	2b20      	cmp	r3, #32
    fe18:	d00e      	beq.n	fe38 <__aeabi_dadd+0x614>
    fe1a:	2340      	movs	r3, #64	; 0x40
    fe1c:	4656      	mov	r6, sl
    fe1e:	1b9b      	subs	r3, r3, r6
    fe20:	409c      	lsls	r4, r3
    fe22:	4327      	orrs	r7, r4
    fe24:	1e7c      	subs	r4, r7, #1
    fe26:	41a7      	sbcs	r7, r4
    fe28:	464b      	mov	r3, r9
    fe2a:	2400      	movs	r4, #0
    fe2c:	431f      	orrs	r7, r3
    fe2e:	e75f      	b.n	fcf0 <__aeabi_dadd+0x4cc>
    fe30:	2400      	movs	r4, #0
    fe32:	e7d2      	b.n	fdda <__aeabi_dadd+0x5b6>
    fe34:	0017      	movs	r7, r2
    fe36:	e5b2      	b.n	f99e <__aeabi_dadd+0x17a>
    fe38:	2400      	movs	r4, #0
    fe3a:	e7f2      	b.n	fe22 <__aeabi_dadd+0x5fe>
    fe3c:	000007ff 	.word	0x000007ff
    fe40:	ff7fffff 	.word	0xff7fffff

0000fe44 <__aeabi_ddiv>:
    fe44:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe46:	4657      	mov	r7, sl
    fe48:	4645      	mov	r5, r8
    fe4a:	46de      	mov	lr, fp
    fe4c:	464e      	mov	r6, r9
    fe4e:	b5e0      	push	{r5, r6, r7, lr}
    fe50:	004c      	lsls	r4, r1, #1
    fe52:	030e      	lsls	r6, r1, #12
    fe54:	b087      	sub	sp, #28
    fe56:	4683      	mov	fp, r0
    fe58:	4692      	mov	sl, r2
    fe5a:	001d      	movs	r5, r3
    fe5c:	4680      	mov	r8, r0
    fe5e:	0b36      	lsrs	r6, r6, #12
    fe60:	0d64      	lsrs	r4, r4, #21
    fe62:	0fcf      	lsrs	r7, r1, #31
    fe64:	2c00      	cmp	r4, #0
    fe66:	d04f      	beq.n	ff08 <__aeabi_ddiv+0xc4>
    fe68:	4b6f      	ldr	r3, [pc, #444]	; (10028 <__aeabi_ddiv+0x1e4>)
    fe6a:	429c      	cmp	r4, r3
    fe6c:	d035      	beq.n	feda <__aeabi_ddiv+0x96>
    fe6e:	2380      	movs	r3, #128	; 0x80
    fe70:	0f42      	lsrs	r2, r0, #29
    fe72:	041b      	lsls	r3, r3, #16
    fe74:	00f6      	lsls	r6, r6, #3
    fe76:	4313      	orrs	r3, r2
    fe78:	4333      	orrs	r3, r6
    fe7a:	4699      	mov	r9, r3
    fe7c:	00c3      	lsls	r3, r0, #3
    fe7e:	4698      	mov	r8, r3
    fe80:	4b6a      	ldr	r3, [pc, #424]	; (1002c <__aeabi_ddiv+0x1e8>)
    fe82:	2600      	movs	r6, #0
    fe84:	469c      	mov	ip, r3
    fe86:	2300      	movs	r3, #0
    fe88:	4464      	add	r4, ip
    fe8a:	9303      	str	r3, [sp, #12]
    fe8c:	032b      	lsls	r3, r5, #12
    fe8e:	0b1b      	lsrs	r3, r3, #12
    fe90:	469b      	mov	fp, r3
    fe92:	006b      	lsls	r3, r5, #1
    fe94:	0fed      	lsrs	r5, r5, #31
    fe96:	4650      	mov	r0, sl
    fe98:	0d5b      	lsrs	r3, r3, #21
    fe9a:	9501      	str	r5, [sp, #4]
    fe9c:	d05e      	beq.n	ff5c <__aeabi_ddiv+0x118>
    fe9e:	4a62      	ldr	r2, [pc, #392]	; (10028 <__aeabi_ddiv+0x1e4>)
    fea0:	4293      	cmp	r3, r2
    fea2:	d053      	beq.n	ff4c <__aeabi_ddiv+0x108>
    fea4:	465a      	mov	r2, fp
    fea6:	00d1      	lsls	r1, r2, #3
    fea8:	2280      	movs	r2, #128	; 0x80
    feaa:	0f40      	lsrs	r0, r0, #29
    feac:	0412      	lsls	r2, r2, #16
    feae:	4302      	orrs	r2, r0
    feb0:	430a      	orrs	r2, r1
    feb2:	4693      	mov	fp, r2
    feb4:	4652      	mov	r2, sl
    feb6:	00d1      	lsls	r1, r2, #3
    feb8:	4a5c      	ldr	r2, [pc, #368]	; (1002c <__aeabi_ddiv+0x1e8>)
    feba:	4694      	mov	ip, r2
    febc:	2200      	movs	r2, #0
    febe:	4463      	add	r3, ip
    fec0:	0038      	movs	r0, r7
    fec2:	4068      	eors	r0, r5
    fec4:	4684      	mov	ip, r0
    fec6:	9002      	str	r0, [sp, #8]
    fec8:	1ae4      	subs	r4, r4, r3
    feca:	4316      	orrs	r6, r2
    fecc:	2e0f      	cmp	r6, #15
    fece:	d900      	bls.n	fed2 <__aeabi_ddiv+0x8e>
    fed0:	e0b4      	b.n	1003c <__aeabi_ddiv+0x1f8>
    fed2:	4b57      	ldr	r3, [pc, #348]	; (10030 <__aeabi_ddiv+0x1ec>)
    fed4:	00b6      	lsls	r6, r6, #2
    fed6:	599b      	ldr	r3, [r3, r6]
    fed8:	469f      	mov	pc, r3
    feda:	0003      	movs	r3, r0
    fedc:	4333      	orrs	r3, r6
    fede:	4699      	mov	r9, r3
    fee0:	d16c      	bne.n	ffbc <__aeabi_ddiv+0x178>
    fee2:	2300      	movs	r3, #0
    fee4:	4698      	mov	r8, r3
    fee6:	3302      	adds	r3, #2
    fee8:	2608      	movs	r6, #8
    feea:	9303      	str	r3, [sp, #12]
    feec:	e7ce      	b.n	fe8c <__aeabi_ddiv+0x48>
    feee:	46cb      	mov	fp, r9
    fef0:	4641      	mov	r1, r8
    fef2:	9a03      	ldr	r2, [sp, #12]
    fef4:	9701      	str	r7, [sp, #4]
    fef6:	2a02      	cmp	r2, #2
    fef8:	d165      	bne.n	ffc6 <__aeabi_ddiv+0x182>
    fefa:	9b01      	ldr	r3, [sp, #4]
    fefc:	4c4a      	ldr	r4, [pc, #296]	; (10028 <__aeabi_ddiv+0x1e4>)
    fefe:	469c      	mov	ip, r3
    ff00:	2300      	movs	r3, #0
    ff02:	2200      	movs	r2, #0
    ff04:	4698      	mov	r8, r3
    ff06:	e06b      	b.n	ffe0 <__aeabi_ddiv+0x19c>
    ff08:	0003      	movs	r3, r0
    ff0a:	4333      	orrs	r3, r6
    ff0c:	4699      	mov	r9, r3
    ff0e:	d04e      	beq.n	ffae <__aeabi_ddiv+0x16a>
    ff10:	2e00      	cmp	r6, #0
    ff12:	d100      	bne.n	ff16 <__aeabi_ddiv+0xd2>
    ff14:	e1bc      	b.n	10290 <__aeabi_ddiv+0x44c>
    ff16:	0030      	movs	r0, r6
    ff18:	f001 fa5e 	bl	113d8 <__clzsi2>
    ff1c:	0003      	movs	r3, r0
    ff1e:	3b0b      	subs	r3, #11
    ff20:	2b1c      	cmp	r3, #28
    ff22:	dd00      	ble.n	ff26 <__aeabi_ddiv+0xe2>
    ff24:	e1ac      	b.n	10280 <__aeabi_ddiv+0x43c>
    ff26:	221d      	movs	r2, #29
    ff28:	1ad3      	subs	r3, r2, r3
    ff2a:	465a      	mov	r2, fp
    ff2c:	0001      	movs	r1, r0
    ff2e:	40da      	lsrs	r2, r3
    ff30:	3908      	subs	r1, #8
    ff32:	408e      	lsls	r6, r1
    ff34:	0013      	movs	r3, r2
    ff36:	4333      	orrs	r3, r6
    ff38:	4699      	mov	r9, r3
    ff3a:	465b      	mov	r3, fp
    ff3c:	408b      	lsls	r3, r1
    ff3e:	4698      	mov	r8, r3
    ff40:	2300      	movs	r3, #0
    ff42:	4c3c      	ldr	r4, [pc, #240]	; (10034 <__aeabi_ddiv+0x1f0>)
    ff44:	2600      	movs	r6, #0
    ff46:	1a24      	subs	r4, r4, r0
    ff48:	9303      	str	r3, [sp, #12]
    ff4a:	e79f      	b.n	fe8c <__aeabi_ddiv+0x48>
    ff4c:	4651      	mov	r1, sl
    ff4e:	465a      	mov	r2, fp
    ff50:	4311      	orrs	r1, r2
    ff52:	d129      	bne.n	ffa8 <__aeabi_ddiv+0x164>
    ff54:	2200      	movs	r2, #0
    ff56:	4693      	mov	fp, r2
    ff58:	3202      	adds	r2, #2
    ff5a:	e7b1      	b.n	fec0 <__aeabi_ddiv+0x7c>
    ff5c:	4659      	mov	r1, fp
    ff5e:	4301      	orrs	r1, r0
    ff60:	d01e      	beq.n	ffa0 <__aeabi_ddiv+0x15c>
    ff62:	465b      	mov	r3, fp
    ff64:	2b00      	cmp	r3, #0
    ff66:	d100      	bne.n	ff6a <__aeabi_ddiv+0x126>
    ff68:	e19e      	b.n	102a8 <__aeabi_ddiv+0x464>
    ff6a:	4658      	mov	r0, fp
    ff6c:	f001 fa34 	bl	113d8 <__clzsi2>
    ff70:	0003      	movs	r3, r0
    ff72:	3b0b      	subs	r3, #11
    ff74:	2b1c      	cmp	r3, #28
    ff76:	dd00      	ble.n	ff7a <__aeabi_ddiv+0x136>
    ff78:	e18f      	b.n	1029a <__aeabi_ddiv+0x456>
    ff7a:	0002      	movs	r2, r0
    ff7c:	4659      	mov	r1, fp
    ff7e:	3a08      	subs	r2, #8
    ff80:	4091      	lsls	r1, r2
    ff82:	468b      	mov	fp, r1
    ff84:	211d      	movs	r1, #29
    ff86:	1acb      	subs	r3, r1, r3
    ff88:	4651      	mov	r1, sl
    ff8a:	40d9      	lsrs	r1, r3
    ff8c:	000b      	movs	r3, r1
    ff8e:	4659      	mov	r1, fp
    ff90:	430b      	orrs	r3, r1
    ff92:	4651      	mov	r1, sl
    ff94:	469b      	mov	fp, r3
    ff96:	4091      	lsls	r1, r2
    ff98:	4b26      	ldr	r3, [pc, #152]	; (10034 <__aeabi_ddiv+0x1f0>)
    ff9a:	2200      	movs	r2, #0
    ff9c:	1a1b      	subs	r3, r3, r0
    ff9e:	e78f      	b.n	fec0 <__aeabi_ddiv+0x7c>
    ffa0:	2300      	movs	r3, #0
    ffa2:	2201      	movs	r2, #1
    ffa4:	469b      	mov	fp, r3
    ffa6:	e78b      	b.n	fec0 <__aeabi_ddiv+0x7c>
    ffa8:	4651      	mov	r1, sl
    ffaa:	2203      	movs	r2, #3
    ffac:	e788      	b.n	fec0 <__aeabi_ddiv+0x7c>
    ffae:	2300      	movs	r3, #0
    ffb0:	4698      	mov	r8, r3
    ffb2:	3301      	adds	r3, #1
    ffb4:	2604      	movs	r6, #4
    ffb6:	2400      	movs	r4, #0
    ffb8:	9303      	str	r3, [sp, #12]
    ffba:	e767      	b.n	fe8c <__aeabi_ddiv+0x48>
    ffbc:	2303      	movs	r3, #3
    ffbe:	46b1      	mov	r9, r6
    ffc0:	9303      	str	r3, [sp, #12]
    ffc2:	260c      	movs	r6, #12
    ffc4:	e762      	b.n	fe8c <__aeabi_ddiv+0x48>
    ffc6:	2a03      	cmp	r2, #3
    ffc8:	d100      	bne.n	ffcc <__aeabi_ddiv+0x188>
    ffca:	e25c      	b.n	10486 <__aeabi_ddiv+0x642>
    ffcc:	9b01      	ldr	r3, [sp, #4]
    ffce:	2a01      	cmp	r2, #1
    ffd0:	d000      	beq.n	ffd4 <__aeabi_ddiv+0x190>
    ffd2:	e1e4      	b.n	1039e <__aeabi_ddiv+0x55a>
    ffd4:	4013      	ands	r3, r2
    ffd6:	469c      	mov	ip, r3
    ffd8:	2300      	movs	r3, #0
    ffda:	2400      	movs	r4, #0
    ffdc:	2200      	movs	r2, #0
    ffde:	4698      	mov	r8, r3
    ffe0:	2100      	movs	r1, #0
    ffe2:	0312      	lsls	r2, r2, #12
    ffe4:	0b13      	lsrs	r3, r2, #12
    ffe6:	0d0a      	lsrs	r2, r1, #20
    ffe8:	0512      	lsls	r2, r2, #20
    ffea:	431a      	orrs	r2, r3
    ffec:	0523      	lsls	r3, r4, #20
    ffee:	4c12      	ldr	r4, [pc, #72]	; (10038 <__aeabi_ddiv+0x1f4>)
    fff0:	4640      	mov	r0, r8
    fff2:	4022      	ands	r2, r4
    fff4:	4313      	orrs	r3, r2
    fff6:	4662      	mov	r2, ip
    fff8:	005b      	lsls	r3, r3, #1
    fffa:	07d2      	lsls	r2, r2, #31
    fffc:	085b      	lsrs	r3, r3, #1
    fffe:	4313      	orrs	r3, r2
   10000:	0019      	movs	r1, r3
   10002:	b007      	add	sp, #28
   10004:	bc3c      	pop	{r2, r3, r4, r5}
   10006:	4690      	mov	r8, r2
   10008:	4699      	mov	r9, r3
   1000a:	46a2      	mov	sl, r4
   1000c:	46ab      	mov	fp, r5
   1000e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10010:	2300      	movs	r3, #0
   10012:	2280      	movs	r2, #128	; 0x80
   10014:	469c      	mov	ip, r3
   10016:	0312      	lsls	r2, r2, #12
   10018:	4698      	mov	r8, r3
   1001a:	4c03      	ldr	r4, [pc, #12]	; (10028 <__aeabi_ddiv+0x1e4>)
   1001c:	e7e0      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   1001e:	2300      	movs	r3, #0
   10020:	4c01      	ldr	r4, [pc, #4]	; (10028 <__aeabi_ddiv+0x1e4>)
   10022:	2200      	movs	r2, #0
   10024:	4698      	mov	r8, r3
   10026:	e7db      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   10028:	000007ff 	.word	0x000007ff
   1002c:	fffffc01 	.word	0xfffffc01
   10030:	00017720 	.word	0x00017720
   10034:	fffffc0d 	.word	0xfffffc0d
   10038:	800fffff 	.word	0x800fffff
   1003c:	45d9      	cmp	r9, fp
   1003e:	d900      	bls.n	10042 <__aeabi_ddiv+0x1fe>
   10040:	e139      	b.n	102b6 <__aeabi_ddiv+0x472>
   10042:	d100      	bne.n	10046 <__aeabi_ddiv+0x202>
   10044:	e134      	b.n	102b0 <__aeabi_ddiv+0x46c>
   10046:	2300      	movs	r3, #0
   10048:	4646      	mov	r6, r8
   1004a:	464d      	mov	r5, r9
   1004c:	469a      	mov	sl, r3
   1004e:	3c01      	subs	r4, #1
   10050:	465b      	mov	r3, fp
   10052:	0e0a      	lsrs	r2, r1, #24
   10054:	021b      	lsls	r3, r3, #8
   10056:	431a      	orrs	r2, r3
   10058:	020b      	lsls	r3, r1, #8
   1005a:	0c17      	lsrs	r7, r2, #16
   1005c:	9303      	str	r3, [sp, #12]
   1005e:	0413      	lsls	r3, r2, #16
   10060:	0c1b      	lsrs	r3, r3, #16
   10062:	0039      	movs	r1, r7
   10064:	0028      	movs	r0, r5
   10066:	4690      	mov	r8, r2
   10068:	9301      	str	r3, [sp, #4]
   1006a:	f7fe f999 	bl	e3a0 <__udivsi3>
   1006e:	0002      	movs	r2, r0
   10070:	9b01      	ldr	r3, [sp, #4]
   10072:	4683      	mov	fp, r0
   10074:	435a      	muls	r2, r3
   10076:	0028      	movs	r0, r5
   10078:	0039      	movs	r1, r7
   1007a:	4691      	mov	r9, r2
   1007c:	f7fe fa16 	bl	e4ac <__aeabi_uidivmod>
   10080:	0c35      	lsrs	r5, r6, #16
   10082:	0409      	lsls	r1, r1, #16
   10084:	430d      	orrs	r5, r1
   10086:	45a9      	cmp	r9, r5
   10088:	d90d      	bls.n	100a6 <__aeabi_ddiv+0x262>
   1008a:	465b      	mov	r3, fp
   1008c:	4445      	add	r5, r8
   1008e:	3b01      	subs	r3, #1
   10090:	45a8      	cmp	r8, r5
   10092:	d900      	bls.n	10096 <__aeabi_ddiv+0x252>
   10094:	e13a      	b.n	1030c <__aeabi_ddiv+0x4c8>
   10096:	45a9      	cmp	r9, r5
   10098:	d800      	bhi.n	1009c <__aeabi_ddiv+0x258>
   1009a:	e137      	b.n	1030c <__aeabi_ddiv+0x4c8>
   1009c:	2302      	movs	r3, #2
   1009e:	425b      	negs	r3, r3
   100a0:	469c      	mov	ip, r3
   100a2:	4445      	add	r5, r8
   100a4:	44e3      	add	fp, ip
   100a6:	464b      	mov	r3, r9
   100a8:	1aeb      	subs	r3, r5, r3
   100aa:	0039      	movs	r1, r7
   100ac:	0018      	movs	r0, r3
   100ae:	9304      	str	r3, [sp, #16]
   100b0:	f7fe f976 	bl	e3a0 <__udivsi3>
   100b4:	9b01      	ldr	r3, [sp, #4]
   100b6:	0005      	movs	r5, r0
   100b8:	4343      	muls	r3, r0
   100ba:	0039      	movs	r1, r7
   100bc:	9804      	ldr	r0, [sp, #16]
   100be:	4699      	mov	r9, r3
   100c0:	f7fe f9f4 	bl	e4ac <__aeabi_uidivmod>
   100c4:	0433      	lsls	r3, r6, #16
   100c6:	0409      	lsls	r1, r1, #16
   100c8:	0c1b      	lsrs	r3, r3, #16
   100ca:	430b      	orrs	r3, r1
   100cc:	4599      	cmp	r9, r3
   100ce:	d909      	bls.n	100e4 <__aeabi_ddiv+0x2a0>
   100d0:	4443      	add	r3, r8
   100d2:	1e6a      	subs	r2, r5, #1
   100d4:	4598      	cmp	r8, r3
   100d6:	d900      	bls.n	100da <__aeabi_ddiv+0x296>
   100d8:	e11a      	b.n	10310 <__aeabi_ddiv+0x4cc>
   100da:	4599      	cmp	r9, r3
   100dc:	d800      	bhi.n	100e0 <__aeabi_ddiv+0x29c>
   100de:	e117      	b.n	10310 <__aeabi_ddiv+0x4cc>
   100e0:	3d02      	subs	r5, #2
   100e2:	4443      	add	r3, r8
   100e4:	464a      	mov	r2, r9
   100e6:	1a9b      	subs	r3, r3, r2
   100e8:	465a      	mov	r2, fp
   100ea:	0412      	lsls	r2, r2, #16
   100ec:	432a      	orrs	r2, r5
   100ee:	9903      	ldr	r1, [sp, #12]
   100f0:	4693      	mov	fp, r2
   100f2:	0c10      	lsrs	r0, r2, #16
   100f4:	0c0a      	lsrs	r2, r1, #16
   100f6:	4691      	mov	r9, r2
   100f8:	0409      	lsls	r1, r1, #16
   100fa:	465a      	mov	r2, fp
   100fc:	0c09      	lsrs	r1, r1, #16
   100fe:	464e      	mov	r6, r9
   10100:	000d      	movs	r5, r1
   10102:	0412      	lsls	r2, r2, #16
   10104:	0c12      	lsrs	r2, r2, #16
   10106:	4345      	muls	r5, r0
   10108:	9105      	str	r1, [sp, #20]
   1010a:	4351      	muls	r1, r2
   1010c:	4372      	muls	r2, r6
   1010e:	4370      	muls	r0, r6
   10110:	1952      	adds	r2, r2, r5
   10112:	0c0e      	lsrs	r6, r1, #16
   10114:	18b2      	adds	r2, r6, r2
   10116:	4295      	cmp	r5, r2
   10118:	d903      	bls.n	10122 <__aeabi_ddiv+0x2de>
   1011a:	2580      	movs	r5, #128	; 0x80
   1011c:	026d      	lsls	r5, r5, #9
   1011e:	46ac      	mov	ip, r5
   10120:	4460      	add	r0, ip
   10122:	0c15      	lsrs	r5, r2, #16
   10124:	0409      	lsls	r1, r1, #16
   10126:	0412      	lsls	r2, r2, #16
   10128:	0c09      	lsrs	r1, r1, #16
   1012a:	1828      	adds	r0, r5, r0
   1012c:	1852      	adds	r2, r2, r1
   1012e:	4283      	cmp	r3, r0
   10130:	d200      	bcs.n	10134 <__aeabi_ddiv+0x2f0>
   10132:	e0ce      	b.n	102d2 <__aeabi_ddiv+0x48e>
   10134:	d100      	bne.n	10138 <__aeabi_ddiv+0x2f4>
   10136:	e0c8      	b.n	102ca <__aeabi_ddiv+0x486>
   10138:	1a1d      	subs	r5, r3, r0
   1013a:	4653      	mov	r3, sl
   1013c:	1a9e      	subs	r6, r3, r2
   1013e:	45b2      	cmp	sl, r6
   10140:	4192      	sbcs	r2, r2
   10142:	4252      	negs	r2, r2
   10144:	1aab      	subs	r3, r5, r2
   10146:	469a      	mov	sl, r3
   10148:	4598      	cmp	r8, r3
   1014a:	d100      	bne.n	1014e <__aeabi_ddiv+0x30a>
   1014c:	e117      	b.n	1037e <__aeabi_ddiv+0x53a>
   1014e:	0039      	movs	r1, r7
   10150:	0018      	movs	r0, r3
   10152:	f7fe f925 	bl	e3a0 <__udivsi3>
   10156:	9b01      	ldr	r3, [sp, #4]
   10158:	0005      	movs	r5, r0
   1015a:	4343      	muls	r3, r0
   1015c:	0039      	movs	r1, r7
   1015e:	4650      	mov	r0, sl
   10160:	9304      	str	r3, [sp, #16]
   10162:	f7fe f9a3 	bl	e4ac <__aeabi_uidivmod>
   10166:	9804      	ldr	r0, [sp, #16]
   10168:	040b      	lsls	r3, r1, #16
   1016a:	0c31      	lsrs	r1, r6, #16
   1016c:	4319      	orrs	r1, r3
   1016e:	4288      	cmp	r0, r1
   10170:	d909      	bls.n	10186 <__aeabi_ddiv+0x342>
   10172:	4441      	add	r1, r8
   10174:	1e6b      	subs	r3, r5, #1
   10176:	4588      	cmp	r8, r1
   10178:	d900      	bls.n	1017c <__aeabi_ddiv+0x338>
   1017a:	e107      	b.n	1038c <__aeabi_ddiv+0x548>
   1017c:	4288      	cmp	r0, r1
   1017e:	d800      	bhi.n	10182 <__aeabi_ddiv+0x33e>
   10180:	e104      	b.n	1038c <__aeabi_ddiv+0x548>
   10182:	3d02      	subs	r5, #2
   10184:	4441      	add	r1, r8
   10186:	9b04      	ldr	r3, [sp, #16]
   10188:	1acb      	subs	r3, r1, r3
   1018a:	0018      	movs	r0, r3
   1018c:	0039      	movs	r1, r7
   1018e:	9304      	str	r3, [sp, #16]
   10190:	f7fe f906 	bl	e3a0 <__udivsi3>
   10194:	9b01      	ldr	r3, [sp, #4]
   10196:	4682      	mov	sl, r0
   10198:	4343      	muls	r3, r0
   1019a:	0039      	movs	r1, r7
   1019c:	9804      	ldr	r0, [sp, #16]
   1019e:	9301      	str	r3, [sp, #4]
   101a0:	f7fe f984 	bl	e4ac <__aeabi_uidivmod>
   101a4:	9801      	ldr	r0, [sp, #4]
   101a6:	040b      	lsls	r3, r1, #16
   101a8:	0431      	lsls	r1, r6, #16
   101aa:	0c09      	lsrs	r1, r1, #16
   101ac:	4319      	orrs	r1, r3
   101ae:	4288      	cmp	r0, r1
   101b0:	d90d      	bls.n	101ce <__aeabi_ddiv+0x38a>
   101b2:	4653      	mov	r3, sl
   101b4:	4441      	add	r1, r8
   101b6:	3b01      	subs	r3, #1
   101b8:	4588      	cmp	r8, r1
   101ba:	d900      	bls.n	101be <__aeabi_ddiv+0x37a>
   101bc:	e0e8      	b.n	10390 <__aeabi_ddiv+0x54c>
   101be:	4288      	cmp	r0, r1
   101c0:	d800      	bhi.n	101c4 <__aeabi_ddiv+0x380>
   101c2:	e0e5      	b.n	10390 <__aeabi_ddiv+0x54c>
   101c4:	2302      	movs	r3, #2
   101c6:	425b      	negs	r3, r3
   101c8:	469c      	mov	ip, r3
   101ca:	4441      	add	r1, r8
   101cc:	44e2      	add	sl, ip
   101ce:	9b01      	ldr	r3, [sp, #4]
   101d0:	042d      	lsls	r5, r5, #16
   101d2:	1ace      	subs	r6, r1, r3
   101d4:	4651      	mov	r1, sl
   101d6:	4329      	orrs	r1, r5
   101d8:	9d05      	ldr	r5, [sp, #20]
   101da:	464f      	mov	r7, r9
   101dc:	002a      	movs	r2, r5
   101de:	040b      	lsls	r3, r1, #16
   101e0:	0c08      	lsrs	r0, r1, #16
   101e2:	0c1b      	lsrs	r3, r3, #16
   101e4:	435a      	muls	r2, r3
   101e6:	4345      	muls	r5, r0
   101e8:	437b      	muls	r3, r7
   101ea:	4378      	muls	r0, r7
   101ec:	195b      	adds	r3, r3, r5
   101ee:	0c17      	lsrs	r7, r2, #16
   101f0:	18fb      	adds	r3, r7, r3
   101f2:	429d      	cmp	r5, r3
   101f4:	d903      	bls.n	101fe <__aeabi_ddiv+0x3ba>
   101f6:	2580      	movs	r5, #128	; 0x80
   101f8:	026d      	lsls	r5, r5, #9
   101fa:	46ac      	mov	ip, r5
   101fc:	4460      	add	r0, ip
   101fe:	0c1d      	lsrs	r5, r3, #16
   10200:	0412      	lsls	r2, r2, #16
   10202:	041b      	lsls	r3, r3, #16
   10204:	0c12      	lsrs	r2, r2, #16
   10206:	1828      	adds	r0, r5, r0
   10208:	189b      	adds	r3, r3, r2
   1020a:	4286      	cmp	r6, r0
   1020c:	d200      	bcs.n	10210 <__aeabi_ddiv+0x3cc>
   1020e:	e093      	b.n	10338 <__aeabi_ddiv+0x4f4>
   10210:	d100      	bne.n	10214 <__aeabi_ddiv+0x3d0>
   10212:	e08e      	b.n	10332 <__aeabi_ddiv+0x4ee>
   10214:	2301      	movs	r3, #1
   10216:	4319      	orrs	r1, r3
   10218:	4ba0      	ldr	r3, [pc, #640]	; (1049c <__aeabi_ddiv+0x658>)
   1021a:	18e3      	adds	r3, r4, r3
   1021c:	2b00      	cmp	r3, #0
   1021e:	dc00      	bgt.n	10222 <__aeabi_ddiv+0x3de>
   10220:	e099      	b.n	10356 <__aeabi_ddiv+0x512>
   10222:	074a      	lsls	r2, r1, #29
   10224:	d000      	beq.n	10228 <__aeabi_ddiv+0x3e4>
   10226:	e09e      	b.n	10366 <__aeabi_ddiv+0x522>
   10228:	465a      	mov	r2, fp
   1022a:	01d2      	lsls	r2, r2, #7
   1022c:	d506      	bpl.n	1023c <__aeabi_ddiv+0x3f8>
   1022e:	465a      	mov	r2, fp
   10230:	4b9b      	ldr	r3, [pc, #620]	; (104a0 <__aeabi_ddiv+0x65c>)
   10232:	401a      	ands	r2, r3
   10234:	2380      	movs	r3, #128	; 0x80
   10236:	4693      	mov	fp, r2
   10238:	00db      	lsls	r3, r3, #3
   1023a:	18e3      	adds	r3, r4, r3
   1023c:	4a99      	ldr	r2, [pc, #612]	; (104a4 <__aeabi_ddiv+0x660>)
   1023e:	4293      	cmp	r3, r2
   10240:	dd68      	ble.n	10314 <__aeabi_ddiv+0x4d0>
   10242:	2301      	movs	r3, #1
   10244:	9a02      	ldr	r2, [sp, #8]
   10246:	4c98      	ldr	r4, [pc, #608]	; (104a8 <__aeabi_ddiv+0x664>)
   10248:	401a      	ands	r2, r3
   1024a:	2300      	movs	r3, #0
   1024c:	4694      	mov	ip, r2
   1024e:	4698      	mov	r8, r3
   10250:	2200      	movs	r2, #0
   10252:	e6c5      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   10254:	2280      	movs	r2, #128	; 0x80
   10256:	464b      	mov	r3, r9
   10258:	0312      	lsls	r2, r2, #12
   1025a:	4213      	tst	r3, r2
   1025c:	d00a      	beq.n	10274 <__aeabi_ddiv+0x430>
   1025e:	465b      	mov	r3, fp
   10260:	4213      	tst	r3, r2
   10262:	d106      	bne.n	10272 <__aeabi_ddiv+0x42e>
   10264:	431a      	orrs	r2, r3
   10266:	0312      	lsls	r2, r2, #12
   10268:	0b12      	lsrs	r2, r2, #12
   1026a:	46ac      	mov	ip, r5
   1026c:	4688      	mov	r8, r1
   1026e:	4c8e      	ldr	r4, [pc, #568]	; (104a8 <__aeabi_ddiv+0x664>)
   10270:	e6b6      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   10272:	464b      	mov	r3, r9
   10274:	431a      	orrs	r2, r3
   10276:	0312      	lsls	r2, r2, #12
   10278:	0b12      	lsrs	r2, r2, #12
   1027a:	46bc      	mov	ip, r7
   1027c:	4c8a      	ldr	r4, [pc, #552]	; (104a8 <__aeabi_ddiv+0x664>)
   1027e:	e6af      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   10280:	0003      	movs	r3, r0
   10282:	465a      	mov	r2, fp
   10284:	3b28      	subs	r3, #40	; 0x28
   10286:	409a      	lsls	r2, r3
   10288:	2300      	movs	r3, #0
   1028a:	4691      	mov	r9, r2
   1028c:	4698      	mov	r8, r3
   1028e:	e657      	b.n	ff40 <__aeabi_ddiv+0xfc>
   10290:	4658      	mov	r0, fp
   10292:	f001 f8a1 	bl	113d8 <__clzsi2>
   10296:	3020      	adds	r0, #32
   10298:	e640      	b.n	ff1c <__aeabi_ddiv+0xd8>
   1029a:	0003      	movs	r3, r0
   1029c:	4652      	mov	r2, sl
   1029e:	3b28      	subs	r3, #40	; 0x28
   102a0:	409a      	lsls	r2, r3
   102a2:	2100      	movs	r1, #0
   102a4:	4693      	mov	fp, r2
   102a6:	e677      	b.n	ff98 <__aeabi_ddiv+0x154>
   102a8:	f001 f896 	bl	113d8 <__clzsi2>
   102ac:	3020      	adds	r0, #32
   102ae:	e65f      	b.n	ff70 <__aeabi_ddiv+0x12c>
   102b0:	4588      	cmp	r8, r1
   102b2:	d200      	bcs.n	102b6 <__aeabi_ddiv+0x472>
   102b4:	e6c7      	b.n	10046 <__aeabi_ddiv+0x202>
   102b6:	464b      	mov	r3, r9
   102b8:	07de      	lsls	r6, r3, #31
   102ba:	085d      	lsrs	r5, r3, #1
   102bc:	4643      	mov	r3, r8
   102be:	085b      	lsrs	r3, r3, #1
   102c0:	431e      	orrs	r6, r3
   102c2:	4643      	mov	r3, r8
   102c4:	07db      	lsls	r3, r3, #31
   102c6:	469a      	mov	sl, r3
   102c8:	e6c2      	b.n	10050 <__aeabi_ddiv+0x20c>
   102ca:	2500      	movs	r5, #0
   102cc:	4592      	cmp	sl, r2
   102ce:	d300      	bcc.n	102d2 <__aeabi_ddiv+0x48e>
   102d0:	e733      	b.n	1013a <__aeabi_ddiv+0x2f6>
   102d2:	9e03      	ldr	r6, [sp, #12]
   102d4:	4659      	mov	r1, fp
   102d6:	46b4      	mov	ip, r6
   102d8:	44e2      	add	sl, ip
   102da:	45b2      	cmp	sl, r6
   102dc:	41ad      	sbcs	r5, r5
   102de:	426d      	negs	r5, r5
   102e0:	4445      	add	r5, r8
   102e2:	18eb      	adds	r3, r5, r3
   102e4:	3901      	subs	r1, #1
   102e6:	4598      	cmp	r8, r3
   102e8:	d207      	bcs.n	102fa <__aeabi_ddiv+0x4b6>
   102ea:	4298      	cmp	r0, r3
   102ec:	d900      	bls.n	102f0 <__aeabi_ddiv+0x4ac>
   102ee:	e07f      	b.n	103f0 <__aeabi_ddiv+0x5ac>
   102f0:	d100      	bne.n	102f4 <__aeabi_ddiv+0x4b0>
   102f2:	e0bc      	b.n	1046e <__aeabi_ddiv+0x62a>
   102f4:	1a1d      	subs	r5, r3, r0
   102f6:	468b      	mov	fp, r1
   102f8:	e71f      	b.n	1013a <__aeabi_ddiv+0x2f6>
   102fa:	4598      	cmp	r8, r3
   102fc:	d1fa      	bne.n	102f4 <__aeabi_ddiv+0x4b0>
   102fe:	9d03      	ldr	r5, [sp, #12]
   10300:	4555      	cmp	r5, sl
   10302:	d9f2      	bls.n	102ea <__aeabi_ddiv+0x4a6>
   10304:	4643      	mov	r3, r8
   10306:	468b      	mov	fp, r1
   10308:	1a1d      	subs	r5, r3, r0
   1030a:	e716      	b.n	1013a <__aeabi_ddiv+0x2f6>
   1030c:	469b      	mov	fp, r3
   1030e:	e6ca      	b.n	100a6 <__aeabi_ddiv+0x262>
   10310:	0015      	movs	r5, r2
   10312:	e6e7      	b.n	100e4 <__aeabi_ddiv+0x2a0>
   10314:	465a      	mov	r2, fp
   10316:	08c9      	lsrs	r1, r1, #3
   10318:	0752      	lsls	r2, r2, #29
   1031a:	430a      	orrs	r2, r1
   1031c:	055b      	lsls	r3, r3, #21
   1031e:	4690      	mov	r8, r2
   10320:	0d5c      	lsrs	r4, r3, #21
   10322:	465a      	mov	r2, fp
   10324:	2301      	movs	r3, #1
   10326:	9902      	ldr	r1, [sp, #8]
   10328:	0252      	lsls	r2, r2, #9
   1032a:	4019      	ands	r1, r3
   1032c:	0b12      	lsrs	r2, r2, #12
   1032e:	468c      	mov	ip, r1
   10330:	e656      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   10332:	2b00      	cmp	r3, #0
   10334:	d100      	bne.n	10338 <__aeabi_ddiv+0x4f4>
   10336:	e76f      	b.n	10218 <__aeabi_ddiv+0x3d4>
   10338:	4446      	add	r6, r8
   1033a:	1e4a      	subs	r2, r1, #1
   1033c:	45b0      	cmp	r8, r6
   1033e:	d929      	bls.n	10394 <__aeabi_ddiv+0x550>
   10340:	0011      	movs	r1, r2
   10342:	4286      	cmp	r6, r0
   10344:	d000      	beq.n	10348 <__aeabi_ddiv+0x504>
   10346:	e765      	b.n	10214 <__aeabi_ddiv+0x3d0>
   10348:	9a03      	ldr	r2, [sp, #12]
   1034a:	4293      	cmp	r3, r2
   1034c:	d000      	beq.n	10350 <__aeabi_ddiv+0x50c>
   1034e:	e761      	b.n	10214 <__aeabi_ddiv+0x3d0>
   10350:	e762      	b.n	10218 <__aeabi_ddiv+0x3d4>
   10352:	2101      	movs	r1, #1
   10354:	4249      	negs	r1, r1
   10356:	2001      	movs	r0, #1
   10358:	1ac2      	subs	r2, r0, r3
   1035a:	2a38      	cmp	r2, #56	; 0x38
   1035c:	dd21      	ble.n	103a2 <__aeabi_ddiv+0x55e>
   1035e:	9b02      	ldr	r3, [sp, #8]
   10360:	4003      	ands	r3, r0
   10362:	469c      	mov	ip, r3
   10364:	e638      	b.n	ffd8 <__aeabi_ddiv+0x194>
   10366:	220f      	movs	r2, #15
   10368:	400a      	ands	r2, r1
   1036a:	2a04      	cmp	r2, #4
   1036c:	d100      	bne.n	10370 <__aeabi_ddiv+0x52c>
   1036e:	e75b      	b.n	10228 <__aeabi_ddiv+0x3e4>
   10370:	000a      	movs	r2, r1
   10372:	1d11      	adds	r1, r2, #4
   10374:	4291      	cmp	r1, r2
   10376:	4192      	sbcs	r2, r2
   10378:	4252      	negs	r2, r2
   1037a:	4493      	add	fp, r2
   1037c:	e754      	b.n	10228 <__aeabi_ddiv+0x3e4>
   1037e:	4b47      	ldr	r3, [pc, #284]	; (1049c <__aeabi_ddiv+0x658>)
   10380:	18e3      	adds	r3, r4, r3
   10382:	2b00      	cmp	r3, #0
   10384:	dde5      	ble.n	10352 <__aeabi_ddiv+0x50e>
   10386:	2201      	movs	r2, #1
   10388:	4252      	negs	r2, r2
   1038a:	e7f2      	b.n	10372 <__aeabi_ddiv+0x52e>
   1038c:	001d      	movs	r5, r3
   1038e:	e6fa      	b.n	10186 <__aeabi_ddiv+0x342>
   10390:	469a      	mov	sl, r3
   10392:	e71c      	b.n	101ce <__aeabi_ddiv+0x38a>
   10394:	42b0      	cmp	r0, r6
   10396:	d839      	bhi.n	1040c <__aeabi_ddiv+0x5c8>
   10398:	d06e      	beq.n	10478 <__aeabi_ddiv+0x634>
   1039a:	0011      	movs	r1, r2
   1039c:	e73a      	b.n	10214 <__aeabi_ddiv+0x3d0>
   1039e:	9302      	str	r3, [sp, #8]
   103a0:	e73a      	b.n	10218 <__aeabi_ddiv+0x3d4>
   103a2:	2a1f      	cmp	r2, #31
   103a4:	dc3c      	bgt.n	10420 <__aeabi_ddiv+0x5dc>
   103a6:	2320      	movs	r3, #32
   103a8:	1a9b      	subs	r3, r3, r2
   103aa:	000c      	movs	r4, r1
   103ac:	4658      	mov	r0, fp
   103ae:	4099      	lsls	r1, r3
   103b0:	4098      	lsls	r0, r3
   103b2:	1e4b      	subs	r3, r1, #1
   103b4:	4199      	sbcs	r1, r3
   103b6:	465b      	mov	r3, fp
   103b8:	40d4      	lsrs	r4, r2
   103ba:	40d3      	lsrs	r3, r2
   103bc:	4320      	orrs	r0, r4
   103be:	4308      	orrs	r0, r1
   103c0:	001a      	movs	r2, r3
   103c2:	0743      	lsls	r3, r0, #29
   103c4:	d009      	beq.n	103da <__aeabi_ddiv+0x596>
   103c6:	230f      	movs	r3, #15
   103c8:	4003      	ands	r3, r0
   103ca:	2b04      	cmp	r3, #4
   103cc:	d005      	beq.n	103da <__aeabi_ddiv+0x596>
   103ce:	0001      	movs	r1, r0
   103d0:	1d08      	adds	r0, r1, #4
   103d2:	4288      	cmp	r0, r1
   103d4:	419b      	sbcs	r3, r3
   103d6:	425b      	negs	r3, r3
   103d8:	18d2      	adds	r2, r2, r3
   103da:	0213      	lsls	r3, r2, #8
   103dc:	d53a      	bpl.n	10454 <__aeabi_ddiv+0x610>
   103de:	2301      	movs	r3, #1
   103e0:	9a02      	ldr	r2, [sp, #8]
   103e2:	2401      	movs	r4, #1
   103e4:	401a      	ands	r2, r3
   103e6:	2300      	movs	r3, #0
   103e8:	4694      	mov	ip, r2
   103ea:	4698      	mov	r8, r3
   103ec:	2200      	movs	r2, #0
   103ee:	e5f7      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   103f0:	2102      	movs	r1, #2
   103f2:	4249      	negs	r1, r1
   103f4:	468c      	mov	ip, r1
   103f6:	9d03      	ldr	r5, [sp, #12]
   103f8:	44e3      	add	fp, ip
   103fa:	46ac      	mov	ip, r5
   103fc:	44e2      	add	sl, ip
   103fe:	45aa      	cmp	sl, r5
   10400:	41ad      	sbcs	r5, r5
   10402:	426d      	negs	r5, r5
   10404:	4445      	add	r5, r8
   10406:	18ed      	adds	r5, r5, r3
   10408:	1a2d      	subs	r5, r5, r0
   1040a:	e696      	b.n	1013a <__aeabi_ddiv+0x2f6>
   1040c:	1e8a      	subs	r2, r1, #2
   1040e:	9903      	ldr	r1, [sp, #12]
   10410:	004d      	lsls	r5, r1, #1
   10412:	428d      	cmp	r5, r1
   10414:	4189      	sbcs	r1, r1
   10416:	4249      	negs	r1, r1
   10418:	4441      	add	r1, r8
   1041a:	1876      	adds	r6, r6, r1
   1041c:	9503      	str	r5, [sp, #12]
   1041e:	e78f      	b.n	10340 <__aeabi_ddiv+0x4fc>
   10420:	201f      	movs	r0, #31
   10422:	4240      	negs	r0, r0
   10424:	1ac3      	subs	r3, r0, r3
   10426:	4658      	mov	r0, fp
   10428:	40d8      	lsrs	r0, r3
   1042a:	0003      	movs	r3, r0
   1042c:	2a20      	cmp	r2, #32
   1042e:	d028      	beq.n	10482 <__aeabi_ddiv+0x63e>
   10430:	2040      	movs	r0, #64	; 0x40
   10432:	465d      	mov	r5, fp
   10434:	1a82      	subs	r2, r0, r2
   10436:	4095      	lsls	r5, r2
   10438:	4329      	orrs	r1, r5
   1043a:	1e4a      	subs	r2, r1, #1
   1043c:	4191      	sbcs	r1, r2
   1043e:	4319      	orrs	r1, r3
   10440:	2307      	movs	r3, #7
   10442:	2200      	movs	r2, #0
   10444:	400b      	ands	r3, r1
   10446:	d009      	beq.n	1045c <__aeabi_ddiv+0x618>
   10448:	230f      	movs	r3, #15
   1044a:	2200      	movs	r2, #0
   1044c:	400b      	ands	r3, r1
   1044e:	0008      	movs	r0, r1
   10450:	2b04      	cmp	r3, #4
   10452:	d1bd      	bne.n	103d0 <__aeabi_ddiv+0x58c>
   10454:	0001      	movs	r1, r0
   10456:	0753      	lsls	r3, r2, #29
   10458:	0252      	lsls	r2, r2, #9
   1045a:	0b12      	lsrs	r2, r2, #12
   1045c:	08c9      	lsrs	r1, r1, #3
   1045e:	4319      	orrs	r1, r3
   10460:	2301      	movs	r3, #1
   10462:	4688      	mov	r8, r1
   10464:	9902      	ldr	r1, [sp, #8]
   10466:	2400      	movs	r4, #0
   10468:	4019      	ands	r1, r3
   1046a:	468c      	mov	ip, r1
   1046c:	e5b8      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   1046e:	4552      	cmp	r2, sl
   10470:	d8be      	bhi.n	103f0 <__aeabi_ddiv+0x5ac>
   10472:	468b      	mov	fp, r1
   10474:	2500      	movs	r5, #0
   10476:	e660      	b.n	1013a <__aeabi_ddiv+0x2f6>
   10478:	9d03      	ldr	r5, [sp, #12]
   1047a:	429d      	cmp	r5, r3
   1047c:	d3c6      	bcc.n	1040c <__aeabi_ddiv+0x5c8>
   1047e:	0011      	movs	r1, r2
   10480:	e762      	b.n	10348 <__aeabi_ddiv+0x504>
   10482:	2500      	movs	r5, #0
   10484:	e7d8      	b.n	10438 <__aeabi_ddiv+0x5f4>
   10486:	2280      	movs	r2, #128	; 0x80
   10488:	465b      	mov	r3, fp
   1048a:	0312      	lsls	r2, r2, #12
   1048c:	431a      	orrs	r2, r3
   1048e:	9b01      	ldr	r3, [sp, #4]
   10490:	0312      	lsls	r2, r2, #12
   10492:	0b12      	lsrs	r2, r2, #12
   10494:	469c      	mov	ip, r3
   10496:	4688      	mov	r8, r1
   10498:	4c03      	ldr	r4, [pc, #12]	; (104a8 <__aeabi_ddiv+0x664>)
   1049a:	e5a1      	b.n	ffe0 <__aeabi_ddiv+0x19c>
   1049c:	000003ff 	.word	0x000003ff
   104a0:	feffffff 	.word	0xfeffffff
   104a4:	000007fe 	.word	0x000007fe
   104a8:	000007ff 	.word	0x000007ff

000104ac <__eqdf2>:
   104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ae:	464f      	mov	r7, r9
   104b0:	4646      	mov	r6, r8
   104b2:	46d6      	mov	lr, sl
   104b4:	005c      	lsls	r4, r3, #1
   104b6:	b5c0      	push	{r6, r7, lr}
   104b8:	031f      	lsls	r7, r3, #12
   104ba:	0fdb      	lsrs	r3, r3, #31
   104bc:	469a      	mov	sl, r3
   104be:	4b17      	ldr	r3, [pc, #92]	; (1051c <__eqdf2+0x70>)
   104c0:	030e      	lsls	r6, r1, #12
   104c2:	004d      	lsls	r5, r1, #1
   104c4:	4684      	mov	ip, r0
   104c6:	4680      	mov	r8, r0
   104c8:	0b36      	lsrs	r6, r6, #12
   104ca:	0d6d      	lsrs	r5, r5, #21
   104cc:	0fc9      	lsrs	r1, r1, #31
   104ce:	4691      	mov	r9, r2
   104d0:	0b3f      	lsrs	r7, r7, #12
   104d2:	0d64      	lsrs	r4, r4, #21
   104d4:	2001      	movs	r0, #1
   104d6:	429d      	cmp	r5, r3
   104d8:	d008      	beq.n	104ec <__eqdf2+0x40>
   104da:	429c      	cmp	r4, r3
   104dc:	d001      	beq.n	104e2 <__eqdf2+0x36>
   104de:	42a5      	cmp	r5, r4
   104e0:	d00b      	beq.n	104fa <__eqdf2+0x4e>
   104e2:	bc1c      	pop	{r2, r3, r4}
   104e4:	4690      	mov	r8, r2
   104e6:	4699      	mov	r9, r3
   104e8:	46a2      	mov	sl, r4
   104ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104ec:	4663      	mov	r3, ip
   104ee:	4333      	orrs	r3, r6
   104f0:	d1f7      	bne.n	104e2 <__eqdf2+0x36>
   104f2:	42ac      	cmp	r4, r5
   104f4:	d1f5      	bne.n	104e2 <__eqdf2+0x36>
   104f6:	433a      	orrs	r2, r7
   104f8:	d1f3      	bne.n	104e2 <__eqdf2+0x36>
   104fa:	2001      	movs	r0, #1
   104fc:	42be      	cmp	r6, r7
   104fe:	d1f0      	bne.n	104e2 <__eqdf2+0x36>
   10500:	45c8      	cmp	r8, r9
   10502:	d1ee      	bne.n	104e2 <__eqdf2+0x36>
   10504:	4551      	cmp	r1, sl
   10506:	d007      	beq.n	10518 <__eqdf2+0x6c>
   10508:	2d00      	cmp	r5, #0
   1050a:	d1ea      	bne.n	104e2 <__eqdf2+0x36>
   1050c:	4663      	mov	r3, ip
   1050e:	431e      	orrs	r6, r3
   10510:	0030      	movs	r0, r6
   10512:	1e46      	subs	r6, r0, #1
   10514:	41b0      	sbcs	r0, r6
   10516:	e7e4      	b.n	104e2 <__eqdf2+0x36>
   10518:	2000      	movs	r0, #0
   1051a:	e7e2      	b.n	104e2 <__eqdf2+0x36>
   1051c:	000007ff 	.word	0x000007ff

00010520 <__gedf2>:
   10520:	b5f0      	push	{r4, r5, r6, r7, lr}
   10522:	4645      	mov	r5, r8
   10524:	46de      	mov	lr, fp
   10526:	4657      	mov	r7, sl
   10528:	464e      	mov	r6, r9
   1052a:	b5e0      	push	{r5, r6, r7, lr}
   1052c:	031f      	lsls	r7, r3, #12
   1052e:	0b3d      	lsrs	r5, r7, #12
   10530:	4f2c      	ldr	r7, [pc, #176]	; (105e4 <__gedf2+0xc4>)
   10532:	030e      	lsls	r6, r1, #12
   10534:	004c      	lsls	r4, r1, #1
   10536:	46ab      	mov	fp, r5
   10538:	005d      	lsls	r5, r3, #1
   1053a:	4684      	mov	ip, r0
   1053c:	0b36      	lsrs	r6, r6, #12
   1053e:	0d64      	lsrs	r4, r4, #21
   10540:	0fc9      	lsrs	r1, r1, #31
   10542:	4690      	mov	r8, r2
   10544:	0d6d      	lsrs	r5, r5, #21
   10546:	0fdb      	lsrs	r3, r3, #31
   10548:	42bc      	cmp	r4, r7
   1054a:	d02a      	beq.n	105a2 <__gedf2+0x82>
   1054c:	4f25      	ldr	r7, [pc, #148]	; (105e4 <__gedf2+0xc4>)
   1054e:	42bd      	cmp	r5, r7
   10550:	d02d      	beq.n	105ae <__gedf2+0x8e>
   10552:	2c00      	cmp	r4, #0
   10554:	d10f      	bne.n	10576 <__gedf2+0x56>
   10556:	4330      	orrs	r0, r6
   10558:	0007      	movs	r7, r0
   1055a:	4681      	mov	r9, r0
   1055c:	4278      	negs	r0, r7
   1055e:	4178      	adcs	r0, r7
   10560:	b2c0      	uxtb	r0, r0
   10562:	2d00      	cmp	r5, #0
   10564:	d117      	bne.n	10596 <__gedf2+0x76>
   10566:	465f      	mov	r7, fp
   10568:	433a      	orrs	r2, r7
   1056a:	d114      	bne.n	10596 <__gedf2+0x76>
   1056c:	464b      	mov	r3, r9
   1056e:	2000      	movs	r0, #0
   10570:	2b00      	cmp	r3, #0
   10572:	d00a      	beq.n	1058a <__gedf2+0x6a>
   10574:	e006      	b.n	10584 <__gedf2+0x64>
   10576:	2d00      	cmp	r5, #0
   10578:	d102      	bne.n	10580 <__gedf2+0x60>
   1057a:	4658      	mov	r0, fp
   1057c:	4302      	orrs	r2, r0
   1057e:	d001      	beq.n	10584 <__gedf2+0x64>
   10580:	4299      	cmp	r1, r3
   10582:	d018      	beq.n	105b6 <__gedf2+0x96>
   10584:	4248      	negs	r0, r1
   10586:	2101      	movs	r1, #1
   10588:	4308      	orrs	r0, r1
   1058a:	bc3c      	pop	{r2, r3, r4, r5}
   1058c:	4690      	mov	r8, r2
   1058e:	4699      	mov	r9, r3
   10590:	46a2      	mov	sl, r4
   10592:	46ab      	mov	fp, r5
   10594:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10596:	2800      	cmp	r0, #0
   10598:	d0f2      	beq.n	10580 <__gedf2+0x60>
   1059a:	2001      	movs	r0, #1
   1059c:	3b01      	subs	r3, #1
   1059e:	4318      	orrs	r0, r3
   105a0:	e7f3      	b.n	1058a <__gedf2+0x6a>
   105a2:	0037      	movs	r7, r6
   105a4:	4307      	orrs	r7, r0
   105a6:	d0d1      	beq.n	1054c <__gedf2+0x2c>
   105a8:	2002      	movs	r0, #2
   105aa:	4240      	negs	r0, r0
   105ac:	e7ed      	b.n	1058a <__gedf2+0x6a>
   105ae:	465f      	mov	r7, fp
   105b0:	4317      	orrs	r7, r2
   105b2:	d0ce      	beq.n	10552 <__gedf2+0x32>
   105b4:	e7f8      	b.n	105a8 <__gedf2+0x88>
   105b6:	42ac      	cmp	r4, r5
   105b8:	dce4      	bgt.n	10584 <__gedf2+0x64>
   105ba:	da03      	bge.n	105c4 <__gedf2+0xa4>
   105bc:	1e48      	subs	r0, r1, #1
   105be:	2101      	movs	r1, #1
   105c0:	4308      	orrs	r0, r1
   105c2:	e7e2      	b.n	1058a <__gedf2+0x6a>
   105c4:	455e      	cmp	r6, fp
   105c6:	d8dd      	bhi.n	10584 <__gedf2+0x64>
   105c8:	d006      	beq.n	105d8 <__gedf2+0xb8>
   105ca:	2000      	movs	r0, #0
   105cc:	455e      	cmp	r6, fp
   105ce:	d2dc      	bcs.n	1058a <__gedf2+0x6a>
   105d0:	2301      	movs	r3, #1
   105d2:	1e48      	subs	r0, r1, #1
   105d4:	4318      	orrs	r0, r3
   105d6:	e7d8      	b.n	1058a <__gedf2+0x6a>
   105d8:	45c4      	cmp	ip, r8
   105da:	d8d3      	bhi.n	10584 <__gedf2+0x64>
   105dc:	2000      	movs	r0, #0
   105de:	45c4      	cmp	ip, r8
   105e0:	d3f6      	bcc.n	105d0 <__gedf2+0xb0>
   105e2:	e7d2      	b.n	1058a <__gedf2+0x6a>
   105e4:	000007ff 	.word	0x000007ff

000105e8 <__ledf2>:
   105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ea:	464e      	mov	r6, r9
   105ec:	4645      	mov	r5, r8
   105ee:	46de      	mov	lr, fp
   105f0:	4657      	mov	r7, sl
   105f2:	005c      	lsls	r4, r3, #1
   105f4:	b5e0      	push	{r5, r6, r7, lr}
   105f6:	031f      	lsls	r7, r3, #12
   105f8:	0fdb      	lsrs	r3, r3, #31
   105fa:	4699      	mov	r9, r3
   105fc:	4b2a      	ldr	r3, [pc, #168]	; (106a8 <__ledf2+0xc0>)
   105fe:	030e      	lsls	r6, r1, #12
   10600:	004d      	lsls	r5, r1, #1
   10602:	0fc9      	lsrs	r1, r1, #31
   10604:	4684      	mov	ip, r0
   10606:	0b36      	lsrs	r6, r6, #12
   10608:	0d6d      	lsrs	r5, r5, #21
   1060a:	468b      	mov	fp, r1
   1060c:	4690      	mov	r8, r2
   1060e:	0b3f      	lsrs	r7, r7, #12
   10610:	0d64      	lsrs	r4, r4, #21
   10612:	429d      	cmp	r5, r3
   10614:	d020      	beq.n	10658 <__ledf2+0x70>
   10616:	4b24      	ldr	r3, [pc, #144]	; (106a8 <__ledf2+0xc0>)
   10618:	429c      	cmp	r4, r3
   1061a:	d022      	beq.n	10662 <__ledf2+0x7a>
   1061c:	2d00      	cmp	r5, #0
   1061e:	d112      	bne.n	10646 <__ledf2+0x5e>
   10620:	4330      	orrs	r0, r6
   10622:	4243      	negs	r3, r0
   10624:	4143      	adcs	r3, r0
   10626:	b2db      	uxtb	r3, r3
   10628:	2c00      	cmp	r4, #0
   1062a:	d01f      	beq.n	1066c <__ledf2+0x84>
   1062c:	2b00      	cmp	r3, #0
   1062e:	d00c      	beq.n	1064a <__ledf2+0x62>
   10630:	464b      	mov	r3, r9
   10632:	2001      	movs	r0, #1
   10634:	3b01      	subs	r3, #1
   10636:	4303      	orrs	r3, r0
   10638:	0018      	movs	r0, r3
   1063a:	bc3c      	pop	{r2, r3, r4, r5}
   1063c:	4690      	mov	r8, r2
   1063e:	4699      	mov	r9, r3
   10640:	46a2      	mov	sl, r4
   10642:	46ab      	mov	fp, r5
   10644:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10646:	2c00      	cmp	r4, #0
   10648:	d016      	beq.n	10678 <__ledf2+0x90>
   1064a:	45cb      	cmp	fp, r9
   1064c:	d017      	beq.n	1067e <__ledf2+0x96>
   1064e:	465b      	mov	r3, fp
   10650:	4259      	negs	r1, r3
   10652:	2301      	movs	r3, #1
   10654:	430b      	orrs	r3, r1
   10656:	e7ef      	b.n	10638 <__ledf2+0x50>
   10658:	0031      	movs	r1, r6
   1065a:	2302      	movs	r3, #2
   1065c:	4301      	orrs	r1, r0
   1065e:	d1eb      	bne.n	10638 <__ledf2+0x50>
   10660:	e7d9      	b.n	10616 <__ledf2+0x2e>
   10662:	0039      	movs	r1, r7
   10664:	2302      	movs	r3, #2
   10666:	4311      	orrs	r1, r2
   10668:	d1e6      	bne.n	10638 <__ledf2+0x50>
   1066a:	e7d7      	b.n	1061c <__ledf2+0x34>
   1066c:	433a      	orrs	r2, r7
   1066e:	d1dd      	bne.n	1062c <__ledf2+0x44>
   10670:	2300      	movs	r3, #0
   10672:	2800      	cmp	r0, #0
   10674:	d0e0      	beq.n	10638 <__ledf2+0x50>
   10676:	e7ea      	b.n	1064e <__ledf2+0x66>
   10678:	433a      	orrs	r2, r7
   1067a:	d1e6      	bne.n	1064a <__ledf2+0x62>
   1067c:	e7e7      	b.n	1064e <__ledf2+0x66>
   1067e:	42a5      	cmp	r5, r4
   10680:	dce5      	bgt.n	1064e <__ledf2+0x66>
   10682:	db05      	blt.n	10690 <__ledf2+0xa8>
   10684:	42be      	cmp	r6, r7
   10686:	d8e2      	bhi.n	1064e <__ledf2+0x66>
   10688:	d007      	beq.n	1069a <__ledf2+0xb2>
   1068a:	2300      	movs	r3, #0
   1068c:	42be      	cmp	r6, r7
   1068e:	d2d3      	bcs.n	10638 <__ledf2+0x50>
   10690:	4659      	mov	r1, fp
   10692:	2301      	movs	r3, #1
   10694:	3901      	subs	r1, #1
   10696:	430b      	orrs	r3, r1
   10698:	e7ce      	b.n	10638 <__ledf2+0x50>
   1069a:	45c4      	cmp	ip, r8
   1069c:	d8d7      	bhi.n	1064e <__ledf2+0x66>
   1069e:	2300      	movs	r3, #0
   106a0:	45c4      	cmp	ip, r8
   106a2:	d3f5      	bcc.n	10690 <__ledf2+0xa8>
   106a4:	e7c8      	b.n	10638 <__ledf2+0x50>
   106a6:	46c0      	nop			; (mov r8, r8)
   106a8:	000007ff 	.word	0x000007ff

000106ac <__aeabi_dmul>:
   106ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   106ae:	4657      	mov	r7, sl
   106b0:	4645      	mov	r5, r8
   106b2:	46de      	mov	lr, fp
   106b4:	464e      	mov	r6, r9
   106b6:	b5e0      	push	{r5, r6, r7, lr}
   106b8:	030c      	lsls	r4, r1, #12
   106ba:	4698      	mov	r8, r3
   106bc:	004e      	lsls	r6, r1, #1
   106be:	0b23      	lsrs	r3, r4, #12
   106c0:	b087      	sub	sp, #28
   106c2:	0007      	movs	r7, r0
   106c4:	4692      	mov	sl, r2
   106c6:	469b      	mov	fp, r3
   106c8:	0d76      	lsrs	r6, r6, #21
   106ca:	0fcd      	lsrs	r5, r1, #31
   106cc:	2e00      	cmp	r6, #0
   106ce:	d06b      	beq.n	107a8 <__aeabi_dmul+0xfc>
   106d0:	4b6d      	ldr	r3, [pc, #436]	; (10888 <__aeabi_dmul+0x1dc>)
   106d2:	429e      	cmp	r6, r3
   106d4:	d035      	beq.n	10742 <__aeabi_dmul+0x96>
   106d6:	2480      	movs	r4, #128	; 0x80
   106d8:	465b      	mov	r3, fp
   106da:	0f42      	lsrs	r2, r0, #29
   106dc:	0424      	lsls	r4, r4, #16
   106de:	00db      	lsls	r3, r3, #3
   106e0:	4314      	orrs	r4, r2
   106e2:	431c      	orrs	r4, r3
   106e4:	00c3      	lsls	r3, r0, #3
   106e6:	4699      	mov	r9, r3
   106e8:	4b68      	ldr	r3, [pc, #416]	; (1088c <__aeabi_dmul+0x1e0>)
   106ea:	46a3      	mov	fp, r4
   106ec:	469c      	mov	ip, r3
   106ee:	2300      	movs	r3, #0
   106f0:	2700      	movs	r7, #0
   106f2:	4466      	add	r6, ip
   106f4:	9302      	str	r3, [sp, #8]
   106f6:	4643      	mov	r3, r8
   106f8:	031c      	lsls	r4, r3, #12
   106fa:	005a      	lsls	r2, r3, #1
   106fc:	0fdb      	lsrs	r3, r3, #31
   106fe:	4650      	mov	r0, sl
   10700:	0b24      	lsrs	r4, r4, #12
   10702:	0d52      	lsrs	r2, r2, #21
   10704:	4698      	mov	r8, r3
   10706:	d100      	bne.n	1070a <__aeabi_dmul+0x5e>
   10708:	e076      	b.n	107f8 <__aeabi_dmul+0x14c>
   1070a:	4b5f      	ldr	r3, [pc, #380]	; (10888 <__aeabi_dmul+0x1dc>)
   1070c:	429a      	cmp	r2, r3
   1070e:	d06d      	beq.n	107ec <__aeabi_dmul+0x140>
   10710:	2380      	movs	r3, #128	; 0x80
   10712:	0f41      	lsrs	r1, r0, #29
   10714:	041b      	lsls	r3, r3, #16
   10716:	430b      	orrs	r3, r1
   10718:	495c      	ldr	r1, [pc, #368]	; (1088c <__aeabi_dmul+0x1e0>)
   1071a:	00e4      	lsls	r4, r4, #3
   1071c:	468c      	mov	ip, r1
   1071e:	431c      	orrs	r4, r3
   10720:	00c3      	lsls	r3, r0, #3
   10722:	2000      	movs	r0, #0
   10724:	4462      	add	r2, ip
   10726:	4641      	mov	r1, r8
   10728:	18b6      	adds	r6, r6, r2
   1072a:	4069      	eors	r1, r5
   1072c:	1c72      	adds	r2, r6, #1
   1072e:	9101      	str	r1, [sp, #4]
   10730:	4694      	mov	ip, r2
   10732:	4307      	orrs	r7, r0
   10734:	2f0f      	cmp	r7, #15
   10736:	d900      	bls.n	1073a <__aeabi_dmul+0x8e>
   10738:	e0b0      	b.n	1089c <__aeabi_dmul+0x1f0>
   1073a:	4a55      	ldr	r2, [pc, #340]	; (10890 <__aeabi_dmul+0x1e4>)
   1073c:	00bf      	lsls	r7, r7, #2
   1073e:	59d2      	ldr	r2, [r2, r7]
   10740:	4697      	mov	pc, r2
   10742:	465b      	mov	r3, fp
   10744:	4303      	orrs	r3, r0
   10746:	4699      	mov	r9, r3
   10748:	d000      	beq.n	1074c <__aeabi_dmul+0xa0>
   1074a:	e087      	b.n	1085c <__aeabi_dmul+0x1b0>
   1074c:	2300      	movs	r3, #0
   1074e:	469b      	mov	fp, r3
   10750:	3302      	adds	r3, #2
   10752:	2708      	movs	r7, #8
   10754:	9302      	str	r3, [sp, #8]
   10756:	e7ce      	b.n	106f6 <__aeabi_dmul+0x4a>
   10758:	4642      	mov	r2, r8
   1075a:	9201      	str	r2, [sp, #4]
   1075c:	2802      	cmp	r0, #2
   1075e:	d067      	beq.n	10830 <__aeabi_dmul+0x184>
   10760:	2803      	cmp	r0, #3
   10762:	d100      	bne.n	10766 <__aeabi_dmul+0xba>
   10764:	e20e      	b.n	10b84 <__aeabi_dmul+0x4d8>
   10766:	2801      	cmp	r0, #1
   10768:	d000      	beq.n	1076c <__aeabi_dmul+0xc0>
   1076a:	e162      	b.n	10a32 <__aeabi_dmul+0x386>
   1076c:	2300      	movs	r3, #0
   1076e:	2400      	movs	r4, #0
   10770:	2200      	movs	r2, #0
   10772:	4699      	mov	r9, r3
   10774:	9901      	ldr	r1, [sp, #4]
   10776:	4001      	ands	r1, r0
   10778:	b2cd      	uxtb	r5, r1
   1077a:	2100      	movs	r1, #0
   1077c:	0312      	lsls	r2, r2, #12
   1077e:	0d0b      	lsrs	r3, r1, #20
   10780:	0b12      	lsrs	r2, r2, #12
   10782:	051b      	lsls	r3, r3, #20
   10784:	4313      	orrs	r3, r2
   10786:	4a43      	ldr	r2, [pc, #268]	; (10894 <__aeabi_dmul+0x1e8>)
   10788:	0524      	lsls	r4, r4, #20
   1078a:	4013      	ands	r3, r2
   1078c:	431c      	orrs	r4, r3
   1078e:	0064      	lsls	r4, r4, #1
   10790:	07ed      	lsls	r5, r5, #31
   10792:	0864      	lsrs	r4, r4, #1
   10794:	432c      	orrs	r4, r5
   10796:	4648      	mov	r0, r9
   10798:	0021      	movs	r1, r4
   1079a:	b007      	add	sp, #28
   1079c:	bc3c      	pop	{r2, r3, r4, r5}
   1079e:	4690      	mov	r8, r2
   107a0:	4699      	mov	r9, r3
   107a2:	46a2      	mov	sl, r4
   107a4:	46ab      	mov	fp, r5
   107a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107a8:	4303      	orrs	r3, r0
   107aa:	4699      	mov	r9, r3
   107ac:	d04f      	beq.n	1084e <__aeabi_dmul+0x1a2>
   107ae:	465b      	mov	r3, fp
   107b0:	2b00      	cmp	r3, #0
   107b2:	d100      	bne.n	107b6 <__aeabi_dmul+0x10a>
   107b4:	e189      	b.n	10aca <__aeabi_dmul+0x41e>
   107b6:	4658      	mov	r0, fp
   107b8:	f000 fe0e 	bl	113d8 <__clzsi2>
   107bc:	0003      	movs	r3, r0
   107be:	3b0b      	subs	r3, #11
   107c0:	2b1c      	cmp	r3, #28
   107c2:	dd00      	ble.n	107c6 <__aeabi_dmul+0x11a>
   107c4:	e17a      	b.n	10abc <__aeabi_dmul+0x410>
   107c6:	221d      	movs	r2, #29
   107c8:	1ad3      	subs	r3, r2, r3
   107ca:	003a      	movs	r2, r7
   107cc:	0001      	movs	r1, r0
   107ce:	465c      	mov	r4, fp
   107d0:	40da      	lsrs	r2, r3
   107d2:	3908      	subs	r1, #8
   107d4:	408c      	lsls	r4, r1
   107d6:	0013      	movs	r3, r2
   107d8:	408f      	lsls	r7, r1
   107da:	4323      	orrs	r3, r4
   107dc:	469b      	mov	fp, r3
   107de:	46b9      	mov	r9, r7
   107e0:	2300      	movs	r3, #0
   107e2:	4e2d      	ldr	r6, [pc, #180]	; (10898 <__aeabi_dmul+0x1ec>)
   107e4:	2700      	movs	r7, #0
   107e6:	1a36      	subs	r6, r6, r0
   107e8:	9302      	str	r3, [sp, #8]
   107ea:	e784      	b.n	106f6 <__aeabi_dmul+0x4a>
   107ec:	4653      	mov	r3, sl
   107ee:	4323      	orrs	r3, r4
   107f0:	d12a      	bne.n	10848 <__aeabi_dmul+0x19c>
   107f2:	2400      	movs	r4, #0
   107f4:	2002      	movs	r0, #2
   107f6:	e796      	b.n	10726 <__aeabi_dmul+0x7a>
   107f8:	4653      	mov	r3, sl
   107fa:	4323      	orrs	r3, r4
   107fc:	d020      	beq.n	10840 <__aeabi_dmul+0x194>
   107fe:	2c00      	cmp	r4, #0
   10800:	d100      	bne.n	10804 <__aeabi_dmul+0x158>
   10802:	e157      	b.n	10ab4 <__aeabi_dmul+0x408>
   10804:	0020      	movs	r0, r4
   10806:	f000 fde7 	bl	113d8 <__clzsi2>
   1080a:	0003      	movs	r3, r0
   1080c:	3b0b      	subs	r3, #11
   1080e:	2b1c      	cmp	r3, #28
   10810:	dd00      	ble.n	10814 <__aeabi_dmul+0x168>
   10812:	e149      	b.n	10aa8 <__aeabi_dmul+0x3fc>
   10814:	211d      	movs	r1, #29
   10816:	1acb      	subs	r3, r1, r3
   10818:	4651      	mov	r1, sl
   1081a:	0002      	movs	r2, r0
   1081c:	40d9      	lsrs	r1, r3
   1081e:	4653      	mov	r3, sl
   10820:	3a08      	subs	r2, #8
   10822:	4094      	lsls	r4, r2
   10824:	4093      	lsls	r3, r2
   10826:	430c      	orrs	r4, r1
   10828:	4a1b      	ldr	r2, [pc, #108]	; (10898 <__aeabi_dmul+0x1ec>)
   1082a:	1a12      	subs	r2, r2, r0
   1082c:	2000      	movs	r0, #0
   1082e:	e77a      	b.n	10726 <__aeabi_dmul+0x7a>
   10830:	2501      	movs	r5, #1
   10832:	9b01      	ldr	r3, [sp, #4]
   10834:	4c14      	ldr	r4, [pc, #80]	; (10888 <__aeabi_dmul+0x1dc>)
   10836:	401d      	ands	r5, r3
   10838:	2300      	movs	r3, #0
   1083a:	2200      	movs	r2, #0
   1083c:	4699      	mov	r9, r3
   1083e:	e79c      	b.n	1077a <__aeabi_dmul+0xce>
   10840:	2400      	movs	r4, #0
   10842:	2200      	movs	r2, #0
   10844:	2001      	movs	r0, #1
   10846:	e76e      	b.n	10726 <__aeabi_dmul+0x7a>
   10848:	4653      	mov	r3, sl
   1084a:	2003      	movs	r0, #3
   1084c:	e76b      	b.n	10726 <__aeabi_dmul+0x7a>
   1084e:	2300      	movs	r3, #0
   10850:	469b      	mov	fp, r3
   10852:	3301      	adds	r3, #1
   10854:	2704      	movs	r7, #4
   10856:	2600      	movs	r6, #0
   10858:	9302      	str	r3, [sp, #8]
   1085a:	e74c      	b.n	106f6 <__aeabi_dmul+0x4a>
   1085c:	2303      	movs	r3, #3
   1085e:	4681      	mov	r9, r0
   10860:	270c      	movs	r7, #12
   10862:	9302      	str	r3, [sp, #8]
   10864:	e747      	b.n	106f6 <__aeabi_dmul+0x4a>
   10866:	2280      	movs	r2, #128	; 0x80
   10868:	2300      	movs	r3, #0
   1086a:	2500      	movs	r5, #0
   1086c:	0312      	lsls	r2, r2, #12
   1086e:	4699      	mov	r9, r3
   10870:	4c05      	ldr	r4, [pc, #20]	; (10888 <__aeabi_dmul+0x1dc>)
   10872:	e782      	b.n	1077a <__aeabi_dmul+0xce>
   10874:	465c      	mov	r4, fp
   10876:	464b      	mov	r3, r9
   10878:	9802      	ldr	r0, [sp, #8]
   1087a:	e76f      	b.n	1075c <__aeabi_dmul+0xb0>
   1087c:	465c      	mov	r4, fp
   1087e:	464b      	mov	r3, r9
   10880:	9501      	str	r5, [sp, #4]
   10882:	9802      	ldr	r0, [sp, #8]
   10884:	e76a      	b.n	1075c <__aeabi_dmul+0xb0>
   10886:	46c0      	nop			; (mov r8, r8)
   10888:	000007ff 	.word	0x000007ff
   1088c:	fffffc01 	.word	0xfffffc01
   10890:	00017760 	.word	0x00017760
   10894:	800fffff 	.word	0x800fffff
   10898:	fffffc0d 	.word	0xfffffc0d
   1089c:	464a      	mov	r2, r9
   1089e:	4649      	mov	r1, r9
   108a0:	0c17      	lsrs	r7, r2, #16
   108a2:	0c1a      	lsrs	r2, r3, #16
   108a4:	041b      	lsls	r3, r3, #16
   108a6:	0c1b      	lsrs	r3, r3, #16
   108a8:	0408      	lsls	r0, r1, #16
   108aa:	0019      	movs	r1, r3
   108ac:	0c00      	lsrs	r0, r0, #16
   108ae:	4341      	muls	r1, r0
   108b0:	0015      	movs	r5, r2
   108b2:	4688      	mov	r8, r1
   108b4:	0019      	movs	r1, r3
   108b6:	437d      	muls	r5, r7
   108b8:	4379      	muls	r1, r7
   108ba:	9503      	str	r5, [sp, #12]
   108bc:	4689      	mov	r9, r1
   108be:	0029      	movs	r1, r5
   108c0:	0015      	movs	r5, r2
   108c2:	4345      	muls	r5, r0
   108c4:	444d      	add	r5, r9
   108c6:	9502      	str	r5, [sp, #8]
   108c8:	4645      	mov	r5, r8
   108ca:	0c2d      	lsrs	r5, r5, #16
   108cc:	46aa      	mov	sl, r5
   108ce:	9d02      	ldr	r5, [sp, #8]
   108d0:	4455      	add	r5, sl
   108d2:	45a9      	cmp	r9, r5
   108d4:	d906      	bls.n	108e4 <__aeabi_dmul+0x238>
   108d6:	468a      	mov	sl, r1
   108d8:	2180      	movs	r1, #128	; 0x80
   108da:	0249      	lsls	r1, r1, #9
   108dc:	4689      	mov	r9, r1
   108de:	44ca      	add	sl, r9
   108e0:	4651      	mov	r1, sl
   108e2:	9103      	str	r1, [sp, #12]
   108e4:	0c29      	lsrs	r1, r5, #16
   108e6:	9104      	str	r1, [sp, #16]
   108e8:	4641      	mov	r1, r8
   108ea:	0409      	lsls	r1, r1, #16
   108ec:	042d      	lsls	r5, r5, #16
   108ee:	0c09      	lsrs	r1, r1, #16
   108f0:	4688      	mov	r8, r1
   108f2:	0029      	movs	r1, r5
   108f4:	0c25      	lsrs	r5, r4, #16
   108f6:	0424      	lsls	r4, r4, #16
   108f8:	4441      	add	r1, r8
   108fa:	0c24      	lsrs	r4, r4, #16
   108fc:	9105      	str	r1, [sp, #20]
   108fe:	0021      	movs	r1, r4
   10900:	4341      	muls	r1, r0
   10902:	4688      	mov	r8, r1
   10904:	0021      	movs	r1, r4
   10906:	4379      	muls	r1, r7
   10908:	468a      	mov	sl, r1
   1090a:	4368      	muls	r0, r5
   1090c:	4641      	mov	r1, r8
   1090e:	4450      	add	r0, sl
   10910:	4681      	mov	r9, r0
   10912:	0c08      	lsrs	r0, r1, #16
   10914:	4448      	add	r0, r9
   10916:	436f      	muls	r7, r5
   10918:	4582      	cmp	sl, r0
   1091a:	d903      	bls.n	10924 <__aeabi_dmul+0x278>
   1091c:	2180      	movs	r1, #128	; 0x80
   1091e:	0249      	lsls	r1, r1, #9
   10920:	4689      	mov	r9, r1
   10922:	444f      	add	r7, r9
   10924:	0c01      	lsrs	r1, r0, #16
   10926:	4689      	mov	r9, r1
   10928:	0039      	movs	r1, r7
   1092a:	4449      	add	r1, r9
   1092c:	9102      	str	r1, [sp, #8]
   1092e:	4641      	mov	r1, r8
   10930:	040f      	lsls	r7, r1, #16
   10932:	9904      	ldr	r1, [sp, #16]
   10934:	0c3f      	lsrs	r7, r7, #16
   10936:	4688      	mov	r8, r1
   10938:	0400      	lsls	r0, r0, #16
   1093a:	19c0      	adds	r0, r0, r7
   1093c:	4480      	add	r8, r0
   1093e:	4641      	mov	r1, r8
   10940:	9104      	str	r1, [sp, #16]
   10942:	4659      	mov	r1, fp
   10944:	0c0f      	lsrs	r7, r1, #16
   10946:	0409      	lsls	r1, r1, #16
   10948:	0c09      	lsrs	r1, r1, #16
   1094a:	4688      	mov	r8, r1
   1094c:	4359      	muls	r1, r3
   1094e:	468a      	mov	sl, r1
   10950:	0039      	movs	r1, r7
   10952:	4351      	muls	r1, r2
   10954:	4689      	mov	r9, r1
   10956:	4641      	mov	r1, r8
   10958:	434a      	muls	r2, r1
   1095a:	4651      	mov	r1, sl
   1095c:	0c09      	lsrs	r1, r1, #16
   1095e:	468b      	mov	fp, r1
   10960:	437b      	muls	r3, r7
   10962:	18d2      	adds	r2, r2, r3
   10964:	445a      	add	r2, fp
   10966:	4293      	cmp	r3, r2
   10968:	d903      	bls.n	10972 <__aeabi_dmul+0x2c6>
   1096a:	2380      	movs	r3, #128	; 0x80
   1096c:	025b      	lsls	r3, r3, #9
   1096e:	469b      	mov	fp, r3
   10970:	44d9      	add	r9, fp
   10972:	4651      	mov	r1, sl
   10974:	0409      	lsls	r1, r1, #16
   10976:	0c09      	lsrs	r1, r1, #16
   10978:	468a      	mov	sl, r1
   1097a:	4641      	mov	r1, r8
   1097c:	4361      	muls	r1, r4
   1097e:	437c      	muls	r4, r7
   10980:	0c13      	lsrs	r3, r2, #16
   10982:	0412      	lsls	r2, r2, #16
   10984:	444b      	add	r3, r9
   10986:	4452      	add	r2, sl
   10988:	46a1      	mov	r9, r4
   1098a:	468a      	mov	sl, r1
   1098c:	003c      	movs	r4, r7
   1098e:	4641      	mov	r1, r8
   10990:	436c      	muls	r4, r5
   10992:	434d      	muls	r5, r1
   10994:	4651      	mov	r1, sl
   10996:	444d      	add	r5, r9
   10998:	0c0f      	lsrs	r7, r1, #16
   1099a:	197d      	adds	r5, r7, r5
   1099c:	45a9      	cmp	r9, r5
   1099e:	d903      	bls.n	109a8 <__aeabi_dmul+0x2fc>
   109a0:	2180      	movs	r1, #128	; 0x80
   109a2:	0249      	lsls	r1, r1, #9
   109a4:	4688      	mov	r8, r1
   109a6:	4444      	add	r4, r8
   109a8:	9f04      	ldr	r7, [sp, #16]
   109aa:	9903      	ldr	r1, [sp, #12]
   109ac:	46b8      	mov	r8, r7
   109ae:	4441      	add	r1, r8
   109b0:	468b      	mov	fp, r1
   109b2:	4583      	cmp	fp, r0
   109b4:	4180      	sbcs	r0, r0
   109b6:	4241      	negs	r1, r0
   109b8:	4688      	mov	r8, r1
   109ba:	4651      	mov	r1, sl
   109bc:	0408      	lsls	r0, r1, #16
   109be:	042f      	lsls	r7, r5, #16
   109c0:	0c00      	lsrs	r0, r0, #16
   109c2:	183f      	adds	r7, r7, r0
   109c4:	4658      	mov	r0, fp
   109c6:	9902      	ldr	r1, [sp, #8]
   109c8:	1810      	adds	r0, r2, r0
   109ca:	4689      	mov	r9, r1
   109cc:	4290      	cmp	r0, r2
   109ce:	4192      	sbcs	r2, r2
   109d0:	444f      	add	r7, r9
   109d2:	46ba      	mov	sl, r7
   109d4:	4252      	negs	r2, r2
   109d6:	4699      	mov	r9, r3
   109d8:	4693      	mov	fp, r2
   109da:	44c2      	add	sl, r8
   109dc:	44d1      	add	r9, sl
   109de:	44cb      	add	fp, r9
   109e0:	428f      	cmp	r7, r1
   109e2:	41bf      	sbcs	r7, r7
   109e4:	45c2      	cmp	sl, r8
   109e6:	4189      	sbcs	r1, r1
   109e8:	4599      	cmp	r9, r3
   109ea:	419b      	sbcs	r3, r3
   109ec:	4593      	cmp	fp, r2
   109ee:	4192      	sbcs	r2, r2
   109f0:	427f      	negs	r7, r7
   109f2:	4249      	negs	r1, r1
   109f4:	0c2d      	lsrs	r5, r5, #16
   109f6:	4252      	negs	r2, r2
   109f8:	430f      	orrs	r7, r1
   109fa:	425b      	negs	r3, r3
   109fc:	4313      	orrs	r3, r2
   109fe:	197f      	adds	r7, r7, r5
   10a00:	18ff      	adds	r7, r7, r3
   10a02:	465b      	mov	r3, fp
   10a04:	193c      	adds	r4, r7, r4
   10a06:	0ddb      	lsrs	r3, r3, #23
   10a08:	9a05      	ldr	r2, [sp, #20]
   10a0a:	0264      	lsls	r4, r4, #9
   10a0c:	431c      	orrs	r4, r3
   10a0e:	0243      	lsls	r3, r0, #9
   10a10:	4313      	orrs	r3, r2
   10a12:	1e5d      	subs	r5, r3, #1
   10a14:	41ab      	sbcs	r3, r5
   10a16:	465a      	mov	r2, fp
   10a18:	0dc0      	lsrs	r0, r0, #23
   10a1a:	4303      	orrs	r3, r0
   10a1c:	0252      	lsls	r2, r2, #9
   10a1e:	4313      	orrs	r3, r2
   10a20:	01e2      	lsls	r2, r4, #7
   10a22:	d556      	bpl.n	10ad2 <__aeabi_dmul+0x426>
   10a24:	2001      	movs	r0, #1
   10a26:	085a      	lsrs	r2, r3, #1
   10a28:	4003      	ands	r3, r0
   10a2a:	4313      	orrs	r3, r2
   10a2c:	07e2      	lsls	r2, r4, #31
   10a2e:	4313      	orrs	r3, r2
   10a30:	0864      	lsrs	r4, r4, #1
   10a32:	485a      	ldr	r0, [pc, #360]	; (10b9c <__aeabi_dmul+0x4f0>)
   10a34:	4460      	add	r0, ip
   10a36:	2800      	cmp	r0, #0
   10a38:	dd4d      	ble.n	10ad6 <__aeabi_dmul+0x42a>
   10a3a:	075a      	lsls	r2, r3, #29
   10a3c:	d009      	beq.n	10a52 <__aeabi_dmul+0x3a6>
   10a3e:	220f      	movs	r2, #15
   10a40:	401a      	ands	r2, r3
   10a42:	2a04      	cmp	r2, #4
   10a44:	d005      	beq.n	10a52 <__aeabi_dmul+0x3a6>
   10a46:	1d1a      	adds	r2, r3, #4
   10a48:	429a      	cmp	r2, r3
   10a4a:	419b      	sbcs	r3, r3
   10a4c:	425b      	negs	r3, r3
   10a4e:	18e4      	adds	r4, r4, r3
   10a50:	0013      	movs	r3, r2
   10a52:	01e2      	lsls	r2, r4, #7
   10a54:	d504      	bpl.n	10a60 <__aeabi_dmul+0x3b4>
   10a56:	2080      	movs	r0, #128	; 0x80
   10a58:	4a51      	ldr	r2, [pc, #324]	; (10ba0 <__aeabi_dmul+0x4f4>)
   10a5a:	00c0      	lsls	r0, r0, #3
   10a5c:	4014      	ands	r4, r2
   10a5e:	4460      	add	r0, ip
   10a60:	4a50      	ldr	r2, [pc, #320]	; (10ba4 <__aeabi_dmul+0x4f8>)
   10a62:	4290      	cmp	r0, r2
   10a64:	dd00      	ble.n	10a68 <__aeabi_dmul+0x3bc>
   10a66:	e6e3      	b.n	10830 <__aeabi_dmul+0x184>
   10a68:	2501      	movs	r5, #1
   10a6a:	08db      	lsrs	r3, r3, #3
   10a6c:	0762      	lsls	r2, r4, #29
   10a6e:	431a      	orrs	r2, r3
   10a70:	0264      	lsls	r4, r4, #9
   10a72:	9b01      	ldr	r3, [sp, #4]
   10a74:	4691      	mov	r9, r2
   10a76:	0b22      	lsrs	r2, r4, #12
   10a78:	0544      	lsls	r4, r0, #21
   10a7a:	0d64      	lsrs	r4, r4, #21
   10a7c:	401d      	ands	r5, r3
   10a7e:	e67c      	b.n	1077a <__aeabi_dmul+0xce>
   10a80:	2280      	movs	r2, #128	; 0x80
   10a82:	4659      	mov	r1, fp
   10a84:	0312      	lsls	r2, r2, #12
   10a86:	4211      	tst	r1, r2
   10a88:	d008      	beq.n	10a9c <__aeabi_dmul+0x3f0>
   10a8a:	4214      	tst	r4, r2
   10a8c:	d106      	bne.n	10a9c <__aeabi_dmul+0x3f0>
   10a8e:	4322      	orrs	r2, r4
   10a90:	0312      	lsls	r2, r2, #12
   10a92:	0b12      	lsrs	r2, r2, #12
   10a94:	4645      	mov	r5, r8
   10a96:	4699      	mov	r9, r3
   10a98:	4c43      	ldr	r4, [pc, #268]	; (10ba8 <__aeabi_dmul+0x4fc>)
   10a9a:	e66e      	b.n	1077a <__aeabi_dmul+0xce>
   10a9c:	465b      	mov	r3, fp
   10a9e:	431a      	orrs	r2, r3
   10aa0:	0312      	lsls	r2, r2, #12
   10aa2:	0b12      	lsrs	r2, r2, #12
   10aa4:	4c40      	ldr	r4, [pc, #256]	; (10ba8 <__aeabi_dmul+0x4fc>)
   10aa6:	e668      	b.n	1077a <__aeabi_dmul+0xce>
   10aa8:	0003      	movs	r3, r0
   10aaa:	4654      	mov	r4, sl
   10aac:	3b28      	subs	r3, #40	; 0x28
   10aae:	409c      	lsls	r4, r3
   10ab0:	2300      	movs	r3, #0
   10ab2:	e6b9      	b.n	10828 <__aeabi_dmul+0x17c>
   10ab4:	f000 fc90 	bl	113d8 <__clzsi2>
   10ab8:	3020      	adds	r0, #32
   10aba:	e6a6      	b.n	1080a <__aeabi_dmul+0x15e>
   10abc:	0003      	movs	r3, r0
   10abe:	3b28      	subs	r3, #40	; 0x28
   10ac0:	409f      	lsls	r7, r3
   10ac2:	2300      	movs	r3, #0
   10ac4:	46bb      	mov	fp, r7
   10ac6:	4699      	mov	r9, r3
   10ac8:	e68a      	b.n	107e0 <__aeabi_dmul+0x134>
   10aca:	f000 fc85 	bl	113d8 <__clzsi2>
   10ace:	3020      	adds	r0, #32
   10ad0:	e674      	b.n	107bc <__aeabi_dmul+0x110>
   10ad2:	46b4      	mov	ip, r6
   10ad4:	e7ad      	b.n	10a32 <__aeabi_dmul+0x386>
   10ad6:	2501      	movs	r5, #1
   10ad8:	1a2a      	subs	r2, r5, r0
   10ada:	2a38      	cmp	r2, #56	; 0x38
   10adc:	dd06      	ble.n	10aec <__aeabi_dmul+0x440>
   10ade:	9b01      	ldr	r3, [sp, #4]
   10ae0:	2400      	movs	r4, #0
   10ae2:	401d      	ands	r5, r3
   10ae4:	2300      	movs	r3, #0
   10ae6:	2200      	movs	r2, #0
   10ae8:	4699      	mov	r9, r3
   10aea:	e646      	b.n	1077a <__aeabi_dmul+0xce>
   10aec:	2a1f      	cmp	r2, #31
   10aee:	dc21      	bgt.n	10b34 <__aeabi_dmul+0x488>
   10af0:	2520      	movs	r5, #32
   10af2:	0020      	movs	r0, r4
   10af4:	1aad      	subs	r5, r5, r2
   10af6:	001e      	movs	r6, r3
   10af8:	40ab      	lsls	r3, r5
   10afa:	40a8      	lsls	r0, r5
   10afc:	40d6      	lsrs	r6, r2
   10afe:	1e5d      	subs	r5, r3, #1
   10b00:	41ab      	sbcs	r3, r5
   10b02:	4330      	orrs	r0, r6
   10b04:	4318      	orrs	r0, r3
   10b06:	40d4      	lsrs	r4, r2
   10b08:	0743      	lsls	r3, r0, #29
   10b0a:	d009      	beq.n	10b20 <__aeabi_dmul+0x474>
   10b0c:	230f      	movs	r3, #15
   10b0e:	4003      	ands	r3, r0
   10b10:	2b04      	cmp	r3, #4
   10b12:	d005      	beq.n	10b20 <__aeabi_dmul+0x474>
   10b14:	0003      	movs	r3, r0
   10b16:	1d18      	adds	r0, r3, #4
   10b18:	4298      	cmp	r0, r3
   10b1a:	419b      	sbcs	r3, r3
   10b1c:	425b      	negs	r3, r3
   10b1e:	18e4      	adds	r4, r4, r3
   10b20:	0223      	lsls	r3, r4, #8
   10b22:	d521      	bpl.n	10b68 <__aeabi_dmul+0x4bc>
   10b24:	2501      	movs	r5, #1
   10b26:	9b01      	ldr	r3, [sp, #4]
   10b28:	2401      	movs	r4, #1
   10b2a:	401d      	ands	r5, r3
   10b2c:	2300      	movs	r3, #0
   10b2e:	2200      	movs	r2, #0
   10b30:	4699      	mov	r9, r3
   10b32:	e622      	b.n	1077a <__aeabi_dmul+0xce>
   10b34:	251f      	movs	r5, #31
   10b36:	0021      	movs	r1, r4
   10b38:	426d      	negs	r5, r5
   10b3a:	1a28      	subs	r0, r5, r0
   10b3c:	40c1      	lsrs	r1, r0
   10b3e:	0008      	movs	r0, r1
   10b40:	2a20      	cmp	r2, #32
   10b42:	d01d      	beq.n	10b80 <__aeabi_dmul+0x4d4>
   10b44:	355f      	adds	r5, #95	; 0x5f
   10b46:	1aaa      	subs	r2, r5, r2
   10b48:	4094      	lsls	r4, r2
   10b4a:	4323      	orrs	r3, r4
   10b4c:	1e5c      	subs	r4, r3, #1
   10b4e:	41a3      	sbcs	r3, r4
   10b50:	2507      	movs	r5, #7
   10b52:	4303      	orrs	r3, r0
   10b54:	401d      	ands	r5, r3
   10b56:	2200      	movs	r2, #0
   10b58:	2d00      	cmp	r5, #0
   10b5a:	d009      	beq.n	10b70 <__aeabi_dmul+0x4c4>
   10b5c:	220f      	movs	r2, #15
   10b5e:	2400      	movs	r4, #0
   10b60:	401a      	ands	r2, r3
   10b62:	0018      	movs	r0, r3
   10b64:	2a04      	cmp	r2, #4
   10b66:	d1d6      	bne.n	10b16 <__aeabi_dmul+0x46a>
   10b68:	0003      	movs	r3, r0
   10b6a:	0765      	lsls	r5, r4, #29
   10b6c:	0264      	lsls	r4, r4, #9
   10b6e:	0b22      	lsrs	r2, r4, #12
   10b70:	08db      	lsrs	r3, r3, #3
   10b72:	432b      	orrs	r3, r5
   10b74:	2501      	movs	r5, #1
   10b76:	4699      	mov	r9, r3
   10b78:	9b01      	ldr	r3, [sp, #4]
   10b7a:	2400      	movs	r4, #0
   10b7c:	401d      	ands	r5, r3
   10b7e:	e5fc      	b.n	1077a <__aeabi_dmul+0xce>
   10b80:	2400      	movs	r4, #0
   10b82:	e7e2      	b.n	10b4a <__aeabi_dmul+0x49e>
   10b84:	2280      	movs	r2, #128	; 0x80
   10b86:	2501      	movs	r5, #1
   10b88:	0312      	lsls	r2, r2, #12
   10b8a:	4322      	orrs	r2, r4
   10b8c:	9901      	ldr	r1, [sp, #4]
   10b8e:	0312      	lsls	r2, r2, #12
   10b90:	0b12      	lsrs	r2, r2, #12
   10b92:	400d      	ands	r5, r1
   10b94:	4699      	mov	r9, r3
   10b96:	4c04      	ldr	r4, [pc, #16]	; (10ba8 <__aeabi_dmul+0x4fc>)
   10b98:	e5ef      	b.n	1077a <__aeabi_dmul+0xce>
   10b9a:	46c0      	nop			; (mov r8, r8)
   10b9c:	000003ff 	.word	0x000003ff
   10ba0:	feffffff 	.word	0xfeffffff
   10ba4:	000007fe 	.word	0x000007fe
   10ba8:	000007ff 	.word	0x000007ff

00010bac <__aeabi_dsub>:
   10bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bae:	4646      	mov	r6, r8
   10bb0:	46d6      	mov	lr, sl
   10bb2:	464f      	mov	r7, r9
   10bb4:	030c      	lsls	r4, r1, #12
   10bb6:	b5c0      	push	{r6, r7, lr}
   10bb8:	0fcd      	lsrs	r5, r1, #31
   10bba:	004e      	lsls	r6, r1, #1
   10bbc:	0a61      	lsrs	r1, r4, #9
   10bbe:	0f44      	lsrs	r4, r0, #29
   10bc0:	430c      	orrs	r4, r1
   10bc2:	00c1      	lsls	r1, r0, #3
   10bc4:	0058      	lsls	r0, r3, #1
   10bc6:	0d40      	lsrs	r0, r0, #21
   10bc8:	4684      	mov	ip, r0
   10bca:	468a      	mov	sl, r1
   10bcc:	000f      	movs	r7, r1
   10bce:	0319      	lsls	r1, r3, #12
   10bd0:	0f50      	lsrs	r0, r2, #29
   10bd2:	0a49      	lsrs	r1, r1, #9
   10bd4:	4301      	orrs	r1, r0
   10bd6:	48c6      	ldr	r0, [pc, #792]	; (10ef0 <__aeabi_dsub+0x344>)
   10bd8:	0d76      	lsrs	r6, r6, #21
   10bda:	46a8      	mov	r8, r5
   10bdc:	0fdb      	lsrs	r3, r3, #31
   10bde:	00d2      	lsls	r2, r2, #3
   10be0:	4584      	cmp	ip, r0
   10be2:	d100      	bne.n	10be6 <__aeabi_dsub+0x3a>
   10be4:	e0d8      	b.n	10d98 <__aeabi_dsub+0x1ec>
   10be6:	2001      	movs	r0, #1
   10be8:	4043      	eors	r3, r0
   10bea:	42ab      	cmp	r3, r5
   10bec:	d100      	bne.n	10bf0 <__aeabi_dsub+0x44>
   10bee:	e0a6      	b.n	10d3e <__aeabi_dsub+0x192>
   10bf0:	4660      	mov	r0, ip
   10bf2:	1a35      	subs	r5, r6, r0
   10bf4:	2d00      	cmp	r5, #0
   10bf6:	dc00      	bgt.n	10bfa <__aeabi_dsub+0x4e>
   10bf8:	e105      	b.n	10e06 <__aeabi_dsub+0x25a>
   10bfa:	2800      	cmp	r0, #0
   10bfc:	d110      	bne.n	10c20 <__aeabi_dsub+0x74>
   10bfe:	000b      	movs	r3, r1
   10c00:	4313      	orrs	r3, r2
   10c02:	d100      	bne.n	10c06 <__aeabi_dsub+0x5a>
   10c04:	e0d7      	b.n	10db6 <__aeabi_dsub+0x20a>
   10c06:	1e6b      	subs	r3, r5, #1
   10c08:	2b00      	cmp	r3, #0
   10c0a:	d000      	beq.n	10c0e <__aeabi_dsub+0x62>
   10c0c:	e14b      	b.n	10ea6 <__aeabi_dsub+0x2fa>
   10c0e:	4653      	mov	r3, sl
   10c10:	1a9f      	subs	r7, r3, r2
   10c12:	45ba      	cmp	sl, r7
   10c14:	4180      	sbcs	r0, r0
   10c16:	1a64      	subs	r4, r4, r1
   10c18:	4240      	negs	r0, r0
   10c1a:	1a24      	subs	r4, r4, r0
   10c1c:	2601      	movs	r6, #1
   10c1e:	e01e      	b.n	10c5e <__aeabi_dsub+0xb2>
   10c20:	4bb3      	ldr	r3, [pc, #716]	; (10ef0 <__aeabi_dsub+0x344>)
   10c22:	429e      	cmp	r6, r3
   10c24:	d048      	beq.n	10cb8 <__aeabi_dsub+0x10c>
   10c26:	2380      	movs	r3, #128	; 0x80
   10c28:	041b      	lsls	r3, r3, #16
   10c2a:	4319      	orrs	r1, r3
   10c2c:	2d38      	cmp	r5, #56	; 0x38
   10c2e:	dd00      	ble.n	10c32 <__aeabi_dsub+0x86>
   10c30:	e119      	b.n	10e66 <__aeabi_dsub+0x2ba>
   10c32:	2d1f      	cmp	r5, #31
   10c34:	dd00      	ble.n	10c38 <__aeabi_dsub+0x8c>
   10c36:	e14c      	b.n	10ed2 <__aeabi_dsub+0x326>
   10c38:	2320      	movs	r3, #32
   10c3a:	000f      	movs	r7, r1
   10c3c:	1b5b      	subs	r3, r3, r5
   10c3e:	0010      	movs	r0, r2
   10c40:	409a      	lsls	r2, r3
   10c42:	409f      	lsls	r7, r3
   10c44:	40e8      	lsrs	r0, r5
   10c46:	1e53      	subs	r3, r2, #1
   10c48:	419a      	sbcs	r2, r3
   10c4a:	40e9      	lsrs	r1, r5
   10c4c:	4307      	orrs	r7, r0
   10c4e:	4317      	orrs	r7, r2
   10c50:	4653      	mov	r3, sl
   10c52:	1bdf      	subs	r7, r3, r7
   10c54:	1a61      	subs	r1, r4, r1
   10c56:	45ba      	cmp	sl, r7
   10c58:	41a4      	sbcs	r4, r4
   10c5a:	4264      	negs	r4, r4
   10c5c:	1b0c      	subs	r4, r1, r4
   10c5e:	0223      	lsls	r3, r4, #8
   10c60:	d400      	bmi.n	10c64 <__aeabi_dsub+0xb8>
   10c62:	e0c5      	b.n	10df0 <__aeabi_dsub+0x244>
   10c64:	0264      	lsls	r4, r4, #9
   10c66:	0a65      	lsrs	r5, r4, #9
   10c68:	2d00      	cmp	r5, #0
   10c6a:	d100      	bne.n	10c6e <__aeabi_dsub+0xc2>
   10c6c:	e0f6      	b.n	10e5c <__aeabi_dsub+0x2b0>
   10c6e:	0028      	movs	r0, r5
   10c70:	f000 fbb2 	bl	113d8 <__clzsi2>
   10c74:	0003      	movs	r3, r0
   10c76:	3b08      	subs	r3, #8
   10c78:	2b1f      	cmp	r3, #31
   10c7a:	dd00      	ble.n	10c7e <__aeabi_dsub+0xd2>
   10c7c:	e0e9      	b.n	10e52 <__aeabi_dsub+0x2a6>
   10c7e:	2220      	movs	r2, #32
   10c80:	003c      	movs	r4, r7
   10c82:	1ad2      	subs	r2, r2, r3
   10c84:	409d      	lsls	r5, r3
   10c86:	40d4      	lsrs	r4, r2
   10c88:	409f      	lsls	r7, r3
   10c8a:	4325      	orrs	r5, r4
   10c8c:	429e      	cmp	r6, r3
   10c8e:	dd00      	ble.n	10c92 <__aeabi_dsub+0xe6>
   10c90:	e0db      	b.n	10e4a <__aeabi_dsub+0x29e>
   10c92:	1b9e      	subs	r6, r3, r6
   10c94:	1c73      	adds	r3, r6, #1
   10c96:	2b1f      	cmp	r3, #31
   10c98:	dd00      	ble.n	10c9c <__aeabi_dsub+0xf0>
   10c9a:	e10a      	b.n	10eb2 <__aeabi_dsub+0x306>
   10c9c:	2220      	movs	r2, #32
   10c9e:	0038      	movs	r0, r7
   10ca0:	1ad2      	subs	r2, r2, r3
   10ca2:	0029      	movs	r1, r5
   10ca4:	4097      	lsls	r7, r2
   10ca6:	002c      	movs	r4, r5
   10ca8:	4091      	lsls	r1, r2
   10caa:	40d8      	lsrs	r0, r3
   10cac:	1e7a      	subs	r2, r7, #1
   10cae:	4197      	sbcs	r7, r2
   10cb0:	40dc      	lsrs	r4, r3
   10cb2:	2600      	movs	r6, #0
   10cb4:	4301      	orrs	r1, r0
   10cb6:	430f      	orrs	r7, r1
   10cb8:	077b      	lsls	r3, r7, #29
   10cba:	d009      	beq.n	10cd0 <__aeabi_dsub+0x124>
   10cbc:	230f      	movs	r3, #15
   10cbe:	403b      	ands	r3, r7
   10cc0:	2b04      	cmp	r3, #4
   10cc2:	d005      	beq.n	10cd0 <__aeabi_dsub+0x124>
   10cc4:	1d3b      	adds	r3, r7, #4
   10cc6:	42bb      	cmp	r3, r7
   10cc8:	41bf      	sbcs	r7, r7
   10cca:	427f      	negs	r7, r7
   10ccc:	19e4      	adds	r4, r4, r7
   10cce:	001f      	movs	r7, r3
   10cd0:	0223      	lsls	r3, r4, #8
   10cd2:	d525      	bpl.n	10d20 <__aeabi_dsub+0x174>
   10cd4:	4b86      	ldr	r3, [pc, #536]	; (10ef0 <__aeabi_dsub+0x344>)
   10cd6:	3601      	adds	r6, #1
   10cd8:	429e      	cmp	r6, r3
   10cda:	d100      	bne.n	10cde <__aeabi_dsub+0x132>
   10cdc:	e0af      	b.n	10e3e <__aeabi_dsub+0x292>
   10cde:	4b85      	ldr	r3, [pc, #532]	; (10ef4 <__aeabi_dsub+0x348>)
   10ce0:	2501      	movs	r5, #1
   10ce2:	401c      	ands	r4, r3
   10ce4:	4643      	mov	r3, r8
   10ce6:	0762      	lsls	r2, r4, #29
   10ce8:	08ff      	lsrs	r7, r7, #3
   10cea:	0264      	lsls	r4, r4, #9
   10cec:	0576      	lsls	r6, r6, #21
   10cee:	4317      	orrs	r7, r2
   10cf0:	0b24      	lsrs	r4, r4, #12
   10cf2:	0d76      	lsrs	r6, r6, #21
   10cf4:	401d      	ands	r5, r3
   10cf6:	2100      	movs	r1, #0
   10cf8:	0324      	lsls	r4, r4, #12
   10cfa:	0b23      	lsrs	r3, r4, #12
   10cfc:	0d0c      	lsrs	r4, r1, #20
   10cfe:	4a7e      	ldr	r2, [pc, #504]	; (10ef8 <__aeabi_dsub+0x34c>)
   10d00:	0524      	lsls	r4, r4, #20
   10d02:	431c      	orrs	r4, r3
   10d04:	4014      	ands	r4, r2
   10d06:	0533      	lsls	r3, r6, #20
   10d08:	4323      	orrs	r3, r4
   10d0a:	005b      	lsls	r3, r3, #1
   10d0c:	07ed      	lsls	r5, r5, #31
   10d0e:	085b      	lsrs	r3, r3, #1
   10d10:	432b      	orrs	r3, r5
   10d12:	0038      	movs	r0, r7
   10d14:	0019      	movs	r1, r3
   10d16:	bc1c      	pop	{r2, r3, r4}
   10d18:	4690      	mov	r8, r2
   10d1a:	4699      	mov	r9, r3
   10d1c:	46a2      	mov	sl, r4
   10d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d20:	2501      	movs	r5, #1
   10d22:	4643      	mov	r3, r8
   10d24:	0762      	lsls	r2, r4, #29
   10d26:	08ff      	lsrs	r7, r7, #3
   10d28:	4317      	orrs	r7, r2
   10d2a:	08e4      	lsrs	r4, r4, #3
   10d2c:	401d      	ands	r5, r3
   10d2e:	4b70      	ldr	r3, [pc, #448]	; (10ef0 <__aeabi_dsub+0x344>)
   10d30:	429e      	cmp	r6, r3
   10d32:	d036      	beq.n	10da2 <__aeabi_dsub+0x1f6>
   10d34:	0324      	lsls	r4, r4, #12
   10d36:	0576      	lsls	r6, r6, #21
   10d38:	0b24      	lsrs	r4, r4, #12
   10d3a:	0d76      	lsrs	r6, r6, #21
   10d3c:	e7db      	b.n	10cf6 <__aeabi_dsub+0x14a>
   10d3e:	4663      	mov	r3, ip
   10d40:	1af3      	subs	r3, r6, r3
   10d42:	2b00      	cmp	r3, #0
   10d44:	dc00      	bgt.n	10d48 <__aeabi_dsub+0x19c>
   10d46:	e094      	b.n	10e72 <__aeabi_dsub+0x2c6>
   10d48:	4660      	mov	r0, ip
   10d4a:	2800      	cmp	r0, #0
   10d4c:	d035      	beq.n	10dba <__aeabi_dsub+0x20e>
   10d4e:	4868      	ldr	r0, [pc, #416]	; (10ef0 <__aeabi_dsub+0x344>)
   10d50:	4286      	cmp	r6, r0
   10d52:	d0b1      	beq.n	10cb8 <__aeabi_dsub+0x10c>
   10d54:	2780      	movs	r7, #128	; 0x80
   10d56:	043f      	lsls	r7, r7, #16
   10d58:	4339      	orrs	r1, r7
   10d5a:	2b38      	cmp	r3, #56	; 0x38
   10d5c:	dc00      	bgt.n	10d60 <__aeabi_dsub+0x1b4>
   10d5e:	e0fd      	b.n	10f5c <__aeabi_dsub+0x3b0>
   10d60:	430a      	orrs	r2, r1
   10d62:	0017      	movs	r7, r2
   10d64:	2100      	movs	r1, #0
   10d66:	1e7a      	subs	r2, r7, #1
   10d68:	4197      	sbcs	r7, r2
   10d6a:	4457      	add	r7, sl
   10d6c:	4557      	cmp	r7, sl
   10d6e:	4180      	sbcs	r0, r0
   10d70:	1909      	adds	r1, r1, r4
   10d72:	4244      	negs	r4, r0
   10d74:	190c      	adds	r4, r1, r4
   10d76:	0223      	lsls	r3, r4, #8
   10d78:	d53a      	bpl.n	10df0 <__aeabi_dsub+0x244>
   10d7a:	4b5d      	ldr	r3, [pc, #372]	; (10ef0 <__aeabi_dsub+0x344>)
   10d7c:	3601      	adds	r6, #1
   10d7e:	429e      	cmp	r6, r3
   10d80:	d100      	bne.n	10d84 <__aeabi_dsub+0x1d8>
   10d82:	e14b      	b.n	1101c <__aeabi_dsub+0x470>
   10d84:	2201      	movs	r2, #1
   10d86:	4b5b      	ldr	r3, [pc, #364]	; (10ef4 <__aeabi_dsub+0x348>)
   10d88:	401c      	ands	r4, r3
   10d8a:	087b      	lsrs	r3, r7, #1
   10d8c:	4017      	ands	r7, r2
   10d8e:	431f      	orrs	r7, r3
   10d90:	07e2      	lsls	r2, r4, #31
   10d92:	4317      	orrs	r7, r2
   10d94:	0864      	lsrs	r4, r4, #1
   10d96:	e78f      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10d98:	0008      	movs	r0, r1
   10d9a:	4310      	orrs	r0, r2
   10d9c:	d000      	beq.n	10da0 <__aeabi_dsub+0x1f4>
   10d9e:	e724      	b.n	10bea <__aeabi_dsub+0x3e>
   10da0:	e721      	b.n	10be6 <__aeabi_dsub+0x3a>
   10da2:	0023      	movs	r3, r4
   10da4:	433b      	orrs	r3, r7
   10da6:	d100      	bne.n	10daa <__aeabi_dsub+0x1fe>
   10da8:	e1b9      	b.n	1111e <__aeabi_dsub+0x572>
   10daa:	2280      	movs	r2, #128	; 0x80
   10dac:	0312      	lsls	r2, r2, #12
   10dae:	4314      	orrs	r4, r2
   10db0:	0324      	lsls	r4, r4, #12
   10db2:	0b24      	lsrs	r4, r4, #12
   10db4:	e79f      	b.n	10cf6 <__aeabi_dsub+0x14a>
   10db6:	002e      	movs	r6, r5
   10db8:	e77e      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10dba:	0008      	movs	r0, r1
   10dbc:	4310      	orrs	r0, r2
   10dbe:	d100      	bne.n	10dc2 <__aeabi_dsub+0x216>
   10dc0:	e0ca      	b.n	10f58 <__aeabi_dsub+0x3ac>
   10dc2:	1e58      	subs	r0, r3, #1
   10dc4:	4684      	mov	ip, r0
   10dc6:	2800      	cmp	r0, #0
   10dc8:	d000      	beq.n	10dcc <__aeabi_dsub+0x220>
   10dca:	e0e7      	b.n	10f9c <__aeabi_dsub+0x3f0>
   10dcc:	4452      	add	r2, sl
   10dce:	4552      	cmp	r2, sl
   10dd0:	4180      	sbcs	r0, r0
   10dd2:	1864      	adds	r4, r4, r1
   10dd4:	4240      	negs	r0, r0
   10dd6:	1824      	adds	r4, r4, r0
   10dd8:	0017      	movs	r7, r2
   10dda:	2601      	movs	r6, #1
   10ddc:	0223      	lsls	r3, r4, #8
   10dde:	d507      	bpl.n	10df0 <__aeabi_dsub+0x244>
   10de0:	2602      	movs	r6, #2
   10de2:	e7cf      	b.n	10d84 <__aeabi_dsub+0x1d8>
   10de4:	4664      	mov	r4, ip
   10de6:	432c      	orrs	r4, r5
   10de8:	d100      	bne.n	10dec <__aeabi_dsub+0x240>
   10dea:	e1b3      	b.n	11154 <__aeabi_dsub+0x5a8>
   10dec:	002c      	movs	r4, r5
   10dee:	4667      	mov	r7, ip
   10df0:	077b      	lsls	r3, r7, #29
   10df2:	d000      	beq.n	10df6 <__aeabi_dsub+0x24a>
   10df4:	e762      	b.n	10cbc <__aeabi_dsub+0x110>
   10df6:	0763      	lsls	r3, r4, #29
   10df8:	08ff      	lsrs	r7, r7, #3
   10dfa:	431f      	orrs	r7, r3
   10dfc:	2501      	movs	r5, #1
   10dfe:	4643      	mov	r3, r8
   10e00:	08e4      	lsrs	r4, r4, #3
   10e02:	401d      	ands	r5, r3
   10e04:	e793      	b.n	10d2e <__aeabi_dsub+0x182>
   10e06:	2d00      	cmp	r5, #0
   10e08:	d178      	bne.n	10efc <__aeabi_dsub+0x350>
   10e0a:	1c75      	adds	r5, r6, #1
   10e0c:	056d      	lsls	r5, r5, #21
   10e0e:	0d6d      	lsrs	r5, r5, #21
   10e10:	2d01      	cmp	r5, #1
   10e12:	dc00      	bgt.n	10e16 <__aeabi_dsub+0x26a>
   10e14:	e0f2      	b.n	10ffc <__aeabi_dsub+0x450>
   10e16:	4650      	mov	r0, sl
   10e18:	1a80      	subs	r0, r0, r2
   10e1a:	4582      	cmp	sl, r0
   10e1c:	41bf      	sbcs	r7, r7
   10e1e:	1a65      	subs	r5, r4, r1
   10e20:	427f      	negs	r7, r7
   10e22:	1bed      	subs	r5, r5, r7
   10e24:	4684      	mov	ip, r0
   10e26:	0228      	lsls	r0, r5, #8
   10e28:	d400      	bmi.n	10e2c <__aeabi_dsub+0x280>
   10e2a:	e08c      	b.n	10f46 <__aeabi_dsub+0x39a>
   10e2c:	4650      	mov	r0, sl
   10e2e:	1a17      	subs	r7, r2, r0
   10e30:	42ba      	cmp	r2, r7
   10e32:	4192      	sbcs	r2, r2
   10e34:	1b0c      	subs	r4, r1, r4
   10e36:	4255      	negs	r5, r2
   10e38:	1b65      	subs	r5, r4, r5
   10e3a:	4698      	mov	r8, r3
   10e3c:	e714      	b.n	10c68 <__aeabi_dsub+0xbc>
   10e3e:	2501      	movs	r5, #1
   10e40:	4643      	mov	r3, r8
   10e42:	2400      	movs	r4, #0
   10e44:	401d      	ands	r5, r3
   10e46:	2700      	movs	r7, #0
   10e48:	e755      	b.n	10cf6 <__aeabi_dsub+0x14a>
   10e4a:	4c2a      	ldr	r4, [pc, #168]	; (10ef4 <__aeabi_dsub+0x348>)
   10e4c:	1af6      	subs	r6, r6, r3
   10e4e:	402c      	ands	r4, r5
   10e50:	e732      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10e52:	003d      	movs	r5, r7
   10e54:	3828      	subs	r0, #40	; 0x28
   10e56:	4085      	lsls	r5, r0
   10e58:	2700      	movs	r7, #0
   10e5a:	e717      	b.n	10c8c <__aeabi_dsub+0xe0>
   10e5c:	0038      	movs	r0, r7
   10e5e:	f000 fabb 	bl	113d8 <__clzsi2>
   10e62:	3020      	adds	r0, #32
   10e64:	e706      	b.n	10c74 <__aeabi_dsub+0xc8>
   10e66:	430a      	orrs	r2, r1
   10e68:	0017      	movs	r7, r2
   10e6a:	2100      	movs	r1, #0
   10e6c:	1e7a      	subs	r2, r7, #1
   10e6e:	4197      	sbcs	r7, r2
   10e70:	e6ee      	b.n	10c50 <__aeabi_dsub+0xa4>
   10e72:	2b00      	cmp	r3, #0
   10e74:	d000      	beq.n	10e78 <__aeabi_dsub+0x2cc>
   10e76:	e0e5      	b.n	11044 <__aeabi_dsub+0x498>
   10e78:	1c73      	adds	r3, r6, #1
   10e7a:	469c      	mov	ip, r3
   10e7c:	055b      	lsls	r3, r3, #21
   10e7e:	0d5b      	lsrs	r3, r3, #21
   10e80:	2b01      	cmp	r3, #1
   10e82:	dc00      	bgt.n	10e86 <__aeabi_dsub+0x2da>
   10e84:	e09f      	b.n	10fc6 <__aeabi_dsub+0x41a>
   10e86:	4b1a      	ldr	r3, [pc, #104]	; (10ef0 <__aeabi_dsub+0x344>)
   10e88:	459c      	cmp	ip, r3
   10e8a:	d100      	bne.n	10e8e <__aeabi_dsub+0x2e2>
   10e8c:	e0c5      	b.n	1101a <__aeabi_dsub+0x46e>
   10e8e:	4452      	add	r2, sl
   10e90:	4552      	cmp	r2, sl
   10e92:	4180      	sbcs	r0, r0
   10e94:	1864      	adds	r4, r4, r1
   10e96:	4240      	negs	r0, r0
   10e98:	1824      	adds	r4, r4, r0
   10e9a:	07e7      	lsls	r7, r4, #31
   10e9c:	0852      	lsrs	r2, r2, #1
   10e9e:	4317      	orrs	r7, r2
   10ea0:	0864      	lsrs	r4, r4, #1
   10ea2:	4666      	mov	r6, ip
   10ea4:	e708      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10ea6:	4812      	ldr	r0, [pc, #72]	; (10ef0 <__aeabi_dsub+0x344>)
   10ea8:	4285      	cmp	r5, r0
   10eaa:	d100      	bne.n	10eae <__aeabi_dsub+0x302>
   10eac:	e085      	b.n	10fba <__aeabi_dsub+0x40e>
   10eae:	001d      	movs	r5, r3
   10eb0:	e6bc      	b.n	10c2c <__aeabi_dsub+0x80>
   10eb2:	0029      	movs	r1, r5
   10eb4:	3e1f      	subs	r6, #31
   10eb6:	40f1      	lsrs	r1, r6
   10eb8:	2b20      	cmp	r3, #32
   10eba:	d100      	bne.n	10ebe <__aeabi_dsub+0x312>
   10ebc:	e07f      	b.n	10fbe <__aeabi_dsub+0x412>
   10ebe:	2240      	movs	r2, #64	; 0x40
   10ec0:	1ad3      	subs	r3, r2, r3
   10ec2:	409d      	lsls	r5, r3
   10ec4:	432f      	orrs	r7, r5
   10ec6:	1e7d      	subs	r5, r7, #1
   10ec8:	41af      	sbcs	r7, r5
   10eca:	2400      	movs	r4, #0
   10ecc:	430f      	orrs	r7, r1
   10ece:	2600      	movs	r6, #0
   10ed0:	e78e      	b.n	10df0 <__aeabi_dsub+0x244>
   10ed2:	002b      	movs	r3, r5
   10ed4:	000f      	movs	r7, r1
   10ed6:	3b20      	subs	r3, #32
   10ed8:	40df      	lsrs	r7, r3
   10eda:	2d20      	cmp	r5, #32
   10edc:	d071      	beq.n	10fc2 <__aeabi_dsub+0x416>
   10ede:	2340      	movs	r3, #64	; 0x40
   10ee0:	1b5d      	subs	r5, r3, r5
   10ee2:	40a9      	lsls	r1, r5
   10ee4:	430a      	orrs	r2, r1
   10ee6:	1e51      	subs	r1, r2, #1
   10ee8:	418a      	sbcs	r2, r1
   10eea:	2100      	movs	r1, #0
   10eec:	4317      	orrs	r7, r2
   10eee:	e6af      	b.n	10c50 <__aeabi_dsub+0xa4>
   10ef0:	000007ff 	.word	0x000007ff
   10ef4:	ff7fffff 	.word	0xff7fffff
   10ef8:	800fffff 	.word	0x800fffff
   10efc:	2e00      	cmp	r6, #0
   10efe:	d03e      	beq.n	10f7e <__aeabi_dsub+0x3d2>
   10f00:	4eb3      	ldr	r6, [pc, #716]	; (111d0 <__aeabi_dsub+0x624>)
   10f02:	45b4      	cmp	ip, r6
   10f04:	d045      	beq.n	10f92 <__aeabi_dsub+0x3e6>
   10f06:	2680      	movs	r6, #128	; 0x80
   10f08:	0436      	lsls	r6, r6, #16
   10f0a:	426d      	negs	r5, r5
   10f0c:	4334      	orrs	r4, r6
   10f0e:	2d38      	cmp	r5, #56	; 0x38
   10f10:	dd00      	ble.n	10f14 <__aeabi_dsub+0x368>
   10f12:	e0a8      	b.n	11066 <__aeabi_dsub+0x4ba>
   10f14:	2d1f      	cmp	r5, #31
   10f16:	dd00      	ble.n	10f1a <__aeabi_dsub+0x36e>
   10f18:	e11f      	b.n	1115a <__aeabi_dsub+0x5ae>
   10f1a:	2620      	movs	r6, #32
   10f1c:	0027      	movs	r7, r4
   10f1e:	4650      	mov	r0, sl
   10f20:	1b76      	subs	r6, r6, r5
   10f22:	40b7      	lsls	r7, r6
   10f24:	40e8      	lsrs	r0, r5
   10f26:	4307      	orrs	r7, r0
   10f28:	4650      	mov	r0, sl
   10f2a:	40b0      	lsls	r0, r6
   10f2c:	1e46      	subs	r6, r0, #1
   10f2e:	41b0      	sbcs	r0, r6
   10f30:	40ec      	lsrs	r4, r5
   10f32:	4338      	orrs	r0, r7
   10f34:	1a17      	subs	r7, r2, r0
   10f36:	42ba      	cmp	r2, r7
   10f38:	4192      	sbcs	r2, r2
   10f3a:	1b0c      	subs	r4, r1, r4
   10f3c:	4252      	negs	r2, r2
   10f3e:	1aa4      	subs	r4, r4, r2
   10f40:	4666      	mov	r6, ip
   10f42:	4698      	mov	r8, r3
   10f44:	e68b      	b.n	10c5e <__aeabi_dsub+0xb2>
   10f46:	4664      	mov	r4, ip
   10f48:	4667      	mov	r7, ip
   10f4a:	432c      	orrs	r4, r5
   10f4c:	d000      	beq.n	10f50 <__aeabi_dsub+0x3a4>
   10f4e:	e68b      	b.n	10c68 <__aeabi_dsub+0xbc>
   10f50:	2500      	movs	r5, #0
   10f52:	2600      	movs	r6, #0
   10f54:	2700      	movs	r7, #0
   10f56:	e6ea      	b.n	10d2e <__aeabi_dsub+0x182>
   10f58:	001e      	movs	r6, r3
   10f5a:	e6ad      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10f5c:	2b1f      	cmp	r3, #31
   10f5e:	dc60      	bgt.n	11022 <__aeabi_dsub+0x476>
   10f60:	2720      	movs	r7, #32
   10f62:	1af8      	subs	r0, r7, r3
   10f64:	000f      	movs	r7, r1
   10f66:	4684      	mov	ip, r0
   10f68:	4087      	lsls	r7, r0
   10f6a:	0010      	movs	r0, r2
   10f6c:	40d8      	lsrs	r0, r3
   10f6e:	4307      	orrs	r7, r0
   10f70:	4660      	mov	r0, ip
   10f72:	4082      	lsls	r2, r0
   10f74:	1e50      	subs	r0, r2, #1
   10f76:	4182      	sbcs	r2, r0
   10f78:	40d9      	lsrs	r1, r3
   10f7a:	4317      	orrs	r7, r2
   10f7c:	e6f5      	b.n	10d6a <__aeabi_dsub+0x1be>
   10f7e:	0026      	movs	r6, r4
   10f80:	4650      	mov	r0, sl
   10f82:	4306      	orrs	r6, r0
   10f84:	d005      	beq.n	10f92 <__aeabi_dsub+0x3e6>
   10f86:	43ed      	mvns	r5, r5
   10f88:	2d00      	cmp	r5, #0
   10f8a:	d0d3      	beq.n	10f34 <__aeabi_dsub+0x388>
   10f8c:	4e90      	ldr	r6, [pc, #576]	; (111d0 <__aeabi_dsub+0x624>)
   10f8e:	45b4      	cmp	ip, r6
   10f90:	d1bd      	bne.n	10f0e <__aeabi_dsub+0x362>
   10f92:	000c      	movs	r4, r1
   10f94:	0017      	movs	r7, r2
   10f96:	4666      	mov	r6, ip
   10f98:	4698      	mov	r8, r3
   10f9a:	e68d      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10f9c:	488c      	ldr	r0, [pc, #560]	; (111d0 <__aeabi_dsub+0x624>)
   10f9e:	4283      	cmp	r3, r0
   10fa0:	d00b      	beq.n	10fba <__aeabi_dsub+0x40e>
   10fa2:	4663      	mov	r3, ip
   10fa4:	e6d9      	b.n	10d5a <__aeabi_dsub+0x1ae>
   10fa6:	2d00      	cmp	r5, #0
   10fa8:	d000      	beq.n	10fac <__aeabi_dsub+0x400>
   10faa:	e096      	b.n	110da <__aeabi_dsub+0x52e>
   10fac:	0008      	movs	r0, r1
   10fae:	4310      	orrs	r0, r2
   10fb0:	d100      	bne.n	10fb4 <__aeabi_dsub+0x408>
   10fb2:	e0e2      	b.n	1117a <__aeabi_dsub+0x5ce>
   10fb4:	000c      	movs	r4, r1
   10fb6:	0017      	movs	r7, r2
   10fb8:	4698      	mov	r8, r3
   10fba:	4e85      	ldr	r6, [pc, #532]	; (111d0 <__aeabi_dsub+0x624>)
   10fbc:	e67c      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10fbe:	2500      	movs	r5, #0
   10fc0:	e780      	b.n	10ec4 <__aeabi_dsub+0x318>
   10fc2:	2100      	movs	r1, #0
   10fc4:	e78e      	b.n	10ee4 <__aeabi_dsub+0x338>
   10fc6:	0023      	movs	r3, r4
   10fc8:	4650      	mov	r0, sl
   10fca:	4303      	orrs	r3, r0
   10fcc:	2e00      	cmp	r6, #0
   10fce:	d000      	beq.n	10fd2 <__aeabi_dsub+0x426>
   10fd0:	e0a8      	b.n	11124 <__aeabi_dsub+0x578>
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d100      	bne.n	10fd8 <__aeabi_dsub+0x42c>
   10fd6:	e0de      	b.n	11196 <__aeabi_dsub+0x5ea>
   10fd8:	000b      	movs	r3, r1
   10fda:	4313      	orrs	r3, r2
   10fdc:	d100      	bne.n	10fe0 <__aeabi_dsub+0x434>
   10fde:	e66b      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10fe0:	4452      	add	r2, sl
   10fe2:	4552      	cmp	r2, sl
   10fe4:	4180      	sbcs	r0, r0
   10fe6:	1864      	adds	r4, r4, r1
   10fe8:	4240      	negs	r0, r0
   10fea:	1824      	adds	r4, r4, r0
   10fec:	0017      	movs	r7, r2
   10fee:	0223      	lsls	r3, r4, #8
   10ff0:	d400      	bmi.n	10ff4 <__aeabi_dsub+0x448>
   10ff2:	e6fd      	b.n	10df0 <__aeabi_dsub+0x244>
   10ff4:	4b77      	ldr	r3, [pc, #476]	; (111d4 <__aeabi_dsub+0x628>)
   10ff6:	4666      	mov	r6, ip
   10ff8:	401c      	ands	r4, r3
   10ffa:	e65d      	b.n	10cb8 <__aeabi_dsub+0x10c>
   10ffc:	0025      	movs	r5, r4
   10ffe:	4650      	mov	r0, sl
   11000:	4305      	orrs	r5, r0
   11002:	2e00      	cmp	r6, #0
   11004:	d1cf      	bne.n	10fa6 <__aeabi_dsub+0x3fa>
   11006:	2d00      	cmp	r5, #0
   11008:	d14f      	bne.n	110aa <__aeabi_dsub+0x4fe>
   1100a:	000c      	movs	r4, r1
   1100c:	4314      	orrs	r4, r2
   1100e:	d100      	bne.n	11012 <__aeabi_dsub+0x466>
   11010:	e0a0      	b.n	11154 <__aeabi_dsub+0x5a8>
   11012:	000c      	movs	r4, r1
   11014:	0017      	movs	r7, r2
   11016:	4698      	mov	r8, r3
   11018:	e64e      	b.n	10cb8 <__aeabi_dsub+0x10c>
   1101a:	4666      	mov	r6, ip
   1101c:	2400      	movs	r4, #0
   1101e:	2700      	movs	r7, #0
   11020:	e685      	b.n	10d2e <__aeabi_dsub+0x182>
   11022:	001f      	movs	r7, r3
   11024:	0008      	movs	r0, r1
   11026:	3f20      	subs	r7, #32
   11028:	40f8      	lsrs	r0, r7
   1102a:	0007      	movs	r7, r0
   1102c:	2b20      	cmp	r3, #32
   1102e:	d100      	bne.n	11032 <__aeabi_dsub+0x486>
   11030:	e08e      	b.n	11150 <__aeabi_dsub+0x5a4>
   11032:	2040      	movs	r0, #64	; 0x40
   11034:	1ac3      	subs	r3, r0, r3
   11036:	4099      	lsls	r1, r3
   11038:	430a      	orrs	r2, r1
   1103a:	1e51      	subs	r1, r2, #1
   1103c:	418a      	sbcs	r2, r1
   1103e:	2100      	movs	r1, #0
   11040:	4317      	orrs	r7, r2
   11042:	e692      	b.n	10d6a <__aeabi_dsub+0x1be>
   11044:	2e00      	cmp	r6, #0
   11046:	d114      	bne.n	11072 <__aeabi_dsub+0x4c6>
   11048:	0026      	movs	r6, r4
   1104a:	4650      	mov	r0, sl
   1104c:	4306      	orrs	r6, r0
   1104e:	d062      	beq.n	11116 <__aeabi_dsub+0x56a>
   11050:	43db      	mvns	r3, r3
   11052:	2b00      	cmp	r3, #0
   11054:	d15c      	bne.n	11110 <__aeabi_dsub+0x564>
   11056:	1887      	adds	r7, r0, r2
   11058:	4297      	cmp	r7, r2
   1105a:	4192      	sbcs	r2, r2
   1105c:	1864      	adds	r4, r4, r1
   1105e:	4252      	negs	r2, r2
   11060:	18a4      	adds	r4, r4, r2
   11062:	4666      	mov	r6, ip
   11064:	e687      	b.n	10d76 <__aeabi_dsub+0x1ca>
   11066:	4650      	mov	r0, sl
   11068:	4320      	orrs	r0, r4
   1106a:	1e44      	subs	r4, r0, #1
   1106c:	41a0      	sbcs	r0, r4
   1106e:	2400      	movs	r4, #0
   11070:	e760      	b.n	10f34 <__aeabi_dsub+0x388>
   11072:	4e57      	ldr	r6, [pc, #348]	; (111d0 <__aeabi_dsub+0x624>)
   11074:	45b4      	cmp	ip, r6
   11076:	d04e      	beq.n	11116 <__aeabi_dsub+0x56a>
   11078:	2680      	movs	r6, #128	; 0x80
   1107a:	0436      	lsls	r6, r6, #16
   1107c:	425b      	negs	r3, r3
   1107e:	4334      	orrs	r4, r6
   11080:	2b38      	cmp	r3, #56	; 0x38
   11082:	dd00      	ble.n	11086 <__aeabi_dsub+0x4da>
   11084:	e07f      	b.n	11186 <__aeabi_dsub+0x5da>
   11086:	2b1f      	cmp	r3, #31
   11088:	dd00      	ble.n	1108c <__aeabi_dsub+0x4e0>
   1108a:	e08b      	b.n	111a4 <__aeabi_dsub+0x5f8>
   1108c:	2620      	movs	r6, #32
   1108e:	0027      	movs	r7, r4
   11090:	4650      	mov	r0, sl
   11092:	1af6      	subs	r6, r6, r3
   11094:	40b7      	lsls	r7, r6
   11096:	40d8      	lsrs	r0, r3
   11098:	4307      	orrs	r7, r0
   1109a:	4650      	mov	r0, sl
   1109c:	40b0      	lsls	r0, r6
   1109e:	1e46      	subs	r6, r0, #1
   110a0:	41b0      	sbcs	r0, r6
   110a2:	4307      	orrs	r7, r0
   110a4:	40dc      	lsrs	r4, r3
   110a6:	18bf      	adds	r7, r7, r2
   110a8:	e7d6      	b.n	11058 <__aeabi_dsub+0x4ac>
   110aa:	000d      	movs	r5, r1
   110ac:	4315      	orrs	r5, r2
   110ae:	d100      	bne.n	110b2 <__aeabi_dsub+0x506>
   110b0:	e602      	b.n	10cb8 <__aeabi_dsub+0x10c>
   110b2:	4650      	mov	r0, sl
   110b4:	1a80      	subs	r0, r0, r2
   110b6:	4582      	cmp	sl, r0
   110b8:	41bf      	sbcs	r7, r7
   110ba:	1a65      	subs	r5, r4, r1
   110bc:	427f      	negs	r7, r7
   110be:	1bed      	subs	r5, r5, r7
   110c0:	4684      	mov	ip, r0
   110c2:	0228      	lsls	r0, r5, #8
   110c4:	d400      	bmi.n	110c8 <__aeabi_dsub+0x51c>
   110c6:	e68d      	b.n	10de4 <__aeabi_dsub+0x238>
   110c8:	4650      	mov	r0, sl
   110ca:	1a17      	subs	r7, r2, r0
   110cc:	42ba      	cmp	r2, r7
   110ce:	4192      	sbcs	r2, r2
   110d0:	1b0c      	subs	r4, r1, r4
   110d2:	4252      	negs	r2, r2
   110d4:	1aa4      	subs	r4, r4, r2
   110d6:	4698      	mov	r8, r3
   110d8:	e5ee      	b.n	10cb8 <__aeabi_dsub+0x10c>
   110da:	000d      	movs	r5, r1
   110dc:	4315      	orrs	r5, r2
   110de:	d100      	bne.n	110e2 <__aeabi_dsub+0x536>
   110e0:	e76b      	b.n	10fba <__aeabi_dsub+0x40e>
   110e2:	4650      	mov	r0, sl
   110e4:	0767      	lsls	r7, r4, #29
   110e6:	08c0      	lsrs	r0, r0, #3
   110e8:	4307      	orrs	r7, r0
   110ea:	2080      	movs	r0, #128	; 0x80
   110ec:	08e4      	lsrs	r4, r4, #3
   110ee:	0300      	lsls	r0, r0, #12
   110f0:	4204      	tst	r4, r0
   110f2:	d007      	beq.n	11104 <__aeabi_dsub+0x558>
   110f4:	08cd      	lsrs	r5, r1, #3
   110f6:	4205      	tst	r5, r0
   110f8:	d104      	bne.n	11104 <__aeabi_dsub+0x558>
   110fa:	002c      	movs	r4, r5
   110fc:	4698      	mov	r8, r3
   110fe:	08d7      	lsrs	r7, r2, #3
   11100:	0749      	lsls	r1, r1, #29
   11102:	430f      	orrs	r7, r1
   11104:	0f7b      	lsrs	r3, r7, #29
   11106:	00e4      	lsls	r4, r4, #3
   11108:	431c      	orrs	r4, r3
   1110a:	00ff      	lsls	r7, r7, #3
   1110c:	4e30      	ldr	r6, [pc, #192]	; (111d0 <__aeabi_dsub+0x624>)
   1110e:	e5d3      	b.n	10cb8 <__aeabi_dsub+0x10c>
   11110:	4e2f      	ldr	r6, [pc, #188]	; (111d0 <__aeabi_dsub+0x624>)
   11112:	45b4      	cmp	ip, r6
   11114:	d1b4      	bne.n	11080 <__aeabi_dsub+0x4d4>
   11116:	000c      	movs	r4, r1
   11118:	0017      	movs	r7, r2
   1111a:	4666      	mov	r6, ip
   1111c:	e5cc      	b.n	10cb8 <__aeabi_dsub+0x10c>
   1111e:	2700      	movs	r7, #0
   11120:	2400      	movs	r4, #0
   11122:	e5e8      	b.n	10cf6 <__aeabi_dsub+0x14a>
   11124:	2b00      	cmp	r3, #0
   11126:	d039      	beq.n	1119c <__aeabi_dsub+0x5f0>
   11128:	000b      	movs	r3, r1
   1112a:	4313      	orrs	r3, r2
   1112c:	d100      	bne.n	11130 <__aeabi_dsub+0x584>
   1112e:	e744      	b.n	10fba <__aeabi_dsub+0x40e>
   11130:	08c0      	lsrs	r0, r0, #3
   11132:	0767      	lsls	r7, r4, #29
   11134:	4307      	orrs	r7, r0
   11136:	2080      	movs	r0, #128	; 0x80
   11138:	08e4      	lsrs	r4, r4, #3
   1113a:	0300      	lsls	r0, r0, #12
   1113c:	4204      	tst	r4, r0
   1113e:	d0e1      	beq.n	11104 <__aeabi_dsub+0x558>
   11140:	08cb      	lsrs	r3, r1, #3
   11142:	4203      	tst	r3, r0
   11144:	d1de      	bne.n	11104 <__aeabi_dsub+0x558>
   11146:	08d7      	lsrs	r7, r2, #3
   11148:	0749      	lsls	r1, r1, #29
   1114a:	430f      	orrs	r7, r1
   1114c:	001c      	movs	r4, r3
   1114e:	e7d9      	b.n	11104 <__aeabi_dsub+0x558>
   11150:	2100      	movs	r1, #0
   11152:	e771      	b.n	11038 <__aeabi_dsub+0x48c>
   11154:	2500      	movs	r5, #0
   11156:	2700      	movs	r7, #0
   11158:	e5e9      	b.n	10d2e <__aeabi_dsub+0x182>
   1115a:	002e      	movs	r6, r5
   1115c:	0027      	movs	r7, r4
   1115e:	3e20      	subs	r6, #32
   11160:	40f7      	lsrs	r7, r6
   11162:	2d20      	cmp	r5, #32
   11164:	d02f      	beq.n	111c6 <__aeabi_dsub+0x61a>
   11166:	2640      	movs	r6, #64	; 0x40
   11168:	1b75      	subs	r5, r6, r5
   1116a:	40ac      	lsls	r4, r5
   1116c:	4650      	mov	r0, sl
   1116e:	4320      	orrs	r0, r4
   11170:	1e44      	subs	r4, r0, #1
   11172:	41a0      	sbcs	r0, r4
   11174:	2400      	movs	r4, #0
   11176:	4338      	orrs	r0, r7
   11178:	e6dc      	b.n	10f34 <__aeabi_dsub+0x388>
   1117a:	2480      	movs	r4, #128	; 0x80
   1117c:	2500      	movs	r5, #0
   1117e:	0324      	lsls	r4, r4, #12
   11180:	4e13      	ldr	r6, [pc, #76]	; (111d0 <__aeabi_dsub+0x624>)
   11182:	2700      	movs	r7, #0
   11184:	e5d3      	b.n	10d2e <__aeabi_dsub+0x182>
   11186:	4650      	mov	r0, sl
   11188:	4320      	orrs	r0, r4
   1118a:	0007      	movs	r7, r0
   1118c:	1e78      	subs	r0, r7, #1
   1118e:	4187      	sbcs	r7, r0
   11190:	2400      	movs	r4, #0
   11192:	18bf      	adds	r7, r7, r2
   11194:	e760      	b.n	11058 <__aeabi_dsub+0x4ac>
   11196:	000c      	movs	r4, r1
   11198:	0017      	movs	r7, r2
   1119a:	e58d      	b.n	10cb8 <__aeabi_dsub+0x10c>
   1119c:	000c      	movs	r4, r1
   1119e:	0017      	movs	r7, r2
   111a0:	4e0b      	ldr	r6, [pc, #44]	; (111d0 <__aeabi_dsub+0x624>)
   111a2:	e589      	b.n	10cb8 <__aeabi_dsub+0x10c>
   111a4:	001e      	movs	r6, r3
   111a6:	0027      	movs	r7, r4
   111a8:	3e20      	subs	r6, #32
   111aa:	40f7      	lsrs	r7, r6
   111ac:	2b20      	cmp	r3, #32
   111ae:	d00c      	beq.n	111ca <__aeabi_dsub+0x61e>
   111b0:	2640      	movs	r6, #64	; 0x40
   111b2:	1af3      	subs	r3, r6, r3
   111b4:	409c      	lsls	r4, r3
   111b6:	4650      	mov	r0, sl
   111b8:	4320      	orrs	r0, r4
   111ba:	1e44      	subs	r4, r0, #1
   111bc:	41a0      	sbcs	r0, r4
   111be:	4307      	orrs	r7, r0
   111c0:	2400      	movs	r4, #0
   111c2:	18bf      	adds	r7, r7, r2
   111c4:	e748      	b.n	11058 <__aeabi_dsub+0x4ac>
   111c6:	2400      	movs	r4, #0
   111c8:	e7d0      	b.n	1116c <__aeabi_dsub+0x5c0>
   111ca:	2400      	movs	r4, #0
   111cc:	e7f3      	b.n	111b6 <__aeabi_dsub+0x60a>
   111ce:	46c0      	nop			; (mov r8, r8)
   111d0:	000007ff 	.word	0x000007ff
   111d4:	ff7fffff 	.word	0xff7fffff

000111d8 <__aeabi_d2iz>:
   111d8:	b530      	push	{r4, r5, lr}
   111da:	4d13      	ldr	r5, [pc, #76]	; (11228 <__aeabi_d2iz+0x50>)
   111dc:	030a      	lsls	r2, r1, #12
   111de:	004b      	lsls	r3, r1, #1
   111e0:	0b12      	lsrs	r2, r2, #12
   111e2:	0d5b      	lsrs	r3, r3, #21
   111e4:	0fc9      	lsrs	r1, r1, #31
   111e6:	2400      	movs	r4, #0
   111e8:	42ab      	cmp	r3, r5
   111ea:	dd10      	ble.n	1120e <__aeabi_d2iz+0x36>
   111ec:	4c0f      	ldr	r4, [pc, #60]	; (1122c <__aeabi_d2iz+0x54>)
   111ee:	42a3      	cmp	r3, r4
   111f0:	dc0f      	bgt.n	11212 <__aeabi_d2iz+0x3a>
   111f2:	2480      	movs	r4, #128	; 0x80
   111f4:	4d0e      	ldr	r5, [pc, #56]	; (11230 <__aeabi_d2iz+0x58>)
   111f6:	0364      	lsls	r4, r4, #13
   111f8:	4322      	orrs	r2, r4
   111fa:	1aed      	subs	r5, r5, r3
   111fc:	2d1f      	cmp	r5, #31
   111fe:	dd0b      	ble.n	11218 <__aeabi_d2iz+0x40>
   11200:	480c      	ldr	r0, [pc, #48]	; (11234 <__aeabi_d2iz+0x5c>)
   11202:	1ac3      	subs	r3, r0, r3
   11204:	40da      	lsrs	r2, r3
   11206:	4254      	negs	r4, r2
   11208:	2900      	cmp	r1, #0
   1120a:	d100      	bne.n	1120e <__aeabi_d2iz+0x36>
   1120c:	0014      	movs	r4, r2
   1120e:	0020      	movs	r0, r4
   11210:	bd30      	pop	{r4, r5, pc}
   11212:	4b09      	ldr	r3, [pc, #36]	; (11238 <__aeabi_d2iz+0x60>)
   11214:	18cc      	adds	r4, r1, r3
   11216:	e7fa      	b.n	1120e <__aeabi_d2iz+0x36>
   11218:	4c08      	ldr	r4, [pc, #32]	; (1123c <__aeabi_d2iz+0x64>)
   1121a:	40e8      	lsrs	r0, r5
   1121c:	46a4      	mov	ip, r4
   1121e:	4463      	add	r3, ip
   11220:	409a      	lsls	r2, r3
   11222:	4302      	orrs	r2, r0
   11224:	e7ef      	b.n	11206 <__aeabi_d2iz+0x2e>
   11226:	46c0      	nop			; (mov r8, r8)
   11228:	000003fe 	.word	0x000003fe
   1122c:	0000041d 	.word	0x0000041d
   11230:	00000433 	.word	0x00000433
   11234:	00000413 	.word	0x00000413
   11238:	7fffffff 	.word	0x7fffffff
   1123c:	fffffbed 	.word	0xfffffbed

00011240 <__aeabi_i2d>:
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	2800      	cmp	r0, #0
   11244:	d030      	beq.n	112a8 <__aeabi_i2d+0x68>
   11246:	17c3      	asrs	r3, r0, #31
   11248:	18c4      	adds	r4, r0, r3
   1124a:	405c      	eors	r4, r3
   1124c:	0fc5      	lsrs	r5, r0, #31
   1124e:	0020      	movs	r0, r4
   11250:	f000 f8c2 	bl	113d8 <__clzsi2>
   11254:	4b17      	ldr	r3, [pc, #92]	; (112b4 <__aeabi_i2d+0x74>)
   11256:	4a18      	ldr	r2, [pc, #96]	; (112b8 <__aeabi_i2d+0x78>)
   11258:	1a1b      	subs	r3, r3, r0
   1125a:	1ad2      	subs	r2, r2, r3
   1125c:	2a1f      	cmp	r2, #31
   1125e:	dd18      	ble.n	11292 <__aeabi_i2d+0x52>
   11260:	4a16      	ldr	r2, [pc, #88]	; (112bc <__aeabi_i2d+0x7c>)
   11262:	1ad2      	subs	r2, r2, r3
   11264:	4094      	lsls	r4, r2
   11266:	2200      	movs	r2, #0
   11268:	0324      	lsls	r4, r4, #12
   1126a:	055b      	lsls	r3, r3, #21
   1126c:	0b24      	lsrs	r4, r4, #12
   1126e:	0d5b      	lsrs	r3, r3, #21
   11270:	2100      	movs	r1, #0
   11272:	0010      	movs	r0, r2
   11274:	0324      	lsls	r4, r4, #12
   11276:	0d0a      	lsrs	r2, r1, #20
   11278:	0b24      	lsrs	r4, r4, #12
   1127a:	0512      	lsls	r2, r2, #20
   1127c:	4322      	orrs	r2, r4
   1127e:	4c10      	ldr	r4, [pc, #64]	; (112c0 <__aeabi_i2d+0x80>)
   11280:	051b      	lsls	r3, r3, #20
   11282:	4022      	ands	r2, r4
   11284:	4313      	orrs	r3, r2
   11286:	005b      	lsls	r3, r3, #1
   11288:	07ed      	lsls	r5, r5, #31
   1128a:	085b      	lsrs	r3, r3, #1
   1128c:	432b      	orrs	r3, r5
   1128e:	0019      	movs	r1, r3
   11290:	bd70      	pop	{r4, r5, r6, pc}
   11292:	0021      	movs	r1, r4
   11294:	4091      	lsls	r1, r2
   11296:	000a      	movs	r2, r1
   11298:	210b      	movs	r1, #11
   1129a:	1a08      	subs	r0, r1, r0
   1129c:	40c4      	lsrs	r4, r0
   1129e:	055b      	lsls	r3, r3, #21
   112a0:	0324      	lsls	r4, r4, #12
   112a2:	0b24      	lsrs	r4, r4, #12
   112a4:	0d5b      	lsrs	r3, r3, #21
   112a6:	e7e3      	b.n	11270 <__aeabi_i2d+0x30>
   112a8:	2500      	movs	r5, #0
   112aa:	2300      	movs	r3, #0
   112ac:	2400      	movs	r4, #0
   112ae:	2200      	movs	r2, #0
   112b0:	e7de      	b.n	11270 <__aeabi_i2d+0x30>
   112b2:	46c0      	nop			; (mov r8, r8)
   112b4:	0000041e 	.word	0x0000041e
   112b8:	00000433 	.word	0x00000433
   112bc:	00000413 	.word	0x00000413
   112c0:	800fffff 	.word	0x800fffff

000112c4 <__aeabi_ui2d>:
   112c4:	b510      	push	{r4, lr}
   112c6:	1e04      	subs	r4, r0, #0
   112c8:	d028      	beq.n	1131c <__aeabi_ui2d+0x58>
   112ca:	f000 f885 	bl	113d8 <__clzsi2>
   112ce:	4b15      	ldr	r3, [pc, #84]	; (11324 <__aeabi_ui2d+0x60>)
   112d0:	4a15      	ldr	r2, [pc, #84]	; (11328 <__aeabi_ui2d+0x64>)
   112d2:	1a1b      	subs	r3, r3, r0
   112d4:	1ad2      	subs	r2, r2, r3
   112d6:	2a1f      	cmp	r2, #31
   112d8:	dd15      	ble.n	11306 <__aeabi_ui2d+0x42>
   112da:	4a14      	ldr	r2, [pc, #80]	; (1132c <__aeabi_ui2d+0x68>)
   112dc:	1ad2      	subs	r2, r2, r3
   112de:	4094      	lsls	r4, r2
   112e0:	2200      	movs	r2, #0
   112e2:	0324      	lsls	r4, r4, #12
   112e4:	055b      	lsls	r3, r3, #21
   112e6:	0b24      	lsrs	r4, r4, #12
   112e8:	0d5b      	lsrs	r3, r3, #21
   112ea:	2100      	movs	r1, #0
   112ec:	0010      	movs	r0, r2
   112ee:	0324      	lsls	r4, r4, #12
   112f0:	0d0a      	lsrs	r2, r1, #20
   112f2:	0b24      	lsrs	r4, r4, #12
   112f4:	0512      	lsls	r2, r2, #20
   112f6:	4322      	orrs	r2, r4
   112f8:	4c0d      	ldr	r4, [pc, #52]	; (11330 <__aeabi_ui2d+0x6c>)
   112fa:	051b      	lsls	r3, r3, #20
   112fc:	4022      	ands	r2, r4
   112fe:	4313      	orrs	r3, r2
   11300:	005b      	lsls	r3, r3, #1
   11302:	0859      	lsrs	r1, r3, #1
   11304:	bd10      	pop	{r4, pc}
   11306:	0021      	movs	r1, r4
   11308:	4091      	lsls	r1, r2
   1130a:	000a      	movs	r2, r1
   1130c:	210b      	movs	r1, #11
   1130e:	1a08      	subs	r0, r1, r0
   11310:	40c4      	lsrs	r4, r0
   11312:	055b      	lsls	r3, r3, #21
   11314:	0324      	lsls	r4, r4, #12
   11316:	0b24      	lsrs	r4, r4, #12
   11318:	0d5b      	lsrs	r3, r3, #21
   1131a:	e7e6      	b.n	112ea <__aeabi_ui2d+0x26>
   1131c:	2300      	movs	r3, #0
   1131e:	2400      	movs	r4, #0
   11320:	2200      	movs	r2, #0
   11322:	e7e2      	b.n	112ea <__aeabi_ui2d+0x26>
   11324:	0000041e 	.word	0x0000041e
   11328:	00000433 	.word	0x00000433
   1132c:	00000413 	.word	0x00000413
   11330:	800fffff 	.word	0x800fffff

00011334 <__aeabi_f2d>:
   11334:	0041      	lsls	r1, r0, #1
   11336:	0e09      	lsrs	r1, r1, #24
   11338:	1c4b      	adds	r3, r1, #1
   1133a:	b570      	push	{r4, r5, r6, lr}
   1133c:	b2db      	uxtb	r3, r3
   1133e:	0246      	lsls	r6, r0, #9
   11340:	0a75      	lsrs	r5, r6, #9
   11342:	0fc4      	lsrs	r4, r0, #31
   11344:	2b01      	cmp	r3, #1
   11346:	dd14      	ble.n	11372 <__aeabi_f2d+0x3e>
   11348:	23e0      	movs	r3, #224	; 0xe0
   1134a:	009b      	lsls	r3, r3, #2
   1134c:	076d      	lsls	r5, r5, #29
   1134e:	0b36      	lsrs	r6, r6, #12
   11350:	18cb      	adds	r3, r1, r3
   11352:	2100      	movs	r1, #0
   11354:	0d0a      	lsrs	r2, r1, #20
   11356:	0028      	movs	r0, r5
   11358:	0512      	lsls	r2, r2, #20
   1135a:	4d1c      	ldr	r5, [pc, #112]	; (113cc <__aeabi_f2d+0x98>)
   1135c:	4332      	orrs	r2, r6
   1135e:	055b      	lsls	r3, r3, #21
   11360:	402a      	ands	r2, r5
   11362:	085b      	lsrs	r3, r3, #1
   11364:	4313      	orrs	r3, r2
   11366:	005b      	lsls	r3, r3, #1
   11368:	07e4      	lsls	r4, r4, #31
   1136a:	085b      	lsrs	r3, r3, #1
   1136c:	4323      	orrs	r3, r4
   1136e:	0019      	movs	r1, r3
   11370:	bd70      	pop	{r4, r5, r6, pc}
   11372:	2900      	cmp	r1, #0
   11374:	d114      	bne.n	113a0 <__aeabi_f2d+0x6c>
   11376:	2d00      	cmp	r5, #0
   11378:	d01e      	beq.n	113b8 <__aeabi_f2d+0x84>
   1137a:	0028      	movs	r0, r5
   1137c:	f000 f82c 	bl	113d8 <__clzsi2>
   11380:	280a      	cmp	r0, #10
   11382:	dc1c      	bgt.n	113be <__aeabi_f2d+0x8a>
   11384:	230b      	movs	r3, #11
   11386:	002a      	movs	r2, r5
   11388:	1a1b      	subs	r3, r3, r0
   1138a:	40da      	lsrs	r2, r3
   1138c:	0003      	movs	r3, r0
   1138e:	3315      	adds	r3, #21
   11390:	409d      	lsls	r5, r3
   11392:	4b0f      	ldr	r3, [pc, #60]	; (113d0 <__aeabi_f2d+0x9c>)
   11394:	0312      	lsls	r2, r2, #12
   11396:	1a1b      	subs	r3, r3, r0
   11398:	055b      	lsls	r3, r3, #21
   1139a:	0b16      	lsrs	r6, r2, #12
   1139c:	0d5b      	lsrs	r3, r3, #21
   1139e:	e7d8      	b.n	11352 <__aeabi_f2d+0x1e>
   113a0:	2d00      	cmp	r5, #0
   113a2:	d006      	beq.n	113b2 <__aeabi_f2d+0x7e>
   113a4:	0b32      	lsrs	r2, r6, #12
   113a6:	2680      	movs	r6, #128	; 0x80
   113a8:	0336      	lsls	r6, r6, #12
   113aa:	076d      	lsls	r5, r5, #29
   113ac:	4316      	orrs	r6, r2
   113ae:	4b09      	ldr	r3, [pc, #36]	; (113d4 <__aeabi_f2d+0xa0>)
   113b0:	e7cf      	b.n	11352 <__aeabi_f2d+0x1e>
   113b2:	4b08      	ldr	r3, [pc, #32]	; (113d4 <__aeabi_f2d+0xa0>)
   113b4:	2600      	movs	r6, #0
   113b6:	e7cc      	b.n	11352 <__aeabi_f2d+0x1e>
   113b8:	2300      	movs	r3, #0
   113ba:	2600      	movs	r6, #0
   113bc:	e7c9      	b.n	11352 <__aeabi_f2d+0x1e>
   113be:	0003      	movs	r3, r0
   113c0:	002a      	movs	r2, r5
   113c2:	3b0b      	subs	r3, #11
   113c4:	409a      	lsls	r2, r3
   113c6:	2500      	movs	r5, #0
   113c8:	e7e3      	b.n	11392 <__aeabi_f2d+0x5e>
   113ca:	46c0      	nop			; (mov r8, r8)
   113cc:	800fffff 	.word	0x800fffff
   113d0:	00000389 	.word	0x00000389
   113d4:	000007ff 	.word	0x000007ff

000113d8 <__clzsi2>:
   113d8:	211c      	movs	r1, #28
   113da:	2301      	movs	r3, #1
   113dc:	041b      	lsls	r3, r3, #16
   113de:	4298      	cmp	r0, r3
   113e0:	d301      	bcc.n	113e6 <__clzsi2+0xe>
   113e2:	0c00      	lsrs	r0, r0, #16
   113e4:	3910      	subs	r1, #16
   113e6:	0a1b      	lsrs	r3, r3, #8
   113e8:	4298      	cmp	r0, r3
   113ea:	d301      	bcc.n	113f0 <__clzsi2+0x18>
   113ec:	0a00      	lsrs	r0, r0, #8
   113ee:	3908      	subs	r1, #8
   113f0:	091b      	lsrs	r3, r3, #4
   113f2:	4298      	cmp	r0, r3
   113f4:	d301      	bcc.n	113fa <__clzsi2+0x22>
   113f6:	0900      	lsrs	r0, r0, #4
   113f8:	3904      	subs	r1, #4
   113fa:	a202      	add	r2, pc, #8	; (adr r2, 11404 <__clzsi2+0x2c>)
   113fc:	5c10      	ldrb	r0, [r2, r0]
   113fe:	1840      	adds	r0, r0, r1
   11400:	4770      	bx	lr
   11402:	46c0      	nop			; (mov r8, r8)
   11404:	02020304 	.word	0x02020304
   11408:	01010101 	.word	0x01010101
	...

00011414 <__clzdi2>:
   11414:	b510      	push	{r4, lr}
   11416:	2900      	cmp	r1, #0
   11418:	d103      	bne.n	11422 <__clzdi2+0xe>
   1141a:	f7ff ffdd 	bl	113d8 <__clzsi2>
   1141e:	3020      	adds	r0, #32
   11420:	e002      	b.n	11428 <__clzdi2+0x14>
   11422:	1c08      	adds	r0, r1, #0
   11424:	f7ff ffd8 	bl	113d8 <__clzsi2>
   11428:	bd10      	pop	{r4, pc}
   1142a:	46c0      	nop			; (mov r8, r8)

0001142c <__libc_init_array>:
   1142c:	b570      	push	{r4, r5, r6, lr}
   1142e:	4e0d      	ldr	r6, [pc, #52]	; (11464 <__libc_init_array+0x38>)
   11430:	4d0d      	ldr	r5, [pc, #52]	; (11468 <__libc_init_array+0x3c>)
   11432:	2400      	movs	r4, #0
   11434:	1bad      	subs	r5, r5, r6
   11436:	10ad      	asrs	r5, r5, #2
   11438:	d005      	beq.n	11446 <__libc_init_array+0x1a>
   1143a:	00a3      	lsls	r3, r4, #2
   1143c:	58f3      	ldr	r3, [r6, r3]
   1143e:	3401      	adds	r4, #1
   11440:	4798      	blx	r3
   11442:	42a5      	cmp	r5, r4
   11444:	d1f9      	bne.n	1143a <__libc_init_array+0xe>
   11446:	f006 fba3 	bl	17b90 <_init>
   1144a:	4e08      	ldr	r6, [pc, #32]	; (1146c <__libc_init_array+0x40>)
   1144c:	4d08      	ldr	r5, [pc, #32]	; (11470 <__libc_init_array+0x44>)
   1144e:	2400      	movs	r4, #0
   11450:	1bad      	subs	r5, r5, r6
   11452:	10ad      	asrs	r5, r5, #2
   11454:	d005      	beq.n	11462 <__libc_init_array+0x36>
   11456:	00a3      	lsls	r3, r4, #2
   11458:	58f3      	ldr	r3, [r6, r3]
   1145a:	3401      	adds	r4, #1
   1145c:	4798      	blx	r3
   1145e:	42a5      	cmp	r5, r4
   11460:	d1f9      	bne.n	11456 <__libc_init_array+0x2a>
   11462:	bd70      	pop	{r4, r5, r6, pc}
   11464:	00017b9c 	.word	0x00017b9c
   11468:	00017b9c 	.word	0x00017b9c
   1146c:	00017b9c 	.word	0x00017b9c
   11470:	00017ba4 	.word	0x00017ba4

00011474 <memcpy>:
   11474:	b5f0      	push	{r4, r5, r6, r7, lr}
   11476:	0005      	movs	r5, r0
   11478:	2a0f      	cmp	r2, #15
   1147a:	d92f      	bls.n	114dc <memcpy+0x68>
   1147c:	000b      	movs	r3, r1
   1147e:	4303      	orrs	r3, r0
   11480:	079b      	lsls	r3, r3, #30
   11482:	d134      	bne.n	114ee <memcpy+0x7a>
   11484:	0016      	movs	r6, r2
   11486:	000c      	movs	r4, r1
   11488:	0003      	movs	r3, r0
   1148a:	3e10      	subs	r6, #16
   1148c:	0935      	lsrs	r5, r6, #4
   1148e:	3501      	adds	r5, #1
   11490:	012d      	lsls	r5, r5, #4
   11492:	1945      	adds	r5, r0, r5
   11494:	6827      	ldr	r7, [r4, #0]
   11496:	601f      	str	r7, [r3, #0]
   11498:	6867      	ldr	r7, [r4, #4]
   1149a:	605f      	str	r7, [r3, #4]
   1149c:	68a7      	ldr	r7, [r4, #8]
   1149e:	609f      	str	r7, [r3, #8]
   114a0:	68e7      	ldr	r7, [r4, #12]
   114a2:	3410      	adds	r4, #16
   114a4:	60df      	str	r7, [r3, #12]
   114a6:	3310      	adds	r3, #16
   114a8:	429d      	cmp	r5, r3
   114aa:	d1f3      	bne.n	11494 <memcpy+0x20>
   114ac:	230f      	movs	r3, #15
   114ae:	439e      	bics	r6, r3
   114b0:	3610      	adds	r6, #16
   114b2:	1985      	adds	r5, r0, r6
   114b4:	1989      	adds	r1, r1, r6
   114b6:	4013      	ands	r3, r2
   114b8:	2b03      	cmp	r3, #3
   114ba:	d91a      	bls.n	114f2 <memcpy+0x7e>
   114bc:	1f1e      	subs	r6, r3, #4
   114be:	2300      	movs	r3, #0
   114c0:	08b4      	lsrs	r4, r6, #2
   114c2:	3401      	adds	r4, #1
   114c4:	00a4      	lsls	r4, r4, #2
   114c6:	58cf      	ldr	r7, [r1, r3]
   114c8:	50ef      	str	r7, [r5, r3]
   114ca:	3304      	adds	r3, #4
   114cc:	42a3      	cmp	r3, r4
   114ce:	d1fa      	bne.n	114c6 <memcpy+0x52>
   114d0:	2403      	movs	r4, #3
   114d2:	43a6      	bics	r6, r4
   114d4:	1d33      	adds	r3, r6, #4
   114d6:	4022      	ands	r2, r4
   114d8:	18c9      	adds	r1, r1, r3
   114da:	18ed      	adds	r5, r5, r3
   114dc:	2a00      	cmp	r2, #0
   114de:	d005      	beq.n	114ec <memcpy+0x78>
   114e0:	2300      	movs	r3, #0
   114e2:	5ccc      	ldrb	r4, [r1, r3]
   114e4:	54ec      	strb	r4, [r5, r3]
   114e6:	3301      	adds	r3, #1
   114e8:	4293      	cmp	r3, r2
   114ea:	d1fa      	bne.n	114e2 <memcpy+0x6e>
   114ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114ee:	0005      	movs	r5, r0
   114f0:	e7f6      	b.n	114e0 <memcpy+0x6c>
   114f2:	001a      	movs	r2, r3
   114f4:	e7f2      	b.n	114dc <memcpy+0x68>
   114f6:	46c0      	nop			; (mov r8, r8)

000114f8 <memset>:
   114f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   114fa:	0783      	lsls	r3, r0, #30
   114fc:	d043      	beq.n	11586 <memset+0x8e>
   114fe:	1e54      	subs	r4, r2, #1
   11500:	2a00      	cmp	r2, #0
   11502:	d03f      	beq.n	11584 <memset+0x8c>
   11504:	b2ce      	uxtb	r6, r1
   11506:	0002      	movs	r2, r0
   11508:	2503      	movs	r5, #3
   1150a:	e002      	b.n	11512 <memset+0x1a>
   1150c:	001a      	movs	r2, r3
   1150e:	3c01      	subs	r4, #1
   11510:	d338      	bcc.n	11584 <memset+0x8c>
   11512:	1c53      	adds	r3, r2, #1
   11514:	7016      	strb	r6, [r2, #0]
   11516:	422b      	tst	r3, r5
   11518:	d1f8      	bne.n	1150c <memset+0x14>
   1151a:	2c03      	cmp	r4, #3
   1151c:	d92a      	bls.n	11574 <memset+0x7c>
   1151e:	22ff      	movs	r2, #255	; 0xff
   11520:	400a      	ands	r2, r1
   11522:	0215      	lsls	r5, r2, #8
   11524:	4315      	orrs	r5, r2
   11526:	042a      	lsls	r2, r5, #16
   11528:	4315      	orrs	r5, r2
   1152a:	2c0f      	cmp	r4, #15
   1152c:	d914      	bls.n	11558 <memset+0x60>
   1152e:	0027      	movs	r7, r4
   11530:	001a      	movs	r2, r3
   11532:	3f10      	subs	r7, #16
   11534:	093e      	lsrs	r6, r7, #4
   11536:	3601      	adds	r6, #1
   11538:	0136      	lsls	r6, r6, #4
   1153a:	199e      	adds	r6, r3, r6
   1153c:	6015      	str	r5, [r2, #0]
   1153e:	6055      	str	r5, [r2, #4]
   11540:	6095      	str	r5, [r2, #8]
   11542:	60d5      	str	r5, [r2, #12]
   11544:	3210      	adds	r2, #16
   11546:	4296      	cmp	r6, r2
   11548:	d1f8      	bne.n	1153c <memset+0x44>
   1154a:	220f      	movs	r2, #15
   1154c:	4397      	bics	r7, r2
   1154e:	3710      	adds	r7, #16
   11550:	19db      	adds	r3, r3, r7
   11552:	4014      	ands	r4, r2
   11554:	2c03      	cmp	r4, #3
   11556:	d90d      	bls.n	11574 <memset+0x7c>
   11558:	001a      	movs	r2, r3
   1155a:	1f27      	subs	r7, r4, #4
   1155c:	08be      	lsrs	r6, r7, #2
   1155e:	3601      	adds	r6, #1
   11560:	00b6      	lsls	r6, r6, #2
   11562:	199e      	adds	r6, r3, r6
   11564:	c220      	stmia	r2!, {r5}
   11566:	42b2      	cmp	r2, r6
   11568:	d1fc      	bne.n	11564 <memset+0x6c>
   1156a:	2203      	movs	r2, #3
   1156c:	4397      	bics	r7, r2
   1156e:	3704      	adds	r7, #4
   11570:	19db      	adds	r3, r3, r7
   11572:	4014      	ands	r4, r2
   11574:	2c00      	cmp	r4, #0
   11576:	d005      	beq.n	11584 <memset+0x8c>
   11578:	b2c9      	uxtb	r1, r1
   1157a:	191c      	adds	r4, r3, r4
   1157c:	7019      	strb	r1, [r3, #0]
   1157e:	3301      	adds	r3, #1
   11580:	429c      	cmp	r4, r3
   11582:	d1fb      	bne.n	1157c <memset+0x84>
   11584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11586:	0014      	movs	r4, r2
   11588:	0003      	movs	r3, r0
   1158a:	e7c6      	b.n	1151a <memset+0x22>

0001158c <printf>:
   1158c:	b40f      	push	{r0, r1, r2, r3}
   1158e:	b500      	push	{lr}
   11590:	4906      	ldr	r1, [pc, #24]	; (115ac <printf+0x20>)
   11592:	b083      	sub	sp, #12
   11594:	ab04      	add	r3, sp, #16
   11596:	6808      	ldr	r0, [r1, #0]
   11598:	cb04      	ldmia	r3!, {r2}
   1159a:	6881      	ldr	r1, [r0, #8]
   1159c:	9301      	str	r3, [sp, #4]
   1159e:	f000 f991 	bl	118c4 <_vfprintf_r>
   115a2:	b003      	add	sp, #12
   115a4:	bc08      	pop	{r3}
   115a6:	b004      	add	sp, #16
   115a8:	4718      	bx	r3
   115aa:	46c0      	nop			; (mov r8, r8)
   115ac:	2000007c 	.word	0x2000007c

000115b0 <_puts_r>:
   115b0:	b530      	push	{r4, r5, lr}
   115b2:	0004      	movs	r4, r0
   115b4:	b089      	sub	sp, #36	; 0x24
   115b6:	0008      	movs	r0, r1
   115b8:	000d      	movs	r5, r1
   115ba:	f000 f951 	bl	11860 <strlen>
   115be:	ab04      	add	r3, sp, #16
   115c0:	4a21      	ldr	r2, [pc, #132]	; (11648 <_puts_r+0x98>)
   115c2:	9301      	str	r3, [sp, #4]
   115c4:	2302      	movs	r3, #2
   115c6:	9206      	str	r2, [sp, #24]
   115c8:	2201      	movs	r2, #1
   115ca:	9302      	str	r3, [sp, #8]
   115cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   115ce:	9005      	str	r0, [sp, #20]
   115d0:	3001      	adds	r0, #1
   115d2:	9504      	str	r5, [sp, #16]
   115d4:	9207      	str	r2, [sp, #28]
   115d6:	9003      	str	r0, [sp, #12]
   115d8:	68a5      	ldr	r5, [r4, #8]
   115da:	2b00      	cmp	r3, #0
   115dc:	d02f      	beq.n	1163e <_puts_r+0x8e>
   115de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   115e0:	07db      	lsls	r3, r3, #31
   115e2:	d424      	bmi.n	1162e <_puts_r+0x7e>
   115e4:	230c      	movs	r3, #12
   115e6:	5eea      	ldrsh	r2, [r5, r3]
   115e8:	b291      	uxth	r1, r2
   115ea:	058b      	lsls	r3, r1, #22
   115ec:	d51c      	bpl.n	11628 <_puts_r+0x78>
   115ee:	2380      	movs	r3, #128	; 0x80
   115f0:	019b      	lsls	r3, r3, #6
   115f2:	4219      	tst	r1, r3
   115f4:	d105      	bne.n	11602 <_puts_r+0x52>
   115f6:	4313      	orrs	r3, r2
   115f8:	81ab      	strh	r3, [r5, #12]
   115fa:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   115fc:	4b13      	ldr	r3, [pc, #76]	; (1164c <_puts_r+0x9c>)
   115fe:	4013      	ands	r3, r2
   11600:	666b      	str	r3, [r5, #100]	; 0x64
   11602:	0020      	movs	r0, r4
   11604:	aa01      	add	r2, sp, #4
   11606:	0029      	movs	r1, r5
   11608:	f003 f882 	bl	14710 <__sfvwrite_r>
   1160c:	1e44      	subs	r4, r0, #1
   1160e:	41a0      	sbcs	r0, r4
   11610:	4244      	negs	r4, r0
   11612:	200a      	movs	r0, #10
   11614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   11616:	4304      	orrs	r4, r0
   11618:	07db      	lsls	r3, r3, #31
   1161a:	d402      	bmi.n	11622 <_puts_r+0x72>
   1161c:	89ab      	ldrh	r3, [r5, #12]
   1161e:	059b      	lsls	r3, r3, #22
   11620:	d509      	bpl.n	11636 <_puts_r+0x86>
   11622:	0020      	movs	r0, r4
   11624:	b009      	add	sp, #36	; 0x24
   11626:	bd30      	pop	{r4, r5, pc}
   11628:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1162a:	f003 fa3b 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1162e:	230c      	movs	r3, #12
   11630:	5eea      	ldrsh	r2, [r5, r3]
   11632:	b291      	uxth	r1, r2
   11634:	e7db      	b.n	115ee <_puts_r+0x3e>
   11636:	6da8      	ldr	r0, [r5, #88]	; 0x58
   11638:	f003 fa36 	bl	14aa8 <__retarget_lock_release_recursive>
   1163c:	e7f1      	b.n	11622 <_puts_r+0x72>
   1163e:	0020      	movs	r0, r4
   11640:	f002 fede 	bl	14400 <__sinit>
   11644:	e7cb      	b.n	115de <_puts_r+0x2e>
   11646:	46c0      	nop			; (mov r8, r8)
   11648:	000177a4 	.word	0x000177a4
   1164c:	ffffdfff 	.word	0xffffdfff

00011650 <puts>:
   11650:	b510      	push	{r4, lr}
   11652:	4b03      	ldr	r3, [pc, #12]	; (11660 <puts+0x10>)
   11654:	0001      	movs	r1, r0
   11656:	6818      	ldr	r0, [r3, #0]
   11658:	f7ff ffaa 	bl	115b0 <_puts_r>
   1165c:	bd10      	pop	{r4, pc}
   1165e:	46c0      	nop			; (mov r8, r8)
   11660:	2000007c 	.word	0x2000007c

00011664 <srand>:
   11664:	2200      	movs	r2, #0
   11666:	4b03      	ldr	r3, [pc, #12]	; (11674 <srand+0x10>)
   11668:	681b      	ldr	r3, [r3, #0]
   1166a:	33a8      	adds	r3, #168	; 0xa8
   1166c:	6018      	str	r0, [r3, #0]
   1166e:	605a      	str	r2, [r3, #4]
   11670:	4770      	bx	lr
   11672:	46c0      	nop			; (mov r8, r8)
   11674:	2000007c 	.word	0x2000007c

00011678 <rand>:
   11678:	b510      	push	{r4, lr}
   1167a:	4b09      	ldr	r3, [pc, #36]	; (116a0 <rand+0x28>)
   1167c:	4a09      	ldr	r2, [pc, #36]	; (116a4 <rand+0x2c>)
   1167e:	681c      	ldr	r4, [r3, #0]
   11680:	4b09      	ldr	r3, [pc, #36]	; (116a8 <rand+0x30>)
   11682:	34a8      	adds	r4, #168	; 0xa8
   11684:	6820      	ldr	r0, [r4, #0]
   11686:	6861      	ldr	r1, [r4, #4]
   11688:	f7fd f898 	bl	e7bc <__aeabi_lmul>
   1168c:	2201      	movs	r2, #1
   1168e:	2300      	movs	r3, #0
   11690:	1880      	adds	r0, r0, r2
   11692:	4159      	adcs	r1, r3
   11694:	6020      	str	r0, [r4, #0]
   11696:	6061      	str	r1, [r4, #4]
   11698:	0048      	lsls	r0, r1, #1
   1169a:	0840      	lsrs	r0, r0, #1
   1169c:	bd10      	pop	{r4, pc}
   1169e:	46c0      	nop			; (mov r8, r8)
   116a0:	2000007c 	.word	0x2000007c
   116a4:	4c957f2d 	.word	0x4c957f2d
   116a8:	5851f42d 	.word	0x5851f42d

000116ac <setbuf>:
   116ac:	424a      	negs	r2, r1
   116ae:	414a      	adcs	r2, r1
   116b0:	2380      	movs	r3, #128	; 0x80
   116b2:	b510      	push	{r4, lr}
   116b4:	0052      	lsls	r2, r2, #1
   116b6:	00db      	lsls	r3, r3, #3
   116b8:	f000 f802 	bl	116c0 <setvbuf>
   116bc:	bd10      	pop	{r4, pc}
   116be:	46c0      	nop			; (mov r8, r8)

000116c0 <setvbuf>:
   116c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   116c2:	4647      	mov	r7, r8
   116c4:	46ce      	mov	lr, r9
   116c6:	b580      	push	{r7, lr}
   116c8:	001f      	movs	r7, r3
   116ca:	4b63      	ldr	r3, [pc, #396]	; (11858 <setvbuf+0x198>)
   116cc:	b083      	sub	sp, #12
   116ce:	681d      	ldr	r5, [r3, #0]
   116d0:	0004      	movs	r4, r0
   116d2:	4688      	mov	r8, r1
   116d4:	0016      	movs	r6, r2
   116d6:	2d00      	cmp	r5, #0
   116d8:	d002      	beq.n	116e0 <setvbuf+0x20>
   116da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   116dc:	2b00      	cmp	r3, #0
   116de:	d066      	beq.n	117ae <setvbuf+0xee>
   116e0:	2e02      	cmp	r6, #2
   116e2:	d005      	beq.n	116f0 <setvbuf+0x30>
   116e4:	2e01      	cmp	r6, #1
   116e6:	d900      	bls.n	116ea <setvbuf+0x2a>
   116e8:	e0a1      	b.n	1182e <setvbuf+0x16e>
   116ea:	2f00      	cmp	r7, #0
   116ec:	da00      	bge.n	116f0 <setvbuf+0x30>
   116ee:	e09e      	b.n	1182e <setvbuf+0x16e>
   116f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   116f2:	07db      	lsls	r3, r3, #31
   116f4:	d533      	bpl.n	1175e <setvbuf+0x9e>
   116f6:	0021      	movs	r1, r4
   116f8:	0028      	movs	r0, r5
   116fa:	f002 fe27 	bl	1434c <_fflush_r>
   116fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11700:	2900      	cmp	r1, #0
   11702:	d008      	beq.n	11716 <setvbuf+0x56>
   11704:	0023      	movs	r3, r4
   11706:	3340      	adds	r3, #64	; 0x40
   11708:	4299      	cmp	r1, r3
   1170a:	d002      	beq.n	11712 <setvbuf+0x52>
   1170c:	0028      	movs	r0, r5
   1170e:	f002 ff21 	bl	14554 <_free_r>
   11712:	2300      	movs	r3, #0
   11714:	6323      	str	r3, [r4, #48]	; 0x30
   11716:	2300      	movs	r3, #0
   11718:	61a3      	str	r3, [r4, #24]
   1171a:	6063      	str	r3, [r4, #4]
   1171c:	220c      	movs	r2, #12
   1171e:	5ea3      	ldrsh	r3, [r4, r2]
   11720:	061a      	lsls	r2, r3, #24
   11722:	d43d      	bmi.n	117a0 <setvbuf+0xe0>
   11724:	4a4d      	ldr	r2, [pc, #308]	; (1185c <setvbuf+0x19c>)
   11726:	4013      	ands	r3, r2
   11728:	81a3      	strh	r3, [r4, #12]
   1172a:	2e02      	cmp	r6, #2
   1172c:	d01e      	beq.n	1176c <setvbuf+0xac>
   1172e:	ab01      	add	r3, sp, #4
   11730:	466a      	mov	r2, sp
   11732:	0021      	movs	r1, r4
   11734:	0028      	movs	r0, r5
   11736:	f003 f9b9 	bl	14aac <__swhatbuf_r>
   1173a:	89a3      	ldrh	r3, [r4, #12]
   1173c:	4318      	orrs	r0, r3
   1173e:	81a0      	strh	r0, [r4, #12]
   11740:	2f00      	cmp	r7, #0
   11742:	d138      	bne.n	117b6 <setvbuf+0xf6>
   11744:	9f00      	ldr	r7, [sp, #0]
   11746:	0038      	movs	r0, r7
   11748:	f003 fa28 	bl	14b9c <malloc>
   1174c:	4680      	mov	r8, r0
   1174e:	2800      	cmp	r0, #0
   11750:	d100      	bne.n	11754 <setvbuf+0x94>
   11752:	e06f      	b.n	11834 <setvbuf+0x174>
   11754:	2280      	movs	r2, #128	; 0x80
   11756:	89a3      	ldrh	r3, [r4, #12]
   11758:	4313      	orrs	r3, r2
   1175a:	81a3      	strh	r3, [r4, #12]
   1175c:	e02e      	b.n	117bc <setvbuf+0xfc>
   1175e:	89a3      	ldrh	r3, [r4, #12]
   11760:	059b      	lsls	r3, r3, #22
   11762:	d4c8      	bmi.n	116f6 <setvbuf+0x36>
   11764:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11766:	f003 f99d 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1176a:	e7c4      	b.n	116f6 <setvbuf+0x36>
   1176c:	2500      	movs	r5, #0
   1176e:	2202      	movs	r2, #2
   11770:	4313      	orrs	r3, r2
   11772:	2200      	movs	r2, #0
   11774:	60a2      	str	r2, [r4, #8]
   11776:	0022      	movs	r2, r4
   11778:	3243      	adds	r2, #67	; 0x43
   1177a:	6022      	str	r2, [r4, #0]
   1177c:	6122      	str	r2, [r4, #16]
   1177e:	2201      	movs	r2, #1
   11780:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11782:	81a3      	strh	r3, [r4, #12]
   11784:	6162      	str	r2, [r4, #20]
   11786:	4211      	tst	r1, r2
   11788:	d104      	bne.n	11794 <setvbuf+0xd4>
   1178a:	059b      	lsls	r3, r3, #22
   1178c:	d402      	bmi.n	11794 <setvbuf+0xd4>
   1178e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11790:	f003 f98a 	bl	14aa8 <__retarget_lock_release_recursive>
   11794:	0028      	movs	r0, r5
   11796:	b003      	add	sp, #12
   11798:	bc0c      	pop	{r2, r3}
   1179a:	4690      	mov	r8, r2
   1179c:	4699      	mov	r9, r3
   1179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117a0:	6921      	ldr	r1, [r4, #16]
   117a2:	0028      	movs	r0, r5
   117a4:	f002 fed6 	bl	14554 <_free_r>
   117a8:	220c      	movs	r2, #12
   117aa:	5ea3      	ldrsh	r3, [r4, r2]
   117ac:	e7ba      	b.n	11724 <setvbuf+0x64>
   117ae:	0028      	movs	r0, r5
   117b0:	f002 fe26 	bl	14400 <__sinit>
   117b4:	e794      	b.n	116e0 <setvbuf+0x20>
   117b6:	4643      	mov	r3, r8
   117b8:	2b00      	cmp	r3, #0
   117ba:	d0c4      	beq.n	11746 <setvbuf+0x86>
   117bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   117be:	2b00      	cmp	r3, #0
   117c0:	d027      	beq.n	11812 <setvbuf+0x152>
   117c2:	9b00      	ldr	r3, [sp, #0]
   117c4:	429f      	cmp	r7, r3
   117c6:	d02a      	beq.n	1181e <setvbuf+0x15e>
   117c8:	2380      	movs	r3, #128	; 0x80
   117ca:	89a2      	ldrh	r2, [r4, #12]
   117cc:	011b      	lsls	r3, r3, #4
   117ce:	4313      	orrs	r3, r2
   117d0:	b21b      	sxth	r3, r3
   117d2:	81a3      	strh	r3, [r4, #12]
   117d4:	2e01      	cmp	r6, #1
   117d6:	d026      	beq.n	11826 <setvbuf+0x166>
   117d8:	4642      	mov	r2, r8
   117da:	6022      	str	r2, [r4, #0]
   117dc:	6122      	str	r2, [r4, #16]
   117de:	2208      	movs	r2, #8
   117e0:	b29b      	uxth	r3, r3
   117e2:	6167      	str	r7, [r4, #20]
   117e4:	401a      	ands	r2, r3
   117e6:	d00b      	beq.n	11800 <setvbuf+0x140>
   117e8:	07da      	lsls	r2, r3, #31
   117ea:	d510      	bpl.n	1180e <setvbuf+0x14e>
   117ec:	2200      	movs	r2, #0
   117ee:	2501      	movs	r5, #1
   117f0:	60a2      	str	r2, [r4, #8]
   117f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   117f4:	427f      	negs	r7, r7
   117f6:	61a7      	str	r7, [r4, #24]
   117f8:	4015      	ands	r5, r2
   117fa:	d0c6      	beq.n	1178a <setvbuf+0xca>
   117fc:	2500      	movs	r5, #0
   117fe:	e7c9      	b.n	11794 <setvbuf+0xd4>
   11800:	60a2      	str	r2, [r4, #8]
   11802:	2501      	movs	r5, #1
   11804:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11806:	4015      	ands	r5, r2
   11808:	d0bf      	beq.n	1178a <setvbuf+0xca>
   1180a:	2500      	movs	r5, #0
   1180c:	e7c2      	b.n	11794 <setvbuf+0xd4>
   1180e:	60a7      	str	r7, [r4, #8]
   11810:	e7f7      	b.n	11802 <setvbuf+0x142>
   11812:	0028      	movs	r0, r5
   11814:	f002 fdf4 	bl	14400 <__sinit>
   11818:	9b00      	ldr	r3, [sp, #0]
   1181a:	429f      	cmp	r7, r3
   1181c:	d1d4      	bne.n	117c8 <setvbuf+0x108>
   1181e:	220c      	movs	r2, #12
   11820:	5ea3      	ldrsh	r3, [r4, r2]
   11822:	2e01      	cmp	r6, #1
   11824:	d1d8      	bne.n	117d8 <setvbuf+0x118>
   11826:	2201      	movs	r2, #1
   11828:	4313      	orrs	r3, r2
   1182a:	81a3      	strh	r3, [r4, #12]
   1182c:	e7d4      	b.n	117d8 <setvbuf+0x118>
   1182e:	2501      	movs	r5, #1
   11830:	426d      	negs	r5, r5
   11832:	e7af      	b.n	11794 <setvbuf+0xd4>
   11834:	9b00      	ldr	r3, [sp, #0]
   11836:	4699      	mov	r9, r3
   11838:	42bb      	cmp	r3, r7
   1183a:	d005      	beq.n	11848 <setvbuf+0x188>
   1183c:	0018      	movs	r0, r3
   1183e:	f003 f9ad 	bl	14b9c <malloc>
   11842:	4680      	mov	r8, r0
   11844:	2800      	cmp	r0, #0
   11846:	d104      	bne.n	11852 <setvbuf+0x192>
   11848:	2501      	movs	r5, #1
   1184a:	220c      	movs	r2, #12
   1184c:	5ea3      	ldrsh	r3, [r4, r2]
   1184e:	426d      	negs	r5, r5
   11850:	e78d      	b.n	1176e <setvbuf+0xae>
   11852:	464f      	mov	r7, r9
   11854:	e77e      	b.n	11754 <setvbuf+0x94>
   11856:	46c0      	nop			; (mov r8, r8)
   11858:	2000007c 	.word	0x2000007c
   1185c:	fffff35c 	.word	0xfffff35c

00011860 <strlen>:
   11860:	b510      	push	{r4, lr}
   11862:	0783      	lsls	r3, r0, #30
   11864:	d025      	beq.n	118b2 <strlen+0x52>
   11866:	7803      	ldrb	r3, [r0, #0]
   11868:	2b00      	cmp	r3, #0
   1186a:	d024      	beq.n	118b6 <strlen+0x56>
   1186c:	0003      	movs	r3, r0
   1186e:	2103      	movs	r1, #3
   11870:	e002      	b.n	11878 <strlen+0x18>
   11872:	781a      	ldrb	r2, [r3, #0]
   11874:	2a00      	cmp	r2, #0
   11876:	d01a      	beq.n	118ae <strlen+0x4e>
   11878:	3301      	adds	r3, #1
   1187a:	420b      	tst	r3, r1
   1187c:	d1f9      	bne.n	11872 <strlen+0x12>
   1187e:	6819      	ldr	r1, [r3, #0]
   11880:	4a0e      	ldr	r2, [pc, #56]	; (118bc <strlen+0x5c>)
   11882:	4c0f      	ldr	r4, [pc, #60]	; (118c0 <strlen+0x60>)
   11884:	188a      	adds	r2, r1, r2
   11886:	438a      	bics	r2, r1
   11888:	4222      	tst	r2, r4
   1188a:	d106      	bne.n	1189a <strlen+0x3a>
   1188c:	3304      	adds	r3, #4
   1188e:	6819      	ldr	r1, [r3, #0]
   11890:	4a0a      	ldr	r2, [pc, #40]	; (118bc <strlen+0x5c>)
   11892:	188a      	adds	r2, r1, r2
   11894:	438a      	bics	r2, r1
   11896:	4222      	tst	r2, r4
   11898:	d0f8      	beq.n	1188c <strlen+0x2c>
   1189a:	001a      	movs	r2, r3
   1189c:	781b      	ldrb	r3, [r3, #0]
   1189e:	2b00      	cmp	r3, #0
   118a0:	d003      	beq.n	118aa <strlen+0x4a>
   118a2:	3201      	adds	r2, #1
   118a4:	7811      	ldrb	r1, [r2, #0]
   118a6:	2900      	cmp	r1, #0
   118a8:	d1fb      	bne.n	118a2 <strlen+0x42>
   118aa:	1a10      	subs	r0, r2, r0
   118ac:	bd10      	pop	{r4, pc}
   118ae:	1a18      	subs	r0, r3, r0
   118b0:	e7fc      	b.n	118ac <strlen+0x4c>
   118b2:	0003      	movs	r3, r0
   118b4:	e7e3      	b.n	1187e <strlen+0x1e>
   118b6:	2000      	movs	r0, #0
   118b8:	e7f8      	b.n	118ac <strlen+0x4c>
   118ba:	46c0      	nop			; (mov r8, r8)
   118bc:	fefefeff 	.word	0xfefefeff
   118c0:	80808080 	.word	0x80808080

000118c4 <_vfprintf_r>:
   118c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118c6:	46de      	mov	lr, fp
   118c8:	464e      	mov	r6, r9
   118ca:	4645      	mov	r5, r8
   118cc:	4657      	mov	r7, sl
   118ce:	b5e0      	push	{r5, r6, r7, lr}
   118d0:	b0c3      	sub	sp, #268	; 0x10c
   118d2:	4689      	mov	r9, r1
   118d4:	0014      	movs	r4, r2
   118d6:	001d      	movs	r5, r3
   118d8:	930f      	str	r3, [sp, #60]	; 0x3c
   118da:	0006      	movs	r6, r0
   118dc:	9006      	str	r0, [sp, #24]
   118de:	f003 f8cf 	bl	14a80 <_localeconv_r>
   118e2:	6803      	ldr	r3, [r0, #0]
   118e4:	0018      	movs	r0, r3
   118e6:	9318      	str	r3, [sp, #96]	; 0x60
   118e8:	f7ff ffba 	bl	11860 <strlen>
   118ec:	9017      	str	r0, [sp, #92]	; 0x5c
   118ee:	2e00      	cmp	r6, #0
   118f0:	d004      	beq.n	118fc <_vfprintf_r+0x38>
   118f2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   118f4:	9307      	str	r3, [sp, #28]
   118f6:	2b00      	cmp	r3, #0
   118f8:	d100      	bne.n	118fc <_vfprintf_r+0x38>
   118fa:	e0a7      	b.n	11a4c <_vfprintf_r+0x188>
   118fc:	464b      	mov	r3, r9
   118fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11900:	07db      	lsls	r3, r3, #31
   11902:	d478      	bmi.n	119f6 <_vfprintf_r+0x132>
   11904:	464b      	mov	r3, r9
   11906:	210c      	movs	r1, #12
   11908:	5e59      	ldrsh	r1, [r3, r1]
   1190a:	b28b      	uxth	r3, r1
   1190c:	059a      	lsls	r2, r3, #22
   1190e:	d56e      	bpl.n	119ee <_vfprintf_r+0x12a>
   11910:	2280      	movs	r2, #128	; 0x80
   11912:	0192      	lsls	r2, r2, #6
   11914:	4213      	tst	r3, r2
   11916:	d109      	bne.n	1192c <_vfprintf_r+0x68>
   11918:	430a      	orrs	r2, r1
   1191a:	464b      	mov	r3, r9
   1191c:	4649      	mov	r1, r9
   1191e:	819a      	strh	r2, [r3, #12]
   11920:	6e49      	ldr	r1, [r1, #100]	; 0x64
   11922:	4bcc      	ldr	r3, [pc, #816]	; (11c54 <_vfprintf_r+0x390>)
   11924:	400b      	ands	r3, r1
   11926:	4649      	mov	r1, r9
   11928:	664b      	str	r3, [r1, #100]	; 0x64
   1192a:	b293      	uxth	r3, r2
   1192c:	071a      	lsls	r2, r3, #28
   1192e:	d567      	bpl.n	11a00 <_vfprintf_r+0x13c>
   11930:	464a      	mov	r2, r9
   11932:	6912      	ldr	r2, [r2, #16]
   11934:	2a00      	cmp	r2, #0
   11936:	d063      	beq.n	11a00 <_vfprintf_r+0x13c>
   11938:	221a      	movs	r2, #26
   1193a:	401a      	ands	r2, r3
   1193c:	2a0a      	cmp	r2, #10
   1193e:	d100      	bne.n	11942 <_vfprintf_r+0x7e>
   11940:	e088      	b.n	11a54 <_vfprintf_r+0x190>
   11942:	ab32      	add	r3, sp, #200	; 0xc8
   11944:	9325      	str	r3, [sp, #148]	; 0x94
   11946:	2300      	movs	r3, #0
   11948:	46cb      	mov	fp, r9
   1194a:	af25      	add	r7, sp, #148	; 0x94
   1194c:	60bb      	str	r3, [r7, #8]
   1194e:	607b      	str	r3, [r7, #4]
   11950:	9407      	str	r4, [sp, #28]
   11952:	9314      	str	r3, [sp, #80]	; 0x50
   11954:	9316      	str	r3, [sp, #88]	; 0x58
   11956:	9315      	str	r3, [sp, #84]	; 0x54
   11958:	ae32      	add	r6, sp, #200	; 0xc8
   1195a:	9319      	str	r3, [sp, #100]	; 0x64
   1195c:	931a      	str	r3, [sp, #104]	; 0x68
   1195e:	930a      	str	r3, [sp, #40]	; 0x28
   11960:	9c07      	ldr	r4, [sp, #28]
   11962:	7823      	ldrb	r3, [r4, #0]
   11964:	2b00      	cmp	r3, #0
   11966:	d101      	bne.n	1196c <_vfprintf_r+0xa8>
   11968:	f000 fd9e 	bl	124a8 <_vfprintf_r+0xbe4>
   1196c:	2b25      	cmp	r3, #37	; 0x25
   1196e:	d103      	bne.n	11978 <_vfprintf_r+0xb4>
   11970:	f000 fd9a 	bl	124a8 <_vfprintf_r+0xbe4>
   11974:	2b25      	cmp	r3, #37	; 0x25
   11976:	d003      	beq.n	11980 <_vfprintf_r+0xbc>
   11978:	3401      	adds	r4, #1
   1197a:	7823      	ldrb	r3, [r4, #0]
   1197c:	2b00      	cmp	r3, #0
   1197e:	d1f9      	bne.n	11974 <_vfprintf_r+0xb0>
   11980:	9b07      	ldr	r3, [sp, #28]
   11982:	1ae5      	subs	r5, r4, r3
   11984:	d010      	beq.n	119a8 <_vfprintf_r+0xe4>
   11986:	9b07      	ldr	r3, [sp, #28]
   11988:	6075      	str	r5, [r6, #4]
   1198a:	6033      	str	r3, [r6, #0]
   1198c:	68bb      	ldr	r3, [r7, #8]
   1198e:	195b      	adds	r3, r3, r5
   11990:	60bb      	str	r3, [r7, #8]
   11992:	687b      	ldr	r3, [r7, #4]
   11994:	3301      	adds	r3, #1
   11996:	607b      	str	r3, [r7, #4]
   11998:	2b07      	cmp	r3, #7
   1199a:	dc4c      	bgt.n	11a36 <_vfprintf_r+0x172>
   1199c:	3608      	adds	r6, #8
   1199e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   119a0:	469c      	mov	ip, r3
   119a2:	44ac      	add	ip, r5
   119a4:	4663      	mov	r3, ip
   119a6:	930a      	str	r3, [sp, #40]	; 0x28
   119a8:	7823      	ldrb	r3, [r4, #0]
   119aa:	2b00      	cmp	r3, #0
   119ac:	d101      	bne.n	119b2 <_vfprintf_r+0xee>
   119ae:	f000 fc99 	bl	122e4 <_vfprintf_r+0xa20>
   119b2:	1c63      	adds	r3, r4, #1
   119b4:	9307      	str	r3, [sp, #28]
   119b6:	2300      	movs	r3, #0
   119b8:	aa16      	add	r2, sp, #88	; 0x58
   119ba:	77d3      	strb	r3, [r2, #31]
   119bc:	2201      	movs	r2, #1
   119be:	4252      	negs	r2, r2
   119c0:	4692      	mov	sl, r2
   119c2:	2200      	movs	r2, #0
   119c4:	920b      	str	r2, [sp, #44]	; 0x2c
   119c6:	3220      	adds	r2, #32
   119c8:	4691      	mov	r9, r2
   119ca:	3220      	adds	r2, #32
   119cc:	7863      	ldrb	r3, [r4, #1]
   119ce:	2100      	movs	r1, #0
   119d0:	2000      	movs	r0, #0
   119d2:	2400      	movs	r4, #0
   119d4:	4694      	mov	ip, r2
   119d6:	9a07      	ldr	r2, [sp, #28]
   119d8:	3201      	adds	r2, #1
   119da:	9207      	str	r2, [sp, #28]
   119dc:	001a      	movs	r2, r3
   119de:	3a20      	subs	r2, #32
   119e0:	2a58      	cmp	r2, #88	; 0x58
   119e2:	d900      	bls.n	119e6 <_vfprintf_r+0x122>
   119e4:	e2e7      	b.n	11fb6 <_vfprintf_r+0x6f2>
   119e6:	4d9c      	ldr	r5, [pc, #624]	; (11c58 <_vfprintf_r+0x394>)
   119e8:	0092      	lsls	r2, r2, #2
   119ea:	58aa      	ldr	r2, [r5, r2]
   119ec:	4697      	mov	pc, r2
   119ee:	464b      	mov	r3, r9
   119f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
   119f2:	f003 f857 	bl	14aa4 <__retarget_lock_acquire_recursive>
   119f6:	464b      	mov	r3, r9
   119f8:	210c      	movs	r1, #12
   119fa:	5e59      	ldrsh	r1, [r3, r1]
   119fc:	b28b      	uxth	r3, r1
   119fe:	e787      	b.n	11910 <_vfprintf_r+0x4c>
   11a00:	4649      	mov	r1, r9
   11a02:	9806      	ldr	r0, [sp, #24]
   11a04:	f001 fb0e 	bl	13024 <__swsetup_r>
   11a08:	464b      	mov	r3, r9
   11a0a:	2800      	cmp	r0, #0
   11a0c:	d03a      	beq.n	11a84 <_vfprintf_r+0x1c0>
   11a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11a10:	07db      	lsls	r3, r3, #31
   11a12:	d405      	bmi.n	11a20 <_vfprintf_r+0x15c>
   11a14:	464b      	mov	r3, r9
   11a16:	899b      	ldrh	r3, [r3, #12]
   11a18:	059b      	lsls	r3, r3, #22
   11a1a:	d401      	bmi.n	11a20 <_vfprintf_r+0x15c>
   11a1c:	f000 ffcf 	bl	129be <_vfprintf_r+0x10fa>
   11a20:	2301      	movs	r3, #1
   11a22:	425b      	negs	r3, r3
   11a24:	930a      	str	r3, [sp, #40]	; 0x28
   11a26:	980a      	ldr	r0, [sp, #40]	; 0x28
   11a28:	b043      	add	sp, #268	; 0x10c
   11a2a:	bc3c      	pop	{r2, r3, r4, r5}
   11a2c:	4690      	mov	r8, r2
   11a2e:	4699      	mov	r9, r3
   11a30:	46a2      	mov	sl, r4
   11a32:	46ab      	mov	fp, r5
   11a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a36:	003a      	movs	r2, r7
   11a38:	4659      	mov	r1, fp
   11a3a:	9806      	ldr	r0, [sp, #24]
   11a3c:	f004 f9ca 	bl	15dd4 <__sprint_r>
   11a40:	2800      	cmp	r0, #0
   11a42:	d001      	beq.n	11a48 <_vfprintf_r+0x184>
   11a44:	f000 fcce 	bl	123e4 <_vfprintf_r+0xb20>
   11a48:	ae32      	add	r6, sp, #200	; 0xc8
   11a4a:	e7a8      	b.n	1199e <_vfprintf_r+0xda>
   11a4c:	9806      	ldr	r0, [sp, #24]
   11a4e:	f002 fcd7 	bl	14400 <__sinit>
   11a52:	e753      	b.n	118fc <_vfprintf_r+0x38>
   11a54:	464a      	mov	r2, r9
   11a56:	210e      	movs	r1, #14
   11a58:	5e52      	ldrsh	r2, [r2, r1]
   11a5a:	2a00      	cmp	r2, #0
   11a5c:	da00      	bge.n	11a60 <_vfprintf_r+0x19c>
   11a5e:	e770      	b.n	11942 <_vfprintf_r+0x7e>
   11a60:	464a      	mov	r2, r9
   11a62:	6e52      	ldr	r2, [r2, #100]	; 0x64
   11a64:	07d2      	lsls	r2, r2, #31
   11a66:	d405      	bmi.n	11a74 <_vfprintf_r+0x1b0>
   11a68:	059b      	lsls	r3, r3, #22
   11a6a:	d403      	bmi.n	11a74 <_vfprintf_r+0x1b0>
   11a6c:	464b      	mov	r3, r9
   11a6e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11a70:	f003 f81a 	bl	14aa8 <__retarget_lock_release_recursive>
   11a74:	002b      	movs	r3, r5
   11a76:	0022      	movs	r2, r4
   11a78:	4649      	mov	r1, r9
   11a7a:	9806      	ldr	r0, [sp, #24]
   11a7c:	f001 fa8e 	bl	12f9c <__sbprintf>
   11a80:	900a      	str	r0, [sp, #40]	; 0x28
   11a82:	e7d0      	b.n	11a26 <_vfprintf_r+0x162>
   11a84:	899b      	ldrh	r3, [r3, #12]
   11a86:	e757      	b.n	11938 <_vfprintf_r+0x74>
   11a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a8a:	920f      	str	r2, [sp, #60]	; 0x3c
   11a8c:	425b      	negs	r3, r3
   11a8e:	930b      	str	r3, [sp, #44]	; 0x2c
   11a90:	2304      	movs	r3, #4
   11a92:	431c      	orrs	r4, r3
   11a94:	9b07      	ldr	r3, [sp, #28]
   11a96:	781b      	ldrb	r3, [r3, #0]
   11a98:	e79d      	b.n	119d6 <_vfprintf_r+0x112>
   11a9a:	9b07      	ldr	r3, [sp, #28]
   11a9c:	2101      	movs	r1, #1
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	202b      	movs	r0, #43	; 0x2b
   11aa2:	e798      	b.n	119d6 <_vfprintf_r+0x112>
   11aa4:	9b07      	ldr	r3, [sp, #28]
   11aa6:	1c5a      	adds	r2, r3, #1
   11aa8:	781b      	ldrb	r3, [r3, #0]
   11aaa:	4690      	mov	r8, r2
   11aac:	2b2a      	cmp	r3, #42	; 0x2a
   11aae:	d101      	bne.n	11ab4 <_vfprintf_r+0x1f0>
   11ab0:	f001 fa38 	bl	12f24 <_vfprintf_r+0x1660>
   11ab4:	001a      	movs	r2, r3
   11ab6:	2500      	movs	r5, #0
   11ab8:	3a30      	subs	r2, #48	; 0x30
   11aba:	46aa      	mov	sl, r5
   11abc:	2a09      	cmp	r2, #9
   11abe:	d901      	bls.n	11ac4 <_vfprintf_r+0x200>
   11ac0:	f001 f96d 	bl	12d9e <_vfprintf_r+0x14da>
   11ac4:	0025      	movs	r5, r4
   11ac6:	4643      	mov	r3, r8
   11ac8:	4654      	mov	r4, sl
   11aca:	4688      	mov	r8, r1
   11acc:	4682      	mov	sl, r0
   11ace:	00a1      	lsls	r1, r4, #2
   11ad0:	190c      	adds	r4, r1, r4
   11ad2:	7818      	ldrb	r0, [r3, #0]
   11ad4:	0064      	lsls	r4, r4, #1
   11ad6:	18a4      	adds	r4, r4, r2
   11ad8:	0002      	movs	r2, r0
   11ada:	1c59      	adds	r1, r3, #1
   11adc:	3a30      	subs	r2, #48	; 0x30
   11ade:	000b      	movs	r3, r1
   11ae0:	2a09      	cmp	r2, #9
   11ae2:	d9f4      	bls.n	11ace <_vfprintf_r+0x20a>
   11ae4:	9107      	str	r1, [sp, #28]
   11ae6:	0003      	movs	r3, r0
   11ae8:	4641      	mov	r1, r8
   11aea:	4650      	mov	r0, sl
   11aec:	46a2      	mov	sl, r4
   11aee:	002c      	movs	r4, r5
   11af0:	e774      	b.n	119dc <_vfprintf_r+0x118>
   11af2:	9312      	str	r3, [sp, #72]	; 0x48
   11af4:	2900      	cmp	r1, #0
   11af6:	d001      	beq.n	11afc <_vfprintf_r+0x238>
   11af8:	f001 fa2e 	bl	12f58 <_vfprintf_r+0x1694>
   11afc:	4b57      	ldr	r3, [pc, #348]	; (11c5c <_vfprintf_r+0x398>)
   11afe:	9319      	str	r3, [sp, #100]	; 0x64
   11b00:	06a3      	lsls	r3, r4, #26
   11b02:	d501      	bpl.n	11b08 <_vfprintf_r+0x244>
   11b04:	f000 fe9a 	bl	1283c <_vfprintf_r+0xf78>
   11b08:	06e3      	lsls	r3, r4, #27
   11b0a:	d501      	bpl.n	11b10 <_vfprintf_r+0x24c>
   11b0c:	f000 fd9a 	bl	12644 <_vfprintf_r+0xd80>
   11b10:	0663      	lsls	r3, r4, #25
   11b12:	d401      	bmi.n	11b18 <_vfprintf_r+0x254>
   11b14:	f000 fd96 	bl	12644 <_vfprintf_r+0xd80>
   11b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11b1a:	881a      	ldrh	r2, [r3, #0]
   11b1c:	920c      	str	r2, [sp, #48]	; 0x30
   11b1e:	2200      	movs	r2, #0
   11b20:	3304      	adds	r3, #4
   11b22:	920d      	str	r2, [sp, #52]	; 0x34
   11b24:	930f      	str	r3, [sp, #60]	; 0x3c
   11b26:	07e3      	lsls	r3, r4, #31
   11b28:	d401      	bmi.n	11b2e <_vfprintf_r+0x26a>
   11b2a:	f000 fd76 	bl	1261a <_vfprintf_r+0xd56>
   11b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
   11b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11b32:	000b      	movs	r3, r1
   11b34:	4313      	orrs	r3, r2
   11b36:	001a      	movs	r2, r3
   11b38:	2302      	movs	r3, #2
   11b3a:	2a00      	cmp	r2, #0
   11b3c:	d008      	beq.n	11b50 <_vfprintf_r+0x28c>
   11b3e:	2030      	movs	r0, #48	; 0x30
   11b40:	a91e      	add	r1, sp, #120	; 0x78
   11b42:	7008      	strb	r0, [r1, #0]
   11b44:	2548      	movs	r5, #72	; 0x48
   11b46:	4668      	mov	r0, sp
   11b48:	1940      	adds	r0, r0, r5
   11b4a:	7800      	ldrb	r0, [r0, #0]
   11b4c:	431c      	orrs	r4, r3
   11b4e:	7048      	strb	r0, [r1, #1]
   11b50:	2100      	movs	r1, #0
   11b52:	4688      	mov	r8, r1
   11b54:	a816      	add	r0, sp, #88	; 0x58
   11b56:	77c1      	strb	r1, [r0, #31]
   11b58:	4651      	mov	r1, sl
   11b5a:	3101      	adds	r1, #1
   11b5c:	d100      	bne.n	11b60 <_vfprintf_r+0x29c>
   11b5e:	e0e6      	b.n	11d2e <_vfprintf_r+0x46a>
   11b60:	2180      	movs	r1, #128	; 0x80
   11b62:	0020      	movs	r0, r4
   11b64:	4388      	bics	r0, r1
   11b66:	9009      	str	r0, [sp, #36]	; 0x24
   11b68:	2a00      	cmp	r2, #0
   11b6a:	d000      	beq.n	11b6e <_vfprintf_r+0x2aa>
   11b6c:	e0e3      	b.n	11d36 <_vfprintf_r+0x472>
   11b6e:	4652      	mov	r2, sl
   11b70:	2a00      	cmp	r2, #0
   11b72:	d001      	beq.n	11b78 <_vfprintf_r+0x2b4>
   11b74:	f000 fc38 	bl	123e8 <_vfprintf_r+0xb24>
   11b78:	2b00      	cmp	r3, #0
   11b7a:	d001      	beq.n	11b80 <_vfprintf_r+0x2bc>
   11b7c:	f000 fd0c 	bl	12598 <_vfprintf_r+0xcd4>
   11b80:	2001      	movs	r0, #1
   11b82:	ab32      	add	r3, sp, #200	; 0xc8
   11b84:	4020      	ands	r0, r4
   11b86:	900e      	str	r0, [sp, #56]	; 0x38
   11b88:	9311      	str	r3, [sp, #68]	; 0x44
   11b8a:	d008      	beq.n	11b9e <_vfprintf_r+0x2da>
   11b8c:	2327      	movs	r3, #39	; 0x27
   11b8e:	2130      	movs	r1, #48	; 0x30
   11b90:	aa28      	add	r2, sp, #160	; 0xa0
   11b92:	54d1      	strb	r1, [r2, r3]
   11b94:	aa16      	add	r2, sp, #88	; 0x58
   11b96:	4694      	mov	ip, r2
   11b98:	3348      	adds	r3, #72	; 0x48
   11b9a:	4463      	add	r3, ip
   11b9c:	9311      	str	r3, [sp, #68]	; 0x44
   11b9e:	4653      	mov	r3, sl
   11ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11ba2:	9308      	str	r3, [sp, #32]
   11ba4:	4592      	cmp	sl, r2
   11ba6:	da00      	bge.n	11baa <_vfprintf_r+0x2e6>
   11ba8:	9208      	str	r2, [sp, #32]
   11baa:	2300      	movs	r3, #0
   11bac:	9313      	str	r3, [sp, #76]	; 0x4c
   11bae:	4643      	mov	r3, r8
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d002      	beq.n	11bba <_vfprintf_r+0x2f6>
   11bb4:	9b08      	ldr	r3, [sp, #32]
   11bb6:	3301      	adds	r3, #1
   11bb8:	9308      	str	r3, [sp, #32]
   11bba:	2302      	movs	r3, #2
   11bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11bbe:	401a      	ands	r2, r3
   11bc0:	4691      	mov	r9, r2
   11bc2:	d002      	beq.n	11bca <_vfprintf_r+0x306>
   11bc4:	9b08      	ldr	r3, [sp, #32]
   11bc6:	3302      	adds	r3, #2
   11bc8:	9308      	str	r3, [sp, #32]
   11bca:	2384      	movs	r3, #132	; 0x84
   11bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11bce:	401a      	ands	r2, r3
   11bd0:	9210      	str	r2, [sp, #64]	; 0x40
   11bd2:	d000      	beq.n	11bd6 <_vfprintf_r+0x312>
   11bd4:	e207      	b.n	11fe6 <_vfprintf_r+0x722>
   11bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11bd8:	9a08      	ldr	r2, [sp, #32]
   11bda:	1a9c      	subs	r4, r3, r2
   11bdc:	2c00      	cmp	r4, #0
   11bde:	dc00      	bgt.n	11be2 <_vfprintf_r+0x31e>
   11be0:	e201      	b.n	11fe6 <_vfprintf_r+0x722>
   11be2:	491f      	ldr	r1, [pc, #124]	; (11c60 <_vfprintf_r+0x39c>)
   11be4:	68ba      	ldr	r2, [r7, #8]
   11be6:	687b      	ldr	r3, [r7, #4]
   11be8:	4688      	mov	r8, r1
   11bea:	2c10      	cmp	r4, #16
   11bec:	dd21      	ble.n	11c32 <_vfprintf_r+0x36e>
   11bee:	0031      	movs	r1, r6
   11bf0:	2510      	movs	r5, #16
   11bf2:	465e      	mov	r6, fp
   11bf4:	e003      	b.n	11bfe <_vfprintf_r+0x33a>
   11bf6:	3c10      	subs	r4, #16
   11bf8:	3108      	adds	r1, #8
   11bfa:	2c10      	cmp	r4, #16
   11bfc:	dd17      	ble.n	11c2e <_vfprintf_r+0x36a>
   11bfe:	4640      	mov	r0, r8
   11c00:	3210      	adds	r2, #16
   11c02:	3301      	adds	r3, #1
   11c04:	6008      	str	r0, [r1, #0]
   11c06:	604d      	str	r5, [r1, #4]
   11c08:	60ba      	str	r2, [r7, #8]
   11c0a:	607b      	str	r3, [r7, #4]
   11c0c:	2b07      	cmp	r3, #7
   11c0e:	ddf2      	ble.n	11bf6 <_vfprintf_r+0x332>
   11c10:	003a      	movs	r2, r7
   11c12:	0031      	movs	r1, r6
   11c14:	9806      	ldr	r0, [sp, #24]
   11c16:	f004 f8dd 	bl	15dd4 <__sprint_r>
   11c1a:	2800      	cmp	r0, #0
   11c1c:	d001      	beq.n	11c22 <_vfprintf_r+0x35e>
   11c1e:	f000 fccf 	bl	125c0 <_vfprintf_r+0xcfc>
   11c22:	3c10      	subs	r4, #16
   11c24:	68ba      	ldr	r2, [r7, #8]
   11c26:	687b      	ldr	r3, [r7, #4]
   11c28:	a932      	add	r1, sp, #200	; 0xc8
   11c2a:	2c10      	cmp	r4, #16
   11c2c:	dce7      	bgt.n	11bfe <_vfprintf_r+0x33a>
   11c2e:	46b3      	mov	fp, r6
   11c30:	000e      	movs	r6, r1
   11c32:	4641      	mov	r1, r8
   11c34:	6074      	str	r4, [r6, #4]
   11c36:	3301      	adds	r3, #1
   11c38:	18a4      	adds	r4, r4, r2
   11c3a:	6031      	str	r1, [r6, #0]
   11c3c:	60bc      	str	r4, [r7, #8]
   11c3e:	607b      	str	r3, [r7, #4]
   11c40:	2b07      	cmp	r3, #7
   11c42:	dd01      	ble.n	11c48 <_vfprintf_r+0x384>
   11c44:	f000 fcae 	bl	125a4 <_vfprintf_r+0xce0>
   11c48:	ab16      	add	r3, sp, #88	; 0x58
   11c4a:	7fdb      	ldrb	r3, [r3, #31]
   11c4c:	3608      	adds	r6, #8
   11c4e:	4698      	mov	r8, r3
   11c50:	e1ca      	b.n	11fe8 <_vfprintf_r+0x724>
   11c52:	46c0      	nop			; (mov r8, r8)
   11c54:	ffffdfff 	.word	0xffffdfff
   11c58:	000177a8 	.word	0x000177a8
   11c5c:	00017930 	.word	0x00017930
   11c60:	00017950 	.word	0x00017950
   11c64:	2200      	movs	r2, #0
   11c66:	9d07      	ldr	r5, [sp, #28]
   11c68:	3b30      	subs	r3, #48	; 0x30
   11c6a:	46a8      	mov	r8, r5
   11c6c:	920b      	str	r2, [sp, #44]	; 0x2c
   11c6e:	001a      	movs	r2, r3
   11c70:	9408      	str	r4, [sp, #32]
   11c72:	002c      	movs	r4, r5
   11c74:	4655      	mov	r5, sl
   11c76:	4682      	mov	sl, r0
   11c78:	4640      	mov	r0, r8
   11c7a:	4688      	mov	r8, r1
   11c7c:	0011      	movs	r1, r2
   11c7e:	2200      	movs	r2, #0
   11c80:	0093      	lsls	r3, r2, #2
   11c82:	189a      	adds	r2, r3, r2
   11c84:	7803      	ldrb	r3, [r0, #0]
   11c86:	0052      	lsls	r2, r2, #1
   11c88:	188a      	adds	r2, r1, r2
   11c8a:	0019      	movs	r1, r3
   11c8c:	3401      	adds	r4, #1
   11c8e:	3930      	subs	r1, #48	; 0x30
   11c90:	0020      	movs	r0, r4
   11c92:	2909      	cmp	r1, #9
   11c94:	d9f4      	bls.n	11c80 <_vfprintf_r+0x3bc>
   11c96:	9407      	str	r4, [sp, #28]
   11c98:	4650      	mov	r0, sl
   11c9a:	9c08      	ldr	r4, [sp, #32]
   11c9c:	920b      	str	r2, [sp, #44]	; 0x2c
   11c9e:	4641      	mov	r1, r8
   11ca0:	46aa      	mov	sl, r5
   11ca2:	e69b      	b.n	119dc <_vfprintf_r+0x118>
   11ca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11ca6:	9312      	str	r3, [sp, #72]	; 0x48
   11ca8:	6813      	ldr	r3, [r2, #0]
   11caa:	2120      	movs	r1, #32
   11cac:	9308      	str	r3, [sp, #32]
   11cae:	466b      	mov	r3, sp
   11cb0:	185b      	adds	r3, r3, r1
   11cb2:	781b      	ldrb	r3, [r3, #0]
   11cb4:	ad28      	add	r5, sp, #160	; 0xa0
   11cb6:	702b      	strb	r3, [r5, #0]
   11cb8:	2300      	movs	r3, #0
   11cba:	a916      	add	r1, sp, #88	; 0x58
   11cbc:	77cb      	strb	r3, [r1, #31]
   11cbe:	0013      	movs	r3, r2
   11cc0:	3304      	adds	r3, #4
   11cc2:	930f      	str	r3, [sp, #60]	; 0x3c
   11cc4:	2300      	movs	r3, #0
   11cc6:	9409      	str	r4, [sp, #36]	; 0x24
   11cc8:	4698      	mov	r8, r3
   11cca:	3301      	adds	r3, #1
   11ccc:	9308      	str	r3, [sp, #32]
   11cce:	930e      	str	r3, [sp, #56]	; 0x38
   11cd0:	2300      	movs	r3, #0
   11cd2:	9511      	str	r5, [sp, #68]	; 0x44
   11cd4:	469a      	mov	sl, r3
   11cd6:	9313      	str	r3, [sp, #76]	; 0x4c
   11cd8:	e76f      	b.n	11bba <_vfprintf_r+0x2f6>
   11cda:	9312      	str	r3, [sp, #72]	; 0x48
   11cdc:	2900      	cmp	r1, #0
   11cde:	d001      	beq.n	11ce4 <_vfprintf_r+0x420>
   11ce0:	f001 f94d 	bl	12f7e <_vfprintf_r+0x16ba>
   11ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11ce6:	06a3      	lsls	r3, r4, #26
   11ce8:	d501      	bpl.n	11cee <_vfprintf_r+0x42a>
   11cea:	f000 fd5a 	bl	127a2 <_vfprintf_r+0xede>
   11cee:	06e3      	lsls	r3, r4, #27
   11cf0:	d501      	bpl.n	11cf6 <_vfprintf_r+0x432>
   11cf2:	f000 fcab 	bl	1264c <_vfprintf_r+0xd88>
   11cf6:	0663      	lsls	r3, r4, #25
   11cf8:	d401      	bmi.n	11cfe <_vfprintf_r+0x43a>
   11cfa:	f000 fca7 	bl	1264c <_vfprintf_r+0xd88>
   11cfe:	2100      	movs	r1, #0
   11d00:	5e53      	ldrsh	r3, [r2, r1]
   11d02:	930c      	str	r3, [sp, #48]	; 0x30
   11d04:	3204      	adds	r2, #4
   11d06:	17db      	asrs	r3, r3, #31
   11d08:	930d      	str	r3, [sp, #52]	; 0x34
   11d0a:	920f      	str	r2, [sp, #60]	; 0x3c
   11d0c:	2b00      	cmp	r3, #0
   11d0e:	da01      	bge.n	11d14 <_vfprintf_r+0x450>
   11d10:	f000 fdb2 	bl	12878 <_vfprintf_r+0xfb4>
   11d14:	990c      	ldr	r1, [sp, #48]	; 0x30
   11d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11d18:	0008      	movs	r0, r1
   11d1a:	4651      	mov	r1, sl
   11d1c:	ab16      	add	r3, sp, #88	; 0x58
   11d1e:	7fdb      	ldrb	r3, [r3, #31]
   11d20:	4310      	orrs	r0, r2
   11d22:	4698      	mov	r8, r3
   11d24:	0002      	movs	r2, r0
   11d26:	2301      	movs	r3, #1
   11d28:	3101      	adds	r1, #1
   11d2a:	d000      	beq.n	11d2e <_vfprintf_r+0x46a>
   11d2c:	e718      	b.n	11b60 <_vfprintf_r+0x29c>
   11d2e:	2a00      	cmp	r2, #0
   11d30:	d100      	bne.n	11d34 <_vfprintf_r+0x470>
   11d32:	e35a      	b.n	123ea <_vfprintf_r+0xb26>
   11d34:	9409      	str	r4, [sp, #36]	; 0x24
   11d36:	2b01      	cmp	r3, #1
   11d38:	d101      	bne.n	11d3e <_vfprintf_r+0x47a>
   11d3a:	f000 fc06 	bl	1254a <_vfprintf_r+0xc86>
   11d3e:	2b02      	cmp	r3, #2
   11d40:	d000      	beq.n	11d44 <_vfprintf_r+0x480>
   11d42:	e380      	b.n	12446 <_vfprintf_r+0xb82>
   11d44:	9c19      	ldr	r4, [sp, #100]	; 0x64
   11d46:	200f      	movs	r0, #15
   11d48:	46a1      	mov	r9, r4
   11d4a:	46b4      	mov	ip, r6
   11d4c:	ab32      	add	r3, sp, #200	; 0xc8
   11d4e:	0019      	movs	r1, r3
   11d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11d54:	0004      	movs	r4, r0
   11d56:	464d      	mov	r5, r9
   11d58:	4014      	ands	r4, r2
   11d5a:	5d2c      	ldrb	r4, [r5, r4]
   11d5c:	071e      	lsls	r6, r3, #28
   11d5e:	0915      	lsrs	r5, r2, #4
   11d60:	3901      	subs	r1, #1
   11d62:	432e      	orrs	r6, r5
   11d64:	700c      	strb	r4, [r1, #0]
   11d66:	091c      	lsrs	r4, r3, #4
   11d68:	0023      	movs	r3, r4
   11d6a:	0034      	movs	r4, r6
   11d6c:	0032      	movs	r2, r6
   11d6e:	431c      	orrs	r4, r3
   11d70:	d1f0      	bne.n	11d54 <_vfprintf_r+0x490>
   11d72:	920c      	str	r2, [sp, #48]	; 0x30
   11d74:	930d      	str	r3, [sp, #52]	; 0x34
   11d76:	ab32      	add	r3, sp, #200	; 0xc8
   11d78:	1a5b      	subs	r3, r3, r1
   11d7a:	9111      	str	r1, [sp, #68]	; 0x44
   11d7c:	4666      	mov	r6, ip
   11d7e:	930e      	str	r3, [sp, #56]	; 0x38
   11d80:	e70d      	b.n	11b9e <_vfprintf_r+0x2da>
   11d82:	4663      	mov	r3, ip
   11d84:	431c      	orrs	r4, r3
   11d86:	9b07      	ldr	r3, [sp, #28]
   11d88:	781b      	ldrb	r3, [r3, #0]
   11d8a:	e624      	b.n	119d6 <_vfprintf_r+0x112>
   11d8c:	9b07      	ldr	r3, [sp, #28]
   11d8e:	781b      	ldrb	r3, [r3, #0]
   11d90:	2b6c      	cmp	r3, #108	; 0x6c
   11d92:	d101      	bne.n	11d98 <_vfprintf_r+0x4d4>
   11d94:	f000 fe8c 	bl	12ab0 <_vfprintf_r+0x11ec>
   11d98:	2210      	movs	r2, #16
   11d9a:	4314      	orrs	r4, r2
   11d9c:	e61b      	b.n	119d6 <_vfprintf_r+0x112>
   11d9e:	2900      	cmp	r1, #0
   11da0:	d001      	beq.n	11da6 <_vfprintf_r+0x4e2>
   11da2:	f001 f8d5 	bl	12f50 <_vfprintf_r+0x168c>
   11da6:	06a3      	lsls	r3, r4, #26
   11da8:	d501      	bpl.n	11dae <_vfprintf_r+0x4ea>
   11daa:	f000 fe76 	bl	12a9a <_vfprintf_r+0x11d6>
   11dae:	06e3      	lsls	r3, r4, #27
   11db0:	d500      	bpl.n	11db4 <_vfprintf_r+0x4f0>
   11db2:	e110      	b.n	11fd6 <_vfprintf_r+0x712>
   11db4:	0663      	lsls	r3, r4, #25
   11db6:	d400      	bmi.n	11dba <_vfprintf_r+0x4f6>
   11db8:	e10d      	b.n	11fd6 <_vfprintf_r+0x712>
   11dba:	4669      	mov	r1, sp
   11dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11dbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   11dc0:	681a      	ldr	r2, [r3, #0]
   11dc2:	3304      	adds	r3, #4
   11dc4:	9208      	str	r2, [sp, #32]
   11dc6:	8011      	strh	r1, [r2, #0]
   11dc8:	930f      	str	r3, [sp, #60]	; 0x3c
   11dca:	e5c9      	b.n	11960 <_vfprintf_r+0x9c>
   11dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11dce:	2230      	movs	r2, #48	; 0x30
   11dd0:	680b      	ldr	r3, [r1, #0]
   11dd2:	930c      	str	r3, [sp, #48]	; 0x30
   11dd4:	2300      	movs	r3, #0
   11dd6:	930d      	str	r3, [sp, #52]	; 0x34
   11dd8:	3302      	adds	r3, #2
   11dda:	431c      	orrs	r4, r3
   11ddc:	ab1e      	add	r3, sp, #120	; 0x78
   11dde:	701a      	strb	r2, [r3, #0]
   11de0:	3248      	adds	r2, #72	; 0x48
   11de2:	705a      	strb	r2, [r3, #1]
   11de4:	000b      	movs	r3, r1
   11de6:	3304      	adds	r3, #4
   11de8:	930f      	str	r3, [sp, #60]	; 0x3c
   11dea:	4bc1      	ldr	r3, [pc, #772]	; (120f0 <_vfprintf_r+0x82c>)
   11dec:	9212      	str	r2, [sp, #72]	; 0x48
   11dee:	9319      	str	r3, [sp, #100]	; 0x64
   11df0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11df2:	2302      	movs	r3, #2
   11df4:	e6ac      	b.n	11b50 <_vfprintf_r+0x28c>
   11df6:	464b      	mov	r3, r9
   11df8:	431c      	orrs	r4, r3
   11dfa:	9b07      	ldr	r3, [sp, #28]
   11dfc:	781b      	ldrb	r3, [r3, #0]
   11dfe:	e5ea      	b.n	119d6 <_vfprintf_r+0x112>
   11e00:	9312      	str	r3, [sp, #72]	; 0x48
   11e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11e04:	a916      	add	r1, sp, #88	; 0x58
   11e06:	1d1d      	adds	r5, r3, #4
   11e08:	681b      	ldr	r3, [r3, #0]
   11e0a:	001a      	movs	r2, r3
   11e0c:	9311      	str	r3, [sp, #68]	; 0x44
   11e0e:	2300      	movs	r3, #0
   11e10:	77cb      	strb	r3, [r1, #31]
   11e12:	2a00      	cmp	r2, #0
   11e14:	d101      	bne.n	11e1a <_vfprintf_r+0x556>
   11e16:	f000 ff01 	bl	12c1c <_vfprintf_r+0x1358>
   11e1a:	4653      	mov	r3, sl
   11e1c:	3301      	adds	r3, #1
   11e1e:	d101      	bne.n	11e24 <_vfprintf_r+0x560>
   11e20:	f000 fe64 	bl	12aec <_vfprintf_r+0x1228>
   11e24:	4652      	mov	r2, sl
   11e26:	2100      	movs	r1, #0
   11e28:	9811      	ldr	r0, [sp, #68]	; 0x44
   11e2a:	f003 f98b 	bl	15144 <memchr>
   11e2e:	2800      	cmp	r0, #0
   11e30:	d101      	bne.n	11e36 <_vfprintf_r+0x572>
   11e32:	f000 ff78 	bl	12d26 <_vfprintf_r+0x1462>
   11e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11e38:	1ac3      	subs	r3, r0, r3
   11e3a:	001a      	movs	r2, r3
   11e3c:	930e      	str	r3, [sp, #56]	; 0x38
   11e3e:	43db      	mvns	r3, r3
   11e40:	17db      	asrs	r3, r3, #31
   11e42:	401a      	ands	r2, r3
   11e44:	ab16      	add	r3, sp, #88	; 0x58
   11e46:	7fdb      	ldrb	r3, [r3, #31]
   11e48:	9208      	str	r2, [sp, #32]
   11e4a:	4698      	mov	r8, r3
   11e4c:	2300      	movs	r3, #0
   11e4e:	950f      	str	r5, [sp, #60]	; 0x3c
   11e50:	9409      	str	r4, [sp, #36]	; 0x24
   11e52:	469a      	mov	sl, r3
   11e54:	9313      	str	r3, [sp, #76]	; 0x4c
   11e56:	e6aa      	b.n	11bae <_vfprintf_r+0x2ea>
   11e58:	2308      	movs	r3, #8
   11e5a:	431c      	orrs	r4, r3
   11e5c:	9b07      	ldr	r3, [sp, #28]
   11e5e:	781b      	ldrb	r3, [r3, #0]
   11e60:	e5b9      	b.n	119d6 <_vfprintf_r+0x112>
   11e62:	9312      	str	r3, [sp, #72]	; 0x48
   11e64:	2310      	movs	r3, #16
   11e66:	431c      	orrs	r4, r3
   11e68:	06a3      	lsls	r3, r4, #26
   11e6a:	d501      	bpl.n	11e70 <_vfprintf_r+0x5ac>
   11e6c:	f000 fca7 	bl	127be <_vfprintf_r+0xefa>
   11e70:	06e3      	lsls	r3, r4, #27
   11e72:	d500      	bpl.n	11e76 <_vfprintf_r+0x5b2>
   11e74:	e3ee      	b.n	12654 <_vfprintf_r+0xd90>
   11e76:	0663      	lsls	r3, r4, #25
   11e78:	d400      	bmi.n	11e7c <_vfprintf_r+0x5b8>
   11e7a:	e3eb      	b.n	12654 <_vfprintf_r+0xd90>
   11e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11e7e:	881a      	ldrh	r2, [r3, #0]
   11e80:	920c      	str	r2, [sp, #48]	; 0x30
   11e82:	2200      	movs	r2, #0
   11e84:	3304      	adds	r3, #4
   11e86:	920d      	str	r2, [sp, #52]	; 0x34
   11e88:	930f      	str	r3, [sp, #60]	; 0x3c
   11e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11e8c:	2300      	movs	r3, #0
   11e8e:	e65f      	b.n	11b50 <_vfprintf_r+0x28c>
   11e90:	9312      	str	r3, [sp, #72]	; 0x48
   11e92:	2310      	movs	r3, #16
   11e94:	431c      	orrs	r4, r3
   11e96:	06a3      	lsls	r3, r4, #26
   11e98:	d501      	bpl.n	11e9e <_vfprintf_r+0x5da>
   11e9a:	f000 fcba 	bl	12812 <_vfprintf_r+0xf4e>
   11e9e:	06e3      	lsls	r3, r4, #27
   11ea0:	d500      	bpl.n	11ea4 <_vfprintf_r+0x5e0>
   11ea2:	e3da      	b.n	1265a <_vfprintf_r+0xd96>
   11ea4:	0663      	lsls	r3, r4, #25
   11ea6:	d400      	bmi.n	11eaa <_vfprintf_r+0x5e6>
   11ea8:	e3d7      	b.n	1265a <_vfprintf_r+0xd96>
   11eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11eac:	881a      	ldrh	r2, [r3, #0]
   11eae:	920c      	str	r2, [sp, #48]	; 0x30
   11eb0:	2200      	movs	r2, #0
   11eb2:	3304      	adds	r3, #4
   11eb4:	920d      	str	r2, [sp, #52]	; 0x34
   11eb6:	930f      	str	r3, [sp, #60]	; 0x3c
   11eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11eba:	2301      	movs	r3, #1
   11ebc:	e648      	b.n	11b50 <_vfprintf_r+0x28c>
   11ebe:	9312      	str	r3, [sp, #72]	; 0x48
   11ec0:	2900      	cmp	r1, #0
   11ec2:	d001      	beq.n	11ec8 <_vfprintf_r+0x604>
   11ec4:	f001 f857 	bl	12f76 <_vfprintf_r+0x16b2>
   11ec8:	4b8a      	ldr	r3, [pc, #552]	; (120f4 <_vfprintf_r+0x830>)
   11eca:	9319      	str	r3, [sp, #100]	; 0x64
   11ecc:	e618      	b.n	11b00 <_vfprintf_r+0x23c>
   11ece:	2301      	movs	r3, #1
   11ed0:	431c      	orrs	r4, r3
   11ed2:	9b07      	ldr	r3, [sp, #28]
   11ed4:	781b      	ldrb	r3, [r3, #0]
   11ed6:	e57e      	b.n	119d6 <_vfprintf_r+0x112>
   11ed8:	2380      	movs	r3, #128	; 0x80
   11eda:	431c      	orrs	r4, r3
   11edc:	9b07      	ldr	r3, [sp, #28]
   11ede:	781b      	ldrb	r3, [r3, #0]
   11ee0:	e579      	b.n	119d6 <_vfprintf_r+0x112>
   11ee2:	9b07      	ldr	r3, [sp, #28]
   11ee4:	781b      	ldrb	r3, [r3, #0]
   11ee6:	2800      	cmp	r0, #0
   11ee8:	d000      	beq.n	11eec <_vfprintf_r+0x628>
   11eea:	e574      	b.n	119d6 <_vfprintf_r+0x112>
   11eec:	2101      	movs	r1, #1
   11eee:	3020      	adds	r0, #32
   11ef0:	e571      	b.n	119d6 <_vfprintf_r+0x112>
   11ef2:	9312      	str	r3, [sp, #72]	; 0x48
   11ef4:	2900      	cmp	r1, #0
   11ef6:	d001      	beq.n	11efc <_vfprintf_r+0x638>
   11ef8:	f001 f839 	bl	12f6e <_vfprintf_r+0x16aa>
   11efc:	2207      	movs	r2, #7
   11efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11f00:	3307      	adds	r3, #7
   11f02:	4393      	bics	r3, r2
   11f04:	3201      	adds	r2, #1
   11f06:	4694      	mov	ip, r2
   11f08:	449c      	add	ip, r3
   11f0a:	4662      	mov	r2, ip
   11f0c:	920f      	str	r2, [sp, #60]	; 0x3c
   11f0e:	681a      	ldr	r2, [r3, #0]
   11f10:	9216      	str	r2, [sp, #88]	; 0x58
   11f12:	685b      	ldr	r3, [r3, #4]
   11f14:	2201      	movs	r2, #1
   11f16:	9315      	str	r3, [sp, #84]	; 0x54
   11f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11f1a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   11f1c:	005b      	lsls	r3, r3, #1
   11f1e:	085b      	lsrs	r3, r3, #1
   11f20:	4698      	mov	r8, r3
   11f22:	4252      	negs	r2, r2
   11f24:	4b74      	ldr	r3, [pc, #464]	; (120f8 <_vfprintf_r+0x834>)
   11f26:	0028      	movs	r0, r5
   11f28:	4641      	mov	r1, r8
   11f2a:	f004 f9ed 	bl	16308 <__aeabi_dcmpun>
   11f2e:	2800      	cmp	r0, #0
   11f30:	d001      	beq.n	11f36 <_vfprintf_r+0x672>
   11f32:	f000 fcb4 	bl	1289e <_vfprintf_r+0xfda>
   11f36:	2201      	movs	r2, #1
   11f38:	4b6f      	ldr	r3, [pc, #444]	; (120f8 <_vfprintf_r+0x834>)
   11f3a:	4252      	negs	r2, r2
   11f3c:	0028      	movs	r0, r5
   11f3e:	4641      	mov	r1, r8
   11f40:	f7fc fbc4 	bl	e6cc <__aeabi_dcmple>
   11f44:	2800      	cmp	r0, #0
   11f46:	d001      	beq.n	11f4c <_vfprintf_r+0x688>
   11f48:	f000 fca9 	bl	1289e <_vfprintf_r+0xfda>
   11f4c:	2200      	movs	r2, #0
   11f4e:	2300      	movs	r3, #0
   11f50:	9816      	ldr	r0, [sp, #88]	; 0x58
   11f52:	9915      	ldr	r1, [sp, #84]	; 0x54
   11f54:	f7fc fbb0 	bl	e6b8 <__aeabi_dcmplt>
   11f58:	2800      	cmp	r0, #0
   11f5a:	d001      	beq.n	11f60 <_vfprintf_r+0x69c>
   11f5c:	f000 fd55 	bl	12a0a <_vfprintf_r+0x1146>
   11f60:	ab16      	add	r3, sp, #88	; 0x58
   11f62:	7fdb      	ldrb	r3, [r3, #31]
   11f64:	4698      	mov	r8, r3
   11f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11f68:	2b47      	cmp	r3, #71	; 0x47
   11f6a:	dd01      	ble.n	11f70 <_vfprintf_r+0x6ac>
   11f6c:	f000 fdb4 	bl	12ad8 <_vfprintf_r+0x1214>
   11f70:	4b62      	ldr	r3, [pc, #392]	; (120fc <_vfprintf_r+0x838>)
   11f72:	9311      	str	r3, [sp, #68]	; 0x44
   11f74:	2380      	movs	r3, #128	; 0x80
   11f76:	439c      	bics	r4, r3
   11f78:	3b7d      	subs	r3, #125	; 0x7d
   11f7a:	9308      	str	r3, [sp, #32]
   11f7c:	930e      	str	r3, [sp, #56]	; 0x38
   11f7e:	2300      	movs	r3, #0
   11f80:	9409      	str	r4, [sp, #36]	; 0x24
   11f82:	469a      	mov	sl, r3
   11f84:	9313      	str	r3, [sp, #76]	; 0x4c
   11f86:	e612      	b.n	11bae <_vfprintf_r+0x2ea>
   11f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11f8a:	1d1a      	adds	r2, r3, #4
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	930b      	str	r3, [sp, #44]	; 0x2c
   11f90:	2b00      	cmp	r3, #0
   11f92:	da00      	bge.n	11f96 <_vfprintf_r+0x6d2>
   11f94:	e578      	b.n	11a88 <_vfprintf_r+0x1c4>
   11f96:	9b07      	ldr	r3, [sp, #28]
   11f98:	920f      	str	r2, [sp, #60]	; 0x3c
   11f9a:	781b      	ldrb	r3, [r3, #0]
   11f9c:	e51b      	b.n	119d6 <_vfprintf_r+0x112>
   11f9e:	9312      	str	r3, [sp, #72]	; 0x48
   11fa0:	2900      	cmp	r1, #0
   11fa2:	d001      	beq.n	11fa8 <_vfprintf_r+0x6e4>
   11fa4:	f000 ffcc 	bl	12f40 <_vfprintf_r+0x167c>
   11fa8:	2310      	movs	r3, #16
   11faa:	431c      	orrs	r4, r3
   11fac:	e69a      	b.n	11ce4 <_vfprintf_r+0x420>
   11fae:	9312      	str	r3, [sp, #72]	; 0x48
   11fb0:	e771      	b.n	11e96 <_vfprintf_r+0x5d2>
   11fb2:	9312      	str	r3, [sp, #72]	; 0x48
   11fb4:	e758      	b.n	11e68 <_vfprintf_r+0x5a4>
   11fb6:	9312      	str	r3, [sp, #72]	; 0x48
   11fb8:	2900      	cmp	r1, #0
   11fba:	d001      	beq.n	11fc0 <_vfprintf_r+0x6fc>
   11fbc:	f000 ffd3 	bl	12f66 <_vfprintf_r+0x16a2>
   11fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d100      	bne.n	11fc8 <_vfprintf_r+0x704>
   11fc6:	e18d      	b.n	122e4 <_vfprintf_r+0xa20>
   11fc8:	ad28      	add	r5, sp, #160	; 0xa0
   11fca:	702b      	strb	r3, [r5, #0]
   11fcc:	2300      	movs	r3, #0
   11fce:	aa16      	add	r2, sp, #88	; 0x58
   11fd0:	77d3      	strb	r3, [r2, #31]
   11fd2:	9409      	str	r4, [sp, #36]	; 0x24
   11fd4:	e678      	b.n	11cc8 <_vfprintf_r+0x404>
   11fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11fd8:	990a      	ldr	r1, [sp, #40]	; 0x28
   11fda:	6813      	ldr	r3, [r2, #0]
   11fdc:	6019      	str	r1, [r3, #0]
   11fde:	0013      	movs	r3, r2
   11fe0:	3304      	adds	r3, #4
   11fe2:	930f      	str	r3, [sp, #60]	; 0x3c
   11fe4:	e4bc      	b.n	11960 <_vfprintf_r+0x9c>
   11fe6:	68bc      	ldr	r4, [r7, #8]
   11fe8:	4643      	mov	r3, r8
   11fea:	2b00      	cmp	r3, #0
   11fec:	d00f      	beq.n	1200e <_vfprintf_r+0x74a>
   11fee:	aa16      	add	r2, sp, #88	; 0x58
   11ff0:	231f      	movs	r3, #31
   11ff2:	4694      	mov	ip, r2
   11ff4:	4463      	add	r3, ip
   11ff6:	6033      	str	r3, [r6, #0]
   11ff8:	2301      	movs	r3, #1
   11ffa:	6073      	str	r3, [r6, #4]
   11ffc:	687b      	ldr	r3, [r7, #4]
   11ffe:	3401      	adds	r4, #1
   12000:	3301      	adds	r3, #1
   12002:	60bc      	str	r4, [r7, #8]
   12004:	607b      	str	r3, [r7, #4]
   12006:	2b07      	cmp	r3, #7
   12008:	dd00      	ble.n	1200c <_vfprintf_r+0x748>
   1200a:	e203      	b.n	12414 <_vfprintf_r+0xb50>
   1200c:	3608      	adds	r6, #8
   1200e:	464b      	mov	r3, r9
   12010:	2b00      	cmp	r3, #0
   12012:	d00c      	beq.n	1202e <_vfprintf_r+0x76a>
   12014:	ab1e      	add	r3, sp, #120	; 0x78
   12016:	6033      	str	r3, [r6, #0]
   12018:	2302      	movs	r3, #2
   1201a:	6073      	str	r3, [r6, #4]
   1201c:	687b      	ldr	r3, [r7, #4]
   1201e:	3402      	adds	r4, #2
   12020:	3301      	adds	r3, #1
   12022:	60bc      	str	r4, [r7, #8]
   12024:	607b      	str	r3, [r7, #4]
   12026:	2b07      	cmp	r3, #7
   12028:	dd00      	ble.n	1202c <_vfprintf_r+0x768>
   1202a:	e1fd      	b.n	12428 <_vfprintf_r+0xb64>
   1202c:	3608      	adds	r6, #8
   1202e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12030:	2b80      	cmp	r3, #128	; 0x80
   12032:	d100      	bne.n	12036 <_vfprintf_r+0x772>
   12034:	e173      	b.n	1231e <_vfprintf_r+0xa5a>
   12036:	4653      	mov	r3, sl
   12038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1203a:	1a9d      	subs	r5, r3, r2
   1203c:	2d00      	cmp	r5, #0
   1203e:	dd32      	ble.n	120a6 <_vfprintf_r+0x7e2>
   12040:	4a2f      	ldr	r2, [pc, #188]	; (12100 <_vfprintf_r+0x83c>)
   12042:	687b      	ldr	r3, [r7, #4]
   12044:	4691      	mov	r9, r2
   12046:	2d10      	cmp	r5, #16
   12048:	dd22      	ble.n	12090 <_vfprintf_r+0x7cc>
   1204a:	2210      	movs	r2, #16
   1204c:	4692      	mov	sl, r2
   1204e:	0022      	movs	r2, r4
   12050:	465c      	mov	r4, fp
   12052:	e003      	b.n	1205c <_vfprintf_r+0x798>
   12054:	3d10      	subs	r5, #16
   12056:	3608      	adds	r6, #8
   12058:	2d10      	cmp	r5, #16
   1205a:	dd17      	ble.n	1208c <_vfprintf_r+0x7c8>
   1205c:	4649      	mov	r1, r9
   1205e:	6031      	str	r1, [r6, #0]
   12060:	4651      	mov	r1, sl
   12062:	3210      	adds	r2, #16
   12064:	3301      	adds	r3, #1
   12066:	6071      	str	r1, [r6, #4]
   12068:	60ba      	str	r2, [r7, #8]
   1206a:	607b      	str	r3, [r7, #4]
   1206c:	2b07      	cmp	r3, #7
   1206e:	ddf1      	ble.n	12054 <_vfprintf_r+0x790>
   12070:	003a      	movs	r2, r7
   12072:	0021      	movs	r1, r4
   12074:	9806      	ldr	r0, [sp, #24]
   12076:	f003 fead 	bl	15dd4 <__sprint_r>
   1207a:	2800      	cmp	r0, #0
   1207c:	d000      	beq.n	12080 <_vfprintf_r+0x7bc>
   1207e:	e18a      	b.n	12396 <_vfprintf_r+0xad2>
   12080:	3d10      	subs	r5, #16
   12082:	68ba      	ldr	r2, [r7, #8]
   12084:	687b      	ldr	r3, [r7, #4]
   12086:	ae32      	add	r6, sp, #200	; 0xc8
   12088:	2d10      	cmp	r5, #16
   1208a:	dce7      	bgt.n	1205c <_vfprintf_r+0x798>
   1208c:	46a3      	mov	fp, r4
   1208e:	0014      	movs	r4, r2
   12090:	464a      	mov	r2, r9
   12092:	1964      	adds	r4, r4, r5
   12094:	3301      	adds	r3, #1
   12096:	6032      	str	r2, [r6, #0]
   12098:	6075      	str	r5, [r6, #4]
   1209a:	60bc      	str	r4, [r7, #8]
   1209c:	607b      	str	r3, [r7, #4]
   1209e:	2b07      	cmp	r3, #7
   120a0:	dd00      	ble.n	120a4 <_vfprintf_r+0x7e0>
   120a2:	e1ad      	b.n	12400 <_vfprintf_r+0xb3c>
   120a4:	3608      	adds	r6, #8
   120a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120a8:	05db      	lsls	r3, r3, #23
   120aa:	d500      	bpl.n	120ae <_vfprintf_r+0x7ea>
   120ac:	e0be      	b.n	1222c <_vfprintf_r+0x968>
   120ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   120b0:	6033      	str	r3, [r6, #0]
   120b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   120b4:	469c      	mov	ip, r3
   120b6:	6073      	str	r3, [r6, #4]
   120b8:	687b      	ldr	r3, [r7, #4]
   120ba:	4464      	add	r4, ip
   120bc:	3301      	adds	r3, #1
   120be:	60bc      	str	r4, [r7, #8]
   120c0:	607b      	str	r3, [r7, #4]
   120c2:	2b07      	cmp	r3, #7
   120c4:	dd00      	ble.n	120c8 <_vfprintf_r+0x804>
   120c6:	e0a6      	b.n	12216 <_vfprintf_r+0x952>
   120c8:	3608      	adds	r6, #8
   120ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   120cc:	075b      	lsls	r3, r3, #29
   120ce:	d54a      	bpl.n	12166 <_vfprintf_r+0x8a2>
   120d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   120d2:	9a08      	ldr	r2, [sp, #32]
   120d4:	1a9d      	subs	r5, r3, r2
   120d6:	2d00      	cmp	r5, #0
   120d8:	dd45      	ble.n	12166 <_vfprintf_r+0x8a2>
   120da:	4a0a      	ldr	r2, [pc, #40]	; (12104 <_vfprintf_r+0x840>)
   120dc:	687b      	ldr	r3, [r7, #4]
   120de:	4690      	mov	r8, r2
   120e0:	2d10      	cmp	r5, #16
   120e2:	dd2f      	ble.n	12144 <_vfprintf_r+0x880>
   120e4:	2210      	movs	r2, #16
   120e6:	4691      	mov	r9, r2
   120e8:	0022      	movs	r2, r4
   120ea:	465c      	mov	r4, fp
   120ec:	e010      	b.n	12110 <_vfprintf_r+0x84c>
   120ee:	46c0      	nop			; (mov r8, r8)
   120f0:	00017930 	.word	0x00017930
   120f4:	0001791c 	.word	0x0001791c
   120f8:	7fefffff 	.word	0x7fefffff
   120fc:	0001790c 	.word	0x0001790c
   12100:	00017960 	.word	0x00017960
   12104:	00017950 	.word	0x00017950
   12108:	3d10      	subs	r5, #16
   1210a:	3608      	adds	r6, #8
   1210c:	2d10      	cmp	r5, #16
   1210e:	dd17      	ble.n	12140 <_vfprintf_r+0x87c>
   12110:	49d1      	ldr	r1, [pc, #836]	; (12458 <_vfprintf_r+0xb94>)
   12112:	3210      	adds	r2, #16
   12114:	6031      	str	r1, [r6, #0]
   12116:	4649      	mov	r1, r9
   12118:	3301      	adds	r3, #1
   1211a:	6071      	str	r1, [r6, #4]
   1211c:	60ba      	str	r2, [r7, #8]
   1211e:	607b      	str	r3, [r7, #4]
   12120:	2b07      	cmp	r3, #7
   12122:	ddf1      	ble.n	12108 <_vfprintf_r+0x844>
   12124:	003a      	movs	r2, r7
   12126:	0021      	movs	r1, r4
   12128:	9806      	ldr	r0, [sp, #24]
   1212a:	f003 fe53 	bl	15dd4 <__sprint_r>
   1212e:	2800      	cmp	r0, #0
   12130:	d000      	beq.n	12134 <_vfprintf_r+0x870>
   12132:	e130      	b.n	12396 <_vfprintf_r+0xad2>
   12134:	3d10      	subs	r5, #16
   12136:	68ba      	ldr	r2, [r7, #8]
   12138:	687b      	ldr	r3, [r7, #4]
   1213a:	ae32      	add	r6, sp, #200	; 0xc8
   1213c:	2d10      	cmp	r5, #16
   1213e:	dce7      	bgt.n	12110 <_vfprintf_r+0x84c>
   12140:	46a3      	mov	fp, r4
   12142:	0014      	movs	r4, r2
   12144:	4642      	mov	r2, r8
   12146:	1964      	adds	r4, r4, r5
   12148:	3301      	adds	r3, #1
   1214a:	c624      	stmia	r6!, {r2, r5}
   1214c:	60bc      	str	r4, [r7, #8]
   1214e:	607b      	str	r3, [r7, #4]
   12150:	2b07      	cmp	r3, #7
   12152:	dd08      	ble.n	12166 <_vfprintf_r+0x8a2>
   12154:	003a      	movs	r2, r7
   12156:	4659      	mov	r1, fp
   12158:	9806      	ldr	r0, [sp, #24]
   1215a:	f003 fe3b 	bl	15dd4 <__sprint_r>
   1215e:	2800      	cmp	r0, #0
   12160:	d000      	beq.n	12164 <_vfprintf_r+0x8a0>
   12162:	e13f      	b.n	123e4 <_vfprintf_r+0xb20>
   12164:	68bc      	ldr	r4, [r7, #8]
   12166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12168:	9908      	ldr	r1, [sp, #32]
   1216a:	428b      	cmp	r3, r1
   1216c:	da00      	bge.n	12170 <_vfprintf_r+0x8ac>
   1216e:	000b      	movs	r3, r1
   12170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12172:	4694      	mov	ip, r2
   12174:	449c      	add	ip, r3
   12176:	4663      	mov	r3, ip
   12178:	930a      	str	r3, [sp, #40]	; 0x28
   1217a:	2c00      	cmp	r4, #0
   1217c:	d000      	beq.n	12180 <_vfprintf_r+0x8bc>
   1217e:	e129      	b.n	123d4 <_vfprintf_r+0xb10>
   12180:	2300      	movs	r3, #0
   12182:	ae32      	add	r6, sp, #200	; 0xc8
   12184:	607b      	str	r3, [r7, #4]
   12186:	f7ff fbeb 	bl	11960 <_vfprintf_r+0x9c>
   1218a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1218c:	2b01      	cmp	r3, #1
   1218e:	dc00      	bgt.n	12192 <_vfprintf_r+0x8ce>
   12190:	e103      	b.n	1239a <_vfprintf_r+0xad6>
   12192:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12194:	3401      	adds	r4, #1
   12196:	6033      	str	r3, [r6, #0]
   12198:	2301      	movs	r3, #1
   1219a:	6073      	str	r3, [r6, #4]
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	60bc      	str	r4, [r7, #8]
   121a0:	3301      	adds	r3, #1
   121a2:	607b      	str	r3, [r7, #4]
   121a4:	2b07      	cmp	r3, #7
   121a6:	dd00      	ble.n	121aa <_vfprintf_r+0x8e6>
   121a8:	e2ef      	b.n	1278a <_vfprintf_r+0xec6>
   121aa:	3608      	adds	r6, #8
   121ac:	9a18      	ldr	r2, [sp, #96]	; 0x60
   121ae:	3301      	adds	r3, #1
   121b0:	6032      	str	r2, [r6, #0]
   121b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   121b4:	4698      	mov	r8, r3
   121b6:	4694      	mov	ip, r2
   121b8:	4464      	add	r4, ip
   121ba:	6072      	str	r2, [r6, #4]
   121bc:	60bc      	str	r4, [r7, #8]
   121be:	607b      	str	r3, [r7, #4]
   121c0:	2b07      	cmp	r3, #7
   121c2:	dd00      	ble.n	121c6 <_vfprintf_r+0x902>
   121c4:	e318      	b.n	127f8 <_vfprintf_r+0xf34>
   121c6:	3608      	adds	r6, #8
   121c8:	2200      	movs	r2, #0
   121ca:	2300      	movs	r3, #0
   121cc:	9816      	ldr	r0, [sp, #88]	; 0x58
   121ce:	9915      	ldr	r1, [sp, #84]	; 0x54
   121d0:	f7fc fa6c 	bl	e6ac <__aeabi_dcmpeq>
   121d4:	2800      	cmp	r0, #0
   121d6:	d000      	beq.n	121da <_vfprintf_r+0x916>
   121d8:	e1f4      	b.n	125c4 <_vfprintf_r+0xd00>
   121da:	9d11      	ldr	r5, [sp, #68]	; 0x44
   121dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   121de:	3501      	adds	r5, #1
   121e0:	3b01      	subs	r3, #1
   121e2:	6035      	str	r5, [r6, #0]
   121e4:	6073      	str	r3, [r6, #4]
   121e6:	18e4      	adds	r4, r4, r3
   121e8:	2301      	movs	r3, #1
   121ea:	469c      	mov	ip, r3
   121ec:	44e0      	add	r8, ip
   121ee:	4643      	mov	r3, r8
   121f0:	60bc      	str	r4, [r7, #8]
   121f2:	607b      	str	r3, [r7, #4]
   121f4:	2b07      	cmp	r3, #7
   121f6:	dd00      	ble.n	121fa <_vfprintf_r+0x936>
   121f8:	e0e0      	b.n	123bc <_vfprintf_r+0xaf8>
   121fa:	3608      	adds	r6, #8
   121fc:	ab21      	add	r3, sp, #132	; 0x84
   121fe:	6033      	str	r3, [r6, #0]
   12200:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12202:	469c      	mov	ip, r3
   12204:	6073      	str	r3, [r6, #4]
   12206:	4643      	mov	r3, r8
   12208:	4464      	add	r4, ip
   1220a:	3301      	adds	r3, #1
   1220c:	60bc      	str	r4, [r7, #8]
   1220e:	607b      	str	r3, [r7, #4]
   12210:	2b07      	cmp	r3, #7
   12212:	dc00      	bgt.n	12216 <_vfprintf_r+0x952>
   12214:	e758      	b.n	120c8 <_vfprintf_r+0x804>
   12216:	003a      	movs	r2, r7
   12218:	4659      	mov	r1, fp
   1221a:	9806      	ldr	r0, [sp, #24]
   1221c:	f003 fdda 	bl	15dd4 <__sprint_r>
   12220:	2800      	cmp	r0, #0
   12222:	d000      	beq.n	12226 <_vfprintf_r+0x962>
   12224:	e0de      	b.n	123e4 <_vfprintf_r+0xb20>
   12226:	68bc      	ldr	r4, [r7, #8]
   12228:	ae32      	add	r6, sp, #200	; 0xc8
   1222a:	e74e      	b.n	120ca <_vfprintf_r+0x806>
   1222c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1222e:	2b65      	cmp	r3, #101	; 0x65
   12230:	ddab      	ble.n	1218a <_vfprintf_r+0x8c6>
   12232:	2200      	movs	r2, #0
   12234:	2300      	movs	r3, #0
   12236:	9816      	ldr	r0, [sp, #88]	; 0x58
   12238:	9915      	ldr	r1, [sp, #84]	; 0x54
   1223a:	f7fc fa37 	bl	e6ac <__aeabi_dcmpeq>
   1223e:	2800      	cmp	r0, #0
   12240:	d100      	bne.n	12244 <_vfprintf_r+0x980>
   12242:	e134      	b.n	124ae <_vfprintf_r+0xbea>
   12244:	4b85      	ldr	r3, [pc, #532]	; (1245c <_vfprintf_r+0xb98>)
   12246:	3401      	adds	r4, #1
   12248:	6033      	str	r3, [r6, #0]
   1224a:	2301      	movs	r3, #1
   1224c:	6073      	str	r3, [r6, #4]
   1224e:	687b      	ldr	r3, [r7, #4]
   12250:	60bc      	str	r4, [r7, #8]
   12252:	3301      	adds	r3, #1
   12254:	607b      	str	r3, [r7, #4]
   12256:	2b07      	cmp	r3, #7
   12258:	dd00      	ble.n	1225c <_vfprintf_r+0x998>
   1225a:	e3dc      	b.n	12a16 <_vfprintf_r+0x1152>
   1225c:	3608      	adds	r6, #8
   1225e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12260:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12262:	4293      	cmp	r3, r2
   12264:	db03      	blt.n	1226e <_vfprintf_r+0x9aa>
   12266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12268:	07db      	lsls	r3, r3, #31
   1226a:	d400      	bmi.n	1226e <_vfprintf_r+0x9aa>
   1226c:	e3b7      	b.n	129de <_vfprintf_r+0x111a>
   1226e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12270:	68ba      	ldr	r2, [r7, #8]
   12272:	6033      	str	r3, [r6, #0]
   12274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12276:	469c      	mov	ip, r3
   12278:	6073      	str	r3, [r6, #4]
   1227a:	687b      	ldr	r3, [r7, #4]
   1227c:	4462      	add	r2, ip
   1227e:	3301      	adds	r3, #1
   12280:	0014      	movs	r4, r2
   12282:	60ba      	str	r2, [r7, #8]
   12284:	607b      	str	r3, [r7, #4]
   12286:	2b07      	cmp	r3, #7
   12288:	dd01      	ble.n	1228e <_vfprintf_r+0x9ca>
   1228a:	f000 fc19 	bl	12ac0 <_vfprintf_r+0x11fc>
   1228e:	3608      	adds	r6, #8
   12290:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12292:	1e5d      	subs	r5, r3, #1
   12294:	2d00      	cmp	r5, #0
   12296:	dc00      	bgt.n	1229a <_vfprintf_r+0x9d6>
   12298:	e717      	b.n	120ca <_vfprintf_r+0x806>
   1229a:	4a71      	ldr	r2, [pc, #452]	; (12460 <_vfprintf_r+0xb9c>)
   1229c:	687b      	ldr	r3, [r7, #4]
   1229e:	4691      	mov	r9, r2
   122a0:	2d10      	cmp	r5, #16
   122a2:	dc00      	bgt.n	122a6 <_vfprintf_r+0x9e2>
   122a4:	e1c3      	b.n	1262e <_vfprintf_r+0xd6a>
   122a6:	2210      	movs	r2, #16
   122a8:	4690      	mov	r8, r2
   122aa:	0022      	movs	r2, r4
   122ac:	464c      	mov	r4, r9
   122ae:	46d9      	mov	r9, fp
   122b0:	e004      	b.n	122bc <_vfprintf_r+0x9f8>
   122b2:	3608      	adds	r6, #8
   122b4:	3d10      	subs	r5, #16
   122b6:	2d10      	cmp	r5, #16
   122b8:	dc00      	bgt.n	122bc <_vfprintf_r+0x9f8>
   122ba:	e37c      	b.n	129b6 <_vfprintf_r+0x10f2>
   122bc:	4641      	mov	r1, r8
   122be:	3210      	adds	r2, #16
   122c0:	3301      	adds	r3, #1
   122c2:	6034      	str	r4, [r6, #0]
   122c4:	6071      	str	r1, [r6, #4]
   122c6:	60ba      	str	r2, [r7, #8]
   122c8:	607b      	str	r3, [r7, #4]
   122ca:	2b07      	cmp	r3, #7
   122cc:	ddf1      	ble.n	122b2 <_vfprintf_r+0x9ee>
   122ce:	003a      	movs	r2, r7
   122d0:	4649      	mov	r1, r9
   122d2:	9806      	ldr	r0, [sp, #24]
   122d4:	f003 fd7e 	bl	15dd4 <__sprint_r>
   122d8:	2800      	cmp	r0, #0
   122da:	d10b      	bne.n	122f4 <_vfprintf_r+0xa30>
   122dc:	68ba      	ldr	r2, [r7, #8]
   122de:	687b      	ldr	r3, [r7, #4]
   122e0:	ae32      	add	r6, sp, #200	; 0xc8
   122e2:	e7e7      	b.n	122b4 <_vfprintf_r+0x9f0>
   122e4:	68bb      	ldr	r3, [r7, #8]
   122e6:	46d9      	mov	r9, fp
   122e8:	2b00      	cmp	r3, #0
   122ea:	d001      	beq.n	122f0 <_vfprintf_r+0xa2c>
   122ec:	f000 fd4c 	bl	12d88 <_vfprintf_r+0x14c4>
   122f0:	2300      	movs	r3, #0
   122f2:	607b      	str	r3, [r7, #4]
   122f4:	464b      	mov	r3, r9
   122f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   122f8:	07db      	lsls	r3, r3, #31
   122fa:	d40d      	bmi.n	12318 <_vfprintf_r+0xa54>
   122fc:	464b      	mov	r3, r9
   122fe:	899b      	ldrh	r3, [r3, #12]
   12300:	059a      	lsls	r2, r3, #22
   12302:	d505      	bpl.n	12310 <_vfprintf_r+0xa4c>
   12304:	065b      	lsls	r3, r3, #25
   12306:	d401      	bmi.n	1230c <_vfprintf_r+0xa48>
   12308:	f7ff fb8d 	bl	11a26 <_vfprintf_r+0x162>
   1230c:	f7ff fb88 	bl	11a20 <_vfprintf_r+0x15c>
   12310:	464b      	mov	r3, r9
   12312:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12314:	f002 fbc8 	bl	14aa8 <__retarget_lock_release_recursive>
   12318:	464b      	mov	r3, r9
   1231a:	899b      	ldrh	r3, [r3, #12]
   1231c:	e7f2      	b.n	12304 <_vfprintf_r+0xa40>
   1231e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12320:	9a08      	ldr	r2, [sp, #32]
   12322:	1a9d      	subs	r5, r3, r2
   12324:	2d00      	cmp	r5, #0
   12326:	dc00      	bgt.n	1232a <_vfprintf_r+0xa66>
   12328:	e685      	b.n	12036 <_vfprintf_r+0x772>
   1232a:	4a4d      	ldr	r2, [pc, #308]	; (12460 <_vfprintf_r+0xb9c>)
   1232c:	687b      	ldr	r3, [r7, #4]
   1232e:	4691      	mov	r9, r2
   12330:	2d10      	cmp	r5, #16
   12332:	dd24      	ble.n	1237e <_vfprintf_r+0xaba>
   12334:	2210      	movs	r2, #16
   12336:	0021      	movs	r1, r4
   12338:	4690      	mov	r8, r2
   1233a:	465c      	mov	r4, fp
   1233c:	0032      	movs	r2, r6
   1233e:	464e      	mov	r6, r9
   12340:	e003      	b.n	1234a <_vfprintf_r+0xa86>
   12342:	3d10      	subs	r5, #16
   12344:	3208      	adds	r2, #8
   12346:	2d10      	cmp	r5, #16
   12348:	dd15      	ble.n	12376 <_vfprintf_r+0xab2>
   1234a:	4640      	mov	r0, r8
   1234c:	3110      	adds	r1, #16
   1234e:	3301      	adds	r3, #1
   12350:	6016      	str	r6, [r2, #0]
   12352:	6050      	str	r0, [r2, #4]
   12354:	60b9      	str	r1, [r7, #8]
   12356:	607b      	str	r3, [r7, #4]
   12358:	2b07      	cmp	r3, #7
   1235a:	ddf2      	ble.n	12342 <_vfprintf_r+0xa7e>
   1235c:	003a      	movs	r2, r7
   1235e:	0021      	movs	r1, r4
   12360:	9806      	ldr	r0, [sp, #24]
   12362:	f003 fd37 	bl	15dd4 <__sprint_r>
   12366:	2800      	cmp	r0, #0
   12368:	d115      	bne.n	12396 <_vfprintf_r+0xad2>
   1236a:	3d10      	subs	r5, #16
   1236c:	68b9      	ldr	r1, [r7, #8]
   1236e:	687b      	ldr	r3, [r7, #4]
   12370:	aa32      	add	r2, sp, #200	; 0xc8
   12372:	2d10      	cmp	r5, #16
   12374:	dce9      	bgt.n	1234a <_vfprintf_r+0xa86>
   12376:	46a3      	mov	fp, r4
   12378:	46b1      	mov	r9, r6
   1237a:	000c      	movs	r4, r1
   1237c:	0016      	movs	r6, r2
   1237e:	464a      	mov	r2, r9
   12380:	1964      	adds	r4, r4, r5
   12382:	3301      	adds	r3, #1
   12384:	6032      	str	r2, [r6, #0]
   12386:	6075      	str	r5, [r6, #4]
   12388:	60bc      	str	r4, [r7, #8]
   1238a:	607b      	str	r3, [r7, #4]
   1238c:	2b07      	cmp	r3, #7
   1238e:	dd00      	ble.n	12392 <_vfprintf_r+0xace>
   12390:	e263      	b.n	1285a <_vfprintf_r+0xf96>
   12392:	3608      	adds	r6, #8
   12394:	e64f      	b.n	12036 <_vfprintf_r+0x772>
   12396:	46a1      	mov	r9, r4
   12398:	e7ac      	b.n	122f4 <_vfprintf_r+0xa30>
   1239a:	2301      	movs	r3, #1
   1239c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1239e:	4213      	tst	r3, r2
   123a0:	d000      	beq.n	123a4 <_vfprintf_r+0xae0>
   123a2:	e6f6      	b.n	12192 <_vfprintf_r+0x8ce>
   123a4:	6073      	str	r3, [r6, #4]
   123a6:	687b      	ldr	r3, [r7, #4]
   123a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   123aa:	3301      	adds	r3, #1
   123ac:	3401      	adds	r4, #1
   123ae:	6032      	str	r2, [r6, #0]
   123b0:	60bc      	str	r4, [r7, #8]
   123b2:	4698      	mov	r8, r3
   123b4:	607b      	str	r3, [r7, #4]
   123b6:	2b07      	cmp	r3, #7
   123b8:	dc00      	bgt.n	123bc <_vfprintf_r+0xaf8>
   123ba:	e71e      	b.n	121fa <_vfprintf_r+0x936>
   123bc:	003a      	movs	r2, r7
   123be:	4659      	mov	r1, fp
   123c0:	9806      	ldr	r0, [sp, #24]
   123c2:	f003 fd07 	bl	15dd4 <__sprint_r>
   123c6:	2800      	cmp	r0, #0
   123c8:	d10c      	bne.n	123e4 <_vfprintf_r+0xb20>
   123ca:	687b      	ldr	r3, [r7, #4]
   123cc:	68bc      	ldr	r4, [r7, #8]
   123ce:	4698      	mov	r8, r3
   123d0:	ae32      	add	r6, sp, #200	; 0xc8
   123d2:	e713      	b.n	121fc <_vfprintf_r+0x938>
   123d4:	003a      	movs	r2, r7
   123d6:	4659      	mov	r1, fp
   123d8:	9806      	ldr	r0, [sp, #24]
   123da:	f003 fcfb 	bl	15dd4 <__sprint_r>
   123de:	2800      	cmp	r0, #0
   123e0:	d100      	bne.n	123e4 <_vfprintf_r+0xb20>
   123e2:	e6cd      	b.n	12180 <_vfprintf_r+0x8bc>
   123e4:	46d9      	mov	r9, fp
   123e6:	e785      	b.n	122f4 <_vfprintf_r+0xa30>
   123e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   123ea:	2b01      	cmp	r3, #1
   123ec:	d100      	bne.n	123f0 <_vfprintf_r+0xb2c>
   123ee:	e148      	b.n	12682 <_vfprintf_r+0xdbe>
   123f0:	2b02      	cmp	r3, #2
   123f2:	d123      	bne.n	1243c <_vfprintf_r+0xb78>
   123f4:	9409      	str	r4, [sp, #36]	; 0x24
   123f6:	2300      	movs	r3, #0
   123f8:	2400      	movs	r4, #0
   123fa:	930c      	str	r3, [sp, #48]	; 0x30
   123fc:	940d      	str	r4, [sp, #52]	; 0x34
   123fe:	e4a1      	b.n	11d44 <_vfprintf_r+0x480>
   12400:	003a      	movs	r2, r7
   12402:	4659      	mov	r1, fp
   12404:	9806      	ldr	r0, [sp, #24]
   12406:	f003 fce5 	bl	15dd4 <__sprint_r>
   1240a:	2800      	cmp	r0, #0
   1240c:	d1ea      	bne.n	123e4 <_vfprintf_r+0xb20>
   1240e:	68bc      	ldr	r4, [r7, #8]
   12410:	ae32      	add	r6, sp, #200	; 0xc8
   12412:	e648      	b.n	120a6 <_vfprintf_r+0x7e2>
   12414:	003a      	movs	r2, r7
   12416:	4659      	mov	r1, fp
   12418:	9806      	ldr	r0, [sp, #24]
   1241a:	f003 fcdb 	bl	15dd4 <__sprint_r>
   1241e:	2800      	cmp	r0, #0
   12420:	d1e0      	bne.n	123e4 <_vfprintf_r+0xb20>
   12422:	68bc      	ldr	r4, [r7, #8]
   12424:	ae32      	add	r6, sp, #200	; 0xc8
   12426:	e5f2      	b.n	1200e <_vfprintf_r+0x74a>
   12428:	003a      	movs	r2, r7
   1242a:	4659      	mov	r1, fp
   1242c:	9806      	ldr	r0, [sp, #24]
   1242e:	f003 fcd1 	bl	15dd4 <__sprint_r>
   12432:	2800      	cmp	r0, #0
   12434:	d1d6      	bne.n	123e4 <_vfprintf_r+0xb20>
   12436:	68bc      	ldr	r4, [r7, #8]
   12438:	ae32      	add	r6, sp, #200	; 0xc8
   1243a:	e5f8      	b.n	1202e <_vfprintf_r+0x76a>
   1243c:	9409      	str	r4, [sp, #36]	; 0x24
   1243e:	2300      	movs	r3, #0
   12440:	2400      	movs	r4, #0
   12442:	930c      	str	r3, [sp, #48]	; 0x30
   12444:	940d      	str	r4, [sp, #52]	; 0x34
   12446:	980c      	ldr	r0, [sp, #48]	; 0x30
   12448:	990d      	ldr	r1, [sp, #52]	; 0x34
   1244a:	4653      	mov	r3, sl
   1244c:	aa32      	add	r2, sp, #200	; 0xc8
   1244e:	4691      	mov	r9, r2
   12450:	9308      	str	r3, [sp, #32]
   12452:	46b2      	mov	sl, r6
   12454:	e007      	b.n	12466 <_vfprintf_r+0xba2>
   12456:	46c0      	nop			; (mov r8, r8)
   12458:	00017950 	.word	0x00017950
   1245c:	0001794c 	.word	0x0001794c
   12460:	00017960 	.word	0x00017960
   12464:	46a1      	mov	r9, r4
   12466:	074a      	lsls	r2, r1, #29
   12468:	4694      	mov	ip, r2
   1246a:	464b      	mov	r3, r9
   1246c:	4665      	mov	r5, ip
   1246e:	1e5c      	subs	r4, r3, #1
   12470:	08c6      	lsrs	r6, r0, #3
   12472:	2307      	movs	r3, #7
   12474:	08ca      	lsrs	r2, r1, #3
   12476:	4335      	orrs	r5, r6
   12478:	0011      	movs	r1, r2
   1247a:	002a      	movs	r2, r5
   1247c:	4003      	ands	r3, r0
   1247e:	3330      	adds	r3, #48	; 0x30
   12480:	7023      	strb	r3, [r4, #0]
   12482:	0028      	movs	r0, r5
   12484:	430a      	orrs	r2, r1
   12486:	d1ed      	bne.n	12464 <_vfprintf_r+0xba0>
   12488:	900c      	str	r0, [sp, #48]	; 0x30
   1248a:	910d      	str	r1, [sp, #52]	; 0x34
   1248c:	9908      	ldr	r1, [sp, #32]
   1248e:	4656      	mov	r6, sl
   12490:	468a      	mov	sl, r1
   12492:	9909      	ldr	r1, [sp, #36]	; 0x24
   12494:	464a      	mov	r2, r9
   12496:	9411      	str	r4, [sp, #68]	; 0x44
   12498:	07c9      	lsls	r1, r1, #31
   1249a:	d500      	bpl.n	1249e <_vfprintf_r+0xbda>
   1249c:	e0e0      	b.n	12660 <_vfprintf_r+0xd9c>
   1249e:	ab32      	add	r3, sp, #200	; 0xc8
   124a0:	1b1b      	subs	r3, r3, r4
   124a2:	930e      	str	r3, [sp, #56]	; 0x38
   124a4:	f7ff fb7b 	bl	11b9e <_vfprintf_r+0x2da>
   124a8:	9c07      	ldr	r4, [sp, #28]
   124aa:	f7ff fa7d 	bl	119a8 <_vfprintf_r+0xe4>
   124ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   124b0:	2800      	cmp	r0, #0
   124b2:	dc00      	bgt.n	124b6 <_vfprintf_r+0xbf2>
   124b4:	e2b9      	b.n	12a2a <_vfprintf_r+0x1166>
   124b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   124b8:	9914      	ldr	r1, [sp, #80]	; 0x50
   124ba:	0013      	movs	r3, r2
   124bc:	4690      	mov	r8, r2
   124be:	428b      	cmp	r3, r1
   124c0:	dd00      	ble.n	124c4 <_vfprintf_r+0xc00>
   124c2:	4688      	mov	r8, r1
   124c4:	4643      	mov	r3, r8
   124c6:	2b00      	cmp	r3, #0
   124c8:	dd0c      	ble.n	124e4 <_vfprintf_r+0xc20>
   124ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   124cc:	4444      	add	r4, r8
   124ce:	6033      	str	r3, [r6, #0]
   124d0:	4643      	mov	r3, r8
   124d2:	6073      	str	r3, [r6, #4]
   124d4:	687b      	ldr	r3, [r7, #4]
   124d6:	60bc      	str	r4, [r7, #8]
   124d8:	3301      	adds	r3, #1
   124da:	607b      	str	r3, [r7, #4]
   124dc:	2b07      	cmp	r3, #7
   124de:	dd00      	ble.n	124e2 <_vfprintf_r+0xc1e>
   124e0:	e389      	b.n	12bf6 <_vfprintf_r+0x1332>
   124e2:	3608      	adds	r6, #8
   124e4:	4643      	mov	r3, r8
   124e6:	43db      	mvns	r3, r3
   124e8:	4642      	mov	r2, r8
   124ea:	17db      	asrs	r3, r3, #31
   124ec:	4013      	ands	r3, r2
   124ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   124f0:	1ad3      	subs	r3, r2, r3
   124f2:	4698      	mov	r8, r3
   124f4:	2b00      	cmp	r3, #0
   124f6:	dc00      	bgt.n	124fa <_vfprintf_r+0xc36>
   124f8:	e0eb      	b.n	126d2 <_vfprintf_r+0xe0e>
   124fa:	2b10      	cmp	r3, #16
   124fc:	dc01      	bgt.n	12502 <_vfprintf_r+0xc3e>
   124fe:	f000 fcd9 	bl	12eb4 <_vfprintf_r+0x15f0>
   12502:	4adc      	ldr	r2, [pc, #880]	; (12874 <_vfprintf_r+0xfb0>)
   12504:	687b      	ldr	r3, [r7, #4]
   12506:	4691      	mov	r9, r2
   12508:	2210      	movs	r2, #16
   1250a:	464d      	mov	r5, r9
   1250c:	4692      	mov	sl, r2
   1250e:	0022      	movs	r2, r4
   12510:	4644      	mov	r4, r8
   12512:	46d8      	mov	r8, fp
   12514:	e004      	b.n	12520 <_vfprintf_r+0xc5c>
   12516:	3608      	adds	r6, #8
   12518:	3c10      	subs	r4, #16
   1251a:	2c10      	cmp	r4, #16
   1251c:	dc00      	bgt.n	12520 <_vfprintf_r+0xc5c>
   1251e:	e0bf      	b.n	126a0 <_vfprintf_r+0xddc>
   12520:	4651      	mov	r1, sl
   12522:	3210      	adds	r2, #16
   12524:	3301      	adds	r3, #1
   12526:	6035      	str	r5, [r6, #0]
   12528:	6071      	str	r1, [r6, #4]
   1252a:	60ba      	str	r2, [r7, #8]
   1252c:	607b      	str	r3, [r7, #4]
   1252e:	2b07      	cmp	r3, #7
   12530:	ddf1      	ble.n	12516 <_vfprintf_r+0xc52>
   12532:	003a      	movs	r2, r7
   12534:	4641      	mov	r1, r8
   12536:	9806      	ldr	r0, [sp, #24]
   12538:	f003 fc4c 	bl	15dd4 <__sprint_r>
   1253c:	2800      	cmp	r0, #0
   1253e:	d000      	beq.n	12542 <_vfprintf_r+0xc7e>
   12540:	e3b6      	b.n	12cb0 <_vfprintf_r+0x13ec>
   12542:	68ba      	ldr	r2, [r7, #8]
   12544:	687b      	ldr	r3, [r7, #4]
   12546:	ae32      	add	r6, sp, #200	; 0xc8
   12548:	e7e6      	b.n	12518 <_vfprintf_r+0xc54>
   1254a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1254c:	2b00      	cmp	r3, #0
   1254e:	d100      	bne.n	12552 <_vfprintf_r+0xc8e>
   12550:	e092      	b.n	12678 <_vfprintf_r+0xdb4>
   12552:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   12554:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12556:	ab32      	add	r3, sp, #200	; 0xc8
   12558:	46b1      	mov	r9, r6
   1255a:	001e      	movs	r6, r3
   1255c:	0020      	movs	r0, r4
   1255e:	0029      	movs	r1, r5
   12560:	220a      	movs	r2, #10
   12562:	2300      	movs	r3, #0
   12564:	f7fc f90a 	bl	e77c <__aeabi_uldivmod>
   12568:	3e01      	subs	r6, #1
   1256a:	3230      	adds	r2, #48	; 0x30
   1256c:	7032      	strb	r2, [r6, #0]
   1256e:	2300      	movs	r3, #0
   12570:	0020      	movs	r0, r4
   12572:	0029      	movs	r1, r5
   12574:	220a      	movs	r2, #10
   12576:	f7fc f901 	bl	e77c <__aeabi_uldivmod>
   1257a:	0003      	movs	r3, r0
   1257c:	0004      	movs	r4, r0
   1257e:	000d      	movs	r5, r1
   12580:	430b      	orrs	r3, r1
   12582:	d1eb      	bne.n	1255c <_vfprintf_r+0xc98>
   12584:	0032      	movs	r2, r6
   12586:	ab32      	add	r3, sp, #200	; 0xc8
   12588:	1a9b      	subs	r3, r3, r2
   1258a:	9611      	str	r6, [sp, #68]	; 0x44
   1258c:	940c      	str	r4, [sp, #48]	; 0x30
   1258e:	950d      	str	r5, [sp, #52]	; 0x34
   12590:	464e      	mov	r6, r9
   12592:	930e      	str	r3, [sp, #56]	; 0x38
   12594:	f7ff fb03 	bl	11b9e <_vfprintf_r+0x2da>
   12598:	2300      	movs	r3, #0
   1259a:	930e      	str	r3, [sp, #56]	; 0x38
   1259c:	ab32      	add	r3, sp, #200	; 0xc8
   1259e:	9311      	str	r3, [sp, #68]	; 0x44
   125a0:	f7ff fafd 	bl	11b9e <_vfprintf_r+0x2da>
   125a4:	003a      	movs	r2, r7
   125a6:	4659      	mov	r1, fp
   125a8:	9806      	ldr	r0, [sp, #24]
   125aa:	f003 fc13 	bl	15dd4 <__sprint_r>
   125ae:	2800      	cmp	r0, #0
   125b0:	d000      	beq.n	125b4 <_vfprintf_r+0xcf0>
   125b2:	e717      	b.n	123e4 <_vfprintf_r+0xb20>
   125b4:	ab16      	add	r3, sp, #88	; 0x58
   125b6:	7fdb      	ldrb	r3, [r3, #31]
   125b8:	68bc      	ldr	r4, [r7, #8]
   125ba:	4698      	mov	r8, r3
   125bc:	ae32      	add	r6, sp, #200	; 0xc8
   125be:	e513      	b.n	11fe8 <_vfprintf_r+0x724>
   125c0:	46b1      	mov	r9, r6
   125c2:	e697      	b.n	122f4 <_vfprintf_r+0xa30>
   125c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   125c6:	1e5d      	subs	r5, r3, #1
   125c8:	2d00      	cmp	r5, #0
   125ca:	dc00      	bgt.n	125ce <_vfprintf_r+0xd0a>
   125cc:	e616      	b.n	121fc <_vfprintf_r+0x938>
   125ce:	4ba9      	ldr	r3, [pc, #676]	; (12874 <_vfprintf_r+0xfb0>)
   125d0:	4699      	mov	r9, r3
   125d2:	2d10      	cmp	r5, #16
   125d4:	dc00      	bgt.n	125d8 <_vfprintf_r+0xd14>
   125d6:	e10a      	b.n	127ee <_vfprintf_r+0xf2a>
   125d8:	2310      	movs	r3, #16
   125da:	0022      	movs	r2, r4
   125dc:	469a      	mov	sl, r3
   125de:	465c      	mov	r4, fp
   125e0:	4643      	mov	r3, r8
   125e2:	e004      	b.n	125ee <_vfprintf_r+0xd2a>
   125e4:	3608      	adds	r6, #8
   125e6:	3d10      	subs	r5, #16
   125e8:	2d10      	cmp	r5, #16
   125ea:	dc00      	bgt.n	125ee <_vfprintf_r+0xd2a>
   125ec:	e0fc      	b.n	127e8 <_vfprintf_r+0xf24>
   125ee:	4649      	mov	r1, r9
   125f0:	6031      	str	r1, [r6, #0]
   125f2:	4651      	mov	r1, sl
   125f4:	3210      	adds	r2, #16
   125f6:	3301      	adds	r3, #1
   125f8:	6071      	str	r1, [r6, #4]
   125fa:	60ba      	str	r2, [r7, #8]
   125fc:	607b      	str	r3, [r7, #4]
   125fe:	2b07      	cmp	r3, #7
   12600:	ddf0      	ble.n	125e4 <_vfprintf_r+0xd20>
   12602:	003a      	movs	r2, r7
   12604:	0021      	movs	r1, r4
   12606:	9806      	ldr	r0, [sp, #24]
   12608:	f003 fbe4 	bl	15dd4 <__sprint_r>
   1260c:	2800      	cmp	r0, #0
   1260e:	d000      	beq.n	12612 <_vfprintf_r+0xd4e>
   12610:	e6c1      	b.n	12396 <_vfprintf_r+0xad2>
   12612:	68ba      	ldr	r2, [r7, #8]
   12614:	687b      	ldr	r3, [r7, #4]
   12616:	ae32      	add	r6, sp, #200	; 0xc8
   12618:	e7e5      	b.n	125e6 <_vfprintf_r+0xd22>
   1261a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1261c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1261e:	0008      	movs	r0, r1
   12620:	4310      	orrs	r0, r2
   12622:	2302      	movs	r3, #2
   12624:	0002      	movs	r2, r0
   12626:	f7ff fa93 	bl	11b50 <_vfprintf_r+0x28c>
   1262a:	46a3      	mov	fp, r4
   1262c:	0014      	movs	r4, r2
   1262e:	464a      	mov	r2, r9
   12630:	1964      	adds	r4, r4, r5
   12632:	3301      	adds	r3, #1
   12634:	6032      	str	r2, [r6, #0]
   12636:	6075      	str	r5, [r6, #4]
   12638:	60bc      	str	r4, [r7, #8]
   1263a:	607b      	str	r3, [r7, #4]
   1263c:	2b07      	cmp	r3, #7
   1263e:	dc00      	bgt.n	12642 <_vfprintf_r+0xd7e>
   12640:	e542      	b.n	120c8 <_vfprintf_r+0x804>
   12642:	e5e8      	b.n	12216 <_vfprintf_r+0x952>
   12644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12646:	681a      	ldr	r2, [r3, #0]
   12648:	f7ff fa68 	bl	11b1c <_vfprintf_r+0x258>
   1264c:	6813      	ldr	r3, [r2, #0]
   1264e:	9308      	str	r3, [sp, #32]
   12650:	f7ff fb57 	bl	11d02 <_vfprintf_r+0x43e>
   12654:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12656:	681a      	ldr	r2, [r3, #0]
   12658:	e412      	b.n	11e80 <_vfprintf_r+0x5bc>
   1265a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1265c:	681a      	ldr	r2, [r3, #0]
   1265e:	e426      	b.n	11eae <_vfprintf_r+0x5ea>
   12660:	2b30      	cmp	r3, #48	; 0x30
   12662:	d100      	bne.n	12666 <_vfprintf_r+0xda2>
   12664:	e23c      	b.n	12ae0 <_vfprintf_r+0x121c>
   12666:	2330      	movs	r3, #48	; 0x30
   12668:	3a02      	subs	r2, #2
   1266a:	7013      	strb	r3, [r2, #0]
   1266c:	ab32      	add	r3, sp, #200	; 0xc8
   1266e:	1a9b      	subs	r3, r3, r2
   12670:	930e      	str	r3, [sp, #56]	; 0x38
   12672:	9211      	str	r2, [sp, #68]	; 0x44
   12674:	f7ff fa93 	bl	11b9e <_vfprintf_r+0x2da>
   12678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1267a:	2b09      	cmp	r3, #9
   1267c:	d900      	bls.n	12680 <_vfprintf_r+0xdbc>
   1267e:	e768      	b.n	12552 <_vfprintf_r+0xc8e>
   12680:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12682:	2227      	movs	r2, #39	; 0x27
   12684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12686:	a928      	add	r1, sp, #160	; 0xa0
   12688:	3330      	adds	r3, #48	; 0x30
   1268a:	548b      	strb	r3, [r1, r2]
   1268c:	2301      	movs	r3, #1
   1268e:	aa16      	add	r2, sp, #88	; 0x58
   12690:	4694      	mov	ip, r2
   12692:	930e      	str	r3, [sp, #56]	; 0x38
   12694:	336e      	adds	r3, #110	; 0x6e
   12696:	4463      	add	r3, ip
   12698:	9409      	str	r4, [sp, #36]	; 0x24
   1269a:	9311      	str	r3, [sp, #68]	; 0x44
   1269c:	f7ff fa7f 	bl	11b9e <_vfprintf_r+0x2da>
   126a0:	46c3      	mov	fp, r8
   126a2:	46a9      	mov	r9, r5
   126a4:	46a0      	mov	r8, r4
   126a6:	0014      	movs	r4, r2
   126a8:	464a      	mov	r2, r9
   126aa:	6032      	str	r2, [r6, #0]
   126ac:	4642      	mov	r2, r8
   126ae:	4444      	add	r4, r8
   126b0:	3301      	adds	r3, #1
   126b2:	6072      	str	r2, [r6, #4]
   126b4:	60bc      	str	r4, [r7, #8]
   126b6:	607b      	str	r3, [r7, #4]
   126b8:	2b07      	cmp	r3, #7
   126ba:	dc00      	bgt.n	126be <_vfprintf_r+0xdfa>
   126bc:	e18d      	b.n	129da <_vfprintf_r+0x1116>
   126be:	003a      	movs	r2, r7
   126c0:	4659      	mov	r1, fp
   126c2:	9806      	ldr	r0, [sp, #24]
   126c4:	f003 fb86 	bl	15dd4 <__sprint_r>
   126c8:	2800      	cmp	r0, #0
   126ca:	d000      	beq.n	126ce <_vfprintf_r+0xe0a>
   126cc:	e68a      	b.n	123e4 <_vfprintf_r+0xb20>
   126ce:	68bc      	ldr	r4, [r7, #8]
   126d0:	ae32      	add	r6, sp, #200	; 0xc8
   126d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   126d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   126d6:	4293      	cmp	r3, r2
   126d8:	db00      	blt.n	126dc <_vfprintf_r+0xe18>
   126da:	e179      	b.n	129d0 <_vfprintf_r+0x110c>
   126dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   126de:	6032      	str	r2, [r6, #0]
   126e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   126e2:	4694      	mov	ip, r2
   126e4:	6072      	str	r2, [r6, #4]
   126e6:	687a      	ldr	r2, [r7, #4]
   126e8:	4464      	add	r4, ip
   126ea:	3201      	adds	r2, #1
   126ec:	60bc      	str	r4, [r7, #8]
   126ee:	607a      	str	r2, [r7, #4]
   126f0:	2a07      	cmp	r2, #7
   126f2:	dd00      	ble.n	126f6 <_vfprintf_r+0xe32>
   126f4:	e176      	b.n	129e4 <_vfprintf_r+0x1120>
   126f6:	3608      	adds	r6, #8
   126f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   126fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
   126fc:	1ad3      	subs	r3, r2, r3
   126fe:	1a52      	subs	r2, r2, r1
   12700:	4690      	mov	r8, r2
   12702:	429a      	cmp	r2, r3
   12704:	dd00      	ble.n	12708 <_vfprintf_r+0xe44>
   12706:	4698      	mov	r8, r3
   12708:	4642      	mov	r2, r8
   1270a:	2a00      	cmp	r2, #0
   1270c:	dd0f      	ble.n	1272e <_vfprintf_r+0xe6a>
   1270e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12710:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12712:	468c      	mov	ip, r1
   12714:	4462      	add	r2, ip
   12716:	6032      	str	r2, [r6, #0]
   12718:	4642      	mov	r2, r8
   1271a:	6072      	str	r2, [r6, #4]
   1271c:	687a      	ldr	r2, [r7, #4]
   1271e:	4444      	add	r4, r8
   12720:	3201      	adds	r2, #1
   12722:	60bc      	str	r4, [r7, #8]
   12724:	607a      	str	r2, [r7, #4]
   12726:	2a07      	cmp	r2, #7
   12728:	dd00      	ble.n	1272c <_vfprintf_r+0xe68>
   1272a:	e289      	b.n	12c40 <_vfprintf_r+0x137c>
   1272c:	3608      	adds	r6, #8
   1272e:	4642      	mov	r2, r8
   12730:	43d5      	mvns	r5, r2
   12732:	17ed      	asrs	r5, r5, #31
   12734:	4015      	ands	r5, r2
   12736:	1b5d      	subs	r5, r3, r5
   12738:	2d00      	cmp	r5, #0
   1273a:	dc00      	bgt.n	1273e <_vfprintf_r+0xe7a>
   1273c:	e4c5      	b.n	120ca <_vfprintf_r+0x806>
   1273e:	4a4d      	ldr	r2, [pc, #308]	; (12874 <_vfprintf_r+0xfb0>)
   12740:	687b      	ldr	r3, [r7, #4]
   12742:	4691      	mov	r9, r2
   12744:	2d10      	cmp	r5, #16
   12746:	dc00      	bgt.n	1274a <_vfprintf_r+0xe86>
   12748:	e771      	b.n	1262e <_vfprintf_r+0xd6a>
   1274a:	2210      	movs	r2, #16
   1274c:	4690      	mov	r8, r2
   1274e:	0022      	movs	r2, r4
   12750:	465c      	mov	r4, fp
   12752:	e004      	b.n	1275e <_vfprintf_r+0xe9a>
   12754:	3608      	adds	r6, #8
   12756:	3d10      	subs	r5, #16
   12758:	2d10      	cmp	r5, #16
   1275a:	dc00      	bgt.n	1275e <_vfprintf_r+0xe9a>
   1275c:	e765      	b.n	1262a <_vfprintf_r+0xd66>
   1275e:	4649      	mov	r1, r9
   12760:	6031      	str	r1, [r6, #0]
   12762:	4641      	mov	r1, r8
   12764:	3210      	adds	r2, #16
   12766:	3301      	adds	r3, #1
   12768:	6071      	str	r1, [r6, #4]
   1276a:	60ba      	str	r2, [r7, #8]
   1276c:	607b      	str	r3, [r7, #4]
   1276e:	2b07      	cmp	r3, #7
   12770:	ddf0      	ble.n	12754 <_vfprintf_r+0xe90>
   12772:	003a      	movs	r2, r7
   12774:	0021      	movs	r1, r4
   12776:	9806      	ldr	r0, [sp, #24]
   12778:	f003 fb2c 	bl	15dd4 <__sprint_r>
   1277c:	2800      	cmp	r0, #0
   1277e:	d000      	beq.n	12782 <_vfprintf_r+0xebe>
   12780:	e609      	b.n	12396 <_vfprintf_r+0xad2>
   12782:	68ba      	ldr	r2, [r7, #8]
   12784:	687b      	ldr	r3, [r7, #4]
   12786:	ae32      	add	r6, sp, #200	; 0xc8
   12788:	e7e5      	b.n	12756 <_vfprintf_r+0xe92>
   1278a:	003a      	movs	r2, r7
   1278c:	4659      	mov	r1, fp
   1278e:	9806      	ldr	r0, [sp, #24]
   12790:	f003 fb20 	bl	15dd4 <__sprint_r>
   12794:	2800      	cmp	r0, #0
   12796:	d000      	beq.n	1279a <_vfprintf_r+0xed6>
   12798:	e624      	b.n	123e4 <_vfprintf_r+0xb20>
   1279a:	68bc      	ldr	r4, [r7, #8]
   1279c:	687b      	ldr	r3, [r7, #4]
   1279e:	ae32      	add	r6, sp, #200	; 0xc8
   127a0:	e504      	b.n	121ac <_vfprintf_r+0x8e8>
   127a2:	2307      	movs	r3, #7
   127a4:	3207      	adds	r2, #7
   127a6:	439a      	bics	r2, r3
   127a8:	3301      	adds	r3, #1
   127aa:	469c      	mov	ip, r3
   127ac:	4494      	add	ip, r2
   127ae:	4663      	mov	r3, ip
   127b0:	930f      	str	r3, [sp, #60]	; 0x3c
   127b2:	6853      	ldr	r3, [r2, #4]
   127b4:	6812      	ldr	r2, [r2, #0]
   127b6:	930d      	str	r3, [sp, #52]	; 0x34
   127b8:	920c      	str	r2, [sp, #48]	; 0x30
   127ba:	f7ff faa7 	bl	11d0c <_vfprintf_r+0x448>
   127be:	2207      	movs	r2, #7
   127c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   127c2:	3307      	adds	r3, #7
   127c4:	4393      	bics	r3, r2
   127c6:	3201      	adds	r2, #1
   127c8:	4694      	mov	ip, r2
   127ca:	449c      	add	ip, r3
   127cc:	4662      	mov	r2, ip
   127ce:	920f      	str	r2, [sp, #60]	; 0x3c
   127d0:	681a      	ldr	r2, [r3, #0]
   127d2:	685b      	ldr	r3, [r3, #4]
   127d4:	0011      	movs	r1, r2
   127d6:	001a      	movs	r2, r3
   127d8:	0008      	movs	r0, r1
   127da:	4310      	orrs	r0, r2
   127dc:	910c      	str	r1, [sp, #48]	; 0x30
   127de:	920d      	str	r2, [sp, #52]	; 0x34
   127e0:	2300      	movs	r3, #0
   127e2:	0002      	movs	r2, r0
   127e4:	f7ff f9b4 	bl	11b50 <_vfprintf_r+0x28c>
   127e8:	46a3      	mov	fp, r4
   127ea:	4698      	mov	r8, r3
   127ec:	0014      	movs	r4, r2
   127ee:	464b      	mov	r3, r9
   127f0:	6075      	str	r5, [r6, #4]
   127f2:	6033      	str	r3, [r6, #0]
   127f4:	1964      	adds	r4, r4, r5
   127f6:	e4f7      	b.n	121e8 <_vfprintf_r+0x924>
   127f8:	003a      	movs	r2, r7
   127fa:	4659      	mov	r1, fp
   127fc:	9806      	ldr	r0, [sp, #24]
   127fe:	f003 fae9 	bl	15dd4 <__sprint_r>
   12802:	2800      	cmp	r0, #0
   12804:	d000      	beq.n	12808 <_vfprintf_r+0xf44>
   12806:	e5ed      	b.n	123e4 <_vfprintf_r+0xb20>
   12808:	687b      	ldr	r3, [r7, #4]
   1280a:	68bc      	ldr	r4, [r7, #8]
   1280c:	4698      	mov	r8, r3
   1280e:	ae32      	add	r6, sp, #200	; 0xc8
   12810:	e4da      	b.n	121c8 <_vfprintf_r+0x904>
   12812:	2207      	movs	r2, #7
   12814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12816:	3307      	adds	r3, #7
   12818:	4393      	bics	r3, r2
   1281a:	3201      	adds	r2, #1
   1281c:	4694      	mov	ip, r2
   1281e:	449c      	add	ip, r3
   12820:	4662      	mov	r2, ip
   12822:	920f      	str	r2, [sp, #60]	; 0x3c
   12824:	681a      	ldr	r2, [r3, #0]
   12826:	685b      	ldr	r3, [r3, #4]
   12828:	0011      	movs	r1, r2
   1282a:	001a      	movs	r2, r3
   1282c:	0008      	movs	r0, r1
   1282e:	4310      	orrs	r0, r2
   12830:	910c      	str	r1, [sp, #48]	; 0x30
   12832:	920d      	str	r2, [sp, #52]	; 0x34
   12834:	2301      	movs	r3, #1
   12836:	0002      	movs	r2, r0
   12838:	f7ff f98a 	bl	11b50 <_vfprintf_r+0x28c>
   1283c:	2207      	movs	r2, #7
   1283e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12840:	3307      	adds	r3, #7
   12842:	4393      	bics	r3, r2
   12844:	3201      	adds	r2, #1
   12846:	4694      	mov	ip, r2
   12848:	449c      	add	ip, r3
   1284a:	4662      	mov	r2, ip
   1284c:	920f      	str	r2, [sp, #60]	; 0x3c
   1284e:	681a      	ldr	r2, [r3, #0]
   12850:	685b      	ldr	r3, [r3, #4]
   12852:	920c      	str	r2, [sp, #48]	; 0x30
   12854:	930d      	str	r3, [sp, #52]	; 0x34
   12856:	f7ff f966 	bl	11b26 <_vfprintf_r+0x262>
   1285a:	003a      	movs	r2, r7
   1285c:	4659      	mov	r1, fp
   1285e:	9806      	ldr	r0, [sp, #24]
   12860:	f003 fab8 	bl	15dd4 <__sprint_r>
   12864:	2800      	cmp	r0, #0
   12866:	d000      	beq.n	1286a <_vfprintf_r+0xfa6>
   12868:	e5bc      	b.n	123e4 <_vfprintf_r+0xb20>
   1286a:	68bc      	ldr	r4, [r7, #8]
   1286c:	ae32      	add	r6, sp, #200	; 0xc8
   1286e:	f7ff fbe2 	bl	12036 <_vfprintf_r+0x772>
   12872:	46c0      	nop			; (mov r8, r8)
   12874:	00017960 	.word	0x00017960
   12878:	980c      	ldr	r0, [sp, #48]	; 0x30
   1287a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1287c:	2300      	movs	r3, #0
   1287e:	4242      	negs	r2, r0
   12880:	418b      	sbcs	r3, r1
   12882:	0011      	movs	r1, r2
   12884:	001a      	movs	r2, r3
   12886:	232d      	movs	r3, #45	; 0x2d
   12888:	a816      	add	r0, sp, #88	; 0x58
   1288a:	77c3      	strb	r3, [r0, #31]
   1288c:	0008      	movs	r0, r1
   1288e:	4310      	orrs	r0, r2
   12890:	910c      	str	r1, [sp, #48]	; 0x30
   12892:	920d      	str	r2, [sp, #52]	; 0x34
   12894:	4698      	mov	r8, r3
   12896:	0002      	movs	r2, r0
   12898:	3b2c      	subs	r3, #44	; 0x2c
   1289a:	f7ff f95d 	bl	11b58 <_vfprintf_r+0x294>
   1289e:	9916      	ldr	r1, [sp, #88]	; 0x58
   128a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
   128a2:	000a      	movs	r2, r1
   128a4:	0008      	movs	r0, r1
   128a6:	002b      	movs	r3, r5
   128a8:	0029      	movs	r1, r5
   128aa:	f003 fd2d 	bl	16308 <__aeabi_dcmpun>
   128ae:	2800      	cmp	r0, #0
   128b0:	d000      	beq.n	128b4 <_vfprintf_r+0xff0>
   128b2:	e2c6      	b.n	12e42 <_vfprintf_r+0x157e>
   128b4:	4653      	mov	r3, sl
   128b6:	3301      	adds	r3, #1
   128b8:	d100      	bne.n	128bc <_vfprintf_r+0xff8>
   128ba:	e09f      	b.n	129fc <_vfprintf_r+0x1138>
   128bc:	2320      	movs	r3, #32
   128be:	9a12      	ldr	r2, [sp, #72]	; 0x48
   128c0:	439a      	bics	r2, r3
   128c2:	920e      	str	r2, [sp, #56]	; 0x38
   128c4:	2a47      	cmp	r2, #71	; 0x47
   128c6:	d100      	bne.n	128ca <_vfprintf_r+0x1006>
   128c8:	e1a1      	b.n	12c0e <_vfprintf_r+0x134a>
   128ca:	2380      	movs	r3, #128	; 0x80
   128cc:	005b      	lsls	r3, r3, #1
   128ce:	4323      	orrs	r3, r4
   128d0:	9309      	str	r3, [sp, #36]	; 0x24
   128d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   128d4:	2b00      	cmp	r3, #0
   128d6:	da00      	bge.n	128da <_vfprintf_r+0x1016>
   128d8:	e1ed      	b.n	12cb6 <_vfprintf_r+0x13f2>
   128da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   128dc:	9308      	str	r3, [sp, #32]
   128de:	2300      	movs	r3, #0
   128e0:	4691      	mov	r9, r2
   128e2:	9310      	str	r3, [sp, #64]	; 0x40
   128e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   128e6:	2b66      	cmp	r3, #102	; 0x66
   128e8:	d100      	bne.n	128ec <_vfprintf_r+0x1028>
   128ea:	e1b8      	b.n	12c5e <_vfprintf_r+0x139a>
   128ec:	2b46      	cmp	r3, #70	; 0x46
   128ee:	d100      	bne.n	128f2 <_vfprintf_r+0x102e>
   128f0:	e237      	b.n	12d62 <_vfprintf_r+0x149e>
   128f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   128f4:	9806      	ldr	r0, [sp, #24]
   128f6:	3a45      	subs	r2, #69	; 0x45
   128f8:	0013      	movs	r3, r2
   128fa:	4259      	negs	r1, r3
   128fc:	4159      	adcs	r1, r3
   128fe:	ab20      	add	r3, sp, #128	; 0x80
   12900:	000d      	movs	r5, r1
   12902:	9303      	str	r3, [sp, #12]
   12904:	ab1f      	add	r3, sp, #124	; 0x7c
   12906:	9302      	str	r3, [sp, #8]
   12908:	2302      	movs	r3, #2
   1290a:	aa23      	add	r2, sp, #140	; 0x8c
   1290c:	4455      	add	r5, sl
   1290e:	921b      	str	r2, [sp, #108]	; 0x6c
   12910:	9204      	str	r2, [sp, #16]
   12912:	9300      	str	r3, [sp, #0]
   12914:	9501      	str	r5, [sp, #4]
   12916:	9b08      	ldr	r3, [sp, #32]
   12918:	464a      	mov	r2, r9
   1291a:	f000 fcab 	bl	13274 <_dtoa_r>
   1291e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12920:	9011      	str	r0, [sp, #68]	; 0x44
   12922:	2b67      	cmp	r3, #103	; 0x67
   12924:	d000      	beq.n	12928 <_vfprintf_r+0x1064>
   12926:	e20b      	b.n	12d40 <_vfprintf_r+0x147c>
   12928:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1292a:	4698      	mov	r8, r3
   1292c:	44a8      	add	r8, r5
   1292e:	07e3      	lsls	r3, r4, #31
   12930:	d400      	bmi.n	12934 <_vfprintf_r+0x1070>
   12932:	e277      	b.n	12e24 <_vfprintf_r+0x1560>
   12934:	2300      	movs	r3, #0
   12936:	2200      	movs	r2, #0
   12938:	4648      	mov	r0, r9
   1293a:	9908      	ldr	r1, [sp, #32]
   1293c:	f7fb feb6 	bl	e6ac <__aeabi_dcmpeq>
   12940:	4643      	mov	r3, r8
   12942:	2800      	cmp	r0, #0
   12944:	d10a      	bne.n	1295c <_vfprintf_r+0x1098>
   12946:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12948:	4543      	cmp	r3, r8
   1294a:	d207      	bcs.n	1295c <_vfprintf_r+0x1098>
   1294c:	2130      	movs	r1, #48	; 0x30
   1294e:	4640      	mov	r0, r8
   12950:	1c5a      	adds	r2, r3, #1
   12952:	9223      	str	r2, [sp, #140]	; 0x8c
   12954:	7019      	strb	r1, [r3, #0]
   12956:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12958:	4298      	cmp	r0, r3
   1295a:	d8f9      	bhi.n	12950 <_vfprintf_r+0x108c>
   1295c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1295e:	1a9b      	subs	r3, r3, r2
   12960:	9314      	str	r3, [sp, #80]	; 0x50
   12962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12964:	2b47      	cmp	r3, #71	; 0x47
   12966:	d100      	bne.n	1296a <_vfprintf_r+0x10a6>
   12968:	e0d0      	b.n	12b0c <_vfprintf_r+0x1248>
   1296a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1296c:	2b65      	cmp	r3, #101	; 0x65
   1296e:	dc00      	bgt.n	12972 <_vfprintf_r+0x10ae>
   12970:	e2d5      	b.n	12f1e <_vfprintf_r+0x165a>
   12972:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12974:	2b66      	cmp	r3, #102	; 0x66
   12976:	d100      	bne.n	1297a <_vfprintf_r+0x10b6>
   12978:	e1c6      	b.n	12d08 <_vfprintf_r+0x1444>
   1297a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1297c:	9313      	str	r3, [sp, #76]	; 0x4c
   1297e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12982:	0019      	movs	r1, r3
   12984:	4291      	cmp	r1, r2
   12986:	dd00      	ble.n	1298a <_vfprintf_r+0x10c6>
   12988:	e1a0      	b.n	12ccc <_vfprintf_r+0x1408>
   1298a:	07e3      	lsls	r3, r4, #31
   1298c:	d500      	bpl.n	12990 <_vfprintf_r+0x10cc>
   1298e:	e242      	b.n	12e16 <_vfprintf_r+0x1552>
   12990:	43d3      	mvns	r3, r2
   12992:	17db      	asrs	r3, r3, #31
   12994:	0011      	movs	r1, r2
   12996:	401a      	ands	r2, r3
   12998:	2367      	movs	r3, #103	; 0x67
   1299a:	9208      	str	r2, [sp, #32]
   1299c:	910e      	str	r1, [sp, #56]	; 0x38
   1299e:	9312      	str	r3, [sp, #72]	; 0x48
   129a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   129a2:	2b00      	cmp	r3, #0
   129a4:	d000      	beq.n	129a8 <_vfprintf_r+0x10e4>
   129a6:	e0a9      	b.n	12afc <_vfprintf_r+0x1238>
   129a8:	ab16      	add	r3, sp, #88	; 0x58
   129aa:	7fdb      	ldrb	r3, [r3, #31]
   129ac:	4698      	mov	r8, r3
   129ae:	2300      	movs	r3, #0
   129b0:	469a      	mov	sl, r3
   129b2:	f7ff f8fc 	bl	11bae <_vfprintf_r+0x2ea>
   129b6:	46cb      	mov	fp, r9
   129b8:	46a1      	mov	r9, r4
   129ba:	0014      	movs	r4, r2
   129bc:	e637      	b.n	1262e <_vfprintf_r+0xd6a>
   129be:	464b      	mov	r3, r9
   129c0:	6d98      	ldr	r0, [r3, #88]	; 0x58
   129c2:	f002 f871 	bl	14aa8 <__retarget_lock_release_recursive>
   129c6:	2301      	movs	r3, #1
   129c8:	425b      	negs	r3, r3
   129ca:	930a      	str	r3, [sp, #40]	; 0x28
   129cc:	f7ff f82b 	bl	11a26 <_vfprintf_r+0x162>
   129d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   129d2:	07d2      	lsls	r2, r2, #31
   129d4:	d400      	bmi.n	129d8 <_vfprintf_r+0x1114>
   129d6:	e68f      	b.n	126f8 <_vfprintf_r+0xe34>
   129d8:	e680      	b.n	126dc <_vfprintf_r+0xe18>
   129da:	3608      	adds	r6, #8
   129dc:	e679      	b.n	126d2 <_vfprintf_r+0xe0e>
   129de:	68bc      	ldr	r4, [r7, #8]
   129e0:	f7ff fb73 	bl	120ca <_vfprintf_r+0x806>
   129e4:	003a      	movs	r2, r7
   129e6:	4659      	mov	r1, fp
   129e8:	9806      	ldr	r0, [sp, #24]
   129ea:	f003 f9f3 	bl	15dd4 <__sprint_r>
   129ee:	2800      	cmp	r0, #0
   129f0:	d000      	beq.n	129f4 <_vfprintf_r+0x1130>
   129f2:	e4f7      	b.n	123e4 <_vfprintf_r+0xb20>
   129f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   129f6:	68bc      	ldr	r4, [r7, #8]
   129f8:	ae32      	add	r6, sp, #200	; 0xc8
   129fa:	e67d      	b.n	126f8 <_vfprintf_r+0xe34>
   129fc:	2320      	movs	r3, #32
   129fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a00:	439a      	bics	r2, r3
   12a02:	3b1a      	subs	r3, #26
   12a04:	920e      	str	r2, [sp, #56]	; 0x38
   12a06:	469a      	mov	sl, r3
   12a08:	e75f      	b.n	128ca <_vfprintf_r+0x1006>
   12a0a:	232d      	movs	r3, #45	; 0x2d
   12a0c:	aa16      	add	r2, sp, #88	; 0x58
   12a0e:	77d3      	strb	r3, [r2, #31]
   12a10:	4698      	mov	r8, r3
   12a12:	f7ff faa8 	bl	11f66 <_vfprintf_r+0x6a2>
   12a16:	003a      	movs	r2, r7
   12a18:	4659      	mov	r1, fp
   12a1a:	9806      	ldr	r0, [sp, #24]
   12a1c:	f003 f9da 	bl	15dd4 <__sprint_r>
   12a20:	2800      	cmp	r0, #0
   12a22:	d000      	beq.n	12a26 <_vfprintf_r+0x1162>
   12a24:	e4de      	b.n	123e4 <_vfprintf_r+0xb20>
   12a26:	ae32      	add	r6, sp, #200	; 0xc8
   12a28:	e419      	b.n	1225e <_vfprintf_r+0x99a>
   12a2a:	4be3      	ldr	r3, [pc, #908]	; (12db8 <_vfprintf_r+0x14f4>)
   12a2c:	3401      	adds	r4, #1
   12a2e:	6033      	str	r3, [r6, #0]
   12a30:	2301      	movs	r3, #1
   12a32:	6073      	str	r3, [r6, #4]
   12a34:	687b      	ldr	r3, [r7, #4]
   12a36:	60bc      	str	r4, [r7, #8]
   12a38:	3301      	adds	r3, #1
   12a3a:	607b      	str	r3, [r7, #4]
   12a3c:	2b07      	cmp	r3, #7
   12a3e:	dd00      	ble.n	12a42 <_vfprintf_r+0x117e>
   12a40:	e155      	b.n	12cee <_vfprintf_r+0x142a>
   12a42:	3608      	adds	r6, #8
   12a44:	2800      	cmp	r0, #0
   12a46:	d107      	bne.n	12a58 <_vfprintf_r+0x1194>
   12a48:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d104      	bne.n	12a58 <_vfprintf_r+0x1194>
   12a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a50:	07db      	lsls	r3, r3, #31
   12a52:	d401      	bmi.n	12a58 <_vfprintf_r+0x1194>
   12a54:	f7ff fb39 	bl	120ca <_vfprintf_r+0x806>
   12a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
   12a5a:	6033      	str	r3, [r6, #0]
   12a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a5e:	1919      	adds	r1, r3, r4
   12a60:	6073      	str	r3, [r6, #4]
   12a62:	687b      	ldr	r3, [r7, #4]
   12a64:	60b9      	str	r1, [r7, #8]
   12a66:	3301      	adds	r3, #1
   12a68:	607b      	str	r3, [r7, #4]
   12a6a:	2b07      	cmp	r3, #7
   12a6c:	dd00      	ble.n	12a70 <_vfprintf_r+0x11ac>
   12a6e:	e1c4      	b.n	12dfa <_vfprintf_r+0x1536>
   12a70:	0032      	movs	r2, r6
   12a72:	3208      	adds	r2, #8
   12a74:	2800      	cmp	r0, #0
   12a76:	da00      	bge.n	12a7a <_vfprintf_r+0x11b6>
   12a78:	e195      	b.n	12da6 <_vfprintf_r+0x14e2>
   12a7a:	9811      	ldr	r0, [sp, #68]	; 0x44
   12a7c:	3301      	adds	r3, #1
   12a7e:	6010      	str	r0, [r2, #0]
   12a80:	9814      	ldr	r0, [sp, #80]	; 0x50
   12a82:	607b      	str	r3, [r7, #4]
   12a84:	1844      	adds	r4, r0, r1
   12a86:	6050      	str	r0, [r2, #4]
   12a88:	60bc      	str	r4, [r7, #8]
   12a8a:	2b07      	cmp	r3, #7
   12a8c:	dd01      	ble.n	12a92 <_vfprintf_r+0x11ce>
   12a8e:	f7ff fbc2 	bl	12216 <_vfprintf_r+0x952>
   12a92:	3208      	adds	r2, #8
   12a94:	0016      	movs	r6, r2
   12a96:	f7ff fb18 	bl	120ca <_vfprintf_r+0x806>
   12a9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12a9e:	680b      	ldr	r3, [r1, #0]
   12aa0:	601a      	str	r2, [r3, #0]
   12aa2:	17d2      	asrs	r2, r2, #31
   12aa4:	605a      	str	r2, [r3, #4]
   12aa6:	000b      	movs	r3, r1
   12aa8:	3304      	adds	r3, #4
   12aaa:	930f      	str	r3, [sp, #60]	; 0x3c
   12aac:	f7fe ff58 	bl	11960 <_vfprintf_r+0x9c>
   12ab0:	464b      	mov	r3, r9
   12ab2:	9a07      	ldr	r2, [sp, #28]
   12ab4:	431c      	orrs	r4, r3
   12ab6:	3201      	adds	r2, #1
   12ab8:	7813      	ldrb	r3, [r2, #0]
   12aba:	9207      	str	r2, [sp, #28]
   12abc:	f7fe ff8b 	bl	119d6 <_vfprintf_r+0x112>
   12ac0:	003a      	movs	r2, r7
   12ac2:	4659      	mov	r1, fp
   12ac4:	9806      	ldr	r0, [sp, #24]
   12ac6:	f003 f985 	bl	15dd4 <__sprint_r>
   12aca:	2800      	cmp	r0, #0
   12acc:	d000      	beq.n	12ad0 <_vfprintf_r+0x120c>
   12ace:	e489      	b.n	123e4 <_vfprintf_r+0xb20>
   12ad0:	68bc      	ldr	r4, [r7, #8]
   12ad2:	ae32      	add	r6, sp, #200	; 0xc8
   12ad4:	f7ff fbdc 	bl	12290 <_vfprintf_r+0x9cc>
   12ad8:	4bb8      	ldr	r3, [pc, #736]	; (12dbc <_vfprintf_r+0x14f8>)
   12ada:	9311      	str	r3, [sp, #68]	; 0x44
   12adc:	f7ff fa4a 	bl	11f74 <_vfprintf_r+0x6b0>
   12ae0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12ae2:	ab32      	add	r3, sp, #200	; 0xc8
   12ae4:	1a9b      	subs	r3, r3, r2
   12ae6:	930e      	str	r3, [sp, #56]	; 0x38
   12ae8:	f7ff f859 	bl	11b9e <_vfprintf_r+0x2da>
   12aec:	9811      	ldr	r0, [sp, #68]	; 0x44
   12aee:	f7fe feb7 	bl	11860 <strlen>
   12af2:	0002      	movs	r2, r0
   12af4:	900e      	str	r0, [sp, #56]	; 0x38
   12af6:	0003      	movs	r3, r0
   12af8:	f7ff f9a1 	bl	11e3e <_vfprintf_r+0x57a>
   12afc:	232d      	movs	r3, #45	; 0x2d
   12afe:	aa16      	add	r2, sp, #88	; 0x58
   12b00:	77d3      	strb	r3, [r2, #31]
   12b02:	4698      	mov	r8, r3
   12b04:	2300      	movs	r3, #0
   12b06:	469a      	mov	sl, r3
   12b08:	f7ff f854 	bl	11bb4 <_vfprintf_r+0x2f0>
   12b0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12b0e:	9313      	str	r3, [sp, #76]	; 0x4c
   12b10:	1cda      	adds	r2, r3, #3
   12b12:	db02      	blt.n	12b1a <_vfprintf_r+0x1256>
   12b14:	459a      	cmp	sl, r3
   12b16:	db00      	blt.n	12b1a <_vfprintf_r+0x1256>
   12b18:	e731      	b.n	1297e <_vfprintf_r+0x10ba>
   12b1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b1c:	3b02      	subs	r3, #2
   12b1e:	9312      	str	r3, [sp, #72]	; 0x48
   12b20:	222c      	movs	r2, #44	; 0x2c
   12b22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12b24:	2148      	movs	r1, #72	; 0x48
   12b26:	1e5d      	subs	r5, r3, #1
   12b28:	ab16      	add	r3, sp, #88	; 0x58
   12b2a:	189b      	adds	r3, r3, r2
   12b2c:	466a      	mov	r2, sp
   12b2e:	1852      	adds	r2, r2, r1
   12b30:	7812      	ldrb	r2, [r2, #0]
   12b32:	951f      	str	r5, [sp, #124]	; 0x7c
   12b34:	701a      	strb	r2, [r3, #0]
   12b36:	2d00      	cmp	r5, #0
   12b38:	da00      	bge.n	12b3c <_vfprintf_r+0x1278>
   12b3a:	e1cb      	b.n	12ed4 <_vfprintf_r+0x1610>
   12b3c:	212d      	movs	r1, #45	; 0x2d
   12b3e:	232b      	movs	r3, #43	; 0x2b
   12b40:	aa16      	add	r2, sp, #88	; 0x58
   12b42:	1852      	adds	r2, r2, r1
   12b44:	7013      	strb	r3, [r2, #0]
   12b46:	2d09      	cmp	r5, #9
   12b48:	dc00      	bgt.n	12b4c <_vfprintf_r+0x1288>
   12b4a:	e16d      	b.n	12e28 <_vfprintf_r+0x1564>
   12b4c:	aa16      	add	r2, sp, #88	; 0x58
   12b4e:	233b      	movs	r3, #59	; 0x3b
   12b50:	4694      	mov	ip, r2
   12b52:	4463      	add	r3, ip
   12b54:	469a      	mov	sl, r3
   12b56:	46b1      	mov	r9, r6
   12b58:	46a0      	mov	r8, r4
   12b5a:	4656      	mov	r6, sl
   12b5c:	e000      	b.n	12b60 <_vfprintf_r+0x129c>
   12b5e:	0026      	movs	r6, r4
   12b60:	0028      	movs	r0, r5
   12b62:	210a      	movs	r1, #10
   12b64:	f7fb fd8c 	bl	e680 <__aeabi_idivmod>
   12b68:	1e74      	subs	r4, r6, #1
   12b6a:	3130      	adds	r1, #48	; 0x30
   12b6c:	7021      	strb	r1, [r4, #0]
   12b6e:	0028      	movs	r0, r5
   12b70:	210a      	movs	r1, #10
   12b72:	f7fb fc9f 	bl	e4b4 <__divsi3>
   12b76:	0005      	movs	r5, r0
   12b78:	2809      	cmp	r0, #9
   12b7a:	dcf0      	bgt.n	12b5e <_vfprintf_r+0x129a>
   12b7c:	0023      	movs	r3, r4
   12b7e:	4644      	mov	r4, r8
   12b80:	46b0      	mov	r8, r6
   12b82:	464e      	mov	r6, r9
   12b84:	4699      	mov	r9, r3
   12b86:	0003      	movs	r3, r0
   12b88:	3330      	adds	r3, #48	; 0x30
   12b8a:	b2d8      	uxtb	r0, r3
   12b8c:	4643      	mov	r3, r8
   12b8e:	3b02      	subs	r3, #2
   12b90:	7018      	strb	r0, [r3, #0]
   12b92:	459a      	cmp	sl, r3
   12b94:	d800      	bhi.n	12b98 <_vfprintf_r+0x12d4>
   12b96:	e1f6      	b.n	12f86 <_vfprintf_r+0x16c2>
   12b98:	4642      	mov	r2, r8
   12b9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12b9c:	4645      	mov	r5, r8
   12b9e:	1a99      	subs	r1, r3, r2
   12ba0:	2301      	movs	r3, #1
   12ba2:	3107      	adds	r1, #7
   12ba4:	425b      	negs	r3, r3
   12ba6:	e001      	b.n	12bac <_vfprintf_r+0x12e8>
   12ba8:	5ce8      	ldrb	r0, [r5, r3]
   12baa:	3301      	adds	r3, #1
   12bac:	aa21      	add	r2, sp, #132	; 0x84
   12bae:	18d2      	adds	r2, r2, r3
   12bb0:	70d0      	strb	r0, [r2, #3]
   12bb2:	428b      	cmp	r3, r1
   12bb4:	d1f8      	bne.n	12ba8 <_vfprintf_r+0x12e4>
   12bb6:	a916      	add	r1, sp, #88	; 0x58
   12bb8:	468c      	mov	ip, r1
   12bba:	222e      	movs	r2, #46	; 0x2e
   12bbc:	464b      	mov	r3, r9
   12bbe:	4462      	add	r2, ip
   12bc0:	4694      	mov	ip, r2
   12bc2:	1afb      	subs	r3, r7, r3
   12bc4:	4463      	add	r3, ip
   12bc6:	aa21      	add	r2, sp, #132	; 0x84
   12bc8:	9914      	ldr	r1, [sp, #80]	; 0x50
   12bca:	1a9b      	subs	r3, r3, r2
   12bcc:	469c      	mov	ip, r3
   12bce:	000a      	movs	r2, r1
   12bd0:	4462      	add	r2, ip
   12bd2:	931a      	str	r3, [sp, #104]	; 0x68
   12bd4:	920e      	str	r2, [sp, #56]	; 0x38
   12bd6:	2901      	cmp	r1, #1
   12bd8:	dc00      	bgt.n	12bdc <_vfprintf_r+0x1318>
   12bda:	e170      	b.n	12ebe <_vfprintf_r+0x15fa>
   12bdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12be0:	4694      	mov	ip, r2
   12be2:	4463      	add	r3, ip
   12be4:	001a      	movs	r2, r3
   12be6:	930e      	str	r3, [sp, #56]	; 0x38
   12be8:	43db      	mvns	r3, r3
   12bea:	17db      	asrs	r3, r3, #31
   12bec:	401a      	ands	r2, r3
   12bee:	2300      	movs	r3, #0
   12bf0:	9208      	str	r2, [sp, #32]
   12bf2:	9313      	str	r3, [sp, #76]	; 0x4c
   12bf4:	e6d4      	b.n	129a0 <_vfprintf_r+0x10dc>
   12bf6:	003a      	movs	r2, r7
   12bf8:	4659      	mov	r1, fp
   12bfa:	9806      	ldr	r0, [sp, #24]
   12bfc:	f003 f8ea 	bl	15dd4 <__sprint_r>
   12c00:	2800      	cmp	r0, #0
   12c02:	d001      	beq.n	12c08 <_vfprintf_r+0x1344>
   12c04:	f7ff fbee 	bl	123e4 <_vfprintf_r+0xb20>
   12c08:	68bc      	ldr	r4, [r7, #8]
   12c0a:	ae32      	add	r6, sp, #200	; 0xc8
   12c0c:	e46a      	b.n	124e4 <_vfprintf_r+0xc20>
   12c0e:	4653      	mov	r3, sl
   12c10:	2b00      	cmp	r3, #0
   12c12:	d000      	beq.n	12c16 <_vfprintf_r+0x1352>
   12c14:	e659      	b.n	128ca <_vfprintf_r+0x1006>
   12c16:	3301      	adds	r3, #1
   12c18:	469a      	mov	sl, r3
   12c1a:	e656      	b.n	128ca <_vfprintf_r+0x1006>
   12c1c:	4653      	mov	r3, sl
   12c1e:	9308      	str	r3, [sp, #32]
   12c20:	2b06      	cmp	r3, #6
   12c22:	d901      	bls.n	12c28 <_vfprintf_r+0x1364>
   12c24:	2306      	movs	r3, #6
   12c26:	9308      	str	r3, [sp, #32]
   12c28:	9b08      	ldr	r3, [sp, #32]
   12c2a:	950f      	str	r5, [sp, #60]	; 0x3c
   12c2c:	930e      	str	r3, [sp, #56]	; 0x38
   12c2e:	2300      	movs	r3, #0
   12c30:	4698      	mov	r8, r3
   12c32:	469a      	mov	sl, r3
   12c34:	9313      	str	r3, [sp, #76]	; 0x4c
   12c36:	4b62      	ldr	r3, [pc, #392]	; (12dc0 <_vfprintf_r+0x14fc>)
   12c38:	9409      	str	r4, [sp, #36]	; 0x24
   12c3a:	9311      	str	r3, [sp, #68]	; 0x44
   12c3c:	f7fe ffbd 	bl	11bba <_vfprintf_r+0x2f6>
   12c40:	003a      	movs	r2, r7
   12c42:	4659      	mov	r1, fp
   12c44:	9806      	ldr	r0, [sp, #24]
   12c46:	f003 f8c5 	bl	15dd4 <__sprint_r>
   12c4a:	2800      	cmp	r0, #0
   12c4c:	d001      	beq.n	12c52 <_vfprintf_r+0x138e>
   12c4e:	f7ff fbc9 	bl	123e4 <_vfprintf_r+0xb20>
   12c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12c54:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   12c56:	68bc      	ldr	r4, [r7, #8]
   12c58:	1a9b      	subs	r3, r3, r2
   12c5a:	ae32      	add	r6, sp, #200	; 0xc8
   12c5c:	e567      	b.n	1272e <_vfprintf_r+0xe6a>
   12c5e:	ab23      	add	r3, sp, #140	; 0x8c
   12c60:	931b      	str	r3, [sp, #108]	; 0x6c
   12c62:	9304      	str	r3, [sp, #16]
   12c64:	ab20      	add	r3, sp, #128	; 0x80
   12c66:	9303      	str	r3, [sp, #12]
   12c68:	ab1f      	add	r3, sp, #124	; 0x7c
   12c6a:	9302      	str	r3, [sp, #8]
   12c6c:	4653      	mov	r3, sl
   12c6e:	9301      	str	r3, [sp, #4]
   12c70:	2303      	movs	r3, #3
   12c72:	464a      	mov	r2, r9
   12c74:	9300      	str	r3, [sp, #0]
   12c76:	9806      	ldr	r0, [sp, #24]
   12c78:	9b08      	ldr	r3, [sp, #32]
   12c7a:	f000 fafb 	bl	13274 <_dtoa_r>
   12c7e:	0003      	movs	r3, r0
   12c80:	4453      	add	r3, sl
   12c82:	4698      	mov	r8, r3
   12c84:	4655      	mov	r5, sl
   12c86:	9011      	str	r0, [sp, #68]	; 0x44
   12c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12c8a:	781b      	ldrb	r3, [r3, #0]
   12c8c:	2b30      	cmp	r3, #48	; 0x30
   12c8e:	d002      	beq.n	12c96 <_vfprintf_r+0x13d2>
   12c90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12c92:	4498      	add	r8, r3
   12c94:	e64e      	b.n	12934 <_vfprintf_r+0x1070>
   12c96:	2200      	movs	r2, #0
   12c98:	2300      	movs	r3, #0
   12c9a:	4648      	mov	r0, r9
   12c9c:	9908      	ldr	r1, [sp, #32]
   12c9e:	f7fb fd05 	bl	e6ac <__aeabi_dcmpeq>
   12ca2:	2800      	cmp	r0, #0
   12ca4:	d1f4      	bne.n	12c90 <_vfprintf_r+0x13cc>
   12ca6:	2301      	movs	r3, #1
   12ca8:	1b5b      	subs	r3, r3, r5
   12caa:	931f      	str	r3, [sp, #124]	; 0x7c
   12cac:	4498      	add	r8, r3
   12cae:	e641      	b.n	12934 <_vfprintf_r+0x1070>
   12cb0:	46c1      	mov	r9, r8
   12cb2:	f7ff fb1f 	bl	122f4 <_vfprintf_r+0xa30>
   12cb6:	2280      	movs	r2, #128	; 0x80
   12cb8:	0612      	lsls	r2, r2, #24
   12cba:	4694      	mov	ip, r2
   12cbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12cbe:	4699      	mov	r9, r3
   12cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12cc2:	4463      	add	r3, ip
   12cc4:	9308      	str	r3, [sp, #32]
   12cc6:	232d      	movs	r3, #45	; 0x2d
   12cc8:	9310      	str	r3, [sp, #64]	; 0x40
   12cca:	e60b      	b.n	128e4 <_vfprintf_r+0x1020>
   12ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12cce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12cd0:	4694      	mov	ip, r2
   12cd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12cd4:	4463      	add	r3, ip
   12cd6:	930e      	str	r3, [sp, #56]	; 0x38
   12cd8:	2a00      	cmp	r2, #0
   12cda:	dc00      	bgt.n	12cde <_vfprintf_r+0x141a>
   12cdc:	e0e3      	b.n	12ea6 <_vfprintf_r+0x15e2>
   12cde:	001a      	movs	r2, r3
   12ce0:	43db      	mvns	r3, r3
   12ce2:	17db      	asrs	r3, r3, #31
   12ce4:	401a      	ands	r2, r3
   12ce6:	2367      	movs	r3, #103	; 0x67
   12ce8:	9208      	str	r2, [sp, #32]
   12cea:	9312      	str	r3, [sp, #72]	; 0x48
   12cec:	e658      	b.n	129a0 <_vfprintf_r+0x10dc>
   12cee:	003a      	movs	r2, r7
   12cf0:	4659      	mov	r1, fp
   12cf2:	9806      	ldr	r0, [sp, #24]
   12cf4:	f003 f86e 	bl	15dd4 <__sprint_r>
   12cf8:	2800      	cmp	r0, #0
   12cfa:	d001      	beq.n	12d00 <_vfprintf_r+0x143c>
   12cfc:	f7ff fb72 	bl	123e4 <_vfprintf_r+0xb20>
   12d00:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12d02:	68bc      	ldr	r4, [r7, #8]
   12d04:	ae32      	add	r6, sp, #200	; 0xc8
   12d06:	e69d      	b.n	12a44 <_vfprintf_r+0x1180>
   12d08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12d0a:	9313      	str	r3, [sp, #76]	; 0x4c
   12d0c:	2b00      	cmp	r3, #0
   12d0e:	dc00      	bgt.n	12d12 <_vfprintf_r+0x144e>
   12d10:	e0f2      	b.n	12ef8 <_vfprintf_r+0x1634>
   12d12:	4652      	mov	r2, sl
   12d14:	2a00      	cmp	r2, #0
   12d16:	d000      	beq.n	12d1a <_vfprintf_r+0x1456>
   12d18:	e0a0      	b.n	12e5c <_vfprintf_r+0x1598>
   12d1a:	07e2      	lsls	r2, r4, #31
   12d1c:	d500      	bpl.n	12d20 <_vfprintf_r+0x145c>
   12d1e:	e09d      	b.n	12e5c <_vfprintf_r+0x1598>
   12d20:	9308      	str	r3, [sp, #32]
   12d22:	930e      	str	r3, [sp, #56]	; 0x38
   12d24:	e63c      	b.n	129a0 <_vfprintf_r+0x10dc>
   12d26:	ab16      	add	r3, sp, #88	; 0x58
   12d28:	7fdb      	ldrb	r3, [r3, #31]
   12d2a:	950f      	str	r5, [sp, #60]	; 0x3c
   12d2c:	4698      	mov	r8, r3
   12d2e:	4653      	mov	r3, sl
   12d30:	9308      	str	r3, [sp, #32]
   12d32:	930e      	str	r3, [sp, #56]	; 0x38
   12d34:	2300      	movs	r3, #0
   12d36:	9409      	str	r4, [sp, #36]	; 0x24
   12d38:	469a      	mov	sl, r3
   12d3a:	9313      	str	r3, [sp, #76]	; 0x4c
   12d3c:	f7fe ff37 	bl	11bae <_vfprintf_r+0x2ea>
   12d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d42:	4698      	mov	r8, r3
   12d44:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12d46:	44a8      	add	r8, r5
   12d48:	2b47      	cmp	r3, #71	; 0x47
   12d4a:	d000      	beq.n	12d4e <_vfprintf_r+0x148a>
   12d4c:	e5f2      	b.n	12934 <_vfprintf_r+0x1070>
   12d4e:	07e3      	lsls	r3, r4, #31
   12d50:	d400      	bmi.n	12d54 <_vfprintf_r+0x1490>
   12d52:	e0dc      	b.n	12f0e <_vfprintf_r+0x164a>
   12d54:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12d56:	4698      	mov	r8, r3
   12d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12d5a:	44a8      	add	r8, r5
   12d5c:	2b46      	cmp	r3, #70	; 0x46
   12d5e:	d093      	beq.n	12c88 <_vfprintf_r+0x13c4>
   12d60:	e5e8      	b.n	12934 <_vfprintf_r+0x1070>
   12d62:	ab23      	add	r3, sp, #140	; 0x8c
   12d64:	931b      	str	r3, [sp, #108]	; 0x6c
   12d66:	9304      	str	r3, [sp, #16]
   12d68:	ab20      	add	r3, sp, #128	; 0x80
   12d6a:	9303      	str	r3, [sp, #12]
   12d6c:	ab1f      	add	r3, sp, #124	; 0x7c
   12d6e:	9302      	str	r3, [sp, #8]
   12d70:	4653      	mov	r3, sl
   12d72:	9301      	str	r3, [sp, #4]
   12d74:	2303      	movs	r3, #3
   12d76:	464a      	mov	r2, r9
   12d78:	9300      	str	r3, [sp, #0]
   12d7a:	9806      	ldr	r0, [sp, #24]
   12d7c:	9b08      	ldr	r3, [sp, #32]
   12d7e:	f000 fa79 	bl	13274 <_dtoa_r>
   12d82:	4655      	mov	r5, sl
   12d84:	9011      	str	r0, [sp, #68]	; 0x44
   12d86:	e7e5      	b.n	12d54 <_vfprintf_r+0x1490>
   12d88:	003a      	movs	r2, r7
   12d8a:	4659      	mov	r1, fp
   12d8c:	9806      	ldr	r0, [sp, #24]
   12d8e:	f003 f821 	bl	15dd4 <__sprint_r>
   12d92:	2800      	cmp	r0, #0
   12d94:	d101      	bne.n	12d9a <_vfprintf_r+0x14d6>
   12d96:	f7ff faab 	bl	122f0 <_vfprintf_r+0xa2c>
   12d9a:	f7ff faab 	bl	122f4 <_vfprintf_r+0xa30>
   12d9e:	4642      	mov	r2, r8
   12da0:	9207      	str	r2, [sp, #28]
   12da2:	f7fe fe1b 	bl	119dc <_vfprintf_r+0x118>
   12da6:	4244      	negs	r4, r0
   12da8:	3010      	adds	r0, #16
   12daa:	db00      	blt.n	12dae <_vfprintf_r+0x14ea>
   12dac:	e0d8      	b.n	12f60 <_vfprintf_r+0x169c>
   12dae:	4805      	ldr	r0, [pc, #20]	; (12dc4 <_vfprintf_r+0x1500>)
   12db0:	2610      	movs	r6, #16
   12db2:	0005      	movs	r5, r0
   12db4:	e00c      	b.n	12dd0 <_vfprintf_r+0x150c>
   12db6:	46c0      	nop			; (mov r8, r8)
   12db8:	0001794c 	.word	0x0001794c
   12dbc:	00017910 	.word	0x00017910
   12dc0:	00017944 	.word	0x00017944
   12dc4:	00017960 	.word	0x00017960
   12dc8:	3208      	adds	r2, #8
   12dca:	3c10      	subs	r4, #16
   12dcc:	2c10      	cmp	r4, #16
   12dce:	dd51      	ble.n	12e74 <_vfprintf_r+0x15b0>
   12dd0:	3110      	adds	r1, #16
   12dd2:	3301      	adds	r3, #1
   12dd4:	6015      	str	r5, [r2, #0]
   12dd6:	6056      	str	r6, [r2, #4]
   12dd8:	60b9      	str	r1, [r7, #8]
   12dda:	607b      	str	r3, [r7, #4]
   12ddc:	2b07      	cmp	r3, #7
   12dde:	ddf3      	ble.n	12dc8 <_vfprintf_r+0x1504>
   12de0:	003a      	movs	r2, r7
   12de2:	4659      	mov	r1, fp
   12de4:	9806      	ldr	r0, [sp, #24]
   12de6:	f002 fff5 	bl	15dd4 <__sprint_r>
   12dea:	2800      	cmp	r0, #0
   12dec:	d001      	beq.n	12df2 <_vfprintf_r+0x152e>
   12dee:	f7ff faf9 	bl	123e4 <_vfprintf_r+0xb20>
   12df2:	68b9      	ldr	r1, [r7, #8]
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	aa32      	add	r2, sp, #200	; 0xc8
   12df8:	e7e7      	b.n	12dca <_vfprintf_r+0x1506>
   12dfa:	003a      	movs	r2, r7
   12dfc:	4659      	mov	r1, fp
   12dfe:	9806      	ldr	r0, [sp, #24]
   12e00:	f002 ffe8 	bl	15dd4 <__sprint_r>
   12e04:	2800      	cmp	r0, #0
   12e06:	d001      	beq.n	12e0c <_vfprintf_r+0x1548>
   12e08:	f7ff faec 	bl	123e4 <_vfprintf_r+0xb20>
   12e0c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12e0e:	68b9      	ldr	r1, [r7, #8]
   12e10:	687b      	ldr	r3, [r7, #4]
   12e12:	aa32      	add	r2, sp, #200	; 0xc8
   12e14:	e62e      	b.n	12a74 <_vfprintf_r+0x11b0>
   12e16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12e1a:	4694      	mov	ip, r2
   12e1c:	4463      	add	r3, ip
   12e1e:	001a      	movs	r2, r3
   12e20:	930e      	str	r3, [sp, #56]	; 0x38
   12e22:	e75d      	b.n	12ce0 <_vfprintf_r+0x141c>
   12e24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12e26:	e599      	b.n	1295c <_vfprintf_r+0x1098>
   12e28:	212e      	movs	r1, #46	; 0x2e
   12e2a:	2330      	movs	r3, #48	; 0x30
   12e2c:	aa16      	add	r2, sp, #88	; 0x58
   12e2e:	1852      	adds	r2, r2, r1
   12e30:	7013      	strb	r3, [r2, #0]
   12e32:	002b      	movs	r3, r5
   12e34:	aa16      	add	r2, sp, #88	; 0x58
   12e36:	3101      	adds	r1, #1
   12e38:	3330      	adds	r3, #48	; 0x30
   12e3a:	1852      	adds	r2, r2, r1
   12e3c:	7013      	strb	r3, [r2, #0]
   12e3e:	ab22      	add	r3, sp, #136	; 0x88
   12e40:	e6c1      	b.n	12bc6 <_vfprintf_r+0x1302>
   12e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12e44:	2b00      	cmp	r3, #0
   12e46:	db52      	blt.n	12eee <_vfprintf_r+0x162a>
   12e48:	ab16      	add	r3, sp, #88	; 0x58
   12e4a:	7fdb      	ldrb	r3, [r3, #31]
   12e4c:	4698      	mov	r8, r3
   12e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12e50:	2b47      	cmp	r3, #71	; 0x47
   12e52:	dc48      	bgt.n	12ee6 <_vfprintf_r+0x1622>
   12e54:	4b4e      	ldr	r3, [pc, #312]	; (12f90 <_vfprintf_r+0x16cc>)
   12e56:	9311      	str	r3, [sp, #68]	; 0x44
   12e58:	f7ff f88c 	bl	11f74 <_vfprintf_r+0x6b0>
   12e5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   12e5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12e60:	4694      	mov	ip, r2
   12e62:	4463      	add	r3, ip
   12e64:	4453      	add	r3, sl
   12e66:	001a      	movs	r2, r3
   12e68:	930e      	str	r3, [sp, #56]	; 0x38
   12e6a:	43db      	mvns	r3, r3
   12e6c:	17db      	asrs	r3, r3, #31
   12e6e:	401a      	ands	r2, r3
   12e70:	9208      	str	r2, [sp, #32]
   12e72:	e595      	b.n	129a0 <_vfprintf_r+0x10dc>
   12e74:	46a9      	mov	r9, r5
   12e76:	4648      	mov	r0, r9
   12e78:	1909      	adds	r1, r1, r4
   12e7a:	3301      	adds	r3, #1
   12e7c:	6010      	str	r0, [r2, #0]
   12e7e:	6054      	str	r4, [r2, #4]
   12e80:	60b9      	str	r1, [r7, #8]
   12e82:	3208      	adds	r2, #8
   12e84:	607b      	str	r3, [r7, #4]
   12e86:	2b07      	cmp	r3, #7
   12e88:	dc00      	bgt.n	12e8c <_vfprintf_r+0x15c8>
   12e8a:	e5f6      	b.n	12a7a <_vfprintf_r+0x11b6>
   12e8c:	003a      	movs	r2, r7
   12e8e:	4659      	mov	r1, fp
   12e90:	9806      	ldr	r0, [sp, #24]
   12e92:	f002 ff9f 	bl	15dd4 <__sprint_r>
   12e96:	2800      	cmp	r0, #0
   12e98:	d001      	beq.n	12e9e <_vfprintf_r+0x15da>
   12e9a:	f7ff faa3 	bl	123e4 <_vfprintf_r+0xb20>
   12e9e:	68b9      	ldr	r1, [r7, #8]
   12ea0:	687b      	ldr	r3, [r7, #4]
   12ea2:	aa32      	add	r2, sp, #200	; 0xc8
   12ea4:	e5e9      	b.n	12a7a <_vfprintf_r+0x11b6>
   12ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12ea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12eaa:	1a98      	subs	r0, r3, r2
   12eac:	1c43      	adds	r3, r0, #1
   12eae:	001a      	movs	r2, r3
   12eb0:	930e      	str	r3, [sp, #56]	; 0x38
   12eb2:	e715      	b.n	12ce0 <_vfprintf_r+0x141c>
   12eb4:	4a37      	ldr	r2, [pc, #220]	; (12f94 <_vfprintf_r+0x16d0>)
   12eb6:	687b      	ldr	r3, [r7, #4]
   12eb8:	4691      	mov	r9, r2
   12eba:	f7ff fbf5 	bl	126a8 <_vfprintf_r+0xde4>
   12ebe:	2301      	movs	r3, #1
   12ec0:	4023      	ands	r3, r4
   12ec2:	9313      	str	r3, [sp, #76]	; 0x4c
   12ec4:	d000      	beq.n	12ec8 <_vfprintf_r+0x1604>
   12ec6:	e689      	b.n	12bdc <_vfprintf_r+0x1318>
   12ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12eca:	43d3      	mvns	r3, r2
   12ecc:	17db      	asrs	r3, r3, #31
   12ece:	401a      	ands	r2, r3
   12ed0:	9208      	str	r2, [sp, #32]
   12ed2:	e565      	b.n	129a0 <_vfprintf_r+0x10dc>
   12ed4:	2301      	movs	r3, #1
   12ed6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12ed8:	391b      	subs	r1, #27
   12eda:	1a9d      	subs	r5, r3, r2
   12edc:	aa16      	add	r2, sp, #88	; 0x58
   12ede:	332c      	adds	r3, #44	; 0x2c
   12ee0:	1852      	adds	r2, r2, r1
   12ee2:	7013      	strb	r3, [r2, #0]
   12ee4:	e62f      	b.n	12b46 <_vfprintf_r+0x1282>
   12ee6:	4b2c      	ldr	r3, [pc, #176]	; (12f98 <_vfprintf_r+0x16d4>)
   12ee8:	9311      	str	r3, [sp, #68]	; 0x44
   12eea:	f7ff f843 	bl	11f74 <_vfprintf_r+0x6b0>
   12eee:	232d      	movs	r3, #45	; 0x2d
   12ef0:	aa16      	add	r2, sp, #88	; 0x58
   12ef2:	77d3      	strb	r3, [r2, #31]
   12ef4:	4698      	mov	r8, r3
   12ef6:	e7aa      	b.n	12e4e <_vfprintf_r+0x158a>
   12ef8:	4653      	mov	r3, sl
   12efa:	2b00      	cmp	r3, #0
   12efc:	d101      	bne.n	12f02 <_vfprintf_r+0x163e>
   12efe:	07e3      	lsls	r3, r4, #31
   12f00:	d503      	bpl.n	12f0a <_vfprintf_r+0x1646>
   12f02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12f04:	1c58      	adds	r0, r3, #1
   12f06:	0003      	movs	r3, r0
   12f08:	e7ac      	b.n	12e64 <_vfprintf_r+0x15a0>
   12f0a:	2301      	movs	r3, #1
   12f0c:	e708      	b.n	12d20 <_vfprintf_r+0x145c>
   12f0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12f10:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12f12:	1a9b      	subs	r3, r3, r2
   12f14:	9314      	str	r3, [sp, #80]	; 0x50
   12f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f18:	2b47      	cmp	r3, #71	; 0x47
   12f1a:	d100      	bne.n	12f1e <_vfprintf_r+0x165a>
   12f1c:	e5f6      	b.n	12b0c <_vfprintf_r+0x1248>
   12f1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12f20:	9313      	str	r3, [sp, #76]	; 0x4c
   12f22:	e5fd      	b.n	12b20 <_vfprintf_r+0x125c>
   12f24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12f26:	1d1d      	adds	r5, r3, #4
   12f28:	681b      	ldr	r3, [r3, #0]
   12f2a:	46a8      	mov	r8, r5
   12f2c:	469a      	mov	sl, r3
   12f2e:	2b00      	cmp	r3, #0
   12f30:	db0a      	blt.n	12f48 <_vfprintf_r+0x1684>
   12f32:	4645      	mov	r5, r8
   12f34:	9b07      	ldr	r3, [sp, #28]
   12f36:	950f      	str	r5, [sp, #60]	; 0x3c
   12f38:	785b      	ldrb	r3, [r3, #1]
   12f3a:	9207      	str	r2, [sp, #28]
   12f3c:	f7fe fd4b 	bl	119d6 <_vfprintf_r+0x112>
   12f40:	ab16      	add	r3, sp, #88	; 0x58
   12f42:	77d8      	strb	r0, [r3, #31]
   12f44:	f7ff f830 	bl	11fa8 <_vfprintf_r+0x6e4>
   12f48:	2301      	movs	r3, #1
   12f4a:	425b      	negs	r3, r3
   12f4c:	469a      	mov	sl, r3
   12f4e:	e7f0      	b.n	12f32 <_vfprintf_r+0x166e>
   12f50:	ab16      	add	r3, sp, #88	; 0x58
   12f52:	77d8      	strb	r0, [r3, #31]
   12f54:	f7fe ff27 	bl	11da6 <_vfprintf_r+0x4e2>
   12f58:	ab16      	add	r3, sp, #88	; 0x58
   12f5a:	77d8      	strb	r0, [r3, #31]
   12f5c:	f7fe fdce 	bl	11afc <_vfprintf_r+0x238>
   12f60:	480c      	ldr	r0, [pc, #48]	; (12f94 <_vfprintf_r+0x16d0>)
   12f62:	4681      	mov	r9, r0
   12f64:	e787      	b.n	12e76 <_vfprintf_r+0x15b2>
   12f66:	ab16      	add	r3, sp, #88	; 0x58
   12f68:	77d8      	strb	r0, [r3, #31]
   12f6a:	f7ff f829 	bl	11fc0 <_vfprintf_r+0x6fc>
   12f6e:	ab16      	add	r3, sp, #88	; 0x58
   12f70:	77d8      	strb	r0, [r3, #31]
   12f72:	f7fe ffc3 	bl	11efc <_vfprintf_r+0x638>
   12f76:	ab16      	add	r3, sp, #88	; 0x58
   12f78:	77d8      	strb	r0, [r3, #31]
   12f7a:	f7fe ffa5 	bl	11ec8 <_vfprintf_r+0x604>
   12f7e:	ab16      	add	r3, sp, #88	; 0x58
   12f80:	77d8      	strb	r0, [r3, #31]
   12f82:	f7fe feaf 	bl	11ce4 <_vfprintf_r+0x420>
   12f86:	aa16      	add	r2, sp, #88	; 0x58
   12f88:	232e      	movs	r3, #46	; 0x2e
   12f8a:	4694      	mov	ip, r2
   12f8c:	4463      	add	r3, ip
   12f8e:	e61a      	b.n	12bc6 <_vfprintf_r+0x1302>
   12f90:	00017914 	.word	0x00017914
   12f94:	00017960 	.word	0x00017960
   12f98:	00017918 	.word	0x00017918

00012f9c <__sbprintf>:
   12f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f9e:	0015      	movs	r5, r2
   12fa0:	2202      	movs	r2, #2
   12fa2:	4c1e      	ldr	r4, [pc, #120]	; (1301c <__sbprintf+0x80>)
   12fa4:	001f      	movs	r7, r3
   12fa6:	898b      	ldrh	r3, [r1, #12]
   12fa8:	44a5      	add	sp, r4
   12faa:	4393      	bics	r3, r2
   12fac:	466a      	mov	r2, sp
   12fae:	8193      	strh	r3, [r2, #12]
   12fb0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12fb2:	0006      	movs	r6, r0
   12fb4:	9319      	str	r3, [sp, #100]	; 0x64
   12fb6:	89cb      	ldrh	r3, [r1, #14]
   12fb8:	a816      	add	r0, sp, #88	; 0x58
   12fba:	81d3      	strh	r3, [r2, #14]
   12fbc:	69cb      	ldr	r3, [r1, #28]
   12fbe:	000c      	movs	r4, r1
   12fc0:	9307      	str	r3, [sp, #28]
   12fc2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   12fc4:	9309      	str	r3, [sp, #36]	; 0x24
   12fc6:	ab1a      	add	r3, sp, #104	; 0x68
   12fc8:	9300      	str	r3, [sp, #0]
   12fca:	9304      	str	r3, [sp, #16]
   12fcc:	2380      	movs	r3, #128	; 0x80
   12fce:	00db      	lsls	r3, r3, #3
   12fd0:	9302      	str	r3, [sp, #8]
   12fd2:	9305      	str	r3, [sp, #20]
   12fd4:	2300      	movs	r3, #0
   12fd6:	9306      	str	r3, [sp, #24]
   12fd8:	f001 fd60 	bl	14a9c <__retarget_lock_init_recursive>
   12fdc:	002a      	movs	r2, r5
   12fde:	003b      	movs	r3, r7
   12fe0:	4669      	mov	r1, sp
   12fe2:	0030      	movs	r0, r6
   12fe4:	f7fe fc6e 	bl	118c4 <_vfprintf_r>
   12fe8:	1e05      	subs	r5, r0, #0
   12fea:	db05      	blt.n	12ff8 <__sbprintf+0x5c>
   12fec:	4669      	mov	r1, sp
   12fee:	0030      	movs	r0, r6
   12ff0:	f001 f9ac 	bl	1434c <_fflush_r>
   12ff4:	2800      	cmp	r0, #0
   12ff6:	d10e      	bne.n	13016 <__sbprintf+0x7a>
   12ff8:	466b      	mov	r3, sp
   12ffa:	899b      	ldrh	r3, [r3, #12]
   12ffc:	065b      	lsls	r3, r3, #25
   12ffe:	d503      	bpl.n	13008 <__sbprintf+0x6c>
   13000:	2240      	movs	r2, #64	; 0x40
   13002:	89a3      	ldrh	r3, [r4, #12]
   13004:	4313      	orrs	r3, r2
   13006:	81a3      	strh	r3, [r4, #12]
   13008:	9816      	ldr	r0, [sp, #88]	; 0x58
   1300a:	f001 fd49 	bl	14aa0 <__retarget_lock_close_recursive>
   1300e:	0028      	movs	r0, r5
   13010:	4b03      	ldr	r3, [pc, #12]	; (13020 <__sbprintf+0x84>)
   13012:	449d      	add	sp, r3
   13014:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13016:	2501      	movs	r5, #1
   13018:	426d      	negs	r5, r5
   1301a:	e7ed      	b.n	12ff8 <__sbprintf+0x5c>
   1301c:	fffffb94 	.word	0xfffffb94
   13020:	0000046c 	.word	0x0000046c

00013024 <__swsetup_r>:
   13024:	4b33      	ldr	r3, [pc, #204]	; (130f4 <__swsetup_r+0xd0>)
   13026:	b570      	push	{r4, r5, r6, lr}
   13028:	0005      	movs	r5, r0
   1302a:	6818      	ldr	r0, [r3, #0]
   1302c:	000c      	movs	r4, r1
   1302e:	2800      	cmp	r0, #0
   13030:	d002      	beq.n	13038 <__swsetup_r+0x14>
   13032:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13034:	2b00      	cmp	r3, #0
   13036:	d03c      	beq.n	130b2 <__swsetup_r+0x8e>
   13038:	230c      	movs	r3, #12
   1303a:	5ee2      	ldrsh	r2, [r4, r3]
   1303c:	b293      	uxth	r3, r2
   1303e:	0719      	lsls	r1, r3, #28
   13040:	d50d      	bpl.n	1305e <__swsetup_r+0x3a>
   13042:	6921      	ldr	r1, [r4, #16]
   13044:	2900      	cmp	r1, #0
   13046:	d015      	beq.n	13074 <__swsetup_r+0x50>
   13048:	07da      	lsls	r2, r3, #31
   1304a:	d521      	bpl.n	13090 <__swsetup_r+0x6c>
   1304c:	2300      	movs	r3, #0
   1304e:	60a3      	str	r3, [r4, #8]
   13050:	6963      	ldr	r3, [r4, #20]
   13052:	2000      	movs	r0, #0
   13054:	425b      	negs	r3, r3
   13056:	61a3      	str	r3, [r4, #24]
   13058:	2900      	cmp	r1, #0
   1305a:	d021      	beq.n	130a0 <__swsetup_r+0x7c>
   1305c:	bd70      	pop	{r4, r5, r6, pc}
   1305e:	06d9      	lsls	r1, r3, #27
   13060:	d53f      	bpl.n	130e2 <__swsetup_r+0xbe>
   13062:	075b      	lsls	r3, r3, #29
   13064:	d428      	bmi.n	130b8 <__swsetup_r+0x94>
   13066:	6921      	ldr	r1, [r4, #16]
   13068:	2308      	movs	r3, #8
   1306a:	4313      	orrs	r3, r2
   1306c:	81a3      	strh	r3, [r4, #12]
   1306e:	b29b      	uxth	r3, r3
   13070:	2900      	cmp	r1, #0
   13072:	d1e9      	bne.n	13048 <__swsetup_r+0x24>
   13074:	22a0      	movs	r2, #160	; 0xa0
   13076:	2080      	movs	r0, #128	; 0x80
   13078:	0092      	lsls	r2, r2, #2
   1307a:	0080      	lsls	r0, r0, #2
   1307c:	401a      	ands	r2, r3
   1307e:	4282      	cmp	r2, r0
   13080:	d0e2      	beq.n	13048 <__swsetup_r+0x24>
   13082:	0021      	movs	r1, r4
   13084:	0028      	movs	r0, r5
   13086:	f001 fd41 	bl	14b0c <__smakebuf_r>
   1308a:	89a3      	ldrh	r3, [r4, #12]
   1308c:	6921      	ldr	r1, [r4, #16]
   1308e:	e7db      	b.n	13048 <__swsetup_r+0x24>
   13090:	2200      	movs	r2, #0
   13092:	079b      	lsls	r3, r3, #30
   13094:	d400      	bmi.n	13098 <__swsetup_r+0x74>
   13096:	6962      	ldr	r2, [r4, #20]
   13098:	60a2      	str	r2, [r4, #8]
   1309a:	2000      	movs	r0, #0
   1309c:	2900      	cmp	r1, #0
   1309e:	d1dd      	bne.n	1305c <__swsetup_r+0x38>
   130a0:	220c      	movs	r2, #12
   130a2:	5ea3      	ldrsh	r3, [r4, r2]
   130a4:	061a      	lsls	r2, r3, #24
   130a6:	d5d9      	bpl.n	1305c <__swsetup_r+0x38>
   130a8:	2240      	movs	r2, #64	; 0x40
   130aa:	4313      	orrs	r3, r2
   130ac:	81a3      	strh	r3, [r4, #12]
   130ae:	3801      	subs	r0, #1
   130b0:	e7d4      	b.n	1305c <__swsetup_r+0x38>
   130b2:	f001 f9a5 	bl	14400 <__sinit>
   130b6:	e7bf      	b.n	13038 <__swsetup_r+0x14>
   130b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   130ba:	2900      	cmp	r1, #0
   130bc:	d00a      	beq.n	130d4 <__swsetup_r+0xb0>
   130be:	0023      	movs	r3, r4
   130c0:	3340      	adds	r3, #64	; 0x40
   130c2:	4299      	cmp	r1, r3
   130c4:	d004      	beq.n	130d0 <__swsetup_r+0xac>
   130c6:	0028      	movs	r0, r5
   130c8:	f001 fa44 	bl	14554 <_free_r>
   130cc:	230c      	movs	r3, #12
   130ce:	5ee2      	ldrsh	r2, [r4, r3]
   130d0:	2300      	movs	r3, #0
   130d2:	6323      	str	r3, [r4, #48]	; 0x30
   130d4:	2324      	movs	r3, #36	; 0x24
   130d6:	439a      	bics	r2, r3
   130d8:	2300      	movs	r3, #0
   130da:	6921      	ldr	r1, [r4, #16]
   130dc:	6063      	str	r3, [r4, #4]
   130de:	6021      	str	r1, [r4, #0]
   130e0:	e7c2      	b.n	13068 <__swsetup_r+0x44>
   130e2:	2309      	movs	r3, #9
   130e4:	602b      	str	r3, [r5, #0]
   130e6:	2340      	movs	r3, #64	; 0x40
   130e8:	2001      	movs	r0, #1
   130ea:	431a      	orrs	r2, r3
   130ec:	81a2      	strh	r2, [r4, #12]
   130ee:	4240      	negs	r0, r0
   130f0:	e7b4      	b.n	1305c <__swsetup_r+0x38>
   130f2:	46c0      	nop			; (mov r8, r8)
   130f4:	2000007c 	.word	0x2000007c

000130f8 <register_fini>:
   130f8:	4b03      	ldr	r3, [pc, #12]	; (13108 <register_fini+0x10>)
   130fa:	b510      	push	{r4, lr}
   130fc:	2b00      	cmp	r3, #0
   130fe:	d002      	beq.n	13106 <register_fini+0xe>
   13100:	4802      	ldr	r0, [pc, #8]	; (1310c <register_fini+0x14>)
   13102:	f000 f805 	bl	13110 <atexit>
   13106:	bd10      	pop	{r4, pc}
   13108:	00000000 	.word	0x00000000
   1310c:	00014481 	.word	0x00014481

00013110 <atexit>:
   13110:	b510      	push	{r4, lr}
   13112:	0001      	movs	r1, r0
   13114:	2300      	movs	r3, #0
   13116:	2200      	movs	r2, #0
   13118:	2000      	movs	r0, #0
   1311a:	f002 fe87 	bl	15e2c <__register_exitproc>
   1311e:	bd10      	pop	{r4, pc}

00013120 <quorem>:
   13120:	b5f0      	push	{r4, r5, r6, r7, lr}
   13122:	4645      	mov	r5, r8
   13124:	4680      	mov	r8, r0
   13126:	46de      	mov	lr, fp
   13128:	4657      	mov	r7, sl
   1312a:	464e      	mov	r6, r9
   1312c:	4642      	mov	r2, r8
   1312e:	b5e0      	push	{r5, r6, r7, lr}
   13130:	690c      	ldr	r4, [r1, #16]
   13132:	6912      	ldr	r2, [r2, #16]
   13134:	b085      	sub	sp, #20
   13136:	000b      	movs	r3, r1
   13138:	9102      	str	r1, [sp, #8]
   1313a:	2000      	movs	r0, #0
   1313c:	4294      	cmp	r4, r2
   1313e:	dd00      	ble.n	13142 <quorem+0x22>
   13140:	e090      	b.n	13264 <quorem+0x144>
   13142:	2214      	movs	r2, #20
   13144:	4694      	mov	ip, r2
   13146:	4463      	add	r3, ip
   13148:	4699      	mov	r9, r3
   1314a:	464a      	mov	r2, r9
   1314c:	3c01      	subs	r4, #1
   1314e:	00a3      	lsls	r3, r4, #2
   13150:	18d6      	adds	r6, r2, r3
   13152:	2214      	movs	r2, #20
   13154:	4442      	add	r2, r8
   13156:	4693      	mov	fp, r2
   13158:	449b      	add	fp, r3
   1315a:	6833      	ldr	r3, [r6, #0]
   1315c:	0015      	movs	r5, r2
   1315e:	1c59      	adds	r1, r3, #1
   13160:	465b      	mov	r3, fp
   13162:	6818      	ldr	r0, [r3, #0]
   13164:	9201      	str	r2, [sp, #4]
   13166:	f7fb f91b 	bl	e3a0 <__udivsi3>
   1316a:	1e03      	subs	r3, r0, #0
   1316c:	9000      	str	r0, [sp, #0]
   1316e:	d042      	beq.n	131f6 <quorem+0xd6>
   13170:	0029      	movs	r1, r5
   13172:	2700      	movs	r7, #0
   13174:	464d      	mov	r5, r9
   13176:	2000      	movs	r0, #0
   13178:	46b1      	mov	r9, r6
   1317a:	46a2      	mov	sl, r4
   1317c:	003e      	movs	r6, r7
   1317e:	0004      	movs	r4, r0
   13180:	469c      	mov	ip, r3
   13182:	002f      	movs	r7, r5
   13184:	0008      	movs	r0, r1
   13186:	9503      	str	r5, [sp, #12]
   13188:	4663      	mov	r3, ip
   1318a:	cf04      	ldmia	r7!, {r2}
   1318c:	0415      	lsls	r5, r2, #16
   1318e:	0c2d      	lsrs	r5, r5, #16
   13190:	435d      	muls	r5, r3
   13192:	0c12      	lsrs	r2, r2, #16
   13194:	435a      	muls	r2, r3
   13196:	19ad      	adds	r5, r5, r6
   13198:	0c2b      	lsrs	r3, r5, #16
   1319a:	18d2      	adds	r2, r2, r3
   1319c:	6803      	ldr	r3, [r0, #0]
   1319e:	042d      	lsls	r5, r5, #16
   131a0:	0419      	lsls	r1, r3, #16
   131a2:	0c09      	lsrs	r1, r1, #16
   131a4:	1909      	adds	r1, r1, r4
   131a6:	0c16      	lsrs	r6, r2, #16
   131a8:	0c2d      	lsrs	r5, r5, #16
   131aa:	0412      	lsls	r2, r2, #16
   131ac:	1b49      	subs	r1, r1, r5
   131ae:	0c12      	lsrs	r2, r2, #16
   131b0:	0c1b      	lsrs	r3, r3, #16
   131b2:	1a9b      	subs	r3, r3, r2
   131b4:	140a      	asrs	r2, r1, #16
   131b6:	189b      	adds	r3, r3, r2
   131b8:	0409      	lsls	r1, r1, #16
   131ba:	141c      	asrs	r4, r3, #16
   131bc:	0c09      	lsrs	r1, r1, #16
   131be:	041b      	lsls	r3, r3, #16
   131c0:	4319      	orrs	r1, r3
   131c2:	c002      	stmia	r0!, {r1}
   131c4:	45b9      	cmp	r9, r7
   131c6:	d2df      	bcs.n	13188 <quorem+0x68>
   131c8:	9b03      	ldr	r3, [sp, #12]
   131ca:	464e      	mov	r6, r9
   131cc:	4699      	mov	r9, r3
   131ce:	465b      	mov	r3, fp
   131d0:	681b      	ldr	r3, [r3, #0]
   131d2:	4654      	mov	r4, sl
   131d4:	2b00      	cmp	r3, #0
   131d6:	d10e      	bne.n	131f6 <quorem+0xd6>
   131d8:	465b      	mov	r3, fp
   131da:	9a01      	ldr	r2, [sp, #4]
   131dc:	3b04      	subs	r3, #4
   131de:	429a      	cmp	r2, r3
   131e0:	d304      	bcc.n	131ec <quorem+0xcc>
   131e2:	e006      	b.n	131f2 <quorem+0xd2>
   131e4:	3b04      	subs	r3, #4
   131e6:	3c01      	subs	r4, #1
   131e8:	429a      	cmp	r2, r3
   131ea:	d202      	bcs.n	131f2 <quorem+0xd2>
   131ec:	6819      	ldr	r1, [r3, #0]
   131ee:	2900      	cmp	r1, #0
   131f0:	d0f8      	beq.n	131e4 <quorem+0xc4>
   131f2:	4643      	mov	r3, r8
   131f4:	611c      	str	r4, [r3, #16]
   131f6:	9902      	ldr	r1, [sp, #8]
   131f8:	4640      	mov	r0, r8
   131fa:	f002 fa77 	bl	156ec <__mcmp>
   131fe:	2800      	cmp	r0, #0
   13200:	db2f      	blt.n	13262 <quorem+0x142>
   13202:	464f      	mov	r7, r9
   13204:	2000      	movs	r0, #0
   13206:	9b00      	ldr	r3, [sp, #0]
   13208:	9d01      	ldr	r5, [sp, #4]
   1320a:	3301      	adds	r3, #1
   1320c:	9300      	str	r3, [sp, #0]
   1320e:	682b      	ldr	r3, [r5, #0]
   13210:	cf02      	ldmia	r7!, {r1}
   13212:	041a      	lsls	r2, r3, #16
   13214:	0c12      	lsrs	r2, r2, #16
   13216:	1810      	adds	r0, r2, r0
   13218:	040a      	lsls	r2, r1, #16
   1321a:	0c12      	lsrs	r2, r2, #16
   1321c:	1a82      	subs	r2, r0, r2
   1321e:	0c09      	lsrs	r1, r1, #16
   13220:	0c1b      	lsrs	r3, r3, #16
   13222:	1a5b      	subs	r3, r3, r1
   13224:	1411      	asrs	r1, r2, #16
   13226:	185b      	adds	r3, r3, r1
   13228:	0412      	lsls	r2, r2, #16
   1322a:	1418      	asrs	r0, r3, #16
   1322c:	0c12      	lsrs	r2, r2, #16
   1322e:	041b      	lsls	r3, r3, #16
   13230:	4313      	orrs	r3, r2
   13232:	c508      	stmia	r5!, {r3}
   13234:	42be      	cmp	r6, r7
   13236:	d2ea      	bcs.n	1320e <quorem+0xee>
   13238:	9901      	ldr	r1, [sp, #4]
   1323a:	00a3      	lsls	r3, r4, #2
   1323c:	468c      	mov	ip, r1
   1323e:	4463      	add	r3, ip
   13240:	681a      	ldr	r2, [r3, #0]
   13242:	2a00      	cmp	r2, #0
   13244:	d10d      	bne.n	13262 <quorem+0x142>
   13246:	3b04      	subs	r3, #4
   13248:	000a      	movs	r2, r1
   1324a:	4299      	cmp	r1, r3
   1324c:	d304      	bcc.n	13258 <quorem+0x138>
   1324e:	e006      	b.n	1325e <quorem+0x13e>
   13250:	3b04      	subs	r3, #4
   13252:	3c01      	subs	r4, #1
   13254:	429a      	cmp	r2, r3
   13256:	d202      	bcs.n	1325e <quorem+0x13e>
   13258:	6819      	ldr	r1, [r3, #0]
   1325a:	2900      	cmp	r1, #0
   1325c:	d0f8      	beq.n	13250 <quorem+0x130>
   1325e:	4643      	mov	r3, r8
   13260:	611c      	str	r4, [r3, #16]
   13262:	9800      	ldr	r0, [sp, #0]
   13264:	b005      	add	sp, #20
   13266:	bc3c      	pop	{r2, r3, r4, r5}
   13268:	4690      	mov	r8, r2
   1326a:	4699      	mov	r9, r3
   1326c:	46a2      	mov	sl, r4
   1326e:	46ab      	mov	fp, r5
   13270:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13272:	46c0      	nop			; (mov r8, r8)

00013274 <_dtoa_r>:
   13274:	b5f0      	push	{r4, r5, r6, r7, lr}
   13276:	4657      	mov	r7, sl
   13278:	464e      	mov	r6, r9
   1327a:	4645      	mov	r5, r8
   1327c:	46de      	mov	lr, fp
   1327e:	b5e0      	push	{r5, r6, r7, lr}
   13280:	6c01      	ldr	r1, [r0, #64]	; 0x40
   13282:	b099      	sub	sp, #100	; 0x64
   13284:	4682      	mov	sl, r0
   13286:	001d      	movs	r5, r3
   13288:	0016      	movs	r6, r2
   1328a:	001f      	movs	r7, r3
   1328c:	2900      	cmp	r1, #0
   1328e:	d009      	beq.n	132a4 <_dtoa_r+0x30>
   13290:	2301      	movs	r3, #1
   13292:	6c42      	ldr	r2, [r0, #68]	; 0x44
   13294:	4093      	lsls	r3, r2
   13296:	604a      	str	r2, [r1, #4]
   13298:	608b      	str	r3, [r1, #8]
   1329a:	f002 f81b 	bl	152d4 <_Bfree>
   1329e:	2300      	movs	r3, #0
   132a0:	4652      	mov	r2, sl
   132a2:	6413      	str	r3, [r2, #64]	; 0x40
   132a4:	46b8      	mov	r8, r7
   132a6:	2f00      	cmp	r7, #0
   132a8:	db37      	blt.n	1331a <_dtoa_r+0xa6>
   132aa:	2300      	movs	r3, #0
   132ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
   132ae:	6013      	str	r3, [r2, #0]
   132b0:	4642      	mov	r2, r8
   132b2:	4bd6      	ldr	r3, [pc, #856]	; (1360c <_dtoa_r+0x398>)
   132b4:	401a      	ands	r2, r3
   132b6:	429a      	cmp	r2, r3
   132b8:	d018      	beq.n	132ec <_dtoa_r+0x78>
   132ba:	2200      	movs	r2, #0
   132bc:	2300      	movs	r3, #0
   132be:	0030      	movs	r0, r6
   132c0:	0039      	movs	r1, r7
   132c2:	f7fb f9f3 	bl	e6ac <__aeabi_dcmpeq>
   132c6:	2800      	cmp	r0, #0
   132c8:	d02f      	beq.n	1332a <_dtoa_r+0xb6>
   132ca:	2301      	movs	r3, #1
   132cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   132ce:	6013      	str	r3, [r2, #0]
   132d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   132d2:	2b00      	cmp	r3, #0
   132d4:	d100      	bne.n	132d8 <_dtoa_r+0x64>
   132d6:	e22a      	b.n	1372e <_dtoa_r+0x4ba>
   132d8:	48cd      	ldr	r0, [pc, #820]	; (13610 <_dtoa_r+0x39c>)
   132da:	6018      	str	r0, [r3, #0]
   132dc:	3801      	subs	r0, #1
   132de:	b019      	add	sp, #100	; 0x64
   132e0:	bc3c      	pop	{r2, r3, r4, r5}
   132e2:	4690      	mov	r8, r2
   132e4:	4699      	mov	r9, r3
   132e6:	46a2      	mov	sl, r4
   132e8:	46ab      	mov	fp, r5
   132ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   132ec:	4bc9      	ldr	r3, [pc, #804]	; (13614 <_dtoa_r+0x3a0>)
   132ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
   132f0:	6013      	str	r3, [r2, #0]
   132f2:	2e00      	cmp	r6, #0
   132f4:	d10b      	bne.n	1330e <_dtoa_r+0x9a>
   132f6:	4643      	mov	r3, r8
   132f8:	0318      	lsls	r0, r3, #12
   132fa:	d108      	bne.n	1330e <_dtoa_r+0x9a>
   132fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   132fe:	48c6      	ldr	r0, [pc, #792]	; (13618 <_dtoa_r+0x3a4>)
   13300:	2b00      	cmp	r3, #0
   13302:	d0ec      	beq.n	132de <_dtoa_r+0x6a>
   13304:	0003      	movs	r3, r0
   13306:	3308      	adds	r3, #8
   13308:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1330a:	6013      	str	r3, [r2, #0]
   1330c:	e7e7      	b.n	132de <_dtoa_r+0x6a>
   1330e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13310:	48c2      	ldr	r0, [pc, #776]	; (1361c <_dtoa_r+0x3a8>)
   13312:	2b00      	cmp	r3, #0
   13314:	d0e3      	beq.n	132de <_dtoa_r+0x6a>
   13316:	1cc3      	adds	r3, r0, #3
   13318:	e7f6      	b.n	13308 <_dtoa_r+0x94>
   1331a:	2301      	movs	r3, #1
   1331c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1331e:	0068      	lsls	r0, r5, #1
   13320:	6013      	str	r3, [r2, #0]
   13322:	0843      	lsrs	r3, r0, #1
   13324:	4698      	mov	r8, r3
   13326:	001f      	movs	r7, r3
   13328:	e7c2      	b.n	132b0 <_dtoa_r+0x3c>
   1332a:	ab16      	add	r3, sp, #88	; 0x58
   1332c:	9301      	str	r3, [sp, #4]
   1332e:	ab17      	add	r3, sp, #92	; 0x5c
   13330:	9300      	str	r3, [sp, #0]
   13332:	0032      	movs	r2, r6
   13334:	003b      	movs	r3, r7
   13336:	4650      	mov	r0, sl
   13338:	f002 fa8e 	bl	15858 <__d2b>
   1333c:	4643      	mov	r3, r8
   1333e:	4683      	mov	fp, r0
   13340:	0d1a      	lsrs	r2, r3, #20
   13342:	d100      	bne.n	13346 <_dtoa_r+0xd2>
   13344:	e1d6      	b.n	136f4 <_dtoa_r+0x480>
   13346:	033b      	lsls	r3, r7, #12
   13348:	4cb5      	ldr	r4, [pc, #724]	; (13620 <_dtoa_r+0x3ac>)
   1334a:	0b1b      	lsrs	r3, r3, #12
   1334c:	431c      	orrs	r4, r3
   1334e:	4bb5      	ldr	r3, [pc, #724]	; (13624 <_dtoa_r+0x3b0>)
   13350:	0030      	movs	r0, r6
   13352:	4698      	mov	r8, r3
   13354:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13356:	0021      	movs	r1, r4
   13358:	4699      	mov	r9, r3
   1335a:	2300      	movs	r3, #0
   1335c:	4490      	add	r8, r2
   1335e:	930f      	str	r3, [sp, #60]	; 0x3c
   13360:	2200      	movs	r2, #0
   13362:	4bb1      	ldr	r3, [pc, #708]	; (13628 <_dtoa_r+0x3b4>)
   13364:	f7fd fc22 	bl	10bac <__aeabi_dsub>
   13368:	4ab0      	ldr	r2, [pc, #704]	; (1362c <_dtoa_r+0x3b8>)
   1336a:	4bb1      	ldr	r3, [pc, #708]	; (13630 <_dtoa_r+0x3bc>)
   1336c:	f7fd f99e 	bl	106ac <__aeabi_dmul>
   13370:	4ab0      	ldr	r2, [pc, #704]	; (13634 <_dtoa_r+0x3c0>)
   13372:	4bb1      	ldr	r3, [pc, #708]	; (13638 <_dtoa_r+0x3c4>)
   13374:	f7fc fa56 	bl	f824 <__aeabi_dadd>
   13378:	0004      	movs	r4, r0
   1337a:	4640      	mov	r0, r8
   1337c:	000d      	movs	r5, r1
   1337e:	f7fd ff5f 	bl	11240 <__aeabi_i2d>
   13382:	4aae      	ldr	r2, [pc, #696]	; (1363c <_dtoa_r+0x3c8>)
   13384:	4bae      	ldr	r3, [pc, #696]	; (13640 <_dtoa_r+0x3cc>)
   13386:	f7fd f991 	bl	106ac <__aeabi_dmul>
   1338a:	0002      	movs	r2, r0
   1338c:	000b      	movs	r3, r1
   1338e:	0020      	movs	r0, r4
   13390:	0029      	movs	r1, r5
   13392:	f7fc fa47 	bl	f824 <__aeabi_dadd>
   13396:	0004      	movs	r4, r0
   13398:	000d      	movs	r5, r1
   1339a:	f7fd ff1d 	bl	111d8 <__aeabi_d2iz>
   1339e:	2200      	movs	r2, #0
   133a0:	9003      	str	r0, [sp, #12]
   133a2:	2300      	movs	r3, #0
   133a4:	0020      	movs	r0, r4
   133a6:	0029      	movs	r1, r5
   133a8:	f7fb f986 	bl	e6b8 <__aeabi_dcmplt>
   133ac:	2800      	cmp	r0, #0
   133ae:	d000      	beq.n	133b2 <_dtoa_r+0x13e>
   133b0:	e2b1      	b.n	13916 <_dtoa_r+0x6a2>
   133b2:	2301      	movs	r3, #1
   133b4:	9c03      	ldr	r4, [sp, #12]
   133b6:	930c      	str	r3, [sp, #48]	; 0x30
   133b8:	2c16      	cmp	r4, #22
   133ba:	d810      	bhi.n	133de <_dtoa_r+0x16a>
   133bc:	49a1      	ldr	r1, [pc, #644]	; (13644 <_dtoa_r+0x3d0>)
   133be:	00e3      	lsls	r3, r4, #3
   133c0:	18c9      	adds	r1, r1, r3
   133c2:	0032      	movs	r2, r6
   133c4:	6808      	ldr	r0, [r1, #0]
   133c6:	6849      	ldr	r1, [r1, #4]
   133c8:	003b      	movs	r3, r7
   133ca:	f7fb f989 	bl	e6e0 <__aeabi_dcmpgt>
   133ce:	2800      	cmp	r0, #0
   133d0:	d100      	bne.n	133d4 <_dtoa_r+0x160>
   133d2:	e31d      	b.n	13a10 <_dtoa_r+0x79c>
   133d4:	0023      	movs	r3, r4
   133d6:	3b01      	subs	r3, #1
   133d8:	9303      	str	r3, [sp, #12]
   133da:	2300      	movs	r3, #0
   133dc:	930c      	str	r3, [sp, #48]	; 0x30
   133de:	464b      	mov	r3, r9
   133e0:	4642      	mov	r2, r8
   133e2:	1a9a      	subs	r2, r3, r2
   133e4:	2300      	movs	r3, #0
   133e6:	9306      	str	r3, [sp, #24]
   133e8:	0013      	movs	r3, r2
   133ea:	3b01      	subs	r3, #1
   133ec:	9304      	str	r3, [sp, #16]
   133ee:	d500      	bpl.n	133f2 <_dtoa_r+0x17e>
   133f0:	e2a1      	b.n	13936 <_dtoa_r+0x6c2>
   133f2:	9b03      	ldr	r3, [sp, #12]
   133f4:	2b00      	cmp	r3, #0
   133f6:	da00      	bge.n	133fa <_dtoa_r+0x186>
   133f8:	e284      	b.n	13904 <_dtoa_r+0x690>
   133fa:	469c      	mov	ip, r3
   133fc:	930d      	str	r3, [sp, #52]	; 0x34
   133fe:	2300      	movs	r3, #0
   13400:	9a04      	ldr	r2, [sp, #16]
   13402:	4699      	mov	r9, r3
   13404:	0011      	movs	r1, r2
   13406:	4461      	add	r1, ip
   13408:	9104      	str	r1, [sp, #16]
   1340a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1340c:	2b09      	cmp	r3, #9
   1340e:	d900      	bls.n	13412 <_dtoa_r+0x19e>
   13410:	e18f      	b.n	13732 <_dtoa_r+0x4be>
   13412:	2401      	movs	r4, #1
   13414:	2b05      	cmp	r3, #5
   13416:	dd02      	ble.n	1341e <_dtoa_r+0x1aa>
   13418:	2400      	movs	r4, #0
   1341a:	3b04      	subs	r3, #4
   1341c:	9322      	str	r3, [sp, #136]	; 0x88
   1341e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13420:	2b03      	cmp	r3, #3
   13422:	d101      	bne.n	13428 <_dtoa_r+0x1b4>
   13424:	f000 fcce 	bl	13dc4 <_dtoa_r+0xb50>
   13428:	dc01      	bgt.n	1342e <_dtoa_r+0x1ba>
   1342a:	f000 fc92 	bl	13d52 <_dtoa_r+0xade>
   1342e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13430:	2b04      	cmp	r3, #4
   13432:	d101      	bne.n	13438 <_dtoa_r+0x1c4>
   13434:	f000 fc40 	bl	13cb8 <_dtoa_r+0xa44>
   13438:	2301      	movs	r3, #1
   1343a:	930b      	str	r3, [sp, #44]	; 0x2c
   1343c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1343e:	2b05      	cmp	r3, #5
   13440:	d001      	beq.n	13446 <_dtoa_r+0x1d2>
   13442:	f000 fc8b 	bl	13d5c <_dtoa_r+0xae8>
   13446:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   13448:	9b03      	ldr	r3, [sp, #12]
   1344a:	4694      	mov	ip, r2
   1344c:	4463      	add	r3, ip
   1344e:	930e      	str	r3, [sp, #56]	; 0x38
   13450:	3301      	adds	r3, #1
   13452:	9307      	str	r3, [sp, #28]
   13454:	1e1d      	subs	r5, r3, #0
   13456:	dc01      	bgt.n	1345c <_dtoa_r+0x1e8>
   13458:	f000 fd49 	bl	13eee <_dtoa_r+0xc7a>
   1345c:	9b07      	ldr	r3, [sp, #28]
   1345e:	4698      	mov	r8, r3
   13460:	2300      	movs	r3, #0
   13462:	4652      	mov	r2, sl
   13464:	2100      	movs	r1, #0
   13466:	6453      	str	r3, [r2, #68]	; 0x44
   13468:	2d17      	cmp	r5, #23
   1346a:	d90a      	bls.n	13482 <_dtoa_r+0x20e>
   1346c:	2201      	movs	r2, #1
   1346e:	3304      	adds	r3, #4
   13470:	005b      	lsls	r3, r3, #1
   13472:	0018      	movs	r0, r3
   13474:	3014      	adds	r0, #20
   13476:	0011      	movs	r1, r2
   13478:	3201      	adds	r2, #1
   1347a:	4285      	cmp	r5, r0
   1347c:	d2f8      	bcs.n	13470 <_dtoa_r+0x1fc>
   1347e:	4653      	mov	r3, sl
   13480:	6459      	str	r1, [r3, #68]	; 0x44
   13482:	4650      	mov	r0, sl
   13484:	f001 fefe 	bl	15284 <_Balloc>
   13488:	4653      	mov	r3, sl
   1348a:	6418      	str	r0, [r3, #64]	; 0x40
   1348c:	4643      	mov	r3, r8
   1348e:	900a      	str	r0, [sp, #40]	; 0x28
   13490:	2b0e      	cmp	r3, #14
   13492:	d900      	bls.n	13496 <_dtoa_r+0x222>
   13494:	e161      	b.n	1375a <_dtoa_r+0x4e6>
   13496:	2c00      	cmp	r4, #0
   13498:	d100      	bne.n	1349c <_dtoa_r+0x228>
   1349a:	e15e      	b.n	1375a <_dtoa_r+0x4e6>
   1349c:	9610      	str	r6, [sp, #64]	; 0x40
   1349e:	9711      	str	r7, [sp, #68]	; 0x44
   134a0:	9e03      	ldr	r6, [sp, #12]
   134a2:	2e00      	cmp	r6, #0
   134a4:	dc01      	bgt.n	134aa <_dtoa_r+0x236>
   134a6:	f000 fd25 	bl	13ef4 <_dtoa_r+0xc80>
   134aa:	0032      	movs	r2, r6
   134ac:	210f      	movs	r1, #15
   134ae:	4b65      	ldr	r3, [pc, #404]	; (13644 <_dtoa_r+0x3d0>)
   134b0:	400a      	ands	r2, r1
   134b2:	00d2      	lsls	r2, r2, #3
   134b4:	189b      	adds	r3, r3, r2
   134b6:	1136      	asrs	r6, r6, #4
   134b8:	681c      	ldr	r4, [r3, #0]
   134ba:	685d      	ldr	r5, [r3, #4]
   134bc:	06f3      	lsls	r3, r6, #27
   134be:	d401      	bmi.n	134c4 <_dtoa_r+0x250>
   134c0:	f000 fcca 	bl	13e58 <_dtoa_r+0xbe4>
   134c4:	4b60      	ldr	r3, [pc, #384]	; (13648 <_dtoa_r+0x3d4>)
   134c6:	400e      	ands	r6, r1
   134c8:	6a1a      	ldr	r2, [r3, #32]
   134ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   134cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   134ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   134d0:	f7fc fcb8 	bl	fe44 <__aeabi_ddiv>
   134d4:	2303      	movs	r3, #3
   134d6:	4698      	mov	r8, r3
   134d8:	9008      	str	r0, [sp, #32]
   134da:	9109      	str	r1, [sp, #36]	; 0x24
   134dc:	2e00      	cmp	r6, #0
   134de:	d011      	beq.n	13504 <_dtoa_r+0x290>
   134e0:	4f59      	ldr	r7, [pc, #356]	; (13648 <_dtoa_r+0x3d4>)
   134e2:	2301      	movs	r3, #1
   134e4:	4233      	tst	r3, r6
   134e6:	d009      	beq.n	134fc <_dtoa_r+0x288>
   134e8:	469c      	mov	ip, r3
   134ea:	683a      	ldr	r2, [r7, #0]
   134ec:	687b      	ldr	r3, [r7, #4]
   134ee:	0020      	movs	r0, r4
   134f0:	0029      	movs	r1, r5
   134f2:	44e0      	add	r8, ip
   134f4:	f7fd f8da 	bl	106ac <__aeabi_dmul>
   134f8:	0004      	movs	r4, r0
   134fa:	000d      	movs	r5, r1
   134fc:	1076      	asrs	r6, r6, #1
   134fe:	3708      	adds	r7, #8
   13500:	2e00      	cmp	r6, #0
   13502:	d1ee      	bne.n	134e2 <_dtoa_r+0x26e>
   13504:	0022      	movs	r2, r4
   13506:	9808      	ldr	r0, [sp, #32]
   13508:	9909      	ldr	r1, [sp, #36]	; 0x24
   1350a:	002b      	movs	r3, r5
   1350c:	f7fc fc9a 	bl	fe44 <__aeabi_ddiv>
   13510:	0006      	movs	r6, r0
   13512:	000f      	movs	r7, r1
   13514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13516:	2b00      	cmp	r3, #0
   13518:	d009      	beq.n	1352e <_dtoa_r+0x2ba>
   1351a:	2200      	movs	r2, #0
   1351c:	4b40      	ldr	r3, [pc, #256]	; (13620 <_dtoa_r+0x3ac>)
   1351e:	0030      	movs	r0, r6
   13520:	0039      	movs	r1, r7
   13522:	f7fb f8c9 	bl	e6b8 <__aeabi_dcmplt>
   13526:	2800      	cmp	r0, #0
   13528:	d001      	beq.n	1352e <_dtoa_r+0x2ba>
   1352a:	f000 fdc2 	bl	140b2 <_dtoa_r+0xe3e>
   1352e:	4640      	mov	r0, r8
   13530:	f7fd fe86 	bl	11240 <__aeabi_i2d>
   13534:	0032      	movs	r2, r6
   13536:	003b      	movs	r3, r7
   13538:	f7fd f8b8 	bl	106ac <__aeabi_dmul>
   1353c:	2200      	movs	r2, #0
   1353e:	4b43      	ldr	r3, [pc, #268]	; (1364c <_dtoa_r+0x3d8>)
   13540:	f7fc f970 	bl	f824 <__aeabi_dadd>
   13544:	4a42      	ldr	r2, [pc, #264]	; (13650 <_dtoa_r+0x3dc>)
   13546:	000b      	movs	r3, r1
   13548:	4694      	mov	ip, r2
   1354a:	4463      	add	r3, ip
   1354c:	9008      	str	r0, [sp, #32]
   1354e:	9109      	str	r1, [sp, #36]	; 0x24
   13550:	9309      	str	r3, [sp, #36]	; 0x24
   13552:	9b07      	ldr	r3, [sp, #28]
   13554:	2b00      	cmp	r3, #0
   13556:	d101      	bne.n	1355c <_dtoa_r+0x2e8>
   13558:	f000 fc50 	bl	13dfc <_dtoa_r+0xb88>
   1355c:	9b03      	ldr	r3, [sp, #12]
   1355e:	9313      	str	r3, [sp, #76]	; 0x4c
   13560:	9b07      	ldr	r3, [sp, #28]
   13562:	9312      	str	r3, [sp, #72]	; 0x48
   13564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13566:	2b00      	cmp	r3, #0
   13568:	d101      	bne.n	1356e <_dtoa_r+0x2fa>
   1356a:	f000 fd1d 	bl	13fa8 <_dtoa_r+0xd34>
   1356e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13570:	2000      	movs	r0, #0
   13572:	1e5a      	subs	r2, r3, #1
   13574:	4b33      	ldr	r3, [pc, #204]	; (13644 <_dtoa_r+0x3d0>)
   13576:	00d2      	lsls	r2, r2, #3
   13578:	189b      	adds	r3, r3, r2
   1357a:	681a      	ldr	r2, [r3, #0]
   1357c:	685b      	ldr	r3, [r3, #4]
   1357e:	4935      	ldr	r1, [pc, #212]	; (13654 <_dtoa_r+0x3e0>)
   13580:	f7fc fc60 	bl	fe44 <__aeabi_ddiv>
   13584:	9a08      	ldr	r2, [sp, #32]
   13586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13588:	f7fd fb10 	bl	10bac <__aeabi_dsub>
   1358c:	9008      	str	r0, [sp, #32]
   1358e:	9109      	str	r1, [sp, #36]	; 0x24
   13590:	0039      	movs	r1, r7
   13592:	0030      	movs	r0, r6
   13594:	f7fd fe20 	bl	111d8 <__aeabi_d2iz>
   13598:	0004      	movs	r4, r0
   1359a:	f7fd fe51 	bl	11240 <__aeabi_i2d>
   1359e:	0002      	movs	r2, r0
   135a0:	000b      	movs	r3, r1
   135a2:	0030      	movs	r0, r6
   135a4:	0039      	movs	r1, r7
   135a6:	f7fd fb01 	bl	10bac <__aeabi_dsub>
   135aa:	0005      	movs	r5, r0
   135ac:	000e      	movs	r6, r1
   135ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   135b0:	3430      	adds	r4, #48	; 0x30
   135b2:	1c51      	adds	r1, r2, #1
   135b4:	b2e7      	uxtb	r7, r4
   135b6:	9114      	str	r1, [sp, #80]	; 0x50
   135b8:	7017      	strb	r7, [r2, #0]
   135ba:	0033      	movs	r3, r6
   135bc:	9808      	ldr	r0, [sp, #32]
   135be:	9909      	ldr	r1, [sp, #36]	; 0x24
   135c0:	002a      	movs	r2, r5
   135c2:	f7fb f88d 	bl	e6e0 <__aeabi_dcmpgt>
   135c6:	2800      	cmp	r0, #0
   135c8:	d001      	beq.n	135ce <_dtoa_r+0x35a>
   135ca:	f000 fdfe 	bl	141ca <_dtoa_r+0xf56>
   135ce:	002a      	movs	r2, r5
   135d0:	0033      	movs	r3, r6
   135d2:	2000      	movs	r0, #0
   135d4:	4912      	ldr	r1, [pc, #72]	; (13620 <_dtoa_r+0x3ac>)
   135d6:	f7fd fae9 	bl	10bac <__aeabi_dsub>
   135da:	0002      	movs	r2, r0
   135dc:	000b      	movs	r3, r1
   135de:	9808      	ldr	r0, [sp, #32]
   135e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   135e2:	f7fb f87d 	bl	e6e0 <__aeabi_dcmpgt>
   135e6:	2800      	cmp	r0, #0
   135e8:	d001      	beq.n	135ee <_dtoa_r+0x37a>
   135ea:	f000 fde7 	bl	141bc <_dtoa_r+0xf48>
   135ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135f0:	2b01      	cmp	r3, #1
   135f2:	d101      	bne.n	135f8 <_dtoa_r+0x384>
   135f4:	f000 fc78 	bl	13ee8 <_dtoa_r+0xc74>
   135f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   135fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   135fc:	4694      	mov	ip, r2
   135fe:	4463      	add	r3, ip
   13600:	4698      	mov	r8, r3
   13602:	464b      	mov	r3, r9
   13604:	9312      	str	r3, [sp, #72]	; 0x48
   13606:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13608:	4699      	mov	r9, r3
   1360a:	e038      	b.n	1367e <_dtoa_r+0x40a>
   1360c:	7ff00000 	.word	0x7ff00000
   13610:	0001794d 	.word	0x0001794d
   13614:	0000270f 	.word	0x0000270f
   13618:	00017970 	.word	0x00017970
   1361c:	0001797c 	.word	0x0001797c
   13620:	3ff00000 	.word	0x3ff00000
   13624:	fffffc01 	.word	0xfffffc01
   13628:	3ff80000 	.word	0x3ff80000
   1362c:	636f4361 	.word	0x636f4361
   13630:	3fd287a7 	.word	0x3fd287a7
   13634:	8b60c8b3 	.word	0x8b60c8b3
   13638:	3fc68a28 	.word	0x3fc68a28
   1363c:	509f79fb 	.word	0x509f79fb
   13640:	3fd34413 	.word	0x3fd34413
   13644:	000179b8 	.word	0x000179b8
   13648:	00017990 	.word	0x00017990
   1364c:	401c0000 	.word	0x401c0000
   13650:	fcc00000 	.word	0xfcc00000
   13654:	3fe00000 	.word	0x3fe00000
   13658:	002a      	movs	r2, r5
   1365a:	0033      	movs	r3, r6
   1365c:	2000      	movs	r0, #0
   1365e:	49b9      	ldr	r1, [pc, #740]	; (13944 <_dtoa_r+0x6d0>)
   13660:	f7fd faa4 	bl	10bac <__aeabi_dsub>
   13664:	9a08      	ldr	r2, [sp, #32]
   13666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13668:	f7fb f826 	bl	e6b8 <__aeabi_dcmplt>
   1366c:	2800      	cmp	r0, #0
   1366e:	d001      	beq.n	13674 <_dtoa_r+0x400>
   13670:	f000 fd74 	bl	1415c <_dtoa_r+0xee8>
   13674:	46a1      	mov	r9, r4
   13676:	4544      	cmp	r4, r8
   13678:	d101      	bne.n	1367e <_dtoa_r+0x40a>
   1367a:	f000 fc33 	bl	13ee4 <_dtoa_r+0xc70>
   1367e:	9808      	ldr	r0, [sp, #32]
   13680:	9909      	ldr	r1, [sp, #36]	; 0x24
   13682:	2200      	movs	r2, #0
   13684:	4bb0      	ldr	r3, [pc, #704]	; (13948 <_dtoa_r+0x6d4>)
   13686:	f7fd f811 	bl	106ac <__aeabi_dmul>
   1368a:	2200      	movs	r2, #0
   1368c:	4bae      	ldr	r3, [pc, #696]	; (13948 <_dtoa_r+0x6d4>)
   1368e:	9008      	str	r0, [sp, #32]
   13690:	9109      	str	r1, [sp, #36]	; 0x24
   13692:	0028      	movs	r0, r5
   13694:	0031      	movs	r1, r6
   13696:	f7fd f809 	bl	106ac <__aeabi_dmul>
   1369a:	000d      	movs	r5, r1
   1369c:	0004      	movs	r4, r0
   1369e:	f7fd fd9b 	bl	111d8 <__aeabi_d2iz>
   136a2:	0007      	movs	r7, r0
   136a4:	f7fd fdcc 	bl	11240 <__aeabi_i2d>
   136a8:	0002      	movs	r2, r0
   136aa:	000b      	movs	r3, r1
   136ac:	0020      	movs	r0, r4
   136ae:	0029      	movs	r1, r5
   136b0:	f7fd fa7c 	bl	10bac <__aeabi_dsub>
   136b4:	464b      	mov	r3, r9
   136b6:	3730      	adds	r7, #48	; 0x30
   136b8:	b2ff      	uxtb	r7, r7
   136ba:	1c5c      	adds	r4, r3, #1
   136bc:	701f      	strb	r7, [r3, #0]
   136be:	9a08      	ldr	r2, [sp, #32]
   136c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   136c2:	0005      	movs	r5, r0
   136c4:	000e      	movs	r6, r1
   136c6:	f7fa fff7 	bl	e6b8 <__aeabi_dcmplt>
   136ca:	2800      	cmp	r0, #0
   136cc:	d0c4      	beq.n	13658 <_dtoa_r+0x3e4>
   136ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   136d0:	9303      	str	r3, [sp, #12]
   136d2:	4659      	mov	r1, fp
   136d4:	4650      	mov	r0, sl
   136d6:	f001 fdfd 	bl	152d4 <_Bfree>
   136da:	2300      	movs	r3, #0
   136dc:	7023      	strb	r3, [r4, #0]
   136de:	9b03      	ldr	r3, [sp, #12]
   136e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   136e2:	3301      	adds	r3, #1
   136e4:	6013      	str	r3, [r2, #0]
   136e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   136e8:	2b00      	cmp	r3, #0
   136ea:	d100      	bne.n	136ee <_dtoa_r+0x47a>
   136ec:	e3a8      	b.n	13e40 <_dtoa_r+0xbcc>
   136ee:	601c      	str	r4, [r3, #0]
   136f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   136f2:	e5f4      	b.n	132de <_dtoa_r+0x6a>
   136f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   136f6:	4699      	mov	r9, r3
   136f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   136fa:	444b      	add	r3, r9
   136fc:	001c      	movs	r4, r3
   136fe:	4b93      	ldr	r3, [pc, #588]	; (1394c <_dtoa_r+0x6d8>)
   13700:	18e3      	adds	r3, r4, r3
   13702:	2b20      	cmp	r3, #32
   13704:	dc00      	bgt.n	13708 <_dtoa_r+0x494>
   13706:	e17e      	b.n	13a06 <_dtoa_r+0x792>
   13708:	0031      	movs	r1, r6
   1370a:	4a91      	ldr	r2, [pc, #580]	; (13950 <_dtoa_r+0x6dc>)
   1370c:	4640      	mov	r0, r8
   1370e:	18a2      	adds	r2, r4, r2
   13710:	40d1      	lsrs	r1, r2
   13712:	000a      	movs	r2, r1
   13714:	2140      	movs	r1, #64	; 0x40
   13716:	1acb      	subs	r3, r1, r3
   13718:	4098      	lsls	r0, r3
   1371a:	4310      	orrs	r0, r2
   1371c:	f7fd fdd2 	bl	112c4 <__aeabi_ui2d>
   13720:	1e63      	subs	r3, r4, #1
   13722:	4698      	mov	r8, r3
   13724:	2301      	movs	r3, #1
   13726:	4d8b      	ldr	r5, [pc, #556]	; (13954 <_dtoa_r+0x6e0>)
   13728:	930f      	str	r3, [sp, #60]	; 0x3c
   1372a:	1949      	adds	r1, r1, r5
   1372c:	e618      	b.n	13360 <_dtoa_r+0xec>
   1372e:	488a      	ldr	r0, [pc, #552]	; (13958 <_dtoa_r+0x6e4>)
   13730:	e5d5      	b.n	132de <_dtoa_r+0x6a>
   13732:	2300      	movs	r3, #0
   13734:	4652      	mov	r2, sl
   13736:	2100      	movs	r1, #0
   13738:	6453      	str	r3, [r2, #68]	; 0x44
   1373a:	4650      	mov	r0, sl
   1373c:	f001 fda2 	bl	15284 <_Balloc>
   13740:	4653      	mov	r3, sl
   13742:	6418      	str	r0, [r3, #64]	; 0x40
   13744:	2301      	movs	r3, #1
   13746:	425b      	negs	r3, r3
   13748:	9307      	str	r3, [sp, #28]
   1374a:	930e      	str	r3, [sp, #56]	; 0x38
   1374c:	3302      	adds	r3, #2
   1374e:	2200      	movs	r2, #0
   13750:	930b      	str	r3, [sp, #44]	; 0x2c
   13752:	2300      	movs	r3, #0
   13754:	900a      	str	r0, [sp, #40]	; 0x28
   13756:	9223      	str	r2, [sp, #140]	; 0x8c
   13758:	9322      	str	r3, [sp, #136]	; 0x88
   1375a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1375c:	2b00      	cmp	r3, #0
   1375e:	da00      	bge.n	13762 <_dtoa_r+0x4ee>
   13760:	e0ab      	b.n	138ba <_dtoa_r+0x646>
   13762:	9a03      	ldr	r2, [sp, #12]
   13764:	2a0e      	cmp	r2, #14
   13766:	dd00      	ble.n	1376a <_dtoa_r+0x4f6>
   13768:	e0a7      	b.n	138ba <_dtoa_r+0x646>
   1376a:	4b7c      	ldr	r3, [pc, #496]	; (1395c <_dtoa_r+0x6e8>)
   1376c:	00d2      	lsls	r2, r2, #3
   1376e:	189b      	adds	r3, r3, r2
   13770:	685c      	ldr	r4, [r3, #4]
   13772:	681b      	ldr	r3, [r3, #0]
   13774:	9304      	str	r3, [sp, #16]
   13776:	9405      	str	r4, [sp, #20]
   13778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1377a:	2b00      	cmp	r3, #0
   1377c:	da00      	bge.n	13780 <_dtoa_r+0x50c>
   1377e:	e2a7      	b.n	13cd0 <_dtoa_r+0xa5c>
   13780:	9c04      	ldr	r4, [sp, #16]
   13782:	9d05      	ldr	r5, [sp, #20]
   13784:	0030      	movs	r0, r6
   13786:	0022      	movs	r2, r4
   13788:	002b      	movs	r3, r5
   1378a:	0039      	movs	r1, r7
   1378c:	f7fc fb5a 	bl	fe44 <__aeabi_ddiv>
   13790:	f7fd fd22 	bl	111d8 <__aeabi_d2iz>
   13794:	4680      	mov	r8, r0
   13796:	f7fd fd53 	bl	11240 <__aeabi_i2d>
   1379a:	0022      	movs	r2, r4
   1379c:	002b      	movs	r3, r5
   1379e:	f7fc ff85 	bl	106ac <__aeabi_dmul>
   137a2:	0002      	movs	r2, r0
   137a4:	000b      	movs	r3, r1
   137a6:	0030      	movs	r0, r6
   137a8:	0039      	movs	r1, r7
   137aa:	f7fd f9ff 	bl	10bac <__aeabi_dsub>
   137ae:	4643      	mov	r3, r8
   137b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   137b2:	3330      	adds	r3, #48	; 0x30
   137b4:	7013      	strb	r3, [r2, #0]
   137b6:	9b07      	ldr	r3, [sp, #28]
   137b8:	0006      	movs	r6, r0
   137ba:	000f      	movs	r7, r1
   137bc:	1c54      	adds	r4, r2, #1
   137be:	2b01      	cmp	r3, #1
   137c0:	d04e      	beq.n	13860 <_dtoa_r+0x5ec>
   137c2:	2200      	movs	r2, #0
   137c4:	4b60      	ldr	r3, [pc, #384]	; (13948 <_dtoa_r+0x6d4>)
   137c6:	f7fc ff71 	bl	106ac <__aeabi_dmul>
   137ca:	2200      	movs	r2, #0
   137cc:	2300      	movs	r3, #0
   137ce:	0006      	movs	r6, r0
   137d0:	000f      	movs	r7, r1
   137d2:	f7fa ff6b 	bl	e6ac <__aeabi_dcmpeq>
   137d6:	2800      	cmp	r0, #0
   137d8:	d000      	beq.n	137dc <_dtoa_r+0x568>
   137da:	e77a      	b.n	136d2 <_dtoa_r+0x45e>
   137dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   137de:	9a07      	ldr	r2, [sp, #28]
   137e0:	1c9d      	adds	r5, r3, #2
   137e2:	469c      	mov	ip, r3
   137e4:	465b      	mov	r3, fp
   137e6:	9306      	str	r3, [sp, #24]
   137e8:	4653      	mov	r3, sl
   137ea:	4462      	add	r2, ip
   137ec:	46aa      	mov	sl, r5
   137ee:	9c04      	ldr	r4, [sp, #16]
   137f0:	9d05      	ldr	r5, [sp, #20]
   137f2:	4691      	mov	r9, r2
   137f4:	9307      	str	r3, [sp, #28]
   137f6:	e00f      	b.n	13818 <_dtoa_r+0x5a4>
   137f8:	2200      	movs	r2, #0
   137fa:	4b53      	ldr	r3, [pc, #332]	; (13948 <_dtoa_r+0x6d4>)
   137fc:	f7fc ff56 	bl	106ac <__aeabi_dmul>
   13800:	2301      	movs	r3, #1
   13802:	469c      	mov	ip, r3
   13804:	2200      	movs	r2, #0
   13806:	2300      	movs	r3, #0
   13808:	0006      	movs	r6, r0
   1380a:	000f      	movs	r7, r1
   1380c:	44e2      	add	sl, ip
   1380e:	f7fa ff4d 	bl	e6ac <__aeabi_dcmpeq>
   13812:	2800      	cmp	r0, #0
   13814:	d000      	beq.n	13818 <_dtoa_r+0x5a4>
   13816:	e2d9      	b.n	13dcc <_dtoa_r+0xb58>
   13818:	0022      	movs	r2, r4
   1381a:	002b      	movs	r3, r5
   1381c:	0030      	movs	r0, r6
   1381e:	0039      	movs	r1, r7
   13820:	f7fc fb10 	bl	fe44 <__aeabi_ddiv>
   13824:	f7fd fcd8 	bl	111d8 <__aeabi_d2iz>
   13828:	4680      	mov	r8, r0
   1382a:	f7fd fd09 	bl	11240 <__aeabi_i2d>
   1382e:	0022      	movs	r2, r4
   13830:	002b      	movs	r3, r5
   13832:	f7fc ff3b 	bl	106ac <__aeabi_dmul>
   13836:	0002      	movs	r2, r0
   13838:	000b      	movs	r3, r1
   1383a:	0030      	movs	r0, r6
   1383c:	0039      	movs	r1, r7
   1383e:	f7fd f9b5 	bl	10bac <__aeabi_dsub>
   13842:	4653      	mov	r3, sl
   13844:	4642      	mov	r2, r8
   13846:	3b01      	subs	r3, #1
   13848:	3230      	adds	r2, #48	; 0x30
   1384a:	0006      	movs	r6, r0
   1384c:	000f      	movs	r7, r1
   1384e:	46d3      	mov	fp, sl
   13850:	701a      	strb	r2, [r3, #0]
   13852:	45d1      	cmp	r9, sl
   13854:	d1d0      	bne.n	137f8 <_dtoa_r+0x584>
   13856:	9b06      	ldr	r3, [sp, #24]
   13858:	4654      	mov	r4, sl
   1385a:	469b      	mov	fp, r3
   1385c:	9b07      	ldr	r3, [sp, #28]
   1385e:	469a      	mov	sl, r3
   13860:	0032      	movs	r2, r6
   13862:	003b      	movs	r3, r7
   13864:	0030      	movs	r0, r6
   13866:	0039      	movs	r1, r7
   13868:	f7fb ffdc 	bl	f824 <__aeabi_dadd>
   1386c:	0006      	movs	r6, r0
   1386e:	000f      	movs	r7, r1
   13870:	0002      	movs	r2, r0
   13872:	000b      	movs	r3, r1
   13874:	9804      	ldr	r0, [sp, #16]
   13876:	9905      	ldr	r1, [sp, #20]
   13878:	f7fa ff1e 	bl	e6b8 <__aeabi_dcmplt>
   1387c:	2800      	cmp	r0, #0
   1387e:	d10c      	bne.n	1389a <_dtoa_r+0x626>
   13880:	9804      	ldr	r0, [sp, #16]
   13882:	9905      	ldr	r1, [sp, #20]
   13884:	0032      	movs	r2, r6
   13886:	003b      	movs	r3, r7
   13888:	f7fa ff10 	bl	e6ac <__aeabi_dcmpeq>
   1388c:	2800      	cmp	r0, #0
   1388e:	d100      	bne.n	13892 <_dtoa_r+0x61e>
   13890:	e71f      	b.n	136d2 <_dtoa_r+0x45e>
   13892:	4643      	mov	r3, r8
   13894:	07db      	lsls	r3, r3, #31
   13896:	d400      	bmi.n	1389a <_dtoa_r+0x626>
   13898:	e71b      	b.n	136d2 <_dtoa_r+0x45e>
   1389a:	1e65      	subs	r5, r4, #1
   1389c:	782f      	ldrb	r7, [r5, #0]
   1389e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   138a0:	e006      	b.n	138b0 <_dtoa_r+0x63c>
   138a2:	429d      	cmp	r5, r3
   138a4:	d100      	bne.n	138a8 <_dtoa_r+0x634>
   138a6:	e351      	b.n	13f4c <_dtoa_r+0xcd8>
   138a8:	3c02      	subs	r4, #2
   138aa:	7827      	ldrb	r7, [r4, #0]
   138ac:	002c      	movs	r4, r5
   138ae:	3d01      	subs	r5, #1
   138b0:	2f39      	cmp	r7, #57	; 0x39
   138b2:	d0f6      	beq.n	138a2 <_dtoa_r+0x62e>
   138b4:	3701      	adds	r7, #1
   138b6:	702f      	strb	r7, [r5, #0]
   138b8:	e70b      	b.n	136d2 <_dtoa_r+0x45e>
   138ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   138bc:	2a00      	cmp	r2, #0
   138be:	d04f      	beq.n	13960 <_dtoa_r+0x6ec>
   138c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   138c2:	2a01      	cmp	r2, #1
   138c4:	dc00      	bgt.n	138c8 <_dtoa_r+0x654>
   138c6:	e22c      	b.n	13d22 <_dtoa_r+0xaae>
   138c8:	9b07      	ldr	r3, [sp, #28]
   138ca:	1e5c      	subs	r4, r3, #1
   138cc:	464b      	mov	r3, r9
   138ce:	45a1      	cmp	r9, r4
   138d0:	da00      	bge.n	138d4 <_dtoa_r+0x660>
   138d2:	e2b8      	b.n	13e46 <_dtoa_r+0xbd2>
   138d4:	1b1c      	subs	r4, r3, r4
   138d6:	9b07      	ldr	r3, [sp, #28]
   138d8:	2b00      	cmp	r3, #0
   138da:	da00      	bge.n	138de <_dtoa_r+0x66a>
   138dc:	e3d4      	b.n	14088 <_dtoa_r+0xe14>
   138de:	9b06      	ldr	r3, [sp, #24]
   138e0:	9308      	str	r3, [sp, #32]
   138e2:	9b07      	ldr	r3, [sp, #28]
   138e4:	9a06      	ldr	r2, [sp, #24]
   138e6:	2101      	movs	r1, #1
   138e8:	4694      	mov	ip, r2
   138ea:	449c      	add	ip, r3
   138ec:	4662      	mov	r2, ip
   138ee:	9206      	str	r2, [sp, #24]
   138f0:	9a04      	ldr	r2, [sp, #16]
   138f2:	4650      	mov	r0, sl
   138f4:	4694      	mov	ip, r2
   138f6:	449c      	add	ip, r3
   138f8:	4663      	mov	r3, ip
   138fa:	9304      	str	r3, [sp, #16]
   138fc:	f001 fd82 	bl	15404 <__i2b>
   13900:	4680      	mov	r8, r0
   13902:	e032      	b.n	1396a <_dtoa_r+0x6f6>
   13904:	9a06      	ldr	r2, [sp, #24]
   13906:	9b03      	ldr	r3, [sp, #12]
   13908:	1ad2      	subs	r2, r2, r3
   1390a:	425b      	negs	r3, r3
   1390c:	4699      	mov	r9, r3
   1390e:	2300      	movs	r3, #0
   13910:	9206      	str	r2, [sp, #24]
   13912:	930d      	str	r3, [sp, #52]	; 0x34
   13914:	e579      	b.n	1340a <_dtoa_r+0x196>
   13916:	9803      	ldr	r0, [sp, #12]
   13918:	f7fd fc92 	bl	11240 <__aeabi_i2d>
   1391c:	000b      	movs	r3, r1
   1391e:	0002      	movs	r2, r0
   13920:	0029      	movs	r1, r5
   13922:	0020      	movs	r0, r4
   13924:	f7fa fec2 	bl	e6ac <__aeabi_dcmpeq>
   13928:	0002      	movs	r2, r0
   1392a:	4250      	negs	r0, r2
   1392c:	4150      	adcs	r0, r2
   1392e:	9b03      	ldr	r3, [sp, #12]
   13930:	1a1b      	subs	r3, r3, r0
   13932:	9303      	str	r3, [sp, #12]
   13934:	e53d      	b.n	133b2 <_dtoa_r+0x13e>
   13936:	2301      	movs	r3, #1
   13938:	1a9b      	subs	r3, r3, r2
   1393a:	9306      	str	r3, [sp, #24]
   1393c:	2300      	movs	r3, #0
   1393e:	9304      	str	r3, [sp, #16]
   13940:	e557      	b.n	133f2 <_dtoa_r+0x17e>
   13942:	46c0      	nop			; (mov r8, r8)
   13944:	3ff00000 	.word	0x3ff00000
   13948:	40240000 	.word	0x40240000
   1394c:	00000432 	.word	0x00000432
   13950:	00000412 	.word	0x00000412
   13954:	fe100000 	.word	0xfe100000
   13958:	0001794c 	.word	0x0001794c
   1395c:	000179b8 	.word	0x000179b8
   13960:	9b06      	ldr	r3, [sp, #24]
   13962:	464c      	mov	r4, r9
   13964:	9308      	str	r3, [sp, #32]
   13966:	2300      	movs	r3, #0
   13968:	4698      	mov	r8, r3
   1396a:	9908      	ldr	r1, [sp, #32]
   1396c:	1e0b      	subs	r3, r1, #0
   1396e:	dd0e      	ble.n	1398e <_dtoa_r+0x71a>
   13970:	9a04      	ldr	r2, [sp, #16]
   13972:	2a00      	cmp	r2, #0
   13974:	dd0b      	ble.n	1398e <_dtoa_r+0x71a>
   13976:	4293      	cmp	r3, r2
   13978:	dd00      	ble.n	1397c <_dtoa_r+0x708>
   1397a:	e187      	b.n	13c8c <_dtoa_r+0xa18>
   1397c:	9a06      	ldr	r2, [sp, #24]
   1397e:	1ad2      	subs	r2, r2, r3
   13980:	9206      	str	r2, [sp, #24]
   13982:	9a08      	ldr	r2, [sp, #32]
   13984:	1ad2      	subs	r2, r2, r3
   13986:	9208      	str	r2, [sp, #32]
   13988:	9a04      	ldr	r2, [sp, #16]
   1398a:	1ad3      	subs	r3, r2, r3
   1398c:	9304      	str	r3, [sp, #16]
   1398e:	464b      	mov	r3, r9
   13990:	2b00      	cmp	r3, #0
   13992:	d01a      	beq.n	139ca <_dtoa_r+0x756>
   13994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13996:	2b00      	cmp	r3, #0
   13998:	d100      	bne.n	1399c <_dtoa_r+0x728>
   1399a:	e1bb      	b.n	13d14 <_dtoa_r+0xaa0>
   1399c:	2c00      	cmp	r4, #0
   1399e:	dd10      	ble.n	139c2 <_dtoa_r+0x74e>
   139a0:	4641      	mov	r1, r8
   139a2:	0022      	movs	r2, r4
   139a4:	4650      	mov	r0, sl
   139a6:	f001 fde1 	bl	1556c <__pow5mult>
   139aa:	465a      	mov	r2, fp
   139ac:	0001      	movs	r1, r0
   139ae:	4680      	mov	r8, r0
   139b0:	4650      	mov	r0, sl
   139b2:	f001 fd31 	bl	15418 <__multiply>
   139b6:	0005      	movs	r5, r0
   139b8:	4659      	mov	r1, fp
   139ba:	4650      	mov	r0, sl
   139bc:	f001 fc8a 	bl	152d4 <_Bfree>
   139c0:	46ab      	mov	fp, r5
   139c2:	464b      	mov	r3, r9
   139c4:	1b1a      	subs	r2, r3, r4
   139c6:	d000      	beq.n	139ca <_dtoa_r+0x756>
   139c8:	e1a5      	b.n	13d16 <_dtoa_r+0xaa2>
   139ca:	2101      	movs	r1, #1
   139cc:	4650      	mov	r0, sl
   139ce:	f001 fd19 	bl	15404 <__i2b>
   139d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   139d4:	4681      	mov	r9, r0
   139d6:	2b00      	cmp	r3, #0
   139d8:	dd1d      	ble.n	13a16 <_dtoa_r+0x7a2>
   139da:	001a      	movs	r2, r3
   139dc:	0001      	movs	r1, r0
   139de:	4650      	mov	r0, sl
   139e0:	f001 fdc4 	bl	1556c <__pow5mult>
   139e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   139e6:	4681      	mov	r9, r0
   139e8:	2b01      	cmp	r3, #1
   139ea:	dc00      	bgt.n	139ee <_dtoa_r+0x77a>
   139ec:	e150      	b.n	13c90 <_dtoa_r+0xa1c>
   139ee:	2400      	movs	r4, #0
   139f0:	464b      	mov	r3, r9
   139f2:	691b      	ldr	r3, [r3, #16]
   139f4:	3303      	adds	r3, #3
   139f6:	009b      	lsls	r3, r3, #2
   139f8:	444b      	add	r3, r9
   139fa:	6858      	ldr	r0, [r3, #4]
   139fc:	f001 fcba 	bl	15374 <__hi0bits>
   13a00:	2320      	movs	r3, #32
   13a02:	1a1b      	subs	r3, r3, r0
   13a04:	e010      	b.n	13a28 <_dtoa_r+0x7b4>
   13a06:	2220      	movs	r2, #32
   13a08:	0030      	movs	r0, r6
   13a0a:	1ad3      	subs	r3, r2, r3
   13a0c:	4098      	lsls	r0, r3
   13a0e:	e685      	b.n	1371c <_dtoa_r+0x4a8>
   13a10:	2300      	movs	r3, #0
   13a12:	930c      	str	r3, [sp, #48]	; 0x30
   13a14:	e4e3      	b.n	133de <_dtoa_r+0x16a>
   13a16:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13a18:	2400      	movs	r4, #0
   13a1a:	2b01      	cmp	r3, #1
   13a1c:	dc00      	bgt.n	13a20 <_dtoa_r+0x7ac>
   13a1e:	e18b      	b.n	13d38 <_dtoa_r+0xac4>
   13a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13a22:	2301      	movs	r3, #1
   13a24:	2a00      	cmp	r2, #0
   13a26:	d1e3      	bne.n	139f0 <_dtoa_r+0x77c>
   13a28:	9904      	ldr	r1, [sp, #16]
   13a2a:	201f      	movs	r0, #31
   13a2c:	468c      	mov	ip, r1
   13a2e:	4463      	add	r3, ip
   13a30:	4018      	ands	r0, r3
   13a32:	d100      	bne.n	13a36 <_dtoa_r+0x7c2>
   13a34:	e0ae      	b.n	13b94 <_dtoa_r+0x920>
   13a36:	2320      	movs	r3, #32
   13a38:	1a1b      	subs	r3, r3, r0
   13a3a:	2b04      	cmp	r3, #4
   13a3c:	dc00      	bgt.n	13a40 <_dtoa_r+0x7cc>
   13a3e:	e3cc      	b.n	141da <_dtoa_r+0xf66>
   13a40:	231c      	movs	r3, #28
   13a42:	1a18      	subs	r0, r3, r0
   13a44:	9b06      	ldr	r3, [sp, #24]
   13a46:	469c      	mov	ip, r3
   13a48:	4484      	add	ip, r0
   13a4a:	4663      	mov	r3, ip
   13a4c:	9306      	str	r3, [sp, #24]
   13a4e:	9b08      	ldr	r3, [sp, #32]
   13a50:	469c      	mov	ip, r3
   13a52:	4484      	add	ip, r0
   13a54:	4663      	mov	r3, ip
   13a56:	468c      	mov	ip, r1
   13a58:	4484      	add	ip, r0
   13a5a:	9308      	str	r3, [sp, #32]
   13a5c:	4663      	mov	r3, ip
   13a5e:	9304      	str	r3, [sp, #16]
   13a60:	9b06      	ldr	r3, [sp, #24]
   13a62:	2b00      	cmp	r3, #0
   13a64:	dd05      	ble.n	13a72 <_dtoa_r+0x7fe>
   13a66:	4659      	mov	r1, fp
   13a68:	001a      	movs	r2, r3
   13a6a:	4650      	mov	r0, sl
   13a6c:	f001 fdde 	bl	1562c <__lshift>
   13a70:	4683      	mov	fp, r0
   13a72:	9b04      	ldr	r3, [sp, #16]
   13a74:	2b00      	cmp	r3, #0
   13a76:	dd05      	ble.n	13a84 <_dtoa_r+0x810>
   13a78:	4649      	mov	r1, r9
   13a7a:	001a      	movs	r2, r3
   13a7c:	4650      	mov	r0, sl
   13a7e:	f001 fdd5 	bl	1562c <__lshift>
   13a82:	4681      	mov	r9, r0
   13a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13a86:	2b00      	cmp	r3, #0
   13a88:	d000      	beq.n	13a8c <_dtoa_r+0x818>
   13a8a:	e094      	b.n	13bb6 <_dtoa_r+0x942>
   13a8c:	9b07      	ldr	r3, [sp, #28]
   13a8e:	2b00      	cmp	r3, #0
   13a90:	dc00      	bgt.n	13a94 <_dtoa_r+0x820>
   13a92:	e175      	b.n	13d80 <_dtoa_r+0xb0c>
   13a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a96:	2b00      	cmp	r3, #0
   13a98:	d100      	bne.n	13a9c <_dtoa_r+0x828>
   13a9a:	e0a6      	b.n	13bea <_dtoa_r+0x976>
   13a9c:	9b08      	ldr	r3, [sp, #32]
   13a9e:	2b00      	cmp	r3, #0
   13aa0:	dd05      	ble.n	13aae <_dtoa_r+0x83a>
   13aa2:	4641      	mov	r1, r8
   13aa4:	001a      	movs	r2, r3
   13aa6:	4650      	mov	r0, sl
   13aa8:	f001 fdc0 	bl	1562c <__lshift>
   13aac:	4680      	mov	r8, r0
   13aae:	4643      	mov	r3, r8
   13ab0:	930c      	str	r3, [sp, #48]	; 0x30
   13ab2:	2c00      	cmp	r4, #0
   13ab4:	d000      	beq.n	13ab8 <_dtoa_r+0x844>
   13ab6:	e250      	b.n	13f5a <_dtoa_r+0xce6>
   13ab8:	9c07      	ldr	r4, [sp, #28]
   13aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13abc:	3c01      	subs	r4, #1
   13abe:	0023      	movs	r3, r4
   13ac0:	4694      	mov	ip, r2
   13ac2:	4463      	add	r3, ip
   13ac4:	9308      	str	r3, [sp, #32]
   13ac6:	2301      	movs	r3, #1
   13ac8:	4033      	ands	r3, r6
   13aca:	9307      	str	r3, [sp, #28]
   13acc:	464b      	mov	r3, r9
   13ace:	9306      	str	r3, [sp, #24]
   13ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13ad2:	4657      	mov	r7, sl
   13ad4:	4645      	mov	r5, r8
   13ad6:	465e      	mov	r6, fp
   13ad8:	4692      	mov	sl, r2
   13ada:	4698      	mov	r8, r3
   13adc:	9b06      	ldr	r3, [sp, #24]
   13ade:	0030      	movs	r0, r6
   13ae0:	0019      	movs	r1, r3
   13ae2:	4699      	mov	r9, r3
   13ae4:	f7ff fb1c 	bl	13120 <quorem>
   13ae8:	0003      	movs	r3, r0
   13aea:	900b      	str	r0, [sp, #44]	; 0x2c
   13aec:	3330      	adds	r3, #48	; 0x30
   13aee:	0029      	movs	r1, r5
   13af0:	0030      	movs	r0, r6
   13af2:	9304      	str	r3, [sp, #16]
   13af4:	f001 fdfa 	bl	156ec <__mcmp>
   13af8:	4649      	mov	r1, r9
   13afa:	0004      	movs	r4, r0
   13afc:	4642      	mov	r2, r8
   13afe:	0038      	movs	r0, r7
   13b00:	f001 fe0e 	bl	15720 <__mdiff>
   13b04:	68c3      	ldr	r3, [r0, #12]
   13b06:	4681      	mov	r9, r0
   13b08:	2b00      	cmp	r3, #0
   13b0a:	d000      	beq.n	13b0e <_dtoa_r+0x89a>
   13b0c:	e11e      	b.n	13d4c <_dtoa_r+0xad8>
   13b0e:	0001      	movs	r1, r0
   13b10:	0030      	movs	r0, r6
   13b12:	f001 fdeb 	bl	156ec <__mcmp>
   13b16:	4683      	mov	fp, r0
   13b18:	4649      	mov	r1, r9
   13b1a:	0038      	movs	r0, r7
   13b1c:	f001 fbda 	bl	152d4 <_Bfree>
   13b20:	465b      	mov	r3, fp
   13b22:	9a22      	ldr	r2, [sp, #136]	; 0x88
   13b24:	4313      	orrs	r3, r2
   13b26:	d103      	bne.n	13b30 <_dtoa_r+0x8bc>
   13b28:	9b07      	ldr	r3, [sp, #28]
   13b2a:	2b00      	cmp	r3, #0
   13b2c:	d100      	bne.n	13b30 <_dtoa_r+0x8bc>
   13b2e:	e306      	b.n	1413e <_dtoa_r+0xeca>
   13b30:	2c00      	cmp	r4, #0
   13b32:	da00      	bge.n	13b36 <_dtoa_r+0x8c2>
   13b34:	e1a8      	b.n	13e88 <_dtoa_r+0xc14>
   13b36:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13b38:	431c      	orrs	r4, r3
   13b3a:	d103      	bne.n	13b44 <_dtoa_r+0x8d0>
   13b3c:	9b07      	ldr	r3, [sp, #28]
   13b3e:	2b00      	cmp	r3, #0
   13b40:	d100      	bne.n	13b44 <_dtoa_r+0x8d0>
   13b42:	e1a1      	b.n	13e88 <_dtoa_r+0xc14>
   13b44:	465b      	mov	r3, fp
   13b46:	2b00      	cmp	r3, #0
   13b48:	dd00      	ble.n	13b4c <_dtoa_r+0x8d8>
   13b4a:	e282      	b.n	14052 <_dtoa_r+0xdde>
   13b4c:	4669      	mov	r1, sp
   13b4e:	4652      	mov	r2, sl
   13b50:	4653      	mov	r3, sl
   13b52:	7c09      	ldrb	r1, [r1, #16]
   13b54:	1c5c      	adds	r4, r3, #1
   13b56:	7011      	strb	r1, [r2, #0]
   13b58:	9a08      	ldr	r2, [sp, #32]
   13b5a:	4552      	cmp	r2, sl
   13b5c:	d100      	bne.n	13b60 <_dtoa_r+0x8ec>
   13b5e:	e28a      	b.n	14076 <_dtoa_r+0xe02>
   13b60:	0031      	movs	r1, r6
   13b62:	2300      	movs	r3, #0
   13b64:	220a      	movs	r2, #10
   13b66:	0038      	movs	r0, r7
   13b68:	f001 fbbe 	bl	152e8 <__multadd>
   13b6c:	2300      	movs	r3, #0
   13b6e:	0006      	movs	r6, r0
   13b70:	220a      	movs	r2, #10
   13b72:	0029      	movs	r1, r5
   13b74:	0038      	movs	r0, r7
   13b76:	4545      	cmp	r5, r8
   13b78:	d100      	bne.n	13b7c <_dtoa_r+0x908>
   13b7a:	e0e1      	b.n	13d40 <_dtoa_r+0xacc>
   13b7c:	f001 fbb4 	bl	152e8 <__multadd>
   13b80:	4641      	mov	r1, r8
   13b82:	0005      	movs	r5, r0
   13b84:	2300      	movs	r3, #0
   13b86:	220a      	movs	r2, #10
   13b88:	0038      	movs	r0, r7
   13b8a:	f001 fbad 	bl	152e8 <__multadd>
   13b8e:	46a2      	mov	sl, r4
   13b90:	4680      	mov	r8, r0
   13b92:	e7a3      	b.n	13adc <_dtoa_r+0x868>
   13b94:	201c      	movs	r0, #28
   13b96:	9b06      	ldr	r3, [sp, #24]
   13b98:	469c      	mov	ip, r3
   13b9a:	4484      	add	ip, r0
   13b9c:	4663      	mov	r3, ip
   13b9e:	9306      	str	r3, [sp, #24]
   13ba0:	9b08      	ldr	r3, [sp, #32]
   13ba2:	469c      	mov	ip, r3
   13ba4:	4484      	add	ip, r0
   13ba6:	4663      	mov	r3, ip
   13ba8:	9308      	str	r3, [sp, #32]
   13baa:	9b04      	ldr	r3, [sp, #16]
   13bac:	469c      	mov	ip, r3
   13bae:	4484      	add	ip, r0
   13bb0:	4663      	mov	r3, ip
   13bb2:	9304      	str	r3, [sp, #16]
   13bb4:	e754      	b.n	13a60 <_dtoa_r+0x7ec>
   13bb6:	4649      	mov	r1, r9
   13bb8:	4658      	mov	r0, fp
   13bba:	f001 fd97 	bl	156ec <__mcmp>
   13bbe:	2800      	cmp	r0, #0
   13bc0:	db00      	blt.n	13bc4 <_dtoa_r+0x950>
   13bc2:	e763      	b.n	13a8c <_dtoa_r+0x818>
   13bc4:	9b03      	ldr	r3, [sp, #12]
   13bc6:	4659      	mov	r1, fp
   13bc8:	3b01      	subs	r3, #1
   13bca:	9303      	str	r3, [sp, #12]
   13bcc:	220a      	movs	r2, #10
   13bce:	2300      	movs	r3, #0
   13bd0:	4650      	mov	r0, sl
   13bd2:	f001 fb89 	bl	152e8 <__multadd>
   13bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13bd8:	4683      	mov	fp, r0
   13bda:	2b00      	cmp	r3, #0
   13bdc:	d000      	beq.n	13be0 <_dtoa_r+0x96c>
   13bde:	e2ca      	b.n	14176 <_dtoa_r+0xf02>
   13be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13be2:	2b00      	cmp	r3, #0
   13be4:	dc00      	bgt.n	13be8 <_dtoa_r+0x974>
   13be6:	e2d8      	b.n	1419a <_dtoa_r+0xf26>
   13be8:	9307      	str	r3, [sp, #28]
   13bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13bec:	465d      	mov	r5, fp
   13bee:	2400      	movs	r4, #0
   13bf0:	9f07      	ldr	r7, [sp, #28]
   13bf2:	469b      	mov	fp, r3
   13bf4:	e006      	b.n	13c04 <_dtoa_r+0x990>
   13bf6:	0029      	movs	r1, r5
   13bf8:	2300      	movs	r3, #0
   13bfa:	220a      	movs	r2, #10
   13bfc:	4650      	mov	r0, sl
   13bfe:	f001 fb73 	bl	152e8 <__multadd>
   13c02:	0005      	movs	r5, r0
   13c04:	4649      	mov	r1, r9
   13c06:	0028      	movs	r0, r5
   13c08:	f7ff fa8a 	bl	13120 <quorem>
   13c0c:	465b      	mov	r3, fp
   13c0e:	3030      	adds	r0, #48	; 0x30
   13c10:	5518      	strb	r0, [r3, r4]
   13c12:	3401      	adds	r4, #1
   13c14:	42bc      	cmp	r4, r7
   13c16:	dbee      	blt.n	13bf6 <_dtoa_r+0x982>
   13c18:	46ab      	mov	fp, r5
   13c1a:	0006      	movs	r6, r0
   13c1c:	9c07      	ldr	r4, [sp, #28]
   13c1e:	2c00      	cmp	r4, #0
   13c20:	dc00      	bgt.n	13c24 <_dtoa_r+0x9b0>
   13c22:	e237      	b.n	14094 <_dtoa_r+0xe20>
   13c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c26:	2700      	movs	r7, #0
   13c28:	469c      	mov	ip, r3
   13c2a:	4464      	add	r4, ip
   13c2c:	4659      	mov	r1, fp
   13c2e:	2201      	movs	r2, #1
   13c30:	4650      	mov	r0, sl
   13c32:	f001 fcfb 	bl	1562c <__lshift>
   13c36:	4649      	mov	r1, r9
   13c38:	4683      	mov	fp, r0
   13c3a:	f001 fd57 	bl	156ec <__mcmp>
   13c3e:	2800      	cmp	r0, #0
   13c40:	dc00      	bgt.n	13c44 <_dtoa_r+0x9d0>
   13c42:	e144      	b.n	13ece <_dtoa_r+0xc5a>
   13c44:	1e65      	subs	r5, r4, #1
   13c46:	782b      	ldrb	r3, [r5, #0]
   13c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13c4a:	e006      	b.n	13c5a <_dtoa_r+0x9e6>
   13c4c:	4295      	cmp	r5, r2
   13c4e:	d100      	bne.n	13c52 <_dtoa_r+0x9de>
   13c50:	e0b1      	b.n	13db6 <_dtoa_r+0xb42>
   13c52:	3c02      	subs	r4, #2
   13c54:	7823      	ldrb	r3, [r4, #0]
   13c56:	002c      	movs	r4, r5
   13c58:	3d01      	subs	r5, #1
   13c5a:	2b39      	cmp	r3, #57	; 0x39
   13c5c:	d0f6      	beq.n	13c4c <_dtoa_r+0x9d8>
   13c5e:	3301      	adds	r3, #1
   13c60:	702b      	strb	r3, [r5, #0]
   13c62:	4649      	mov	r1, r9
   13c64:	4650      	mov	r0, sl
   13c66:	f001 fb35 	bl	152d4 <_Bfree>
   13c6a:	4643      	mov	r3, r8
   13c6c:	2b00      	cmp	r3, #0
   13c6e:	d100      	bne.n	13c72 <_dtoa_r+0x9fe>
   13c70:	e52f      	b.n	136d2 <_dtoa_r+0x45e>
   13c72:	2f00      	cmp	r7, #0
   13c74:	d005      	beq.n	13c82 <_dtoa_r+0xa0e>
   13c76:	4547      	cmp	r7, r8
   13c78:	d003      	beq.n	13c82 <_dtoa_r+0xa0e>
   13c7a:	0039      	movs	r1, r7
   13c7c:	4650      	mov	r0, sl
   13c7e:	f001 fb29 	bl	152d4 <_Bfree>
   13c82:	4641      	mov	r1, r8
   13c84:	4650      	mov	r0, sl
   13c86:	f001 fb25 	bl	152d4 <_Bfree>
   13c8a:	e522      	b.n	136d2 <_dtoa_r+0x45e>
   13c8c:	0013      	movs	r3, r2
   13c8e:	e675      	b.n	1397c <_dtoa_r+0x708>
   13c90:	2e00      	cmp	r6, #0
   13c92:	d000      	beq.n	13c96 <_dtoa_r+0xa22>
   13c94:	e6ab      	b.n	139ee <_dtoa_r+0x77a>
   13c96:	033b      	lsls	r3, r7, #12
   13c98:	2400      	movs	r4, #0
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	d000      	beq.n	13ca0 <_dtoa_r+0xa2c>
   13c9e:	e6bf      	b.n	13a20 <_dtoa_r+0x7ac>
   13ca0:	4bba      	ldr	r3, [pc, #744]	; (13f8c <_dtoa_r+0xd18>)
   13ca2:	423b      	tst	r3, r7
   13ca4:	d100      	bne.n	13ca8 <_dtoa_r+0xa34>
   13ca6:	e6bb      	b.n	13a20 <_dtoa_r+0x7ac>
   13ca8:	9b06      	ldr	r3, [sp, #24]
   13caa:	3401      	adds	r4, #1
   13cac:	3301      	adds	r3, #1
   13cae:	9306      	str	r3, [sp, #24]
   13cb0:	9b04      	ldr	r3, [sp, #16]
   13cb2:	3301      	adds	r3, #1
   13cb4:	9304      	str	r3, [sp, #16]
   13cb6:	e6b3      	b.n	13a20 <_dtoa_r+0x7ac>
   13cb8:	2301      	movs	r3, #1
   13cba:	930b      	str	r3, [sp, #44]	; 0x2c
   13cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13cbe:	2b00      	cmp	r3, #0
   13cc0:	dc00      	bgt.n	13cc4 <_dtoa_r+0xa50>
   13cc2:	e0d1      	b.n	13e68 <_dtoa_r+0xbf4>
   13cc4:	001d      	movs	r5, r3
   13cc6:	4698      	mov	r8, r3
   13cc8:	930e      	str	r3, [sp, #56]	; 0x38
   13cca:	9307      	str	r3, [sp, #28]
   13ccc:	f7ff fbc8 	bl	13460 <_dtoa_r+0x1ec>
   13cd0:	9b07      	ldr	r3, [sp, #28]
   13cd2:	2b00      	cmp	r3, #0
   13cd4:	dd00      	ble.n	13cd8 <_dtoa_r+0xa64>
   13cd6:	e553      	b.n	13780 <_dtoa_r+0x50c>
   13cd8:	d000      	beq.n	13cdc <_dtoa_r+0xa68>
   13cda:	e0ad      	b.n	13e38 <_dtoa_r+0xbc4>
   13cdc:	9804      	ldr	r0, [sp, #16]
   13cde:	9905      	ldr	r1, [sp, #20]
   13ce0:	2200      	movs	r2, #0
   13ce2:	4bab      	ldr	r3, [pc, #684]	; (13f90 <_dtoa_r+0xd1c>)
   13ce4:	f7fc fce2 	bl	106ac <__aeabi_dmul>
   13ce8:	003b      	movs	r3, r7
   13cea:	0032      	movs	r2, r6
   13cec:	f7fa fd02 	bl	e6f4 <__aeabi_dcmpge>
   13cf0:	2300      	movs	r3, #0
   13cf2:	4699      	mov	r9, r3
   13cf4:	4698      	mov	r8, r3
   13cf6:	2800      	cmp	r0, #0
   13cf8:	d055      	beq.n	13da6 <_dtoa_r+0xb32>
   13cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13cfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13cfe:	43db      	mvns	r3, r3
   13d00:	9303      	str	r3, [sp, #12]
   13d02:	4649      	mov	r1, r9
   13d04:	4650      	mov	r0, sl
   13d06:	f001 fae5 	bl	152d4 <_Bfree>
   13d0a:	4643      	mov	r3, r8
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d100      	bne.n	13d12 <_dtoa_r+0xa9e>
   13d10:	e4df      	b.n	136d2 <_dtoa_r+0x45e>
   13d12:	e7b6      	b.n	13c82 <_dtoa_r+0xa0e>
   13d14:	464a      	mov	r2, r9
   13d16:	4659      	mov	r1, fp
   13d18:	4650      	mov	r0, sl
   13d1a:	f001 fc27 	bl	1556c <__pow5mult>
   13d1e:	4683      	mov	fp, r0
   13d20:	e653      	b.n	139ca <_dtoa_r+0x756>
   13d22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13d24:	2a00      	cmp	r2, #0
   13d26:	d100      	bne.n	13d2a <_dtoa_r+0xab6>
   13d28:	e1b6      	b.n	14098 <_dtoa_r+0xe24>
   13d2a:	4a9a      	ldr	r2, [pc, #616]	; (13f94 <_dtoa_r+0xd20>)
   13d2c:	464c      	mov	r4, r9
   13d2e:	4694      	mov	ip, r2
   13d30:	9a06      	ldr	r2, [sp, #24]
   13d32:	4463      	add	r3, ip
   13d34:	9208      	str	r2, [sp, #32]
   13d36:	e5d5      	b.n	138e4 <_dtoa_r+0x670>
   13d38:	2e00      	cmp	r6, #0
   13d3a:	d000      	beq.n	13d3e <_dtoa_r+0xaca>
   13d3c:	e670      	b.n	13a20 <_dtoa_r+0x7ac>
   13d3e:	e7aa      	b.n	13c96 <_dtoa_r+0xa22>
   13d40:	f001 fad2 	bl	152e8 <__multadd>
   13d44:	46a2      	mov	sl, r4
   13d46:	0005      	movs	r5, r0
   13d48:	4680      	mov	r8, r0
   13d4a:	e6c7      	b.n	13adc <_dtoa_r+0x868>
   13d4c:	2301      	movs	r3, #1
   13d4e:	469b      	mov	fp, r3
   13d50:	e6e2      	b.n	13b18 <_dtoa_r+0x8a4>
   13d52:	2300      	movs	r3, #0
   13d54:	930b      	str	r3, [sp, #44]	; 0x2c
   13d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13d58:	2b02      	cmp	r3, #2
   13d5a:	d0af      	beq.n	13cbc <_dtoa_r+0xa48>
   13d5c:	2400      	movs	r4, #0
   13d5e:	4653      	mov	r3, sl
   13d60:	0021      	movs	r1, r4
   13d62:	645c      	str	r4, [r3, #68]	; 0x44
   13d64:	4650      	mov	r0, sl
   13d66:	f001 fa8d 	bl	15284 <_Balloc>
   13d6a:	4653      	mov	r3, sl
   13d6c:	6418      	str	r0, [r3, #64]	; 0x40
   13d6e:	2301      	movs	r3, #1
   13d70:	425b      	negs	r3, r3
   13d72:	9307      	str	r3, [sp, #28]
   13d74:	930e      	str	r3, [sp, #56]	; 0x38
   13d76:	3302      	adds	r3, #2
   13d78:	900a      	str	r0, [sp, #40]	; 0x28
   13d7a:	9423      	str	r4, [sp, #140]	; 0x8c
   13d7c:	930b      	str	r3, [sp, #44]	; 0x2c
   13d7e:	e4ec      	b.n	1375a <_dtoa_r+0x4e6>
   13d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13d82:	2b02      	cmp	r3, #2
   13d84:	dc00      	bgt.n	13d88 <_dtoa_r+0xb14>
   13d86:	e685      	b.n	13a94 <_dtoa_r+0x820>
   13d88:	9b07      	ldr	r3, [sp, #28]
   13d8a:	2b00      	cmp	r3, #0
   13d8c:	d1b5      	bne.n	13cfa <_dtoa_r+0xa86>
   13d8e:	4649      	mov	r1, r9
   13d90:	2205      	movs	r2, #5
   13d92:	4650      	mov	r0, sl
   13d94:	f001 faa8 	bl	152e8 <__multadd>
   13d98:	4681      	mov	r9, r0
   13d9a:	0001      	movs	r1, r0
   13d9c:	4658      	mov	r0, fp
   13d9e:	f001 fca5 	bl	156ec <__mcmp>
   13da2:	2800      	cmp	r0, #0
   13da4:	dda9      	ble.n	13cfa <_dtoa_r+0xa86>
   13da6:	2331      	movs	r3, #49	; 0x31
   13da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13daa:	7013      	strb	r3, [r2, #0]
   13dac:	9b03      	ldr	r3, [sp, #12]
   13dae:	1c54      	adds	r4, r2, #1
   13db0:	3301      	adds	r3, #1
   13db2:	9303      	str	r3, [sp, #12]
   13db4:	e7a5      	b.n	13d02 <_dtoa_r+0xa8e>
   13db6:	9b03      	ldr	r3, [sp, #12]
   13db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13dba:	3301      	adds	r3, #1
   13dbc:	9303      	str	r3, [sp, #12]
   13dbe:	2331      	movs	r3, #49	; 0x31
   13dc0:	7013      	strb	r3, [r2, #0]
   13dc2:	e74e      	b.n	13c62 <_dtoa_r+0x9ee>
   13dc4:	2300      	movs	r3, #0
   13dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   13dc8:	f7ff fb3d 	bl	13446 <_dtoa_r+0x1d2>
   13dcc:	9b06      	ldr	r3, [sp, #24]
   13dce:	465c      	mov	r4, fp
   13dd0:	469b      	mov	fp, r3
   13dd2:	9b07      	ldr	r3, [sp, #28]
   13dd4:	469a      	mov	sl, r3
   13dd6:	e47c      	b.n	136d2 <_dtoa_r+0x45e>
   13dd8:	4640      	mov	r0, r8
   13dda:	f7fd fa31 	bl	11240 <__aeabi_i2d>
   13dde:	0032      	movs	r2, r6
   13de0:	003b      	movs	r3, r7
   13de2:	f7fc fc63 	bl	106ac <__aeabi_dmul>
   13de6:	2200      	movs	r2, #0
   13de8:	4b6b      	ldr	r3, [pc, #428]	; (13f98 <_dtoa_r+0xd24>)
   13dea:	f7fb fd1b 	bl	f824 <__aeabi_dadd>
   13dee:	4a6b      	ldr	r2, [pc, #428]	; (13f9c <_dtoa_r+0xd28>)
   13df0:	000b      	movs	r3, r1
   13df2:	4694      	mov	ip, r2
   13df4:	4463      	add	r3, ip
   13df6:	9008      	str	r0, [sp, #32]
   13df8:	9109      	str	r1, [sp, #36]	; 0x24
   13dfa:	9309      	str	r3, [sp, #36]	; 0x24
   13dfc:	2200      	movs	r2, #0
   13dfe:	4b64      	ldr	r3, [pc, #400]	; (13f90 <_dtoa_r+0xd1c>)
   13e00:	0030      	movs	r0, r6
   13e02:	0039      	movs	r1, r7
   13e04:	f7fc fed2 	bl	10bac <__aeabi_dsub>
   13e08:	9e08      	ldr	r6, [sp, #32]
   13e0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   13e0c:	0032      	movs	r2, r6
   13e0e:	003b      	movs	r3, r7
   13e10:	0004      	movs	r4, r0
   13e12:	000d      	movs	r5, r1
   13e14:	f7fa fc64 	bl	e6e0 <__aeabi_dcmpgt>
   13e18:	2800      	cmp	r0, #0
   13e1a:	d000      	beq.n	13e1e <_dtoa_r+0xbaa>
   13e1c:	e0b2      	b.n	13f84 <_dtoa_r+0xd10>
   13e1e:	2080      	movs	r0, #128	; 0x80
   13e20:	0600      	lsls	r0, r0, #24
   13e22:	4684      	mov	ip, r0
   13e24:	0039      	movs	r1, r7
   13e26:	4461      	add	r1, ip
   13e28:	000b      	movs	r3, r1
   13e2a:	0032      	movs	r2, r6
   13e2c:	0020      	movs	r0, r4
   13e2e:	0029      	movs	r1, r5
   13e30:	f7fa fc42 	bl	e6b8 <__aeabi_dcmplt>
   13e34:	2800      	cmp	r0, #0
   13e36:	d057      	beq.n	13ee8 <_dtoa_r+0xc74>
   13e38:	2300      	movs	r3, #0
   13e3a:	4699      	mov	r9, r3
   13e3c:	4698      	mov	r8, r3
   13e3e:	e75c      	b.n	13cfa <_dtoa_r+0xa86>
   13e40:	980a      	ldr	r0, [sp, #40]	; 0x28
   13e42:	f7ff fa4c 	bl	132de <_dtoa_r+0x6a>
   13e46:	1ae2      	subs	r2, r4, r3
   13e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e4a:	46a1      	mov	r9, r4
   13e4c:	469c      	mov	ip, r3
   13e4e:	4494      	add	ip, r2
   13e50:	4663      	mov	r3, ip
   13e52:	2400      	movs	r4, #0
   13e54:	930d      	str	r3, [sp, #52]	; 0x34
   13e56:	e53e      	b.n	138d6 <_dtoa_r+0x662>
   13e58:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13e5c:	9208      	str	r2, [sp, #32]
   13e5e:	9309      	str	r3, [sp, #36]	; 0x24
   13e60:	2302      	movs	r3, #2
   13e62:	4698      	mov	r8, r3
   13e64:	f7ff fb3a 	bl	134dc <_dtoa_r+0x268>
   13e68:	2300      	movs	r3, #0
   13e6a:	4652      	mov	r2, sl
   13e6c:	2100      	movs	r1, #0
   13e6e:	6453      	str	r3, [r2, #68]	; 0x44
   13e70:	4650      	mov	r0, sl
   13e72:	f001 fa07 	bl	15284 <_Balloc>
   13e76:	4653      	mov	r3, sl
   13e78:	6418      	str	r0, [r3, #64]	; 0x40
   13e7a:	2301      	movs	r3, #1
   13e7c:	900a      	str	r0, [sp, #40]	; 0x28
   13e7e:	9307      	str	r3, [sp, #28]
   13e80:	9323      	str	r3, [sp, #140]	; 0x8c
   13e82:	930e      	str	r3, [sp, #56]	; 0x38
   13e84:	f7ff fb07 	bl	13496 <_dtoa_r+0x222>
   13e88:	4643      	mov	r3, r8
   13e8a:	930c      	str	r3, [sp, #48]	; 0x30
   13e8c:	465b      	mov	r3, fp
   13e8e:	9a06      	ldr	r2, [sp, #24]
   13e90:	46a8      	mov	r8, r5
   13e92:	46b3      	mov	fp, r6
   13e94:	4655      	mov	r5, sl
   13e96:	9e04      	ldr	r6, [sp, #16]
   13e98:	4691      	mov	r9, r2
   13e9a:	46ba      	mov	sl, r7
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	dd10      	ble.n	13ec2 <_dtoa_r+0xc4e>
   13ea0:	4659      	mov	r1, fp
   13ea2:	2201      	movs	r2, #1
   13ea4:	0038      	movs	r0, r7
   13ea6:	f001 fbc1 	bl	1562c <__lshift>
   13eaa:	4649      	mov	r1, r9
   13eac:	4683      	mov	fp, r0
   13eae:	f001 fc1d 	bl	156ec <__mcmp>
   13eb2:	2800      	cmp	r0, #0
   13eb4:	dc00      	bgt.n	13eb8 <_dtoa_r+0xc44>
   13eb6:	e157      	b.n	14168 <_dtoa_r+0xef4>
   13eb8:	2e39      	cmp	r6, #57	; 0x39
   13eba:	d100      	bne.n	13ebe <_dtoa_r+0xc4a>
   13ebc:	e122      	b.n	14104 <_dtoa_r+0xe90>
   13ebe:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   13ec0:	3631      	adds	r6, #49	; 0x31
   13ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13ec4:	4647      	mov	r7, r8
   13ec6:	1c6c      	adds	r4, r5, #1
   13ec8:	702e      	strb	r6, [r5, #0]
   13eca:	4698      	mov	r8, r3
   13ecc:	e6c9      	b.n	13c62 <_dtoa_r+0x9ee>
   13ece:	2800      	cmp	r0, #0
   13ed0:	d103      	bne.n	13eda <_dtoa_r+0xc66>
   13ed2:	07f3      	lsls	r3, r6, #31
   13ed4:	d501      	bpl.n	13eda <_dtoa_r+0xc66>
   13ed6:	e6b5      	b.n	13c44 <_dtoa_r+0x9d0>
   13ed8:	001c      	movs	r4, r3
   13eda:	1e63      	subs	r3, r4, #1
   13edc:	781a      	ldrb	r2, [r3, #0]
   13ede:	2a30      	cmp	r2, #48	; 0x30
   13ee0:	d0fa      	beq.n	13ed8 <_dtoa_r+0xc64>
   13ee2:	e6be      	b.n	13c62 <_dtoa_r+0x9ee>
   13ee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13ee6:	4699      	mov	r9, r3
   13ee8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   13eea:	9f11      	ldr	r7, [sp, #68]	; 0x44
   13eec:	e435      	b.n	1375a <_dtoa_r+0x4e6>
   13eee:	2501      	movs	r5, #1
   13ef0:	f7ff fab4 	bl	1345c <_dtoa_r+0x1e8>
   13ef4:	9b03      	ldr	r3, [sp, #12]
   13ef6:	2b00      	cmp	r3, #0
   13ef8:	d100      	bne.n	13efc <_dtoa_r+0xc88>
   13efa:	e0d4      	b.n	140a6 <_dtoa_r+0xe32>
   13efc:	9810      	ldr	r0, [sp, #64]	; 0x40
   13efe:	9911      	ldr	r1, [sp, #68]	; 0x44
   13f00:	425c      	negs	r4, r3
   13f02:	230f      	movs	r3, #15
   13f04:	4a26      	ldr	r2, [pc, #152]	; (13fa0 <_dtoa_r+0xd2c>)
   13f06:	4023      	ands	r3, r4
   13f08:	00db      	lsls	r3, r3, #3
   13f0a:	18d3      	adds	r3, r2, r3
   13f0c:	681a      	ldr	r2, [r3, #0]
   13f0e:	685b      	ldr	r3, [r3, #4]
   13f10:	f7fc fbcc 	bl	106ac <__aeabi_dmul>
   13f14:	1124      	asrs	r4, r4, #4
   13f16:	0006      	movs	r6, r0
   13f18:	000f      	movs	r7, r1
   13f1a:	2c00      	cmp	r4, #0
   13f1c:	d100      	bne.n	13f20 <_dtoa_r+0xcac>
   13f1e:	e149      	b.n	141b4 <_dtoa_r+0xf40>
   13f20:	2302      	movs	r3, #2
   13f22:	4698      	mov	r8, r3
   13f24:	4d1f      	ldr	r5, [pc, #124]	; (13fa4 <_dtoa_r+0xd30>)
   13f26:	2301      	movs	r3, #1
   13f28:	4223      	tst	r3, r4
   13f2a:	d009      	beq.n	13f40 <_dtoa_r+0xccc>
   13f2c:	469c      	mov	ip, r3
   13f2e:	682a      	ldr	r2, [r5, #0]
   13f30:	686b      	ldr	r3, [r5, #4]
   13f32:	0030      	movs	r0, r6
   13f34:	0039      	movs	r1, r7
   13f36:	44e0      	add	r8, ip
   13f38:	f7fc fbb8 	bl	106ac <__aeabi_dmul>
   13f3c:	0006      	movs	r6, r0
   13f3e:	000f      	movs	r7, r1
   13f40:	1064      	asrs	r4, r4, #1
   13f42:	3508      	adds	r5, #8
   13f44:	2c00      	cmp	r4, #0
   13f46:	d1ee      	bne.n	13f26 <_dtoa_r+0xcb2>
   13f48:	f7ff fae4 	bl	13514 <_dtoa_r+0x2a0>
   13f4c:	9b03      	ldr	r3, [sp, #12]
   13f4e:	2730      	movs	r7, #48	; 0x30
   13f50:	3301      	adds	r3, #1
   13f52:	9303      	str	r3, [sp, #12]
   13f54:	2330      	movs	r3, #48	; 0x30
   13f56:	702b      	strb	r3, [r5, #0]
   13f58:	e4ac      	b.n	138b4 <_dtoa_r+0x640>
   13f5a:	6859      	ldr	r1, [r3, #4]
   13f5c:	4650      	mov	r0, sl
   13f5e:	f001 f991 	bl	15284 <_Balloc>
   13f62:	4643      	mov	r3, r8
   13f64:	4641      	mov	r1, r8
   13f66:	0004      	movs	r4, r0
   13f68:	691b      	ldr	r3, [r3, #16]
   13f6a:	310c      	adds	r1, #12
   13f6c:	1c9a      	adds	r2, r3, #2
   13f6e:	0092      	lsls	r2, r2, #2
   13f70:	300c      	adds	r0, #12
   13f72:	f7fd fa7f 	bl	11474 <memcpy>
   13f76:	2201      	movs	r2, #1
   13f78:	0021      	movs	r1, r4
   13f7a:	4650      	mov	r0, sl
   13f7c:	f001 fb56 	bl	1562c <__lshift>
   13f80:	900c      	str	r0, [sp, #48]	; 0x30
   13f82:	e599      	b.n	13ab8 <_dtoa_r+0x844>
   13f84:	2300      	movs	r3, #0
   13f86:	4699      	mov	r9, r3
   13f88:	4698      	mov	r8, r3
   13f8a:	e70c      	b.n	13da6 <_dtoa_r+0xb32>
   13f8c:	7ff00000 	.word	0x7ff00000
   13f90:	40140000 	.word	0x40140000
   13f94:	00000433 	.word	0x00000433
   13f98:	401c0000 	.word	0x401c0000
   13f9c:	fcc00000 	.word	0xfcc00000
   13fa0:	000179b8 	.word	0x000179b8
   13fa4:	00017990 	.word	0x00017990
   13fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13faa:	498f      	ldr	r1, [pc, #572]	; (141e8 <_dtoa_r+0xf74>)
   13fac:	3b01      	subs	r3, #1
   13fae:	00db      	lsls	r3, r3, #3
   13fb0:	18c9      	adds	r1, r1, r3
   13fb2:	6808      	ldr	r0, [r1, #0]
   13fb4:	6849      	ldr	r1, [r1, #4]
   13fb6:	9a08      	ldr	r2, [sp, #32]
   13fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13fba:	f7fc fb77 	bl	106ac <__aeabi_dmul>
   13fbe:	9014      	str	r0, [sp, #80]	; 0x50
   13fc0:	9115      	str	r1, [sp, #84]	; 0x54
   13fc2:	0039      	movs	r1, r7
   13fc4:	0030      	movs	r0, r6
   13fc6:	f7fd f907 	bl	111d8 <__aeabi_d2iz>
   13fca:	0005      	movs	r5, r0
   13fcc:	f7fd f938 	bl	11240 <__aeabi_i2d>
   13fd0:	0002      	movs	r2, r0
   13fd2:	000b      	movs	r3, r1
   13fd4:	0030      	movs	r0, r6
   13fd6:	0039      	movs	r1, r7
   13fd8:	f7fc fde8 	bl	10bac <__aeabi_dsub>
   13fdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13fde:	9008      	str	r0, [sp, #32]
   13fe0:	9109      	str	r1, [sp, #36]	; 0x24
   13fe2:	990a      	ldr	r1, [sp, #40]	; 0x28
   13fe4:	001a      	movs	r2, r3
   13fe6:	468c      	mov	ip, r1
   13fe8:	3530      	adds	r5, #48	; 0x30
   13fea:	4462      	add	r2, ip
   13fec:	1c4c      	adds	r4, r1, #1
   13fee:	700d      	strb	r5, [r1, #0]
   13ff0:	4690      	mov	r8, r2
   13ff2:	2b01      	cmp	r3, #1
   13ff4:	d01b      	beq.n	1402e <_dtoa_r+0xdba>
   13ff6:	9808      	ldr	r0, [sp, #32]
   13ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
   13ffa:	0025      	movs	r5, r4
   13ffc:	2200      	movs	r2, #0
   13ffe:	4b7b      	ldr	r3, [pc, #492]	; (141ec <_dtoa_r+0xf78>)
   14000:	f7fc fb54 	bl	106ac <__aeabi_dmul>
   14004:	000f      	movs	r7, r1
   14006:	0006      	movs	r6, r0
   14008:	f7fd f8e6 	bl	111d8 <__aeabi_d2iz>
   1400c:	0004      	movs	r4, r0
   1400e:	f7fd f917 	bl	11240 <__aeabi_i2d>
   14012:	3430      	adds	r4, #48	; 0x30
   14014:	0002      	movs	r2, r0
   14016:	000b      	movs	r3, r1
   14018:	0030      	movs	r0, r6
   1401a:	0039      	movs	r1, r7
   1401c:	f7fc fdc6 	bl	10bac <__aeabi_dsub>
   14020:	702c      	strb	r4, [r5, #0]
   14022:	3501      	adds	r5, #1
   14024:	45a8      	cmp	r8, r5
   14026:	d1e9      	bne.n	13ffc <_dtoa_r+0xd88>
   14028:	4644      	mov	r4, r8
   1402a:	9008      	str	r0, [sp, #32]
   1402c:	9109      	str	r1, [sp, #36]	; 0x24
   1402e:	9814      	ldr	r0, [sp, #80]	; 0x50
   14030:	9915      	ldr	r1, [sp, #84]	; 0x54
   14032:	2200      	movs	r2, #0
   14034:	4b6e      	ldr	r3, [pc, #440]	; (141f0 <_dtoa_r+0xf7c>)
   14036:	f7fb fbf5 	bl	f824 <__aeabi_dadd>
   1403a:	9a08      	ldr	r2, [sp, #32]
   1403c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1403e:	f7fa fb3b 	bl	e6b8 <__aeabi_dcmplt>
   14042:	2800      	cmp	r0, #0
   14044:	d067      	beq.n	14116 <_dtoa_r+0xea2>
   14046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14048:	1e65      	subs	r5, r4, #1
   1404a:	9303      	str	r3, [sp, #12]
   1404c:	782f      	ldrb	r7, [r5, #0]
   1404e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14050:	e42e      	b.n	138b0 <_dtoa_r+0x63c>
   14052:	4643      	mov	r3, r8
   14054:	46b3      	mov	fp, r6
   14056:	930c      	str	r3, [sp, #48]	; 0x30
   14058:	9e04      	ldr	r6, [sp, #16]
   1405a:	9b06      	ldr	r3, [sp, #24]
   1405c:	46a8      	mov	r8, r5
   1405e:	4699      	mov	r9, r3
   14060:	4655      	mov	r5, sl
   14062:	46ba      	mov	sl, r7
   14064:	2e39      	cmp	r6, #57	; 0x39
   14066:	d04d      	beq.n	14104 <_dtoa_r+0xe90>
   14068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1406a:	3601      	adds	r6, #1
   1406c:	4647      	mov	r7, r8
   1406e:	1c6c      	adds	r4, r5, #1
   14070:	702e      	strb	r6, [r5, #0]
   14072:	4698      	mov	r8, r3
   14074:	e5f5      	b.n	13c62 <_dtoa_r+0x9ee>
   14076:	4642      	mov	r2, r8
   14078:	9b06      	ldr	r3, [sp, #24]
   1407a:	46b3      	mov	fp, r6
   1407c:	46ba      	mov	sl, r7
   1407e:	9e04      	ldr	r6, [sp, #16]
   14080:	4699      	mov	r9, r3
   14082:	002f      	movs	r7, r5
   14084:	4690      	mov	r8, r2
   14086:	e5d1      	b.n	13c2c <_dtoa_r+0x9b8>
   14088:	9b06      	ldr	r3, [sp, #24]
   1408a:	9a07      	ldr	r2, [sp, #28]
   1408c:	1a9b      	subs	r3, r3, r2
   1408e:	9308      	str	r3, [sp, #32]
   14090:	2300      	movs	r3, #0
   14092:	e427      	b.n	138e4 <_dtoa_r+0x670>
   14094:	2401      	movs	r4, #1
   14096:	e5c5      	b.n	13c24 <_dtoa_r+0x9b0>
   14098:	2336      	movs	r3, #54	; 0x36
   1409a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1409c:	464c      	mov	r4, r9
   1409e:	1a9b      	subs	r3, r3, r2
   140a0:	9a06      	ldr	r2, [sp, #24]
   140a2:	9208      	str	r2, [sp, #32]
   140a4:	e41e      	b.n	138e4 <_dtoa_r+0x670>
   140a6:	2302      	movs	r3, #2
   140a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   140aa:	9f11      	ldr	r7, [sp, #68]	; 0x44
   140ac:	4698      	mov	r8, r3
   140ae:	f7ff fa31 	bl	13514 <_dtoa_r+0x2a0>
   140b2:	9b07      	ldr	r3, [sp, #28]
   140b4:	2b00      	cmp	r3, #0
   140b6:	d100      	bne.n	140ba <_dtoa_r+0xe46>
   140b8:	e68e      	b.n	13dd8 <_dtoa_r+0xb64>
   140ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   140bc:	2c00      	cmp	r4, #0
   140be:	dc00      	bgt.n	140c2 <_dtoa_r+0xe4e>
   140c0:	e712      	b.n	13ee8 <_dtoa_r+0xc74>
   140c2:	9b03      	ldr	r3, [sp, #12]
   140c4:	2200      	movs	r2, #0
   140c6:	3b01      	subs	r3, #1
   140c8:	9313      	str	r3, [sp, #76]	; 0x4c
   140ca:	0030      	movs	r0, r6
   140cc:	4b47      	ldr	r3, [pc, #284]	; (141ec <_dtoa_r+0xf78>)
   140ce:	0039      	movs	r1, r7
   140d0:	f7fc faec 	bl	106ac <__aeabi_dmul>
   140d4:	0006      	movs	r6, r0
   140d6:	4640      	mov	r0, r8
   140d8:	000f      	movs	r7, r1
   140da:	3001      	adds	r0, #1
   140dc:	f7fd f8b0 	bl	11240 <__aeabi_i2d>
   140e0:	0032      	movs	r2, r6
   140e2:	003b      	movs	r3, r7
   140e4:	f7fc fae2 	bl	106ac <__aeabi_dmul>
   140e8:	2200      	movs	r2, #0
   140ea:	4b42      	ldr	r3, [pc, #264]	; (141f4 <_dtoa_r+0xf80>)
   140ec:	f7fb fb9a 	bl	f824 <__aeabi_dadd>
   140f0:	4a41      	ldr	r2, [pc, #260]	; (141f8 <_dtoa_r+0xf84>)
   140f2:	000b      	movs	r3, r1
   140f4:	4694      	mov	ip, r2
   140f6:	4463      	add	r3, ip
   140f8:	9008      	str	r0, [sp, #32]
   140fa:	9109      	str	r1, [sp, #36]	; 0x24
   140fc:	9412      	str	r4, [sp, #72]	; 0x48
   140fe:	9309      	str	r3, [sp, #36]	; 0x24
   14100:	f7ff fa30 	bl	13564 <_dtoa_r+0x2f0>
   14104:	2339      	movs	r3, #57	; 0x39
   14106:	702b      	strb	r3, [r5, #0]
   14108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1410a:	4647      	mov	r7, r8
   1410c:	1c6c      	adds	r4, r5, #1
   1410e:	4698      	mov	r8, r3
   14110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14112:	2339      	movs	r3, #57	; 0x39
   14114:	e5a1      	b.n	13c5a <_dtoa_r+0x9e6>
   14116:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14118:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1411a:	2000      	movs	r0, #0
   1411c:	4934      	ldr	r1, [pc, #208]	; (141f0 <_dtoa_r+0xf7c>)
   1411e:	f7fc fd45 	bl	10bac <__aeabi_dsub>
   14122:	9a08      	ldr	r2, [sp, #32]
   14124:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14126:	f7fa fadb 	bl	e6e0 <__aeabi_dcmpgt>
   1412a:	2800      	cmp	r0, #0
   1412c:	d101      	bne.n	14132 <_dtoa_r+0xebe>
   1412e:	e6db      	b.n	13ee8 <_dtoa_r+0xc74>
   14130:	001c      	movs	r4, r3
   14132:	1e63      	subs	r3, r4, #1
   14134:	781a      	ldrb	r2, [r3, #0]
   14136:	2a30      	cmp	r2, #48	; 0x30
   14138:	d0fa      	beq.n	14130 <_dtoa_r+0xebc>
   1413a:	f7ff fac8 	bl	136ce <_dtoa_r+0x45a>
   1413e:	4643      	mov	r3, r8
   14140:	46b3      	mov	fp, r6
   14142:	930c      	str	r3, [sp, #48]	; 0x30
   14144:	9e04      	ldr	r6, [sp, #16]
   14146:	9b06      	ldr	r3, [sp, #24]
   14148:	46a8      	mov	r8, r5
   1414a:	4699      	mov	r9, r3
   1414c:	4655      	mov	r5, sl
   1414e:	46ba      	mov	sl, r7
   14150:	2e39      	cmp	r6, #57	; 0x39
   14152:	d0d7      	beq.n	14104 <_dtoa_r+0xe90>
   14154:	2c00      	cmp	r4, #0
   14156:	dd00      	ble.n	1415a <_dtoa_r+0xee6>
   14158:	e6b1      	b.n	13ebe <_dtoa_r+0xc4a>
   1415a:	e6b2      	b.n	13ec2 <_dtoa_r+0xc4e>
   1415c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1415e:	464d      	mov	r5, r9
   14160:	9203      	str	r2, [sp, #12]
   14162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14164:	f7ff fba4 	bl	138b0 <_dtoa_r+0x63c>
   14168:	2800      	cmp	r0, #0
   1416a:	d000      	beq.n	1416e <_dtoa_r+0xefa>
   1416c:	e6a9      	b.n	13ec2 <_dtoa_r+0xc4e>
   1416e:	07f3      	lsls	r3, r6, #31
   14170:	d400      	bmi.n	14174 <_dtoa_r+0xf00>
   14172:	e6a6      	b.n	13ec2 <_dtoa_r+0xc4e>
   14174:	e6a0      	b.n	13eb8 <_dtoa_r+0xc44>
   14176:	2300      	movs	r3, #0
   14178:	4641      	mov	r1, r8
   1417a:	220a      	movs	r2, #10
   1417c:	4650      	mov	r0, sl
   1417e:	f001 f8b3 	bl	152e8 <__multadd>
   14182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14184:	4680      	mov	r8, r0
   14186:	2b00      	cmp	r3, #0
   14188:	dd01      	ble.n	1418e <_dtoa_r+0xf1a>
   1418a:	9307      	str	r3, [sp, #28]
   1418c:	e486      	b.n	13a9c <_dtoa_r+0x828>
   1418e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14190:	2b02      	cmp	r3, #2
   14192:	dc1f      	bgt.n	141d4 <_dtoa_r+0xf60>
   14194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14196:	9307      	str	r3, [sp, #28]
   14198:	e480      	b.n	13a9c <_dtoa_r+0x828>
   1419a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1419c:	2b02      	cmp	r3, #2
   1419e:	dc19      	bgt.n	141d4 <_dtoa_r+0xf60>
   141a0:	4649      	mov	r1, r9
   141a2:	f7fe ffbd 	bl	13120 <quorem>
   141a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141a8:	3030      	adds	r0, #48	; 0x30
   141aa:	7018      	strb	r0, [r3, #0]
   141ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141ae:	0006      	movs	r6, r0
   141b0:	9307      	str	r3, [sp, #28]
   141b2:	e533      	b.n	13c1c <_dtoa_r+0x9a8>
   141b4:	2302      	movs	r3, #2
   141b6:	4698      	mov	r8, r3
   141b8:	f7ff f9ac 	bl	13514 <_dtoa_r+0x2a0>
   141bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   141be:	9c14      	ldr	r4, [sp, #80]	; 0x50
   141c0:	9303      	str	r3, [sp, #12]
   141c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141c4:	001d      	movs	r5, r3
   141c6:	f7ff fb73 	bl	138b0 <_dtoa_r+0x63c>
   141ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   141cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
   141ce:	9303      	str	r3, [sp, #12]
   141d0:	f7ff fa7f 	bl	136d2 <_dtoa_r+0x45e>
   141d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141d6:	9307      	str	r3, [sp, #28]
   141d8:	e5d6      	b.n	13d88 <_dtoa_r+0xb14>
   141da:	2b04      	cmp	r3, #4
   141dc:	d100      	bne.n	141e0 <_dtoa_r+0xf6c>
   141de:	e43f      	b.n	13a60 <_dtoa_r+0x7ec>
   141e0:	233c      	movs	r3, #60	; 0x3c
   141e2:	1a18      	subs	r0, r3, r0
   141e4:	e4d7      	b.n	13b96 <_dtoa_r+0x922>
   141e6:	46c0      	nop			; (mov r8, r8)
   141e8:	000179b8 	.word	0x000179b8
   141ec:	40240000 	.word	0x40240000
   141f0:	3fe00000 	.word	0x3fe00000
   141f4:	401c0000 	.word	0x401c0000
   141f8:	fcc00000 	.word	0xfcc00000

000141fc <__sflush_r>:
   141fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   141fe:	46c6      	mov	lr, r8
   14200:	b500      	push	{lr}
   14202:	230c      	movs	r3, #12
   14204:	5eca      	ldrsh	r2, [r1, r3]
   14206:	4680      	mov	r8, r0
   14208:	b293      	uxth	r3, r2
   1420a:	000c      	movs	r4, r1
   1420c:	0719      	lsls	r1, r3, #28
   1420e:	d440      	bmi.n	14292 <__sflush_r+0x96>
   14210:	2380      	movs	r3, #128	; 0x80
   14212:	011b      	lsls	r3, r3, #4
   14214:	4313      	orrs	r3, r2
   14216:	6862      	ldr	r2, [r4, #4]
   14218:	81a3      	strh	r3, [r4, #12]
   1421a:	2a00      	cmp	r2, #0
   1421c:	dc00      	bgt.n	14220 <__sflush_r+0x24>
   1421e:	e070      	b.n	14302 <__sflush_r+0x106>
   14220:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14222:	2e00      	cmp	r6, #0
   14224:	d031      	beq.n	1428a <__sflush_r+0x8e>
   14226:	4642      	mov	r2, r8
   14228:	4641      	mov	r1, r8
   1422a:	6815      	ldr	r5, [r2, #0]
   1422c:	2200      	movs	r2, #0
   1422e:	b29b      	uxth	r3, r3
   14230:	600a      	str	r2, [r1, #0]
   14232:	04da      	lsls	r2, r3, #19
   14234:	d400      	bmi.n	14238 <__sflush_r+0x3c>
   14236:	e069      	b.n	1430c <__sflush_r+0x110>
   14238:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1423a:	075b      	lsls	r3, r3, #29
   1423c:	d506      	bpl.n	1424c <__sflush_r+0x50>
   1423e:	6863      	ldr	r3, [r4, #4]
   14240:	1ad2      	subs	r2, r2, r3
   14242:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14244:	2b00      	cmp	r3, #0
   14246:	d001      	beq.n	1424c <__sflush_r+0x50>
   14248:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1424a:	1ad2      	subs	r2, r2, r3
   1424c:	2300      	movs	r3, #0
   1424e:	69e1      	ldr	r1, [r4, #28]
   14250:	4640      	mov	r0, r8
   14252:	47b0      	blx	r6
   14254:	1c43      	adds	r3, r0, #1
   14256:	d03d      	beq.n	142d4 <__sflush_r+0xd8>
   14258:	89a3      	ldrh	r3, [r4, #12]
   1425a:	4a3a      	ldr	r2, [pc, #232]	; (14344 <__sflush_r+0x148>)
   1425c:	4013      	ands	r3, r2
   1425e:	2200      	movs	r2, #0
   14260:	6062      	str	r2, [r4, #4]
   14262:	6922      	ldr	r2, [r4, #16]
   14264:	b21b      	sxth	r3, r3
   14266:	81a3      	strh	r3, [r4, #12]
   14268:	6022      	str	r2, [r4, #0]
   1426a:	04db      	lsls	r3, r3, #19
   1426c:	d447      	bmi.n	142fe <__sflush_r+0x102>
   1426e:	4643      	mov	r3, r8
   14270:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14272:	601d      	str	r5, [r3, #0]
   14274:	2900      	cmp	r1, #0
   14276:	d008      	beq.n	1428a <__sflush_r+0x8e>
   14278:	0023      	movs	r3, r4
   1427a:	3340      	adds	r3, #64	; 0x40
   1427c:	4299      	cmp	r1, r3
   1427e:	d002      	beq.n	14286 <__sflush_r+0x8a>
   14280:	4640      	mov	r0, r8
   14282:	f000 f967 	bl	14554 <_free_r>
   14286:	2300      	movs	r3, #0
   14288:	6323      	str	r3, [r4, #48]	; 0x30
   1428a:	2000      	movs	r0, #0
   1428c:	bc04      	pop	{r2}
   1428e:	4690      	mov	r8, r2
   14290:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14292:	6926      	ldr	r6, [r4, #16]
   14294:	2e00      	cmp	r6, #0
   14296:	d0f8      	beq.n	1428a <__sflush_r+0x8e>
   14298:	6822      	ldr	r2, [r4, #0]
   1429a:	6026      	str	r6, [r4, #0]
   1429c:	1b95      	subs	r5, r2, r6
   1429e:	2200      	movs	r2, #0
   142a0:	079b      	lsls	r3, r3, #30
   142a2:	d100      	bne.n	142a6 <__sflush_r+0xaa>
   142a4:	6962      	ldr	r2, [r4, #20]
   142a6:	60a2      	str	r2, [r4, #8]
   142a8:	2d00      	cmp	r5, #0
   142aa:	dc04      	bgt.n	142b6 <__sflush_r+0xba>
   142ac:	e7ed      	b.n	1428a <__sflush_r+0x8e>
   142ae:	1836      	adds	r6, r6, r0
   142b0:	1a2d      	subs	r5, r5, r0
   142b2:	2d00      	cmp	r5, #0
   142b4:	dde9      	ble.n	1428a <__sflush_r+0x8e>
   142b6:	002b      	movs	r3, r5
   142b8:	0032      	movs	r2, r6
   142ba:	69e1      	ldr	r1, [r4, #28]
   142bc:	4640      	mov	r0, r8
   142be:	6a67      	ldr	r7, [r4, #36]	; 0x24
   142c0:	47b8      	blx	r7
   142c2:	2800      	cmp	r0, #0
   142c4:	dcf3      	bgt.n	142ae <__sflush_r+0xb2>
   142c6:	2240      	movs	r2, #64	; 0x40
   142c8:	2001      	movs	r0, #1
   142ca:	89a3      	ldrh	r3, [r4, #12]
   142cc:	4240      	negs	r0, r0
   142ce:	4313      	orrs	r3, r2
   142d0:	81a3      	strh	r3, [r4, #12]
   142d2:	e7db      	b.n	1428c <__sflush_r+0x90>
   142d4:	4643      	mov	r3, r8
   142d6:	6819      	ldr	r1, [r3, #0]
   142d8:	291d      	cmp	r1, #29
   142da:	d8f4      	bhi.n	142c6 <__sflush_r+0xca>
   142dc:	4b1a      	ldr	r3, [pc, #104]	; (14348 <__sflush_r+0x14c>)
   142de:	2201      	movs	r2, #1
   142e0:	40cb      	lsrs	r3, r1
   142e2:	439a      	bics	r2, r3
   142e4:	d1ef      	bne.n	142c6 <__sflush_r+0xca>
   142e6:	89a3      	ldrh	r3, [r4, #12]
   142e8:	4e16      	ldr	r6, [pc, #88]	; (14344 <__sflush_r+0x148>)
   142ea:	6062      	str	r2, [r4, #4]
   142ec:	4033      	ands	r3, r6
   142ee:	6922      	ldr	r2, [r4, #16]
   142f0:	b21b      	sxth	r3, r3
   142f2:	81a3      	strh	r3, [r4, #12]
   142f4:	6022      	str	r2, [r4, #0]
   142f6:	04db      	lsls	r3, r3, #19
   142f8:	d5b9      	bpl.n	1426e <__sflush_r+0x72>
   142fa:	2900      	cmp	r1, #0
   142fc:	d1b7      	bne.n	1426e <__sflush_r+0x72>
   142fe:	6520      	str	r0, [r4, #80]	; 0x50
   14300:	e7b5      	b.n	1426e <__sflush_r+0x72>
   14302:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   14304:	2a00      	cmp	r2, #0
   14306:	dd00      	ble.n	1430a <__sflush_r+0x10e>
   14308:	e78a      	b.n	14220 <__sflush_r+0x24>
   1430a:	e7be      	b.n	1428a <__sflush_r+0x8e>
   1430c:	2200      	movs	r2, #0
   1430e:	2301      	movs	r3, #1
   14310:	69e1      	ldr	r1, [r4, #28]
   14312:	4640      	mov	r0, r8
   14314:	47b0      	blx	r6
   14316:	0002      	movs	r2, r0
   14318:	1c43      	adds	r3, r0, #1
   1431a:	d002      	beq.n	14322 <__sflush_r+0x126>
   1431c:	89a3      	ldrh	r3, [r4, #12]
   1431e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14320:	e78b      	b.n	1423a <__sflush_r+0x3e>
   14322:	4643      	mov	r3, r8
   14324:	681b      	ldr	r3, [r3, #0]
   14326:	2b00      	cmp	r3, #0
   14328:	d0f8      	beq.n	1431c <__sflush_r+0x120>
   1432a:	2b1d      	cmp	r3, #29
   1432c:	d001      	beq.n	14332 <__sflush_r+0x136>
   1432e:	2b16      	cmp	r3, #22
   14330:	d103      	bne.n	1433a <__sflush_r+0x13e>
   14332:	4643      	mov	r3, r8
   14334:	2000      	movs	r0, #0
   14336:	601d      	str	r5, [r3, #0]
   14338:	e7a8      	b.n	1428c <__sflush_r+0x90>
   1433a:	2140      	movs	r1, #64	; 0x40
   1433c:	89a3      	ldrh	r3, [r4, #12]
   1433e:	430b      	orrs	r3, r1
   14340:	81a3      	strh	r3, [r4, #12]
   14342:	e7a3      	b.n	1428c <__sflush_r+0x90>
   14344:	fffff7ff 	.word	0xfffff7ff
   14348:	20400001 	.word	0x20400001

0001434c <_fflush_r>:
   1434c:	b570      	push	{r4, r5, r6, lr}
   1434e:	0005      	movs	r5, r0
   14350:	000c      	movs	r4, r1
   14352:	2800      	cmp	r0, #0
   14354:	d002      	beq.n	1435c <_fflush_r+0x10>
   14356:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14358:	2b00      	cmp	r3, #0
   1435a:	d016      	beq.n	1438a <_fflush_r+0x3e>
   1435c:	220c      	movs	r2, #12
   1435e:	5ea3      	ldrsh	r3, [r4, r2]
   14360:	2600      	movs	r6, #0
   14362:	2b00      	cmp	r3, #0
   14364:	d00f      	beq.n	14386 <_fflush_r+0x3a>
   14366:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14368:	07d2      	lsls	r2, r2, #31
   1436a:	d401      	bmi.n	14370 <_fflush_r+0x24>
   1436c:	059b      	lsls	r3, r3, #22
   1436e:	d513      	bpl.n	14398 <_fflush_r+0x4c>
   14370:	0021      	movs	r1, r4
   14372:	0028      	movs	r0, r5
   14374:	f7ff ff42 	bl	141fc <__sflush_r>
   14378:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1437a:	0006      	movs	r6, r0
   1437c:	07db      	lsls	r3, r3, #31
   1437e:	d402      	bmi.n	14386 <_fflush_r+0x3a>
   14380:	89a3      	ldrh	r3, [r4, #12]
   14382:	059b      	lsls	r3, r3, #22
   14384:	d504      	bpl.n	14390 <_fflush_r+0x44>
   14386:	0030      	movs	r0, r6
   14388:	bd70      	pop	{r4, r5, r6, pc}
   1438a:	f000 f839 	bl	14400 <__sinit>
   1438e:	e7e5      	b.n	1435c <_fflush_r+0x10>
   14390:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14392:	f000 fb89 	bl	14aa8 <__retarget_lock_release_recursive>
   14396:	e7f6      	b.n	14386 <_fflush_r+0x3a>
   14398:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1439a:	f000 fb83 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1439e:	e7e7      	b.n	14370 <_fflush_r+0x24>

000143a0 <_cleanup_r>:
   143a0:	b510      	push	{r4, lr}
   143a2:	4902      	ldr	r1, [pc, #8]	; (143ac <_cleanup_r+0xc>)
   143a4:	f000 fb36 	bl	14a14 <_fwalk_reent>
   143a8:	bd10      	pop	{r4, pc}
   143aa:	46c0      	nop			; (mov r8, r8)
   143ac:	00015f9d 	.word	0x00015f9d

000143b0 <std.isra.0>:
   143b0:	2300      	movs	r3, #0
   143b2:	b510      	push	{r4, lr}
   143b4:	0004      	movs	r4, r0
   143b6:	6003      	str	r3, [r0, #0]
   143b8:	6043      	str	r3, [r0, #4]
   143ba:	6083      	str	r3, [r0, #8]
   143bc:	8181      	strh	r1, [r0, #12]
   143be:	6643      	str	r3, [r0, #100]	; 0x64
   143c0:	81c2      	strh	r2, [r0, #14]
   143c2:	6103      	str	r3, [r0, #16]
   143c4:	6143      	str	r3, [r0, #20]
   143c6:	6183      	str	r3, [r0, #24]
   143c8:	2208      	movs	r2, #8
   143ca:	2100      	movs	r1, #0
   143cc:	305c      	adds	r0, #92	; 0x5c
   143ce:	f7fd f893 	bl	114f8 <memset>
   143d2:	0020      	movs	r0, r4
   143d4:	4b06      	ldr	r3, [pc, #24]	; (143f0 <std.isra.0+0x40>)
   143d6:	61e4      	str	r4, [r4, #28]
   143d8:	6223      	str	r3, [r4, #32]
   143da:	4b06      	ldr	r3, [pc, #24]	; (143f4 <std.isra.0+0x44>)
   143dc:	3058      	adds	r0, #88	; 0x58
   143de:	6263      	str	r3, [r4, #36]	; 0x24
   143e0:	4b05      	ldr	r3, [pc, #20]	; (143f8 <std.isra.0+0x48>)
   143e2:	62a3      	str	r3, [r4, #40]	; 0x28
   143e4:	4b05      	ldr	r3, [pc, #20]	; (143fc <std.isra.0+0x4c>)
   143e6:	62e3      	str	r3, [r4, #44]	; 0x2c
   143e8:	f000 fb58 	bl	14a9c <__retarget_lock_init_recursive>
   143ec:	bd10      	pop	{r4, pc}
   143ee:	46c0      	nop			; (mov r8, r8)
   143f0:	00015cb5 	.word	0x00015cb5
   143f4:	00015cdd 	.word	0x00015cdd
   143f8:	00015d19 	.word	0x00015d19
   143fc:	00015d45 	.word	0x00015d45

00014400 <__sinit>:
   14400:	b570      	push	{r4, r5, r6, lr}
   14402:	0004      	movs	r4, r0
   14404:	4d14      	ldr	r5, [pc, #80]	; (14458 <__sinit+0x58>)
   14406:	0028      	movs	r0, r5
   14408:	f000 fb4c 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1440c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1440e:	2b00      	cmp	r3, #0
   14410:	d11d      	bne.n	1444e <__sinit+0x4e>
   14412:	4a12      	ldr	r2, [pc, #72]	; (1445c <__sinit+0x5c>)
   14414:	2104      	movs	r1, #4
   14416:	63e2      	str	r2, [r4, #60]	; 0x3c
   14418:	22b8      	movs	r2, #184	; 0xb8
   1441a:	0092      	lsls	r2, r2, #2
   1441c:	50a3      	str	r3, [r4, r2]
   1441e:	23b9      	movs	r3, #185	; 0xb9
   14420:	2203      	movs	r2, #3
   14422:	009b      	lsls	r3, r3, #2
   14424:	50e2      	str	r2, [r4, r3]
   14426:	3308      	adds	r3, #8
   14428:	18e2      	adds	r2, r4, r3
   1442a:	3b04      	subs	r3, #4
   1442c:	50e2      	str	r2, [r4, r3]
   1442e:	6860      	ldr	r0, [r4, #4]
   14430:	2200      	movs	r2, #0
   14432:	f7ff ffbd 	bl	143b0 <std.isra.0>
   14436:	2201      	movs	r2, #1
   14438:	2109      	movs	r1, #9
   1443a:	68a0      	ldr	r0, [r4, #8]
   1443c:	f7ff ffb8 	bl	143b0 <std.isra.0>
   14440:	2202      	movs	r2, #2
   14442:	2112      	movs	r1, #18
   14444:	68e0      	ldr	r0, [r4, #12]
   14446:	f7ff ffb3 	bl	143b0 <std.isra.0>
   1444a:	2301      	movs	r3, #1
   1444c:	63a3      	str	r3, [r4, #56]	; 0x38
   1444e:	0028      	movs	r0, r5
   14450:	f000 fb2a 	bl	14aa8 <__retarget_lock_release_recursive>
   14454:	bd70      	pop	{r4, r5, r6, pc}
   14456:	46c0      	nop			; (mov r8, r8)
   14458:	20001908 	.word	0x20001908
   1445c:	000143a1 	.word	0x000143a1

00014460 <__sfp_lock_acquire>:
   14460:	b510      	push	{r4, lr}
   14462:	4802      	ldr	r0, [pc, #8]	; (1446c <__sfp_lock_acquire+0xc>)
   14464:	f000 fb1e 	bl	14aa4 <__retarget_lock_acquire_recursive>
   14468:	bd10      	pop	{r4, pc}
   1446a:	46c0      	nop			; (mov r8, r8)
   1446c:	2000191c 	.word	0x2000191c

00014470 <__sfp_lock_release>:
   14470:	b510      	push	{r4, lr}
   14472:	4802      	ldr	r0, [pc, #8]	; (1447c <__sfp_lock_release+0xc>)
   14474:	f000 fb18 	bl	14aa8 <__retarget_lock_release_recursive>
   14478:	bd10      	pop	{r4, pc}
   1447a:	46c0      	nop			; (mov r8, r8)
   1447c:	2000191c 	.word	0x2000191c

00014480 <__libc_fini_array>:
   14480:	b570      	push	{r4, r5, r6, lr}
   14482:	4b09      	ldr	r3, [pc, #36]	; (144a8 <__libc_fini_array+0x28>)
   14484:	4c09      	ldr	r4, [pc, #36]	; (144ac <__libc_fini_array+0x2c>)
   14486:	1ae4      	subs	r4, r4, r3
   14488:	10a4      	asrs	r4, r4, #2
   1448a:	d009      	beq.n	144a0 <__libc_fini_array+0x20>
   1448c:	4a08      	ldr	r2, [pc, #32]	; (144b0 <__libc_fini_array+0x30>)
   1448e:	18a5      	adds	r5, r4, r2
   14490:	00ad      	lsls	r5, r5, #2
   14492:	18ed      	adds	r5, r5, r3
   14494:	682b      	ldr	r3, [r5, #0]
   14496:	3c01      	subs	r4, #1
   14498:	4798      	blx	r3
   1449a:	3d04      	subs	r5, #4
   1449c:	2c00      	cmp	r4, #0
   1449e:	d1f9      	bne.n	14494 <__libc_fini_array+0x14>
   144a0:	f003 fb80 	bl	17ba4 <_fini>
   144a4:	bd70      	pop	{r4, r5, r6, pc}
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	00017bb0 	.word	0x00017bb0
   144ac:	00017bb4 	.word	0x00017bb4
   144b0:	3fffffff 	.word	0x3fffffff

000144b4 <_malloc_trim_r>:
   144b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   144b6:	000c      	movs	r4, r1
   144b8:	0006      	movs	r6, r0
   144ba:	f000 fed3 	bl	15264 <__malloc_lock>
   144be:	4f20      	ldr	r7, [pc, #128]	; (14540 <_malloc_trim_r+0x8c>)
   144c0:	68bb      	ldr	r3, [r7, #8]
   144c2:	685d      	ldr	r5, [r3, #4]
   144c4:	2303      	movs	r3, #3
   144c6:	439d      	bics	r5, r3
   144c8:	4b1e      	ldr	r3, [pc, #120]	; (14544 <_malloc_trim_r+0x90>)
   144ca:	1b2c      	subs	r4, r5, r4
   144cc:	469c      	mov	ip, r3
   144ce:	4464      	add	r4, ip
   144d0:	0b24      	lsrs	r4, r4, #12
   144d2:	4b1d      	ldr	r3, [pc, #116]	; (14548 <_malloc_trim_r+0x94>)
   144d4:	3c01      	subs	r4, #1
   144d6:	0324      	lsls	r4, r4, #12
   144d8:	429c      	cmp	r4, r3
   144da:	dd07      	ble.n	144ec <_malloc_trim_r+0x38>
   144dc:	2100      	movs	r1, #0
   144de:	0030      	movs	r0, r6
   144e0:	f001 fbd6 	bl	15c90 <_sbrk_r>
   144e4:	68bb      	ldr	r3, [r7, #8]
   144e6:	195b      	adds	r3, r3, r5
   144e8:	4298      	cmp	r0, r3
   144ea:	d004      	beq.n	144f6 <_malloc_trim_r+0x42>
   144ec:	0030      	movs	r0, r6
   144ee:	f000 fec1 	bl	15274 <__malloc_unlock>
   144f2:	2000      	movs	r0, #0
   144f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144f6:	4261      	negs	r1, r4
   144f8:	0030      	movs	r0, r6
   144fa:	f001 fbc9 	bl	15c90 <_sbrk_r>
   144fe:	1c43      	adds	r3, r0, #1
   14500:	d00d      	beq.n	1451e <_malloc_trim_r+0x6a>
   14502:	2201      	movs	r2, #1
   14504:	68bb      	ldr	r3, [r7, #8]
   14506:	1b2d      	subs	r5, r5, r4
   14508:	4315      	orrs	r5, r2
   1450a:	605d      	str	r5, [r3, #4]
   1450c:	4b0f      	ldr	r3, [pc, #60]	; (1454c <_malloc_trim_r+0x98>)
   1450e:	0030      	movs	r0, r6
   14510:	681a      	ldr	r2, [r3, #0]
   14512:	1b14      	subs	r4, r2, r4
   14514:	601c      	str	r4, [r3, #0]
   14516:	f000 fead 	bl	15274 <__malloc_unlock>
   1451a:	2001      	movs	r0, #1
   1451c:	e7ea      	b.n	144f4 <_malloc_trim_r+0x40>
   1451e:	2100      	movs	r1, #0
   14520:	0030      	movs	r0, r6
   14522:	f001 fbb5 	bl	15c90 <_sbrk_r>
   14526:	68ba      	ldr	r2, [r7, #8]
   14528:	1a83      	subs	r3, r0, r2
   1452a:	2b0f      	cmp	r3, #15
   1452c:	ddde      	ble.n	144ec <_malloc_trim_r+0x38>
   1452e:	4908      	ldr	r1, [pc, #32]	; (14550 <_malloc_trim_r+0x9c>)
   14530:	6809      	ldr	r1, [r1, #0]
   14532:	1a40      	subs	r0, r0, r1
   14534:	4905      	ldr	r1, [pc, #20]	; (1454c <_malloc_trim_r+0x98>)
   14536:	6008      	str	r0, [r1, #0]
   14538:	2101      	movs	r1, #1
   1453a:	430b      	orrs	r3, r1
   1453c:	6053      	str	r3, [r2, #4]
   1453e:	e7d5      	b.n	144ec <_malloc_trim_r+0x38>
   14540:	20000618 	.word	0x20000618
   14544:	00000fef 	.word	0x00000fef
   14548:	00000fff 	.word	0x00000fff
   1454c:	20000ed0 	.word	0x20000ed0
   14550:	20000a20 	.word	0x20000a20

00014554 <_free_r>:
   14554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14556:	0004      	movs	r4, r0
   14558:	1e0d      	subs	r5, r1, #0
   1455a:	d03c      	beq.n	145d6 <_free_r+0x82>
   1455c:	f000 fe82 	bl	15264 <__malloc_lock>
   14560:	0029      	movs	r1, r5
   14562:	3908      	subs	r1, #8
   14564:	6848      	ldr	r0, [r1, #4]
   14566:	2301      	movs	r3, #1
   14568:	0005      	movs	r5, r0
   1456a:	2603      	movs	r6, #3
   1456c:	439d      	bics	r5, r3
   1456e:	194a      	adds	r2, r1, r5
   14570:	469c      	mov	ip, r3
   14572:	4f61      	ldr	r7, [pc, #388]	; (146f8 <_free_r+0x1a4>)
   14574:	6853      	ldr	r3, [r2, #4]
   14576:	43b3      	bics	r3, r6
   14578:	68be      	ldr	r6, [r7, #8]
   1457a:	42b2      	cmp	r2, r6
   1457c:	d056      	beq.n	1462c <_free_r+0xd8>
   1457e:	4666      	mov	r6, ip
   14580:	6053      	str	r3, [r2, #4]
   14582:	4206      	tst	r6, r0
   14584:	d10a      	bne.n	1459c <_free_r+0x48>
   14586:	003e      	movs	r6, r7
   14588:	6808      	ldr	r0, [r1, #0]
   1458a:	3608      	adds	r6, #8
   1458c:	1a09      	subs	r1, r1, r0
   1458e:	182d      	adds	r5, r5, r0
   14590:	6888      	ldr	r0, [r1, #8]
   14592:	42b0      	cmp	r0, r6
   14594:	d065      	beq.n	14662 <_free_r+0x10e>
   14596:	68ce      	ldr	r6, [r1, #12]
   14598:	60c6      	str	r6, [r0, #12]
   1459a:	60b0      	str	r0, [r6, #8]
   1459c:	2001      	movs	r0, #1
   1459e:	18d6      	adds	r6, r2, r3
   145a0:	6876      	ldr	r6, [r6, #4]
   145a2:	4206      	tst	r6, r0
   145a4:	d033      	beq.n	1460e <_free_r+0xba>
   145a6:	4b55      	ldr	r3, [pc, #340]	; (146fc <_free_r+0x1a8>)
   145a8:	4328      	orrs	r0, r5
   145aa:	6048      	str	r0, [r1, #4]
   145ac:	514d      	str	r5, [r1, r5]
   145ae:	429d      	cmp	r5, r3
   145b0:	d812      	bhi.n	145d8 <_free_r+0x84>
   145b2:	08ed      	lsrs	r5, r5, #3
   145b4:	3bff      	subs	r3, #255	; 0xff
   145b6:	10aa      	asrs	r2, r5, #2
   145b8:	3bff      	subs	r3, #255	; 0xff
   145ba:	4093      	lsls	r3, r2
   145bc:	687a      	ldr	r2, [r7, #4]
   145be:	00ed      	lsls	r5, r5, #3
   145c0:	4313      	orrs	r3, r2
   145c2:	607b      	str	r3, [r7, #4]
   145c4:	19ef      	adds	r7, r5, r7
   145c6:	68bb      	ldr	r3, [r7, #8]
   145c8:	60cf      	str	r7, [r1, #12]
   145ca:	608b      	str	r3, [r1, #8]
   145cc:	60b9      	str	r1, [r7, #8]
   145ce:	60d9      	str	r1, [r3, #12]
   145d0:	0020      	movs	r0, r4
   145d2:	f000 fe4f 	bl	15274 <__malloc_unlock>
   145d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145d8:	0a68      	lsrs	r0, r5, #9
   145da:	2804      	cmp	r0, #4
   145dc:	d850      	bhi.n	14680 <_free_r+0x12c>
   145de:	09a8      	lsrs	r0, r5, #6
   145e0:	0002      	movs	r2, r0
   145e2:	3039      	adds	r0, #57	; 0x39
   145e4:	3238      	adds	r2, #56	; 0x38
   145e6:	00c0      	lsls	r0, r0, #3
   145e8:	1838      	adds	r0, r7, r0
   145ea:	3808      	subs	r0, #8
   145ec:	6883      	ldr	r3, [r0, #8]
   145ee:	2603      	movs	r6, #3
   145f0:	4298      	cmp	r0, r3
   145f2:	d04c      	beq.n	1468e <_free_r+0x13a>
   145f4:	685a      	ldr	r2, [r3, #4]
   145f6:	43b2      	bics	r2, r6
   145f8:	4295      	cmp	r5, r2
   145fa:	d230      	bcs.n	1465e <_free_r+0x10a>
   145fc:	689b      	ldr	r3, [r3, #8]
   145fe:	4298      	cmp	r0, r3
   14600:	d1f8      	bne.n	145f4 <_free_r+0xa0>
   14602:	68c3      	ldr	r3, [r0, #12]
   14604:	60cb      	str	r3, [r1, #12]
   14606:	6088      	str	r0, [r1, #8]
   14608:	6099      	str	r1, [r3, #8]
   1460a:	60c1      	str	r1, [r0, #12]
   1460c:	e7e0      	b.n	145d0 <_free_r+0x7c>
   1460e:	18ed      	adds	r5, r5, r3
   14610:	4e3b      	ldr	r6, [pc, #236]	; (14700 <_free_r+0x1ac>)
   14612:	6893      	ldr	r3, [r2, #8]
   14614:	42b3      	cmp	r3, r6
   14616:	d042      	beq.n	1469e <_free_r+0x14a>
   14618:	68d2      	ldr	r2, [r2, #12]
   1461a:	4328      	orrs	r0, r5
   1461c:	60da      	str	r2, [r3, #12]
   1461e:	6093      	str	r3, [r2, #8]
   14620:	4b36      	ldr	r3, [pc, #216]	; (146fc <_free_r+0x1a8>)
   14622:	6048      	str	r0, [r1, #4]
   14624:	514d      	str	r5, [r1, r5]
   14626:	429d      	cmp	r5, r3
   14628:	d8d6      	bhi.n	145d8 <_free_r+0x84>
   1462a:	e7c2      	b.n	145b2 <_free_r+0x5e>
   1462c:	4662      	mov	r2, ip
   1462e:	18eb      	adds	r3, r5, r3
   14630:	4202      	tst	r2, r0
   14632:	d106      	bne.n	14642 <_free_r+0xee>
   14634:	680a      	ldr	r2, [r1, #0]
   14636:	1a89      	subs	r1, r1, r2
   14638:	6888      	ldr	r0, [r1, #8]
   1463a:	189b      	adds	r3, r3, r2
   1463c:	68ca      	ldr	r2, [r1, #12]
   1463e:	60c2      	str	r2, [r0, #12]
   14640:	6090      	str	r0, [r2, #8]
   14642:	2201      	movs	r2, #1
   14644:	431a      	orrs	r2, r3
   14646:	604a      	str	r2, [r1, #4]
   14648:	4a2e      	ldr	r2, [pc, #184]	; (14704 <_free_r+0x1b0>)
   1464a:	60b9      	str	r1, [r7, #8]
   1464c:	6812      	ldr	r2, [r2, #0]
   1464e:	4293      	cmp	r3, r2
   14650:	d3be      	bcc.n	145d0 <_free_r+0x7c>
   14652:	4b2d      	ldr	r3, [pc, #180]	; (14708 <_free_r+0x1b4>)
   14654:	0020      	movs	r0, r4
   14656:	6819      	ldr	r1, [r3, #0]
   14658:	f7ff ff2c 	bl	144b4 <_malloc_trim_r>
   1465c:	e7b8      	b.n	145d0 <_free_r+0x7c>
   1465e:	0018      	movs	r0, r3
   14660:	e7cf      	b.n	14602 <_free_r+0xae>
   14662:	4666      	mov	r6, ip
   14664:	18d0      	adds	r0, r2, r3
   14666:	6840      	ldr	r0, [r0, #4]
   14668:	4230      	tst	r0, r6
   1466a:	d13f      	bne.n	146ec <_free_r+0x198>
   1466c:	6890      	ldr	r0, [r2, #8]
   1466e:	195d      	adds	r5, r3, r5
   14670:	68d3      	ldr	r3, [r2, #12]
   14672:	60c3      	str	r3, [r0, #12]
   14674:	6098      	str	r0, [r3, #8]
   14676:	4663      	mov	r3, ip
   14678:	432b      	orrs	r3, r5
   1467a:	604b      	str	r3, [r1, #4]
   1467c:	514d      	str	r5, [r1, r5]
   1467e:	e7a7      	b.n	145d0 <_free_r+0x7c>
   14680:	2814      	cmp	r0, #20
   14682:	d814      	bhi.n	146ae <_free_r+0x15a>
   14684:	0002      	movs	r2, r0
   14686:	305c      	adds	r0, #92	; 0x5c
   14688:	325b      	adds	r2, #91	; 0x5b
   1468a:	00c0      	lsls	r0, r0, #3
   1468c:	e7ac      	b.n	145e8 <_free_r+0x94>
   1468e:	2301      	movs	r3, #1
   14690:	1092      	asrs	r2, r2, #2
   14692:	4093      	lsls	r3, r2
   14694:	687a      	ldr	r2, [r7, #4]
   14696:	4313      	orrs	r3, r2
   14698:	607b      	str	r3, [r7, #4]
   1469a:	0003      	movs	r3, r0
   1469c:	e7b2      	b.n	14604 <_free_r+0xb0>
   1469e:	4328      	orrs	r0, r5
   146a0:	60d9      	str	r1, [r3, #12]
   146a2:	6099      	str	r1, [r3, #8]
   146a4:	60cb      	str	r3, [r1, #12]
   146a6:	608b      	str	r3, [r1, #8]
   146a8:	6048      	str	r0, [r1, #4]
   146aa:	514d      	str	r5, [r1, r5]
   146ac:	e790      	b.n	145d0 <_free_r+0x7c>
   146ae:	2854      	cmp	r0, #84	; 0x54
   146b0:	d805      	bhi.n	146be <_free_r+0x16a>
   146b2:	0b28      	lsrs	r0, r5, #12
   146b4:	0002      	movs	r2, r0
   146b6:	306f      	adds	r0, #111	; 0x6f
   146b8:	326e      	adds	r2, #110	; 0x6e
   146ba:	00c0      	lsls	r0, r0, #3
   146bc:	e794      	b.n	145e8 <_free_r+0x94>
   146be:	22aa      	movs	r2, #170	; 0xaa
   146c0:	0052      	lsls	r2, r2, #1
   146c2:	4290      	cmp	r0, r2
   146c4:	d805      	bhi.n	146d2 <_free_r+0x17e>
   146c6:	0be8      	lsrs	r0, r5, #15
   146c8:	0002      	movs	r2, r0
   146ca:	3078      	adds	r0, #120	; 0x78
   146cc:	3277      	adds	r2, #119	; 0x77
   146ce:	00c0      	lsls	r0, r0, #3
   146d0:	e78a      	b.n	145e8 <_free_r+0x94>
   146d2:	4a0e      	ldr	r2, [pc, #56]	; (1470c <_free_r+0x1b8>)
   146d4:	4290      	cmp	r0, r2
   146d6:	d805      	bhi.n	146e4 <_free_r+0x190>
   146d8:	0ca8      	lsrs	r0, r5, #18
   146da:	0002      	movs	r2, r0
   146dc:	307d      	adds	r0, #125	; 0x7d
   146de:	327c      	adds	r2, #124	; 0x7c
   146e0:	00c0      	lsls	r0, r0, #3
   146e2:	e781      	b.n	145e8 <_free_r+0x94>
   146e4:	20fe      	movs	r0, #254	; 0xfe
   146e6:	227e      	movs	r2, #126	; 0x7e
   146e8:	0080      	lsls	r0, r0, #2
   146ea:	e77d      	b.n	145e8 <_free_r+0x94>
   146ec:	4663      	mov	r3, ip
   146ee:	432b      	orrs	r3, r5
   146f0:	604b      	str	r3, [r1, #4]
   146f2:	6015      	str	r5, [r2, #0]
   146f4:	e76c      	b.n	145d0 <_free_r+0x7c>
   146f6:	46c0      	nop			; (mov r8, r8)
   146f8:	20000618 	.word	0x20000618
   146fc:	000001ff 	.word	0x000001ff
   14700:	20000620 	.word	0x20000620
   14704:	20000a24 	.word	0x20000a24
   14708:	20000f00 	.word	0x20000f00
   1470c:	00000554 	.word	0x00000554

00014710 <__sfvwrite_r>:
   14710:	b5f0      	push	{r4, r5, r6, r7, lr}
   14712:	464e      	mov	r6, r9
   14714:	46de      	mov	lr, fp
   14716:	4657      	mov	r7, sl
   14718:	4645      	mov	r5, r8
   1471a:	b5e0      	push	{r5, r6, r7, lr}
   1471c:	6893      	ldr	r3, [r2, #8]
   1471e:	b083      	sub	sp, #12
   14720:	9000      	str	r0, [sp, #0]
   14722:	000c      	movs	r4, r1
   14724:	0016      	movs	r6, r2
   14726:	2b00      	cmp	r3, #0
   14728:	d025      	beq.n	14776 <__sfvwrite_r+0x66>
   1472a:	898b      	ldrh	r3, [r1, #12]
   1472c:	071a      	lsls	r2, r3, #28
   1472e:	d52a      	bpl.n	14786 <__sfvwrite_r+0x76>
   14730:	690a      	ldr	r2, [r1, #16]
   14732:	2a00      	cmp	r2, #0
   14734:	d027      	beq.n	14786 <__sfvwrite_r+0x76>
   14736:	6832      	ldr	r2, [r6, #0]
   14738:	4693      	mov	fp, r2
   1473a:	079a      	lsls	r2, r3, #30
   1473c:	d52f      	bpl.n	1479e <__sfvwrite_r+0x8e>
   1473e:	4bb2      	ldr	r3, [pc, #712]	; (14a08 <__sfvwrite_r+0x2f8>)
   14740:	2700      	movs	r7, #0
   14742:	2500      	movs	r5, #0
   14744:	4698      	mov	r8, r3
   14746:	46b1      	mov	r9, r6
   14748:	2d00      	cmp	r5, #0
   1474a:	d100      	bne.n	1474e <__sfvwrite_r+0x3e>
   1474c:	e072      	b.n	14834 <__sfvwrite_r+0x124>
   1474e:	002b      	movs	r3, r5
   14750:	4545      	cmp	r5, r8
   14752:	d900      	bls.n	14756 <__sfvwrite_r+0x46>
   14754:	4bac      	ldr	r3, [pc, #688]	; (14a08 <__sfvwrite_r+0x2f8>)
   14756:	003a      	movs	r2, r7
   14758:	69e1      	ldr	r1, [r4, #28]
   1475a:	9800      	ldr	r0, [sp, #0]
   1475c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1475e:	47b0      	blx	r6
   14760:	2800      	cmp	r0, #0
   14762:	dc00      	bgt.n	14766 <__sfvwrite_r+0x56>
   14764:	e073      	b.n	1484e <__sfvwrite_r+0x13e>
   14766:	464b      	mov	r3, r9
   14768:	689b      	ldr	r3, [r3, #8]
   1476a:	183f      	adds	r7, r7, r0
   1476c:	1a2d      	subs	r5, r5, r0
   1476e:	1a18      	subs	r0, r3, r0
   14770:	464b      	mov	r3, r9
   14772:	6098      	str	r0, [r3, #8]
   14774:	d1e8      	bne.n	14748 <__sfvwrite_r+0x38>
   14776:	2000      	movs	r0, #0
   14778:	b003      	add	sp, #12
   1477a:	bc3c      	pop	{r2, r3, r4, r5}
   1477c:	4690      	mov	r8, r2
   1477e:	4699      	mov	r9, r3
   14780:	46a2      	mov	sl, r4
   14782:	46ab      	mov	fp, r5
   14784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14786:	0021      	movs	r1, r4
   14788:	9800      	ldr	r0, [sp, #0]
   1478a:	f7fe fc4b 	bl	13024 <__swsetup_r>
   1478e:	2800      	cmp	r0, #0
   14790:	d000      	beq.n	14794 <__sfvwrite_r+0x84>
   14792:	e130      	b.n	149f6 <__sfvwrite_r+0x2e6>
   14794:	6832      	ldr	r2, [r6, #0]
   14796:	89a3      	ldrh	r3, [r4, #12]
   14798:	4693      	mov	fp, r2
   1479a:	079a      	lsls	r2, r3, #30
   1479c:	d4cf      	bmi.n	1473e <__sfvwrite_r+0x2e>
   1479e:	07da      	lsls	r2, r3, #31
   147a0:	d55d      	bpl.n	1485e <__sfvwrite_r+0x14e>
   147a2:	2300      	movs	r3, #0
   147a4:	2000      	movs	r0, #0
   147a6:	469a      	mov	sl, r3
   147a8:	2700      	movs	r7, #0
   147aa:	001d      	movs	r5, r3
   147ac:	46b1      	mov	r9, r6
   147ae:	e029      	b.n	14804 <__sfvwrite_r+0xf4>
   147b0:	2800      	cmp	r0, #0
   147b2:	d033      	beq.n	1481c <__sfvwrite_r+0x10c>
   147b4:	46a8      	mov	r8, r5
   147b6:	42bd      	cmp	r5, r7
   147b8:	d900      	bls.n	147bc <__sfvwrite_r+0xac>
   147ba:	46b8      	mov	r8, r7
   147bc:	6820      	ldr	r0, [r4, #0]
   147be:	6922      	ldr	r2, [r4, #16]
   147c0:	4646      	mov	r6, r8
   147c2:	6963      	ldr	r3, [r4, #20]
   147c4:	4290      	cmp	r0, r2
   147c6:	d907      	bls.n	147d8 <__sfvwrite_r+0xc8>
   147c8:	68a2      	ldr	r2, [r4, #8]
   147ca:	4694      	mov	ip, r2
   147cc:	449c      	add	ip, r3
   147ce:	4662      	mov	r2, ip
   147d0:	9201      	str	r2, [sp, #4]
   147d2:	45e0      	cmp	r8, ip
   147d4:	dd00      	ble.n	147d8 <__sfvwrite_r+0xc8>
   147d6:	e0e9      	b.n	149ac <__sfvwrite_r+0x29c>
   147d8:	4598      	cmp	r8, r3
   147da:	da00      	bge.n	147de <__sfvwrite_r+0xce>
   147dc:	e08f      	b.n	148fe <__sfvwrite_r+0x1ee>
   147de:	6a66      	ldr	r6, [r4, #36]	; 0x24
   147e0:	4652      	mov	r2, sl
   147e2:	69e1      	ldr	r1, [r4, #28]
   147e4:	9800      	ldr	r0, [sp, #0]
   147e6:	47b0      	blx	r6
   147e8:	1e06      	subs	r6, r0, #0
   147ea:	dd30      	ble.n	1484e <__sfvwrite_r+0x13e>
   147ec:	1bad      	subs	r5, r5, r6
   147ee:	2001      	movs	r0, #1
   147f0:	2d00      	cmp	r5, #0
   147f2:	d026      	beq.n	14842 <__sfvwrite_r+0x132>
   147f4:	464b      	mov	r3, r9
   147f6:	689b      	ldr	r3, [r3, #8]
   147f8:	44b2      	add	sl, r6
   147fa:	1bbf      	subs	r7, r7, r6
   147fc:	1b9e      	subs	r6, r3, r6
   147fe:	464b      	mov	r3, r9
   14800:	609e      	str	r6, [r3, #8]
   14802:	d0b8      	beq.n	14776 <__sfvwrite_r+0x66>
   14804:	2f00      	cmp	r7, #0
   14806:	d1d3      	bne.n	147b0 <__sfvwrite_r+0xa0>
   14808:	465b      	mov	r3, fp
   1480a:	681b      	ldr	r3, [r3, #0]
   1480c:	469a      	mov	sl, r3
   1480e:	465b      	mov	r3, fp
   14810:	685f      	ldr	r7, [r3, #4]
   14812:	2308      	movs	r3, #8
   14814:	469c      	mov	ip, r3
   14816:	44e3      	add	fp, ip
   14818:	2f00      	cmp	r7, #0
   1481a:	d0f5      	beq.n	14808 <__sfvwrite_r+0xf8>
   1481c:	003a      	movs	r2, r7
   1481e:	210a      	movs	r1, #10
   14820:	4650      	mov	r0, sl
   14822:	f000 fc8f 	bl	15144 <memchr>
   14826:	2800      	cmp	r0, #0
   14828:	d100      	bne.n	1482c <__sfvwrite_r+0x11c>
   1482a:	e0e2      	b.n	149f2 <__sfvwrite_r+0x2e2>
   1482c:	4653      	mov	r3, sl
   1482e:	3001      	adds	r0, #1
   14830:	1ac5      	subs	r5, r0, r3
   14832:	e7bf      	b.n	147b4 <__sfvwrite_r+0xa4>
   14834:	465b      	mov	r3, fp
   14836:	681f      	ldr	r7, [r3, #0]
   14838:	685d      	ldr	r5, [r3, #4]
   1483a:	2308      	movs	r3, #8
   1483c:	469c      	mov	ip, r3
   1483e:	44e3      	add	fp, ip
   14840:	e782      	b.n	14748 <__sfvwrite_r+0x38>
   14842:	0021      	movs	r1, r4
   14844:	9800      	ldr	r0, [sp, #0]
   14846:	f7ff fd81 	bl	1434c <_fflush_r>
   1484a:	2800      	cmp	r0, #0
   1484c:	d0d2      	beq.n	147f4 <__sfvwrite_r+0xe4>
   1484e:	220c      	movs	r2, #12
   14850:	5ea3      	ldrsh	r3, [r4, r2]
   14852:	2240      	movs	r2, #64	; 0x40
   14854:	2001      	movs	r0, #1
   14856:	4313      	orrs	r3, r2
   14858:	81a3      	strh	r3, [r4, #12]
   1485a:	4240      	negs	r0, r0
   1485c:	e78c      	b.n	14778 <__sfvwrite_r+0x68>
   1485e:	2200      	movs	r2, #0
   14860:	4691      	mov	r9, r2
   14862:	464d      	mov	r5, r9
   14864:	2d00      	cmp	r5, #0
   14866:	d023      	beq.n	148b0 <__sfvwrite_r+0x1a0>
   14868:	68a2      	ldr	r2, [r4, #8]
   1486a:	4690      	mov	r8, r2
   1486c:	2280      	movs	r2, #128	; 0x80
   1486e:	0092      	lsls	r2, r2, #2
   14870:	4213      	tst	r3, r2
   14872:	d026      	beq.n	148c2 <__sfvwrite_r+0x1b2>
   14874:	46c2      	mov	sl, r8
   14876:	4545      	cmp	r5, r8
   14878:	d34d      	bcc.n	14916 <__sfvwrite_r+0x206>
   1487a:	2290      	movs	r2, #144	; 0x90
   1487c:	00d2      	lsls	r2, r2, #3
   1487e:	4213      	tst	r3, r2
   14880:	d14e      	bne.n	14920 <__sfvwrite_r+0x210>
   14882:	002f      	movs	r7, r5
   14884:	6820      	ldr	r0, [r4, #0]
   14886:	4652      	mov	r2, sl
   14888:	4649      	mov	r1, r9
   1488a:	f000 fc9b 	bl	151c4 <memmove>
   1488e:	4642      	mov	r2, r8
   14890:	68a3      	ldr	r3, [r4, #8]
   14892:	1a98      	subs	r0, r3, r2
   14894:	6823      	ldr	r3, [r4, #0]
   14896:	60a0      	str	r0, [r4, #8]
   14898:	4453      	add	r3, sl
   1489a:	6023      	str	r3, [r4, #0]
   1489c:	68b3      	ldr	r3, [r6, #8]
   1489e:	44b9      	add	r9, r7
   148a0:	1bed      	subs	r5, r5, r7
   148a2:	1bdf      	subs	r7, r3, r7
   148a4:	60b7      	str	r7, [r6, #8]
   148a6:	d100      	bne.n	148aa <__sfvwrite_r+0x19a>
   148a8:	e765      	b.n	14776 <__sfvwrite_r+0x66>
   148aa:	89a3      	ldrh	r3, [r4, #12]
   148ac:	2d00      	cmp	r5, #0
   148ae:	d1db      	bne.n	14868 <__sfvwrite_r+0x158>
   148b0:	465a      	mov	r2, fp
   148b2:	6812      	ldr	r2, [r2, #0]
   148b4:	4691      	mov	r9, r2
   148b6:	465a      	mov	r2, fp
   148b8:	6855      	ldr	r5, [r2, #4]
   148ba:	2208      	movs	r2, #8
   148bc:	4694      	mov	ip, r2
   148be:	44e3      	add	fp, ip
   148c0:	e7d0      	b.n	14864 <__sfvwrite_r+0x154>
   148c2:	6820      	ldr	r0, [r4, #0]
   148c4:	6923      	ldr	r3, [r4, #16]
   148c6:	4298      	cmp	r0, r3
   148c8:	d802      	bhi.n	148d0 <__sfvwrite_r+0x1c0>
   148ca:	6967      	ldr	r7, [r4, #20]
   148cc:	42bd      	cmp	r5, r7
   148ce:	d259      	bcs.n	14984 <__sfvwrite_r+0x274>
   148d0:	4647      	mov	r7, r8
   148d2:	42af      	cmp	r7, r5
   148d4:	d900      	bls.n	148d8 <__sfvwrite_r+0x1c8>
   148d6:	002f      	movs	r7, r5
   148d8:	003a      	movs	r2, r7
   148da:	4649      	mov	r1, r9
   148dc:	f000 fc72 	bl	151c4 <memmove>
   148e0:	68a3      	ldr	r3, [r4, #8]
   148e2:	6822      	ldr	r2, [r4, #0]
   148e4:	1bdb      	subs	r3, r3, r7
   148e6:	19d2      	adds	r2, r2, r7
   148e8:	60a3      	str	r3, [r4, #8]
   148ea:	6022      	str	r2, [r4, #0]
   148ec:	2b00      	cmp	r3, #0
   148ee:	d1d5      	bne.n	1489c <__sfvwrite_r+0x18c>
   148f0:	0021      	movs	r1, r4
   148f2:	9800      	ldr	r0, [sp, #0]
   148f4:	f7ff fd2a 	bl	1434c <_fflush_r>
   148f8:	2800      	cmp	r0, #0
   148fa:	d0cf      	beq.n	1489c <__sfvwrite_r+0x18c>
   148fc:	e7a7      	b.n	1484e <__sfvwrite_r+0x13e>
   148fe:	4642      	mov	r2, r8
   14900:	4651      	mov	r1, sl
   14902:	f000 fc5f 	bl	151c4 <memmove>
   14906:	4642      	mov	r2, r8
   14908:	68a3      	ldr	r3, [r4, #8]
   1490a:	1a9b      	subs	r3, r3, r2
   1490c:	60a3      	str	r3, [r4, #8]
   1490e:	6823      	ldr	r3, [r4, #0]
   14910:	4443      	add	r3, r8
   14912:	6023      	str	r3, [r4, #0]
   14914:	e76a      	b.n	147ec <__sfvwrite_r+0xdc>
   14916:	46a8      	mov	r8, r5
   14918:	6820      	ldr	r0, [r4, #0]
   1491a:	002f      	movs	r7, r5
   1491c:	46aa      	mov	sl, r5
   1491e:	e7b2      	b.n	14886 <__sfvwrite_r+0x176>
   14920:	6921      	ldr	r1, [r4, #16]
   14922:	6822      	ldr	r2, [r4, #0]
   14924:	1a52      	subs	r2, r2, r1
   14926:	4692      	mov	sl, r2
   14928:	6962      	ldr	r2, [r4, #20]
   1492a:	0057      	lsls	r7, r2, #1
   1492c:	18bf      	adds	r7, r7, r2
   1492e:	0ffa      	lsrs	r2, r7, #31
   14930:	19d7      	adds	r7, r2, r7
   14932:	4652      	mov	r2, sl
   14934:	1c50      	adds	r0, r2, #1
   14936:	107f      	asrs	r7, r7, #1
   14938:	1940      	adds	r0, r0, r5
   1493a:	003a      	movs	r2, r7
   1493c:	42b8      	cmp	r0, r7
   1493e:	d901      	bls.n	14944 <__sfvwrite_r+0x234>
   14940:	0007      	movs	r7, r0
   14942:	0002      	movs	r2, r0
   14944:	055b      	lsls	r3, r3, #21
   14946:	d542      	bpl.n	149ce <__sfvwrite_r+0x2be>
   14948:	0011      	movs	r1, r2
   1494a:	9800      	ldr	r0, [sp, #0]
   1494c:	f000 f930 	bl	14bb0 <_malloc_r>
   14950:	4680      	mov	r8, r0
   14952:	1e03      	subs	r3, r0, #0
   14954:	d052      	beq.n	149fc <__sfvwrite_r+0x2ec>
   14956:	4652      	mov	r2, sl
   14958:	6921      	ldr	r1, [r4, #16]
   1495a:	f7fc fd8b 	bl	11474 <memcpy>
   1495e:	89a3      	ldrh	r3, [r4, #12]
   14960:	4a2a      	ldr	r2, [pc, #168]	; (14a0c <__sfvwrite_r+0x2fc>)
   14962:	4013      	ands	r3, r2
   14964:	2280      	movs	r2, #128	; 0x80
   14966:	4313      	orrs	r3, r2
   14968:	81a3      	strh	r3, [r4, #12]
   1496a:	4643      	mov	r3, r8
   1496c:	4640      	mov	r0, r8
   1496e:	6123      	str	r3, [r4, #16]
   14970:	4653      	mov	r3, sl
   14972:	4450      	add	r0, sl
   14974:	6167      	str	r7, [r4, #20]
   14976:	1aff      	subs	r7, r7, r3
   14978:	60a7      	str	r7, [r4, #8]
   1497a:	6020      	str	r0, [r4, #0]
   1497c:	46a8      	mov	r8, r5
   1497e:	002f      	movs	r7, r5
   14980:	46aa      	mov	sl, r5
   14982:	e780      	b.n	14886 <__sfvwrite_r+0x176>
   14984:	4b22      	ldr	r3, [pc, #136]	; (14a10 <__sfvwrite_r+0x300>)
   14986:	0028      	movs	r0, r5
   14988:	429d      	cmp	r5, r3
   1498a:	d900      	bls.n	1498e <__sfvwrite_r+0x27e>
   1498c:	0018      	movs	r0, r3
   1498e:	0039      	movs	r1, r7
   14990:	f7f9 fd90 	bl	e4b4 <__divsi3>
   14994:	003b      	movs	r3, r7
   14996:	464a      	mov	r2, r9
   14998:	4343      	muls	r3, r0
   1499a:	69e1      	ldr	r1, [r4, #28]
   1499c:	9800      	ldr	r0, [sp, #0]
   1499e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   149a0:	47b8      	blx	r7
   149a2:	2800      	cmp	r0, #0
   149a4:	dc00      	bgt.n	149a8 <__sfvwrite_r+0x298>
   149a6:	e752      	b.n	1484e <__sfvwrite_r+0x13e>
   149a8:	0007      	movs	r7, r0
   149aa:	e777      	b.n	1489c <__sfvwrite_r+0x18c>
   149ac:	4666      	mov	r6, ip
   149ae:	4651      	mov	r1, sl
   149b0:	f000 fc08 	bl	151c4 <memmove>
   149b4:	46b4      	mov	ip, r6
   149b6:	6823      	ldr	r3, [r4, #0]
   149b8:	0021      	movs	r1, r4
   149ba:	4463      	add	r3, ip
   149bc:	6023      	str	r3, [r4, #0]
   149be:	9800      	ldr	r0, [sp, #0]
   149c0:	f7ff fcc4 	bl	1434c <_fflush_r>
   149c4:	2800      	cmp	r0, #0
   149c6:	d000      	beq.n	149ca <__sfvwrite_r+0x2ba>
   149c8:	e741      	b.n	1484e <__sfvwrite_r+0x13e>
   149ca:	9e01      	ldr	r6, [sp, #4]
   149cc:	e70e      	b.n	147ec <__sfvwrite_r+0xdc>
   149ce:	9800      	ldr	r0, [sp, #0]
   149d0:	f000 ffa0 	bl	15914 <_realloc_r>
   149d4:	4680      	mov	r8, r0
   149d6:	2800      	cmp	r0, #0
   149d8:	d1c7      	bne.n	1496a <__sfvwrite_r+0x25a>
   149da:	9d00      	ldr	r5, [sp, #0]
   149dc:	6921      	ldr	r1, [r4, #16]
   149de:	0028      	movs	r0, r5
   149e0:	f7ff fdb8 	bl	14554 <_free_r>
   149e4:	2280      	movs	r2, #128	; 0x80
   149e6:	89a3      	ldrh	r3, [r4, #12]
   149e8:	4393      	bics	r3, r2
   149ea:	3a74      	subs	r2, #116	; 0x74
   149ec:	b21b      	sxth	r3, r3
   149ee:	602a      	str	r2, [r5, #0]
   149f0:	e72f      	b.n	14852 <__sfvwrite_r+0x142>
   149f2:	1c7d      	adds	r5, r7, #1
   149f4:	e6de      	b.n	147b4 <__sfvwrite_r+0xa4>
   149f6:	2001      	movs	r0, #1
   149f8:	4240      	negs	r0, r0
   149fa:	e6bd      	b.n	14778 <__sfvwrite_r+0x68>
   149fc:	9a00      	ldr	r2, [sp, #0]
   149fe:	330c      	adds	r3, #12
   14a00:	6013      	str	r3, [r2, #0]
   14a02:	220c      	movs	r2, #12
   14a04:	5ea3      	ldrsh	r3, [r4, r2]
   14a06:	e724      	b.n	14852 <__sfvwrite_r+0x142>
   14a08:	7ffffc00 	.word	0x7ffffc00
   14a0c:	fffffb7f 	.word	0xfffffb7f
   14a10:	7fffffff 	.word	0x7fffffff

00014a14 <_fwalk_reent>:
   14a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a16:	4647      	mov	r7, r8
   14a18:	46ce      	mov	lr, r9
   14a1a:	b580      	push	{r7, lr}
   14a1c:	27b8      	movs	r7, #184	; 0xb8
   14a1e:	4680      	mov	r8, r0
   14a20:	00bf      	lsls	r7, r7, #2
   14a22:	4447      	add	r7, r8
   14a24:	4689      	mov	r9, r1
   14a26:	2600      	movs	r6, #0
   14a28:	2f00      	cmp	r7, #0
   14a2a:	d014      	beq.n	14a56 <_fwalk_reent+0x42>
   14a2c:	687b      	ldr	r3, [r7, #4]
   14a2e:	68bc      	ldr	r4, [r7, #8]
   14a30:	1e5d      	subs	r5, r3, #1
   14a32:	d40d      	bmi.n	14a50 <_fwalk_reent+0x3c>
   14a34:	89a3      	ldrh	r3, [r4, #12]
   14a36:	2b01      	cmp	r3, #1
   14a38:	d907      	bls.n	14a4a <_fwalk_reent+0x36>
   14a3a:	220e      	movs	r2, #14
   14a3c:	5ea3      	ldrsh	r3, [r4, r2]
   14a3e:	3301      	adds	r3, #1
   14a40:	d003      	beq.n	14a4a <_fwalk_reent+0x36>
   14a42:	0021      	movs	r1, r4
   14a44:	4640      	mov	r0, r8
   14a46:	47c8      	blx	r9
   14a48:	4306      	orrs	r6, r0
   14a4a:	3468      	adds	r4, #104	; 0x68
   14a4c:	3d01      	subs	r5, #1
   14a4e:	d2f1      	bcs.n	14a34 <_fwalk_reent+0x20>
   14a50:	683f      	ldr	r7, [r7, #0]
   14a52:	2f00      	cmp	r7, #0
   14a54:	d1ea      	bne.n	14a2c <_fwalk_reent+0x18>
   14a56:	0030      	movs	r0, r6
   14a58:	bc0c      	pop	{r2, r3}
   14a5a:	4690      	mov	r8, r2
   14a5c:	4699      	mov	r9, r3
   14a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014a60 <__locale_mb_cur_max>:
   14a60:	4b05      	ldr	r3, [pc, #20]	; (14a78 <__locale_mb_cur_max+0x18>)
   14a62:	681b      	ldr	r3, [r3, #0]
   14a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14a66:	2b00      	cmp	r3, #0
   14a68:	d003      	beq.n	14a72 <__locale_mb_cur_max+0x12>
   14a6a:	2294      	movs	r2, #148	; 0x94
   14a6c:	0052      	lsls	r2, r2, #1
   14a6e:	5c98      	ldrb	r0, [r3, r2]
   14a70:	4770      	bx	lr
   14a72:	4b02      	ldr	r3, [pc, #8]	; (14a7c <__locale_mb_cur_max+0x1c>)
   14a74:	e7f9      	b.n	14a6a <__locale_mb_cur_max+0xa>
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	2000007c 	.word	0x2000007c
   14a7c:	200004ac 	.word	0x200004ac

00014a80 <_localeconv_r>:
   14a80:	4b04      	ldr	r3, [pc, #16]	; (14a94 <_localeconv_r+0x14>)
   14a82:	681b      	ldr	r3, [r3, #0]
   14a84:	6b58      	ldr	r0, [r3, #52]	; 0x34
   14a86:	2800      	cmp	r0, #0
   14a88:	d001      	beq.n	14a8e <_localeconv_r+0xe>
   14a8a:	30f0      	adds	r0, #240	; 0xf0
   14a8c:	4770      	bx	lr
   14a8e:	4802      	ldr	r0, [pc, #8]	; (14a98 <_localeconv_r+0x18>)
   14a90:	e7fb      	b.n	14a8a <_localeconv_r+0xa>
   14a92:	46c0      	nop			; (mov r8, r8)
   14a94:	2000007c 	.word	0x2000007c
   14a98:	200004ac 	.word	0x200004ac

00014a9c <__retarget_lock_init_recursive>:
   14a9c:	4770      	bx	lr
   14a9e:	46c0      	nop			; (mov r8, r8)

00014aa0 <__retarget_lock_close_recursive>:
   14aa0:	4770      	bx	lr
   14aa2:	46c0      	nop			; (mov r8, r8)

00014aa4 <__retarget_lock_acquire_recursive>:
   14aa4:	4770      	bx	lr
   14aa6:	46c0      	nop			; (mov r8, r8)

00014aa8 <__retarget_lock_release_recursive>:
   14aa8:	4770      	bx	lr
   14aaa:	46c0      	nop			; (mov r8, r8)

00014aac <__swhatbuf_r>:
   14aac:	b570      	push	{r4, r5, r6, lr}
   14aae:	000c      	movs	r4, r1
   14ab0:	001e      	movs	r6, r3
   14ab2:	230e      	movs	r3, #14
   14ab4:	5ec9      	ldrsh	r1, [r1, r3]
   14ab6:	b090      	sub	sp, #64	; 0x40
   14ab8:	0015      	movs	r5, r2
   14aba:	2900      	cmp	r1, #0
   14abc:	db15      	blt.n	14aea <__swhatbuf_r+0x3e>
   14abe:	aa01      	add	r2, sp, #4
   14ac0:	f001 fb4c 	bl	1615c <_fstat_r>
   14ac4:	2800      	cmp	r0, #0
   14ac6:	db10      	blt.n	14aea <__swhatbuf_r+0x3e>
   14ac8:	22f0      	movs	r2, #240	; 0xf0
   14aca:	9b02      	ldr	r3, [sp, #8]
   14acc:	0212      	lsls	r2, r2, #8
   14ace:	4013      	ands	r3, r2
   14ad0:	4a0d      	ldr	r2, [pc, #52]	; (14b08 <__swhatbuf_r+0x5c>)
   14ad2:	2080      	movs	r0, #128	; 0x80
   14ad4:	4694      	mov	ip, r2
   14ad6:	4463      	add	r3, ip
   14ad8:	425a      	negs	r2, r3
   14ada:	4153      	adcs	r3, r2
   14adc:	6033      	str	r3, [r6, #0]
   14ade:	2380      	movs	r3, #128	; 0x80
   14ae0:	00db      	lsls	r3, r3, #3
   14ae2:	602b      	str	r3, [r5, #0]
   14ae4:	0100      	lsls	r0, r0, #4
   14ae6:	b010      	add	sp, #64	; 0x40
   14ae8:	bd70      	pop	{r4, r5, r6, pc}
   14aea:	2300      	movs	r3, #0
   14aec:	6033      	str	r3, [r6, #0]
   14aee:	89a3      	ldrh	r3, [r4, #12]
   14af0:	061b      	lsls	r3, r3, #24
   14af2:	d503      	bpl.n	14afc <__swhatbuf_r+0x50>
   14af4:	2340      	movs	r3, #64	; 0x40
   14af6:	2000      	movs	r0, #0
   14af8:	602b      	str	r3, [r5, #0]
   14afa:	e7f4      	b.n	14ae6 <__swhatbuf_r+0x3a>
   14afc:	2380      	movs	r3, #128	; 0x80
   14afe:	00db      	lsls	r3, r3, #3
   14b00:	602b      	str	r3, [r5, #0]
   14b02:	2000      	movs	r0, #0
   14b04:	e7ef      	b.n	14ae6 <__swhatbuf_r+0x3a>
   14b06:	46c0      	nop			; (mov r8, r8)
   14b08:	ffffe000 	.word	0xffffe000

00014b0c <__smakebuf_r>:
   14b0c:	b570      	push	{r4, r5, r6, lr}
   14b0e:	898b      	ldrh	r3, [r1, #12]
   14b10:	b082      	sub	sp, #8
   14b12:	0006      	movs	r6, r0
   14b14:	000c      	movs	r4, r1
   14b16:	079b      	lsls	r3, r3, #30
   14b18:	d507      	bpl.n	14b2a <__smakebuf_r+0x1e>
   14b1a:	0023      	movs	r3, r4
   14b1c:	3343      	adds	r3, #67	; 0x43
   14b1e:	6023      	str	r3, [r4, #0]
   14b20:	6123      	str	r3, [r4, #16]
   14b22:	2301      	movs	r3, #1
   14b24:	6163      	str	r3, [r4, #20]
   14b26:	b002      	add	sp, #8
   14b28:	bd70      	pop	{r4, r5, r6, pc}
   14b2a:	ab01      	add	r3, sp, #4
   14b2c:	466a      	mov	r2, sp
   14b2e:	f7ff ffbd 	bl	14aac <__swhatbuf_r>
   14b32:	9900      	ldr	r1, [sp, #0]
   14b34:	0005      	movs	r5, r0
   14b36:	0030      	movs	r0, r6
   14b38:	f000 f83a 	bl	14bb0 <_malloc_r>
   14b3c:	2800      	cmp	r0, #0
   14b3e:	d01e      	beq.n	14b7e <__smakebuf_r+0x72>
   14b40:	2280      	movs	r2, #128	; 0x80
   14b42:	4b15      	ldr	r3, [pc, #84]	; (14b98 <__smakebuf_r+0x8c>)
   14b44:	63f3      	str	r3, [r6, #60]	; 0x3c
   14b46:	89a3      	ldrh	r3, [r4, #12]
   14b48:	6020      	str	r0, [r4, #0]
   14b4a:	4313      	orrs	r3, r2
   14b4c:	9a00      	ldr	r2, [sp, #0]
   14b4e:	b21b      	sxth	r3, r3
   14b50:	6162      	str	r2, [r4, #20]
   14b52:	9a01      	ldr	r2, [sp, #4]
   14b54:	81a3      	strh	r3, [r4, #12]
   14b56:	6120      	str	r0, [r4, #16]
   14b58:	2a00      	cmp	r2, #0
   14b5a:	d102      	bne.n	14b62 <__smakebuf_r+0x56>
   14b5c:	432b      	orrs	r3, r5
   14b5e:	81a3      	strh	r3, [r4, #12]
   14b60:	e7e1      	b.n	14b26 <__smakebuf_r+0x1a>
   14b62:	230e      	movs	r3, #14
   14b64:	5ee1      	ldrsh	r1, [r4, r3]
   14b66:	0030      	movs	r0, r6
   14b68:	f001 fb0c 	bl	16184 <_isatty_r>
   14b6c:	2800      	cmp	r0, #0
   14b6e:	d010      	beq.n	14b92 <__smakebuf_r+0x86>
   14b70:	2203      	movs	r2, #3
   14b72:	89a3      	ldrh	r3, [r4, #12]
   14b74:	4393      	bics	r3, r2
   14b76:	2201      	movs	r2, #1
   14b78:	4313      	orrs	r3, r2
   14b7a:	b21b      	sxth	r3, r3
   14b7c:	e7ee      	b.n	14b5c <__smakebuf_r+0x50>
   14b7e:	220c      	movs	r2, #12
   14b80:	5ea3      	ldrsh	r3, [r4, r2]
   14b82:	059a      	lsls	r2, r3, #22
   14b84:	d4cf      	bmi.n	14b26 <__smakebuf_r+0x1a>
   14b86:	2203      	movs	r2, #3
   14b88:	4393      	bics	r3, r2
   14b8a:	2202      	movs	r2, #2
   14b8c:	4313      	orrs	r3, r2
   14b8e:	81a3      	strh	r3, [r4, #12]
   14b90:	e7c3      	b.n	14b1a <__smakebuf_r+0xe>
   14b92:	220c      	movs	r2, #12
   14b94:	5ea3      	ldrsh	r3, [r4, r2]
   14b96:	e7e1      	b.n	14b5c <__smakebuf_r+0x50>
   14b98:	000143a1 	.word	0x000143a1

00014b9c <malloc>:
   14b9c:	b510      	push	{r4, lr}
   14b9e:	4b03      	ldr	r3, [pc, #12]	; (14bac <malloc+0x10>)
   14ba0:	0001      	movs	r1, r0
   14ba2:	6818      	ldr	r0, [r3, #0]
   14ba4:	f000 f804 	bl	14bb0 <_malloc_r>
   14ba8:	bd10      	pop	{r4, pc}
   14baa:	46c0      	nop			; (mov r8, r8)
   14bac:	2000007c 	.word	0x2000007c

00014bb0 <_malloc_r>:
   14bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bb2:	4657      	mov	r7, sl
   14bb4:	4645      	mov	r5, r8
   14bb6:	46de      	mov	lr, fp
   14bb8:	464e      	mov	r6, r9
   14bba:	b5e0      	push	{r5, r6, r7, lr}
   14bbc:	000d      	movs	r5, r1
   14bbe:	350b      	adds	r5, #11
   14bc0:	b083      	sub	sp, #12
   14bc2:	0007      	movs	r7, r0
   14bc4:	2d16      	cmp	r5, #22
   14bc6:	d800      	bhi.n	14bca <_malloc_r+0x1a>
   14bc8:	e09f      	b.n	14d0a <_malloc_r+0x15a>
   14bca:	2307      	movs	r3, #7
   14bcc:	439d      	bics	r5, r3
   14bce:	d500      	bpl.n	14bd2 <_malloc_r+0x22>
   14bd0:	e0c4      	b.n	14d5c <_malloc_r+0x1ac>
   14bd2:	42a9      	cmp	r1, r5
   14bd4:	d900      	bls.n	14bd8 <_malloc_r+0x28>
   14bd6:	e0c1      	b.n	14d5c <_malloc_r+0x1ac>
   14bd8:	f000 fb44 	bl	15264 <__malloc_lock>
   14bdc:	23f8      	movs	r3, #248	; 0xf8
   14bde:	33ff      	adds	r3, #255	; 0xff
   14be0:	429d      	cmp	r5, r3
   14be2:	d800      	bhi.n	14be6 <_malloc_r+0x36>
   14be4:	e28f      	b.n	15106 <_malloc_r+0x556>
   14be6:	0a68      	lsrs	r0, r5, #9
   14be8:	d100      	bne.n	14bec <_malloc_r+0x3c>
   14bea:	e0bb      	b.n	14d64 <_malloc_r+0x1b4>
   14bec:	2804      	cmp	r0, #4
   14bee:	d900      	bls.n	14bf2 <_malloc_r+0x42>
   14bf0:	e162      	b.n	14eb8 <_malloc_r+0x308>
   14bf2:	2338      	movs	r3, #56	; 0x38
   14bf4:	4698      	mov	r8, r3
   14bf6:	09a8      	lsrs	r0, r5, #6
   14bf8:	4480      	add	r8, r0
   14bfa:	3039      	adds	r0, #57	; 0x39
   14bfc:	00c1      	lsls	r1, r0, #3
   14bfe:	4ed2      	ldr	r6, [pc, #840]	; (14f48 <_malloc_r+0x398>)
   14c00:	1871      	adds	r1, r6, r1
   14c02:	3908      	subs	r1, #8
   14c04:	68cc      	ldr	r4, [r1, #12]
   14c06:	42a1      	cmp	r1, r4
   14c08:	d019      	beq.n	14c3e <_malloc_r+0x8e>
   14c0a:	2303      	movs	r3, #3
   14c0c:	6862      	ldr	r2, [r4, #4]
   14c0e:	439a      	bics	r2, r3
   14c10:	0013      	movs	r3, r2
   14c12:	1b52      	subs	r2, r2, r5
   14c14:	2a0f      	cmp	r2, #15
   14c16:	dd00      	ble.n	14c1a <_malloc_r+0x6a>
   14c18:	e0aa      	b.n	14d70 <_malloc_r+0x1c0>
   14c1a:	2a00      	cmp	r2, #0
   14c1c:	db00      	blt.n	14c20 <_malloc_r+0x70>
   14c1e:	e088      	b.n	14d32 <_malloc_r+0x182>
   14c20:	2303      	movs	r3, #3
   14c22:	469c      	mov	ip, r3
   14c24:	e008      	b.n	14c38 <_malloc_r+0x88>
   14c26:	4662      	mov	r2, ip
   14c28:	6863      	ldr	r3, [r4, #4]
   14c2a:	4393      	bics	r3, r2
   14c2c:	1b5a      	subs	r2, r3, r5
   14c2e:	2a0f      	cmp	r2, #15
   14c30:	dd00      	ble.n	14c34 <_malloc_r+0x84>
   14c32:	e09d      	b.n	14d70 <_malloc_r+0x1c0>
   14c34:	2a00      	cmp	r2, #0
   14c36:	da7c      	bge.n	14d32 <_malloc_r+0x182>
   14c38:	68e4      	ldr	r4, [r4, #12]
   14c3a:	42a1      	cmp	r1, r4
   14c3c:	d1f3      	bne.n	14c26 <_malloc_r+0x76>
   14c3e:	0032      	movs	r2, r6
   14c40:	6934      	ldr	r4, [r6, #16]
   14c42:	3208      	adds	r2, #8
   14c44:	4294      	cmp	r4, r2
   14c46:	d100      	bne.n	14c4a <_malloc_r+0x9a>
   14c48:	e190      	b.n	14f6c <_malloc_r+0x3bc>
   14c4a:	2303      	movs	r3, #3
   14c4c:	6861      	ldr	r1, [r4, #4]
   14c4e:	4399      	bics	r1, r3
   14c50:	4689      	mov	r9, r1
   14c52:	1b49      	subs	r1, r1, r5
   14c54:	290f      	cmp	r1, #15
   14c56:	dd00      	ble.n	14c5a <_malloc_r+0xaa>
   14c58:	e162      	b.n	14f20 <_malloc_r+0x370>
   14c5a:	6172      	str	r2, [r6, #20]
   14c5c:	6132      	str	r2, [r6, #16]
   14c5e:	2900      	cmp	r1, #0
   14c60:	db00      	blt.n	14c64 <_malloc_r+0xb4>
   14c62:	e087      	b.n	14d74 <_malloc_r+0x1c4>
   14c64:	4ab9      	ldr	r2, [pc, #740]	; (14f4c <_malloc_r+0x39c>)
   14c66:	464b      	mov	r3, r9
   14c68:	4591      	cmp	r9, r2
   14c6a:	d900      	bls.n	14c6e <_malloc_r+0xbe>
   14c6c:	e130      	b.n	14ed0 <_malloc_r+0x320>
   14c6e:	08db      	lsrs	r3, r3, #3
   14c70:	3aff      	subs	r2, #255	; 0xff
   14c72:	1099      	asrs	r1, r3, #2
   14c74:	3aff      	subs	r2, #255	; 0xff
   14c76:	408a      	lsls	r2, r1
   14c78:	00db      	lsls	r3, r3, #3
   14c7a:	6871      	ldr	r1, [r6, #4]
   14c7c:	199b      	adds	r3, r3, r6
   14c7e:	430a      	orrs	r2, r1
   14c80:	6899      	ldr	r1, [r3, #8]
   14c82:	6072      	str	r2, [r6, #4]
   14c84:	60e3      	str	r3, [r4, #12]
   14c86:	60a1      	str	r1, [r4, #8]
   14c88:	609c      	str	r4, [r3, #8]
   14c8a:	0013      	movs	r3, r2
   14c8c:	60cc      	str	r4, [r1, #12]
   14c8e:	2101      	movs	r1, #1
   14c90:	1082      	asrs	r2, r0, #2
   14c92:	4091      	lsls	r1, r2
   14c94:	4299      	cmp	r1, r3
   14c96:	d86f      	bhi.n	14d78 <_malloc_r+0x1c8>
   14c98:	420b      	tst	r3, r1
   14c9a:	d105      	bne.n	14ca8 <_malloc_r+0xf8>
   14c9c:	2203      	movs	r2, #3
   14c9e:	4390      	bics	r0, r2
   14ca0:	0049      	lsls	r1, r1, #1
   14ca2:	3004      	adds	r0, #4
   14ca4:	420b      	tst	r3, r1
   14ca6:	d0fb      	beq.n	14ca0 <_malloc_r+0xf0>
   14ca8:	2303      	movs	r3, #3
   14caa:	4698      	mov	r8, r3
   14cac:	00c3      	lsls	r3, r0, #3
   14cae:	4699      	mov	r9, r3
   14cb0:	44b1      	add	r9, r6
   14cb2:	46cc      	mov	ip, r9
   14cb4:	4682      	mov	sl, r0
   14cb6:	4663      	mov	r3, ip
   14cb8:	68dc      	ldr	r4, [r3, #12]
   14cba:	45a4      	cmp	ip, r4
   14cbc:	d107      	bne.n	14cce <_malloc_r+0x11e>
   14cbe:	e157      	b.n	14f70 <_malloc_r+0x3c0>
   14cc0:	2a00      	cmp	r2, #0
   14cc2:	db00      	blt.n	14cc6 <_malloc_r+0x116>
   14cc4:	e166      	b.n	14f94 <_malloc_r+0x3e4>
   14cc6:	68e4      	ldr	r4, [r4, #12]
   14cc8:	45a4      	cmp	ip, r4
   14cca:	d100      	bne.n	14cce <_malloc_r+0x11e>
   14ccc:	e150      	b.n	14f70 <_malloc_r+0x3c0>
   14cce:	4642      	mov	r2, r8
   14cd0:	6863      	ldr	r3, [r4, #4]
   14cd2:	4393      	bics	r3, r2
   14cd4:	1b5a      	subs	r2, r3, r5
   14cd6:	2a0f      	cmp	r2, #15
   14cd8:	ddf2      	ble.n	14cc0 <_malloc_r+0x110>
   14cda:	2001      	movs	r0, #1
   14cdc:	4680      	mov	r8, r0
   14cde:	1961      	adds	r1, r4, r5
   14ce0:	4305      	orrs	r5, r0
   14ce2:	6065      	str	r5, [r4, #4]
   14ce4:	68a0      	ldr	r0, [r4, #8]
   14ce6:	68e5      	ldr	r5, [r4, #12]
   14ce8:	3608      	adds	r6, #8
   14cea:	60c5      	str	r5, [r0, #12]
   14cec:	60a8      	str	r0, [r5, #8]
   14cee:	4640      	mov	r0, r8
   14cf0:	60f1      	str	r1, [r6, #12]
   14cf2:	60b1      	str	r1, [r6, #8]
   14cf4:	4310      	orrs	r0, r2
   14cf6:	6048      	str	r0, [r1, #4]
   14cf8:	60ce      	str	r6, [r1, #12]
   14cfa:	608e      	str	r6, [r1, #8]
   14cfc:	0038      	movs	r0, r7
   14cfe:	50e2      	str	r2, [r4, r3]
   14d00:	f000 fab8 	bl	15274 <__malloc_unlock>
   14d04:	0020      	movs	r0, r4
   14d06:	3008      	adds	r0, #8
   14d08:	e021      	b.n	14d4e <_malloc_r+0x19e>
   14d0a:	2910      	cmp	r1, #16
   14d0c:	d826      	bhi.n	14d5c <_malloc_r+0x1ac>
   14d0e:	0038      	movs	r0, r7
   14d10:	f000 faa8 	bl	15264 <__malloc_lock>
   14d14:	2510      	movs	r5, #16
   14d16:	2318      	movs	r3, #24
   14d18:	2002      	movs	r0, #2
   14d1a:	4e8b      	ldr	r6, [pc, #556]	; (14f48 <_malloc_r+0x398>)
   14d1c:	18f3      	adds	r3, r6, r3
   14d1e:	001a      	movs	r2, r3
   14d20:	685c      	ldr	r4, [r3, #4]
   14d22:	3a08      	subs	r2, #8
   14d24:	4294      	cmp	r4, r2
   14d26:	d100      	bne.n	14d2a <_malloc_r+0x17a>
   14d28:	e12e      	b.n	14f88 <_malloc_r+0x3d8>
   14d2a:	2303      	movs	r3, #3
   14d2c:	6862      	ldr	r2, [r4, #4]
   14d2e:	439a      	bics	r2, r3
   14d30:	0013      	movs	r3, r2
   14d32:	68e2      	ldr	r2, [r4, #12]
   14d34:	68a1      	ldr	r1, [r4, #8]
   14d36:	60ca      	str	r2, [r1, #12]
   14d38:	6091      	str	r1, [r2, #8]
   14d3a:	2201      	movs	r2, #1
   14d3c:	18e3      	adds	r3, r4, r3
   14d3e:	6859      	ldr	r1, [r3, #4]
   14d40:	0038      	movs	r0, r7
   14d42:	430a      	orrs	r2, r1
   14d44:	605a      	str	r2, [r3, #4]
   14d46:	f000 fa95 	bl	15274 <__malloc_unlock>
   14d4a:	0020      	movs	r0, r4
   14d4c:	3008      	adds	r0, #8
   14d4e:	b003      	add	sp, #12
   14d50:	bc3c      	pop	{r2, r3, r4, r5}
   14d52:	4690      	mov	r8, r2
   14d54:	4699      	mov	r9, r3
   14d56:	46a2      	mov	sl, r4
   14d58:	46ab      	mov	fp, r5
   14d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d5c:	230c      	movs	r3, #12
   14d5e:	2000      	movs	r0, #0
   14d60:	603b      	str	r3, [r7, #0]
   14d62:	e7f4      	b.n	14d4e <_malloc_r+0x19e>
   14d64:	2180      	movs	r1, #128	; 0x80
   14d66:	233f      	movs	r3, #63	; 0x3f
   14d68:	2040      	movs	r0, #64	; 0x40
   14d6a:	0089      	lsls	r1, r1, #2
   14d6c:	4698      	mov	r8, r3
   14d6e:	e746      	b.n	14bfe <_malloc_r+0x4e>
   14d70:	4640      	mov	r0, r8
   14d72:	e764      	b.n	14c3e <_malloc_r+0x8e>
   14d74:	464b      	mov	r3, r9
   14d76:	e7e0      	b.n	14d3a <_malloc_r+0x18a>
   14d78:	2303      	movs	r3, #3
   14d7a:	68b4      	ldr	r4, [r6, #8]
   14d7c:	6862      	ldr	r2, [r4, #4]
   14d7e:	439a      	bics	r2, r3
   14d80:	4690      	mov	r8, r2
   14d82:	42aa      	cmp	r2, r5
   14d84:	d303      	bcc.n	14d8e <_malloc_r+0x1de>
   14d86:	1b53      	subs	r3, r2, r5
   14d88:	2b0f      	cmp	r3, #15
   14d8a:	dd00      	ble.n	14d8e <_malloc_r+0x1de>
   14d8c:	e086      	b.n	14e9c <_malloc_r+0x2ec>
   14d8e:	0023      	movs	r3, r4
   14d90:	4443      	add	r3, r8
   14d92:	4a6f      	ldr	r2, [pc, #444]	; (14f50 <_malloc_r+0x3a0>)
   14d94:	9301      	str	r3, [sp, #4]
   14d96:	4b6f      	ldr	r3, [pc, #444]	; (14f54 <_malloc_r+0x3a4>)
   14d98:	4693      	mov	fp, r2
   14d9a:	681b      	ldr	r3, [r3, #0]
   14d9c:	6812      	ldr	r2, [r2, #0]
   14d9e:	18eb      	adds	r3, r5, r3
   14da0:	3201      	adds	r2, #1
   14da2:	d100      	bne.n	14da6 <_malloc_r+0x1f6>
   14da4:	e168      	b.n	15078 <_malloc_r+0x4c8>
   14da6:	4a6c      	ldr	r2, [pc, #432]	; (14f58 <_malloc_r+0x3a8>)
   14da8:	4694      	mov	ip, r2
   14daa:	4463      	add	r3, ip
   14dac:	0b1b      	lsrs	r3, r3, #12
   14dae:	031b      	lsls	r3, r3, #12
   14db0:	9300      	str	r3, [sp, #0]
   14db2:	9900      	ldr	r1, [sp, #0]
   14db4:	0038      	movs	r0, r7
   14db6:	f000 ff6b 	bl	15c90 <_sbrk_r>
   14dba:	0003      	movs	r3, r0
   14dbc:	4681      	mov	r9, r0
   14dbe:	3301      	adds	r3, #1
   14dc0:	d061      	beq.n	14e86 <_malloc_r+0x2d6>
   14dc2:	9b01      	ldr	r3, [sp, #4]
   14dc4:	4283      	cmp	r3, r0
   14dc6:	d900      	bls.n	14dca <_malloc_r+0x21a>
   14dc8:	e0ff      	b.n	14fca <_malloc_r+0x41a>
   14dca:	4b64      	ldr	r3, [pc, #400]	; (14f5c <_malloc_r+0x3ac>)
   14dcc:	9a00      	ldr	r2, [sp, #0]
   14dce:	469a      	mov	sl, r3
   14dd0:	681b      	ldr	r3, [r3, #0]
   14dd2:	469c      	mov	ip, r3
   14dd4:	4653      	mov	r3, sl
   14dd6:	4462      	add	r2, ip
   14dd8:	601a      	str	r2, [r3, #0]
   14dda:	9b01      	ldr	r3, [sp, #4]
   14ddc:	0011      	movs	r1, r2
   14dde:	4283      	cmp	r3, r0
   14de0:	d100      	bne.n	14de4 <_malloc_r+0x234>
   14de2:	e155      	b.n	15090 <_malloc_r+0x4e0>
   14de4:	465b      	mov	r3, fp
   14de6:	681b      	ldr	r3, [r3, #0]
   14de8:	3301      	adds	r3, #1
   14dea:	d100      	bne.n	14dee <_malloc_r+0x23e>
   14dec:	e16c      	b.n	150c8 <_malloc_r+0x518>
   14dee:	464b      	mov	r3, r9
   14df0:	9a01      	ldr	r2, [sp, #4]
   14df2:	1a9b      	subs	r3, r3, r2
   14df4:	1859      	adds	r1, r3, r1
   14df6:	4653      	mov	r3, sl
   14df8:	6019      	str	r1, [r3, #0]
   14dfa:	2307      	movs	r3, #7
   14dfc:	464a      	mov	r2, r9
   14dfe:	4013      	ands	r3, r2
   14e00:	d100      	bne.n	14e04 <_malloc_r+0x254>
   14e02:	e124      	b.n	1504e <_malloc_r+0x49e>
   14e04:	2108      	movs	r1, #8
   14e06:	4689      	mov	r9, r1
   14e08:	4955      	ldr	r1, [pc, #340]	; (14f60 <_malloc_r+0x3b0>)
   14e0a:	1ad2      	subs	r2, r2, r3
   14e0c:	4491      	add	r9, r2
   14e0e:	1acb      	subs	r3, r1, r3
   14e10:	9a00      	ldr	r2, [sp, #0]
   14e12:	0038      	movs	r0, r7
   14e14:	444a      	add	r2, r9
   14e16:	0511      	lsls	r1, r2, #20
   14e18:	0d09      	lsrs	r1, r1, #20
   14e1a:	1a5b      	subs	r3, r3, r1
   14e1c:	0019      	movs	r1, r3
   14e1e:	469b      	mov	fp, r3
   14e20:	f000 ff36 	bl	15c90 <_sbrk_r>
   14e24:	1c43      	adds	r3, r0, #1
   14e26:	d100      	bne.n	14e2a <_malloc_r+0x27a>
   14e28:	e142      	b.n	150b0 <_malloc_r+0x500>
   14e2a:	464b      	mov	r3, r9
   14e2c:	1ac0      	subs	r0, r0, r3
   14e2e:	2301      	movs	r3, #1
   14e30:	4458      	add	r0, fp
   14e32:	4318      	orrs	r0, r3
   14e34:	4653      	mov	r3, sl
   14e36:	681b      	ldr	r3, [r3, #0]
   14e38:	445b      	add	r3, fp
   14e3a:	0019      	movs	r1, r3
   14e3c:	4653      	mov	r3, sl
   14e3e:	6019      	str	r1, [r3, #0]
   14e40:	464b      	mov	r3, r9
   14e42:	60b3      	str	r3, [r6, #8]
   14e44:	6058      	str	r0, [r3, #4]
   14e46:	42b4      	cmp	r4, r6
   14e48:	d013      	beq.n	14e72 <_malloc_r+0x2c2>
   14e4a:	4643      	mov	r3, r8
   14e4c:	2b0f      	cmp	r3, #15
   14e4e:	d800      	bhi.n	14e52 <_malloc_r+0x2a2>
   14e50:	e0e8      	b.n	15024 <_malloc_r+0x474>
   14e52:	4643      	mov	r3, r8
   14e54:	2207      	movs	r2, #7
   14e56:	6860      	ldr	r0, [r4, #4]
   14e58:	3b0c      	subs	r3, #12
   14e5a:	4393      	bics	r3, r2
   14e5c:	3a06      	subs	r2, #6
   14e5e:	4002      	ands	r2, r0
   14e60:	2005      	movs	r0, #5
   14e62:	431a      	orrs	r2, r3
   14e64:	6062      	str	r2, [r4, #4]
   14e66:	18e2      	adds	r2, r4, r3
   14e68:	6050      	str	r0, [r2, #4]
   14e6a:	6090      	str	r0, [r2, #8]
   14e6c:	2b0f      	cmp	r3, #15
   14e6e:	d900      	bls.n	14e72 <_malloc_r+0x2c2>
   14e70:	e122      	b.n	150b8 <_malloc_r+0x508>
   14e72:	4b3c      	ldr	r3, [pc, #240]	; (14f64 <_malloc_r+0x3b4>)
   14e74:	681a      	ldr	r2, [r3, #0]
   14e76:	4291      	cmp	r1, r2
   14e78:	d900      	bls.n	14e7c <_malloc_r+0x2cc>
   14e7a:	6019      	str	r1, [r3, #0]
   14e7c:	4b3a      	ldr	r3, [pc, #232]	; (14f68 <_malloc_r+0x3b8>)
   14e7e:	681a      	ldr	r2, [r3, #0]
   14e80:	4291      	cmp	r1, r2
   14e82:	d900      	bls.n	14e86 <_malloc_r+0x2d6>
   14e84:	6019      	str	r1, [r3, #0]
   14e86:	2303      	movs	r3, #3
   14e88:	68b4      	ldr	r4, [r6, #8]
   14e8a:	6862      	ldr	r2, [r4, #4]
   14e8c:	439a      	bics	r2, r3
   14e8e:	1b53      	subs	r3, r2, r5
   14e90:	4295      	cmp	r5, r2
   14e92:	d900      	bls.n	14e96 <_malloc_r+0x2e6>
   14e94:	e0c9      	b.n	1502a <_malloc_r+0x47a>
   14e96:	2b0f      	cmp	r3, #15
   14e98:	dc00      	bgt.n	14e9c <_malloc_r+0x2ec>
   14e9a:	e0c6      	b.n	1502a <_malloc_r+0x47a>
   14e9c:	2201      	movs	r2, #1
   14e9e:	0029      	movs	r1, r5
   14ea0:	4313      	orrs	r3, r2
   14ea2:	4311      	orrs	r1, r2
   14ea4:	1965      	adds	r5, r4, r5
   14ea6:	6061      	str	r1, [r4, #4]
   14ea8:	0038      	movs	r0, r7
   14eaa:	60b5      	str	r5, [r6, #8]
   14eac:	606b      	str	r3, [r5, #4]
   14eae:	f000 f9e1 	bl	15274 <__malloc_unlock>
   14eb2:	0020      	movs	r0, r4
   14eb4:	3008      	adds	r0, #8
   14eb6:	e74a      	b.n	14d4e <_malloc_r+0x19e>
   14eb8:	2814      	cmp	r0, #20
   14eba:	d97a      	bls.n	14fb2 <_malloc_r+0x402>
   14ebc:	2854      	cmp	r0, #84	; 0x54
   14ebe:	d900      	bls.n	14ec2 <_malloc_r+0x312>
   14ec0:	e0ba      	b.n	15038 <_malloc_r+0x488>
   14ec2:	236e      	movs	r3, #110	; 0x6e
   14ec4:	4698      	mov	r8, r3
   14ec6:	0b28      	lsrs	r0, r5, #12
   14ec8:	4480      	add	r8, r0
   14eca:	306f      	adds	r0, #111	; 0x6f
   14ecc:	00c1      	lsls	r1, r0, #3
   14ece:	e696      	b.n	14bfe <_malloc_r+0x4e>
   14ed0:	0a5a      	lsrs	r2, r3, #9
   14ed2:	2a04      	cmp	r2, #4
   14ed4:	d973      	bls.n	14fbe <_malloc_r+0x40e>
   14ed6:	2a14      	cmp	r2, #20
   14ed8:	d900      	bls.n	14edc <_malloc_r+0x32c>
   14eda:	e0d0      	b.n	1507e <_malloc_r+0x4ce>
   14edc:	0011      	movs	r1, r2
   14ede:	325c      	adds	r2, #92	; 0x5c
   14ee0:	315b      	adds	r1, #91	; 0x5b
   14ee2:	00d2      	lsls	r2, r2, #3
   14ee4:	2308      	movs	r3, #8
   14ee6:	425b      	negs	r3, r3
   14ee8:	469c      	mov	ip, r3
   14eea:	18b2      	adds	r2, r6, r2
   14eec:	4494      	add	ip, r2
   14eee:	4663      	mov	r3, ip
   14ef0:	689a      	ldr	r2, [r3, #8]
   14ef2:	2303      	movs	r3, #3
   14ef4:	4698      	mov	r8, r3
   14ef6:	4594      	cmp	ip, r2
   14ef8:	d100      	bne.n	14efc <_malloc_r+0x34c>
   14efa:	e0ab      	b.n	15054 <_malloc_r+0x4a4>
   14efc:	4643      	mov	r3, r8
   14efe:	6851      	ldr	r1, [r2, #4]
   14f00:	4399      	bics	r1, r3
   14f02:	4589      	cmp	r9, r1
   14f04:	d300      	bcc.n	14f08 <_malloc_r+0x358>
   14f06:	e095      	b.n	15034 <_malloc_r+0x484>
   14f08:	6892      	ldr	r2, [r2, #8]
   14f0a:	4594      	cmp	ip, r2
   14f0c:	d1f6      	bne.n	14efc <_malloc_r+0x34c>
   14f0e:	4663      	mov	r3, ip
   14f10:	68da      	ldr	r2, [r3, #12]
   14f12:	6873      	ldr	r3, [r6, #4]
   14f14:	4661      	mov	r1, ip
   14f16:	60e2      	str	r2, [r4, #12]
   14f18:	60a1      	str	r1, [r4, #8]
   14f1a:	6094      	str	r4, [r2, #8]
   14f1c:	60cc      	str	r4, [r1, #12]
   14f1e:	e6b6      	b.n	14c8e <_malloc_r+0xde>
   14f20:	2301      	movs	r3, #1
   14f22:	1960      	adds	r0, r4, r5
   14f24:	431d      	orrs	r5, r3
   14f26:	6065      	str	r5, [r4, #4]
   14f28:	6170      	str	r0, [r6, #20]
   14f2a:	6130      	str	r0, [r6, #16]
   14f2c:	60c2      	str	r2, [r0, #12]
   14f2e:	6082      	str	r2, [r0, #8]
   14f30:	001a      	movs	r2, r3
   14f32:	464b      	mov	r3, r9
   14f34:	430a      	orrs	r2, r1
   14f36:	6042      	str	r2, [r0, #4]
   14f38:	0038      	movs	r0, r7
   14f3a:	50e1      	str	r1, [r4, r3]
   14f3c:	f000 f99a 	bl	15274 <__malloc_unlock>
   14f40:	0020      	movs	r0, r4
   14f42:	3008      	adds	r0, #8
   14f44:	e703      	b.n	14d4e <_malloc_r+0x19e>
   14f46:	46c0      	nop			; (mov r8, r8)
   14f48:	20000618 	.word	0x20000618
   14f4c:	000001ff 	.word	0x000001ff
   14f50:	20000a20 	.word	0x20000a20
   14f54:	20000f00 	.word	0x20000f00
   14f58:	0000100f 	.word	0x0000100f
   14f5c:	20000ed0 	.word	0x20000ed0
   14f60:	00001008 	.word	0x00001008
   14f64:	20000ef8 	.word	0x20000ef8
   14f68:	20000efc 	.word	0x20000efc
   14f6c:	6873      	ldr	r3, [r6, #4]
   14f6e:	e68e      	b.n	14c8e <_malloc_r+0xde>
   14f70:	2308      	movs	r3, #8
   14f72:	469b      	mov	fp, r3
   14f74:	3b07      	subs	r3, #7
   14f76:	44dc      	add	ip, fp
   14f78:	469b      	mov	fp, r3
   14f7a:	44da      	add	sl, fp
   14f7c:	4643      	mov	r3, r8
   14f7e:	4652      	mov	r2, sl
   14f80:	4213      	tst	r3, r2
   14f82:	d000      	beq.n	14f86 <_malloc_r+0x3d6>
   14f84:	e697      	b.n	14cb6 <_malloc_r+0x106>
   14f86:	e037      	b.n	14ff8 <_malloc_r+0x448>
   14f88:	68dc      	ldr	r4, [r3, #12]
   14f8a:	3002      	adds	r0, #2
   14f8c:	42a3      	cmp	r3, r4
   14f8e:	d100      	bne.n	14f92 <_malloc_r+0x3e2>
   14f90:	e655      	b.n	14c3e <_malloc_r+0x8e>
   14f92:	e6ca      	b.n	14d2a <_malloc_r+0x17a>
   14f94:	2201      	movs	r2, #1
   14f96:	18e3      	adds	r3, r4, r3
   14f98:	6859      	ldr	r1, [r3, #4]
   14f9a:	0038      	movs	r0, r7
   14f9c:	430a      	orrs	r2, r1
   14f9e:	605a      	str	r2, [r3, #4]
   14fa0:	68e3      	ldr	r3, [r4, #12]
   14fa2:	68a2      	ldr	r2, [r4, #8]
   14fa4:	60d3      	str	r3, [r2, #12]
   14fa6:	609a      	str	r2, [r3, #8]
   14fa8:	f000 f964 	bl	15274 <__malloc_unlock>
   14fac:	0020      	movs	r0, r4
   14fae:	3008      	adds	r0, #8
   14fb0:	e6cd      	b.n	14d4e <_malloc_r+0x19e>
   14fb2:	235b      	movs	r3, #91	; 0x5b
   14fb4:	4698      	mov	r8, r3
   14fb6:	4480      	add	r8, r0
   14fb8:	305c      	adds	r0, #92	; 0x5c
   14fba:	00c1      	lsls	r1, r0, #3
   14fbc:	e61f      	b.n	14bfe <_malloc_r+0x4e>
   14fbe:	099a      	lsrs	r2, r3, #6
   14fc0:	0011      	movs	r1, r2
   14fc2:	3239      	adds	r2, #57	; 0x39
   14fc4:	3138      	adds	r1, #56	; 0x38
   14fc6:	00d2      	lsls	r2, r2, #3
   14fc8:	e78c      	b.n	14ee4 <_malloc_r+0x334>
   14fca:	42b4      	cmp	r4, r6
   14fcc:	d000      	beq.n	14fd0 <_malloc_r+0x420>
   14fce:	e75a      	b.n	14e86 <_malloc_r+0x2d6>
   14fd0:	4b4f      	ldr	r3, [pc, #316]	; (15110 <_malloc_r+0x560>)
   14fd2:	9a00      	ldr	r2, [sp, #0]
   14fd4:	469a      	mov	sl, r3
   14fd6:	681b      	ldr	r3, [r3, #0]
   14fd8:	469c      	mov	ip, r3
   14fda:	4653      	mov	r3, sl
   14fdc:	4462      	add	r2, ip
   14fde:	0011      	movs	r1, r2
   14fe0:	601a      	str	r2, [r3, #0]
   14fe2:	e6ff      	b.n	14de4 <_malloc_r+0x234>
   14fe4:	2308      	movs	r3, #8
   14fe6:	425b      	negs	r3, r3
   14fe8:	469c      	mov	ip, r3
   14fea:	44e1      	add	r9, ip
   14fec:	464b      	mov	r3, r9
   14fee:	689b      	ldr	r3, [r3, #8]
   14ff0:	3801      	subs	r0, #1
   14ff2:	4599      	cmp	r9, r3
   14ff4:	d000      	beq.n	14ff8 <_malloc_r+0x448>
   14ff6:	e084      	b.n	15102 <_malloc_r+0x552>
   14ff8:	4643      	mov	r3, r8
   14ffa:	4203      	tst	r3, r0
   14ffc:	d1f2      	bne.n	14fe4 <_malloc_r+0x434>
   14ffe:	6873      	ldr	r3, [r6, #4]
   15000:	438b      	bics	r3, r1
   15002:	6073      	str	r3, [r6, #4]
   15004:	0049      	lsls	r1, r1, #1
   15006:	4299      	cmp	r1, r3
   15008:	d900      	bls.n	1500c <_malloc_r+0x45c>
   1500a:	e6b5      	b.n	14d78 <_malloc_r+0x1c8>
   1500c:	2900      	cmp	r1, #0
   1500e:	d100      	bne.n	15012 <_malloc_r+0x462>
   15010:	e6b2      	b.n	14d78 <_malloc_r+0x1c8>
   15012:	4650      	mov	r0, sl
   15014:	420b      	tst	r3, r1
   15016:	d000      	beq.n	1501a <_malloc_r+0x46a>
   15018:	e648      	b.n	14cac <_malloc_r+0xfc>
   1501a:	0049      	lsls	r1, r1, #1
   1501c:	3004      	adds	r0, #4
   1501e:	420b      	tst	r3, r1
   15020:	d0fb      	beq.n	1501a <_malloc_r+0x46a>
   15022:	e643      	b.n	14cac <_malloc_r+0xfc>
   15024:	2301      	movs	r3, #1
   15026:	464a      	mov	r2, r9
   15028:	6053      	str	r3, [r2, #4]
   1502a:	0038      	movs	r0, r7
   1502c:	f000 f922 	bl	15274 <__malloc_unlock>
   15030:	2000      	movs	r0, #0
   15032:	e68c      	b.n	14d4e <_malloc_r+0x19e>
   15034:	4694      	mov	ip, r2
   15036:	e76a      	b.n	14f0e <_malloc_r+0x35e>
   15038:	23aa      	movs	r3, #170	; 0xaa
   1503a:	005b      	lsls	r3, r3, #1
   1503c:	4298      	cmp	r0, r3
   1503e:	d811      	bhi.n	15064 <_malloc_r+0x4b4>
   15040:	3bdd      	subs	r3, #221	; 0xdd
   15042:	4698      	mov	r8, r3
   15044:	0be8      	lsrs	r0, r5, #15
   15046:	4480      	add	r8, r0
   15048:	3078      	adds	r0, #120	; 0x78
   1504a:	00c1      	lsls	r1, r0, #3
   1504c:	e5d7      	b.n	14bfe <_malloc_r+0x4e>
   1504e:	2380      	movs	r3, #128	; 0x80
   15050:	015b      	lsls	r3, r3, #5
   15052:	e6dd      	b.n	14e10 <_malloc_r+0x260>
   15054:	1089      	asrs	r1, r1, #2
   15056:	3b02      	subs	r3, #2
   15058:	408b      	lsls	r3, r1
   1505a:	6872      	ldr	r2, [r6, #4]
   1505c:	4313      	orrs	r3, r2
   1505e:	6073      	str	r3, [r6, #4]
   15060:	4662      	mov	r2, ip
   15062:	e757      	b.n	14f14 <_malloc_r+0x364>
   15064:	4b2b      	ldr	r3, [pc, #172]	; (15114 <_malloc_r+0x564>)
   15066:	4298      	cmp	r0, r3
   15068:	d81c      	bhi.n	150a4 <_malloc_r+0x4f4>
   1506a:	237c      	movs	r3, #124	; 0x7c
   1506c:	4698      	mov	r8, r3
   1506e:	0ca8      	lsrs	r0, r5, #18
   15070:	4480      	add	r8, r0
   15072:	307d      	adds	r0, #125	; 0x7d
   15074:	00c1      	lsls	r1, r0, #3
   15076:	e5c2      	b.n	14bfe <_malloc_r+0x4e>
   15078:	3310      	adds	r3, #16
   1507a:	9300      	str	r3, [sp, #0]
   1507c:	e699      	b.n	14db2 <_malloc_r+0x202>
   1507e:	2a54      	cmp	r2, #84	; 0x54
   15080:	d826      	bhi.n	150d0 <_malloc_r+0x520>
   15082:	464b      	mov	r3, r9
   15084:	0b1a      	lsrs	r2, r3, #12
   15086:	0011      	movs	r1, r2
   15088:	326f      	adds	r2, #111	; 0x6f
   1508a:	316e      	adds	r1, #110	; 0x6e
   1508c:	00d2      	lsls	r2, r2, #3
   1508e:	e729      	b.n	14ee4 <_malloc_r+0x334>
   15090:	051b      	lsls	r3, r3, #20
   15092:	d000      	beq.n	15096 <_malloc_r+0x4e6>
   15094:	e6a6      	b.n	14de4 <_malloc_r+0x234>
   15096:	2001      	movs	r0, #1
   15098:	9b00      	ldr	r3, [sp, #0]
   1509a:	68b2      	ldr	r2, [r6, #8]
   1509c:	4443      	add	r3, r8
   1509e:	4303      	orrs	r3, r0
   150a0:	6053      	str	r3, [r2, #4]
   150a2:	e6e6      	b.n	14e72 <_malloc_r+0x2c2>
   150a4:	21fe      	movs	r1, #254	; 0xfe
   150a6:	237e      	movs	r3, #126	; 0x7e
   150a8:	207f      	movs	r0, #127	; 0x7f
   150aa:	0089      	lsls	r1, r1, #2
   150ac:	4698      	mov	r8, r3
   150ae:	e5a6      	b.n	14bfe <_malloc_r+0x4e>
   150b0:	2300      	movs	r3, #0
   150b2:	2001      	movs	r0, #1
   150b4:	469b      	mov	fp, r3
   150b6:	e6bd      	b.n	14e34 <_malloc_r+0x284>
   150b8:	0021      	movs	r1, r4
   150ba:	0038      	movs	r0, r7
   150bc:	3108      	adds	r1, #8
   150be:	f7ff fa49 	bl	14554 <_free_r>
   150c2:	4653      	mov	r3, sl
   150c4:	6819      	ldr	r1, [r3, #0]
   150c6:	e6d4      	b.n	14e72 <_malloc_r+0x2c2>
   150c8:	465b      	mov	r3, fp
   150ca:	464a      	mov	r2, r9
   150cc:	601a      	str	r2, [r3, #0]
   150ce:	e694      	b.n	14dfa <_malloc_r+0x24a>
   150d0:	21aa      	movs	r1, #170	; 0xaa
   150d2:	0049      	lsls	r1, r1, #1
   150d4:	428a      	cmp	r2, r1
   150d6:	d806      	bhi.n	150e6 <_malloc_r+0x536>
   150d8:	464b      	mov	r3, r9
   150da:	0bda      	lsrs	r2, r3, #15
   150dc:	0011      	movs	r1, r2
   150de:	3278      	adds	r2, #120	; 0x78
   150e0:	3177      	adds	r1, #119	; 0x77
   150e2:	00d2      	lsls	r2, r2, #3
   150e4:	e6fe      	b.n	14ee4 <_malloc_r+0x334>
   150e6:	490b      	ldr	r1, [pc, #44]	; (15114 <_malloc_r+0x564>)
   150e8:	428a      	cmp	r2, r1
   150ea:	d806      	bhi.n	150fa <_malloc_r+0x54a>
   150ec:	464b      	mov	r3, r9
   150ee:	0c9a      	lsrs	r2, r3, #18
   150f0:	0011      	movs	r1, r2
   150f2:	327d      	adds	r2, #125	; 0x7d
   150f4:	317c      	adds	r1, #124	; 0x7c
   150f6:	00d2      	lsls	r2, r2, #3
   150f8:	e6f4      	b.n	14ee4 <_malloc_r+0x334>
   150fa:	22fe      	movs	r2, #254	; 0xfe
   150fc:	217e      	movs	r1, #126	; 0x7e
   150fe:	0092      	lsls	r2, r2, #2
   15100:	e6f0      	b.n	14ee4 <_malloc_r+0x334>
   15102:	6873      	ldr	r3, [r6, #4]
   15104:	e77e      	b.n	15004 <_malloc_r+0x454>
   15106:	002b      	movs	r3, r5
   15108:	08e8      	lsrs	r0, r5, #3
   1510a:	3308      	adds	r3, #8
   1510c:	e605      	b.n	14d1a <_malloc_r+0x16a>
   1510e:	46c0      	nop			; (mov r8, r8)
   15110:	20000ed0 	.word	0x20000ed0
   15114:	00000554 	.word	0x00000554

00015118 <__ascii_mbtowc>:
   15118:	b082      	sub	sp, #8
   1511a:	2900      	cmp	r1, #0
   1511c:	d00a      	beq.n	15134 <__ascii_mbtowc+0x1c>
   1511e:	2a00      	cmp	r2, #0
   15120:	d00b      	beq.n	1513a <__ascii_mbtowc+0x22>
   15122:	2b00      	cmp	r3, #0
   15124:	d00b      	beq.n	1513e <__ascii_mbtowc+0x26>
   15126:	7813      	ldrb	r3, [r2, #0]
   15128:	600b      	str	r3, [r1, #0]
   1512a:	7810      	ldrb	r0, [r2, #0]
   1512c:	1e43      	subs	r3, r0, #1
   1512e:	4198      	sbcs	r0, r3
   15130:	b002      	add	sp, #8
   15132:	4770      	bx	lr
   15134:	a901      	add	r1, sp, #4
   15136:	2a00      	cmp	r2, #0
   15138:	d1f3      	bne.n	15122 <__ascii_mbtowc+0xa>
   1513a:	2000      	movs	r0, #0
   1513c:	e7f8      	b.n	15130 <__ascii_mbtowc+0x18>
   1513e:	2002      	movs	r0, #2
   15140:	4240      	negs	r0, r0
   15142:	e7f5      	b.n	15130 <__ascii_mbtowc+0x18>

00015144 <memchr>:
   15144:	b570      	push	{r4, r5, r6, lr}
   15146:	b2cd      	uxtb	r5, r1
   15148:	0783      	lsls	r3, r0, #30
   1514a:	d034      	beq.n	151b6 <memchr+0x72>
   1514c:	1e54      	subs	r4, r2, #1
   1514e:	2a00      	cmp	r2, #0
   15150:	d01b      	beq.n	1518a <memchr+0x46>
   15152:	7803      	ldrb	r3, [r0, #0]
   15154:	42ab      	cmp	r3, r5
   15156:	d019      	beq.n	1518c <memchr+0x48>
   15158:	2203      	movs	r2, #3
   1515a:	e004      	b.n	15166 <memchr+0x22>
   1515c:	3c01      	subs	r4, #1
   1515e:	d314      	bcc.n	1518a <memchr+0x46>
   15160:	7803      	ldrb	r3, [r0, #0]
   15162:	42ab      	cmp	r3, r5
   15164:	d012      	beq.n	1518c <memchr+0x48>
   15166:	3001      	adds	r0, #1
   15168:	4210      	tst	r0, r2
   1516a:	d1f7      	bne.n	1515c <memchr+0x18>
   1516c:	2c03      	cmp	r4, #3
   1516e:	d80e      	bhi.n	1518e <memchr+0x4a>
   15170:	2c00      	cmp	r4, #0
   15172:	d00a      	beq.n	1518a <memchr+0x46>
   15174:	7803      	ldrb	r3, [r0, #0]
   15176:	42ab      	cmp	r3, r5
   15178:	d008      	beq.n	1518c <memchr+0x48>
   1517a:	1904      	adds	r4, r0, r4
   1517c:	e002      	b.n	15184 <memchr+0x40>
   1517e:	7803      	ldrb	r3, [r0, #0]
   15180:	42ab      	cmp	r3, r5
   15182:	d003      	beq.n	1518c <memchr+0x48>
   15184:	3001      	adds	r0, #1
   15186:	4284      	cmp	r4, r0
   15188:	d1f9      	bne.n	1517e <memchr+0x3a>
   1518a:	2000      	movs	r0, #0
   1518c:	bd70      	pop	{r4, r5, r6, pc}
   1518e:	22ff      	movs	r2, #255	; 0xff
   15190:	060b      	lsls	r3, r1, #24
   15192:	0c1b      	lsrs	r3, r3, #16
   15194:	4011      	ands	r1, r2
   15196:	4319      	orrs	r1, r3
   15198:	040b      	lsls	r3, r1, #16
   1519a:	4e08      	ldr	r6, [pc, #32]	; (151bc <memchr+0x78>)
   1519c:	4319      	orrs	r1, r3
   1519e:	6803      	ldr	r3, [r0, #0]
   151a0:	4a07      	ldr	r2, [pc, #28]	; (151c0 <memchr+0x7c>)
   151a2:	404b      	eors	r3, r1
   151a4:	189a      	adds	r2, r3, r2
   151a6:	439a      	bics	r2, r3
   151a8:	4232      	tst	r2, r6
   151aa:	d1e3      	bne.n	15174 <memchr+0x30>
   151ac:	3c04      	subs	r4, #4
   151ae:	3004      	adds	r0, #4
   151b0:	2c03      	cmp	r4, #3
   151b2:	d8f4      	bhi.n	1519e <memchr+0x5a>
   151b4:	e7dc      	b.n	15170 <memchr+0x2c>
   151b6:	0014      	movs	r4, r2
   151b8:	e7d8      	b.n	1516c <memchr+0x28>
   151ba:	46c0      	nop			; (mov r8, r8)
   151bc:	80808080 	.word	0x80808080
   151c0:	fefefeff 	.word	0xfefefeff

000151c4 <memmove>:
   151c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   151c6:	4288      	cmp	r0, r1
   151c8:	d90a      	bls.n	151e0 <memmove+0x1c>
   151ca:	188b      	adds	r3, r1, r2
   151cc:	4298      	cmp	r0, r3
   151ce:	d207      	bcs.n	151e0 <memmove+0x1c>
   151d0:	1e53      	subs	r3, r2, #1
   151d2:	2a00      	cmp	r2, #0
   151d4:	d003      	beq.n	151de <memmove+0x1a>
   151d6:	5cca      	ldrb	r2, [r1, r3]
   151d8:	54c2      	strb	r2, [r0, r3]
   151da:	3b01      	subs	r3, #1
   151dc:	d2fb      	bcs.n	151d6 <memmove+0x12>
   151de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151e0:	0005      	movs	r5, r0
   151e2:	2a0f      	cmp	r2, #15
   151e4:	d808      	bhi.n	151f8 <memmove+0x34>
   151e6:	2a00      	cmp	r2, #0
   151e8:	d0f9      	beq.n	151de <memmove+0x1a>
   151ea:	2300      	movs	r3, #0
   151ec:	5ccc      	ldrb	r4, [r1, r3]
   151ee:	54ec      	strb	r4, [r5, r3]
   151f0:	3301      	adds	r3, #1
   151f2:	4293      	cmp	r3, r2
   151f4:	d1fa      	bne.n	151ec <memmove+0x28>
   151f6:	e7f2      	b.n	151de <memmove+0x1a>
   151f8:	000b      	movs	r3, r1
   151fa:	4303      	orrs	r3, r0
   151fc:	079b      	lsls	r3, r3, #30
   151fe:	d12d      	bne.n	1525c <memmove+0x98>
   15200:	0015      	movs	r5, r2
   15202:	000c      	movs	r4, r1
   15204:	0003      	movs	r3, r0
   15206:	3d10      	subs	r5, #16
   15208:	092f      	lsrs	r7, r5, #4
   1520a:	3701      	adds	r7, #1
   1520c:	013f      	lsls	r7, r7, #4
   1520e:	19c7      	adds	r7, r0, r7
   15210:	6826      	ldr	r6, [r4, #0]
   15212:	601e      	str	r6, [r3, #0]
   15214:	6866      	ldr	r6, [r4, #4]
   15216:	605e      	str	r6, [r3, #4]
   15218:	68a6      	ldr	r6, [r4, #8]
   1521a:	609e      	str	r6, [r3, #8]
   1521c:	68e6      	ldr	r6, [r4, #12]
   1521e:	3410      	adds	r4, #16
   15220:	60de      	str	r6, [r3, #12]
   15222:	3310      	adds	r3, #16
   15224:	429f      	cmp	r7, r3
   15226:	d1f3      	bne.n	15210 <memmove+0x4c>
   15228:	240f      	movs	r4, #15
   1522a:	43a5      	bics	r5, r4
   1522c:	3510      	adds	r5, #16
   1522e:	1949      	adds	r1, r1, r5
   15230:	4014      	ands	r4, r2
   15232:	1945      	adds	r5, r0, r5
   15234:	2c03      	cmp	r4, #3
   15236:	d913      	bls.n	15260 <memmove+0x9c>
   15238:	2300      	movs	r3, #0
   1523a:	1f27      	subs	r7, r4, #4
   1523c:	08be      	lsrs	r6, r7, #2
   1523e:	3601      	adds	r6, #1
   15240:	00b6      	lsls	r6, r6, #2
   15242:	58cc      	ldr	r4, [r1, r3]
   15244:	50ec      	str	r4, [r5, r3]
   15246:	3304      	adds	r3, #4
   15248:	42b3      	cmp	r3, r6
   1524a:	d1fa      	bne.n	15242 <memmove+0x7e>
   1524c:	2603      	movs	r6, #3
   1524e:	43b7      	bics	r7, r6
   15250:	1d3c      	adds	r4, r7, #4
   15252:	1909      	adds	r1, r1, r4
   15254:	192d      	adds	r5, r5, r4
   15256:	4032      	ands	r2, r6
   15258:	d1c7      	bne.n	151ea <memmove+0x26>
   1525a:	e7c0      	b.n	151de <memmove+0x1a>
   1525c:	0005      	movs	r5, r0
   1525e:	e7c4      	b.n	151ea <memmove+0x26>
   15260:	0022      	movs	r2, r4
   15262:	e7c0      	b.n	151e6 <memmove+0x22>

00015264 <__malloc_lock>:
   15264:	b510      	push	{r4, lr}
   15266:	4802      	ldr	r0, [pc, #8]	; (15270 <__malloc_lock+0xc>)
   15268:	f7ff fc1c 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1526c:	bd10      	pop	{r4, pc}
   1526e:	46c0      	nop			; (mov r8, r8)
   15270:	2000190c 	.word	0x2000190c

00015274 <__malloc_unlock>:
   15274:	b510      	push	{r4, lr}
   15276:	4802      	ldr	r0, [pc, #8]	; (15280 <__malloc_unlock+0xc>)
   15278:	f7ff fc16 	bl	14aa8 <__retarget_lock_release_recursive>
   1527c:	bd10      	pop	{r4, pc}
   1527e:	46c0      	nop			; (mov r8, r8)
   15280:	2000190c 	.word	0x2000190c

00015284 <_Balloc>:
   15284:	b570      	push	{r4, r5, r6, lr}
   15286:	0004      	movs	r4, r0
   15288:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1528a:	000d      	movs	r5, r1
   1528c:	2800      	cmp	r0, #0
   1528e:	d00a      	beq.n	152a6 <_Balloc+0x22>
   15290:	00ab      	lsls	r3, r5, #2
   15292:	18c3      	adds	r3, r0, r3
   15294:	6818      	ldr	r0, [r3, #0]
   15296:	2800      	cmp	r0, #0
   15298:	d00f      	beq.n	152ba <_Balloc+0x36>
   1529a:	6802      	ldr	r2, [r0, #0]
   1529c:	601a      	str	r2, [r3, #0]
   1529e:	2300      	movs	r3, #0
   152a0:	6103      	str	r3, [r0, #16]
   152a2:	60c3      	str	r3, [r0, #12]
   152a4:	bd70      	pop	{r4, r5, r6, pc}
   152a6:	2221      	movs	r2, #33	; 0x21
   152a8:	2104      	movs	r1, #4
   152aa:	0020      	movs	r0, r4
   152ac:	f000 fe38 	bl	15f20 <_calloc_r>
   152b0:	64e0      	str	r0, [r4, #76]	; 0x4c
   152b2:	2800      	cmp	r0, #0
   152b4:	d1ec      	bne.n	15290 <_Balloc+0xc>
   152b6:	2000      	movs	r0, #0
   152b8:	e7f4      	b.n	152a4 <_Balloc+0x20>
   152ba:	2601      	movs	r6, #1
   152bc:	40ae      	lsls	r6, r5
   152be:	1d72      	adds	r2, r6, #5
   152c0:	0092      	lsls	r2, r2, #2
   152c2:	2101      	movs	r1, #1
   152c4:	0020      	movs	r0, r4
   152c6:	f000 fe2b 	bl	15f20 <_calloc_r>
   152ca:	2800      	cmp	r0, #0
   152cc:	d0f3      	beq.n	152b6 <_Balloc+0x32>
   152ce:	6045      	str	r5, [r0, #4]
   152d0:	6086      	str	r6, [r0, #8]
   152d2:	e7e4      	b.n	1529e <_Balloc+0x1a>

000152d4 <_Bfree>:
   152d4:	2900      	cmp	r1, #0
   152d6:	d006      	beq.n	152e6 <_Bfree+0x12>
   152d8:	684b      	ldr	r3, [r1, #4]
   152da:	009a      	lsls	r2, r3, #2
   152dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   152de:	189b      	adds	r3, r3, r2
   152e0:	681a      	ldr	r2, [r3, #0]
   152e2:	600a      	str	r2, [r1, #0]
   152e4:	6019      	str	r1, [r3, #0]
   152e6:	4770      	bx	lr

000152e8 <__multadd>:
   152e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152ea:	46ce      	mov	lr, r9
   152ec:	4647      	mov	r7, r8
   152ee:	4681      	mov	r9, r0
   152f0:	0008      	movs	r0, r1
   152f2:	b580      	push	{r7, lr}
   152f4:	000d      	movs	r5, r1
   152f6:	690c      	ldr	r4, [r1, #16]
   152f8:	001f      	movs	r7, r3
   152fa:	2100      	movs	r1, #0
   152fc:	3014      	adds	r0, #20
   152fe:	6803      	ldr	r3, [r0, #0]
   15300:	3101      	adds	r1, #1
   15302:	041e      	lsls	r6, r3, #16
   15304:	0c36      	lsrs	r6, r6, #16
   15306:	4356      	muls	r6, r2
   15308:	0c1b      	lsrs	r3, r3, #16
   1530a:	4353      	muls	r3, r2
   1530c:	19f6      	adds	r6, r6, r7
   1530e:	0c37      	lsrs	r7, r6, #16
   15310:	19db      	adds	r3, r3, r7
   15312:	0436      	lsls	r6, r6, #16
   15314:	0c1f      	lsrs	r7, r3, #16
   15316:	0c36      	lsrs	r6, r6, #16
   15318:	041b      	lsls	r3, r3, #16
   1531a:	199b      	adds	r3, r3, r6
   1531c:	c008      	stmia	r0!, {r3}
   1531e:	428c      	cmp	r4, r1
   15320:	dced      	bgt.n	152fe <__multadd+0x16>
   15322:	2f00      	cmp	r7, #0
   15324:	d008      	beq.n	15338 <__multadd+0x50>
   15326:	68ab      	ldr	r3, [r5, #8]
   15328:	429c      	cmp	r4, r3
   1532a:	da0a      	bge.n	15342 <__multadd+0x5a>
   1532c:	1d23      	adds	r3, r4, #4
   1532e:	009b      	lsls	r3, r3, #2
   15330:	18eb      	adds	r3, r5, r3
   15332:	3401      	adds	r4, #1
   15334:	605f      	str	r7, [r3, #4]
   15336:	612c      	str	r4, [r5, #16]
   15338:	0028      	movs	r0, r5
   1533a:	bc0c      	pop	{r2, r3}
   1533c:	4690      	mov	r8, r2
   1533e:	4699      	mov	r9, r3
   15340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15342:	686b      	ldr	r3, [r5, #4]
   15344:	4648      	mov	r0, r9
   15346:	1c59      	adds	r1, r3, #1
   15348:	f7ff ff9c 	bl	15284 <_Balloc>
   1534c:	0029      	movs	r1, r5
   1534e:	692b      	ldr	r3, [r5, #16]
   15350:	4680      	mov	r8, r0
   15352:	1c9a      	adds	r2, r3, #2
   15354:	0092      	lsls	r2, r2, #2
   15356:	310c      	adds	r1, #12
   15358:	300c      	adds	r0, #12
   1535a:	f7fc f88b 	bl	11474 <memcpy>
   1535e:	686b      	ldr	r3, [r5, #4]
   15360:	009a      	lsls	r2, r3, #2
   15362:	464b      	mov	r3, r9
   15364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15366:	189b      	adds	r3, r3, r2
   15368:	681a      	ldr	r2, [r3, #0]
   1536a:	602a      	str	r2, [r5, #0]
   1536c:	601d      	str	r5, [r3, #0]
   1536e:	4645      	mov	r5, r8
   15370:	e7dc      	b.n	1532c <__multadd+0x44>
   15372:	46c0      	nop			; (mov r8, r8)

00015374 <__hi0bits>:
   15374:	0003      	movs	r3, r0
   15376:	0c02      	lsrs	r2, r0, #16
   15378:	2000      	movs	r0, #0
   1537a:	2a00      	cmp	r2, #0
   1537c:	d101      	bne.n	15382 <__hi0bits+0xe>
   1537e:	041b      	lsls	r3, r3, #16
   15380:	3010      	adds	r0, #16
   15382:	0e1a      	lsrs	r2, r3, #24
   15384:	d101      	bne.n	1538a <__hi0bits+0x16>
   15386:	3008      	adds	r0, #8
   15388:	021b      	lsls	r3, r3, #8
   1538a:	0f1a      	lsrs	r2, r3, #28
   1538c:	d101      	bne.n	15392 <__hi0bits+0x1e>
   1538e:	3004      	adds	r0, #4
   15390:	011b      	lsls	r3, r3, #4
   15392:	0f9a      	lsrs	r2, r3, #30
   15394:	d101      	bne.n	1539a <__hi0bits+0x26>
   15396:	3002      	adds	r0, #2
   15398:	009b      	lsls	r3, r3, #2
   1539a:	2b00      	cmp	r3, #0
   1539c:	db03      	blt.n	153a6 <__hi0bits+0x32>
   1539e:	3001      	adds	r0, #1
   153a0:	005b      	lsls	r3, r3, #1
   153a2:	d400      	bmi.n	153a6 <__hi0bits+0x32>
   153a4:	2020      	movs	r0, #32
   153a6:	4770      	bx	lr

000153a8 <__lo0bits>:
   153a8:	6803      	ldr	r3, [r0, #0]
   153aa:	075a      	lsls	r2, r3, #29
   153ac:	d009      	beq.n	153c2 <__lo0bits+0x1a>
   153ae:	2200      	movs	r2, #0
   153b0:	07d9      	lsls	r1, r3, #31
   153b2:	d404      	bmi.n	153be <__lo0bits+0x16>
   153b4:	079a      	lsls	r2, r3, #30
   153b6:	d420      	bmi.n	153fa <__lo0bits+0x52>
   153b8:	2202      	movs	r2, #2
   153ba:	089b      	lsrs	r3, r3, #2
   153bc:	6003      	str	r3, [r0, #0]
   153be:	0010      	movs	r0, r2
   153c0:	4770      	bx	lr
   153c2:	0419      	lsls	r1, r3, #16
   153c4:	2200      	movs	r2, #0
   153c6:	2900      	cmp	r1, #0
   153c8:	d101      	bne.n	153ce <__lo0bits+0x26>
   153ca:	0c1b      	lsrs	r3, r3, #16
   153cc:	3210      	adds	r2, #16
   153ce:	21ff      	movs	r1, #255	; 0xff
   153d0:	4219      	tst	r1, r3
   153d2:	d101      	bne.n	153d8 <__lo0bits+0x30>
   153d4:	3208      	adds	r2, #8
   153d6:	0a1b      	lsrs	r3, r3, #8
   153d8:	0719      	lsls	r1, r3, #28
   153da:	d101      	bne.n	153e0 <__lo0bits+0x38>
   153dc:	3204      	adds	r2, #4
   153de:	091b      	lsrs	r3, r3, #4
   153e0:	0799      	lsls	r1, r3, #30
   153e2:	d101      	bne.n	153e8 <__lo0bits+0x40>
   153e4:	3202      	adds	r2, #2
   153e6:	089b      	lsrs	r3, r3, #2
   153e8:	07d9      	lsls	r1, r3, #31
   153ea:	d404      	bmi.n	153f6 <__lo0bits+0x4e>
   153ec:	085b      	lsrs	r3, r3, #1
   153ee:	d101      	bne.n	153f4 <__lo0bits+0x4c>
   153f0:	2220      	movs	r2, #32
   153f2:	e7e4      	b.n	153be <__lo0bits+0x16>
   153f4:	3201      	adds	r2, #1
   153f6:	6003      	str	r3, [r0, #0]
   153f8:	e7e1      	b.n	153be <__lo0bits+0x16>
   153fa:	085b      	lsrs	r3, r3, #1
   153fc:	6003      	str	r3, [r0, #0]
   153fe:	2201      	movs	r2, #1
   15400:	e7dd      	b.n	153be <__lo0bits+0x16>
   15402:	46c0      	nop			; (mov r8, r8)

00015404 <__i2b>:
   15404:	b510      	push	{r4, lr}
   15406:	000c      	movs	r4, r1
   15408:	2101      	movs	r1, #1
   1540a:	f7ff ff3b 	bl	15284 <_Balloc>
   1540e:	2301      	movs	r3, #1
   15410:	6144      	str	r4, [r0, #20]
   15412:	6103      	str	r3, [r0, #16]
   15414:	bd10      	pop	{r4, pc}
   15416:	46c0      	nop			; (mov r8, r8)

00015418 <__multiply>:
   15418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1541a:	4657      	mov	r7, sl
   1541c:	464e      	mov	r6, r9
   1541e:	4645      	mov	r5, r8
   15420:	46de      	mov	lr, fp
   15422:	b5e0      	push	{r5, r6, r7, lr}
   15424:	6914      	ldr	r4, [r2, #16]
   15426:	690e      	ldr	r6, [r1, #16]
   15428:	b085      	sub	sp, #20
   1542a:	000f      	movs	r7, r1
   1542c:	0015      	movs	r5, r2
   1542e:	42a6      	cmp	r6, r4
   15430:	da04      	bge.n	1543c <__multiply+0x24>
   15432:	0033      	movs	r3, r6
   15434:	0017      	movs	r7, r2
   15436:	0026      	movs	r6, r4
   15438:	000d      	movs	r5, r1
   1543a:	001c      	movs	r4, r3
   1543c:	1933      	adds	r3, r6, r4
   1543e:	4698      	mov	r8, r3
   15440:	68bb      	ldr	r3, [r7, #8]
   15442:	6879      	ldr	r1, [r7, #4]
   15444:	4598      	cmp	r8, r3
   15446:	dd00      	ble.n	1544a <__multiply+0x32>
   15448:	3101      	adds	r1, #1
   1544a:	f7ff ff1b 	bl	15284 <_Balloc>
   1544e:	2214      	movs	r2, #20
   15450:	0003      	movs	r3, r0
   15452:	4694      	mov	ip, r2
   15454:	4463      	add	r3, ip
   15456:	469b      	mov	fp, r3
   15458:	4643      	mov	r3, r8
   1545a:	009b      	lsls	r3, r3, #2
   1545c:	445b      	add	r3, fp
   1545e:	0019      	movs	r1, r3
   15460:	9302      	str	r3, [sp, #8]
   15462:	9003      	str	r0, [sp, #12]
   15464:	465b      	mov	r3, fp
   15466:	2200      	movs	r2, #0
   15468:	458b      	cmp	fp, r1
   1546a:	d203      	bcs.n	15474 <__multiply+0x5c>
   1546c:	9902      	ldr	r1, [sp, #8]
   1546e:	c304      	stmia	r3!, {r2}
   15470:	4299      	cmp	r1, r3
   15472:	d8fc      	bhi.n	1546e <__multiply+0x56>
   15474:	2314      	movs	r3, #20
   15476:	00a4      	lsls	r4, r4, #2
   15478:	469a      	mov	sl, r3
   1547a:	3714      	adds	r7, #20
   1547c:	0023      	movs	r3, r4
   1547e:	46bc      	mov	ip, r7
   15480:	44aa      	add	sl, r5
   15482:	00b6      	lsls	r6, r6, #2
   15484:	4453      	add	r3, sl
   15486:	9700      	str	r7, [sp, #0]
   15488:	44b4      	add	ip, r6
   1548a:	9301      	str	r3, [sp, #4]
   1548c:	459a      	cmp	sl, r3
   1548e:	d24f      	bcs.n	15530 <__multiply+0x118>
   15490:	4653      	mov	r3, sl
   15492:	681b      	ldr	r3, [r3, #0]
   15494:	041e      	lsls	r6, r3, #16
   15496:	0c36      	lsrs	r6, r6, #16
   15498:	d020      	beq.n	154dc <__multiply+0xc4>
   1549a:	465c      	mov	r4, fp
   1549c:	2700      	movs	r7, #0
   1549e:	9d00      	ldr	r5, [sp, #0]
   154a0:	0021      	movs	r1, r4
   154a2:	cc08      	ldmia	r4!, {r3}
   154a4:	cd04      	ldmia	r5!, {r2}
   154a6:	4699      	mov	r9, r3
   154a8:	4648      	mov	r0, r9
   154aa:	0413      	lsls	r3, r2, #16
   154ac:	0c1b      	lsrs	r3, r3, #16
   154ae:	4373      	muls	r3, r6
   154b0:	0400      	lsls	r0, r0, #16
   154b2:	0c00      	lsrs	r0, r0, #16
   154b4:	181b      	adds	r3, r3, r0
   154b6:	19d8      	adds	r0, r3, r7
   154b8:	0c13      	lsrs	r3, r2, #16
   154ba:	464a      	mov	r2, r9
   154bc:	4373      	muls	r3, r6
   154be:	0c12      	lsrs	r2, r2, #16
   154c0:	189b      	adds	r3, r3, r2
   154c2:	0c02      	lsrs	r2, r0, #16
   154c4:	189b      	adds	r3, r3, r2
   154c6:	0402      	lsls	r2, r0, #16
   154c8:	0c1f      	lsrs	r7, r3, #16
   154ca:	0c12      	lsrs	r2, r2, #16
   154cc:	041b      	lsls	r3, r3, #16
   154ce:	4313      	orrs	r3, r2
   154d0:	600b      	str	r3, [r1, #0]
   154d2:	45ac      	cmp	ip, r5
   154d4:	d8e4      	bhi.n	154a0 <__multiply+0x88>
   154d6:	4653      	mov	r3, sl
   154d8:	6027      	str	r7, [r4, #0]
   154da:	681b      	ldr	r3, [r3, #0]
   154dc:	0c1e      	lsrs	r6, r3, #16
   154de:	d020      	beq.n	15522 <__multiply+0x10a>
   154e0:	465b      	mov	r3, fp
   154e2:	2100      	movs	r1, #0
   154e4:	681b      	ldr	r3, [r3, #0]
   154e6:	465c      	mov	r4, fp
   154e8:	0018      	movs	r0, r3
   154ea:	000f      	movs	r7, r1
   154ec:	4662      	mov	r2, ip
   154ee:	9d00      	ldr	r5, [sp, #0]
   154f0:	8829      	ldrh	r1, [r5, #0]
   154f2:	0c00      	lsrs	r0, r0, #16
   154f4:	4371      	muls	r1, r6
   154f6:	1809      	adds	r1, r1, r0
   154f8:	19c9      	adds	r1, r1, r7
   154fa:	041b      	lsls	r3, r3, #16
   154fc:	0408      	lsls	r0, r1, #16
   154fe:	0c1b      	lsrs	r3, r3, #16
   15500:	4303      	orrs	r3, r0
   15502:	6023      	str	r3, [r4, #0]
   15504:	cd08      	ldmia	r5!, {r3}
   15506:	6860      	ldr	r0, [r4, #4]
   15508:	0c1b      	lsrs	r3, r3, #16
   1550a:	4373      	muls	r3, r6
   1550c:	0407      	lsls	r7, r0, #16
   1550e:	0c3f      	lsrs	r7, r7, #16
   15510:	19db      	adds	r3, r3, r7
   15512:	0c09      	lsrs	r1, r1, #16
   15514:	185b      	adds	r3, r3, r1
   15516:	0c1f      	lsrs	r7, r3, #16
   15518:	3404      	adds	r4, #4
   1551a:	42aa      	cmp	r2, r5
   1551c:	d8e8      	bhi.n	154f0 <__multiply+0xd8>
   1551e:	4694      	mov	ip, r2
   15520:	6023      	str	r3, [r4, #0]
   15522:	2304      	movs	r3, #4
   15524:	4699      	mov	r9, r3
   15526:	9b01      	ldr	r3, [sp, #4]
   15528:	44ca      	add	sl, r9
   1552a:	44cb      	add	fp, r9
   1552c:	4553      	cmp	r3, sl
   1552e:	d8af      	bhi.n	15490 <__multiply+0x78>
   15530:	4643      	mov	r3, r8
   15532:	2b00      	cmp	r3, #0
   15534:	dd0e      	ble.n	15554 <__multiply+0x13c>
   15536:	9b02      	ldr	r3, [sp, #8]
   15538:	3b04      	subs	r3, #4
   1553a:	681a      	ldr	r2, [r3, #0]
   1553c:	2a00      	cmp	r2, #0
   1553e:	d109      	bne.n	15554 <__multiply+0x13c>
   15540:	4642      	mov	r2, r8
   15542:	e003      	b.n	1554c <__multiply+0x134>
   15544:	3b04      	subs	r3, #4
   15546:	6819      	ldr	r1, [r3, #0]
   15548:	2900      	cmp	r1, #0
   1554a:	d102      	bne.n	15552 <__multiply+0x13a>
   1554c:	3a01      	subs	r2, #1
   1554e:	2a00      	cmp	r2, #0
   15550:	d1f8      	bne.n	15544 <__multiply+0x12c>
   15552:	4690      	mov	r8, r2
   15554:	9b03      	ldr	r3, [sp, #12]
   15556:	4642      	mov	r2, r8
   15558:	0018      	movs	r0, r3
   1555a:	611a      	str	r2, [r3, #16]
   1555c:	b005      	add	sp, #20
   1555e:	bc3c      	pop	{r2, r3, r4, r5}
   15560:	4690      	mov	r8, r2
   15562:	4699      	mov	r9, r3
   15564:	46a2      	mov	sl, r4
   15566:	46ab      	mov	fp, r5
   15568:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1556a:	46c0      	nop			; (mov r8, r8)

0001556c <__pow5mult>:
   1556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1556e:	4647      	mov	r7, r8
   15570:	46ce      	mov	lr, r9
   15572:	2303      	movs	r3, #3
   15574:	b580      	push	{r7, lr}
   15576:	4680      	mov	r8, r0
   15578:	000f      	movs	r7, r1
   1557a:	0014      	movs	r4, r2
   1557c:	4013      	ands	r3, r2
   1557e:	d13a      	bne.n	155f6 <__pow5mult+0x8a>
   15580:	10a4      	asrs	r4, r4, #2
   15582:	003e      	movs	r6, r7
   15584:	2c00      	cmp	r4, #0
   15586:	d025      	beq.n	155d4 <__pow5mult+0x68>
   15588:	4643      	mov	r3, r8
   1558a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1558c:	2d00      	cmp	r5, #0
   1558e:	d03b      	beq.n	15608 <__pow5mult+0x9c>
   15590:	003e      	movs	r6, r7
   15592:	2300      	movs	r3, #0
   15594:	2701      	movs	r7, #1
   15596:	4699      	mov	r9, r3
   15598:	4227      	tst	r7, r4
   1559a:	d107      	bne.n	155ac <__pow5mult+0x40>
   1559c:	1064      	asrs	r4, r4, #1
   1559e:	d019      	beq.n	155d4 <__pow5mult+0x68>
   155a0:	6828      	ldr	r0, [r5, #0]
   155a2:	2800      	cmp	r0, #0
   155a4:	d01b      	beq.n	155de <__pow5mult+0x72>
   155a6:	0005      	movs	r5, r0
   155a8:	4227      	tst	r7, r4
   155aa:	d0f7      	beq.n	1559c <__pow5mult+0x30>
   155ac:	002a      	movs	r2, r5
   155ae:	0031      	movs	r1, r6
   155b0:	4640      	mov	r0, r8
   155b2:	f7ff ff31 	bl	15418 <__multiply>
   155b6:	2e00      	cmp	r6, #0
   155b8:	d01b      	beq.n	155f2 <__pow5mult+0x86>
   155ba:	4642      	mov	r2, r8
   155bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   155be:	6873      	ldr	r3, [r6, #4]
   155c0:	4694      	mov	ip, r2
   155c2:	009b      	lsls	r3, r3, #2
   155c4:	4463      	add	r3, ip
   155c6:	681a      	ldr	r2, [r3, #0]
   155c8:	1064      	asrs	r4, r4, #1
   155ca:	6032      	str	r2, [r6, #0]
   155cc:	601e      	str	r6, [r3, #0]
   155ce:	0006      	movs	r6, r0
   155d0:	2c00      	cmp	r4, #0
   155d2:	d1e5      	bne.n	155a0 <__pow5mult+0x34>
   155d4:	0030      	movs	r0, r6
   155d6:	bc0c      	pop	{r2, r3}
   155d8:	4690      	mov	r8, r2
   155da:	4699      	mov	r9, r3
   155dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155de:	002a      	movs	r2, r5
   155e0:	0029      	movs	r1, r5
   155e2:	4640      	mov	r0, r8
   155e4:	f7ff ff18 	bl	15418 <__multiply>
   155e8:	464b      	mov	r3, r9
   155ea:	6028      	str	r0, [r5, #0]
   155ec:	6003      	str	r3, [r0, #0]
   155ee:	0005      	movs	r5, r0
   155f0:	e7da      	b.n	155a8 <__pow5mult+0x3c>
   155f2:	0006      	movs	r6, r0
   155f4:	e7d2      	b.n	1559c <__pow5mult+0x30>
   155f6:	4a0b      	ldr	r2, [pc, #44]	; (15624 <__pow5mult+0xb8>)
   155f8:	3b01      	subs	r3, #1
   155fa:	009b      	lsls	r3, r3, #2
   155fc:	589a      	ldr	r2, [r3, r2]
   155fe:	2300      	movs	r3, #0
   15600:	f7ff fe72 	bl	152e8 <__multadd>
   15604:	0007      	movs	r7, r0
   15606:	e7bb      	b.n	15580 <__pow5mult+0x14>
   15608:	2101      	movs	r1, #1
   1560a:	4640      	mov	r0, r8
   1560c:	f7ff fe3a 	bl	15284 <_Balloc>
   15610:	4b05      	ldr	r3, [pc, #20]	; (15628 <__pow5mult+0xbc>)
   15612:	0005      	movs	r5, r0
   15614:	6143      	str	r3, [r0, #20]
   15616:	2301      	movs	r3, #1
   15618:	6103      	str	r3, [r0, #16]
   1561a:	4643      	mov	r3, r8
   1561c:	6498      	str	r0, [r3, #72]	; 0x48
   1561e:	2300      	movs	r3, #0
   15620:	6003      	str	r3, [r0, #0]
   15622:	e7b5      	b.n	15590 <__pow5mult+0x24>
   15624:	00017a80 	.word	0x00017a80
   15628:	00000271 	.word	0x00000271

0001562c <__lshift>:
   1562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1562e:	464e      	mov	r6, r9
   15630:	4645      	mov	r5, r8
   15632:	46de      	mov	lr, fp
   15634:	4657      	mov	r7, sl
   15636:	b5e0      	push	{r5, r6, r7, lr}
   15638:	000e      	movs	r6, r1
   1563a:	6933      	ldr	r3, [r6, #16]
   1563c:	1154      	asrs	r4, r2, #5
   1563e:	4698      	mov	r8, r3
   15640:	44a0      	add	r8, r4
   15642:	4643      	mov	r3, r8
   15644:	1c5d      	adds	r5, r3, #1
   15646:	68b3      	ldr	r3, [r6, #8]
   15648:	4683      	mov	fp, r0
   1564a:	4691      	mov	r9, r2
   1564c:	6849      	ldr	r1, [r1, #4]
   1564e:	429d      	cmp	r5, r3
   15650:	dd03      	ble.n	1565a <__lshift+0x2e>
   15652:	3101      	adds	r1, #1
   15654:	005b      	lsls	r3, r3, #1
   15656:	429d      	cmp	r5, r3
   15658:	dcfb      	bgt.n	15652 <__lshift+0x26>
   1565a:	4658      	mov	r0, fp
   1565c:	f7ff fe12 	bl	15284 <_Balloc>
   15660:	0003      	movs	r3, r0
   15662:	4684      	mov	ip, r0
   15664:	3314      	adds	r3, #20
   15666:	2c00      	cmp	r4, #0
   15668:	dd06      	ble.n	15678 <__lshift+0x4c>
   1566a:	2100      	movs	r1, #0
   1566c:	00a4      	lsls	r4, r4, #2
   1566e:	001a      	movs	r2, r3
   15670:	191b      	adds	r3, r3, r4
   15672:	c202      	stmia	r2!, {r1}
   15674:	4293      	cmp	r3, r2
   15676:	d1fc      	bne.n	15672 <__lshift+0x46>
   15678:	6932      	ldr	r2, [r6, #16]
   1567a:	4648      	mov	r0, r9
   1567c:	0097      	lsls	r7, r2, #2
   1567e:	0031      	movs	r1, r6
   15680:	221f      	movs	r2, #31
   15682:	3114      	adds	r1, #20
   15684:	4010      	ands	r0, r2
   15686:	19cf      	adds	r7, r1, r7
   15688:	4681      	mov	r9, r0
   1568a:	2800      	cmp	r0, #0
   1568c:	d025      	beq.n	156da <__lshift+0xae>
   1568e:	2220      	movs	r2, #32
   15690:	1a12      	subs	r2, r2, r0
   15692:	4692      	mov	sl, r2
   15694:	2200      	movs	r2, #0
   15696:	4648      	mov	r0, r9
   15698:	680c      	ldr	r4, [r1, #0]
   1569a:	4084      	lsls	r4, r0
   1569c:	4650      	mov	r0, sl
   1569e:	4314      	orrs	r4, r2
   156a0:	601c      	str	r4, [r3, #0]
   156a2:	c904      	ldmia	r1!, {r2}
   156a4:	3304      	adds	r3, #4
   156a6:	40c2      	lsrs	r2, r0
   156a8:	428f      	cmp	r7, r1
   156aa:	d8f4      	bhi.n	15696 <__lshift+0x6a>
   156ac:	601a      	str	r2, [r3, #0]
   156ae:	2a00      	cmp	r2, #0
   156b0:	d001      	beq.n	156b6 <__lshift+0x8a>
   156b2:	4645      	mov	r5, r8
   156b4:	3502      	adds	r5, #2
   156b6:	4663      	mov	r3, ip
   156b8:	3d01      	subs	r5, #1
   156ba:	611d      	str	r5, [r3, #16]
   156bc:	6873      	ldr	r3, [r6, #4]
   156be:	4660      	mov	r0, ip
   156c0:	009a      	lsls	r2, r3, #2
   156c2:	465b      	mov	r3, fp
   156c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   156c6:	189b      	adds	r3, r3, r2
   156c8:	681a      	ldr	r2, [r3, #0]
   156ca:	6032      	str	r2, [r6, #0]
   156cc:	601e      	str	r6, [r3, #0]
   156ce:	bc3c      	pop	{r2, r3, r4, r5}
   156d0:	4690      	mov	r8, r2
   156d2:	4699      	mov	r9, r3
   156d4:	46a2      	mov	sl, r4
   156d6:	46ab      	mov	fp, r5
   156d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156da:	c904      	ldmia	r1!, {r2}
   156dc:	c304      	stmia	r3!, {r2}
   156de:	428f      	cmp	r7, r1
   156e0:	d9e9      	bls.n	156b6 <__lshift+0x8a>
   156e2:	c904      	ldmia	r1!, {r2}
   156e4:	c304      	stmia	r3!, {r2}
   156e6:	428f      	cmp	r7, r1
   156e8:	d8f7      	bhi.n	156da <__lshift+0xae>
   156ea:	e7e4      	b.n	156b6 <__lshift+0x8a>

000156ec <__mcmp>:
   156ec:	690a      	ldr	r2, [r1, #16]
   156ee:	6903      	ldr	r3, [r0, #16]
   156f0:	b530      	push	{r4, r5, lr}
   156f2:	0005      	movs	r5, r0
   156f4:	1a98      	subs	r0, r3, r2
   156f6:	d111      	bne.n	1571c <__mcmp+0x30>
   156f8:	0092      	lsls	r2, r2, #2
   156fa:	3514      	adds	r5, #20
   156fc:	3114      	adds	r1, #20
   156fe:	18ab      	adds	r3, r5, r2
   15700:	1889      	adds	r1, r1, r2
   15702:	e001      	b.n	15708 <__mcmp+0x1c>
   15704:	429d      	cmp	r5, r3
   15706:	d209      	bcs.n	1571c <__mcmp+0x30>
   15708:	3b04      	subs	r3, #4
   1570a:	3904      	subs	r1, #4
   1570c:	681c      	ldr	r4, [r3, #0]
   1570e:	680a      	ldr	r2, [r1, #0]
   15710:	4294      	cmp	r4, r2
   15712:	d0f7      	beq.n	15704 <__mcmp+0x18>
   15714:	4294      	cmp	r4, r2
   15716:	4180      	sbcs	r0, r0
   15718:	2201      	movs	r2, #1
   1571a:	4310      	orrs	r0, r2
   1571c:	bd30      	pop	{r4, r5, pc}
   1571e:	46c0      	nop			; (mov r8, r8)

00015720 <__mdiff>:
   15720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15722:	4645      	mov	r5, r8
   15724:	46de      	mov	lr, fp
   15726:	4657      	mov	r7, sl
   15728:	464e      	mov	r6, r9
   1572a:	0014      	movs	r4, r2
   1572c:	690b      	ldr	r3, [r1, #16]
   1572e:	6912      	ldr	r2, [r2, #16]
   15730:	b5e0      	push	{r5, r6, r7, lr}
   15732:	4688      	mov	r8, r1
   15734:	1a9d      	subs	r5, r3, r2
   15736:	d11a      	bne.n	1576e <__mdiff+0x4e>
   15738:	000f      	movs	r7, r1
   1573a:	2114      	movs	r1, #20
   1573c:	468c      	mov	ip, r1
   1573e:	0092      	lsls	r2, r2, #2
   15740:	3714      	adds	r7, #20
   15742:	44a4      	add	ip, r4
   15744:	18bb      	adds	r3, r7, r2
   15746:	4462      	add	r2, ip
   15748:	e002      	b.n	15750 <__mdiff+0x30>
   1574a:	429f      	cmp	r7, r3
   1574c:	d300      	bcc.n	15750 <__mdiff+0x30>
   1574e:	e070      	b.n	15832 <__mdiff+0x112>
   15750:	3b04      	subs	r3, #4
   15752:	3a04      	subs	r2, #4
   15754:	681e      	ldr	r6, [r3, #0]
   15756:	6811      	ldr	r1, [r2, #0]
   15758:	428e      	cmp	r6, r1
   1575a:	d0f6      	beq.n	1574a <__mdiff+0x2a>
   1575c:	d300      	bcc.n	15760 <__mdiff+0x40>
   1575e:	e071      	b.n	15844 <__mdiff+0x124>
   15760:	4643      	mov	r3, r8
   15762:	003e      	movs	r6, r7
   15764:	46a0      	mov	r8, r4
   15766:	4667      	mov	r7, ip
   15768:	001c      	movs	r4, r3
   1576a:	2501      	movs	r5, #1
   1576c:	e006      	b.n	1577c <__mdiff+0x5c>
   1576e:	2d00      	cmp	r5, #0
   15770:	db6a      	blt.n	15848 <__mdiff+0x128>
   15772:	4647      	mov	r7, r8
   15774:	0026      	movs	r6, r4
   15776:	2500      	movs	r5, #0
   15778:	3714      	adds	r7, #20
   1577a:	3614      	adds	r6, #20
   1577c:	4643      	mov	r3, r8
   1577e:	6859      	ldr	r1, [r3, #4]
   15780:	f7ff fd80 	bl	15284 <_Balloc>
   15784:	4643      	mov	r3, r8
   15786:	4681      	mov	r9, r0
   15788:	60c5      	str	r5, [r0, #12]
   1578a:	6918      	ldr	r0, [r3, #16]
   1578c:	464d      	mov	r5, r9
   1578e:	0083      	lsls	r3, r0, #2
   15790:	469c      	mov	ip, r3
   15792:	6923      	ldr	r3, [r4, #16]
   15794:	44bc      	add	ip, r7
   15796:	009b      	lsls	r3, r3, #2
   15798:	4698      	mov	r8, r3
   1579a:	2300      	movs	r3, #0
   1579c:	44b0      	add	r8, r6
   1579e:	3514      	adds	r5, #20
   157a0:	469a      	mov	sl, r3
   157a2:	e000      	b.n	157a6 <__mdiff+0x86>
   157a4:	0027      	movs	r7, r4
   157a6:	ce04      	ldmia	r6!, {r2}
   157a8:	003c      	movs	r4, r7
   157aa:	4693      	mov	fp, r2
   157ac:	4659      	mov	r1, fp
   157ae:	cc08      	ldmia	r4!, {r3}
   157b0:	0409      	lsls	r1, r1, #16
   157b2:	041a      	lsls	r2, r3, #16
   157b4:	0c12      	lsrs	r2, r2, #16
   157b6:	4452      	add	r2, sl
   157b8:	0c09      	lsrs	r1, r1, #16
   157ba:	1a52      	subs	r2, r2, r1
   157bc:	0c19      	lsrs	r1, r3, #16
   157be:	465b      	mov	r3, fp
   157c0:	0c1b      	lsrs	r3, r3, #16
   157c2:	1acb      	subs	r3, r1, r3
   157c4:	1411      	asrs	r1, r2, #16
   157c6:	185b      	adds	r3, r3, r1
   157c8:	0412      	lsls	r2, r2, #16
   157ca:	1419      	asrs	r1, r3, #16
   157cc:	0c12      	lsrs	r2, r2, #16
   157ce:	041b      	lsls	r3, r3, #16
   157d0:	468a      	mov	sl, r1
   157d2:	4313      	orrs	r3, r2
   157d4:	1d29      	adds	r1, r5, #4
   157d6:	602b      	str	r3, [r5, #0]
   157d8:	000d      	movs	r5, r1
   157da:	45b0      	cmp	r8, r6
   157dc:	d8e2      	bhi.n	157a4 <__mdiff+0x84>
   157de:	45a4      	cmp	ip, r4
   157e0:	d916      	bls.n	15810 <__mdiff+0xf0>
   157e2:	cc08      	ldmia	r4!, {r3}
   157e4:	041a      	lsls	r2, r3, #16
   157e6:	0c12      	lsrs	r2, r2, #16
   157e8:	4452      	add	r2, sl
   157ea:	1416      	asrs	r6, r2, #16
   157ec:	0c1b      	lsrs	r3, r3, #16
   157ee:	199b      	adds	r3, r3, r6
   157f0:	0412      	lsls	r2, r2, #16
   157f2:	141e      	asrs	r6, r3, #16
   157f4:	0c12      	lsrs	r2, r2, #16
   157f6:	041b      	lsls	r3, r3, #16
   157f8:	4313      	orrs	r3, r2
   157fa:	46b2      	mov	sl, r6
   157fc:	c508      	stmia	r5!, {r3}
   157fe:	45a4      	cmp	ip, r4
   15800:	d8ef      	bhi.n	157e2 <__mdiff+0xc2>
   15802:	4662      	mov	r2, ip
   15804:	2403      	movs	r4, #3
   15806:	1bd2      	subs	r2, r2, r7
   15808:	3a05      	subs	r2, #5
   1580a:	43a2      	bics	r2, r4
   1580c:	3204      	adds	r2, #4
   1580e:	1889      	adds	r1, r1, r2
   15810:	3904      	subs	r1, #4
   15812:	2b00      	cmp	r3, #0
   15814:	d104      	bne.n	15820 <__mdiff+0x100>
   15816:	3904      	subs	r1, #4
   15818:	680b      	ldr	r3, [r1, #0]
   1581a:	3801      	subs	r0, #1
   1581c:	2b00      	cmp	r3, #0
   1581e:	d0fa      	beq.n	15816 <__mdiff+0xf6>
   15820:	464b      	mov	r3, r9
   15822:	6118      	str	r0, [r3, #16]
   15824:	4648      	mov	r0, r9
   15826:	bc3c      	pop	{r2, r3, r4, r5}
   15828:	4690      	mov	r8, r2
   1582a:	4699      	mov	r9, r3
   1582c:	46a2      	mov	sl, r4
   1582e:	46ab      	mov	fp, r5
   15830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15832:	2100      	movs	r1, #0
   15834:	f7ff fd26 	bl	15284 <_Balloc>
   15838:	2301      	movs	r3, #1
   1583a:	6103      	str	r3, [r0, #16]
   1583c:	2300      	movs	r3, #0
   1583e:	4681      	mov	r9, r0
   15840:	6143      	str	r3, [r0, #20]
   15842:	e7ef      	b.n	15824 <__mdiff+0x104>
   15844:	4666      	mov	r6, ip
   15846:	e799      	b.n	1577c <__mdiff+0x5c>
   15848:	0027      	movs	r7, r4
   1584a:	000e      	movs	r6, r1
   1584c:	46a0      	mov	r8, r4
   1584e:	3714      	adds	r7, #20
   15850:	3614      	adds	r6, #20
   15852:	000c      	movs	r4, r1
   15854:	2501      	movs	r5, #1
   15856:	e791      	b.n	1577c <__mdiff+0x5c>

00015858 <__d2b>:
   15858:	b5f0      	push	{r4, r5, r6, r7, lr}
   1585a:	2101      	movs	r1, #1
   1585c:	001c      	movs	r4, r3
   1585e:	b083      	sub	sp, #12
   15860:	9e08      	ldr	r6, [sp, #32]
   15862:	0015      	movs	r5, r2
   15864:	f7ff fd0e 	bl	15284 <_Balloc>
   15868:	0323      	lsls	r3, r4, #12
   1586a:	0064      	lsls	r4, r4, #1
   1586c:	0007      	movs	r7, r0
   1586e:	0b1b      	lsrs	r3, r3, #12
   15870:	0d64      	lsrs	r4, r4, #21
   15872:	d002      	beq.n	1587a <__d2b+0x22>
   15874:	2280      	movs	r2, #128	; 0x80
   15876:	0352      	lsls	r2, r2, #13
   15878:	4313      	orrs	r3, r2
   1587a:	9301      	str	r3, [sp, #4]
   1587c:	2d00      	cmp	r5, #0
   1587e:	d019      	beq.n	158b4 <__d2b+0x5c>
   15880:	4668      	mov	r0, sp
   15882:	9500      	str	r5, [sp, #0]
   15884:	f7ff fd90 	bl	153a8 <__lo0bits>
   15888:	2800      	cmp	r0, #0
   1588a:	d130      	bne.n	158ee <__d2b+0x96>
   1588c:	9b00      	ldr	r3, [sp, #0]
   1588e:	617b      	str	r3, [r7, #20]
   15890:	9b01      	ldr	r3, [sp, #4]
   15892:	61bb      	str	r3, [r7, #24]
   15894:	1e5a      	subs	r2, r3, #1
   15896:	4193      	sbcs	r3, r2
   15898:	1c5d      	adds	r5, r3, #1
   1589a:	613d      	str	r5, [r7, #16]
   1589c:	2c00      	cmp	r4, #0
   1589e:	d014      	beq.n	158ca <__d2b+0x72>
   158a0:	4b19      	ldr	r3, [pc, #100]	; (15908 <__d2b+0xb0>)
   158a2:	469c      	mov	ip, r3
   158a4:	2335      	movs	r3, #53	; 0x35
   158a6:	4464      	add	r4, ip
   158a8:	1824      	adds	r4, r4, r0
   158aa:	1a18      	subs	r0, r3, r0
   158ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158ae:	6034      	str	r4, [r6, #0]
   158b0:	6018      	str	r0, [r3, #0]
   158b2:	e019      	b.n	158e8 <__d2b+0x90>
   158b4:	a801      	add	r0, sp, #4
   158b6:	f7ff fd77 	bl	153a8 <__lo0bits>
   158ba:	9b01      	ldr	r3, [sp, #4]
   158bc:	3020      	adds	r0, #32
   158be:	617b      	str	r3, [r7, #20]
   158c0:	2301      	movs	r3, #1
   158c2:	2501      	movs	r5, #1
   158c4:	613b      	str	r3, [r7, #16]
   158c6:	2c00      	cmp	r4, #0
   158c8:	d1ea      	bne.n	158a0 <__d2b+0x48>
   158ca:	4b10      	ldr	r3, [pc, #64]	; (1590c <__d2b+0xb4>)
   158cc:	469c      	mov	ip, r3
   158ce:	4b10      	ldr	r3, [pc, #64]	; (15910 <__d2b+0xb8>)
   158d0:	4460      	add	r0, ip
   158d2:	18eb      	adds	r3, r5, r3
   158d4:	009b      	lsls	r3, r3, #2
   158d6:	18fb      	adds	r3, r7, r3
   158d8:	6030      	str	r0, [r6, #0]
   158da:	6958      	ldr	r0, [r3, #20]
   158dc:	f7ff fd4a 	bl	15374 <__hi0bits>
   158e0:	016b      	lsls	r3, r5, #5
   158e2:	1a18      	subs	r0, r3, r0
   158e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   158e6:	6018      	str	r0, [r3, #0]
   158e8:	0038      	movs	r0, r7
   158ea:	b003      	add	sp, #12
   158ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158ee:	9b01      	ldr	r3, [sp, #4]
   158f0:	2220      	movs	r2, #32
   158f2:	0019      	movs	r1, r3
   158f4:	1a12      	subs	r2, r2, r0
   158f6:	4091      	lsls	r1, r2
   158f8:	000a      	movs	r2, r1
   158fa:	40c3      	lsrs	r3, r0
   158fc:	9900      	ldr	r1, [sp, #0]
   158fe:	9301      	str	r3, [sp, #4]
   15900:	430a      	orrs	r2, r1
   15902:	617a      	str	r2, [r7, #20]
   15904:	e7c5      	b.n	15892 <__d2b+0x3a>
   15906:	46c0      	nop			; (mov r8, r8)
   15908:	fffffbcd 	.word	0xfffffbcd
   1590c:	fffffbce 	.word	0xfffffbce
   15910:	3fffffff 	.word	0x3fffffff

00015914 <_realloc_r>:
   15914:	b5f0      	push	{r4, r5, r6, r7, lr}
   15916:	464e      	mov	r6, r9
   15918:	4645      	mov	r5, r8
   1591a:	46de      	mov	lr, fp
   1591c:	4657      	mov	r7, sl
   1591e:	b5e0      	push	{r5, r6, r7, lr}
   15920:	b085      	sub	sp, #20
   15922:	9001      	str	r0, [sp, #4]
   15924:	000e      	movs	r6, r1
   15926:	0015      	movs	r5, r2
   15928:	2900      	cmp	r1, #0
   1592a:	d100      	bne.n	1592e <_realloc_r+0x1a>
   1592c:	e09e      	b.n	15a6c <_realloc_r+0x158>
   1592e:	0037      	movs	r7, r6
   15930:	9801      	ldr	r0, [sp, #4]
   15932:	3f08      	subs	r7, #8
   15934:	f7ff fc96 	bl	15264 <__malloc_lock>
   15938:	687a      	ldr	r2, [r7, #4]
   1593a:	2303      	movs	r3, #3
   1593c:	0014      	movs	r4, r2
   1593e:	439c      	bics	r4, r3
   15940:	002b      	movs	r3, r5
   15942:	330b      	adds	r3, #11
   15944:	46b9      	mov	r9, r7
   15946:	2b16      	cmp	r3, #22
   15948:	d847      	bhi.n	159da <_realloc_r+0xc6>
   1594a:	2110      	movs	r1, #16
   1594c:	2310      	movs	r3, #16
   1594e:	4688      	mov	r8, r1
   15950:	4545      	cmp	r5, r8
   15952:	d846      	bhi.n	159e2 <_realloc_r+0xce>
   15954:	429c      	cmp	r4, r3
   15956:	da49      	bge.n	159ec <_realloc_r+0xd8>
   15958:	49cc      	ldr	r1, [pc, #816]	; (15c8c <_realloc_r+0x378>)
   1595a:	1938      	adds	r0, r7, r4
   1595c:	468b      	mov	fp, r1
   1595e:	6889      	ldr	r1, [r1, #8]
   15960:	9002      	str	r0, [sp, #8]
   15962:	4288      	cmp	r0, r1
   15964:	d100      	bne.n	15968 <_realloc_r+0x54>
   15966:	e0c2      	b.n	15aee <_realloc_r+0x1da>
   15968:	2101      	movs	r1, #1
   1596a:	468a      	mov	sl, r1
   1596c:	6840      	ldr	r0, [r0, #4]
   1596e:	0001      	movs	r1, r0
   15970:	9003      	str	r0, [sp, #12]
   15972:	4650      	mov	r0, sl
   15974:	4381      	bics	r1, r0
   15976:	468c      	mov	ip, r1
   15978:	9902      	ldr	r1, [sp, #8]
   1597a:	468b      	mov	fp, r1
   1597c:	44dc      	add	ip, fp
   1597e:	4661      	mov	r1, ip
   15980:	6849      	ldr	r1, [r1, #4]
   15982:	4201      	tst	r1, r0
   15984:	d04d      	beq.n	15a22 <_realloc_r+0x10e>
   15986:	4210      	tst	r0, r2
   15988:	d100      	bne.n	1598c <_realloc_r+0x78>
   1598a:	e0a2      	b.n	15ad2 <_realloc_r+0x1be>
   1598c:	0029      	movs	r1, r5
   1598e:	9801      	ldr	r0, [sp, #4]
   15990:	f7ff f90e 	bl	14bb0 <_malloc_r>
   15994:	1e05      	subs	r5, r0, #0
   15996:	d039      	beq.n	15a0c <_realloc_r+0xf8>
   15998:	2301      	movs	r3, #1
   1599a:	0002      	movs	r2, r0
   1599c:	6879      	ldr	r1, [r7, #4]
   1599e:	3a08      	subs	r2, #8
   159a0:	4399      	bics	r1, r3
   159a2:	187f      	adds	r7, r7, r1
   159a4:	42ba      	cmp	r2, r7
   159a6:	d100      	bne.n	159aa <_realloc_r+0x96>
   159a8:	e12e      	b.n	15c08 <_realloc_r+0x2f4>
   159aa:	1f22      	subs	r2, r4, #4
   159ac:	2a24      	cmp	r2, #36	; 0x24
   159ae:	d900      	bls.n	159b2 <_realloc_r+0x9e>
   159b0:	e114      	b.n	15bdc <_realloc_r+0x2c8>
   159b2:	2a13      	cmp	r2, #19
   159b4:	d900      	bls.n	159b8 <_realloc_r+0xa4>
   159b6:	e0e8      	b.n	15b8a <_realloc_r+0x276>
   159b8:	0003      	movs	r3, r0
   159ba:	0032      	movs	r2, r6
   159bc:	6811      	ldr	r1, [r2, #0]
   159be:	6019      	str	r1, [r3, #0]
   159c0:	6851      	ldr	r1, [r2, #4]
   159c2:	6059      	str	r1, [r3, #4]
   159c4:	6892      	ldr	r2, [r2, #8]
   159c6:	609a      	str	r2, [r3, #8]
   159c8:	9c01      	ldr	r4, [sp, #4]
   159ca:	0031      	movs	r1, r6
   159cc:	0020      	movs	r0, r4
   159ce:	f7fe fdc1 	bl	14554 <_free_r>
   159d2:	0020      	movs	r0, r4
   159d4:	f7ff fc4e 	bl	15274 <__malloc_unlock>
   159d8:	e01b      	b.n	15a12 <_realloc_r+0xfe>
   159da:	2107      	movs	r1, #7
   159dc:	438b      	bics	r3, r1
   159de:	4698      	mov	r8, r3
   159e0:	d5b6      	bpl.n	15950 <_realloc_r+0x3c>
   159e2:	230c      	movs	r3, #12
   159e4:	9a01      	ldr	r2, [sp, #4]
   159e6:	2500      	movs	r5, #0
   159e8:	6013      	str	r3, [r2, #0]
   159ea:	e012      	b.n	15a12 <_realloc_r+0xfe>
   159ec:	0035      	movs	r5, r6
   159ee:	4643      	mov	r3, r8
   159f0:	1ae3      	subs	r3, r4, r3
   159f2:	2b0f      	cmp	r3, #15
   159f4:	d825      	bhi.n	15a42 <_realloc_r+0x12e>
   159f6:	464b      	mov	r3, r9
   159f8:	2201      	movs	r2, #1
   159fa:	4649      	mov	r1, r9
   159fc:	685b      	ldr	r3, [r3, #4]
   159fe:	4013      	ands	r3, r2
   15a00:	4323      	orrs	r3, r4
   15a02:	604b      	str	r3, [r1, #4]
   15a04:	444c      	add	r4, r9
   15a06:	6863      	ldr	r3, [r4, #4]
   15a08:	431a      	orrs	r2, r3
   15a0a:	6062      	str	r2, [r4, #4]
   15a0c:	9801      	ldr	r0, [sp, #4]
   15a0e:	f7ff fc31 	bl	15274 <__malloc_unlock>
   15a12:	0028      	movs	r0, r5
   15a14:	b005      	add	sp, #20
   15a16:	bc3c      	pop	{r2, r3, r4, r5}
   15a18:	4690      	mov	r8, r2
   15a1a:	4699      	mov	r9, r3
   15a1c:	46a2      	mov	sl, r4
   15a1e:	46ab      	mov	fp, r5
   15a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a22:	2103      	movs	r1, #3
   15a24:	9803      	ldr	r0, [sp, #12]
   15a26:	468c      	mov	ip, r1
   15a28:	4388      	bics	r0, r1
   15a2a:	1821      	adds	r1, r4, r0
   15a2c:	468b      	mov	fp, r1
   15a2e:	4299      	cmp	r1, r3
   15a30:	db21      	blt.n	15a76 <_realloc_r+0x162>
   15a32:	9a02      	ldr	r2, [sp, #8]
   15a34:	0035      	movs	r5, r6
   15a36:	68d3      	ldr	r3, [r2, #12]
   15a38:	6892      	ldr	r2, [r2, #8]
   15a3a:	465c      	mov	r4, fp
   15a3c:	60d3      	str	r3, [r2, #12]
   15a3e:	609a      	str	r2, [r3, #8]
   15a40:	e7d5      	b.n	159ee <_realloc_r+0xda>
   15a42:	464a      	mov	r2, r9
   15a44:	2001      	movs	r0, #1
   15a46:	4646      	mov	r6, r8
   15a48:	6852      	ldr	r2, [r2, #4]
   15a4a:	4649      	mov	r1, r9
   15a4c:	4002      	ands	r2, r0
   15a4e:	4332      	orrs	r2, r6
   15a50:	464e      	mov	r6, r9
   15a52:	4441      	add	r1, r8
   15a54:	4303      	orrs	r3, r0
   15a56:	6072      	str	r2, [r6, #4]
   15a58:	444c      	add	r4, r9
   15a5a:	604b      	str	r3, [r1, #4]
   15a5c:	6863      	ldr	r3, [r4, #4]
   15a5e:	3108      	adds	r1, #8
   15a60:	4318      	orrs	r0, r3
   15a62:	6060      	str	r0, [r4, #4]
   15a64:	9801      	ldr	r0, [sp, #4]
   15a66:	f7fe fd75 	bl	14554 <_free_r>
   15a6a:	e7cf      	b.n	15a0c <_realloc_r+0xf8>
   15a6c:	0011      	movs	r1, r2
   15a6e:	f7ff f89f 	bl	14bb0 <_malloc_r>
   15a72:	0005      	movs	r5, r0
   15a74:	e7cd      	b.n	15a12 <_realloc_r+0xfe>
   15a76:	4651      	mov	r1, sl
   15a78:	4211      	tst	r1, r2
   15a7a:	d000      	beq.n	15a7e <_realloc_r+0x16a>
   15a7c:	e786      	b.n	1598c <_realloc_r+0x78>
   15a7e:	4661      	mov	r1, ip
   15a80:	683a      	ldr	r2, [r7, #0]
   15a82:	1aba      	subs	r2, r7, r2
   15a84:	4692      	mov	sl, r2
   15a86:	6852      	ldr	r2, [r2, #4]
   15a88:	438a      	bics	r2, r1
   15a8a:	1880      	adds	r0, r0, r2
   15a8c:	4683      	mov	fp, r0
   15a8e:	44a3      	add	fp, r4
   15a90:	459b      	cmp	fp, r3
   15a92:	db26      	blt.n	15ae2 <_realloc_r+0x1ce>
   15a94:	9a02      	ldr	r2, [sp, #8]
   15a96:	68d3      	ldr	r3, [r2, #12]
   15a98:	6892      	ldr	r2, [r2, #8]
   15a9a:	60d3      	str	r3, [r2, #12]
   15a9c:	609a      	str	r2, [r3, #8]
   15a9e:	4653      	mov	r3, sl
   15aa0:	4652      	mov	r2, sl
   15aa2:	4655      	mov	r5, sl
   15aa4:	6892      	ldr	r2, [r2, #8]
   15aa6:	68db      	ldr	r3, [r3, #12]
   15aa8:	3508      	adds	r5, #8
   15aaa:	60d3      	str	r3, [r2, #12]
   15aac:	609a      	str	r2, [r3, #8]
   15aae:	1f22      	subs	r2, r4, #4
   15ab0:	2a24      	cmp	r2, #36	; 0x24
   15ab2:	d900      	bls.n	15ab6 <_realloc_r+0x1a2>
   15ab4:	e096      	b.n	15be4 <_realloc_r+0x2d0>
   15ab6:	2a13      	cmp	r2, #19
   15ab8:	d972      	bls.n	15ba0 <_realloc_r+0x28c>
   15aba:	4653      	mov	r3, sl
   15abc:	6831      	ldr	r1, [r6, #0]
   15abe:	6099      	str	r1, [r3, #8]
   15ac0:	6871      	ldr	r1, [r6, #4]
   15ac2:	60d9      	str	r1, [r3, #12]
   15ac4:	2a1b      	cmp	r2, #27
   15ac6:	d900      	bls.n	15aca <_realloc_r+0x1b6>
   15ac8:	e0a4      	b.n	15c14 <_realloc_r+0x300>
   15aca:	0032      	movs	r2, r6
   15acc:	3310      	adds	r3, #16
   15ace:	3208      	adds	r2, #8
   15ad0:	e068      	b.n	15ba4 <_realloc_r+0x290>
   15ad2:	683a      	ldr	r2, [r7, #0]
   15ad4:	1aba      	subs	r2, r7, r2
   15ad6:	4692      	mov	sl, r2
   15ad8:	4651      	mov	r1, sl
   15ada:	2203      	movs	r2, #3
   15adc:	6849      	ldr	r1, [r1, #4]
   15ade:	4391      	bics	r1, r2
   15ae0:	000a      	movs	r2, r1
   15ae2:	4693      	mov	fp, r2
   15ae4:	44a3      	add	fp, r4
   15ae6:	459b      	cmp	fp, r3
   15ae8:	da00      	bge.n	15aec <_realloc_r+0x1d8>
   15aea:	e74f      	b.n	1598c <_realloc_r+0x78>
   15aec:	e7d7      	b.n	15a9e <_realloc_r+0x18a>
   15aee:	2003      	movs	r0, #3
   15af0:	9902      	ldr	r1, [sp, #8]
   15af2:	4684      	mov	ip, r0
   15af4:	6849      	ldr	r1, [r1, #4]
   15af6:	4381      	bics	r1, r0
   15af8:	4640      	mov	r0, r8
   15afa:	1909      	adds	r1, r1, r4
   15afc:	3010      	adds	r0, #16
   15afe:	9002      	str	r0, [sp, #8]
   15b00:	4281      	cmp	r1, r0
   15b02:	da58      	bge.n	15bb6 <_realloc_r+0x2a2>
   15b04:	07d2      	lsls	r2, r2, #31
   15b06:	d500      	bpl.n	15b0a <_realloc_r+0x1f6>
   15b08:	e740      	b.n	1598c <_realloc_r+0x78>
   15b0a:	4660      	mov	r0, ip
   15b0c:	683a      	ldr	r2, [r7, #0]
   15b0e:	1aba      	subs	r2, r7, r2
   15b10:	4692      	mov	sl, r2
   15b12:	6852      	ldr	r2, [r2, #4]
   15b14:	4382      	bics	r2, r0
   15b16:	9802      	ldr	r0, [sp, #8]
   15b18:	1851      	adds	r1, r2, r1
   15b1a:	9103      	str	r1, [sp, #12]
   15b1c:	4288      	cmp	r0, r1
   15b1e:	dce0      	bgt.n	15ae2 <_realloc_r+0x1ce>
   15b20:	4653      	mov	r3, sl
   15b22:	4652      	mov	r2, sl
   15b24:	4655      	mov	r5, sl
   15b26:	6892      	ldr	r2, [r2, #8]
   15b28:	68db      	ldr	r3, [r3, #12]
   15b2a:	3508      	adds	r5, #8
   15b2c:	60d3      	str	r3, [r2, #12]
   15b2e:	609a      	str	r2, [r3, #8]
   15b30:	1f22      	subs	r2, r4, #4
   15b32:	2a24      	cmp	r2, #36	; 0x24
   15b34:	d900      	bls.n	15b38 <_realloc_r+0x224>
   15b36:	e08e      	b.n	15c56 <_realloc_r+0x342>
   15b38:	2a13      	cmp	r2, #19
   15b3a:	d800      	bhi.n	15b3e <_realloc_r+0x22a>
   15b3c:	e088      	b.n	15c50 <_realloc_r+0x33c>
   15b3e:	4653      	mov	r3, sl
   15b40:	6831      	ldr	r1, [r6, #0]
   15b42:	6099      	str	r1, [r3, #8]
   15b44:	6871      	ldr	r1, [r6, #4]
   15b46:	60d9      	str	r1, [r3, #12]
   15b48:	2a1b      	cmp	r2, #27
   15b4a:	d900      	bls.n	15b4e <_realloc_r+0x23a>
   15b4c:	e088      	b.n	15c60 <_realloc_r+0x34c>
   15b4e:	0032      	movs	r2, r6
   15b50:	3310      	adds	r3, #16
   15b52:	3208      	adds	r2, #8
   15b54:	6811      	ldr	r1, [r2, #0]
   15b56:	6019      	str	r1, [r3, #0]
   15b58:	6851      	ldr	r1, [r2, #4]
   15b5a:	6059      	str	r1, [r3, #4]
   15b5c:	6892      	ldr	r2, [r2, #8]
   15b5e:	609a      	str	r2, [r3, #8]
   15b60:	4651      	mov	r1, sl
   15b62:	465b      	mov	r3, fp
   15b64:	4642      	mov	r2, r8
   15b66:	4441      	add	r1, r8
   15b68:	6099      	str	r1, [r3, #8]
   15b6a:	9b03      	ldr	r3, [sp, #12]
   15b6c:	9801      	ldr	r0, [sp, #4]
   15b6e:	1a9a      	subs	r2, r3, r2
   15b70:	2301      	movs	r3, #1
   15b72:	431a      	orrs	r2, r3
   15b74:	604a      	str	r2, [r1, #4]
   15b76:	4652      	mov	r2, sl
   15b78:	6852      	ldr	r2, [r2, #4]
   15b7a:	4013      	ands	r3, r2
   15b7c:	4642      	mov	r2, r8
   15b7e:	4313      	orrs	r3, r2
   15b80:	4652      	mov	r2, sl
   15b82:	6053      	str	r3, [r2, #4]
   15b84:	f7ff fb76 	bl	15274 <__malloc_unlock>
   15b88:	e743      	b.n	15a12 <_realloc_r+0xfe>
   15b8a:	6833      	ldr	r3, [r6, #0]
   15b8c:	6003      	str	r3, [r0, #0]
   15b8e:	6873      	ldr	r3, [r6, #4]
   15b90:	6043      	str	r3, [r0, #4]
   15b92:	2a1b      	cmp	r2, #27
   15b94:	d82d      	bhi.n	15bf2 <_realloc_r+0x2de>
   15b96:	0003      	movs	r3, r0
   15b98:	0032      	movs	r2, r6
   15b9a:	3308      	adds	r3, #8
   15b9c:	3208      	adds	r2, #8
   15b9e:	e70d      	b.n	159bc <_realloc_r+0xa8>
   15ba0:	002b      	movs	r3, r5
   15ba2:	0032      	movs	r2, r6
   15ba4:	6811      	ldr	r1, [r2, #0]
   15ba6:	465c      	mov	r4, fp
   15ba8:	6019      	str	r1, [r3, #0]
   15baa:	6851      	ldr	r1, [r2, #4]
   15bac:	46d1      	mov	r9, sl
   15bae:	6059      	str	r1, [r3, #4]
   15bb0:	6892      	ldr	r2, [r2, #8]
   15bb2:	609a      	str	r2, [r3, #8]
   15bb4:	e71b      	b.n	159ee <_realloc_r+0xda>
   15bb6:	4643      	mov	r3, r8
   15bb8:	18fa      	adds	r2, r7, r3
   15bba:	465b      	mov	r3, fp
   15bbc:	609a      	str	r2, [r3, #8]
   15bbe:	4643      	mov	r3, r8
   15bc0:	1ac9      	subs	r1, r1, r3
   15bc2:	2301      	movs	r3, #1
   15bc4:	4319      	orrs	r1, r3
   15bc6:	6051      	str	r1, [r2, #4]
   15bc8:	687a      	ldr	r2, [r7, #4]
   15bca:	9801      	ldr	r0, [sp, #4]
   15bcc:	4013      	ands	r3, r2
   15bce:	4642      	mov	r2, r8
   15bd0:	4313      	orrs	r3, r2
   15bd2:	607b      	str	r3, [r7, #4]
   15bd4:	f7ff fb4e 	bl	15274 <__malloc_unlock>
   15bd8:	0035      	movs	r5, r6
   15bda:	e71a      	b.n	15a12 <_realloc_r+0xfe>
   15bdc:	0031      	movs	r1, r6
   15bde:	f7ff faf1 	bl	151c4 <memmove>
   15be2:	e6f1      	b.n	159c8 <_realloc_r+0xb4>
   15be4:	0031      	movs	r1, r6
   15be6:	0028      	movs	r0, r5
   15be8:	f7ff faec 	bl	151c4 <memmove>
   15bec:	465c      	mov	r4, fp
   15bee:	46d1      	mov	r9, sl
   15bf0:	e6fd      	b.n	159ee <_realloc_r+0xda>
   15bf2:	68b3      	ldr	r3, [r6, #8]
   15bf4:	6083      	str	r3, [r0, #8]
   15bf6:	68f3      	ldr	r3, [r6, #12]
   15bf8:	60c3      	str	r3, [r0, #12]
   15bfa:	2a24      	cmp	r2, #36	; 0x24
   15bfc:	d015      	beq.n	15c2a <_realloc_r+0x316>
   15bfe:	0003      	movs	r3, r0
   15c00:	0032      	movs	r2, r6
   15c02:	3310      	adds	r3, #16
   15c04:	3210      	adds	r2, #16
   15c06:	e6d9      	b.n	159bc <_realloc_r+0xa8>
   15c08:	6853      	ldr	r3, [r2, #4]
   15c0a:	2203      	movs	r2, #3
   15c0c:	4393      	bics	r3, r2
   15c0e:	18e4      	adds	r4, r4, r3
   15c10:	0035      	movs	r5, r6
   15c12:	e6ec      	b.n	159ee <_realloc_r+0xda>
   15c14:	4653      	mov	r3, sl
   15c16:	68b1      	ldr	r1, [r6, #8]
   15c18:	6119      	str	r1, [r3, #16]
   15c1a:	68f1      	ldr	r1, [r6, #12]
   15c1c:	6159      	str	r1, [r3, #20]
   15c1e:	2a24      	cmp	r2, #36	; 0x24
   15c20:	d00c      	beq.n	15c3c <_realloc_r+0x328>
   15c22:	0032      	movs	r2, r6
   15c24:	3318      	adds	r3, #24
   15c26:	3210      	adds	r2, #16
   15c28:	e7bc      	b.n	15ba4 <_realloc_r+0x290>
   15c2a:	6933      	ldr	r3, [r6, #16]
   15c2c:	0032      	movs	r2, r6
   15c2e:	6103      	str	r3, [r0, #16]
   15c30:	0003      	movs	r3, r0
   15c32:	6971      	ldr	r1, [r6, #20]
   15c34:	3318      	adds	r3, #24
   15c36:	3218      	adds	r2, #24
   15c38:	6141      	str	r1, [r0, #20]
   15c3a:	e6bf      	b.n	159bc <_realloc_r+0xa8>
   15c3c:	4653      	mov	r3, sl
   15c3e:	6932      	ldr	r2, [r6, #16]
   15c40:	4651      	mov	r1, sl
   15c42:	619a      	str	r2, [r3, #24]
   15c44:	0032      	movs	r2, r6
   15c46:	6970      	ldr	r0, [r6, #20]
   15c48:	3320      	adds	r3, #32
   15c4a:	3218      	adds	r2, #24
   15c4c:	61c8      	str	r0, [r1, #28]
   15c4e:	e7a9      	b.n	15ba4 <_realloc_r+0x290>
   15c50:	002b      	movs	r3, r5
   15c52:	0032      	movs	r2, r6
   15c54:	e77e      	b.n	15b54 <_realloc_r+0x240>
   15c56:	0031      	movs	r1, r6
   15c58:	0028      	movs	r0, r5
   15c5a:	f7ff fab3 	bl	151c4 <memmove>
   15c5e:	e77f      	b.n	15b60 <_realloc_r+0x24c>
   15c60:	4653      	mov	r3, sl
   15c62:	68b1      	ldr	r1, [r6, #8]
   15c64:	6119      	str	r1, [r3, #16]
   15c66:	68f1      	ldr	r1, [r6, #12]
   15c68:	6159      	str	r1, [r3, #20]
   15c6a:	2a24      	cmp	r2, #36	; 0x24
   15c6c:	d003      	beq.n	15c76 <_realloc_r+0x362>
   15c6e:	0032      	movs	r2, r6
   15c70:	3318      	adds	r3, #24
   15c72:	3210      	adds	r2, #16
   15c74:	e76e      	b.n	15b54 <_realloc_r+0x240>
   15c76:	4653      	mov	r3, sl
   15c78:	6932      	ldr	r2, [r6, #16]
   15c7a:	4651      	mov	r1, sl
   15c7c:	619a      	str	r2, [r3, #24]
   15c7e:	0032      	movs	r2, r6
   15c80:	6970      	ldr	r0, [r6, #20]
   15c82:	3320      	adds	r3, #32
   15c84:	3218      	adds	r2, #24
   15c86:	61c8      	str	r0, [r1, #28]
   15c88:	e764      	b.n	15b54 <_realloc_r+0x240>
   15c8a:	46c0      	nop			; (mov r8, r8)
   15c8c:	20000618 	.word	0x20000618

00015c90 <_sbrk_r>:
   15c90:	2300      	movs	r3, #0
   15c92:	b570      	push	{r4, r5, r6, lr}
   15c94:	4c06      	ldr	r4, [pc, #24]	; (15cb0 <_sbrk_r+0x20>)
   15c96:	0005      	movs	r5, r0
   15c98:	0008      	movs	r0, r1
   15c9a:	6023      	str	r3, [r4, #0]
   15c9c:	f7f0 ffb4 	bl	6c08 <_sbrk>
   15ca0:	1c43      	adds	r3, r0, #1
   15ca2:	d000      	beq.n	15ca6 <_sbrk_r+0x16>
   15ca4:	bd70      	pop	{r4, r5, r6, pc}
   15ca6:	6823      	ldr	r3, [r4, #0]
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d0fb      	beq.n	15ca4 <_sbrk_r+0x14>
   15cac:	602b      	str	r3, [r5, #0]
   15cae:	e7f9      	b.n	15ca4 <_sbrk_r+0x14>
   15cb0:	20001920 	.word	0x20001920

00015cb4 <__sread>:
   15cb4:	b570      	push	{r4, r5, r6, lr}
   15cb6:	000c      	movs	r4, r1
   15cb8:	250e      	movs	r5, #14
   15cba:	5f49      	ldrsh	r1, [r1, r5]
   15cbc:	f000 fa88 	bl	161d0 <_read_r>
   15cc0:	2800      	cmp	r0, #0
   15cc2:	db03      	blt.n	15ccc <__sread+0x18>
   15cc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15cc6:	181b      	adds	r3, r3, r0
   15cc8:	6523      	str	r3, [r4, #80]	; 0x50
   15cca:	bd70      	pop	{r4, r5, r6, pc}
   15ccc:	89a3      	ldrh	r3, [r4, #12]
   15cce:	4a02      	ldr	r2, [pc, #8]	; (15cd8 <__sread+0x24>)
   15cd0:	4013      	ands	r3, r2
   15cd2:	81a3      	strh	r3, [r4, #12]
   15cd4:	e7f9      	b.n	15cca <__sread+0x16>
   15cd6:	46c0      	nop			; (mov r8, r8)
   15cd8:	ffffefff 	.word	0xffffefff

00015cdc <__swrite>:
   15cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cde:	0016      	movs	r6, r2
   15ce0:	001f      	movs	r7, r3
   15ce2:	220c      	movs	r2, #12
   15ce4:	5e8b      	ldrsh	r3, [r1, r2]
   15ce6:	0005      	movs	r5, r0
   15ce8:	000c      	movs	r4, r1
   15cea:	05da      	lsls	r2, r3, #23
   15cec:	d507      	bpl.n	15cfe <__swrite+0x22>
   15cee:	230e      	movs	r3, #14
   15cf0:	5ec9      	ldrsh	r1, [r1, r3]
   15cf2:	2200      	movs	r2, #0
   15cf4:	2302      	movs	r3, #2
   15cf6:	f000 fa57 	bl	161a8 <_lseek_r>
   15cfa:	220c      	movs	r2, #12
   15cfc:	5ea3      	ldrsh	r3, [r4, r2]
   15cfe:	4a05      	ldr	r2, [pc, #20]	; (15d14 <__swrite+0x38>)
   15d00:	0028      	movs	r0, r5
   15d02:	4013      	ands	r3, r2
   15d04:	81a3      	strh	r3, [r4, #12]
   15d06:	0032      	movs	r2, r6
   15d08:	230e      	movs	r3, #14
   15d0a:	5ee1      	ldrsh	r1, [r4, r3]
   15d0c:	003b      	movs	r3, r7
   15d0e:	f000 f879 	bl	15e04 <_write_r>
   15d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d14:	ffffefff 	.word	0xffffefff

00015d18 <__sseek>:
   15d18:	b570      	push	{r4, r5, r6, lr}
   15d1a:	000c      	movs	r4, r1
   15d1c:	250e      	movs	r5, #14
   15d1e:	5f49      	ldrsh	r1, [r1, r5]
   15d20:	f000 fa42 	bl	161a8 <_lseek_r>
   15d24:	1c43      	adds	r3, r0, #1
   15d26:	d006      	beq.n	15d36 <__sseek+0x1e>
   15d28:	2380      	movs	r3, #128	; 0x80
   15d2a:	89a2      	ldrh	r2, [r4, #12]
   15d2c:	015b      	lsls	r3, r3, #5
   15d2e:	4313      	orrs	r3, r2
   15d30:	81a3      	strh	r3, [r4, #12]
   15d32:	6520      	str	r0, [r4, #80]	; 0x50
   15d34:	bd70      	pop	{r4, r5, r6, pc}
   15d36:	89a3      	ldrh	r3, [r4, #12]
   15d38:	4a01      	ldr	r2, [pc, #4]	; (15d40 <__sseek+0x28>)
   15d3a:	4013      	ands	r3, r2
   15d3c:	81a3      	strh	r3, [r4, #12]
   15d3e:	e7f9      	b.n	15d34 <__sseek+0x1c>
   15d40:	ffffefff 	.word	0xffffefff

00015d44 <__sclose>:
   15d44:	b510      	push	{r4, lr}
   15d46:	230e      	movs	r3, #14
   15d48:	5ec9      	ldrsh	r1, [r1, r3]
   15d4a:	f000 f915 	bl	15f78 <_close_r>
   15d4e:	bd10      	pop	{r4, pc}

00015d50 <__sprint_r.part.0>:
   15d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d52:	464e      	mov	r6, r9
   15d54:	4645      	mov	r5, r8
   15d56:	46de      	mov	lr, fp
   15d58:	4657      	mov	r7, sl
   15d5a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   15d5c:	b5e0      	push	{r5, r6, r7, lr}
   15d5e:	4680      	mov	r8, r0
   15d60:	000e      	movs	r6, r1
   15d62:	4691      	mov	r9, r2
   15d64:	049b      	lsls	r3, r3, #18
   15d66:	d531      	bpl.n	15dcc <__sprint_r.part.0+0x7c>
   15d68:	6813      	ldr	r3, [r2, #0]
   15d6a:	469a      	mov	sl, r3
   15d6c:	6893      	ldr	r3, [r2, #8]
   15d6e:	2b00      	cmp	r3, #0
   15d70:	d02a      	beq.n	15dc8 <__sprint_r.part.0+0x78>
   15d72:	4652      	mov	r2, sl
   15d74:	6852      	ldr	r2, [r2, #4]
   15d76:	2500      	movs	r5, #0
   15d78:	4693      	mov	fp, r2
   15d7a:	0897      	lsrs	r7, r2, #2
   15d7c:	4652      	mov	r2, sl
   15d7e:	6814      	ldr	r4, [r2, #0]
   15d80:	d104      	bne.n	15d8c <__sprint_r.part.0+0x3c>
   15d82:	e016      	b.n	15db2 <__sprint_r.part.0+0x62>
   15d84:	3501      	adds	r5, #1
   15d86:	3404      	adds	r4, #4
   15d88:	42af      	cmp	r7, r5
   15d8a:	d010      	beq.n	15dae <__sprint_r.part.0+0x5e>
   15d8c:	0032      	movs	r2, r6
   15d8e:	6821      	ldr	r1, [r4, #0]
   15d90:	4640      	mov	r0, r8
   15d92:	f000 f9b5 	bl	16100 <_fputwc_r>
   15d96:	1c43      	adds	r3, r0, #1
   15d98:	d1f4      	bne.n	15d84 <__sprint_r.part.0+0x34>
   15d9a:	464a      	mov	r2, r9
   15d9c:	2300      	movs	r3, #0
   15d9e:	6093      	str	r3, [r2, #8]
   15da0:	6053      	str	r3, [r2, #4]
   15da2:	bc3c      	pop	{r2, r3, r4, r5}
   15da4:	4690      	mov	r8, r2
   15da6:	4699      	mov	r9, r3
   15da8:	46a2      	mov	sl, r4
   15daa:	46ab      	mov	fp, r5
   15dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15dae:	464b      	mov	r3, r9
   15db0:	689b      	ldr	r3, [r3, #8]
   15db2:	465a      	mov	r2, fp
   15db4:	2103      	movs	r1, #3
   15db6:	438a      	bics	r2, r1
   15db8:	1a9b      	subs	r3, r3, r2
   15dba:	464a      	mov	r2, r9
   15dbc:	6093      	str	r3, [r2, #8]
   15dbe:	2208      	movs	r2, #8
   15dc0:	4694      	mov	ip, r2
   15dc2:	44e2      	add	sl, ip
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d1d4      	bne.n	15d72 <__sprint_r.part.0+0x22>
   15dc8:	2000      	movs	r0, #0
   15dca:	e7e6      	b.n	15d9a <__sprint_r.part.0+0x4a>
   15dcc:	f7fe fca0 	bl	14710 <__sfvwrite_r>
   15dd0:	e7e3      	b.n	15d9a <__sprint_r.part.0+0x4a>
   15dd2:	46c0      	nop			; (mov r8, r8)

00015dd4 <__sprint_r>:
   15dd4:	6893      	ldr	r3, [r2, #8]
   15dd6:	b510      	push	{r4, lr}
   15dd8:	2b00      	cmp	r3, #0
   15dda:	d002      	beq.n	15de2 <__sprint_r+0xe>
   15ddc:	f7ff ffb8 	bl	15d50 <__sprint_r.part.0>
   15de0:	bd10      	pop	{r4, pc}
   15de2:	6053      	str	r3, [r2, #4]
   15de4:	2000      	movs	r0, #0
   15de6:	e7fb      	b.n	15de0 <__sprint_r+0xc>

00015de8 <__ascii_wctomb>:
   15de8:	2900      	cmp	r1, #0
   15dea:	d004      	beq.n	15df6 <__ascii_wctomb+0xe>
   15dec:	2aff      	cmp	r2, #255	; 0xff
   15dee:	d804      	bhi.n	15dfa <__ascii_wctomb+0x12>
   15df0:	2001      	movs	r0, #1
   15df2:	700a      	strb	r2, [r1, #0]
   15df4:	4770      	bx	lr
   15df6:	2000      	movs	r0, #0
   15df8:	e7fc      	b.n	15df4 <__ascii_wctomb+0xc>
   15dfa:	238a      	movs	r3, #138	; 0x8a
   15dfc:	6003      	str	r3, [r0, #0]
   15dfe:	2001      	movs	r0, #1
   15e00:	4240      	negs	r0, r0
   15e02:	e7f7      	b.n	15df4 <__ascii_wctomb+0xc>

00015e04 <_write_r>:
   15e04:	b570      	push	{r4, r5, r6, lr}
   15e06:	0005      	movs	r5, r0
   15e08:	0008      	movs	r0, r1
   15e0a:	0011      	movs	r1, r2
   15e0c:	2200      	movs	r2, #0
   15e0e:	4c06      	ldr	r4, [pc, #24]	; (15e28 <_write_r+0x24>)
   15e10:	6022      	str	r2, [r4, #0]
   15e12:	001a      	movs	r2, r3
   15e14:	f7f0 fec2 	bl	6b9c <_write>
   15e18:	1c43      	adds	r3, r0, #1
   15e1a:	d000      	beq.n	15e1e <_write_r+0x1a>
   15e1c:	bd70      	pop	{r4, r5, r6, pc}
   15e1e:	6823      	ldr	r3, [r4, #0]
   15e20:	2b00      	cmp	r3, #0
   15e22:	d0fb      	beq.n	15e1c <_write_r+0x18>
   15e24:	602b      	str	r3, [r5, #0]
   15e26:	e7f9      	b.n	15e1c <_write_r+0x18>
   15e28:	20001920 	.word	0x20001920

00015e2c <__register_exitproc>:
   15e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e2e:	464e      	mov	r6, r9
   15e30:	4645      	mov	r5, r8
   15e32:	46de      	mov	lr, fp
   15e34:	4657      	mov	r7, sl
   15e36:	b5e0      	push	{r5, r6, r7, lr}
   15e38:	4d36      	ldr	r5, [pc, #216]	; (15f14 <__register_exitproc+0xe8>)
   15e3a:	b083      	sub	sp, #12
   15e3c:	0006      	movs	r6, r0
   15e3e:	6828      	ldr	r0, [r5, #0]
   15e40:	4698      	mov	r8, r3
   15e42:	000f      	movs	r7, r1
   15e44:	4691      	mov	r9, r2
   15e46:	f7fe fe2d 	bl	14aa4 <__retarget_lock_acquire_recursive>
   15e4a:	4b33      	ldr	r3, [pc, #204]	; (15f18 <__register_exitproc+0xec>)
   15e4c:	681c      	ldr	r4, [r3, #0]
   15e4e:	23a4      	movs	r3, #164	; 0xa4
   15e50:	005b      	lsls	r3, r3, #1
   15e52:	58e0      	ldr	r0, [r4, r3]
   15e54:	2800      	cmp	r0, #0
   15e56:	d052      	beq.n	15efe <__register_exitproc+0xd2>
   15e58:	6843      	ldr	r3, [r0, #4]
   15e5a:	2b1f      	cmp	r3, #31
   15e5c:	dc13      	bgt.n	15e86 <__register_exitproc+0x5a>
   15e5e:	1c5a      	adds	r2, r3, #1
   15e60:	9201      	str	r2, [sp, #4]
   15e62:	2e00      	cmp	r6, #0
   15e64:	d128      	bne.n	15eb8 <__register_exitproc+0x8c>
   15e66:	9a01      	ldr	r2, [sp, #4]
   15e68:	3302      	adds	r3, #2
   15e6a:	009b      	lsls	r3, r3, #2
   15e6c:	6042      	str	r2, [r0, #4]
   15e6e:	501f      	str	r7, [r3, r0]
   15e70:	6828      	ldr	r0, [r5, #0]
   15e72:	f7fe fe19 	bl	14aa8 <__retarget_lock_release_recursive>
   15e76:	2000      	movs	r0, #0
   15e78:	b003      	add	sp, #12
   15e7a:	bc3c      	pop	{r2, r3, r4, r5}
   15e7c:	4690      	mov	r8, r2
   15e7e:	4699      	mov	r9, r3
   15e80:	46a2      	mov	sl, r4
   15e82:	46ab      	mov	fp, r5
   15e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e86:	4b25      	ldr	r3, [pc, #148]	; (15f1c <__register_exitproc+0xf0>)
   15e88:	2b00      	cmp	r3, #0
   15e8a:	d03d      	beq.n	15f08 <__register_exitproc+0xdc>
   15e8c:	20c8      	movs	r0, #200	; 0xc8
   15e8e:	0040      	lsls	r0, r0, #1
   15e90:	f7fe fe84 	bl	14b9c <malloc>
   15e94:	2800      	cmp	r0, #0
   15e96:	d037      	beq.n	15f08 <__register_exitproc+0xdc>
   15e98:	22a4      	movs	r2, #164	; 0xa4
   15e9a:	2300      	movs	r3, #0
   15e9c:	0052      	lsls	r2, r2, #1
   15e9e:	58a1      	ldr	r1, [r4, r2]
   15ea0:	6043      	str	r3, [r0, #4]
   15ea2:	6001      	str	r1, [r0, #0]
   15ea4:	50a0      	str	r0, [r4, r2]
   15ea6:	3240      	adds	r2, #64	; 0x40
   15ea8:	5083      	str	r3, [r0, r2]
   15eaa:	3204      	adds	r2, #4
   15eac:	5083      	str	r3, [r0, r2]
   15eae:	3301      	adds	r3, #1
   15eb0:	9301      	str	r3, [sp, #4]
   15eb2:	2300      	movs	r3, #0
   15eb4:	2e00      	cmp	r6, #0
   15eb6:	d0d6      	beq.n	15e66 <__register_exitproc+0x3a>
   15eb8:	009a      	lsls	r2, r3, #2
   15eba:	4692      	mov	sl, r2
   15ebc:	4482      	add	sl, r0
   15ebe:	464a      	mov	r2, r9
   15ec0:	2188      	movs	r1, #136	; 0x88
   15ec2:	4654      	mov	r4, sl
   15ec4:	5062      	str	r2, [r4, r1]
   15ec6:	22c4      	movs	r2, #196	; 0xc4
   15ec8:	0052      	lsls	r2, r2, #1
   15eca:	4691      	mov	r9, r2
   15ecc:	4481      	add	r9, r0
   15ece:	464a      	mov	r2, r9
   15ed0:	3987      	subs	r1, #135	; 0x87
   15ed2:	4099      	lsls	r1, r3
   15ed4:	6812      	ldr	r2, [r2, #0]
   15ed6:	468b      	mov	fp, r1
   15ed8:	430a      	orrs	r2, r1
   15eda:	4694      	mov	ip, r2
   15edc:	464a      	mov	r2, r9
   15ede:	4661      	mov	r1, ip
   15ee0:	6011      	str	r1, [r2, #0]
   15ee2:	2284      	movs	r2, #132	; 0x84
   15ee4:	4641      	mov	r1, r8
   15ee6:	0052      	lsls	r2, r2, #1
   15ee8:	50a1      	str	r1, [r4, r2]
   15eea:	2e02      	cmp	r6, #2
   15eec:	d1bb      	bne.n	15e66 <__register_exitproc+0x3a>
   15eee:	0002      	movs	r2, r0
   15ef0:	465c      	mov	r4, fp
   15ef2:	328d      	adds	r2, #141	; 0x8d
   15ef4:	32ff      	adds	r2, #255	; 0xff
   15ef6:	6811      	ldr	r1, [r2, #0]
   15ef8:	430c      	orrs	r4, r1
   15efa:	6014      	str	r4, [r2, #0]
   15efc:	e7b3      	b.n	15e66 <__register_exitproc+0x3a>
   15efe:	0020      	movs	r0, r4
   15f00:	304d      	adds	r0, #77	; 0x4d
   15f02:	30ff      	adds	r0, #255	; 0xff
   15f04:	50e0      	str	r0, [r4, r3]
   15f06:	e7a7      	b.n	15e58 <__register_exitproc+0x2c>
   15f08:	6828      	ldr	r0, [r5, #0]
   15f0a:	f7fe fdcd 	bl	14aa8 <__retarget_lock_release_recursive>
   15f0e:	2001      	movs	r0, #1
   15f10:	4240      	negs	r0, r0
   15f12:	e7b1      	b.n	15e78 <__register_exitproc+0x4c>
   15f14:	200004a8 	.word	0x200004a8
   15f18:	000177a0 	.word	0x000177a0
   15f1c:	00014b9d 	.word	0x00014b9d

00015f20 <_calloc_r>:
   15f20:	b510      	push	{r4, lr}
   15f22:	4351      	muls	r1, r2
   15f24:	f7fe fe44 	bl	14bb0 <_malloc_r>
   15f28:	1e04      	subs	r4, r0, #0
   15f2a:	d01c      	beq.n	15f66 <_calloc_r+0x46>
   15f2c:	0003      	movs	r3, r0
   15f2e:	3b08      	subs	r3, #8
   15f30:	685a      	ldr	r2, [r3, #4]
   15f32:	2303      	movs	r3, #3
   15f34:	439a      	bics	r2, r3
   15f36:	3a04      	subs	r2, #4
   15f38:	2a24      	cmp	r2, #36	; 0x24
   15f3a:	d816      	bhi.n	15f6a <_calloc_r+0x4a>
   15f3c:	0003      	movs	r3, r0
   15f3e:	2a13      	cmp	r2, #19
   15f40:	d90d      	bls.n	15f5e <_calloc_r+0x3e>
   15f42:	2100      	movs	r1, #0
   15f44:	3308      	adds	r3, #8
   15f46:	6001      	str	r1, [r0, #0]
   15f48:	6041      	str	r1, [r0, #4]
   15f4a:	2a1b      	cmp	r2, #27
   15f4c:	d907      	bls.n	15f5e <_calloc_r+0x3e>
   15f4e:	6081      	str	r1, [r0, #8]
   15f50:	60c1      	str	r1, [r0, #12]
   15f52:	2a24      	cmp	r2, #36	; 0x24
   15f54:	d10d      	bne.n	15f72 <_calloc_r+0x52>
   15f56:	0003      	movs	r3, r0
   15f58:	6101      	str	r1, [r0, #16]
   15f5a:	3318      	adds	r3, #24
   15f5c:	6141      	str	r1, [r0, #20]
   15f5e:	2200      	movs	r2, #0
   15f60:	601a      	str	r2, [r3, #0]
   15f62:	605a      	str	r2, [r3, #4]
   15f64:	609a      	str	r2, [r3, #8]
   15f66:	0020      	movs	r0, r4
   15f68:	bd10      	pop	{r4, pc}
   15f6a:	2100      	movs	r1, #0
   15f6c:	f7fb fac4 	bl	114f8 <memset>
   15f70:	e7f9      	b.n	15f66 <_calloc_r+0x46>
   15f72:	0003      	movs	r3, r0
   15f74:	3310      	adds	r3, #16
   15f76:	e7f2      	b.n	15f5e <_calloc_r+0x3e>

00015f78 <_close_r>:
   15f78:	2300      	movs	r3, #0
   15f7a:	b570      	push	{r4, r5, r6, lr}
   15f7c:	4c06      	ldr	r4, [pc, #24]	; (15f98 <_close_r+0x20>)
   15f7e:	0005      	movs	r5, r0
   15f80:	0008      	movs	r0, r1
   15f82:	6023      	str	r3, [r4, #0]
   15f84:	f7f0 fe5e 	bl	6c44 <_close>
   15f88:	1c43      	adds	r3, r0, #1
   15f8a:	d000      	beq.n	15f8e <_close_r+0x16>
   15f8c:	bd70      	pop	{r4, r5, r6, pc}
   15f8e:	6823      	ldr	r3, [r4, #0]
   15f90:	2b00      	cmp	r3, #0
   15f92:	d0fb      	beq.n	15f8c <_close_r+0x14>
   15f94:	602b      	str	r3, [r5, #0]
   15f96:	e7f9      	b.n	15f8c <_close_r+0x14>
   15f98:	20001920 	.word	0x20001920

00015f9c <_fclose_r>:
   15f9c:	b570      	push	{r4, r5, r6, lr}
   15f9e:	0005      	movs	r5, r0
   15fa0:	1e0c      	subs	r4, r1, #0
   15fa2:	d040      	beq.n	16026 <_fclose_r+0x8a>
   15fa4:	2800      	cmp	r0, #0
   15fa6:	d002      	beq.n	15fae <_fclose_r+0x12>
   15fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   15faa:	2b00      	cmp	r3, #0
   15fac:	d03e      	beq.n	1602c <_fclose_r+0x90>
   15fae:	2601      	movs	r6, #1
   15fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15fb2:	4233      	tst	r3, r6
   15fb4:	d133      	bne.n	1601e <_fclose_r+0x82>
   15fb6:	89a3      	ldrh	r3, [r4, #12]
   15fb8:	059b      	lsls	r3, r3, #22
   15fba:	d543      	bpl.n	16044 <_fclose_r+0xa8>
   15fbc:	0021      	movs	r1, r4
   15fbe:	0028      	movs	r0, r5
   15fc0:	f7fe f91c 	bl	141fc <__sflush_r>
   15fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15fc6:	0006      	movs	r6, r0
   15fc8:	2b00      	cmp	r3, #0
   15fca:	d004      	beq.n	15fd6 <_fclose_r+0x3a>
   15fcc:	69e1      	ldr	r1, [r4, #28]
   15fce:	0028      	movs	r0, r5
   15fd0:	4798      	blx	r3
   15fd2:	2800      	cmp	r0, #0
   15fd4:	db44      	blt.n	16060 <_fclose_r+0xc4>
   15fd6:	89a3      	ldrh	r3, [r4, #12]
   15fd8:	061b      	lsls	r3, r3, #24
   15fda:	d42a      	bmi.n	16032 <_fclose_r+0x96>
   15fdc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15fde:	2900      	cmp	r1, #0
   15fe0:	d008      	beq.n	15ff4 <_fclose_r+0x58>
   15fe2:	0023      	movs	r3, r4
   15fe4:	3340      	adds	r3, #64	; 0x40
   15fe6:	4299      	cmp	r1, r3
   15fe8:	d002      	beq.n	15ff0 <_fclose_r+0x54>
   15fea:	0028      	movs	r0, r5
   15fec:	f7fe fab2 	bl	14554 <_free_r>
   15ff0:	2300      	movs	r3, #0
   15ff2:	6323      	str	r3, [r4, #48]	; 0x30
   15ff4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   15ff6:	2900      	cmp	r1, #0
   15ff8:	d004      	beq.n	16004 <_fclose_r+0x68>
   15ffa:	0028      	movs	r0, r5
   15ffc:	f7fe faaa 	bl	14554 <_free_r>
   16000:	2300      	movs	r3, #0
   16002:	6463      	str	r3, [r4, #68]	; 0x44
   16004:	f7fe fa2c 	bl	14460 <__sfp_lock_acquire>
   16008:	2300      	movs	r3, #0
   1600a:	81a3      	strh	r3, [r4, #12]
   1600c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1600e:	07db      	lsls	r3, r3, #31
   16010:	d514      	bpl.n	1603c <_fclose_r+0xa0>
   16012:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16014:	f7fe fd44 	bl	14aa0 <__retarget_lock_close_recursive>
   16018:	f7fe fa2a 	bl	14470 <__sfp_lock_release>
   1601c:	e004      	b.n	16028 <_fclose_r+0x8c>
   1601e:	220c      	movs	r2, #12
   16020:	5ea3      	ldrsh	r3, [r4, r2]
   16022:	2b00      	cmp	r3, #0
   16024:	d1ca      	bne.n	15fbc <_fclose_r+0x20>
   16026:	2600      	movs	r6, #0
   16028:	0030      	movs	r0, r6
   1602a:	bd70      	pop	{r4, r5, r6, pc}
   1602c:	f7fe f9e8 	bl	14400 <__sinit>
   16030:	e7bd      	b.n	15fae <_fclose_r+0x12>
   16032:	6921      	ldr	r1, [r4, #16]
   16034:	0028      	movs	r0, r5
   16036:	f7fe fa8d 	bl	14554 <_free_r>
   1603a:	e7cf      	b.n	15fdc <_fclose_r+0x40>
   1603c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1603e:	f7fe fd33 	bl	14aa8 <__retarget_lock_release_recursive>
   16042:	e7e6      	b.n	16012 <_fclose_r+0x76>
   16044:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16046:	f7fe fd2d 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1604a:	220c      	movs	r2, #12
   1604c:	5ea3      	ldrsh	r3, [r4, r2]
   1604e:	2b00      	cmp	r3, #0
   16050:	d1b4      	bne.n	15fbc <_fclose_r+0x20>
   16052:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16054:	401e      	ands	r6, r3
   16056:	d1e6      	bne.n	16026 <_fclose_r+0x8a>
   16058:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1605a:	f7fe fd25 	bl	14aa8 <__retarget_lock_release_recursive>
   1605e:	e7e3      	b.n	16028 <_fclose_r+0x8c>
   16060:	2601      	movs	r6, #1
   16062:	4276      	negs	r6, r6
   16064:	e7b7      	b.n	15fd6 <_fclose_r+0x3a>
   16066:	46c0      	nop			; (mov r8, r8)

00016068 <__fputwc>:
   16068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1606a:	46ce      	mov	lr, r9
   1606c:	4647      	mov	r7, r8
   1606e:	b580      	push	{r7, lr}
   16070:	b085      	sub	sp, #20
   16072:	4680      	mov	r8, r0
   16074:	4689      	mov	r9, r1
   16076:	0014      	movs	r4, r2
   16078:	f7fe fcf2 	bl	14a60 <__locale_mb_cur_max>
   1607c:	2801      	cmp	r0, #1
   1607e:	d031      	beq.n	160e4 <__fputwc+0x7c>
   16080:	0023      	movs	r3, r4
   16082:	af03      	add	r7, sp, #12
   16084:	335c      	adds	r3, #92	; 0x5c
   16086:	464a      	mov	r2, r9
   16088:	0039      	movs	r1, r7
   1608a:	4640      	mov	r0, r8
   1608c:	f000 f912 	bl	162b4 <_wcrtomb_r>
   16090:	0006      	movs	r6, r0
   16092:	1c43      	adds	r3, r0, #1
   16094:	d021      	beq.n	160da <__fputwc+0x72>
   16096:	2800      	cmp	r0, #0
   16098:	d030      	beq.n	160fc <__fputwc+0x94>
   1609a:	7839      	ldrb	r1, [r7, #0]
   1609c:	2500      	movs	r5, #0
   1609e:	e007      	b.n	160b0 <__fputwc+0x48>
   160a0:	6823      	ldr	r3, [r4, #0]
   160a2:	1c5a      	adds	r2, r3, #1
   160a4:	6022      	str	r2, [r4, #0]
   160a6:	7019      	strb	r1, [r3, #0]
   160a8:	3501      	adds	r5, #1
   160aa:	42b5      	cmp	r5, r6
   160ac:	d226      	bcs.n	160fc <__fputwc+0x94>
   160ae:	5d79      	ldrb	r1, [r7, r5]
   160b0:	68a3      	ldr	r3, [r4, #8]
   160b2:	3b01      	subs	r3, #1
   160b4:	60a3      	str	r3, [r4, #8]
   160b6:	2b00      	cmp	r3, #0
   160b8:	daf2      	bge.n	160a0 <__fputwc+0x38>
   160ba:	69a2      	ldr	r2, [r4, #24]
   160bc:	4293      	cmp	r3, r2
   160be:	db01      	blt.n	160c4 <__fputwc+0x5c>
   160c0:	290a      	cmp	r1, #10
   160c2:	d1ed      	bne.n	160a0 <__fputwc+0x38>
   160c4:	0022      	movs	r2, r4
   160c6:	4640      	mov	r0, r8
   160c8:	f000 f896 	bl	161f8 <__swbuf_r>
   160cc:	1c43      	adds	r3, r0, #1
   160ce:	d1eb      	bne.n	160a8 <__fputwc+0x40>
   160d0:	b005      	add	sp, #20
   160d2:	bc0c      	pop	{r2, r3}
   160d4:	4690      	mov	r8, r2
   160d6:	4699      	mov	r9, r3
   160d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160da:	2240      	movs	r2, #64	; 0x40
   160dc:	89a3      	ldrh	r3, [r4, #12]
   160de:	4313      	orrs	r3, r2
   160e0:	81a3      	strh	r3, [r4, #12]
   160e2:	e7f5      	b.n	160d0 <__fputwc+0x68>
   160e4:	464b      	mov	r3, r9
   160e6:	3b01      	subs	r3, #1
   160e8:	2bfe      	cmp	r3, #254	; 0xfe
   160ea:	d8c9      	bhi.n	16080 <__fputwc+0x18>
   160ec:	466a      	mov	r2, sp
   160ee:	464b      	mov	r3, r9
   160f0:	71d3      	strb	r3, [r2, #7]
   160f2:	79d1      	ldrb	r1, [r2, #7]
   160f4:	af03      	add	r7, sp, #12
   160f6:	7039      	strb	r1, [r7, #0]
   160f8:	2601      	movs	r6, #1
   160fa:	e7cf      	b.n	1609c <__fputwc+0x34>
   160fc:	4648      	mov	r0, r9
   160fe:	e7e7      	b.n	160d0 <__fputwc+0x68>

00016100 <_fputwc_r>:
   16100:	6e53      	ldr	r3, [r2, #100]	; 0x64
   16102:	b570      	push	{r4, r5, r6, lr}
   16104:	0005      	movs	r5, r0
   16106:	000e      	movs	r6, r1
   16108:	0014      	movs	r4, r2
   1610a:	07db      	lsls	r3, r3, #31
   1610c:	d41e      	bmi.n	1614c <_fputwc_r+0x4c>
   1610e:	230c      	movs	r3, #12
   16110:	5ed2      	ldrsh	r2, [r2, r3]
   16112:	b291      	uxth	r1, r2
   16114:	058b      	lsls	r3, r1, #22
   16116:	d516      	bpl.n	16146 <_fputwc_r+0x46>
   16118:	2380      	movs	r3, #128	; 0x80
   1611a:	019b      	lsls	r3, r3, #6
   1611c:	4219      	tst	r1, r3
   1611e:	d104      	bne.n	1612a <_fputwc_r+0x2a>
   16120:	431a      	orrs	r2, r3
   16122:	81a2      	strh	r2, [r4, #12]
   16124:	6e62      	ldr	r2, [r4, #100]	; 0x64
   16126:	4313      	orrs	r3, r2
   16128:	6663      	str	r3, [r4, #100]	; 0x64
   1612a:	0028      	movs	r0, r5
   1612c:	0022      	movs	r2, r4
   1612e:	0031      	movs	r1, r6
   16130:	f7ff ff9a 	bl	16068 <__fputwc>
   16134:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16136:	0005      	movs	r5, r0
   16138:	07db      	lsls	r3, r3, #31
   1613a:	d402      	bmi.n	16142 <_fputwc_r+0x42>
   1613c:	89a3      	ldrh	r3, [r4, #12]
   1613e:	059b      	lsls	r3, r3, #22
   16140:	d508      	bpl.n	16154 <_fputwc_r+0x54>
   16142:	0028      	movs	r0, r5
   16144:	bd70      	pop	{r4, r5, r6, pc}
   16146:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16148:	f7fe fcac 	bl	14aa4 <__retarget_lock_acquire_recursive>
   1614c:	230c      	movs	r3, #12
   1614e:	5ee2      	ldrsh	r2, [r4, r3]
   16150:	b291      	uxth	r1, r2
   16152:	e7e1      	b.n	16118 <_fputwc_r+0x18>
   16154:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16156:	f7fe fca7 	bl	14aa8 <__retarget_lock_release_recursive>
   1615a:	e7f2      	b.n	16142 <_fputwc_r+0x42>

0001615c <_fstat_r>:
   1615c:	2300      	movs	r3, #0
   1615e:	b570      	push	{r4, r5, r6, lr}
   16160:	4c07      	ldr	r4, [pc, #28]	; (16180 <_fstat_r+0x24>)
   16162:	0005      	movs	r5, r0
   16164:	0008      	movs	r0, r1
   16166:	0011      	movs	r1, r2
   16168:	6023      	str	r3, [r4, #0]
   1616a:	f7f0 fd75 	bl	6c58 <_fstat>
   1616e:	1c43      	adds	r3, r0, #1
   16170:	d000      	beq.n	16174 <_fstat_r+0x18>
   16172:	bd70      	pop	{r4, r5, r6, pc}
   16174:	6823      	ldr	r3, [r4, #0]
   16176:	2b00      	cmp	r3, #0
   16178:	d0fb      	beq.n	16172 <_fstat_r+0x16>
   1617a:	602b      	str	r3, [r5, #0]
   1617c:	e7f9      	b.n	16172 <_fstat_r+0x16>
   1617e:	46c0      	nop			; (mov r8, r8)
   16180:	20001920 	.word	0x20001920

00016184 <_isatty_r>:
   16184:	2300      	movs	r3, #0
   16186:	b570      	push	{r4, r5, r6, lr}
   16188:	4c06      	ldr	r4, [pc, #24]	; (161a4 <_isatty_r+0x20>)
   1618a:	0005      	movs	r5, r0
   1618c:	0008      	movs	r0, r1
   1618e:	6023      	str	r3, [r4, #0]
   16190:	f7f0 fd70 	bl	6c74 <_isatty>
   16194:	1c43      	adds	r3, r0, #1
   16196:	d000      	beq.n	1619a <_isatty_r+0x16>
   16198:	bd70      	pop	{r4, r5, r6, pc}
   1619a:	6823      	ldr	r3, [r4, #0]
   1619c:	2b00      	cmp	r3, #0
   1619e:	d0fb      	beq.n	16198 <_isatty_r+0x14>
   161a0:	602b      	str	r3, [r5, #0]
   161a2:	e7f9      	b.n	16198 <_isatty_r+0x14>
   161a4:	20001920 	.word	0x20001920

000161a8 <_lseek_r>:
   161a8:	b570      	push	{r4, r5, r6, lr}
   161aa:	0005      	movs	r5, r0
   161ac:	0008      	movs	r0, r1
   161ae:	0011      	movs	r1, r2
   161b0:	2200      	movs	r2, #0
   161b2:	4c06      	ldr	r4, [pc, #24]	; (161cc <_lseek_r+0x24>)
   161b4:	6022      	str	r2, [r4, #0]
   161b6:	001a      	movs	r2, r3
   161b8:	f7f0 fd65 	bl	6c86 <_lseek>
   161bc:	1c43      	adds	r3, r0, #1
   161be:	d000      	beq.n	161c2 <_lseek_r+0x1a>
   161c0:	bd70      	pop	{r4, r5, r6, pc}
   161c2:	6823      	ldr	r3, [r4, #0]
   161c4:	2b00      	cmp	r3, #0
   161c6:	d0fb      	beq.n	161c0 <_lseek_r+0x18>
   161c8:	602b      	str	r3, [r5, #0]
   161ca:	e7f9      	b.n	161c0 <_lseek_r+0x18>
   161cc:	20001920 	.word	0x20001920

000161d0 <_read_r>:
   161d0:	b570      	push	{r4, r5, r6, lr}
   161d2:	0005      	movs	r5, r0
   161d4:	0008      	movs	r0, r1
   161d6:	0011      	movs	r1, r2
   161d8:	2200      	movs	r2, #0
   161da:	4c06      	ldr	r4, [pc, #24]	; (161f4 <_read_r+0x24>)
   161dc:	6022      	str	r2, [r4, #0]
   161de:	001a      	movs	r2, r3
   161e0:	f7f0 fcb2 	bl	6b48 <_read>
   161e4:	1c43      	adds	r3, r0, #1
   161e6:	d000      	beq.n	161ea <_read_r+0x1a>
   161e8:	bd70      	pop	{r4, r5, r6, pc}
   161ea:	6823      	ldr	r3, [r4, #0]
   161ec:	2b00      	cmp	r3, #0
   161ee:	d0fb      	beq.n	161e8 <_read_r+0x18>
   161f0:	602b      	str	r3, [r5, #0]
   161f2:	e7f9      	b.n	161e8 <_read_r+0x18>
   161f4:	20001920 	.word	0x20001920

000161f8 <__swbuf_r>:
   161f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161fa:	0006      	movs	r6, r0
   161fc:	000d      	movs	r5, r1
   161fe:	0014      	movs	r4, r2
   16200:	2800      	cmp	r0, #0
   16202:	d002      	beq.n	1620a <__swbuf_r+0x12>
   16204:	6b83      	ldr	r3, [r0, #56]	; 0x38
   16206:	2b00      	cmp	r3, #0
   16208:	d04e      	beq.n	162a8 <__swbuf_r+0xb0>
   1620a:	69a3      	ldr	r3, [r4, #24]
   1620c:	60a3      	str	r3, [r4, #8]
   1620e:	230c      	movs	r3, #12
   16210:	5ee0      	ldrsh	r0, [r4, r3]
   16212:	b281      	uxth	r1, r0
   16214:	070b      	lsls	r3, r1, #28
   16216:	d53c      	bpl.n	16292 <__swbuf_r+0x9a>
   16218:	6923      	ldr	r3, [r4, #16]
   1621a:	2b00      	cmp	r3, #0
   1621c:	d039      	beq.n	16292 <__swbuf_r+0x9a>
   1621e:	22ff      	movs	r2, #255	; 0xff
   16220:	b2ef      	uxtb	r7, r5
   16222:	4015      	ands	r5, r2
   16224:	2280      	movs	r2, #128	; 0x80
   16226:	0192      	lsls	r2, r2, #6
   16228:	4211      	tst	r1, r2
   1622a:	d015      	beq.n	16258 <__swbuf_r+0x60>
   1622c:	6822      	ldr	r2, [r4, #0]
   1622e:	6961      	ldr	r1, [r4, #20]
   16230:	1ad3      	subs	r3, r2, r3
   16232:	428b      	cmp	r3, r1
   16234:	da1b      	bge.n	1626e <__swbuf_r+0x76>
   16236:	3301      	adds	r3, #1
   16238:	68a1      	ldr	r1, [r4, #8]
   1623a:	3901      	subs	r1, #1
   1623c:	60a1      	str	r1, [r4, #8]
   1623e:	1c51      	adds	r1, r2, #1
   16240:	6021      	str	r1, [r4, #0]
   16242:	7017      	strb	r7, [r2, #0]
   16244:	6962      	ldr	r2, [r4, #20]
   16246:	429a      	cmp	r2, r3
   16248:	d01a      	beq.n	16280 <__swbuf_r+0x88>
   1624a:	89a3      	ldrh	r3, [r4, #12]
   1624c:	07db      	lsls	r3, r3, #31
   1624e:	d501      	bpl.n	16254 <__swbuf_r+0x5c>
   16250:	2d0a      	cmp	r5, #10
   16252:	d015      	beq.n	16280 <__swbuf_r+0x88>
   16254:	0028      	movs	r0, r5
   16256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16258:	4302      	orrs	r2, r0
   1625a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1625c:	81a2      	strh	r2, [r4, #12]
   1625e:	4a14      	ldr	r2, [pc, #80]	; (162b0 <__swbuf_r+0xb8>)
   16260:	400a      	ands	r2, r1
   16262:	6662      	str	r2, [r4, #100]	; 0x64
   16264:	6961      	ldr	r1, [r4, #20]
   16266:	6822      	ldr	r2, [r4, #0]
   16268:	1ad3      	subs	r3, r2, r3
   1626a:	428b      	cmp	r3, r1
   1626c:	dbe3      	blt.n	16236 <__swbuf_r+0x3e>
   1626e:	0021      	movs	r1, r4
   16270:	0030      	movs	r0, r6
   16272:	f7fe f86b 	bl	1434c <_fflush_r>
   16276:	2800      	cmp	r0, #0
   16278:	d108      	bne.n	1628c <__swbuf_r+0x94>
   1627a:	6822      	ldr	r2, [r4, #0]
   1627c:	2301      	movs	r3, #1
   1627e:	e7db      	b.n	16238 <__swbuf_r+0x40>
   16280:	0021      	movs	r1, r4
   16282:	0030      	movs	r0, r6
   16284:	f7fe f862 	bl	1434c <_fflush_r>
   16288:	2800      	cmp	r0, #0
   1628a:	d0e3      	beq.n	16254 <__swbuf_r+0x5c>
   1628c:	2501      	movs	r5, #1
   1628e:	426d      	negs	r5, r5
   16290:	e7e0      	b.n	16254 <__swbuf_r+0x5c>
   16292:	0021      	movs	r1, r4
   16294:	0030      	movs	r0, r6
   16296:	f7fc fec5 	bl	13024 <__swsetup_r>
   1629a:	2800      	cmp	r0, #0
   1629c:	d1f6      	bne.n	1628c <__swbuf_r+0x94>
   1629e:	230c      	movs	r3, #12
   162a0:	5ee0      	ldrsh	r0, [r4, r3]
   162a2:	6923      	ldr	r3, [r4, #16]
   162a4:	b281      	uxth	r1, r0
   162a6:	e7ba      	b.n	1621e <__swbuf_r+0x26>
   162a8:	f7fe f8aa 	bl	14400 <__sinit>
   162ac:	e7ad      	b.n	1620a <__swbuf_r+0x12>
   162ae:	46c0      	nop			; (mov r8, r8)
   162b0:	ffffdfff 	.word	0xffffdfff

000162b4 <_wcrtomb_r>:
   162b4:	b570      	push	{r4, r5, r6, lr}
   162b6:	001d      	movs	r5, r3
   162b8:	4b11      	ldr	r3, [pc, #68]	; (16300 <_wcrtomb_r+0x4c>)
   162ba:	b084      	sub	sp, #16
   162bc:	681b      	ldr	r3, [r3, #0]
   162be:	0004      	movs	r4, r0
   162c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   162c2:	2900      	cmp	r1, #0
   162c4:	d00e      	beq.n	162e4 <_wcrtomb_r+0x30>
   162c6:	2b00      	cmp	r3, #0
   162c8:	d016      	beq.n	162f8 <_wcrtomb_r+0x44>
   162ca:	20e0      	movs	r0, #224	; 0xe0
   162cc:	581e      	ldr	r6, [r3, r0]
   162ce:	002b      	movs	r3, r5
   162d0:	0020      	movs	r0, r4
   162d2:	47b0      	blx	r6
   162d4:	1c43      	adds	r3, r0, #1
   162d6:	d103      	bne.n	162e0 <_wcrtomb_r+0x2c>
   162d8:	2300      	movs	r3, #0
   162da:	602b      	str	r3, [r5, #0]
   162dc:	338a      	adds	r3, #138	; 0x8a
   162de:	6023      	str	r3, [r4, #0]
   162e0:	b004      	add	sp, #16
   162e2:	bd70      	pop	{r4, r5, r6, pc}
   162e4:	2b00      	cmp	r3, #0
   162e6:	d009      	beq.n	162fc <_wcrtomb_r+0x48>
   162e8:	22e0      	movs	r2, #224	; 0xe0
   162ea:	a901      	add	r1, sp, #4
   162ec:	589e      	ldr	r6, [r3, r2]
   162ee:	0020      	movs	r0, r4
   162f0:	002b      	movs	r3, r5
   162f2:	2200      	movs	r2, #0
   162f4:	47b0      	blx	r6
   162f6:	e7ed      	b.n	162d4 <_wcrtomb_r+0x20>
   162f8:	4b02      	ldr	r3, [pc, #8]	; (16304 <_wcrtomb_r+0x50>)
   162fa:	e7e6      	b.n	162ca <_wcrtomb_r+0x16>
   162fc:	4b01      	ldr	r3, [pc, #4]	; (16304 <_wcrtomb_r+0x50>)
   162fe:	e7f3      	b.n	162e8 <_wcrtomb_r+0x34>
   16300:	2000007c 	.word	0x2000007c
   16304:	200004ac 	.word	0x200004ac

00016308 <__aeabi_dcmpun>:
   16308:	b570      	push	{r4, r5, r6, lr}
   1630a:	4e0e      	ldr	r6, [pc, #56]	; (16344 <__aeabi_dcmpun+0x3c>)
   1630c:	030d      	lsls	r5, r1, #12
   1630e:	031c      	lsls	r4, r3, #12
   16310:	0049      	lsls	r1, r1, #1
   16312:	005b      	lsls	r3, r3, #1
   16314:	0b2d      	lsrs	r5, r5, #12
   16316:	0d49      	lsrs	r1, r1, #21
   16318:	0b24      	lsrs	r4, r4, #12
   1631a:	0d5b      	lsrs	r3, r3, #21
   1631c:	42b1      	cmp	r1, r6
   1631e:	d004      	beq.n	1632a <__aeabi_dcmpun+0x22>
   16320:	4908      	ldr	r1, [pc, #32]	; (16344 <__aeabi_dcmpun+0x3c>)
   16322:	2000      	movs	r0, #0
   16324:	428b      	cmp	r3, r1
   16326:	d008      	beq.n	1633a <__aeabi_dcmpun+0x32>
   16328:	bd70      	pop	{r4, r5, r6, pc}
   1632a:	4305      	orrs	r5, r0
   1632c:	2001      	movs	r0, #1
   1632e:	2d00      	cmp	r5, #0
   16330:	d1fa      	bne.n	16328 <__aeabi_dcmpun+0x20>
   16332:	4904      	ldr	r1, [pc, #16]	; (16344 <__aeabi_dcmpun+0x3c>)
   16334:	2000      	movs	r0, #0
   16336:	428b      	cmp	r3, r1
   16338:	d1f6      	bne.n	16328 <__aeabi_dcmpun+0x20>
   1633a:	4314      	orrs	r4, r2
   1633c:	0020      	movs	r0, r4
   1633e:	1e44      	subs	r4, r0, #1
   16340:	41a0      	sbcs	r0, r4
   16342:	e7f1      	b.n	16328 <__aeabi_dcmpun+0x20>
   16344:	000007ff 	.word	0x000007ff
   16348:	00000460 	.word	0x00000460
   1634c:	0000046e 	.word	0x0000046e
   16350:	0000047c 	.word	0x0000047c
   16354:	0000048a 	.word	0x0000048a
   16358:	00000498 	.word	0x00000498
   1635c:	0000ffff 	.word	0x0000ffff
   16360:	0000ffff 	.word	0x0000ffff
   16364:	00000004 	.word	0x00000004
   16368:	00000005 	.word	0x00000005
   1636c:	00000006 	.word	0x00000006
   16370:	00000007 	.word	0x00000007
   16374:	00000020 	.word	0x00000020
   16378:	0000ffff 	.word	0x0000ffff
   1637c:	00000022 	.word	0x00000022
   16380:	00000023 	.word	0x00000023
   16384:	0000ffff 	.word	0x0000ffff
   16388:	0000ffff 	.word	0x0000ffff
   1638c:	0000ffff 	.word	0x0000ffff
   16390:	0000ffff 	.word	0x0000ffff
   16394:	00000008 	.word	0x00000008
   16398:	00000009 	.word	0x00000009
   1639c:	0000000a 	.word	0x0000000a
   163a0:	0000000b 	.word	0x0000000b
   163a4:	0000ffff 	.word	0x0000ffff
   163a8:	0000ffff 	.word	0x0000ffff
   163ac:	0000ffff 	.word	0x0000ffff
   163b0:	0000ffff 	.word	0x0000ffff
   163b4:	00000848 	.word	0x00000848
   163b8:	0000084e 	.word	0x0000084e
   163bc:	0000084e 	.word	0x0000084e
   163c0:	0000084e 	.word	0x0000084e
   163c4:	0000084e 	.word	0x0000084e
   163c8:	0000084e 	.word	0x0000084e
   163cc:	0000084e 	.word	0x0000084e
   163d0:	0000084e 	.word	0x0000084e
   163d4:	0000084e 	.word	0x0000084e
   163d8:	0000084e 	.word	0x0000084e
   163dc:	0000084e 	.word	0x0000084e
   163e0:	0000084e 	.word	0x0000084e
   163e4:	0000084e 	.word	0x0000084e
   163e8:	0000084e 	.word	0x0000084e
   163ec:	0000084e 	.word	0x0000084e
   163f0:	0000084e 	.word	0x0000084e
   163f4:	00000826 	.word	0x00000826
   163f8:	0000084e 	.word	0x0000084e
   163fc:	0000084e 	.word	0x0000084e
   16400:	0000084e 	.word	0x0000084e
   16404:	0000084e 	.word	0x0000084e
   16408:	0000084e 	.word	0x0000084e
   1640c:	0000084e 	.word	0x0000084e
   16410:	0000084e 	.word	0x0000084e
   16414:	0000084e 	.word	0x0000084e
   16418:	0000084e 	.word	0x0000084e
   1641c:	0000084e 	.word	0x0000084e
   16420:	0000084e 	.word	0x0000084e
   16424:	0000084e 	.word	0x0000084e
   16428:	0000084e 	.word	0x0000084e
   1642c:	0000084e 	.word	0x0000084e
   16430:	0000084e 	.word	0x0000084e
   16434:	00000842 	.word	0x00000842
   16438:	0000084e 	.word	0x0000084e
   1643c:	0000084e 	.word	0x0000084e
   16440:	0000084e 	.word	0x0000084e
   16444:	0000084e 	.word	0x0000084e
   16448:	0000084e 	.word	0x0000084e
   1644c:	0000084e 	.word	0x0000084e
   16450:	0000084e 	.word	0x0000084e
   16454:	0000084e 	.word	0x0000084e
   16458:	0000084e 	.word	0x0000084e
   1645c:	0000084e 	.word	0x0000084e
   16460:	0000084e 	.word	0x0000084e
   16464:	0000084e 	.word	0x0000084e
   16468:	0000084e 	.word	0x0000084e
   1646c:	0000084e 	.word	0x0000084e
   16470:	0000084e 	.word	0x0000084e
   16474:	0000083c 	.word	0x0000083c
   16478:	000007e4 	.word	0x000007e4
   1647c:	000007fa 	.word	0x000007fa
   16480:	00000810 	.word	0x00000810
   16484:	000007ca 	.word	0x000007ca
   16488:	00000ef4 	.word	0x00000ef4
   1648c:	00000f02 	.word	0x00000f02
   16490:	00000f10 	.word	0x00000f10
   16494:	00000f1e 	.word	0x00000f1e
   16498:	00000f2c 	.word	0x00000f2c
   1649c:	000012e4 	.word	0x000012e4
   164a0:	000012f2 	.word	0x000012f2
   164a4:	00001300 	.word	0x00001300
   164a8:	0000130e 	.word	0x0000130e
   164ac:	0000131c 	.word	0x0000131c
   164b0:	00001770 	.word	0x00001770
   164b4:	0000177e 	.word	0x0000177e
   164b8:	0000178c 	.word	0x0000178c
   164bc:	0000179a 	.word	0x0000179a
   164c0:	000017a8 	.word	0x000017a8
   164c4:	00001a10 	.word	0x00001a10
   164c8:	00001a1e 	.word	0x00001a1e
   164cc:	00001a2c 	.word	0x00001a2c
   164d0:	00001a3a 	.word	0x00001a3a
   164d4:	00001a48 	.word	0x00001a48
   164d8:	0000209c 	.word	0x0000209c
   164dc:	000020aa 	.word	0x000020aa
   164e0:	000020b8 	.word	0x000020b8
   164e4:	000020c6 	.word	0x000020c6
   164e8:	000020d4 	.word	0x000020d4
   164ec:	42000000 	.word	0x42000000
   164f0:	42000400 	.word	0x42000400
   164f4:	42000800 	.word	0x42000800
   164f8:	42000c00 	.word	0x42000c00
   164fc:	42001000 	.word	0x42001000
   16500:	43000400 	.word	0x43000400
   16504:	0b0a0908 	.word	0x0b0a0908
   16508:	00000d0c 	.word	0x00000d0c
   1650c:	00003bfc 	.word	0x00003bfc
   16510:	00003c0a 	.word	0x00003c0a
   16514:	00003c18 	.word	0x00003c18
   16518:	00003c26 	.word	0x00003c26
   1651c:	00003c34 	.word	0x00003c34
   16520:	000043bc 	.word	0x000043bc
   16524:	000043ca 	.word	0x000043ca
   16528:	000043d8 	.word	0x000043d8
   1652c:	000043e6 	.word	0x000043e6
   16530:	000043f4 	.word	0x000043f4
   16534:	0000534a 	.word	0x0000534a
   16538:	000053c4 	.word	0x000053c4
   1653c:	000053c4 	.word	0x000053c4
   16540:	0000536a 	.word	0x0000536a
   16544:	00005364 	.word	0x00005364
   16548:	00005370 	.word	0x00005370
   1654c:	00005350 	.word	0x00005350
   16550:	00005376 	.word	0x00005376
   16554:	000053aa 	.word	0x000053aa
   16558:	00005680 	.word	0x00005680
   1655c:	000056de 	.word	0x000056de
   16560:	000056de 	.word	0x000056de
   16564:	000056da 	.word	0x000056da
   16568:	00005672 	.word	0x00005672
   1656c:	00005692 	.word	0x00005692
   16570:	0000565e 	.word	0x0000565e
   16574:	000056a0 	.word	0x000056a0
   16578:	000056b2 	.word	0x000056b2
   1657c:	0000573e 	.word	0x0000573e
   16580:	0000578e 	.word	0x0000578e
   16584:	0000578e 	.word	0x0000578e
   16588:	0000578e 	.word	0x0000578e
   1658c:	00005730 	.word	0x00005730
   16590:	00005750 	.word	0x00005750
   16594:	0000571e 	.word	0x0000571e
   16598:	0000575e 	.word	0x0000575e
   1659c:	00005778 	.word	0x00005778
   165a0:	000057fe 	.word	0x000057fe
   165a4:	00005864 	.word	0x00005864
   165a8:	00005864 	.word	0x00005864
   165ac:	00005860 	.word	0x00005860
   165b0:	000057e6 	.word	0x000057e6
   165b4:	00005816 	.word	0x00005816
   165b8:	000057ce 	.word	0x000057ce
   165bc:	0000582e 	.word	0x0000582e
   165c0:	00005848 	.word	0x00005848
   165c4:	00005b4c 	.word	0x00005b4c
   165c8:	00005b5a 	.word	0x00005b5a
   165cc:	00005b68 	.word	0x00005b68
   165d0:	00005b76 	.word	0x00005b76
   165d4:	00005b84 	.word	0x00005b84
   165d8:	0000636c 	.word	0x0000636c
   165dc:	0000637a 	.word	0x0000637a
   165e0:	00006388 	.word	0x00006388
   165e4:	00006396 	.word	0x00006396
   165e8:	000063a4 	.word	0x000063a4
   165ec:	42002000 	.word	0x42002000
   165f0:	42002400 	.word	0x42002400
   165f4:	42002800 	.word	0x42002800
   165f8:	42002c00 	.word	0x42002c00
   165fc:	43000800 	.word	0x43000800
   16600:	1c1c1b1b 	.word	0x1c1c1b1b
   16604:	0000001d 	.word	0x0000001d
   16608:	00000002 	.word	0x00000002
   1660c:	00000100 	.word	0x00000100
   16610:	00000002 	.word	0x00000002
   16614:	00000200 	.word	0x00000200
   16618:	00000002 	.word	0x00000002
   1661c:	00000400 	.word	0x00000400
   16620:	00000002 	.word	0x00000002
   16624:	00000800 	.word	0x00000800
   16628:	00000003 	.word	0x00000003
   1662c:	00000004 	.word	0x00000004
   16630:	74636146 	.word	0x74636146
   16634:	4479726f 	.word	0x4479726f
   16638:	75616665 	.word	0x75616665
   1663c:	6552746c 	.word	0x6552746c
   16640:	00746573 	.word	0x00746573
   16644:	36385545 	.word	0x36385545
   16648:	00000038 	.word	0x00000038
   1664c:	3139414e 	.word	0x3139414e
   16650:	00000035 	.word	0x00000035
   16654:	31395541 	.word	0x31395541
   16658:	00000035 	.word	0x00000035
   1665c:	32395341 	.word	0x32395341
   16660:	00000033 	.word	0x00000033
   16664:	394e504a 	.word	0x394e504a
   16668:	00003332 	.word	0x00003332
   1666c:	3239524b 	.word	0x3239524b
   16670:	00000030 	.word	0x00000030
   16674:	38444e49 	.word	0x38444e49
   16678:	00003536 	.word	0x00003536
   1667c:	61656c43 	.word	0x61656c43
   16680:	44502072 	.word	0x44502072
   16684:	00000053 	.word	0x00000053
   16688:	65736552 	.word	0x65736552
   1668c:	6f422074 	.word	0x6f422074
   16690:	00647261 	.word	0x00647261
   16694:	6f727245 	.word	0x6f727245
   16698:	54532072 	.word	0x54532072
   1669c:	20455441 	.word	0x20455441
   166a0:	65746e45 	.word	0x65746e45
   166a4:	0d646572 	.word	0x0d646572
   166a8:	00000000 	.word	0x00000000
   166ac:	0000000d 	.word	0x0000000d
   166b0:	61656c50 	.word	0x61656c50
   166b4:	65206573 	.word	0x65206573
   166b8:	7265746e 	.word	0x7265746e
   166bc:	76206120 	.word	0x76206120
   166c0:	64696c61 	.word	0x64696c61
   166c4:	6f686320 	.word	0x6f686320
   166c8:	0d656369 	.word	0x0d656369
   166cc:	00000000 	.word	0x00000000
   166d0:	44500a0d 	.word	0x44500a0d
   166d4:	65525f53 	.word	0x65525f53
   166d8:	726f7473 	.word	0x726f7473
   166dc:	6f697461 	.word	0x6f697461
   166e0:	6174536e 	.word	0x6174536e
   166e4:	3a737574 	.word	0x3a737574
   166e8:	63755320 	.word	0x63755320
   166ec:	73736563 	.word	0x73736563
   166f0:	0000000d 	.word	0x0000000d
   166f4:	6e696f6a 	.word	0x6e696f6a
   166f8:	74617453 	.word	0x74617453
   166fc:	203a7375 	.word	0x203a7375
   16700:	6e696f4a 	.word	0x6e696f4a
   16704:	000d6465 	.word	0x000d6465
   16708:	6e696f4a 	.word	0x6e696f4a
   1670c:	74617453 	.word	0x74617453
   16710:	3a207375 	.word	0x3a207375
   16714:	6e654420 	.word	0x6e654420
   16718:	0d646569 	.word	0x0d646569
   1671c:	00000000 	.word	0x00000000
   16720:	646e6142 	.word	0x646e6142
   16724:	7325203a 	.word	0x7325203a
   16728:	00000a0d 	.word	0x00000a0d
   1672c:	74736552 	.word	0x74736552
   16730:	7461726f 	.word	0x7461726f
   16734:	206e6f69 	.word	0x206e6f69
   16738:	6c696166 	.word	0x6c696166
   1673c:	000d6465 	.word	0x000d6465
   16740:	696f4a0a 	.word	0x696f4a0a
   16744:	6552206e 	.word	0x6552206e
   16748:	73657571 	.word	0x73657571
   1674c:	65532074 	.word	0x65532074
   16750:	0d0a746e 	.word	0x0d0a746e
   16754:	00000000 	.word	0x00000000
   16758:	69766544 	.word	0x69766544
   1675c:	6e206563 	.word	0x6e206563
   16760:	6a20746f 	.word	0x6a20746f
   16764:	656e696f 	.word	0x656e696f
   16768:	6f742064 	.word	0x6f742064
   1676c:	65687420 	.word	0x65687420
   16770:	74656e20 	.word	0x74656e20
   16774:	6b726f77 	.word	0x6b726f77
   16778:	0000000d 	.word	0x0000000d
   1677c:	6c730a0d 	.word	0x6c730a0d
   16780:	5f706565 	.word	0x5f706565
   16784:	5f746f6e 	.word	0x5f746f6e
   16788:	000d6b6f 	.word	0x000d6b6f
   1678c:	61766e49 	.word	0x61766e49
   16790:	2064696c 	.word	0x2064696c
   16794:	696f6863 	.word	0x696f6863
   16798:	65206563 	.word	0x65206563
   1679c:	7265746e 	.word	0x7265746e
   167a0:	000d6465 	.word	0x000d6465
   167a4:	20746f4e 	.word	0x20746f4e
   167a8:	61762061 	.word	0x61762061
   167ac:	2064696c 	.word	0x2064696c
   167b0:	69676572 	.word	0x69676572
   167b4:	6c616e6f 	.word	0x6c616e6f
   167b8:	6e616220 	.word	0x6e616220
   167bc:	68632064 	.word	0x68632064
   167c0:	6563696f 	.word	0x6563696f
   167c4:	0000000d 	.word	0x0000000d
   167c8:	44202e31 	.word	0x44202e31
   167cc:	206f6d65 	.word	0x206f6d65
   167d0:	6c707061 	.word	0x6c707061
   167d4:	74616369 	.word	0x74616369
   167d8:	0d6e6f69 	.word	0x0d6e6f69
   167dc:	00000000 	.word	0x00000000
   167e0:	43202e32 	.word	0x43202e32
   167e4:	69747265 	.word	0x69747265
   167e8:	61636966 	.word	0x61636966
   167ec:	6e6f6974 	.word	0x6e6f6974
   167f0:	70706120 	.word	0x70706120
   167f4:	6163696c 	.word	0x6163696c
   167f8:	6e6f6974 	.word	0x6e6f6974
   167fc:	0000000d 	.word	0x0000000d
   16800:	53200a0d 	.word	0x53200a0d
   16804:	63656c65 	.word	0x63656c65
   16808:	70412074 	.word	0x70412074
   1680c:	63696c70 	.word	0x63696c70
   16810:	6f697461 	.word	0x6f697461
   16814:	203a206e 	.word	0x203a206e
   16818:	00000000 	.word	0x00000000
   1681c:	2e310a0d 	.word	0x2e310a0d
   16820:	6e655320 	.word	0x6e655320
   16824:	6f4a2064 	.word	0x6f4a2064
   16828:	52206e69 	.word	0x52206e69
   1682c:	65757165 	.word	0x65757165
   16830:	000d7473 	.word	0x000d7473
   16834:	53202e32 	.word	0x53202e32
   16838:	20646e65 	.word	0x20646e65
   1683c:	61746144 	.word	0x61746144
   16840:	0000000d 	.word	0x0000000d
   16844:	53202e33 	.word	0x53202e33
   16848:	7065656c 	.word	0x7065656c
   1684c:	0000000d 	.word	0x0000000d
   16850:	4d202e34 	.word	0x4d202e34
   16854:	206e6961 	.word	0x206e6961
   16858:	756e654d 	.word	0x756e654d
   1685c:	0000000d 	.word	0x0000000d
   16860:	6e450a0d 	.word	0x6e450a0d
   16864:	20726574 	.word	0x20726574
   16868:	72756f79 	.word	0x72756f79
   1686c:	6f686320 	.word	0x6f686320
   16870:	3a656369 	.word	0x3a656369
   16874:	00000020 	.word	0x00000020
   16878:	6c500a0d 	.word	0x6c500a0d
   1687c:	65736165 	.word	0x65736165
   16880:	6c657320 	.word	0x6c657320
   16884:	20746365 	.word	0x20746365
   16888:	20656e6f 	.word	0x20656e6f
   1688c:	7420666f 	.word	0x7420666f
   16890:	62206568 	.word	0x62206568
   16894:	20646e61 	.word	0x20646e61
   16898:	65766967 	.word	0x65766967
   1689c:	6562206e 	.word	0x6562206e
   168a0:	0d776f6c 	.word	0x0d776f6c
   168a4:	00000000 	.word	0x00000000
   168a8:	202e6425 	.word	0x202e6425
   168ac:	0a0d7325 	.word	0x0a0d7325
   168b0:	00000000 	.word	0x00000000
   168b4:	656c6553 	.word	0x656c6553
   168b8:	52207463 	.word	0x52207463
   168bc:	6f696765 	.word	0x6f696765
   168c0:	206c616e 	.word	0x206c616e
   168c4:	646e6142 	.word	0x646e6142
   168c8:	00203a20 	.word	0x00203a20
   168cc:	2a0d0a0a 	.word	0x2a0d0a0a
   168d0:	2a2a2a2a 	.word	0x2a2a2a2a
   168d4:	2a2a2a2a 	.word	0x2a2a2a2a
   168d8:	2a2a2a2a 	.word	0x2a2a2a2a
   168dc:	2a2a2a2a 	.word	0x2a2a2a2a
   168e0:	2a2a2a2a 	.word	0x2a2a2a2a
   168e4:	2a2a2a2a 	.word	0x2a2a2a2a
   168e8:	2a2a2a2a 	.word	0x2a2a2a2a
   168ec:	2a2a2a2a 	.word	0x2a2a2a2a
   168f0:	2a2a2a2a 	.word	0x2a2a2a2a
   168f4:	2a2a2a2a 	.word	0x2a2a2a2a
   168f8:	2a2a2a2a 	.word	0x2a2a2a2a
   168fc:	2a2a2a2a 	.word	0x2a2a2a2a
   16900:	2a2a2a2a 	.word	0x2a2a2a2a
   16904:	0d0a2a2a 	.word	0x0d0a2a2a
   16908:	00000000 	.word	0x00000000
   1690c:	5f534c4d 	.word	0x5f534c4d
   16910:	5f4b4453 	.word	0x5f4b4453
   16914:	5f305f31 	.word	0x5f305f31
   16918:	00355f50 	.word	0x00355f50
   1691c:	694d0d0a 	.word	0x694d0d0a
   16920:	636f7263 	.word	0x636f7263
   16924:	20706968 	.word	0x20706968
   16928:	61526f4c 	.word	0x61526f4c
   1692c:	204e4157 	.word	0x204e4157
   16930:	63617453 	.word	0x63617453
   16934:	7325206b 	.word	0x7325206b
   16938:	00000a0d 	.word	0x00000a0d
   1693c:	6e490a0d 	.word	0x6e490a0d
   16940:	2d207469 	.word	0x2d207469
   16944:	63755320 	.word	0x63755320
   16948:	73736563 	.word	0x73736563
   1694c:	0d6c7566 	.word	0x0d6c7566
   16950:	00000000 	.word	0x00000000
   16954:	7473614c 	.word	0x7473614c
   16958:	6e6f6320 	.word	0x6e6f6320
   1695c:	75676966 	.word	0x75676966
   16960:	20646572 	.word	0x20646572
   16964:	69676552 	.word	0x69676552
   16968:	6c616e6f 	.word	0x6c616e6f
   1696c:	6e616220 	.word	0x6e616220
   16970:	73252064 	.word	0x73252064
   16974:	00000a0d 	.word	0x00000a0d
   16978:	73657250 	.word	0x73657250
   1697c:	6e612073 	.word	0x6e612073
   16980:	656b2079 	.word	0x656b2079
   16984:	6f742079 	.word	0x6f742079
   16988:	61686320 	.word	0x61686320
   1698c:	2065676e 	.word	0x2065676e
   16990:	646e6162 	.word	0x646e6162
   16994:	43200a0d 	.word	0x43200a0d
   16998:	69746e6f 	.word	0x69746e6f
   1699c:	6e69756e 	.word	0x6e69756e
   169a0:	6e692067 	.word	0x6e692067
   169a4:	20732520 	.word	0x20732520
   169a8:	00206e69 	.word	0x00206e69
   169ac:	202a2a2a 	.word	0x202a2a2a
   169b0:	65636552 	.word	0x65636552
   169b4:	64657669 	.word	0x64657669
   169b8:	204c4420 	.word	0x204c4420
   169bc:	61746144 	.word	0x61746144
   169c0:	2a2a2a20 	.word	0x2a2a2a20
   169c4:	00000d0a 	.word	0x00000d0a
   169c8:	6172460a 	.word	0x6172460a
   169cc:	5220656d 	.word	0x5220656d
   169d0:	69656365 	.word	0x69656365
   169d4:	20646576 	.word	0x20646576
   169d8:	70207461 	.word	0x70207461
   169dc:	2074726f 	.word	0x2074726f
   169e0:	0d0a6425 	.word	0x0d0a6425
   169e4:	00000000 	.word	0x00000000
   169e8:	6172460a 	.word	0x6172460a
   169ec:	4c20656d 	.word	0x4c20656d
   169f0:	74676e65 	.word	0x74676e65
   169f4:	202d2068 	.word	0x202d2068
   169f8:	0d0a6425 	.word	0x0d0a6425
   169fc:	00000000 	.word	0x00000000
   16a00:	6464410a 	.word	0x6464410a
   16a04:	73736572 	.word	0x73736572
   16a08:	30202d20 	.word	0x30202d20
   16a0c:	786c2578 	.word	0x786c2578
   16a10:	00000d0a 	.word	0x00000d0a
   16a14:	7961500a 	.word	0x7961500a
   16a18:	64616f6c 	.word	0x64616f6c
   16a1c:	0000203a 	.word	0x0000203a
   16a20:	00007825 	.word	0x00007825
   16a24:	2a2a0a0d 	.word	0x2a2a0a0d
   16a28:	2a2a2a2a 	.word	0x2a2a2a2a
   16a2c:	2a2a2a2a 	.word	0x2a2a2a2a
   16a30:	2a2a2a2a 	.word	0x2a2a2a2a
   16a34:	2a2a2a2a 	.word	0x2a2a2a2a
   16a38:	2a2a2a2a 	.word	0x2a2a2a2a
   16a3c:	0d2a2a2a 	.word	0x0d2a2a2a
   16a40:	00000000 	.word	0x00000000
   16a44:	65636552 	.word	0x65636552
   16a48:	64657669 	.word	0x64657669
   16a4c:	4b434120 	.word	0x4b434120
   16a50:	726f6620 	.word	0x726f6620
   16a54:	6e6f4320 	.word	0x6e6f4320
   16a58:	6d726966 	.word	0x6d726966
   16a5c:	64206465 	.word	0x64206465
   16a60:	0d617461 	.word	0x0d617461
   16a64:	00000000 	.word	0x00000000
   16a68:	41520d0a 	.word	0x41520d0a
   16a6c:	5f4f4944 	.word	0x5f4f4944
   16a70:	445f4f4e 	.word	0x445f4f4e
   16a74:	20415441 	.word	0x20415441
   16a78:	00000d0a 	.word	0x00000d0a
   16a7c:	41520d0a 	.word	0x41520d0a
   16a80:	5f4f4944 	.word	0x5f4f4944
   16a84:	41544144 	.word	0x41544144
   16a88:	5a49535f 	.word	0x5a49535f
   16a8c:	0d0a2045 	.word	0x0d0a2045
   16a90:	00000000 	.word	0x00000000
   16a94:	41520d0a 	.word	0x41520d0a
   16a98:	5f4f4944 	.word	0x5f4f4944
   16a9c:	41564e49 	.word	0x41564e49
   16aa0:	5f44494c 	.word	0x5f44494c
   16aa4:	20514552 	.word	0x20514552
   16aa8:	00000d0a 	.word	0x00000d0a
   16aac:	41520d0a 	.word	0x41520d0a
   16ab0:	5f4f4944 	.word	0x5f4f4944
   16ab4:	59535542 	.word	0x59535542
   16ab8:	000d0a20 	.word	0x000d0a20
   16abc:	41520d0a 	.word	0x41520d0a
   16ac0:	5f4f4944 	.word	0x5f4f4944
   16ac4:	5f54554f 	.word	0x5f54554f
   16ac8:	525f464f 	.word	0x525f464f
   16acc:	45474e41 	.word	0x45474e41
   16ad0:	000d0a20 	.word	0x000d0a20
   16ad4:	41520d0a 	.word	0x41520d0a
   16ad8:	5f4f4944 	.word	0x5f4f4944
   16adc:	55534e55 	.word	0x55534e55
   16ae0:	524f5050 	.word	0x524f5050
   16ae4:	5f444554 	.word	0x5f444554
   16ae8:	52545441 	.word	0x52545441
   16aec:	000d0a20 	.word	0x000d0a20
   16af0:	41520d0a 	.word	0x41520d0a
   16af4:	5f4f4944 	.word	0x5f4f4944
   16af8:	4e414843 	.word	0x4e414843
   16afc:	5f4c454e 	.word	0x5f4c454e
   16b00:	59535542 	.word	0x59535542
   16b04:	000d0a20 	.word	0x000d0a20
   16b08:	574e0d0a 	.word	0x574e0d0a
   16b0c:	4f4e5f4b 	.word	0x4f4e5f4b
   16b10:	4f4a5f54 	.word	0x4f4a5f54
   16b14:	44454e49 	.word	0x44454e49
   16b18:	000d0a20 	.word	0x000d0a20
   16b1c:	4e490d0a 	.word	0x4e490d0a
   16b20:	494c4156 	.word	0x494c4156
   16b24:	41505f44 	.word	0x41505f44
   16b28:	454d4152 	.word	0x454d4152
   16b2c:	20524554 	.word	0x20524554
   16b30:	00000d0a 	.word	0x00000d0a
   16b34:	454b0d0a 	.word	0x454b0d0a
   16b38:	4e5f5359 	.word	0x4e5f5359
   16b3c:	495f544f 	.word	0x495f544f
   16b40:	4954494e 	.word	0x4954494e
   16b44:	5a494c41 	.word	0x5a494c41
   16b48:	0a204445 	.word	0x0a204445
   16b4c:	0000000d 	.word	0x0000000d
   16b50:	49530d0a 	.word	0x49530d0a
   16b54:	544e454c 	.word	0x544e454c
   16b58:	4d4d495f 	.word	0x4d4d495f
   16b5c:	41494445 	.word	0x41494445
   16b60:	594c4554 	.word	0x594c4554
   16b64:	5443415f 	.word	0x5443415f
   16b68:	0a455649 	.word	0x0a455649
   16b6c:	0000000d 	.word	0x0000000d
   16b70:	43460d0a 	.word	0x43460d0a
   16b74:	5f52544e 	.word	0x5f52544e
   16b78:	4f525245 	.word	0x4f525245
   16b7c:	45525f52 	.word	0x45525f52
   16b80:	4e494f4a 	.word	0x4e494f4a
   16b84:	45454e5f 	.word	0x45454e5f
   16b88:	20444544 	.word	0x20444544
   16b8c:	00000d0a 	.word	0x00000d0a
   16b90:	4e490d0a 	.word	0x4e490d0a
   16b94:	494c4156 	.word	0x494c4156
   16b98:	55425f44 	.word	0x55425f44
   16b9c:	52454646 	.word	0x52454646
   16ba0:	4e454c5f 	.word	0x4e454c5f
   16ba4:	20485447 	.word	0x20485447
   16ba8:	00000d0a 	.word	0x00000d0a
   16bac:	414d0d0a 	.word	0x414d0d0a
   16bb0:	41505f43 	.word	0x41505f43
   16bb4:	44455355 	.word	0x44455355
   16bb8:	0d0a2020 	.word	0x0d0a2020
   16bbc:	00000000 	.word	0x00000000
   16bc0:	4f4e0d0a 	.word	0x4f4e0d0a
   16bc4:	4148435f 	.word	0x4148435f
   16bc8:	4c454e4e 	.word	0x4c454e4e
   16bcc:	4f465f53 	.word	0x4f465f53
   16bd0:	20444e55 	.word	0x20444e55
   16bd4:	00000d0a 	.word	0x00000d0a
   16bd8:	55420d0a 	.word	0x55420d0a
   16bdc:	0d0a5953 	.word	0x0d0a5953
   16be0:	00000000 	.word	0x00000000
   16be4:	4f4e0d0a 	.word	0x4f4e0d0a
   16be8:	4b43415f 	.word	0x4b43415f
   16bec:	000d0a20 	.word	0x000d0a20
   16bf0:	4c410d0a 	.word	0x4c410d0a
   16bf4:	44414552 	.word	0x44414552
   16bf8:	4f4a2059 	.word	0x4f4a2059
   16bfc:	4e494e49 	.word	0x4e494e49
   16c00:	53492047 	.word	0x53492047
   16c04:	204e4920 	.word	0x204e4920
   16c08:	474f5250 	.word	0x474f5250
   16c0c:	53534552 	.word	0x53534552
   16c10:	000d0a20 	.word	0x000d0a20
   16c14:	45520d0a 	.word	0x45520d0a
   16c18:	52554f53 	.word	0x52554f53
   16c1c:	555f4543 	.word	0x555f4543
   16c20:	4156414e 	.word	0x4156414e
   16c24:	42414c49 	.word	0x42414c49
   16c28:	0a20454c 	.word	0x0a20454c
   16c2c:	0000000d 	.word	0x0000000d
   16c30:	4e490d0a 	.word	0x4e490d0a
   16c34:	494c4156 	.word	0x494c4156
   16c38:	45525f44 	.word	0x45525f44
   16c3c:	53455551 	.word	0x53455551
   16c40:	0d0a2054 	.word	0x0d0a2054
   16c44:	00000000 	.word	0x00000000
   16c48:	43460d0a 	.word	0x43460d0a
   16c4c:	5f52544e 	.word	0x5f52544e
   16c50:	4f525245 	.word	0x4f525245
   16c54:	0d0a2052 	.word	0x0d0a2052
   16c58:	00000000 	.word	0x00000000
   16c5c:	494d0d0a 	.word	0x494d0d0a
   16c60:	52455f43 	.word	0x52455f43
   16c64:	20524f52 	.word	0x20524f52
   16c68:	00000d0a 	.word	0x00000d0a
   16c6c:	4e490d0a 	.word	0x4e490d0a
   16c70:	494c4156 	.word	0x494c4156
   16c74:	544d5f44 	.word	0x544d5f44
   16c78:	20455059 	.word	0x20455059
   16c7c:	00000d0a 	.word	0x00000d0a
   16c80:	434d0d0a 	.word	0x434d0d0a
   16c84:	5f545341 	.word	0x5f545341
   16c88:	5f524448 	.word	0x5f524448
   16c8c:	41564e49 	.word	0x41564e49
   16c90:	2044494c 	.word	0x2044494c
   16c94:	00000d0a 	.word	0x00000d0a
   16c98:	4e490d0a 	.word	0x4e490d0a
   16c9c:	494c4156 	.word	0x494c4156
   16ca0:	41505f44 	.word	0x41505f44
   16ca4:	54454b43 	.word	0x54454b43
   16ca8:	000d0a20 	.word	0x000d0a20
   16cac:	4e4b4e55 	.word	0x4e4b4e55
   16cb0:	204e574f 	.word	0x204e574f
   16cb4:	4f525245 	.word	0x4f525245
   16cb8:	000d0a52 	.word	0x000d0a52
   16cbc:	6e617254 	.word	0x6e617254
   16cc0:	73696d73 	.word	0x73696d73
   16cc4:	6e6f6973 	.word	0x6e6f6973
   16cc8:	63755320 	.word	0x63755320
   16ccc:	73736563 	.word	0x73736563
   16cd0:	0000000d 	.word	0x0000000d
   16cd4:	2078540a 	.word	0x2078540a
   16cd8:	656d6954 	.word	0x656d6954
   16cdc:	0a74756f 	.word	0x0a74756f
   16ce0:	0000000d 	.word	0x0000000d
   16ce4:	4e550d0a 	.word	0x4e550d0a
   16ce8:	574f4e4b 	.word	0x574f4e4b
   16cec:	5245204e 	.word	0x5245204e
   16cf0:	0a524f52 	.word	0x0a524f52
   16cf4:	0000000d 	.word	0x0000000d
   16cf8:	696f4a0a 	.word	0x696f4a0a
   16cfc:	676e696e 	.word	0x676e696e
   16d00:	63755320 	.word	0x63755320
   16d04:	73736563 	.word	0x73736563
   16d08:	0a6c7566 	.word	0x0a6c7566
   16d0c:	0000000d 	.word	0x0000000d
   16d10:	7665440a 	.word	0x7665440a
   16d14:	72646441 	.word	0x72646441
   16d18:	7830203a 	.word	0x7830203a
   16d1c:	0a786c25 	.word	0x0a786c25
   16d20:	0000000d 	.word	0x0000000d
   16d24:	6464410a 	.word	0x6464410a
   16d28:	73736572 	.word	0x73736572
   16d2c:	6e6f6320 	.word	0x6e6f6320
   16d30:	63696c66 	.word	0x63696c66
   16d34:	65622074 	.word	0x65622074
   16d38:	65657774 	.word	0x65657774
   16d3c:	6544206e 	.word	0x6544206e
   16d40:	65636976 	.word	0x65636976
   16d44:	64644120 	.word	0x64644120
   16d48:	73736572 	.word	0x73736572
   16d4c:	646e6120 	.word	0x646e6120
   16d50:	6c754d20 	.word	0x6c754d20
   16d54:	61636974 	.word	0x61636974
   16d58:	67207473 	.word	0x67207473
   16d5c:	70756f72 	.word	0x70756f72
   16d60:	64646120 	.word	0x64646120
   16d64:	73736572 	.word	0x73736572
   16d68:	00000d0a 	.word	0x00000d0a
   16d6c:	6f4e200a 	.word	0x6f4e200a
   16d70:	65724620 	.word	0x65724620
   16d74:	68432065 	.word	0x68432065
   16d78:	656e6e61 	.word	0x656e6e61
   16d7c:	6f66206c 	.word	0x6f66206c
   16d80:	00646e75 	.word	0x00646e75
   16d84:	494d200a 	.word	0x494d200a
   16d88:	72452043 	.word	0x72452043
   16d8c:	00726f72 	.word	0x00726f72
   16d90:	7254200a 	.word	0x7254200a
   16d94:	6d736e61 	.word	0x6d736e61
   16d98:	69737369 	.word	0x69737369
   16d9c:	54206e6f 	.word	0x54206e6f
   16da0:	6f656d69 	.word	0x6f656d69
   16da4:	00007475 	.word	0x00007475
   16da8:	696f4a0a 	.word	0x696f4a0a
   16dac:	676e696e 	.word	0x676e696e
   16db0:	6e654420 	.word	0x6e654420
   16db4:	0a646569 	.word	0x0a646569
   16db8:	0000000d 	.word	0x0000000d
   16dbc:	63256325 	.word	0x63256325
   16dc0:	63256325 	.word	0x63256325
   16dc4:	63256325 	.word	0x63256325
   16dc8:	0000000a 	.word	0x0000000a
   16dcc:	2078540a 	.word	0x2078540a
   16dd0:	61746144 	.word	0x61746144
   16dd4:	6e655320 	.word	0x6e655320
   16dd8:	000d2074 	.word	0x000d2074
   16ddc:	6c730a0d 	.word	0x6c730a0d
   16de0:	5f706565 	.word	0x5f706565
   16de4:	25206b6f 	.word	0x25206b6f
   16de8:	6d20646c 	.word	0x6d20646c
   16dec:	000a0d73 	.word	0x000a0d73
   16df0:	2e2e6425 	.word	0x2e2e6425
   16df4:	00000000 	.word	0x00000000
   16df8:	2a2a2a0a 	.word	0x2a2a2a0a
   16dfc:	2a2a2a2a 	.word	0x2a2a2a2a
   16e00:	2a2a2a2a 	.word	0x2a2a2a2a
   16e04:	2a2a2a2a 	.word	0x2a2a2a2a
   16e08:	2a2a2a2a 	.word	0x2a2a2a2a
   16e0c:	696f4a2a 	.word	0x696f4a2a
   16e10:	6150206e 	.word	0x6150206e
   16e14:	656d6172 	.word	0x656d6172
   16e18:	73726574 	.word	0x73726574
   16e1c:	2a2a2a2a 	.word	0x2a2a2a2a
   16e20:	2a2a2a2a 	.word	0x2a2a2a2a
   16e24:	2a2a2a2a 	.word	0x2a2a2a2a
   16e28:	2a2a2a2a 	.word	0x2a2a2a2a
   16e2c:	2a2a2a2a 	.word	0x2a2a2a2a
   16e30:	00000d0a 	.word	0x00000d0a
   16e34:	7070410a 	.word	0x7070410a
   16e38:	73736553 	.word	0x73736553
   16e3c:	4b6e6f69 	.word	0x4b6e6f69
   16e40:	3a207965 	.word	0x3a207965
   16e44:	00000020 	.word	0x00000020
   16e48:	6b774e0a 	.word	0x6b774e0a
   16e4c:	73736553 	.word	0x73736553
   16e50:	4b6e6f69 	.word	0x4b6e6f69
   16e54:	3a207965 	.word	0x3a207965
   16e58:	00000020 	.word	0x00000020
   16e5c:	7665440a 	.word	0x7665440a
   16e60:	20495545 	.word	0x20495545
   16e64:	0000203a 	.word	0x0000203a
   16e68:	696f4a0a 	.word	0x696f4a0a
   16e6c:	4955456e 	.word	0x4955456e
   16e70:	00203a20 	.word	0x00203a20
   16e74:	7070410a 	.word	0x7070410a
   16e78:	2079654b 	.word	0x2079654b
   16e7c:	0000203a 	.word	0x0000203a
   16e80:	2a2a2a0a 	.word	0x2a2a2a0a
   16e84:	2a2a2a2a 	.word	0x2a2a2a2a
   16e88:	2a2a2a2a 	.word	0x2a2a2a2a
   16e8c:	2a2a2a2a 	.word	0x2a2a2a2a
   16e90:	746c754d 	.word	0x746c754d
   16e94:	73616369 	.word	0x73616369
   16e98:	61502074 	.word	0x61502074
   16e9c:	656d6172 	.word	0x656d6172
   16ea0:	73726574 	.word	0x73726574
   16ea4:	2a2a2a2a 	.word	0x2a2a2a2a
   16ea8:	2a2a2a2a 	.word	0x2a2a2a2a
   16eac:	2a2a2a2a 	.word	0x2a2a2a2a
   16eb0:	2a2a2a2a 	.word	0x2a2a2a2a
   16eb4:	2a2a2a2a 	.word	0x2a2a2a2a
   16eb8:	00000d0a 	.word	0x00000d0a
   16ebc:	61634d0a 	.word	0x61634d0a
   16ec0:	70417473 	.word	0x70417473
   16ec4:	73655370 	.word	0x73655370
   16ec8:	6e6f6973 	.word	0x6e6f6973
   16ecc:	2079654b 	.word	0x2079654b
   16ed0:	0000203a 	.word	0x0000203a
   16ed4:	61634d0a 	.word	0x61634d0a
   16ed8:	774e7473 	.word	0x774e7473
   16edc:	7365536b 	.word	0x7365536b
   16ee0:	6e6f6973 	.word	0x6e6f6973
   16ee4:	2079654b 	.word	0x2079654b
   16ee8:	0000203a 	.word	0x0000203a
   16eec:	61634d0a 	.word	0x61634d0a
   16ef0:	72477473 	.word	0x72477473
   16ef4:	4170756f 	.word	0x4170756f
   16ef8:	20726464 	.word	0x20726464
   16efc:	7830203a 	.word	0x7830203a
   16f00:	0a786c25 	.word	0x0a786c25
   16f04:	0000000d 	.word	0x0000000d
   16f08:	61634d0a 	.word	0x61634d0a
   16f0c:	72477473 	.word	0x72477473
   16f10:	4170756f 	.word	0x4170756f
   16f14:	53726464 	.word	0x53726464
   16f18:	75746174 	.word	0x75746174
   16f1c:	203a2073 	.word	0x203a2073
   16f20:	6c696146 	.word	0x6c696146
   16f24:	0d0a6465 	.word	0x0d0a6465
   16f28:	00000000 	.word	0x00000000
   16f2c:	6c754d0a 	.word	0x6c754d0a
   16f30:	61636974 	.word	0x61636974
   16f34:	74537473 	.word	0x74537473
   16f38:	73757461 	.word	0x73757461
   16f3c:	45203a20 	.word	0x45203a20
   16f40:	6c62616e 	.word	0x6c62616e
   16f44:	0d0a6465 	.word	0x0d0a6465
   16f48:	00000000 	.word	0x00000000
   16f4c:	6c754d0a 	.word	0x6c754d0a
   16f50:	61636974 	.word	0x61636974
   16f54:	74537473 	.word	0x74537473
   16f58:	73757461 	.word	0x73757461
   16f5c:	46203a20 	.word	0x46203a20
   16f60:	656c6961 	.word	0x656c6961
   16f64:	000d0a64 	.word	0x000d0a64
   16f68:	2a2a2a0a 	.word	0x2a2a2a0a
   16f6c:	2a2a2a2a 	.word	0x2a2a2a2a
   16f70:	2a2a2a2a 	.word	0x2a2a2a2a
   16f74:	2a2a2a2a 	.word	0x2a2a2a2a
   16f78:	2a2a2a2a 	.word	0x2a2a2a2a
   16f7c:	2a2a2a2a 	.word	0x2a2a2a2a
   16f80:	2a2a2a2a 	.word	0x2a2a2a2a
   16f84:	2a2a2a2a 	.word	0x2a2a2a2a
   16f88:	2a2a2a2a 	.word	0x2a2a2a2a
   16f8c:	2a2a2a2a 	.word	0x2a2a2a2a
   16f90:	2a2a2a2a 	.word	0x2a2a2a2a
   16f94:	2a2a2a2a 	.word	0x2a2a2a2a
   16f98:	2a2a2a2a 	.word	0x2a2a2a2a
   16f9c:	2a2a2a2a 	.word	0x2a2a2a2a
   16fa0:	000d0a2a 	.word	0x000d0a2a
   16fa4:	696f4a0a 	.word	0x696f4a0a
   16fa8:	6170206e 	.word	0x6170206e
   16fac:	656d6172 	.word	0x656d6172
   16fb0:	73726574 	.word	0x73726574
   16fb4:	696e6920 	.word	0x696e6920
   16fb8:	6c616974 	.word	0x6c616974
   16fbc:	74617a69 	.word	0x74617a69
   16fc0:	206e6f69 	.word	0x206e6f69
   16fc4:	6c696166 	.word	0x6c696166
   16fc8:	0d0a6465 	.word	0x0d0a6465
   16fcc:	00000000 	.word	0x00000000
   16fd0:	736e550a 	.word	0x736e550a
   16fd4:	6f707075 	.word	0x6f707075
   16fd8:	64657472 	.word	0x64657472
   16fdc:	76654420 	.word	0x76654420
   16fe0:	20656369 	.word	0x20656369
   16fe4:	65707954 	.word	0x65707954
   16fe8:	00000d0a 	.word	0x00000d0a
   16fec:	696f4a0a 	.word	0x696f4a0a
   16ff0:	6552206e 	.word	0x6552206e
   16ff4:	73657571 	.word	0x73657571
   16ff8:	65532074 	.word	0x65532074
   16ffc:	6620746e 	.word	0x6620746e
   17000:	2520726f 	.word	0x2520726f
   17004:	000d0a73 	.word	0x000d0a73
   17008:	00007830 	.word	0x00007830
   1700c:	78323025 	.word	0x78323025
   17010:	00000000 	.word	0x00000000
   17014:	00000d0a 	.word	0x00000d0a
   17018:	2a2a2a0a 	.word	0x2a2a2a0a
   1701c:	2a2a2a2a 	.word	0x2a2a2a2a
   17020:	2a2a2a2a 	.word	0x2a2a2a2a
   17024:	2a2a2a2a 	.word	0x2a2a2a2a
   17028:	6c707041 	.word	0x6c707041
   1702c:	74616369 	.word	0x74616369
   17030:	206e6f69 	.word	0x206e6f69
   17034:	666e6f43 	.word	0x666e6f43
   17038:	72756769 	.word	0x72756769
   1703c:	6f697461 	.word	0x6f697461
   17040:	2a2a2a6e 	.word	0x2a2a2a6e
   17044:	2a2a2a2a 	.word	0x2a2a2a2a
   17048:	2a2a2a2a 	.word	0x2a2a2a2a
   1704c:	2a2a2a2a 	.word	0x2a2a2a2a
   17050:	00000d0a 	.word	0x00000d0a
   17054:	7665440a 	.word	0x7665440a
   17058:	65707954 	.word	0x65707954
   1705c:	00203a20 	.word	0x00203a20
   17060:	53414c43 	.word	0x53414c43
   17064:	0a412053 	.word	0x0a412053
   17068:	0000000d 	.word	0x0000000d
   1706c:	53414c43 	.word	0x53414c43
   17070:	0a432053 	.word	0x0a432053
   17074:	0000000d 	.word	0x0000000d
   17078:	7463410a 	.word	0x7463410a
   1707c:	74617669 	.word	0x74617669
   17080:	546e6f69 	.word	0x546e6f69
   17084:	20657079 	.word	0x20657079
   17088:	0000203a 	.word	0x0000203a
   1708c:	4141544f 	.word	0x4141544f
   17090:	00000d0a 	.word	0x00000d0a
   17094:	6172540a 	.word	0x6172540a
   17098:	696d736e 	.word	0x696d736e
   1709c:	6f697373 	.word	0x6f697373
   170a0:	7954206e 	.word	0x7954206e
   170a4:	2d206570 	.word	0x2d206570
   170a8:	00000020 	.word	0x00000020
   170ac:	4f434e55 	.word	0x4f434e55
   170b0:	5249464e 	.word	0x5249464e
   170b4:	0a44454d 	.word	0x0a44454d
   170b8:	0000000d 	.word	0x0000000d
   170bc:	6f50460a 	.word	0x6f50460a
   170c0:	2d207472 	.word	0x2d207472
   170c4:	0a642520 	.word	0x0a642520
   170c8:	0000000d 	.word	0x0000000d
   170cc:	2a2a2a0a 	.word	0x2a2a2a0a
   170d0:	2a2a2a2a 	.word	0x2a2a2a2a
   170d4:	2a2a2a2a 	.word	0x2a2a2a2a
   170d8:	2a2a2a2a 	.word	0x2a2a2a2a
   170dc:	2a2a2a2a 	.word	0x2a2a2a2a
   170e0:	2a2a2a2a 	.word	0x2a2a2a2a
   170e4:	2a2a2a2a 	.word	0x2a2a2a2a
   170e8:	2a2a2a2a 	.word	0x2a2a2a2a
   170ec:	2a2a2a2a 	.word	0x2a2a2a2a
   170f0:	2a2a2a2a 	.word	0x2a2a2a2a
   170f4:	2a2a2a2a 	.word	0x2a2a2a2a
   170f8:	2a2a2a2a 	.word	0x2a2a2a2a
   170fc:	2a2a2a2a 	.word	0x2a2a2a2a
   17100:	2a2a2a2a 	.word	0x2a2a2a2a
   17104:	00000d0a 	.word	0x00000d0a
   17108:	726f6c0a 	.word	0x726f6c0a
   1710c:	6e617761 	.word	0x6e617761
   17110:	6375735f 	.word	0x6375735f
   17114:	73736563 	.word	0x73736563
   17118:	00000d0a 	.word	0x00000d0a
   1711c:	726f6c0a 	.word	0x726f6c0a
   17120:	6e617761 	.word	0x6e617761
   17124:	6174735f 	.word	0x6174735f
   17128:	3a206574 	.word	0x3a206574
   1712c:	61747320 	.word	0x61747320
   17130:	425f6b63 	.word	0x425f6b63
   17134:	0a797375 	.word	0x0a797375
   17138:	0000000d 	.word	0x0000000d
   1713c:	7665640a 	.word	0x7665640a
   17140:	5f656369 	.word	0x5f656369
   17144:	5f746f6e 	.word	0x5f746f6e
   17148:	6e696f6a 	.word	0x6e696f6a
   1714c:	745f6465 	.word	0x745f6465
   17150:	656e5f6f 	.word	0x656e5f6f
   17154:	726f7774 	.word	0x726f7774
   17158:	000d0a6b 	.word	0x000d0a6b
   1715c:	766e690a 	.word	0x766e690a
   17160:	64696c61 	.word	0x64696c61
   17164:	7261705f 	.word	0x7261705f
   17168:	74656d61 	.word	0x74656d61
   1716c:	0d0a7265 	.word	0x0d0a7265
   17170:	00000000 	.word	0x00000000
   17174:	79656b0a 	.word	0x79656b0a
   17178:	6f6e5f73 	.word	0x6f6e5f73
   1717c:	6e695f74 	.word	0x6e695f74
   17180:	61697469 	.word	0x61697469
   17184:	657a696c 	.word	0x657a696c
   17188:	000d0a64 	.word	0x000d0a64
   1718c:	6c69730a 	.word	0x6c69730a
   17190:	5f746e65 	.word	0x5f746e65
   17194:	656d6d69 	.word	0x656d6d69
   17198:	74616964 	.word	0x74616964
   1719c:	5f796c65 	.word	0x5f796c65
   171a0:	69746361 	.word	0x69746361
   171a4:	0d0a6576 	.word	0x0d0a6576
   171a8:	00000000 	.word	0x00000000
   171ac:	6172660a 	.word	0x6172660a
   171b0:	6f63656d 	.word	0x6f63656d
   171b4:	65746e75 	.word	0x65746e75
   171b8:	72655f72 	.word	0x72655f72
   171bc:	5f726f72 	.word	0x5f726f72
   171c0:	6f6a6572 	.word	0x6f6a6572
   171c4:	6e5f6e69 	.word	0x6e5f6e69
   171c8:	65646565 	.word	0x65646565
   171cc:	000d0a64 	.word	0x000d0a64
   171d0:	766e690a 	.word	0x766e690a
   171d4:	64696c61 	.word	0x64696c61
   171d8:	6675625f 	.word	0x6675625f
   171dc:	5f726566 	.word	0x5f726566
   171e0:	676e656c 	.word	0x676e656c
   171e4:	0d0a6874 	.word	0x0d0a6874
   171e8:	00000000 	.word	0x00000000
   171ec:	43414d0a 	.word	0x43414d0a
   171f0:	7561705f 	.word	0x7561705f
   171f4:	0a646573 	.word	0x0a646573
   171f8:	0000000d 	.word	0x0000000d
   171fc:	5f6f6e0a 	.word	0x5f6f6e0a
   17200:	65657266 	.word	0x65657266
   17204:	6168635f 	.word	0x6168635f
   17208:	6c656e6e 	.word	0x6c656e6e
   1720c:	6f665f73 	.word	0x6f665f73
   17210:	0a646e75 	.word	0x0a646e75
   17214:	0000000d 	.word	0x0000000d
   17218:	7165720a 	.word	0x7165720a
   1721c:	74736575 	.word	0x74736575
   17220:	766e695f 	.word	0x766e695f
   17224:	64696c61 	.word	0x64696c61
   17228:	00000d0a 	.word	0x00000d0a
   1722c:	6572700a 	.word	0x6572700a
   17230:	6f6a5f76 	.word	0x6f6a5f76
   17234:	725f6e69 	.word	0x725f6e69
   17238:	65757165 	.word	0x65757165
   1723c:	695f7473 	.word	0x695f7473
   17240:	72705f6e 	.word	0x72705f6e
   17244:	6572676f 	.word	0x6572676f
   17248:	0d0a7373 	.word	0x0d0a7373
   1724c:	00000000 	.word	0x00000000
   17250:	7165720a 	.word	0x7165720a
   17254:	74736575 	.word	0x74736575
   17258:	6961665f 	.word	0x6961665f
   1725c:	2064656c 	.word	0x2064656c
   17260:	0d0a6425 	.word	0x0d0a6425
   17264:	00000000 	.word	0x00000000
   17268:	0000aab8 	.word	0x0000aab8
   1726c:	0000a9be 	.word	0x0000a9be
   17270:	0000a9c8 	.word	0x0000a9c8
   17274:	0000a9d2 	.word	0x0000a9d2
   17278:	0000a9dc 	.word	0x0000a9dc
   1727c:	0000a9e6 	.word	0x0000a9e6
   17280:	0000a9f0 	.word	0x0000a9f0
   17284:	0000a9fa 	.word	0x0000a9fa
   17288:	0000a9b0 	.word	0x0000a9b0
   1728c:	0000aa04 	.word	0x0000aa04
   17290:	0000aa0e 	.word	0x0000aa0e
   17294:	0000aa18 	.word	0x0000aa18
   17298:	0000aa22 	.word	0x0000aa22
   1729c:	0000aa2c 	.word	0x0000aa2c
   172a0:	0000aa36 	.word	0x0000aa36
   172a4:	0000aa40 	.word	0x0000aa40
   172a8:	0000aa4a 	.word	0x0000aa4a
   172ac:	0000aa54 	.word	0x0000aa54
   172b0:	0000aa5e 	.word	0x0000aa5e
   172b4:	0000aa68 	.word	0x0000aa68
   172b8:	0000aa72 	.word	0x0000aa72
   172bc:	0000aa7c 	.word	0x0000aa7c
   172c0:	0000aab8 	.word	0x0000aab8
   172c4:	0000aa86 	.word	0x0000aa86
   172c8:	0000aa90 	.word	0x0000aa90
   172cc:	0000aa9a 	.word	0x0000aa9a
   172d0:	0000aaa4 	.word	0x0000aaa4
   172d4:	0000aab8 	.word	0x0000aab8
   172d8:	0000aab8 	.word	0x0000aab8
   172dc:	0000aab8 	.word	0x0000aab8
   172e0:	0000aaae 	.word	0x0000aaae
   172e4:	0000aaf8 	.word	0x0000aaf8
   172e8:	0000ab02 	.word	0x0000ab02
   172ec:	0000ab0c 	.word	0x0000ab0c
   172f0:	0000ab16 	.word	0x0000ab16
   172f4:	0000ab20 	.word	0x0000ab20
   172f8:	0000ab34 	.word	0x0000ab34
   172fc:	0000ab3e 	.word	0x0000ab3e
   17300:	0000ab48 	.word	0x0000ab48
   17304:	0000aaee 	.word	0x0000aaee
   17308:	0000ab52 	.word	0x0000ab52
   1730c:	0000ab5c 	.word	0x0000ab5c
   17310:	0000ab66 	.word	0x0000ab66
   17314:	0000ab70 	.word	0x0000ab70
   17318:	0000ab7a 	.word	0x0000ab7a
   1731c:	0000ab84 	.word	0x0000ab84
   17320:	0000ab8e 	.word	0x0000ab8e
   17324:	0000ab98 	.word	0x0000ab98
   17328:	0000aba2 	.word	0x0000aba2
   1732c:	0000abac 	.word	0x0000abac
   17330:	0000abb6 	.word	0x0000abb6
   17334:	0000abc0 	.word	0x0000abc0
   17338:	0000abca 	.word	0x0000abca
   1733c:	0000ac06 	.word	0x0000ac06
   17340:	0000abd4 	.word	0x0000abd4
   17344:	0000abde 	.word	0x0000abde
   17348:	0000abe8 	.word	0x0000abe8
   1734c:	0000abf2 	.word	0x0000abf2
   17350:	0000ab2a 	.word	0x0000ab2a
   17354:	0000ac06 	.word	0x0000ac06
   17358:	0000ac06 	.word	0x0000ac06
   1735c:	0000abfc 	.word	0x0000abfc
   17360:	7473614c 	.word	0x7473614c
   17364:	73657220 	.word	0x73657220
   17368:	63207465 	.word	0x63207465
   1736c:	65737561 	.word	0x65737561
   17370:	0000203a 	.word	0x0000203a
   17374:	74737953 	.word	0x74737953
   17378:	52206d65 	.word	0x52206d65
   1737c:	74657365 	.word	0x74657365
   17380:	71655220 	.word	0x71655220
   17384:	74736575 	.word	0x74736575
   17388:	0000000d 	.word	0x0000000d
   1738c:	63746157 	.word	0x63746157
   17390:	676f6468 	.word	0x676f6468
   17394:	73655220 	.word	0x73655220
   17398:	000d7465 	.word	0x000d7465
   1739c:	65747845 	.word	0x65747845
   173a0:	6c616e72 	.word	0x6c616e72
   173a4:	73655220 	.word	0x73655220
   173a8:	000d7465 	.word	0x000d7465
   173ac:	776f7242 	.word	0x776f7242
   173b0:	754f206e 	.word	0x754f206e
   173b4:	33332074 	.word	0x33332074
   173b8:	74654420 	.word	0x74654420
   173bc:	6f746365 	.word	0x6f746365
   173c0:	65522072 	.word	0x65522072
   173c4:	0d746573 	.word	0x0d746573
   173c8:	00000000 	.word	0x00000000
   173cc:	776f7242 	.word	0x776f7242
   173d0:	754f206e 	.word	0x754f206e
   173d4:	32312074 	.word	0x32312074
   173d8:	74654420 	.word	0x74654420
   173dc:	6f746365 	.word	0x6f746365
   173e0:	65522072 	.word	0x65522072
   173e4:	0d746573 	.word	0x0d746573
   173e8:	00000000 	.word	0x00000000
   173ec:	65776f50 	.word	0x65776f50
   173f0:	6e4f2d72 	.word	0x6e4f2d72
   173f4:	73655220 	.word	0x73655220
   173f8:	000d7465 	.word	0x000d7465
   173fc:	6c730a0d 	.word	0x6c730a0d
   17400:	5f706565 	.word	0x5f706565
   17404:	25206b6f 	.word	0x25206b6f
   17408:	6d20646c 	.word	0x6d20646c
   1740c:	000a0d73 	.word	0x000a0d73
   17410:	74696e49 	.word	0x74696e49
   17414:	696c6169 	.word	0x696c6169
   17418:	6974617a 	.word	0x6974617a
   1741c:	6f206e6f 	.word	0x6f206e6f
   17420:	65532066 	.word	0x65532066
   17424:	69727563 	.word	0x69727563
   17428:	6d207974 	.word	0x6d207974
   1742c:	6c75646f 	.word	0x6c75646f
   17430:	73692065 	.word	0x73692065
   17434:	69616620 	.word	0x69616620
   17438:	0d64656c 	.word	0x0d64656c
   1743c:	00000000 	.word	0x00000000
   17440:	72570a0d 	.word	0x72570a0d
   17444:	20657469 	.word	0x20657469
   17448:	65656c53 	.word	0x65656c53
   1744c:	69542070 	.word	0x69542070
   17450:	756f656d 	.word	0x756f656d
   17454:	00000d74 	.word	0x00000d74
   17458:	72570a0d 	.word	0x72570a0d
   1745c:	20657469 	.word	0x20657469
   17460:	656b6157 	.word	0x656b6157
   17464:	54207075 	.word	0x54207075
   17468:	6f656d69 	.word	0x6f656d69
   1746c:	000d7475 	.word	0x000d7475
   17470:	72570a0d 	.word	0x72570a0d
   17474:	20657469 	.word	0x20657469
   17478:	7361654d 	.word	0x7361654d
   1747c:	6d657275 	.word	0x6d657275
   17480:	20746e65 	.word	0x20746e65
   17484:	656d6954 	.word	0x656d6954
   17488:	0d74756f 	.word	0x0d74756f
   1748c:	00000000 	.word	0x00000000
   17490:	65520a0d 	.word	0x65520a0d
   17494:	54206461 	.word	0x54206461
   17498:	6f656d69 	.word	0x6f656d69
   1749c:	000d7475 	.word	0x000d7475
   174a0:	20656854 	.word	0x20656854
   174a4:	706d6574 	.word	0x706d6574
   174a8:	74617265 	.word	0x74617265
   174ac:	20657275 	.word	0x20657275
   174b0:	25207369 	.word	0x25207369
   174b4:	65642067 	.word	0x65642067
   174b8:	65657267 	.word	0x65657267
   174bc:	65432073 	.word	0x65432073
   174c0:	7569736c 	.word	0x7569736c
   174c4:	0a0d2e73 	.word	0x0a0d2e73
   174c8:	00000000 	.word	0x00000000
   174cc:	20656854 	.word	0x20656854
   174d0:	616c6572 	.word	0x616c6572
   174d4:	65766974 	.word	0x65766974
   174d8:	6d756820 	.word	0x6d756820
   174dc:	74696469 	.word	0x74696469
   174e0:	73692079 	.word	0x73692079
   174e4:	20672520 	.word	0x20672520
   174e8:	63726550 	.word	0x63726550
   174ec:	2e746e65 	.word	0x2e746e65
   174f0:	00000a0d 	.word	0x00000a0d
   174f4:	00000000 	.word	0x00000000

000174f8 <CSWTCH.152>:
   174f8:	00000000 40fe8480 00000000 410e8480     .......@.......A
   17508:	00000000 411e8480                       .......A

00017510 <FskSyncWordBuff>:
   17510:	01c194c1                                         ...

00017513 <macEndDevCmdReplyLen>:
   17513:	02010201 01010203 01000002 02020000     ................
   17523:	00000200 00158300                                .....

00017528 <pds_mac_fid1_item_list>:
   17528:	20001583 00010000 20001581 06010100     ... ....... ....
   17538:	20001514 0c040200 20001584 15010300     ... ....... ....
   17548:	20001588 1b040400 200015d8 24040500     ... ....... ...$
   17558:	200015b4 2d040600 200015c8 36100700     ... ...-... ...6
   17568:	200015b8 4b100800 200015a2 60040900     ... ...K... ...`
   17578:	2000156d 69010b00 2000151c 6f010a00     m.. ...i... ...o
   17588:	20001554 75020c00 20001556 7c020d00     T.. ...uV.. ...|
   17598:	20001558 83020e00 2000155a 8a020f00     X.. ....Z.. ....
   175a8:	2000155e 91021000 20001560 98011100     ^.. ....`.. ....
   175b8:	20001561 9e011200 20001566 aa011400     a.. ....f.. ....
   175c8:	20001565 a4011300 2000150c b0041500     e.. ....... ....
   175d8:	20001550 b9021600                       P.. ....

000175e0 <pds_mac_fid2_item_list>:
   175e0:	200014ee 00050001 2000157b 0a010101     ... ....{.. ....
   175f0:	20001484 10010201 20001485 16040301     ... ....... ....
   17600:	20001489 1f100401 20001499 34100501     ... ....... ...4
   17610:	200014c9 49100601 200014d9 5e080701     ... ...I... ...^
   17620:	200014e1 6b080801 20001562 78020901     ... ...kb.. ...x
   17630:	20001510 7f040a01 20001508 88040b01     ... ....... ....
   17640:	2000156b 91010c01 200016b0 97010d01     k.. ....... ....
   17650:	200016b1 9d010e01 200016c8 a3040f01     ... ....... ....
   17660:	0000eeec 0000eebc 0000eece 0000ee10     ................
   17670:	0000eece 0000eeb2 0000eece 0000ee10     ................
   17680:	0000eebc 0000eebc 0000eeb2 0000ee10     ................
   17690:	0000ee18 0000ee18 0000ee18 0000eed4     ................
   176a0:	0000eebc 0000eebc 0000ee90 0000ef74     ............t...
   176b0:	0000ee90 0000eeb2 0000ee90 0000ef74     ............t...
   176c0:	0000eebc 0000eebc 0000eeb2 0000ef74     ............t...
   176d0:	0000ee18 0000ee18 0000ee18 0000ef7e     ............~...
   176e0:	0000f26c 0000f1bc 0000f1bc 0000f1ba     l...............
   176f0:	0000f25e 0000f25e 0000f254 0000f1ba     ^...^...T.......
   17700:	0000f25e 0000f254 0000f25e 0000f1ba     ^...T...^.......
   17710:	0000f264 0000f264 0000f264 0000f2f4     d...d...d.......
   17720:	0001003c 0001001e 0000ffd8 0000fef6     <...............
   17730:	0000ffd8 00010010 0000ffd8 0000fef6     ................
   17740:	0001001e 0001001e 00010010 0000fef6     ................
   17750:	0000feee 0000feee 0000feee 00010254     ............T...
   17760:	0001089c 0001075c 0001075c 00010758     ....\...\...X...
   17770:	00010874 00010874 00010866 00010758     t...t...f...X...
   17780:	00010874 00010866 00010874 00010758     t...f...t...X...
   17790:	0001087c 0001087c 0001087c 00010a80     |...|...|.......

000177a0 <_global_impure_ptr>:
   177a0:	20000080 0000000a 00011ee2 00011fb6     ... ............
   177b0:	00011fb6 00011ece 00011fb6 00011fb6     ................
   177c0:	00011fb6 00011fb6 00011fb6 00011fb6     ................
   177d0:	00011f88 00011a9a 00011fb6 00011a90     ................
   177e0:	00011aa4 00011fb6 00011ed8 00011c64     ............d...
   177f0:	00011c64 00011c64 00011c64 00011c64     d...d...d...d...
   17800:	00011c64 00011c64 00011c64 00011c64     d...d...d...d...
   17810:	00011fb6 00011fb6 00011fb6 00011fb6     ................
   17820:	00011fb6 00011fb6 00011fb6 00011fb6     ................
   17830:	00011fb6 00011fb6 00011f9e 00011ef2     ................
   17840:	00011fb6 00011ef2 00011fb6 00011fb6     ................
   17850:	00011fb6 00011fb6 00011e58 00011fb6     ........X.......
   17860:	00011fb6 00011e62 00011fb6 00011fb6     ....b...........
   17870:	00011fb6 00011fb6 00011fb6 00011e90     ................
   17880:	00011fb6 00011fb6 00011ebe 00011fb6     ................
   17890:	00011fb6 00011fb6 00011fb6 00011fb6     ................
   178a0:	00011fb6 00011fb6 00011fb6 00011fb6     ................
   178b0:	00011fb6 00011ca4 00011cda 00011ef2     ................
   178c0:	00011ef2 00011ef2 00011d82 00011cda     ................
   178d0:	00011fb6 00011fb6 00011d8c 00011fb6     ................
   178e0:	00011d9e 00011fb2 00011dcc 00011df6     ................
   178f0:	00011fb6 00011e00 00011fb6 00011fae     ................
   17900:	00011fb6 00011fb6 00011af2 00464e49     ............INF.
   17910:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   17920:	37363534 42413938 46454443 00000000     456789ABCDEF....
   17930:	33323130 37363534 62613938 66656463     0123456789abcdef
   17940:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

00017950 <blanks.7238>:
   17950:	20202020 20202020 20202020 20202020                     

00017960 <zeroes.7239>:
   17960:	30303030 30303030 30303030 30303030     0000000000000000
   17970:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   17980:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00017990 <__mprec_bigtens>:
   17990:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   179a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   179b0:	7f73bf3c 75154fdd                       <.s..O.u

000179b8 <__mprec_tens>:
   179b8:	00000000 3ff00000 00000000 40240000     .......?......$@
   179c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   179d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   179e8:	00000000 412e8480 00000000 416312d0     .......A......cA
   179f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   17a08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   17a18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   17a28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   17a38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   17a48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   17a58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   17a68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   17a78:	79d99db4 44ea7843                       ...yCx.D

00017a80 <p05.6055>:
   17a80:	00000005 00000019 0000007d              ........}...

00017a8c <_ctype_>:
   17a8c:	20202000 20202020 28282020 20282828     .         ((((( 
   17a9c:	20202020 20202020 20202020 20202020                     
   17aac:	10108820 10101010 10101010 10101010      ...............
   17abc:	04040410 04040404 10040404 10101010     ................
   17acc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   17adc:	01010101 01010101 01010101 10101010     ................
   17aec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   17afc:	02020202 02020202 02020202 10101010     ................
   17b0c:	00000020 00000000 00000000 00000000      ...............
	...

00017b90 <_init>:
   17b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b92:	46c0      	nop			; (mov r8, r8)
   17b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17b96:	bc08      	pop	{r3}
   17b98:	469e      	mov	lr, r3
   17b9a:	4770      	bx	lr

00017b9c <__init_array_start>:
   17b9c:	000130f9 	.word	0x000130f9

00017ba0 <__frame_dummy_init_array_entry>:
   17ba0:	000000dd                                ....

00017ba4 <_fini>:
   17ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ba6:	46c0      	nop			; (mov r8, r8)
   17ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17baa:	bc08      	pop	{r3}
   17bac:	469e      	mov	lr, r3
   17bae:	4770      	bx	lr

00017bb0 <__fini_array_start>:
   17bb0:	000000b5 	.word	0x000000b5
