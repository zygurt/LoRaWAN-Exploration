
APPS_ENDDEVICE_NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002d4fc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0002d4fc  0002d4fc  0003d4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b98  20000000  0002d504  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00040b98  2**0
                  CONTENTS
  4 .bss          000014d8  20000b98  0002e0a0  00040b98  2**3
                  ALLOC
  5 .stack        00002000  20002070  0002f578  00040b98  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00040b98  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00040bc0  2**0
                  CONTENTS, READONLY
  8 .debug_info   0009d556  00000000  00000000  00040c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b5e2  00000000  00000000  000de1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000aab3  00000000  00000000  000e9784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f00  00000000  00000000  000f4237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001bd8  00000000  00000000  000f6137  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003163f  00000000  00000000  000f7d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000341d4  00000000  00000000  0012934e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b326e  00000000  00000000  0015d522  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007ecc  00000000  00000000  00210790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
*        This function extract the production calibration data information from
*        Temperature log row content and store it variables for temperature calculation
*
*/
static void load_calibration_data(void)
{
       0:	70 40 00 20 f1 60 00 00 85 61 00 00 85 61 00 00     p@. .`...a...a..
	...
	val2 = *temp_log_row_ptr;

#if SAML21 || SAMR34 || SAMR35 || WLR089U0
	room_temp_val_int = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_INT_Msk) >> FUSES_ROOM_TEMP_VAL_INT_Pos);
	
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
      2c:	85 61 00 00 00 00 00 00 00 00 00 00 85 61 00 00     .a...........a..
	
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
      3c:	85 61 00 00 85 61 00 00 85 61 00 00 61 29 00 00     .a...a...a..a)..
	
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
      4c:	9d 14 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .....a...a...a..
	
	room_int1v_val = (int8_t)((val1 & FUSES_ROOM_INT1V_VAL_Msk) >> FUSES_ROOM_INT1V_VAL_Pos);
	
	hot_int1v_val = (int8_t)((val2 & FUSES_HOT_INT1V_VAL_Msk) >> FUSES_HOT_INT1V_VAL_Pos);
      5c:	85 61 00 00 fd 2f 00 00 15 30 00 00 2d 30 00 00     .a.../...0..-0..
	
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
      6c:	45 30 00 00 5d 30 00 00 75 30 00 00 85 61 00 00     E0..]0..u0...a..
	
	ADCH = (uint16_t)((val2 & FUSES_HOT_ADC_VAL_Msk) >> FUSES_HOT_ADC_VAL_Pos);
      7c:	85 61 00 00 85 61 00 00 5d 58 00 00 71 58 00 00     .a...a..]X..qX..
#endif	
	
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
      8c:	85 58 00 00 99 58 00 00 ad 58 00 00 e5 0e 00 00     .X...X...X......
      9c:	85 61 00 00 85 61 00 00 85 61 00 00 85 61 00 00     .a...a...a...a..
	
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
      ac:	85 61 00 00 00 00 00 00                             .a......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000b98 	.word	0x20000b98
      d4:	00000000 	.word	0x00000000
	
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
      d8:	0002d504 	.word	0x0002d504

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000b9c 	.word	0x20000b9c
     108:	0002d504 	.word	0x0002d504
     10c:	0002d504 	.word	0x0002d504
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000053ed 	.word	0x000053ed
     190:	20000000 	.word	0x20000000
     194:	00021069 	.word	0x00021069
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_us+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_us+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_us+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000004 	.word	0x20000004
     1cc:	00000115 	.word	0x00000115

000001d0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b082      	sub	sp, #8
     1d4:	af00      	add	r7, sp, #0
     1d6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1d8:	e004      	b.n	1e4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1da:	4b07      	ldr	r3, [pc, #28]	; (1f8 <delay_cycles_ms+0x28>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	0018      	movs	r0, r3
     1e0:	4b06      	ldr	r3, [pc, #24]	; (1fc <delay_cycles_ms+0x2c>)
     1e2:	4798      	blx	r3
	while (n--) {
     1e4:	687b      	ldr	r3, [r7, #4]
     1e6:	1e5a      	subs	r2, r3, #1
     1e8:	607a      	str	r2, [r7, #4]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d1f5      	bne.n	1da <delay_cycles_ms+0xa>
	}
}
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	46bd      	mov	sp, r7
     1f2:	b002      	add	sp, #8
     1f4:	bd80      	pop	{r7, pc}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	20000000 	.word	0x20000000
     1fc:	00000115 	.word	0x00000115

00000200 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     206:	4b10      	ldr	r3, [pc, #64]	; (248 <cpu_irq_enter_critical+0x48>)
     208:	681b      	ldr	r3, [r3, #0]
     20a:	2b00      	cmp	r3, #0
     20c:	d112      	bne.n	234 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     20e:	f3ef 8310 	mrs	r3, PRIMASK
     212:	607b      	str	r3, [r7, #4]
  return(result);
     214:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     216:	2b00      	cmp	r3, #0
     218:	d109      	bne.n	22e <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     21a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     21c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     220:	4b0a      	ldr	r3, [pc, #40]	; (24c <cpu_irq_enter_critical+0x4c>)
     222:	2200      	movs	r2, #0
     224:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     226:	4b0a      	ldr	r3, [pc, #40]	; (250 <cpu_irq_enter_critical+0x50>)
     228:	2201      	movs	r2, #1
     22a:	701a      	strb	r2, [r3, #0]
     22c:	e002      	b.n	234 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     22e:	4b08      	ldr	r3, [pc, #32]	; (250 <cpu_irq_enter_critical+0x50>)
     230:	2200      	movs	r2, #0
     232:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <cpu_irq_enter_critical+0x48>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	1c5a      	adds	r2, r3, #1
     23a:	4b03      	ldr	r3, [pc, #12]	; (248 <cpu_irq_enter_critical+0x48>)
     23c:	601a      	str	r2, [r3, #0]
}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46bd      	mov	sp, r7
     242:	b002      	add	sp, #8
     244:	bd80      	pop	{r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	20000bb4 	.word	0x20000bb4
     24c:	20000008 	.word	0x20000008
     250:	20000bb8 	.word	0x20000bb8

00000254 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     254:	b580      	push	{r7, lr}
     256:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     258:	4b0b      	ldr	r3, [pc, #44]	; (288 <cpu_irq_leave_critical+0x34>)
     25a:	681b      	ldr	r3, [r3, #0]
     25c:	1e5a      	subs	r2, r3, #1
     25e:	4b0a      	ldr	r3, [pc, #40]	; (288 <cpu_irq_leave_critical+0x34>)
     260:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     262:	4b09      	ldr	r3, [pc, #36]	; (288 <cpu_irq_leave_critical+0x34>)
     264:	681b      	ldr	r3, [r3, #0]
     266:	2b00      	cmp	r3, #0
     268:	d10a      	bne.n	280 <cpu_irq_leave_critical+0x2c>
     26a:	4b08      	ldr	r3, [pc, #32]	; (28c <cpu_irq_leave_critical+0x38>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	b2db      	uxtb	r3, r3
     270:	2b00      	cmp	r3, #0
     272:	d005      	beq.n	280 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     274:	4b06      	ldr	r3, [pc, #24]	; (290 <cpu_irq_leave_critical+0x3c>)
     276:	2201      	movs	r2, #1
     278:	701a      	strb	r2, [r3, #0]
     27a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     27e:	b662      	cpsie	i
	}
}
     280:	46c0      	nop			; (mov r8, r8)
     282:	46bd      	mov	sp, r7
     284:	bd80      	pop	{r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	20000bb4 	.word	0x20000bb4
     28c:	20000bb8 	.word	0x20000bb8
     290:	20000008 	.word	0x20000008

00000294 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     294:	b580      	push	{r7, lr}
     296:	b084      	sub	sp, #16
     298:	af00      	add	r7, sp, #0
     29a:	0002      	movs	r2, r0
     29c:	1dfb      	adds	r3, r7, #7
     29e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     2a0:	230f      	movs	r3, #15
     2a2:	18fb      	adds	r3, r7, r3
     2a4:	1dfa      	adds	r2, r7, #7
     2a6:	7812      	ldrb	r2, [r2, #0]
     2a8:	09d2      	lsrs	r2, r2, #7
     2aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     2ac:	230e      	movs	r3, #14
     2ae:	18fb      	adds	r3, r7, r3
     2b0:	1dfa      	adds	r2, r7, #7
     2b2:	7812      	ldrb	r2, [r2, #0]
     2b4:	0952      	lsrs	r2, r2, #5
     2b6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     2b8:	4b0d      	ldr	r3, [pc, #52]	; (2f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     2ba:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     2bc:	230f      	movs	r3, #15
     2be:	18fb      	adds	r3, r7, r3
     2c0:	781b      	ldrb	r3, [r3, #0]
     2c2:	2b00      	cmp	r3, #0
     2c4:	d10f      	bne.n	2e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     2c6:	230f      	movs	r3, #15
     2c8:	18fb      	adds	r3, r7, r3
     2ca:	781b      	ldrb	r3, [r3, #0]
     2cc:	009b      	lsls	r3, r3, #2
     2ce:	2210      	movs	r2, #16
     2d0:	4694      	mov	ip, r2
     2d2:	44bc      	add	ip, r7
     2d4:	4463      	add	r3, ip
     2d6:	3b08      	subs	r3, #8
     2d8:	681a      	ldr	r2, [r3, #0]
     2da:	230e      	movs	r3, #14
     2dc:	18fb      	adds	r3, r7, r3
     2de:	781b      	ldrb	r3, [r3, #0]
     2e0:	01db      	lsls	r3, r3, #7
     2e2:	18d3      	adds	r3, r2, r3
     2e4:	e000      	b.n	2e8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     2e6:	2300      	movs	r3, #0
	}
}
     2e8:	0018      	movs	r0, r3
     2ea:	46bd      	mov	sp, r7
     2ec:	b004      	add	sp, #16
     2ee:	bd80      	pop	{r7, pc}
     2f0:	40002800 	.word	0x40002800

000002f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     2f4:	b580      	push	{r7, lr}
     2f6:	b082      	sub	sp, #8
     2f8:	af00      	add	r7, sp, #0
     2fa:	0002      	movs	r2, r0
     2fc:	1dfb      	adds	r3, r7, #7
     2fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     300:	1dfb      	adds	r3, r7, #7
     302:	781b      	ldrb	r3, [r3, #0]
     304:	0018      	movs	r0, r3
     306:	4b03      	ldr	r3, [pc, #12]	; (314 <port_get_group_from_gpio_pin+0x20>)
     308:	4798      	blx	r3
     30a:	0003      	movs	r3, r0
}
     30c:	0018      	movs	r0, r3
     30e:	46bd      	mov	sp, r7
     310:	b002      	add	sp, #8
     312:	bd80      	pop	{r7, pc}
     314:	00000295 	.word	0x00000295

00000318 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     318:	b580      	push	{r7, lr}
     31a:	b082      	sub	sp, #8
     31c:	af00      	add	r7, sp, #0
     31e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2200      	movs	r2, #0
     324:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2201      	movs	r2, #1
     32a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2200      	movs	r2, #0
     330:	709a      	strb	r2, [r3, #2]
}
     332:	46c0      	nop			; (mov r8, r8)
     334:	46bd      	mov	sp, r7
     336:	b002      	add	sp, #8
     338:	bd80      	pop	{r7, pc}
	...

0000033c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     33c:	b580      	push	{r7, lr}
     33e:	b084      	sub	sp, #16
     340:	af00      	add	r7, sp, #0
     342:	0002      	movs	r2, r0
     344:	1dfb      	adds	r3, r7, #7
     346:	701a      	strb	r2, [r3, #0]
     348:	1dbb      	adds	r3, r7, #6
     34a:	1c0a      	adds	r2, r1, #0
     34c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     34e:	1dfb      	adds	r3, r7, #7
     350:	781b      	ldrb	r3, [r3, #0]
     352:	0018      	movs	r0, r3
     354:	4b0d      	ldr	r3, [pc, #52]	; (38c <port_pin_set_output_level+0x50>)
     356:	4798      	blx	r3
     358:	0003      	movs	r3, r0
     35a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     35c:	1dfb      	adds	r3, r7, #7
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	221f      	movs	r2, #31
     362:	4013      	ands	r3, r2
     364:	2201      	movs	r2, #1
     366:	409a      	lsls	r2, r3
     368:	0013      	movs	r3, r2
     36a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     36c:	1dbb      	adds	r3, r7, #6
     36e:	781b      	ldrb	r3, [r3, #0]
     370:	2b00      	cmp	r3, #0
     372:	d003      	beq.n	37c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     374:	68fb      	ldr	r3, [r7, #12]
     376:	68ba      	ldr	r2, [r7, #8]
     378:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     37a:	e002      	b.n	382 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	68ba      	ldr	r2, [r7, #8]
     380:	615a      	str	r2, [r3, #20]
}
     382:	46c0      	nop			; (mov r8, r8)
     384:	46bd      	mov	sp, r7
     386:	b004      	add	sp, #16
     388:	bd80      	pop	{r7, pc}
     38a:	46c0      	nop			; (mov r8, r8)
     38c:	000002f5 	.word	0x000002f5

00000390 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     390:	b580      	push	{r7, lr}
     392:	b082      	sub	sp, #8
     394:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     396:	1d3b      	adds	r3, r7, #4
     398:	0018      	movs	r0, r3
     39a:	4b20      	ldr	r3, [pc, #128]	; (41c <system_board_init+0x8c>)
     39c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     39e:	1d3b      	adds	r3, r7, #4
     3a0:	2201      	movs	r2, #1
     3a2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     3a4:	1d3b      	adds	r3, r7, #4
     3a6:	0019      	movs	r1, r3
     3a8:	2013      	movs	r0, #19
     3aa:	4b1d      	ldr	r3, [pc, #116]	; (420 <system_board_init+0x90>)
     3ac:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     3ae:	2101      	movs	r1, #1
     3b0:	2013      	movs	r0, #19
     3b2:	4b1c      	ldr	r3, [pc, #112]	; (424 <system_board_init+0x94>)
     3b4:	4798      	blx	r3
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3b6:	1d3b      	adds	r3, r7, #4
     3b8:	2201      	movs	r2, #1
     3ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     3bc:	1d3b      	adds	r3, r7, #4
     3be:	0019      	movs	r1, r3
     3c0:	2012      	movs	r0, #18
     3c2:	4b17      	ldr	r3, [pc, #92]	; (420 <system_board_init+0x90>)
     3c4:	4798      	blx	r3
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
     3c6:	2101      	movs	r1, #1
     3c8:	2012      	movs	r0, #18
     3ca:	4b16      	ldr	r3, [pc, #88]	; (424 <system_board_init+0x94>)
     3cc:	4798      	blx	r3
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3ce:	1d3b      	adds	r3, r7, #4
     3d0:	2201      	movs	r2, #1
     3d2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     3d4:	1d3b      	adds	r3, r7, #4
     3d6:	0019      	movs	r1, r3
     3d8:	200d      	movs	r0, #13
     3da:	4b11      	ldr	r3, [pc, #68]	; (420 <system_board_init+0x90>)
     3dc:	4798      	blx	r3
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
     3de:	2100      	movs	r1, #0
     3e0:	200d      	movs	r0, #13
     3e2:	4b10      	ldr	r3, [pc, #64]	; (424 <system_board_init+0x94>)
     3e4:	4798      	blx	r3
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     3e6:	1d3b      	adds	r3, r7, #4
     3e8:	2201      	movs	r2, #1
     3ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     3ec:	1d3b      	adds	r3, r7, #4
     3ee:	0019      	movs	r1, r3
     3f0:	2009      	movs	r0, #9
     3f2:	4b0b      	ldr	r3, [pc, #44]	; (420 <system_board_init+0x90>)
     3f4:	4798      	blx	r3
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
     3f6:	2100      	movs	r1, #0
     3f8:	2009      	movs	r0, #9
     3fa:	4b0a      	ldr	r3, [pc, #40]	; (424 <system_board_init+0x94>)
     3fc:	4798      	blx	r3
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     3fe:	1d3b      	adds	r3, r7, #4
     400:	2200      	movs	r2, #0
     402:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     404:	1d3b      	adds	r3, r7, #4
     406:	2201      	movs	r2, #1
     408:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     40a:	1d3b      	adds	r3, r7, #4
     40c:	0019      	movs	r1, r3
     40e:	201c      	movs	r0, #28
     410:	4b03      	ldr	r3, [pc, #12]	; (420 <system_board_init+0x90>)
     412:	4798      	blx	r3
		
}
     414:	46c0      	nop			; (mov r8, r8)
     416:	46bd      	mov	sp, r7
     418:	b002      	add	sp, #8
     41a:	bd80      	pop	{r7, pc}
     41c:	00000319 	.word	0x00000319
     420:	000020f5 	.word	0x000020f5
     424:	0000033d 	.word	0x0000033d

00000428 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     428:	b580      	push	{r7, lr}
     42a:	b082      	sub	sp, #8
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     430:	687b      	ldr	r3, [r7, #4]
     432:	2200      	movs	r2, #0
     434:	701a      	strb	r2, [r3, #0]
}
     436:	46c0      	nop			; (mov r8, r8)
     438:	46bd      	mov	sp, r7
     43a:	b002      	add	sp, #8
     43c:	bd80      	pop	{r7, pc}
	...

00000440 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     440:	b580      	push	{r7, lr}
     442:	b082      	sub	sp, #8
     444:	af00      	add	r7, sp, #0
     446:	0002      	movs	r2, r0
     448:	6039      	str	r1, [r7, #0]
     44a:	1dfb      	adds	r3, r7, #7
     44c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     44e:	1dfb      	adds	r3, r7, #7
     450:	781b      	ldrb	r3, [r3, #0]
     452:	2b04      	cmp	r3, #4
     454:	d827      	bhi.n	4a6 <system_apb_clock_set_mask+0x66>
     456:	009a      	lsls	r2, r3, #2
     458:	4b16      	ldr	r3, [pc, #88]	; (4b4 <system_apb_clock_set_mask+0x74>)
     45a:	18d3      	adds	r3, r2, r3
     45c:	681b      	ldr	r3, [r3, #0]
     45e:	469f      	mov	pc, r3
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     460:	4b15      	ldr	r3, [pc, #84]	; (4b8 <system_apb_clock_set_mask+0x78>)
     462:	4a15      	ldr	r2, [pc, #84]	; (4b8 <system_apb_clock_set_mask+0x78>)
     464:	6951      	ldr	r1, [r2, #20]
     466:	683a      	ldr	r2, [r7, #0]
     468:	430a      	orrs	r2, r1
     46a:	615a      	str	r2, [r3, #20]
			break;
     46c:	e01d      	b.n	4aa <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
     46e:	4b12      	ldr	r3, [pc, #72]	; (4b8 <system_apb_clock_set_mask+0x78>)
     470:	4a11      	ldr	r2, [pc, #68]	; (4b8 <system_apb_clock_set_mask+0x78>)
     472:	6991      	ldr	r1, [r2, #24]
     474:	683a      	ldr	r2, [r7, #0]
     476:	430a      	orrs	r2, r1
     478:	619a      	str	r2, [r3, #24]
			break;
     47a:	e016      	b.n	4aa <system_apb_clock_set_mask+0x6a>

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     47c:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x78>)
     47e:	4a0e      	ldr	r2, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x78>)
     480:	69d1      	ldr	r1, [r2, #28]
     482:	683a      	ldr	r2, [r7, #0]
     484:	430a      	orrs	r2, r1
     486:	61da      	str	r2, [r3, #28]
			break;
     488:	e00f      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     48a:	4b0b      	ldr	r3, [pc, #44]	; (4b8 <system_apb_clock_set_mask+0x78>)
     48c:	4a0a      	ldr	r2, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x78>)
     48e:	6a11      	ldr	r1, [r2, #32]
     490:	683a      	ldr	r2, [r7, #0]
     492:	430a      	orrs	r2, r1
     494:	621a      	str	r2, [r3, #32]
			break;
     496:	e008      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		case SYSTEM_CLOCK_APB_APBE:
			MCLK->APBEMASK.reg |= mask;
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x78>)
     49a:	4a07      	ldr	r2, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x78>)
     49c:	6a51      	ldr	r1, [r2, #36]	; 0x24
     49e:	683a      	ldr	r2, [r7, #0]
     4a0:	430a      	orrs	r2, r1
     4a2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     4a4:	e001      	b.n	4aa <system_apb_clock_set_mask+0x6a>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4a6:	2317      	movs	r3, #23
     4a8:	e000      	b.n	4ac <system_apb_clock_set_mask+0x6c>

	}

	return STATUS_OK;
     4aa:	2300      	movs	r3, #0
}
     4ac:	0018      	movs	r0, r3
     4ae:	46bd      	mov	sp, r7
     4b0:	b002      	add	sp, #8
     4b2:	bd80      	pop	{r7, pc}
     4b4:	0002a92c 	.word	0x0002a92c
     4b8:	40000400 	.word	0x40000400

000004bc <system_pinmux_get_config_defaults>:
{
     4bc:	b580      	push	{r7, lr}
     4be:	b082      	sub	sp, #8
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4c4:	687b      	ldr	r3, [r7, #4]
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2200      	movs	r2, #0
     4ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	2201      	movs	r2, #1
     4d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4d6:	687b      	ldr	r3, [r7, #4]
     4d8:	2200      	movs	r2, #0
     4da:	70da      	strb	r2, [r3, #3]
}
     4dc:	46c0      	nop			; (mov r8, r8)
     4de:	46bd      	mov	sp, r7
     4e0:	b002      	add	sp, #8
     4e2:	bd80      	pop	{r7, pc}

000004e4 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
     4e4:	b580      	push	{r7, lr}
     4e6:	b082      	sub	sp, #8
     4e8:	af00      	add	r7, sp, #0
     4ea:	0002      	movs	r2, r0
     4ec:	1dfb      	adds	r3, r7, #7
     4ee:	701a      	strb	r2, [r3, #0]
	switch (vref) {
     4f0:	1dfb      	adds	r3, r7, #7
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	2b00      	cmp	r3, #0
     4f6:	d002      	beq.n	4fe <system_voltage_reference_enable+0x1a>
     4f8:	2b01      	cmp	r3, #1
     4fa:	d007      	beq.n	50c <system_voltage_reference_enable+0x28>
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
			break;
		default:
			Assert(false);
			return;
     4fc:	e00d      	b.n	51a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
     4fe:	4b08      	ldr	r3, [pc, #32]	; (520 <system_voltage_reference_enable+0x3c>)
     500:	4a07      	ldr	r2, [pc, #28]	; (520 <system_voltage_reference_enable+0x3c>)
     502:	69d2      	ldr	r2, [r2, #28]
     504:	2102      	movs	r1, #2
     506:	430a      	orrs	r2, r1
     508:	61da      	str	r2, [r3, #28]
			break;
     50a:	e006      	b.n	51a <system_voltage_reference_enable+0x36>
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     50c:	4b04      	ldr	r3, [pc, #16]	; (520 <system_voltage_reference_enable+0x3c>)
     50e:	4a04      	ldr	r2, [pc, #16]	; (520 <system_voltage_reference_enable+0x3c>)
     510:	69d2      	ldr	r2, [r2, #28]
     512:	2104      	movs	r1, #4
     514:	430a      	orrs	r2, r1
     516:	61da      	str	r2, [r3, #28]
			break;
     518:	46c0      	nop			; (mov r8, r8)
	}
}
     51a:	46bd      	mov	sp, r7
     51c:	b002      	add	sp, #8
     51e:	bd80      	pop	{r7, pc}
     520:	40001400 	.word	0x40001400

00000524 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
     524:	b580      	push	{r7, lr}
     526:	b084      	sub	sp, #16
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	681b      	ldr	r3, [r3, #0]
     530:	60fb      	str	r3, [r7, #12]

	if (adc_module->SYNCBUSY.reg) {
     532:	68fb      	ldr	r3, [r7, #12]
     534:	8c1b      	ldrh	r3, [r3, #32]
     536:	b29b      	uxth	r3, r3
     538:	2b00      	cmp	r3, #0
     53a:	d001      	beq.n	540 <adc_is_syncing+0x1c>
		return true;
     53c:	2301      	movs	r3, #1
     53e:	e000      	b.n	542 <adc_is_syncing+0x1e>
	}

	return false;
     540:	2300      	movs	r3, #0
}
     542:	0018      	movs	r0, r3
     544:	46bd      	mov	sp, r7
     546:	b004      	add	sp, #16
     548:	bd80      	pop	{r7, pc}
	...

0000054c <_adc_get_inst_index>:
 *
 * \return Index of the given ADC module instance.
 */
uint8_t _adc_get_inst_index(
		Adc *const hw)
{
     54c:	b580      	push	{r7, lr}
     54e:	b084      	sub	sp, #16
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;
     554:	4b0e      	ldr	r3, [pc, #56]	; (590 <_adc_get_inst_index+0x44>)
     556:	60bb      	str	r3, [r7, #8]

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     558:	2300      	movs	r3, #0
     55a:	60fb      	str	r3, [r7, #12]
     55c:	e010      	b.n	580 <_adc_get_inst_index+0x34>
		if (hw == adc_modules[i]) {
     55e:	68fb      	ldr	r3, [r7, #12]
     560:	009b      	lsls	r3, r3, #2
     562:	2210      	movs	r2, #16
     564:	4694      	mov	ip, r2
     566:	44bc      	add	ip, r7
     568:	4463      	add	r3, ip
     56a:	3b08      	subs	r3, #8
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	687b      	ldr	r3, [r7, #4]
     570:	429a      	cmp	r2, r3
     572:	d102      	bne.n	57a <_adc_get_inst_index+0x2e>
			return i;
     574:	68fb      	ldr	r3, [r7, #12]
     576:	b2db      	uxtb	r3, r3
     578:	e006      	b.n	588 <_adc_get_inst_index+0x3c>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     57a:	68fb      	ldr	r3, [r7, #12]
     57c:	3301      	adds	r3, #1
     57e:	60fb      	str	r3, [r7, #12]
     580:	68fb      	ldr	r3, [r7, #12]
     582:	2b00      	cmp	r3, #0
     584:	d0eb      	beq.n	55e <_adc_get_inst_index+0x12>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     586:	2300      	movs	r3, #0
}
     588:	0018      	movs	r0, r3
     58a:	46bd      	mov	sp, r7
     58c:	b004      	add	sp, #16
     58e:	bd80      	pop	{r7, pc}
     590:	43000c00 	.word	0x43000c00

00000594 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	2200      	movs	r2, #0
     5a0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2200      	movs	r2, #0
     5a6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	709a      	strb	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2200      	movs	r2, #0
     5b2:	70da      	strb	r2, [r3, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     5b4:	687b      	ldr	r3, [r7, #4]
     5b6:	2200      	movs	r2, #0
     5b8:	831a      	strh	r2, [r3, #24]
	config->window.window_upper_value     = 0;
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	2200      	movs	r2, #0
     5be:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	2200      	movs	r2, #0
     5c4:	61da      	str	r2, [r3, #28]
#if SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	2206      	movs	r2, #6
     5ca:	711a      	strb	r2, [r3, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	22c0      	movs	r2, #192	; 0xc0
     5d0:	0152      	lsls	r2, r2, #5
     5d2:	80da      	strh	r2, [r3, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	2200      	movs	r2, #0
     5d8:	721a      	strb	r2, [r3, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	2200      	movs	r2, #0
     5de:	725a      	strb	r2, [r3, #9]
	config->left_adjust                   = false;
     5e0:	687b      	ldr	r3, [r7, #4]
     5e2:	2200      	movs	r2, #0
     5e4:	729a      	strb	r2, [r3, #10]
	config->differential_mode             = false;
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	2200      	movs	r2, #0
     5ea:	72da      	strb	r2, [r3, #11]
	config->freerunning                   = false;
     5ec:	687b      	ldr	r3, [r7, #4]
     5ee:	2200      	movs	r2, #0
     5f0:	731a      	strb	r2, [r3, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     5f2:	687b      	ldr	r3, [r7, #4]
     5f4:	222a      	movs	r2, #42	; 0x2a
     5f6:	2100      	movs	r1, #0
     5f8:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	2200      	movs	r2, #0
     5fe:	735a      	strb	r2, [r3, #13]
	config->on_demand                     = false;
     600:	687b      	ldr	r3, [r7, #4]
     602:	2200      	movs	r2, #0
     604:	739a      	strb	r2, [r3, #14]
	config->sampling_time_compensation_enable  = false;
     606:	687b      	ldr	r3, [r7, #4]
     608:	2200      	movs	r2, #0
     60a:	73da      	strb	r2, [r3, #15]
	config->positive_input_sequence_mask_enable = 0;
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	2200      	movs	r2, #0
     610:	611a      	str	r2, [r3, #16]
	config->reference_compensation_enable = false;
     612:	687b      	ldr	r3, [r7, #4]
     614:	2200      	movs	r2, #0
     616:	751a      	strb	r2, [r3, #20]
	config->correction.correction_enable  = false;
     618:	687b      	ldr	r3, [r7, #4]
     61a:	2224      	movs	r2, #36	; 0x24
     61c:	2100      	movs	r1, #0
     61e:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     620:	687b      	ldr	r3, [r7, #4]
     622:	2200      	movs	r2, #0
     624:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     626:	687b      	ldr	r3, [r7, #4]
     628:	2200      	movs	r2, #0
     62a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	2200      	movs	r2, #0
     630:	755a      	strb	r2, [r3, #21]
}
     632:	46c0      	nop			; (mov r8, r8)
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
	...

0000063c <_adc_configure_ain_pin>:
*
* \param [in] index   Index of the ADC module instance.
* \param [in] pin     AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint8_t index, uint32_t pin)
{
     63c:	b580      	push	{r7, lr}
     63e:	b09a      	sub	sp, #104	; 0x68
     640:	af00      	add	r7, sp, #0
     642:	0002      	movs	r2, r0
     644:	6039      	str	r1, [r7, #0]
     646:	1dfb      	adds	r3, r7, #7
     648:	701a      	strb	r2, [r3, #0]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
#if (SAML21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	const uint32_t pinmapping[] = {
     64a:	230c      	movs	r3, #12
     64c:	18fa      	adds	r2, r7, r3
     64e:	4b16      	ldr	r3, [pc, #88]	; (6a8 <_adc_configure_ain_pin+0x6c>)
     650:	0010      	movs	r0, r2
     652:	0019      	movs	r1, r3
     654:	2358      	movs	r3, #88	; 0x58
     656:	001a      	movs	r2, r3
     658:	4b14      	ldr	r3, [pc, #80]	; (6ac <_adc_configure_ain_pin+0x70>)
     65a:	4798      	blx	r3
		break;
	}
	Assert(pinmapping);
#endif

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
     65c:	4b14      	ldr	r3, [pc, #80]	; (6b0 <_adc_configure_ain_pin+0x74>)
     65e:	667b      	str	r3, [r7, #100]	; 0x64

	if (pin <= _adc_extchannel_msb[index]) {
     660:	2213      	movs	r2, #19
     662:	683b      	ldr	r3, [r7, #0]
     664:	429a      	cmp	r2, r3
     666:	d31a      	bcc.n	69e <_adc_configure_ain_pin+0x62>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     668:	230c      	movs	r3, #12
     66a:	18fb      	adds	r3, r7, r3
     66c:	683a      	ldr	r2, [r7, #0]
     66e:	0092      	lsls	r2, r2, #2
     670:	58d3      	ldr	r3, [r2, r3]
     672:	667b      	str	r3, [r7, #100]	; 0x64

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
     674:	2308      	movs	r3, #8
     676:	18fb      	adds	r3, r7, r3
     678:	0018      	movs	r0, r3
     67a:	4b0e      	ldr	r3, [pc, #56]	; (6b4 <_adc_configure_ain_pin+0x78>)
     67c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     67e:	2308      	movs	r3, #8
     680:	18fb      	adds	r3, r7, r3
     682:	2200      	movs	r2, #0
     684:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
     686:	2308      	movs	r3, #8
     688:	18fb      	adds	r3, r7, r3
     68a:	2201      	movs	r2, #1
     68c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     690:	b2db      	uxtb	r3, r3
     692:	2208      	movs	r2, #8
     694:	18ba      	adds	r2, r7, r2
     696:	0011      	movs	r1, r2
     698:	0018      	movs	r0, r3
     69a:	4b07      	ldr	r3, [pc, #28]	; (6b8 <_adc_configure_ain_pin+0x7c>)
     69c:	4798      	blx	r3
	}
}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	46bd      	mov	sp, r7
     6a2:	b01a      	add	sp, #104	; 0x68
     6a4:	bd80      	pop	{r7, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	0002a940 	.word	0x0002a940
     6ac:	00024149 	.word	0x00024149
     6b0:	0000ffff 	.word	0x0000ffff
     6b4:	000004bd 	.word	0x000004bd
     6b8:	00005761 	.word	0x00005761

000006bc <_adc_set_config>:
 */
static enum status_code _adc_set_config(
		uint8_t index,
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     6bc:	b580      	push	{r7, lr}
     6be:	b08a      	sub	sp, #40	; 0x28
     6c0:	af00      	add	r7, sp, #0
     6c2:	60b9      	str	r1, [r7, #8]
     6c4:	607a      	str	r2, [r7, #4]
     6c6:	230f      	movs	r3, #15
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	1c02      	adds	r2, r0, #0
     6cc:	701a      	strb	r2, [r3, #0]
	uint8_t adjres = 0;
     6ce:	2327      	movs	r3, #39	; 0x27
     6d0:	18fb      	adds	r3, r7, r3
     6d2:	2200      	movs	r2, #0
     6d4:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
     6d6:	2310      	movs	r3, #16
     6d8:	623b      	str	r3, [r7, #32]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6da:	231f      	movs	r3, #31
     6dc:	18fb      	adds	r3, r7, r3
     6de:	2200      	movs	r2, #0
     6e0:	701a      	strb	r2, [r3, #0]

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     6e2:	68bb      	ldr	r3, [r7, #8]
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	61bb      	str	r3, [r7, #24]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     6e8:	2314      	movs	r3, #20
     6ea:	18fb      	adds	r3, r7, r3
     6ec:	0018      	movs	r0, r3
     6ee:	4bc5      	ldr	r3, [pc, #788]	; (a04 <_adc_set_config+0x348>)
     6f0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	2314      	movs	r3, #20
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     6fc:	221e      	movs	r2, #30
     6fe:	2314      	movs	r3, #20
     700:	18fb      	adds	r3, r7, r3
     702:	0019      	movs	r1, r3
     704:	0010      	movs	r0, r2
     706:	4bc0      	ldr	r3, [pc, #768]	; (a08 <_adc_set_config+0x34c>)
     708:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     70a:	231e      	movs	r3, #30
     70c:	0018      	movs	r0, r3
     70e:	4bbf      	ldr	r3, [pc, #764]	; (a0c <_adc_set_config+0x350>)
     710:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	_adc_configure_ain_pin(index, config->positive_input);
     712:	687b      	ldr	r3, [r7, #4]
     714:	791b      	ldrb	r3, [r3, #4]
     716:	001a      	movs	r2, r3
     718:	230f      	movs	r3, #15
     71a:	18fb      	adds	r3, r7, r3
     71c:	781b      	ldrb	r3, [r3, #0]
     71e:	0011      	movs	r1, r2
     720:	0018      	movs	r0, r3
     722:	4bbb      	ldr	r3, [pc, #748]	; (a10 <_adc_set_config+0x354>)
     724:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->negative_input);
     726:	687b      	ldr	r3, [r7, #4]
     728:	88db      	ldrh	r3, [r3, #6]
     72a:	001a      	movs	r2, r3
     72c:	230f      	movs	r3, #15
     72e:	18fb      	adds	r3, r7, r3
     730:	781b      	ldrb	r3, [r3, #0]
     732:	0011      	movs	r1, r2
     734:	0018      	movs	r0, r3
     736:	4bb6      	ldr	r3, [pc, #728]	; (a10 <_adc_set_config+0x354>)
     738:	4798      	blx	r3

	/* Set pinmux for positive input sequence*/
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     73a:	231e      	movs	r3, #30
     73c:	18fb      	adds	r3, r7, r3
     73e:	2200      	movs	r2, #0
     740:	701a      	strb	r2, [r3, #0]
     742:	e01a      	b.n	77a <_adc_set_config+0xbe>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     744:	687b      	ldr	r3, [r7, #4]
     746:	691b      	ldr	r3, [r3, #16]
     748:	221e      	movs	r2, #30
     74a:	18ba      	adds	r2, r7, r2
     74c:	7812      	ldrb	r2, [r2, #0]
     74e:	2101      	movs	r1, #1
     750:	4091      	lsls	r1, r2
     752:	000a      	movs	r2, r1
     754:	4013      	ands	r3, r2
     756:	d009      	beq.n	76c <_adc_set_config+0xb0>
			_adc_configure_ain_pin(index, i);
     758:	231e      	movs	r3, #30
     75a:	18fb      	adds	r3, r7, r3
     75c:	781a      	ldrb	r2, [r3, #0]
     75e:	230f      	movs	r3, #15
     760:	18fb      	adds	r3, r7, r3
     762:	781b      	ldrb	r3, [r3, #0]
     764:	0011      	movs	r1, r2
     766:	0018      	movs	r0, r3
     768:	4ba9      	ldr	r3, [pc, #676]	; (a10 <_adc_set_config+0x354>)
     76a:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     76c:	231e      	movs	r3, #30
     76e:	18fb      	adds	r3, r7, r3
     770:	781a      	ldrb	r2, [r3, #0]
     772:	231e      	movs	r3, #30
     774:	18fb      	adds	r3, r7, r3
     776:	3201      	adds	r2, #1
     778:	701a      	strb	r2, [r3, #0]
     77a:	231e      	movs	r3, #30
     77c:	18fb      	adds	r3, r7, r3
     77e:	781b      	ldrb	r3, [r3, #0]
     780:	2213      	movs	r2, #19
     782:	4293      	cmp	r3, r2
     784:	d9de      	bls.n	744 <_adc_set_config+0x88>
		}
	}

	/* Configure run in standby and on demand */
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     786:	687b      	ldr	r3, [r7, #4]
     788:	7b5b      	ldrb	r3, [r3, #13]
     78a:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     78c:	b25a      	sxtb	r2, r3
     78e:	687b      	ldr	r3, [r7, #4]
     790:	7b9b      	ldrb	r3, [r3, #14]
     792:	01db      	lsls	r3, r3, #7
     794:	b25b      	sxtb	r3, r3
     796:	4313      	orrs	r3, r2
     798:	b25b      	sxtb	r3, r3
     79a:	b2da      	uxtb	r2, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     79c:	69bb      	ldr	r3, [r7, #24]
     79e:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	7d1b      	ldrb	r3, [r3, #20]
     7a4:	01db      	lsls	r3, r3, #7
			| (config->reference);
     7a6:	b25a      	sxtb	r2, r3
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	785b      	ldrb	r3, [r3, #1]
     7ac:	b25b      	sxtb	r3, r3
     7ae:	4313      	orrs	r3, r2
     7b0:	b25b      	sxtb	r3, r3
     7b2:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
     7b4:	69bb      	ldr	r3, [r7, #24]
     7b6:	709a      	strb	r2, [r3, #2]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	78db      	ldrb	r3, [r3, #3]
     7bc:	2b34      	cmp	r3, #52	; 0x34
     7be:	d846      	bhi.n	84e <_adc_set_config+0x192>
     7c0:	009a      	lsls	r2, r3, #2
     7c2:	4b94      	ldr	r3, [pc, #592]	; (a14 <_adc_set_config+0x358>)
     7c4:	18d3      	adds	r3, r2, r3
     7c6:	681b      	ldr	r3, [r3, #0]
     7c8:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     7ca:	2327      	movs	r3, #39	; 0x27
     7cc:	18fb      	adds	r3, r7, r3
     7ce:	687a      	ldr	r2, [r7, #4]
     7d0:	7a52      	ldrb	r2, [r2, #9]
     7d2:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
     7d4:	231f      	movs	r3, #31
     7d6:	18fb      	adds	r3, r7, r3
     7d8:	687a      	ldr	r2, [r7, #4]
     7da:	7a12      	ldrb	r2, [r2, #8]
     7dc:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     7de:	2310      	movs	r3, #16
     7e0:	623b      	str	r3, [r7, #32]
		break;
     7e2:	e036      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     7e4:	2327      	movs	r3, #39	; 0x27
     7e6:	18fb      	adds	r3, r7, r3
     7e8:	2201      	movs	r2, #1
     7ea:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     7ec:	231f      	movs	r3, #31
     7ee:	18fb      	adds	r3, r7, r3
     7f0:	2202      	movs	r2, #2
     7f2:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     7f4:	2310      	movs	r3, #16
     7f6:	623b      	str	r3, [r7, #32]
		break;
     7f8:	e02b      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     7fa:	2327      	movs	r3, #39	; 0x27
     7fc:	18fb      	adds	r3, r7, r3
     7fe:	2202      	movs	r2, #2
     800:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     802:	231f      	movs	r3, #31
     804:	18fb      	adds	r3, r7, r3
     806:	2204      	movs	r2, #4
     808:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     80a:	2310      	movs	r3, #16
     80c:	623b      	str	r3, [r7, #32]
		break;
     80e:	e020      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     810:	2327      	movs	r3, #39	; 0x27
     812:	18fb      	adds	r3, r7, r3
     814:	2201      	movs	r2, #1
     816:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     818:	231f      	movs	r3, #31
     81a:	18fb      	adds	r3, r7, r3
     81c:	2206      	movs	r2, #6
     81e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     820:	2310      	movs	r3, #16
     822:	623b      	str	r3, [r7, #32]
		break;
     824:	e015      	b.n	852 <_adc_set_config+0x196>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     826:	2327      	movs	r3, #39	; 0x27
     828:	18fb      	adds	r3, r7, r3
     82a:	2200      	movs	r2, #0
     82c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     82e:	231f      	movs	r3, #31
     830:	18fb      	adds	r3, r7, r3
     832:	2208      	movs	r2, #8
     834:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     836:	2310      	movs	r3, #16
     838:	623b      	str	r3, [r7, #32]
		break;
     83a:	e00a      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     83c:	2330      	movs	r3, #48	; 0x30
     83e:	623b      	str	r3, [r7, #32]
		break;
     840:	e007      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     842:	2320      	movs	r3, #32
     844:	623b      	str	r3, [r7, #32]
		break;
     846:	e004      	b.n	852 <_adc_set_config+0x196>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     848:	2300      	movs	r3, #0
     84a:	623b      	str	r3, [r7, #32]
		break;
     84c:	e001      	b.n	852 <_adc_set_config+0x196>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     84e:	2317      	movs	r3, #23
     850:	e1a7      	b.n	ba2 <_adc_set_config+0x4e6>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     852:	2327      	movs	r3, #39	; 0x27
     854:	18fb      	adds	r3, r7, r3
     856:	781b      	ldrb	r3, [r3, #0]
     858:	011b      	lsls	r3, r3, #4
     85a:	b2db      	uxtb	r3, r3
     85c:	2270      	movs	r2, #112	; 0x70
     85e:	4013      	ands	r3, r2
     860:	b2da      	uxtb	r2, r3
     862:	231f      	movs	r3, #31
     864:	18fb      	adds	r3, r7, r3
     866:	781b      	ldrb	r3, [r3, #0]
     868:	4313      	orrs	r3, r2
     86a:	b2da      	uxtb	r2, r3
     86c:	69bb      	ldr	r3, [r7, #24]
     86e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
     870:	46c0      	nop			; (mov r8, r8)
     872:	68bb      	ldr	r3, [r7, #8]
     874:	0018      	movs	r0, r3
     876:	4b68      	ldr	r3, [pc, #416]	; (a18 <_adc_set_config+0x35c>)
     878:	4798      	blx	r3
     87a:	1e03      	subs	r3, r0, #0
     87c:	d1f9      	bne.n	872 <_adc_set_config+0x1b6>
		/* Wait for synchronization */
	}

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     87e:	687b      	ldr	r3, [r7, #4]
     880:	7d5b      	ldrb	r3, [r3, #21]
     882:	2b3f      	cmp	r3, #63	; 0x3f
     884:	d901      	bls.n	88a <_adc_set_config+0x1ce>
		return STATUS_ERR_INVALID_ARG;
     886:	2317      	movs	r3, #23
     888:	e18b      	b.n	ba2 <_adc_set_config+0x4e6>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos)
     88a:	687b      	ldr	r3, [r7, #4]
     88c:	7d5b      	ldrb	r3, [r3, #21]
     88e:	b25a      	sxtb	r2, r3
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     890:	687b      	ldr	r3, [r7, #4]
     892:	7bdb      	ldrb	r3, [r3, #15]
     894:	01db      	lsls	r3, r3, #7
     896:	b25b      	sxtb	r3, r3
     898:	4313      	orrs	r3, r2
     89a:	b25b      	sxtb	r3, r3
     89c:	b2da      	uxtb	r2, r3
		adc_module->SAMPCTRL.reg =
     89e:	69bb      	ldr	r3, [r7, #24]
     8a0:	735a      	strb	r2, [r3, #13]
	}

	while (adc_is_syncing(module_inst)) {
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	68bb      	ldr	r3, [r7, #8]
     8a6:	0018      	movs	r0, r3
     8a8:	4b5b      	ldr	r3, [pc, #364]	; (a18 <_adc_set_config+0x35c>)
     8aa:	4798      	blx	r3
     8ac:	1e03      	subs	r3, r0, #0
     8ae:	d1f9      	bne.n	8a4 <_adc_set_config+0x1e8>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler;
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	789a      	ldrb	r2, [r3, #2]
	adc_module->CTRLB.reg =
     8b4:	69bb      	ldr	r3, [r7, #24]
     8b6:	705a      	strb	r2, [r3, #1]
	adc_module->CTRLC.reg =
			resolution |
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	2224      	movs	r2, #36	; 0x24
     8bc:	5c9b      	ldrb	r3, [r3, r2]
     8be:	b29b      	uxth	r3, r3
     8c0:	00db      	lsls	r3, r3, #3
     8c2:	b29a      	uxth	r2, r3
			resolution |
     8c4:	6a3b      	ldr	r3, [r7, #32]
     8c6:	b29b      	uxth	r3, r3
     8c8:	4313      	orrs	r3, r2
     8ca:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	7b1b      	ldrb	r3, [r3, #12]
     8d0:	b29b      	uxth	r3, r3
     8d2:	009b      	lsls	r3, r3, #2
     8d4:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     8d6:	4313      	orrs	r3, r2
     8d8:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     8da:	687b      	ldr	r3, [r7, #4]
     8dc:	7a9b      	ldrb	r3, [r3, #10]
     8de:	b29b      	uxth	r3, r3
     8e0:	18db      	adds	r3, r3, r3
     8e2:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     8e4:	4313      	orrs	r3, r2
     8e6:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	7adb      	ldrb	r3, [r3, #11]
     8ec:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     8ee:	4313      	orrs	r3, r2
     8f0:	b29a      	uxth	r2, r3
	adc_module->CTRLC.reg =
     8f2:	69bb      	ldr	r3, [r7, #24]
     8f4:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	68bb      	ldr	r3, [r7, #8]
     8fa:	0018      	movs	r0, r3
     8fc:	4b46      	ldr	r3, [pc, #280]	; (a18 <_adc_set_config+0x35c>)
     8fe:	4798      	blx	r3
     900:	1e03      	subs	r3, r0, #0
     902:	d1f9      	bne.n	8f8 <_adc_set_config+0x23c>
		/* Wait for synchronization */
	}

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     904:	687b      	ldr	r3, [r7, #4]
     906:	8b1b      	ldrh	r3, [r3, #24]
     908:	2b00      	cmp	r3, #0
     90a:	d100      	bne.n	90e <_adc_set_config+0x252>
     90c:	e0bf      	b.n	a8e <_adc_set_config+0x3d2>
		switch (resolution) {
     90e:	6a3b      	ldr	r3, [r7, #32]
     910:	2b10      	cmp	r3, #16
     912:	d100      	bne.n	916 <_adc_set_config+0x25a>
     914:	e08e      	b.n	a34 <_adc_set_config+0x378>
     916:	d802      	bhi.n	91e <_adc_set_config+0x262>
     918:	2b00      	cmp	r3, #0
     91a:	d04d      	beq.n	9b8 <_adc_set_config+0x2fc>
     91c:	e0b7      	b.n	a8e <_adc_set_config+0x3d2>
     91e:	2b20      	cmp	r3, #32
     920:	d023      	beq.n	96a <_adc_set_config+0x2ae>
     922:	2b30      	cmp	r3, #48	; 0x30
     924:	d000      	beq.n	928 <_adc_set_config+0x26c>
     926:	e0b2      	b.n	a8e <_adc_set_config+0x3d2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     928:	687b      	ldr	r3, [r7, #4]
     92a:	7adb      	ldrb	r3, [r3, #11]
     92c:	2b00      	cmp	r3, #0
     92e:	d011      	beq.n	954 <_adc_set_config+0x298>
					(config->window.window_lower_value > 127 ||
     930:	687b      	ldr	r3, [r7, #4]
     932:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     934:	2b7f      	cmp	r3, #127	; 0x7f
     936:	dc0b      	bgt.n	950 <_adc_set_config+0x294>
					config->window.window_lower_value < -128 ||
     938:	687b      	ldr	r3, [r7, #4]
     93a:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
     93c:	3380      	adds	r3, #128	; 0x80
     93e:	db07      	blt.n	950 <_adc_set_config+0x294>
					config->window.window_upper_value > 127 ||
     940:	687b      	ldr	r3, [r7, #4]
     942:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
     944:	2b7f      	cmp	r3, #127	; 0x7f
     946:	dc03      	bgt.n	950 <_adc_set_config+0x294>
					config->window.window_upper_value < -128)) {
     948:	687b      	ldr	r3, [r7, #4]
     94a:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
     94c:	3380      	adds	r3, #128	; 0x80
     94e:	da01      	bge.n	954 <_adc_set_config+0x298>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     950:	2317      	movs	r3, #23
     952:	e126      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 255 ||
     954:	687b      	ldr	r3, [r7, #4]
     956:	69db      	ldr	r3, [r3, #28]
     958:	2bff      	cmp	r3, #255	; 0xff
     95a:	dc04      	bgt.n	966 <_adc_set_config+0x2aa>
					config->window.window_upper_value > 255){
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
     960:	2bff      	cmp	r3, #255	; 0xff
     962:	dc00      	bgt.n	966 <_adc_set_config+0x2aa>
     964:	e08c      	b.n	a80 <_adc_set_config+0x3c4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     966:	2317      	movs	r3, #23
     968:	e11b      	b.n	ba2 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	7adb      	ldrb	r3, [r3, #11]
     96e:	2b00      	cmp	r3, #0
     970:	d015      	beq.n	99e <_adc_set_config+0x2e2>
					(config->window.window_lower_value > 511 ||
     972:	687b      	ldr	r3, [r7, #4]
     974:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     976:	4a29      	ldr	r2, [pc, #164]	; (a1c <_adc_set_config+0x360>)
     978:	4293      	cmp	r3, r2
     97a:	dc0e      	bgt.n	99a <_adc_set_config+0x2de>
					config->window.window_lower_value < -512 ||
     97c:	687b      	ldr	r3, [r7, #4]
     97e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
     980:	4a27      	ldr	r2, [pc, #156]	; (a20 <_adc_set_config+0x364>)
     982:	4293      	cmp	r3, r2
     984:	db09      	blt.n	99a <_adc_set_config+0x2de>
					config->window.window_upper_value > 511 ||
     986:	687b      	ldr	r3, [r7, #4]
     988:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
     98a:	4a24      	ldr	r2, [pc, #144]	; (a1c <_adc_set_config+0x360>)
     98c:	4293      	cmp	r3, r2
     98e:	dc04      	bgt.n	99a <_adc_set_config+0x2de>
					config->window.window_upper_value < -512)) {
     990:	687b      	ldr	r3, [r7, #4]
     992:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
     994:	4a22      	ldr	r2, [pc, #136]	; (a20 <_adc_set_config+0x364>)
     996:	4293      	cmp	r3, r2
     998:	da01      	bge.n	99e <_adc_set_config+0x2e2>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     99a:	2317      	movs	r3, #23
     99c:	e101      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 1023 ||
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	69db      	ldr	r3, [r3, #28]
     9a2:	4a20      	ldr	r2, [pc, #128]	; (a24 <_adc_set_config+0x368>)
     9a4:	4293      	cmp	r3, r2
     9a6:	dc05      	bgt.n	9b4 <_adc_set_config+0x2f8>
					config->window.window_upper_value > 1023){
     9a8:	687b      	ldr	r3, [r7, #4]
     9aa:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
     9ac:	4a1d      	ldr	r2, [pc, #116]	; (a24 <_adc_set_config+0x368>)
     9ae:	4293      	cmp	r3, r2
     9b0:	dc00      	bgt.n	9b4 <_adc_set_config+0x2f8>
     9b2:	e067      	b.n	a84 <_adc_set_config+0x3c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9b4:	2317      	movs	r3, #23
     9b6:	e0f4      	b.n	ba2 <_adc_set_config+0x4e6>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     9b8:	687b      	ldr	r3, [r7, #4]
     9ba:	7adb      	ldrb	r3, [r3, #11]
     9bc:	2b00      	cmp	r3, #0
     9be:	d015      	beq.n	9ec <_adc_set_config+0x330>
					(config->window.window_lower_value > 2047 ||
     9c0:	687b      	ldr	r3, [r7, #4]
     9c2:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     9c4:	4a18      	ldr	r2, [pc, #96]	; (a28 <_adc_set_config+0x36c>)
     9c6:	4293      	cmp	r3, r2
     9c8:	dc0e      	bgt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_lower_value < -2048 ||
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
     9ce:	4a17      	ldr	r2, [pc, #92]	; (a2c <_adc_set_config+0x370>)
     9d0:	4293      	cmp	r3, r2
     9d2:	db09      	blt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_upper_value > 2047 ||
     9d4:	687b      	ldr	r3, [r7, #4]
     9d6:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
     9d8:	4a13      	ldr	r2, [pc, #76]	; (a28 <_adc_set_config+0x36c>)
     9da:	4293      	cmp	r3, r2
     9dc:	dc04      	bgt.n	9e8 <_adc_set_config+0x32c>
					config->window.window_upper_value < -2048)) {
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
     9e2:	4a12      	ldr	r2, [pc, #72]	; (a2c <_adc_set_config+0x370>)
     9e4:	4293      	cmp	r3, r2
     9e6:	da01      	bge.n	9ec <_adc_set_config+0x330>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     9e8:	2317      	movs	r3, #23
     9ea:	e0da      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 4095 ||
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	69db      	ldr	r3, [r3, #28]
     9f0:	4a0f      	ldr	r2, [pc, #60]	; (a30 <_adc_set_config+0x374>)
     9f2:	4293      	cmp	r3, r2
     9f4:	dc04      	bgt.n	a00 <_adc_set_config+0x344>
					config->window.window_upper_value > 4095){
     9f6:	687b      	ldr	r3, [r7, #4]
     9f8:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
     9fa:	4a0d      	ldr	r2, [pc, #52]	; (a30 <_adc_set_config+0x374>)
     9fc:	4293      	cmp	r3, r2
     9fe:	dd43      	ble.n	a88 <_adc_set_config+0x3cc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a00:	2317      	movs	r3, #23
     a02:	e0ce      	b.n	ba2 <_adc_set_config+0x4e6>
     a04:	00000429 	.word	0x00000429
     a08:	000054ad 	.word	0x000054ad
     a0c:	000054ed 	.word	0x000054ed
     a10:	0000063d 	.word	0x0000063d
     a14:	0002a998 	.word	0x0002a998
     a18:	00000525 	.word	0x00000525
     a1c:	000001ff 	.word	0x000001ff
     a20:	fffffe00 	.word	0xfffffe00
     a24:	000003ff 	.word	0x000003ff
     a28:	000007ff 	.word	0x000007ff
     a2c:	fffff800 	.word	0xfffff800
     a30:	00000fff 	.word	0x00000fff
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     a34:	687b      	ldr	r3, [r7, #4]
     a36:	7adb      	ldrb	r3, [r3, #11]
     a38:	2b00      	cmp	r3, #0
     a3a:	d015      	beq.n	a68 <_adc_set_config+0x3ac>
					(config->window.window_lower_value > 32767 ||
     a3c:	687b      	ldr	r3, [r7, #4]
     a3e:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
     a40:	4a5a      	ldr	r2, [pc, #360]	; (bac <_adc_set_config+0x4f0>)
     a42:	4293      	cmp	r3, r2
     a44:	dc0e      	bgt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_lower_value < -32768 ||
     a46:	687b      	ldr	r3, [r7, #4]
     a48:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
     a4a:	4a59      	ldr	r2, [pc, #356]	; (bb0 <_adc_set_config+0x4f4>)
     a4c:	4293      	cmp	r3, r2
     a4e:	db09      	blt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_upper_value > 32767 ||
     a50:	687b      	ldr	r3, [r7, #4]
     a52:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
     a54:	4a55      	ldr	r2, [pc, #340]	; (bac <_adc_set_config+0x4f0>)
     a56:	4293      	cmp	r3, r2
     a58:	dc04      	bgt.n	a64 <_adc_set_config+0x3a8>
					config->window.window_upper_value < -32768)) {
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
     a5e:	4a54      	ldr	r2, [pc, #336]	; (bb0 <_adc_set_config+0x4f4>)
     a60:	4293      	cmp	r3, r2
     a62:	da01      	bge.n	a68 <_adc_set_config+0x3ac>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a64:	2317      	movs	r3, #23
     a66:	e09c      	b.n	ba2 <_adc_set_config+0x4e6>
			} else if (config->window.window_lower_value > 65535 ||
     a68:	687b      	ldr	r3, [r7, #4]
     a6a:	69db      	ldr	r3, [r3, #28]
     a6c:	4a51      	ldr	r2, [pc, #324]	; (bb4 <_adc_set_config+0x4f8>)
     a6e:	4293      	cmp	r3, r2
     a70:	dc04      	bgt.n	a7c <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
     a72:	687b      	ldr	r3, [r7, #4]
     a74:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
     a76:	4a4f      	ldr	r2, [pc, #316]	; (bb4 <_adc_set_config+0x4f8>)
     a78:	4293      	cmp	r3, r2
     a7a:	dd07      	ble.n	a8c <_adc_set_config+0x3d0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     a7c:	2317      	movs	r3, #23
     a7e:	e090      	b.n	ba2 <_adc_set_config+0x4e6>
			break;
     a80:	46c0      	nop			; (mov r8, r8)
     a82:	e004      	b.n	a8e <_adc_set_config+0x3d2>
			break;
     a84:	46c0      	nop			; (mov r8, r8)
     a86:	e002      	b.n	a8e <_adc_set_config+0x3d2>
			break;
     a88:	46c0      	nop			; (mov r8, r8)
     a8a:	e000      	b.n	a8e <_adc_set_config+0x3d2>
			}
			break;
     a8c:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Configure window mode */
	adc_module->CTRLC.reg |= config->window.window_mode;
     a8e:	69bb      	ldr	r3, [r7, #24]
     a90:	895b      	ldrh	r3, [r3, #10]
     a92:	b29a      	uxth	r2, r3
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	8b1b      	ldrh	r3, [r3, #24]
     a98:	4313      	orrs	r3, r2
     a9a:	b29a      	uxth	r2, r3
     a9c:	69bb      	ldr	r3, [r7, #24]
     a9e:	815a      	strh	r2, [r3, #10]

	while (adc_is_syncing(module_inst)) {
     aa0:	46c0      	nop			; (mov r8, r8)
     aa2:	68bb      	ldr	r3, [r7, #8]
     aa4:	0018      	movs	r0, r3
     aa6:	4b44      	ldr	r3, [pc, #272]	; (bb8 <_adc_set_config+0x4fc>)
     aa8:	4798      	blx	r3
     aaa:	1e03      	subs	r3, r0, #0
     aac:	d1f9      	bne.n	aa2 <_adc_set_config+0x3e6>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
     ab2:	b29a      	uxth	r2, r3
     ab4:	69bb      	ldr	r3, [r7, #24]
     ab6:	81da      	strh	r2, [r3, #14]

	while (adc_is_syncing(module_inst)) {
     ab8:	46c0      	nop			; (mov r8, r8)
     aba:	68bb      	ldr	r3, [r7, #8]
     abc:	0018      	movs	r0, r3
     abe:	4b3e      	ldr	r3, [pc, #248]	; (bb8 <_adc_set_config+0x4fc>)
     ac0:	4798      	blx	r3
     ac2:	1e03      	subs	r3, r0, #0
     ac4:	d1f9      	bne.n	aba <_adc_set_config+0x3fe>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	6a1b      	ldr	r3, [r3, #32]
     aca:	b29a      	uxth	r2, r3
     acc:	69bb      	ldr	r3, [r7, #24]
     ace:	821a      	strh	r2, [r3, #16]
			ADC_WINUT_WINUT_Pos;

	while (adc_is_syncing(module_inst)) {
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	68bb      	ldr	r3, [r7, #8]
     ad4:	0018      	movs	r0, r3
     ad6:	4b38      	ldr	r3, [pc, #224]	; (bb8 <_adc_set_config+0x4fc>)
     ad8:	4798      	blx	r3
     ada:	1e03      	subs	r3, r0, #0
     adc:	d1f9      	bne.n	ad2 <_adc_set_config+0x416>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->negative_input |
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	88da      	ldrh	r2, [r3, #6]
			config->positive_input;
     ae2:	687b      	ldr	r3, [r7, #4]
     ae4:	791b      	ldrb	r3, [r3, #4]
     ae6:	b29b      	uxth	r3, r3
			config->negative_input |
     ae8:	4313      	orrs	r3, r2
     aea:	b29a      	uxth	r2, r3
	adc_module->INPUTCTRL.reg =
     aec:	69bb      	ldr	r3, [r7, #24]
     aee:	811a      	strh	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
     af0:	46c0      	nop			; (mov r8, r8)
     af2:	68bb      	ldr	r3, [r7, #8]
     af4:	0018      	movs	r0, r3
     af6:	4b30      	ldr	r3, [pc, #192]	; (bb8 <_adc_set_config+0x4fc>)
     af8:	4798      	blx	r3
     afa:	1e03      	subs	r3, r0, #0
     afc:	d1f9      	bne.n	af2 <_adc_set_config+0x436>
		/* Wait for synchronization */
	}

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     afe:	687b      	ldr	r3, [r7, #4]
     b00:	222a      	movs	r2, #42	; 0x2a
     b02:	5c9a      	ldrb	r2, [r3, r2]
     b04:	69bb      	ldr	r3, [r7, #24]
     b06:	70da      	strb	r2, [r3, #3]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     b08:	69bb      	ldr	r3, [r7, #24]
     b0a:	2207      	movs	r2, #7
     b0c:	711a      	strb	r2, [r3, #4]
			(1 << ADC_INTENCLR_WINMON_Pos) |(1 << ADC_INTENCLR_OVERRUN_Pos)
			| (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2224      	movs	r2, #36	; 0x24
     b12:	5c9b      	ldrb	r3, [r3, r2]
     b14:	2b00      	cmp	r3, #0
     b16:	d02c      	beq.n	b72 <_adc_set_config+0x4b6>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     b1c:	4a27      	ldr	r2, [pc, #156]	; (bbc <_adc_set_config+0x500>)
     b1e:	4293      	cmp	r3, r2
     b20:	d901      	bls.n	b26 <_adc_set_config+0x46a>
			return STATUS_ERR_INVALID_ARG;
     b22:	2317      	movs	r3, #23
     b24:	e03d      	b.n	ba2 <_adc_set_config+0x4e6>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	8cda      	ldrh	r2, [r3, #38]	; 0x26
     b2a:	69bb      	ldr	r3, [r7, #24]
     b2c:	825a      	strh	r2, [r3, #18]
					ADC_GAINCORR_GAINCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	68bb      	ldr	r3, [r7, #8]
     b32:	0018      	movs	r0, r3
     b34:	4b20      	ldr	r3, [pc, #128]	; (bb8 <_adc_set_config+0x4fc>)
     b36:	4798      	blx	r3
     b38:	1e03      	subs	r3, r0, #0
     b3a:	d1f9      	bne.n	b30 <_adc_set_config+0x474>
			/* Wait for synchronization */
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	2228      	movs	r2, #40	; 0x28
     b40:	5e9b      	ldrsh	r3, [r3, r2]
     b42:	4a1f      	ldr	r2, [pc, #124]	; (bc0 <_adc_set_config+0x504>)
     b44:	4293      	cmp	r3, r2
     b46:	dc05      	bgt.n	b54 <_adc_set_config+0x498>
				config->correction.offset_correction < -2048) {
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	2228      	movs	r2, #40	; 0x28
     b4c:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
     b4e:	4a1d      	ldr	r2, [pc, #116]	; (bc4 <_adc_set_config+0x508>)
     b50:	4293      	cmp	r3, r2
     b52:	da01      	bge.n	b58 <_adc_set_config+0x49c>
			return STATUS_ERR_INVALID_ARG;
     b54:	2317      	movs	r3, #23
     b56:	e024      	b.n	ba2 <_adc_set_config+0x4e6>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     b58:	687b      	ldr	r3, [r7, #4]
     b5a:	2228      	movs	r2, #40	; 0x28
     b5c:	5e9b      	ldrsh	r3, [r3, r2]
     b5e:	b29a      	uxth	r2, r3
     b60:	69bb      	ldr	r3, [r7, #24]
     b62:	829a      	strh	r2, [r3, #20]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}

		while (adc_is_syncing(module_inst)) {
     b64:	46c0      	nop			; (mov r8, r8)
     b66:	68bb      	ldr	r3, [r7, #8]
     b68:	0018      	movs	r0, r3
     b6a:	4b13      	ldr	r3, [pc, #76]	; (bb8 <_adc_set_config+0x4fc>)
     b6c:	4798      	blx	r3
     b6e:	1e03      	subs	r3, r0, #0
     b70:	d1f9      	bne.n	b66 <_adc_set_config+0x4aa>
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIASREFBUF(
     b72:	4b15      	ldr	r3, [pc, #84]	; (bc8 <_adc_set_config+0x50c>)
     b74:	681b      	ldr	r3, [r3, #0]
     b76:	2200      	movs	r2, #0
     b78:	40d3      	lsrs	r3, r2
     b7a:	b29b      	uxth	r3, r3
     b7c:	021b      	lsls	r3, r3, #8
     b7e:	b29a      	uxth	r2, r3
     b80:	23e0      	movs	r3, #224	; 0xe0
     b82:	00db      	lsls	r3, r3, #3
     b84:	4013      	ands	r3, r2
     b86:	b29a      	uxth	r2, r3
				(*(uint32_t *)_adc_biasrefbuf_addr[index] >> _adc_biasrefbuf_pos[index])
			) |
			ADC_CALIB_BIASCOMP(
     b88:	4b0f      	ldr	r3, [pc, #60]	; (bc8 <_adc_set_config+0x50c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	2103      	movs	r1, #3
     b8e:	40cb      	lsrs	r3, r1
     b90:	b29b      	uxth	r3, r3
     b92:	2107      	movs	r1, #7
     b94:	400b      	ands	r3, r1
     b96:	b29b      	uxth	r3, r3
			) |
     b98:	4313      	orrs	r3, r2
     b9a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
     b9c:	69bb      	ldr	r3, [r7, #24]
     b9e:	859a      	strh	r2, [r3, #44]	; 0x2c
				(*(uint32_t *)_adc_biascomp_addr[index] >> _adc_biascomp_pos[index])
			);

	return STATUS_OK;
     ba0:	2300      	movs	r3, #0
}
     ba2:	0018      	movs	r0, r3
     ba4:	46bd      	mov	sp, r7
     ba6:	b00a      	add	sp, #40	; 0x28
     ba8:	bd80      	pop	{r7, pc}
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	00007fff 	.word	0x00007fff
     bb0:	ffff8000 	.word	0xffff8000
     bb4:	0000ffff 	.word	0x0000ffff
     bb8:	00000525 	.word	0x00000525
     bbc:	00000fff 	.word	0x00000fff
     bc0:	000007ff 	.word	0x000007ff
     bc4:	fffff800 	.word	0xfffff800
     bc8:	00806020 	.word	0x00806020

00000bcc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     bcc:	b590      	push	{r4, r7, lr}
     bce:	b087      	sub	sp, #28
     bd0:	af00      	add	r7, sp, #0
     bd2:	60f8      	str	r0, [r7, #12]
     bd4:	60b9      	str	r1, [r7, #8]
     bd6:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     bd8:	2316      	movs	r3, #22
     bda:	18fc      	adds	r4, r7, r3
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	0018      	movs	r0, r3
     be0:	4b3d      	ldr	r3, [pc, #244]	; (cd8 <adc_init+0x10c>)
     be2:	4798      	blx	r3
     be4:	0003      	movs	r3, r0
     be6:	7023      	strb	r3, [r4, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     be8:	68fb      	ldr	r3, [r7, #12]
     bea:	68ba      	ldr	r2, [r7, #8]
     bec:	601a      	str	r2, [r3, #0]
#if (SAML22)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
     bee:	2108      	movs	r1, #8
     bf0:	2003      	movs	r0, #3
     bf2:	4b3a      	ldr	r3, [pc, #232]	; (cdc <adc_init+0x110>)
     bf4:	4798      	blx	r3
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     bf6:	68bb      	ldr	r3, [r7, #8]
     bf8:	781b      	ldrb	r3, [r3, #0]
     bfa:	b2db      	uxtb	r3, r3
     bfc:	001a      	movs	r2, r3
     bfe:	2301      	movs	r3, #1
     c00:	4013      	ands	r3, r2
     c02:	d001      	beq.n	c08 <adc_init+0x3c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     c04:	2305      	movs	r3, #5
     c06:	e062      	b.n	cce <adc_init+0x102>
	}

	while (adc_is_syncing(module_inst)) {
     c08:	46c0      	nop			; (mov r8, r8)
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	0018      	movs	r0, r3
     c0e:	4b34      	ldr	r3, [pc, #208]	; (ce0 <adc_init+0x114>)
     c10:	4798      	blx	r3
     c12:	1e03      	subs	r3, r0, #0
     c14:	d1f9      	bne.n	c0a <adc_init+0x3e>
		/* Wait for synchronization */
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     c16:	68bb      	ldr	r3, [r7, #8]
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	b2db      	uxtb	r3, r3
     c1c:	001a      	movs	r2, r3
     c1e:	2302      	movs	r3, #2
     c20:	4013      	ands	r3, r2
     c22:	d001      	beq.n	c28 <adc_init+0x5c>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     c24:	231c      	movs	r3, #28
     c26:	e052      	b.n	cce <adc_init+0x102>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     c28:	687b      	ldr	r3, [r7, #4]
     c2a:	785a      	ldrb	r2, [r3, #1]
     c2c:	68fb      	ldr	r3, [r7, #12]
     c2e:	711a      	strb	r2, [r3, #4]

	/* Make sure the voltage reference is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     c30:	68fb      	ldr	r3, [r7, #12]
     c32:	791b      	ldrb	r3, [r3, #4]
     c34:	2b00      	cmp	r3, #0
     c36:	d102      	bne.n	c3e <adc_init+0x72>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
     c38:	2001      	movs	r0, #1
     c3a:	4b2a      	ldr	r3, [pc, #168]	; (ce4 <adc_init+0x118>)
     c3c:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     c3e:	2317      	movs	r3, #23
     c40:	18fb      	adds	r3, r7, r3
     c42:	2200      	movs	r2, #0
     c44:	701a      	strb	r2, [r3, #0]
     c46:	e00e      	b.n	c66 <adc_init+0x9a>
		module_inst->callback[i] = NULL;
     c48:	2317      	movs	r3, #23
     c4a:	18fb      	adds	r3, r7, r3
     c4c:	781a      	ldrb	r2, [r3, #0]
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	3202      	adds	r2, #2
     c52:	0092      	lsls	r2, r2, #2
     c54:	2100      	movs	r1, #0
     c56:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
     c58:	2317      	movs	r3, #23
     c5a:	18fb      	adds	r3, r7, r3
     c5c:	781a      	ldrb	r2, [r3, #0]
     c5e:	2317      	movs	r3, #23
     c60:	18fb      	adds	r3, r7, r3
     c62:	3201      	adds	r2, #1
     c64:	701a      	strb	r2, [r3, #0]
     c66:	2317      	movs	r3, #23
     c68:	18fb      	adds	r3, r7, r3
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	2b02      	cmp	r3, #2
     c6e:	d9eb      	bls.n	c48 <adc_init+0x7c>
	};

	module_inst->registered_callback_mask = 0;
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	2200      	movs	r2, #0
     c74:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	2200      	movs	r2, #0
     c7a:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	2200      	movs	r2, #0
     c80:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
     c82:	68fb      	ldr	r3, [r7, #12]
     c84:	2200      	movs	r2, #0
     c86:	771a      	strb	r2, [r3, #28]

	_adc_instances[instance] = module_inst;
     c88:	2316      	movs	r3, #22
     c8a:	18fb      	adds	r3, r7, r3
     c8c:	781a      	ldrb	r2, [r3, #0]
     c8e:	4b16      	ldr	r3, [pc, #88]	; (ce8 <adc_init+0x11c>)
     c90:	0092      	lsls	r2, r2, #2
     c92:	68f9      	ldr	r1, [r7, #12]
     c94:	50d1      	str	r1, [r2, r3]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	222a      	movs	r2, #42	; 0x2a
     c9a:	5c9b      	ldrb	r3, [r3, r2]
     c9c:	2b00      	cmp	r3, #0
     c9e:	d10a      	bne.n	cb6 <adc_init+0xea>
			!config->freerunning) {
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	7b1b      	ldrb	r3, [r3, #12]
     ca4:	2201      	movs	r2, #1
     ca6:	4053      	eors	r3, r2
     ca8:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     caa:	2b00      	cmp	r3, #0
     cac:	d003      	beq.n	cb6 <adc_init+0xea>
		module_inst->software_trigger = true;
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	2201      	movs	r2, #1
     cb2:	775a      	strb	r2, [r3, #29]
     cb4:	e002      	b.n	cbc <adc_init+0xf0>
	} else {
		module_inst->software_trigger = false;
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	2200      	movs	r2, #0
     cba:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
     cbc:	687a      	ldr	r2, [r7, #4]
     cbe:	68f9      	ldr	r1, [r7, #12]
     cc0:	2316      	movs	r3, #22
     cc2:	18fb      	adds	r3, r7, r3
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b08      	ldr	r3, [pc, #32]	; (cec <adc_init+0x120>)
     cca:	4798      	blx	r3
     ccc:	0003      	movs	r3, r0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b007      	add	sp, #28
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	0000054d 	.word	0x0000054d
     cdc:	00000441 	.word	0x00000441
     ce0:	00000525 	.word	0x00000525
     ce4:	000004e5 	.word	0x000004e5
     ce8:	200011c4 	.word	0x200011c4
     cec:	000006bd 	.word	0x000006bd

00000cf0 <adc_is_syncing>:
{
     cf0:	b580      	push	{r7, lr}
     cf2:	b084      	sub	sp, #16
     cf4:	af00      	add	r7, sp, #0
     cf6:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	681b      	ldr	r3, [r3, #0]
     cfc:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
     cfe:	68fb      	ldr	r3, [r7, #12]
     d00:	8c1b      	ldrh	r3, [r3, #32]
     d02:	b29b      	uxth	r3, r3
     d04:	2b00      	cmp	r3, #0
     d06:	d001      	beq.n	d0c <adc_is_syncing+0x1c>
		return true;
     d08:	2301      	movs	r3, #1
     d0a:	e000      	b.n	d0e <adc_is_syncing+0x1e>
	return false;
     d0c:	2300      	movs	r3, #0
}
     d0e:	0018      	movs	r0, r3
     d10:	46bd      	mov	sp, r7
     d12:	b004      	add	sp, #16
     d14:	bd80      	pop	{r7, pc}
	...

00000d18 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b084      	sub	sp, #16
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	0018      	movs	r0, r3
     d2c:	4b0b      	ldr	r3, [pc, #44]	; (d5c <adc_start_conversion+0x44>)
     d2e:	4798      	blx	r3
     d30:	1e03      	subs	r3, r0, #0
     d32:	d1f9      	bne.n	d28 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	7e1b      	ldrb	r3, [r3, #24]
     d38:	b2db      	uxtb	r3, r3
     d3a:	2202      	movs	r2, #2
     d3c:	4313      	orrs	r3, r2
     d3e:	b2da      	uxtb	r2, r3
     d40:	68fb      	ldr	r3, [r7, #12]
     d42:	761a      	strb	r2, [r3, #24]

	while (adc_is_syncing(module_inst)) {
     d44:	46c0      	nop			; (mov r8, r8)
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	0018      	movs	r0, r3
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <adc_start_conversion+0x44>)
     d4c:	4798      	blx	r3
     d4e:	1e03      	subs	r3, r0, #0
     d50:	d1f9      	bne.n	d46 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	46bd      	mov	sp, r7
     d56:	b004      	add	sp, #16
     d58:	bd80      	pop	{r7, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	00000cf1 	.word	0x00000cf1

00000d60 <adc_enable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to enable
 */
static inline void adc_enable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     d60:	b580      	push	{r7, lr}
     d62:	b084      	sub	sp, #16
     d64:	af00      	add	r7, sp, #0
     d66:	6078      	str	r0, [r7, #4]
     d68:	000a      	movs	r2, r1
     d6a:	1cfb      	adds	r3, r7, #3
     d6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENSET.reg = interrupt;
     d74:	68fb      	ldr	r3, [r7, #12]
     d76:	1cfa      	adds	r2, r7, #3
     d78:	7812      	ldrb	r2, [r2, #0]
     d7a:	715a      	strb	r2, [r3, #5]
}
     d7c:	46c0      	nop			; (mov r8, r8)
     d7e:	46bd      	mov	sp, r7
     d80:	b004      	add	sp, #16
     d82:	bd80      	pop	{r7, pc}

00000d84 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
     d84:	b580      	push	{r7, lr}
     d86:	b084      	sub	sp, #16
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
     d8c:	000a      	movs	r2, r1
     d8e:	1cfb      	adds	r3, r7, #3
     d90:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     d92:	687b      	ldr	r3, [r7, #4]
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     d98:	68fb      	ldr	r3, [r7, #12]
     d9a:	1cfa      	adds	r2, r7, #3
     d9c:	7812      	ldrb	r2, [r2, #0]
     d9e:	711a      	strb	r2, [r3, #4]
}
     da0:	46c0      	nop			; (mov r8, r8)
     da2:	46bd      	mov	sp, r7
     da4:	b004      	add	sp, #16
     da6:	bd80      	pop	{r7, pc}

00000da8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     da8:	b580      	push	{r7, lr}
     daa:	b084      	sub	sp, #16
     dac:	af00      	add	r7, sp, #0
     dae:	0002      	movs	r2, r0
     db0:	1dfb      	adds	r3, r7, #7
     db2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
     db4:	1dfb      	adds	r3, r7, #7
     db6:	781a      	ldrb	r2, [r3, #0]
     db8:	4b47      	ldr	r3, [pc, #284]	; (ed8 <_adc_interrupt_handler+0x130>)
     dba:	0092      	lsls	r2, r2, #2
     dbc:	58d3      	ldr	r3, [r2, r3]
     dbe:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	799b      	ldrb	r3, [r3, #6]
     dc6:	b2da      	uxtb	r2, r3
     dc8:	68fb      	ldr	r3, [r7, #12]
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	795b      	ldrb	r3, [r3, #5]
     dce:	b2db      	uxtb	r3, r3
     dd0:	4013      	ands	r3, r2
     dd2:	b2db      	uxtb	r3, r3
     dd4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
     dd6:	68bb      	ldr	r3, [r7, #8]
     dd8:	2201      	movs	r2, #1
     dda:	4013      	ands	r3, r2
     ddc:	d045      	beq.n	e6a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	681b      	ldr	r3, [r3, #0]
     de2:	2201      	movs	r2, #1
     de4:	719a      	strb	r2, [r3, #6]

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
     de6:	68fb      	ldr	r3, [r7, #12]
     de8:	695b      	ldr	r3, [r3, #20]
     dea:	1c99      	adds	r1, r3, #2
     dec:	68fa      	ldr	r2, [r7, #12]
     dee:	6151      	str	r1, [r2, #20]
     df0:	68fa      	ldr	r2, [r7, #12]
     df2:	6812      	ldr	r2, [r2, #0]
     df4:	8c92      	ldrh	r2, [r2, #36]	; 0x24
     df6:	b292      	uxth	r2, r2
     df8:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
     dfa:	68fb      	ldr	r3, [r7, #12]
     dfc:	8b1b      	ldrh	r3, [r3, #24]
     dfe:	b29b      	uxth	r3, r3
     e00:	3b01      	subs	r3, #1
     e02:	b29b      	uxth	r3, r3
     e04:	68fa      	ldr	r2, [r7, #12]
     e06:	1c19      	adds	r1, r3, #0
     e08:	8311      	strh	r1, [r2, #24]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d00f      	beq.n	e2e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true
     e0e:	68fb      	ldr	r3, [r7, #12]
     e10:	7f5b      	ldrb	r3, [r3, #29]
     e12:	2b00      	cmp	r3, #0
     e14:	d029      	beq.n	e6a <_adc_interrupt_handler+0xc2>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     e16:	68fb      	ldr	r3, [r7, #12]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	79db      	ldrb	r3, [r3, #7]
     e1c:	b2db      	uxtb	r3, r3
     e1e:	b25b      	sxtb	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	db22      	blt.n	e6a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	0018      	movs	r0, r3
     e28:	4b2c      	ldr	r3, [pc, #176]	; (edc <_adc_interrupt_handler+0x134>)
     e2a:	4798      	blx	r3
     e2c:	e01d      	b.n	e6a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
     e2e:	68fb      	ldr	r3, [r7, #12]
     e30:	2101      	movs	r1, #1
     e32:	0018      	movs	r0, r3
     e34:	4b2a      	ldr	r3, [pc, #168]	; (ee0 <_adc_interrupt_handler+0x138>)
     e36:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
     e38:	68fb      	ldr	r3, [r7, #12]
     e3a:	7f1b      	ldrb	r3, [r3, #28]
     e3c:	b2db      	uxtb	r3, r3
     e3e:	2b05      	cmp	r3, #5
     e40:	d113      	bne.n	e6a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
				 *and call callback */
				module->job_status = STATUS_OK;
     e42:	68fb      	ldr	r3, [r7, #12]
     e44:	2200      	movs	r2, #0
     e46:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	7edb      	ldrb	r3, [r3, #27]
     e4c:	001a      	movs	r2, r3
     e4e:	2301      	movs	r3, #1
     e50:	4013      	ands	r3, r2
     e52:	d00a      	beq.n	e6a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
     e54:	68fb      	ldr	r3, [r7, #12]
     e56:	7e9b      	ldrb	r3, [r3, #26]
     e58:	001a      	movs	r2, r3
     e5a:	2301      	movs	r3, #1
     e5c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     e5e:	d004      	beq.n	e6a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	689b      	ldr	r3, [r3, #8]
     e64:	68fa      	ldr	r2, [r7, #12]
     e66:	0010      	movs	r0, r2
     e68:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     e6a:	68bb      	ldr	r3, [r7, #8]
     e6c:	2204      	movs	r2, #4
     e6e:	4013      	ands	r3, r2
     e70:	d014      	beq.n	e9c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     e72:	68fb      	ldr	r3, [r7, #12]
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	2204      	movs	r2, #4
     e78:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e7a:	68fb      	ldr	r3, [r7, #12]
     e7c:	7edb      	ldrb	r3, [r3, #27]
     e7e:	001a      	movs	r2, r3
     e80:	2302      	movs	r3, #2
     e82:	4013      	ands	r3, r2
     e84:	d00a      	beq.n	e9c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     e86:	68fb      	ldr	r3, [r7, #12]
     e88:	7e9b      	ldrb	r3, [r3, #26]
     e8a:	001a      	movs	r2, r3
     e8c:	2302      	movs	r3, #2
     e8e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e90:	d004      	beq.n	e9c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     e92:	68fb      	ldr	r3, [r7, #12]
     e94:	68db      	ldr	r3, [r3, #12]
     e96:	68fa      	ldr	r2, [r7, #12]
     e98:	0010      	movs	r0, r2
     e9a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     e9c:	68bb      	ldr	r3, [r7, #8]
     e9e:	2202      	movs	r2, #2
     ea0:	4013      	ands	r3, r2
     ea2:	d014      	beq.n	ece <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     ea4:	68fb      	ldr	r3, [r7, #12]
     ea6:	681b      	ldr	r3, [r3, #0]
     ea8:	2202      	movs	r2, #2
     eaa:	719a      	strb	r2, [r3, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     eac:	68fb      	ldr	r3, [r7, #12]
     eae:	7edb      	ldrb	r3, [r3, #27]
     eb0:	001a      	movs	r2, r3
     eb2:	2304      	movs	r3, #4
     eb4:	4013      	ands	r3, r2
     eb6:	d00a      	beq.n	ece <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     eb8:	68fb      	ldr	r3, [r7, #12]
     eba:	7e9b      	ldrb	r3, [r3, #26]
     ebc:	001a      	movs	r2, r3
     ebe:	2304      	movs	r3, #4
     ec0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     ec2:	d004      	beq.n	ece <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     ec4:	68fb      	ldr	r3, [r7, #12]
     ec6:	691b      	ldr	r3, [r3, #16]
     ec8:	68fa      	ldr	r2, [r7, #12]
     eca:	0010      	movs	r0, r2
     ecc:	4798      	blx	r3
		}
	}
}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	46bd      	mov	sp, r7
     ed2:	b004      	add	sp, #16
     ed4:	bd80      	pop	{r7, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	200011c4 	.word	0x200011c4
     edc:	00000d19 	.word	0x00000d19
     ee0:	00000d85 	.word	0x00000d85

00000ee4 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     ee4:	b580      	push	{r7, lr}
     ee6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
     ee8:	2000      	movs	r0, #0
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <ADC_Handler+0x10>)
     eec:	4798      	blx	r3
}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	46bd      	mov	sp, r7
     ef2:	bd80      	pop	{r7, pc}
     ef4:	00000da9 	.word	0x00000da9

00000ef8 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b084      	sub	sp, #16
     efc:	af00      	add	r7, sp, #0
     efe:	60f8      	str	r0, [r7, #12]
     f00:	60b9      	str	r1, [r7, #8]
     f02:	1dbb      	adds	r3, r7, #6
     f04:	801a      	strh	r2, [r3, #0]
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     f06:	68fb      	ldr	r3, [r7, #12]
     f08:	8b1b      	ldrh	r3, [r3, #24]
     f0a:	b29b      	uxth	r3, r3
     f0c:	2b00      	cmp	r3, #0
     f0e:	d104      	bne.n	f1a <adc_read_buffer_job+0x22>
			module_inst->job_status == STATUS_BUSY){
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	7f1b      	ldrb	r3, [r3, #28]
     f14:	b2db      	uxtb	r3, r3
	if(module_inst->remaining_conversions != 0 ||
     f16:	2b05      	cmp	r3, #5
     f18:	d101      	bne.n	f1e <adc_read_buffer_job+0x26>
		return STATUS_BUSY;
     f1a:	2305      	movs	r3, #5
     f1c:	e017      	b.n	f4e <adc_read_buffer_job+0x56>
	}

	module_inst->job_status = STATUS_BUSY;
     f1e:	68fb      	ldr	r3, [r7, #12]
     f20:	2205      	movs	r2, #5
     f22:	771a      	strb	r2, [r3, #28]
	module_inst->remaining_conversions = samples;
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	1dba      	adds	r2, r7, #6
     f28:	8812      	ldrh	r2, [r2, #0]
     f2a:	831a      	strh	r2, [r3, #24]
	module_inst->job_buffer = buffer;
     f2c:	68fb      	ldr	r3, [r7, #12]
     f2e:	68ba      	ldr	r2, [r7, #8]
     f30:	615a      	str	r2, [r3, #20]

	adc_enable_interrupt(module_inst, ADC_INTERRUPT_RESULT_READY);
     f32:	68fb      	ldr	r3, [r7, #12]
     f34:	2101      	movs	r1, #1
     f36:	0018      	movs	r0, r3
     f38:	4b07      	ldr	r3, [pc, #28]	; (f58 <adc_read_buffer_job+0x60>)
     f3a:	4798      	blx	r3

	if(module_inst->software_trigger == true) {
     f3c:	68fb      	ldr	r3, [r7, #12]
     f3e:	7f5b      	ldrb	r3, [r3, #29]
     f40:	2b00      	cmp	r3, #0
     f42:	d003      	beq.n	f4c <adc_read_buffer_job+0x54>
		adc_start_conversion(module_inst);
     f44:	68fb      	ldr	r3, [r7, #12]
     f46:	0018      	movs	r0, r3
     f48:	4b04      	ldr	r3, [pc, #16]	; (f5c <adc_read_buffer_job+0x64>)
     f4a:	4798      	blx	r3
	}

	return STATUS_OK;
     f4c:	2300      	movs	r3, #0
}
     f4e:	0018      	movs	r0, r3
     f50:	46bd      	mov	sp, r7
     f52:	b004      	add	sp, #16
     f54:	bd80      	pop	{r7, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00000d61 	.word	0x00000d61
     f5c:	00000d19 	.word	0x00000d19

00000f60 <adc_get_job_status>:
 * \return Status of the job.
 */
enum status_code adc_get_job_status(
		struct adc_module *module_inst,
		enum adc_job_type type)
{
     f60:	b580      	push	{r7, lr}
     f62:	b082      	sub	sp, #8
     f64:	af00      	add	r7, sp, #0
     f66:	6078      	str	r0, [r7, #4]
     f68:	000a      	movs	r2, r1
     f6a:	1cfb      	adds	r3, r7, #3
     f6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	if (type == ADC_JOB_READ_BUFFER ) {
     f6e:	1cfb      	adds	r3, r7, #3
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d103      	bne.n	f7e <adc_get_job_status+0x1e>
		return module_inst->job_status;
     f76:	687b      	ldr	r3, [r7, #4]
     f78:	7f1b      	ldrb	r3, [r3, #28]
     f7a:	b2db      	uxtb	r3, r3
     f7c:	e000      	b.n	f80 <adc_get_job_status+0x20>
	} else {
		return STATUS_ERR_INVALID_ARG;
     f7e:	2317      	movs	r3, #23
	}
}
     f80:	0018      	movs	r0, r3
     f82:	46bd      	mov	sp, r7
     f84:	b002      	add	sp, #8
     f86:	bd80      	pop	{r7, pc}

00000f88 <system_apb_clock_set_mask>:
{
     f88:	b580      	push	{r7, lr}
     f8a:	b082      	sub	sp, #8
     f8c:	af00      	add	r7, sp, #0
     f8e:	0002      	movs	r2, r0
     f90:	6039      	str	r1, [r7, #0]
     f92:	1dfb      	adds	r3, r7, #7
     f94:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     f96:	1dfb      	adds	r3, r7, #7
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b04      	cmp	r3, #4
     f9c:	d827      	bhi.n	fee <system_apb_clock_set_mask+0x66>
     f9e:	009a      	lsls	r2, r3, #2
     fa0:	4b16      	ldr	r3, [pc, #88]	; (ffc <system_apb_clock_set_mask+0x74>)
     fa2:	18d3      	adds	r3, r2, r3
     fa4:	681b      	ldr	r3, [r3, #0]
     fa6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
     fa8:	4b15      	ldr	r3, [pc, #84]	; (1000 <system_apb_clock_set_mask+0x78>)
     faa:	4a15      	ldr	r2, [pc, #84]	; (1000 <system_apb_clock_set_mask+0x78>)
     fac:	6951      	ldr	r1, [r2, #20]
     fae:	683a      	ldr	r2, [r7, #0]
     fb0:	430a      	orrs	r2, r1
     fb2:	615a      	str	r2, [r3, #20]
			break;
     fb4:	e01d      	b.n	ff2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
     fb6:	4b12      	ldr	r3, [pc, #72]	; (1000 <system_apb_clock_set_mask+0x78>)
     fb8:	4a11      	ldr	r2, [pc, #68]	; (1000 <system_apb_clock_set_mask+0x78>)
     fba:	6991      	ldr	r1, [r2, #24]
     fbc:	683a      	ldr	r2, [r7, #0]
     fbe:	430a      	orrs	r2, r1
     fc0:	619a      	str	r2, [r3, #24]
			break;
     fc2:	e016      	b.n	ff2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
     fc4:	4b0e      	ldr	r3, [pc, #56]	; (1000 <system_apb_clock_set_mask+0x78>)
     fc6:	4a0e      	ldr	r2, [pc, #56]	; (1000 <system_apb_clock_set_mask+0x78>)
     fc8:	69d1      	ldr	r1, [r2, #28]
     fca:	683a      	ldr	r2, [r7, #0]
     fcc:	430a      	orrs	r2, r1
     fce:	61da      	str	r2, [r3, #28]
			break;
     fd0:	e00f      	b.n	ff2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
     fd2:	4b0b      	ldr	r3, [pc, #44]	; (1000 <system_apb_clock_set_mask+0x78>)
     fd4:	4a0a      	ldr	r2, [pc, #40]	; (1000 <system_apb_clock_set_mask+0x78>)
     fd6:	6a11      	ldr	r1, [r2, #32]
     fd8:	683a      	ldr	r2, [r7, #0]
     fda:	430a      	orrs	r2, r1
     fdc:	621a      	str	r2, [r3, #32]
			break;
     fde:	e008      	b.n	ff2 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
     fe0:	4b07      	ldr	r3, [pc, #28]	; (1000 <system_apb_clock_set_mask+0x78>)
     fe2:	4a07      	ldr	r2, [pc, #28]	; (1000 <system_apb_clock_set_mask+0x78>)
     fe4:	6a51      	ldr	r1, [r2, #36]	; 0x24
     fe6:	683a      	ldr	r2, [r7, #0]
     fe8:	430a      	orrs	r2, r1
     fea:	625a      	str	r2, [r3, #36]	; 0x24
			break;
     fec:	e001      	b.n	ff2 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
     fee:	2317      	movs	r3, #23
     ff0:	e000      	b.n	ff4 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
     ff2:	2300      	movs	r3, #0
}
     ff4:	0018      	movs	r0, r3
     ff6:	46bd      	mov	sp, r7
     ff8:	b002      	add	sp, #8
     ffa:	bd80      	pop	{r7, pc}
     ffc:	0002aa6c 	.word	0x0002aa6c
    1000:	40000400 	.word	0x40000400

00001004 <aes_get_config_defaults>:
 *
 *  \param[out] config Pointer to an AES configuration structure
 */
void aes_get_config_defaults(
		struct aes_config *const config)
{
    1004:	b580      	push	{r7, lr}
    1006:	b082      	sub	sp, #8
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	2201      	movs	r2, #1
    1010:	701a      	strb	r2, [r3, #0]
	config->key_size = AES_KEY_SIZE_128;
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	2200      	movs	r2, #0
    1016:	705a      	strb	r2, [r3, #1]
	config->start_mode = AES_MANUAL_START;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2200      	movs	r2, #0
    101c:	709a      	strb	r2, [r3, #2]
	config->opmode= AES_ECB_MODE;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	2200      	movs	r2, #0
    1022:	70da      	strb	r2, [r3, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    1024:	687b      	ldr	r3, [r7, #4]
    1026:	2200      	movs	r2, #0
    1028:	711a      	strb	r2, [r3, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	220f      	movs	r2, #15
    102e:	715a      	strb	r2, [r3, #5]
	config->enable_xor_key = false;
    1030:	687b      	ldr	r3, [r7, #4]
    1032:	2200      	movs	r2, #0
    1034:	719a      	strb	r2, [r3, #6]
	config->enable_key_gen = false;
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	2200      	movs	r2, #0
    103a:	71da      	strb	r2, [r3, #7]
	config->lod = false;
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	2200      	movs	r2, #0
    1040:	721a      	strb	r2, [r3, #8]
}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	46bd      	mov	sp, r7
    1046:	b002      	add	sp, #8
    1048:	bd80      	pop	{r7, pc}
	...

0000104c <aes_init>:
 */
void aes_init(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    104c:	b580      	push	{r7, lr}
    104e:	b084      	sub	sp, #16
    1050:	af00      	add	r7, sp, #0
    1052:	60f8      	str	r0, [r7, #12]
    1054:	60b9      	str	r1, [r7, #8]
    1056:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(config);
	Assert(module);

	/* Enable clock for AES */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_AES);
    1058:	2380      	movs	r3, #128	; 0x80
    105a:	019b      	lsls	r3, r3, #6
    105c:	0019      	movs	r1, r3
    105e:	2002      	movs	r0, #2
    1060:	4b07      	ldr	r3, [pc, #28]	; (1080 <aes_init+0x34>)
    1062:	4798      	blx	r3

	/* Perform a software reset */
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    1064:	68bb      	ldr	r3, [r7, #8]
    1066:	2201      	movs	r2, #1
    1068:	601a      	str	r2, [r3, #0]

	/* Initialize the AES with new configurations */
	aes_set_config(module,hw, config);
    106a:	687a      	ldr	r2, [r7, #4]
    106c:	68b9      	ldr	r1, [r7, #8]
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	0018      	movs	r0, r3
    1072:	4b04      	ldr	r3, [pc, #16]	; (1084 <aes_init+0x38>)
    1074:	4798      	blx	r3
}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	46bd      	mov	sp, r7
    107a:	b004      	add	sp, #16
    107c:	bd80      	pop	{r7, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	00000f89 	.word	0x00000f89
    1084:	000010d9 	.word	0x000010d9

00001088 <aes_enable>:
 * \brief Enable the AES module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void aes_enable(struct aes_module *const module)
{
    1088:	b580      	push	{r7, lr}
    108a:	b082      	sub	sp, #8
    108c:	af00      	add	r7, sp, #0
    108e:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    1090:	687b      	ldr	r3, [r7, #4]
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	687a      	ldr	r2, [r7, #4]
    1096:	6812      	ldr	r2, [r2, #0]
    1098:	6812      	ldr	r2, [r2, #0]
    109a:	2102      	movs	r1, #2
    109c:	430a      	orrs	r2, r1
    109e:	601a      	str	r2, [r3, #0]

}
    10a0:	46c0      	nop			; (mov r8, r8)
    10a2:	46bd      	mov	sp, r7
    10a4:	b002      	add	sp, #8
    10a6:	bd80      	pop	{r7, pc}

000010a8 <aes_disable>:
/**
 * \brief Disable the AES module.
 * \param[in] module  Pointer to the software instance struct
 */
void aes_disable(struct aes_module *const module)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    10b0:	687b      	ldr	r3, [r7, #4]
    10b2:	681b      	ldr	r3, [r3, #0]
    10b4:	2203      	movs	r2, #3
    10b6:	715a      	strb	r2, [r3, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    10b8:	687b      	ldr	r3, [r7, #4]
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	2203      	movs	r2, #3
    10be:	71da      	strb	r2, [r3, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	687a      	ldr	r2, [r7, #4]
    10c6:	6812      	ldr	r2, [r2, #0]
    10c8:	6812      	ldr	r2, [r2, #0]
    10ca:	2102      	movs	r1, #2
    10cc:	438a      	bics	r2, r1
    10ce:	601a      	str	r2, [r3, #0]
}
    10d0:	46c0      	nop			; (mov r8, r8)
    10d2:	46bd      	mov	sp, r7
    10d4:	b002      	add	sp, #8
    10d6:	bd80      	pop	{r7, pc}

000010d8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    10d8:	b580      	push	{r7, lr}
    10da:	b086      	sub	sp, #24
    10dc:	af00      	add	r7, sp, #0
    10de:	60f8      	str	r0, [r7, #12]
    10e0:	60b9      	str	r1, [r7, #8]
    10e2:	607a      	str	r2, [r7, #4]
	uint32_t ul_mode = 0;
    10e4:	2300      	movs	r3, #0
    10e6:	617b      	str	r3, [r7, #20]
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	78da      	ldrb	r2, [r3, #3]
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	711a      	strb	r2, [r3, #4]
	module->hw = hw;
    10f0:	68fb      	ldr	r3, [r7, #12]
    10f2:	68ba      	ldr	r2, [r7, #8]
    10f4:	601a      	str	r2, [r3, #0]
	module->key_size = config->key_size;
    10f6:	687b      	ldr	r3, [r7, #4]
    10f8:	785a      	ldrb	r2, [r3, #1]
    10fa:	68fb      	ldr	r3, [r7, #12]
    10fc:	715a      	strb	r2, [r3, #5]
	module->cfb_size = config->cfb_size;
    10fe:	687b      	ldr	r3, [r7, #4]
    1100:	791a      	ldrb	r2, [r3, #4]
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	719a      	strb	r2, [r3, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    1106:	687b      	ldr	r3, [r7, #4]
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	029a      	lsls	r2, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	789b      	ldrb	r3, [r3, #2]
    1110:	02db      	lsls	r3, r3, #11
    1112:	431a      	orrs	r2, r3
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    1114:	687b      	ldr	r3, [r7, #4]
    1116:	785b      	ldrb	r3, [r3, #1]
    1118:	021b      	lsls	r3, r3, #8
    111a:	431a      	orrs	r2, r3
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	78db      	ldrb	r3, [r3, #3]
    1120:	009b      	lsls	r3, r3, #2
    1122:	431a      	orrs	r2, r3
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    1124:	687b      	ldr	r3, [r7, #4]
    1126:	791b      	ldrb	r3, [r3, #4]
    1128:	015b      	lsls	r3, r3, #5
    112a:	4313      	orrs	r3, r2
    112c:	001a      	movs	r2, r3
			 | (AES_CTRLA_CTYPE(config->ctype))
    112e:	687b      	ldr	r3, [r7, #4]
    1130:	795b      	ldrb	r3, [r3, #5]
    1132:	041b      	lsls	r3, r3, #16
    1134:	0019      	movs	r1, r3
    1136:	23f0      	movs	r3, #240	; 0xf0
    1138:	031b      	lsls	r3, r3, #12
    113a:	400b      	ands	r3, r1
    113c:	4313      	orrs	r3, r2
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    113e:	687a      	ldr	r2, [r7, #4]
    1140:	7992      	ldrb	r2, [r2, #6]
    1142:	0392      	lsls	r2, r2, #14
    1144:	4313      	orrs	r3, r2
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    1146:	687a      	ldr	r2, [r7, #4]
    1148:	79d2      	ldrb	r2, [r2, #7]
    114a:	0352      	lsls	r2, r2, #13
    114c:	4313      	orrs	r3, r2
			 | (config->lod << AES_CTRLA_LOD_Pos);
    114e:	687a      	ldr	r2, [r7, #4]
    1150:	7a12      	ldrb	r2, [r2, #8]
    1152:	0312      	lsls	r2, r2, #12
    1154:	4313      	orrs	r3, r2
	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    1156:	697a      	ldr	r2, [r7, #20]
    1158:	4313      	orrs	r3, r2
    115a:	617b      	str	r3, [r7, #20]
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    115c:	68bb      	ldr	r3, [r7, #8]
    115e:	681b      	ldr	r3, [r3, #0]
    1160:	2202      	movs	r2, #2
    1162:	4013      	ands	r3, r2
    1164:	d00b      	beq.n	117e <aes_set_config+0xa6>
		aes_disable(module);
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	0018      	movs	r0, r3
    116a:	4b08      	ldr	r3, [pc, #32]	; (118c <aes_set_config+0xb4>)
    116c:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    116e:	68bb      	ldr	r3, [r7, #8]
    1170:	697a      	ldr	r2, [r7, #20]
    1172:	601a      	str	r2, [r3, #0]
		aes_enable(module);
    1174:	68fb      	ldr	r3, [r7, #12]
    1176:	0018      	movs	r0, r3
    1178:	4b05      	ldr	r3, [pc, #20]	; (1190 <aes_set_config+0xb8>)
    117a:	4798      	blx	r3
	} else {
		hw->CTRLA.reg = ul_mode;
	}
}
    117c:	e002      	b.n	1184 <aes_set_config+0xac>
		hw->CTRLA.reg = ul_mode;
    117e:	68bb      	ldr	r3, [r7, #8]
    1180:	697a      	ldr	r2, [r7, #20]
    1182:	601a      	str	r2, [r3, #0]
}
    1184:	46c0      	nop			; (mov r8, r8)
    1186:	46bd      	mov	sp, r7
    1188:	b006      	add	sp, #24
    118a:	bd80      	pop	{r7, pc}
    118c:	000010a9 	.word	0x000010a9
    1190:	00001089 	.word	0x00001089

00001194 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    1194:	b580      	push	{r7, lr}
    1196:	b084      	sub	sp, #16
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
    119c:	6039      	str	r1, [r7, #0]
	uint32_t i, key_length = 0;
    119e:	2300      	movs	r3, #0
    11a0:	60bb      	str	r3, [r7, #8]
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    11a2:	687b      	ldr	r3, [r7, #4]
    11a4:	795b      	ldrb	r3, [r3, #5]
    11a6:	2b01      	cmp	r3, #1
    11a8:	d007      	beq.n	11ba <aes_write_key+0x26>
    11aa:	2b02      	cmp	r3, #2
    11ac:	d008      	beq.n	11c0 <aes_write_key+0x2c>
    11ae:	2b00      	cmp	r3, #0
    11b0:	d000      	beq.n	11b4 <aes_write_key+0x20>
	case AES_KEY_SIZE_256:
		key_length = 8;
		break;

	default:
		break;
    11b2:	e008      	b.n	11c6 <aes_write_key+0x32>
		key_length = 4;
    11b4:	2304      	movs	r3, #4
    11b6:	60bb      	str	r3, [r7, #8]
		break;
    11b8:	e005      	b.n	11c6 <aes_write_key+0x32>
		key_length = 6;
    11ba:	2306      	movs	r3, #6
    11bc:	60bb      	str	r3, [r7, #8]
		break;
    11be:	e002      	b.n	11c6 <aes_write_key+0x32>
		key_length = 8;
    11c0:	2308      	movs	r3, #8
    11c2:	60bb      	str	r3, [r7, #8]
		break;
    11c4:	46c0      	nop			; (mov r8, r8)
	}

	for (i = 0; i < key_length; i++) {
    11c6:	2300      	movs	r3, #0
    11c8:	60fb      	str	r3, [r7, #12]
    11ca:	e00f      	b.n	11ec <aes_write_key+0x58>
		module->hw->KEYWORD[i].reg = *key;
    11cc:	687b      	ldr	r3, [r7, #4]
    11ce:	6819      	ldr	r1, [r3, #0]
    11d0:	683b      	ldr	r3, [r7, #0]
    11d2:	681a      	ldr	r2, [r3, #0]
    11d4:	68fb      	ldr	r3, [r7, #12]
    11d6:	3302      	adds	r3, #2
    11d8:	009b      	lsls	r3, r3, #2
    11da:	18cb      	adds	r3, r1, r3
    11dc:	3304      	adds	r3, #4
    11de:	601a      	str	r2, [r3, #0]
		key++;
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	3304      	adds	r3, #4
    11e4:	603b      	str	r3, [r7, #0]
	for (i = 0; i < key_length; i++) {
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	3301      	adds	r3, #1
    11ea:	60fb      	str	r3, [r7, #12]
    11ec:	68fa      	ldr	r2, [r7, #12]
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	429a      	cmp	r2, r3
    11f2:	d3eb      	bcc.n	11cc <aes_write_key+0x38>
	}
}
    11f4:	46c0      	nop			; (mov r8, r8)
    11f6:	46bd      	mov	sp, r7
    11f8:	b004      	add	sp, #16
    11fa:	bd80      	pop	{r7, pc}

000011fc <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    11fc:	b580      	push	{r7, lr}
    11fe:	b084      	sub	sp, #16
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	6039      	str	r1, [r7, #0]
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	2200      	movs	r2, #0
    120c:	721a      	strb	r2, [r3, #8]
	if (module->opmode == AES_CFB_MODE
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	791b      	ldrb	r3, [r3, #4]
    1212:	2b03      	cmp	r3, #3
    1214:	d115      	bne.n	1242 <aes_write_input_data+0x46>
		&& module->cfb_size == AES_CFB_SIZE_64){
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	799b      	ldrb	r3, [r3, #6]
    121a:	2b01      	cmp	r3, #1
    121c:	d111      	bne.n	1242 <aes_write_input_data+0x46>
		for (i = 0; i < 2; i++) {
    121e:	2300      	movs	r3, #0
    1220:	60fb      	str	r3, [r7, #12]
    1222:	e00a      	b.n	123a <aes_write_input_data+0x3e>
			module->hw->INDATA.reg = *input_data_buffer;
    1224:	687b      	ldr	r3, [r7, #4]
    1226:	681b      	ldr	r3, [r3, #0]
    1228:	683a      	ldr	r2, [r7, #0]
    122a:	6812      	ldr	r2, [r2, #0]
    122c:	639a      	str	r2, [r3, #56]	; 0x38
			input_data_buffer++;
    122e:	683b      	ldr	r3, [r7, #0]
    1230:	3304      	adds	r3, #4
    1232:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 2; i++) {
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	3301      	adds	r3, #1
    1238:	60fb      	str	r3, [r7, #12]
    123a:	68fb      	ldr	r3, [r7, #12]
    123c:	2b01      	cmp	r3, #1
    123e:	d9f1      	bls.n	1224 <aes_write_input_data+0x28>
	if (module->opmode == AES_CFB_MODE
    1240:	e022      	b.n	1288 <aes_write_input_data+0x8c>
		}
	} else if (module->opmode == AES_CFB_MODE
    1242:	687b      	ldr	r3, [r7, #4]
    1244:	791b      	ldrb	r3, [r3, #4]
    1246:	2b03      	cmp	r3, #3
    1248:	d10d      	bne.n	1266 <aes_write_input_data+0x6a>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	799b      	ldrb	r3, [r3, #6]
    124e:	2b02      	cmp	r3, #2
    1250:	d003      	beq.n	125a <aes_write_input_data+0x5e>
    1252:	687b      	ldr	r3, [r7, #4]
    1254:	799b      	ldrb	r3, [r3, #6]
    1256:	2b03      	cmp	r3, #3
    1258:	d105      	bne.n	1266 <aes_write_input_data+0x6a>
		module->hw->INDATA.reg = *input_data_buffer;
    125a:	687b      	ldr	r3, [r7, #4]
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	683a      	ldr	r2, [r7, #0]
    1260:	6812      	ldr	r2, [r2, #0]
    1262:	639a      	str	r2, [r3, #56]	; 0x38
    1264:	e010      	b.n	1288 <aes_write_input_data+0x8c>
	} else {
		for (i = 0; i < 4; i++) {
    1266:	2300      	movs	r3, #0
    1268:	60fb      	str	r3, [r7, #12]
    126a:	e00a      	b.n	1282 <aes_write_input_data+0x86>
			module->hw->INDATA.reg = *input_data_buffer;
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	681b      	ldr	r3, [r3, #0]
    1270:	683a      	ldr	r2, [r7, #0]
    1272:	6812      	ldr	r2, [r2, #0]
    1274:	639a      	str	r2, [r3, #56]	; 0x38
			input_data_buffer++;
    1276:	683b      	ldr	r3, [r7, #0]
    1278:	3304      	adds	r3, #4
    127a:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 4; i++) {
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	3301      	adds	r3, #1
    1280:	60fb      	str	r3, [r7, #12]
    1282:	68fb      	ldr	r3, [r7, #12]
    1284:	2b03      	cmp	r3, #3
    1286:	d9f1      	bls.n	126c <aes_write_input_data+0x70>
		}
	}
}
    1288:	46c0      	nop			; (mov r8, r8)
    128a:	46bd      	mov	sp, r7
    128c:	b004      	add	sp, #16
    128e:	bd80      	pop	{r7, pc}

00001290 <aes_read_output_data>:
 * \param[in] output_data_buffer Pointer to an output buffer
 */
void aes_read_output_data(
		struct aes_module *const module,
		uint32_t *output_data_buffer)
{
    1290:	b580      	push	{r7, lr}
    1292:	b084      	sub	sp, #16
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	6039      	str	r1, [r7, #0]
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	2200      	movs	r2, #0
    12a0:	721a      	strb	r2, [r3, #8]
	if (module->opmode == AES_CFB_MODE
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	791b      	ldrb	r3, [r3, #4]
    12a6:	2b03      	cmp	r3, #3
    12a8:	d115      	bne.n	12d6 <aes_read_output_data+0x46>
		&& module->cfb_size == AES_CFB_SIZE_64){
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	799b      	ldrb	r3, [r3, #6]
    12ae:	2b01      	cmp	r3, #1
    12b0:	d111      	bne.n	12d6 <aes_read_output_data+0x46>
		for (i = 0; i < 2; i++) {
    12b2:	2300      	movs	r3, #0
    12b4:	60fb      	str	r3, [r7, #12]
    12b6:	e00a      	b.n	12ce <aes_read_output_data+0x3e>
			*output_data_buffer = module->hw->INDATA.reg;
    12b8:	687b      	ldr	r3, [r7, #4]
    12ba:	681b      	ldr	r3, [r3, #0]
    12bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	601a      	str	r2, [r3, #0]
			output_data_buffer++;
    12c2:	683b      	ldr	r3, [r7, #0]
    12c4:	3304      	adds	r3, #4
    12c6:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 2; i++) {
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	3301      	adds	r3, #1
    12cc:	60fb      	str	r3, [r7, #12]
    12ce:	68fb      	ldr	r3, [r7, #12]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d9f1      	bls.n	12b8 <aes_read_output_data+0x28>
	if (module->opmode == AES_CFB_MODE
    12d4:	e022      	b.n	131c <aes_read_output_data+0x8c>
		}
	} else if (module->opmode == AES_CFB_MODE
    12d6:	687b      	ldr	r3, [r7, #4]
    12d8:	791b      	ldrb	r3, [r3, #4]
    12da:	2b03      	cmp	r3, #3
    12dc:	d10d      	bne.n	12fa <aes_read_output_data+0x6a>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	799b      	ldrb	r3, [r3, #6]
    12e2:	2b02      	cmp	r3, #2
    12e4:	d003      	beq.n	12ee <aes_read_output_data+0x5e>
    12e6:	687b      	ldr	r3, [r7, #4]
    12e8:	799b      	ldrb	r3, [r3, #6]
    12ea:	2b03      	cmp	r3, #3
    12ec:	d105      	bne.n	12fa <aes_read_output_data+0x6a>
		*output_data_buffer = module->hw->INDATA.reg;
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    12f4:	683b      	ldr	r3, [r7, #0]
    12f6:	601a      	str	r2, [r3, #0]
    12f8:	e010      	b.n	131c <aes_read_output_data+0x8c>
	} else {
		for (i = 0; i < 4; i++) {
    12fa:	2300      	movs	r3, #0
    12fc:	60fb      	str	r3, [r7, #12]
    12fe:	e00a      	b.n	1316 <aes_read_output_data+0x86>
			*output_data_buffer = module->hw->INDATA.reg;
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	601a      	str	r2, [r3, #0]
			output_data_buffer++;
    130a:	683b      	ldr	r3, [r7, #0]
    130c:	3304      	adds	r3, #4
    130e:	603b      	str	r3, [r7, #0]
		for (i = 0; i < 4; i++) {
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	3301      	adds	r3, #1
    1314:	60fb      	str	r3, [r7, #12]
    1316:	68fb      	ldr	r3, [r7, #12]
    1318:	2b03      	cmp	r3, #3
    131a:	d9f1      	bls.n	1300 <aes_read_output_data+0x70>
		}
	}
}
    131c:	46c0      	nop			; (mov r8, r8)
    131e:	46bd      	mov	sp, r7
    1320:	b004      	add	sp, #16
    1322:	bd80      	pop	{r7, pc}

00001324 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    1324:	b580      	push	{r7, lr}
    1326:	b084      	sub	sp, #16
    1328:	af00      	add	r7, sp, #0
    132a:	0002      	movs	r2, r0
    132c:	1dfb      	adds	r3, r7, #7
    132e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    1330:	230f      	movs	r3, #15
    1332:	18fb      	adds	r3, r7, r3
    1334:	1dfa      	adds	r2, r7, #7
    1336:	7812      	ldrb	r2, [r2, #0]
    1338:	0952      	lsrs	r2, r2, #5
    133a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    133c:	230f      	movs	r3, #15
    133e:	18fb      	adds	r3, r7, r3
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	2b00      	cmp	r3, #0
    1344:	d10c      	bne.n	1360 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1346:	4b09      	ldr	r3, [pc, #36]	; (136c <_extint_get_eic_from_channel+0x48>)
    1348:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    134a:	230f      	movs	r3, #15
    134c:	18fb      	adds	r3, r7, r3
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	009b      	lsls	r3, r3, #2
    1352:	2210      	movs	r2, #16
    1354:	4694      	mov	ip, r2
    1356:	44bc      	add	ip, r7
    1358:	4463      	add	r3, ip
    135a:	3b08      	subs	r3, #8
    135c:	681b      	ldr	r3, [r3, #0]
    135e:	e000      	b.n	1362 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    1360:	2300      	movs	r3, #0
	}
}
    1362:	0018      	movs	r0, r3
    1364:	46bd      	mov	sp, r7
    1366:	b004      	add	sp, #16
    1368:	bd80      	pop	{r7, pc}
    136a:	46c0      	nop			; (mov r8, r8)
    136c:	40002400 	.word	0x40002400

00001370 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	0002      	movs	r2, r0
    1378:	1dfb      	adds	r3, r7, #7
    137a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    137c:	1dfb      	adds	r3, r7, #7
    137e:	781b      	ldrb	r3, [r3, #0]
    1380:	0018      	movs	r0, r3
    1382:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <extint_chan_is_detected+0x40>)
    1384:	4798      	blx	r3
    1386:	0003      	movs	r3, r0
    1388:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    138a:	1dfb      	adds	r3, r7, #7
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	221f      	movs	r2, #31
    1390:	4013      	ands	r3, r2
    1392:	2201      	movs	r2, #1
    1394:	409a      	lsls	r2, r3
    1396:	0013      	movs	r3, r2
    1398:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	695b      	ldr	r3, [r3, #20]
    139e:	68ba      	ldr	r2, [r7, #8]
    13a0:	4013      	ands	r3, r2
    13a2:	1e5a      	subs	r2, r3, #1
    13a4:	4193      	sbcs	r3, r2
    13a6:	b2db      	uxtb	r3, r3
}
    13a8:	0018      	movs	r0, r3
    13aa:	46bd      	mov	sp, r7
    13ac:	b004      	add	sp, #16
    13ae:	bd80      	pop	{r7, pc}
    13b0:	00001325 	.word	0x00001325

000013b4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b084      	sub	sp, #16
    13b8:	af00      	add	r7, sp, #0
    13ba:	0002      	movs	r2, r0
    13bc:	1dfb      	adds	r3, r7, #7
    13be:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    13c0:	1dfb      	adds	r3, r7, #7
    13c2:	781b      	ldrb	r3, [r3, #0]
    13c4:	0018      	movs	r0, r3
    13c6:	4b09      	ldr	r3, [pc, #36]	; (13ec <extint_chan_clear_detected+0x38>)
    13c8:	4798      	blx	r3
    13ca:	0003      	movs	r3, r0
    13cc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    13ce:	1dfb      	adds	r3, r7, #7
    13d0:	781b      	ldrb	r3, [r3, #0]
    13d2:	221f      	movs	r2, #31
    13d4:	4013      	ands	r3, r2
    13d6:	2201      	movs	r2, #1
    13d8:	409a      	lsls	r2, r3
    13da:	0013      	movs	r3, r2
    13dc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	68ba      	ldr	r2, [r7, #8]
    13e2:	615a      	str	r2, [r3, #20]
}
    13e4:	46c0      	nop			; (mov r8, r8)
    13e6:	46bd      	mov	sp, r7
    13e8:	b004      	add	sp, #16
    13ea:	bd80      	pop	{r7, pc}
    13ec:	00001325 	.word	0x00001325

000013f0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    13f0:	b580      	push	{r7, lr}
    13f2:	b082      	sub	sp, #8
    13f4:	af00      	add	r7, sp, #0
    13f6:	6078      	str	r0, [r7, #4]
    13f8:	0008      	movs	r0, r1
    13fa:	0011      	movs	r1, r2
    13fc:	1cfb      	adds	r3, r7, #3
    13fe:	1c02      	adds	r2, r0, #0
    1400:	701a      	strb	r2, [r3, #0]
    1402:	1cbb      	adds	r3, r7, #2
    1404:	1c0a      	adds	r2, r1, #0
    1406:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    1408:	1cbb      	adds	r3, r7, #2
    140a:	781b      	ldrb	r3, [r3, #0]
    140c:	2b00      	cmp	r3, #0
    140e:	d001      	beq.n	1414 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1410:	2317      	movs	r3, #23
    1412:	e019      	b.n	1448 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    1414:	1cfb      	adds	r3, r7, #3
    1416:	781a      	ldrb	r2, [r3, #0]
    1418:	4b0d      	ldr	r3, [pc, #52]	; (1450 <extint_register_callback+0x60>)
    141a:	0092      	lsls	r2, r2, #2
    141c:	58d3      	ldr	r3, [r2, r3]
    141e:	2b00      	cmp	r3, #0
    1420:	d107      	bne.n	1432 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    1422:	1cfb      	adds	r3, r7, #3
    1424:	781a      	ldrb	r2, [r3, #0]
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <extint_register_callback+0x60>)
    1428:	0092      	lsls	r2, r2, #2
    142a:	6879      	ldr	r1, [r7, #4]
    142c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    142e:	2300      	movs	r3, #0
    1430:	e00a      	b.n	1448 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    1432:	1cfb      	adds	r3, r7, #3
    1434:	781a      	ldrb	r2, [r3, #0]
    1436:	4b06      	ldr	r3, [pc, #24]	; (1450 <extint_register_callback+0x60>)
    1438:	0092      	lsls	r2, r2, #2
    143a:	58d2      	ldr	r2, [r2, r3]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	429a      	cmp	r2, r3
    1440:	d101      	bne.n	1446 <extint_register_callback+0x56>
		return STATUS_OK;
    1442:	2300      	movs	r3, #0
    1444:	e000      	b.n	1448 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    1446:	231d      	movs	r3, #29
}
    1448:	0018      	movs	r0, r3
    144a:	46bd      	mov	sp, r7
    144c:	b002      	add	sp, #8
    144e:	bd80      	pop	{r7, pc}
    1450:	200011cc 	.word	0x200011cc

00001454 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	0002      	movs	r2, r0
    145c:	1dfb      	adds	r3, r7, #7
    145e:	701a      	strb	r2, [r3, #0]
    1460:	1dbb      	adds	r3, r7, #6
    1462:	1c0a      	adds	r2, r1, #0
    1464:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    1466:	1dbb      	adds	r3, r7, #6
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	2b00      	cmp	r3, #0
    146c:	d10e      	bne.n	148c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    146e:	1dfb      	adds	r3, r7, #7
    1470:	781b      	ldrb	r3, [r3, #0]
    1472:	0018      	movs	r0, r3
    1474:	4b08      	ldr	r3, [pc, #32]	; (1498 <extint_chan_enable_callback+0x44>)
    1476:	4798      	blx	r3
    1478:	0003      	movs	r3, r0
    147a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    147c:	1dfb      	adds	r3, r7, #7
    147e:	781b      	ldrb	r3, [r3, #0]
    1480:	2201      	movs	r2, #1
    1482:	409a      	lsls	r2, r3
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	611a      	str	r2, [r3, #16]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1488:	2300      	movs	r3, #0
    148a:	e000      	b.n	148e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    148c:	2317      	movs	r3, #23
}
    148e:	0018      	movs	r0, r3
    1490:	46bd      	mov	sp, r7
    1492:	b004      	add	sp, #16
    1494:	bd80      	pop	{r7, pc}
    1496:	46c0      	nop			; (mov r8, r8)
    1498:	00001325 	.word	0x00001325

0000149c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    149c:	b580      	push	{r7, lr}
    149e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14a0:	4b15      	ldr	r3, [pc, #84]	; (14f8 <EIC_Handler+0x5c>)
    14a2:	2200      	movs	r2, #0
    14a4:	701a      	strb	r2, [r3, #0]
    14a6:	e020      	b.n	14ea <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    14a8:	4b13      	ldr	r3, [pc, #76]	; (14f8 <EIC_Handler+0x5c>)
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	0018      	movs	r0, r3
    14ae:	4b13      	ldr	r3, [pc, #76]	; (14fc <EIC_Handler+0x60>)
    14b0:	4798      	blx	r3
    14b2:	1e03      	subs	r3, r0, #0
    14b4:	d013      	beq.n	14de <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    14b6:	4b10      	ldr	r3, [pc, #64]	; (14f8 <EIC_Handler+0x5c>)
    14b8:	781b      	ldrb	r3, [r3, #0]
    14ba:	0018      	movs	r0, r3
    14bc:	4b10      	ldr	r3, [pc, #64]	; (1500 <EIC_Handler+0x64>)
    14be:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    14c0:	4b0d      	ldr	r3, [pc, #52]	; (14f8 <EIC_Handler+0x5c>)
    14c2:	781b      	ldrb	r3, [r3, #0]
    14c4:	001a      	movs	r2, r3
    14c6:	4b0f      	ldr	r3, [pc, #60]	; (1504 <EIC_Handler+0x68>)
    14c8:	0092      	lsls	r2, r2, #2
    14ca:	58d3      	ldr	r3, [r2, r3]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d006      	beq.n	14de <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    14d0:	4b09      	ldr	r3, [pc, #36]	; (14f8 <EIC_Handler+0x5c>)
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	001a      	movs	r2, r3
    14d6:	4b0b      	ldr	r3, [pc, #44]	; (1504 <EIC_Handler+0x68>)
    14d8:	0092      	lsls	r2, r2, #2
    14da:	58d3      	ldr	r3, [r2, r3]
    14dc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    14de:	4b06      	ldr	r3, [pc, #24]	; (14f8 <EIC_Handler+0x5c>)
    14e0:	781b      	ldrb	r3, [r3, #0]
    14e2:	3301      	adds	r3, #1
    14e4:	b2da      	uxtb	r2, r3
    14e6:	4b04      	ldr	r3, [pc, #16]	; (14f8 <EIC_Handler+0x5c>)
    14e8:	701a      	strb	r2, [r3, #0]
    14ea:	4b03      	ldr	r3, [pc, #12]	; (14f8 <EIC_Handler+0x5c>)
    14ec:	781b      	ldrb	r3, [r3, #0]
    14ee:	2b0f      	cmp	r3, #15
    14f0:	d9da      	bls.n	14a8 <EIC_Handler+0xc>
			}
		}
	}
}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	46bd      	mov	sp, r7
    14f6:	bd80      	pop	{r7, pc}
    14f8:	200011c8 	.word	0x200011c8
    14fc:	00001371 	.word	0x00001371
    1500:	000013b5 	.word	0x000013b5
    1504:	200011cc 	.word	0x200011cc

00001508 <system_apb_clock_set_mask>:
{
    1508:	b580      	push	{r7, lr}
    150a:	b082      	sub	sp, #8
    150c:	af00      	add	r7, sp, #0
    150e:	0002      	movs	r2, r0
    1510:	6039      	str	r1, [r7, #0]
    1512:	1dfb      	adds	r3, r7, #7
    1514:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1516:	1dfb      	adds	r3, r7, #7
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	2b04      	cmp	r3, #4
    151c:	d827      	bhi.n	156e <system_apb_clock_set_mask+0x66>
    151e:	009a      	lsls	r2, r3, #2
    1520:	4b16      	ldr	r3, [pc, #88]	; (157c <system_apb_clock_set_mask+0x74>)
    1522:	18d3      	adds	r3, r2, r3
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    1528:	4b15      	ldr	r3, [pc, #84]	; (1580 <system_apb_clock_set_mask+0x78>)
    152a:	4a15      	ldr	r2, [pc, #84]	; (1580 <system_apb_clock_set_mask+0x78>)
    152c:	6951      	ldr	r1, [r2, #20]
    152e:	683a      	ldr	r2, [r7, #0]
    1530:	430a      	orrs	r2, r1
    1532:	615a      	str	r2, [r3, #20]
			break;
    1534:	e01d      	b.n	1572 <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    1536:	4b12      	ldr	r3, [pc, #72]	; (1580 <system_apb_clock_set_mask+0x78>)
    1538:	4a11      	ldr	r2, [pc, #68]	; (1580 <system_apb_clock_set_mask+0x78>)
    153a:	6991      	ldr	r1, [r2, #24]
    153c:	683a      	ldr	r2, [r7, #0]
    153e:	430a      	orrs	r2, r1
    1540:	619a      	str	r2, [r3, #24]
			break;
    1542:	e016      	b.n	1572 <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    1544:	4b0e      	ldr	r3, [pc, #56]	; (1580 <system_apb_clock_set_mask+0x78>)
    1546:	4a0e      	ldr	r2, [pc, #56]	; (1580 <system_apb_clock_set_mask+0x78>)
    1548:	69d1      	ldr	r1, [r2, #28]
    154a:	683a      	ldr	r2, [r7, #0]
    154c:	430a      	orrs	r2, r1
    154e:	61da      	str	r2, [r3, #28]
			break;
    1550:	e00f      	b.n	1572 <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    1552:	4b0b      	ldr	r3, [pc, #44]	; (1580 <system_apb_clock_set_mask+0x78>)
    1554:	4a0a      	ldr	r2, [pc, #40]	; (1580 <system_apb_clock_set_mask+0x78>)
    1556:	6a11      	ldr	r1, [r2, #32]
    1558:	683a      	ldr	r2, [r7, #0]
    155a:	430a      	orrs	r2, r1
    155c:	621a      	str	r2, [r3, #32]
			break;
    155e:	e008      	b.n	1572 <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    1560:	4b07      	ldr	r3, [pc, #28]	; (1580 <system_apb_clock_set_mask+0x78>)
    1562:	4a07      	ldr	r2, [pc, #28]	; (1580 <system_apb_clock_set_mask+0x78>)
    1564:	6a51      	ldr	r1, [r2, #36]	; 0x24
    1566:	683a      	ldr	r2, [r7, #0]
    1568:	430a      	orrs	r2, r1
    156a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    156c:	e001      	b.n	1572 <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    156e:	2317      	movs	r3, #23
    1570:	e000      	b.n	1574 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    1572:	2300      	movs	r3, #0
}
    1574:	0018      	movs	r0, r3
    1576:	46bd      	mov	sp, r7
    1578:	b002      	add	sp, #8
    157a:	bd80      	pop	{r7, pc}
    157c:	0002aa80 	.word	0x0002aa80
    1580:	40000400 	.word	0x40000400

00001584 <system_pinmux_get_config_defaults>:
{
    1584:	b580      	push	{r7, lr}
    1586:	b082      	sub	sp, #8
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	2280      	movs	r2, #128	; 0x80
    1590:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	2200      	movs	r2, #0
    1596:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	2201      	movs	r2, #1
    159c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    159e:	687b      	ldr	r3, [r7, #4]
    15a0:	2200      	movs	r2, #0
    15a2:	70da      	strb	r2, [r3, #3]
}
    15a4:	46c0      	nop			; (mov r8, r8)
    15a6:	46bd      	mov	sp, r7
    15a8:	b002      	add	sp, #8
    15aa:	bd80      	pop	{r7, pc}

000015ac <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    15ac:	b580      	push	{r7, lr}
    15ae:	b082      	sub	sp, #8
    15b0:	af00      	add	r7, sp, #0
    15b2:	0002      	movs	r2, r0
    15b4:	1dfb      	adds	r3, r7, #7
    15b6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15b8:	4b06      	ldr	r3, [pc, #24]	; (15d4 <system_interrupt_enable+0x28>)
    15ba:	1dfa      	adds	r2, r7, #7
    15bc:	7812      	ldrb	r2, [r2, #0]
    15be:	0011      	movs	r1, r2
    15c0:	221f      	movs	r2, #31
    15c2:	400a      	ands	r2, r1
    15c4:	2101      	movs	r1, #1
    15c6:	4091      	lsls	r1, r2
    15c8:	000a      	movs	r2, r1
    15ca:	601a      	str	r2, [r3, #0]
}
    15cc:	46c0      	nop			; (mov r8, r8)
    15ce:	46bd      	mov	sp, r7
    15d0:	b002      	add	sp, #8
    15d2:	bd80      	pop	{r7, pc}
    15d4:	e000e100 	.word	0xe000e100

000015d8 <_extint_get_eic_from_channel>:
{
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af00      	add	r7, sp, #0
    15de:	0002      	movs	r2, r0
    15e0:	1dfb      	adds	r3, r7, #7
    15e2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    15e4:	230f      	movs	r3, #15
    15e6:	18fb      	adds	r3, r7, r3
    15e8:	1dfa      	adds	r2, r7, #7
    15ea:	7812      	ldrb	r2, [r2, #0]
    15ec:	0952      	lsrs	r2, r2, #5
    15ee:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    15f0:	230f      	movs	r3, #15
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	781b      	ldrb	r3, [r3, #0]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d10c      	bne.n	1614 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    15fa:	4b09      	ldr	r3, [pc, #36]	; (1620 <_extint_get_eic_from_channel+0x48>)
    15fc:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    15fe:	230f      	movs	r3, #15
    1600:	18fb      	adds	r3, r7, r3
    1602:	781b      	ldrb	r3, [r3, #0]
    1604:	009b      	lsls	r3, r3, #2
    1606:	2210      	movs	r2, #16
    1608:	4694      	mov	ip, r2
    160a:	44bc      	add	ip, r7
    160c:	4463      	add	r3, ip
    160e:	3b08      	subs	r3, #8
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	e000      	b.n	1616 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    1614:	2300      	movs	r3, #0
}
    1616:	0018      	movs	r0, r3
    1618:	46bd      	mov	sp, r7
    161a:	b004      	add	sp, #16
    161c:	bd80      	pop	{r7, pc}
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	40002400 	.word	0x40002400

00001624 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    162a:	4b15      	ldr	r3, [pc, #84]	; (1680 <extint_is_syncing+0x5c>)
    162c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    162e:	2300      	movs	r3, #0
    1630:	607b      	str	r3, [r7, #4]
    1632:	e01c      	b.n	166e <extint_is_syncing+0x4a>
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	009b      	lsls	r3, r3, #2
    1638:	2208      	movs	r2, #8
    163a:	4694      	mov	ip, r2
    163c:	44bc      	add	ip, r7
    163e:	4463      	add	r3, ip
    1640:	3b08      	subs	r3, #8
    1642:	681b      	ldr	r3, [r3, #0]
    1644:	685b      	ldr	r3, [r3, #4]
    1646:	2202      	movs	r2, #2
    1648:	4013      	ands	r3, r2
    164a:	d10b      	bne.n	1664 <extint_is_syncing+0x40>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    164c:	687b      	ldr	r3, [r7, #4]
    164e:	009b      	lsls	r3, r3, #2
    1650:	2208      	movs	r2, #8
    1652:	4694      	mov	ip, r2
    1654:	44bc      	add	ip, r7
    1656:	4463      	add	r3, ip
    1658:	3b08      	subs	r3, #8
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	685b      	ldr	r3, [r3, #4]
    165e:	2201      	movs	r2, #1
    1660:	4013      	ands	r3, r2
    1662:	d001      	beq.n	1668 <extint_is_syncing+0x44>
			return true;
    1664:	2301      	movs	r3, #1
    1666:	e006      	b.n	1676 <extint_is_syncing+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1668:	687b      	ldr	r3, [r7, #4]
    166a:	3301      	adds	r3, #1
    166c:	607b      	str	r3, [r7, #4]
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	2b00      	cmp	r3, #0
    1672:	d0df      	beq.n	1634 <extint_is_syncing+0x10>
		}
	}
	return false;
    1674:	2300      	movs	r3, #0
}
    1676:	0018      	movs	r0, r3
    1678:	46bd      	mov	sp, r7
    167a:	b002      	add	sp, #8
    167c:	bd80      	pop	{r7, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	40002400 	.word	0x40002400

00001684 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1684:	b580      	push	{r7, lr}
    1686:	b084      	sub	sp, #16
    1688:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    168a:	4b2e      	ldr	r3, [pc, #184]	; (1744 <_system_extint_init+0xc0>)
    168c:	603b      	str	r3, [r7, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_EIC);
    168e:	2380      	movs	r3, #128	; 0x80
    1690:	009b      	lsls	r3, r3, #2
    1692:	0019      	movs	r1, r3
    1694:	2000      	movs	r0, #0
    1696:	4b2c      	ldr	r3, [pc, #176]	; (1748 <_system_extint_init+0xc4>)
    1698:	4798      	blx	r3
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    169a:	2300      	movs	r3, #0
    169c:	60fb      	str	r3, [r7, #12]
    169e:	e018      	b.n	16d2 <_system_extint_init+0x4e>
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    16a0:	68fb      	ldr	r3, [r7, #12]
    16a2:	009b      	lsls	r3, r3, #2
    16a4:	2210      	movs	r2, #16
    16a6:	4694      	mov	ip, r2
    16a8:	44bc      	add	ip, r7
    16aa:	4463      	add	r3, ip
    16ac:	3b10      	subs	r3, #16
    16ae:	681a      	ldr	r2, [r3, #0]
    16b0:	68fb      	ldr	r3, [r7, #12]
    16b2:	009b      	lsls	r3, r3, #2
    16b4:	2110      	movs	r1, #16
    16b6:	468c      	mov	ip, r1
    16b8:	44bc      	add	ip, r7
    16ba:	4463      	add	r3, ip
    16bc:	3b10      	subs	r3, #16
    16be:	681b      	ldr	r3, [r3, #0]
    16c0:	781b      	ldrb	r3, [r3, #0]
    16c2:	b2db      	uxtb	r3, r3
    16c4:	2101      	movs	r1, #1
    16c6:	430b      	orrs	r3, r1
    16c8:	b2db      	uxtb	r3, r3
    16ca:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    16cc:	68fb      	ldr	r3, [r7, #12]
    16ce:	3301      	adds	r3, #1
    16d0:	60fb      	str	r3, [r7, #12]
    16d2:	68fb      	ldr	r3, [r7, #12]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d0e3      	beq.n	16a0 <_system_extint_init+0x1c>
	}

	while (extint_is_syncing()) {
    16d8:	46c0      	nop			; (mov r8, r8)
    16da:	4b1c      	ldr	r3, [pc, #112]	; (174c <_system_extint_init+0xc8>)
    16dc:	4798      	blx	r3
    16de:	1e03      	subs	r3, r0, #0
    16e0:	d1fb      	bne.n	16da <_system_extint_init+0x56>
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
	}
#else
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    16e2:	2300      	movs	r3, #0
    16e4:	60bb      	str	r3, [r7, #8]
    16e6:	e00e      	b.n	1706 <_system_extint_init+0x82>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    16e8:	68bb      	ldr	r3, [r7, #8]
    16ea:	009b      	lsls	r3, r3, #2
    16ec:	2210      	movs	r2, #16
    16ee:	4694      	mov	ip, r2
    16f0:	44bc      	add	ip, r7
    16f2:	4463      	add	r3, ip
    16f4:	3b10      	subs	r3, #16
    16f6:	681a      	ldr	r2, [r3, #0]
    16f8:	7813      	ldrb	r3, [r2, #0]
    16fa:	2110      	movs	r1, #16
    16fc:	430b      	orrs	r3, r1
    16fe:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1700:	68bb      	ldr	r3, [r7, #8]
    1702:	3301      	adds	r3, #1
    1704:	60bb      	str	r3, [r7, #8]
    1706:	68bb      	ldr	r3, [r7, #8]
    1708:	2b00      	cmp	r3, #0
    170a:	d0ed      	beq.n	16e8 <_system_extint_init+0x64>
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    170c:	1dfb      	adds	r3, r7, #7
    170e:	2200      	movs	r2, #0
    1710:	701a      	strb	r2, [r3, #0]
    1712:	e00a      	b.n	172a <_system_extint_init+0xa6>
		_extint_dev.callbacks[j] = NULL;
    1714:	1dfb      	adds	r3, r7, #7
    1716:	781a      	ldrb	r2, [r3, #0]
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <_system_extint_init+0xcc>)
    171a:	0092      	lsls	r2, r2, #2
    171c:	2100      	movs	r1, #0
    171e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1720:	1dfb      	adds	r3, r7, #7
    1722:	781a      	ldrb	r2, [r3, #0]
    1724:	1dfb      	adds	r3, r7, #7
    1726:	3201      	adds	r2, #1
    1728:	701a      	strb	r2, [r3, #0]
    172a:	1dfb      	adds	r3, r7, #7
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	2b0f      	cmp	r3, #15
    1730:	d9f0      	bls.n	1714 <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    1732:	2003      	movs	r0, #3
    1734:	4b07      	ldr	r3, [pc, #28]	; (1754 <_system_extint_init+0xd0>)
    1736:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1738:	4b07      	ldr	r3, [pc, #28]	; (1758 <_system_extint_init+0xd4>)
    173a:	4798      	blx	r3
}
    173c:	46c0      	nop			; (mov r8, r8)
    173e:	46bd      	mov	sp, r7
    1740:	b004      	add	sp, #16
    1742:	bd80      	pop	{r7, pc}
    1744:	40002400 	.word	0x40002400
    1748:	00001509 	.word	0x00001509
    174c:	00001625 	.word	0x00001625
    1750:	200011cc 	.word	0x200011cc
    1754:	000015ad 	.word	0x000015ad
    1758:	0000175d 	.word	0x0000175d

0000175c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    175c:	b580      	push	{r7, lr}
    175e:	b082      	sub	sp, #8
    1760:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1762:	4b15      	ldr	r3, [pc, #84]	; (17b8 <_extint_enable+0x5c>)
    1764:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1766:	2300      	movs	r3, #0
    1768:	607b      	str	r3, [r7, #4]
    176a:	e018      	b.n	179e <_extint_enable+0x42>
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	009b      	lsls	r3, r3, #2
    1770:	2208      	movs	r2, #8
    1772:	4694      	mov	ip, r2
    1774:	44bc      	add	ip, r7
    1776:	4463      	add	r3, ip
    1778:	3b08      	subs	r3, #8
    177a:	681a      	ldr	r2, [r3, #0]
    177c:	687b      	ldr	r3, [r7, #4]
    177e:	009b      	lsls	r3, r3, #2
    1780:	2108      	movs	r1, #8
    1782:	468c      	mov	ip, r1
    1784:	44bc      	add	ip, r7
    1786:	4463      	add	r3, ip
    1788:	3b08      	subs	r3, #8
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	781b      	ldrb	r3, [r3, #0]
    178e:	b2db      	uxtb	r3, r3
    1790:	2102      	movs	r1, #2
    1792:	430b      	orrs	r3, r1
    1794:	b2db      	uxtb	r3, r3
    1796:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1798:	687b      	ldr	r3, [r7, #4]
    179a:	3301      	adds	r3, #1
    179c:	607b      	str	r3, [r7, #4]
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d0e3      	beq.n	176c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    17a4:	46c0      	nop			; (mov r8, r8)
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <_extint_enable+0x60>)
    17a8:	4798      	blx	r3
    17aa:	1e03      	subs	r3, r0, #0
    17ac:	d1fb      	bne.n	17a6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	46bd      	mov	sp, r7
    17b2:	b002      	add	sp, #8
    17b4:	bd80      	pop	{r7, pc}
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	40002400 	.word	0x40002400
    17bc:	00001625 	.word	0x00001625

000017c0 <_extint_disable>:
 * Disables EIC modules that were previously started via a call to
 * \ref _extint_enable().
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_disable(void)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    17c6:	4b15      	ldr	r3, [pc, #84]	; (181c <_extint_disable+0x5c>)
    17c8:	603b      	str	r3, [r7, #0]

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    17ca:	2300      	movs	r3, #0
    17cc:	607b      	str	r3, [r7, #4]
    17ce:	e018      	b.n	1802 <_extint_disable+0x42>
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    17d0:	687b      	ldr	r3, [r7, #4]
    17d2:	009b      	lsls	r3, r3, #2
    17d4:	2208      	movs	r2, #8
    17d6:	4694      	mov	ip, r2
    17d8:	44bc      	add	ip, r7
    17da:	4463      	add	r3, ip
    17dc:	3b08      	subs	r3, #8
    17de:	681a      	ldr	r2, [r3, #0]
    17e0:	687b      	ldr	r3, [r7, #4]
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	2108      	movs	r1, #8
    17e6:	468c      	mov	ip, r1
    17e8:	44bc      	add	ip, r7
    17ea:	4463      	add	r3, ip
    17ec:	3b08      	subs	r3, #8
    17ee:	681b      	ldr	r3, [r3, #0]
    17f0:	781b      	ldrb	r3, [r3, #0]
    17f2:	b2db      	uxtb	r3, r3
    17f4:	2102      	movs	r1, #2
    17f6:	438b      	bics	r3, r1
    17f8:	b2db      	uxtb	r3, r3
    17fa:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	3301      	adds	r3, #1
    1800:	607b      	str	r3, [r7, #4]
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2b00      	cmp	r3, #0
    1806:	d0e3      	beq.n	17d0 <_extint_disable+0x10>
	}

	while (extint_is_syncing()) {
    1808:	46c0      	nop			; (mov r8, r8)
    180a:	4b05      	ldr	r3, [pc, #20]	; (1820 <_extint_disable+0x60>)
    180c:	4798      	blx	r3
    180e:	1e03      	subs	r3, r0, #0
    1810:	d1fb      	bne.n	180a <_extint_disable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	46bd      	mov	sp, r7
    1816:	b002      	add	sp, #8
    1818:	bd80      	pop	{r7, pc}
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	40002400 	.word	0x40002400
    1820:	00001625 	.word	0x00001625

00001824 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    1824:	b580      	push	{r7, lr}
    1826:	b082      	sub	sp, #8
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	2200      	movs	r2, #0
    1830:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    1832:	687b      	ldr	r3, [r7, #4]
    1834:	2200      	movs	r2, #0
    1836:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    1838:	687b      	ldr	r3, [r7, #4]
    183a:	2201      	movs	r2, #1
    183c:	721a      	strb	r2, [r3, #8]
	config->filter_input_signal = false;
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	2200      	movs	r2, #0
    1842:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	2202      	movs	r2, #2
    1848:	72da      	strb	r2, [r3, #11]
	config->enable_async_edge_detection = false;
    184a:	687b      	ldr	r3, [r7, #4]
    184c:	2200      	movs	r2, #0
    184e:	725a      	strb	r2, [r3, #9]
}
    1850:	46c0      	nop			; (mov r8, r8)
    1852:	46bd      	mov	sp, r7
    1854:	b002      	add	sp, #8
    1856:	bd80      	pop	{r7, pc}

00001858 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    1858:	b580      	push	{r7, lr}
    185a:	b086      	sub	sp, #24
    185c:	af00      	add	r7, sp, #0
    185e:	0002      	movs	r2, r0
    1860:	6039      	str	r1, [r7, #0]
    1862:	1dfb      	adds	r3, r7, #7
    1864:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    1866:	4b3c      	ldr	r3, [pc, #240]	; (1958 <extint_chan_set_config+0x100>)
    1868:	4798      	blx	r3
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    186a:	2308      	movs	r3, #8
    186c:	18fb      	adds	r3, r7, r3
    186e:	0018      	movs	r0, r3
    1870:	4b3a      	ldr	r3, [pc, #232]	; (195c <extint_chan_set_config+0x104>)
    1872:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    1874:	683b      	ldr	r3, [r7, #0]
    1876:	685b      	ldr	r3, [r3, #4]
    1878:	b2da      	uxtb	r2, r3
    187a:	2308      	movs	r3, #8
    187c:	18fb      	adds	r3, r7, r3
    187e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1880:	2308      	movs	r3, #8
    1882:	18fb      	adds	r3, r7, r3
    1884:	2200      	movs	r2, #0
    1886:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    1888:	683b      	ldr	r3, [r7, #0]
    188a:	7a1a      	ldrb	r2, [r3, #8]
    188c:	2308      	movs	r3, #8
    188e:	18fb      	adds	r3, r7, r3
    1890:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    1892:	683b      	ldr	r3, [r7, #0]
    1894:	681b      	ldr	r3, [r3, #0]
    1896:	b2db      	uxtb	r3, r3
    1898:	2208      	movs	r2, #8
    189a:	18ba      	adds	r2, r7, r2
    189c:	0011      	movs	r1, r2
    189e:	0018      	movs	r0, r3
    18a0:	4b2f      	ldr	r3, [pc, #188]	; (1960 <extint_chan_set_config+0x108>)
    18a2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    18a4:	1dfb      	adds	r3, r7, #7
    18a6:	781b      	ldrb	r3, [r3, #0]
    18a8:	0018      	movs	r0, r3
    18aa:	4b2e      	ldr	r3, [pc, #184]	; (1964 <extint_chan_set_config+0x10c>)
    18ac:	4798      	blx	r3
    18ae:	0003      	movs	r3, r0
    18b0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    18b2:	1dfb      	adds	r3, r7, #7
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2207      	movs	r2, #7
    18b8:	4013      	ands	r3, r2
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    18be:	683b      	ldr	r3, [r7, #0]
    18c0:	7adb      	ldrb	r3, [r3, #11]
    18c2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    18c4:	683b      	ldr	r3, [r7, #0]
    18c6:	7a9b      	ldrb	r3, [r3, #10]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d003      	beq.n	18d4 <extint_chan_set_config+0x7c>
		new_config |= EIC_CONFIG_FILTEN0;
    18cc:	697b      	ldr	r3, [r7, #20]
    18ce:	2208      	movs	r2, #8
    18d0:	4313      	orrs	r3, r2
    18d2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    18d4:	1dfb      	adds	r3, r7, #7
    18d6:	781b      	ldrb	r3, [r3, #0]
    18d8:	08db      	lsrs	r3, r3, #3
    18da:	b2db      	uxtb	r3, r3
    18dc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    18de:	1dfb      	adds	r3, r7, #7
    18e0:	781b      	ldrb	r3, [r3, #0]
    18e2:	08db      	lsrs	r3, r3, #3
    18e4:	b2db      	uxtb	r3, r3
    18e6:	693a      	ldr	r2, [r7, #16]
    18e8:	3306      	adds	r3, #6
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	18d3      	adds	r3, r2, r3
    18ee:	3304      	adds	r3, #4
    18f0:	681b      	ldr	r3, [r3, #0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    18f2:	210f      	movs	r1, #15
    18f4:	68fa      	ldr	r2, [r7, #12]
    18f6:	4091      	lsls	r1, r2
    18f8:	000a      	movs	r2, r1
    18fa:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    18fc:	401a      	ands	r2, r3
			(new_config << config_pos);
    18fe:	6979      	ldr	r1, [r7, #20]
    1900:	68fb      	ldr	r3, [r7, #12]
    1902:	4099      	lsls	r1, r3
    1904:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    1906:	431a      	orrs	r2, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    1908:	6939      	ldr	r1, [r7, #16]
    190a:	1d83      	adds	r3, r0, #6
    190c:	009b      	lsls	r3, r3, #2
    190e:	18cb      	adds	r3, r1, r3
    1910:	3304      	adds	r3, #4
    1912:	601a      	str	r2, [r3, #0]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	7a5b      	ldrb	r3, [r3, #9]
    1918:	2b00      	cmp	r3, #0
    191a:	d00a      	beq.n	1932 <extint_chan_set_config+0xda>
		EIC_module->ASYNCH.reg |= (1UL << channel);
    191c:	693b      	ldr	r3, [r7, #16]
    191e:	699a      	ldr	r2, [r3, #24]
    1920:	1dfb      	adds	r3, r7, #7
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	2101      	movs	r1, #1
    1926:	4099      	lsls	r1, r3
    1928:	000b      	movs	r3, r1
    192a:	431a      	orrs	r2, r3
    192c:	693b      	ldr	r3, [r7, #16]
    192e:	619a      	str	r2, [r3, #24]
    1930:	e00c      	b.n	194c <extint_chan_set_config+0xf4>
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    1932:	693b      	ldr	r3, [r7, #16]
    1934:	699b      	ldr	r3, [r3, #24]
    1936:	1dfa      	adds	r2, r7, #7
    1938:	7812      	ldrb	r2, [r2, #0]
    193a:	2101      	movs	r1, #1
    193c:	4091      	lsls	r1, r2
    193e:	000a      	movs	r2, r1
    1940:	43d2      	mvns	r2, r2
    1942:	4013      	ands	r3, r2
    1944:	041b      	lsls	r3, r3, #16
    1946:	0c1a      	lsrs	r2, r3, #16
    1948:	693b      	ldr	r3, [r7, #16]
    194a:	619a      	str	r2, [r3, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    194c:	4b06      	ldr	r3, [pc, #24]	; (1968 <extint_chan_set_config+0x110>)
    194e:	4798      	blx	r3
}
    1950:	46c0      	nop			; (mov r8, r8)
    1952:	46bd      	mov	sp, r7
    1954:	b006      	add	sp, #24
    1956:	bd80      	pop	{r7, pc}
    1958:	000017c1 	.word	0x000017c1
    195c:	00001585 	.word	0x00001585
    1960:	00005761 	.word	0x00005761
    1964:	000015d9 	.word	0x000015d9
    1968:	0000175d 	.word	0x0000175d

0000196c <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1972:	4b07      	ldr	r3, [pc, #28]	; (1990 <nvm_is_ready+0x24>)
    1974:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	7d1b      	ldrb	r3, [r3, #20]
    197a:	b2db      	uxtb	r3, r3
    197c:	001a      	movs	r2, r3
    197e:	2301      	movs	r3, #1
    1980:	4013      	ands	r3, r2
    1982:	1e5a      	subs	r2, r3, #1
    1984:	4193      	sbcs	r3, r2
    1986:	b2db      	uxtb	r3, r3
}
    1988:	0018      	movs	r0, r3
    198a:	46bd      	mov	sp, r7
    198c:	b002      	add	sp, #8
    198e:	bd80      	pop	{r7, pc}
    1990:	41004000 	.word	0x41004000

00001994 <system_apb_clock_set_mask>:
{
    1994:	b580      	push	{r7, lr}
    1996:	b082      	sub	sp, #8
    1998:	af00      	add	r7, sp, #0
    199a:	0002      	movs	r2, r0
    199c:	6039      	str	r1, [r7, #0]
    199e:	1dfb      	adds	r3, r7, #7
    19a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    19a2:	1dfb      	adds	r3, r7, #7
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	2b04      	cmp	r3, #4
    19a8:	d827      	bhi.n	19fa <system_apb_clock_set_mask+0x66>
    19aa:	009a      	lsls	r2, r3, #2
    19ac:	4b16      	ldr	r3, [pc, #88]	; (1a08 <system_apb_clock_set_mask+0x74>)
    19ae:	18d3      	adds	r3, r2, r3
    19b0:	681b      	ldr	r3, [r3, #0]
    19b2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    19b4:	4b15      	ldr	r3, [pc, #84]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19b6:	4a15      	ldr	r2, [pc, #84]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19b8:	6951      	ldr	r1, [r2, #20]
    19ba:	683a      	ldr	r2, [r7, #0]
    19bc:	430a      	orrs	r2, r1
    19be:	615a      	str	r2, [r3, #20]
			break;
    19c0:	e01d      	b.n	19fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    19c2:	4b12      	ldr	r3, [pc, #72]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19c4:	4a11      	ldr	r2, [pc, #68]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19c6:	6991      	ldr	r1, [r2, #24]
    19c8:	683a      	ldr	r2, [r7, #0]
    19ca:	430a      	orrs	r2, r1
    19cc:	619a      	str	r2, [r3, #24]
			break;
    19ce:	e016      	b.n	19fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    19d0:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19d2:	4a0e      	ldr	r2, [pc, #56]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19d4:	69d1      	ldr	r1, [r2, #28]
    19d6:	683a      	ldr	r2, [r7, #0]
    19d8:	430a      	orrs	r2, r1
    19da:	61da      	str	r2, [r3, #28]
			break;
    19dc:	e00f      	b.n	19fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    19de:	4b0b      	ldr	r3, [pc, #44]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19e0:	4a0a      	ldr	r2, [pc, #40]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19e2:	6a11      	ldr	r1, [r2, #32]
    19e4:	683a      	ldr	r2, [r7, #0]
    19e6:	430a      	orrs	r2, r1
    19e8:	621a      	str	r2, [r3, #32]
			break;
    19ea:	e008      	b.n	19fe <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    19ec:	4b07      	ldr	r3, [pc, #28]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19ee:	4a07      	ldr	r2, [pc, #28]	; (1a0c <system_apb_clock_set_mask+0x78>)
    19f0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    19f2:	683a      	ldr	r2, [r7, #0]
    19f4:	430a      	orrs	r2, r1
    19f6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    19f8:	e001      	b.n	19fe <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    19fa:	2317      	movs	r3, #23
    19fc:	e000      	b.n	1a00 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    19fe:	2300      	movs	r3, #0
}
    1a00:	0018      	movs	r0, r3
    1a02:	46bd      	mov	sp, r7
    1a04:	b002      	add	sp, #8
    1a06:	bd80      	pop	{r7, pc}
    1a08:	0002aa94 	.word	0x0002aa94
    1a0c:	40000400 	.word	0x40000400

00001a10 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	b084      	sub	sp, #16
    1a14:	af00      	add	r7, sp, #0
    1a16:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1a18:	4b2f      	ldr	r3, [pc, #188]	; (1ad8 <nvm_set_config+0xc8>)
    1a1a:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
    1a1c:	2104      	movs	r1, #4
    1a1e:	2001      	movs	r0, #1
    1a20:	4b2e      	ldr	r3, [pc, #184]	; (1adc <nvm_set_config+0xcc>)
    1a22:	4798      	blx	r3
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1a24:	68fb      	ldr	r3, [r7, #12]
    1a26:	2220      	movs	r2, #32
    1a28:	32ff      	adds	r2, #255	; 0xff
    1a2a:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1a2c:	4b2c      	ldr	r3, [pc, #176]	; (1ae0 <nvm_set_config+0xd0>)
    1a2e:	4798      	blx	r3
    1a30:	0003      	movs	r3, r0
    1a32:	001a      	movs	r2, r3
    1a34:	2301      	movs	r3, #1
    1a36:	4053      	eors	r3, r2
    1a38:	b2db      	uxtb	r3, r3
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d001      	beq.n	1a42 <nvm_set_config+0x32>
		return STATUS_BUSY;
    1a3e:	2305      	movs	r3, #5
    1a40:	e045      	b.n	1ace <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	021b      	lsls	r3, r3, #8
    1a48:	001a      	movs	r2, r3
    1a4a:	23c0      	movs	r3, #192	; 0xc0
    1a4c:	009b      	lsls	r3, r3, #2
    1a4e:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	785b      	ldrb	r3, [r3, #1]
    1a54:	01db      	lsls	r3, r3, #7
    1a56:	0019      	movs	r1, r3
    1a58:	23ff      	movs	r3, #255	; 0xff
    1a5a:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1a5c:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	789b      	ldrb	r3, [r3, #2]
    1a62:	005b      	lsls	r3, r3, #1
    1a64:	0019      	movs	r1, r3
    1a66:	231e      	movs	r3, #30
    1a68:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1a6a:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	78db      	ldrb	r3, [r3, #3]
    1a70:	049b      	lsls	r3, r3, #18
    1a72:	0019      	movs	r1, r3
    1a74:	2380      	movs	r3, #128	; 0x80
    1a76:	02db      	lsls	r3, r3, #11
    1a78:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1a7a:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	791b      	ldrb	r3, [r3, #4]
    1a80:	041b      	lsls	r3, r3, #16
    1a82:	0019      	movs	r1, r3
    1a84:	23c0      	movs	r3, #192	; 0xc0
    1a86:	029b      	lsls	r3, r3, #10
    1a88:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1a8a:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    1a8c:	68fb      	ldr	r3, [r7, #12]
    1a8e:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    1a90:	68fb      	ldr	r3, [r7, #12]
    1a92:	689b      	ldr	r3, [r3, #8]
    1a94:	035b      	lsls	r3, r3, #13
    1a96:	0f5b      	lsrs	r3, r3, #29
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	001a      	movs	r2, r3
    1a9c:	2308      	movs	r3, #8
    1a9e:	4093      	lsls	r3, r2
    1aa0:	b29a      	uxth	r2, r3
    1aa2:	4b10      	ldr	r3, [pc, #64]	; (1ae4 <nvm_set_config+0xd4>)
    1aa4:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1aa6:	68fb      	ldr	r3, [r7, #12]
    1aa8:	689b      	ldr	r3, [r3, #8]
    1aaa:	b29a      	uxth	r2, r3
    1aac:	4b0d      	ldr	r3, [pc, #52]	; (1ae4 <nvm_set_config+0xd4>)
    1aae:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	785a      	ldrb	r2, [r3, #1]
    1ab4:	4b0b      	ldr	r3, [pc, #44]	; (1ae4 <nvm_set_config+0xd4>)
    1ab6:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1ab8:	68fb      	ldr	r3, [r7, #12]
    1aba:	8b1b      	ldrh	r3, [r3, #24]
    1abc:	b29b      	uxth	r3, r3
    1abe:	001a      	movs	r2, r3
    1ac0:	2380      	movs	r3, #128	; 0x80
    1ac2:	005b      	lsls	r3, r3, #1
    1ac4:	4013      	ands	r3, r2
    1ac6:	d001      	beq.n	1acc <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    1ac8:	2310      	movs	r3, #16
    1aca:	e000      	b.n	1ace <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    1acc:	2300      	movs	r3, #0
}
    1ace:	0018      	movs	r0, r3
    1ad0:	46bd      	mov	sp, r7
    1ad2:	b004      	add	sp, #16
    1ad4:	bd80      	pop	{r7, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	41004000 	.word	0x41004000
    1adc:	00001995 	.word	0x00001995
    1ae0:	0000196d 	.word	0x0000196d
    1ae4:	20000bbc 	.word	0x20000bbc

00001ae8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	b086      	sub	sp, #24
    1aec:	af00      	add	r7, sp, #0
    1aee:	60b9      	str	r1, [r7, #8]
    1af0:	607a      	str	r2, [r7, #4]
    1af2:	230f      	movs	r3, #15
    1af4:	18fb      	adds	r3, r7, r3
    1af6:	1c02      	adds	r2, r0, #0
    1af8:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    1afa:	4b4e      	ldr	r3, [pc, #312]	; (1c34 <nvm_execute_command+0x14c>)
    1afc:	881b      	ldrh	r3, [r3, #0]
    1afe:	001a      	movs	r2, r3
    1b00:	4b4c      	ldr	r3, [pc, #304]	; (1c34 <nvm_execute_command+0x14c>)
    1b02:	885b      	ldrh	r3, [r3, #2]
    1b04:	435a      	muls	r2, r3
    1b06:	68bb      	ldr	r3, [r7, #8]
    1b08:	429a      	cmp	r2, r3
    1b0a:	d211      	bcs.n	1b30 <nvm_execute_command+0x48>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    1b0c:	68bb      	ldr	r3, [r7, #8]
    1b0e:	4a4a      	ldr	r2, [pc, #296]	; (1c38 <nvm_execute_command+0x150>)
    1b10:	4293      	cmp	r3, r2
    1b12:	d903      	bls.n	1b1c <nvm_execute_command+0x34>
    1b14:	68bb      	ldr	r3, [r7, #8]
    1b16:	4a49      	ldr	r2, [pc, #292]	; (1c3c <nvm_execute_command+0x154>)
    1b18:	4293      	cmp	r3, r2
    1b1a:	d909      	bls.n	1b30 <nvm_execute_command+0x48>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    1b1c:	68bb      	ldr	r3, [r7, #8]
    1b1e:	4a48      	ldr	r2, [pc, #288]	; (1c40 <nvm_execute_command+0x158>)
    1b20:	4293      	cmp	r3, r2
    1b22:	d803      	bhi.n	1b2c <nvm_execute_command+0x44>
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
    1b24:	68bb      	ldr	r3, [r7, #8]
    1b26:	4a47      	ldr	r2, [pc, #284]	; (1c44 <nvm_execute_command+0x15c>)
    1b28:	4293      	cmp	r3, r2
    1b2a:	d801      	bhi.n	1b30 <nvm_execute_command+0x48>
			return STATUS_ERR_BAD_ADDRESS;
    1b2c:	2318      	movs	r3, #24
    1b2e:	e07d      	b.n	1c2c <nvm_execute_command+0x144>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1b30:	4b45      	ldr	r3, [pc, #276]	; (1c48 <nvm_execute_command+0x160>)
    1b32:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1b34:	697b      	ldr	r3, [r7, #20]
    1b36:	685b      	ldr	r3, [r3, #4]
    1b38:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1b3a:	693b      	ldr	r3, [r7, #16]
    1b3c:	2280      	movs	r2, #128	; 0x80
    1b3e:	02d2      	lsls	r2, r2, #11
    1b40:	431a      	orrs	r2, r3
    1b42:	697b      	ldr	r3, [r7, #20]
    1b44:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1b46:	697b      	ldr	r3, [r7, #20]
    1b48:	2220      	movs	r2, #32
    1b4a:	32ff      	adds	r2, #255	; 0xff
    1b4c:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1b4e:	4b3f      	ldr	r3, [pc, #252]	; (1c4c <nvm_execute_command+0x164>)
    1b50:	4798      	blx	r3
    1b52:	0003      	movs	r3, r0
    1b54:	001a      	movs	r2, r3
    1b56:	2301      	movs	r3, #1
    1b58:	4053      	eors	r3, r2
    1b5a:	b2db      	uxtb	r3, r3
    1b5c:	2b00      	cmp	r3, #0
    1b5e:	d004      	beq.n	1b6a <nvm_execute_command+0x82>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    1b60:	697b      	ldr	r3, [r7, #20]
    1b62:	693a      	ldr	r2, [r7, #16]
    1b64:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    1b66:	2305      	movs	r3, #5
    1b68:	e060      	b.n	1c2c <nvm_execute_command+0x144>
	}

	switch (command) {
    1b6a:	230f      	movs	r3, #15
    1b6c:	18fb      	adds	r3, r7, r3
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	2b45      	cmp	r3, #69	; 0x45
    1b72:	d81d      	bhi.n	1bb0 <nvm_execute_command+0xc8>
    1b74:	009a      	lsls	r2, r3, #2
    1b76:	4b36      	ldr	r3, [pc, #216]	; (1c50 <nvm_execute_command+0x168>)
    1b78:	18d3      	adds	r3, r2, r3
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1b7e:	697b      	ldr	r3, [r7, #20]
    1b80:	8b1b      	ldrh	r3, [r3, #24]
    1b82:	b29b      	uxth	r3, r3
    1b84:	001a      	movs	r2, r3
    1b86:	2380      	movs	r3, #128	; 0x80
    1b88:	005b      	lsls	r3, r3, #1
    1b8a:	4013      	ands	r3, r2
    1b8c:	d004      	beq.n	1b98 <nvm_execute_command+0xb0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    1b8e:	697b      	ldr	r3, [r7, #20]
    1b90:	693a      	ldr	r2, [r7, #16]
    1b92:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    1b94:	2310      	movs	r3, #16
    1b96:	e049      	b.n	1c2c <nvm_execute_command+0x144>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1b98:	68bb      	ldr	r3, [r7, #8]
    1b9a:	089b      	lsrs	r3, r3, #2
    1b9c:	005a      	lsls	r2, r3, #1
    1b9e:	697b      	ldr	r3, [r7, #20]
    1ba0:	61da      	str	r2, [r3, #28]
			break;
    1ba2:	e00b      	b.n	1bbc <nvm_execute_command+0xd4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1ba4:	68bb      	ldr	r3, [r7, #8]
    1ba6:	089b      	lsrs	r3, r3, #2
    1ba8:	005a      	lsls	r2, r3, #1
    1baa:	697b      	ldr	r3, [r7, #20]
    1bac:	61da      	str	r2, [r3, #28]
			break;
    1bae:	e005      	b.n	1bbc <nvm_execute_command+0xd4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    1bb0:	697b      	ldr	r3, [r7, #20]
    1bb2:	693a      	ldr	r2, [r7, #16]
    1bb4:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    1bb6:	2317      	movs	r3, #23
    1bb8:	e038      	b.n	1c2c <nvm_execute_command+0x144>
			break;
    1bba:	46c0      	nop			; (mov r8, r8)
	}

	/* Disable Cache */
#ifdef FEATURE_NVM_RWWEE
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    1bbc:	230f      	movs	r3, #15
    1bbe:	18fb      	adds	r3, r7, r3
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	2b1a      	cmp	r3, #26
    1bc4:	d004      	beq.n	1bd0 <nvm_execute_command+0xe8>
    1bc6:	230f      	movs	r3, #15
    1bc8:	18fb      	adds	r3, r7, r3
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	2b1c      	cmp	r3, #28
    1bce:	d107      	bne.n	1be0 <nvm_execute_command+0xf8>
	{
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    1bd0:	697b      	ldr	r3, [r7, #20]
    1bd2:	685a      	ldr	r2, [r3, #4]
    1bd4:	2180      	movs	r1, #128	; 0x80
    1bd6:	02c9      	lsls	r1, r1, #11
    1bd8:	430a      	orrs	r2, r1
    1bda:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    1bdc:	697b      	ldr	r3, [r7, #20]
    1bde:	685b      	ldr	r3, [r3, #4]
	}
#endif

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1be0:	230f      	movs	r3, #15
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	781b      	ldrb	r3, [r3, #0]
    1be6:	b29b      	uxth	r3, r3
    1be8:	4a1a      	ldr	r2, [pc, #104]	; (1c54 <nvm_execute_command+0x16c>)
    1bea:	4313      	orrs	r3, r2
    1bec:	b29a      	uxth	r2, r3
    1bee:	697b      	ldr	r3, [r7, #20]
    1bf0:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	4b15      	ldr	r3, [pc, #84]	; (1c4c <nvm_execute_command+0x164>)
    1bf6:	4798      	blx	r3
    1bf8:	0003      	movs	r3, r0
    1bfa:	001a      	movs	r2, r3
    1bfc:	2301      	movs	r3, #1
    1bfe:	4053      	eors	r3, r2
    1c00:	b2db      	uxtb	r3, r3
    1c02:	2b00      	cmp	r3, #0
    1c04:	d1f6      	bne.n	1bf4 <nvm_execute_command+0x10c>
	}

	/* Enable Cache */
#ifdef FEATURE_NVM_RWWEE
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    1c06:	230f      	movs	r3, #15
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	2b1a      	cmp	r3, #26
    1c0e:	d004      	beq.n	1c1a <nvm_execute_command+0x132>
    1c10:	230f      	movs	r3, #15
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2b1c      	cmp	r3, #28
    1c18:	d104      	bne.n	1c24 <nvm_execute_command+0x13c>
	{
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    1c1a:	697b      	ldr	r3, [r7, #20]
    1c1c:	685a      	ldr	r2, [r3, #4]
    1c1e:	490e      	ldr	r1, [pc, #56]	; (1c58 <nvm_execute_command+0x170>)
    1c20:	400a      	ands	r2, r1
    1c22:	605a      	str	r2, [r3, #4]
	}
#endif

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    1c24:	697b      	ldr	r3, [r7, #20]
    1c26:	693a      	ldr	r2, [r7, #16]
    1c28:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1c2a:	2300      	movs	r3, #0
}
    1c2c:	0018      	movs	r0, r3
    1c2e:	46bd      	mov	sp, r7
    1c30:	b006      	add	sp, #24
    1c32:	bd80      	pop	{r7, pc}
    1c34:	20000bbc 	.word	0x20000bbc
    1c38:	00803fff 	.word	0x00803fff
    1c3c:	00806000 	.word	0x00806000
    1c40:	00401fff 	.word	0x00401fff
    1c44:	003fffff 	.word	0x003fffff
    1c48:	41004000 	.word	0x41004000
    1c4c:	0000196d 	.word	0x0000196d
    1c50:	0002aaa8 	.word	0x0002aaa8
    1c54:	ffffa500 	.word	0xffffa500
    1c58:	fffbffff 	.word	0xfffbffff

00001c5c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b088      	sub	sp, #32
    1c60:	af00      	add	r7, sp, #0
    1c62:	60f8      	str	r0, [r7, #12]
    1c64:	60b9      	str	r1, [r7, #8]
    1c66:	1dbb      	adds	r3, r7, #6
    1c68:	801a      	strh	r2, [r3, #0]
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
    1c6a:	231f      	movs	r3, #31
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	2200      	movs	r2, #0
    1c70:	701a      	strb	r2, [r3, #0]
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1c72:	4b56      	ldr	r3, [pc, #344]	; (1dcc <nvm_write_buffer+0x170>)
    1c74:	881b      	ldrh	r3, [r3, #0]
    1c76:	001a      	movs	r2, r3
    1c78:	4b54      	ldr	r3, [pc, #336]	; (1dcc <nvm_write_buffer+0x170>)
    1c7a:	885b      	ldrh	r3, [r3, #2]
    1c7c:	435a      	muls	r2, r3
	if (destination_address >
    1c7e:	68fb      	ldr	r3, [r7, #12]
    1c80:	429a      	cmp	r2, r3
    1c82:	d20d      	bcs.n	1ca0 <nvm_write_buffer+0x44>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    1c84:	68fb      	ldr	r3, [r7, #12]
    1c86:	4a52      	ldr	r2, [pc, #328]	; (1dd0 <nvm_write_buffer+0x174>)
    1c88:	4293      	cmp	r3, r2
    1c8a:	d803      	bhi.n	1c94 <nvm_write_buffer+0x38>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
    1c8c:	68fb      	ldr	r3, [r7, #12]
    1c8e:	4a51      	ldr	r2, [pc, #324]	; (1dd4 <nvm_write_buffer+0x178>)
    1c90:	4293      	cmp	r3, r2
    1c92:	d801      	bhi.n	1c98 <nvm_write_buffer+0x3c>
			return STATUS_ERR_BAD_ADDRESS;
    1c94:	2318      	movs	r3, #24
    1c96:	e095      	b.n	1dc4 <nvm_write_buffer+0x168>
		}
		is_rww_eeprom = true;
    1c98:	231f      	movs	r3, #31
    1c9a:	18fb      	adds	r3, r7, r3
    1c9c:	2201      	movs	r2, #1
    1c9e:	701a      	strb	r2, [r3, #0]
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1ca0:	4b4a      	ldr	r3, [pc, #296]	; (1dcc <nvm_write_buffer+0x170>)
    1ca2:	881b      	ldrh	r3, [r3, #0]
    1ca4:	3b01      	subs	r3, #1
    1ca6:	001a      	movs	r2, r3
    1ca8:	68fb      	ldr	r3, [r7, #12]
    1caa:	4013      	ands	r3, r2
    1cac:	d001      	beq.n	1cb2 <nvm_write_buffer+0x56>
		return STATUS_ERR_BAD_ADDRESS;
    1cae:	2318      	movs	r3, #24
    1cb0:	e088      	b.n	1dc4 <nvm_write_buffer+0x168>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    1cb2:	4b46      	ldr	r3, [pc, #280]	; (1dcc <nvm_write_buffer+0x170>)
    1cb4:	881b      	ldrh	r3, [r3, #0]
    1cb6:	1dba      	adds	r2, r7, #6
    1cb8:	8812      	ldrh	r2, [r2, #0]
    1cba:	429a      	cmp	r2, r3
    1cbc:	d901      	bls.n	1cc2 <nvm_write_buffer+0x66>
		return STATUS_ERR_INVALID_ARG;
    1cbe:	2317      	movs	r3, #23
    1cc0:	e080      	b.n	1dc4 <nvm_write_buffer+0x168>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1cc2:	4b45      	ldr	r3, [pc, #276]	; (1dd8 <nvm_write_buffer+0x17c>)
    1cc4:	613b      	str	r3, [r7, #16]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1cc6:	4b45      	ldr	r3, [pc, #276]	; (1ddc <nvm_write_buffer+0x180>)
    1cc8:	4798      	blx	r3
    1cca:	0003      	movs	r3, r0
    1ccc:	001a      	movs	r2, r3
    1cce:	2301      	movs	r3, #1
    1cd0:	4053      	eors	r3, r2
    1cd2:	b2db      	uxtb	r3, r3
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	d001      	beq.n	1cdc <nvm_write_buffer+0x80>
		return STATUS_BUSY;
    1cd8:	2305      	movs	r3, #5
    1cda:	e073      	b.n	1dc4 <nvm_write_buffer+0x168>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1cdc:	693b      	ldr	r3, [r7, #16]
    1cde:	4a40      	ldr	r2, [pc, #256]	; (1de0 <nvm_write_buffer+0x184>)
    1ce0:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	4b3d      	ldr	r3, [pc, #244]	; (1ddc <nvm_write_buffer+0x180>)
    1ce6:	4798      	blx	r3
    1ce8:	0003      	movs	r3, r0
    1cea:	001a      	movs	r2, r3
    1cec:	2301      	movs	r3, #1
    1cee:	4053      	eors	r3, r2
    1cf0:	b2db      	uxtb	r3, r3
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d1f6      	bne.n	1ce4 <nvm_write_buffer+0x88>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1cf6:	693b      	ldr	r3, [r7, #16]
    1cf8:	2220      	movs	r2, #32
    1cfa:	32ff      	adds	r2, #255	; 0xff
    1cfc:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	085b      	lsrs	r3, r3, #1
    1d02:	61bb      	str	r3, [r7, #24]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    1d04:	2316      	movs	r3, #22
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	2200      	movs	r2, #0
    1d0a:	801a      	strh	r2, [r3, #0]
    1d0c:	e032      	b.n	1d74 <nvm_write_buffer+0x118>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    1d0e:	2316      	movs	r3, #22
    1d10:	18fb      	adds	r3, r7, r3
    1d12:	881b      	ldrh	r3, [r3, #0]
    1d14:	68ba      	ldr	r2, [r7, #8]
    1d16:	18d3      	adds	r3, r2, r3
    1d18:	781a      	ldrb	r2, [r3, #0]
    1d1a:	2314      	movs	r3, #20
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1d20:	2316      	movs	r3, #22
    1d22:	18fb      	adds	r3, r7, r3
    1d24:	881a      	ldrh	r2, [r3, #0]
    1d26:	1dbb      	adds	r3, r7, #6
    1d28:	881b      	ldrh	r3, [r3, #0]
    1d2a:	3b01      	subs	r3, #1
    1d2c:	429a      	cmp	r2, r3
    1d2e:	da11      	bge.n	1d54 <nvm_write_buffer+0xf8>
			data |= (buffer[i + 1] << 8);
    1d30:	2316      	movs	r3, #22
    1d32:	18fb      	adds	r3, r7, r3
    1d34:	881b      	ldrh	r3, [r3, #0]
    1d36:	3301      	adds	r3, #1
    1d38:	68ba      	ldr	r2, [r7, #8]
    1d3a:	18d3      	adds	r3, r2, r3
    1d3c:	781b      	ldrb	r3, [r3, #0]
    1d3e:	021b      	lsls	r3, r3, #8
    1d40:	b21a      	sxth	r2, r3
    1d42:	2314      	movs	r3, #20
    1d44:	18fb      	adds	r3, r7, r3
    1d46:	2100      	movs	r1, #0
    1d48:	5e5b      	ldrsh	r3, [r3, r1]
    1d4a:	4313      	orrs	r3, r2
    1d4c:	b21a      	sxth	r2, r3
    1d4e:	2314      	movs	r3, #20
    1d50:	18fb      	adds	r3, r7, r3
    1d52:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    1d54:	69bb      	ldr	r3, [r7, #24]
    1d56:	1c5a      	adds	r2, r3, #1
    1d58:	61ba      	str	r2, [r7, #24]
    1d5a:	005b      	lsls	r3, r3, #1
    1d5c:	001a      	movs	r2, r3
    1d5e:	2314      	movs	r3, #20
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	881b      	ldrh	r3, [r3, #0]
    1d64:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1d66:	2316      	movs	r3, #22
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	2216      	movs	r2, #22
    1d6c:	18ba      	adds	r2, r7, r2
    1d6e:	8812      	ldrh	r2, [r2, #0]
    1d70:	3202      	adds	r2, #2
    1d72:	801a      	strh	r2, [r3, #0]
    1d74:	2316      	movs	r3, #22
    1d76:	18fa      	adds	r2, r7, r3
    1d78:	1dbb      	adds	r3, r7, #6
    1d7a:	8812      	ldrh	r2, [r2, #0]
    1d7c:	881b      	ldrh	r3, [r3, #0]
    1d7e:	429a      	cmp	r2, r3
    1d80:	d3c5      	bcc.n	1d0e <nvm_write_buffer+0xb2>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1d82:	4b12      	ldr	r3, [pc, #72]	; (1dcc <nvm_write_buffer+0x170>)
    1d84:	791b      	ldrb	r3, [r3, #4]
    1d86:	2201      	movs	r2, #1
    1d88:	4053      	eors	r3, r2
    1d8a:	b2db      	uxtb	r3, r3
    1d8c:	2b00      	cmp	r3, #0
    1d8e:	d018      	beq.n	1dc2 <nvm_write_buffer+0x166>
    1d90:	1dbb      	adds	r3, r7, #6
    1d92:	881b      	ldrh	r3, [r3, #0]
    1d94:	2b3f      	cmp	r3, #63	; 0x3f
    1d96:	d814      	bhi.n	1dc2 <nvm_write_buffer+0x166>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    1d98:	231f      	movs	r3, #31
    1d9a:	18fb      	adds	r3, r7, r3
    1d9c:	781b      	ldrb	r3, [r3, #0]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d007      	beq.n	1db2 <nvm_write_buffer+0x156>
    1da2:	68fb      	ldr	r3, [r7, #12]
    1da4:	2200      	movs	r2, #0
    1da6:	0019      	movs	r1, r3
    1da8:	201c      	movs	r0, #28
    1daa:	4b0e      	ldr	r3, [pc, #56]	; (1de4 <nvm_write_buffer+0x188>)
    1dac:	4798      	blx	r3
    1dae:	0003      	movs	r3, r0
    1db0:	e008      	b.n	1dc4 <nvm_write_buffer+0x168>
    1db2:	68fb      	ldr	r3, [r7, #12]
    1db4:	2200      	movs	r2, #0
    1db6:	0019      	movs	r1, r3
    1db8:	2004      	movs	r0, #4
    1dba:	4b0a      	ldr	r3, [pc, #40]	; (1de4 <nvm_write_buffer+0x188>)
    1dbc:	4798      	blx	r3
    1dbe:	0003      	movs	r3, r0
    1dc0:	e000      	b.n	1dc4 <nvm_write_buffer+0x168>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    1dc2:	2300      	movs	r3, #0
}
    1dc4:	0018      	movs	r0, r3
    1dc6:	46bd      	mov	sp, r7
    1dc8:	b008      	add	sp, #32
    1dca:	bd80      	pop	{r7, pc}
    1dcc:	20000bbc 	.word	0x20000bbc
    1dd0:	00401fff 	.word	0x00401fff
    1dd4:	003fffff 	.word	0x003fffff
    1dd8:	41004000 	.word	0x41004000
    1ddc:	0000196d 	.word	0x0000196d
    1de0:	ffffa544 	.word	0xffffa544
    1de4:	00001ae9 	.word	0x00001ae9

00001de8 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b088      	sub	sp, #32
    1dec:	af00      	add	r7, sp, #0
    1dee:	60f8      	str	r0, [r7, #12]
    1df0:	60b9      	str	r1, [r7, #8]
    1df2:	1dbb      	adds	r3, r7, #6
    1df4:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1df6:	4b3c      	ldr	r3, [pc, #240]	; (1ee8 <nvm_read_buffer+0x100>)
    1df8:	881b      	ldrh	r3, [r3, #0]
    1dfa:	001a      	movs	r2, r3
    1dfc:	4b3a      	ldr	r3, [pc, #232]	; (1ee8 <nvm_read_buffer+0x100>)
    1dfe:	885b      	ldrh	r3, [r3, #2]
    1e00:	435a      	muls	r2, r3
	if (source_address >
    1e02:	68fb      	ldr	r3, [r7, #12]
    1e04:	429a      	cmp	r2, r3
    1e06:	d209      	bcs.n	1e1c <nvm_read_buffer+0x34>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    1e08:	68fb      	ldr	r3, [r7, #12]
    1e0a:	4a38      	ldr	r2, [pc, #224]	; (1eec <nvm_read_buffer+0x104>)
    1e0c:	4293      	cmp	r3, r2
    1e0e:	d803      	bhi.n	1e18 <nvm_read_buffer+0x30>
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	4a37      	ldr	r2, [pc, #220]	; (1ef0 <nvm_read_buffer+0x108>)
    1e14:	4293      	cmp	r3, r2
    1e16:	d801      	bhi.n	1e1c <nvm_read_buffer+0x34>
			return STATUS_ERR_BAD_ADDRESS;
    1e18:	2318      	movs	r3, #24
    1e1a:	e060      	b.n	1ede <nvm_read_buffer+0xf6>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    1e1c:	4b32      	ldr	r3, [pc, #200]	; (1ee8 <nvm_read_buffer+0x100>)
    1e1e:	881b      	ldrh	r3, [r3, #0]
    1e20:	3b01      	subs	r3, #1
    1e22:	001a      	movs	r2, r3
    1e24:	68fb      	ldr	r3, [r7, #12]
    1e26:	4013      	ands	r3, r2
    1e28:	d001      	beq.n	1e2e <nvm_read_buffer+0x46>
		return STATUS_ERR_BAD_ADDRESS;
    1e2a:	2318      	movs	r3, #24
    1e2c:	e057      	b.n	1ede <nvm_read_buffer+0xf6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    1e2e:	4b2e      	ldr	r3, [pc, #184]	; (1ee8 <nvm_read_buffer+0x100>)
    1e30:	881b      	ldrh	r3, [r3, #0]
    1e32:	1dba      	adds	r2, r7, #6
    1e34:	8812      	ldrh	r2, [r2, #0]
    1e36:	429a      	cmp	r2, r3
    1e38:	d901      	bls.n	1e3e <nvm_read_buffer+0x56>
		return STATUS_ERR_INVALID_ARG;
    1e3a:	2317      	movs	r3, #23
    1e3c:	e04f      	b.n	1ede <nvm_read_buffer+0xf6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1e3e:	4b2d      	ldr	r3, [pc, #180]	; (1ef4 <nvm_read_buffer+0x10c>)
    1e40:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1e42:	4b2d      	ldr	r3, [pc, #180]	; (1ef8 <nvm_read_buffer+0x110>)
    1e44:	4798      	blx	r3
    1e46:	0003      	movs	r3, r0
    1e48:	001a      	movs	r2, r3
    1e4a:	2301      	movs	r3, #1
    1e4c:	4053      	eors	r3, r2
    1e4e:	b2db      	uxtb	r3, r3
    1e50:	2b00      	cmp	r3, #0
    1e52:	d001      	beq.n	1e58 <nvm_read_buffer+0x70>
		return STATUS_BUSY;
    1e54:	2305      	movs	r3, #5
    1e56:	e042      	b.n	1ede <nvm_read_buffer+0xf6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1e58:	697b      	ldr	r3, [r7, #20]
    1e5a:	2220      	movs	r2, #32
    1e5c:	32ff      	adds	r2, #255	; 0xff
    1e5e:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
    1e60:	68fb      	ldr	r3, [r7, #12]
    1e62:	085b      	lsrs	r3, r3, #1
    1e64:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    1e66:	231a      	movs	r3, #26
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	2200      	movs	r2, #0
    1e6c:	801a      	strh	r2, [r3, #0]
    1e6e:	e02e      	b.n	1ece <nvm_read_buffer+0xe6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    1e70:	69fb      	ldr	r3, [r7, #28]
    1e72:	1c5a      	adds	r2, r3, #1
    1e74:	61fa      	str	r2, [r7, #28]
    1e76:	005b      	lsls	r3, r3, #1
    1e78:	001a      	movs	r2, r3
    1e7a:	2312      	movs	r3, #18
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	8812      	ldrh	r2, [r2, #0]
    1e80:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    1e82:	231a      	movs	r3, #26
    1e84:	18fb      	adds	r3, r7, r3
    1e86:	881b      	ldrh	r3, [r3, #0]
    1e88:	68ba      	ldr	r2, [r7, #8]
    1e8a:	18d3      	adds	r3, r2, r3
    1e8c:	2212      	movs	r2, #18
    1e8e:	18ba      	adds	r2, r7, r2
    1e90:	8812      	ldrh	r2, [r2, #0]
    1e92:	b2d2      	uxtb	r2, r2
    1e94:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1e96:	231a      	movs	r3, #26
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	881a      	ldrh	r2, [r3, #0]
    1e9c:	1dbb      	adds	r3, r7, #6
    1e9e:	881b      	ldrh	r3, [r3, #0]
    1ea0:	3b01      	subs	r3, #1
    1ea2:	429a      	cmp	r2, r3
    1ea4:	da0c      	bge.n	1ec0 <nvm_read_buffer+0xd8>
			buffer[i + 1] = (data >> 8);
    1ea6:	231a      	movs	r3, #26
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	881b      	ldrh	r3, [r3, #0]
    1eac:	3301      	adds	r3, #1
    1eae:	68ba      	ldr	r2, [r7, #8]
    1eb0:	18d3      	adds	r3, r2, r3
    1eb2:	2212      	movs	r2, #18
    1eb4:	18ba      	adds	r2, r7, r2
    1eb6:	8812      	ldrh	r2, [r2, #0]
    1eb8:	0a12      	lsrs	r2, r2, #8
    1eba:	b292      	uxth	r2, r2
    1ebc:	b2d2      	uxtb	r2, r2
    1ebe:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1ec0:	231a      	movs	r3, #26
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	221a      	movs	r2, #26
    1ec6:	18ba      	adds	r2, r7, r2
    1ec8:	8812      	ldrh	r2, [r2, #0]
    1eca:	3202      	adds	r2, #2
    1ecc:	801a      	strh	r2, [r3, #0]
    1ece:	231a      	movs	r3, #26
    1ed0:	18fa      	adds	r2, r7, r3
    1ed2:	1dbb      	adds	r3, r7, #6
    1ed4:	8812      	ldrh	r2, [r2, #0]
    1ed6:	881b      	ldrh	r3, [r3, #0]
    1ed8:	429a      	cmp	r2, r3
    1eda:	d3c9      	bcc.n	1e70 <nvm_read_buffer+0x88>
		}
	}

	return STATUS_OK;
    1edc:	2300      	movs	r3, #0
}
    1ede:	0018      	movs	r0, r3
    1ee0:	46bd      	mov	sp, r7
    1ee2:	b008      	add	sp, #32
    1ee4:	bd80      	pop	{r7, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	20000bbc 	.word	0x20000bbc
    1eec:	00401fff 	.word	0x00401fff
    1ef0:	003fffff 	.word	0x003fffff
    1ef4:	41004000 	.word	0x41004000
    1ef8:	0000196d 	.word	0x0000196d

00001efc <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    1efc:	b580      	push	{r7, lr}
    1efe:	b084      	sub	sp, #16
    1f00:	af00      	add	r7, sp, #0
    1f02:	6078      	str	r0, [r7, #4]
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
    1f04:	230f      	movs	r3, #15
    1f06:	18fb      	adds	r3, r7, r3
    1f08:	2200      	movs	r2, #0
    1f0a:	701a      	strb	r2, [r3, #0]
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1f0c:	4b36      	ldr	r3, [pc, #216]	; (1fe8 <nvm_erase_row+0xec>)
    1f0e:	881b      	ldrh	r3, [r3, #0]
    1f10:	001a      	movs	r2, r3
    1f12:	4b35      	ldr	r3, [pc, #212]	; (1fe8 <nvm_erase_row+0xec>)
    1f14:	885b      	ldrh	r3, [r3, #2]
    1f16:	435a      	muls	r2, r3
	if (row_address >
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	429a      	cmp	r2, r3
    1f1c:	d20d      	bcs.n	1f3a <nvm_erase_row+0x3e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	4a32      	ldr	r2, [pc, #200]	; (1fec <nvm_erase_row+0xf0>)
    1f22:	4293      	cmp	r3, r2
    1f24:	d803      	bhi.n	1f2e <nvm_erase_row+0x32>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	4a31      	ldr	r2, [pc, #196]	; (1ff0 <nvm_erase_row+0xf4>)
    1f2a:	4293      	cmp	r3, r2
    1f2c:	d801      	bhi.n	1f32 <nvm_erase_row+0x36>
			return STATUS_ERR_BAD_ADDRESS;
    1f2e:	2318      	movs	r3, #24
    1f30:	e056      	b.n	1fe0 <nvm_erase_row+0xe4>
		}
		is_rww_eeprom = true;
    1f32:	230f      	movs	r3, #15
    1f34:	18fb      	adds	r3, r7, r3
    1f36:	2201      	movs	r2, #1
    1f38:	701a      	strb	r2, [r3, #0]
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    1f3a:	4b2b      	ldr	r3, [pc, #172]	; (1fe8 <nvm_erase_row+0xec>)
    1f3c:	881b      	ldrh	r3, [r3, #0]
    1f3e:	009b      	lsls	r3, r3, #2
    1f40:	3b01      	subs	r3, #1
    1f42:	001a      	movs	r2, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	4013      	ands	r3, r2
    1f48:	d001      	beq.n	1f4e <nvm_erase_row+0x52>
		return STATUS_ERR_BAD_ADDRESS;
    1f4a:	2318      	movs	r3, #24
    1f4c:	e048      	b.n	1fe0 <nvm_erase_row+0xe4>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1f4e:	4b29      	ldr	r3, [pc, #164]	; (1ff4 <nvm_erase_row+0xf8>)
    1f50:	60bb      	str	r3, [r7, #8]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1f52:	4b29      	ldr	r3, [pc, #164]	; (1ff8 <nvm_erase_row+0xfc>)
    1f54:	4798      	blx	r3
    1f56:	0003      	movs	r3, r0
    1f58:	001a      	movs	r2, r3
    1f5a:	2301      	movs	r3, #1
    1f5c:	4053      	eors	r3, r2
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	2b00      	cmp	r3, #0
    1f62:	d001      	beq.n	1f68 <nvm_erase_row+0x6c>
		return STATUS_BUSY;
    1f64:	2305      	movs	r3, #5
    1f66:	e03b      	b.n	1fe0 <nvm_erase_row+0xe4>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1f68:	68bb      	ldr	r3, [r7, #8]
    1f6a:	2220      	movs	r2, #32
    1f6c:	32ff      	adds	r2, #255	; 0xff
    1f6e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	089b      	lsrs	r3, r3, #2
    1f74:	005a      	lsls	r2, r3, #1
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	61da      	str	r2, [r3, #28]
		NVM_MEMORY[row_address / 2] = 0x0;
	}
#endif

#ifdef FEATURE_NVM_RWWEE
	if (is_rww_eeprom) {
    1f7a:	230f      	movs	r3, #15
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	781b      	ldrb	r3, [r3, #0]
    1f80:	2b00      	cmp	r3, #0
    1f82:	d00b      	beq.n	1f9c <nvm_erase_row+0xa0>
		/* Disable Cache */
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    1f84:	68bb      	ldr	r3, [r7, #8]
    1f86:	685a      	ldr	r2, [r3, #4]
    1f88:	2180      	movs	r1, #128	; 0x80
    1f8a:	02c9      	lsls	r1, r1, #11
    1f8c:	430a      	orrs	r2, r1
    1f8e:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    1f90:	68bb      	ldr	r3, [r7, #8]
    1f92:	685b      	ldr	r3, [r3, #4]

		/* Set command */
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1f94:	68bb      	ldr	r3, [r7, #8]
    1f96:	4a19      	ldr	r2, [pc, #100]	; (1ffc <nvm_erase_row+0x100>)
    1f98:	801a      	strh	r2, [r3, #0]
    1f9a:	e002      	b.n	1fa2 <nvm_erase_row+0xa6>
	}
	else{
		/* Set command */
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1f9c:	68bb      	ldr	r3, [r7, #8]
    1f9e:	4a18      	ldr	r2, [pc, #96]	; (2000 <STACK_SIZE>)
    1fa0:	801a      	strh	r2, [r3, #0]
	}
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
#endif

	while (!nvm_is_ready()) {
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	4b14      	ldr	r3, [pc, #80]	; (1ff8 <nvm_erase_row+0xfc>)
    1fa6:	4798      	blx	r3
    1fa8:	0003      	movs	r3, r0
    1faa:	001a      	movs	r2, r3
    1fac:	2301      	movs	r3, #1
    1fae:	4053      	eors	r3, r2
    1fb0:	b2db      	uxtb	r3, r3
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d1f6      	bne.n	1fa4 <nvm_erase_row+0xa8>
	}

#ifdef FEATURE_NVM_RWWEE
	if (is_rww_eeprom) {
    1fb6:	230f      	movs	r3, #15
    1fb8:	18fb      	adds	r3, r7, r3
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	d004      	beq.n	1fca <nvm_erase_row+0xce>
		/* Enable Cache */
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    1fc0:	68bb      	ldr	r3, [r7, #8]
    1fc2:	685a      	ldr	r2, [r3, #4]
    1fc4:	490f      	ldr	r1, [pc, #60]	; (2004 <STACK_SIZE+0x4>)
    1fc6:	400a      	ands	r2, r1
    1fc8:	605a      	str	r2, [r3, #4]
	}
#endif

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1fca:	68bb      	ldr	r3, [r7, #8]
    1fcc:	8b1b      	ldrh	r3, [r3, #24]
    1fce:	b29b      	uxth	r3, r3
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	001a      	movs	r2, r3
    1fd4:	231c      	movs	r3, #28
    1fd6:	4013      	ands	r3, r2
    1fd8:	d001      	beq.n	1fde <nvm_erase_row+0xe2>
		return STATUS_ABORTED;
    1fda:	2304      	movs	r3, #4
    1fdc:	e000      	b.n	1fe0 <nvm_erase_row+0xe4>
	}

	return STATUS_OK;
    1fde:	2300      	movs	r3, #0
}
    1fe0:	0018      	movs	r0, r3
    1fe2:	46bd      	mov	sp, r7
    1fe4:	b004      	add	sp, #16
    1fe6:	bd80      	pop	{r7, pc}
    1fe8:	20000bbc 	.word	0x20000bbc
    1fec:	00401fff 	.word	0x00401fff
    1ff0:	003fffff 	.word	0x003fffff
    1ff4:	41004000 	.word	0x41004000
    1ff8:	0000196d 	.word	0x0000196d
    1ffc:	ffffa51a 	.word	0xffffa51a
    2000:	ffffa502 	.word	0xffffa502
    2004:	fffbffff 	.word	0xfffbffff

00002008 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
    2008:	b580      	push	{r7, lr}
    200a:	b086      	sub	sp, #24
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    2010:	4b2c      	ldr	r3, [pc, #176]	; (20c4 <nvm_get_parameters+0xbc>)
    2012:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	2220      	movs	r2, #32
    2018:	32ff      	adds	r2, #255	; 0xff
    201a:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    201c:	697b      	ldr	r3, [r7, #20]
    201e:	689b      	ldr	r3, [r3, #8]
    2020:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    2022:	693b      	ldr	r3, [r7, #16]
    2024:	0c1b      	lsrs	r3, r3, #16
    2026:	2207      	movs	r2, #7
    2028:	4013      	ands	r3, r2
    202a:	2208      	movs	r2, #8
    202c:	409a      	lsls	r2, r3
    202e:	0013      	movs	r3, r2
	parameters->page_size =
    2030:	b2da      	uxtb	r2, r3
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    2036:	693b      	ldr	r3, [r7, #16]
    2038:	b29a      	uxth	r2, r3
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    203e:	693b      	ldr	r3, [r7, #16]
    2040:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    2042:	b29a      	uxth	r2, r3
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	819a      	strh	r2, [r3, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    2048:	4b1f      	ldr	r3, [pc, #124]	; (20c8 <nvm_get_parameters+0xc0>)
    204a:	881b      	ldrh	r3, [r3, #0]
    204c:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    204e:	091b      	lsrs	r3, r3, #4
    2050:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
    2052:	230e      	movs	r3, #14
    2054:	18fb      	adds	r3, r7, r3
    2056:	2107      	movs	r1, #7
    2058:	400a      	ands	r2, r1
    205a:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    205c:	230e      	movs	r3, #14
    205e:	18fb      	adds	r3, r7, r3
    2060:	881b      	ldrh	r3, [r3, #0]
    2062:	2b07      	cmp	r3, #7
    2064:	d103      	bne.n	206e <nvm_get_parameters+0x66>
		parameters->eeprom_number_of_pages = 0;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	2200      	movs	r2, #0
    206a:	605a      	str	r2, [r3, #4]
    206c:	e00a      	b.n	2084 <nvm_get_parameters+0x7c>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    206e:	230e      	movs	r3, #14
    2070:	18fb      	adds	r3, r7, r3
    2072:	881b      	ldrh	r3, [r3, #0]
    2074:	2206      	movs	r2, #6
    2076:	1ad3      	subs	r3, r2, r3
    2078:	2204      	movs	r2, #4
    207a:	409a      	lsls	r2, r3
    207c:	0013      	movs	r3, r2
    207e:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
    2080:	687b      	ldr	r3, [r7, #4]
    2082:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    2084:	4b10      	ldr	r3, [pc, #64]	; (20c8 <nvm_get_parameters+0xc0>)
    2086:	881b      	ldrh	r3, [r3, #0]
    2088:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
    208a:	230c      	movs	r3, #12
    208c:	18fb      	adds	r3, r7, r3
    208e:	2107      	movs	r1, #7
    2090:	400a      	ands	r2, r1
    2092:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    2094:	230c      	movs	r3, #12
    2096:	18fb      	adds	r3, r7, r3
    2098:	881b      	ldrh	r3, [r3, #0]
    209a:	2b07      	cmp	r3, #7
    209c:	d103      	bne.n	20a6 <nvm_get_parameters+0x9e>
		parameters->bootloader_number_of_pages = 0;
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	2200      	movs	r2, #0
    20a2:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    20a4:	e00a      	b.n	20bc <nvm_get_parameters+0xb4>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    20a6:	230c      	movs	r3, #12
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	881b      	ldrh	r3, [r3, #0]
    20ac:	2207      	movs	r2, #7
    20ae:	1ad3      	subs	r3, r2, r3
    20b0:	2204      	movs	r2, #4
    20b2:	409a      	lsls	r2, r3
    20b4:	0013      	movs	r3, r2
    20b6:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	609a      	str	r2, [r3, #8]
}
    20bc:	46c0      	nop			; (mov r8, r8)
    20be:	46bd      	mov	sp, r7
    20c0:	b006      	add	sp, #24
    20c2:	bd80      	pop	{r7, pc}
    20c4:	41004000 	.word	0x41004000
    20c8:	00804000 	.word	0x00804000

000020cc <system_pinmux_get_config_defaults>:
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b082      	sub	sp, #8
    20d0:	af00      	add	r7, sp, #0
    20d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20d4:	687b      	ldr	r3, [r7, #4]
    20d6:	2280      	movs	r2, #128	; 0x80
    20d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	2200      	movs	r2, #0
    20de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    20e0:	687b      	ldr	r3, [r7, #4]
    20e2:	2201      	movs	r2, #1
    20e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	2200      	movs	r2, #0
    20ea:	70da      	strb	r2, [r3, #3]
}
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46bd      	mov	sp, r7
    20f0:	b002      	add	sp, #8
    20f2:	bd80      	pop	{r7, pc}

000020f4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    20f4:	b580      	push	{r7, lr}
    20f6:	b084      	sub	sp, #16
    20f8:	af00      	add	r7, sp, #0
    20fa:	0002      	movs	r2, r0
    20fc:	6039      	str	r1, [r7, #0]
    20fe:	1dfb      	adds	r3, r7, #7
    2100:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2102:	230c      	movs	r3, #12
    2104:	18fb      	adds	r3, r7, r3
    2106:	0018      	movs	r0, r3
    2108:	4b10      	ldr	r3, [pc, #64]	; (214c <port_pin_set_config+0x58>)
    210a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    210c:	230c      	movs	r3, #12
    210e:	18fb      	adds	r3, r7, r3
    2110:	2280      	movs	r2, #128	; 0x80
    2112:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2114:	683b      	ldr	r3, [r7, #0]
    2116:	781a      	ldrb	r2, [r3, #0]
    2118:	230c      	movs	r3, #12
    211a:	18fb      	adds	r3, r7, r3
    211c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    211e:	683b      	ldr	r3, [r7, #0]
    2120:	785a      	ldrb	r2, [r3, #1]
    2122:	230c      	movs	r3, #12
    2124:	18fb      	adds	r3, r7, r3
    2126:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2128:	683b      	ldr	r3, [r7, #0]
    212a:	789a      	ldrb	r2, [r3, #2]
    212c:	230c      	movs	r3, #12
    212e:	18fb      	adds	r3, r7, r3
    2130:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2132:	230c      	movs	r3, #12
    2134:	18fa      	adds	r2, r7, r3
    2136:	1dfb      	adds	r3, r7, #7
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	0011      	movs	r1, r2
    213c:	0018      	movs	r0, r3
    213e:	4b04      	ldr	r3, [pc, #16]	; (2150 <port_pin_set_config+0x5c>)
    2140:	4798      	blx	r3
}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	46bd      	mov	sp, r7
    2146:	b004      	add	sp, #16
    2148:	bd80      	pop	{r7, pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	000020cd 	.word	0x000020cd
    2150:	00005761 	.word	0x00005761

00002154 <system_apb_clock_set_mask>:
{
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
    215a:	0002      	movs	r2, r0
    215c:	6039      	str	r1, [r7, #0]
    215e:	1dfb      	adds	r3, r7, #7
    2160:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2162:	1dfb      	adds	r3, r7, #7
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2b04      	cmp	r3, #4
    2168:	d827      	bhi.n	21ba <system_apb_clock_set_mask+0x66>
    216a:	009a      	lsls	r2, r3, #2
    216c:	4b16      	ldr	r3, [pc, #88]	; (21c8 <system_apb_clock_set_mask+0x74>)
    216e:	18d3      	adds	r3, r2, r3
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    2174:	4b15      	ldr	r3, [pc, #84]	; (21cc <system_apb_clock_set_mask+0x78>)
    2176:	4a15      	ldr	r2, [pc, #84]	; (21cc <system_apb_clock_set_mask+0x78>)
    2178:	6951      	ldr	r1, [r2, #20]
    217a:	683a      	ldr	r2, [r7, #0]
    217c:	430a      	orrs	r2, r1
    217e:	615a      	str	r2, [r3, #20]
			break;
    2180:	e01d      	b.n	21be <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    2182:	4b12      	ldr	r3, [pc, #72]	; (21cc <system_apb_clock_set_mask+0x78>)
    2184:	4a11      	ldr	r2, [pc, #68]	; (21cc <system_apb_clock_set_mask+0x78>)
    2186:	6991      	ldr	r1, [r2, #24]
    2188:	683a      	ldr	r2, [r7, #0]
    218a:	430a      	orrs	r2, r1
    218c:	619a      	str	r2, [r3, #24]
			break;
    218e:	e016      	b.n	21be <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    2190:	4b0e      	ldr	r3, [pc, #56]	; (21cc <system_apb_clock_set_mask+0x78>)
    2192:	4a0e      	ldr	r2, [pc, #56]	; (21cc <system_apb_clock_set_mask+0x78>)
    2194:	69d1      	ldr	r1, [r2, #28]
    2196:	683a      	ldr	r2, [r7, #0]
    2198:	430a      	orrs	r2, r1
    219a:	61da      	str	r2, [r3, #28]
			break;
    219c:	e00f      	b.n	21be <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    219e:	4b0b      	ldr	r3, [pc, #44]	; (21cc <system_apb_clock_set_mask+0x78>)
    21a0:	4a0a      	ldr	r2, [pc, #40]	; (21cc <system_apb_clock_set_mask+0x78>)
    21a2:	6a11      	ldr	r1, [r2, #32]
    21a4:	683a      	ldr	r2, [r7, #0]
    21a6:	430a      	orrs	r2, r1
    21a8:	621a      	str	r2, [r3, #32]
			break;
    21aa:	e008      	b.n	21be <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    21ac:	4b07      	ldr	r3, [pc, #28]	; (21cc <system_apb_clock_set_mask+0x78>)
    21ae:	4a07      	ldr	r2, [pc, #28]	; (21cc <system_apb_clock_set_mask+0x78>)
    21b0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    21b2:	683a      	ldr	r2, [r7, #0]
    21b4:	430a      	orrs	r2, r1
    21b6:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    21b8:	e001      	b.n	21be <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    21ba:	2317      	movs	r3, #23
    21bc:	e000      	b.n	21c0 <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    21be:	2300      	movs	r3, #0
}
    21c0:	0018      	movs	r0, r3
    21c2:	46bd      	mov	sp, r7
    21c4:	b002      	add	sp, #8
    21c6:	bd80      	pop	{r7, pc}
    21c8:	0002abc0 	.word	0x0002abc0
    21cc:	40000400 	.word	0x40000400

000021d0 <system_interrupt_enable>:
{
    21d0:	b580      	push	{r7, lr}
    21d2:	b082      	sub	sp, #8
    21d4:	af00      	add	r7, sp, #0
    21d6:	0002      	movs	r2, r0
    21d8:	1dfb      	adds	r3, r7, #7
    21da:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21dc:	4b06      	ldr	r3, [pc, #24]	; (21f8 <system_interrupt_enable+0x28>)
    21de:	1dfa      	adds	r2, r7, #7
    21e0:	7812      	ldrb	r2, [r2, #0]
    21e2:	0011      	movs	r1, r2
    21e4:	221f      	movs	r2, #31
    21e6:	400a      	ands	r2, r1
    21e8:	2101      	movs	r1, #1
    21ea:	4091      	lsls	r1, r2
    21ec:	000a      	movs	r2, r1
    21ee:	601a      	str	r2, [r3, #0]
}
    21f0:	46c0      	nop			; (mov r8, r8)
    21f2:	46bd      	mov	sp, r7
    21f4:	b002      	add	sp, #8
    21f6:	bd80      	pop	{r7, pc}
    21f8:	e000e100 	.word	0xe000e100

000021fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    21fc:	b580      	push	{r7, lr}
    21fe:	b082      	sub	sp, #8
    2200:	af00      	add	r7, sp, #0
    2202:	0002      	movs	r2, r0
    2204:	1dfb      	adds	r3, r7, #7
    2206:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2208:	4a07      	ldr	r2, [pc, #28]	; (2228 <system_interrupt_disable+0x2c>)
    220a:	1dfb      	adds	r3, r7, #7
    220c:	781b      	ldrb	r3, [r3, #0]
    220e:	0019      	movs	r1, r3
    2210:	231f      	movs	r3, #31
    2212:	400b      	ands	r3, r1
    2214:	2101      	movs	r1, #1
    2216:	4099      	lsls	r1, r3
    2218:	000b      	movs	r3, r1
    221a:	0019      	movs	r1, r3
    221c:	2380      	movs	r3, #128	; 0x80
    221e:	50d1      	str	r1, [r2, r3]
}
    2220:	46c0      	nop			; (mov r8, r8)
    2222:	46bd      	mov	sp, r7
    2224:	b002      	add	sp, #8
    2226:	bd80      	pop	{r7, pc}
    2228:	e000e100 	.word	0xe000e100

0000222c <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    222c:	b580      	push	{r7, lr}
    222e:	b084      	sub	sp, #16
    2230:	af00      	add	r7, sp, #0
    2232:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	681b      	ldr	r3, [r3, #0]
    2238:	60fb      	str	r3, [r7, #12]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    223a:	68fb      	ldr	r3, [r7, #12]
    223c:	691b      	ldr	r3, [r3, #16]
    223e:	2b00      	cmp	r3, #0
    2240:	d001      	beq.n	2246 <rtc_count_is_syncing+0x1a>
		return true;
    2242:	2301      	movs	r3, #1
    2244:	e000      	b.n	2248 <rtc_count_is_syncing+0x1c>
	}

	return false;
    2246:	2300      	movs	r3, #0
}
    2248:	0018      	movs	r0, r3
    224a:	46bd      	mov	sp, r7
    224c:	b004      	add	sp, #16
    224e:	bd80      	pop	{r7, pc}

00002250 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    2250:	b580      	push	{r7, lr}
    2252:	b084      	sub	sp, #16
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2258:	687b      	ldr	r3, [r7, #4]
    225a:	681b      	ldr	r3, [r3, #0]
    225c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    225e:	2002      	movs	r0, #2
    2260:	4b0d      	ldr	r3, [pc, #52]	; (2298 <rtc_count_enable+0x48>)
    2262:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    2264:	46c0      	nop			; (mov r8, r8)
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	0018      	movs	r0, r3
    226a:	4b0c      	ldr	r3, [pc, #48]	; (229c <rtc_count_enable+0x4c>)
    226c:	4798      	blx	r3
    226e:	1e03      	subs	r3, r0, #0
    2270:	d1f9      	bne.n	2266 <rtc_count_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2272:	68fb      	ldr	r3, [r7, #12]
    2274:	881b      	ldrh	r3, [r3, #0]
    2276:	b29b      	uxth	r3, r3
    2278:	2202      	movs	r2, #2
    227a:	4313      	orrs	r3, r2
    227c:	b29a      	uxth	r2, r3
    227e:	68fb      	ldr	r3, [r7, #12]
    2280:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	0018      	movs	r0, r3
    2288:	4b04      	ldr	r3, [pc, #16]	; (229c <rtc_count_enable+0x4c>)
    228a:	4798      	blx	r3
    228c:	1e03      	subs	r3, r0, #0
    228e:	d1f9      	bne.n	2284 <rtc_count_enable+0x34>
		/* Wait for synchronization */
	}
}
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46bd      	mov	sp, r7
    2294:	b004      	add	sp, #16
    2296:	bd80      	pop	{r7, pc}
    2298:	000021d1 	.word	0x000021d1
    229c:	0000222d 	.word	0x0000222d

000022a0 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b084      	sub	sp, #16
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    22ae:	2002      	movs	r0, #2
    22b0:	4b10      	ldr	r3, [pc, #64]	; (22f4 <rtc_count_disable+0x54>)
    22b2:	4798      	blx	r3
#endif

	while (rtc_count_is_syncing(module)) {
    22b4:	46c0      	nop			; (mov r8, r8)
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	0018      	movs	r0, r3
    22ba:	4b0f      	ldr	r3, [pc, #60]	; (22f8 <rtc_count_disable+0x58>)
    22bc:	4798      	blx	r3
    22be:	1e03      	subs	r3, r0, #0
    22c0:	d1f9      	bne.n	22b6 <rtc_count_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	4a0d      	ldr	r2, [pc, #52]	; (22fc <rtc_count_disable+0x5c>)
    22c6:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    22c8:	68fb      	ldr	r3, [r7, #12]
    22ca:	4a0c      	ldr	r2, [pc, #48]	; (22fc <rtc_count_disable+0x5c>)
    22cc:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    22ce:	68fb      	ldr	r3, [r7, #12]
    22d0:	881b      	ldrh	r3, [r3, #0]
    22d2:	b29b      	uxth	r3, r3
    22d4:	2202      	movs	r2, #2
    22d6:	4393      	bics	r3, r2
    22d8:	b29a      	uxth	r2, r3
    22da:	68fb      	ldr	r3, [r7, #12]
    22dc:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	0018      	movs	r0, r3
    22e4:	4b04      	ldr	r3, [pc, #16]	; (22f8 <rtc_count_disable+0x58>)
    22e6:	4798      	blx	r3
    22e8:	1e03      	subs	r3, r0, #0
    22ea:	d1f9      	bne.n	22e0 <rtc_count_disable+0x40>
		/* Wait for synchronization */
	}
}
    22ec:	46c0      	nop			; (mov r8, r8)
    22ee:	46bd      	mov	sp, r7
    22f0:	b004      	add	sp, #16
    22f2:	bd80      	pop	{r7, pc}
    22f4:	000021fd 	.word	0x000021fd
    22f8:	0000222d 	.word	0x0000222d
    22fc:	ffff81ff 	.word	0xffff81ff

00002300 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    2300:	b580      	push	{r7, lr}
    2302:	b084      	sub	sp, #16
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	681b      	ldr	r3, [r3, #0]
    230c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    230e:	687b      	ldr	r3, [r7, #4]
    2310:	0018      	movs	r0, r3
    2312:	4b11      	ldr	r3, [pc, #68]	; (2358 <rtc_count_reset+0x58>)
    2314:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    2316:	687b      	ldr	r3, [r7, #4]
    2318:	2200      	movs	r2, #0
    231a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->enabled_callback    = 0;
    231c:	687b      	ldr	r3, [r7, #4]
    231e:	2200      	movs	r2, #0
    2320:	86da      	strh	r2, [r3, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	687b      	ldr	r3, [r7, #4]
    2326:	0018      	movs	r0, r3
    2328:	4b0c      	ldr	r3, [pc, #48]	; (235c <rtc_count_reset+0x5c>)
    232a:	4798      	blx	r3
    232c:	1e03      	subs	r3, r0, #0
    232e:	d1f9      	bne.n	2324 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    2330:	68fb      	ldr	r3, [r7, #12]
    2332:	881b      	ldrh	r3, [r3, #0]
    2334:	b29b      	uxth	r3, r3
    2336:	2201      	movs	r2, #1
    2338:	4313      	orrs	r3, r2
    233a:	b29a      	uxth	r2, r3
    233c:	68fb      	ldr	r3, [r7, #12]
    233e:	801a      	strh	r2, [r3, #0]

	while (rtc_count_is_syncing(module)) {
    2340:	46c0      	nop			; (mov r8, r8)
    2342:	687b      	ldr	r3, [r7, #4]
    2344:	0018      	movs	r0, r3
    2346:	4b05      	ldr	r3, [pc, #20]	; (235c <rtc_count_reset+0x5c>)
    2348:	4798      	blx	r3
    234a:	1e03      	subs	r3, r0, #0
    234c:	d1f9      	bne.n	2342 <rtc_count_reset+0x42>
		/* Wait for synchronization */
	}
}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	46bd      	mov	sp, r7
    2352:	b004      	add	sp, #16
    2354:	bd80      	pop	{r7, pc}
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	000022a1 	.word	0x000022a1
    235c:	0000222d 	.word	0x0000222d

00002360 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    2360:	b580      	push	{r7, lr}
    2362:	b084      	sub	sp, #16
    2364:	af00      	add	r7, sp, #0
    2366:	6078      	str	r0, [r7, #4]
    2368:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    236a:	687b      	ldr	r3, [r7, #4]
    236c:	681b      	ldr	r3, [r3, #0]
    236e:	60bb      	str	r3, [r7, #8]

#if SAML21 || SAMR30 || (SAMR34) || (SAMR35) || (WLR089)
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
#if (SAML21XXXB) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    2370:	683b      	ldr	r3, [r7, #0]
    2372:	791b      	ldrb	r3, [r3, #4]
    2374:	b29b      	uxth	r3, r3
    2376:	03db      	lsls	r3, r3, #15
    2378:	b29a      	uxth	r2, r3
#endif
				    | config->prescaler;
    237a:	683b      	ldr	r3, [r7, #0]
    237c:	881b      	ldrh	r3, [r3, #0]
    237e:	4313      	orrs	r3, r2
    2380:	b29a      	uxth	r2, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    2382:	68bb      	ldr	r3, [r7, #8]
    2384:	801a      	strh	r2, [r3, #0]
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0) | config->prescaler
			| (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos);
#endif

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    2386:	683b      	ldr	r3, [r7, #0]
    2388:	789b      	ldrb	r3, [r3, #2]
    238a:	2b00      	cmp	r3, #0
    238c:	d032      	beq.n	23f4 <_rtc_count_set_config+0x94>
    238e:	2b01      	cmp	r3, #1
    2390:	d15e      	bne.n	2450 <_rtc_count_set_config+0xf0>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32-bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    2392:	68bb      	ldr	r3, [r7, #8]
    2394:	881b      	ldrh	r3, [r3, #0]
    2396:	b29a      	uxth	r2, r3
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    239c:	683b      	ldr	r3, [r7, #0]
    239e:	78db      	ldrb	r3, [r3, #3]
    23a0:	2b00      	cmp	r3, #0
    23a2:	d007      	beq.n	23b4 <_rtc_count_set_config+0x54>
				/* Set clear on match. */
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    23a4:	68bb      	ldr	r3, [r7, #8]
    23a6:	881b      	ldrh	r3, [r3, #0]
    23a8:	b29b      	uxth	r3, r3
    23aa:	2280      	movs	r2, #128	; 0x80
    23ac:	4313      	orrs	r3, r2
    23ae:	b29a      	uxth	r2, r3
    23b0:	68bb      	ldr	r3, [r7, #8]
    23b2:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    23b4:	230f      	movs	r3, #15
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	2200      	movs	r2, #0
    23ba:	701a      	strb	r2, [r3, #0]
    23bc:	e014      	b.n	23e8 <_rtc_count_set_config+0x88>
				rtc_count_set_compare(module, config->compare_values[i],
    23be:	230f      	movs	r3, #15
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	781a      	ldrb	r2, [r3, #0]
    23c4:	683b      	ldr	r3, [r7, #0]
    23c6:	3202      	adds	r2, #2
    23c8:	0092      	lsls	r2, r2, #2
    23ca:	58d1      	ldr	r1, [r2, r3]
    23cc:	230f      	movs	r3, #15
    23ce:	18fb      	adds	r3, r7, r3
    23d0:	781a      	ldrb	r2, [r3, #0]
    23d2:	687b      	ldr	r3, [r7, #4]
    23d4:	0018      	movs	r0, r3
    23d6:	4b22      	ldr	r3, [pc, #136]	; (2460 <_rtc_count_set_config+0x100>)
    23d8:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_COMP32_NUM; i++) {
    23da:	230f      	movs	r3, #15
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781a      	ldrb	r2, [r3, #0]
    23e0:	230f      	movs	r3, #15
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	3201      	adds	r2, #1
    23e6:	701a      	strb	r2, [r3, #0]
    23e8:	230f      	movs	r3, #15
    23ea:	18fb      	adds	r3, r7, r3
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d0e5      	beq.n	23be <_rtc_count_set_config+0x5e>
						(enum rtc_count_compare)i);
			}
			break;
    23f2:	e02f      	b.n	2454 <_rtc_count_set_config+0xf4>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    23f4:	68bb      	ldr	r3, [r7, #8]
    23f6:	881b      	ldrh	r3, [r3, #0]
    23f8:	b29b      	uxth	r3, r3
    23fa:	2204      	movs	r2, #4
    23fc:	4313      	orrs	r3, r2
    23fe:	b29a      	uxth	r2, r3
    2400:	68bb      	ldr	r3, [r7, #8]
    2402:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    2404:	683b      	ldr	r3, [r7, #0]
    2406:	78db      	ldrb	r3, [r3, #3]
    2408:	2b00      	cmp	r3, #0
    240a:	d001      	beq.n	2410 <_rtc_count_set_config+0xb0>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    240c:	2317      	movs	r3, #23
    240e:	e022      	b.n	2456 <_rtc_count_set_config+0xf6>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2410:	230e      	movs	r3, #14
    2412:	18fb      	adds	r3, r7, r3
    2414:	2200      	movs	r2, #0
    2416:	701a      	strb	r2, [r3, #0]
    2418:	e014      	b.n	2444 <_rtc_count_set_config+0xe4>
				rtc_count_set_compare(module, config->compare_values[i],
    241a:	230e      	movs	r3, #14
    241c:	18fb      	adds	r3, r7, r3
    241e:	781a      	ldrb	r2, [r3, #0]
    2420:	683b      	ldr	r3, [r7, #0]
    2422:	3202      	adds	r2, #2
    2424:	0092      	lsls	r2, r2, #2
    2426:	58d1      	ldr	r1, [r2, r3]
    2428:	230e      	movs	r3, #14
    242a:	18fb      	adds	r3, r7, r3
    242c:	781a      	ldrb	r2, [r3, #0]
    242e:	687b      	ldr	r3, [r7, #4]
    2430:	0018      	movs	r0, r3
    2432:	4b0b      	ldr	r3, [pc, #44]	; (2460 <_rtc_count_set_config+0x100>)
    2434:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    2436:	230e      	movs	r3, #14
    2438:	18fb      	adds	r3, r7, r3
    243a:	781a      	ldrb	r2, [r3, #0]
    243c:	230e      	movs	r3, #14
    243e:	18fb      	adds	r3, r7, r3
    2440:	3201      	adds	r2, #1
    2442:	701a      	strb	r2, [r3, #0]
    2444:	230e      	movs	r3, #14
    2446:	18fb      	adds	r3, r7, r3
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	2b01      	cmp	r3, #1
    244c:	d9e5      	bls.n	241a <_rtc_count_set_config+0xba>
						(enum rtc_count_compare)i);
			}
			break;
    244e:	e001      	b.n	2454 <_rtc_count_set_config+0xf4>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2450:	2317      	movs	r3, #23
    2452:	e000      	b.n	2456 <_rtc_count_set_config+0xf6>
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    2454:	2300      	movs	r3, #0
}
    2456:	0018      	movs	r0, r3
    2458:	46bd      	mov	sp, r7
    245a:	b004      	add	sp, #16
    245c:	bd80      	pop	{r7, pc}
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00002585 	.word	0x00002585

00002464 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    2464:	b580      	push	{r7, lr}
    2466:	b084      	sub	sp, #16
    2468:	af00      	add	r7, sp, #0
    246a:	60f8      	str	r0, [r7, #12]
    246c:	60b9      	str	r1, [r7, #8]
    246e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    2470:	68fb      	ldr	r3, [r7, #12]
    2472:	68ba      	ldr	r2, [r7, #8]
    2474:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_RTC);
    2476:	2380      	movs	r3, #128	; 0x80
    2478:	005b      	lsls	r3, r3, #1
    247a:	0019      	movs	r1, r3
    247c:	2000      	movs	r0, #0
    247e:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <rtc_count_init+0x50>)
    2480:	4798      	blx	r3

	/* Select RTC clock */
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    2482:	4b0d      	ldr	r3, [pc, #52]	; (24b8 <rtc_count_init+0x54>)
    2484:	2205      	movs	r2, #5
    2486:	611a      	str	r2, [r3, #16]

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    2488:	68fb      	ldr	r3, [r7, #12]
    248a:	0018      	movs	r0, r3
    248c:	4b0b      	ldr	r3, [pc, #44]	; (24bc <rtc_count_init+0x58>)
    248e:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	789a      	ldrb	r2, [r3, #2]
    2494:	68fb      	ldr	r3, [r7, #12]
    2496:	711a      	strb	r2, [r3, #4]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <rtc_count_init+0x5c>)
    249a:	68fa      	ldr	r2, [r7, #12]
    249c:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    249e:	687a      	ldr	r2, [r7, #4]
    24a0:	68fb      	ldr	r3, [r7, #12]
    24a2:	0011      	movs	r1, r2
    24a4:	0018      	movs	r0, r3
    24a6:	4b07      	ldr	r3, [pc, #28]	; (24c4 <rtc_count_init+0x60>)
    24a8:	4798      	blx	r3
    24aa:	0003      	movs	r3, r0
}
    24ac:	0018      	movs	r0, r3
    24ae:	46bd      	mov	sp, r7
    24b0:	b004      	add	sp, #16
    24b2:	bd80      	pop	{r7, pc}
    24b4:	00002155 	.word	0x00002155
    24b8:	40001000 	.word	0x40001000
    24bc:	00002301 	.word	0x00002301
    24c0:	2000120c 	.word	0x2000120c
    24c4:	00002361 	.word	0x00002361

000024c8 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    24d2:	687b      	ldr	r3, [r7, #4]
    24d4:	681b      	ldr	r3, [r3, #0]
    24d6:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
    24d8:	46c0      	nop			; (mov r8, r8)
    24da:	687b      	ldr	r3, [r7, #4]
    24dc:	0018      	movs	r0, r3
    24de:	4b13      	ldr	r3, [pc, #76]	; (252c <rtc_count_set_count+0x64>)
    24e0:	4798      	blx	r3
    24e2:	1e03      	subs	r3, r0, #0
    24e4:	d1f9      	bne.n	24da <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    24e6:	687b      	ldr	r3, [r7, #4]
    24e8:	791b      	ldrb	r3, [r3, #4]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d005      	beq.n	24fa <rtc_count_set_count+0x32>
    24ee:	2b01      	cmp	r3, #1
    24f0:	d10e      	bne.n	2510 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
    24f2:	68fb      	ldr	r3, [r7, #12]
    24f4:	683a      	ldr	r2, [r7, #0]
    24f6:	619a      	str	r2, [r3, #24]
			break;
    24f8:	e00c      	b.n	2514 <rtc_count_set_count+0x4c>
		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
    24fa:	683b      	ldr	r3, [r7, #0]
    24fc:	4a0c      	ldr	r2, [pc, #48]	; (2530 <rtc_count_set_count+0x68>)
    24fe:	4293      	cmp	r3, r2
    2500:	d901      	bls.n	2506 <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
    2502:	2317      	movs	r3, #23
    2504:	e00e      	b.n	2524 <rtc_count_set_count+0x5c>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    2506:	683b      	ldr	r3, [r7, #0]
    2508:	b29a      	uxth	r2, r3
    250a:	68fb      	ldr	r3, [r7, #12]
    250c:	831a      	strh	r2, [r3, #24]

			break;
    250e:	e001      	b.n	2514 <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    2510:	2317      	movs	r3, #23
    2512:	e007      	b.n	2524 <rtc_count_set_count+0x5c>
	}

	while (rtc_count_is_syncing(module)) {
    2514:	46c0      	nop			; (mov r8, r8)
    2516:	687b      	ldr	r3, [r7, #4]
    2518:	0018      	movs	r0, r3
    251a:	4b04      	ldr	r3, [pc, #16]	; (252c <rtc_count_set_count+0x64>)
    251c:	4798      	blx	r3
    251e:	1e03      	subs	r3, r0, #0
    2520:	d1f9      	bne.n	2516 <rtc_count_set_count+0x4e>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    2522:	2300      	movs	r3, #0
}
    2524:	0018      	movs	r0, r3
    2526:	46bd      	mov	sp, r7
    2528:	b004      	add	sp, #16
    252a:	bd80      	pop	{r7, pc}
    252c:	0000222d 	.word	0x0000222d
    2530:	0000ffff 	.word	0x0000ffff

00002534 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    2534:	b580      	push	{r7, lr}
    2536:	b084      	sub	sp, #16
    2538:	af00      	add	r7, sp, #0
    253a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	681b      	ldr	r3, [r3, #0]
    2540:	60bb      	str	r3, [r7, #8]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	687b      	ldr	r3, [r7, #4]
    2546:	0018      	movs	r0, r3
    2548:	4b0d      	ldr	r3, [pc, #52]	; (2580 <rtc_count_get_count+0x4c>)
    254a:	4798      	blx	r3
    254c:	1e03      	subs	r3, r0, #0
    254e:	d1f9      	bne.n	2544 <rtc_count_get_count+0x10>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	791b      	ldrb	r3, [r3, #4]
    2554:	2b00      	cmp	r3, #0
    2556:	d005      	beq.n	2564 <rtc_count_get_count+0x30>
    2558:	2b01      	cmp	r3, #1
    255a:	d108      	bne.n	256e <rtc_count_get_count+0x3a>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
    255c:	68bb      	ldr	r3, [r7, #8]
    255e:	699b      	ldr	r3, [r3, #24]
    2560:	60fb      	str	r3, [r7, #12]

			break;
    2562:	e007      	b.n	2574 <rtc_count_get_count+0x40>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    2564:	68bb      	ldr	r3, [r7, #8]
    2566:	8b1b      	ldrh	r3, [r3, #24]
    2568:	b29b      	uxth	r3, r3
    256a:	60fb      	str	r3, [r7, #12]

			break;
    256c:	e002      	b.n	2574 <rtc_count_get_count+0x40>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    256e:	2300      	movs	r3, #0
    2570:	60fb      	str	r3, [r7, #12]
			break;
    2572:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
    2574:	68fb      	ldr	r3, [r7, #12]
}
    2576:	0018      	movs	r0, r3
    2578:	46bd      	mov	sp, r7
    257a:	b004      	add	sp, #16
    257c:	bd80      	pop	{r7, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	0000222d 	.word	0x0000222d

00002584 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    2584:	b580      	push	{r7, lr}
    2586:	b086      	sub	sp, #24
    2588:	af00      	add	r7, sp, #0
    258a:	60f8      	str	r0, [r7, #12]
    258c:	60b9      	str	r1, [r7, #8]
    258e:	1dfb      	adds	r3, r7, #7
    2590:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    2592:	68fb      	ldr	r3, [r7, #12]
    2594:	681b      	ldr	r3, [r3, #0]
    2596:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    2598:	46c0      	nop			; (mov r8, r8)
    259a:	68fb      	ldr	r3, [r7, #12]
    259c:	0018      	movs	r0, r3
    259e:	4b1d      	ldr	r3, [pc, #116]	; (2614 <rtc_count_set_compare+0x90>)
    25a0:	4798      	blx	r3
    25a2:	1e03      	subs	r3, r0, #0
    25a4:	d1f9      	bne.n	259a <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	791b      	ldrb	r3, [r3, #4]
    25aa:	2b00      	cmp	r3, #0
    25ac:	d00f      	beq.n	25ce <rtc_count_set_compare+0x4a>
    25ae:	2b01      	cmp	r3, #1
    25b0:	d122      	bne.n	25f8 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    25b2:	1dfb      	adds	r3, r7, #7
    25b4:	781b      	ldrb	r3, [r3, #0]
    25b6:	2b01      	cmp	r3, #1
    25b8:	d901      	bls.n	25be <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    25ba:	2317      	movs	r3, #23
    25bc:	e026      	b.n	260c <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    25be:	1dfb      	adds	r3, r7, #7
    25c0:	781a      	ldrb	r2, [r3, #0]
    25c2:	697b      	ldr	r3, [r7, #20]
    25c4:	3208      	adds	r2, #8
    25c6:	0092      	lsls	r2, r2, #2
    25c8:	68b9      	ldr	r1, [r7, #8]
    25ca:	50d1      	str	r1, [r2, r3]

			break;
    25cc:	e016      	b.n	25fc <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    25ce:	1dfb      	adds	r3, r7, #7
    25d0:	781b      	ldrb	r3, [r3, #0]
    25d2:	2b02      	cmp	r3, #2
    25d4:	d901      	bls.n	25da <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    25d6:	2317      	movs	r3, #23
    25d8:	e018      	b.n	260c <rtc_count_set_compare+0x88>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    25da:	68bb      	ldr	r3, [r7, #8]
    25dc:	4a0e      	ldr	r2, [pc, #56]	; (2618 <rtc_count_set_compare+0x94>)
    25de:	4293      	cmp	r3, r2
    25e0:	d901      	bls.n	25e6 <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    25e2:	2317      	movs	r3, #23
    25e4:	e012      	b.n	260c <rtc_count_set_compare+0x88>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    25e6:	1dfb      	adds	r3, r7, #7
    25e8:	781a      	ldrb	r2, [r3, #0]
    25ea:	68bb      	ldr	r3, [r7, #8]
    25ec:	b299      	uxth	r1, r3
    25ee:	697b      	ldr	r3, [r7, #20]
    25f0:	3210      	adds	r2, #16
    25f2:	0052      	lsls	r2, r2, #1
    25f4:	52d1      	strh	r1, [r2, r3]

			break;
    25f6:	e001      	b.n	25fc <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    25f8:	231a      	movs	r3, #26
    25fa:	e007      	b.n	260c <rtc_count_set_compare+0x88>
	}

	while (rtc_count_is_syncing(module)) {
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	68fb      	ldr	r3, [r7, #12]
    2600:	0018      	movs	r0, r3
    2602:	4b04      	ldr	r3, [pc, #16]	; (2614 <rtc_count_set_compare+0x90>)
    2604:	4798      	blx	r3
    2606:	1e03      	subs	r3, r0, #0
    2608:	d1f9      	bne.n	25fe <rtc_count_set_compare+0x7a>
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    260a:	2300      	movs	r3, #0
}
    260c:	0018      	movs	r0, r3
    260e:	46bd      	mov	sp, r7
    2610:	b006      	add	sp, #24
    2612:	bd80      	pop	{r7, pc}
    2614:	0000222d 	.word	0x0000222d
    2618:	0000ffff 	.word	0x0000ffff

0000261c <rtc_count_register_callback>:
 */
enum status_code rtc_count_register_callback(
		struct rtc_module *const module,
		rtc_count_callback_t callback,
		enum rtc_count_callback callback_type)
{
    261c:	b580      	push	{r7, lr}
    261e:	b086      	sub	sp, #24
    2620:	af00      	add	r7, sp, #0
    2622:	60f8      	str	r0, [r7, #12]
    2624:	60b9      	str	r1, [r7, #8]
    2626:	1dfb      	adds	r3, r7, #7
    2628:	701a      	strb	r2, [r3, #0]

	enum status_code status = STATUS_OK;
    262a:	2317      	movs	r3, #23
    262c:	18fb      	adds	r3, r7, r3
    262e:	2200      	movs	r2, #0
    2630:	701a      	strb	r2, [r3, #0]

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    2632:	1dfb      	adds	r3, r7, #7
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	2b0a      	cmp	r3, #10
    2638:	d003      	beq.n	2642 <rtc_count_register_callback+0x26>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    263a:	1dfb      	adds	r3, r7, #7
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	2b07      	cmp	r3, #7
    2640:	d804      	bhi.n	264c <rtc_count_register_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
    2642:	2317      	movs	r3, #23
    2644:	18fb      	adds	r3, r7, r3
    2646:	2200      	movs	r2, #0
    2648:	701a      	strb	r2, [r3, #0]
    264a:	e01f      	b.n	268c <rtc_count_register_callback+0x70>
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    264c:	68fb      	ldr	r3, [r7, #12]
    264e:	791b      	ldrb	r3, [r3, #4]
    2650:	2b00      	cmp	r3, #0
    2652:	d00a      	beq.n	266a <rtc_count_register_callback+0x4e>
    2654:	2b01      	cmp	r3, #1
    2656:	d111      	bne.n	267c <rtc_count_register_callback+0x60>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    2658:	1dfb      	adds	r3, r7, #7
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	2b09      	cmp	r3, #9
    265e:	d912      	bls.n	2686 <rtc_count_register_callback+0x6a>
				status = STATUS_ERR_INVALID_ARG;
    2660:	2317      	movs	r3, #23
    2662:	18fb      	adds	r3, r7, r3
    2664:	2217      	movs	r2, #23
    2666:	701a      	strb	r2, [r3, #0]
			}

			break;
    2668:	e00d      	b.n	2686 <rtc_count_register_callback+0x6a>
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    266a:	1dfb      	adds	r3, r7, #7
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	2b0a      	cmp	r3, #10
    2670:	d90b      	bls.n	268a <rtc_count_register_callback+0x6e>
				status = STATUS_ERR_INVALID_ARG;
    2672:	2317      	movs	r3, #23
    2674:	18fb      	adds	r3, r7, r3
    2676:	2217      	movs	r2, #23
    2678:	701a      	strb	r2, [r3, #0]
			}
			break;
    267a:	e006      	b.n	268a <rtc_count_register_callback+0x6e>
		default:
			status = STATUS_ERR_INVALID_ARG;
    267c:	2317      	movs	r3, #23
    267e:	18fb      	adds	r3, r7, r3
    2680:	2217      	movs	r2, #23
    2682:	701a      	strb	r2, [r3, #0]
    2684:	e002      	b.n	268c <rtc_count_register_callback+0x70>
			break;
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	e000      	b.n	268c <rtc_count_register_callback+0x70>
			break;
    268a:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (status == STATUS_OK) {
    268c:	2317      	movs	r3, #23
    268e:	18fb      	adds	r3, r7, r3
    2690:	781b      	ldrb	r3, [r3, #0]
    2692:	2b00      	cmp	r3, #0
    2694:	d115      	bne.n	26c2 <rtc_count_register_callback+0xa6>
		/* Register callback */
		module->callbacks[callback_type] = callback;
    2696:	1dfb      	adds	r3, r7, #7
    2698:	781a      	ldrb	r2, [r3, #0]
    269a:	68fb      	ldr	r3, [r7, #12]
    269c:	3202      	adds	r2, #2
    269e:	0092      	lsls	r2, r2, #2
    26a0:	68b9      	ldr	r1, [r7, #8]
    26a2:	50d1      	str	r1, [r2, r3]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    26a4:	68fb      	ldr	r3, [r7, #12]
    26a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    26a8:	b29b      	uxth	r3, r3
    26aa:	b21a      	sxth	r2, r3
    26ac:	1dfb      	adds	r3, r7, #7
    26ae:	781b      	ldrb	r3, [r3, #0]
    26b0:	2101      	movs	r1, #1
    26b2:	4099      	lsls	r1, r3
    26b4:	000b      	movs	r3, r1
    26b6:	b21b      	sxth	r3, r3
    26b8:	4313      	orrs	r3, r2
    26ba:	b21b      	sxth	r3, r3
    26bc:	b29a      	uxth	r2, r3
    26be:	68fb      	ldr	r3, [r7, #12]
    26c0:	869a      	strh	r2, [r3, #52]	; 0x34
	}

	return status;
    26c2:	2317      	movs	r3, #23
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	781b      	ldrb	r3, [r3, #0]
}
    26c8:	0018      	movs	r0, r3
    26ca:	46bd      	mov	sp, r7
    26cc:	b006      	add	sp, #24
    26ce:	bd80      	pop	{r7, pc}

000026d0 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    26d0:	b580      	push	{r7, lr}
    26d2:	b084      	sub	sp, #16
    26d4:	af00      	add	r7, sp, #0
    26d6:	6078      	str	r0, [r7, #4]
    26d8:	000a      	movs	r2, r1
    26da:	1cfb      	adds	r3, r7, #3
    26dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	681b      	ldr	r3, [r3, #0]
    26e2:	60fb      	str	r3, [r7, #12]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    26e4:	1cfb      	adds	r3, r7, #3
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	2b0a      	cmp	r3, #10
    26ea:	d103      	bne.n	26f4 <rtc_count_enable_callback+0x24>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	4a1a      	ldr	r2, [pc, #104]	; (2758 <rtc_count_enable_callback+0x88>)
    26f0:	815a      	strh	r2, [r3, #10]
    26f2:	e01e      	b.n	2732 <rtc_count_enable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    26f4:	1cfb      	adds	r3, r7, #3
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	2b07      	cmp	r3, #7
    26fa:	d80b      	bhi.n	2714 <rtc_count_enable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    26fc:	1cfb      	adds	r3, r7, #3
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	2201      	movs	r2, #1
    2702:	409a      	lsls	r2, r3
    2704:	0013      	movs	r3, r2
    2706:	b29b      	uxth	r3, r3
    2708:	22ff      	movs	r2, #255	; 0xff
    270a:	4013      	ands	r3, r2
    270c:	b29a      	uxth	r2, r3
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	815a      	strh	r2, [r3, #10]
    2712:	e00e      	b.n	2732 <rtc_count_enable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    2714:	1cfb      	adds	r3, r7, #3
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	3b08      	subs	r3, #8
    271a:	2201      	movs	r2, #1
    271c:	409a      	lsls	r2, r3
    271e:	0013      	movs	r3, r2
    2720:	b29b      	uxth	r3, r3
    2722:	021b      	lsls	r3, r3, #8
    2724:	b29a      	uxth	r2, r3
    2726:	23c0      	movs	r3, #192	; 0xc0
    2728:	009b      	lsls	r3, r3, #2
    272a:	4013      	ands	r3, r2
    272c:	b29a      	uxth	r2, r3
    272e:	68fb      	ldr	r3, [r7, #12]
    2730:	815a      	strh	r2, [r3, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    2736:	b29b      	uxth	r3, r3
    2738:	b21a      	sxth	r2, r3
    273a:	1cfb      	adds	r3, r7, #3
    273c:	781b      	ldrb	r3, [r3, #0]
    273e:	2101      	movs	r1, #1
    2740:	4099      	lsls	r1, r3
    2742:	000b      	movs	r3, r1
    2744:	b21b      	sxth	r3, r3
    2746:	4313      	orrs	r3, r2
    2748:	b21b      	sxth	r3, r3
    274a:	b29a      	uxth	r2, r3
    274c:	687b      	ldr	r3, [r7, #4]
    274e:	86da      	strh	r2, [r3, #54]	; 0x36
}
    2750:	46c0      	nop			; (mov r8, r8)
    2752:	46bd      	mov	sp, r7
    2754:	b004      	add	sp, #16
    2756:	bd80      	pop	{r7, pc}
    2758:	ffff8000 	.word	0xffff8000

0000275c <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    275c:	b580      	push	{r7, lr}
    275e:	b084      	sub	sp, #16
    2760:	af00      	add	r7, sp, #0
    2762:	6078      	str	r0, [r7, #4]
    2764:	000a      	movs	r2, r1
    2766:	1cfb      	adds	r3, r7, #3
    2768:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    276a:	687b      	ldr	r3, [r7, #4]
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	60fb      	str	r3, [r7, #12]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    2770:	1cfb      	adds	r3, r7, #3
    2772:	781b      	ldrb	r3, [r3, #0]
    2774:	2b0a      	cmp	r3, #10
    2776:	d103      	bne.n	2780 <rtc_count_disable_callback+0x24>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    2778:	68fb      	ldr	r3, [r7, #12]
    277a:	4a1b      	ldr	r2, [pc, #108]	; (27e8 <rtc_count_disable_callback+0x8c>)
    277c:	811a      	strh	r2, [r3, #8]
    277e:	e01e      	b.n	27be <rtc_count_disable_callback+0x62>
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    2780:	1cfb      	adds	r3, r7, #3
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	2b07      	cmp	r3, #7
    2786:	d80b      	bhi.n	27a0 <rtc_count_disable_callback+0x44>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    2788:	1cfb      	adds	r3, r7, #3
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	2201      	movs	r2, #1
    278e:	409a      	lsls	r2, r3
    2790:	0013      	movs	r3, r2
    2792:	b29b      	uxth	r3, r3
    2794:	22ff      	movs	r2, #255	; 0xff
    2796:	4013      	ands	r3, r2
    2798:	b29a      	uxth	r2, r3
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	811a      	strh	r2, [r3, #8]
    279e:	e00e      	b.n	27be <rtc_count_disable_callback+0x62>
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    27a0:	1cfb      	adds	r3, r7, #3
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	3b08      	subs	r3, #8
    27a6:	2201      	movs	r2, #1
    27a8:	409a      	lsls	r2, r3
    27aa:	0013      	movs	r3, r2
    27ac:	b29b      	uxth	r3, r3
    27ae:	021b      	lsls	r3, r3, #8
    27b0:	b29a      	uxth	r2, r3
    27b2:	23c0      	movs	r3, #192	; 0xc0
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	4013      	ands	r3, r2
    27b8:	b29a      	uxth	r2, r3
    27ba:	68fb      	ldr	r3, [r7, #12]
    27bc:	811a      	strh	r2, [r3, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    27c2:	b29b      	uxth	r3, r3
    27c4:	b21b      	sxth	r3, r3
    27c6:	1cfa      	adds	r2, r7, #3
    27c8:	7812      	ldrb	r2, [r2, #0]
    27ca:	2101      	movs	r1, #1
    27cc:	4091      	lsls	r1, r2
    27ce:	000a      	movs	r2, r1
    27d0:	b212      	sxth	r2, r2
    27d2:	43d2      	mvns	r2, r2
    27d4:	b212      	sxth	r2, r2
    27d6:	4013      	ands	r3, r2
    27d8:	b21b      	sxth	r3, r3
    27da:	b29a      	uxth	r2, r3
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	86da      	strh	r2, [r3, #54]	; 0x36
}
    27e0:	46c0      	nop			; (mov r8, r8)
    27e2:	46bd      	mov	sp, r7
    27e4:	b004      	add	sp, #16
    27e6:	bd80      	pop	{r7, pc}
    27e8:	ffff8000 	.word	0xffff8000

000027ec <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b086      	sub	sp, #24
    27f0:	af00      	add	r7, sp, #0
    27f2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    27f4:	4b58      	ldr	r3, [pc, #352]	; (2958 <_rtc_interrupt_handler+0x16c>)
    27f6:	687a      	ldr	r2, [r7, #4]
    27f8:	0092      	lsls	r2, r2, #2
    27fa:	58d3      	ldr	r3, [r2, r3]
    27fc:	613b      	str	r3, [r7, #16]

	Rtc *const rtc_module = module->hw;
    27fe:	693b      	ldr	r3, [r7, #16]
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	60fb      	str	r3, [r7, #12]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    2804:	230a      	movs	r3, #10
    2806:	18fb      	adds	r3, r7, r3
    2808:	693a      	ldr	r2, [r7, #16]
    280a:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
    280c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    280e:	693b      	ldr	r3, [r7, #16]
    2810:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2812:	b29a      	uxth	r2, r3
    2814:	230a      	movs	r3, #10
    2816:	18fb      	adds	r3, r7, r3
    2818:	210a      	movs	r1, #10
    281a:	1879      	adds	r1, r7, r1
    281c:	8809      	ldrh	r1, [r1, #0]
    281e:	400a      	ands	r2, r1
    2820:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    2822:	2308      	movs	r3, #8
    2824:	18fb      	adds	r3, r7, r3
    2826:	68fa      	ldr	r2, [r7, #12]
    2828:	8992      	ldrh	r2, [r2, #12]
    282a:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    282c:	68fb      	ldr	r3, [r7, #12]
    282e:	895b      	ldrh	r3, [r3, #10]
    2830:	b29a      	uxth	r2, r3
    2832:	2308      	movs	r3, #8
    2834:	18fb      	adds	r3, r7, r3
    2836:	2108      	movs	r1, #8
    2838:	1879      	adds	r1, r7, r1
    283a:	8809      	ldrh	r1, [r1, #0]
    283c:	400a      	ands	r2, r1
    283e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    2840:	2308      	movs	r3, #8
    2842:	18fb      	adds	r3, r7, r3
    2844:	2200      	movs	r2, #0
    2846:	5e9b      	ldrsh	r3, [r3, r2]
    2848:	2b00      	cmp	r3, #0
    284a:	da0d      	bge.n	2868 <_rtc_interrupt_handler+0x7c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    284c:	230a      	movs	r3, #10
    284e:	18fb      	adds	r3, r7, r3
    2850:	881a      	ldrh	r2, [r3, #0]
    2852:	2380      	movs	r3, #128	; 0x80
    2854:	00db      	lsls	r3, r3, #3
    2856:	4013      	ands	r3, r2
    2858:	d002      	beq.n	2860 <_rtc_interrupt_handler+0x74>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    285a:	693b      	ldr	r3, [r7, #16]
    285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    285e:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    2860:	68fb      	ldr	r3, [r7, #12]
    2862:	4a3e      	ldr	r2, [pc, #248]	; (295c <_rtc_interrupt_handler+0x170>)
    2864:	819a      	strh	r2, [r3, #12]
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 5);
		#endif
	}
}
    2866:	e072      	b.n	294e <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    2868:	2308      	movs	r3, #8
    286a:	18fb      	adds	r3, r7, r3
    286c:	881b      	ldrh	r3, [r3, #0]
    286e:	22ff      	movs	r2, #255	; 0xff
    2870:	4013      	ands	r3, r2
    2872:	d041      	beq.n	28f8 <_rtc_interrupt_handler+0x10c>
		uint8_t i  = 0;
    2874:	2317      	movs	r3, #23
    2876:	18fb      	adds	r3, r7, r3
    2878:	2200      	movs	r2, #0
    287a:	701a      	strb	r2, [r3, #0]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    287c:	2317      	movs	r3, #23
    287e:	18fb      	adds	r3, r7, r3
    2880:	2200      	movs	r2, #0
    2882:	701a      	strb	r2, [r3, #0]
    2884:	e032      	b.n	28ec <_rtc_interrupt_handler+0x100>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    2886:	2308      	movs	r3, #8
    2888:	18fb      	adds	r3, r7, r3
    288a:	881b      	ldrh	r3, [r3, #0]
    288c:	2217      	movs	r2, #23
    288e:	18ba      	adds	r2, r7, r2
    2890:	7812      	ldrb	r2, [r2, #0]
    2892:	2101      	movs	r1, #1
    2894:	4091      	lsls	r1, r2
    2896:	000a      	movs	r2, r1
    2898:	4013      	ands	r3, r2
    289a:	22ff      	movs	r2, #255	; 0xff
    289c:	4013      	ands	r3, r2
    289e:	d012      	beq.n	28c6 <_rtc_interrupt_handler+0xda>
			  && (callback_mask & (1 << i))) {
    28a0:	230a      	movs	r3, #10
    28a2:	18fb      	adds	r3, r7, r3
    28a4:	881a      	ldrh	r2, [r3, #0]
    28a6:	2317      	movs	r3, #23
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	781b      	ldrb	r3, [r3, #0]
    28ac:	411a      	asrs	r2, r3
    28ae:	0013      	movs	r3, r2
    28b0:	2201      	movs	r2, #1
    28b2:	4013      	ands	r3, r2
    28b4:	d007      	beq.n	28c6 <_rtc_interrupt_handler+0xda>
				module->callbacks[i]();
    28b6:	2317      	movs	r3, #23
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781a      	ldrb	r2, [r3, #0]
    28bc:	693b      	ldr	r3, [r7, #16]
    28be:	3202      	adds	r2, #2
    28c0:	0092      	lsls	r2, r2, #2
    28c2:	58d3      	ldr	r3, [r2, r3]
    28c4:	4798      	blx	r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    28c6:	2317      	movs	r3, #23
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	2201      	movs	r2, #1
    28ce:	409a      	lsls	r2, r3
    28d0:	0013      	movs	r3, r2
    28d2:	b29b      	uxth	r3, r3
    28d4:	22ff      	movs	r2, #255	; 0xff
    28d6:	4013      	ands	r3, r2
    28d8:	b29a      	uxth	r2, r3
    28da:	68fb      	ldr	r3, [r7, #12]
    28dc:	819a      	strh	r2, [r3, #12]
		for ( i = 0;i < RTC_PER_NUM;i++) {
    28de:	2317      	movs	r3, #23
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781a      	ldrb	r2, [r3, #0]
    28e4:	2317      	movs	r3, #23
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	3201      	adds	r2, #1
    28ea:	701a      	strb	r2, [r3, #0]
    28ec:	2317      	movs	r3, #23
    28ee:	18fb      	adds	r3, r7, r3
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b07      	cmp	r3, #7
    28f4:	d9c7      	bls.n	2886 <_rtc_interrupt_handler+0x9a>
}
    28f6:	e02a      	b.n	294e <_rtc_interrupt_handler+0x162>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    28f8:	2308      	movs	r3, #8
    28fa:	18fb      	adds	r3, r7, r3
    28fc:	881a      	ldrh	r2, [r3, #0]
    28fe:	2380      	movs	r3, #128	; 0x80
    2900:	005b      	lsls	r3, r3, #1
    2902:	4013      	ands	r3, r2
    2904:	d00e      	beq.n	2924 <_rtc_interrupt_handler+0x138>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    2906:	230a      	movs	r3, #10
    2908:	18fb      	adds	r3, r7, r3
    290a:	881a      	ldrh	r2, [r3, #0]
    290c:	2380      	movs	r3, #128	; 0x80
    290e:	005b      	lsls	r3, r3, #1
    2910:	4013      	ands	r3, r2
    2912:	d002      	beq.n	291a <_rtc_interrupt_handler+0x12e>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    2914:	693b      	ldr	r3, [r7, #16]
    2916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2918:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    291a:	68fb      	ldr	r3, [r7, #12]
    291c:	2280      	movs	r2, #128	; 0x80
    291e:	0052      	lsls	r2, r2, #1
    2920:	819a      	strh	r2, [r3, #12]
}
    2922:	e014      	b.n	294e <_rtc_interrupt_handler+0x162>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    2924:	2308      	movs	r3, #8
    2926:	18fb      	adds	r3, r7, r3
    2928:	881a      	ldrh	r2, [r3, #0]
    292a:	2380      	movs	r3, #128	; 0x80
    292c:	009b      	lsls	r3, r3, #2
    292e:	4013      	ands	r3, r2
    2930:	d00d      	beq.n	294e <_rtc_interrupt_handler+0x162>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    2932:	230a      	movs	r3, #10
    2934:	18fb      	adds	r3, r7, r3
    2936:	881a      	ldrh	r2, [r3, #0]
    2938:	2380      	movs	r3, #128	; 0x80
    293a:	009b      	lsls	r3, r3, #2
    293c:	4013      	ands	r3, r2
    293e:	d002      	beq.n	2946 <_rtc_interrupt_handler+0x15a>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    2940:	693b      	ldr	r3, [r7, #16]
    2942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2944:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    2946:	68fb      	ldr	r3, [r7, #12]
    2948:	2280      	movs	r2, #128	; 0x80
    294a:	0092      	lsls	r2, r2, #2
    294c:	819a      	strh	r2, [r3, #12]
}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	46bd      	mov	sp, r7
    2952:	b006      	add	sp, #24
    2954:	bd80      	pop	{r7, pc}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	2000120c 	.word	0x2000120c
    295c:	ffff8000 	.word	0xffff8000

00002960 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    2960:	b580      	push	{r7, lr}
    2962:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    2964:	2000      	movs	r0, #0
    2966:	4b02      	ldr	r3, [pc, #8]	; (2970 <RTC_Handler+0x10>)
    2968:	4798      	blx	r3
}
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	46bd      	mov	sp, r7
    296e:	bd80      	pop	{r7, pc}
    2970:	000027ed 	.word	0x000027ed

00002974 <system_gclk_chan_get_config_defaults>:
{
    2974:	b580      	push	{r7, lr}
    2976:	b082      	sub	sp, #8
    2978:	af00      	add	r7, sp, #0
    297a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	2200      	movs	r2, #0
    2980:	701a      	strb	r2, [r3, #0]
}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	46bd      	mov	sp, r7
    2986:	b002      	add	sp, #8
    2988:	bd80      	pop	{r7, pc}

0000298a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    298a:	b5f0      	push	{r4, r5, r6, r7, lr}
    298c:	b08d      	sub	sp, #52	; 0x34
    298e:	af00      	add	r7, sp, #0
    2990:	60b8      	str	r0, [r7, #8]
    2992:	60f9      	str	r1, [r7, #12]
    2994:	603a      	str	r2, [r7, #0]
    2996:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2998:	2300      	movs	r3, #0
    299a:	2400      	movs	r4, #0
    299c:	623b      	str	r3, [r7, #32]
    299e:	627c      	str	r4, [r7, #36]	; 0x24
    29a0:	2300      	movs	r3, #0
    29a2:	2400      	movs	r4, #0
    29a4:	61bb      	str	r3, [r7, #24]
    29a6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    29a8:	233f      	movs	r3, #63	; 0x3f
    29aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    29ac:	e053      	b.n	2a56 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    29ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    29b0:	3b20      	subs	r3, #32
    29b2:	2b00      	cmp	r3, #0
    29b4:	db04      	blt.n	29c0 <long_division+0x36>
    29b6:	2201      	movs	r2, #1
    29b8:	409a      	lsls	r2, r3
    29ba:	0013      	movs	r3, r2
    29bc:	617b      	str	r3, [r7, #20]
    29be:	e00b      	b.n	29d8 <long_division+0x4e>
    29c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    29c2:	2220      	movs	r2, #32
    29c4:	1ad3      	subs	r3, r2, r3
    29c6:	2201      	movs	r2, #1
    29c8:	40da      	lsrs	r2, r3
    29ca:	0013      	movs	r3, r2
    29cc:	2100      	movs	r1, #0
    29ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    29d0:	4091      	lsls	r1, r2
    29d2:	000a      	movs	r2, r1
    29d4:	4313      	orrs	r3, r2
    29d6:	617b      	str	r3, [r7, #20]
    29d8:	2201      	movs	r2, #1
    29da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    29dc:	409a      	lsls	r2, r3
    29de:	0013      	movs	r3, r2
    29e0:	613b      	str	r3, [r7, #16]

		r = r << 1;
    29e2:	69bb      	ldr	r3, [r7, #24]
    29e4:	69fc      	ldr	r4, [r7, #28]
    29e6:	18db      	adds	r3, r3, r3
    29e8:	4164      	adcs	r4, r4
    29ea:	61bb      	str	r3, [r7, #24]
    29ec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    29ee:	68bb      	ldr	r3, [r7, #8]
    29f0:	693a      	ldr	r2, [r7, #16]
    29f2:	401a      	ands	r2, r3
    29f4:	0015      	movs	r5, r2
    29f6:	68fb      	ldr	r3, [r7, #12]
    29f8:	697a      	ldr	r2, [r7, #20]
    29fa:	401a      	ands	r2, r3
    29fc:	0016      	movs	r6, r2
    29fe:	002b      	movs	r3, r5
    2a00:	4333      	orrs	r3, r6
    2a02:	d007      	beq.n	2a14 <long_division+0x8a>
			r |= 0x01;
    2a04:	69bb      	ldr	r3, [r7, #24]
    2a06:	2201      	movs	r2, #1
    2a08:	4313      	orrs	r3, r2
    2a0a:	61bb      	str	r3, [r7, #24]
    2a0c:	69fb      	ldr	r3, [r7, #28]
    2a0e:	2200      	movs	r2, #0
    2a10:	4313      	orrs	r3, r2
    2a12:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	69fb      	ldr	r3, [r7, #28]
    2a18:	429a      	cmp	r2, r3
    2a1a:	d819      	bhi.n	2a50 <long_division+0xc6>
    2a1c:	687a      	ldr	r2, [r7, #4]
    2a1e:	69fb      	ldr	r3, [r7, #28]
    2a20:	429a      	cmp	r2, r3
    2a22:	d103      	bne.n	2a2c <long_division+0xa2>
    2a24:	683a      	ldr	r2, [r7, #0]
    2a26:	69bb      	ldr	r3, [r7, #24]
    2a28:	429a      	cmp	r2, r3
    2a2a:	d811      	bhi.n	2a50 <long_division+0xc6>
			r = r - d;
    2a2c:	69b9      	ldr	r1, [r7, #24]
    2a2e:	69fa      	ldr	r2, [r7, #28]
    2a30:	683b      	ldr	r3, [r7, #0]
    2a32:	687c      	ldr	r4, [r7, #4]
    2a34:	1ac9      	subs	r1, r1, r3
    2a36:	41a2      	sbcs	r2, r4
    2a38:	000b      	movs	r3, r1
    2a3a:	0014      	movs	r4, r2
    2a3c:	61bb      	str	r3, [r7, #24]
    2a3e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    2a40:	6a3a      	ldr	r2, [r7, #32]
    2a42:	693b      	ldr	r3, [r7, #16]
    2a44:	4313      	orrs	r3, r2
    2a46:	623b      	str	r3, [r7, #32]
    2a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2a4a:	697b      	ldr	r3, [r7, #20]
    2a4c:	4313      	orrs	r3, r2
    2a4e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    2a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a52:	3b01      	subs	r3, #1
    2a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    2a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a58:	2b00      	cmp	r3, #0
    2a5a:	daa8      	bge.n	29ae <long_division+0x24>
		}
	}

	return q;
    2a5c:	6a3b      	ldr	r3, [r7, #32]
    2a5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    2a60:	0018      	movs	r0, r3
    2a62:	0021      	movs	r1, r4
    2a64:	46bd      	mov	sp, r7
    2a66:	b00d      	add	sp, #52	; 0x34
    2a68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a6a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2a6a:	b580      	push	{r7, lr}
    2a6c:	b086      	sub	sp, #24
    2a6e:	af00      	add	r7, sp, #0
    2a70:	60f8      	str	r0, [r7, #12]
    2a72:	60b9      	str	r1, [r7, #8]
    2a74:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    2a76:	2316      	movs	r3, #22
    2a78:	18fb      	adds	r3, r7, r3
    2a7a:	2200      	movs	r2, #0
    2a7c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    2a7e:	68bb      	ldr	r3, [r7, #8]
    2a80:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2a82:	68bb      	ldr	r3, [r7, #8]
    2a84:	085a      	lsrs	r2, r3, #1
    2a86:	68fb      	ldr	r3, [r7, #12]
    2a88:	429a      	cmp	r2, r3
    2a8a:	d201      	bcs.n	2a90 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2a8c:	2340      	movs	r3, #64	; 0x40
    2a8e:	e026      	b.n	2ade <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    2a90:	68bb      	ldr	r3, [r7, #8]
    2a92:	085b      	lsrs	r3, r3, #1
    2a94:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    2a96:	e00a      	b.n	2aae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    2a98:	693a      	ldr	r2, [r7, #16]
    2a9a:	68fb      	ldr	r3, [r7, #12]
    2a9c:	1ad3      	subs	r3, r2, r3
    2a9e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    2aa0:	2316      	movs	r3, #22
    2aa2:	18fb      	adds	r3, r7, r3
    2aa4:	881a      	ldrh	r2, [r3, #0]
    2aa6:	2316      	movs	r3, #22
    2aa8:	18fb      	adds	r3, r7, r3
    2aaa:	3201      	adds	r2, #1
    2aac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    2aae:	693a      	ldr	r2, [r7, #16]
    2ab0:	68fb      	ldr	r3, [r7, #12]
    2ab2:	429a      	cmp	r2, r3
    2ab4:	d2f0      	bcs.n	2a98 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    2ab6:	2316      	movs	r3, #22
    2ab8:	18fb      	adds	r3, r7, r3
    2aba:	2216      	movs	r2, #22
    2abc:	18ba      	adds	r2, r7, r2
    2abe:	8812      	ldrh	r2, [r2, #0]
    2ac0:	3a01      	subs	r2, #1
    2ac2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2ac4:	2316      	movs	r3, #22
    2ac6:	18fb      	adds	r3, r7, r3
    2ac8:	881b      	ldrh	r3, [r3, #0]
    2aca:	2bff      	cmp	r3, #255	; 0xff
    2acc:	d901      	bls.n	2ad2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2ace:	2340      	movs	r3, #64	; 0x40
    2ad0:	e005      	b.n	2ade <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2216      	movs	r2, #22
    2ad6:	18ba      	adds	r2, r7, r2
    2ad8:	8812      	ldrh	r2, [r2, #0]
    2ada:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2adc:	2300      	movs	r3, #0
	}
}
    2ade:	0018      	movs	r0, r3
    2ae0:	46bd      	mov	sp, r7
    2ae2:	b006      	add	sp, #24
    2ae4:	bd80      	pop	{r7, pc}
	...

00002ae8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aea:	b0a1      	sub	sp, #132	; 0x84
    2aec:	af00      	add	r7, sp, #0
    2aee:	64f8      	str	r0, [r7, #76]	; 0x4c
    2af0:	64b9      	str	r1, [r7, #72]	; 0x48
    2af2:	647a      	str	r2, [r7, #68]	; 0x44
    2af4:	2243      	movs	r2, #67	; 0x43
    2af6:	18ba      	adds	r2, r7, r2
    2af8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    2afa:	2300      	movs	r3, #0
    2afc:	2400      	movs	r4, #0
    2afe:	673b      	str	r3, [r7, #112]	; 0x70
    2b00:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    2b02:	2300      	movs	r3, #0
    2b04:	2400      	movs	r4, #0
    2b06:	66bb      	str	r3, [r7, #104]	; 0x68
    2b08:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    2b0a:	2300      	movs	r3, #0
    2b0c:	2400      	movs	r4, #0
    2b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    2b10:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    2b12:	2300      	movs	r3, #0
    2b14:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2b16:	2358      	movs	r3, #88	; 0x58
    2b18:	2240      	movs	r2, #64	; 0x40
    2b1a:	4694      	mov	ip, r2
    2b1c:	44bc      	add	ip, r7
    2b1e:	4463      	add	r3, ip
    2b20:	781a      	ldrb	r2, [r3, #0]
    2b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2b24:	435a      	muls	r2, r3
    2b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2b28:	429a      	cmp	r2, r3
    2b2a:	d901      	bls.n	2b30 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2b2c:	2340      	movs	r3, #64	; 0x40
    2b2e:	e0b3      	b.n	2c98 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2b30:	2343      	movs	r3, #67	; 0x43
    2b32:	18fb      	adds	r3, r7, r3
    2b34:	781b      	ldrb	r3, [r3, #0]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d13d      	bne.n	2bb6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2b3a:	2358      	movs	r3, #88	; 0x58
    2b3c:	2240      	movs	r2, #64	; 0x40
    2b3e:	4694      	mov	ip, r2
    2b40:	44bc      	add	ip, r7
    2b42:	4463      	add	r3, ip
    2b44:	781b      	ldrb	r3, [r3, #0]
    2b46:	b2db      	uxtb	r3, r3
    2b48:	613b      	str	r3, [r7, #16]
    2b4a:	2300      	movs	r3, #0
    2b4c:	617b      	str	r3, [r7, #20]
    2b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2b50:	60bb      	str	r3, [r7, #8]
    2b52:	2300      	movs	r3, #0
    2b54:	60fb      	str	r3, [r7, #12]
    2b56:	4c52      	ldr	r4, [pc, #328]	; (2ca0 <_sercom_get_async_baud_val+0x1b8>)
    2b58:	68ba      	ldr	r2, [r7, #8]
    2b5a:	68fb      	ldr	r3, [r7, #12]
    2b5c:	6938      	ldr	r0, [r7, #16]
    2b5e:	6979      	ldr	r1, [r7, #20]
    2b60:	47a0      	blx	r4
    2b62:	0003      	movs	r3, r0
    2b64:	000c      	movs	r4, r1
    2b66:	001b      	movs	r3, r3
    2b68:	65fb      	str	r3, [r7, #92]	; 0x5c
    2b6a:	2300      	movs	r3, #0
    2b6c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    2b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2b70:	603b      	str	r3, [r7, #0]
    2b72:	2300      	movs	r3, #0
    2b74:	607b      	str	r3, [r7, #4]
    2b76:	6db8      	ldr	r0, [r7, #88]	; 0x58
    2b78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    2b7a:	683a      	ldr	r2, [r7, #0]
    2b7c:	687b      	ldr	r3, [r7, #4]
    2b7e:	4c49      	ldr	r4, [pc, #292]	; (2ca4 <_sercom_get_async_baud_val+0x1bc>)
    2b80:	47a0      	blx	r4
    2b82:	0003      	movs	r3, r0
    2b84:	000c      	movs	r4, r1
    2b86:	673b      	str	r3, [r7, #112]	; 0x70
    2b88:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2b8a:	2100      	movs	r1, #0
    2b8c:	2201      	movs	r2, #1
    2b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    2b90:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    2b92:	1ac9      	subs	r1, r1, r3
    2b94:	41a2      	sbcs	r2, r4
    2b96:	000b      	movs	r3, r1
    2b98:	0014      	movs	r4, r2
    2b9a:	66bb      	str	r3, [r7, #104]	; 0x68
    2b9c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    2b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2ba0:	0c1b      	lsrs	r3, r3, #16
    2ba2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    2ba4:	0416      	lsls	r6, r2, #16
    2ba6:	431e      	orrs	r6, r3
    2ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2baa:	041d      	lsls	r5, r3, #16
    2bac:	0033      	movs	r3, r6
    2bae:	67bb      	str	r3, [r7, #120]	; 0x78
    2bb0:	2300      	movs	r3, #0
    2bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    2bb4:	e06a      	b.n	2c8c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2bb6:	2343      	movs	r3, #67	; 0x43
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	781b      	ldrb	r3, [r3, #0]
    2bbc:	2b01      	cmp	r3, #1
    2bbe:	d165      	bne.n	2c8c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    2bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2bc2:	633b      	str	r3, [r7, #48]	; 0x30
    2bc4:	2300      	movs	r3, #0
    2bc6:	637b      	str	r3, [r7, #52]	; 0x34
    2bc8:	2358      	movs	r3, #88	; 0x58
    2bca:	2240      	movs	r2, #64	; 0x40
    2bcc:	4694      	mov	ip, r2
    2bce:	44bc      	add	ip, r7
    2bd0:	4463      	add	r3, ip
    2bd2:	781b      	ldrb	r3, [r3, #0]
    2bd4:	b2db      	uxtb	r3, r3
    2bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    2bd8:	2300      	movs	r3, #0
    2bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bdc:	4c30      	ldr	r4, [pc, #192]	; (2ca0 <_sercom_get_async_baud_val+0x1b8>)
    2bde:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2be4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2be6:	47a0      	blx	r4
    2be8:	0003      	movs	r3, r0
    2bea:	000c      	movs	r4, r1
    2bec:	65bb      	str	r3, [r7, #88]	; 0x58
    2bee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    2bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2bf2:	623b      	str	r3, [r7, #32]
    2bf4:	2300      	movs	r3, #0
    2bf6:	627b      	str	r3, [r7, #36]	; 0x24
    2bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2bfa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2bfc:	001a      	movs	r2, r3
    2bfe:	0023      	movs	r3, r4
    2c00:	6a38      	ldr	r0, [r7, #32]
    2c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2c04:	4c27      	ldr	r4, [pc, #156]	; (2ca4 <_sercom_get_async_baud_val+0x1bc>)
    2c06:	47a0      	blx	r4
    2c08:	0003      	movs	r3, r0
    2c0a:	000c      	movs	r4, r1
    2c0c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    2c0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    2c10:	2380      	movs	r3, #128	; 0x80
    2c12:	019b      	lsls	r3, r3, #6
    2c14:	429a      	cmp	r2, r3
    2c16:	d901      	bls.n	2c1c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2c18:	2340      	movs	r3, #64	; 0x40
    2c1a:	e03d      	b.n	2c98 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2c1e:	61bb      	str	r3, [r7, #24]
    2c20:	2300      	movs	r3, #0
    2c22:	61fb      	str	r3, [r7, #28]
    2c24:	69b9      	ldr	r1, [r7, #24]
    2c26:	69fa      	ldr	r2, [r7, #28]
    2c28:	000b      	movs	r3, r1
    2c2a:	0f5b      	lsrs	r3, r3, #29
    2c2c:	0010      	movs	r0, r2
    2c2e:	00c0      	lsls	r0, r0, #3
    2c30:	63f8      	str	r0, [r7, #60]	; 0x3c
    2c32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2c34:	4318      	orrs	r0, r3
    2c36:	63f8      	str	r0, [r7, #60]	; 0x3c
    2c38:	000b      	movs	r3, r1
    2c3a:	00db      	lsls	r3, r3, #3
    2c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    2c3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2c40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2c42:	001a      	movs	r2, r3
    2c44:	0023      	movs	r3, r4
    2c46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    2c48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    2c4a:	4c16      	ldr	r4, [pc, #88]	; (2ca4 <_sercom_get_async_baud_val+0x1bc>)
    2c4c:	47a0      	blx	r4
    2c4e:	0003      	movs	r3, r0
    2c50:	000c      	movs	r4, r1
    2c52:	65bb      	str	r3, [r7, #88]	; 0x58
    2c54:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    2c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2c58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2c5a:	b2d9      	uxtb	r1, r3
    2c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2c5e:	b2db      	uxtb	r3, r3
    2c60:	00db      	lsls	r3, r3, #3
    2c62:	b2da      	uxtb	r2, r3
    2c64:	2317      	movs	r3, #23
    2c66:	2040      	movs	r0, #64	; 0x40
    2c68:	4684      	mov	ip, r0
    2c6a:	44bc      	add	ip, r7
    2c6c:	4463      	add	r3, ip
    2c6e:	1a8a      	subs	r2, r1, r2
    2c70:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    2c72:	2317      	movs	r3, #23
    2c74:	2240      	movs	r2, #64	; 0x40
    2c76:	4694      	mov	ip, r2
    2c78:	44bc      	add	ip, r7
    2c7a:	4463      	add	r3, ip
    2c7c:	781b      	ldrb	r3, [r3, #0]
    2c7e:	035b      	lsls	r3, r3, #13
    2c80:	001a      	movs	r2, r3
    2c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2c84:	4313      	orrs	r3, r2
    2c86:	67bb      	str	r3, [r7, #120]	; 0x78
    2c88:	2300      	movs	r3, #0
    2c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    2c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2c8e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    2c90:	b29a      	uxth	r2, r3
    2c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2c94:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    2c96:	2300      	movs	r3, #0
}
    2c98:	0018      	movs	r0, r3
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b021      	add	sp, #132	; 0x84
    2c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ca0:	00021485 	.word	0x00021485
    2ca4:	0000298b 	.word	0x0000298b

00002ca8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2ca8:	b580      	push	{r7, lr}
    2caa:	b084      	sub	sp, #16
    2cac:	af00      	add	r7, sp, #0
    2cae:	0002      	movs	r2, r0
    2cb0:	1dfb      	adds	r3, r7, #7
    2cb2:	701a      	strb	r2, [r3, #0]
    2cb4:	1dbb      	adds	r3, r7, #6
    2cb6:	1c0a      	adds	r2, r1, #0
    2cb8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2cba:	4b1a      	ldr	r3, [pc, #104]	; (2d24 <sercom_set_gclk_generator+0x7c>)
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	2201      	movs	r2, #1
    2cc0:	4053      	eors	r3, r2
    2cc2:	b2db      	uxtb	r3, r3
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d103      	bne.n	2cd0 <sercom_set_gclk_generator+0x28>
    2cc8:	1dbb      	adds	r3, r7, #6
    2cca:	781b      	ldrb	r3, [r3, #0]
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d01b      	beq.n	2d08 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    2cd0:	230c      	movs	r3, #12
    2cd2:	18fb      	adds	r3, r7, r3
    2cd4:	0018      	movs	r0, r3
    2cd6:	4b14      	ldr	r3, [pc, #80]	; (2d28 <sercom_set_gclk_generator+0x80>)
    2cd8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    2cda:	230c      	movs	r3, #12
    2cdc:	18fb      	adds	r3, r7, r3
    2cde:	1dfa      	adds	r2, r7, #7
    2ce0:	7812      	ldrb	r2, [r2, #0]
    2ce2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2ce4:	230c      	movs	r3, #12
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	0019      	movs	r1, r3
    2cea:	2011      	movs	r0, #17
    2cec:	4b0f      	ldr	r3, [pc, #60]	; (2d2c <sercom_set_gclk_generator+0x84>)
    2cee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2cf0:	2011      	movs	r0, #17
    2cf2:	4b0f      	ldr	r3, [pc, #60]	; (2d30 <sercom_set_gclk_generator+0x88>)
    2cf4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    2cf6:	4b0b      	ldr	r3, [pc, #44]	; (2d24 <sercom_set_gclk_generator+0x7c>)
    2cf8:	1dfa      	adds	r2, r7, #7
    2cfa:	7812      	ldrb	r2, [r2, #0]
    2cfc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2cfe:	4b09      	ldr	r3, [pc, #36]	; (2d24 <sercom_set_gclk_generator+0x7c>)
    2d00:	2201      	movs	r2, #1
    2d02:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2d04:	2300      	movs	r3, #0
    2d06:	e008      	b.n	2d1a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    2d08:	4b06      	ldr	r3, [pc, #24]	; (2d24 <sercom_set_gclk_generator+0x7c>)
    2d0a:	785b      	ldrb	r3, [r3, #1]
    2d0c:	1dfa      	adds	r2, r7, #7
    2d0e:	7812      	ldrb	r2, [r2, #0]
    2d10:	429a      	cmp	r2, r3
    2d12:	d101      	bne.n	2d18 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    2d14:	2300      	movs	r3, #0
    2d16:	e000      	b.n	2d1a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2d18:	231d      	movs	r3, #29
}
    2d1a:	0018      	movs	r0, r3
    2d1c:	46bd      	mov	sp, r7
    2d1e:	b004      	add	sp, #16
    2d20:	bd80      	pop	{r7, pc}
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	20000bc4 	.word	0x20000bc4
    2d28:	00002975 	.word	0x00002975
    2d2c:	000054ad 	.word	0x000054ad
    2d30:	000054ed 	.word	0x000054ed

00002d34 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2d34:	b580      	push	{r7, lr}
    2d36:	b082      	sub	sp, #8
    2d38:	af00      	add	r7, sp, #0
    2d3a:	6078      	str	r0, [r7, #4]
    2d3c:	000a      	movs	r2, r1
    2d3e:	1cfb      	adds	r3, r7, #3
    2d40:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2d42:	687b      	ldr	r3, [r7, #4]
    2d44:	4a4e      	ldr	r2, [pc, #312]	; (2e80 <_sercom_get_default_pad+0x14c>)
    2d46:	4293      	cmp	r3, r2
    2d48:	d040      	beq.n	2dcc <_sercom_get_default_pad+0x98>
    2d4a:	4a4d      	ldr	r2, [pc, #308]	; (2e80 <_sercom_get_default_pad+0x14c>)
    2d4c:	4293      	cmp	r3, r2
    2d4e:	d807      	bhi.n	2d60 <_sercom_get_default_pad+0x2c>
    2d50:	2284      	movs	r2, #132	; 0x84
    2d52:	05d2      	lsls	r2, r2, #23
    2d54:	4293      	cmp	r3, r2
    2d56:	d00f      	beq.n	2d78 <_sercom_get_default_pad+0x44>
    2d58:	4a4a      	ldr	r2, [pc, #296]	; (2e84 <_sercom_get_default_pad+0x150>)
    2d5a:	4293      	cmp	r3, r2
    2d5c:	d021      	beq.n	2da2 <_sercom_get_default_pad+0x6e>
    2d5e:	e089      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2d60:	4a49      	ldr	r2, [pc, #292]	; (2e88 <_sercom_get_default_pad+0x154>)
    2d62:	4293      	cmp	r3, r2
    2d64:	d100      	bne.n	2d68 <_sercom_get_default_pad+0x34>
    2d66:	e05b      	b.n	2e20 <_sercom_get_default_pad+0xec>
    2d68:	4a48      	ldr	r2, [pc, #288]	; (2e8c <_sercom_get_default_pad+0x158>)
    2d6a:	4293      	cmp	r3, r2
    2d6c:	d100      	bne.n	2d70 <_sercom_get_default_pad+0x3c>
    2d6e:	e06c      	b.n	2e4a <_sercom_get_default_pad+0x116>
    2d70:	4a47      	ldr	r2, [pc, #284]	; (2e90 <_sercom_get_default_pad+0x15c>)
    2d72:	4293      	cmp	r3, r2
    2d74:	d03f      	beq.n	2df6 <_sercom_get_default_pad+0xc2>
    2d76:	e07d      	b.n	2e74 <_sercom_get_default_pad+0x140>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2d78:	1cfb      	adds	r3, r7, #3
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d00a      	beq.n	2d96 <_sercom_get_default_pad+0x62>
    2d80:	dc02      	bgt.n	2d88 <_sercom_get_default_pad+0x54>
    2d82:	2b00      	cmp	r3, #0
    2d84:	d005      	beq.n	2d92 <_sercom_get_default_pad+0x5e>
    2d86:	e075      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2d88:	2b02      	cmp	r3, #2
    2d8a:	d006      	beq.n	2d9a <_sercom_get_default_pad+0x66>
    2d8c:	2b03      	cmp	r3, #3
    2d8e:	d006      	beq.n	2d9e <_sercom_get_default_pad+0x6a>
    2d90:	e070      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2d92:	4b40      	ldr	r3, [pc, #256]	; (2e94 <_sercom_get_default_pad+0x160>)
    2d94:	e06f      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2d96:	4b40      	ldr	r3, [pc, #256]	; (2e98 <_sercom_get_default_pad+0x164>)
    2d98:	e06d      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2d9a:	4b40      	ldr	r3, [pc, #256]	; (2e9c <_sercom_get_default_pad+0x168>)
    2d9c:	e06b      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2d9e:	4b40      	ldr	r3, [pc, #256]	; (2ea0 <_sercom_get_default_pad+0x16c>)
    2da0:	e069      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2da2:	1cfb      	adds	r3, r7, #3
    2da4:	781b      	ldrb	r3, [r3, #0]
    2da6:	2b01      	cmp	r3, #1
    2da8:	d00a      	beq.n	2dc0 <_sercom_get_default_pad+0x8c>
    2daa:	dc02      	bgt.n	2db2 <_sercom_get_default_pad+0x7e>
    2dac:	2b00      	cmp	r3, #0
    2dae:	d005      	beq.n	2dbc <_sercom_get_default_pad+0x88>
    2db0:	e060      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2db2:	2b02      	cmp	r3, #2
    2db4:	d006      	beq.n	2dc4 <_sercom_get_default_pad+0x90>
    2db6:	2b03      	cmp	r3, #3
    2db8:	d006      	beq.n	2dc8 <_sercom_get_default_pad+0x94>
    2dba:	e05b      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2dbc:	2303      	movs	r3, #3
    2dbe:	e05a      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dc0:	4b38      	ldr	r3, [pc, #224]	; (2ea4 <_sercom_get_default_pad+0x170>)
    2dc2:	e058      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dc4:	4b38      	ldr	r3, [pc, #224]	; (2ea8 <_sercom_get_default_pad+0x174>)
    2dc6:	e056      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dc8:	4b38      	ldr	r3, [pc, #224]	; (2eac <_sercom_get_default_pad+0x178>)
    2dca:	e054      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dcc:	1cfb      	adds	r3, r7, #3
    2dce:	781b      	ldrb	r3, [r3, #0]
    2dd0:	2b01      	cmp	r3, #1
    2dd2:	d00a      	beq.n	2dea <_sercom_get_default_pad+0xb6>
    2dd4:	dc02      	bgt.n	2ddc <_sercom_get_default_pad+0xa8>
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d005      	beq.n	2de6 <_sercom_get_default_pad+0xb2>
    2dda:	e04b      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2ddc:	2b02      	cmp	r3, #2
    2dde:	d006      	beq.n	2dee <_sercom_get_default_pad+0xba>
    2de0:	2b03      	cmp	r3, #3
    2de2:	d006      	beq.n	2df2 <_sercom_get_default_pad+0xbe>
    2de4:	e046      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2de6:	4b32      	ldr	r3, [pc, #200]	; (2eb0 <_sercom_get_default_pad+0x17c>)
    2de8:	e045      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dea:	4b32      	ldr	r3, [pc, #200]	; (2eb4 <_sercom_get_default_pad+0x180>)
    2dec:	e043      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2dee:	4b32      	ldr	r3, [pc, #200]	; (2eb8 <_sercom_get_default_pad+0x184>)
    2df0:	e041      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2df2:	4b32      	ldr	r3, [pc, #200]	; (2ebc <_sercom_get_default_pad+0x188>)
    2df4:	e03f      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2df6:	1cfb      	adds	r3, r7, #3
    2df8:	781b      	ldrb	r3, [r3, #0]
    2dfa:	2b01      	cmp	r3, #1
    2dfc:	d00a      	beq.n	2e14 <_sercom_get_default_pad+0xe0>
    2dfe:	dc02      	bgt.n	2e06 <_sercom_get_default_pad+0xd2>
    2e00:	2b00      	cmp	r3, #0
    2e02:	d005      	beq.n	2e10 <_sercom_get_default_pad+0xdc>
    2e04:	e036      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e06:	2b02      	cmp	r3, #2
    2e08:	d006      	beq.n	2e18 <_sercom_get_default_pad+0xe4>
    2e0a:	2b03      	cmp	r3, #3
    2e0c:	d006      	beq.n	2e1c <_sercom_get_default_pad+0xe8>
    2e0e:	e031      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e10:	4b2b      	ldr	r3, [pc, #172]	; (2ec0 <_sercom_get_default_pad+0x18c>)
    2e12:	e030      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e14:	4b2b      	ldr	r3, [pc, #172]	; (2ec4 <_sercom_get_default_pad+0x190>)
    2e16:	e02e      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e18:	4b2b      	ldr	r3, [pc, #172]	; (2ec8 <_sercom_get_default_pad+0x194>)
    2e1a:	e02c      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e1c:	4b2b      	ldr	r3, [pc, #172]	; (2ecc <_sercom_get_default_pad+0x198>)
    2e1e:	e02a      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e20:	1cfb      	adds	r3, r7, #3
    2e22:	781b      	ldrb	r3, [r3, #0]
    2e24:	2b01      	cmp	r3, #1
    2e26:	d00a      	beq.n	2e3e <_sercom_get_default_pad+0x10a>
    2e28:	dc02      	bgt.n	2e30 <_sercom_get_default_pad+0xfc>
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d005      	beq.n	2e3a <_sercom_get_default_pad+0x106>
    2e2e:	e021      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e30:	2b02      	cmp	r3, #2
    2e32:	d006      	beq.n	2e42 <_sercom_get_default_pad+0x10e>
    2e34:	2b03      	cmp	r3, #3
    2e36:	d006      	beq.n	2e46 <_sercom_get_default_pad+0x112>
    2e38:	e01c      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e3a:	2300      	movs	r3, #0
    2e3c:	e01b      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e3e:	2300      	movs	r3, #0
    2e40:	e019      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e42:	4b23      	ldr	r3, [pc, #140]	; (2ed0 <_sercom_get_default_pad+0x19c>)
    2e44:	e017      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e46:	4b23      	ldr	r3, [pc, #140]	; (2ed4 <_sercom_get_default_pad+0x1a0>)
    2e48:	e015      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e4a:	1cfb      	adds	r3, r7, #3
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	2b01      	cmp	r3, #1
    2e50:	d00a      	beq.n	2e68 <_sercom_get_default_pad+0x134>
    2e52:	dc02      	bgt.n	2e5a <_sercom_get_default_pad+0x126>
    2e54:	2b00      	cmp	r3, #0
    2e56:	d005      	beq.n	2e64 <_sercom_get_default_pad+0x130>
    2e58:	e00c      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e5a:	2b02      	cmp	r3, #2
    2e5c:	d006      	beq.n	2e6c <_sercom_get_default_pad+0x138>
    2e5e:	2b03      	cmp	r3, #3
    2e60:	d006      	beq.n	2e70 <_sercom_get_default_pad+0x13c>
    2e62:	e007      	b.n	2e74 <_sercom_get_default_pad+0x140>
    2e64:	4b1c      	ldr	r3, [pc, #112]	; (2ed8 <_sercom_get_default_pad+0x1a4>)
    2e66:	e006      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e68:	4b1c      	ldr	r3, [pc, #112]	; (2edc <_sercom_get_default_pad+0x1a8>)
    2e6a:	e004      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e6c:	4b1c      	ldr	r3, [pc, #112]	; (2ee0 <_sercom_get_default_pad+0x1ac>)
    2e6e:	e002      	b.n	2e76 <_sercom_get_default_pad+0x142>
    2e70:	4b1c      	ldr	r3, [pc, #112]	; (2ee4 <_sercom_get_default_pad+0x1b0>)
    2e72:	e000      	b.n	2e76 <_sercom_get_default_pad+0x142>
	}

	Assert(false);
	return 0;
    2e74:	2300      	movs	r3, #0
}
    2e76:	0018      	movs	r0, r3
    2e78:	46bd      	mov	sp, r7
    2e7a:	b002      	add	sp, #8
    2e7c:	bd80      	pop	{r7, pc}
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	42000800 	.word	0x42000800
    2e84:	42000400 	.word	0x42000400
    2e88:	42001000 	.word	0x42001000
    2e8c:	43000400 	.word	0x43000400
    2e90:	42000c00 	.word	0x42000c00
    2e94:	00040003 	.word	0x00040003
    2e98:	00050003 	.word	0x00050003
    2e9c:	00060003 	.word	0x00060003
    2ea0:	00070003 	.word	0x00070003
    2ea4:	00010003 	.word	0x00010003
    2ea8:	001e0003 	.word	0x001e0003
    2eac:	001f0003 	.word	0x001f0003
    2eb0:	00080003 	.word	0x00080003
    2eb4:	00090003 	.word	0x00090003
    2eb8:	000a0003 	.word	0x000a0003
    2ebc:	000b0003 	.word	0x000b0003
    2ec0:	00100003 	.word	0x00100003
    2ec4:	00110003 	.word	0x00110003
    2ec8:	00120003 	.word	0x00120003
    2ecc:	00130003 	.word	0x00130003
    2ed0:	000e0003 	.word	0x000e0003
    2ed4:	000f0003 	.word	0x000f0003
    2ed8:	00160003 	.word	0x00160003
    2edc:	00170003 	.word	0x00170003
    2ee0:	00180003 	.word	0x00180003
    2ee4:	00190003 	.word	0x00190003

00002ee8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2ee8:	b590      	push	{r4, r7, lr}
    2eea:	b08b      	sub	sp, #44	; 0x2c
    2eec:	af00      	add	r7, sp, #0
    2eee:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2ef0:	230c      	movs	r3, #12
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	4a0f      	ldr	r2, [pc, #60]	; (2f34 <_sercom_get_sercom_inst_index+0x4c>)
    2ef6:	ca13      	ldmia	r2!, {r0, r1, r4}
    2ef8:	c313      	stmia	r3!, {r0, r1, r4}
    2efa:	ca13      	ldmia	r2!, {r0, r1, r4}
    2efc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2efe:	2300      	movs	r3, #0
    2f00:	627b      	str	r3, [r7, #36]	; 0x24
    2f02:	e00e      	b.n	2f22 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2f04:	230c      	movs	r3, #12
    2f06:	18fb      	adds	r3, r7, r3
    2f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2f0a:	0092      	lsls	r2, r2, #2
    2f0c:	58d3      	ldr	r3, [r2, r3]
    2f0e:	001a      	movs	r2, r3
    2f10:	687b      	ldr	r3, [r7, #4]
    2f12:	429a      	cmp	r2, r3
    2f14:	d102      	bne.n	2f1c <_sercom_get_sercom_inst_index+0x34>
			return i;
    2f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f18:	b2db      	uxtb	r3, r3
    2f1a:	e006      	b.n	2f2a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f1e:	3301      	adds	r3, #1
    2f20:	627b      	str	r3, [r7, #36]	; 0x24
    2f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f24:	2b05      	cmp	r3, #5
    2f26:	d9ed      	bls.n	2f04 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2f28:	2300      	movs	r3, #0
}
    2f2a:	0018      	movs	r0, r3
    2f2c:	46bd      	mov	sp, r7
    2f2e:	b00b      	add	sp, #44	; 0x2c
    2f30:	bd90      	pop	{r4, r7, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	0002abd4 	.word	0x0002abd4

00002f38 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b082      	sub	sp, #8
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	0002      	movs	r2, r0
    2f40:	1dfb      	adds	r3, r7, #7
    2f42:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2f44:	46c0      	nop			; (mov r8, r8)
    2f46:	46bd      	mov	sp, r7
    2f48:	b002      	add	sp, #8
    2f4a:	bd80      	pop	{r7, pc}

00002f4c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2f4c:	b580      	push	{r7, lr}
    2f4e:	b084      	sub	sp, #16
    2f50:	af00      	add	r7, sp, #0
    2f52:	0002      	movs	r2, r0
    2f54:	6039      	str	r1, [r7, #0]
    2f56:	1dfb      	adds	r3, r7, #7
    2f58:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2f5a:	4b13      	ldr	r3, [pc, #76]	; (2fa8 <_sercom_set_handler+0x5c>)
    2f5c:	781b      	ldrb	r3, [r3, #0]
    2f5e:	2201      	movs	r2, #1
    2f60:	4053      	eors	r3, r2
    2f62:	b2db      	uxtb	r3, r3
    2f64:	2b00      	cmp	r3, #0
    2f66:	d015      	beq.n	2f94 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f68:	2300      	movs	r3, #0
    2f6a:	60fb      	str	r3, [r7, #12]
    2f6c:	e00c      	b.n	2f88 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2f6e:	4b0f      	ldr	r3, [pc, #60]	; (2fac <_sercom_set_handler+0x60>)
    2f70:	68fa      	ldr	r2, [r7, #12]
    2f72:	0092      	lsls	r2, r2, #2
    2f74:	490e      	ldr	r1, [pc, #56]	; (2fb0 <_sercom_set_handler+0x64>)
    2f76:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2f78:	4b0e      	ldr	r3, [pc, #56]	; (2fb4 <_sercom_set_handler+0x68>)
    2f7a:	68fa      	ldr	r2, [r7, #12]
    2f7c:	0092      	lsls	r2, r2, #2
    2f7e:	2100      	movs	r1, #0
    2f80:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2f82:	68fb      	ldr	r3, [r7, #12]
    2f84:	3301      	adds	r3, #1
    2f86:	60fb      	str	r3, [r7, #12]
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	2b05      	cmp	r3, #5
    2f8c:	d9ef      	bls.n	2f6e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    2f8e:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <_sercom_set_handler+0x5c>)
    2f90:	2201      	movs	r2, #1
    2f92:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2f94:	1dfb      	adds	r3, r7, #7
    2f96:	781a      	ldrb	r2, [r3, #0]
    2f98:	4b04      	ldr	r3, [pc, #16]	; (2fac <_sercom_set_handler+0x60>)
    2f9a:	0092      	lsls	r2, r2, #2
    2f9c:	6839      	ldr	r1, [r7, #0]
    2f9e:	50d1      	str	r1, [r2, r3]
}
    2fa0:	46c0      	nop			; (mov r8, r8)
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b004      	add	sp, #16
    2fa6:	bd80      	pop	{r7, pc}
    2fa8:	20000bc6 	.word	0x20000bc6
    2fac:	20000bc8 	.word	0x20000bc8
    2fb0:	00002f39 	.word	0x00002f39
    2fb4:	20001210 	.word	0x20001210

00002fb8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2fb8:	b590      	push	{r4, r7, lr}
    2fba:	b085      	sub	sp, #20
    2fbc:	af00      	add	r7, sp, #0
    2fbe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2fc0:	2308      	movs	r3, #8
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	4a0b      	ldr	r2, [pc, #44]	; (2ff4 <_sercom_get_interrupt_vector+0x3c>)
    2fc6:	6811      	ldr	r1, [r2, #0]
    2fc8:	6019      	str	r1, [r3, #0]
    2fca:	8892      	ldrh	r2, [r2, #4]
    2fcc:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2fce:	230f      	movs	r3, #15
    2fd0:	18fc      	adds	r4, r7, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	0018      	movs	r0, r3
    2fd6:	4b08      	ldr	r3, [pc, #32]	; (2ff8 <_sercom_get_interrupt_vector+0x40>)
    2fd8:	4798      	blx	r3
    2fda:	0003      	movs	r3, r0
    2fdc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2fde:	230f      	movs	r3, #15
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	2208      	movs	r2, #8
    2fe6:	18ba      	adds	r2, r7, r2
    2fe8:	5cd3      	ldrb	r3, [r2, r3]
    2fea:	b25b      	sxtb	r3, r3
}
    2fec:	0018      	movs	r0, r3
    2fee:	46bd      	mov	sp, r7
    2ff0:	b005      	add	sp, #20
    2ff2:	bd90      	pop	{r4, r7, pc}
    2ff4:	0002abec 	.word	0x0002abec
    2ff8:	00002ee9 	.word	0x00002ee9

00002ffc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2ffc:	b580      	push	{r7, lr}
    2ffe:	af00      	add	r7, sp, #0
    3000:	4b03      	ldr	r3, [pc, #12]	; (3010 <SERCOM0_Handler+0x14>)
    3002:	681b      	ldr	r3, [r3, #0]
    3004:	2000      	movs	r0, #0
    3006:	4798      	blx	r3
    3008:	46c0      	nop			; (mov r8, r8)
    300a:	46bd      	mov	sp, r7
    300c:	bd80      	pop	{r7, pc}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	20000bc8 	.word	0x20000bc8

00003014 <SERCOM1_Handler>:
    3014:	b580      	push	{r7, lr}
    3016:	af00      	add	r7, sp, #0
    3018:	4b03      	ldr	r3, [pc, #12]	; (3028 <SERCOM1_Handler+0x14>)
    301a:	685b      	ldr	r3, [r3, #4]
    301c:	2001      	movs	r0, #1
    301e:	4798      	blx	r3
    3020:	46c0      	nop			; (mov r8, r8)
    3022:	46bd      	mov	sp, r7
    3024:	bd80      	pop	{r7, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	20000bc8 	.word	0x20000bc8

0000302c <SERCOM2_Handler>:
    302c:	b580      	push	{r7, lr}
    302e:	af00      	add	r7, sp, #0
    3030:	4b03      	ldr	r3, [pc, #12]	; (3040 <SERCOM2_Handler+0x14>)
    3032:	689b      	ldr	r3, [r3, #8]
    3034:	2002      	movs	r0, #2
    3036:	4798      	blx	r3
    3038:	46c0      	nop			; (mov r8, r8)
    303a:	46bd      	mov	sp, r7
    303c:	bd80      	pop	{r7, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	20000bc8 	.word	0x20000bc8

00003044 <SERCOM3_Handler>:
    3044:	b580      	push	{r7, lr}
    3046:	af00      	add	r7, sp, #0
    3048:	4b03      	ldr	r3, [pc, #12]	; (3058 <SERCOM3_Handler+0x14>)
    304a:	68db      	ldr	r3, [r3, #12]
    304c:	2003      	movs	r0, #3
    304e:	4798      	blx	r3
    3050:	46c0      	nop			; (mov r8, r8)
    3052:	46bd      	mov	sp, r7
    3054:	bd80      	pop	{r7, pc}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	20000bc8 	.word	0x20000bc8

0000305c <SERCOM4_Handler>:
    305c:	b580      	push	{r7, lr}
    305e:	af00      	add	r7, sp, #0
    3060:	4b03      	ldr	r3, [pc, #12]	; (3070 <SERCOM4_Handler+0x14>)
    3062:	691b      	ldr	r3, [r3, #16]
    3064:	2004      	movs	r0, #4
    3066:	4798      	blx	r3
    3068:	46c0      	nop			; (mov r8, r8)
    306a:	46bd      	mov	sp, r7
    306c:	bd80      	pop	{r7, pc}
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	20000bc8 	.word	0x20000bc8

00003074 <SERCOM5_Handler>:
    3074:	b580      	push	{r7, lr}
    3076:	af00      	add	r7, sp, #0
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <SERCOM5_Handler+0x14>)
    307a:	695b      	ldr	r3, [r3, #20]
    307c:	2005      	movs	r0, #5
    307e:	4798      	blx	r3
    3080:	46c0      	nop			; (mov r8, r8)
    3082:	46bd      	mov	sp, r7
    3084:	bd80      	pop	{r7, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	20000bc8 	.word	0x20000bc8

0000308c <system_pinmux_get_config_defaults>:
{
    308c:	b580      	push	{r7, lr}
    308e:	b082      	sub	sp, #8
    3090:	af00      	add	r7, sp, #0
    3092:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3094:	687b      	ldr	r3, [r7, #4]
    3096:	2280      	movs	r2, #128	; 0x80
    3098:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    309a:	687b      	ldr	r3, [r7, #4]
    309c:	2200      	movs	r2, #0
    309e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	2201      	movs	r2, #1
    30a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    30a6:	687b      	ldr	r3, [r7, #4]
    30a8:	2200      	movs	r2, #0
    30aa:	70da      	strb	r2, [r3, #3]
}
    30ac:	46c0      	nop			; (mov r8, r8)
    30ae:	46bd      	mov	sp, r7
    30b0:	b002      	add	sp, #8
    30b2:	bd80      	pop	{r7, pc}

000030b4 <system_pinmux_get_group_from_gpio_pin>:
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b084      	sub	sp, #16
    30b8:	af00      	add	r7, sp, #0
    30ba:	0002      	movs	r2, r0
    30bc:	1dfb      	adds	r3, r7, #7
    30be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    30c0:	230f      	movs	r3, #15
    30c2:	18fb      	adds	r3, r7, r3
    30c4:	1dfa      	adds	r2, r7, #7
    30c6:	7812      	ldrb	r2, [r2, #0]
    30c8:	09d2      	lsrs	r2, r2, #7
    30ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    30cc:	230e      	movs	r3, #14
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	1dfa      	adds	r2, r7, #7
    30d2:	7812      	ldrb	r2, [r2, #0]
    30d4:	0952      	lsrs	r2, r2, #5
    30d6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    30d8:	4b0d      	ldr	r3, [pc, #52]	; (3110 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    30da:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    30dc:	230f      	movs	r3, #15
    30de:	18fb      	adds	r3, r7, r3
    30e0:	781b      	ldrb	r3, [r3, #0]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d10f      	bne.n	3106 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    30e6:	230f      	movs	r3, #15
    30e8:	18fb      	adds	r3, r7, r3
    30ea:	781b      	ldrb	r3, [r3, #0]
    30ec:	009b      	lsls	r3, r3, #2
    30ee:	2210      	movs	r2, #16
    30f0:	4694      	mov	ip, r2
    30f2:	44bc      	add	ip, r7
    30f4:	4463      	add	r3, ip
    30f6:	3b08      	subs	r3, #8
    30f8:	681a      	ldr	r2, [r3, #0]
    30fa:	230e      	movs	r3, #14
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	781b      	ldrb	r3, [r3, #0]
    3100:	01db      	lsls	r3, r3, #7
    3102:	18d3      	adds	r3, r2, r3
    3104:	e000      	b.n	3108 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3106:	2300      	movs	r3, #0
}
    3108:	0018      	movs	r0, r3
    310a:	46bd      	mov	sp, r7
    310c:	b004      	add	sp, #16
    310e:	bd80      	pop	{r7, pc}
    3110:	40002800 	.word	0x40002800

00003114 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3114:	b580      	push	{r7, lr}
    3116:	b086      	sub	sp, #24
    3118:	af00      	add	r7, sp, #0
    311a:	0002      	movs	r2, r0
    311c:	1dfb      	adds	r3, r7, #7
    311e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3120:	1dfb      	adds	r3, r7, #7
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	0018      	movs	r0, r3
    3126:	4b19      	ldr	r3, [pc, #100]	; (318c <system_pinmux_pin_get_mux_position+0x78>)
    3128:	4798      	blx	r3
    312a:	0003      	movs	r3, r0
    312c:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    312e:	1dfb      	adds	r3, r7, #7
    3130:	781b      	ldrb	r3, [r3, #0]
    3132:	221f      	movs	r2, #31
    3134:	4013      	ands	r3, r2
    3136:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3138:	697a      	ldr	r2, [r7, #20]
    313a:	2140      	movs	r1, #64	; 0x40
    313c:	693b      	ldr	r3, [r7, #16]
    313e:	18d3      	adds	r3, r2, r3
    3140:	185b      	adds	r3, r3, r1
    3142:	781b      	ldrb	r3, [r3, #0]
    3144:	b2db      	uxtb	r3, r3
    3146:	001a      	movs	r2, r3
    3148:	2301      	movs	r3, #1
    314a:	4013      	ands	r3, r2
    314c:	d101      	bne.n	3152 <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    314e:	2380      	movs	r3, #128	; 0x80
    3150:	e018      	b.n	3184 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3152:	693b      	ldr	r3, [r7, #16]
    3154:	085b      	lsrs	r3, r3, #1
    3156:	697a      	ldr	r2, [r7, #20]
    3158:	2130      	movs	r1, #48	; 0x30
    315a:	18d3      	adds	r3, r2, r3
    315c:	185b      	adds	r3, r3, r1
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	b2db      	uxtb	r3, r3
    3162:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3164:	693b      	ldr	r3, [r7, #16]
    3166:	2201      	movs	r2, #1
    3168:	4013      	ands	r3, r2
    316a:	d006      	beq.n	317a <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    316c:	68fb      	ldr	r3, [r7, #12]
    316e:	091b      	lsrs	r3, r3, #4
    3170:	b2db      	uxtb	r3, r3
    3172:	220f      	movs	r2, #15
    3174:	4013      	ands	r3, r2
    3176:	b2db      	uxtb	r3, r3
    3178:	e004      	b.n	3184 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	b2db      	uxtb	r3, r3
    317e:	220f      	movs	r2, #15
    3180:	4013      	ands	r3, r2
    3182:	b2db      	uxtb	r3, r3
	}
}
    3184:	0018      	movs	r0, r3
    3186:	46bd      	mov	sp, r7
    3188:	b006      	add	sp, #24
    318a:	bd80      	pop	{r7, pc}
    318c:	000030b5 	.word	0x000030b5

00003190 <port_get_group_from_gpio_pin>:
{
    3190:	b580      	push	{r7, lr}
    3192:	b082      	sub	sp, #8
    3194:	af00      	add	r7, sp, #0
    3196:	0002      	movs	r2, r0
    3198:	1dfb      	adds	r3, r7, #7
    319a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    319c:	1dfb      	adds	r3, r7, #7
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	0018      	movs	r0, r3
    31a2:	4b03      	ldr	r3, [pc, #12]	; (31b0 <port_get_group_from_gpio_pin+0x20>)
    31a4:	4798      	blx	r3
    31a6:	0003      	movs	r3, r0
}
    31a8:	0018      	movs	r0, r3
    31aa:	46bd      	mov	sp, r7
    31ac:	b002      	add	sp, #8
    31ae:	bd80      	pop	{r7, pc}
    31b0:	000030b5 	.word	0x000030b5

000031b4 <port_pin_set_output_level>:
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b084      	sub	sp, #16
    31b8:	af00      	add	r7, sp, #0
    31ba:	0002      	movs	r2, r0
    31bc:	1dfb      	adds	r3, r7, #7
    31be:	701a      	strb	r2, [r3, #0]
    31c0:	1dbb      	adds	r3, r7, #6
    31c2:	1c0a      	adds	r2, r1, #0
    31c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    31c6:	1dfb      	adds	r3, r7, #7
    31c8:	781b      	ldrb	r3, [r3, #0]
    31ca:	0018      	movs	r0, r3
    31cc:	4b0d      	ldr	r3, [pc, #52]	; (3204 <port_pin_set_output_level+0x50>)
    31ce:	4798      	blx	r3
    31d0:	0003      	movs	r3, r0
    31d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    31d4:	1dfb      	adds	r3, r7, #7
    31d6:	781b      	ldrb	r3, [r3, #0]
    31d8:	221f      	movs	r2, #31
    31da:	4013      	ands	r3, r2
    31dc:	2201      	movs	r2, #1
    31de:	409a      	lsls	r2, r3
    31e0:	0013      	movs	r3, r2
    31e2:	60bb      	str	r3, [r7, #8]
	if (level) {
    31e4:	1dbb      	adds	r3, r7, #6
    31e6:	781b      	ldrb	r3, [r3, #0]
    31e8:	2b00      	cmp	r3, #0
    31ea:	d003      	beq.n	31f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    31ec:	68fb      	ldr	r3, [r7, #12]
    31ee:	68ba      	ldr	r2, [r7, #8]
    31f0:	619a      	str	r2, [r3, #24]
}
    31f2:	e002      	b.n	31fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    31f4:	68fb      	ldr	r3, [r7, #12]
    31f6:	68ba      	ldr	r2, [r7, #8]
    31f8:	615a      	str	r2, [r3, #20]
}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46bd      	mov	sp, r7
    31fe:	b004      	add	sp, #16
    3200:	bd80      	pop	{r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	00003191 	.word	0x00003191

00003208 <system_gclk_chan_get_config_defaults>:
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3210:	687b      	ldr	r3, [r7, #4]
    3212:	2200      	movs	r2, #0
    3214:	701a      	strb	r2, [r3, #0]
}
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46bd      	mov	sp, r7
    321a:	b002      	add	sp, #8
    321c:	bd80      	pop	{r7, pc}
	...

00003220 <system_apb_clock_set_mask>:
{
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	0002      	movs	r2, r0
    3228:	6039      	str	r1, [r7, #0]
    322a:	1dfb      	adds	r3, r7, #7
    322c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    322e:	1dfb      	adds	r3, r7, #7
    3230:	781b      	ldrb	r3, [r3, #0]
    3232:	2b04      	cmp	r3, #4
    3234:	d827      	bhi.n	3286 <system_apb_clock_set_mask+0x66>
    3236:	009a      	lsls	r2, r3, #2
    3238:	4b16      	ldr	r3, [pc, #88]	; (3294 <system_apb_clock_set_mask+0x74>)
    323a:	18d3      	adds	r3, r2, r3
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    3240:	4b15      	ldr	r3, [pc, #84]	; (3298 <system_apb_clock_set_mask+0x78>)
    3242:	4a15      	ldr	r2, [pc, #84]	; (3298 <system_apb_clock_set_mask+0x78>)
    3244:	6951      	ldr	r1, [r2, #20]
    3246:	683a      	ldr	r2, [r7, #0]
    3248:	430a      	orrs	r2, r1
    324a:	615a      	str	r2, [r3, #20]
			break;
    324c:	e01d      	b.n	328a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    324e:	4b12      	ldr	r3, [pc, #72]	; (3298 <system_apb_clock_set_mask+0x78>)
    3250:	4a11      	ldr	r2, [pc, #68]	; (3298 <system_apb_clock_set_mask+0x78>)
    3252:	6991      	ldr	r1, [r2, #24]
    3254:	683a      	ldr	r2, [r7, #0]
    3256:	430a      	orrs	r2, r1
    3258:	619a      	str	r2, [r3, #24]
			break;
    325a:	e016      	b.n	328a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    325c:	4b0e      	ldr	r3, [pc, #56]	; (3298 <system_apb_clock_set_mask+0x78>)
    325e:	4a0e      	ldr	r2, [pc, #56]	; (3298 <system_apb_clock_set_mask+0x78>)
    3260:	69d1      	ldr	r1, [r2, #28]
    3262:	683a      	ldr	r2, [r7, #0]
    3264:	430a      	orrs	r2, r1
    3266:	61da      	str	r2, [r3, #28]
			break;
    3268:	e00f      	b.n	328a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    326a:	4b0b      	ldr	r3, [pc, #44]	; (3298 <system_apb_clock_set_mask+0x78>)
    326c:	4a0a      	ldr	r2, [pc, #40]	; (3298 <system_apb_clock_set_mask+0x78>)
    326e:	6a11      	ldr	r1, [r2, #32]
    3270:	683a      	ldr	r2, [r7, #0]
    3272:	430a      	orrs	r2, r1
    3274:	621a      	str	r2, [r3, #32]
			break;
    3276:	e008      	b.n	328a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    3278:	4b07      	ldr	r3, [pc, #28]	; (3298 <system_apb_clock_set_mask+0x78>)
    327a:	4a07      	ldr	r2, [pc, #28]	; (3298 <system_apb_clock_set_mask+0x78>)
    327c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    327e:	683a      	ldr	r2, [r7, #0]
    3280:	430a      	orrs	r2, r1
    3282:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    3284:	e001      	b.n	328a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    3286:	2317      	movs	r3, #23
    3288:	e000      	b.n	328c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    328a:	2300      	movs	r3, #0
}
    328c:	0018      	movs	r0, r3
    328e:	46bd      	mov	sp, r7
    3290:	b002      	add	sp, #8
    3292:	bd80      	pop	{r7, pc}
    3294:	0002abf4 	.word	0x0002abf4
    3298:	40000400 	.word	0x40000400

0000329c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    329c:	b580      	push	{r7, lr}
    329e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    32a0:	4b05      	ldr	r3, [pc, #20]	; (32b8 <system_is_debugger_present+0x1c>)
    32a2:	789b      	ldrb	r3, [r3, #2]
    32a4:	b2db      	uxtb	r3, r3
    32a6:	001a      	movs	r2, r3
    32a8:	2302      	movs	r3, #2
    32aa:	4013      	ands	r3, r2
    32ac:	1e5a      	subs	r2, r3, #1
    32ae:	4193      	sbcs	r3, r2
    32b0:	b2db      	uxtb	r3, r3
}
    32b2:	0018      	movs	r0, r3
    32b4:	46bd      	mov	sp, r7
    32b6:	bd80      	pop	{r7, pc}
    32b8:	41002000 	.word	0x41002000

000032bc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    32bc:	b580      	push	{r7, lr}
    32be:	b084      	sub	sp, #16
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    32ca:	68fb      	ldr	r3, [r7, #12]
    32cc:	7e1b      	ldrb	r3, [r3, #24]
    32ce:	b2db      	uxtb	r3, r3
    32d0:	001a      	movs	r2, r3
    32d2:	2301      	movs	r3, #1
    32d4:	4013      	ands	r3, r2
    32d6:	1e5a      	subs	r2, r3, #1
    32d8:	4193      	sbcs	r3, r2
    32da:	b2db      	uxtb	r3, r3
}
    32dc:	0018      	movs	r0, r3
    32de:	46bd      	mov	sp, r7
    32e0:	b004      	add	sp, #16
    32e2:	bd80      	pop	{r7, pc}

000032e4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	b084      	sub	sp, #16
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    32f2:	68fb      	ldr	r3, [r7, #12]
    32f4:	7e1b      	ldrb	r3, [r3, #24]
    32f6:	b2db      	uxtb	r3, r3
    32f8:	001a      	movs	r2, r3
    32fa:	2304      	movs	r3, #4
    32fc:	4013      	ands	r3, r2
    32fe:	1e5a      	subs	r2, r3, #1
    3300:	4193      	sbcs	r3, r2
    3302:	b2db      	uxtb	r3, r3
}
    3304:	0018      	movs	r0, r3
    3306:	46bd      	mov	sp, r7
    3308:	b004      	add	sp, #16
    330a:	bd80      	pop	{r7, pc}

0000330c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    330c:	b580      	push	{r7, lr}
    330e:	b084      	sub	sp, #16
    3310:	af00      	add	r7, sp, #0
    3312:	6078      	str	r0, [r7, #4]
    3314:	000a      	movs	r2, r1
    3316:	1cbb      	adds	r3, r7, #2
    3318:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    331a:	687b      	ldr	r3, [r7, #4]
    331c:	681b      	ldr	r3, [r3, #0]
    331e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	0018      	movs	r0, r3
    3324:	4b0a      	ldr	r3, [pc, #40]	; (3350 <spi_write+0x44>)
    3326:	4798      	blx	r3
    3328:	0003      	movs	r3, r0
    332a:	001a      	movs	r2, r3
    332c:	2301      	movs	r3, #1
    332e:	4053      	eors	r3, r2
    3330:	b2db      	uxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	d001      	beq.n	333a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3336:	2305      	movs	r3, #5
    3338:	e006      	b.n	3348 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    333a:	1cbb      	adds	r3, r7, #2
    333c:	881b      	ldrh	r3, [r3, #0]
    333e:	05db      	lsls	r3, r3, #23
    3340:	0dda      	lsrs	r2, r3, #23
    3342:	68fb      	ldr	r3, [r7, #12]
    3344:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3346:	2300      	movs	r3, #0
}
    3348:	0018      	movs	r0, r3
    334a:	46bd      	mov	sp, r7
    334c:	b004      	add	sp, #16
    334e:	bd80      	pop	{r7, pc}
    3350:	000032bd 	.word	0x000032bd

00003354 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	6078      	str	r0, [r7, #4]
    335c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    335e:	687b      	ldr	r3, [r7, #4]
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3364:	687b      	ldr	r3, [r7, #4]
    3366:	0018      	movs	r0, r3
    3368:	4b1b      	ldr	r3, [pc, #108]	; (33d8 <spi_read+0x84>)
    336a:	4798      	blx	r3
    336c:	0003      	movs	r3, r0
    336e:	001a      	movs	r2, r3
    3370:	2301      	movs	r3, #1
    3372:	4053      	eors	r3, r2
    3374:	b2db      	uxtb	r3, r3
    3376:	2b00      	cmp	r3, #0
    3378:	d001      	beq.n	337e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    337a:	2310      	movs	r3, #16
    337c:	e027      	b.n	33ce <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    337e:	230f      	movs	r3, #15
    3380:	18fb      	adds	r3, r7, r3
    3382:	2200      	movs	r2, #0
    3384:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3386:	68bb      	ldr	r3, [r7, #8]
    3388:	8b5b      	ldrh	r3, [r3, #26]
    338a:	b29b      	uxth	r3, r3
    338c:	001a      	movs	r2, r3
    338e:	2304      	movs	r3, #4
    3390:	4013      	ands	r3, r2
    3392:	d006      	beq.n	33a2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3394:	230f      	movs	r3, #15
    3396:	18fb      	adds	r3, r7, r3
    3398:	221e      	movs	r2, #30
    339a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    339c:	68bb      	ldr	r3, [r7, #8]
    339e:	2204      	movs	r2, #4
    33a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	799b      	ldrb	r3, [r3, #6]
    33a6:	2b01      	cmp	r3, #1
    33a8:	d108      	bne.n	33bc <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    33aa:	68bb      	ldr	r3, [r7, #8]
    33ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33ae:	b29b      	uxth	r3, r3
    33b0:	05db      	lsls	r3, r3, #23
    33b2:	0ddb      	lsrs	r3, r3, #23
    33b4:	b29a      	uxth	r2, r3
    33b6:	683b      	ldr	r3, [r7, #0]
    33b8:	801a      	strh	r2, [r3, #0]
    33ba:	e005      	b.n	33c8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    33bc:	68bb      	ldr	r3, [r7, #8]
    33be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33c0:	b2db      	uxtb	r3, r3
    33c2:	b29a      	uxth	r2, r3
    33c4:	683b      	ldr	r3, [r7, #0]
    33c6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    33c8:	230f      	movs	r3, #15
    33ca:	18fb      	adds	r3, r7, r3
    33cc:	781b      	ldrb	r3, [r3, #0]
}
    33ce:	0018      	movs	r0, r3
    33d0:	46bd      	mov	sp, r7
    33d2:	b004      	add	sp, #16
    33d4:	bd80      	pop	{r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	000032e5 	.word	0x000032e5

000033dc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    33dc:	b590      	push	{r4, r7, lr}
    33de:	b093      	sub	sp, #76	; 0x4c
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
    33e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    33e6:	687b      	ldr	r3, [r7, #4]
    33e8:	681b      	ldr	r3, [r3, #0]
    33ea:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	681b      	ldr	r3, [r3, #0]
    33f0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    33f2:	231c      	movs	r3, #28
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	0018      	movs	r0, r3
    33f8:	4b75      	ldr	r3, [pc, #468]	; (35d0 <_spi_set_config+0x1f4>)
    33fa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    33fc:	231c      	movs	r3, #28
    33fe:	18fb      	adds	r3, r7, r3
    3400:	2200      	movs	r2, #0
    3402:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    3404:	683b      	ldr	r3, [r7, #0]
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	2b00      	cmp	r3, #0
    340a:	d103      	bne.n	3414 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    340c:	231c      	movs	r3, #28
    340e:	18fb      	adds	r3, r7, r3
    3410:	2200      	movs	r2, #0
    3412:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3414:	683b      	ldr	r3, [r7, #0]
    3416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    3418:	230c      	movs	r3, #12
    341a:	18fb      	adds	r3, r7, r3
    341c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    341e:	683b      	ldr	r3, [r7, #0]
    3420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    3422:	230c      	movs	r3, #12
    3424:	18fb      	adds	r3, r7, r3
    3426:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3428:	683b      	ldr	r3, [r7, #0]
    342a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    342c:	230c      	movs	r3, #12
    342e:	18fb      	adds	r3, r7, r3
    3430:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    3432:	683b      	ldr	r3, [r7, #0]
    3434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3436:	230c      	movs	r3, #12
    3438:	18fb      	adds	r3, r7, r3
    343a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    343c:	2347      	movs	r3, #71	; 0x47
    343e:	18fb      	adds	r3, r7, r3
    3440:	2200      	movs	r2, #0
    3442:	701a      	strb	r2, [r3, #0]
    3444:	e02c      	b.n	34a0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3446:	2347      	movs	r3, #71	; 0x47
    3448:	18fb      	adds	r3, r7, r3
    344a:	781a      	ldrb	r2, [r3, #0]
    344c:	230c      	movs	r3, #12
    344e:	18fb      	adds	r3, r7, r3
    3450:	0092      	lsls	r2, r2, #2
    3452:	58d3      	ldr	r3, [r2, r3]
    3454:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    3456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3458:	2b00      	cmp	r3, #0
    345a:	d109      	bne.n	3470 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    345c:	2347      	movs	r3, #71	; 0x47
    345e:	18fb      	adds	r3, r7, r3
    3460:	781a      	ldrb	r2, [r3, #0]
    3462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3464:	0011      	movs	r1, r2
    3466:	0018      	movs	r0, r3
    3468:	4b5a      	ldr	r3, [pc, #360]	; (35d4 <_spi_set_config+0x1f8>)
    346a:	4798      	blx	r3
    346c:	0003      	movs	r3, r0
    346e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3472:	3301      	adds	r3, #1
    3474:	d00d      	beq.n	3492 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3478:	b2da      	uxtb	r2, r3
    347a:	231c      	movs	r3, #28
    347c:	18fb      	adds	r3, r7, r3
    347e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3482:	0c1b      	lsrs	r3, r3, #16
    3484:	b2db      	uxtb	r3, r3
    3486:	221c      	movs	r2, #28
    3488:	18ba      	adds	r2, r7, r2
    348a:	0011      	movs	r1, r2
    348c:	0018      	movs	r0, r3
    348e:	4b52      	ldr	r3, [pc, #328]	; (35d8 <_spi_set_config+0x1fc>)
    3490:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3492:	2347      	movs	r3, #71	; 0x47
    3494:	18fb      	adds	r3, r7, r3
    3496:	781a      	ldrb	r2, [r3, #0]
    3498:	2347      	movs	r3, #71	; 0x47
    349a:	18fb      	adds	r3, r7, r3
    349c:	3201      	adds	r2, #1
    349e:	701a      	strb	r2, [r3, #0]
    34a0:	2347      	movs	r3, #71	; 0x47
    34a2:	18fb      	adds	r3, r7, r3
    34a4:	781b      	ldrb	r3, [r3, #0]
    34a6:	2b03      	cmp	r3, #3
    34a8:	d9cd      	bls.n	3446 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    34aa:	683b      	ldr	r3, [r7, #0]
    34ac:	781a      	ldrb	r2, [r3, #0]
    34ae:	687b      	ldr	r3, [r7, #4]
    34b0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    34b2:	683b      	ldr	r3, [r7, #0]
    34b4:	7c1a      	ldrb	r2, [r3, #16]
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    34ba:	683b      	ldr	r3, [r7, #0]
    34bc:	7c9a      	ldrb	r2, [r3, #18]
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	7d1a      	ldrb	r2, [r3, #20]
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    34ca:	230a      	movs	r3, #10
    34cc:	18fb      	adds	r3, r7, r3
    34ce:	2200      	movs	r2, #0
    34d0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    34d2:	2300      	movs	r3, #0
    34d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    34d6:	2300      	movs	r3, #0
    34d8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    34da:	683b      	ldr	r3, [r7, #0]
    34dc:	781b      	ldrb	r3, [r3, #0]
    34de:	2b01      	cmp	r3, #1
    34e0:	d129      	bne.n	3536 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    34e2:	687b      	ldr	r3, [r7, #4]
    34e4:	681b      	ldr	r3, [r3, #0]
    34e6:	0018      	movs	r0, r3
    34e8:	4b3c      	ldr	r3, [pc, #240]	; (35dc <_spi_set_config+0x200>)
    34ea:	4798      	blx	r3
    34ec:	0003      	movs	r3, r0
    34ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    34f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34f2:	3312      	adds	r3, #18
    34f4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    34f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34f8:	b2db      	uxtb	r3, r3
    34fa:	0018      	movs	r0, r3
    34fc:	4b38      	ldr	r3, [pc, #224]	; (35e0 <_spi_set_config+0x204>)
    34fe:	4798      	blx	r3
    3500:	0003      	movs	r3, r0
    3502:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    3504:	683b      	ldr	r3, [r7, #0]
    3506:	699b      	ldr	r3, [r3, #24]
    3508:	2223      	movs	r2, #35	; 0x23
    350a:	18bc      	adds	r4, r7, r2
    350c:	220a      	movs	r2, #10
    350e:	18ba      	adds	r2, r7, r2
    3510:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3512:	0018      	movs	r0, r3
    3514:	4b33      	ldr	r3, [pc, #204]	; (35e4 <_spi_set_config+0x208>)
    3516:	4798      	blx	r3
    3518:	0003      	movs	r3, r0
    351a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    351c:	2323      	movs	r3, #35	; 0x23
    351e:	18fb      	adds	r3, r7, r3
    3520:	781b      	ldrb	r3, [r3, #0]
    3522:	2b00      	cmp	r3, #0
    3524:	d001      	beq.n	352a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    3526:	2317      	movs	r3, #23
    3528:	e04e      	b.n	35c8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    352a:	230a      	movs	r3, #10
    352c:	18fb      	adds	r3, r7, r3
    352e:	881b      	ldrh	r3, [r3, #0]
    3530:	b2da      	uxtb	r2, r3
    3532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3534:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    3536:	683b      	ldr	r3, [r7, #0]
    3538:	685b      	ldr	r3, [r3, #4]
    353a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    353c:	4313      	orrs	r3, r2
    353e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3540:	683b      	ldr	r3, [r7, #0]
    3542:	689b      	ldr	r3, [r3, #8]
    3544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3546:	4313      	orrs	r3, r2
    3548:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    354a:	683b      	ldr	r3, [r7, #0]
    354c:	68db      	ldr	r3, [r3, #12]
    354e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3550:	4313      	orrs	r3, r2
    3552:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    3554:	683b      	ldr	r3, [r7, #0]
    3556:	7c1b      	ldrb	r3, [r3, #16]
    3558:	001a      	movs	r2, r3
    355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    355c:	4313      	orrs	r3, r2
    355e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3560:	683b      	ldr	r3, [r7, #0]
    3562:	7c5b      	ldrb	r3, [r3, #17]
    3564:	2b00      	cmp	r3, #0
    3566:	d103      	bne.n	3570 <_spi_set_config+0x194>
    3568:	4b1f      	ldr	r3, [pc, #124]	; (35e8 <_spi_set_config+0x20c>)
    356a:	4798      	blx	r3
    356c:	1e03      	subs	r3, r0, #0
    356e:	d003      	beq.n	3578 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3572:	2280      	movs	r2, #128	; 0x80
    3574:	4313      	orrs	r3, r2
    3576:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    3578:	683b      	ldr	r3, [r7, #0]
    357a:	7c9b      	ldrb	r3, [r3, #18]
    357c:	2b00      	cmp	r3, #0
    357e:	d004      	beq.n	358a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3582:	2280      	movs	r2, #128	; 0x80
    3584:	0292      	lsls	r2, r2, #10
    3586:	4313      	orrs	r3, r2
    3588:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    358a:	683b      	ldr	r3, [r7, #0]
    358c:	7cdb      	ldrb	r3, [r3, #19]
    358e:	2b00      	cmp	r3, #0
    3590:	d004      	beq.n	359c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3594:	2280      	movs	r2, #128	; 0x80
    3596:	0092      	lsls	r2, r2, #2
    3598:	4313      	orrs	r3, r2
    359a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    359c:	683b      	ldr	r3, [r7, #0]
    359e:	7d1b      	ldrb	r3, [r3, #20]
    35a0:	2b00      	cmp	r3, #0
    35a2:	d004      	beq.n	35ae <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    35a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35a6:	2280      	movs	r2, #128	; 0x80
    35a8:	0192      	lsls	r2, r2, #6
    35aa:	4313      	orrs	r3, r2
    35ac:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    35ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35b0:	681a      	ldr	r2, [r3, #0]
    35b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    35b4:	431a      	orrs	r2, r3
    35b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35b8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    35ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35bc:	685a      	ldr	r2, [r3, #4]
    35be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    35c0:	431a      	orrs	r2, r3
    35c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    35c4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    35c6:	2300      	movs	r3, #0
}
    35c8:	0018      	movs	r0, r3
    35ca:	46bd      	mov	sp, r7
    35cc:	b013      	add	sp, #76	; 0x4c
    35ce:	bd90      	pop	{r4, r7, pc}
    35d0:	0000308d 	.word	0x0000308d
    35d4:	00002d35 	.word	0x00002d35
    35d8:	00005761 	.word	0x00005761
    35dc:	00002ee9 	.word	0x00002ee9
    35e0:	0000559d 	.word	0x0000559d
    35e4:	00002a6b 	.word	0x00002a6b
    35e8:	0000329d 	.word	0x0000329d

000035ec <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    35ec:	b590      	push	{r4, r7, lr}
    35ee:	b091      	sub	sp, #68	; 0x44
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
    35f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    3602:	683b      	ldr	r3, [r7, #0]
    3604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    3606:	2310      	movs	r3, #16
    3608:	18fb      	adds	r3, r7, r3
    360a:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    360c:	683b      	ldr	r3, [r7, #0]
    360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    3610:	2310      	movs	r3, #16
    3612:	18fb      	adds	r3, r7, r3
    3614:	605a      	str	r2, [r3, #4]
		config->pinmux_pad2, config->pinmux_pad3
    3616:	683b      	ldr	r3, [r7, #0]
    3618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    361a:	2310      	movs	r3, #16
    361c:	18fb      	adds	r3, r7, r3
    361e:	609a      	str	r2, [r3, #8]
		config->pinmux_pad2, config->pinmux_pad3
    3620:	683b      	ldr	r3, [r7, #0]
    3622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3624:	2310      	movs	r3, #16
    3626:	18fb      	adds	r3, r7, r3
    3628:	60da      	str	r2, [r3, #12]
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    362a:	233f      	movs	r3, #63	; 0x3f
    362c:	18fb      	adds	r3, r7, r3
    362e:	2200      	movs	r2, #0
    3630:	701a      	strb	r2, [r3, #0]
    3632:	e030      	b.n	3696 <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3634:	233f      	movs	r3, #63	; 0x3f
    3636:	18fb      	adds	r3, r7, r3
    3638:	781a      	ldrb	r2, [r3, #0]
    363a:	2310      	movs	r3, #16
    363c:	18fb      	adds	r3, r7, r3
    363e:	0092      	lsls	r2, r2, #2
    3640:	58d3      	ldr	r3, [r2, r3]
    3642:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    3644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3646:	2b00      	cmp	r3, #0
    3648:	d109      	bne.n	365e <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    364a:	233f      	movs	r3, #63	; 0x3f
    364c:	18fb      	adds	r3, r7, r3
    364e:	781a      	ldrb	r2, [r3, #0]
    3650:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3652:	0011      	movs	r1, r2
    3654:	0018      	movs	r0, r3
    3656:	4b56      	ldr	r3, [pc, #344]	; (37b0 <_spi_check_config+0x1c4>)
    3658:	4798      	blx	r3
    365a:	0003      	movs	r3, r0
    365c:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3660:	3301      	adds	r3, #1
    3662:	d010      	beq.n	3686 <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    3664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3666:	041b      	lsls	r3, r3, #16
    3668:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    366c:	0c1b      	lsrs	r3, r3, #16
    366e:	b2db      	uxtb	r3, r3
    3670:	0018      	movs	r0, r3
    3672:	4b50      	ldr	r3, [pc, #320]	; (37b4 <_spi_check_config+0x1c8>)
    3674:	4798      	blx	r3
    3676:	0003      	movs	r3, r0
		if ((current_pinmux & 0xFFFF) !=
    3678:	429c      	cmp	r4, r3
    367a:	d005      	beq.n	3688 <_spi_check_config+0x9c>
			module->hw = NULL;
    367c:	687b      	ldr	r3, [r7, #4]
    367e:	2200      	movs	r2, #0
    3680:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    3682:	231c      	movs	r3, #28
    3684:	e08f      	b.n	37a6 <_spi_check_config+0x1ba>
			continue;
    3686:	46c0      	nop			; (mov r8, r8)
	for (uint8_t pad = 0; pad < 4; pad++) {
    3688:	233f      	movs	r3, #63	; 0x3f
    368a:	18fb      	adds	r3, r7, r3
    368c:	781a      	ldrb	r2, [r3, #0]
    368e:	233f      	movs	r3, #63	; 0x3f
    3690:	18fb      	adds	r3, r7, r3
    3692:	3201      	adds	r2, #1
    3694:	701a      	strb	r2, [r3, #0]
    3696:	233f      	movs	r3, #63	; 0x3f
    3698:	18fb      	adds	r3, r7, r3
    369a:	781b      	ldrb	r3, [r3, #0]
    369c:	2b03      	cmp	r3, #3
    369e:	d9c9      	bls.n	3634 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    36a0:	2011      	movs	r0, #17
    36a2:	4b45      	ldr	r3, [pc, #276]	; (37b8 <_spi_check_config+0x1cc>)
    36a4:	4798      	blx	r3
    36a6:	0003      	movs	r3, r0
    36a8:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    36aa:	2300      	movs	r3, #0
    36ac:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    36ae:	2300      	movs	r3, #0
    36b0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	781b      	ldrb	r3, [r3, #0]
    36b6:	2b01      	cmp	r3, #1
    36b8:	d121      	bne.n	36fe <_spi_check_config+0x112>
		enum status_code error_code = _sercom_get_sync_baud_val(
    36ba:	683b      	ldr	r3, [r7, #0]
    36bc:	699b      	ldr	r3, [r3, #24]
    36be:	2223      	movs	r2, #35	; 0x23
    36c0:	18bc      	adds	r4, r7, r2
    36c2:	220e      	movs	r2, #14
    36c4:	18ba      	adds	r2, r7, r2
    36c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    36c8:	0018      	movs	r0, r3
    36ca:	4b3c      	ldr	r3, [pc, #240]	; (37bc <_spi_check_config+0x1d0>)
    36cc:	4798      	blx	r3
    36ce:	0003      	movs	r3, r0
    36d0:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    36d2:	2323      	movs	r3, #35	; 0x23
    36d4:	18fb      	adds	r3, r7, r3
    36d6:	781b      	ldrb	r3, [r3, #0]
    36d8:	2b00      	cmp	r3, #0
    36da:	d001      	beq.n	36e0 <_spi_check_config+0xf4>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    36dc:	2317      	movs	r3, #23
    36de:	e062      	b.n	37a6 <_spi_check_config+0x1ba>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    36e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36e2:	7b1b      	ldrb	r3, [r3, #12]
    36e4:	b2da      	uxtb	r2, r3
    36e6:	230e      	movs	r3, #14
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	881b      	ldrh	r3, [r3, #0]
    36ec:	b2db      	uxtb	r3, r3
    36ee:	429a      	cmp	r2, r3
    36f0:	d001      	beq.n	36f6 <_spi_check_config+0x10a>
			return STATUS_ERR_DENIED;
    36f2:	231c      	movs	r3, #28
    36f4:	e057      	b.n	37a6 <_spi_check_config+0x1ba>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    36f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36f8:	220c      	movs	r2, #12
    36fa:	4313      	orrs	r3, r2
    36fc:	637b      	str	r3, [r7, #52]	; 0x34
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    36fe:	683b      	ldr	r3, [r7, #0]
    3700:	685b      	ldr	r3, [r3, #4]
    3702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3704:	4313      	orrs	r3, r2
    3706:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    3708:	683b      	ldr	r3, [r7, #0]
    370a:	689b      	ldr	r3, [r3, #8]
    370c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    370e:	4313      	orrs	r3, r2
    3710:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    3712:	683b      	ldr	r3, [r7, #0]
    3714:	68db      	ldr	r3, [r3, #12]
    3716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3718:	4313      	orrs	r3, r2
    371a:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    371c:	683b      	ldr	r3, [r7, #0]
    371e:	7c1b      	ldrb	r3, [r3, #16]
    3720:	001a      	movs	r2, r3
    3722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3724:	4313      	orrs	r3, r2
    3726:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    3728:	683b      	ldr	r3, [r7, #0]
    372a:	7c5b      	ldrb	r3, [r3, #17]
    372c:	2b00      	cmp	r3, #0
    372e:	d003      	beq.n	3738 <_spi_check_config+0x14c>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    3730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3732:	2280      	movs	r2, #128	; 0x80
    3734:	4313      	orrs	r3, r2
    3736:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    3738:	683b      	ldr	r3, [r7, #0]
    373a:	7c9b      	ldrb	r3, [r3, #18]
    373c:	2b00      	cmp	r3, #0
    373e:	d004      	beq.n	374a <_spi_check_config+0x15e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    3740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3742:	2280      	movs	r2, #128	; 0x80
    3744:	0292      	lsls	r2, r2, #10
    3746:	4313      	orrs	r3, r2
    3748:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	7cdb      	ldrb	r3, [r3, #19]
    374e:	2b00      	cmp	r3, #0
    3750:	d004      	beq.n	375c <_spi_check_config+0x170>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    3752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3754:	2280      	movs	r2, #128	; 0x80
    3756:	0092      	lsls	r2, r2, #2
    3758:	4313      	orrs	r3, r2
    375a:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    375c:	683b      	ldr	r3, [r7, #0]
    375e:	7d1b      	ldrb	r3, [r3, #20]
    3760:	2b00      	cmp	r3, #0
    3762:	d004      	beq.n	376e <_spi_check_config+0x182>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    3764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3766:	2280      	movs	r2, #128	; 0x80
    3768:	0192      	lsls	r2, r2, #6
    376a:	4313      	orrs	r3, r2
    376c:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    376e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3770:	2202      	movs	r2, #2
    3772:	4313      	orrs	r3, r2
    3774:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    3776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3778:	681a      	ldr	r2, [r3, #0]
    377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    377c:	429a      	cmp	r2, r3
    377e:	d10e      	bne.n	379e <_spi_check_config+0x1b2>
			spi_module->CTRLB.reg == ctrlb) {
    3780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3782:	685a      	ldr	r2, [r3, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    3784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3786:	429a      	cmp	r2, r3
    3788:	d109      	bne.n	379e <_spi_check_config+0x1b2>
		module->mode           = config->mode;
    378a:	683b      	ldr	r3, [r7, #0]
    378c:	781a      	ldrb	r2, [r3, #0]
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    3792:	683b      	ldr	r3, [r7, #0]
    3794:	7c1a      	ldrb	r2, [r3, #16]
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    379a:	2300      	movs	r3, #0
    379c:	e003      	b.n	37a6 <_spi_check_config+0x1ba>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    379e:	687b      	ldr	r3, [r7, #4]
    37a0:	2200      	movs	r2, #0
    37a2:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    37a4:	231c      	movs	r3, #28
}
    37a6:	0018      	movs	r0, r3
    37a8:	46bd      	mov	sp, r7
    37aa:	b011      	add	sp, #68	; 0x44
    37ac:	bd90      	pop	{r4, r7, pc}
    37ae:	46c0      	nop			; (mov r8, r8)
    37b0:	00002d35 	.word	0x00002d35
    37b4:	00003115 	.word	0x00003115
    37b8:	0000559d 	.word	0x0000559d
    37bc:	00002a6b 	.word	0x00002a6b

000037c0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    37c0:	b580      	push	{r7, lr}
    37c2:	b08a      	sub	sp, #40	; 0x28
    37c4:	af00      	add	r7, sp, #0
    37c6:	60f8      	str	r0, [r7, #12]
    37c8:	60b9      	str	r1, [r7, #8]
    37ca:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    37cc:	68fb      	ldr	r3, [r7, #12]
    37ce:	68ba      	ldr	r2, [r7, #8]
    37d0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    37d2:	68fb      	ldr	r3, [r7, #12]
    37d4:	681b      	ldr	r3, [r3, #0]
    37d6:	61fb      	str	r3, [r7, #28]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    37d8:	69fb      	ldr	r3, [r7, #28]
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	2202      	movs	r2, #2
    37de:	4013      	ands	r3, r2
    37e0:	d007      	beq.n	37f2 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    37e2:	687a      	ldr	r2, [r7, #4]
    37e4:	68fb      	ldr	r3, [r7, #12]
    37e6:	0011      	movs	r1, r2
    37e8:	0018      	movs	r0, r3
    37ea:	4b33      	ldr	r3, [pc, #204]	; (38b8 <spi_init+0xf8>)
    37ec:	4798      	blx	r3
    37ee:	0003      	movs	r3, r0
    37f0:	e05e      	b.n	38b0 <spi_init+0xf0>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    37f2:	69fb      	ldr	r3, [r7, #28]
    37f4:	681b      	ldr	r3, [r3, #0]
    37f6:	2201      	movs	r2, #1
    37f8:	4013      	ands	r3, r2
    37fa:	d001      	beq.n	3800 <spi_init+0x40>
		return STATUS_BUSY;
    37fc:	2305      	movs	r3, #5
    37fe:	e057      	b.n	38b0 <spi_init+0xf0>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	681b      	ldr	r3, [r3, #0]
    3804:	0018      	movs	r0, r3
    3806:	4b2d      	ldr	r3, [pc, #180]	; (38bc <spi_init+0xfc>)
    3808:	4798      	blx	r3
    380a:	0003      	movs	r3, r0
    380c:	61bb      	str	r3, [r7, #24]
	uint32_t pm_index, gclk_index;
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    380e:	69bb      	ldr	r3, [r7, #24]
    3810:	2b05      	cmp	r3, #5
    3812:	d104      	bne.n	381e <spi_init+0x5e>
#  ifdef ID_SERCOM5
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3814:	2301      	movs	r3, #1
    3816:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    3818:	2318      	movs	r3, #24
    381a:	623b      	str	r3, [r7, #32]
    381c:	e004      	b.n	3828 <spi_init+0x68>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    381e:	69bb      	ldr	r3, [r7, #24]
    3820:	627b      	str	r3, [r7, #36]	; 0x24
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3822:	69bb      	ldr	r3, [r7, #24]
    3824:	3312      	adds	r3, #18
    3826:	623b      	str	r3, [r7, #32]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3828:	69bb      	ldr	r3, [r7, #24]
    382a:	2b05      	cmp	r3, #5
    382c:	d108      	bne.n	3840 <spi_init+0x80>
#  ifdef ID_SERCOM5
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    382e:	2201      	movs	r2, #1
    3830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3832:	409a      	lsls	r2, r3
    3834:	0013      	movs	r3, r2
    3836:	0019      	movs	r1, r3
    3838:	2003      	movs	r0, #3
    383a:	4b21      	ldr	r3, [pc, #132]	; (38c0 <spi_init+0x100>)
    383c:	4798      	blx	r3
    383e:	e007      	b.n	3850 <spi_init+0x90>
#  else
		return STATUS_ERR_INVALID_ARG;
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3840:	2201      	movs	r2, #1
    3842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3844:	409a      	lsls	r2, r3
    3846:	0013      	movs	r3, r2
    3848:	0019      	movs	r1, r3
    384a:	2002      	movs	r0, #2
    384c:	4b1c      	ldr	r3, [pc, #112]	; (38c0 <spi_init+0x100>)
    384e:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3850:	2314      	movs	r3, #20
    3852:	18fb      	adds	r3, r7, r3
    3854:	0018      	movs	r0, r3
    3856:	4b1b      	ldr	r3, [pc, #108]	; (38c4 <spi_init+0x104>)
    3858:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	2224      	movs	r2, #36	; 0x24
    385e:	5c9a      	ldrb	r2, [r3, r2]
    3860:	2314      	movs	r3, #20
    3862:	18fb      	adds	r3, r7, r3
    3864:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3866:	6a3b      	ldr	r3, [r7, #32]
    3868:	b2db      	uxtb	r3, r3
    386a:	2214      	movs	r2, #20
    386c:	18ba      	adds	r2, r7, r2
    386e:	0011      	movs	r1, r2
    3870:	0018      	movs	r0, r3
    3872:	4b15      	ldr	r3, [pc, #84]	; (38c8 <spi_init+0x108>)
    3874:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3876:	6a3b      	ldr	r3, [r7, #32]
    3878:	b2db      	uxtb	r3, r3
    387a:	0018      	movs	r0, r3
    387c:	4b13      	ldr	r3, [pc, #76]	; (38cc <spi_init+0x10c>)
    387e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	2224      	movs	r2, #36	; 0x24
    3884:	5c9b      	ldrb	r3, [r3, r2]
    3886:	2100      	movs	r1, #0
    3888:	0018      	movs	r0, r3
    388a:	4b11      	ldr	r3, [pc, #68]	; (38d0 <spi_init+0x110>)
    388c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	2b01      	cmp	r3, #1
    3894:	d105      	bne.n	38a2 <spi_init+0xe2>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3896:	69fb      	ldr	r3, [r7, #28]
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	220c      	movs	r2, #12
    389c:	431a      	orrs	r2, r3
    389e:	69fb      	ldr	r3, [r7, #28]
    38a0:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    38a2:	687a      	ldr	r2, [r7, #4]
    38a4:	68fb      	ldr	r3, [r7, #12]
    38a6:	0011      	movs	r1, r2
    38a8:	0018      	movs	r0, r3
    38aa:	4b0a      	ldr	r3, [pc, #40]	; (38d4 <spi_init+0x114>)
    38ac:	4798      	blx	r3
    38ae:	0003      	movs	r3, r0
}
    38b0:	0018      	movs	r0, r3
    38b2:	46bd      	mov	sp, r7
    38b4:	b00a      	add	sp, #40	; 0x28
    38b6:	bd80      	pop	{r7, pc}
    38b8:	000035ed 	.word	0x000035ed
    38bc:	00002ee9 	.word	0x00002ee9
    38c0:	00003221 	.word	0x00003221
    38c4:	00003209 	.word	0x00003209
    38c8:	000054ad 	.word	0x000054ad
    38cc:	000054ed 	.word	0x000054ed
    38d0:	00002ca9 	.word	0x00002ca9
    38d4:	000033dd 	.word	0x000033dd

000038d8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    38d8:	b580      	push	{r7, lr}
    38da:	b086      	sub	sp, #24
    38dc:	af00      	add	r7, sp, #0
    38de:	60f8      	str	r0, [r7, #12]
    38e0:	60b9      	str	r1, [r7, #8]
    38e2:	1dfb      	adds	r3, r7, #7
    38e4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    38e6:	68fb      	ldr	r3, [r7, #12]
    38e8:	795b      	ldrb	r3, [r3, #5]
    38ea:	2b01      	cmp	r3, #1
    38ec:	d001      	beq.n	38f2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    38ee:	2315      	movs	r3, #21
    38f0:	e05c      	b.n	39ac <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	7a1b      	ldrb	r3, [r3, #8]
    38f6:	2201      	movs	r2, #1
    38f8:	4053      	eors	r3, r2
    38fa:	b2db      	uxtb	r3, r3
    38fc:	2b00      	cmp	r3, #0
    38fe:	d054      	beq.n	39aa <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    3900:	1dfb      	adds	r3, r7, #7
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	2b00      	cmp	r3, #0
    3906:	d04a      	beq.n	399e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    3908:	68bb      	ldr	r3, [r7, #8]
    390a:	785b      	ldrb	r3, [r3, #1]
    390c:	2b00      	cmp	r3, #0
    390e:	d03f      	beq.n	3990 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    3910:	68fb      	ldr	r3, [r7, #12]
    3912:	0018      	movs	r0, r3
    3914:	4b27      	ldr	r3, [pc, #156]	; (39b4 <spi_select_slave+0xdc>)
    3916:	4798      	blx	r3
    3918:	0003      	movs	r3, r0
    391a:	001a      	movs	r2, r3
    391c:	2301      	movs	r3, #1
    391e:	4053      	eors	r3, r2
    3920:	b2db      	uxtb	r3, r3
    3922:	2b00      	cmp	r3, #0
    3924:	d007      	beq.n	3936 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    3926:	68bb      	ldr	r3, [r7, #8]
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	2101      	movs	r1, #1
    392c:	0018      	movs	r0, r3
    392e:	4b22      	ldr	r3, [pc, #136]	; (39b8 <spi_select_slave+0xe0>)
    3930:	4798      	blx	r3
					return STATUS_BUSY;
    3932:	2305      	movs	r3, #5
    3934:	e03a      	b.n	39ac <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3936:	68bb      	ldr	r3, [r7, #8]
    3938:	781b      	ldrb	r3, [r3, #0]
    393a:	2100      	movs	r1, #0
    393c:	0018      	movs	r0, r3
    393e:	4b1e      	ldr	r3, [pc, #120]	; (39b8 <spi_select_slave+0xe0>)
    3940:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    3942:	68bb      	ldr	r3, [r7, #8]
    3944:	789b      	ldrb	r3, [r3, #2]
    3946:	b29a      	uxth	r2, r3
    3948:	68fb      	ldr	r3, [r7, #12]
    394a:	0011      	movs	r1, r2
    394c:	0018      	movs	r0, r3
    394e:	4b1b      	ldr	r3, [pc, #108]	; (39bc <spi_select_slave+0xe4>)
    3950:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	79db      	ldrb	r3, [r3, #7]
    3956:	2201      	movs	r2, #1
    3958:	4053      	eors	r3, r2
    395a:	b2db      	uxtb	r3, r3
    395c:	2b00      	cmp	r3, #0
    395e:	d024      	beq.n	39aa <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    3960:	46c0      	nop			; (mov r8, r8)
    3962:	68fb      	ldr	r3, [r7, #12]
    3964:	0018      	movs	r0, r3
    3966:	4b16      	ldr	r3, [pc, #88]	; (39c0 <spi_select_slave+0xe8>)
    3968:	4798      	blx	r3
    396a:	0003      	movs	r3, r0
    396c:	001a      	movs	r2, r3
    396e:	2301      	movs	r3, #1
    3970:	4053      	eors	r3, r2
    3972:	b2db      	uxtb	r3, r3
    3974:	2b00      	cmp	r3, #0
    3976:	d1f4      	bne.n	3962 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    3978:	2316      	movs	r3, #22
    397a:	18fb      	adds	r3, r7, r3
    397c:	2200      	movs	r2, #0
    397e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    3980:	2316      	movs	r3, #22
    3982:	18fa      	adds	r2, r7, r3
    3984:	68fb      	ldr	r3, [r7, #12]
    3986:	0011      	movs	r1, r2
    3988:	0018      	movs	r0, r3
    398a:	4b0e      	ldr	r3, [pc, #56]	; (39c4 <spi_select_slave+0xec>)
    398c:	4798      	blx	r3
    398e:	e00c      	b.n	39aa <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    3990:	68bb      	ldr	r3, [r7, #8]
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	2100      	movs	r1, #0
    3996:	0018      	movs	r0, r3
    3998:	4b07      	ldr	r3, [pc, #28]	; (39b8 <spi_select_slave+0xe0>)
    399a:	4798      	blx	r3
    399c:	e005      	b.n	39aa <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    399e:	68bb      	ldr	r3, [r7, #8]
    39a0:	781b      	ldrb	r3, [r3, #0]
    39a2:	2101      	movs	r1, #1
    39a4:	0018      	movs	r0, r3
    39a6:	4b04      	ldr	r3, [pc, #16]	; (39b8 <spi_select_slave+0xe0>)
    39a8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    39aa:	2300      	movs	r3, #0
}
    39ac:	0018      	movs	r0, r3
    39ae:	46bd      	mov	sp, r7
    39b0:	b006      	add	sp, #24
    39b2:	bd80      	pop	{r7, pc}
    39b4:	000032bd 	.word	0x000032bd
    39b8:	000031b5 	.word	0x000031b5
    39bc:	0000330d 	.word	0x0000330d
    39c0:	000032e5 	.word	0x000032e5
    39c4:	00003355 	.word	0x00003355

000039c8 <system_gclk_chan_get_config_defaults>:
{
    39c8:	b580      	push	{r7, lr}
    39ca:	b082      	sub	sp, #8
    39cc:	af00      	add	r7, sp, #0
    39ce:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    39d0:	687b      	ldr	r3, [r7, #4]
    39d2:	2200      	movs	r2, #0
    39d4:	701a      	strb	r2, [r3, #0]
}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	46bd      	mov	sp, r7
    39da:	b002      	add	sp, #8
    39dc:	bd80      	pop	{r7, pc}
	...

000039e0 <system_apb_clock_set_mask>:
{
    39e0:	b580      	push	{r7, lr}
    39e2:	b082      	sub	sp, #8
    39e4:	af00      	add	r7, sp, #0
    39e6:	0002      	movs	r2, r0
    39e8:	6039      	str	r1, [r7, #0]
    39ea:	1dfb      	adds	r3, r7, #7
    39ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    39ee:	1dfb      	adds	r3, r7, #7
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	2b04      	cmp	r3, #4
    39f4:	d827      	bhi.n	3a46 <system_apb_clock_set_mask+0x66>
    39f6:	009a      	lsls	r2, r3, #2
    39f8:	4b16      	ldr	r3, [pc, #88]	; (3a54 <system_apb_clock_set_mask+0x74>)
    39fa:	18d3      	adds	r3, r2, r3
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    3a00:	4b15      	ldr	r3, [pc, #84]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a02:	4a15      	ldr	r2, [pc, #84]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a04:	6951      	ldr	r1, [r2, #20]
    3a06:	683a      	ldr	r2, [r7, #0]
    3a08:	430a      	orrs	r2, r1
    3a0a:	615a      	str	r2, [r3, #20]
			break;
    3a0c:	e01d      	b.n	3a4a <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    3a0e:	4b12      	ldr	r3, [pc, #72]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a10:	4a11      	ldr	r2, [pc, #68]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a12:	6991      	ldr	r1, [r2, #24]
    3a14:	683a      	ldr	r2, [r7, #0]
    3a16:	430a      	orrs	r2, r1
    3a18:	619a      	str	r2, [r3, #24]
			break;
    3a1a:	e016      	b.n	3a4a <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    3a1c:	4b0e      	ldr	r3, [pc, #56]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a1e:	4a0e      	ldr	r2, [pc, #56]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a20:	69d1      	ldr	r1, [r2, #28]
    3a22:	683a      	ldr	r2, [r7, #0]
    3a24:	430a      	orrs	r2, r1
    3a26:	61da      	str	r2, [r3, #28]
			break;
    3a28:	e00f      	b.n	3a4a <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    3a2a:	4b0b      	ldr	r3, [pc, #44]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a2c:	4a0a      	ldr	r2, [pc, #40]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a2e:	6a11      	ldr	r1, [r2, #32]
    3a30:	683a      	ldr	r2, [r7, #0]
    3a32:	430a      	orrs	r2, r1
    3a34:	621a      	str	r2, [r3, #32]
			break;
    3a36:	e008      	b.n	3a4a <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    3a38:	4b07      	ldr	r3, [pc, #28]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a3a:	4a07      	ldr	r2, [pc, #28]	; (3a58 <system_apb_clock_set_mask+0x78>)
    3a3c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    3a3e:	683a      	ldr	r2, [r7, #0]
    3a40:	430a      	orrs	r2, r1
    3a42:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    3a44:	e001      	b.n	3a4a <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    3a46:	2317      	movs	r3, #23
    3a48:	e000      	b.n	3a4c <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    3a4a:	2300      	movs	r3, #0
}
    3a4c:	0018      	movs	r0, r3
    3a4e:	46bd      	mov	sp, r7
    3a50:	b002      	add	sp, #8
    3a52:	bd80      	pop	{r7, pc}
    3a54:	0002ac08 	.word	0x0002ac08
    3a58:	40000400 	.word	0x40000400

00003a5c <system_pinmux_get_config_defaults>:
{
    3a5c:	b580      	push	{r7, lr}
    3a5e:	b082      	sub	sp, #8
    3a60:	af00      	add	r7, sp, #0
    3a62:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	2280      	movs	r2, #128	; 0x80
    3a68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a6a:	687b      	ldr	r3, [r7, #4]
    3a6c:	2200      	movs	r2, #0
    3a6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3a70:	687b      	ldr	r3, [r7, #4]
    3a72:	2201      	movs	r2, #1
    3a74:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	2200      	movs	r2, #0
    3a7a:	70da      	strb	r2, [r3, #3]
}
    3a7c:	46c0      	nop			; (mov r8, r8)
    3a7e:	46bd      	mov	sp, r7
    3a80:	b002      	add	sp, #8
    3a82:	bd80      	pop	{r7, pc}

00003a84 <system_is_debugger_present>:
{
    3a84:	b580      	push	{r7, lr}
    3a86:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3a88:	4b05      	ldr	r3, [pc, #20]	; (3aa0 <system_is_debugger_present+0x1c>)
    3a8a:	789b      	ldrb	r3, [r3, #2]
    3a8c:	b2db      	uxtb	r3, r3
    3a8e:	001a      	movs	r2, r3
    3a90:	2302      	movs	r3, #2
    3a92:	4013      	ands	r3, r2
    3a94:	1e5a      	subs	r2, r3, #1
    3a96:	4193      	sbcs	r3, r2
    3a98:	b2db      	uxtb	r3, r3
}
    3a9a:	0018      	movs	r0, r3
    3a9c:	46bd      	mov	sp, r7
    3a9e:	bd80      	pop	{r7, pc}
    3aa0:	41002000 	.word	0x41002000

00003aa4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b084      	sub	sp, #16
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    3ab2:	68fb      	ldr	r3, [r7, #12]
    3ab4:	69db      	ldr	r3, [r3, #28]
    3ab6:	1e5a      	subs	r2, r3, #1
    3ab8:	4193      	sbcs	r3, r2
    3aba:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    3abc:	0018      	movs	r0, r3
    3abe:	46bd      	mov	sp, r7
    3ac0:	b004      	add	sp, #16
    3ac2:	bd80      	pop	{r7, pc}

00003ac4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b082      	sub	sp, #8
    3ac8:	af00      	add	r7, sp, #0
    3aca:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    3acc:	46c0      	nop			; (mov r8, r8)
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	0018      	movs	r0, r3
    3ad2:	4b04      	ldr	r3, [pc, #16]	; (3ae4 <_usart_wait_for_sync+0x20>)
    3ad4:	4798      	blx	r3
    3ad6:	1e03      	subs	r3, r0, #0
    3ad8:	d1f9      	bne.n	3ace <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    3ada:	46c0      	nop			; (mov r8, r8)
    3adc:	46bd      	mov	sp, r7
    3ade:	b002      	add	sp, #8
    3ae0:	bd80      	pop	{r7, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	00003aa5 	.word	0x00003aa5

00003ae8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    3ae8:	b5b0      	push	{r4, r5, r7, lr}
    3aea:	b08c      	sub	sp, #48	; 0x30
    3aec:	af02      	add	r7, sp, #8
    3aee:	6078      	str	r0, [r7, #4]
    3af0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3af2:	687b      	ldr	r3, [r7, #4]
    3af4:	681b      	ldr	r3, [r3, #0]
    3af6:	617b      	str	r3, [r7, #20]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	681b      	ldr	r3, [r3, #0]
    3afc:	0018      	movs	r0, r3
    3afe:	4bac      	ldr	r3, [pc, #688]	; (3db0 <_usart_set_config+0x2c8>)
    3b00:	4798      	blx	r3
    3b02:	0003      	movs	r3, r0
    3b04:	613b      	str	r3, [r7, #16]
	uint32_t gclk_index;

#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (SAMC21) || (WLR089)
	if (sercom_index == 5) {
    3b06:	693b      	ldr	r3, [r7, #16]
    3b08:	2b05      	cmp	r3, #5
    3b0a:	d102      	bne.n	3b12 <_usart_set_config+0x2a>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3b0c:	2318      	movs	r3, #24
    3b0e:	627b      	str	r3, [r7, #36]	; 0x24
    3b10:	e002      	b.n	3b18 <_usart_set_config+0x30>
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3b12:	693b      	ldr	r3, [r7, #16]
    3b14:	3312      	adds	r3, #18
    3b16:	627b      	str	r3, [r7, #36]	; 0x24
#else
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    3b18:	2300      	movs	r3, #0
    3b1a:	623b      	str	r3, [r7, #32]
	uint32_t ctrlb = 0;
    3b1c:	2300      	movs	r3, #0
    3b1e:	61fb      	str	r3, [r7, #28]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    3b20:	230a      	movs	r3, #10
    3b22:	18fb      	adds	r3, r7, r3
    3b24:	2200      	movs	r2, #0
    3b26:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b28:	231b      	movs	r3, #27
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	2200      	movs	r2, #0
    3b2e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b30:	231a      	movs	r3, #26
    3b32:	18fb      	adds	r3, r7, r3
    3b34:	2210      	movs	r2, #16
    3b36:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    3b38:	683b      	ldr	r3, [r7, #0]
    3b3a:	8a1b      	ldrh	r3, [r3, #16]
    3b3c:	2280      	movs	r2, #128	; 0x80
    3b3e:	01d2      	lsls	r2, r2, #7
    3b40:	4293      	cmp	r3, r2
    3b42:	d01c      	beq.n	3b7e <_usart_set_config+0x96>
    3b44:	2280      	movs	r2, #128	; 0x80
    3b46:	01d2      	lsls	r2, r2, #7
    3b48:	4293      	cmp	r3, r2
    3b4a:	dc06      	bgt.n	3b5a <_usart_set_config+0x72>
    3b4c:	2b00      	cmp	r3, #0
    3b4e:	d00d      	beq.n	3b6c <_usart_set_config+0x84>
    3b50:	2280      	movs	r2, #128	; 0x80
    3b52:	0192      	lsls	r2, r2, #6
    3b54:	4293      	cmp	r3, r2
    3b56:	d024      	beq.n	3ba2 <_usart_set_config+0xba>
    3b58:	e035      	b.n	3bc6 <_usart_set_config+0xde>
    3b5a:	22c0      	movs	r2, #192	; 0xc0
    3b5c:	01d2      	lsls	r2, r2, #7
    3b5e:	4293      	cmp	r3, r2
    3b60:	d028      	beq.n	3bb4 <_usart_set_config+0xcc>
    3b62:	2280      	movs	r2, #128	; 0x80
    3b64:	0212      	lsls	r2, r2, #8
    3b66:	4293      	cmp	r3, r2
    3b68:	d012      	beq.n	3b90 <_usart_set_config+0xa8>
    3b6a:	e02c      	b.n	3bc6 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b6c:	231b      	movs	r3, #27
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	2200      	movs	r2, #0
    3b72:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3b74:	231a      	movs	r3, #26
    3b76:	18fb      	adds	r3, r7, r3
    3b78:	2210      	movs	r2, #16
    3b7a:	701a      	strb	r2, [r3, #0]
			break;
    3b7c:	e023      	b.n	3bc6 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b7e:	231b      	movs	r3, #27
    3b80:	18fb      	adds	r3, r7, r3
    3b82:	2200      	movs	r2, #0
    3b84:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3b86:	231a      	movs	r3, #26
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	2208      	movs	r2, #8
    3b8c:	701a      	strb	r2, [r3, #0]
			break;
    3b8e:	e01a      	b.n	3bc6 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    3b90:	231b      	movs	r3, #27
    3b92:	18fb      	adds	r3, r7, r3
    3b94:	2200      	movs	r2, #0
    3b96:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    3b98:	231a      	movs	r3, #26
    3b9a:	18fb      	adds	r3, r7, r3
    3b9c:	2203      	movs	r2, #3
    3b9e:	701a      	strb	r2, [r3, #0]
			break;
    3ba0:	e011      	b.n	3bc6 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3ba2:	231b      	movs	r3, #27
    3ba4:	18fb      	adds	r3, r7, r3
    3ba6:	2201      	movs	r2, #1
    3ba8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    3baa:	231a      	movs	r3, #26
    3bac:	18fb      	adds	r3, r7, r3
    3bae:	2210      	movs	r2, #16
    3bb0:	701a      	strb	r2, [r3, #0]
			break;
    3bb2:	e008      	b.n	3bc6 <_usart_set_config+0xde>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    3bb4:	231b      	movs	r3, #27
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	2201      	movs	r2, #1
    3bba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    3bbc:	231a      	movs	r3, #26
    3bbe:	18fb      	adds	r3, r7, r3
    3bc0:	2208      	movs	r2, #8
    3bc2:	701a      	strb	r2, [r3, #0]
			break;
    3bc4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    3bc6:	683b      	ldr	r3, [r7, #0]
    3bc8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    3bca:	683b      	ldr	r3, [r7, #0]
    3bcc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    3bce:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    3bd0:	683b      	ldr	r3, [r7, #0]
    3bd2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    3bd4:	4313      	orrs	r3, r2
		config->sample_rate |
    3bd6:	683a      	ldr	r2, [r7, #0]
    3bd8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    3bda:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    3bdc:	683a      	ldr	r2, [r7, #0]
    3bde:	7e12      	ldrb	r2, [r2, #24]
    3be0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    3be2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    3be4:	683a      	ldr	r2, [r7, #0]
    3be6:	2126      	movs	r1, #38	; 0x26
    3be8:	5c52      	ldrb	r2, [r2, r1]
    3bea:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    3bec:	4313      	orrs	r3, r2
    3bee:	623b      	str	r3, [r7, #32]

	enum status_code status_code = STATUS_OK;
    3bf0:	2319      	movs	r3, #25
    3bf2:	18fb      	adds	r3, r7, r3
    3bf4:	2200      	movs	r2, #0
    3bf6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    3bf8:	683b      	ldr	r3, [r7, #0]
    3bfa:	685b      	ldr	r3, [r3, #4]
    3bfc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    3bfe:	68fb      	ldr	r3, [r7, #12]
    3c00:	2b00      	cmp	r3, #0
    3c02:	d01e      	beq.n	3c42 <_usart_set_config+0x15a>
    3c04:	2280      	movs	r2, #128	; 0x80
    3c06:	0552      	lsls	r2, r2, #21
    3c08:	4293      	cmp	r3, r2
    3c0a:	d14f      	bne.n	3cac <_usart_set_config+0x1c4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    3c0c:	683b      	ldr	r3, [r7, #0]
    3c0e:	2227      	movs	r2, #39	; 0x27
    3c10:	5c9b      	ldrb	r3, [r3, r2]
    3c12:	2201      	movs	r2, #1
    3c14:	4053      	eors	r3, r2
    3c16:	b2db      	uxtb	r3, r3
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d046      	beq.n	3caa <_usart_set_config+0x1c2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    3c1c:	683b      	ldr	r3, [r7, #0]
    3c1e:	6a1d      	ldr	r5, [r3, #32]
    3c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c22:	b2db      	uxtb	r3, r3
    3c24:	0018      	movs	r0, r3
    3c26:	4b63      	ldr	r3, [pc, #396]	; (3db4 <_usart_set_config+0x2cc>)
    3c28:	4798      	blx	r3
    3c2a:	0001      	movs	r1, r0
    3c2c:	2319      	movs	r3, #25
    3c2e:	18fc      	adds	r4, r7, r3
    3c30:	230a      	movs	r3, #10
    3c32:	18fb      	adds	r3, r7, r3
    3c34:	001a      	movs	r2, r3
    3c36:	0028      	movs	r0, r5
    3c38:	4b5f      	ldr	r3, [pc, #380]	; (3db8 <_usart_set_config+0x2d0>)
    3c3a:	4798      	blx	r3
    3c3c:	0003      	movs	r3, r0
    3c3e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    3c40:	e033      	b.n	3caa <_usart_set_config+0x1c2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    3c42:	683b      	ldr	r3, [r7, #0]
    3c44:	2227      	movs	r2, #39	; 0x27
    3c46:	5c9b      	ldrb	r3, [r3, r2]
    3c48:	2b00      	cmp	r3, #0
    3c4a:	d014      	beq.n	3c76 <_usart_set_config+0x18e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    3c4c:	683b      	ldr	r3, [r7, #0]
    3c4e:	6a18      	ldr	r0, [r3, #32]
    3c50:	683b      	ldr	r3, [r7, #0]
    3c52:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    3c54:	2319      	movs	r3, #25
    3c56:	18fc      	adds	r4, r7, r3
    3c58:	231b      	movs	r3, #27
    3c5a:	18fb      	adds	r3, r7, r3
    3c5c:	781d      	ldrb	r5, [r3, #0]
    3c5e:	230a      	movs	r3, #10
    3c60:	18fa      	adds	r2, r7, r3
    3c62:	231a      	movs	r3, #26
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	781b      	ldrb	r3, [r3, #0]
    3c68:	9300      	str	r3, [sp, #0]
    3c6a:	002b      	movs	r3, r5
    3c6c:	4d53      	ldr	r5, [pc, #332]	; (3dbc <_usart_set_config+0x2d4>)
    3c6e:	47a8      	blx	r5
    3c70:	0003      	movs	r3, r0
    3c72:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    3c74:	e01a      	b.n	3cac <_usart_set_config+0x1c4>
						_sercom_get_async_baud_val(config->baudrate,
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	6a1d      	ldr	r5, [r3, #32]
    3c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c7c:	b2db      	uxtb	r3, r3
    3c7e:	0018      	movs	r0, r3
    3c80:	4b4c      	ldr	r3, [pc, #304]	; (3db4 <_usart_set_config+0x2cc>)
    3c82:	4798      	blx	r3
				status_code =
    3c84:	2319      	movs	r3, #25
    3c86:	18fc      	adds	r4, r7, r3
    3c88:	231b      	movs	r3, #27
    3c8a:	18fb      	adds	r3, r7, r3
    3c8c:	7819      	ldrb	r1, [r3, #0]
    3c8e:	230a      	movs	r3, #10
    3c90:	18fa      	adds	r2, r7, r3
    3c92:	231a      	movs	r3, #26
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	781b      	ldrb	r3, [r3, #0]
    3c98:	9300      	str	r3, [sp, #0]
    3c9a:	000b      	movs	r3, r1
    3c9c:	0001      	movs	r1, r0
    3c9e:	0028      	movs	r0, r5
    3ca0:	4d46      	ldr	r5, [pc, #280]	; (3dbc <_usart_set_config+0x2d4>)
    3ca2:	47a8      	blx	r5
    3ca4:	0003      	movs	r3, r0
    3ca6:	7023      	strb	r3, [r4, #0]
			break;
    3ca8:	e000      	b.n	3cac <_usart_set_config+0x1c4>
			break;
    3caa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    3cac:	2319      	movs	r3, #25
    3cae:	18fb      	adds	r3, r7, r3
    3cb0:	781b      	ldrb	r3, [r3, #0]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d003      	beq.n	3cbe <_usart_set_config+0x1d6>
		/* Abort */
		return status_code;
    3cb6:	2319      	movs	r3, #25
    3cb8:	18fb      	adds	r3, r7, r3
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	e073      	b.n	3da6 <_usart_set_config+0x2be>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    3cbe:	683b      	ldr	r3, [r7, #0]
    3cc0:	7e5b      	ldrb	r3, [r3, #25]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d003      	beq.n	3cce <_usart_set_config+0x1e6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    3cc6:	683b      	ldr	r3, [r7, #0]
    3cc8:	7e9a      	ldrb	r2, [r3, #26]
    3cca:	697b      	ldr	r3, [r7, #20]
    3ccc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    3cce:	230a      	movs	r3, #10
    3cd0:	18fb      	adds	r3, r7, r3
    3cd2:	881a      	ldrh	r2, [r3, #0]
    3cd4:	697b      	ldr	r3, [r7, #20]
    3cd6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    3cd8:	6a3a      	ldr	r2, [r7, #32]
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	4313      	orrs	r3, r2
    3cde:	623b      	str	r3, [r7, #32]

	if (config->use_external_clock == false) {
    3ce0:	683b      	ldr	r3, [r7, #0]
    3ce2:	2227      	movs	r2, #39	; 0x27
    3ce4:	5c9b      	ldrb	r3, [r3, r2]
    3ce6:	2201      	movs	r2, #1
    3ce8:	4053      	eors	r3, r2
    3cea:	b2db      	uxtb	r3, r3
    3cec:	2b00      	cmp	r3, #0
    3cee:	d003      	beq.n	3cf8 <_usart_set_config+0x210>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    3cf0:	6a3b      	ldr	r3, [r7, #32]
    3cf2:	2204      	movs	r2, #4
    3cf4:	4313      	orrs	r3, r2
    3cf6:	623b      	str	r3, [r7, #32]
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3cf8:	683b      	ldr	r3, [r7, #0]
    3cfa:	7e5b      	ldrb	r3, [r3, #25]
    3cfc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3cfe:	683b      	ldr	r3, [r7, #0]
    3d00:	7f1b      	ldrb	r3, [r3, #28]
    3d02:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    3d04:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3d06:	683b      	ldr	r3, [r7, #0]
    3d08:	7f5b      	ldrb	r3, [r3, #29]
    3d0a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    3d0c:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3d0e:	683b      	ldr	r3, [r7, #0]
    3d10:	2124      	movs	r1, #36	; 0x24
    3d12:	5c5b      	ldrb	r3, [r3, r1]
    3d14:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    3d16:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    3d18:	683b      	ldr	r3, [r7, #0]
    3d1a:	2125      	movs	r1, #37	; 0x25
    3d1c:	5c5b      	ldrb	r3, [r3, r1]
    3d1e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    3d20:	4313      	orrs	r3, r2
	ctrlb =  
    3d22:	61fb      	str	r3, [r7, #28]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    3d24:	683b      	ldr	r3, [r7, #0]
    3d26:	7a9b      	ldrb	r3, [r3, #10]
    3d28:	001a      	movs	r2, r3
    3d2a:	69fb      	ldr	r3, [r7, #28]
    3d2c:	4313      	orrs	r3, r2
    3d2e:	61fb      	str	r3, [r7, #28]
	ctrlb |= (uint32_t)config->character_size;
    3d30:	683b      	ldr	r3, [r7, #0]
    3d32:	7adb      	ldrb	r3, [r3, #11]
    3d34:	001a      	movs	r2, r3
    3d36:	69fb      	ldr	r3, [r7, #28]
    3d38:	4313      	orrs	r3, r2
    3d3a:	61fb      	str	r3, [r7, #28]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    3d3c:	683b      	ldr	r3, [r7, #0]
    3d3e:	891b      	ldrh	r3, [r3, #8]
    3d40:	2bff      	cmp	r3, #255	; 0xff
    3d42:	d00b      	beq.n	3d5c <_usart_set_config+0x274>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    3d44:	6a3b      	ldr	r3, [r7, #32]
    3d46:	2280      	movs	r2, #128	; 0x80
    3d48:	0452      	lsls	r2, r2, #17
    3d4a:	4313      	orrs	r3, r2
    3d4c:	623b      	str	r3, [r7, #32]
		ctrlb |= config->parity;
    3d4e:	683b      	ldr	r3, [r7, #0]
    3d50:	891b      	ldrh	r3, [r3, #8]
    3d52:	001a      	movs	r2, r3
    3d54:	69fb      	ldr	r3, [r7, #28]
    3d56:	4313      	orrs	r3, r2
    3d58:	61fb      	str	r3, [r7, #28]
    3d5a:	e008      	b.n	3d6e <_usart_set_config+0x286>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    3d5c:	683b      	ldr	r3, [r7, #0]
    3d5e:	7edb      	ldrb	r3, [r3, #27]
    3d60:	2b00      	cmp	r3, #0
    3d62:	d004      	beq.n	3d6e <_usart_set_config+0x286>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    3d64:	6a3b      	ldr	r3, [r7, #32]
    3d66:	2280      	movs	r2, #128	; 0x80
    3d68:	04d2      	lsls	r2, r2, #19
    3d6a:	4313      	orrs	r3, r2
    3d6c:	623b      	str	r3, [r7, #32]
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3d6e:	683b      	ldr	r3, [r7, #0]
    3d70:	222c      	movs	r2, #44	; 0x2c
    3d72:	5c9b      	ldrb	r3, [r3, r2]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d103      	bne.n	3d80 <_usart_set_config+0x298>
    3d78:	4b11      	ldr	r3, [pc, #68]	; (3dc0 <_usart_set_config+0x2d8>)
    3d7a:	4798      	blx	r3
    3d7c:	1e03      	subs	r3, r0, #0
    3d7e:	d003      	beq.n	3d88 <_usart_set_config+0x2a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    3d80:	6a3b      	ldr	r3, [r7, #32]
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	4313      	orrs	r3, r2
    3d86:	623b      	str	r3, [r7, #32]
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	0018      	movs	r0, r3
    3d8c:	4b0d      	ldr	r3, [pc, #52]	; (3dc4 <_usart_set_config+0x2dc>)
    3d8e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    3d90:	697b      	ldr	r3, [r7, #20]
    3d92:	69fa      	ldr	r2, [r7, #28]
    3d94:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	0018      	movs	r0, r3
    3d9a:	4b0a      	ldr	r3, [pc, #40]	; (3dc4 <_usart_set_config+0x2dc>)
    3d9c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    3d9e:	697b      	ldr	r3, [r7, #20]
    3da0:	6a3a      	ldr	r2, [r7, #32]
    3da2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    3da4:	2300      	movs	r3, #0
}
    3da6:	0018      	movs	r0, r3
    3da8:	46bd      	mov	sp, r7
    3daa:	b00a      	add	sp, #40	; 0x28
    3dac:	bdb0      	pop	{r4, r5, r7, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00002ee9 	.word	0x00002ee9
    3db4:	0000559d 	.word	0x0000559d
    3db8:	00002a6b 	.word	0x00002a6b
    3dbc:	00002ae9 	.word	0x00002ae9
    3dc0:	00003a85 	.word	0x00003a85
    3dc4:	00003ac5 	.word	0x00003ac5

00003dc8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    3dc8:	b590      	push	{r4, r7, lr}
    3dca:	b093      	sub	sp, #76	; 0x4c
    3dcc:	af00      	add	r7, sp, #0
    3dce:	60f8      	str	r0, [r7, #12]
    3dd0:	60b9      	str	r1, [r7, #8]
    3dd2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    3dd4:	2333      	movs	r3, #51	; 0x33
    3dd6:	18fb      	adds	r3, r7, r3
    3dd8:	2200      	movs	r2, #0
    3dda:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    3ddc:	68fb      	ldr	r3, [r7, #12]
    3dde:	68ba      	ldr	r2, [r7, #8]
    3de0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3de2:	68fb      	ldr	r3, [r7, #12]
    3de4:	681b      	ldr	r3, [r3, #0]
    3de6:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3de8:	68fb      	ldr	r3, [r7, #12]
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	0018      	movs	r0, r3
    3dee:	4b8f      	ldr	r3, [pc, #572]	; (402c <usart_init+0x264>)
    3df0:	4798      	blx	r3
    3df2:	0003      	movs	r3, r0
    3df4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3df8:	2b05      	cmp	r3, #5
    3dfa:	d104      	bne.n	3e06 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    3dfc:	2301      	movs	r3, #1
    3dfe:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3e00:	2318      	movs	r3, #24
    3e02:	643b      	str	r3, [r7, #64]	; 0x40
    3e04:	e004      	b.n	3e10 <usart_init+0x48>
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    3e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e08:	647b      	str	r3, [r7, #68]	; 0x44
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e0c:	3312      	adds	r3, #18
    3e0e:	643b      	str	r3, [r7, #64]	; 0x40
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    3e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e12:	681b      	ldr	r3, [r3, #0]
    3e14:	2201      	movs	r2, #1
    3e16:	4013      	ands	r3, r2
    3e18:	d001      	beq.n	3e1e <usart_init+0x56>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    3e1a:	2305      	movs	r3, #5
    3e1c:	e102      	b.n	4024 <usart_init+0x25c>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    3e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	2202      	movs	r2, #2
    3e24:	4013      	ands	r3, r2
    3e26:	d001      	beq.n	3e2c <usart_init+0x64>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    3e28:	231c      	movs	r3, #28
    3e2a:	e0fb      	b.n	4024 <usart_init+0x25c>
	}

	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    3e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e2e:	2b05      	cmp	r3, #5
    3e30:	d108      	bne.n	3e44 <usart_init+0x7c>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    3e32:	2201      	movs	r2, #1
    3e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e36:	409a      	lsls	r2, r3
    3e38:	0013      	movs	r3, r2
    3e3a:	0019      	movs	r1, r3
    3e3c:	2003      	movs	r0, #3
    3e3e:	4b7c      	ldr	r3, [pc, #496]	; (4030 <usart_init+0x268>)
    3e40:	4798      	blx	r3
    3e42:	e007      	b.n	3e54 <usart_init+0x8c>
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    3e44:	2201      	movs	r2, #1
    3e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3e48:	409a      	lsls	r2, r3
    3e4a:	0013      	movs	r3, r2
    3e4c:	0019      	movs	r1, r3
    3e4e:	2002      	movs	r0, #2
    3e50:	4b77      	ldr	r3, [pc, #476]	; (4030 <usart_init+0x268>)
    3e52:	4798      	blx	r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3e54:	2324      	movs	r3, #36	; 0x24
    3e56:	18fb      	adds	r3, r7, r3
    3e58:	0018      	movs	r0, r3
    3e5a:	4b76      	ldr	r3, [pc, #472]	; (4034 <usart_init+0x26c>)
    3e5c:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    3e5e:	687b      	ldr	r3, [r7, #4]
    3e60:	222d      	movs	r2, #45	; 0x2d
    3e62:	5c9a      	ldrb	r2, [r3, r2]
    3e64:	2324      	movs	r3, #36	; 0x24
    3e66:	18fb      	adds	r3, r7, r3
    3e68:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e6c:	b2db      	uxtb	r3, r3
    3e6e:	2224      	movs	r2, #36	; 0x24
    3e70:	18ba      	adds	r2, r7, r2
    3e72:	0011      	movs	r1, r2
    3e74:	0018      	movs	r0, r3
    3e76:	4b70      	ldr	r3, [pc, #448]	; (4038 <usart_init+0x270>)
    3e78:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	0018      	movs	r0, r3
    3e80:	4b6e      	ldr	r3, [pc, #440]	; (403c <usart_init+0x274>)
    3e82:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	222d      	movs	r2, #45	; 0x2d
    3e88:	5c9b      	ldrb	r3, [r3, r2]
    3e8a:	2100      	movs	r1, #0
    3e8c:	0018      	movs	r0, r3
    3e8e:	4b6c      	ldr	r3, [pc, #432]	; (4040 <usart_init+0x278>)
    3e90:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    3e92:	687b      	ldr	r3, [r7, #4]
    3e94:	7ada      	ldrb	r2, [r3, #11]
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    3e9a:	687b      	ldr	r3, [r7, #4]
    3e9c:	2224      	movs	r2, #36	; 0x24
    3e9e:	5c9a      	ldrb	r2, [r3, r2]
    3ea0:	68fb      	ldr	r3, [r7, #12]
    3ea2:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	2225      	movs	r2, #37	; 0x25
    3ea8:	5c9a      	ldrb	r2, [r3, r2]
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	7eda      	ldrb	r2, [r3, #27]
    3eb2:	68fb      	ldr	r3, [r7, #12]
    3eb4:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    3eb6:	687b      	ldr	r3, [r7, #4]
    3eb8:	7f1a      	ldrb	r2, [r3, #28]
    3eba:	68fb      	ldr	r3, [r7, #12]
    3ebc:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    3ebe:	2333      	movs	r3, #51	; 0x33
    3ec0:	18fc      	adds	r4, r7, r3
    3ec2:	687a      	ldr	r2, [r7, #4]
    3ec4:	68fb      	ldr	r3, [r7, #12]
    3ec6:	0011      	movs	r1, r2
    3ec8:	0018      	movs	r0, r3
    3eca:	4b5e      	ldr	r3, [pc, #376]	; (4044 <usart_init+0x27c>)
    3ecc:	4798      	blx	r3
    3ece:	0003      	movs	r3, r0
    3ed0:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    3ed2:	2333      	movs	r3, #51	; 0x33
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	781b      	ldrb	r3, [r3, #0]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d003      	beq.n	3ee4 <usart_init+0x11c>
		return status_code;
    3edc:	2333      	movs	r3, #51	; 0x33
    3ede:	18fb      	adds	r3, r7, r3
    3ee0:	781b      	ldrb	r3, [r3, #0]
    3ee2:	e09f      	b.n	4024 <usart_init+0x25c>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3ee4:	2320      	movs	r3, #32
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	0018      	movs	r0, r3
    3eea:	4b57      	ldr	r3, [pc, #348]	; (4048 <usart_init+0x280>)
    3eec:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3eee:	2320      	movs	r3, #32
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	2200      	movs	r2, #0
    3ef4:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3ef6:	2320      	movs	r3, #32
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	2200      	movs	r2, #0
    3efc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    3efe:	687b      	ldr	r3, [r7, #4]
    3f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    3f02:	2310      	movs	r3, #16
    3f04:	18fb      	adds	r3, r7, r3
    3f06:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    3f08:	687b      	ldr	r3, [r7, #4]
    3f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    3f0c:	2310      	movs	r3, #16
    3f0e:	18fb      	adds	r3, r7, r3
    3f10:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    3f16:	2310      	movs	r3, #16
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    3f20:	2310      	movs	r3, #16
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f26:	233f      	movs	r3, #63	; 0x3f
    3f28:	18fb      	adds	r3, r7, r3
    3f2a:	2200      	movs	r2, #0
    3f2c:	701a      	strb	r2, [r3, #0]
    3f2e:	e02c      	b.n	3f8a <usart_init+0x1c2>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3f30:	233f      	movs	r3, #63	; 0x3f
    3f32:	18fb      	adds	r3, r7, r3
    3f34:	781a      	ldrb	r2, [r3, #0]
    3f36:	2310      	movs	r3, #16
    3f38:	18fb      	adds	r3, r7, r3
    3f3a:	0092      	lsls	r2, r2, #2
    3f3c:	58d3      	ldr	r3, [r2, r3]
    3f3e:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    3f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f42:	2b00      	cmp	r3, #0
    3f44:	d109      	bne.n	3f5a <usart_init+0x192>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3f46:	233f      	movs	r3, #63	; 0x3f
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	781a      	ldrb	r2, [r3, #0]
    3f4c:	68bb      	ldr	r3, [r7, #8]
    3f4e:	0011      	movs	r1, r2
    3f50:	0018      	movs	r0, r3
    3f52:	4b3e      	ldr	r3, [pc, #248]	; (404c <usart_init+0x284>)
    3f54:	4798      	blx	r3
    3f56:	0003      	movs	r3, r0
    3f58:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux != PINMUX_UNUSED) {
    3f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f5c:	3301      	adds	r3, #1
    3f5e:	d00d      	beq.n	3f7c <usart_init+0x1b4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    3f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f62:	b2da      	uxtb	r2, r3
    3f64:	2320      	movs	r3, #32
    3f66:	18fb      	adds	r3, r7, r3
    3f68:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    3f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f6c:	0c1b      	lsrs	r3, r3, #16
    3f6e:	b2db      	uxtb	r3, r3
    3f70:	2220      	movs	r2, #32
    3f72:	18ba      	adds	r2, r7, r2
    3f74:	0011      	movs	r1, r2
    3f76:	0018      	movs	r0, r3
    3f78:	4b35      	ldr	r3, [pc, #212]	; (4050 <usart_init+0x288>)
    3f7a:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    3f7c:	233f      	movs	r3, #63	; 0x3f
    3f7e:	18fb      	adds	r3, r7, r3
    3f80:	781a      	ldrb	r2, [r3, #0]
    3f82:	233f      	movs	r3, #63	; 0x3f
    3f84:	18fb      	adds	r3, r7, r3
    3f86:	3201      	adds	r2, #1
    3f88:	701a      	strb	r2, [r3, #0]
    3f8a:	233f      	movs	r3, #63	; 0x3f
    3f8c:	18fb      	adds	r3, r7, r3
    3f8e:	781b      	ldrb	r3, [r3, #0]
    3f90:	2b03      	cmp	r3, #3
    3f92:	d9cd      	bls.n	3f30 <usart_init+0x168>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3f94:	2300      	movs	r3, #0
    3f96:	637b      	str	r3, [r7, #52]	; 0x34
    3f98:	e00a      	b.n	3fb0 <usart_init+0x1e8>
		module->callback[i]            = NULL;
    3f9a:	68fa      	ldr	r2, [r7, #12]
    3f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f9e:	3302      	adds	r3, #2
    3fa0:	009b      	lsls	r3, r3, #2
    3fa2:	18d3      	adds	r3, r2, r3
    3fa4:	3304      	adds	r3, #4
    3fa6:	2200      	movs	r2, #0
    3fa8:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    3faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fac:	3301      	adds	r3, #1
    3fae:	637b      	str	r3, [r7, #52]	; 0x34
    3fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fb2:	2b05      	cmp	r3, #5
    3fb4:	d9f1      	bls.n	3f9a <usart_init+0x1d2>
	}

	module->tx_buffer_ptr              = NULL;
    3fb6:	68fb      	ldr	r3, [r7, #12]
    3fb8:	2200      	movs	r2, #0
    3fba:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    3fbc:	68fb      	ldr	r3, [r7, #12]
    3fbe:	2200      	movs	r2, #0
    3fc0:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    3fc2:	68fb      	ldr	r3, [r7, #12]
    3fc4:	2200      	movs	r2, #0
    3fc6:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    3fc8:	68fb      	ldr	r3, [r7, #12]
    3fca:	2200      	movs	r2, #0
    3fcc:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    3fce:	68fb      	ldr	r3, [r7, #12]
    3fd0:	2230      	movs	r2, #48	; 0x30
    3fd2:	2100      	movs	r1, #0
    3fd4:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    3fd6:	68fb      	ldr	r3, [r7, #12]
    3fd8:	2231      	movs	r2, #49	; 0x31
    3fda:	2100      	movs	r1, #0
    3fdc:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    3fde:	68fb      	ldr	r3, [r7, #12]
    3fe0:	2232      	movs	r2, #50	; 0x32
    3fe2:	2100      	movs	r1, #0
    3fe4:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    3fe6:	68fb      	ldr	r3, [r7, #12]
    3fe8:	2233      	movs	r2, #51	; 0x33
    3fea:	2100      	movs	r1, #0
    3fec:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3fee:	68fb      	ldr	r3, [r7, #12]
    3ff0:	681b      	ldr	r3, [r3, #0]
    3ff2:	2227      	movs	r2, #39	; 0x27
    3ff4:	18bc      	adds	r4, r7, r2
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b0c      	ldr	r3, [pc, #48]	; (402c <usart_init+0x264>)
    3ffa:	4798      	blx	r3
    3ffc:	0003      	movs	r3, r0
    3ffe:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4000:	4a14      	ldr	r2, [pc, #80]	; (4054 <usart_init+0x28c>)
    4002:	2327      	movs	r3, #39	; 0x27
    4004:	18fb      	adds	r3, r7, r3
    4006:	781b      	ldrb	r3, [r3, #0]
    4008:	0011      	movs	r1, r2
    400a:	0018      	movs	r0, r3
    400c:	4b12      	ldr	r3, [pc, #72]	; (4058 <usart_init+0x290>)
    400e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4010:	2327      	movs	r3, #39	; 0x27
    4012:	18fb      	adds	r3, r7, r3
    4014:	781a      	ldrb	r2, [r3, #0]
    4016:	4b11      	ldr	r3, [pc, #68]	; (405c <usart_init+0x294>)
    4018:	0092      	lsls	r2, r2, #2
    401a:	68f9      	ldr	r1, [r7, #12]
    401c:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    401e:	2333      	movs	r3, #51	; 0x33
    4020:	18fb      	adds	r3, r7, r3
    4022:	781b      	ldrb	r3, [r3, #0]
}
    4024:	0018      	movs	r0, r3
    4026:	46bd      	mov	sp, r7
    4028:	b013      	add	sp, #76	; 0x4c
    402a:	bd90      	pop	{r4, r7, pc}
    402c:	00002ee9 	.word	0x00002ee9
    4030:	000039e1 	.word	0x000039e1
    4034:	000039c9 	.word	0x000039c9
    4038:	000054ad 	.word	0x000054ad
    403c:	000054ed 	.word	0x000054ed
    4040:	00002ca9 	.word	0x00002ca9
    4044:	00003ae9 	.word	0x00003ae9
    4048:	00003a5d 	.word	0x00003a5d
    404c:	00002d35 	.word	0x00002d35
    4050:	00005761 	.word	0x00005761
    4054:	000042e5 	.word	0x000042e5
    4058:	00002f4d 	.word	0x00002f4d
    405c:	20001210 	.word	0x20001210

00004060 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    4060:	b580      	push	{r7, lr}
    4062:	b084      	sub	sp, #16
    4064:	af00      	add	r7, sp, #0
    4066:	6078      	str	r0, [r7, #4]
    4068:	000a      	movs	r2, r1
    406a:	1cbb      	adds	r3, r7, #2
    406c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	681b      	ldr	r3, [r3, #0]
    4072:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	79db      	ldrb	r3, [r3, #7]
    4078:	2201      	movs	r2, #1
    407a:	4053      	eors	r3, r2
    407c:	b2db      	uxtb	r3, r3
    407e:	2b00      	cmp	r3, #0
    4080:	d001      	beq.n	4086 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    4082:	231c      	movs	r3, #28
    4084:	e013      	b.n	40ae <usart_write_wait+0x4e>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    408a:	b29b      	uxth	r3, r3
    408c:	2b00      	cmp	r3, #0
    408e:	d001      	beq.n	4094 <usart_write_wait+0x34>
		return STATUS_BUSY;
    4090:	2305      	movs	r3, #5
    4092:	e00c      	b.n	40ae <usart_write_wait+0x4e>
		return STATUS_BUSY;
	}
#endif

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    4094:	68fb      	ldr	r3, [r7, #12]
    4096:	1cba      	adds	r2, r7, #2
    4098:	8812      	ldrh	r2, [r2, #0]
    409a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    409c:	46c0      	nop			; (mov r8, r8)
    409e:	68fb      	ldr	r3, [r7, #12]
    40a0:	7e1b      	ldrb	r3, [r3, #24]
    40a2:	b2db      	uxtb	r3, r3
    40a4:	001a      	movs	r2, r3
    40a6:	2302      	movs	r3, #2
    40a8:	4013      	ands	r3, r2
    40aa:	d0f8      	beq.n	409e <usart_write_wait+0x3e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    40ac:	2300      	movs	r3, #0
}
    40ae:	0018      	movs	r0, r3
    40b0:	46bd      	mov	sp, r7
    40b2:	b004      	add	sp, #16
    40b4:	bd80      	pop	{r7, pc}

000040b6 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    40b6:	b580      	push	{r7, lr}
    40b8:	b084      	sub	sp, #16
    40ba:	af00      	add	r7, sp, #0
    40bc:	6078      	str	r0, [r7, #4]
    40be:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	799b      	ldrb	r3, [r3, #6]
    40ca:	2201      	movs	r2, #1
    40cc:	4053      	eors	r3, r2
    40ce:	b2db      	uxtb	r3, r3
    40d0:	2b00      	cmp	r3, #0
    40d2:	d001      	beq.n	40d8 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    40d4:	231c      	movs	r3, #28
    40d6:	e05a      	b.n	418e <usart_read_wait+0xd8>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    40dc:	b29b      	uxth	r3, r3
    40de:	2b00      	cmp	r3, #0
    40e0:	d001      	beq.n	40e6 <usart_read_wait+0x30>
		return STATUS_BUSY;
    40e2:	2305      	movs	r3, #5
    40e4:	e053      	b.n	418e <usart_read_wait+0xd8>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    40e6:	68fb      	ldr	r3, [r7, #12]
    40e8:	7e1b      	ldrb	r3, [r3, #24]
    40ea:	b2db      	uxtb	r3, r3
    40ec:	001a      	movs	r2, r3
    40ee:	2304      	movs	r3, #4
    40f0:	4013      	ands	r3, r2
    40f2:	d101      	bne.n	40f8 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    40f4:	2305      	movs	r3, #5
    40f6:	e04a      	b.n	418e <usart_read_wait+0xd8>
	}

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    40f8:	68fb      	ldr	r3, [r7, #12]
    40fa:	8b5b      	ldrh	r3, [r3, #26]
    40fc:	b29b      	uxth	r3, r3
    40fe:	b2da      	uxtb	r2, r3
    4100:	230b      	movs	r3, #11
    4102:	18fb      	adds	r3, r7, r3
    4104:	213f      	movs	r1, #63	; 0x3f
    4106:	400a      	ands	r2, r1
    4108:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    410a:	230b      	movs	r3, #11
    410c:	18fb      	adds	r3, r7, r3
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	2b00      	cmp	r3, #0
    4112:	d036      	beq.n	4182 <usart_read_wait+0xcc>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4114:	230b      	movs	r3, #11
    4116:	18fb      	adds	r3, r7, r3
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	2202      	movs	r2, #2
    411c:	4013      	ands	r3, r2
    411e:	d004      	beq.n	412a <usart_read_wait+0x74>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4120:	68fb      	ldr	r3, [r7, #12]
    4122:	2202      	movs	r2, #2
    4124:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    4126:	231a      	movs	r3, #26
    4128:	e031      	b.n	418e <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    412a:	230b      	movs	r3, #11
    412c:	18fb      	adds	r3, r7, r3
    412e:	781b      	ldrb	r3, [r3, #0]
    4130:	2204      	movs	r2, #4
    4132:	4013      	ands	r3, r2
    4134:	d004      	beq.n	4140 <usart_read_wait+0x8a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4136:	68fb      	ldr	r3, [r7, #12]
    4138:	2204      	movs	r2, #4
    413a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    413c:	231e      	movs	r3, #30
    413e:	e026      	b.n	418e <usart_read_wait+0xd8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4140:	230b      	movs	r3, #11
    4142:	18fb      	adds	r3, r7, r3
    4144:	781b      	ldrb	r3, [r3, #0]
    4146:	2201      	movs	r2, #1
    4148:	4013      	ands	r3, r2
    414a:	d004      	beq.n	4156 <usart_read_wait+0xa0>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    414c:	68fb      	ldr	r3, [r7, #12]
    414e:	2201      	movs	r2, #1
    4150:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    4152:	2313      	movs	r3, #19
    4154:	e01b      	b.n	418e <usart_read_wait+0xd8>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4156:	230b      	movs	r3, #11
    4158:	18fb      	adds	r3, r7, r3
    415a:	781b      	ldrb	r3, [r3, #0]
    415c:	2210      	movs	r2, #16
    415e:	4013      	ands	r3, r2
    4160:	d004      	beq.n	416c <usart_read_wait+0xb6>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	2210      	movs	r2, #16
    4166:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    4168:	2342      	movs	r3, #66	; 0x42
    416a:	e010      	b.n	418e <usart_read_wait+0xd8>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    416c:	230b      	movs	r3, #11
    416e:	18fb      	adds	r3, r7, r3
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	2220      	movs	r2, #32
    4174:	4013      	ands	r3, r2
    4176:	d004      	beq.n	4182 <usart_read_wait+0xcc>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4178:	68fb      	ldr	r3, [r7, #12]
    417a:	2220      	movs	r2, #32
    417c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    417e:	2341      	movs	r3, #65	; 0x41
    4180:	e005      	b.n	418e <usart_read_wait+0xd8>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4182:	68fb      	ldr	r3, [r7, #12]
    4184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4186:	b29a      	uxth	r2, r3
    4188:	683b      	ldr	r3, [r7, #0]
    418a:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    418c:	2300      	movs	r3, #0
}
    418e:	0018      	movs	r0, r3
    4190:	46bd      	mov	sp, r7
    4192:	b004      	add	sp, #16
    4194:	bd80      	pop	{r7, pc}
	...

00004198 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4198:	b590      	push	{r4, r7, lr}
    419a:	b089      	sub	sp, #36	; 0x24
    419c:	af00      	add	r7, sp, #0
    419e:	60f8      	str	r0, [r7, #12]
    41a0:	60b9      	str	r1, [r7, #8]
    41a2:	1dbb      	adds	r3, r7, #6
    41a4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    41a6:	1dbb      	adds	r3, r7, #6
    41a8:	881b      	ldrh	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d101      	bne.n	41b2 <usart_read_buffer_wait+0x1a>
		return STATUS_ERR_INVALID_ARG;
    41ae:	2317      	movs	r3, #23
    41b0:	e06d      	b.n	428e <usart_read_buffer_wait+0xf6>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    41b2:	68fb      	ldr	r3, [r7, #12]
    41b4:	799b      	ldrb	r3, [r3, #6]
    41b6:	2201      	movs	r2, #1
    41b8:	4053      	eors	r3, r2
    41ba:	b2db      	uxtb	r3, r3
    41bc:	2b00      	cmp	r3, #0
    41be:	d001      	beq.n	41c4 <usart_read_buffer_wait+0x2c>
		return STATUS_ERR_DENIED;
    41c0:	231c      	movs	r3, #28
    41c2:	e064      	b.n	428e <usart_read_buffer_wait+0xf6>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    41c4:	68fb      	ldr	r3, [r7, #12]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	617b      	str	r3, [r7, #20]

	uint16_t rx_pos = 0;
    41ca:	231e      	movs	r3, #30
    41cc:	18fb      	adds	r3, r7, r3
    41ce:	2200      	movs	r2, #0
    41d0:	801a      	strh	r2, [r3, #0]

	/* Blocks while buffer is being received */
	while (length--) {
    41d2:	e054      	b.n	427e <usart_read_buffer_wait+0xe6>
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    41d4:	2300      	movs	r3, #0
    41d6:	61bb      	str	r3, [r7, #24]
    41d8:	e00f      	b.n	41fa <usart_read_buffer_wait+0x62>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    41da:	697b      	ldr	r3, [r7, #20]
    41dc:	7e1b      	ldrb	r3, [r3, #24]
    41de:	b2db      	uxtb	r3, r3
    41e0:	001a      	movs	r2, r3
    41e2:	2304      	movs	r3, #4
    41e4:	4013      	ands	r3, r2
    41e6:	d10d      	bne.n	4204 <usart_read_buffer_wait+0x6c>
				break;
			} else if (i == USART_TIMEOUT) {
    41e8:	69bb      	ldr	r3, [r7, #24]
    41ea:	4a2b      	ldr	r2, [pc, #172]	; (4298 <usart_read_buffer_wait+0x100>)
    41ec:	4293      	cmp	r3, r2
    41ee:	d101      	bne.n	41f4 <usart_read_buffer_wait+0x5c>
				return STATUS_ERR_TIMEOUT;
    41f0:	2312      	movs	r3, #18
    41f2:	e04c      	b.n	428e <usart_read_buffer_wait+0xf6>
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    41f4:	69bb      	ldr	r3, [r7, #24]
    41f6:	3301      	adds	r3, #1
    41f8:	61bb      	str	r3, [r7, #24]
    41fa:	69bb      	ldr	r3, [r7, #24]
    41fc:	4a26      	ldr	r2, [pc, #152]	; (4298 <usart_read_buffer_wait+0x100>)
    41fe:	4293      	cmp	r3, r2
    4200:	d9eb      	bls.n	41da <usart_read_buffer_wait+0x42>
    4202:	e000      	b.n	4206 <usart_read_buffer_wait+0x6e>
				break;
    4204:	46c0      	nop			; (mov r8, r8)
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
    4206:	2310      	movs	r3, #16
    4208:	18fb      	adds	r3, r7, r3
    420a:	2200      	movs	r2, #0
    420c:	801a      	strh	r2, [r3, #0]

		retval = usart_read_wait(module, &received_data);
    420e:	2313      	movs	r3, #19
    4210:	18fc      	adds	r4, r7, r3
    4212:	2310      	movs	r3, #16
    4214:	18fa      	adds	r2, r7, r3
    4216:	68fb      	ldr	r3, [r7, #12]
    4218:	0011      	movs	r1, r2
    421a:	0018      	movs	r0, r3
    421c:	4b1f      	ldr	r3, [pc, #124]	; (429c <usart_read_buffer_wait+0x104>)
    421e:	4798      	blx	r3
    4220:	0003      	movs	r3, r0
    4222:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4224:	2313      	movs	r3, #19
    4226:	18fb      	adds	r3, r7, r3
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	2b00      	cmp	r3, #0
    422c:	d003      	beq.n	4236 <usart_read_buffer_wait+0x9e>
			/* Overflow, abort */
			return retval;
    422e:	2313      	movs	r3, #19
    4230:	18fb      	adds	r3, r7, r3
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	e02b      	b.n	428e <usart_read_buffer_wait+0xf6>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4236:	231e      	movs	r3, #30
    4238:	18fb      	adds	r3, r7, r3
    423a:	881b      	ldrh	r3, [r3, #0]
    423c:	221e      	movs	r2, #30
    423e:	18ba      	adds	r2, r7, r2
    4240:	1c59      	adds	r1, r3, #1
    4242:	8011      	strh	r1, [r2, #0]
    4244:	001a      	movs	r2, r3
    4246:	68bb      	ldr	r3, [r7, #8]
    4248:	189b      	adds	r3, r3, r2
    424a:	2210      	movs	r2, #16
    424c:	18ba      	adds	r2, r7, r2
    424e:	8812      	ldrh	r2, [r2, #0]
    4250:	b2d2      	uxtb	r2, r2
    4252:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4254:	68fb      	ldr	r3, [r7, #12]
    4256:	795b      	ldrb	r3, [r3, #5]
    4258:	2b01      	cmp	r3, #1
    425a:	d110      	bne.n	427e <usart_read_buffer_wait+0xe6>
			rx_data[rx_pos++] = (received_data >> 8);
    425c:	231e      	movs	r3, #30
    425e:	18fb      	adds	r3, r7, r3
    4260:	881b      	ldrh	r3, [r3, #0]
    4262:	221e      	movs	r2, #30
    4264:	18ba      	adds	r2, r7, r2
    4266:	1c59      	adds	r1, r3, #1
    4268:	8011      	strh	r1, [r2, #0]
    426a:	001a      	movs	r2, r3
    426c:	68bb      	ldr	r3, [r7, #8]
    426e:	189b      	adds	r3, r3, r2
    4270:	2210      	movs	r2, #16
    4272:	18ba      	adds	r2, r7, r2
    4274:	8812      	ldrh	r2, [r2, #0]
    4276:	0a12      	lsrs	r2, r2, #8
    4278:	b292      	uxth	r2, r2
    427a:	b2d2      	uxtb	r2, r2
    427c:	701a      	strb	r2, [r3, #0]
	while (length--) {
    427e:	1dbb      	adds	r3, r7, #6
    4280:	881b      	ldrh	r3, [r3, #0]
    4282:	1dba      	adds	r2, r7, #6
    4284:	1e59      	subs	r1, r3, #1
    4286:	8011      	strh	r1, [r2, #0]
    4288:	2b00      	cmp	r3, #0
    428a:	d1a3      	bne.n	41d4 <usart_read_buffer_wait+0x3c>
		}
	}

	return STATUS_OK;
    428c:	2300      	movs	r3, #0
}
    428e:	0018      	movs	r0, r3
    4290:	46bd      	mov	sp, r7
    4292:	b009      	add	sp, #36	; 0x24
    4294:	bd90      	pop	{r4, r7, pc}
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	0000ffff 	.word	0x0000ffff
    429c:	000040b7 	.word	0x000040b7

000042a0 <usart_is_syncing>:
{
    42a0:	b580      	push	{r7, lr}
    42a2:	b084      	sub	sp, #16
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	681b      	ldr	r3, [r3, #0]
    42ac:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	69db      	ldr	r3, [r3, #28]
    42b2:	1e5a      	subs	r2, r3, #1
    42b4:	4193      	sbcs	r3, r2
    42b6:	b2db      	uxtb	r3, r3
}
    42b8:	0018      	movs	r0, r3
    42ba:	46bd      	mov	sp, r7
    42bc:	b004      	add	sp, #16
    42be:	bd80      	pop	{r7, pc}

000042c0 <_usart_wait_for_sync>:
{
    42c0:	b580      	push	{r7, lr}
    42c2:	b082      	sub	sp, #8
    42c4:	af00      	add	r7, sp, #0
    42c6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    42c8:	46c0      	nop			; (mov r8, r8)
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	0018      	movs	r0, r3
    42ce:	4b04      	ldr	r3, [pc, #16]	; (42e0 <_usart_wait_for_sync+0x20>)
    42d0:	4798      	blx	r3
    42d2:	1e03      	subs	r3, r0, #0
    42d4:	d1f9      	bne.n	42ca <_usart_wait_for_sync+0xa>
}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	46bd      	mov	sp, r7
    42da:	b002      	add	sp, #8
    42dc:	bd80      	pop	{r7, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	000042a1 	.word	0x000042a1

000042e4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    42e4:	b580      	push	{r7, lr}
    42e6:	b088      	sub	sp, #32
    42e8:	af00      	add	r7, sp, #0
    42ea:	0002      	movs	r2, r0
    42ec:	1dfb      	adds	r3, r7, #7
    42ee:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    42f0:	1dfb      	adds	r3, r7, #7
    42f2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    42f4:	4ba3      	ldr	r3, [pc, #652]	; (4584 <_usart_interrupt_handler+0x2a0>)
    42f6:	0092      	lsls	r2, r2, #2
    42f8:	58d3      	ldr	r3, [r2, r3]
    42fa:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    42fc:	69bb      	ldr	r3, [r7, #24]
    42fe:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    4300:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    4302:	69bb      	ldr	r3, [r7, #24]
    4304:	0018      	movs	r0, r3
    4306:	4ba0      	ldr	r3, [pc, #640]	; (4588 <_usart_interrupt_handler+0x2a4>)
    4308:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    430a:	697b      	ldr	r3, [r7, #20]
    430c:	7e1b      	ldrb	r3, [r3, #24]
    430e:	b2da      	uxtb	r2, r3
    4310:	2312      	movs	r3, #18
    4312:	18fb      	adds	r3, r7, r3
    4314:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    4316:	697b      	ldr	r3, [r7, #20]
    4318:	7d9b      	ldrb	r3, [r3, #22]
    431a:	b2db      	uxtb	r3, r3
    431c:	b29a      	uxth	r2, r3
    431e:	2312      	movs	r3, #18
    4320:	18fb      	adds	r3, r7, r3
    4322:	2112      	movs	r1, #18
    4324:	1879      	adds	r1, r7, r1
    4326:	8809      	ldrh	r1, [r1, #0]
    4328:	400a      	ands	r2, r1
    432a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    432c:	69bb      	ldr	r3, [r7, #24]
    432e:	2230      	movs	r2, #48	; 0x30
    4330:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    4332:	69ba      	ldr	r2, [r7, #24]
    4334:	2131      	movs	r1, #49	; 0x31
    4336:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    4338:	4013      	ands	r3, r2
    433a:	b2da      	uxtb	r2, r3
    433c:	2310      	movs	r3, #16
    433e:	18fb      	adds	r3, r7, r3
    4340:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4342:	2312      	movs	r3, #18
    4344:	18fb      	adds	r3, r7, r3
    4346:	881b      	ldrh	r3, [r3, #0]
    4348:	2201      	movs	r2, #1
    434a:	4013      	ands	r3, r2
    434c:	d044      	beq.n	43d8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    434e:	69bb      	ldr	r3, [r7, #24]
    4350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4352:	b29b      	uxth	r3, r3
    4354:	2b00      	cmp	r3, #0
    4356:	d03c      	beq.n	43d2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4358:	69bb      	ldr	r3, [r7, #24]
    435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    435c:	781b      	ldrb	r3, [r3, #0]
    435e:	b2da      	uxtb	r2, r3
    4360:	231c      	movs	r3, #28
    4362:	18fb      	adds	r3, r7, r3
    4364:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4366:	69bb      	ldr	r3, [r7, #24]
    4368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    436a:	1c5a      	adds	r2, r3, #1
    436c:	69bb      	ldr	r3, [r7, #24]
    436e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4370:	69bb      	ldr	r3, [r7, #24]
    4372:	795b      	ldrb	r3, [r3, #5]
    4374:	2b01      	cmp	r3, #1
    4376:	d113      	bne.n	43a0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4378:	69bb      	ldr	r3, [r7, #24]
    437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    437c:	781b      	ldrb	r3, [r3, #0]
    437e:	b2db      	uxtb	r3, r3
    4380:	021b      	lsls	r3, r3, #8
    4382:	b21a      	sxth	r2, r3
    4384:	231c      	movs	r3, #28
    4386:	18fb      	adds	r3, r7, r3
    4388:	2100      	movs	r1, #0
    438a:	5e5b      	ldrsh	r3, [r3, r1]
    438c:	4313      	orrs	r3, r2
    438e:	b21a      	sxth	r2, r3
    4390:	231c      	movs	r3, #28
    4392:	18fb      	adds	r3, r7, r3
    4394:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4396:	69bb      	ldr	r3, [r7, #24]
    4398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    439a:	1c5a      	adds	r2, r3, #1
    439c:	69bb      	ldr	r3, [r7, #24]
    439e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    43a0:	231c      	movs	r3, #28
    43a2:	18fb      	adds	r3, r7, r3
    43a4:	881b      	ldrh	r3, [r3, #0]
    43a6:	05db      	lsls	r3, r3, #23
    43a8:	0ddb      	lsrs	r3, r3, #23
    43aa:	b29a      	uxth	r2, r3
    43ac:	697b      	ldr	r3, [r7, #20]
    43ae:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    43b0:	69bb      	ldr	r3, [r7, #24]
    43b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    43b4:	b29b      	uxth	r3, r3
    43b6:	3b01      	subs	r3, #1
    43b8:	b29b      	uxth	r3, r3
    43ba:	69ba      	ldr	r2, [r7, #24]
    43bc:	1c19      	adds	r1, r3, #0
    43be:	85d1      	strh	r1, [r2, #46]	; 0x2e
    43c0:	2b00      	cmp	r3, #0
    43c2:	d109      	bne.n	43d8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    43c4:	697b      	ldr	r3, [r7, #20]
    43c6:	2201      	movs	r2, #1
    43c8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    43ca:	697b      	ldr	r3, [r7, #20]
    43cc:	2202      	movs	r2, #2
    43ce:	759a      	strb	r2, [r3, #22]
    43d0:	e002      	b.n	43d8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    43d2:	697b      	ldr	r3, [r7, #20]
    43d4:	2201      	movs	r2, #1
    43d6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    43d8:	2312      	movs	r3, #18
    43da:	18fb      	adds	r3, r7, r3
    43dc:	881b      	ldrh	r3, [r3, #0]
    43de:	2202      	movs	r2, #2
    43e0:	4013      	ands	r3, r2
    43e2:	d011      	beq.n	4408 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    43e4:	697b      	ldr	r3, [r7, #20]
    43e6:	2202      	movs	r2, #2
    43e8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    43ea:	69bb      	ldr	r3, [r7, #24]
    43ec:	2233      	movs	r2, #51	; 0x33
    43ee:	2100      	movs	r1, #0
    43f0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    43f2:	2310      	movs	r3, #16
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	881b      	ldrh	r3, [r3, #0]
    43f8:	2201      	movs	r2, #1
    43fa:	4013      	ands	r3, r2
    43fc:	d004      	beq.n	4408 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    43fe:	69bb      	ldr	r3, [r7, #24]
    4400:	68db      	ldr	r3, [r3, #12]
    4402:	69ba      	ldr	r2, [r7, #24]
    4404:	0010      	movs	r0, r2
    4406:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4408:	2312      	movs	r3, #18
    440a:	18fb      	adds	r3, r7, r3
    440c:	881b      	ldrh	r3, [r3, #0]
    440e:	2204      	movs	r2, #4
    4410:	4013      	ands	r3, r2
    4412:	d100      	bne.n	4416 <_usart_interrupt_handler+0x132>
    4414:	e0bd      	b.n	4592 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    4416:	69bb      	ldr	r3, [r7, #24]
    4418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    441a:	b29b      	uxth	r3, r3
    441c:	2b00      	cmp	r3, #0
    441e:	d100      	bne.n	4422 <_usart_interrupt_handler+0x13e>
    4420:	e0b4      	b.n	458c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4422:	697b      	ldr	r3, [r7, #20]
    4424:	8b5b      	ldrh	r3, [r3, #26]
    4426:	b29b      	uxth	r3, r3
    4428:	b2da      	uxtb	r2, r3
    442a:	231f      	movs	r3, #31
    442c:	18fb      	adds	r3, r7, r3
    442e:	213f      	movs	r1, #63	; 0x3f
    4430:	400a      	ands	r2, r1
    4432:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4434:	231f      	movs	r3, #31
    4436:	18fb      	adds	r3, r7, r3
    4438:	781b      	ldrb	r3, [r3, #0]
    443a:	2208      	movs	r2, #8
    443c:	4013      	ands	r3, r2
    443e:	d007      	beq.n	4450 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4440:	231f      	movs	r3, #31
    4442:	18fb      	adds	r3, r7, r3
    4444:	221f      	movs	r2, #31
    4446:	18ba      	adds	r2, r7, r2
    4448:	7812      	ldrb	r2, [r2, #0]
    444a:	2108      	movs	r1, #8
    444c:	438a      	bics	r2, r1
    444e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4450:	231f      	movs	r3, #31
    4452:	18fb      	adds	r3, r7, r3
    4454:	781b      	ldrb	r3, [r3, #0]
    4456:	2b00      	cmp	r3, #0
    4458:	d050      	beq.n	44fc <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    445a:	231f      	movs	r3, #31
    445c:	18fb      	adds	r3, r7, r3
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	2202      	movs	r2, #2
    4462:	4013      	ands	r3, r2
    4464:	d007      	beq.n	4476 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4466:	69bb      	ldr	r3, [r7, #24]
    4468:	2232      	movs	r2, #50	; 0x32
    446a:	211a      	movs	r1, #26
    446c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    446e:	697b      	ldr	r3, [r7, #20]
    4470:	2202      	movs	r2, #2
    4472:	835a      	strh	r2, [r3, #26]
    4474:	e036      	b.n	44e4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4476:	231f      	movs	r3, #31
    4478:	18fb      	adds	r3, r7, r3
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	2204      	movs	r2, #4
    447e:	4013      	ands	r3, r2
    4480:	d007      	beq.n	4492 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4482:	69bb      	ldr	r3, [r7, #24]
    4484:	2232      	movs	r2, #50	; 0x32
    4486:	211e      	movs	r1, #30
    4488:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    448a:	697b      	ldr	r3, [r7, #20]
    448c:	2204      	movs	r2, #4
    448e:	835a      	strh	r2, [r3, #26]
    4490:	e028      	b.n	44e4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4492:	231f      	movs	r3, #31
    4494:	18fb      	adds	r3, r7, r3
    4496:	781b      	ldrb	r3, [r3, #0]
    4498:	2201      	movs	r2, #1
    449a:	4013      	ands	r3, r2
    449c:	d007      	beq.n	44ae <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    449e:	69bb      	ldr	r3, [r7, #24]
    44a0:	2232      	movs	r2, #50	; 0x32
    44a2:	2113      	movs	r1, #19
    44a4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    44a6:	697b      	ldr	r3, [r7, #20]
    44a8:	2201      	movs	r2, #1
    44aa:	835a      	strh	r2, [r3, #26]
    44ac:	e01a      	b.n	44e4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    44ae:	231f      	movs	r3, #31
    44b0:	18fb      	adds	r3, r7, r3
    44b2:	781b      	ldrb	r3, [r3, #0]
    44b4:	2210      	movs	r2, #16
    44b6:	4013      	ands	r3, r2
    44b8:	d007      	beq.n	44ca <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    44ba:	69bb      	ldr	r3, [r7, #24]
    44bc:	2232      	movs	r2, #50	; 0x32
    44be:	2142      	movs	r1, #66	; 0x42
    44c0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    44c2:	697b      	ldr	r3, [r7, #20]
    44c4:	2210      	movs	r2, #16
    44c6:	835a      	strh	r2, [r3, #26]
    44c8:	e00c      	b.n	44e4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    44ca:	231f      	movs	r3, #31
    44cc:	18fb      	adds	r3, r7, r3
    44ce:	781b      	ldrb	r3, [r3, #0]
    44d0:	2220      	movs	r2, #32
    44d2:	4013      	ands	r3, r2
    44d4:	d006      	beq.n	44e4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    44d6:	69bb      	ldr	r3, [r7, #24]
    44d8:	2232      	movs	r2, #50	; 0x32
    44da:	2141      	movs	r1, #65	; 0x41
    44dc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    44de:	697b      	ldr	r3, [r7, #20]
    44e0:	2220      	movs	r2, #32
    44e2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    44e4:	2310      	movs	r3, #16
    44e6:	18fb      	adds	r3, r7, r3
    44e8:	881b      	ldrh	r3, [r3, #0]
    44ea:	2204      	movs	r2, #4
    44ec:	4013      	ands	r3, r2
				if (callback_status
    44ee:	d050      	beq.n	4592 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    44f0:	69bb      	ldr	r3, [r7, #24]
    44f2:	695b      	ldr	r3, [r3, #20]
    44f4:	69ba      	ldr	r2, [r7, #24]
    44f6:	0010      	movs	r0, r2
    44f8:	4798      	blx	r3
    44fa:	e04a      	b.n	4592 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    44fc:	697b      	ldr	r3, [r7, #20]
    44fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4500:	b29a      	uxth	r2, r3
    4502:	230e      	movs	r3, #14
    4504:	18fb      	adds	r3, r7, r3
    4506:	05d2      	lsls	r2, r2, #23
    4508:	0dd2      	lsrs	r2, r2, #23
    450a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    450c:	69bb      	ldr	r3, [r7, #24]
    450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4510:	220e      	movs	r2, #14
    4512:	18ba      	adds	r2, r7, r2
    4514:	8812      	ldrh	r2, [r2, #0]
    4516:	b2d2      	uxtb	r2, r2
    4518:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    451a:	69bb      	ldr	r3, [r7, #24]
    451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    451e:	1c5a      	adds	r2, r3, #1
    4520:	69bb      	ldr	r3, [r7, #24]
    4522:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4524:	69bb      	ldr	r3, [r7, #24]
    4526:	795b      	ldrb	r3, [r3, #5]
    4528:	2b01      	cmp	r3, #1
    452a:	d10d      	bne.n	4548 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    452c:	69bb      	ldr	r3, [r7, #24]
    452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4530:	220e      	movs	r2, #14
    4532:	18ba      	adds	r2, r7, r2
    4534:	8812      	ldrh	r2, [r2, #0]
    4536:	0a12      	lsrs	r2, r2, #8
    4538:	b292      	uxth	r2, r2
    453a:	b2d2      	uxtb	r2, r2
    453c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    453e:	69bb      	ldr	r3, [r7, #24]
    4540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4542:	1c5a      	adds	r2, r3, #1
    4544:	69bb      	ldr	r3, [r7, #24]
    4546:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4548:	69bb      	ldr	r3, [r7, #24]
    454a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    454c:	b29b      	uxth	r3, r3
    454e:	3b01      	subs	r3, #1
    4550:	b29b      	uxth	r3, r3
    4552:	69ba      	ldr	r2, [r7, #24]
    4554:	1c19      	adds	r1, r3, #0
    4556:	8591      	strh	r1, [r2, #44]	; 0x2c
    4558:	2b00      	cmp	r3, #0
    455a:	d11a      	bne.n	4592 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    455c:	697b      	ldr	r3, [r7, #20]
    455e:	2204      	movs	r2, #4
    4560:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    4562:	69bb      	ldr	r3, [r7, #24]
    4564:	2232      	movs	r2, #50	; 0x32
    4566:	2100      	movs	r1, #0
    4568:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    456a:	2310      	movs	r3, #16
    456c:	18fb      	adds	r3, r7, r3
    456e:	881b      	ldrh	r3, [r3, #0]
    4570:	2202      	movs	r2, #2
    4572:	4013      	ands	r3, r2
					if (callback_status
    4574:	d00d      	beq.n	4592 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4576:	69bb      	ldr	r3, [r7, #24]
    4578:	691b      	ldr	r3, [r3, #16]
    457a:	69ba      	ldr	r2, [r7, #24]
    457c:	0010      	movs	r0, r2
    457e:	4798      	blx	r3
    4580:	e007      	b.n	4592 <_usart_interrupt_handler+0x2ae>
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	20001210 	.word	0x20001210
    4588:	000042c1 	.word	0x000042c1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    458c:	697b      	ldr	r3, [r7, #20]
    458e:	2204      	movs	r2, #4
    4590:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4592:	2312      	movs	r3, #18
    4594:	18fb      	adds	r3, r7, r3
    4596:	881b      	ldrh	r3, [r3, #0]
    4598:	2210      	movs	r2, #16
    459a:	4013      	ands	r3, r2
    459c:	d010      	beq.n	45c0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    459e:	697b      	ldr	r3, [r7, #20]
    45a0:	2210      	movs	r2, #16
    45a2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    45a4:	697b      	ldr	r3, [r7, #20]
    45a6:	2210      	movs	r2, #16
    45a8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    45aa:	2310      	movs	r3, #16
    45ac:	18fb      	adds	r3, r7, r3
    45ae:	881b      	ldrh	r3, [r3, #0]
    45b0:	2210      	movs	r2, #16
    45b2:	4013      	ands	r3, r2
    45b4:	d004      	beq.n	45c0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    45b6:	69bb      	ldr	r3, [r7, #24]
    45b8:	69db      	ldr	r3, [r3, #28]
    45ba:	69ba      	ldr	r2, [r7, #24]
    45bc:	0010      	movs	r0, r2
    45be:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    45c0:	2312      	movs	r3, #18
    45c2:	18fb      	adds	r3, r7, r3
    45c4:	881b      	ldrh	r3, [r3, #0]
    45c6:	2220      	movs	r2, #32
    45c8:	4013      	ands	r3, r2
    45ca:	d010      	beq.n	45ee <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    45cc:	697b      	ldr	r3, [r7, #20]
    45ce:	2220      	movs	r2, #32
    45d0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    45d2:	697b      	ldr	r3, [r7, #20]
    45d4:	2220      	movs	r2, #32
    45d6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    45d8:	2310      	movs	r3, #16
    45da:	18fb      	adds	r3, r7, r3
    45dc:	881b      	ldrh	r3, [r3, #0]
    45de:	2208      	movs	r2, #8
    45e0:	4013      	ands	r3, r2
    45e2:	d004      	beq.n	45ee <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    45e4:	69bb      	ldr	r3, [r7, #24]
    45e6:	699b      	ldr	r3, [r3, #24]
    45e8:	69ba      	ldr	r2, [r7, #24]
    45ea:	0010      	movs	r0, r2
    45ec:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    45ee:	2312      	movs	r3, #18
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	881b      	ldrh	r3, [r3, #0]
    45f4:	2208      	movs	r2, #8
    45f6:	4013      	ands	r3, r2
    45f8:	d010      	beq.n	461c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    45fa:	697b      	ldr	r3, [r7, #20]
    45fc:	2208      	movs	r2, #8
    45fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4600:	697b      	ldr	r3, [r7, #20]
    4602:	2208      	movs	r2, #8
    4604:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4606:	2310      	movs	r3, #16
    4608:	18fb      	adds	r3, r7, r3
    460a:	881b      	ldrh	r3, [r3, #0]
    460c:	2220      	movs	r2, #32
    460e:	4013      	ands	r3, r2
    4610:	d004      	beq.n	461c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4612:	69bb      	ldr	r3, [r7, #24]
    4614:	6a1b      	ldr	r3, [r3, #32]
    4616:	69ba      	ldr	r2, [r7, #24]
    4618:	0010      	movs	r0, r2
    461a:	4798      	blx	r3
		}
	}
#endif
}
    461c:	46c0      	nop			; (mov r8, r8)
    461e:	46bd      	mov	sp, r7
    4620:	b008      	add	sp, #32
    4622:	bd80      	pop	{r7, pc}

00004624 <system_gclk_gen_get_config_defaults>:
{
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	2201      	movs	r2, #1
    4630:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	2200      	movs	r2, #0
    4636:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    4638:	687b      	ldr	r3, [r7, #4]
    463a:	2206      	movs	r2, #6
    463c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	2200      	movs	r2, #0
    4642:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	2200      	movs	r2, #0
    4648:	725a      	strb	r2, [r3, #9]
}
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	46bd      	mov	sp, r7
    464e:	b002      	add	sp, #8
    4650:	bd80      	pop	{r7, pc}

00004652 <system_gclk_chan_get_config_defaults>:
{
    4652:	b580      	push	{r7, lr}
    4654:	b082      	sub	sp, #8
    4656:	af00      	add	r7, sp, #0
    4658:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	2200      	movs	r2, #0
    465e:	701a      	strb	r2, [r3, #0]
}
    4660:	46c0      	nop			; (mov r8, r8)
    4662:	46bd      	mov	sp, r7
    4664:	b002      	add	sp, #8
    4666:	bd80      	pop	{r7, pc}

00004668 <system_clock_source_xosc32k_get_config_defaults>:
{
    4668:	b580      	push	{r7, lr}
    466a:	b082      	sub	sp, #8
    466c:	af00      	add	r7, sp, #0
    466e:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4670:	687b      	ldr	r3, [r7, #4]
    4672:	2200      	movs	r2, #0
    4674:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	2202      	movs	r2, #2
    467a:	705a      	strb	r2, [r3, #1]
	config->frequency           = 32768UL;
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	2280      	movs	r2, #128	; 0x80
    4680:	0212      	lsls	r2, r2, #8
    4682:	605a      	str	r2, [r3, #4]
	config->enable_1khz_output  = false;
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	2200      	movs	r2, #0
    4688:	709a      	strb	r2, [r3, #2]
	config->enable_32khz_output = true;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	2201      	movs	r2, #1
    468e:	70da      	strb	r2, [r3, #3]
	config->run_in_standby      = false;
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	2200      	movs	r2, #0
    4694:	721a      	strb	r2, [r3, #8]
	config->on_demand           = true;
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	2201      	movs	r2, #1
    469a:	725a      	strb	r2, [r3, #9]
	config->write_once          = false;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	2200      	movs	r2, #0
    46a0:	729a      	strb	r2, [r3, #10]
}
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	46bd      	mov	sp, r7
    46a6:	b002      	add	sp, #8
    46a8:	bd80      	pop	{r7, pc}

000046aa <system_clock_source_osc16m_get_config_defaults>:
{
    46aa:	b580      	push	{r7, lr}
    46ac:	b082      	sub	sp, #8
    46ae:	af00      	add	r7, sp, #0
    46b0:	6078      	str	r0, [r7, #4]
	config->fsel = SYSTEM_OSC16M_4M;
    46b2:	687b      	ldr	r3, [r7, #4]
    46b4:	2200      	movs	r2, #0
    46b6:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	2200      	movs	r2, #0
    46bc:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	2201      	movs	r2, #1
    46c2:	709a      	strb	r2, [r3, #2]
}
    46c4:	46c0      	nop			; (mov r8, r8)
    46c6:	46bd      	mov	sp, r7
    46c8:	b002      	add	sp, #8
    46ca:	bd80      	pop	{r7, pc}

000046cc <system_clock_source_dfll_get_config_defaults>:
{
    46cc:	b580      	push	{r7, lr}
    46ce:	b082      	sub	sp, #8
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    46d4:	687b      	ldr	r3, [r7, #4]
    46d6:	2200      	movs	r2, #0
    46d8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    46da:	687b      	ldr	r3, [r7, #4]
    46dc:	2200      	movs	r2, #0
    46de:	809a      	strh	r2, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    46e0:	687b      	ldr	r3, [r7, #4]
    46e2:	2200      	movs	r2, #0
    46e4:	80da      	strh	r2, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    46e6:	687b      	ldr	r3, [r7, #4]
    46e8:	2200      	movs	r2, #0
    46ea:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    46ec:	687b      	ldr	r3, [r7, #4]
    46ee:	2200      	movs	r2, #0
    46f0:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
    46f2:	687b      	ldr	r3, [r7, #4]
    46f4:	2201      	movs	r2, #1
    46f6:	705a      	strb	r2, [r3, #1]
	config->run_in_stanby   = false;
    46f8:	687b      	ldr	r3, [r7, #4]
    46fa:	2200      	movs	r2, #0
    46fc:	709a      	strb	r2, [r3, #2]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    46fe:	687b      	ldr	r3, [r7, #4]
    4700:	2207      	movs	r2, #7
    4702:	729a      	strb	r2, [r3, #10]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	223f      	movs	r2, #63	; 0x3f
    4708:	819a      	strh	r2, [r3, #12]
	config->coarse_max_step = 1;
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	2201      	movs	r2, #1
    470e:	739a      	strb	r2, [r3, #14]
	config->fine_max_step   = 1;
    4710:	687b      	ldr	r3, [r7, #4]
    4712:	2201      	movs	r2, #1
    4714:	821a      	strh	r2, [r3, #16]
	config->multiply_factor = 12; /* Multiply 4MHz by 12 to get 48MHz */
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	220c      	movs	r2, #12
    471a:	825a      	strh	r2, [r3, #18]
}
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46bd      	mov	sp, r7
    4720:	b002      	add	sp, #8
    4722:	bd80      	pop	{r7, pc}

00004724 <system_main_clock_set_failure_detect>:
{
    4724:	b580      	push	{r7, lr}
    4726:	b082      	sub	sp, #8
    4728:	af00      	add	r7, sp, #0
    472a:	0002      	movs	r2, r0
    472c:	1dfb      	adds	r3, r7, #7
    472e:	701a      	strb	r2, [r3, #0]
}
    4730:	46c0      	nop			; (mov r8, r8)
    4732:	46bd      	mov	sp, r7
    4734:	b002      	add	sp, #8
    4736:	bd80      	pop	{r7, pc}

00004738 <system_cpu_clock_set_divider>:
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	0002      	movs	r2, r0
    4740:	1dfb      	adds	r3, r7, #7
    4742:	701a      	strb	r2, [r3, #0]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    4744:	4a05      	ldr	r2, [pc, #20]	; (475c <system_cpu_clock_set_divider+0x24>)
    4746:	1dfb      	adds	r3, r7, #7
    4748:	781b      	ldrb	r3, [r3, #0]
    474a:	2101      	movs	r1, #1
    474c:	4099      	lsls	r1, r3
    474e:	000b      	movs	r3, r1
    4750:	b2db      	uxtb	r3, r3
    4752:	7113      	strb	r3, [r2, #4]
}
    4754:	46c0      	nop			; (mov r8, r8)
    4756:	46bd      	mov	sp, r7
    4758:	b002      	add	sp, #8
    475a:	bd80      	pop	{r7, pc}
    475c:	40000400 	.word	0x40000400

00004760 <system_low_power_clock_set_divider>:
{
    4760:	b580      	push	{r7, lr}
    4762:	b082      	sub	sp, #8
    4764:	af00      	add	r7, sp, #0
    4766:	0002      	movs	r2, r0
    4768:	1dfb      	adds	r3, r7, #7
    476a:	701a      	strb	r2, [r3, #0]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    476c:	4a05      	ldr	r2, [pc, #20]	; (4784 <system_low_power_clock_set_divider+0x24>)
    476e:	1dfb      	adds	r3, r7, #7
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	2101      	movs	r1, #1
    4774:	4099      	lsls	r1, r3
    4776:	000b      	movs	r3, r1
    4778:	b2db      	uxtb	r3, r3
    477a:	7153      	strb	r3, [r2, #5]
}
    477c:	46c0      	nop			; (mov r8, r8)
    477e:	46bd      	mov	sp, r7
    4780:	b002      	add	sp, #8
    4782:	bd80      	pop	{r7, pc}
    4784:	40000400 	.word	0x40000400

00004788 <system_backup_clock_set_divider>:
{
    4788:	b580      	push	{r7, lr}
    478a:	b082      	sub	sp, #8
    478c:	af00      	add	r7, sp, #0
    478e:	0002      	movs	r2, r0
    4790:	1dfb      	adds	r3, r7, #7
    4792:	701a      	strb	r2, [r3, #0]
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    4794:	4a05      	ldr	r2, [pc, #20]	; (47ac <system_backup_clock_set_divider+0x24>)
    4796:	1dfb      	adds	r3, r7, #7
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	2101      	movs	r1, #1
    479c:	4099      	lsls	r1, r3
    479e:	000b      	movs	r3, r1
    47a0:	b2db      	uxtb	r3, r3
    47a2:	7193      	strb	r3, [r2, #6]
}
    47a4:	46c0      	nop			; (mov r8, r8)
    47a6:	46bd      	mov	sp, r7
    47a8:	b002      	add	sp, #8
    47aa:	bd80      	pop	{r7, pc}
    47ac:	40000400 	.word	0x40000400

000047b0 <system_cpu_clock_get_hz>:
{
    47b0:	b580      	push	{r7, lr}
    47b2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    47b4:	2000      	movs	r0, #0
    47b6:	4b07      	ldr	r3, [pc, #28]	; (47d4 <system_cpu_clock_get_hz+0x24>)
    47b8:	4798      	blx	r3
    47ba:	0002      	movs	r2, r0
    47bc:	4b06      	ldr	r3, [pc, #24]	; (47d8 <system_cpu_clock_get_hz+0x28>)
    47be:	791b      	ldrb	r3, [r3, #4]
    47c0:	b2db      	uxtb	r3, r3
    47c2:	0019      	movs	r1, r3
    47c4:	4b05      	ldr	r3, [pc, #20]	; (47dc <system_cpu_clock_get_hz+0x2c>)
    47c6:	0010      	movs	r0, r2
    47c8:	4798      	blx	r3
    47ca:	0003      	movs	r3, r0
}
    47cc:	0018      	movs	r0, r3
    47ce:	46bd      	mov	sp, r7
    47d0:	bd80      	pop	{r7, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	000053ed 	.word	0x000053ed
    47d8:	40000400 	.word	0x40000400
    47dc:	00021069 	.word	0x00021069

000047e0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    47e0:	b580      	push	{r7, lr}
    47e2:	b082      	sub	sp, #8
    47e4:	af00      	add	r7, sp, #0
    47e6:	0002      	movs	r2, r0
    47e8:	1dfb      	adds	r3, r7, #7
    47ea:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    47ec:	4a08      	ldr	r2, [pc, #32]	; (4810 <system_flash_set_waitstates+0x30>)
    47ee:	1dfb      	adds	r3, r7, #7
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	210f      	movs	r1, #15
    47f4:	400b      	ands	r3, r1
    47f6:	b2d9      	uxtb	r1, r3
    47f8:	6853      	ldr	r3, [r2, #4]
    47fa:	200f      	movs	r0, #15
    47fc:	4001      	ands	r1, r0
    47fe:	0049      	lsls	r1, r1, #1
    4800:	201e      	movs	r0, #30
    4802:	4383      	bics	r3, r0
    4804:	430b      	orrs	r3, r1
    4806:	6053      	str	r3, [r2, #4]
}
    4808:	46c0      	nop			; (mov r8, r8)
    480a:	46bd      	mov	sp, r7
    480c:	b002      	add	sp, #8
    480e:	bd80      	pop	{r7, pc}
    4810:	41004000 	.word	0x41004000

00004814 <system_switch_performance_level>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid parameter
 * \retval STATUS_OK               Successfully
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{
    4814:	b580      	push	{r7, lr}
    4816:	b082      	sub	sp, #8
    4818:	af00      	add	r7, sp, #0
    481a:	0002      	movs	r2, r0
    481c:	1dfb      	adds	r3, r7, #7
    481e:	701a      	strb	r2, [r3, #0]

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    4820:	2380      	movs	r3, #128	; 0x80
    4822:	05db      	lsls	r3, r3, #23
    4824:	789b      	ldrb	r3, [r3, #2]
    4826:	b2db      	uxtb	r3, r3
    4828:	1dfa      	adds	r2, r7, #7
    482a:	7812      	ldrb	r2, [r2, #0]
    482c:	429a      	cmp	r2, r3
    482e:	d101      	bne.n	4834 <system_switch_performance_level+0x20>
		return STATUS_OK;
    4830:	2300      	movs	r3, #0
    4832:	e019      	b.n	4868 <system_switch_performance_level+0x54>
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    4834:	2380      	movs	r3, #128	; 0x80
    4836:	05db      	lsls	r3, r3, #23
    4838:	789b      	ldrb	r3, [r3, #2]
    483a:	b2db      	uxtb	r3, r3
    483c:	b25b      	sxtb	r3, r3
    483e:	2b00      	cmp	r3, #0
    4840:	da01      	bge.n	4846 <system_switch_performance_level+0x32>
		return STATUS_ERR_INVALID_ARG;
    4842:	2317      	movs	r3, #23
    4844:	e010      	b.n	4868 <system_switch_performance_level+0x54>
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    4846:	2380      	movs	r3, #128	; 0x80
    4848:	05db      	lsls	r3, r3, #23
    484a:	2201      	movs	r2, #1
    484c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    484e:	2380      	movs	r3, #128	; 0x80
    4850:	05db      	lsls	r3, r3, #23
    4852:	1dfa      	adds	r2, r7, #7
    4854:	7812      	ldrb	r2, [r2, #0]
    4856:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    4858:	46c0      	nop			; (mov r8, r8)
    485a:	2380      	movs	r3, #128	; 0x80
    485c:	05db      	lsls	r3, r3, #23
    485e:	799b      	ldrb	r3, [r3, #6]
    4860:	b2db      	uxtb	r3, r3
    4862:	2b00      	cmp	r3, #0
    4864:	d0f9      	beq.n	485a <system_switch_performance_level+0x46>
		;
	}
	return STATUS_OK;
    4866:	2300      	movs	r3, #0
}
    4868:	0018      	movs	r0, r3
    486a:	46bd      	mov	sp, r7
    486c:	b002      	add	sp, #8
    486e:	bd80      	pop	{r7, pc}

00004870 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    4870:	b580      	push	{r7, lr}
    4872:	af00      	add	r7, sp, #0
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    4874:	46c0      	nop			; (mov r8, r8)
    4876:	4b04      	ldr	r3, [pc, #16]	; (4888 <_system_dfll_wait_for_sync+0x18>)
    4878:	68da      	ldr	r2, [r3, #12]
    487a:	2380      	movs	r3, #128	; 0x80
    487c:	005b      	lsls	r3, r3, #1
    487e:	4013      	ands	r3, r2
    4880:	d0f9      	beq.n	4876 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    4882:	46c0      	nop			; (mov r8, r8)
    4884:	46bd      	mov	sp, r7
    4886:	bd80      	pop	{r7, pc}
    4888:	40000c00 	.word	0x40000c00

0000488c <_system_clock_source_osc16m_freq_sel>:
 *  Frequency selection can be done only when OSC16M is disabled,thus,
 *  OSCULP32K is temporarily used as a new clocksource for mainclock .
 *
 */
static inline void _system_clock_source_osc16m_freq_sel(void)
{
    488c:	b580      	push	{r7, lr}
    488e:	b084      	sub	sp, #16
    4890:	af00      	add	r7, sp, #0
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    4892:	1d3b      	adds	r3, r7, #4
    4894:	0018      	movs	r0, r3
    4896:	4b1e      	ldr	r3, [pc, #120]	; (4910 <_system_clock_source_osc16m_freq_sel+0x84>)
    4898:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    489a:	1d3b      	adds	r3, r7, #4
    489c:	2203      	movs	r2, #3
    489e:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    48a0:	1d3b      	adds	r3, r7, #4
    48a2:	0019      	movs	r1, r3
    48a4:	2000      	movs	r0, #0
    48a6:	4b1b      	ldr	r3, [pc, #108]	; (4914 <_system_clock_source_osc16m_freq_sel+0x88>)
    48a8:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    48aa:	2006      	movs	r0, #6
    48ac:	4b1a      	ldr	r3, [pc, #104]	; (4918 <_system_clock_source_osc16m_freq_sel+0x8c>)
    48ae:	4798      	blx	r3

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
    48b0:	003b      	movs	r3, r7
    48b2:	0018      	movs	r0, r3
    48b4:	4b19      	ldr	r3, [pc, #100]	; (491c <_system_clock_source_osc16m_freq_sel+0x90>)
    48b6:	4798      	blx	r3
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    48b8:	003b      	movs	r3, r7
    48ba:	2201      	movs	r2, #1
    48bc:	701a      	strb	r2, [r3, #0]
	osc16m_conf.on_demand       = 0;
    48be:	003b      	movs	r3, r7
    48c0:	2200      	movs	r2, #0
    48c2:	709a      	strb	r2, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    48c4:	003b      	movs	r3, r7
    48c6:	2200      	movs	r2, #0
    48c8:	705a      	strb	r2, [r3, #1]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    48ca:	003b      	movs	r3, r7
    48cc:	0018      	movs	r0, r3
    48ce:	4b14      	ldr	r3, [pc, #80]	; (4920 <_system_clock_source_osc16m_freq_sel+0x94>)
    48d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    48d2:	2006      	movs	r0, #6
    48d4:	4b13      	ldr	r3, [pc, #76]	; (4924 <_system_clock_source_osc16m_freq_sel+0x98>)
    48d6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    48d8:	46c0      	nop			; (mov r8, r8)
    48da:	2006      	movs	r0, #6
    48dc:	4b12      	ldr	r3, [pc, #72]	; (4928 <_system_clock_source_osc16m_freq_sel+0x9c>)
    48de:	4798      	blx	r3
    48e0:	0003      	movs	r3, r0
    48e2:	001a      	movs	r2, r3
    48e4:	2301      	movs	r3, #1
    48e6:	4053      	eors	r3, r2
    48e8:	b2db      	uxtb	r3, r3
    48ea:	2b00      	cmp	r3, #0
    48ec:	d1f5      	bne.n	48da <_system_clock_source_osc16m_freq_sel+0x4e>

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
    48ee:	1d3b      	adds	r3, r7, #4
    48f0:	0018      	movs	r0, r3
    48f2:	4b07      	ldr	r3, [pc, #28]	; (4910 <_system_clock_source_osc16m_freq_sel+0x84>)
    48f4:	4798      	blx	r3
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
    48f6:	1d3b      	adds	r3, r7, #4
    48f8:	2206      	movs	r2, #6
    48fa:	701a      	strb	r2, [r3, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    48fc:	1d3b      	adds	r3, r7, #4
    48fe:	0019      	movs	r1, r3
    4900:	2000      	movs	r0, #0
    4902:	4b04      	ldr	r3, [pc, #16]	; (4914 <_system_clock_source_osc16m_freq_sel+0x88>)
    4904:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
	}
}
    4906:	46c0      	nop			; (mov r8, r8)
    4908:	46bd      	mov	sp, r7
    490a:	b004      	add	sp, #16
    490c:	bd80      	pop	{r7, pc}
    490e:	46c0      	nop			; (mov r8, r8)
    4910:	00004625 	.word	0x00004625
    4914:	00005281 	.word	0x00005281
    4918:	00004d45 	.word	0x00004d45
    491c:	000046ab 	.word	0x000046ab
    4920:	00004a31 	.word	0x00004a31
    4924:	00004c85 	.word	0x00004c85
    4928:	00004df1 	.word	0x00004df1

0000492c <_system_clock_source_dfll_set_config_errata_9905>:

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    492c:	b580      	push	{r7, lr}
    492e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    4930:	4b0c      	ldr	r3, [pc, #48]	; (4964 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4932:	2202      	movs	r2, #2
    4934:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    4936:	4b0c      	ldr	r3, [pc, #48]	; (4968 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4938:	4798      	blx	r3

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    493a:	4a0a      	ldr	r2, [pc, #40]	; (4964 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    493c:	4b0b      	ldr	r3, [pc, #44]	; (496c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    493e:	689b      	ldr	r3, [r3, #8]
    4940:	6213      	str	r3, [r2, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4942:	4a08      	ldr	r2, [pc, #32]	; (4964 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4944:	4b09      	ldr	r3, [pc, #36]	; (496c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4946:	685b      	ldr	r3, [r3, #4]
    4948:	61d3      	str	r3, [r2, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    494a:	4b06      	ldr	r3, [pc, #24]	; (4964 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    494c:	2200      	movs	r2, #0
    494e:	831a      	strh	r2, [r3, #24]
	_system_dfll_wait_for_sync();
    4950:	4b05      	ldr	r3, [pc, #20]	; (4968 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    4952:	4798      	blx	r3
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4954:	4a03      	ldr	r2, [pc, #12]	; (4964 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    4956:	4b05      	ldr	r3, [pc, #20]	; (496c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    4958:	681b      	ldr	r3, [r3, #0]
    495a:	b29b      	uxth	r3, r3
    495c:	8313      	strh	r3, [r2, #24]
}
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	46bd      	mov	sp, r7
    4962:	bd80      	pop	{r7, pc}
    4964:	40000c00 	.word	0x40000c00
    4968:	00004871 	.word	0x00004871
    496c:	20000be0 	.word	0x20000be0

00004970 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	0002      	movs	r2, r0
    4978:	1dfb      	adds	r3, r7, #7
    497a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    497c:	1dfb      	adds	r3, r7, #7
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	2b08      	cmp	r3, #8
    4982:	d841      	bhi.n	4a08 <system_clock_source_get_hz+0x98>
    4984:	009a      	lsls	r2, r3, #2
    4986:	4b23      	ldr	r3, [pc, #140]	; (4a14 <system_clock_source_get_hz+0xa4>)
    4988:	18d3      	adds	r3, r2, r3
    498a:	681b      	ldr	r3, [r3, #0]
    498c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    498e:	4b22      	ldr	r3, [pc, #136]	; (4a18 <system_clock_source_get_hz+0xa8>)
    4990:	691b      	ldr	r3, [r3, #16]
    4992:	e03a      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    4994:	4b21      	ldr	r3, [pc, #132]	; (4a1c <system_clock_source_get_hz+0xac>)
    4996:	7d1b      	ldrb	r3, [r3, #20]
    4998:	071b      	lsls	r3, r3, #28
    499a:	0f9b      	lsrs	r3, r3, #30
    499c:	b2db      	uxtb	r3, r3
    499e:	3301      	adds	r3, #1
    49a0:	001a      	movs	r2, r3
    49a2:	4b1f      	ldr	r3, [pc, #124]	; (4a20 <system_clock_source_get_hz+0xb0>)
    49a4:	4353      	muls	r3, r2
    49a6:	e030      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    49a8:	2380      	movs	r3, #128	; 0x80
    49aa:	021b      	lsls	r3, r3, #8
    49ac:	e02d      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    49ae:	2380      	movs	r3, #128	; 0x80
    49b0:	021b      	lsls	r3, r3, #8
    49b2:	e02a      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    49b4:	4b18      	ldr	r3, [pc, #96]	; (4a18 <system_clock_source_get_hz+0xa8>)
    49b6:	695b      	ldr	r3, [r3, #20]
    49b8:	e027      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    49ba:	4b17      	ldr	r3, [pc, #92]	; (4a18 <system_clock_source_get_hz+0xa8>)
    49bc:	681b      	ldr	r3, [r3, #0]
    49be:	2202      	movs	r2, #2
    49c0:	4013      	ands	r3, r2
    49c2:	d101      	bne.n	49c8 <system_clock_source_get_hz+0x58>
			return 0;
    49c4:	2300      	movs	r3, #0
    49c6:	e020      	b.n	4a0a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    49c8:	4b16      	ldr	r3, [pc, #88]	; (4a24 <system_clock_source_get_hz+0xb4>)
    49ca:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    49cc:	4b12      	ldr	r3, [pc, #72]	; (4a18 <system_clock_source_get_hz+0xa8>)
    49ce:	681b      	ldr	r3, [r3, #0]
    49d0:	2204      	movs	r2, #4
    49d2:	4013      	ands	r3, r2
    49d4:	d009      	beq.n	49ea <system_clock_source_get_hz+0x7a>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    49d6:	2000      	movs	r0, #0
    49d8:	4b13      	ldr	r3, [pc, #76]	; (4a28 <system_clock_source_get_hz+0xb8>)
    49da:	4798      	blx	r3
    49dc:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    49de:	4b0e      	ldr	r3, [pc, #56]	; (4a18 <system_clock_source_get_hz+0xa8>)
    49e0:	689b      	ldr	r3, [r3, #8]
    49e2:	041b      	lsls	r3, r3, #16
    49e4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    49e6:	4353      	muls	r3, r2
    49e8:	e00f      	b.n	4a0a <system_clock_source_get_hz+0x9a>
		}

		return 48000000UL;
    49ea:	4b10      	ldr	r3, [pc, #64]	; (4a2c <system_clock_source_get_hz+0xbc>)
    49ec:	e00d      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    49ee:	4a0b      	ldr	r2, [pc, #44]	; (4a1c <system_clock_source_get_hz+0xac>)
    49f0:	2328      	movs	r3, #40	; 0x28
    49f2:	5cd3      	ldrb	r3, [r2, r3]
    49f4:	b2db      	uxtb	r3, r3
    49f6:	001a      	movs	r2, r3
    49f8:	2302      	movs	r3, #2
    49fa:	4013      	ands	r3, r2
    49fc:	d101      	bne.n	4a02 <system_clock_source_get_hz+0x92>
			return 0;
    49fe:	2300      	movs	r3, #0
    4a00:	e003      	b.n	4a0a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    4a02:	4b05      	ldr	r3, [pc, #20]	; (4a18 <system_clock_source_get_hz+0xa8>)
    4a04:	68db      	ldr	r3, [r3, #12]
    4a06:	e000      	b.n	4a0a <system_clock_source_get_hz+0x9a>

	default:
		return 0;
    4a08:	2300      	movs	r3, #0
	}
}
    4a0a:	0018      	movs	r0, r3
    4a0c:	46bd      	mov	sp, r7
    4a0e:	b002      	add	sp, #8
    4a10:	bd80      	pop	{r7, pc}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	0002ac1c 	.word	0x0002ac1c
    4a18:	20000be0 	.word	0x20000be0
    4a1c:	40000c00 	.word	0x40000c00
    4a20:	003d0900 	.word	0x003d0900
    4a24:	00004871 	.word	0x00004871
    4a28:	0000559d 	.word	0x0000559d
    4a2c:	02dc6c00 	.word	0x02dc6c00

00004a30 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b084      	sub	sp, #16
    4a34:	af00      	add	r7, sp, #0
    4a36:	6078      	str	r0, [r7, #4]
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    4a38:	4a1c      	ldr	r2, [pc, #112]	; (4aac <system_clock_source_osc16m_set_config+0x7c>)
    4a3a:	230c      	movs	r3, #12
    4a3c:	18fb      	adds	r3, r7, r3
    4a3e:	7d12      	ldrb	r2, [r2, #20]
    4a40:	701a      	strb	r2, [r3, #0]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
    4a42:	687b      	ldr	r3, [r7, #4]
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	1c1a      	adds	r2, r3, #0
    4a48:	2303      	movs	r3, #3
    4a4a:	4013      	ands	r3, r2
    4a4c:	b2da      	uxtb	r2, r3
    4a4e:	230c      	movs	r3, #12
    4a50:	18fb      	adds	r3, r7, r3
    4a52:	2103      	movs	r1, #3
    4a54:	400a      	ands	r2, r1
    4a56:	0090      	lsls	r0, r2, #2
    4a58:	781a      	ldrb	r2, [r3, #0]
    4a5a:	210c      	movs	r1, #12
    4a5c:	438a      	bics	r2, r1
    4a5e:	1c11      	adds	r1, r2, #0
    4a60:	1c02      	adds	r2, r0, #0
    4a62:	430a      	orrs	r2, r1
    4a64:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4a66:	687b      	ldr	r3, [r7, #4]
    4a68:	789a      	ldrb	r2, [r3, #2]
    4a6a:	230c      	movs	r3, #12
    4a6c:	18fb      	adds	r3, r7, r3
    4a6e:	01d0      	lsls	r0, r2, #7
    4a70:	781a      	ldrb	r2, [r3, #0]
    4a72:	217f      	movs	r1, #127	; 0x7f
    4a74:	400a      	ands	r2, r1
    4a76:	1c11      	adds	r1, r2, #0
    4a78:	1c02      	adds	r2, r0, #0
    4a7a:	430a      	orrs	r2, r1
    4a7c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4a7e:	687b      	ldr	r3, [r7, #4]
    4a80:	785a      	ldrb	r2, [r3, #1]
    4a82:	230c      	movs	r3, #12
    4a84:	18fb      	adds	r3, r7, r3
    4a86:	2101      	movs	r1, #1
    4a88:	400a      	ands	r2, r1
    4a8a:	0190      	lsls	r0, r2, #6
    4a8c:	781a      	ldrb	r2, [r3, #0]
    4a8e:	2140      	movs	r1, #64	; 0x40
    4a90:	438a      	bics	r2, r1
    4a92:	1c11      	adds	r1, r2, #0
    4a94:	1c02      	adds	r2, r0, #0
    4a96:	430a      	orrs	r2, r1
    4a98:	701a      	strb	r2, [r3, #0]

	OSCCTRL->OSC16MCTRL = temp;
    4a9a:	4a04      	ldr	r2, [pc, #16]	; (4aac <system_clock_source_osc16m_set_config+0x7c>)
    4a9c:	230c      	movs	r3, #12
    4a9e:	18fb      	adds	r3, r7, r3
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	7513      	strb	r3, [r2, #20]
}
    4aa4:	46c0      	nop			; (mov r8, r8)
    4aa6:	46bd      	mov	sp, r7
    4aa8:	b004      	add	sp, #16
    4aaa:	bd80      	pop	{r7, pc}
    4aac:	40000c00 	.word	0x40000c00

00004ab0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4ab0:	b580      	push	{r7, lr}
    4ab2:	b084      	sub	sp, #16
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    4ab8:	4b3a      	ldr	r3, [pc, #232]	; (4ba4 <system_clock_source_xosc32k_set_config+0xf4>)
    4aba:	695b      	ldr	r3, [r3, #20]
    4abc:	60fb      	str	r3, [r7, #12]

	temp.bit.STARTUP = config->startup_time;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	785b      	ldrb	r3, [r3, #1]
    4ac2:	1c1a      	adds	r2, r3, #0
    4ac4:	2307      	movs	r3, #7
    4ac6:	4013      	ands	r3, r2
    4ac8:	b2da      	uxtb	r2, r3
    4aca:	230d      	movs	r3, #13
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	2107      	movs	r1, #7
    4ad0:	400a      	ands	r2, r1
    4ad2:	0010      	movs	r0, r2
    4ad4:	781a      	ldrb	r2, [r3, #0]
    4ad6:	2107      	movs	r1, #7
    4ad8:	438a      	bics	r2, r1
    4ada:	1c11      	adds	r1, r2, #0
    4adc:	1c02      	adds	r2, r0, #0
    4ade:	430a      	orrs	r2, r1
    4ae0:	701a      	strb	r2, [r3, #0]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d106      	bne.n	4af8 <system_clock_source_xosc32k_set_config+0x48>
		temp.bit.XTALEN = 1;
    4aea:	230c      	movs	r3, #12
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	781a      	ldrb	r2, [r3, #0]
    4af0:	2104      	movs	r1, #4
    4af2:	430a      	orrs	r2, r1
    4af4:	701a      	strb	r2, [r3, #0]
    4af6:	e005      	b.n	4b04 <system_clock_source_xosc32k_set_config+0x54>
	} else {
		temp.bit.XTALEN = 0;
    4af8:	230c      	movs	r3, #12
    4afa:	18fb      	adds	r3, r7, r3
    4afc:	781a      	ldrb	r2, [r3, #0]
    4afe:	2104      	movs	r1, #4
    4b00:	438a      	bics	r2, r1
    4b02:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.EN1K = config->enable_1khz_output;
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	789a      	ldrb	r2, [r3, #2]
    4b08:	230c      	movs	r3, #12
    4b0a:	18fb      	adds	r3, r7, r3
    4b0c:	2101      	movs	r1, #1
    4b0e:	400a      	ands	r2, r1
    4b10:	0110      	lsls	r0, r2, #4
    4b12:	781a      	ldrb	r2, [r3, #0]
    4b14:	2110      	movs	r1, #16
    4b16:	438a      	bics	r2, r1
    4b18:	1c11      	adds	r1, r2, #0
    4b1a:	1c02      	adds	r2, r0, #0
    4b1c:	430a      	orrs	r2, r1
    4b1e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	78da      	ldrb	r2, [r3, #3]
    4b24:	230c      	movs	r3, #12
    4b26:	18fb      	adds	r3, r7, r3
    4b28:	2101      	movs	r1, #1
    4b2a:	400a      	ands	r2, r1
    4b2c:	00d0      	lsls	r0, r2, #3
    4b2e:	781a      	ldrb	r2, [r3, #0]
    4b30:	2108      	movs	r1, #8
    4b32:	438a      	bics	r2, r1
    4b34:	1c11      	adds	r1, r2, #0
    4b36:	1c02      	adds	r2, r0, #0
    4b38:	430a      	orrs	r2, r1
    4b3a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	7a5a      	ldrb	r2, [r3, #9]
    4b40:	230c      	movs	r3, #12
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	01d0      	lsls	r0, r2, #7
    4b46:	781a      	ldrb	r2, [r3, #0]
    4b48:	217f      	movs	r1, #127	; 0x7f
    4b4a:	400a      	ands	r2, r1
    4b4c:	1c11      	adds	r1, r2, #0
    4b4e:	1c02      	adds	r2, r0, #0
    4b50:	430a      	orrs	r2, r1
    4b52:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4b54:	687b      	ldr	r3, [r7, #4]
    4b56:	7a1a      	ldrb	r2, [r3, #8]
    4b58:	230c      	movs	r3, #12
    4b5a:	18fb      	adds	r3, r7, r3
    4b5c:	2101      	movs	r1, #1
    4b5e:	400a      	ands	r2, r1
    4b60:	0190      	lsls	r0, r2, #6
    4b62:	781a      	ldrb	r2, [r3, #0]
    4b64:	2140      	movs	r1, #64	; 0x40
    4b66:	438a      	bics	r2, r1
    4b68:	1c11      	adds	r1, r2, #0
    4b6a:	1c02      	adds	r2, r0, #0
    4b6c:	430a      	orrs	r2, r1
    4b6e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	7a9a      	ldrb	r2, [r3, #10]
    4b74:	230d      	movs	r3, #13
    4b76:	18fb      	adds	r3, r7, r3
    4b78:	2101      	movs	r1, #1
    4b7a:	400a      	ands	r2, r1
    4b7c:	0110      	lsls	r0, r2, #4
    4b7e:	781a      	ldrb	r2, [r3, #0]
    4b80:	2110      	movs	r1, #16
    4b82:	438a      	bics	r2, r1
    4b84:	1c11      	adds	r1, r2, #0
    4b86:	1c02      	adds	r2, r0, #0
    4b88:	430a      	orrs	r2, r1
    4b8a:	701a      	strb	r2, [r3, #0]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4b8c:	687b      	ldr	r3, [r7, #4]
    4b8e:	685a      	ldr	r2, [r3, #4]
    4b90:	4b05      	ldr	r3, [pc, #20]	; (4ba8 <system_clock_source_xosc32k_set_config+0xf8>)
    4b92:	615a      	str	r2, [r3, #20]

	OSC32KCTRL->XOSC32K = temp;
    4b94:	4b03      	ldr	r3, [pc, #12]	; (4ba4 <system_clock_source_xosc32k_set_config+0xf4>)
    4b96:	68fa      	ldr	r2, [r7, #12]
    4b98:	615a      	str	r2, [r3, #20]
}
    4b9a:	46c0      	nop			; (mov r8, r8)
    4b9c:	46bd      	mov	sp, r7
    4b9e:	b004      	add	sp, #16
    4ba0:	bd80      	pop	{r7, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	40001000 	.word	0x40001000
    4ba8:	20000be0 	.word	0x20000be0

00004bac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	b082      	sub	sp, #8
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	7a9b      	ldrb	r3, [r3, #10]
    4bb8:	029b      	lsls	r3, r3, #10
    4bba:	041b      	lsls	r3, r3, #16
    4bbc:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	899b      	ldrh	r3, [r3, #12]
    4bc2:	059b      	lsls	r3, r3, #22
    4bc4:	0d9b      	lsrs	r3, r3, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4bc6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    4bc8:	4b2c      	ldr	r3, [pc, #176]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4bca:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	7a1a      	ldrb	r2, [r3, #8]
			(uint32_t)config->stable_tracking |
    4bd0:	687b      	ldr	r3, [r7, #4]
    4bd2:	7a5b      	ldrb	r3, [r3, #9]
			(uint32_t)config->wakeup_lock     |
    4bd4:	4313      	orrs	r3, r2
    4bd6:	b2db      	uxtb	r3, r3
    4bd8:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	889b      	ldrh	r3, [r3, #4]
			(uint32_t)config->stable_tracking |
    4bde:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    4be0:	687a      	ldr	r2, [r7, #4]
    4be2:	88d2      	ldrh	r2, [r2, #6]
			(uint32_t)config->quick_lock      |
    4be4:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    4be6:	687b      	ldr	r3, [r7, #4]
    4be8:	785b      	ldrb	r3, [r3, #1]
    4bea:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    4bec:	431a      	orrs	r2, r3
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    4bee:	687b      	ldr	r3, [r7, #4]
    4bf0:	789b      	ldrb	r3, [r3, #2]
    4bf2:	019b      	lsls	r3, r3, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    4bf4:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    4bf6:	4b21      	ldr	r3, [pc, #132]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4bf8:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4bfa:	687b      	ldr	r3, [r7, #4]
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	2b04      	cmp	r3, #4
    4c00:	d116      	bne.n	4c30 <system_clock_source_dfll_set_config+0x84>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	7b9b      	ldrb	r3, [r3, #14]
    4c06:	069b      	lsls	r3, r3, #26
    4c08:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	8a1b      	ldrh	r3, [r3, #16]
    4c0e:	041b      	lsls	r3, r3, #16
    4c10:	0019      	movs	r1, r3
    4c12:	4b1b      	ldr	r3, [pc, #108]	; (4c80 <system_clock_source_dfll_set_config+0xd4>)
    4c14:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c16:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    4c18:	687a      	ldr	r2, [r7, #4]
    4c1a:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c1c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    4c1e:	4b17      	ldr	r3, [pc, #92]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c20:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4c22:	4b16      	ldr	r3, [pc, #88]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	687a      	ldr	r2, [r7, #4]
    4c28:	7812      	ldrb	r2, [r2, #0]
    4c2a:	431a      	orrs	r2, r3
    4c2c:	4b13      	ldr	r3, [pc, #76]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c2e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	781b      	ldrb	r3, [r3, #0]
    4c34:	2b20      	cmp	r3, #32
    4c36:	d11c      	bne.n	4c72 <system_clock_source_dfll_set_config+0xc6>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c38:	687b      	ldr	r3, [r7, #4]
    4c3a:	7b9b      	ldrb	r3, [r3, #14]
    4c3c:	069b      	lsls	r3, r3, #26
    4c3e:	001a      	movs	r2, r3
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	8a1b      	ldrh	r3, [r3, #16]
    4c44:	041b      	lsls	r3, r3, #16
    4c46:	0019      	movs	r1, r3
    4c48:	4b0d      	ldr	r3, [pc, #52]	; (4c80 <system_clock_source_dfll_set_config+0xd4>)
    4c4a:	400b      	ands	r3, r1
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4c4c:	4313      	orrs	r3, r2
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    4c4e:	687a      	ldr	r2, [r7, #4]
    4c50:	8a52      	ldrh	r2, [r2, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4c52:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    4c54:	4b09      	ldr	r3, [pc, #36]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c56:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4c58:	4b08      	ldr	r3, [pc, #32]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c5a:	681b      	ldr	r3, [r3, #0]
    4c5c:	687a      	ldr	r2, [r7, #4]
    4c5e:	7812      	ldrb	r2, [r2, #0]
    4c60:	2104      	movs	r1, #4
    4c62:	430a      	orrs	r2, r1
    4c64:	b2d2      	uxtb	r2, r2
    4c66:	4313      	orrs	r3, r2
    4c68:	2280      	movs	r2, #128	; 0x80
    4c6a:	00d2      	lsls	r2, r2, #3
    4c6c:	431a      	orrs	r2, r3
    4c6e:	4b03      	ldr	r3, [pc, #12]	; (4c7c <system_clock_source_dfll_set_config+0xd0>)
    4c70:	601a      	str	r2, [r3, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	46bd      	mov	sp, r7
    4c76:	b002      	add	sp, #8
    4c78:	bd80      	pop	{r7, pc}
    4c7a:	46c0      	nop			; (mov r8, r8)
    4c7c:	20000be0 	.word	0x20000be0
    4c80:	03ff0000 	.word	0x03ff0000

00004c84 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    4c84:	b580      	push	{r7, lr}
    4c86:	b082      	sub	sp, #8
    4c88:	af00      	add	r7, sp, #0
    4c8a:	0002      	movs	r2, r0
    4c8c:	1dfb      	adds	r3, r7, #7
    4c8e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4c90:	1dfb      	adds	r3, r7, #7
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	2b08      	cmp	r3, #8
    4c96:	d844      	bhi.n	4d22 <system_clock_source_enable+0x9e>
    4c98:	009a      	lsls	r2, r3, #2
    4c9a:	4b25      	ldr	r3, [pc, #148]	; (4d30 <system_clock_source_enable+0xac>)
    4c9c:	18d3      	adds	r3, r2, r3
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    4ca2:	4a24      	ldr	r2, [pc, #144]	; (4d34 <system_clock_source_enable+0xb0>)
    4ca4:	4b23      	ldr	r3, [pc, #140]	; (4d34 <system_clock_source_enable+0xb0>)
    4ca6:	7d1b      	ldrb	r3, [r3, #20]
    4ca8:	b2db      	uxtb	r3, r3
    4caa:	2102      	movs	r1, #2
    4cac:	430b      	orrs	r3, r1
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    4cb2:	2300      	movs	r3, #0
    4cb4:	e038      	b.n	4d28 <system_clock_source_enable+0xa4>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    4cb6:	4b20      	ldr	r3, [pc, #128]	; (4d38 <system_clock_source_enable+0xb4>)
    4cb8:	4a1f      	ldr	r2, [pc, #124]	; (4d38 <system_clock_source_enable+0xb4>)
    4cba:	6992      	ldr	r2, [r2, #24]
    4cbc:	2102      	movs	r1, #2
    4cbe:	430a      	orrs	r2, r1
    4cc0:	619a      	str	r2, [r3, #24]
		break;
    4cc2:	e030      	b.n	4d26 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    4cc4:	4a1b      	ldr	r2, [pc, #108]	; (4d34 <system_clock_source_enable+0xb0>)
    4cc6:	4b1b      	ldr	r3, [pc, #108]	; (4d34 <system_clock_source_enable+0xb0>)
    4cc8:	8a1b      	ldrh	r3, [r3, #16]
    4cca:	b29b      	uxth	r3, r3
    4ccc:	2102      	movs	r1, #2
    4cce:	430b      	orrs	r3, r1
    4cd0:	b29b      	uxth	r3, r3
    4cd2:	8213      	strh	r3, [r2, #16]
		break;
    4cd4:	e027      	b.n	4d26 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    4cd6:	4b18      	ldr	r3, [pc, #96]	; (4d38 <system_clock_source_enable+0xb4>)
    4cd8:	4a17      	ldr	r2, [pc, #92]	; (4d38 <system_clock_source_enable+0xb4>)
    4cda:	6952      	ldr	r2, [r2, #20]
    4cdc:	2102      	movs	r1, #2
    4cde:	430a      	orrs	r2, r1
    4ce0:	615a      	str	r2, [r3, #20]
		break;
    4ce2:	e020      	b.n	4d26 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    4ce4:	4b15      	ldr	r3, [pc, #84]	; (4d3c <system_clock_source_enable+0xb8>)
    4ce6:	681b      	ldr	r3, [r3, #0]
    4ce8:	2202      	movs	r2, #2
    4cea:	431a      	orrs	r2, r3
    4cec:	4b13      	ldr	r3, [pc, #76]	; (4d3c <system_clock_source_enable+0xb8>)
    4cee:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    4cf0:	4b13      	ldr	r3, [pc, #76]	; (4d40 <system_clock_source_enable+0xbc>)
    4cf2:	4798      	blx	r3
		break;
    4cf4:	e017      	b.n	4d26 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    4cf6:	4a0f      	ldr	r2, [pc, #60]	; (4d34 <system_clock_source_enable+0xb0>)
    4cf8:	490e      	ldr	r1, [pc, #56]	; (4d34 <system_clock_source_enable+0xb0>)
    4cfa:	2328      	movs	r3, #40	; 0x28
    4cfc:	5ccb      	ldrb	r3, [r1, r3]
    4cfe:	b2db      	uxtb	r3, r3
    4d00:	2102      	movs	r1, #2
    4d02:	430b      	orrs	r3, r1
    4d04:	b2d9      	uxtb	r1, r3
    4d06:	2328      	movs	r3, #40	; 0x28
    4d08:	54d1      	strb	r1, [r2, r3]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	4a09      	ldr	r2, [pc, #36]	; (4d34 <system_clock_source_enable+0xb0>)
    4d0e:	2338      	movs	r3, #56	; 0x38
    4d10:	5cd3      	ldrb	r3, [r2, r3]
    4d12:	b2db      	uxtb	r3, r3
    4d14:	001a      	movs	r2, r3
    4d16:	2302      	movs	r3, #2
    4d18:	4013      	ands	r3, r2
    4d1a:	d1f7      	bne.n	4d0c <system_clock_source_enable+0x88>
		}
		break;
    4d1c:	e003      	b.n	4d26 <system_clock_source_enable+0xa2>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4d1e:	2300      	movs	r3, #0
    4d20:	e002      	b.n	4d28 <system_clock_source_enable+0xa4>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d22:	2317      	movs	r3, #23
    4d24:	e000      	b.n	4d28 <system_clock_source_enable+0xa4>
	}

	return STATUS_OK;
    4d26:	2300      	movs	r3, #0
}
    4d28:	0018      	movs	r0, r3
    4d2a:	46bd      	mov	sp, r7
    4d2c:	b002      	add	sp, #8
    4d2e:	bd80      	pop	{r7, pc}
    4d30:	0002ac40 	.word	0x0002ac40
    4d34:	40000c00 	.word	0x40000c00
    4d38:	40001000 	.word	0x40001000
    4d3c:	20000be0 	.word	0x20000be0
    4d40:	0000492d 	.word	0x0000492d

00004d44 <system_clock_source_disable>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid or unavailable clock source was
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b082      	sub	sp, #8
    4d48:	af00      	add	r7, sp, #0
    4d4a:	0002      	movs	r2, r0
    4d4c:	1dfb      	adds	r3, r7, #7
    4d4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    4d50:	1dfb      	adds	r3, r7, #7
    4d52:	781b      	ldrb	r3, [r3, #0]
    4d54:	2b08      	cmp	r3, #8
    4d56:	d83c      	bhi.n	4dd2 <system_clock_source_disable+0x8e>
    4d58:	009a      	lsls	r2, r3, #2
    4d5a:	4b21      	ldr	r3, [pc, #132]	; (4de0 <system_clock_source_disable+0x9c>)
    4d5c:	18d3      	adds	r3, r2, r3
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    4d62:	4a20      	ldr	r2, [pc, #128]	; (4de4 <system_clock_source_disable+0xa0>)
    4d64:	4b1f      	ldr	r3, [pc, #124]	; (4de4 <system_clock_source_disable+0xa0>)
    4d66:	7d1b      	ldrb	r3, [r3, #20]
    4d68:	b2db      	uxtb	r3, r3
    4d6a:	2102      	movs	r1, #2
    4d6c:	438b      	bics	r3, r1
    4d6e:	b2db      	uxtb	r3, r3
    4d70:	7513      	strb	r3, [r2, #20]
		break;
    4d72:	e030      	b.n	4dd6 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    4d74:	4b1c      	ldr	r3, [pc, #112]	; (4de8 <system_clock_source_disable+0xa4>)
    4d76:	4a1c      	ldr	r2, [pc, #112]	; (4de8 <system_clock_source_disable+0xa4>)
    4d78:	6992      	ldr	r2, [r2, #24]
    4d7a:	2102      	movs	r1, #2
    4d7c:	438a      	bics	r2, r1
    4d7e:	619a      	str	r2, [r3, #24]
		break;
    4d80:	e029      	b.n	4dd6 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    4d82:	4a18      	ldr	r2, [pc, #96]	; (4de4 <system_clock_source_disable+0xa0>)
    4d84:	4b17      	ldr	r3, [pc, #92]	; (4de4 <system_clock_source_disable+0xa0>)
    4d86:	8a1b      	ldrh	r3, [r3, #16]
    4d88:	b29b      	uxth	r3, r3
    4d8a:	2102      	movs	r1, #2
    4d8c:	438b      	bics	r3, r1
    4d8e:	b29b      	uxth	r3, r3
    4d90:	8213      	strh	r3, [r2, #16]
		break;
    4d92:	e020      	b.n	4dd6 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    4d94:	4b14      	ldr	r3, [pc, #80]	; (4de8 <system_clock_source_disable+0xa4>)
    4d96:	4a14      	ldr	r2, [pc, #80]	; (4de8 <system_clock_source_disable+0xa4>)
    4d98:	6952      	ldr	r2, [r2, #20]
    4d9a:	2102      	movs	r1, #2
    4d9c:	438a      	bics	r2, r1
    4d9e:	615a      	str	r2, [r3, #20]
		break;
    4da0:	e019      	b.n	4dd6 <system_clock_source_disable+0x92>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    4da2:	4b12      	ldr	r3, [pc, #72]	; (4dec <system_clock_source_disable+0xa8>)
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	2202      	movs	r2, #2
    4da8:	4393      	bics	r3, r2
    4daa:	001a      	movs	r2, r3
    4dac:	4b0f      	ldr	r3, [pc, #60]	; (4dec <system_clock_source_disable+0xa8>)
    4dae:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4db0:	4a0c      	ldr	r2, [pc, #48]	; (4de4 <system_clock_source_disable+0xa0>)
    4db2:	4b0e      	ldr	r3, [pc, #56]	; (4dec <system_clock_source_disable+0xa8>)
    4db4:	681b      	ldr	r3, [r3, #0]
    4db6:	b29b      	uxth	r3, r3
    4db8:	8313      	strh	r3, [r2, #24]
		break;
    4dba:	e00c      	b.n	4dd6 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    4dbc:	4a09      	ldr	r2, [pc, #36]	; (4de4 <system_clock_source_disable+0xa0>)
    4dbe:	4909      	ldr	r1, [pc, #36]	; (4de4 <system_clock_source_disable+0xa0>)
    4dc0:	2328      	movs	r3, #40	; 0x28
    4dc2:	5ccb      	ldrb	r3, [r1, r3]
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	2102      	movs	r1, #2
    4dc8:	438b      	bics	r3, r1
    4dca:	b2d9      	uxtb	r1, r3
    4dcc:	2328      	movs	r3, #40	; 0x28
    4dce:	54d1      	strb	r1, [r2, r3]
		break;
    4dd0:	e001      	b.n	4dd6 <system_clock_source_disable+0x92>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4dd2:	2317      	movs	r3, #23
    4dd4:	e000      	b.n	4dd8 <system_clock_source_disable+0x94>

	}

	return STATUS_OK;
    4dd6:	2300      	movs	r3, #0
}
    4dd8:	0018      	movs	r0, r3
    4dda:	46bd      	mov	sp, r7
    4ddc:	b002      	add	sp, #8
    4dde:	bd80      	pop	{r7, pc}
    4de0:	0002ac64 	.word	0x0002ac64
    4de4:	40000c00 	.word	0x40000c00
    4de8:	40001000 	.word	0x40001000
    4dec:	20000be0 	.word	0x20000be0

00004df0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	b084      	sub	sp, #16
    4df4:	af00      	add	r7, sp, #0
    4df6:	0002      	movs	r2, r0
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    4dfc:	2300      	movs	r3, #0
    4dfe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    4e00:	1dfb      	adds	r3, r7, #7
    4e02:	781b      	ldrb	r3, [r3, #0]
    4e04:	2b08      	cmp	r3, #8
    4e06:	d84f      	bhi.n	4ea8 <system_clock_source_is_ready+0xb8>
    4e08:	009a      	lsls	r2, r3, #2
    4e0a:	4b2a      	ldr	r3, [pc, #168]	; (4eb4 <system_clock_source_is_ready+0xc4>)
    4e0c:	18d3      	adds	r3, r2, r3
    4e0e:	681b      	ldr	r3, [r3, #0]
    4e10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
    4e12:	2310      	movs	r3, #16
    4e14:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    4e16:	4b28      	ldr	r3, [pc, #160]	; (4eb8 <system_clock_source_is_ready+0xc8>)
    4e18:	68db      	ldr	r3, [r3, #12]
    4e1a:	68fa      	ldr	r2, [r7, #12]
    4e1c:	401a      	ands	r2, r3
    4e1e:	68fb      	ldr	r3, [r7, #12]
    4e20:	1ad3      	subs	r3, r2, r3
    4e22:	425a      	negs	r2, r3
    4e24:	4153      	adcs	r3, r2
    4e26:	b2db      	uxtb	r3, r3
    4e28:	e03f      	b.n	4eaa <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = OSC32KCTRL_STATUS_OSC32KRDY;
    4e2a:	2302      	movs	r3, #2
    4e2c:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    4e2e:	4b23      	ldr	r3, [pc, #140]	; (4ebc <system_clock_source_is_ready+0xcc>)
    4e30:	68db      	ldr	r3, [r3, #12]
    4e32:	68fa      	ldr	r2, [r7, #12]
    4e34:	401a      	ands	r2, r3
    4e36:	68fb      	ldr	r3, [r7, #12]
    4e38:	1ad3      	subs	r3, r2, r3
    4e3a:	425a      	negs	r2, r3
    4e3c:	4153      	adcs	r3, r2
    4e3e:	b2db      	uxtb	r3, r3
    4e40:	e033      	b.n	4eaa <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = OSCCTRL_STATUS_XOSCRDY;
    4e42:	2301      	movs	r3, #1
    4e44:	60fb      	str	r3, [r7, #12]
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    4e46:	4b1c      	ldr	r3, [pc, #112]	; (4eb8 <system_clock_source_is_ready+0xc8>)
    4e48:	68db      	ldr	r3, [r3, #12]
    4e4a:	68fa      	ldr	r2, [r7, #12]
    4e4c:	401a      	ands	r2, r3
    4e4e:	68fb      	ldr	r3, [r7, #12]
    4e50:	1ad3      	subs	r3, r2, r3
    4e52:	425a      	negs	r2, r3
    4e54:	4153      	adcs	r3, r2
    4e56:	b2db      	uxtb	r3, r3
    4e58:	e027      	b.n	4eaa <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
    4e5a:	2301      	movs	r3, #1
    4e5c:	60fb      	str	r3, [r7, #12]
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    4e5e:	4b17      	ldr	r3, [pc, #92]	; (4ebc <system_clock_source_is_ready+0xcc>)
    4e60:	68db      	ldr	r3, [r3, #12]
    4e62:	68fa      	ldr	r2, [r7, #12]
    4e64:	401a      	ands	r2, r3
    4e66:	68fb      	ldr	r3, [r7, #12]
    4e68:	1ad3      	subs	r3, r2, r3
    4e6a:	425a      	negs	r2, r3
    4e6c:	4153      	adcs	r3, r2
    4e6e:	b2db      	uxtb	r3, r3
    4e70:	e01b      	b.n	4eaa <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (OSCCTRL_STATUS_DFLLRDY |
    4e72:	23d0      	movs	r3, #208	; 0xd0
    4e74:	011b      	lsls	r3, r3, #4
    4e76:	60fb      	str	r3, [r7, #12]
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    4e78:	4b0f      	ldr	r3, [pc, #60]	; (4eb8 <system_clock_source_is_ready+0xc8>)
    4e7a:	68db      	ldr	r3, [r3, #12]
    4e7c:	68fa      	ldr	r2, [r7, #12]
    4e7e:	401a      	ands	r2, r3
    4e80:	68fb      	ldr	r3, [r7, #12]
    4e82:	1ad3      	subs	r3, r2, r3
    4e84:	425a      	negs	r2, r3
    4e86:	4153      	adcs	r3, r2
    4e88:	b2db      	uxtb	r3, r3
    4e8a:	e00e      	b.n	4eaa <system_clock_source_is_ready+0xba>

	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((OSCCTRL->DPLLSTATUS.reg &
    4e8c:	4a0a      	ldr	r2, [pc, #40]	; (4eb8 <system_clock_source_is_ready+0xc8>)
    4e8e:	233c      	movs	r3, #60	; 0x3c
    4e90:	5cd3      	ldrb	r3, [r2, r3]
    4e92:	b2db      	uxtb	r3, r3
    4e94:	001a      	movs	r2, r3
    4e96:	2303      	movs	r3, #3
    4e98:	4013      	ands	r3, r2
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK)) ==
    4e9a:	3b03      	subs	r3, #3
    4e9c:	425a      	negs	r2, r3
    4e9e:	4153      	adcs	r3, r2
    4ea0:	b2db      	uxtb	r3, r3
    4ea2:	e002      	b.n	4eaa <system_clock_source_is_ready+0xba>
				(OSCCTRL_DPLLSTATUS_CLKRDY | OSCCTRL_DPLLSTATUS_LOCK));
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    4ea4:	2301      	movs	r3, #1
    4ea6:	e000      	b.n	4eaa <system_clock_source_is_ready+0xba>

	default:
		return false;
    4ea8:	2300      	movs	r3, #0
	}
}
    4eaa:	0018      	movs	r0, r3
    4eac:	46bd      	mov	sp, r7
    4eae:	b004      	add	sp, #16
    4eb0:	bd80      	pop	{r7, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	0002ac88 	.word	0x0002ac88
    4eb8:	40000c00 	.word	0x40000c00
    4ebc:	40001000 	.word	0x40001000

00004ec0 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4ec0:	b580      	push	{r7, lr}
    4ec2:	b0aa      	sub	sp, #168	; 0xa8
    4ec4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    4ec6:	4b91      	ldr	r3, [pc, #580]	; (510c <system_clock_init+0x24c>)
    4ec8:	2280      	movs	r2, #128	; 0x80
    4eca:	0052      	lsls	r2, r2, #1
    4ecc:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    4ece:	4b90      	ldr	r3, [pc, #576]	; (5110 <system_clock_init+0x250>)
    4ed0:	2203      	movs	r2, #3
    4ed2:	609a      	str	r2, [r3, #8]

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    4ed4:	2002      	movs	r0, #2
    4ed6:	4b8f      	ldr	r3, [pc, #572]	; (5114 <system_clock_init+0x254>)
    4ed8:	4798      	blx	r3

	/*  Switch to PL2 to be sure configuration of GCLK0 is safe */
	system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_2);
    4eda:	2002      	movs	r0, #2
    4edc:	4b8e      	ldr	r3, [pc, #568]	; (5118 <system_clock_init+0x258>)
    4ede:	4798      	blx	r3
#endif

	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    4ee0:	2394      	movs	r3, #148	; 0x94
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	0018      	movs	r0, r3
    4ee6:	4b8d      	ldr	r3, [pc, #564]	; (511c <system_clock_init+0x25c>)
    4ee8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    4eea:	2394      	movs	r3, #148	; 0x94
    4eec:	18fb      	adds	r3, r7, r3
    4eee:	2280      	movs	r2, #128	; 0x80
    4ef0:	0212      	lsls	r2, r2, #8
    4ef2:	605a      	str	r2, [r3, #4]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    4ef4:	2394      	movs	r3, #148	; 0x94
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	2200      	movs	r2, #0
    4efa:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4efc:	2394      	movs	r3, #148	; 0x94
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	2204      	movs	r2, #4
    4f02:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    4f04:	2394      	movs	r3, #148	; 0x94
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	2200      	movs	r2, #0
    4f0a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    4f0c:	2394      	movs	r3, #148	; 0x94
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	2201      	movs	r2, #1
    4f12:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.on_demand           = false;
    4f14:	2394      	movs	r3, #148	; 0x94
    4f16:	18fb      	adds	r3, r7, r3
    4f18:	2200      	movs	r2, #0
    4f1a:	725a      	strb	r2, [r3, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    4f1c:	2394      	movs	r3, #148	; 0x94
    4f1e:	18fb      	adds	r3, r7, r3
    4f20:	2200      	movs	r2, #0
    4f22:	721a      	strb	r2, [r3, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4f24:	2394      	movs	r3, #148	; 0x94
    4f26:	18fb      	adds	r3, r7, r3
    4f28:	0018      	movs	r0, r3
    4f2a:	4b7d      	ldr	r3, [pc, #500]	; (5120 <system_clock_init+0x260>)
    4f2c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4f2e:	2005      	movs	r0, #5
    4f30:	4b7c      	ldr	r3, [pc, #496]	; (5124 <system_clock_init+0x264>)
    4f32:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4f34:	46c0      	nop			; (mov r8, r8)
    4f36:	2005      	movs	r0, #5
    4f38:	4b7b      	ldr	r3, [pc, #492]	; (5128 <system_clock_init+0x268>)
    4f3a:	4798      	blx	r3
    4f3c:	0003      	movs	r3, r0
    4f3e:	001a      	movs	r2, r3
    4f40:	2301      	movs	r3, #1
    4f42:	4053      	eors	r3, r2
    4f44:	b2db      	uxtb	r3, r3
    4f46:	2b00      	cmp	r3, #0
    4f48:	d1f5      	bne.n	4f36 <system_clock_init+0x76>
	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	} else {
		_system_clock_source_osc16m_freq_sel();
    4f4a:	4b78      	ldr	r3, [pc, #480]	; (512c <system_clock_init+0x26c>)
    4f4c:	4798      	blx	r3
	}

	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    4f4e:	2380      	movs	r3, #128	; 0x80
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	0018      	movs	r0, r3
    4f54:	4b76      	ldr	r3, [pc, #472]	; (5130 <system_clock_init+0x270>)
    4f56:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4f58:	2380      	movs	r3, #128	; 0x80
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	2204      	movs	r2, #4
    4f5e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    4f60:	2380      	movs	r3, #128	; 0x80
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	2200      	movs	r2, #0
    4f66:	705a      	strb	r2, [r3, #1]
	dfll_conf.run_in_stanby  = CONF_CLOCK_DFLL_RUN_IN_STANDBY;
    4f68:	2380      	movs	r3, #128	; 0x80
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	2200      	movs	r2, #0
    4f6e:	709a      	strb	r2, [r3, #2]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    4f70:	4b70      	ldr	r3, [pc, #448]	; (5134 <system_clock_init+0x274>)
    4f72:	681b      	ldr	r3, [r3, #0]
    4f74:	0e9b      	lsrs	r3, r3, #26
    4f76:	22a4      	movs	r2, #164	; 0xa4
    4f78:	18ba      	adds	r2, r7, r2
    4f7a:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    4f7c:	23a4      	movs	r3, #164	; 0xa4
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	2b3f      	cmp	r3, #63	; 0x3f
    4f84:	d103      	bne.n	4f8e <system_clock_init+0xce>
		coarse = 0x1f;
    4f86:	231f      	movs	r3, #31
    4f88:	22a4      	movs	r2, #164	; 0xa4
    4f8a:	18ba      	adds	r2, r7, r2
    4f8c:	6013      	str	r3, [r2, #0]
	}

	dfll_conf.coarse_value = coarse;
    4f8e:	23a4      	movs	r3, #164	; 0xa4
    4f90:	18fb      	adds	r3, r7, r3
    4f92:	681b      	ldr	r3, [r3, #0]
    4f94:	b2da      	uxtb	r2, r3
    4f96:	2380      	movs	r3, #128	; 0x80
    4f98:	18fb      	adds	r3, r7, r3
    4f9a:	729a      	strb	r2, [r3, #10]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4f9c:	2380      	movs	r3, #128	; 0x80
    4f9e:	18fb      	adds	r3, r7, r3
    4fa0:	2200      	movs	r2, #0
    4fa2:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4fa4:	2380      	movs	r3, #128	; 0x80
    4fa6:	18fb      	adds	r3, r7, r3
    4fa8:	2200      	movs	r2, #0
    4faa:	725a      	strb	r2, [r3, #9]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4fac:	2380      	movs	r3, #128	; 0x80
    4fae:	18fb      	adds	r3, r7, r3
    4fb0:	2200      	movs	r2, #0
    4fb2:	721a      	strb	r2, [r3, #8]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4fb4:	2380      	movs	r3, #128	; 0x80
    4fb6:	18fb      	adds	r3, r7, r3
    4fb8:	2200      	movs	r2, #0
    4fba:	80da      	strh	r2, [r3, #6]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4fbc:	2380      	movs	r3, #128	; 0x80
    4fbe:	18fb      	adds	r3, r7, r3
    4fc0:	22b7      	movs	r2, #183	; 0xb7
    4fc2:	00d2      	lsls	r2, r2, #3
    4fc4:	825a      	strh	r2, [r3, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4fc6:	2380      	movs	r3, #128	; 0x80
    4fc8:	18fb      	adds	r3, r7, r3
    4fca:	2207      	movs	r2, #7
    4fcc:	739a      	strb	r2, [r3, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4fce:	2380      	movs	r3, #128	; 0x80
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	223f      	movs	r2, #63	; 0x3f
    4fd4:	821a      	strh	r2, [r3, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4fd6:	2380      	movs	r3, #128	; 0x80
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	0018      	movs	r0, r3
    4fdc:	4b56      	ldr	r3, [pc, #344]	; (5138 <system_clock_init+0x278>)
    4fde:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4fe0:	4b56      	ldr	r3, [pc, #344]	; (513c <system_clock_init+0x27c>)
    4fe2:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4fe4:	2368      	movs	r3, #104	; 0x68
    4fe6:	18fb      	adds	r3, r7, r3
    4fe8:	0018      	movs	r0, r3
    4fea:	4b55      	ldr	r3, [pc, #340]	; (5140 <system_clock_init+0x280>)
    4fec:	4798      	blx	r3
    4fee:	2368      	movs	r3, #104	; 0x68
    4ff0:	18fb      	adds	r3, r7, r3
    4ff2:	2205      	movs	r2, #5
    4ff4:	701a      	strb	r2, [r3, #0]
    4ff6:	2368      	movs	r3, #104	; 0x68
    4ff8:	18fb      	adds	r3, r7, r3
    4ffa:	2201      	movs	r2, #1
    4ffc:	605a      	str	r2, [r3, #4]
    4ffe:	2368      	movs	r3, #104	; 0x68
    5000:	18fb      	adds	r3, r7, r3
    5002:	2201      	movs	r2, #1
    5004:	721a      	strb	r2, [r3, #8]
    5006:	2368      	movs	r3, #104	; 0x68
    5008:	18fb      	adds	r3, r7, r3
    500a:	2200      	movs	r2, #0
    500c:	725a      	strb	r2, [r3, #9]
    500e:	2368      	movs	r3, #104	; 0x68
    5010:	18fb      	adds	r3, r7, r3
    5012:	0019      	movs	r1, r3
    5014:	2001      	movs	r0, #1
    5016:	4b4b      	ldr	r3, [pc, #300]	; (5144 <system_clock_init+0x284>)
    5018:	4798      	blx	r3
    501a:	2001      	movs	r0, #1
    501c:	4b4a      	ldr	r3, [pc, #296]	; (5148 <system_clock_init+0x288>)
    501e:	4798      	blx	r3
    5020:	235c      	movs	r3, #92	; 0x5c
    5022:	18fb      	adds	r3, r7, r3
    5024:	0018      	movs	r0, r3
    5026:	4b46      	ldr	r3, [pc, #280]	; (5140 <system_clock_init+0x280>)
    5028:	4798      	blx	r3
    502a:	235c      	movs	r3, #92	; 0x5c
    502c:	18fb      	adds	r3, r7, r3
    502e:	2206      	movs	r2, #6
    5030:	701a      	strb	r2, [r3, #0]
    5032:	235c      	movs	r3, #92	; 0x5c
    5034:	18fb      	adds	r3, r7, r3
    5036:	2205      	movs	r2, #5
    5038:	605a      	str	r2, [r3, #4]
    503a:	235c      	movs	r3, #92	; 0x5c
    503c:	18fb      	adds	r3, r7, r3
    503e:	2200      	movs	r2, #0
    5040:	721a      	strb	r2, [r3, #8]
    5042:	235c      	movs	r3, #92	; 0x5c
    5044:	18fb      	adds	r3, r7, r3
    5046:	2200      	movs	r2, #0
    5048:	725a      	strb	r2, [r3, #9]
    504a:	235c      	movs	r3, #92	; 0x5c
    504c:	18fb      	adds	r3, r7, r3
    504e:	0019      	movs	r1, r3
    5050:	2002      	movs	r0, #2
    5052:	4b3c      	ldr	r3, [pc, #240]	; (5144 <system_clock_init+0x284>)
    5054:	4798      	blx	r3
    5056:	2002      	movs	r0, #2
    5058:	4b3b      	ldr	r3, [pc, #236]	; (5148 <system_clock_init+0x288>)
    505a:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    505c:	2310      	movs	r3, #16
    505e:	18fb      	adds	r3, r7, r3
    5060:	0018      	movs	r0, r3
    5062:	4b3a      	ldr	r3, [pc, #232]	; (514c <system_clock_init+0x28c>)
    5064:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5066:	2310      	movs	r3, #16
    5068:	18fb      	adds	r3, r7, r3
    506a:	2201      	movs	r2, #1
    506c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    506e:	2310      	movs	r3, #16
    5070:	18fb      	adds	r3, r7, r3
    5072:	0019      	movs	r1, r3
    5074:	2000      	movs	r0, #0
    5076:	4b36      	ldr	r3, [pc, #216]	; (5150 <system_clock_init+0x290>)
    5078:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    507a:	2000      	movs	r0, #0
    507c:	4b35      	ldr	r3, [pc, #212]	; (5154 <system_clock_init+0x294>)
    507e:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5080:	2007      	movs	r0, #7
    5082:	4b28      	ldr	r3, [pc, #160]	; (5124 <system_clock_init+0x264>)
    5084:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	2007      	movs	r0, #7
    508a:	4b27      	ldr	r3, [pc, #156]	; (5128 <system_clock_init+0x268>)
    508c:	4798      	blx	r3
    508e:	0003      	movs	r3, r0
    5090:	001a      	movs	r2, r3
    5092:	2301      	movs	r3, #1
    5094:	4053      	eors	r3, r2
    5096:	b2db      	uxtb	r3, r3
    5098:	2b00      	cmp	r3, #0
    509a:	d1f5      	bne.n	5088 <system_clock_init+0x1c8>
	}

#  endif

	/* CPU and BUS clocks */
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);
    509c:	2000      	movs	r0, #0
    509e:	4b2e      	ldr	r3, [pc, #184]	; (5158 <system_clock_init+0x298>)
    50a0:	4798      	blx	r3
	system_low_power_clock_set_divider(CONF_CLOCK_LOW_POWER_DIVIDER);
    50a2:	2000      	movs	r0, #0
    50a4:	4b2d      	ldr	r3, [pc, #180]	; (515c <system_clock_init+0x29c>)
    50a6:	4798      	blx	r3
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    50a8:	2000      	movs	r0, #0
    50aa:	4b2d      	ldr	r3, [pc, #180]	; (5160 <system_clock_init+0x2a0>)
    50ac:	4798      	blx	r3
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
    50ae:	2000      	movs	r0, #0
    50b0:	4b2c      	ldr	r3, [pc, #176]	; (5164 <system_clock_init+0x2a4>)
    50b2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    50b4:	1d3b      	adds	r3, r7, #4
    50b6:	0018      	movs	r0, r3
    50b8:	4b21      	ldr	r3, [pc, #132]	; (5140 <system_clock_init+0x280>)
    50ba:	4798      	blx	r3
    50bc:	1d3b      	adds	r3, r7, #4
    50be:	2207      	movs	r2, #7
    50c0:	701a      	strb	r2, [r3, #0]
    50c2:	1d3b      	adds	r3, r7, #4
    50c4:	2206      	movs	r2, #6
    50c6:	605a      	str	r2, [r3, #4]
    50c8:	1d3b      	adds	r3, r7, #4
    50ca:	2200      	movs	r2, #0
    50cc:	721a      	strb	r2, [r3, #8]
    50ce:	1d3b      	adds	r3, r7, #4
    50d0:	2200      	movs	r2, #0
    50d2:	725a      	strb	r2, [r3, #9]
    50d4:	1d3b      	adds	r3, r7, #4
    50d6:	0019      	movs	r1, r3
    50d8:	2000      	movs	r0, #0
    50da:	4b1a      	ldr	r3, [pc, #104]	; (5144 <system_clock_init+0x284>)
    50dc:	4798      	blx	r3
    50de:	2000      	movs	r0, #0
    50e0:	4b19      	ldr	r3, [pc, #100]	; (5148 <system_clock_init+0x288>)
    50e2:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
    50e4:	4b20      	ldr	r3, [pc, #128]	; (5168 <system_clock_init+0x2a8>)
    50e6:	4798      	blx	r3
    50e8:	0003      	movs	r3, r0
    50ea:	22a0      	movs	r2, #160	; 0xa0
    50ec:	18ba      	adds	r2, r7, r2
    50ee:	6013      	str	r3, [r2, #0]
	if (cpu_freq <= 12000000) {
    50f0:	23a0      	movs	r3, #160	; 0xa0
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	681b      	ldr	r3, [r3, #0]
    50f6:	4a1d      	ldr	r2, [pc, #116]	; (516c <system_clock_init+0x2ac>)
    50f8:	4293      	cmp	r3, r2
    50fa:	d802      	bhi.n	5102 <system_clock_init+0x242>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
    50fc:	2000      	movs	r0, #0
    50fe:	4b06      	ldr	r3, [pc, #24]	; (5118 <system_clock_init+0x258>)
    5100:	4798      	blx	r3
	}
}
    5102:	46c0      	nop			; (mov r8, r8)
    5104:	46bd      	mov	sp, r7
    5106:	b02a      	add	sp, #168	; 0xa8
    5108:	bd80      	pop	{r7, pc}
    510a:	46c0      	nop			; (mov r8, r8)
    510c:	40000c00 	.word	0x40000c00
    5110:	40001400 	.word	0x40001400
    5114:	000047e1 	.word	0x000047e1
    5118:	00004815 	.word	0x00004815
    511c:	00004669 	.word	0x00004669
    5120:	00004ab1 	.word	0x00004ab1
    5124:	00004c85 	.word	0x00004c85
    5128:	00004df1 	.word	0x00004df1
    512c:	0000488d 	.word	0x0000488d
    5130:	000046cd 	.word	0x000046cd
    5134:	00806020 	.word	0x00806020
    5138:	00004bad 	.word	0x00004bad
    513c:	00005251 	.word	0x00005251
    5140:	00004625 	.word	0x00004625
    5144:	00005281 	.word	0x00005281
    5148:	00005391 	.word	0x00005391
    514c:	00004653 	.word	0x00004653
    5150:	000054ad 	.word	0x000054ad
    5154:	000054ed 	.word	0x000054ed
    5158:	00004789 	.word	0x00004789
    515c:	00004761 	.word	0x00004761
    5160:	00004739 	.word	0x00004739
    5164:	00004725 	.word	0x00004725
    5168:	000047b1 	.word	0x000047b1
    516c:	00b71b00 	.word	0x00b71b00

00005170 <system_apb_clock_set_mask>:
{
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
    5176:	0002      	movs	r2, r0
    5178:	6039      	str	r1, [r7, #0]
    517a:	1dfb      	adds	r3, r7, #7
    517c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    517e:	1dfb      	adds	r3, r7, #7
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	2b04      	cmp	r3, #4
    5184:	d827      	bhi.n	51d6 <system_apb_clock_set_mask+0x66>
    5186:	009a      	lsls	r2, r3, #2
    5188:	4b16      	ldr	r3, [pc, #88]	; (51e4 <system_apb_clock_set_mask+0x74>)
    518a:	18d3      	adds	r3, r2, r3
    518c:	681b      	ldr	r3, [r3, #0]
    518e:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    5190:	4b15      	ldr	r3, [pc, #84]	; (51e8 <system_apb_clock_set_mask+0x78>)
    5192:	4a15      	ldr	r2, [pc, #84]	; (51e8 <system_apb_clock_set_mask+0x78>)
    5194:	6951      	ldr	r1, [r2, #20]
    5196:	683a      	ldr	r2, [r7, #0]
    5198:	430a      	orrs	r2, r1
    519a:	615a      	str	r2, [r3, #20]
			break;
    519c:	e01d      	b.n	51da <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    519e:	4b12      	ldr	r3, [pc, #72]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51a0:	4a11      	ldr	r2, [pc, #68]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51a2:	6991      	ldr	r1, [r2, #24]
    51a4:	683a      	ldr	r2, [r7, #0]
    51a6:	430a      	orrs	r2, r1
    51a8:	619a      	str	r2, [r3, #24]
			break;
    51aa:	e016      	b.n	51da <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    51ac:	4b0e      	ldr	r3, [pc, #56]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51ae:	4a0e      	ldr	r2, [pc, #56]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51b0:	69d1      	ldr	r1, [r2, #28]
    51b2:	683a      	ldr	r2, [r7, #0]
    51b4:	430a      	orrs	r2, r1
    51b6:	61da      	str	r2, [r3, #28]
			break;
    51b8:	e00f      	b.n	51da <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    51ba:	4b0b      	ldr	r3, [pc, #44]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51bc:	4a0a      	ldr	r2, [pc, #40]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51be:	6a11      	ldr	r1, [r2, #32]
    51c0:	683a      	ldr	r2, [r7, #0]
    51c2:	430a      	orrs	r2, r1
    51c4:	621a      	str	r2, [r3, #32]
			break;
    51c6:	e008      	b.n	51da <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    51c8:	4b07      	ldr	r3, [pc, #28]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51ca:	4a07      	ldr	r2, [pc, #28]	; (51e8 <system_apb_clock_set_mask+0x78>)
    51cc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    51ce:	683a      	ldr	r2, [r7, #0]
    51d0:	430a      	orrs	r2, r1
    51d2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    51d4:	e001      	b.n	51da <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    51d6:	2317      	movs	r3, #23
    51d8:	e000      	b.n	51dc <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    51da:	2300      	movs	r3, #0
}
    51dc:	0018      	movs	r0, r3
    51de:	46bd      	mov	sp, r7
    51e0:	b002      	add	sp, #8
    51e2:	bd80      	pop	{r7, pc}
    51e4:	0002acac 	.word	0x0002acac
    51e8:	40000400 	.word	0x40000400

000051ec <system_interrupt_enter_critical_section>:
{
    51ec:	b580      	push	{r7, lr}
    51ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    51f0:	4b02      	ldr	r3, [pc, #8]	; (51fc <system_interrupt_enter_critical_section+0x10>)
    51f2:	4798      	blx	r3
}
    51f4:	46c0      	nop			; (mov r8, r8)
    51f6:	46bd      	mov	sp, r7
    51f8:	bd80      	pop	{r7, pc}
    51fa:	46c0      	nop			; (mov r8, r8)
    51fc:	00000201 	.word	0x00000201

00005200 <system_interrupt_leave_critical_section>:
{
    5200:	b580      	push	{r7, lr}
    5202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5204:	4b02      	ldr	r3, [pc, #8]	; (5210 <system_interrupt_leave_critical_section+0x10>)
    5206:	4798      	blx	r3
}
    5208:	46c0      	nop			; (mov r8, r8)
    520a:	46bd      	mov	sp, r7
    520c:	bd80      	pop	{r7, pc}
    520e:	46c0      	nop			; (mov r8, r8)
    5210:	00000255 	.word	0x00000255

00005214 <system_gclk_is_syncing>:
  *
  * \retval false if the module has completed synchronization
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	0002      	movs	r2, r0
    521c:	1dfb      	adds	r3, r7, #7
    521e:	701a      	strb	r2, [r3, #0]

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5220:	4b09      	ldr	r3, [pc, #36]	; (5248 <system_gclk_is_syncing+0x34>)
    5222:	685b      	ldr	r3, [r3, #4]
    5224:	1dfa      	adds	r2, r7, #7
    5226:	7812      	ldrb	r2, [r2, #0]
    5228:	2101      	movs	r1, #1
    522a:	4091      	lsls	r1, r2
    522c:	000a      	movs	r2, r1
    522e:	0092      	lsls	r2, r2, #2
    5230:	4013      	ands	r3, r2
    5232:	4a06      	ldr	r2, [pc, #24]	; (524c <system_gclk_is_syncing+0x38>)
    5234:	4013      	ands	r3, r2
    5236:	d001      	beq.n	523c <system_gclk_is_syncing+0x28>
		 return true;
    5238:	2301      	movs	r3, #1
    523a:	e000      	b.n	523e <system_gclk_is_syncing+0x2a>
	}

	 return false;
    523c:	2300      	movs	r3, #0
}
    523e:	0018      	movs	r0, r3
    5240:	46bd      	mov	sp, r7
    5242:	b002      	add	sp, #8
    5244:	bd80      	pop	{r7, pc}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	40001800 	.word	0x40001800
    524c:	000007fc 	.word	0x000007fc

00005250 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5250:	b580      	push	{r7, lr}
    5252:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);
    5254:	2140      	movs	r1, #64	; 0x40
    5256:	2000      	movs	r0, #0
    5258:	4b07      	ldr	r3, [pc, #28]	; (5278 <system_gclk_init+0x28>)
    525a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    525c:	4b07      	ldr	r3, [pc, #28]	; (527c <system_gclk_init+0x2c>)
    525e:	2201      	movs	r2, #1
    5260:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	4b05      	ldr	r3, [pc, #20]	; (527c <system_gclk_init+0x2c>)
    5266:	781b      	ldrb	r3, [r3, #0]
    5268:	b2db      	uxtb	r3, r3
    526a:	001a      	movs	r2, r3
    526c:	2301      	movs	r3, #1
    526e:	4013      	ands	r3, r2
    5270:	d1f8      	bne.n	5264 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	46bd      	mov	sp, r7
    5276:	bd80      	pop	{r7, pc}
    5278:	00005171 	.word	0x00005171
    527c:	40001800 	.word	0x40001800

00005280 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5280:	b580      	push	{r7, lr}
    5282:	b086      	sub	sp, #24
    5284:	af00      	add	r7, sp, #0
    5286:	0002      	movs	r2, r0
    5288:	6039      	str	r1, [r7, #0]
    528a:	1dfb      	adds	r3, r7, #7
    528c:	701a      	strb	r2, [r3, #0]
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    528e:	683b      	ldr	r3, [r7, #0]
    5290:	781b      	ldrb	r3, [r3, #0]
    5292:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5294:	683b      	ldr	r3, [r7, #0]
    5296:	785b      	ldrb	r3, [r3, #1]
    5298:	2b00      	cmp	r3, #0
    529a:	d004      	beq.n	52a6 <system_gclk_gen_set_config+0x26>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    529c:	697b      	ldr	r3, [r7, #20]
    529e:	2280      	movs	r2, #128	; 0x80
    52a0:	00d2      	lsls	r2, r2, #3
    52a2:	4313      	orrs	r3, r2
    52a4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    52a6:	683b      	ldr	r3, [r7, #0]
    52a8:	7a5b      	ldrb	r3, [r3, #9]
    52aa:	2b00      	cmp	r3, #0
    52ac:	d004      	beq.n	52b8 <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    52ae:	697b      	ldr	r3, [r7, #20]
    52b0:	2280      	movs	r2, #128	; 0x80
    52b2:	0112      	lsls	r2, r2, #4
    52b4:	4313      	orrs	r3, r2
    52b6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	685b      	ldr	r3, [r3, #4]
    52bc:	2b01      	cmp	r3, #1
    52be:	d92c      	bls.n	531a <system_gclk_gen_set_config+0x9a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    52c0:	683b      	ldr	r3, [r7, #0]
    52c2:	685a      	ldr	r2, [r3, #4]
    52c4:	683b      	ldr	r3, [r7, #0]
    52c6:	685b      	ldr	r3, [r3, #4]
    52c8:	3b01      	subs	r3, #1
    52ca:	4013      	ands	r3, r2
    52cc:	d11a      	bne.n	5304 <system_gclk_gen_set_config+0x84>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    52ce:	2300      	movs	r3, #0
    52d0:	613b      	str	r3, [r7, #16]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    52d2:	2302      	movs	r3, #2
    52d4:	60fb      	str	r3, [r7, #12]
    52d6:	e005      	b.n	52e4 <system_gclk_gen_set_config+0x64>
						mask <<= 1) {
				div2_count++;
    52d8:	693b      	ldr	r3, [r7, #16]
    52da:	3301      	adds	r3, #1
    52dc:	613b      	str	r3, [r7, #16]
						mask <<= 1) {
    52de:	68fb      	ldr	r3, [r7, #12]
    52e0:	005b      	lsls	r3, r3, #1
    52e2:	60fb      	str	r3, [r7, #12]
			for (mask = (1UL << 1); mask < config->division_factor;
    52e4:	683b      	ldr	r3, [r7, #0]
    52e6:	685a      	ldr	r2, [r3, #4]
    52e8:	68fb      	ldr	r3, [r7, #12]
    52ea:	429a      	cmp	r2, r3
    52ec:	d8f4      	bhi.n	52d8 <system_gclk_gen_set_config+0x58>
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    52ee:	693b      	ldr	r3, [r7, #16]
    52f0:	041b      	lsls	r3, r3, #16
    52f2:	697a      	ldr	r2, [r7, #20]
    52f4:	4313      	orrs	r3, r2
    52f6:	617b      	str	r3, [r7, #20]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    52f8:	697b      	ldr	r3, [r7, #20]
    52fa:	2280      	movs	r2, #128	; 0x80
    52fc:	0152      	lsls	r2, r2, #5
    52fe:	4313      	orrs	r3, r2
    5300:	617b      	str	r3, [r7, #20]
    5302:	e00a      	b.n	531a <system_gclk_gen_set_config+0x9a>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    5304:	683b      	ldr	r3, [r7, #0]
    5306:	685b      	ldr	r3, [r3, #4]
    5308:	041b      	lsls	r3, r3, #16
			new_genctrl_config  |=
    530a:	697a      	ldr	r2, [r7, #20]
    530c:	4313      	orrs	r3, r2
    530e:	617b      	str	r3, [r7, #20]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5310:	697b      	ldr	r3, [r7, #20]
    5312:	2280      	movs	r2, #128	; 0x80
    5314:	0092      	lsls	r2, r2, #2
    5316:	4313      	orrs	r3, r2
    5318:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    531a:	683b      	ldr	r3, [r7, #0]
    531c:	7a1b      	ldrb	r3, [r3, #8]
    531e:	2b00      	cmp	r3, #0
    5320:	d004      	beq.n	532c <system_gclk_gen_set_config+0xac>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5322:	697b      	ldr	r3, [r7, #20]
    5324:	2280      	movs	r2, #128	; 0x80
    5326:	0192      	lsls	r2, r2, #6
    5328:	4313      	orrs	r3, r2
    532a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing(generator)) {
    532c:	46c0      	nop			; (mov r8, r8)
    532e:	1dfb      	adds	r3, r7, #7
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	0018      	movs	r0, r3
    5334:	4b12      	ldr	r3, [pc, #72]	; (5380 <system_gclk_gen_set_config+0x100>)
    5336:	4798      	blx	r3
    5338:	1e03      	subs	r3, r0, #0
    533a:	d1f8      	bne.n	532e <system_gclk_gen_set_config+0xae>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    533c:	4b11      	ldr	r3, [pc, #68]	; (5384 <system_gclk_gen_set_config+0x104>)
    533e:	4798      	blx	r3

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    5340:	4811      	ldr	r0, [pc, #68]	; (5388 <system_gclk_gen_set_config+0x108>)
    5342:	1dfb      	adds	r3, r7, #7
    5344:	781b      	ldrb	r3, [r3, #0]
    5346:	4910      	ldr	r1, [pc, #64]	; (5388 <system_gclk_gen_set_config+0x108>)
    5348:	1dfa      	adds	r2, r7, #7
    534a:	7812      	ldrb	r2, [r2, #0]
    534c:	3208      	adds	r2, #8
    534e:	0092      	lsls	r2, r2, #2
    5350:	5851      	ldr	r1, [r2, r1]
    5352:	2280      	movs	r2, #128	; 0x80
    5354:	0052      	lsls	r2, r2, #1
    5356:	4011      	ands	r1, r2
    5358:	697a      	ldr	r2, [r7, #20]
    535a:	430a      	orrs	r2, r1
    535c:	3308      	adds	r3, #8
    535e:	009b      	lsls	r3, r3, #2
    5360:	501a      	str	r2, [r3, r0]

	while (system_gclk_is_syncing(generator)) {
    5362:	46c0      	nop			; (mov r8, r8)
    5364:	1dfb      	adds	r3, r7, #7
    5366:	781b      	ldrb	r3, [r3, #0]
    5368:	0018      	movs	r0, r3
    536a:	4b05      	ldr	r3, [pc, #20]	; (5380 <system_gclk_gen_set_config+0x100>)
    536c:	4798      	blx	r3
    536e:	1e03      	subs	r3, r0, #0
    5370:	d1f8      	bne.n	5364 <system_gclk_gen_set_config+0xe4>
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
    5372:	4b06      	ldr	r3, [pc, #24]	; (538c <system_gclk_gen_set_config+0x10c>)
    5374:	4798      	blx	r3
}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	46bd      	mov	sp, r7
    537a:	b006      	add	sp, #24
    537c:	bd80      	pop	{r7, pc}
    537e:	46c0      	nop			; (mov r8, r8)
    5380:	00005215 	.word	0x00005215
    5384:	000051ed 	.word	0x000051ed
    5388:	40001800 	.word	0x40001800
    538c:	00005201 	.word	0x00005201

00005390 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5390:	b580      	push	{r7, lr}
    5392:	b082      	sub	sp, #8
    5394:	af00      	add	r7, sp, #0
    5396:	0002      	movs	r2, r0
    5398:	1dfb      	adds	r3, r7, #7
    539a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    539c:	46c0      	nop			; (mov r8, r8)
    539e:	1dfb      	adds	r3, r7, #7
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	0018      	movs	r0, r3
    53a4:	4b0d      	ldr	r3, [pc, #52]	; (53dc <system_gclk_gen_enable+0x4c>)
    53a6:	4798      	blx	r3
    53a8:	1e03      	subs	r3, r0, #0
    53aa:	d1f8      	bne.n	539e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    53ac:	4b0c      	ldr	r3, [pc, #48]	; (53e0 <system_gclk_gen_enable+0x50>)
    53ae:	4798      	blx	r3

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    53b0:	480c      	ldr	r0, [pc, #48]	; (53e4 <system_gclk_gen_enable+0x54>)
    53b2:	1dfb      	adds	r3, r7, #7
    53b4:	781b      	ldrb	r3, [r3, #0]
    53b6:	490b      	ldr	r1, [pc, #44]	; (53e4 <system_gclk_gen_enable+0x54>)
    53b8:	1dfa      	adds	r2, r7, #7
    53ba:	7812      	ldrb	r2, [r2, #0]
    53bc:	3208      	adds	r2, #8
    53be:	0092      	lsls	r2, r2, #2
    53c0:	5852      	ldr	r2, [r2, r1]
    53c2:	2180      	movs	r1, #128	; 0x80
    53c4:	0049      	lsls	r1, r1, #1
    53c6:	430a      	orrs	r2, r1
    53c8:	3308      	adds	r3, #8
    53ca:	009b      	lsls	r3, r3, #2
    53cc:	501a      	str	r2, [r3, r0]

	system_interrupt_leave_critical_section();
    53ce:	4b06      	ldr	r3, [pc, #24]	; (53e8 <system_gclk_gen_enable+0x58>)
    53d0:	4798      	blx	r3
}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	46bd      	mov	sp, r7
    53d6:	b002      	add	sp, #8
    53d8:	bd80      	pop	{r7, pc}
    53da:	46c0      	nop			; (mov r8, r8)
    53dc:	00005215 	.word	0x00005215
    53e0:	000051ed 	.word	0x000051ed
    53e4:	40001800 	.word	0x40001800
    53e8:	00005201 	.word	0x00005201

000053ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    53ec:	b580      	push	{r7, lr}
    53ee:	b086      	sub	sp, #24
    53f0:	af00      	add	r7, sp, #0
    53f2:	0002      	movs	r2, r0
    53f4:	1dfb      	adds	r3, r7, #7
    53f6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing(generator)) {
    53f8:	46c0      	nop			; (mov r8, r8)
    53fa:	1dfb      	adds	r3, r7, #7
    53fc:	781b      	ldrb	r3, [r3, #0]
    53fe:	0018      	movs	r0, r3
    5400:	4b24      	ldr	r3, [pc, #144]	; (5494 <system_gclk_gen_get_hz+0xa8>)
    5402:	4798      	blx	r3
    5404:	1e03      	subs	r3, r0, #0
    5406:	d1f8      	bne.n	53fa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5408:	4b23      	ldr	r3, [pc, #140]	; (5498 <system_gclk_gen_get_hz+0xac>)
    540a:	4798      	blx	r3

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    540c:	4a23      	ldr	r2, [pc, #140]	; (549c <system_gclk_gen_get_hz+0xb0>)
    540e:	1dfb      	adds	r3, r7, #7
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	3308      	adds	r3, #8
    5414:	009b      	lsls	r3, r3, #2
    5416:	589b      	ldr	r3, [r3, r2]
    5418:	071b      	lsls	r3, r3, #28
    541a:	0f1b      	lsrs	r3, r3, #28
    541c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    541e:	0018      	movs	r0, r3
    5420:	4b1f      	ldr	r3, [pc, #124]	; (54a0 <system_gclk_gen_get_hz+0xb4>)
    5422:	4798      	blx	r3
    5424:	0003      	movs	r3, r0
    5426:	617b      	str	r3, [r7, #20]

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    5428:	4a1c      	ldr	r2, [pc, #112]	; (549c <system_gclk_gen_get_hz+0xb0>)
    542a:	1dfb      	adds	r3, r7, #7
    542c:	781b      	ldrb	r3, [r3, #0]
    542e:	3308      	adds	r3, #8
    5430:	009b      	lsls	r3, r3, #2
    5432:	589b      	ldr	r3, [r3, r2]
    5434:	04db      	lsls	r3, r3, #19
    5436:	0fdb      	lsrs	r3, r3, #31
    5438:	b2da      	uxtb	r2, r3
    543a:	2313      	movs	r3, #19
    543c:	18fb      	adds	r3, r7, r3
    543e:	701a      	strb	r2, [r3, #0]
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    5440:	4a16      	ldr	r2, [pc, #88]	; (549c <system_gclk_gen_get_hz+0xb0>)
    5442:	1dfb      	adds	r3, r7, #7
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	3308      	adds	r3, #8
    5448:	009b      	lsls	r3, r3, #2
    544a:	589b      	ldr	r3, [r3, r2]
    544c:	0c1b      	lsrs	r3, r3, #16
    544e:	b29b      	uxth	r3, r3
    5450:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5452:	4b14      	ldr	r3, [pc, #80]	; (54a4 <system_gclk_gen_get_hz+0xb8>)
    5454:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5456:	2313      	movs	r3, #19
    5458:	18fb      	adds	r3, r7, r3
    545a:	781b      	ldrb	r3, [r3, #0]
    545c:	2b00      	cmp	r3, #0
    545e:	d109      	bne.n	5474 <system_gclk_gen_get_hz+0x88>
    5460:	68fb      	ldr	r3, [r7, #12]
    5462:	2b01      	cmp	r3, #1
    5464:	d906      	bls.n	5474 <system_gclk_gen_get_hz+0x88>
		gen_input_hz /= divider;
    5466:	4b10      	ldr	r3, [pc, #64]	; (54a8 <system_gclk_gen_get_hz+0xbc>)
    5468:	68f9      	ldr	r1, [r7, #12]
    546a:	6978      	ldr	r0, [r7, #20]
    546c:	4798      	blx	r3
    546e:	0003      	movs	r3, r0
    5470:	617b      	str	r3, [r7, #20]
    5472:	e00a      	b.n	548a <system_gclk_gen_get_hz+0x9e>
	} else if (divsel) {
    5474:	2313      	movs	r3, #19
    5476:	18fb      	adds	r3, r7, r3
    5478:	781b      	ldrb	r3, [r3, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	d005      	beq.n	548a <system_gclk_gen_get_hz+0x9e>
		gen_input_hz >>= (divider+1);
    547e:	68fb      	ldr	r3, [r7, #12]
    5480:	3301      	adds	r3, #1
    5482:	697a      	ldr	r2, [r7, #20]
    5484:	40da      	lsrs	r2, r3
    5486:	0013      	movs	r3, r2
    5488:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    548a:	697b      	ldr	r3, [r7, #20]
}
    548c:	0018      	movs	r0, r3
    548e:	46bd      	mov	sp, r7
    5490:	b006      	add	sp, #24
    5492:	bd80      	pop	{r7, pc}
    5494:	00005215 	.word	0x00005215
    5498:	000051ed 	.word	0x000051ed
    549c:	40001800 	.word	0x40001800
    54a0:	00004971 	.word	0x00004971
    54a4:	00005201 	.word	0x00005201
    54a8:	00021069 	.word	0x00021069

000054ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b082      	sub	sp, #8
    54b0:	af00      	add	r7, sp, #0
    54b2:	0002      	movs	r2, r0
    54b4:	6039      	str	r1, [r7, #0]
    54b6:	1dfb      	adds	r3, r7, #7
    54b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    54ba:	1dfb      	adds	r3, r7, #7
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	0018      	movs	r0, r3
    54c0:	4b08      	ldr	r3, [pc, #32]	; (54e4 <system_gclk_chan_set_config+0x38>)
    54c2:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    54c4:	4908      	ldr	r1, [pc, #32]	; (54e8 <system_gclk_chan_set_config+0x3c>)
    54c6:	1dfb      	adds	r3, r7, #7
    54c8:	781b      	ldrb	r3, [r3, #0]
    54ca:	683a      	ldr	r2, [r7, #0]
    54cc:	7812      	ldrb	r2, [r2, #0]
    54ce:	0010      	movs	r0, r2
    54d0:	220f      	movs	r2, #15
    54d2:	4002      	ands	r2, r0
    54d4:	3320      	adds	r3, #32
    54d6:	009b      	lsls	r3, r3, #2
    54d8:	505a      	str	r2, [r3, r1]


}
    54da:	46c0      	nop			; (mov r8, r8)
    54dc:	46bd      	mov	sp, r7
    54de:	b002      	add	sp, #8
    54e0:	bd80      	pop	{r7, pc}
    54e2:	46c0      	nop			; (mov r8, r8)
    54e4:	00005545 	.word	0x00005545
    54e8:	40001800 	.word	0x40001800

000054ec <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	b082      	sub	sp, #8
    54f0:	af00      	add	r7, sp, #0
    54f2:	0002      	movs	r2, r0
    54f4:	1dfb      	adds	r3, r7, #7
    54f6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    54f8:	4b0f      	ldr	r3, [pc, #60]	; (5538 <system_gclk_chan_enable+0x4c>)
    54fa:	4798      	blx	r3

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    54fc:	490f      	ldr	r1, [pc, #60]	; (553c <system_gclk_chan_enable+0x50>)
    54fe:	1dfb      	adds	r3, r7, #7
    5500:	781b      	ldrb	r3, [r3, #0]
    5502:	480e      	ldr	r0, [pc, #56]	; (553c <system_gclk_chan_enable+0x50>)
    5504:	1dfa      	adds	r2, r7, #7
    5506:	7812      	ldrb	r2, [r2, #0]
    5508:	3220      	adds	r2, #32
    550a:	0092      	lsls	r2, r2, #2
    550c:	5812      	ldr	r2, [r2, r0]
    550e:	2040      	movs	r0, #64	; 0x40
    5510:	4302      	orrs	r2, r0
    5512:	3320      	adds	r3, #32
    5514:	009b      	lsls	r3, r3, #2
    5516:	505a      	str	r2, [r3, r1]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    5518:	46c0      	nop			; (mov r8, r8)
    551a:	4a08      	ldr	r2, [pc, #32]	; (553c <system_gclk_chan_enable+0x50>)
    551c:	1dfb      	adds	r3, r7, #7
    551e:	781b      	ldrb	r3, [r3, #0]
    5520:	3320      	adds	r3, #32
    5522:	009b      	lsls	r3, r3, #2
    5524:	589b      	ldr	r3, [r3, r2]
    5526:	2240      	movs	r2, #64	; 0x40
    5528:	4013      	ands	r3, r2
    552a:	d0f6      	beq.n	551a <system_gclk_chan_enable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    552c:	4b04      	ldr	r3, [pc, #16]	; (5540 <system_gclk_chan_enable+0x54>)
    552e:	4798      	blx	r3
}
    5530:	46c0      	nop			; (mov r8, r8)
    5532:	46bd      	mov	sp, r7
    5534:	b002      	add	sp, #8
    5536:	bd80      	pop	{r7, pc}
    5538:	000051ed 	.word	0x000051ed
    553c:	40001800 	.word	0x40001800
    5540:	00005201 	.word	0x00005201

00005544 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5544:	b580      	push	{r7, lr}
    5546:	b082      	sub	sp, #8
    5548:	af00      	add	r7, sp, #0
    554a:	0002      	movs	r2, r0
    554c:	1dfb      	adds	r3, r7, #7
    554e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    5550:	4b0f      	ldr	r3, [pc, #60]	; (5590 <system_gclk_chan_disable+0x4c>)
    5552:	4798      	blx	r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    5554:	490f      	ldr	r1, [pc, #60]	; (5594 <system_gclk_chan_disable+0x50>)
    5556:	1dfb      	adds	r3, r7, #7
    5558:	781b      	ldrb	r3, [r3, #0]
    555a:	480e      	ldr	r0, [pc, #56]	; (5594 <system_gclk_chan_disable+0x50>)
    555c:	1dfa      	adds	r2, r7, #7
    555e:	7812      	ldrb	r2, [r2, #0]
    5560:	3220      	adds	r2, #32
    5562:	0092      	lsls	r2, r2, #2
    5564:	5812      	ldr	r2, [r2, r0]
    5566:	2040      	movs	r0, #64	; 0x40
    5568:	4382      	bics	r2, r0
    556a:	3320      	adds	r3, #32
    556c:	009b      	lsls	r3, r3, #2
    556e:	505a      	str	r2, [r3, r1]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    5570:	46c0      	nop			; (mov r8, r8)
    5572:	4a08      	ldr	r2, [pc, #32]	; (5594 <system_gclk_chan_disable+0x50>)
    5574:	1dfb      	adds	r3, r7, #7
    5576:	781b      	ldrb	r3, [r3, #0]
    5578:	3320      	adds	r3, #32
    557a:	009b      	lsls	r3, r3, #2
    557c:	589b      	ldr	r3, [r3, r2]
    557e:	2240      	movs	r2, #64	; 0x40
    5580:	4013      	ands	r3, r2
    5582:	d1f6      	bne.n	5572 <system_gclk_chan_disable+0x2e>
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
    5584:	4b04      	ldr	r3, [pc, #16]	; (5598 <system_gclk_chan_disable+0x54>)
    5586:	4798      	blx	r3
}
    5588:	46c0      	nop			; (mov r8, r8)
    558a:	46bd      	mov	sp, r7
    558c:	b002      	add	sp, #8
    558e:	bd80      	pop	{r7, pc}
    5590:	000051ed 	.word	0x000051ed
    5594:	40001800 	.word	0x40001800
    5598:	00005201 	.word	0x00005201

0000559c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    559c:	b580      	push	{r7, lr}
    559e:	b084      	sub	sp, #16
    55a0:	af00      	add	r7, sp, #0
    55a2:	0002      	movs	r2, r0
    55a4:	1dfb      	adds	r3, r7, #7
    55a6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    55a8:	4b0d      	ldr	r3, [pc, #52]	; (55e0 <system_gclk_chan_get_hz+0x44>)
    55aa:	4798      	blx	r3
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    55ac:	4a0d      	ldr	r2, [pc, #52]	; (55e4 <system_gclk_chan_get_hz+0x48>)
    55ae:	1dfb      	adds	r3, r7, #7
    55b0:	781b      	ldrb	r3, [r3, #0]
    55b2:	3320      	adds	r3, #32
    55b4:	009b      	lsls	r3, r3, #2
    55b6:	589b      	ldr	r3, [r3, r2]
    55b8:	071b      	lsls	r3, r3, #28
    55ba:	0f1b      	lsrs	r3, r3, #28
    55bc:	b2da      	uxtb	r2, r3
    55be:	230f      	movs	r3, #15
    55c0:	18fb      	adds	r3, r7, r3
    55c2:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
    55c4:	4b08      	ldr	r3, [pc, #32]	; (55e8 <system_gclk_chan_get_hz+0x4c>)
    55c6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    55c8:	230f      	movs	r3, #15
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	0018      	movs	r0, r3
    55d0:	4b06      	ldr	r3, [pc, #24]	; (55ec <system_gclk_chan_get_hz+0x50>)
    55d2:	4798      	blx	r3
    55d4:	0003      	movs	r3, r0
}
    55d6:	0018      	movs	r0, r3
    55d8:	46bd      	mov	sp, r7
    55da:	b004      	add	sp, #16
    55dc:	bd80      	pop	{r7, pc}
    55de:	46c0      	nop			; (mov r8, r8)
    55e0:	000051ed 	.word	0x000051ed
    55e4:	40001800 	.word	0x40001800
    55e8:	00005201 	.word	0x00005201
    55ec:	000053ed 	.word	0x000053ed

000055f0 <system_pinmux_get_group_from_gpio_pin>:
{
    55f0:	b580      	push	{r7, lr}
    55f2:	b084      	sub	sp, #16
    55f4:	af00      	add	r7, sp, #0
    55f6:	0002      	movs	r2, r0
    55f8:	1dfb      	adds	r3, r7, #7
    55fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    55fc:	230f      	movs	r3, #15
    55fe:	18fb      	adds	r3, r7, r3
    5600:	1dfa      	adds	r2, r7, #7
    5602:	7812      	ldrb	r2, [r2, #0]
    5604:	09d2      	lsrs	r2, r2, #7
    5606:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5608:	230e      	movs	r3, #14
    560a:	18fb      	adds	r3, r7, r3
    560c:	1dfa      	adds	r2, r7, #7
    560e:	7812      	ldrb	r2, [r2, #0]
    5610:	0952      	lsrs	r2, r2, #5
    5612:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5614:	4b0d      	ldr	r3, [pc, #52]	; (564c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5616:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5618:	230f      	movs	r3, #15
    561a:	18fb      	adds	r3, r7, r3
    561c:	781b      	ldrb	r3, [r3, #0]
    561e:	2b00      	cmp	r3, #0
    5620:	d10f      	bne.n	5642 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5622:	230f      	movs	r3, #15
    5624:	18fb      	adds	r3, r7, r3
    5626:	781b      	ldrb	r3, [r3, #0]
    5628:	009b      	lsls	r3, r3, #2
    562a:	2210      	movs	r2, #16
    562c:	4694      	mov	ip, r2
    562e:	44bc      	add	ip, r7
    5630:	4463      	add	r3, ip
    5632:	3b08      	subs	r3, #8
    5634:	681a      	ldr	r2, [r3, #0]
    5636:	230e      	movs	r3, #14
    5638:	18fb      	adds	r3, r7, r3
    563a:	781b      	ldrb	r3, [r3, #0]
    563c:	01db      	lsls	r3, r3, #7
    563e:	18d3      	adds	r3, r2, r3
    5640:	e000      	b.n	5644 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5642:	2300      	movs	r3, #0
}
    5644:	0018      	movs	r0, r3
    5646:	46bd      	mov	sp, r7
    5648:	b004      	add	sp, #16
    564a:	bd80      	pop	{r7, pc}
    564c:	40002800 	.word	0x40002800

00005650 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5650:	b580      	push	{r7, lr}
    5652:	b088      	sub	sp, #32
    5654:	af00      	add	r7, sp, #0
    5656:	60f8      	str	r0, [r7, #12]
    5658:	60b9      	str	r1, [r7, #8]
    565a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    565c:	2300      	movs	r3, #0
    565e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	78db      	ldrb	r3, [r3, #3]
    5664:	2201      	movs	r2, #1
    5666:	4053      	eors	r3, r2
    5668:	b2db      	uxtb	r3, r3
    566a:	2b00      	cmp	r3, #0
    566c:	d035      	beq.n	56da <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	781b      	ldrb	r3, [r3, #0]
    5672:	2b80      	cmp	r3, #128	; 0x80
    5674:	d00b      	beq.n	568e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    5676:	69fb      	ldr	r3, [r7, #28]
    5678:	2280      	movs	r2, #128	; 0x80
    567a:	0252      	lsls	r2, r2, #9
    567c:	4313      	orrs	r3, r2
    567e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	781b      	ldrb	r3, [r3, #0]
    5684:	061b      	lsls	r3, r3, #24
    5686:	001a      	movs	r2, r3
    5688:	69fb      	ldr	r3, [r7, #28]
    568a:	4313      	orrs	r3, r2
    568c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    568e:	687b      	ldr	r3, [r7, #4]
    5690:	785b      	ldrb	r3, [r3, #1]
    5692:	2b00      	cmp	r3, #0
    5694:	d003      	beq.n	569e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    569a:	2b02      	cmp	r3, #2
    569c:	d110      	bne.n	56c0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    569e:	69fb      	ldr	r3, [r7, #28]
    56a0:	2280      	movs	r2, #128	; 0x80
    56a2:	0292      	lsls	r2, r2, #10
    56a4:	4313      	orrs	r3, r2
    56a6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    56a8:	687b      	ldr	r3, [r7, #4]
    56aa:	789b      	ldrb	r3, [r3, #2]
    56ac:	2b00      	cmp	r3, #0
    56ae:	d004      	beq.n	56ba <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    56b0:	69fb      	ldr	r3, [r7, #28]
    56b2:	2280      	movs	r2, #128	; 0x80
    56b4:	02d2      	lsls	r2, r2, #11
    56b6:	4313      	orrs	r3, r2
    56b8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    56ba:	68fb      	ldr	r3, [r7, #12]
    56bc:	68ba      	ldr	r2, [r7, #8]
    56be:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	785b      	ldrb	r3, [r3, #1]
    56c4:	2b01      	cmp	r3, #1
    56c6:	d003      	beq.n	56d0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    56cc:	2b02      	cmp	r3, #2
    56ce:	d107      	bne.n	56e0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    56d0:	69fb      	ldr	r3, [r7, #28]
    56d2:	4a22      	ldr	r2, [pc, #136]	; (575c <_system_pinmux_config+0x10c>)
    56d4:	4013      	ands	r3, r2
    56d6:	61fb      	str	r3, [r7, #28]
    56d8:	e002      	b.n	56e0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	68ba      	ldr	r2, [r7, #8]
    56de:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    56e0:	68bb      	ldr	r3, [r7, #8]
    56e2:	041b      	lsls	r3, r3, #16
    56e4:	0c1b      	lsrs	r3, r3, #16
    56e6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    56e8:	68bb      	ldr	r3, [r7, #8]
    56ea:	0c1b      	lsrs	r3, r3, #16
    56ec:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56ee:	69ba      	ldr	r2, [r7, #24]
    56f0:	69fb      	ldr	r3, [r7, #28]
    56f2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    56f4:	22a0      	movs	r2, #160	; 0xa0
    56f6:	05d2      	lsls	r2, r2, #23
    56f8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56fa:	68fb      	ldr	r3, [r7, #12]
    56fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    56fe:	697a      	ldr	r2, [r7, #20]
    5700:	69fb      	ldr	r3, [r7, #28]
    5702:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5704:	22d0      	movs	r2, #208	; 0xd0
    5706:	0612      	lsls	r2, r2, #24
    5708:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    570e:	687b      	ldr	r3, [r7, #4]
    5710:	78db      	ldrb	r3, [r3, #3]
    5712:	2201      	movs	r2, #1
    5714:	4053      	eors	r3, r2
    5716:	b2db      	uxtb	r3, r3
    5718:	2b00      	cmp	r3, #0
    571a:	d01a      	beq.n	5752 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    571c:	69fa      	ldr	r2, [r7, #28]
    571e:	2380      	movs	r3, #128	; 0x80
    5720:	02db      	lsls	r3, r3, #11
    5722:	4013      	ands	r3, r2
    5724:	d00a      	beq.n	573c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	789b      	ldrb	r3, [r3, #2]
    572a:	2b01      	cmp	r3, #1
    572c:	d103      	bne.n	5736 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	68ba      	ldr	r2, [r7, #8]
    5732:	619a      	str	r2, [r3, #24]
    5734:	e002      	b.n	573c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    5736:	68fb      	ldr	r3, [r7, #12]
    5738:	68ba      	ldr	r2, [r7, #8]
    573a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    573c:	687b      	ldr	r3, [r7, #4]
    573e:	785b      	ldrb	r3, [r3, #1]
    5740:	2b01      	cmp	r3, #1
    5742:	d003      	beq.n	574c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    5744:	687b      	ldr	r3, [r7, #4]
    5746:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5748:	2b02      	cmp	r3, #2
    574a:	d102      	bne.n	5752 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    574c:	68fb      	ldr	r3, [r7, #12]
    574e:	68ba      	ldr	r2, [r7, #8]
    5750:	609a      	str	r2, [r3, #8]
		}
	}
}
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	46bd      	mov	sp, r7
    5756:	b008      	add	sp, #32
    5758:	bd80      	pop	{r7, pc}
    575a:	46c0      	nop			; (mov r8, r8)
    575c:	fffbffff 	.word	0xfffbffff

00005760 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5760:	b580      	push	{r7, lr}
    5762:	b084      	sub	sp, #16
    5764:	af00      	add	r7, sp, #0
    5766:	0002      	movs	r2, r0
    5768:	6039      	str	r1, [r7, #0]
    576a:	1dfb      	adds	r3, r7, #7
    576c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    576e:	1dfb      	adds	r3, r7, #7
    5770:	781b      	ldrb	r3, [r3, #0]
    5772:	0018      	movs	r0, r3
    5774:	4b0a      	ldr	r3, [pc, #40]	; (57a0 <system_pinmux_pin_set_config+0x40>)
    5776:	4798      	blx	r3
    5778:	0003      	movs	r3, r0
    577a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    577c:	1dfb      	adds	r3, r7, #7
    577e:	781b      	ldrb	r3, [r3, #0]
    5780:	221f      	movs	r2, #31
    5782:	4013      	ands	r3, r2
    5784:	2201      	movs	r2, #1
    5786:	409a      	lsls	r2, r3
    5788:	0013      	movs	r3, r2
    578a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    578c:	683a      	ldr	r2, [r7, #0]
    578e:	68b9      	ldr	r1, [r7, #8]
    5790:	68fb      	ldr	r3, [r7, #12]
    5792:	0018      	movs	r0, r3
    5794:	4b03      	ldr	r3, [pc, #12]	; (57a4 <system_pinmux_pin_set_config+0x44>)
    5796:	4798      	blx	r3
}
    5798:	46c0      	nop			; (mov r8, r8)
    579a:	46bd      	mov	sp, r7
    579c:	b004      	add	sp, #16
    579e:	bd80      	pop	{r7, pc}
    57a0:	000055f1 	.word	0x000055f1
    57a4:	00005651 	.word	0x00005651

000057a8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    57a8:	b580      	push	{r7, lr}
    57aa:	af00      	add	r7, sp, #0
	return;
    57ac:	46c0      	nop			; (mov r8, r8)
}
    57ae:	46bd      	mov	sp, r7
    57b0:	bd80      	pop	{r7, pc}
	...

000057b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    57b8:	4b06      	ldr	r3, [pc, #24]	; (57d4 <system_init+0x20>)
    57ba:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    57bc:	4b06      	ldr	r3, [pc, #24]	; (57d8 <system_init+0x24>)
    57be:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    57c0:	4b06      	ldr	r3, [pc, #24]	; (57dc <system_init+0x28>)
    57c2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    57c4:	4b06      	ldr	r3, [pc, #24]	; (57e0 <system_init+0x2c>)
    57c6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    57c8:	4b06      	ldr	r3, [pc, #24]	; (57e4 <system_init+0x30>)
    57ca:	4798      	blx	r3
}
    57cc:	46c0      	nop			; (mov r8, r8)
    57ce:	46bd      	mov	sp, r7
    57d0:	bd80      	pop	{r7, pc}
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	00004ec1 	.word	0x00004ec1
    57d8:	00000391 	.word	0x00000391
    57dc:	000057a9 	.word	0x000057a9
    57e0:	00001685 	.word	0x00001685
    57e4:	000057a9 	.word	0x000057a9

000057e8 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    57e8:	b580      	push	{r7, lr}
    57ea:	b084      	sub	sp, #16
    57ec:	af00      	add	r7, sp, #0
    57ee:	60f8      	str	r0, [r7, #12]
    57f0:	60b9      	str	r1, [r7, #8]
    57f2:	1dfb      	adds	r3, r7, #7
    57f4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    57f6:	1dfb      	adds	r3, r7, #7
    57f8:	781a      	ldrb	r2, [r3, #0]
    57fa:	68fb      	ldr	r3, [r7, #12]
    57fc:	3202      	adds	r2, #2
    57fe:	0092      	lsls	r2, r2, #2
    5800:	68b9      	ldr	r1, [r7, #8]
    5802:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5804:	1dfb      	adds	r3, r7, #7
    5806:	781b      	ldrb	r3, [r3, #0]
    5808:	2b02      	cmp	r3, #2
    580a:	d107      	bne.n	581c <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	7e1b      	ldrb	r3, [r3, #24]
    5810:	2210      	movs	r2, #16
    5812:	4313      	orrs	r3, r2
    5814:	b2da      	uxtb	r2, r3
    5816:	68fb      	ldr	r3, [r7, #12]
    5818:	761a      	strb	r2, [r3, #24]
    581a:	e019      	b.n	5850 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    581c:	1dfb      	adds	r3, r7, #7
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	2b03      	cmp	r3, #3
    5822:	d107      	bne.n	5834 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5824:	68fb      	ldr	r3, [r7, #12]
    5826:	7e1b      	ldrb	r3, [r3, #24]
    5828:	2220      	movs	r2, #32
    582a:	4313      	orrs	r3, r2
    582c:	b2da      	uxtb	r2, r3
    582e:	68fb      	ldr	r3, [r7, #12]
    5830:	761a      	strb	r2, [r3, #24]
    5832:	e00d      	b.n	5850 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    5834:	68fb      	ldr	r3, [r7, #12]
    5836:	7e1b      	ldrb	r3, [r3, #24]
    5838:	b25a      	sxtb	r2, r3
    583a:	1dfb      	adds	r3, r7, #7
    583c:	781b      	ldrb	r3, [r3, #0]
    583e:	2101      	movs	r1, #1
    5840:	4099      	lsls	r1, r3
    5842:	000b      	movs	r3, r1
    5844:	b25b      	sxtb	r3, r3
    5846:	4313      	orrs	r3, r2
    5848:	b25b      	sxtb	r3, r3
    584a:	b2da      	uxtb	r2, r3
    584c:	68fb      	ldr	r3, [r7, #12]
    584e:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    5850:	2300      	movs	r3, #0
}
    5852:	0018      	movs	r0, r3
    5854:	46bd      	mov	sp, r7
    5856:	b004      	add	sp, #16
    5858:	bd80      	pop	{r7, pc}
	...

0000585c <TC0_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    585c:	b580      	push	{r7, lr}
    585e:	af00      	add	r7, sp, #0
    5860:	2000      	movs	r0, #0
    5862:	4b02      	ldr	r3, [pc, #8]	; (586c <TC0_Handler+0x10>)
    5864:	4798      	blx	r3
    5866:	46c0      	nop			; (mov r8, r8)
    5868:	46bd      	mov	sp, r7
    586a:	bd80      	pop	{r7, pc}
    586c:	000058c1 	.word	0x000058c1

00005870 <TC1_Handler>:
    5870:	b580      	push	{r7, lr}
    5872:	af00      	add	r7, sp, #0
    5874:	2001      	movs	r0, #1
    5876:	4b02      	ldr	r3, [pc, #8]	; (5880 <TC1_Handler+0x10>)
    5878:	4798      	blx	r3
    587a:	46c0      	nop			; (mov r8, r8)
    587c:	46bd      	mov	sp, r7
    587e:	bd80      	pop	{r7, pc}
    5880:	000058c1 	.word	0x000058c1

00005884 <TC2_Handler>:
    5884:	b580      	push	{r7, lr}
    5886:	af00      	add	r7, sp, #0
    5888:	2002      	movs	r0, #2
    588a:	4b02      	ldr	r3, [pc, #8]	; (5894 <TC2_Handler+0x10>)
    588c:	4798      	blx	r3
    588e:	46c0      	nop			; (mov r8, r8)
    5890:	46bd      	mov	sp, r7
    5892:	bd80      	pop	{r7, pc}
    5894:	000058c1 	.word	0x000058c1

00005898 <TC3_Handler>:
    5898:	b580      	push	{r7, lr}
    589a:	af00      	add	r7, sp, #0
    589c:	2003      	movs	r0, #3
    589e:	4b02      	ldr	r3, [pc, #8]	; (58a8 <TC3_Handler+0x10>)
    58a0:	4798      	blx	r3
    58a2:	46c0      	nop			; (mov r8, r8)
    58a4:	46bd      	mov	sp, r7
    58a6:	bd80      	pop	{r7, pc}
    58a8:	000058c1 	.word	0x000058c1

000058ac <TC4_Handler>:
    58ac:	b580      	push	{r7, lr}
    58ae:	af00      	add	r7, sp, #0
    58b0:	2004      	movs	r0, #4
    58b2:	4b02      	ldr	r3, [pc, #8]	; (58bc <TC4_Handler+0x10>)
    58b4:	4798      	blx	r3
    58b6:	46c0      	nop			; (mov r8, r8)
    58b8:	46bd      	mov	sp, r7
    58ba:	bd80      	pop	{r7, pc}
    58bc:	000058c1 	.word	0x000058c1

000058c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    58c0:	b580      	push	{r7, lr}
    58c2:	b084      	sub	sp, #16
    58c4:	af00      	add	r7, sp, #0
    58c6:	0002      	movs	r2, r0
    58c8:	1dfb      	adds	r3, r7, #7
    58ca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    58cc:	1dfb      	adds	r3, r7, #7
    58ce:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    58d0:	4b28      	ldr	r3, [pc, #160]	; (5974 <_tc_interrupt_handler+0xb4>)
    58d2:	0092      	lsls	r2, r2, #2
    58d4:	58d3      	ldr	r3, [r2, r3]
    58d6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58d8:	68fb      	ldr	r3, [r7, #12]
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	7a9b      	ldrb	r3, [r3, #10]
    58de:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    58e0:	68fa      	ldr	r2, [r7, #12]
    58e2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58e4:	4013      	ands	r3, r2
    58e6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    58e8:	68fb      	ldr	r3, [r7, #12]
    58ea:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    58ec:	230b      	movs	r3, #11
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	400a      	ands	r2, r1
    58f2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    58f4:	230b      	movs	r3, #11
    58f6:	18fb      	adds	r3, r7, r3
    58f8:	781b      	ldrb	r3, [r3, #0]
    58fa:	2201      	movs	r2, #1
    58fc:	4013      	ands	r3, r2
    58fe:	d008      	beq.n	5912 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    5900:	68fb      	ldr	r3, [r7, #12]
    5902:	689b      	ldr	r3, [r3, #8]
    5904:	68fa      	ldr	r2, [r7, #12]
    5906:	0010      	movs	r0, r2
    5908:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    590a:	68fb      	ldr	r3, [r7, #12]
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	2201      	movs	r2, #1
    5910:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    5912:	230b      	movs	r3, #11
    5914:	18fb      	adds	r3, r7, r3
    5916:	781b      	ldrb	r3, [r3, #0]
    5918:	2202      	movs	r2, #2
    591a:	4013      	ands	r3, r2
    591c:	d008      	beq.n	5930 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	68db      	ldr	r3, [r3, #12]
    5922:	68fa      	ldr	r2, [r7, #12]
    5924:	0010      	movs	r0, r2
    5926:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    5928:	68fb      	ldr	r3, [r7, #12]
    592a:	681b      	ldr	r3, [r3, #0]
    592c:	2202      	movs	r2, #2
    592e:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    5930:	230b      	movs	r3, #11
    5932:	18fb      	adds	r3, r7, r3
    5934:	781b      	ldrb	r3, [r3, #0]
    5936:	2210      	movs	r2, #16
    5938:	4013      	ands	r3, r2
    593a:	d008      	beq.n	594e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    593c:	68fb      	ldr	r3, [r7, #12]
    593e:	691b      	ldr	r3, [r3, #16]
    5940:	68fa      	ldr	r2, [r7, #12]
    5942:	0010      	movs	r0, r2
    5944:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    5946:	68fb      	ldr	r3, [r7, #12]
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	2210      	movs	r2, #16
    594c:	729a      	strb	r2, [r3, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    594e:	230b      	movs	r3, #11
    5950:	18fb      	adds	r3, r7, r3
    5952:	781b      	ldrb	r3, [r3, #0]
    5954:	2220      	movs	r2, #32
    5956:	4013      	ands	r3, r2
    5958:	d008      	beq.n	596c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    595a:	68fb      	ldr	r3, [r7, #12]
    595c:	695b      	ldr	r3, [r3, #20]
    595e:	68fa      	ldr	r2, [r7, #12]
    5960:	0010      	movs	r0, r2
    5962:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    5964:	68fb      	ldr	r3, [r7, #12]
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	2220      	movs	r2, #32
    596a:	729a      	strb	r2, [r3, #10]
	}
}
    596c:	46c0      	nop			; (mov r8, r8)
    596e:	46bd      	mov	sp, r7
    5970:	b004      	add	sp, #16
    5972:	bd80      	pop	{r7, pc}
    5974:	20001228 	.word	0x20001228

00005978 <system_gclk_chan_get_config_defaults>:
{
    5978:	b580      	push	{r7, lr}
    597a:	b082      	sub	sp, #8
    597c:	af00      	add	r7, sp, #0
    597e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	2200      	movs	r2, #0
    5984:	701a      	strb	r2, [r3, #0]
}
    5986:	46c0      	nop			; (mov r8, r8)
    5988:	46bd      	mov	sp, r7
    598a:	b002      	add	sp, #8
    598c:	bd80      	pop	{r7, pc}
	...

00005990 <system_apb_clock_set_mask>:
{
    5990:	b580      	push	{r7, lr}
    5992:	b082      	sub	sp, #8
    5994:	af00      	add	r7, sp, #0
    5996:	0002      	movs	r2, r0
    5998:	6039      	str	r1, [r7, #0]
    599a:	1dfb      	adds	r3, r7, #7
    599c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    599e:	1dfb      	adds	r3, r7, #7
    59a0:	781b      	ldrb	r3, [r3, #0]
    59a2:	2b04      	cmp	r3, #4
    59a4:	d827      	bhi.n	59f6 <system_apb_clock_set_mask+0x66>
    59a6:	009a      	lsls	r2, r3, #2
    59a8:	4b16      	ldr	r3, [pc, #88]	; (5a04 <system_apb_clock_set_mask+0x74>)
    59aa:	18d3      	adds	r3, r2, r3
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    59b0:	4b15      	ldr	r3, [pc, #84]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59b2:	4a15      	ldr	r2, [pc, #84]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59b4:	6951      	ldr	r1, [r2, #20]
    59b6:	683a      	ldr	r2, [r7, #0]
    59b8:	430a      	orrs	r2, r1
    59ba:	615a      	str	r2, [r3, #20]
			break;
    59bc:	e01d      	b.n	59fa <system_apb_clock_set_mask+0x6a>
			MCLK->APBBMASK.reg |= mask;
    59be:	4b12      	ldr	r3, [pc, #72]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59c0:	4a11      	ldr	r2, [pc, #68]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59c2:	6991      	ldr	r1, [r2, #24]
    59c4:	683a      	ldr	r2, [r7, #0]
    59c6:	430a      	orrs	r2, r1
    59c8:	619a      	str	r2, [r3, #24]
			break;
    59ca:	e016      	b.n	59fa <system_apb_clock_set_mask+0x6a>
			MCLK->APBCMASK.reg |= mask;
    59cc:	4b0e      	ldr	r3, [pc, #56]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59ce:	4a0e      	ldr	r2, [pc, #56]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59d0:	69d1      	ldr	r1, [r2, #28]
    59d2:	683a      	ldr	r2, [r7, #0]
    59d4:	430a      	orrs	r2, r1
    59d6:	61da      	str	r2, [r3, #28]
			break;
    59d8:	e00f      	b.n	59fa <system_apb_clock_set_mask+0x6a>
			MCLK->APBDMASK.reg |= mask;
    59da:	4b0b      	ldr	r3, [pc, #44]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59dc:	4a0a      	ldr	r2, [pc, #40]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59de:	6a11      	ldr	r1, [r2, #32]
    59e0:	683a      	ldr	r2, [r7, #0]
    59e2:	430a      	orrs	r2, r1
    59e4:	621a      	str	r2, [r3, #32]
			break;
    59e6:	e008      	b.n	59fa <system_apb_clock_set_mask+0x6a>
			MCLK->APBEMASK.reg |= mask;
    59e8:	4b07      	ldr	r3, [pc, #28]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59ea:	4a07      	ldr	r2, [pc, #28]	; (5a08 <system_apb_clock_set_mask+0x78>)
    59ec:	6a51      	ldr	r1, [r2, #36]	; 0x24
    59ee:	683a      	ldr	r2, [r7, #0]
    59f0:	430a      	orrs	r2, r1
    59f2:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    59f4:	e001      	b.n	59fa <system_apb_clock_set_mask+0x6a>
			return STATUS_ERR_INVALID_ARG;
    59f6:	2317      	movs	r3, #23
    59f8:	e000      	b.n	59fc <system_apb_clock_set_mask+0x6c>
	return STATUS_OK;
    59fa:	2300      	movs	r3, #0
}
    59fc:	0018      	movs	r0, r3
    59fe:	46bd      	mov	sp, r7
    5a00:	b002      	add	sp, #8
    5a02:	bd80      	pop	{r7, pc}
    5a04:	0002acc0 	.word	0x0002acc0
    5a08:	40000400 	.word	0x40000400

00005a0c <system_pinmux_get_config_defaults>:
{
    5a0c:	b580      	push	{r7, lr}
    5a0e:	b082      	sub	sp, #8
    5a10:	af00      	add	r7, sp, #0
    5a12:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	2280      	movs	r2, #128	; 0x80
    5a18:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	2200      	movs	r2, #0
    5a1e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5a20:	687b      	ldr	r3, [r7, #4]
    5a22:	2201      	movs	r2, #1
    5a24:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5a26:	687b      	ldr	r3, [r7, #4]
    5a28:	2200      	movs	r2, #0
    5a2a:	70da      	strb	r2, [r3, #3]
}
    5a2c:	46c0      	nop			; (mov r8, r8)
    5a2e:	46bd      	mov	sp, r7
    5a30:	b002      	add	sp, #8
    5a32:	bd80      	pop	{r7, pc}

00005a34 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b084      	sub	sp, #16
    5a38:	af00      	add	r7, sp, #0
    5a3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    5a42:	68fb      	ldr	r3, [r7, #12]
    5a44:	691b      	ldr	r3, [r3, #16]
    5a46:	1e5a      	subs	r2, r3, #1
    5a48:	4193      	sbcs	r3, r2
    5a4a:	b2db      	uxtb	r3, r3
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
#endif
}
    5a4c:	0018      	movs	r0, r3
    5a4e:	46bd      	mov	sp, r7
    5a50:	b004      	add	sp, #16
    5a52:	bd80      	pop	{r7, pc}

00005a54 <tc_sync_read_count>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_sync_read_count(
		const struct tc_module *const module_inst)
{
    5a54:	b580      	push	{r7, lr}
    5a56:	b084      	sub	sp, #16
    5a58:	af00      	add	r7, sp, #0
    5a5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5a5c:	687b      	ldr	r3, [r7, #4]
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5a62:	46c0      	nop			; (mov r8, r8)
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	0018      	movs	r0, r3
    5a68:	4b0a      	ldr	r3, [pc, #40]	; (5a94 <tc_sync_read_count+0x40>)
    5a6a:	4798      	blx	r3
    5a6c:	1e03      	subs	r3, r0, #0
    5a6e:	d1f9      	bne.n	5a64 <tc_sync_read_count+0x10>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	2200      	movs	r2, #0
    5a74:	711a      	strb	r2, [r3, #4]

	while (tc_is_syncing(module_inst)) {
    5a76:	46c0      	nop			; (mov r8, r8)
    5a78:	687b      	ldr	r3, [r7, #4]
    5a7a:	0018      	movs	r0, r3
    5a7c:	4b05      	ldr	r3, [pc, #20]	; (5a94 <tc_sync_read_count+0x40>)
    5a7e:	4798      	blx	r3
    5a80:	1e03      	subs	r3, r0, #0
    5a82:	d1f9      	bne.n	5a78 <tc_sync_read_count+0x24>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    5a84:	68fb      	ldr	r3, [r7, #12]
    5a86:	2280      	movs	r2, #128	; 0x80
    5a88:	715a      	strb	r2, [r3, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
#endif
}
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	46bd      	mov	sp, r7
    5a8e:	b004      	add	sp, #16
    5a90:	bd80      	pop	{r7, pc}
    5a92:	46c0      	nop			; (mov r8, r8)
    5a94:	00005a35 	.word	0x00005a35

00005a98 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5a98:	b590      	push	{r4, r7, lr}
    5a9a:	b089      	sub	sp, #36	; 0x24
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5aa0:	2308      	movs	r3, #8
    5aa2:	18fb      	adds	r3, r7, r3
    5aa4:	4a0e      	ldr	r2, [pc, #56]	; (5ae0 <_tc_get_inst_index+0x48>)
    5aa6:	ca13      	ldmia	r2!, {r0, r1, r4}
    5aa8:	c313      	stmia	r3!, {r0, r1, r4}
    5aaa:	ca03      	ldmia	r2!, {r0, r1}
    5aac:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5aae:	2300      	movs	r3, #0
    5ab0:	61fb      	str	r3, [r7, #28]
    5ab2:	e00d      	b.n	5ad0 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    5ab4:	2308      	movs	r3, #8
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	69fa      	ldr	r2, [r7, #28]
    5aba:	0092      	lsls	r2, r2, #2
    5abc:	58d2      	ldr	r2, [r2, r3]
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	429a      	cmp	r2, r3
    5ac2:	d102      	bne.n	5aca <_tc_get_inst_index+0x32>
			return i;
    5ac4:	69fb      	ldr	r3, [r7, #28]
    5ac6:	b2db      	uxtb	r3, r3
    5ac8:	e006      	b.n	5ad8 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5aca:	69fb      	ldr	r3, [r7, #28]
    5acc:	3301      	adds	r3, #1
    5ace:	61fb      	str	r3, [r7, #28]
    5ad0:	69fb      	ldr	r3, [r7, #28]
    5ad2:	2b04      	cmp	r3, #4
    5ad4:	d9ee      	bls.n	5ab4 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5ad6:	2300      	movs	r3, #0
}
    5ad8:	0018      	movs	r0, r3
    5ada:	46bd      	mov	sp, r7
    5adc:	b009      	add	sp, #36	; 0x24
    5ade:	bd90      	pop	{r4, r7, pc}
    5ae0:	0002acd4 	.word	0x0002acd4

00005ae4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5ae4:	b590      	push	{r4, r7, lr}
    5ae6:	b095      	sub	sp, #84	; 0x54
    5ae8:	af00      	add	r7, sp, #0
    5aea:	60f8      	str	r0, [r7, #12]
    5aec:	60b9      	str	r1, [r7, #8]
    5aee:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint32_t ctrla_tmp = 0;
    5af0:	2300      	movs	r3, #0
    5af2:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    5af4:	234b      	movs	r3, #75	; 0x4b
    5af6:	18fb      	adds	r3, r7, r3
    5af8:	2200      	movs	r2, #0
    5afa:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5afc:	2347      	movs	r3, #71	; 0x47
    5afe:	18fc      	adds	r4, r7, r3
    5b00:	68bb      	ldr	r3, [r7, #8]
    5b02:	0018      	movs	r0, r3
    5b04:	4bd6      	ldr	r3, [pc, #856]	; (5e60 <tc_init+0x37c>)
    5b06:	4798      	blx	r3
    5b08:	0003      	movs	r3, r0
    5b0a:	7023      	strb	r3, [r4, #0]
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    5b0c:	2340      	movs	r3, #64	; 0x40
    5b0e:	18fb      	adds	r3, r7, r3
    5b10:	4ad4      	ldr	r2, [pc, #848]	; (5e64 <tc_init+0x380>)
    5b12:	6811      	ldr	r1, [r2, #0]
    5b14:	6019      	str	r1, [r3, #0]
    5b16:	7912      	ldrb	r2, [r2, #4]
    5b18:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    5b1a:	2318      	movs	r3, #24
    5b1c:	18fb      	adds	r3, r7, r3
    5b1e:	4ad2      	ldr	r2, [pc, #840]	; (5e68 <tc_init+0x384>)
    5b20:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b22:	c313      	stmia	r3!, {r0, r1, r4}
    5b24:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b26:	c313      	stmia	r3!, {r0, r1, r4}
    5b28:	ca13      	ldmia	r2!, {r0, r1, r4}
    5b2a:	c313      	stmia	r3!, {r0, r1, r4}
    5b2c:	6812      	ldr	r2, [r2, #0]
    5b2e:	601a      	str	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5b30:	234a      	movs	r3, #74	; 0x4a
    5b32:	18fb      	adds	r3, r7, r3
    5b34:	2200      	movs	r2, #0
    5b36:	701a      	strb	r2, [r3, #0]
    5b38:	e00e      	b.n	5b58 <tc_init+0x74>
		module_inst->callback[i]        = NULL;
    5b3a:	234a      	movs	r3, #74	; 0x4a
    5b3c:	18fb      	adds	r3, r7, r3
    5b3e:	781a      	ldrb	r2, [r3, #0]
    5b40:	68fb      	ldr	r3, [r7, #12]
    5b42:	3202      	adds	r2, #2
    5b44:	0092      	lsls	r2, r2, #2
    5b46:	2100      	movs	r1, #0
    5b48:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    5b4a:	234a      	movs	r3, #74	; 0x4a
    5b4c:	18fb      	adds	r3, r7, r3
    5b4e:	781a      	ldrb	r2, [r3, #0]
    5b50:	234a      	movs	r3, #74	; 0x4a
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	3201      	adds	r2, #1
    5b56:	701a      	strb	r2, [r3, #0]
    5b58:	234a      	movs	r3, #74	; 0x4a
    5b5a:	18fb      	adds	r3, r7, r3
    5b5c:	781b      	ldrb	r3, [r3, #0]
    5b5e:	2b03      	cmp	r3, #3
    5b60:	d9eb      	bls.n	5b3a <tc_init+0x56>
	}
	module_inst->register_callback_mask     = 0x00;
    5b62:	68fb      	ldr	r3, [r7, #12]
    5b64:	2200      	movs	r2, #0
    5b66:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    5b68:	68fb      	ldr	r3, [r7, #12]
    5b6a:	2200      	movs	r2, #0
    5b6c:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    5b6e:	2347      	movs	r3, #71	; 0x47
    5b70:	18fb      	adds	r3, r7, r3
    5b72:	781a      	ldrb	r2, [r3, #0]
    5b74:	4bbd      	ldr	r3, [pc, #756]	; (5e6c <tc_init+0x388>)
    5b76:	0092      	lsls	r2, r2, #2
    5b78:	68f9      	ldr	r1, [r7, #12]
    5b7a:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    5b7c:	68fb      	ldr	r3, [r7, #12]
    5b7e:	68ba      	ldr	r2, [r7, #8]
    5b80:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5b82:	687b      	ldr	r3, [r7, #4]
    5b84:	2234      	movs	r2, #52	; 0x34
    5b86:	5c9a      	ldrb	r2, [r3, r2]
    5b88:	68fb      	ldr	r3, [r7, #12]
    5b8a:	769a      	strb	r2, [r3, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5b8c:	687b      	ldr	r3, [r7, #4]
    5b8e:	78db      	ldrb	r3, [r3, #3]
    5b90:	2b08      	cmp	r3, #8
    5b92:	d107      	bne.n	5ba4 <tc_init+0xc0>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    5b94:	2347      	movs	r3, #71	; 0x47
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	781b      	ldrb	r3, [r3, #0]
    5b9a:	2201      	movs	r2, #1
    5b9c:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5b9e:	d001      	beq.n	5ba4 <tc_init+0xc0>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5ba0:	2317      	movs	r3, #23
    5ba2:	e1ec      	b.n	5f7e <tc_init+0x49a>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	78da      	ldrb	r2, [r3, #3]
    5ba8:	68fb      	ldr	r3, [r7, #12]
    5baa:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5bac:	68bb      	ldr	r3, [r7, #8]
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	2201      	movs	r2, #1
    5bb2:	4013      	ands	r3, r2
    5bb4:	d001      	beq.n	5bba <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5bb6:	2305      	movs	r3, #5
    5bb8:	e1e1      	b.n	5f7e <tc_init+0x49a>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5bba:	68bb      	ldr	r3, [r7, #8]
    5bbc:	7adb      	ldrb	r3, [r3, #11]
    5bbe:	b2db      	uxtb	r3, r3
    5bc0:	001a      	movs	r2, r3
    5bc2:	2302      	movs	r3, #2
    5bc4:	4013      	ands	r3, r2
    5bc6:	d001      	beq.n	5bcc <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    5bc8:	231c      	movs	r3, #28
    5bca:	e1d8      	b.n	5f7e <tc_init+0x49a>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5bcc:	68bb      	ldr	r3, [r7, #8]
    5bce:	681b      	ldr	r3, [r3, #0]
    5bd0:	2202      	movs	r2, #2
    5bd2:	4013      	ands	r3, r2
    5bd4:	d001      	beq.n	5bda <tc_init+0xf6>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    5bd6:	231c      	movs	r3, #28
    5bd8:	e1d1      	b.n	5f7e <tc_init+0x49a>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    5bda:	687b      	ldr	r3, [r7, #4]
    5bdc:	7c1b      	ldrb	r3, [r3, #16]
    5bde:	2b00      	cmp	r3, #0
    5be0:	d017      	beq.n	5c12 <tc_init+0x12e>
		system_pinmux_get_config_defaults(&pin_config);
    5be2:	2314      	movs	r3, #20
    5be4:	18fb      	adds	r3, r7, r3
    5be6:	0018      	movs	r0, r3
    5be8:	4ba1      	ldr	r3, [pc, #644]	; (5e70 <tc_init+0x38c>)
    5bea:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	699b      	ldr	r3, [r3, #24]
    5bf0:	b2da      	uxtb	r2, r3
    5bf2:	2314      	movs	r3, #20
    5bf4:	18fb      	adds	r3, r7, r3
    5bf6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5bf8:	2314      	movs	r3, #20
    5bfa:	18fb      	adds	r3, r7, r3
    5bfc:	2201      	movs	r2, #1
    5bfe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    5c00:	687b      	ldr	r3, [r7, #4]
    5c02:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    5c04:	b2db      	uxtb	r3, r3
    5c06:	2214      	movs	r2, #20
    5c08:	18ba      	adds	r2, r7, r2
    5c0a:	0011      	movs	r1, r2
    5c0c:	0018      	movs	r0, r3
    5c0e:	4b99      	ldr	r3, [pc, #612]	; (5e74 <tc_init+0x390>)
    5c10:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    5c12:	687b      	ldr	r3, [r7, #4]
    5c14:	7f1b      	ldrb	r3, [r3, #28]
    5c16:	2b00      	cmp	r3, #0
    5c18:	d017      	beq.n	5c4a <tc_init+0x166>
		system_pinmux_get_config_defaults(&pin_config);
    5c1a:	2314      	movs	r3, #20
    5c1c:	18fb      	adds	r3, r7, r3
    5c1e:	0018      	movs	r0, r3
    5c20:	4b93      	ldr	r3, [pc, #588]	; (5e70 <tc_init+0x38c>)
    5c22:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5c28:	b2da      	uxtb	r2, r3
    5c2a:	2314      	movs	r3, #20
    5c2c:	18fb      	adds	r3, r7, r3
    5c2e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5c30:	2314      	movs	r3, #20
    5c32:	18fb      	adds	r3, r7, r3
    5c34:	2201      	movs	r2, #1
    5c36:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    5c3c:	b2db      	uxtb	r3, r3
    5c3e:	2214      	movs	r2, #20
    5c40:	18ba      	adds	r2, r7, r2
    5c42:	0011      	movs	r1, r2
    5c44:	0018      	movs	r0, r3
    5c46:	4b8b      	ldr	r3, [pc, #556]	; (5e74 <tc_init+0x390>)
    5c48:	4798      	blx	r3
	}

	/* Enable the user interface clock in the MCLK */
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    5c4a:	2347      	movs	r3, #71	; 0x47
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	781b      	ldrb	r3, [r3, #0]
    5c50:	005a      	lsls	r2, r3, #1
    5c52:	2318      	movs	r3, #24
    5c54:	18fb      	adds	r3, r7, r3
    5c56:	0092      	lsls	r2, r2, #2
    5c58:	58d3      	ldr	r3, [r2, r3]
    5c5a:	b2d8      	uxtb	r0, r3
			inst_mclk_apbmask[2*instance+1]);
    5c5c:	2347      	movs	r3, #71	; 0x47
    5c5e:	18fb      	adds	r3, r7, r3
    5c60:	781b      	ldrb	r3, [r3, #0]
    5c62:	005b      	lsls	r3, r3, #1
    5c64:	1c5a      	adds	r2, r3, #1
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    5c66:	2318      	movs	r3, #24
    5c68:	18fb      	adds	r3, r7, r3
    5c6a:	0092      	lsls	r2, r2, #2
    5c6c:	58d3      	ldr	r3, [r2, r3]
    5c6e:	0019      	movs	r1, r3
    5c70:	4b81      	ldr	r3, [pc, #516]	; (5e78 <tc_init+0x394>)
    5c72:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	78db      	ldrb	r3, [r3, #3]
    5c78:	2b08      	cmp	r3, #8
    5c7a:	d11c      	bne.n	5cb6 <tc_init+0x1d2>
    5c7c:	2347      	movs	r3, #71	; 0x47
    5c7e:	18fb      	adds	r3, r7, r3
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	3301      	adds	r3, #1
    5c84:	2b04      	cmp	r3, #4
    5c86:	dc16      	bgt.n	5cb6 <tc_init+0x1d2>
	{
		/* Enable the user interface clock in the MCLK */
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    5c88:	2347      	movs	r3, #71	; 0x47
    5c8a:	18fb      	adds	r3, r7, r3
    5c8c:	781b      	ldrb	r3, [r3, #0]
    5c8e:	3301      	adds	r3, #1
    5c90:	005a      	lsls	r2, r3, #1
    5c92:	2318      	movs	r3, #24
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	0092      	lsls	r2, r2, #2
    5c98:	58d3      	ldr	r3, [r2, r3]
    5c9a:	b2d8      	uxtb	r0, r3
				inst_mclk_apbmask[(instance+1)*2+1]);
    5c9c:	2347      	movs	r3, #71	; 0x47
    5c9e:	18fb      	adds	r3, r7, r3
    5ca0:	781b      	ldrb	r3, [r3, #0]
    5ca2:	3301      	adds	r3, #1
    5ca4:	005b      	lsls	r3, r3, #1
    5ca6:	1c5a      	adds	r2, r3, #1
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    5ca8:	2318      	movs	r3, #24
    5caa:	18fb      	adds	r3, r7, r3
    5cac:	0092      	lsls	r2, r2, #2
    5cae:	58d3      	ldr	r3, [r2, r3]
    5cb0:	0019      	movs	r1, r3
    5cb2:	4b71      	ldr	r3, [pc, #452]	; (5e78 <tc_init+0x394>)
    5cb4:	4798      	blx	r3
	}


	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5cb6:	2310      	movs	r3, #16
    5cb8:	18fb      	adds	r3, r7, r3
    5cba:	0018      	movs	r0, r3
    5cbc:	4b6f      	ldr	r3, [pc, #444]	; (5e7c <tc_init+0x398>)
    5cbe:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	781a      	ldrb	r2, [r3, #0]
    5cc4:	2310      	movs	r3, #16
    5cc6:	18fb      	adds	r3, r7, r3
    5cc8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5cca:	2347      	movs	r3, #71	; 0x47
    5ccc:	18fb      	adds	r3, r7, r3
    5cce:	781b      	ldrb	r3, [r3, #0]
    5cd0:	2240      	movs	r2, #64	; 0x40
    5cd2:	18ba      	adds	r2, r7, r2
    5cd4:	5cd3      	ldrb	r3, [r2, r3]
    5cd6:	2210      	movs	r2, #16
    5cd8:	18ba      	adds	r2, r7, r2
    5cda:	0011      	movs	r1, r2
    5cdc:	0018      	movs	r0, r3
    5cde:	4b68      	ldr	r3, [pc, #416]	; (5e80 <tc_init+0x39c>)
    5ce0:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5ce2:	2347      	movs	r3, #71	; 0x47
    5ce4:	18fb      	adds	r3, r7, r3
    5ce6:	781b      	ldrb	r3, [r3, #0]
    5ce8:	2240      	movs	r2, #64	; 0x40
    5cea:	18ba      	adds	r2, r7, r2
    5cec:	5cd3      	ldrb	r3, [r2, r3]
    5cee:	0018      	movs	r0, r3
    5cf0:	4b64      	ldr	r3, [pc, #400]	; (5e84 <tc_init+0x3a0>)
    5cf2:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	78da      	ldrb	r2, [r3, #3]
			(uint32_t)config->reload_action |
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->counter_size |
    5cfc:	4313      	orrs	r3, r2
    5cfe:	b2db      	uxtb	r3, r3
    5d00:	001a      	movs	r2, r3
			(uint32_t)config->clock_prescaler;
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	889b      	ldrh	r3, [r3, #4]
	ctrla_tmp =
    5d06:	4313      	orrs	r3, r2
    5d08:	64fb      	str	r3, [r7, #76]	; 0x4c

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5d0a:	2349      	movs	r3, #73	; 0x49
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	2200      	movs	r2, #0
    5d10:	701a      	strb	r2, [r3, #0]
    5d12:	e018      	b.n	5d46 <tc_init+0x262>
		if (config->enable_capture_on_channel[i] == true) {
    5d14:	2349      	movs	r3, #73	; 0x49
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	781b      	ldrb	r3, [r3, #0]
    5d1a:	687a      	ldr	r2, [r7, #4]
    5d1c:	18d3      	adds	r3, r2, r3
    5d1e:	7a5b      	ldrb	r3, [r3, #9]
    5d20:	2b00      	cmp	r3, #0
    5d22:	d009      	beq.n	5d38 <tc_init+0x254>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    5d24:	2349      	movs	r3, #73	; 0x49
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	781b      	ldrb	r3, [r3, #0]
    5d2a:	2280      	movs	r2, #128	; 0x80
    5d2c:	0252      	lsls	r2, r2, #9
    5d2e:	409a      	lsls	r2, r3
    5d30:	0013      	movs	r3, r2
    5d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5d34:	4313      	orrs	r3, r2
    5d36:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5d38:	2349      	movs	r3, #73	; 0x49
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	781a      	ldrb	r2, [r3, #0]
    5d3e:	2349      	movs	r3, #73	; 0x49
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	3201      	adds	r2, #1
    5d44:	701a      	strb	r2, [r3, #0]
    5d46:	2349      	movs	r3, #73	; 0x49
    5d48:	18fb      	adds	r3, r7, r3
    5d4a:	781b      	ldrb	r3, [r3, #0]
    5d4c:	2b01      	cmp	r3, #1
    5d4e:	d9e1      	bls.n	5d14 <tc_init+0x230>
		}
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5d50:	2348      	movs	r3, #72	; 0x48
    5d52:	18fb      	adds	r3, r7, r3
    5d54:	2200      	movs	r2, #0
    5d56:	701a      	strb	r2, [r3, #0]
    5d58:	e018      	b.n	5d8c <tc_init+0x2a8>
		if (config->enable_capture_on_IO[i] == true) {
    5d5a:	2348      	movs	r3, #72	; 0x48
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	781b      	ldrb	r3, [r3, #0]
    5d60:	687a      	ldr	r2, [r7, #4]
    5d62:	18d3      	adds	r3, r2, r3
    5d64:	7adb      	ldrb	r3, [r3, #11]
    5d66:	2b00      	cmp	r3, #0
    5d68:	d009      	beq.n	5d7e <tc_init+0x29a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    5d6a:	2348      	movs	r3, #72	; 0x48
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	781b      	ldrb	r3, [r3, #0]
    5d70:	2280      	movs	r2, #128	; 0x80
    5d72:	0352      	lsls	r2, r2, #13
    5d74:	409a      	lsls	r2, r3
    5d76:	0013      	movs	r3, r2
    5d78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5d7a:	4313      	orrs	r3, r2
    5d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    5d7e:	2348      	movs	r3, #72	; 0x48
    5d80:	18fb      	adds	r3, r7, r3
    5d82:	781a      	ldrb	r2, [r3, #0]
    5d84:	2348      	movs	r3, #72	; 0x48
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	3201      	adds	r2, #1
    5d8a:	701a      	strb	r2, [r3, #0]
    5d8c:	2348      	movs	r3, #72	; 0x48
    5d8e:	18fb      	adds	r3, r7, r3
    5d90:	781b      	ldrb	r3, [r3, #0]
    5d92:	2b01      	cmp	r3, #1
    5d94:	d9e1      	bls.n	5d5a <tc_init+0x276>
		}
	}

	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    5d96:	687b      	ldr	r3, [r7, #4]
    5d98:	785b      	ldrb	r3, [r3, #1]
    5d9a:	019a      	lsls	r2, r3, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    5d9c:	687b      	ldr	r3, [r7, #4]
    5d9e:	789b      	ldrb	r3, [r3, #2]
    5da0:	01db      	lsls	r3, r3, #7
    5da2:	4313      	orrs	r3, r2
    5da4:	001a      	movs	r2, r3
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    5da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5da8:	4313      	orrs	r3, r2
    5daa:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5dac:	46c0      	nop			; (mov r8, r8)
    5dae:	68fb      	ldr	r3, [r7, #12]
    5db0:	0018      	movs	r0, r3
    5db2:	4b35      	ldr	r3, [pc, #212]	; (5e88 <tc_init+0x3a4>)
    5db4:	4798      	blx	r3
    5db6:	1e03      	subs	r3, r0, #0
    5db8:	d1f9      	bne.n	5dae <tc_init+0x2ca>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5dba:	68bb      	ldr	r3, [r7, #8]
    5dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5dbe:	601a      	str	r2, [r3, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5dc0:	46c0      	nop			; (mov r8, r8)
    5dc2:	68fb      	ldr	r3, [r7, #12]
    5dc4:	0018      	movs	r0, r3
    5dc6:	4b30      	ldr	r3, [pc, #192]	; (5e88 <tc_init+0x3a4>)
    5dc8:	4798      	blx	r3
    5dca:	1e03      	subs	r3, r0, #0
    5dcc:	d1f9      	bne.n	5dc2 <tc_init+0x2de>
		/* Wait for sync */
	}
	hw->COUNT8.WAVE.reg = config->wave_generation;
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	799a      	ldrb	r2, [r3, #6]
    5dd2:	68bb      	ldr	r3, [r7, #8]
    5dd4:	731a      	strb	r2, [r3, #12]

	/* Set ctrlb register */
	if (config->oneshot) {
    5dd6:	687b      	ldr	r3, [r7, #4]
    5dd8:	7b5b      	ldrb	r3, [r3, #13]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d003      	beq.n	5de6 <tc_init+0x302>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5dde:	234b      	movs	r3, #75	; 0x4b
    5de0:	18fb      	adds	r3, r7, r3
    5de2:	2204      	movs	r2, #4
    5de4:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	7b9b      	ldrb	r3, [r3, #14]
    5dea:	2b00      	cmp	r3, #0
    5dec:	d007      	beq.n	5dfe <tc_init+0x31a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5dee:	234b      	movs	r3, #75	; 0x4b
    5df0:	18fb      	adds	r3, r7, r3
    5df2:	224b      	movs	r2, #75	; 0x4b
    5df4:	18ba      	adds	r2, r7, r2
    5df6:	7812      	ldrb	r2, [r2, #0]
    5df8:	2101      	movs	r1, #1
    5dfa:	430a      	orrs	r2, r1
    5dfc:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	68fb      	ldr	r3, [r7, #12]
    5e02:	0018      	movs	r0, r3
    5e04:	4b20      	ldr	r3, [pc, #128]	; (5e88 <tc_init+0x3a4>)
    5e06:	4798      	blx	r3
    5e08:	1e03      	subs	r3, r0, #0
    5e0a:	d1f9      	bne.n	5e00 <tc_init+0x31c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5e0c:	68bb      	ldr	r3, [r7, #8]
    5e0e:	22ff      	movs	r2, #255	; 0xff
    5e10:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    5e12:	234b      	movs	r3, #75	; 0x4b
    5e14:	18fb      	adds	r3, r7, r3
    5e16:	781b      	ldrb	r3, [r3, #0]
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d00b      	beq.n	5e34 <tc_init+0x350>
		while (tc_is_syncing(module_inst)) {
    5e1c:	46c0      	nop			; (mov r8, r8)
    5e1e:	68fb      	ldr	r3, [r7, #12]
    5e20:	0018      	movs	r0, r3
    5e22:	4b19      	ldr	r3, [pc, #100]	; (5e88 <tc_init+0x3a4>)
    5e24:	4798      	blx	r3
    5e26:	1e03      	subs	r3, r0, #0
    5e28:	d1f9      	bne.n	5e1e <tc_init+0x33a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5e2a:	68bb      	ldr	r3, [r7, #8]
    5e2c:	224b      	movs	r2, #75	; 0x4b
    5e2e:	18ba      	adds	r2, r7, r2
    5e30:	7812      	ldrb	r2, [r2, #0]
    5e32:	715a      	strb	r2, [r3, #5]
	}

	/* Set drvvtrl register*/
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    5e34:	687b      	ldr	r3, [r7, #4]
    5e36:	7a1a      	ldrb	r2, [r3, #8]
    5e38:	68bb      	ldr	r3, [r7, #8]
    5e3a:	735a      	strb	r2, [r3, #13]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    5e3c:	46c0      	nop			; (mov r8, r8)
    5e3e:	68fb      	ldr	r3, [r7, #12]
    5e40:	0018      	movs	r0, r3
    5e42:	4b11      	ldr	r3, [pc, #68]	; (5e88 <tc_init+0x3a4>)
    5e44:	4798      	blx	r3
    5e46:	1e03      	subs	r3, r0, #0
    5e48:	d1f9      	bne.n	5e3e <tc_init+0x35a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    5e4a:	68fb      	ldr	r3, [r7, #12]
    5e4c:	791b      	ldrb	r3, [r3, #4]
    5e4e:	2b04      	cmp	r3, #4
    5e50:	d01c      	beq.n	5e8c <tc_init+0x3a8>
    5e52:	2b08      	cmp	r3, #8
    5e54:	d100      	bne.n	5e58 <tc_init+0x374>
    5e56:	e06e      	b.n	5f36 <tc_init+0x452>
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d049      	beq.n	5ef0 <tc_init+0x40c>
    5e5c:	e08e      	b.n	5f7c <tc_init+0x498>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	00005a99 	.word	0x00005a99
    5e64:	0002ace8 	.word	0x0002ace8
    5e68:	0002acf0 	.word	0x0002acf0
    5e6c:	20001228 	.word	0x20001228
    5e70:	00005a0d 	.word	0x00005a0d
    5e74:	00005761 	.word	0x00005761
    5e78:	00005991 	.word	0x00005991
    5e7c:	00005979 	.word	0x00005979
    5e80:	000054ad 	.word	0x000054ad
    5e84:	000054ed 	.word	0x000054ed
    5e88:	00005a35 	.word	0x00005a35
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    5e8c:	46c0      	nop			; (mov r8, r8)
    5e8e:	68fb      	ldr	r3, [r7, #12]
    5e90:	0018      	movs	r0, r3
    5e92:	4b3d      	ldr	r3, [pc, #244]	; (5f88 <tc_init+0x4a4>)
    5e94:	4798      	blx	r3
    5e96:	1e03      	subs	r3, r0, #0
    5e98:	d1f9      	bne.n	5e8e <tc_init+0x3aa>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    5e9a:	687b      	ldr	r3, [r7, #4]
    5e9c:	2228      	movs	r2, #40	; 0x28
    5e9e:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    5ea0:	68bb      	ldr	r3, [r7, #8]
    5ea2:	751a      	strb	r2, [r3, #20]


			while (tc_is_syncing(module_inst)) {
    5ea4:	46c0      	nop			; (mov r8, r8)
    5ea6:	68fb      	ldr	r3, [r7, #12]
    5ea8:	0018      	movs	r0, r3
    5eaa:	4b37      	ldr	r3, [pc, #220]	; (5f88 <tc_init+0x4a4>)
    5eac:	4798      	blx	r3
    5eae:	1e03      	subs	r3, r0, #0
    5eb0:	d1f9      	bne.n	5ea6 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	2229      	movs	r2, #41	; 0x29
    5eb6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    5eb8:	68bb      	ldr	r3, [r7, #8]
    5eba:	76da      	strb	r2, [r3, #27]

			while (tc_is_syncing(module_inst)) {
    5ebc:	46c0      	nop			; (mov r8, r8)
    5ebe:	68fb      	ldr	r3, [r7, #12]
    5ec0:	0018      	movs	r0, r3
    5ec2:	4b31      	ldr	r3, [pc, #196]	; (5f88 <tc_init+0x4a4>)
    5ec4:	4798      	blx	r3
    5ec6:	1e03      	subs	r3, r0, #0
    5ec8:	d1f9      	bne.n	5ebe <tc_init+0x3da>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	222a      	movs	r2, #42	; 0x2a
    5ece:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    5ed0:	68bb      	ldr	r3, [r7, #8]
    5ed2:	771a      	strb	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    5ed4:	46c0      	nop			; (mov r8, r8)
    5ed6:	68fb      	ldr	r3, [r7, #12]
    5ed8:	0018      	movs	r0, r3
    5eda:	4b2b      	ldr	r3, [pc, #172]	; (5f88 <tc_init+0x4a4>)
    5edc:	4798      	blx	r3
    5ede:	1e03      	subs	r3, r0, #0
    5ee0:	d1f9      	bne.n	5ed6 <tc_init+0x3f2>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	222b      	movs	r2, #43	; 0x2b
    5ee6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    5ee8:	68bb      	ldr	r3, [r7, #8]
    5eea:	775a      	strb	r2, [r3, #29]

			return STATUS_OK;
    5eec:	2300      	movs	r3, #0
    5eee:	e046      	b.n	5f7e <tc_init+0x49a>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    5ef0:	46c0      	nop			; (mov r8, r8)
    5ef2:	68fb      	ldr	r3, [r7, #12]
    5ef4:	0018      	movs	r0, r3
    5ef6:	4b24      	ldr	r3, [pc, #144]	; (5f88 <tc_init+0x4a4>)
    5ef8:	4798      	blx	r3
    5efa:	1e03      	subs	r3, r0, #0
    5efc:	d1f9      	bne.n	5ef2 <tc_init+0x40e>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    5efe:	687b      	ldr	r3, [r7, #4]
    5f00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    5f02:	68bb      	ldr	r3, [r7, #8]
    5f04:	829a      	strh	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5f06:	46c0      	nop			; (mov r8, r8)
    5f08:	68fb      	ldr	r3, [r7, #12]
    5f0a:	0018      	movs	r0, r3
    5f0c:	4b1e      	ldr	r3, [pc, #120]	; (5f88 <tc_init+0x4a4>)
    5f0e:	4798      	blx	r3
    5f10:	1e03      	subs	r3, r0, #0
    5f12:	d1f9      	bne.n	5f08 <tc_init+0x424>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5f18:	68bb      	ldr	r3, [r7, #8]
    5f1a:	839a      	strh	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    5f1c:	46c0      	nop			; (mov r8, r8)
    5f1e:	68fb      	ldr	r3, [r7, #12]
    5f20:	0018      	movs	r0, r3
    5f22:	4b19      	ldr	r3, [pc, #100]	; (5f88 <tc_init+0x4a4>)
    5f24:	4798      	blx	r3
    5f26:	1e03      	subs	r3, r0, #0
    5f28:	d1f9      	bne.n	5f1e <tc_init+0x43a>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    5f2a:	687b      	ldr	r3, [r7, #4]
    5f2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5f2e:	68bb      	ldr	r3, [r7, #8]
    5f30:	83da      	strh	r2, [r3, #30]

			return STATUS_OK;
    5f32:	2300      	movs	r3, #0
    5f34:	e023      	b.n	5f7e <tc_init+0x49a>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    5f36:	46c0      	nop			; (mov r8, r8)
    5f38:	68fb      	ldr	r3, [r7, #12]
    5f3a:	0018      	movs	r0, r3
    5f3c:	4b12      	ldr	r3, [pc, #72]	; (5f88 <tc_init+0x4a4>)
    5f3e:	4798      	blx	r3
    5f40:	1e03      	subs	r3, r0, #0
    5f42:	d1f9      	bne.n	5f38 <tc_init+0x454>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    5f44:	687b      	ldr	r3, [r7, #4]
    5f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5f48:	68bb      	ldr	r3, [r7, #8]
    5f4a:	615a      	str	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    5f4c:	46c0      	nop			; (mov r8, r8)
    5f4e:	68fb      	ldr	r3, [r7, #12]
    5f50:	0018      	movs	r0, r3
    5f52:	4b0d      	ldr	r3, [pc, #52]	; (5f88 <tc_init+0x4a4>)
    5f54:	4798      	blx	r3
    5f56:	1e03      	subs	r3, r0, #0
    5f58:	d1f9      	bne.n	5f4e <tc_init+0x46a>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    5f5a:	687b      	ldr	r3, [r7, #4]
    5f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    5f5e:	68bb      	ldr	r3, [r7, #8]
    5f60:	61da      	str	r2, [r3, #28]

			while (tc_is_syncing(module_inst)) {
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	68fb      	ldr	r3, [r7, #12]
    5f66:	0018      	movs	r0, r3
    5f68:	4b07      	ldr	r3, [pc, #28]	; (5f88 <tc_init+0x4a4>)
    5f6a:	4798      	blx	r3
    5f6c:	1e03      	subs	r3, r0, #0
    5f6e:	d1f9      	bne.n	5f64 <tc_init+0x480>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5f74:	68bb      	ldr	r3, [r7, #8]
    5f76:	621a      	str	r2, [r3, #32]

			return STATUS_OK;
    5f78:	2300      	movs	r3, #0
    5f7a:	e000      	b.n	5f7e <tc_init+0x49a>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    5f7c:	2317      	movs	r3, #23
}
    5f7e:	0018      	movs	r0, r3
    5f80:	46bd      	mov	sp, r7
    5f82:	b015      	add	sp, #84	; 0x54
    5f84:	bd90      	pop	{r4, r7, pc}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	00005a35 	.word	0x00005a35

00005f8c <tc_get_count_value>:
 *
 * \return Count value of the specified TC module.
 */
uint32_t tc_get_count_value(
		const struct tc_module *const module_inst)
{
    5f8c:	b580      	push	{r7, lr}
    5f8e:	b084      	sub	sp, #16
    5f90:	af00      	add	r7, sp, #0
    5f92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Read synchronization */
	tc_sync_read_count(module_inst);
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	0018      	movs	r0, r3
    5f98:	4b12      	ldr	r3, [pc, #72]	; (5fe4 <tc_get_count_value+0x58>)
    5f9a:	4798      	blx	r3
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5f9c:	687b      	ldr	r3, [r7, #4]
    5f9e:	681b      	ldr	r3, [r3, #0]
    5fa0:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    5fa2:	46c0      	nop			; (mov r8, r8)
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	0018      	movs	r0, r3
    5fa8:	4b0f      	ldr	r3, [pc, #60]	; (5fe8 <tc_get_count_value+0x5c>)
    5faa:	4798      	blx	r3
    5fac:	1e03      	subs	r3, r0, #0
    5fae:	d1f9      	bne.n	5fa4 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	791b      	ldrb	r3, [r3, #4]
    5fb4:	2b04      	cmp	r3, #4
    5fb6:	d004      	beq.n	5fc2 <tc_get_count_value+0x36>
    5fb8:	2b08      	cmp	r3, #8
    5fba:	d00a      	beq.n	5fd2 <tc_get_count_value+0x46>
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	d004      	beq.n	5fca <tc_get_count_value+0x3e>
    5fc0:	e00a      	b.n	5fd8 <tc_get_count_value+0x4c>
		case TC_COUNTER_SIZE_8BIT:
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5fc2:	68fb      	ldr	r3, [r7, #12]
    5fc4:	7d1b      	ldrb	r3, [r3, #20]
    5fc6:	b2db      	uxtb	r3, r3
    5fc8:	e007      	b.n	5fda <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_16BIT:
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5fca:	68fb      	ldr	r3, [r7, #12]
    5fcc:	8a9b      	ldrh	r3, [r3, #20]
    5fce:	b29b      	uxth	r3, r3
    5fd0:	e003      	b.n	5fda <tc_get_count_value+0x4e>

		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
    5fd2:	68fb      	ldr	r3, [r7, #12]
    5fd4:	695b      	ldr	r3, [r3, #20]
    5fd6:	e000      	b.n	5fda <tc_get_count_value+0x4e>
	}

	Assert(false);
	return 0;
    5fd8:	2300      	movs	r3, #0
}
    5fda:	0018      	movs	r0, r3
    5fdc:	46bd      	mov	sp, r7
    5fde:	b004      	add	sp, #16
    5fe0:	bd80      	pop	{r7, pc}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	00005a55 	.word	0x00005a55
    5fe8:	00005a35 	.word	0x00005a35

00005fec <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    5fec:	b580      	push	{r7, lr}
    5fee:	b086      	sub	sp, #24
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	60f8      	str	r0, [r7, #12]
    5ff4:	607a      	str	r2, [r7, #4]
    5ff6:	230b      	movs	r3, #11
    5ff8:	18fb      	adds	r3, r7, r3
    5ffa:	1c0a      	adds	r2, r1, #0
    5ffc:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5ffe:	68fb      	ldr	r3, [r7, #12]
    6000:	681b      	ldr	r3, [r3, #0]
    6002:	617b      	str	r3, [r7, #20]

	while (tc_is_syncing(module_inst)) {
    6004:	46c0      	nop			; (mov r8, r8)
    6006:	68fb      	ldr	r3, [r7, #12]
    6008:	0018      	movs	r0, r3
    600a:	4b38      	ldr	r3, [pc, #224]	; (60ec <tc_set_compare_value+0x100>)
    600c:	4798      	blx	r3
    600e:	1e03      	subs	r3, r0, #0
    6010:	d1f9      	bne.n	6006 <tc_set_compare_value+0x1a>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    6012:	68fb      	ldr	r3, [r7, #12]
    6014:	791b      	ldrb	r3, [r3, #4]
    6016:	2b04      	cmp	r3, #4
    6018:	d004      	beq.n	6024 <tc_set_compare_value+0x38>
    601a:	2b08      	cmp	r3, #8
    601c:	d043      	beq.n	60a6 <tc_set_compare_value+0xba>
    601e:	2b00      	cmp	r3, #0
    6020:	d020      	beq.n	6064 <tc_set_compare_value+0x78>
    6022:	e05e      	b.n	60e2 <tc_set_compare_value+0xf6>
		case TC_COUNTER_SIZE_8BIT:
			if (channel_index <
    6024:	230b      	movs	r3, #11
    6026:	18fb      	adds	r3, r7, r3
    6028:	781b      	ldrb	r3, [r3, #0]
    602a:	2b01      	cmp	r3, #1
    602c:	d81a      	bhi.n	6064 <tc_set_compare_value+0x78>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    602e:	68fb      	ldr	r3, [r7, #12]
    6030:	7e9b      	ldrb	r3, [r3, #26]
    6032:	2b00      	cmp	r3, #0
    6034:	d00b      	beq.n	604e <tc_set_compare_value+0x62>
					tc_module->COUNT8.CCBUF[channel_index].reg =
    6036:	230b      	movs	r3, #11
    6038:	18fb      	adds	r3, r7, r3
    603a:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    603c:	687a      	ldr	r2, [r7, #4]
    603e:	b2d0      	uxtb	r0, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    6040:	697a      	ldr	r2, [r7, #20]
    6042:	2130      	movs	r1, #48	; 0x30
    6044:	18d3      	adds	r3, r2, r3
    6046:	185b      	adds	r3, r3, r1
    6048:	1c02      	adds	r2, r0, #0
    604a:	701a      	strb	r2, [r3, #0]
    604c:	e008      	b.n	6060 <tc_set_compare_value+0x74>
				} else {
					tc_module->COUNT8.CC[channel_index].reg  =
    604e:	230b      	movs	r3, #11
    6050:	18fb      	adds	r3, r7, r3
    6052:	781b      	ldrb	r3, [r3, #0]
							(uint8_t)compare;
    6054:	687a      	ldr	r2, [r7, #4]
    6056:	b2d1      	uxtb	r1, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    6058:	697a      	ldr	r2, [r7, #20]
    605a:	18d3      	adds	r3, r2, r3
    605c:	1c0a      	adds	r2, r1, #0
    605e:	771a      	strb	r2, [r3, #28]
				}
				return STATUS_OK;
    6060:	2300      	movs	r3, #0
    6062:	e03f      	b.n	60e4 <tc_set_compare_value+0xf8>
			}
		case TC_COUNTER_SIZE_16BIT:
			if (channel_index <
    6064:	230b      	movs	r3, #11
    6066:	18fb      	adds	r3, r7, r3
    6068:	781b      	ldrb	r3, [r3, #0]
    606a:	2b01      	cmp	r3, #1
    606c:	d81b      	bhi.n	60a6 <tc_set_compare_value+0xba>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    606e:	68fb      	ldr	r3, [r7, #12]
    6070:	7e9b      	ldrb	r3, [r3, #26]
    6072:	2b00      	cmp	r3, #0
    6074:	d009      	beq.n	608a <tc_set_compare_value+0x9e>
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6076:	230b      	movs	r3, #11
    6078:	18fb      	adds	r3, r7, r3
    607a:	781a      	ldrb	r2, [r3, #0]
							(uint16_t)compare;
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	b299      	uxth	r1, r3
					tc_module->COUNT16.CCBUF[channel_index].reg =
    6080:	697b      	ldr	r3, [r7, #20]
    6082:	3218      	adds	r2, #24
    6084:	0052      	lsls	r2, r2, #1
    6086:	52d1      	strh	r1, [r2, r3]
    6088:	e00b      	b.n	60a2 <tc_set_compare_value+0xb6>
				} else {
					tc_module->COUNT16.CC[channel_index].reg =
    608a:	230b      	movs	r3, #11
    608c:	18fb      	adds	r3, r7, r3
    608e:	781b      	ldrb	r3, [r3, #0]
							(uint16_t)compare;
    6090:	687a      	ldr	r2, [r7, #4]
    6092:	b291      	uxth	r1, r2
					tc_module->COUNT16.CC[channel_index].reg =
    6094:	697a      	ldr	r2, [r7, #20]
    6096:	330c      	adds	r3, #12
    6098:	005b      	lsls	r3, r3, #1
    609a:	18d3      	adds	r3, r2, r3
    609c:	3304      	adds	r3, #4
    609e:	1c0a      	adds	r2, r1, #0
    60a0:	801a      	strh	r2, [r3, #0]
				}
				return STATUS_OK;
    60a2:	2300      	movs	r3, #0
    60a4:	e01e      	b.n	60e4 <tc_set_compare_value+0xf8>
			}

		case TC_COUNTER_SIZE_32BIT:
			if (channel_index <
    60a6:	230b      	movs	r3, #11
    60a8:	18fb      	adds	r3, r7, r3
    60aa:	781b      	ldrb	r3, [r3, #0]
    60ac:	2b01      	cmp	r3, #1
    60ae:	d818      	bhi.n	60e2 <tc_set_compare_value+0xf6>
					NUMBER_OF_COMPARE_CAPTURE_CHANNELS) {
				if (module_inst->double_buffering_enabled){
    60b0:	68fb      	ldr	r3, [r7, #12]
    60b2:	7e9b      	ldrb	r3, [r3, #26]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d008      	beq.n	60ca <tc_set_compare_value+0xde>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    60b8:	230b      	movs	r3, #11
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	781a      	ldrb	r2, [r3, #0]
    60be:	697b      	ldr	r3, [r7, #20]
    60c0:	320c      	adds	r2, #12
    60c2:	0092      	lsls	r2, r2, #2
    60c4:	6879      	ldr	r1, [r7, #4]
    60c6:	50d1      	str	r1, [r2, r3]
    60c8:	e009      	b.n	60de <tc_set_compare_value+0xf2>
							(uint32_t)compare;
				} else {
					tc_module->COUNT32.CC[channel_index].reg =
    60ca:	230b      	movs	r3, #11
    60cc:	18fb      	adds	r3, r7, r3
    60ce:	781b      	ldrb	r3, [r3, #0]
    60d0:	697a      	ldr	r2, [r7, #20]
    60d2:	3306      	adds	r3, #6
    60d4:	009b      	lsls	r3, r3, #2
    60d6:	18d3      	adds	r3, r2, r3
    60d8:	3304      	adds	r3, #4
    60da:	687a      	ldr	r2, [r7, #4]
    60dc:	601a      	str	r2, [r3, #0]
						(uint32_t)compare;
				}
				return STATUS_OK;
    60de:	2300      	movs	r3, #0
    60e0:	e000      	b.n	60e4 <tc_set_compare_value+0xf8>
			}
	}

	return STATUS_ERR_INVALID_ARG;
    60e2:	2317      	movs	r3, #23
}
    60e4:	0018      	movs	r0, r3
    60e6:	46bd      	mov	sp, r7
    60e8:	b006      	add	sp, #24
    60ea:	bd80      	pop	{r7, pc}
    60ec:	00005a35 	.word	0x00005a35

000060f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    60f0:	b580      	push	{r7, lr}
    60f2:	b082      	sub	sp, #8
    60f4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    60f6:	4b19      	ldr	r3, [pc, #100]	; (615c <Reset_Handler+0x6c>)
    60f8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    60fa:	4b19      	ldr	r3, [pc, #100]	; (6160 <Reset_Handler+0x70>)
    60fc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    60fe:	687a      	ldr	r2, [r7, #4]
    6100:	683b      	ldr	r3, [r7, #0]
    6102:	429a      	cmp	r2, r3
    6104:	d00c      	beq.n	6120 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6106:	e007      	b.n	6118 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6108:	683b      	ldr	r3, [r7, #0]
    610a:	1d1a      	adds	r2, r3, #4
    610c:	603a      	str	r2, [r7, #0]
    610e:	687a      	ldr	r2, [r7, #4]
    6110:	1d11      	adds	r1, r2, #4
    6112:	6079      	str	r1, [r7, #4]
    6114:	6812      	ldr	r2, [r2, #0]
    6116:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6118:	683a      	ldr	r2, [r7, #0]
    611a:	4b12      	ldr	r3, [pc, #72]	; (6164 <Reset_Handler+0x74>)
    611c:	429a      	cmp	r2, r3
    611e:	d3f3      	bcc.n	6108 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6120:	4b11      	ldr	r3, [pc, #68]	; (6168 <Reset_Handler+0x78>)
    6122:	603b      	str	r3, [r7, #0]
    6124:	e004      	b.n	6130 <Reset_Handler+0x40>
                *pDest++ = 0;
    6126:	683b      	ldr	r3, [r7, #0]
    6128:	1d1a      	adds	r2, r3, #4
    612a:	603a      	str	r2, [r7, #0]
    612c:	2200      	movs	r2, #0
    612e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6130:	683a      	ldr	r2, [r7, #0]
    6132:	4b0e      	ldr	r3, [pc, #56]	; (616c <Reset_Handler+0x7c>)
    6134:	429a      	cmp	r2, r3
    6136:	d3f6      	bcc.n	6126 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6138:	4b0d      	ldr	r3, [pc, #52]	; (6170 <Reset_Handler+0x80>)
    613a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    613c:	4b0d      	ldr	r3, [pc, #52]	; (6174 <Reset_Handler+0x84>)
    613e:	687a      	ldr	r2, [r7, #4]
    6140:	21ff      	movs	r1, #255	; 0xff
    6142:	438a      	bics	r2, r1
    6144:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6146:	4a0c      	ldr	r2, [pc, #48]	; (6178 <Reset_Handler+0x88>)
    6148:	6853      	ldr	r3, [r2, #4]
    614a:	2180      	movs	r1, #128	; 0x80
    614c:	430b      	orrs	r3, r1
    614e:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6150:	4b0a      	ldr	r3, [pc, #40]	; (617c <Reset_Handler+0x8c>)
    6152:	4798      	blx	r3

        /* Branch to main function */
        main();
    6154:	4b0a      	ldr	r3, [pc, #40]	; (6180 <Reset_Handler+0x90>)
    6156:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6158:	e7fe      	b.n	6158 <Reset_Handler+0x68>
    615a:	46c0      	nop			; (mov r8, r8)
    615c:	0002d504 	.word	0x0002d504
    6160:	20000000 	.word	0x20000000
    6164:	20000b98 	.word	0x20000b98
    6168:	20000b98 	.word	0x20000b98
    616c:	20002070 	.word	0x20002070
    6170:	00000000 	.word	0x00000000
    6174:	e000ed00 	.word	0xe000ed00
    6178:	41004000 	.word	0x41004000
    617c:	00024101 	.word	0x00024101
    6180:	0001a241 	.word	0x0001a241

00006184 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6184:	b580      	push	{r7, lr}
    6186:	af00      	add	r7, sp, #0
        while (1) {
    6188:	e7fe      	b.n	6188 <Dummy_Handler+0x4>
	...

0000618c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    618c:	b580      	push	{r7, lr}
    618e:	b086      	sub	sp, #24
    6190:	af00      	add	r7, sp, #0
    6192:	60f8      	str	r0, [r7, #12]
    6194:	60b9      	str	r1, [r7, #8]
    6196:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6198:	2300      	movs	r3, #0
    619a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    619c:	68fb      	ldr	r3, [r7, #12]
    619e:	2b00      	cmp	r3, #0
    61a0:	d012      	beq.n	61c8 <_read+0x3c>
		return -1;
    61a2:	2301      	movs	r3, #1
    61a4:	425b      	negs	r3, r3
    61a6:	e013      	b.n	61d0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    61a8:	4b0b      	ldr	r3, [pc, #44]	; (61d8 <_read+0x4c>)
    61aa:	681a      	ldr	r2, [r3, #0]
    61ac:	4b0b      	ldr	r3, [pc, #44]	; (61dc <_read+0x50>)
    61ae:	681b      	ldr	r3, [r3, #0]
    61b0:	68b9      	ldr	r1, [r7, #8]
    61b2:	0018      	movs	r0, r3
    61b4:	4790      	blx	r2
		ptr++;
    61b6:	68bb      	ldr	r3, [r7, #8]
    61b8:	3301      	adds	r3, #1
    61ba:	60bb      	str	r3, [r7, #8]
		nChars++;
    61bc:	697b      	ldr	r3, [r7, #20]
    61be:	3301      	adds	r3, #1
    61c0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    61c2:	687b      	ldr	r3, [r7, #4]
    61c4:	3b01      	subs	r3, #1
    61c6:	607b      	str	r3, [r7, #4]
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	2b00      	cmp	r3, #0
    61cc:	dcec      	bgt.n	61a8 <_read+0x1c>
	}
	return nChars;
    61ce:	697b      	ldr	r3, [r7, #20]
}
    61d0:	0018      	movs	r0, r3
    61d2:	46bd      	mov	sp, r7
    61d4:	b006      	add	sp, #24
    61d6:	bd80      	pop	{r7, pc}
    61d8:	2000123c 	.word	0x2000123c
    61dc:	20001244 	.word	0x20001244

000061e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    61e0:	b580      	push	{r7, lr}
    61e2:	b086      	sub	sp, #24
    61e4:	af00      	add	r7, sp, #0
    61e6:	60f8      	str	r0, [r7, #12]
    61e8:	60b9      	str	r1, [r7, #8]
    61ea:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    61ec:	2300      	movs	r3, #0
    61ee:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	2b01      	cmp	r3, #1
    61f4:	d01d      	beq.n	6232 <_write+0x52>
    61f6:	68fb      	ldr	r3, [r7, #12]
    61f8:	2b02      	cmp	r3, #2
    61fa:	d01a      	beq.n	6232 <_write+0x52>
    61fc:	68fb      	ldr	r3, [r7, #12]
    61fe:	2b03      	cmp	r3, #3
    6200:	d017      	beq.n	6232 <_write+0x52>
		return -1;
    6202:	2301      	movs	r3, #1
    6204:	425b      	negs	r3, r3
    6206:	e018      	b.n	623a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6208:	4b0e      	ldr	r3, [pc, #56]	; (6244 <_write+0x64>)
    620a:	681a      	ldr	r2, [r3, #0]
    620c:	4b0e      	ldr	r3, [pc, #56]	; (6248 <_write+0x68>)
    620e:	6818      	ldr	r0, [r3, #0]
    6210:	68bb      	ldr	r3, [r7, #8]
    6212:	1c59      	adds	r1, r3, #1
    6214:	60b9      	str	r1, [r7, #8]
    6216:	781b      	ldrb	r3, [r3, #0]
    6218:	0019      	movs	r1, r3
    621a:	4790      	blx	r2
    621c:	1e03      	subs	r3, r0, #0
    621e:	da02      	bge.n	6226 <_write+0x46>
			return -1;
    6220:	2301      	movs	r3, #1
    6222:	425b      	negs	r3, r3
    6224:	e009      	b.n	623a <_write+0x5a>
		}
		++nChars;
    6226:	697b      	ldr	r3, [r7, #20]
    6228:	3301      	adds	r3, #1
    622a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	3b01      	subs	r3, #1
    6230:	607b      	str	r3, [r7, #4]
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	2b00      	cmp	r3, #0
    6236:	d1e7      	bne.n	6208 <_write+0x28>
	}
	return nChars;
    6238:	697b      	ldr	r3, [r7, #20]
}
    623a:	0018      	movs	r0, r3
    623c:	46bd      	mov	sp, r7
    623e:	b006      	add	sp, #24
    6240:	bd80      	pop	{r7, pc}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	20001240 	.word	0x20001240
    6248:	20001244 	.word	0x20001244

0000624c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    624c:	b580      	push	{r7, lr}
    624e:	b084      	sub	sp, #16
    6250:	af00      	add	r7, sp, #0
    6252:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6254:	4b0a      	ldr	r3, [pc, #40]	; (6280 <_sbrk+0x34>)
    6256:	681b      	ldr	r3, [r3, #0]
    6258:	2b00      	cmp	r3, #0
    625a:	d102      	bne.n	6262 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    625c:	4b08      	ldr	r3, [pc, #32]	; (6280 <_sbrk+0x34>)
    625e:	4a09      	ldr	r2, [pc, #36]	; (6284 <_sbrk+0x38>)
    6260:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6262:	4b07      	ldr	r3, [pc, #28]	; (6280 <_sbrk+0x34>)
    6264:	681b      	ldr	r3, [r3, #0]
    6266:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6268:	4b05      	ldr	r3, [pc, #20]	; (6280 <_sbrk+0x34>)
    626a:	681a      	ldr	r2, [r3, #0]
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	18d2      	adds	r2, r2, r3
    6270:	4b03      	ldr	r3, [pc, #12]	; (6280 <_sbrk+0x34>)
    6272:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6274:	68fb      	ldr	r3, [r7, #12]
}
    6276:	0018      	movs	r0, r3
    6278:	46bd      	mov	sp, r7
    627a:	b004      	add	sp, #16
    627c:	bd80      	pop	{r7, pc}
    627e:	46c0      	nop			; (mov r8, r8)
    6280:	20000bf8 	.word	0x20000bf8
    6284:	20004070 	.word	0x20004070

00006288 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6288:	b580      	push	{r7, lr}
    628a:	b082      	sub	sp, #8
    628c:	af00      	add	r7, sp, #0
    628e:	6078      	str	r0, [r7, #4]
	return -1;
    6290:	2301      	movs	r3, #1
    6292:	425b      	negs	r3, r3
}
    6294:	0018      	movs	r0, r3
    6296:	46bd      	mov	sp, r7
    6298:	b002      	add	sp, #8
    629a:	bd80      	pop	{r7, pc}

0000629c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    629c:	b580      	push	{r7, lr}
    629e:	b082      	sub	sp, #8
    62a0:	af00      	add	r7, sp, #0
    62a2:	6078      	str	r0, [r7, #4]
    62a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    62a6:	683b      	ldr	r3, [r7, #0]
    62a8:	2280      	movs	r2, #128	; 0x80
    62aa:	0192      	lsls	r2, r2, #6
    62ac:	605a      	str	r2, [r3, #4]

	return 0;
    62ae:	2300      	movs	r3, #0
}
    62b0:	0018      	movs	r0, r3
    62b2:	46bd      	mov	sp, r7
    62b4:	b002      	add	sp, #8
    62b6:	bd80      	pop	{r7, pc}

000062b8 <_isatty>:

extern int _isatty(int file)
{
    62b8:	b580      	push	{r7, lr}
    62ba:	b082      	sub	sp, #8
    62bc:	af00      	add	r7, sp, #0
    62be:	6078      	str	r0, [r7, #4]
	return 1;
    62c0:	2301      	movs	r3, #1
}
    62c2:	0018      	movs	r0, r3
    62c4:	46bd      	mov	sp, r7
    62c6:	b002      	add	sp, #8
    62c8:	bd80      	pop	{r7, pc}

000062ca <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    62ca:	b580      	push	{r7, lr}
    62cc:	b084      	sub	sp, #16
    62ce:	af00      	add	r7, sp, #0
    62d0:	60f8      	str	r0, [r7, #12]
    62d2:	60b9      	str	r1, [r7, #8]
    62d4:	607a      	str	r2, [r7, #4]
	return 0;
    62d6:	2300      	movs	r3, #0
}
    62d8:	0018      	movs	r0, r3
    62da:	46bd      	mov	sp, r7
    62dc:	b004      	add	sp, #16
    62de:	bd80      	pop	{r7, pc}

000062e0 <system_interrupt_enable>:
{
    62e0:	b580      	push	{r7, lr}
    62e2:	b082      	sub	sp, #8
    62e4:	af00      	add	r7, sp, #0
    62e6:	0002      	movs	r2, r0
    62e8:	1dfb      	adds	r3, r7, #7
    62ea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    62ec:	4b06      	ldr	r3, [pc, #24]	; (6308 <system_interrupt_enable+0x28>)
    62ee:	1dfa      	adds	r2, r7, #7
    62f0:	7812      	ldrb	r2, [r2, #0]
    62f2:	0011      	movs	r1, r2
    62f4:	221f      	movs	r2, #31
    62f6:	400a      	ands	r2, r1
    62f8:	2101      	movs	r1, #1
    62fa:	4091      	lsls	r1, r2
    62fc:	000a      	movs	r2, r1
    62fe:	601a      	str	r2, [r3, #0]
}
    6300:	46c0      	nop			; (mov r8, r8)
    6302:	46bd      	mov	sp, r7
    6304:	b002      	add	sp, #8
    6306:	bd80      	pop	{r7, pc}
    6308:	e000e100 	.word	0xe000e100

0000630c <system_interrupt_disable>:
{
    630c:	b580      	push	{r7, lr}
    630e:	b082      	sub	sp, #8
    6310:	af00      	add	r7, sp, #0
    6312:	0002      	movs	r2, r0
    6314:	1dfb      	adds	r3, r7, #7
    6316:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6318:	4a07      	ldr	r2, [pc, #28]	; (6338 <system_interrupt_disable+0x2c>)
    631a:	1dfb      	adds	r3, r7, #7
    631c:	781b      	ldrb	r3, [r3, #0]
    631e:	0019      	movs	r1, r3
    6320:	231f      	movs	r3, #31
    6322:	400b      	ands	r3, r1
    6324:	2101      	movs	r1, #1
    6326:	4099      	lsls	r1, r3
    6328:	000b      	movs	r3, r1
    632a:	0019      	movs	r1, r3
    632c:	2380      	movs	r3, #128	; 0x80
    632e:	50d1      	str	r1, [r2, r3]
}
    6330:	46c0      	nop			; (mov r8, r8)
    6332:	46bd      	mov	sp, r7
    6334:	b002      	add	sp, #8
    6336:	bd80      	pop	{r7, pc}
    6338:	e000e100 	.word	0xe000e100

0000633c <usart_is_syncing>:
{
    633c:	b580      	push	{r7, lr}
    633e:	b084      	sub	sp, #16
    6340:	af00      	add	r7, sp, #0
    6342:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	681b      	ldr	r3, [r3, #0]
    6348:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    634a:	68fb      	ldr	r3, [r7, #12]
    634c:	69db      	ldr	r3, [r3, #28]
    634e:	1e5a      	subs	r2, r3, #1
    6350:	4193      	sbcs	r3, r2
    6352:	b2db      	uxtb	r3, r3
}
    6354:	0018      	movs	r0, r3
    6356:	46bd      	mov	sp, r7
    6358:	b004      	add	sp, #16
    635a:	bd80      	pop	{r7, pc}

0000635c <_usart_wait_for_sync>:
{
    635c:	b580      	push	{r7, lr}
    635e:	b082      	sub	sp, #8
    6360:	af00      	add	r7, sp, #0
    6362:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    6364:	46c0      	nop			; (mov r8, r8)
    6366:	687b      	ldr	r3, [r7, #4]
    6368:	0018      	movs	r0, r3
    636a:	4b04      	ldr	r3, [pc, #16]	; (637c <_usart_wait_for_sync+0x20>)
    636c:	4798      	blx	r3
    636e:	1e03      	subs	r3, r0, #0
    6370:	d1f9      	bne.n	6366 <_usart_wait_for_sync+0xa>
}
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	46bd      	mov	sp, r7
    6376:	b002      	add	sp, #8
    6378:	bd80      	pop	{r7, pc}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	0000633d 	.word	0x0000633d

00006380 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    6380:	b580      	push	{r7, lr}
    6382:	b082      	sub	sp, #8
    6384:	af00      	add	r7, sp, #0
    6386:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	2280      	movs	r2, #128	; 0x80
    638c:	05d2      	lsls	r2, r2, #23
    638e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6390:	687b      	ldr	r3, [r7, #4]
    6392:	2200      	movs	r2, #0
    6394:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	22ff      	movs	r2, #255	; 0xff
    639a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	2200      	movs	r2, #0
    63a0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    63a2:	687b      	ldr	r3, [r7, #4]
    63a4:	2200      	movs	r2, #0
    63a6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    63a8:	687b      	ldr	r3, [r7, #4]
    63aa:	2296      	movs	r2, #150	; 0x96
    63ac:	0192      	lsls	r2, r2, #6
    63ae:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    63b0:	687b      	ldr	r3, [r7, #4]
    63b2:	2224      	movs	r2, #36	; 0x24
    63b4:	2101      	movs	r1, #1
    63b6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    63b8:	687b      	ldr	r3, [r7, #4]
    63ba:	2225      	movs	r2, #37	; 0x25
    63bc:	2101      	movs	r1, #1
    63be:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    63c0:	687b      	ldr	r3, [r7, #4]
    63c2:	2226      	movs	r2, #38	; 0x26
    63c4:	2100      	movs	r1, #0
    63c6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    63c8:	687b      	ldr	r3, [r7, #4]
    63ca:	2227      	movs	r2, #39	; 0x27
    63cc:	2100      	movs	r1, #0
    63ce:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    63d0:	687b      	ldr	r3, [r7, #4]
    63d2:	2200      	movs	r2, #0
    63d4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	2288      	movs	r2, #136	; 0x88
    63da:	0352      	lsls	r2, r2, #13
    63dc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	222c      	movs	r2, #44	; 0x2c
    63e2:	2100      	movs	r1, #0
    63e4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	222d      	movs	r2, #45	; 0x2d
    63ea:	2100      	movs	r1, #0
    63ec:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    63ee:	687b      	ldr	r3, [r7, #4]
    63f0:	2200      	movs	r2, #0
    63f2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    63f4:	687b      	ldr	r3, [r7, #4]
    63f6:	2200      	movs	r2, #0
    63f8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    63fa:	687b      	ldr	r3, [r7, #4]
    63fc:	2200      	movs	r2, #0
    63fe:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    6400:	687b      	ldr	r3, [r7, #4]
    6402:	2200      	movs	r2, #0
    6404:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	2200      	movs	r2, #0
    640a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    640c:	687b      	ldr	r3, [r7, #4]
    640e:	2200      	movs	r2, #0
    6410:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    6412:	687b      	ldr	r3, [r7, #4]
    6414:	2200      	movs	r2, #0
    6416:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    6418:	687b      	ldr	r3, [r7, #4]
    641a:	2200      	movs	r2, #0
    641c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    641e:	687b      	ldr	r3, [r7, #4]
    6420:	2200      	movs	r2, #0
    6422:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	2200      	movs	r2, #0
    6428:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    642a:	687b      	ldr	r3, [r7, #4]
    642c:	2213      	movs	r2, #19
    642e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    6430:	687b      	ldr	r3, [r7, #4]
    6432:	2200      	movs	r2, #0
    6434:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	46bd      	mov	sp, r7
    643a:	b002      	add	sp, #8
    643c:	bd80      	pop	{r7, pc}
	...

00006440 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    6440:	b580      	push	{r7, lr}
    6442:	b084      	sub	sp, #16
    6444:	af00      	add	r7, sp, #0
    6446:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6448:	687b      	ldr	r3, [r7, #4]
    644a:	681b      	ldr	r3, [r3, #0]
    644c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    644e:	687b      	ldr	r3, [r7, #4]
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	0018      	movs	r0, r3
    6454:	4b09      	ldr	r3, [pc, #36]	; (647c <usart_enable+0x3c>)
    6456:	4798      	blx	r3
    6458:	0003      	movs	r3, r0
    645a:	0018      	movs	r0, r3
    645c:	4b08      	ldr	r3, [pc, #32]	; (6480 <usart_enable+0x40>)
    645e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	0018      	movs	r0, r3
    6464:	4b07      	ldr	r3, [pc, #28]	; (6484 <usart_enable+0x44>)
    6466:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6468:	68fb      	ldr	r3, [r7, #12]
    646a:	681b      	ldr	r3, [r3, #0]
    646c:	2202      	movs	r2, #2
    646e:	431a      	orrs	r2, r3
    6470:	68fb      	ldr	r3, [r7, #12]
    6472:	601a      	str	r2, [r3, #0]
}
    6474:	46c0      	nop			; (mov r8, r8)
    6476:	46bd      	mov	sp, r7
    6478:	b004      	add	sp, #16
    647a:	bd80      	pop	{r7, pc}
    647c:	00002fb9 	.word	0x00002fb9
    6480:	000062e1 	.word	0x000062e1
    6484:	0000635d 	.word	0x0000635d

00006488 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
    6488:	b580      	push	{r7, lr}
    648a:	b084      	sub	sp, #16
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    6490:	687b      	ldr	r3, [r7, #4]
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    6496:	687b      	ldr	r3, [r7, #4]
    6498:	681b      	ldr	r3, [r3, #0]
    649a:	0018      	movs	r0, r3
    649c:	4b0a      	ldr	r3, [pc, #40]	; (64c8 <usart_disable+0x40>)
    649e:	4798      	blx	r3
    64a0:	0003      	movs	r3, r0
    64a2:	0018      	movs	r0, r3
    64a4:	4b09      	ldr	r3, [pc, #36]	; (64cc <usart_disable+0x44>)
    64a6:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    64a8:	687b      	ldr	r3, [r7, #4]
    64aa:	0018      	movs	r0, r3
    64ac:	4b08      	ldr	r3, [pc, #32]	; (64d0 <usart_disable+0x48>)
    64ae:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    64b0:	68fb      	ldr	r3, [r7, #12]
    64b2:	681b      	ldr	r3, [r3, #0]
    64b4:	2202      	movs	r2, #2
    64b6:	4393      	bics	r3, r2
    64b8:	001a      	movs	r2, r3
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	601a      	str	r2, [r3, #0]
}
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	46bd      	mov	sp, r7
    64c2:	b004      	add	sp, #16
    64c4:	bd80      	pop	{r7, pc}
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	00002fb9 	.word	0x00002fb9
    64cc:	0000630d 	.word	0x0000630d
    64d0:	0000635d 	.word	0x0000635d

000064d4 <usart_enable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_enable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    64d4:	b580      	push	{r7, lr}
    64d6:	b084      	sub	sp, #16
    64d8:	af00      	add	r7, sp, #0
    64da:	6078      	str	r0, [r7, #4]
    64dc:	000a      	movs	r2, r1
    64de:	1cfb      	adds	r3, r7, #3
    64e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	0018      	movs	r0, r3
    64ec:	4b13      	ldr	r3, [pc, #76]	; (653c <usart_enable_transceiver+0x68>)
    64ee:	4798      	blx	r3

	switch (transceiver_type) {
    64f0:	1cfb      	adds	r3, r7, #3
    64f2:	781b      	ldrb	r3, [r3, #0]
    64f4:	2b00      	cmp	r3, #0
    64f6:	d002      	beq.n	64fe <usart_enable_transceiver+0x2a>
    64f8:	2b01      	cmp	r3, #1
    64fa:	d00b      	beq.n	6514 <usart_enable_transceiver+0x40>
    64fc:	e015      	b.n	652a <usart_enable_transceiver+0x56>
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    64fe:	68fb      	ldr	r3, [r7, #12]
    6500:	685b      	ldr	r3, [r3, #4]
    6502:	2280      	movs	r2, #128	; 0x80
    6504:	0292      	lsls	r2, r2, #10
    6506:	431a      	orrs	r2, r3
    6508:	68fb      	ldr	r3, [r7, #12]
    650a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    650c:	687b      	ldr	r3, [r7, #4]
    650e:	2201      	movs	r2, #1
    6510:	719a      	strb	r2, [r3, #6]
			break;
    6512:	e00a      	b.n	652a <usart_enable_transceiver+0x56>

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    6514:	68fb      	ldr	r3, [r7, #12]
    6516:	685b      	ldr	r3, [r3, #4]
    6518:	2280      	movs	r2, #128	; 0x80
    651a:	0252      	lsls	r2, r2, #9
    651c:	431a      	orrs	r2, r3
    651e:	68fb      	ldr	r3, [r7, #12]
    6520:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	2201      	movs	r2, #1
    6526:	71da      	strb	r2, [r3, #7]
			break;
    6528:	46c0      	nop			; (mov r8, r8)
	}
	_usart_wait_for_sync(module);
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	0018      	movs	r0, r3
    652e:	4b03      	ldr	r3, [pc, #12]	; (653c <usart_enable_transceiver+0x68>)
    6530:	4798      	blx	r3
}
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	46bd      	mov	sp, r7
    6536:	b004      	add	sp, #16
    6538:	bd80      	pop	{r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)
    653c:	0000635d 	.word	0x0000635d

00006540 <usart_disable_transceiver>:
 * \param[in]  transceiver_type  Transceiver type
 */
static inline void usart_disable_transceiver(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    6540:	b580      	push	{r7, lr}
    6542:	b084      	sub	sp, #16
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
    6548:	000a      	movs	r2, r1
    654a:	1cfb      	adds	r3, r7, #3
    654c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    654e:	687b      	ldr	r3, [r7, #4]
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	60fb      	str	r3, [r7, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6554:	687b      	ldr	r3, [r7, #4]
    6556:	0018      	movs	r0, r3
    6558:	4b10      	ldr	r3, [pc, #64]	; (659c <usart_disable_transceiver+0x5c>)
    655a:	4798      	blx	r3

	switch (transceiver_type) {
    655c:	1cfb      	adds	r3, r7, #3
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2b00      	cmp	r3, #0
    6562:	d002      	beq.n	656a <usart_disable_transceiver+0x2a>
    6564:	2b01      	cmp	r3, #1
    6566:	d00a      	beq.n	657e <usart_disable_transceiver+0x3e>
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
			module->transmitter_enabled = false;
			break;
	}
}
    6568:	e013      	b.n	6592 <usart_disable_transceiver+0x52>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    656a:	68fb      	ldr	r3, [r7, #12]
    656c:	685b      	ldr	r3, [r3, #4]
    656e:	4a0c      	ldr	r2, [pc, #48]	; (65a0 <usart_disable_transceiver+0x60>)
    6570:	401a      	ands	r2, r3
    6572:	68fb      	ldr	r3, [r7, #12]
    6574:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    6576:	687b      	ldr	r3, [r7, #4]
    6578:	2200      	movs	r2, #0
    657a:	719a      	strb	r2, [r3, #6]
			break;
    657c:	e009      	b.n	6592 <usart_disable_transceiver+0x52>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	685b      	ldr	r3, [r3, #4]
    6582:	4a08      	ldr	r2, [pc, #32]	; (65a4 <usart_disable_transceiver+0x64>)
    6584:	401a      	ands	r2, r3
    6586:	68fb      	ldr	r3, [r7, #12]
    6588:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	2200      	movs	r2, #0
    658e:	71da      	strb	r2, [r3, #7]
			break;
    6590:	46c0      	nop			; (mov r8, r8)
}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	46bd      	mov	sp, r7
    6596:	b004      	add	sp, #16
    6598:	bd80      	pop	{r7, pc}
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	0000635d 	.word	0x0000635d
    65a0:	fffdffff 	.word	0xfffdffff
    65a4:	fffeffff 	.word	0xfffeffff

000065a8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    65a8:	b580      	push	{r7, lr}
    65aa:	b084      	sub	sp, #16
    65ac:	af00      	add	r7, sp, #0
    65ae:	60f8      	str	r0, [r7, #12]
    65b0:	60b9      	str	r1, [r7, #8]
    65b2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    65b4:	687a      	ldr	r2, [r7, #4]
    65b6:	68b9      	ldr	r1, [r7, #8]
    65b8:	68fb      	ldr	r3, [r7, #12]
    65ba:	0018      	movs	r0, r3
    65bc:	4b05      	ldr	r3, [pc, #20]	; (65d4 <usart_serial_init+0x2c>)
    65be:	4798      	blx	r3
    65c0:	1e03      	subs	r3, r0, #0
    65c2:	d101      	bne.n	65c8 <usart_serial_init+0x20>
		return true;
    65c4:	2301      	movs	r3, #1
    65c6:	e000      	b.n	65ca <usart_serial_init+0x22>
	}
	else {
		return false;
    65c8:	2300      	movs	r3, #0
	}
}
    65ca:	0018      	movs	r0, r3
    65cc:	46bd      	mov	sp, r7
    65ce:	b004      	add	sp, #16
    65d0:	bd80      	pop	{r7, pc}
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	00003dc9 	.word	0x00003dc9

000065d8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    65d8:	b580      	push	{r7, lr}
    65da:	b082      	sub	sp, #8
    65dc:	af00      	add	r7, sp, #0
    65de:	6078      	str	r0, [r7, #4]
    65e0:	000a      	movs	r2, r1
    65e2:	1cfb      	adds	r3, r7, #3
    65e4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    65e6:	46c0      	nop			; (mov r8, r8)
    65e8:	1cfb      	adds	r3, r7, #3
    65ea:	781b      	ldrb	r3, [r3, #0]
    65ec:	b29a      	uxth	r2, r3
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	0011      	movs	r1, r2
    65f2:	0018      	movs	r0, r3
    65f4:	4b04      	ldr	r3, [pc, #16]	; (6608 <usart_serial_putchar+0x30>)
    65f6:	4798      	blx	r3
    65f8:	1e03      	subs	r3, r0, #0
    65fa:	d1f5      	bne.n	65e8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    65fc:	2300      	movs	r3, #0
}
    65fe:	0018      	movs	r0, r3
    6600:	46bd      	mov	sp, r7
    6602:	b002      	add	sp, #8
    6604:	bd80      	pop	{r7, pc}
    6606:	46c0      	nop			; (mov r8, r8)
    6608:	00004061 	.word	0x00004061

0000660c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    660c:	b580      	push	{r7, lr}
    660e:	b084      	sub	sp, #16
    6610:	af00      	add	r7, sp, #0
    6612:	6078      	str	r0, [r7, #4]
    6614:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    6616:	230e      	movs	r3, #14
    6618:	18fb      	adds	r3, r7, r3
    661a:	2200      	movs	r2, #0
    661c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    661e:	46c0      	nop			; (mov r8, r8)
    6620:	230e      	movs	r3, #14
    6622:	18fa      	adds	r2, r7, r3
    6624:	687b      	ldr	r3, [r7, #4]
    6626:	0011      	movs	r1, r2
    6628:	0018      	movs	r0, r3
    662a:	4b07      	ldr	r3, [pc, #28]	; (6648 <usart_serial_getchar+0x3c>)
    662c:	4798      	blx	r3
    662e:	1e03      	subs	r3, r0, #0
    6630:	d1f6      	bne.n	6620 <usart_serial_getchar+0x14>

	*c = temp;
    6632:	230e      	movs	r3, #14
    6634:	18fb      	adds	r3, r7, r3
    6636:	881b      	ldrh	r3, [r3, #0]
    6638:	b2da      	uxtb	r2, r3
    663a:	683b      	ldr	r3, [r7, #0]
    663c:	701a      	strb	r2, [r3, #0]
}
    663e:	46c0      	nop			; (mov r8, r8)
    6640:	46bd      	mov	sp, r7
    6642:	b004      	add	sp, #16
    6644:	bd80      	pop	{r7, pc}
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	000040b7 	.word	0x000040b7

0000664c <usart_serial_read_packet>:
 */
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    664c:	b580      	push	{r7, lr}
    664e:	b084      	sub	sp, #16
    6650:	af00      	add	r7, sp, #0
    6652:	60f8      	str	r0, [r7, #12]
    6654:	60b9      	str	r1, [r7, #8]
    6656:	1dbb      	adds	r3, r7, #6
    6658:	801a      	strh	r2, [r3, #0]
	return usart_read_buffer_wait(module, rx_data, length);
    665a:	1dbb      	adds	r3, r7, #6
    665c:	881a      	ldrh	r2, [r3, #0]
    665e:	68b9      	ldr	r1, [r7, #8]
    6660:	68fb      	ldr	r3, [r7, #12]
    6662:	0018      	movs	r0, r3
    6664:	4b03      	ldr	r3, [pc, #12]	; (6674 <usart_serial_read_packet+0x28>)
    6666:	4798      	blx	r3
    6668:	0003      	movs	r3, r0
}
    666a:	0018      	movs	r0, r3
    666c:	46bd      	mov	sp, r7
    666e:	b004      	add	sp, #16
    6670:	bd80      	pop	{r7, pc}
    6672:	46c0      	nop			; (mov r8, r8)
    6674:	00004199 	.word	0x00004199

00006678 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    6678:	b580      	push	{r7, lr}
    667a:	b084      	sub	sp, #16
    667c:	af00      	add	r7, sp, #0
    667e:	60f8      	str	r0, [r7, #12]
    6680:	60b9      	str	r1, [r7, #8]
    6682:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    6684:	4b10      	ldr	r3, [pc, #64]	; (66c8 <stdio_serial_init+0x50>)
    6686:	68fa      	ldr	r2, [r7, #12]
    6688:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    668a:	4b10      	ldr	r3, [pc, #64]	; (66cc <stdio_serial_init+0x54>)
    668c:	4a10      	ldr	r2, [pc, #64]	; (66d0 <stdio_serial_init+0x58>)
    668e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6690:	4b10      	ldr	r3, [pc, #64]	; (66d4 <stdio_serial_init+0x5c>)
    6692:	4a11      	ldr	r2, [pc, #68]	; (66d8 <stdio_serial_init+0x60>)
    6694:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    6696:	687a      	ldr	r2, [r7, #4]
    6698:	68b9      	ldr	r1, [r7, #8]
    669a:	68fb      	ldr	r3, [r7, #12]
    669c:	0018      	movs	r0, r3
    669e:	4b0f      	ldr	r3, [pc, #60]	; (66dc <stdio_serial_init+0x64>)
    66a0:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    66a2:	4b0f      	ldr	r3, [pc, #60]	; (66e0 <stdio_serial_init+0x68>)
    66a4:	681b      	ldr	r3, [r3, #0]
    66a6:	689b      	ldr	r3, [r3, #8]
    66a8:	2100      	movs	r1, #0
    66aa:	0018      	movs	r0, r3
    66ac:	4b0d      	ldr	r3, [pc, #52]	; (66e4 <stdio_serial_init+0x6c>)
    66ae:	4798      	blx	r3
	setbuf(stdin, NULL);
    66b0:	4b0b      	ldr	r3, [pc, #44]	; (66e0 <stdio_serial_init+0x68>)
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	685b      	ldr	r3, [r3, #4]
    66b6:	2100      	movs	r1, #0
    66b8:	0018      	movs	r0, r3
    66ba:	4b0a      	ldr	r3, [pc, #40]	; (66e4 <stdio_serial_init+0x6c>)
    66bc:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    66be:	46c0      	nop			; (mov r8, r8)
    66c0:	46bd      	mov	sp, r7
    66c2:	b004      	add	sp, #16
    66c4:	bd80      	pop	{r7, pc}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	20001244 	.word	0x20001244
    66cc:	20001240 	.word	0x20001240
    66d0:	000065d9 	.word	0x000065d9
    66d4:	2000123c 	.word	0x2000123c
    66d8:	0000660d 	.word	0x0000660d
    66dc:	000065a9 	.word	0x000065a9
    66e0:	200001e8 	.word	0x200001e8
    66e4:	00024381 	.word	0x00024381

000066e8 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
    66e8:	b580      	push	{r7, lr}
    66ea:	b090      	sub	sp, #64	; 0x40
    66ec:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35  || (WLR089)
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
    66ee:	003b      	movs	r3, r7
    66f0:	0018      	movs	r0, r3
    66f2:	4b1e      	ldr	r3, [pc, #120]	; (676c <sio2host_init+0x84>)
    66f4:	4798      	blx	r3
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    66f6:	003b      	movs	r3, r7
    66f8:	2280      	movs	r2, #128	; 0x80
    66fa:	0352      	lsls	r2, r2, #13
    66fc:	60da      	str	r2, [r3, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    66fe:	003b      	movs	r3, r7
    6700:	4a1b      	ldr	r2, [pc, #108]	; (6770 <sio2host_init+0x88>)
    6702:	631a      	str	r2, [r3, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    6704:	003b      	movs	r3, r7
    6706:	4a1b      	ldr	r2, [pc, #108]	; (6774 <sio2host_init+0x8c>)
    6708:	635a      	str	r2, [r3, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    670a:	003b      	movs	r3, r7
    670c:	2201      	movs	r2, #1
    670e:	4252      	negs	r2, r2
    6710:	639a      	str	r2, [r3, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    6712:	003b      	movs	r3, r7
    6714:	2201      	movs	r2, #1
    6716:	4252      	negs	r2, r2
    6718:	63da      	str	r2, [r3, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    671a:	003b      	movs	r3, r7
    671c:	22e1      	movs	r2, #225	; 0xe1
    671e:	0252      	lsls	r2, r2, #9
    6720:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&host_uart_module, USART_HOST, &host_uart_config);
    6722:	003a      	movs	r2, r7
    6724:	2384      	movs	r3, #132	; 0x84
    6726:	05d9      	lsls	r1, r3, #23
    6728:	4b13      	ldr	r3, [pc, #76]	; (6778 <sio2host_init+0x90>)
    672a:	0018      	movs	r0, r3
    672c:	4b13      	ldr	r3, [pc, #76]	; (677c <sio2host_init+0x94>)
    672e:	4798      	blx	r3
	usart_enable(&host_uart_module);
    6730:	4b11      	ldr	r3, [pc, #68]	; (6778 <sio2host_init+0x90>)
    6732:	0018      	movs	r0, r3
    6734:	4b12      	ldr	r3, [pc, #72]	; (6780 <sio2host_init+0x98>)
    6736:	4798      	blx	r3
	/* Enable transceivers */
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
    6738:	4b0f      	ldr	r3, [pc, #60]	; (6778 <sio2host_init+0x90>)
    673a:	2101      	movs	r1, #1
    673c:	0018      	movs	r0, r3
    673e:	4b11      	ldr	r3, [pc, #68]	; (6784 <sio2host_init+0x9c>)
    6740:	4798      	blx	r3
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
    6742:	4b0d      	ldr	r3, [pc, #52]	; (6778 <sio2host_init+0x90>)
    6744:	2100      	movs	r1, #0
    6746:	0018      	movs	r0, r3
    6748:	4b0e      	ldr	r3, [pc, #56]	; (6784 <sio2host_init+0x9c>)
    674a:	4798      	blx	r3
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
    674c:	4b0e      	ldr	r3, [pc, #56]	; (6788 <sio2host_init+0xa0>)
    674e:	0019      	movs	r1, r3
    6750:	2000      	movs	r0, #0
    6752:	4b0e      	ldr	r3, [pc, #56]	; (678c <sio2host_init+0xa4>)
    6754:	4798      	blx	r3
    6756:	2384      	movs	r3, #132	; 0x84
    6758:	05db      	lsls	r3, r3, #23
    675a:	2204      	movs	r2, #4
    675c:	759a      	strb	r2, [r3, #22]
    675e:	2008      	movs	r0, #8
    6760:	4b0b      	ldr	r3, [pc, #44]	; (6790 <sio2host_init+0xa8>)
    6762:	4798      	blx	r3
}
    6764:	46c0      	nop			; (mov r8, r8)
    6766:	46bd      	mov	sp, r7
    6768:	b010      	add	sp, #64	; 0x40
    676a:	bd80      	pop	{r7, pc}
    676c:	00006381 	.word	0x00006381
    6770:	00040003 	.word	0x00040003
    6774:	00050003 	.word	0x00050003
    6778:	20000bfc 	.word	0x20000bfc
    677c:	00006679 	.word	0x00006679
    6780:	00006441 	.word	0x00006441
    6784:	000064d5 	.word	0x000064d5
    6788:	00006921 	.word	0x00006921
    678c:	00002f4d 	.word	0x00002f4d
    6790:	000062e1 	.word	0x000062e1

00006794 <sio2host_deinit>:
void sio2host_deinit(void)
{
    6794:	b580      	push	{r7, lr}
    6796:	af00      	add	r7, sp, #0
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || (WLR089)	
		usart_disable(&host_uart_module);
    6798:	4b08      	ldr	r3, [pc, #32]	; (67bc <sio2host_deinit+0x28>)
    679a:	0018      	movs	r0, r3
    679c:	4b08      	ldr	r3, [pc, #32]	; (67c0 <sio2host_deinit+0x2c>)
    679e:	4798      	blx	r3
	
		/* Disable transceivers */
		usart_disable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
    67a0:	4b06      	ldr	r3, [pc, #24]	; (67bc <sio2host_deinit+0x28>)
    67a2:	2101      	movs	r1, #1
    67a4:	0018      	movs	r0, r3
    67a6:	4b07      	ldr	r3, [pc, #28]	; (67c4 <sio2host_deinit+0x30>)
    67a8:	4798      	blx	r3
		usart_disable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
    67aa:	4b04      	ldr	r3, [pc, #16]	; (67bc <sio2host_deinit+0x28>)
    67ac:	2100      	movs	r1, #0
    67ae:	0018      	movs	r0, r3
    67b0:	4b04      	ldr	r3, [pc, #16]	; (67c4 <sio2host_deinit+0x30>)
    67b2:	4798      	blx	r3
#endif	
}
    67b4:	46c0      	nop			; (mov r8, r8)
    67b6:	46bd      	mov	sp, r7
    67b8:	bd80      	pop	{r7, pc}
    67ba:	46c0      	nop			; (mov r8, r8)
    67bc:	20000bfc 	.word	0x20000bfc
    67c0:	00006489 	.word	0x00006489
    67c4:	00006541 	.word	0x00006541

000067c8 <sio2host_rx>:
	} while (status != STATUS_OK);
	return length;
}

uint8_t sio2host_rx(uint8_t *data, uint8_t max_length)
{
    67c8:	b580      	push	{r7, lr}
    67ca:	b084      	sub	sp, #16
    67cc:	af00      	add	r7, sp, #0
    67ce:	6078      	str	r0, [r7, #4]
    67d0:	000a      	movs	r2, r1
    67d2:	1cfb      	adds	r3, r7, #3
    67d4:	701a      	strb	r2, [r3, #0]
	uint8_t data_received = 0;
    67d6:	230f      	movs	r3, #15
    67d8:	18fb      	adds	r3, r7, r3
    67da:	2200      	movs	r2, #0
    67dc:	701a      	strb	r2, [r3, #0]
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    67de:	4b36      	ldr	r3, [pc, #216]	; (68b8 <sio2host_rx+0xf0>)
    67e0:	781a      	ldrb	r2, [r3, #0]
    67e2:	4b36      	ldr	r3, [pc, #216]	; (68bc <sio2host_rx+0xf4>)
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	429a      	cmp	r2, r3
    67e8:	d308      	bcc.n	67fc <sio2host_rx+0x34>
	{
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    67ea:	4b33      	ldr	r3, [pc, #204]	; (68b8 <sio2host_rx+0xf0>)
    67ec:	781a      	ldrb	r2, [r3, #0]
    67ee:	4b33      	ldr	r3, [pc, #204]	; (68bc <sio2host_rx+0xf4>)
    67f0:	781b      	ldrb	r3, [r3, #0]
    67f2:	1ad3      	subs	r3, r2, r3
    67f4:	b2da      	uxtb	r2, r3
    67f6:	4b32      	ldr	r3, [pc, #200]	; (68c0 <sio2host_rx+0xf8>)
    67f8:	701a      	strb	r2, [r3, #0]
    67fa:	e009      	b.n	6810 <sio2host_rx+0x48>
	}
	else
	{
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    67fc:	4b2e      	ldr	r3, [pc, #184]	; (68b8 <sio2host_rx+0xf0>)
    67fe:	781a      	ldrb	r2, [r3, #0]
    6800:	4b2e      	ldr	r3, [pc, #184]	; (68bc <sio2host_rx+0xf4>)
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	1ad3      	subs	r3, r2, r3
    6806:	b2db      	uxtb	r3, r3
    6808:	3b80      	subs	r3, #128	; 0x80
    680a:	b2da      	uxtb	r2, r3
    680c:	4b2c      	ldr	r3, [pc, #176]	; (68c0 <sio2host_rx+0xf8>)
    680e:	701a      	strb	r2, [r3, #0]
	}
	
	if (0 == serial_rx_count) {
    6810:	4b2b      	ldr	r3, [pc, #172]	; (68c0 <sio2host_rx+0xf8>)
    6812:	781b      	ldrb	r3, [r3, #0]
    6814:	2b00      	cmp	r3, #0
    6816:	d101      	bne.n	681c <sio2host_rx+0x54>
		return 0;
    6818:	2300      	movs	r3, #0
    681a:	e048      	b.n	68ae <sio2host_rx+0xe6>
	}

	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    681c:	4b28      	ldr	r3, [pc, #160]	; (68c0 <sio2host_rx+0xf8>)
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	b25b      	sxtb	r3, r3
    6822:	2b00      	cmp	r3, #0
    6824:	da0f      	bge.n	6846 <sio2host_rx+0x7e>
		/*
		 * Bytes between head and tail are overwritten by new data.
		 * The oldest data in buffer is the one to which the tail is
		 * pointing. So reading operation should start from the tail.
		 */
		serial_rx_buf_head = serial_rx_buf_tail;
    6826:	4b24      	ldr	r3, [pc, #144]	; (68b8 <sio2host_rx+0xf0>)
    6828:	781a      	ldrb	r2, [r3, #0]
    682a:	4b24      	ldr	r3, [pc, #144]	; (68bc <sio2host_rx+0xf4>)
    682c:	701a      	strb	r2, [r3, #0]
		/*
		 * This is a buffer overflow case. But still only the number of
		 * bytes equivalent to
		 * full buffer size are useful.
		 */
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    682e:	4b24      	ldr	r3, [pc, #144]	; (68c0 <sio2host_rx+0xf8>)
    6830:	2280      	movs	r2, #128	; 0x80
    6832:	701a      	strb	r2, [r3, #0]

		/* Bytes received is more than or equal to buffer. */
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    6834:	1cfb      	adds	r3, r7, #3
    6836:	781b      	ldrb	r3, [r3, #0]
    6838:	b25b      	sxtb	r3, r3
    683a:	2b00      	cmp	r3, #0
    683c:	da0d      	bge.n	685a <sio2host_rx+0x92>
			 * Requested receive length (max_length) is more than
			 * the
			 * max size of receive buffer, but at max the full
			 * buffer can be read.
			 */
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    683e:	1cfb      	adds	r3, r7, #3
    6840:	2280      	movs	r2, #128	; 0x80
    6842:	701a      	strb	r2, [r3, #0]
    6844:	e009      	b.n	685a <sio2host_rx+0x92>
		}
	} else {
		/* Bytes received is less than receive buffer maximum length. */
		if (max_length > serial_rx_count) {
    6846:	4b1e      	ldr	r3, [pc, #120]	; (68c0 <sio2host_rx+0xf8>)
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	1cfa      	adds	r2, r7, #3
    684c:	7812      	ldrb	r2, [r2, #0]
    684e:	429a      	cmp	r2, r3
    6850:	d903      	bls.n	685a <sio2host_rx+0x92>
			 * the data
			 * present in receive buffer. Hence only the number of
			 * bytes
			 * present in receive buffer are read.
			 */
			max_length = serial_rx_count;
    6852:	1cfb      	adds	r3, r7, #3
    6854:	4a1a      	ldr	r2, [pc, #104]	; (68c0 <sio2host_rx+0xf8>)
    6856:	7812      	ldrb	r2, [r2, #0]
    6858:	701a      	strb	r2, [r3, #0]
		}
	}

	data_received = max_length;
    685a:	230f      	movs	r3, #15
    685c:	18fb      	adds	r3, r7, r3
    685e:	1cfa      	adds	r2, r7, #3
    6860:	7812      	ldrb	r2, [r2, #0]
    6862:	701a      	strb	r2, [r3, #0]
	while (max_length > 0) {
    6864:	e01c      	b.n	68a0 <sio2host_rx+0xd8>
		/* Start to copy from head. */
		*data = serial_rx_buf[serial_rx_buf_head];
    6866:	4b15      	ldr	r3, [pc, #84]	; (68bc <sio2host_rx+0xf4>)
    6868:	781b      	ldrb	r3, [r3, #0]
    686a:	001a      	movs	r2, r3
    686c:	4b15      	ldr	r3, [pc, #84]	; (68c4 <sio2host_rx+0xfc>)
    686e:	5c9a      	ldrb	r2, [r3, r2]
    6870:	687b      	ldr	r3, [r7, #4]
    6872:	701a      	strb	r2, [r3, #0]
		data++;
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	3301      	adds	r3, #1
    6878:	607b      	str	r3, [r7, #4]
		max_length--;
    687a:	1cfb      	adds	r3, r7, #3
    687c:	781a      	ldrb	r2, [r3, #0]
    687e:	1cfb      	adds	r3, r7, #3
    6880:	3a01      	subs	r2, #1
    6882:	701a      	strb	r2, [r3, #0]
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    6884:	4b0d      	ldr	r3, [pc, #52]	; (68bc <sio2host_rx+0xf4>)
    6886:	781b      	ldrb	r3, [r3, #0]
    6888:	2b7f      	cmp	r3, #127	; 0x7f
    688a:	d103      	bne.n	6894 <sio2host_rx+0xcc>
			serial_rx_buf_head = 0;
    688c:	4b0b      	ldr	r3, [pc, #44]	; (68bc <sio2host_rx+0xf4>)
    688e:	2200      	movs	r2, #0
    6890:	701a      	strb	r2, [r3, #0]
    6892:	e005      	b.n	68a0 <sio2host_rx+0xd8>
		}
		else
		{
			serial_rx_buf_head++;
    6894:	4b09      	ldr	r3, [pc, #36]	; (68bc <sio2host_rx+0xf4>)
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	3301      	adds	r3, #1
    689a:	b2da      	uxtb	r2, r3
    689c:	4b07      	ldr	r3, [pc, #28]	; (68bc <sio2host_rx+0xf4>)
    689e:	701a      	strb	r2, [r3, #0]
	while (max_length > 0) {
    68a0:	1cfb      	adds	r3, r7, #3
    68a2:	781b      	ldrb	r3, [r3, #0]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d1de      	bne.n	6866 <sio2host_rx+0x9e>
		}
	}
	return data_received;
    68a8:	230f      	movs	r3, #15
    68aa:	18fb      	adds	r3, r7, r3
    68ac:	781b      	ldrb	r3, [r3, #0]
}
    68ae:	0018      	movs	r0, r3
    68b0:	46bd      	mov	sp, r7
    68b2:	b004      	add	sp, #16
    68b4:	bd80      	pop	{r7, pc}
    68b6:	46c0      	nop			; (mov r8, r8)
    68b8:	20000cb1 	.word	0x20000cb1
    68bc:	20000cb0 	.word	0x20000cb0
    68c0:	20000cb2 	.word	0x20000cb2
    68c4:	20000c30 	.word	0x20000c30

000068c8 <sio2host_getchar>:

uint8_t sio2host_getchar(void)
{
    68c8:	b580      	push	{r7, lr}
    68ca:	b082      	sub	sp, #8
    68cc:	af00      	add	r7, sp, #0
	uint8_t c;
	while (0 == sio2host_rx(&c, 1)) {
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	1dfb      	adds	r3, r7, #7
    68d2:	2101      	movs	r1, #1
    68d4:	0018      	movs	r0, r3
    68d6:	4b05      	ldr	r3, [pc, #20]	; (68ec <sio2host_getchar+0x24>)
    68d8:	4798      	blx	r3
    68da:	1e03      	subs	r3, r0, #0
    68dc:	d0f8      	beq.n	68d0 <sio2host_getchar+0x8>
	}
	return c;
    68de:	1dfb      	adds	r3, r7, #7
    68e0:	781b      	ldrb	r3, [r3, #0]
}
    68e2:	0018      	movs	r0, r3
    68e4:	46bd      	mov	sp, r7
    68e6:	b002      	add	sp, #8
    68e8:	bd80      	pop	{r7, pc}
    68ea:	46c0      	nop			; (mov r8, r8)
    68ec:	000067c9 	.word	0x000067c9

000068f0 <sio2host_getchar_nowait>:
{
	sio2host_tx(&ch, 1);
}

int sio2host_getchar_nowait(void)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b082      	sub	sp, #8
    68f4:	af00      	add	r7, sp, #0
	uint8_t c;
	int back = sio2host_rx(&c, 1);
    68f6:	1cfb      	adds	r3, r7, #3
    68f8:	2101      	movs	r1, #1
    68fa:	0018      	movs	r0, r3
    68fc:	4b07      	ldr	r3, [pc, #28]	; (691c <sio2host_getchar_nowait+0x2c>)
    68fe:	4798      	blx	r3
    6900:	0003      	movs	r3, r0
    6902:	607b      	str	r3, [r7, #4]
	if (back >= 1) {
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	2b00      	cmp	r3, #0
    6908:	dd02      	ble.n	6910 <sio2host_getchar_nowait+0x20>
		return c;
    690a:	1cfb      	adds	r3, r7, #3
    690c:	781b      	ldrb	r3, [r3, #0]
    690e:	e001      	b.n	6914 <sio2host_getchar_nowait+0x24>
	} else {
		return (-1);
    6910:	2301      	movs	r3, #1
    6912:	425b      	negs	r3, r3
	}
}
    6914:	0018      	movs	r0, r3
    6916:	46bd      	mov	sp, r7
    6918:	b002      	add	sp, #8
    691a:	bd80      	pop	{r7, pc}
    691c:	000067c9 	.word	0x000067c9

00006920 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    6920:	b580      	push	{r7, lr}
    6922:	b084      	sub	sp, #16
    6924:	af00      	add	r7, sp, #0
    6926:	0002      	movs	r2, r0
    6928:	1dfb      	adds	r3, r7, #7
    692a:	701a      	strb	r2, [r3, #0]
	uint8_t temp;
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
	usart_serial_read_packet(&host_uart_module, &temp, 1);
    692c:	230f      	movs	r3, #15
    692e:	18f9      	adds	r1, r7, r3
    6930:	4b15      	ldr	r3, [pc, #84]	; (6988 <USART_HOST_ISR_VECT+0x68>)
    6932:	2201      	movs	r2, #1
    6934:	0018      	movs	r0, r3
    6936:	4b15      	ldr	r3, [pc, #84]	; (698c <USART_HOST_ISR_VECT+0x6c>)
    6938:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    693a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    693c:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    6940:	4b13      	ldr	r3, [pc, #76]	; (6990 <USART_HOST_ISR_VECT+0x70>)
    6942:	2200      	movs	r2, #0
    6944:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    6946:	4b13      	ldr	r3, [pc, #76]	; (6994 <USART_HOST_ISR_VECT+0x74>)
    6948:	781b      	ldrb	r3, [r3, #0]
    694a:	001a      	movs	r2, r3
    694c:	230f      	movs	r3, #15
    694e:	18fb      	adds	r3, r7, r3
    6950:	7819      	ldrb	r1, [r3, #0]
    6952:	4b11      	ldr	r3, [pc, #68]	; (6998 <USART_HOST_ISR_VECT+0x78>)
    6954:	5499      	strb	r1, [r3, r2]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    6956:	4b0f      	ldr	r3, [pc, #60]	; (6994 <USART_HOST_ISR_VECT+0x74>)
    6958:	781b      	ldrb	r3, [r3, #0]
    695a:	2b7f      	cmp	r3, #127	; 0x7f
    695c:	d103      	bne.n	6966 <USART_HOST_ISR_VECT+0x46>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
    695e:	4b0d      	ldr	r3, [pc, #52]	; (6994 <USART_HOST_ISR_VECT+0x74>)
    6960:	2200      	movs	r2, #0
    6962:	701a      	strb	r2, [r3, #0]
    6964:	e005      	b.n	6972 <USART_HOST_ISR_VECT+0x52>
	} else {
		serial_rx_buf_tail++;
    6966:	4b0b      	ldr	r3, [pc, #44]	; (6994 <USART_HOST_ISR_VECT+0x74>)
    6968:	781b      	ldrb	r3, [r3, #0]
    696a:	3301      	adds	r3, #1
    696c:	b2da      	uxtb	r2, r3
    696e:	4b09      	ldr	r3, [pc, #36]	; (6994 <USART_HOST_ISR_VECT+0x74>)
    6970:	701a      	strb	r2, [r3, #0]
	}

	cpu_irq_enable();
    6972:	4b07      	ldr	r3, [pc, #28]	; (6990 <USART_HOST_ISR_VECT+0x70>)
    6974:	2201      	movs	r2, #1
    6976:	701a      	strb	r2, [r3, #0]
    6978:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    697c:	b662      	cpsie	i
}
    697e:	46c0      	nop			; (mov r8, r8)
    6980:	46bd      	mov	sp, r7
    6982:	b004      	add	sp, #16
    6984:	bd80      	pop	{r7, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	20000bfc 	.word	0x20000bfc
    698c:	0000664d 	.word	0x0000664d
    6990:	20000008 	.word	0x20000008
    6994:	20000cb1 	.word	0x20000cb1
    6998:	20000c30 	.word	0x20000c30

0000699c <system_pinmux_get_group_from_gpio_pin>:
{
    699c:	b580      	push	{r7, lr}
    699e:	b084      	sub	sp, #16
    69a0:	af00      	add	r7, sp, #0
    69a2:	0002      	movs	r2, r0
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    69a8:	230f      	movs	r3, #15
    69aa:	18fb      	adds	r3, r7, r3
    69ac:	1dfa      	adds	r2, r7, #7
    69ae:	7812      	ldrb	r2, [r2, #0]
    69b0:	09d2      	lsrs	r2, r2, #7
    69b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    69b4:	230e      	movs	r3, #14
    69b6:	18fb      	adds	r3, r7, r3
    69b8:	1dfa      	adds	r2, r7, #7
    69ba:	7812      	ldrb	r2, [r2, #0]
    69bc:	0952      	lsrs	r2, r2, #5
    69be:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    69c0:	4b0d      	ldr	r3, [pc, #52]	; (69f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    69c2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    69c4:	230f      	movs	r3, #15
    69c6:	18fb      	adds	r3, r7, r3
    69c8:	781b      	ldrb	r3, [r3, #0]
    69ca:	2b00      	cmp	r3, #0
    69cc:	d10f      	bne.n	69ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    69ce:	230f      	movs	r3, #15
    69d0:	18fb      	adds	r3, r7, r3
    69d2:	781b      	ldrb	r3, [r3, #0]
    69d4:	009b      	lsls	r3, r3, #2
    69d6:	2210      	movs	r2, #16
    69d8:	4694      	mov	ip, r2
    69da:	44bc      	add	ip, r7
    69dc:	4463      	add	r3, ip
    69de:	3b08      	subs	r3, #8
    69e0:	681a      	ldr	r2, [r3, #0]
    69e2:	230e      	movs	r3, #14
    69e4:	18fb      	adds	r3, r7, r3
    69e6:	781b      	ldrb	r3, [r3, #0]
    69e8:	01db      	lsls	r3, r3, #7
    69ea:	18d3      	adds	r3, r2, r3
    69ec:	e000      	b.n	69f0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    69ee:	2300      	movs	r3, #0
}
    69f0:	0018      	movs	r0, r3
    69f2:	46bd      	mov	sp, r7
    69f4:	b004      	add	sp, #16
    69f6:	bd80      	pop	{r7, pc}
    69f8:	40002800 	.word	0x40002800

000069fc <port_get_group_from_gpio_pin>:
{
    69fc:	b580      	push	{r7, lr}
    69fe:	b082      	sub	sp, #8
    6a00:	af00      	add	r7, sp, #0
    6a02:	0002      	movs	r2, r0
    6a04:	1dfb      	adds	r3, r7, #7
    6a06:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6a08:	1dfb      	adds	r3, r7, #7
    6a0a:	781b      	ldrb	r3, [r3, #0]
    6a0c:	0018      	movs	r0, r3
    6a0e:	4b03      	ldr	r3, [pc, #12]	; (6a1c <port_get_group_from_gpio_pin+0x20>)
    6a10:	4798      	blx	r3
    6a12:	0003      	movs	r3, r0
}
    6a14:	0018      	movs	r0, r3
    6a16:	46bd      	mov	sp, r7
    6a18:	b002      	add	sp, #8
    6a1a:	bd80      	pop	{r7, pc}
    6a1c:	0000699d 	.word	0x0000699d

00006a20 <port_get_config_defaults>:
{
    6a20:	b580      	push	{r7, lr}
    6a22:	b082      	sub	sp, #8
    6a24:	af00      	add	r7, sp, #0
    6a26:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    6a28:	687b      	ldr	r3, [r7, #4]
    6a2a:	2200      	movs	r2, #0
    6a2c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	2201      	movs	r2, #1
    6a32:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    6a34:	687b      	ldr	r3, [r7, #4]
    6a36:	2200      	movs	r2, #0
    6a38:	709a      	strb	r2, [r3, #2]
}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	46bd      	mov	sp, r7
    6a3e:	b002      	add	sp, #8
    6a40:	bd80      	pop	{r7, pc}
	...

00006a44 <port_pin_set_output_level>:
{
    6a44:	b580      	push	{r7, lr}
    6a46:	b084      	sub	sp, #16
    6a48:	af00      	add	r7, sp, #0
    6a4a:	0002      	movs	r2, r0
    6a4c:	1dfb      	adds	r3, r7, #7
    6a4e:	701a      	strb	r2, [r3, #0]
    6a50:	1dbb      	adds	r3, r7, #6
    6a52:	1c0a      	adds	r2, r1, #0
    6a54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6a56:	1dfb      	adds	r3, r7, #7
    6a58:	781b      	ldrb	r3, [r3, #0]
    6a5a:	0018      	movs	r0, r3
    6a5c:	4b0d      	ldr	r3, [pc, #52]	; (6a94 <port_pin_set_output_level+0x50>)
    6a5e:	4798      	blx	r3
    6a60:	0003      	movs	r3, r0
    6a62:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6a64:	1dfb      	adds	r3, r7, #7
    6a66:	781b      	ldrb	r3, [r3, #0]
    6a68:	221f      	movs	r2, #31
    6a6a:	4013      	ands	r3, r2
    6a6c:	2201      	movs	r2, #1
    6a6e:	409a      	lsls	r2, r3
    6a70:	0013      	movs	r3, r2
    6a72:	60bb      	str	r3, [r7, #8]
	if (level) {
    6a74:	1dbb      	adds	r3, r7, #6
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	2b00      	cmp	r3, #0
    6a7a:	d003      	beq.n	6a84 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6a7c:	68fb      	ldr	r3, [r7, #12]
    6a7e:	68ba      	ldr	r2, [r7, #8]
    6a80:	619a      	str	r2, [r3, #24]
}
    6a82:	e002      	b.n	6a8a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6a84:	68fb      	ldr	r3, [r7, #12]
    6a86:	68ba      	ldr	r2, [r7, #8]
    6a88:	615a      	str	r2, [r3, #20]
}
    6a8a:	46c0      	nop			; (mov r8, r8)
    6a8c:	46bd      	mov	sp, r7
    6a8e:	b004      	add	sp, #16
    6a90:	bd80      	pop	{r7, pc}
    6a92:	46c0      	nop			; (mov r8, r8)
    6a94:	000069fd 	.word	0x000069fd

00006a98 <spi_is_syncing>:
{
    6a98:	b580      	push	{r7, lr}
    6a9a:	b084      	sub	sp, #16
    6a9c:	af00      	add	r7, sp, #0
    6a9e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6aa0:	687b      	ldr	r3, [r7, #4]
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    6aa6:	68fb      	ldr	r3, [r7, #12]
    6aa8:	69db      	ldr	r3, [r3, #28]
    6aaa:	1e5a      	subs	r2, r3, #1
    6aac:	4193      	sbcs	r3, r2
    6aae:	b2db      	uxtb	r3, r3
}
    6ab0:	0018      	movs	r0, r3
    6ab2:	46bd      	mov	sp, r7
    6ab4:	b004      	add	sp, #16
    6ab6:	bd80      	pop	{r7, pc}

00006ab8 <spi_get_config_defaults>:
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b082      	sub	sp, #8
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	2201      	movs	r2, #1
    6ac4:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	2200      	movs	r2, #0
    6aca:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	2200      	movs	r2, #0
    6ad0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    6ad2:	687b      	ldr	r3, [r7, #4]
    6ad4:	22c0      	movs	r2, #192	; 0xc0
    6ad6:	0392      	lsls	r2, r2, #14
    6ad8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6ada:	687b      	ldr	r3, [r7, #4]
    6adc:	2200      	movs	r2, #0
    6ade:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    6ae0:	687b      	ldr	r3, [r7, #4]
    6ae2:	2200      	movs	r2, #0
    6ae4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	2201      	movs	r2, #1
    6aea:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    6aec:	687b      	ldr	r3, [r7, #4]
    6aee:	2201      	movs	r2, #1
    6af0:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    6af2:	687b      	ldr	r3, [r7, #4]
    6af4:	2200      	movs	r2, #0
    6af6:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	2224      	movs	r2, #36	; 0x24
    6afc:	2100      	movs	r1, #0
    6afe:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	3318      	adds	r3, #24
    6b04:	220c      	movs	r2, #12
    6b06:	2100      	movs	r1, #0
    6b08:	0018      	movs	r0, r3
    6b0a:	4b0a      	ldr	r3, [pc, #40]	; (6b34 <spi_get_config_defaults+0x7c>)
    6b0c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    6b0e:	687b      	ldr	r3, [r7, #4]
    6b10:	4a09      	ldr	r2, [pc, #36]	; (6b38 <spi_get_config_defaults+0x80>)
    6b12:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    6b14:	687b      	ldr	r3, [r7, #4]
    6b16:	2200      	movs	r2, #0
    6b18:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    6b1a:	687b      	ldr	r3, [r7, #4]
    6b1c:	2200      	movs	r2, #0
    6b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    6b20:	687b      	ldr	r3, [r7, #4]
    6b22:	2200      	movs	r2, #0
    6b24:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	2200      	movs	r2, #0
    6b2a:	635a      	str	r2, [r3, #52]	; 0x34
};
    6b2c:	46c0      	nop			; (mov r8, r8)
    6b2e:	46bd      	mov	sp, r7
    6b30:	b002      	add	sp, #8
    6b32:	bd80      	pop	{r7, pc}
    6b34:	000241cd 	.word	0x000241cd
    6b38:	000186a0 	.word	0x000186a0

00006b3c <spi_slave_inst_get_config_defaults>:
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	b082      	sub	sp, #8
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	220a      	movs	r2, #10
    6b48:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    6b4a:	687b      	ldr	r3, [r7, #4]
    6b4c:	2200      	movs	r2, #0
    6b4e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    6b50:	687b      	ldr	r3, [r7, #4]
    6b52:	2200      	movs	r2, #0
    6b54:	709a      	strb	r2, [r3, #2]
}
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	46bd      	mov	sp, r7
    6b5a:	b002      	add	sp, #8
    6b5c:	bd80      	pop	{r7, pc}
	...

00006b60 <spi_attach_slave>:
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b084      	sub	sp, #16
    6b64:	af00      	add	r7, sp, #0
    6b66:	6078      	str	r0, [r7, #4]
    6b68:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
    6b6a:	683b      	ldr	r3, [r7, #0]
    6b6c:	781a      	ldrb	r2, [r3, #0]
    6b6e:	687b      	ldr	r3, [r7, #4]
    6b70:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    6b72:	683b      	ldr	r3, [r7, #0]
    6b74:	785a      	ldrb	r2, [r3, #1]
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    6b7a:	683b      	ldr	r3, [r7, #0]
    6b7c:	789a      	ldrb	r2, [r3, #2]
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    6b82:	230c      	movs	r3, #12
    6b84:	18fb      	adds	r3, r7, r3
    6b86:	0018      	movs	r0, r3
    6b88:	4b0b      	ldr	r3, [pc, #44]	; (6bb8 <spi_attach_slave+0x58>)
    6b8a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6b8c:	230c      	movs	r3, #12
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	2201      	movs	r2, #1
    6b92:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    6b94:	687b      	ldr	r3, [r7, #4]
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	220c      	movs	r2, #12
    6b9a:	18ba      	adds	r2, r7, r2
    6b9c:	0011      	movs	r1, r2
    6b9e:	0018      	movs	r0, r3
    6ba0:	4b06      	ldr	r3, [pc, #24]	; (6bbc <spi_attach_slave+0x5c>)
    6ba2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    6ba4:	687b      	ldr	r3, [r7, #4]
    6ba6:	781b      	ldrb	r3, [r3, #0]
    6ba8:	2101      	movs	r1, #1
    6baa:	0018      	movs	r0, r3
    6bac:	4b04      	ldr	r3, [pc, #16]	; (6bc0 <spi_attach_slave+0x60>)
    6bae:	4798      	blx	r3
}
    6bb0:	46c0      	nop			; (mov r8, r8)
    6bb2:	46bd      	mov	sp, r7
    6bb4:	b004      	add	sp, #16
    6bb6:	bd80      	pop	{r7, pc}
    6bb8:	00006a21 	.word	0x00006a21
    6bbc:	000020f5 	.word	0x000020f5
    6bc0:	00006a45 	.word	0x00006a45

00006bc4 <spi_enable>:
{
    6bc4:	b580      	push	{r7, lr}
    6bc6:	b084      	sub	sp, #16
    6bc8:	af00      	add	r7, sp, #0
    6bca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6bcc:	687b      	ldr	r3, [r7, #4]
    6bce:	681b      	ldr	r3, [r3, #0]
    6bd0:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
    6bd2:	46c0      	nop			; (mov r8, r8)
    6bd4:	687b      	ldr	r3, [r7, #4]
    6bd6:	0018      	movs	r0, r3
    6bd8:	4b06      	ldr	r3, [pc, #24]	; (6bf4 <spi_enable+0x30>)
    6bda:	4798      	blx	r3
    6bdc:	1e03      	subs	r3, r0, #0
    6bde:	d1f9      	bne.n	6bd4 <spi_enable+0x10>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6be0:	68fb      	ldr	r3, [r7, #12]
    6be2:	681b      	ldr	r3, [r3, #0]
    6be4:	2202      	movs	r2, #2
    6be6:	431a      	orrs	r2, r3
    6be8:	68fb      	ldr	r3, [r7, #12]
    6bea:	601a      	str	r2, [r3, #0]
}
    6bec:	46c0      	nop			; (mov r8, r8)
    6bee:	46bd      	mov	sp, r7
    6bf0:	b004      	add	sp, #16
    6bf2:	bd80      	pop	{r7, pc}
    6bf4:	00006a99 	.word	0x00006a99

00006bf8 <spi_disable>:
{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b084      	sub	sp, #16
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c00:	687b      	ldr	r3, [r7, #4]
    6c02:	681b      	ldr	r3, [r3, #0]
    6c04:	60fb      	str	r3, [r7, #12]
	while (spi_is_syncing(module)) {
    6c06:	46c0      	nop			; (mov r8, r8)
    6c08:	687b      	ldr	r3, [r7, #4]
    6c0a:	0018      	movs	r0, r3
    6c0c:	4b0a      	ldr	r3, [pc, #40]	; (6c38 <spi_disable+0x40>)
    6c0e:	4798      	blx	r3
    6c10:	1e03      	subs	r3, r0, #0
    6c12:	d1f9      	bne.n	6c08 <spi_disable+0x10>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    6c14:	68fb      	ldr	r3, [r7, #12]
    6c16:	228f      	movs	r2, #143	; 0x8f
    6c18:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    6c1a:	68fb      	ldr	r3, [r7, #12]
    6c1c:	228f      	movs	r2, #143	; 0x8f
    6c1e:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6c20:	68fb      	ldr	r3, [r7, #12]
    6c22:	681b      	ldr	r3, [r3, #0]
    6c24:	2202      	movs	r2, #2
    6c26:	4393      	bics	r3, r2
    6c28:	001a      	movs	r2, r3
    6c2a:	68fb      	ldr	r3, [r7, #12]
    6c2c:	601a      	str	r2, [r3, #0]
}
    6c2e:	46c0      	nop			; (mov r8, r8)
    6c30:	46bd      	mov	sp, r7
    6c32:	b004      	add	sp, #16
    6c34:	bd80      	pop	{r7, pc}
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	00006a99 	.word	0x00006a99

00006c3c <spi_is_write_complete>:
{
    6c3c:	b580      	push	{r7, lr}
    6c3e:	b084      	sub	sp, #16
    6c40:	af00      	add	r7, sp, #0
    6c42:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c44:	687b      	ldr	r3, [r7, #4]
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6c4a:	68fb      	ldr	r3, [r7, #12]
    6c4c:	7e1b      	ldrb	r3, [r3, #24]
    6c4e:	b2db      	uxtb	r3, r3
    6c50:	001a      	movs	r2, r3
    6c52:	2302      	movs	r3, #2
    6c54:	4013      	ands	r3, r2
    6c56:	1e5a      	subs	r2, r3, #1
    6c58:	4193      	sbcs	r3, r2
    6c5a:	b2db      	uxtb	r3, r3
}
    6c5c:	0018      	movs	r0, r3
    6c5e:	46bd      	mov	sp, r7
    6c60:	b004      	add	sp, #16
    6c62:	bd80      	pop	{r7, pc}

00006c64 <spi_is_ready_to_write>:
{
    6c64:	b580      	push	{r7, lr}
    6c66:	b084      	sub	sp, #16
    6c68:	af00      	add	r7, sp, #0
    6c6a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	681b      	ldr	r3, [r3, #0]
    6c70:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6c72:	68fb      	ldr	r3, [r7, #12]
    6c74:	7e1b      	ldrb	r3, [r3, #24]
    6c76:	b2db      	uxtb	r3, r3
    6c78:	001a      	movs	r2, r3
    6c7a:	2301      	movs	r3, #1
    6c7c:	4013      	ands	r3, r2
    6c7e:	1e5a      	subs	r2, r3, #1
    6c80:	4193      	sbcs	r3, r2
    6c82:	b2db      	uxtb	r3, r3
}
    6c84:	0018      	movs	r0, r3
    6c86:	46bd      	mov	sp, r7
    6c88:	b004      	add	sp, #16
    6c8a:	bd80      	pop	{r7, pc}

00006c8c <spi_is_ready_to_read>:
{
    6c8c:	b580      	push	{r7, lr}
    6c8e:	b084      	sub	sp, #16
    6c90:	af00      	add	r7, sp, #0
    6c92:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	681b      	ldr	r3, [r3, #0]
    6c98:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6c9a:	68fb      	ldr	r3, [r7, #12]
    6c9c:	7e1b      	ldrb	r3, [r3, #24]
    6c9e:	b2db      	uxtb	r3, r3
    6ca0:	001a      	movs	r2, r3
    6ca2:	2304      	movs	r3, #4
    6ca4:	4013      	ands	r3, r2
    6ca6:	1e5a      	subs	r2, r3, #1
    6ca8:	4193      	sbcs	r3, r2
    6caa:	b2db      	uxtb	r3, r3
}
    6cac:	0018      	movs	r0, r3
    6cae:	46bd      	mov	sp, r7
    6cb0:	b004      	add	sp, #16
    6cb2:	bd80      	pop	{r7, pc}

00006cb4 <spi_write>:
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b084      	sub	sp, #16
    6cb8:	af00      	add	r7, sp, #0
    6cba:	6078      	str	r0, [r7, #4]
    6cbc:	000a      	movs	r2, r1
    6cbe:	1cbb      	adds	r3, r7, #2
    6cc0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6cc2:	687b      	ldr	r3, [r7, #4]
    6cc4:	681b      	ldr	r3, [r3, #0]
    6cc6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    6cc8:	687b      	ldr	r3, [r7, #4]
    6cca:	0018      	movs	r0, r3
    6ccc:	4b0a      	ldr	r3, [pc, #40]	; (6cf8 <spi_write+0x44>)
    6cce:	4798      	blx	r3
    6cd0:	0003      	movs	r3, r0
    6cd2:	001a      	movs	r2, r3
    6cd4:	2301      	movs	r3, #1
    6cd6:	4053      	eors	r3, r2
    6cd8:	b2db      	uxtb	r3, r3
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d001      	beq.n	6ce2 <spi_write+0x2e>
		return STATUS_BUSY;
    6cde:	2305      	movs	r3, #5
    6ce0:	e006      	b.n	6cf0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6ce2:	1cbb      	adds	r3, r7, #2
    6ce4:	881b      	ldrh	r3, [r3, #0]
    6ce6:	05db      	lsls	r3, r3, #23
    6ce8:	0dda      	lsrs	r2, r3, #23
    6cea:	68fb      	ldr	r3, [r7, #12]
    6cec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    6cee:	2300      	movs	r3, #0
}
    6cf0:	0018      	movs	r0, r3
    6cf2:	46bd      	mov	sp, r7
    6cf4:	b004      	add	sp, #16
    6cf6:	bd80      	pop	{r7, pc}
    6cf8:	00006c65 	.word	0x00006c65

00006cfc <spi_read>:
{
    6cfc:	b580      	push	{r7, lr}
    6cfe:	b084      	sub	sp, #16
    6d00:	af00      	add	r7, sp, #0
    6d02:	6078      	str	r0, [r7, #4]
    6d04:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	681b      	ldr	r3, [r3, #0]
    6d0a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    6d0c:	687b      	ldr	r3, [r7, #4]
    6d0e:	0018      	movs	r0, r3
    6d10:	4b1b      	ldr	r3, [pc, #108]	; (6d80 <spi_read+0x84>)
    6d12:	4798      	blx	r3
    6d14:	0003      	movs	r3, r0
    6d16:	001a      	movs	r2, r3
    6d18:	2301      	movs	r3, #1
    6d1a:	4053      	eors	r3, r2
    6d1c:	b2db      	uxtb	r3, r3
    6d1e:	2b00      	cmp	r3, #0
    6d20:	d001      	beq.n	6d26 <spi_read+0x2a>
		return STATUS_ERR_IO;
    6d22:	2310      	movs	r3, #16
    6d24:	e027      	b.n	6d76 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    6d26:	230f      	movs	r3, #15
    6d28:	18fb      	adds	r3, r7, r3
    6d2a:	2200      	movs	r2, #0
    6d2c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6d2e:	68bb      	ldr	r3, [r7, #8]
    6d30:	8b5b      	ldrh	r3, [r3, #26]
    6d32:	b29b      	uxth	r3, r3
    6d34:	001a      	movs	r2, r3
    6d36:	2304      	movs	r3, #4
    6d38:	4013      	ands	r3, r2
    6d3a:	d006      	beq.n	6d4a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    6d3c:	230f      	movs	r3, #15
    6d3e:	18fb      	adds	r3, r7, r3
    6d40:	221e      	movs	r2, #30
    6d42:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6d44:	68bb      	ldr	r3, [r7, #8]
    6d46:	2204      	movs	r2, #4
    6d48:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	799b      	ldrb	r3, [r3, #6]
    6d4e:	2b01      	cmp	r3, #1
    6d50:	d108      	bne.n	6d64 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6d52:	68bb      	ldr	r3, [r7, #8]
    6d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d56:	b29b      	uxth	r3, r3
    6d58:	05db      	lsls	r3, r3, #23
    6d5a:	0ddb      	lsrs	r3, r3, #23
    6d5c:	b29a      	uxth	r2, r3
    6d5e:	683b      	ldr	r3, [r7, #0]
    6d60:	801a      	strh	r2, [r3, #0]
    6d62:	e005      	b.n	6d70 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6d64:	68bb      	ldr	r3, [r7, #8]
    6d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d68:	b2db      	uxtb	r3, r3
    6d6a:	b29a      	uxth	r2, r3
    6d6c:	683b      	ldr	r3, [r7, #0]
    6d6e:	801a      	strh	r2, [r3, #0]
	return retval;
    6d70:	230f      	movs	r3, #15
    6d72:	18fb      	adds	r3, r7, r3
    6d74:	781b      	ldrb	r3, [r3, #0]
}
    6d76:	0018      	movs	r0, r3
    6d78:	46bd      	mov	sp, r7
    6d7a:	b004      	add	sp, #16
    6d7c:	bd80      	pop	{r7, pc}
    6d7e:	46c0      	nop			; (mov r8, r8)
    6d80:	00006c8d 	.word	0x00006c8d

00006d84 <HAL_RadioInit>:
/** 
 * \brief This function is used to initialize the Radio Hardware
 * The SPI interface,DIO and reset pins are initialized by this api
 */
void HAL_RadioInit(void)
{
    6d84:	b580      	push	{r7, lr}
    6d86:	af00      	add	r7, sp, #0
	HAL_RadioIOInit();
    6d88:	4b03      	ldr	r3, [pc, #12]	; (6d98 <HAL_RadioInit+0x14>)
    6d8a:	4798      	blx	r3
	HAL_RadioSpiInit();
    6d8c:	4b03      	ldr	r3, [pc, #12]	; (6d9c <HAL_RadioInit+0x18>)
    6d8e:	4798      	blx	r3
}
    6d90:	46c0      	nop			; (mov r8, r8)
    6d92:	46bd      	mov	sp, r7
    6d94:	bd80      	pop	{r7, pc}
    6d96:	46c0      	nop			; (mov r8, r8)
    6d98:	000070cd 	.word	0x000070cd
    6d9c:	00007021 	.word	0x00007021

00006da0 <HAL_Radio_resources_init>:
/**
 * \brief This function is used to initialize the SPI Interface after PMM wakeup
 *
 */
void HAL_Radio_resources_init(void)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	af00      	add	r7, sp, #0
	spi_enable(&master);
    6da4:	4b06      	ldr	r3, [pc, #24]	; (6dc0 <HAL_Radio_resources_init+0x20>)
    6da6:	0018      	movs	r0, r3
    6da8:	4b06      	ldr	r3, [pc, #24]	; (6dc4 <HAL_Radio_resources_init+0x24>)
    6daa:	4798      	blx	r3
	while (spi_is_syncing(&master)) {
    6dac:	46c0      	nop			; (mov r8, r8)
    6dae:	4b04      	ldr	r3, [pc, #16]	; (6dc0 <HAL_Radio_resources_init+0x20>)
    6db0:	0018      	movs	r0, r3
    6db2:	4b05      	ldr	r3, [pc, #20]	; (6dc8 <HAL_Radio_resources_init+0x28>)
    6db4:	4798      	blx	r3
    6db6:	1e03      	subs	r3, r0, #0
    6db8:	d1f9      	bne.n	6dae <HAL_Radio_resources_init+0xe>
		/* Wait until the synchronization is complete */
	}
}
    6dba:	46c0      	nop			; (mov r8, r8)
    6dbc:	46bd      	mov	sp, r7
    6dbe:	bd80      	pop	{r7, pc}
    6dc0:	20000cc0 	.word	0x20000cc0
    6dc4:	00006bc5 	.word	0x00006bc5
    6dc8:	00006a99 	.word	0x00006a99

00006dcc <HAL_RadioDeInit>:
/**
 * \brief This function is used to deinitialize the SPI Interface
 */
void HAL_RadioDeInit(void)
{
    6dcc:	b580      	push	{r7, lr}
    6dce:	af00      	add	r7, sp, #0
	spi_disable(&master);
    6dd0:	4b03      	ldr	r3, [pc, #12]	; (6de0 <HAL_RadioDeInit+0x14>)
    6dd2:	0018      	movs	r0, r3
    6dd4:	4b03      	ldr	r3, [pc, #12]	; (6de4 <HAL_RadioDeInit+0x18>)
    6dd6:	4798      	blx	r3
}
    6dd8:	46c0      	nop			; (mov r8, r8)
    6dda:	46bd      	mov	sp, r7
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	46c0      	nop			; (mov r8, r8)
    6de0:	20000cc0 	.word	0x20000cc0
    6de4:	00006bf9 	.word	0x00006bf9

00006de8 <RADIO_Reset>:
 
/** 
 * \brief This function resets the Radio hardware by pulling the reset pin low
 */
void RADIO_Reset(void)
{
    6de8:	b580      	push	{r7, lr}
    6dea:	af00      	add	r7, sp, #0
	HAL_ResetPinMakeOutput();
    6dec:	4b08      	ldr	r3, [pc, #32]	; (6e10 <RADIO_Reset+0x28>)
    6dee:	4798      	blx	r3
	HAL_ResetPinOutputValue(0);
    6df0:	2000      	movs	r0, #0
    6df2:	4b08      	ldr	r3, [pc, #32]	; (6e14 <RADIO_Reset+0x2c>)
    6df4:	4798      	blx	r3
	SystemBlockingWaitMs(1);
    6df6:	2001      	movs	r0, #1
    6df8:	4b07      	ldr	r3, [pc, #28]	; (6e18 <RADIO_Reset+0x30>)
    6dfa:	4798      	blx	r3
	HAL_ResetPinMakeInput();
    6dfc:	4b07      	ldr	r3, [pc, #28]	; (6e1c <RADIO_Reset+0x34>)
    6dfe:	4798      	blx	r3
		
	//Added these two lines to make sure this pin is not left in floating state during sleep
	HAL_ResetPinOutputValue(1);
    6e00:	2001      	movs	r0, #1
    6e02:	4b04      	ldr	r3, [pc, #16]	; (6e14 <RADIO_Reset+0x2c>)
    6e04:	4798      	blx	r3
	HAL_ResetPinMakeOutput();
    6e06:	4b02      	ldr	r3, [pc, #8]	; (6e10 <RADIO_Reset+0x28>)
    6e08:	4798      	blx	r3
}
    6e0a:	46c0      	nop			; (mov r8, r8)
    6e0c:	46bd      	mov	sp, r7
    6e0e:	bd80      	pop	{r7, pc}
    6e10:	00007215 	.word	0x00007215
    6e14:	00007275 	.word	0x00007275
    6e18:	000076b1 	.word	0x000076b1
    6e1c:	00007245 	.word	0x00007245

00006e20 <RADIO_RegisterWrite>:
 * \brief This function is used to write a byte of data to the radio register
 * \param[in] reg Radio register to be written
 * \param[in] value Value to be written into the radio register
 */
void RADIO_RegisterWrite(uint8_t reg, uint8_t value)
{
    6e20:	b580      	push	{r7, lr}
    6e22:	b082      	sub	sp, #8
    6e24:	af00      	add	r7, sp, #0
    6e26:	0002      	movs	r2, r0
    6e28:	1dfb      	adds	r3, r7, #7
    6e2a:	701a      	strb	r2, [r3, #0]
    6e2c:	1dbb      	adds	r3, r7, #6
    6e2e:	1c0a      	adds	r2, r1, #0
    6e30:	701a      	strb	r2, [r3, #0]
	HAL_SPICSAssert();
    6e32:	4b0b      	ldr	r3, [pc, #44]	; (6e60 <RADIO_RegisterWrite+0x40>)
    6e34:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    6e36:	1dfb      	adds	r3, r7, #7
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	2280      	movs	r2, #128	; 0x80
    6e3c:	4252      	negs	r2, r2
    6e3e:	4313      	orrs	r3, r2
    6e40:	b2db      	uxtb	r3, r3
    6e42:	0018      	movs	r0, r3
    6e44:	4b07      	ldr	r3, [pc, #28]	; (6e64 <RADIO_RegisterWrite+0x44>)
    6e46:	4798      	blx	r3
	HAL_SPISend(value);
    6e48:	1dbb      	adds	r3, r7, #6
    6e4a:	781b      	ldrb	r3, [r3, #0]
    6e4c:	0018      	movs	r0, r3
    6e4e:	4b05      	ldr	r3, [pc, #20]	; (6e64 <RADIO_RegisterWrite+0x44>)
    6e50:	4798      	blx	r3
	HAL_SPICSDeassert();
    6e52:	4b05      	ldr	r3, [pc, #20]	; (6e68 <RADIO_RegisterWrite+0x48>)
    6e54:	4798      	blx	r3
}
    6e56:	46c0      	nop			; (mov r8, r8)
    6e58:	46bd      	mov	sp, r7
    6e5a:	b002      	add	sp, #8
    6e5c:	bd80      	pop	{r7, pc}
    6e5e:	46c0      	nop			; (mov r8, r8)
    6e60:	000072b1 	.word	0x000072b1
    6e64:	000072f9 	.word	0x000072f9
    6e68:	000072d5 	.word	0x000072d5

00006e6c <RADIO_RegisterRead>:
 * \brief This function is used to read a byte of data from the radio register
 * \param[in] reg Radio register to be read
 * \retval  Value read from the radio register
 */
uint8_t RADIO_RegisterRead(uint8_t reg)
{
    6e6c:	b590      	push	{r4, r7, lr}
    6e6e:	b085      	sub	sp, #20
    6e70:	af00      	add	r7, sp, #0
    6e72:	0002      	movs	r2, r0
    6e74:	1dfb      	adds	r3, r7, #7
    6e76:	701a      	strb	r2, [r3, #0]
	uint8_t readValue;
	reg &= 0x7F;    // Make sure write bit is not set
    6e78:	1dfb      	adds	r3, r7, #7
    6e7a:	1dfa      	adds	r2, r7, #7
    6e7c:	7812      	ldrb	r2, [r2, #0]
    6e7e:	217f      	movs	r1, #127	; 0x7f
    6e80:	400a      	ands	r2, r1
    6e82:	701a      	strb	r2, [r3, #0]
	HAL_SPICSAssert();
    6e84:	4b0b      	ldr	r3, [pc, #44]	; (6eb4 <RADIO_RegisterRead+0x48>)
    6e86:	4798      	blx	r3
	HAL_SPISend(reg);
    6e88:	1dfb      	adds	r3, r7, #7
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	0018      	movs	r0, r3
    6e8e:	4b0a      	ldr	r3, [pc, #40]	; (6eb8 <RADIO_RegisterRead+0x4c>)
    6e90:	4798      	blx	r3
	readValue = HAL_SPISend(0xFF);
    6e92:	230f      	movs	r3, #15
    6e94:	18fc      	adds	r4, r7, r3
    6e96:	20ff      	movs	r0, #255	; 0xff
    6e98:	4b07      	ldr	r3, [pc, #28]	; (6eb8 <RADIO_RegisterRead+0x4c>)
    6e9a:	4798      	blx	r3
    6e9c:	0003      	movs	r3, r0
    6e9e:	7023      	strb	r3, [r4, #0]
	HAL_SPICSDeassert();
    6ea0:	4b06      	ldr	r3, [pc, #24]	; (6ebc <RADIO_RegisterRead+0x50>)
    6ea2:	4798      	blx	r3
	return readValue;
    6ea4:	230f      	movs	r3, #15
    6ea6:	18fb      	adds	r3, r7, r3
    6ea8:	781b      	ldrb	r3, [r3, #0]
}
    6eaa:	0018      	movs	r0, r3
    6eac:	46bd      	mov	sp, r7
    6eae:	b005      	add	sp, #20
    6eb0:	bd90      	pop	{r4, r7, pc}
    6eb2:	46c0      	nop			; (mov r8, r8)
    6eb4:	000072b1 	.word	0x000072b1
    6eb8:	000072f9 	.word	0x000072f9
    6ebc:	000072d5 	.word	0x000072d5

00006ec0 <RADIO_FrameWrite>:
 * \param[in] FIFO offset to be written to
 * \param[in] buffer Pointer to the data to be written into the frame buffer
 * \param[in] bufferLen Length of the data to be written
 */
void RADIO_FrameWrite(uint8_t offset, uint8_t* buffer, uint8_t bufferLen)
{
    6ec0:	b580      	push	{r7, lr}
    6ec2:	b084      	sub	sp, #16
    6ec4:	af00      	add	r7, sp, #0
    6ec6:	6039      	str	r1, [r7, #0]
    6ec8:	0011      	movs	r1, r2
    6eca:	1dfb      	adds	r3, r7, #7
    6ecc:	1c02      	adds	r2, r0, #0
    6ece:	701a      	strb	r2, [r3, #0]
    6ed0:	1dbb      	adds	r3, r7, #6
    6ed2:	1c0a      	adds	r2, r1, #0
    6ed4:	701a      	strb	r2, [r3, #0]
    HAL_SPICSAssert();
    6ed6:	4b16      	ldr	r3, [pc, #88]	; (6f30 <RADIO_FrameWrite+0x70>)
    6ed8:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    6eda:	1dfb      	adds	r3, r7, #7
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	2280      	movs	r2, #128	; 0x80
    6ee0:	4252      	negs	r2, r2
    6ee2:	4313      	orrs	r3, r2
    6ee4:	b2db      	uxtb	r3, r3
    6ee6:	0018      	movs	r0, r3
    6ee8:	4b12      	ldr	r3, [pc, #72]	; (6f34 <RADIO_FrameWrite+0x74>)
    6eea:	4798      	blx	r3

    for (uint8_t i = 0; i < bufferLen; i++)
    6eec:	230f      	movs	r3, #15
    6eee:	18fb      	adds	r3, r7, r3
    6ef0:	2200      	movs	r2, #0
    6ef2:	701a      	strb	r2, [r3, #0]
    6ef4:	e00f      	b.n	6f16 <RADIO_FrameWrite+0x56>
    {
	    HAL_SPISend(buffer[i]);
    6ef6:	230f      	movs	r3, #15
    6ef8:	18fb      	adds	r3, r7, r3
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	683a      	ldr	r2, [r7, #0]
    6efe:	18d3      	adds	r3, r2, r3
    6f00:	781b      	ldrb	r3, [r3, #0]
    6f02:	0018      	movs	r0, r3
    6f04:	4b0b      	ldr	r3, [pc, #44]	; (6f34 <RADIO_FrameWrite+0x74>)
    6f06:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    6f08:	230f      	movs	r3, #15
    6f0a:	18fb      	adds	r3, r7, r3
    6f0c:	781a      	ldrb	r2, [r3, #0]
    6f0e:	230f      	movs	r3, #15
    6f10:	18fb      	adds	r3, r7, r3
    6f12:	3201      	adds	r2, #1
    6f14:	701a      	strb	r2, [r3, #0]
    6f16:	230f      	movs	r3, #15
    6f18:	18fa      	adds	r2, r7, r3
    6f1a:	1dbb      	adds	r3, r7, #6
    6f1c:	7812      	ldrb	r2, [r2, #0]
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	429a      	cmp	r2, r3
    6f22:	d3e8      	bcc.n	6ef6 <RADIO_FrameWrite+0x36>
    }
    HAL_SPICSDeassert();
    6f24:	4b04      	ldr	r3, [pc, #16]	; (6f38 <RADIO_FrameWrite+0x78>)
    6f26:	4798      	blx	r3

}
    6f28:	46c0      	nop			; (mov r8, r8)
    6f2a:	46bd      	mov	sp, r7
    6f2c:	b004      	add	sp, #16
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	000072b1 	.word	0x000072b1
    6f34:	000072f9 	.word	0x000072f9
    6f38:	000072d5 	.word	0x000072d5

00006f3c <RADIO_FrameRead>:
 * \param[in] FIFO offset to be read from
 * \param[in] buffer Pointer to the data where the data is read and stored
 * \param[in] bufferLen Length of the data to be read from the frame buffer
 */
void RADIO_FrameRead(uint8_t offset, uint8_t* buffer, uint8_t bufferLen)
{
    6f3c:	b590      	push	{r4, r7, lr}
    6f3e:	b085      	sub	sp, #20
    6f40:	af00      	add	r7, sp, #0
    6f42:	6039      	str	r1, [r7, #0]
    6f44:	0011      	movs	r1, r2
    6f46:	1dfb      	adds	r3, r7, #7
    6f48:	1c02      	adds	r2, r0, #0
    6f4a:	701a      	strb	r2, [r3, #0]
    6f4c:	1dbb      	adds	r3, r7, #6
    6f4e:	1c0a      	adds	r2, r1, #0
    6f50:	701a      	strb	r2, [r3, #0]
    HAL_SPICSAssert();
    6f52:	4b15      	ldr	r3, [pc, #84]	; (6fa8 <RADIO_FrameRead+0x6c>)
    6f54:	4798      	blx	r3
    HAL_SPISend(offset);
    6f56:	1dfb      	adds	r3, r7, #7
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	0018      	movs	r0, r3
    6f5c:	4b13      	ldr	r3, [pc, #76]	; (6fac <RADIO_FrameRead+0x70>)
    6f5e:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    6f60:	230f      	movs	r3, #15
    6f62:	18fb      	adds	r3, r7, r3
    6f64:	2200      	movs	r2, #0
    6f66:	701a      	strb	r2, [r3, #0]
    6f68:	e010      	b.n	6f8c <RADIO_FrameRead+0x50>
    {
	    buffer[i] = HAL_SPISend(0xFF);
    6f6a:	230f      	movs	r3, #15
    6f6c:	18fb      	adds	r3, r7, r3
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	683a      	ldr	r2, [r7, #0]
    6f72:	18d4      	adds	r4, r2, r3
    6f74:	20ff      	movs	r0, #255	; 0xff
    6f76:	4b0d      	ldr	r3, [pc, #52]	; (6fac <RADIO_FrameRead+0x70>)
    6f78:	4798      	blx	r3
    6f7a:	0003      	movs	r3, r0
    6f7c:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < bufferLen; i++)
    6f7e:	230f      	movs	r3, #15
    6f80:	18fb      	adds	r3, r7, r3
    6f82:	781a      	ldrb	r2, [r3, #0]
    6f84:	230f      	movs	r3, #15
    6f86:	18fb      	adds	r3, r7, r3
    6f88:	3201      	adds	r2, #1
    6f8a:	701a      	strb	r2, [r3, #0]
    6f8c:	230f      	movs	r3, #15
    6f8e:	18fa      	adds	r2, r7, r3
    6f90:	1dbb      	adds	r3, r7, #6
    6f92:	7812      	ldrb	r2, [r2, #0]
    6f94:	781b      	ldrb	r3, [r3, #0]
    6f96:	429a      	cmp	r2, r3
    6f98:	d3e7      	bcc.n	6f6a <RADIO_FrameRead+0x2e>
    }
    HAL_SPICSDeassert();
    6f9a:	4b05      	ldr	r3, [pc, #20]	; (6fb0 <RADIO_FrameRead+0x74>)
    6f9c:	4798      	blx	r3
}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	46bd      	mov	sp, r7
    6fa2:	b005      	add	sp, #20
    6fa4:	bd90      	pop	{r4, r7, pc}
    6fa6:	46c0      	nop			; (mov r8, r8)
    6fa8:	000072b1 	.word	0x000072b1
    6fac:	000072f9 	.word	0x000072f9
    6fb0:	000072d5 	.word	0x000072d5

00006fb4 <HAL_RadioDIO0Callback>:
{
	return port_pin_get_input_level(DIO0_EIC_PIN);
}

static void HAL_RadioDIO0Callback(void)
{
    6fb4:	b580      	push	{r7, lr}
    6fb6:	af00      	add	r7, sp, #0
  if (interruptHandlerDio0)
    6fb8:	4b05      	ldr	r3, [pc, #20]	; (6fd0 <HAL_RadioDIO0Callback+0x1c>)
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d004      	beq.n	6fca <HAL_RadioDIO0Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    6fc0:	4b04      	ldr	r3, [pc, #16]	; (6fd4 <HAL_RadioDIO0Callback+0x20>)
    6fc2:	4798      	blx	r3
#endif	
    interruptHandlerDio0();
    6fc4:	4b02      	ldr	r3, [pc, #8]	; (6fd0 <HAL_RadioDIO0Callback+0x1c>)
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	4798      	blx	r3
  }    
}
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	46bd      	mov	sp, r7
    6fce:	bd80      	pop	{r7, pc}
    6fd0:	20000cb4 	.word	0x20000cb4
    6fd4:	0000790d 	.word	0x0000790d

00006fd8 <HAL_RadioDIO1Callback>:
{
	return port_pin_get_input_level(DIO1_EIC_PIN);
}

static void HAL_RadioDIO1Callback(void)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	af00      	add	r7, sp, #0
  if (interruptHandlerDio1)
    6fdc:	4b05      	ldr	r3, [pc, #20]	; (6ff4 <HAL_RadioDIO1Callback+0x1c>)
    6fde:	681b      	ldr	r3, [r3, #0]
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d004      	beq.n	6fee <HAL_RadioDIO1Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    6fe4:	4b04      	ldr	r3, [pc, #16]	; (6ff8 <HAL_RadioDIO1Callback+0x20>)
    6fe6:	4798      	blx	r3
#endif
    interruptHandlerDio1();
    6fe8:	4b02      	ldr	r3, [pc, #8]	; (6ff4 <HAL_RadioDIO1Callback+0x1c>)
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	4798      	blx	r3
  }
}
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	46bd      	mov	sp, r7
    6ff2:	bd80      	pop	{r7, pc}
    6ff4:	20000cb8 	.word	0x20000cb8
    6ff8:	0000790d 	.word	0x0000790d

00006ffc <HAL_RadioDIO2Callback>:
{
	return port_pin_get_input_level(DIO2_EIC_PIN);
}

static void HAL_RadioDIO2Callback(void)
{
    6ffc:	b580      	push	{r7, lr}
    6ffe:	af00      	add	r7, sp, #0
  if (interruptHandlerDio2)
    7000:	4b05      	ldr	r3, [pc, #20]	; (7018 <HAL_RadioDIO2Callback+0x1c>)
    7002:	681b      	ldr	r3, [r3, #0]
    7004:	2b00      	cmp	r3, #0
    7006:	d004      	beq.n	7012 <HAL_RadioDIO2Callback+0x16>
  {
#ifdef CONF_PMM_ENABLE
	PMM_Wakeup();
    7008:	4b04      	ldr	r3, [pc, #16]	; (701c <HAL_RadioDIO2Callback+0x20>)
    700a:	4798      	blx	r3
#endif
    interruptHandlerDio2();
    700c:	4b02      	ldr	r3, [pc, #8]	; (7018 <HAL_RadioDIO2Callback+0x1c>)
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	4798      	blx	r3
  }
}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	46bd      	mov	sp, r7
    7016:	bd80      	pop	{r7, pc}
    7018:	20000cbc 	.word	0x20000cbc
    701c:	0000790d 	.word	0x0000790d

00007020 <HAL_RadioSpiInit>:

/*
 * \brief Initializes the Radio SPI Interface
 */
void HAL_RadioSpiInit(void)
{
    7020:	b580      	push	{r7, lr}
    7022:	b090      	sub	sp, #64	; 0x40
    7024:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	
	spi_slave_inst_get_config_defaults(&slave_dev_config);
    7026:	1d3b      	adds	r3, r7, #4
    7028:	0018      	movs	r0, r3
    702a:	4b1c      	ldr	r3, [pc, #112]	; (709c <HAL_RadioSpiInit+0x7c>)
    702c:	4798      	blx	r3
	
	slave_dev_config.ss_pin = SX_RF_SPI_CS;
    702e:	1d3b      	adds	r3, r7, #4
    7030:	223f      	movs	r2, #63	; 0x3f
    7032:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
    7034:	1d3a      	adds	r2, r7, #4
    7036:	4b1a      	ldr	r3, [pc, #104]	; (70a0 <HAL_RadioSpiInit+0x80>)
    7038:	0011      	movs	r1, r2
    703a:	0018      	movs	r0, r3
    703c:	4b19      	ldr	r3, [pc, #100]	; (70a4 <HAL_RadioSpiInit+0x84>)
    703e:	4798      	blx	r3
	
	spi_get_config_defaults(&config_spi_master);
    7040:	2308      	movs	r3, #8
    7042:	18fb      	adds	r3, r7, r3
    7044:	0018      	movs	r0, r3
    7046:	4b18      	ldr	r3, [pc, #96]	; (70a8 <HAL_RadioSpiInit+0x88>)
    7048:	4798      	blx	r3

	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    704a:	2308      	movs	r3, #8
    704c:	18fb      	adds	r3, r7, r3
    704e:	4a17      	ldr	r2, [pc, #92]	; (70ac <HAL_RadioSpiInit+0x8c>)
    7050:	619a      	str	r2, [r3, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7052:	2308      	movs	r3, #8
    7054:	18fb      	adds	r3, r7, r3
    7056:	2280      	movs	r2, #128	; 0x80
    7058:	0252      	lsls	r2, r2, #9
    705a:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    705c:	2308      	movs	r3, #8
    705e:	18fb      	adds	r3, r7, r3
    7060:	4a13      	ldr	r2, [pc, #76]	; (70b0 <HAL_RadioSpiInit+0x90>)
    7062:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    7064:	2308      	movs	r3, #8
    7066:	18fb      	adds	r3, r7, r3
    7068:	2201      	movs	r2, #1
    706a:	4252      	negs	r2, r2
    706c:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    706e:	2308      	movs	r3, #8
    7070:	18fb      	adds	r3, r7, r3
    7072:	4a10      	ldr	r2, [pc, #64]	; (70b4 <HAL_RadioSpiInit+0x94>)
    7074:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    7076:	2308      	movs	r3, #8
    7078:	18fb      	adds	r3, r7, r3
    707a:	4a0f      	ldr	r2, [pc, #60]	; (70b8 <HAL_RadioSpiInit+0x98>)
    707c:	635a      	str	r2, [r3, #52]	; 0x34
	
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    707e:	2308      	movs	r3, #8
    7080:	18fa      	adds	r2, r7, r3
    7082:	490e      	ldr	r1, [pc, #56]	; (70bc <HAL_RadioSpiInit+0x9c>)
    7084:	4b0e      	ldr	r3, [pc, #56]	; (70c0 <HAL_RadioSpiInit+0xa0>)
    7086:	0018      	movs	r0, r3
    7088:	4b0e      	ldr	r3, [pc, #56]	; (70c4 <HAL_RadioSpiInit+0xa4>)
    708a:	4798      	blx	r3
	spi_enable(&master);
    708c:	4b0c      	ldr	r3, [pc, #48]	; (70c0 <HAL_RadioSpiInit+0xa0>)
    708e:	0018      	movs	r0, r3
    7090:	4b0d      	ldr	r3, [pc, #52]	; (70c8 <HAL_RadioSpiInit+0xa8>)
    7092:	4798      	blx	r3
	
}
    7094:	46c0      	nop			; (mov r8, r8)
    7096:	46bd      	mov	sp, r7
    7098:	b010      	add	sp, #64	; 0x40
    709a:	bd80      	pop	{r7, pc}
    709c:	00006b3d 	.word	0x00006b3d
    70a0:	20001248 	.word	0x20001248
    70a4:	00006b61 	.word	0x00006b61
    70a8:	00006ab9 	.word	0x00006ab9
    70ac:	001e8480 	.word	0x001e8480
    70b0:	00530005 	.word	0x00530005
    70b4:	003e0005 	.word	0x003e0005
    70b8:	00520005 	.word	0x00520005
    70bc:	42001000 	.word	0x42001000
    70c0:	20000cc0 	.word	0x20000cc0
    70c4:	000037c1 	.word	0x000037c1
    70c8:	00006bc5 	.word	0x00006bc5

000070cc <HAL_RadioIOInit>:

/*
 * \brief Initializes the Radio Digital IO's,Reset Pins
 */ 
static void HAL_RadioIOInit(void)
{
    70cc:	b580      	push	{r7, lr}
    70ce:	b084      	sub	sp, #16
    70d0:	af00      	add	r7, sp, #0

	struct extint_chan_conf config_extint_chan;
	struct port_config pin_conf;
	
	port_get_config_defaults(&pin_conf);
    70d2:	003b      	movs	r3, r7
    70d4:	0018      	movs	r0, r3
    70d6:	4b45      	ldr	r3, [pc, #276]	; (71ec <HAL_RadioIOInit+0x120>)
    70d8:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    70da:	003b      	movs	r3, r7
    70dc:	2201      	movs	r2, #1
    70de:	701a      	strb	r2, [r3, #0]
	
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    70e0:	003b      	movs	r3, r7
    70e2:	0019      	movs	r1, r3
    70e4:	2052      	movs	r0, #82	; 0x52
    70e6:	4b42      	ldr	r3, [pc, #264]	; (71f0 <HAL_RadioIOInit+0x124>)
    70e8:	4798      	blx	r3
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    70ea:	003b      	movs	r3, r7
    70ec:	0019      	movs	r1, r3
    70ee:	203e      	movs	r0, #62	; 0x3e
    70f0:	4b3f      	ldr	r3, [pc, #252]	; (71f0 <HAL_RadioIOInit+0x124>)
    70f2:	4798      	blx	r3
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    70f4:	003b      	movs	r3, r7
    70f6:	0019      	movs	r1, r3
    70f8:	203f      	movs	r0, #63	; 0x3f
    70fa:	4b3d      	ldr	r3, [pc, #244]	; (71f0 <HAL_RadioIOInit+0x124>)
    70fc:	4798      	blx	r3
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    70fe:	003b      	movs	r3, r7
    7100:	0019      	movs	r1, r3
    7102:	202f      	movs	r0, #47	; 0x2f
    7104:	4b3a      	ldr	r3, [pc, #232]	; (71f0 <HAL_RadioIOInit+0x124>)
    7106:	4798      	blx	r3
	
	port_pin_set_output_level(SX_RF_SPI_SCK, true);
    7108:	2101      	movs	r1, #1
    710a:	2052      	movs	r0, #82	; 0x52
    710c:	4b39      	ldr	r3, [pc, #228]	; (71f4 <HAL_RadioIOInit+0x128>)
    710e:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_SPI_MOSI, true);
    7110:	2101      	movs	r1, #1
    7112:	203e      	movs	r0, #62	; 0x3e
    7114:	4b37      	ldr	r3, [pc, #220]	; (71f4 <HAL_RadioIOInit+0x128>)
    7116:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_SPI_CS, true);
    7118:	2101      	movs	r1, #1
    711a:	203f      	movs	r0, #63	; 0x3f
    711c:	4b35      	ldr	r3, [pc, #212]	; (71f4 <HAL_RadioIOInit+0x128>)
    711e:	4798      	blx	r3
	port_pin_set_output_level(SX_RF_RESET_PIN, true);
    7120:	2101      	movs	r1, #1
    7122:	202f      	movs	r0, #47	; 0x2f
    7124:	4b33      	ldr	r3, [pc, #204]	; (71f4 <HAL_RadioIOInit+0x128>)
    7126:	4798      	blx	r3
	
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7128:	003b      	movs	r3, r7
    712a:	2200      	movs	r2, #0
    712c:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    712e:	003b      	movs	r3, r7
    7130:	0019      	movs	r1, r3
    7132:	2053      	movs	r0, #83	; 0x53
    7134:	4b2e      	ldr	r3, [pc, #184]	; (71f0 <HAL_RadioIOInit+0x124>)
    7136:	4798      	blx	r3
	
	#ifdef ENABLE_DIO0
	extint_chan_get_config_defaults(&config_extint_chan);
    7138:	1d3b      	adds	r3, r7, #4
    713a:	0018      	movs	r0, r3
    713c:	4b2e      	ldr	r3, [pc, #184]	; (71f8 <HAL_RadioIOInit+0x12c>)
    713e:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7140:	1d3b      	adds	r3, r7, #4
    7142:	2230      	movs	r2, #48	; 0x30
    7144:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7146:	1d3b      	adds	r3, r7, #4
    7148:	2200      	movs	r2, #0
    714a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    714c:	1d3b      	adds	r3, r7, #4
    714e:	2200      	movs	r2, #0
    7150:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7152:	1d3b      	adds	r3, r7, #4
    7154:	2201      	movs	r2, #1
    7156:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7158:	1d3b      	adds	r3, r7, #4
    715a:	0019      	movs	r1, r3
    715c:	2000      	movs	r0, #0
    715e:	4b27      	ldr	r3, [pc, #156]	; (71fc <HAL_RadioIOInit+0x130>)
    7160:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7162:	4b27      	ldr	r3, [pc, #156]	; (7200 <HAL_RadioIOInit+0x134>)
    7164:	2200      	movs	r2, #0
    7166:	2100      	movs	r1, #0
    7168:	0018      	movs	r0, r3
    716a:	4b26      	ldr	r3, [pc, #152]	; (7204 <HAL_RadioIOInit+0x138>)
    716c:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    716e:	2100      	movs	r1, #0
    7170:	2000      	movs	r0, #0
    7172:	4b25      	ldr	r3, [pc, #148]	; (7208 <HAL_RadioIOInit+0x13c>)
    7174:	4798      	blx	r3
	#endif

	#ifdef ENABLE_DIO1
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7176:	1d3b      	adds	r3, r7, #4
    7178:	220b      	movs	r2, #11
    717a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    717c:	1d3b      	adds	r3, r7, #4
    717e:	2200      	movs	r2, #0
    7180:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7182:	1d3b      	adds	r3, r7, #4
    7184:	2200      	movs	r2, #0
    7186:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7188:	1d3b      	adds	r3, r7, #4
    718a:	2201      	movs	r2, #1
    718c:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    718e:	1d3b      	adds	r3, r7, #4
    7190:	0019      	movs	r1, r3
    7192:	200b      	movs	r0, #11
    7194:	4b19      	ldr	r3, [pc, #100]	; (71fc <HAL_RadioIOInit+0x130>)
    7196:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7198:	4b1c      	ldr	r3, [pc, #112]	; (720c <HAL_RadioIOInit+0x140>)
    719a:	2200      	movs	r2, #0
    719c:	210b      	movs	r1, #11
    719e:	0018      	movs	r0, r3
    71a0:	4b18      	ldr	r3, [pc, #96]	; (7204 <HAL_RadioIOInit+0x138>)
    71a2:	4798      	blx	r3
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    71a4:	2100      	movs	r1, #0
    71a6:	200b      	movs	r0, #11
    71a8:	4b17      	ldr	r3, [pc, #92]	; (7208 <HAL_RadioIOInit+0x13c>)
    71aa:	4798      	blx	r3
	#endif

	#ifdef ENABLE_DIO2
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    71ac:	1d3b      	adds	r3, r7, #4
    71ae:	220c      	movs	r2, #12
    71b0:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    71b2:	1d3b      	adds	r3, r7, #4
    71b4:	2200      	movs	r2, #0
    71b6:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    71b8:	1d3b      	adds	r3, r7, #4
    71ba:	2200      	movs	r2, #0
    71bc:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    71be:	1d3b      	adds	r3, r7, #4
    71c0:	2201      	movs	r2, #1
    71c2:	72da      	strb	r2, [r3, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    71c4:	1d3b      	adds	r3, r7, #4
    71c6:	0019      	movs	r1, r3
    71c8:	200c      	movs	r0, #12
    71ca:	4b0c      	ldr	r3, [pc, #48]	; (71fc <HAL_RadioIOInit+0x130>)
    71cc:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    71ce:	4b10      	ldr	r3, [pc, #64]	; (7210 <HAL_RadioIOInit+0x144>)
    71d0:	2200      	movs	r2, #0
    71d2:	210c      	movs	r1, #12
    71d4:	0018      	movs	r0, r3
    71d6:	4b0b      	ldr	r3, [pc, #44]	; (7204 <HAL_RadioIOInit+0x138>)
    71d8:	4798      	blx	r3
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    71da:	2100      	movs	r1, #0
    71dc:	200c      	movs	r0, #12
    71de:	4b0a      	ldr	r3, [pc, #40]	; (7208 <HAL_RadioIOInit+0x13c>)
    71e0:	4798      	blx	r3
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
	extint_chan_set_config(DIO5_EIC_LINE, &config_extint_chan);
	extint_register_callback(HAL_RadioDIO5Callback,DIO5_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(DIO5_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
	#endif
}
    71e2:	46c0      	nop			; (mov r8, r8)
    71e4:	46bd      	mov	sp, r7
    71e6:	b004      	add	sp, #16
    71e8:	bd80      	pop	{r7, pc}
    71ea:	46c0      	nop			; (mov r8, r8)
    71ec:	00006a21 	.word	0x00006a21
    71f0:	000020f5 	.word	0x000020f5
    71f4:	00006a45 	.word	0x00006a45
    71f8:	00001825 	.word	0x00001825
    71fc:	00001859 	.word	0x00001859
    7200:	00006fb5 	.word	0x00006fb5
    7204:	000013f1 	.word	0x000013f1
    7208:	00001455 	.word	0x00001455
    720c:	00006fd9 	.word	0x00006fd9
    7210:	00006ffd 	.word	0x00006ffd

00007214 <HAL_ResetPinMakeOutput>:
/*
 * \brief This function is used to make the Reset Pin as Output Pin
 */

static void HAL_ResetPinMakeOutput(void)
{
    7214:	b580      	push	{r7, lr}
    7216:	b082      	sub	sp, #8
    7218:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    721a:	1d3b      	adds	r3, r7, #4
    721c:	0018      	movs	r0, r3
    721e:	4b07      	ldr	r3, [pc, #28]	; (723c <HAL_ResetPinMakeOutput+0x28>)
    7220:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7222:	1d3b      	adds	r3, r7, #4
    7224:	2201      	movs	r2, #1
    7226:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7228:	1d3b      	adds	r3, r7, #4
    722a:	0019      	movs	r1, r3
    722c:	202f      	movs	r0, #47	; 0x2f
    722e:	4b04      	ldr	r3, [pc, #16]	; (7240 <HAL_ResetPinMakeOutput+0x2c>)
    7230:	4798      	blx	r3
}
    7232:	46c0      	nop			; (mov r8, r8)
    7234:	46bd      	mov	sp, r7
    7236:	b002      	add	sp, #8
    7238:	bd80      	pop	{r7, pc}
    723a:	46c0      	nop			; (mov r8, r8)
    723c:	00006a21 	.word	0x00006a21
    7240:	000020f5 	.word	0x000020f5

00007244 <HAL_ResetPinMakeInput>:
/*
 * \brief This function is used to make the Reset Pin as Input Pin
 */
static void HAL_ResetPinMakeInput(void)
{
    7244:	b580      	push	{r7, lr}
    7246:	b082      	sub	sp, #8
    7248:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    724a:	1d3b      	adds	r3, r7, #4
    724c:	0018      	movs	r0, r3
    724e:	4b07      	ldr	r3, [pc, #28]	; (726c <HAL_ResetPinMakeInput+0x28>)
    7250:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    7252:	1d3b      	adds	r3, r7, #4
    7254:	2200      	movs	r2, #0
    7256:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7258:	1d3b      	adds	r3, r7, #4
    725a:	0019      	movs	r1, r3
    725c:	202f      	movs	r0, #47	; 0x2f
    725e:	4b04      	ldr	r3, [pc, #16]	; (7270 <HAL_ResetPinMakeInput+0x2c>)
    7260:	4798      	blx	r3
}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	46bd      	mov	sp, r7
    7266:	b002      	add	sp, #8
    7268:	bd80      	pop	{r7, pc}
    726a:	46c0      	nop			; (mov r8, r8)
    726c:	00006a21 	.word	0x00006a21
    7270:	000020f5 	.word	0x000020f5

00007274 <HAL_ResetPinOutputValue>:
/*
 * \brief This function is used to set/clear the Radio Reset Pin
 * \param[in] value Set/Clear the Radio Reset pin 
 */
static void HAL_ResetPinOutputValue(uint8_t value)
{
    7274:	b580      	push	{r7, lr}
    7276:	b082      	sub	sp, #8
    7278:	af00      	add	r7, sp, #0
    727a:	0002      	movs	r2, r0
    727c:	1dfb      	adds	r3, r7, #7
    727e:	701a      	strb	r2, [r3, #0]
	if (value == 0)
    7280:	1dfb      	adds	r3, r7, #7
    7282:	781b      	ldrb	r3, [r3, #0]
    7284:	2b00      	cmp	r3, #0
    7286:	d104      	bne.n	7292 <HAL_ResetPinOutputValue+0x1e>
	{
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_LOW);
    7288:	2100      	movs	r1, #0
    728a:	202f      	movs	r0, #47	; 0x2f
    728c:	4b07      	ldr	r3, [pc, #28]	; (72ac <HAL_ResetPinOutputValue+0x38>)
    728e:	4798      	blx	r3
	}
	else if (value == 1)
	{
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_HIGH);
	}
}
    7290:	e007      	b.n	72a2 <HAL_ResetPinOutputValue+0x2e>
	else if (value == 1)
    7292:	1dfb      	adds	r3, r7, #7
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	2b01      	cmp	r3, #1
    7298:	d103      	bne.n	72a2 <HAL_ResetPinOutputValue+0x2e>
		port_pin_set_output_level(SX_RF_RESET_PIN, SX_RF_RESET_HIGH);
    729a:	2101      	movs	r1, #1
    729c:	202f      	movs	r0, #47	; 0x2f
    729e:	4b03      	ldr	r3, [pc, #12]	; (72ac <HAL_ResetPinOutputValue+0x38>)
    72a0:	4798      	blx	r3
}
    72a2:	46c0      	nop			; (mov r8, r8)
    72a4:	46bd      	mov	sp, r7
    72a6:	b002      	add	sp, #8
    72a8:	bd80      	pop	{r7, pc}
    72aa:	46c0      	nop			; (mov r8, r8)
    72ac:	00006a45 	.word	0x00006a45

000072b0 <HAL_SPICSAssert>:
/*
 * \brief This function is called to select a SPI slave
 */
static void HAL_SPICSAssert(void)
{
    72b0:	b580      	push	{r7, lr}
    72b2:	af00      	add	r7, sp, #0
	spi_select_slave(&master, &slave, true);
    72b4:	4904      	ldr	r1, [pc, #16]	; (72c8 <HAL_SPICSAssert+0x18>)
    72b6:	4b05      	ldr	r3, [pc, #20]	; (72cc <HAL_SPICSAssert+0x1c>)
    72b8:	2201      	movs	r2, #1
    72ba:	0018      	movs	r0, r3
    72bc:	4b04      	ldr	r3, [pc, #16]	; (72d0 <HAL_SPICSAssert+0x20>)
    72be:	4798      	blx	r3
}
    72c0:	46c0      	nop			; (mov r8, r8)
    72c2:	46bd      	mov	sp, r7
    72c4:	bd80      	pop	{r7, pc}
    72c6:	46c0      	nop			; (mov r8, r8)
    72c8:	20001248 	.word	0x20001248
    72cc:	20000cc0 	.word	0x20000cc0
    72d0:	000038d9 	.word	0x000038d9

000072d4 <HAL_SPICSDeassert>:

/*
 * \brief This function is called to deselect a SPI slave
 */
static void HAL_SPICSDeassert(void)
{
    72d4:	b580      	push	{r7, lr}
    72d6:	af00      	add	r7, sp, #0
	spi_select_slave(&master, &slave, false);
    72d8:	4904      	ldr	r1, [pc, #16]	; (72ec <HAL_SPICSDeassert+0x18>)
    72da:	4b05      	ldr	r3, [pc, #20]	; (72f0 <HAL_SPICSDeassert+0x1c>)
    72dc:	2200      	movs	r2, #0
    72de:	0018      	movs	r0, r3
    72e0:	4b04      	ldr	r3, [pc, #16]	; (72f4 <HAL_SPICSDeassert+0x20>)
    72e2:	4798      	blx	r3
}
    72e4:	46c0      	nop			; (mov r8, r8)
    72e6:	46bd      	mov	sp, r7
    72e8:	bd80      	pop	{r7, pc}
    72ea:	46c0      	nop			; (mov r8, r8)
    72ec:	20001248 	.word	0x20001248
    72f0:	20000cc0 	.word	0x20000cc0
    72f4:	000038d9 	.word	0x000038d9

000072f8 <HAL_SPISend>:
/*
 * \brief This function is used to write a byte of data to the SPI DATA register
 * \param[in] data Byte of data to be written into the SPI DATA register
 */
static uint8_t HAL_SPISend(uint8_t data)
{
    72f8:	b580      	push	{r7, lr}
    72fa:	b084      	sub	sp, #16
    72fc:	af00      	add	r7, sp, #0
    72fe:	0002      	movs	r2, r0
    7300:	1dfb      	adds	r3, r7, #7
    7302:	701a      	strb	r2, [r3, #0]
	uint16_t read_val = 0;
    7304:	230e      	movs	r3, #14
    7306:	18fb      	adds	r3, r7, r3
    7308:	2200      	movs	r2, #0
    730a:	801a      	strh	r2, [r3, #0]
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    730c:	46c0      	nop			; (mov r8, r8)
    730e:	4b1d      	ldr	r3, [pc, #116]	; (7384 <HAL_SPISend+0x8c>)
    7310:	0018      	movs	r0, r3
    7312:	4b1d      	ldr	r3, [pc, #116]	; (7388 <HAL_SPISend+0x90>)
    7314:	4798      	blx	r3
    7316:	0003      	movs	r3, r0
    7318:	001a      	movs	r2, r3
    731a:	2301      	movs	r3, #1
    731c:	4053      	eors	r3, r2
    731e:	b2db      	uxtb	r3, r3
    7320:	2b00      	cmp	r3, #0
    7322:	d1f4      	bne.n	730e <HAL_SPISend+0x16>
	spi_write(&master, data);
    7324:	1dfb      	adds	r3, r7, #7
    7326:	781b      	ldrb	r3, [r3, #0]
    7328:	b29a      	uxth	r2, r3
    732a:	4b16      	ldr	r3, [pc, #88]	; (7384 <HAL_SPISend+0x8c>)
    732c:	0011      	movs	r1, r2
    732e:	0018      	movs	r0, r3
    7330:	4b16      	ldr	r3, [pc, #88]	; (738c <HAL_SPISend+0x94>)
    7332:	4798      	blx	r3
	while (!spi_is_write_complete(&master));
    7334:	46c0      	nop			; (mov r8, r8)
    7336:	4b13      	ldr	r3, [pc, #76]	; (7384 <HAL_SPISend+0x8c>)
    7338:	0018      	movs	r0, r3
    733a:	4b15      	ldr	r3, [pc, #84]	; (7390 <HAL_SPISend+0x98>)
    733c:	4798      	blx	r3
    733e:	0003      	movs	r3, r0
    7340:	001a      	movs	r2, r3
    7342:	2301      	movs	r3, #1
    7344:	4053      	eors	r3, r2
    7346:	b2db      	uxtb	r3, r3
    7348:	2b00      	cmp	r3, #0
    734a:	d1f4      	bne.n	7336 <HAL_SPISend+0x3e>
	
	while (!spi_is_ready_to_read(&master));
    734c:	46c0      	nop			; (mov r8, r8)
    734e:	4b0d      	ldr	r3, [pc, #52]	; (7384 <HAL_SPISend+0x8c>)
    7350:	0018      	movs	r0, r3
    7352:	4b10      	ldr	r3, [pc, #64]	; (7394 <HAL_SPISend+0x9c>)
    7354:	4798      	blx	r3
    7356:	0003      	movs	r3, r0
    7358:	001a      	movs	r2, r3
    735a:	2301      	movs	r3, #1
    735c:	4053      	eors	r3, r2
    735e:	b2db      	uxtb	r3, r3
    7360:	2b00      	cmp	r3, #0
    7362:	d1f4      	bne.n	734e <HAL_SPISend+0x56>
	spi_read(&master, &read_val);
    7364:	230e      	movs	r3, #14
    7366:	18fa      	adds	r2, r7, r3
    7368:	4b06      	ldr	r3, [pc, #24]	; (7384 <HAL_SPISend+0x8c>)
    736a:	0011      	movs	r1, r2
    736c:	0018      	movs	r0, r3
    736e:	4b0a      	ldr	r3, [pc, #40]	; (7398 <HAL_SPISend+0xa0>)
    7370:	4798      	blx	r3
	
	return ((uint8_t)read_val);
    7372:	230e      	movs	r3, #14
    7374:	18fb      	adds	r3, r7, r3
    7376:	881b      	ldrh	r3, [r3, #0]
    7378:	b2db      	uxtb	r3, r3
}
    737a:	0018      	movs	r0, r3
    737c:	46bd      	mov	sp, r7
    737e:	b004      	add	sp, #16
    7380:	bd80      	pop	{r7, pc}
    7382:	46c0      	nop			; (mov r8, r8)
    7384:	20000cc0 	.word	0x20000cc0
    7388:	00006c65 	.word	0x00006c65
    738c:	00006cb5 	.word	0x00006cb5
    7390:	00006c3d 	.word	0x00006c3d
    7394:	00006c8d 	.word	0x00006c8d
    7398:	00006cfd 	.word	0x00006cfd

0000739c <HAL_RegisterDioInterruptHandler>:
 *
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
    739c:	b580      	push	{r7, lr}
    739e:	b082      	sub	sp, #8
    73a0:	af00      	add	r7, sp, #0
    73a2:	0002      	movs	r2, r0
    73a4:	6039      	str	r1, [r7, #0]
    73a6:	1dfb      	adds	r3, r7, #7
    73a8:	701a      	strb	r2, [r3, #0]
  switch (dioPin)
    73aa:	1dfb      	adds	r3, r7, #7
    73ac:	781b      	ldrb	r3, [r3, #0]
    73ae:	2b02      	cmp	r3, #2
    73b0:	d008      	beq.n	73c4 <HAL_RegisterDioInterruptHandler+0x28>
    73b2:	2b04      	cmp	r3, #4
    73b4:	d00a      	beq.n	73cc <HAL_RegisterDioInterruptHandler+0x30>
    73b6:	2b01      	cmp	r3, #1
    73b8:	d000      	beq.n	73bc <HAL_RegisterDioInterruptHandler+0x20>
      interruptHandlerDio5 = handler;
      break;
#endif

    default:
      break;
    73ba:	e00b      	b.n	73d4 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio0 = handler;
    73bc:	4b07      	ldr	r3, [pc, #28]	; (73dc <HAL_RegisterDioInterruptHandler+0x40>)
    73be:	683a      	ldr	r2, [r7, #0]
    73c0:	601a      	str	r2, [r3, #0]
      break;
    73c2:	e007      	b.n	73d4 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio1 = handler;
    73c4:	4b06      	ldr	r3, [pc, #24]	; (73e0 <HAL_RegisterDioInterruptHandler+0x44>)
    73c6:	683a      	ldr	r2, [r7, #0]
    73c8:	601a      	str	r2, [r3, #0]
      break;
    73ca:	e003      	b.n	73d4 <HAL_RegisterDioInterruptHandler+0x38>
      interruptHandlerDio2 = handler;
    73cc:	4b05      	ldr	r3, [pc, #20]	; (73e4 <HAL_RegisterDioInterruptHandler+0x48>)
    73ce:	683a      	ldr	r2, [r7, #0]
    73d0:	601a      	str	r2, [r3, #0]
      break;
    73d2:	46c0      	nop			; (mov r8, r8)
  }
}
    73d4:	46c0      	nop			; (mov r8, r8)
    73d6:	46bd      	mov	sp, r7
    73d8:	b002      	add	sp, #8
    73da:	bd80      	pop	{r7, pc}
    73dc:	20000cb4 	.word	0x20000cb4
    73e0:	20000cb8 	.word	0x20000cb8
    73e4:	20000cbc 	.word	0x20000cbc

000073e8 <HAL_EnableRFCtrl>:
 *				TX = 1 
 * \param[out] None
 */

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
    73e8:	b580      	push	{r7, lr}
    73ea:	b082      	sub	sp, #8
    73ec:	af00      	add	r7, sp, #0
    73ee:	0002      	movs	r2, r0
    73f0:	1dfb      	adds	r3, r7, #7
    73f2:	701a      	strb	r2, [r3, #0]
    73f4:	1dbb      	adds	r3, r7, #6
    73f6:	1c0a      	adds	r2, r1, #0
    73f8:	701a      	strb	r2, [r3, #0]
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    73fa:	1dfb      	adds	r3, r7, #7
    73fc:	781b      	ldrb	r3, [r3, #0]
    73fe:	2b01      	cmp	r3, #1
    7400:	d003      	beq.n	740a <HAL_EnableRFCtrl+0x22>
    7402:	1dbb      	adds	r3, r7, #6
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	2b00      	cmp	r3, #0
    7408:	d104      	bne.n	7414 <HAL_EnableRFCtrl+0x2c>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
    740a:	2101      	movs	r1, #1
    740c:	200d      	movs	r0, #13
    740e:	4b09      	ldr	r3, [pc, #36]	; (7434 <HAL_EnableRFCtrl+0x4c>)
    7410:	4798      	blx	r3
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    7412:	e00b      	b.n	742c <HAL_EnableRFCtrl+0x44>
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    7414:	1dfb      	adds	r3, r7, #7
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	2b02      	cmp	r3, #2
    741a:	d107      	bne.n	742c <HAL_EnableRFCtrl+0x44>
    741c:	1dbb      	adds	r3, r7, #6
    741e:	781b      	ldrb	r3, [r3, #0]
    7420:	2b01      	cmp	r3, #1
    7422:	d103      	bne.n	742c <HAL_EnableRFCtrl+0x44>
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
    7424:	2100      	movs	r1, #0
    7426:	200d      	movs	r0, #13
    7428:	4b02      	ldr	r3, [pc, #8]	; (7434 <HAL_EnableRFCtrl+0x4c>)
    742a:	4798      	blx	r3
}
    742c:	46c0      	nop			; (mov r8, r8)
    742e:	46bd      	mov	sp, r7
    7430:	b002      	add	sp, #8
    7432:	bd80      	pop	{r7, pc}
    7434:	00006a45 	.word	0x00006a45

00007438 <HAL_DisableRFCtrl>:
 *				TX = 1 
 * \param[out] None
 */

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
    7438:	b580      	push	{r7, lr}
    743a:	b082      	sub	sp, #8
    743c:	af00      	add	r7, sp, #0
    743e:	0002      	movs	r2, r0
    7440:	1dfb      	adds	r3, r7, #7
    7442:	701a      	strb	r2, [r3, #0]
    7444:	1dbb      	adds	r3, r7, #6
    7446:	1c0a      	adds	r2, r1, #0
    7448:	701a      	strb	r2, [r3, #0]
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    744a:	1dfb      	adds	r3, r7, #7
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	2b01      	cmp	r3, #1
    7450:	d003      	beq.n	745a <HAL_DisableRFCtrl+0x22>
    7452:	1dbb      	adds	r3, r7, #6
    7454:	781b      	ldrb	r3, [r3, #0]
    7456:	2b00      	cmp	r3, #0
    7458:	d103      	bne.n	7462 <HAL_DisableRFCtrl+0x2a>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
    745a:	2100      	movs	r1, #0
    745c:	200d      	movs	r0, #13
    745e:	4b03      	ldr	r3, [pc, #12]	; (746c <HAL_DisableRFCtrl+0x34>)
    7460:	4798      	blx	r3
	}
#endif	
}
    7462:	46c0      	nop			; (mov r8, r8)
    7464:	46bd      	mov	sp, r7
    7466:	b002      	add	sp, #8
    7468:	bd80      	pop	{r7, pc}
    746a:	46c0      	nop			; (mov r8, r8)
    746c:	00006a45 	.word	0x00006a45

00007470 <HAL_GetRadioClkStabilizationDelay>:
 *
 * \param[in] None
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
    7470:	b580      	push	{r7, lr}
    7472:	af00      	add	r7, sp, #0
	return RADIO_CLK_STABILITATION_DELAY;
    7474:	2302      	movs	r3, #2
}
    7476:	0018      	movs	r0, r3
    7478:	46bd      	mov	sp, r7
    747a:	bd80      	pop	{r7, pc}

0000747c <HAL_GetRadioClkSrc>:
 *
 * \param[in] None
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
    747c:	b580      	push	{r7, lr}
    747e:	af00      	add	r7, sp, #0
	return RADIO_CLK_SRC;
    7480:	2300      	movs	r3, #0
}
    7482:	0018      	movs	r0, r3
    7484:	46bd      	mov	sp, r7
    7486:	bd80      	pop	{r7, pc}

00007488 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    7488:	b580      	push	{r7, lr}
    748a:	af00      	add	r7, sp, #0
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
    748c:	2101      	movs	r1, #1
    748e:	2009      	movs	r0, #9
    7490:	4b03      	ldr	r3, [pc, #12]	; (74a0 <HAL_TCXOPowerOn+0x18>)
    7492:	4798      	blx	r3
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    7494:	2002      	movs	r0, #2
    7496:	4b03      	ldr	r3, [pc, #12]	; (74a4 <HAL_TCXOPowerOn+0x1c>)
    7498:	4798      	blx	r3
#endif
}
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	46bd      	mov	sp, r7
    749e:	bd80      	pop	{r7, pc}
    74a0:	00006a45 	.word	0x00006a45
    74a4:	000001d1 	.word	0x000001d1

000074a8 <HAL_TCXOPowerOff>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOff(void)
{
    74a8:	b580      	push	{r7, lr}
    74aa:	af00      	add	r7, sp, #0
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
    74ac:	2100      	movs	r1, #0
    74ae:	2009      	movs	r0, #9
    74b0:	4b02      	ldr	r3, [pc, #8]	; (74bc <HAL_TCXOPowerOff+0x14>)
    74b2:	4798      	blx	r3
#endif
#endif
}
    74b4:	46c0      	nop			; (mov r8, r8)
    74b6:	46bd      	mov	sp, r7
    74b8:	bd80      	pop	{r7, pc}
    74ba:	46c0      	nop			; (mov r8, r8)
    74bc:	00006a45 	.word	0x00006a45

000074c0 <system_set_sleepmode>:
{
    74c0:	b580      	push	{r7, lr}
    74c2:	b082      	sub	sp, #8
    74c4:	af00      	add	r7, sp, #0
    74c6:	0002      	movs	r2, r0
    74c8:	1dfb      	adds	r3, r7, #7
    74ca:	701a      	strb	r2, [r3, #0]
	PM->SLEEPCFG.reg = sleep_mode;
    74cc:	2380      	movs	r3, #128	; 0x80
    74ce:	05db      	lsls	r3, r3, #23
    74d0:	1dfa      	adds	r2, r7, #7
    74d2:	7812      	ldrb	r2, [r2, #0]
    74d4:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    74d6:	46c0      	nop			; (mov r8, r8)
    74d8:	2380      	movs	r3, #128	; 0x80
    74da:	05db      	lsls	r3, r3, #23
    74dc:	785b      	ldrb	r3, [r3, #1]
    74de:	b2db      	uxtb	r3, r3
    74e0:	1dfa      	adds	r2, r7, #7
    74e2:	7812      	ldrb	r2, [r2, #0]
    74e4:	429a      	cmp	r2, r3
    74e6:	d1f7      	bne.n	74d8 <system_set_sleepmode+0x18>
}
    74e8:	46c0      	nop			; (mov r8, r8)
    74ea:	46bd      	mov	sp, r7
    74ec:	b002      	add	sp, #8
    74ee:	bd80      	pop	{r7, pc}

000074f0 <system_sleep>:
{
    74f0:	b580      	push	{r7, lr}
    74f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
    74f4:	f3bf 8f4f 	dsb	sy
	__WFI();
    74f8:	bf30      	wfi
}
    74fa:	46c0      	nop			; (mov r8, r8)
    74fc:	46bd      	mov	sp, r7
    74fe:	bd80      	pop	{r7, pc}

00007500 <HAL_Sleep>:
 * \brief Puts the system in given sleep mode
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
    7500:	b580      	push	{r7, lr}
    7502:	b082      	sub	sp, #8
    7504:	af00      	add	r7, sp, #0
    7506:	0002      	movs	r2, r0
    7508:	1dfb      	adds	r3, r7, #7
    750a:	701a      	strb	r2, [r3, #0]
	switch (mode)
    750c:	1dfb      	adds	r3, r7, #7
    750e:	781b      	ldrb	r3, [r3, #0]
    7510:	2b01      	cmp	r3, #1
    7512:	d002      	beq.n	751a <HAL_Sleep+0x1a>
    7514:	2b02      	cmp	r3, #2
    7516:	d006      	beq.n	7526 <HAL_Sleep+0x26>
		}
		
		default:
		{
			/* other sleep modes are not implemented currently */
			break;
    7518:	e00b      	b.n	7532 <HAL_Sleep+0x32>
			system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
    751a:	2004      	movs	r0, #4
    751c:	4b07      	ldr	r3, [pc, #28]	; (753c <HAL_Sleep+0x3c>)
    751e:	4798      	blx	r3
			system_sleep();
    7520:	4b07      	ldr	r3, [pc, #28]	; (7540 <HAL_Sleep+0x40>)
    7522:	4798      	blx	r3
			break;
    7524:	e005      	b.n	7532 <HAL_Sleep+0x32>
			system_set_sleepmode(SYSTEM_SLEEPMODE_BACKUP);
    7526:	2005      	movs	r0, #5
    7528:	4b04      	ldr	r3, [pc, #16]	; (753c <HAL_Sleep+0x3c>)
    752a:	4798      	blx	r3
			system_sleep();
    752c:	4b04      	ldr	r3, [pc, #16]	; (7540 <HAL_Sleep+0x40>)
    752e:	4798      	blx	r3
			break;
    7530:	46c0      	nop			; (mov r8, r8)
		}
	}
}
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	46bd      	mov	sp, r7
    7536:	b002      	add	sp, #8
    7538:	bd80      	pop	{r7, pc}
    753a:	46c0      	nop			; (mov r8, r8)
    753c:	000074c1 	.word	0x000074c1
    7540:	000074f1 	.word	0x000074f1

00007544 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
    7544:	b580      	push	{r7, lr}
    7546:	b084      	sub	sp, #16
    7548:	af00      	add	r7, sp, #0
    754a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	22b0      	movs	r2, #176	; 0xb0
    7550:	0112      	lsls	r2, r2, #4
    7552:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
    7554:	687b      	ldr	r3, [r7, #4]
    7556:	2201      	movs	r2, #1
    7558:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	2200      	movs	r2, #0
    755e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    7560:	687b      	ldr	r3, [r7, #4]
    7562:	2201      	movs	r2, #1
    7564:	711a      	strb	r2, [r3, #4]
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    7566:	230f      	movs	r3, #15
    7568:	18fb      	adds	r3, r7, r3
    756a:	2200      	movs	r2, #0
    756c:	701a      	strb	r2, [r3, #0]
    756e:	e00e      	b.n	758e <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
    7570:	230f      	movs	r3, #15
    7572:	18fb      	adds	r3, r7, r3
    7574:	781a      	ldrb	r2, [r3, #0]
    7576:	687b      	ldr	r3, [r7, #4]
    7578:	3202      	adds	r2, #2
    757a:	0092      	lsls	r2, r2, #2
    757c:	2100      	movs	r1, #0
    757e:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    7580:	230f      	movs	r3, #15
    7582:	18fb      	adds	r3, r7, r3
    7584:	781a      	ldrb	r2, [r3, #0]
    7586:	230f      	movs	r3, #15
    7588:	18fb      	adds	r3, r7, r3
    758a:	3201      	adds	r2, #1
    758c:	701a      	strb	r2, [r3, #0]
    758e:	230f      	movs	r3, #15
    7590:	18fb      	adds	r3, r7, r3
    7592:	781b      	ldrb	r3, [r3, #0]
    7594:	2b01      	cmp	r3, #1
    7596:	d9eb      	bls.n	7570 <rtc_count_get_config_defaults+0x2c>
	}
}
    7598:	46c0      	nop			; (mov r8, r8)
    759a:	46bd      	mov	sp, r7
    759c:	b004      	add	sp, #16
    759e:	bd80      	pop	{r7, pc}

000075a0 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    75a0:	b580      	push	{r7, lr}
    75a2:	b084      	sub	sp, #16
    75a4:	af00      	add	r7, sp, #0
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
    75a6:	003b      	movs	r3, r7
    75a8:	0018      	movs	r0, r3
    75aa:	4b0f      	ldr	r3, [pc, #60]	; (75e8 <SleepTimerInit+0x48>)
    75ac:	4798      	blx	r3
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    75ae:	003b      	movs	r3, r7
    75b0:	2200      	movs	r2, #0
    75b2:	801a      	strh	r2, [r3, #0]
	rtc_config.enable_read_sync = true;
    75b4:	003b      	movs	r3, r7
    75b6:	2201      	movs	r2, #1
    75b8:	711a      	strb	r2, [r3, #4]
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    75ba:	003b      	movs	r3, r7
    75bc:	2201      	movs	r2, #1
    75be:	4252      	negs	r2, r2
    75c0:	609a      	str	r2, [r3, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    75c2:	003b      	movs	r3, r7
    75c4:	2201      	movs	r2, #1
    75c6:	4252      	negs	r2, r2
    75c8:	60da      	str	r2, [r3, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    75ca:	003a      	movs	r2, r7
    75cc:	4907      	ldr	r1, [pc, #28]	; (75ec <SleepTimerInit+0x4c>)
    75ce:	4b08      	ldr	r3, [pc, #32]	; (75f0 <SleepTimerInit+0x50>)
    75d0:	0018      	movs	r0, r3
    75d2:	4b08      	ldr	r3, [pc, #32]	; (75f4 <SleepTimerInit+0x54>)
    75d4:	4798      	blx	r3
	rtc_count_enable(&rtc);
    75d6:	4b06      	ldr	r3, [pc, #24]	; (75f0 <SleepTimerInit+0x50>)
    75d8:	0018      	movs	r0, r3
    75da:	4b07      	ldr	r3, [pc, #28]	; (75f8 <SleepTimerInit+0x58>)
    75dc:	4798      	blx	r3
}
    75de:	46c0      	nop			; (mov r8, r8)
    75e0:	46bd      	mov	sp, r7
    75e2:	b004      	add	sp, #16
    75e4:	bd80      	pop	{r7, pc}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	00007545 	.word	0x00007545
    75ec:	40002000 	.word	0x40002000
    75f0:	2000124c 	.word	0x2000124c
    75f4:	00002465 	.word	0x00002465
    75f8:	00002251 	.word	0x00002251

000075fc <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	af00      	add	r7, sp, #0
	return rtc_count_get_count(&rtc);
    7600:	4b03      	ldr	r3, [pc, #12]	; (7610 <SleepTimerGetElapsedTime+0x14>)
    7602:	0018      	movs	r0, r3
    7604:	4b03      	ldr	r3, [pc, #12]	; (7614 <SleepTimerGetElapsedTime+0x18>)
    7606:	4798      	blx	r3
    7608:	0003      	movs	r3, r0
}
    760a:	0018      	movs	r0, r3
    760c:	46bd      	mov	sp, r7
    760e:	bd80      	pop	{r7, pc}
    7610:	2000124c 	.word	0x2000124c
    7614:	00002535 	.word	0x00002535

00007618 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    7618:	b580      	push	{r7, lr}
    761a:	b082      	sub	sp, #8
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
    7620:	6039      	str	r1, [r7, #0]
	rtc_count_set_count(&rtc, 0);
    7622:	4b0d      	ldr	r3, [pc, #52]	; (7658 <SleepTimerStart+0x40>)
    7624:	2100      	movs	r1, #0
    7626:	0018      	movs	r0, r3
    7628:	4b0c      	ldr	r3, [pc, #48]	; (765c <SleepTimerStart+0x44>)
    762a:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    762c:	6839      	ldr	r1, [r7, #0]
    762e:	4b0a      	ldr	r3, [pc, #40]	; (7658 <SleepTimerStart+0x40>)
    7630:	2208      	movs	r2, #8
    7632:	0018      	movs	r0, r3
    7634:	4b0a      	ldr	r3, [pc, #40]	; (7660 <SleepTimerStart+0x48>)
    7636:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    7638:	6879      	ldr	r1, [r7, #4]
    763a:	4b07      	ldr	r3, [pc, #28]	; (7658 <SleepTimerStart+0x40>)
    763c:	2200      	movs	r2, #0
    763e:	0018      	movs	r0, r3
    7640:	4b08      	ldr	r3, [pc, #32]	; (7664 <SleepTimerStart+0x4c>)
    7642:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    7644:	4b04      	ldr	r3, [pc, #16]	; (7658 <SleepTimerStart+0x40>)
    7646:	2108      	movs	r1, #8
    7648:	0018      	movs	r0, r3
    764a:	4b07      	ldr	r3, [pc, #28]	; (7668 <SleepTimerStart+0x50>)
    764c:	4798      	blx	r3
}
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	46bd      	mov	sp, r7
    7652:	b002      	add	sp, #8
    7654:	bd80      	pop	{r7, pc}
    7656:	46c0      	nop			; (mov r8, r8)
    7658:	2000124c 	.word	0x2000124c
    765c:	000024c9 	.word	0x000024c9
    7660:	0000261d 	.word	0x0000261d
    7664:	00002585 	.word	0x00002585
    7668:	000026d1 	.word	0x000026d1

0000766c <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    766c:	b580      	push	{r7, lr}
    766e:	af00      	add	r7, sp, #0
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    7670:	4b03      	ldr	r3, [pc, #12]	; (7680 <SleepTimerStop+0x14>)
    7672:	2108      	movs	r1, #8
    7674:	0018      	movs	r0, r3
    7676:	4b03      	ldr	r3, [pc, #12]	; (7684 <SleepTimerStop+0x18>)
    7678:	4798      	blx	r3
}
    767a:	46c0      	nop			; (mov r8, r8)
    767c:	46bd      	mov	sp, r7
    767e:	bd80      	pop	{r7, pc}
    7680:	2000124c 	.word	0x2000124c
    7684:	0000275d 	.word	0x0000275d

00007688 <system_interrupt_enter_critical_section>:
{
    7688:	b580      	push	{r7, lr}
    768a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    768c:	4b02      	ldr	r3, [pc, #8]	; (7698 <system_interrupt_enter_critical_section+0x10>)
    768e:	4798      	blx	r3
}
    7690:	46c0      	nop			; (mov r8, r8)
    7692:	46bd      	mov	sp, r7
    7694:	bd80      	pop	{r7, pc}
    7696:	46c0      	nop			; (mov r8, r8)
    7698:	00000201 	.word	0x00000201

0000769c <system_interrupt_leave_critical_section>:
{
    769c:	b580      	push	{r7, lr}
    769e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    76a0:	4b02      	ldr	r3, [pc, #8]	; (76ac <system_interrupt_leave_critical_section+0x10>)
    76a2:	4798      	blx	r3
}
    76a4:	46c0      	nop			; (mov r8, r8)
    76a6:	46bd      	mov	sp, r7
    76a8:	bd80      	pop	{r7, pc}
    76aa:	46c0      	nop			; (mov r8, r8)
    76ac:	00000255 	.word	0x00000255

000076b0 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    76b0:	b580      	push	{r7, lr}
    76b2:	b082      	sub	sp, #8
    76b4:	af00      	add	r7, sp, #0
    76b6:	6078      	str	r0, [r7, #4]
#ifndef UT
    delay_ms(ms);
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	2b00      	cmp	r3, #0
    76bc:	d004      	beq.n	76c8 <SystemBlockingWaitMs+0x18>
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	0018      	movs	r0, r3
    76c2:	4b05      	ldr	r3, [pc, #20]	; (76d8 <SystemBlockingWaitMs+0x28>)
    76c4:	4798      	blx	r3
#endif
}
    76c6:	e002      	b.n	76ce <SystemBlockingWaitMs+0x1e>
    delay_ms(ms);
    76c8:	2001      	movs	r0, #1
    76ca:	4b04      	ldr	r3, [pc, #16]	; (76dc <SystemBlockingWaitMs+0x2c>)
    76cc:	4798      	blx	r3
}
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	46bd      	mov	sp, r7
    76d2:	b002      	add	sp, #8
    76d4:	bd80      	pop	{r7, pc}
    76d6:	46c0      	nop			; (mov r8, r8)
    76d8:	000001d1 	.word	0x000001d1
    76dc:	000001a1 	.word	0x000001a1

000076e0 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    76e0:	b580      	push	{r7, lr}
    76e2:	af00      	add	r7, sp, #0
#ifndef UT
	system_interrupt_enter_critical_section();
    76e4:	4b02      	ldr	r3, [pc, #8]	; (76f0 <system_enter_critical_section+0x10>)
    76e6:	4798      	blx	r3
#endif
}
    76e8:	46c0      	nop			; (mov r8, r8)
    76ea:	46bd      	mov	sp, r7
    76ec:	bd80      	pop	{r7, pc}
    76ee:	46c0      	nop			; (mov r8, r8)
    76f0:	00007689 	.word	0x00007689

000076f4 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    76f4:	b580      	push	{r7, lr}
    76f6:	af00      	add	r7, sp, #0
#ifndef UT
	system_interrupt_leave_critical_section();
    76f8:	4b02      	ldr	r3, [pc, #8]	; (7704 <system_leave_critical_section+0x10>)
    76fa:	4798      	blx	r3
#endif
}
    76fc:	46c0      	nop			; (mov r8, r8)
    76fe:	46bd      	mov	sp, r7
    7700:	bd80      	pop	{r7, pc}
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	0000769d 	.word	0x0000769d

00007708 <validateSleepDuration>:

/************************************************************************/
/* Function definitions                                                 */
/************************************************************************/
static inline bool validateSleepDuration(uint32_t durationMs)
{
    7708:	b580      	push	{r7, lr}
    770a:	b082      	sub	sp, #8
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
    return (PMM_SLEEPTIME_MIN_MS <= durationMs) && \
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    7710:	687b      	ldr	r3, [r7, #4]
    7712:	4a0a      	ldr	r2, [pc, #40]	; (773c <validateSleepDuration+0x34>)
    7714:	4293      	cmp	r3, r2
    7716:	d908      	bls.n	772a <validateSleepDuration+0x22>
    return (PMM_SLEEPTIME_MIN_MS <= durationMs) && \
    7718:	687b      	ldr	r3, [r7, #4]
    771a:	4a09      	ldr	r2, [pc, #36]	; (7740 <validateSleepDuration+0x38>)
    771c:	4293      	cmp	r3, r2
    771e:	d804      	bhi.n	772a <validateSleepDuration+0x22>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    7720:	687b      	ldr	r3, [r7, #4]
    7722:	3301      	adds	r3, #1
    7724:	d001      	beq.n	772a <validateSleepDuration+0x22>
    7726:	2301      	movs	r3, #1
    7728:	e000      	b.n	772c <validateSleepDuration+0x24>
    772a:	2300      	movs	r3, #0
    772c:	1c1a      	adds	r2, r3, #0
    772e:	2301      	movs	r3, #1
    7730:	4013      	ands	r3, r2
    7732:	b2db      	uxtb	r3, r3
        (SWTIMER_INVALID_TIMEOUT != durationMs);
}
    7734:	0018      	movs	r0, r3
    7736:	46bd      	mov	sp, r7
    7738:	b002      	add	sp, #8
    773a:	bd80      	pop	{r7, pc}
    773c:	000003e7 	.word	0x000003e7
    7740:	07cebfb0 	.word	0x07cebfb0

00007744 <PMM_Sleep>:
* \return value of type PMM_Status_t
*         PMM_SLEEP_REQ_DENIED -- when sleep is not possible at the instance
*         PMM_SLEEP_REQ_PROCESSED -- when sleep is possible and have already done
*/
PMM_Status_t PMM_Sleep(PMM_SleepReq_t *req)
{
    7744:	b590      	push	{r4, r7, lr}
    7746:	b087      	sub	sp, #28
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    774c:	2317      	movs	r3, #23
    774e:	18fb      	adds	r3, r7, r3
    7750:	2200      	movs	r2, #0
    7752:	701a      	strb	r2, [r3, #0]
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    7754:	2301      	movs	r3, #1
    7756:	425b      	negs	r3, r3
    7758:	613b      	str	r3, [r7, #16]
    bool canSleep;

    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    775a:	687b      	ldr	r3, [r7, #4]
    775c:	2b00      	cmp	r3, #0
    775e:	d100      	bne.n	7762 <PMM_Sleep+0x1e>
    7760:	e0ae      	b.n	78c0 <PMM_Sleep+0x17c>
    7762:	4b5b      	ldr	r3, [pc, #364]	; (78d0 <PMM_Sleep+0x18c>)
    7764:	781b      	ldrb	r3, [r3, #0]
    7766:	2b00      	cmp	r3, #0
    7768:	d000      	beq.n	776c <PMM_Sleep+0x28>
    776a:	e0a9      	b.n	78c0 <PMM_Sleep+0x17c>
    {
        canSleep = SYSTEM_ReadyToSleep();
    776c:	230f      	movs	r3, #15
    776e:	18fc      	adds	r4, r7, r3
    7770:	4b58      	ldr	r3, [pc, #352]	; (78d4 <PMM_Sleep+0x190>)
    7772:	4798      	blx	r3
    7774:	0003      	movs	r3, r0
    7776:	7023      	strb	r3, [r4, #0]
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    7778:	230f      	movs	r3, #15
    777a:	18fb      	adds	r3, r7, r3
    777c:	781b      	ldrb	r3, [r3, #0]
    777e:	2b00      	cmp	r3, #0
    7780:	d008      	beq.n	7794 <PMM_Sleep+0x50>
    7782:	687b      	ldr	r3, [r7, #4]
    7784:	681b      	ldr	r3, [r3, #0]
    7786:	0018      	movs	r0, r3
    7788:	4b53      	ldr	r3, [pc, #332]	; (78d8 <PMM_Sleep+0x194>)
    778a:	4798      	blx	r3
    778c:	1e03      	subs	r3, r0, #0
    778e:	d001      	beq.n	7794 <PMM_Sleep+0x50>
    7790:	2201      	movs	r2, #1
    7792:	e000      	b.n	7796 <PMM_Sleep+0x52>
    7794:	2200      	movs	r2, #0
    7796:	230f      	movs	r3, #15
    7798:	18fb      	adds	r3, r7, r3
    779a:	701a      	strb	r2, [r3, #0]
    779c:	781a      	ldrb	r2, [r3, #0]
    779e:	2101      	movs	r1, #1
    77a0:	400a      	ands	r2, r1
    77a2:	701a      	strb	r2, [r3, #0]

        if ( false == canSleep )
    77a4:	230f      	movs	r3, #15
    77a6:	18fb      	adds	r3, r7, r3
    77a8:	781b      	ldrb	r3, [r3, #0]
    77aa:	2201      	movs	r2, #1
    77ac:	4053      	eors	r3, r2
    77ae:	b2db      	uxtb	r3, r3
    77b0:	2b00      	cmp	r3, #0
    77b2:	d003      	beq.n	77bc <PMM_Sleep+0x78>
        {
            return status;
    77b4:	2317      	movs	r3, #23
    77b6:	18fb      	adds	r3, r7, r3
    77b8:	781b      	ldrb	r3, [r3, #0]
    77ba:	e084      	b.n	78c6 <PMM_Sleep+0x182>
        }

        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	791b      	ldrb	r3, [r3, #4]
    77c0:	2b02      	cmp	r3, #2
    77c2:	d117      	bne.n	77f4 <PMM_Sleep+0xb0>
        {
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    77c4:	230f      	movs	r3, #15
    77c6:	18fb      	adds	r3, r7, r3
    77c8:	781b      	ldrb	r3, [r3, #0]
    77ca:	2b00      	cmp	r3, #0
    77cc:	d006      	beq.n	77dc <PMM_Sleep+0x98>
    77ce:	4b43      	ldr	r3, [pc, #268]	; (78dc <PMM_Sleep+0x198>)
    77d0:	4798      	blx	r3
    77d2:	0003      	movs	r3, r0
    77d4:	3301      	adds	r3, #1
    77d6:	d101      	bne.n	77dc <PMM_Sleep+0x98>
    77d8:	2201      	movs	r2, #1
    77da:	e000      	b.n	77de <PMM_Sleep+0x9a>
    77dc:	2200      	movs	r2, #0
    77de:	230f      	movs	r3, #15
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	701a      	strb	r2, [r3, #0]
    77e4:	781a      	ldrb	r2, [r3, #0]
    77e6:	2101      	movs	r1, #1
    77e8:	400a      	ands	r2, r1
    77ea:	701a      	strb	r2, [r3, #0]
            sysSleepTime = req->sleepTimeMs;
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	681b      	ldr	r3, [r3, #0]
    77f0:	613b      	str	r3, [r7, #16]
    77f2:	e035      	b.n	7860 <PMM_Sleep+0x11c>
        }
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	791b      	ldrb	r3, [r3, #4]
    77f8:	2b01      	cmp	r3, #1
    77fa:	d131      	bne.n	7860 <PMM_Sleep+0x11c>
        {
            sysSleepTime = SwTimerNextExpiryDuration();
    77fc:	4b37      	ldr	r3, [pc, #220]	; (78dc <PMM_Sleep+0x198>)
    77fe:	4798      	blx	r3
    7800:	0003      	movs	r3, r0
    7802:	613b      	str	r3, [r7, #16]
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    7804:	693b      	ldr	r3, [r7, #16]
    7806:	3301      	adds	r3, #1
    7808:	d006      	beq.n	7818 <PMM_Sleep+0xd4>
    780a:	6938      	ldr	r0, [r7, #16]
    780c:	4b34      	ldr	r3, [pc, #208]	; (78e0 <PMM_Sleep+0x19c>)
    780e:	22fa      	movs	r2, #250	; 0xfa
    7810:	0091      	lsls	r1, r2, #2
    7812:	4798      	blx	r3
    7814:	0003      	movs	r3, r0
    7816:	e000      	b.n	781a <PMM_Sleep+0xd6>
    7818:	4b32      	ldr	r3, [pc, #200]	; (78e4 <PMM_Sleep+0x1a0>)
    781a:	613b      	str	r3, [r7, #16]
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    781c:	230f      	movs	r3, #15
    781e:	18fb      	adds	r3, r7, r3
    7820:	781b      	ldrb	r3, [r3, #0]
    7822:	2b00      	cmp	r3, #0
    7824:	d007      	beq.n	7836 <PMM_Sleep+0xf2>
    7826:	693b      	ldr	r3, [r7, #16]
    7828:	0018      	movs	r0, r3
    782a:	4b2b      	ldr	r3, [pc, #172]	; (78d8 <PMM_Sleep+0x194>)
    782c:	4798      	blx	r3
    782e:	1e03      	subs	r3, r0, #0
    7830:	d001      	beq.n	7836 <PMM_Sleep+0xf2>
    7832:	2201      	movs	r2, #1
    7834:	e000      	b.n	7838 <PMM_Sleep+0xf4>
    7836:	2200      	movs	r2, #0
    7838:	230f      	movs	r3, #15
    783a:	18fb      	adds	r3, r7, r3
    783c:	701a      	strb	r2, [r3, #0]
    783e:	781a      	ldrb	r2, [r3, #0]
    7840:	2101      	movs	r1, #1
    7842:	400a      	ands	r2, r1
    7844:	701a      	strb	r2, [r3, #0]
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    7846:	230f      	movs	r3, #15
    7848:	18fb      	adds	r3, r7, r3
    784a:	781b      	ldrb	r3, [r3, #0]
    784c:	2b00      	cmp	r3, #0
    784e:	d007      	beq.n	7860 <PMM_Sleep+0x11c>
    7850:	687b      	ldr	r3, [r7, #4]
    7852:	681a      	ldr	r2, [r3, #0]
    7854:	693b      	ldr	r3, [r7, #16]
    7856:	429a      	cmp	r2, r3
    7858:	d202      	bcs.n	7860 <PMM_Sleep+0x11c>
            {
                sysSleepTime = req->sleepTimeMs;
    785a:	687b      	ldr	r3, [r7, #4]
    785c:	681b      	ldr	r3, [r3, #0]
    785e:	613b      	str	r3, [r7, #16]
            }
        }

        if ( canSleep && SYSTEM_ReadyToSleep() )
    7860:	230f      	movs	r3, #15
    7862:	18fb      	adds	r3, r7, r3
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	2b00      	cmp	r3, #0
    7868:	d02a      	beq.n	78c0 <PMM_Sleep+0x17c>
    786a:	4b1a      	ldr	r3, [pc, #104]	; (78d4 <PMM_Sleep+0x190>)
    786c:	4798      	blx	r3
    786e:	1e03      	subs	r3, r0, #0
    7870:	d026      	beq.n	78c0 <PMM_Sleep+0x17c>
        {
            /* Start of sleep preparation */
            SystemTimerSuspend();
    7872:	4b1d      	ldr	r3, [pc, #116]	; (78e8 <PMM_Sleep+0x1a4>)
    7874:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    7876:	693b      	ldr	r3, [r7, #16]
    7878:	3b0a      	subs	r3, #10
    787a:	001a      	movs	r2, r3
    787c:	4b1b      	ldr	r3, [pc, #108]	; (78ec <PMM_Sleep+0x1a8>)
    787e:	0010      	movs	r0, r2
    7880:	4798      	blx	r3
    7882:	1c02      	adds	r2, r0, #0
    7884:	4b1a      	ldr	r3, [pc, #104]	; (78f0 <PMM_Sleep+0x1ac>)
    7886:	491b      	ldr	r1, [pc, #108]	; (78f4 <PMM_Sleep+0x1b0>)
    7888:	1c10      	adds	r0, r2, #0
    788a:	4798      	blx	r3
    788c:	1c03      	adds	r3, r0, #0
    788e:	1c1a      	adds	r2, r3, #0
    7890:	4b19      	ldr	r3, [pc, #100]	; (78f8 <PMM_Sleep+0x1b4>)
    7892:	1c10      	adds	r0, r2, #0
    7894:	4798      	blx	r3
    7896:	0002      	movs	r2, r0
    7898:	4b18      	ldr	r3, [pc, #96]	; (78fc <PMM_Sleep+0x1b8>)
    789a:	0019      	movs	r1, r3
    789c:	0010      	movs	r0, r2
    789e:	4b18      	ldr	r3, [pc, #96]	; (7900 <PMM_Sleep+0x1bc>)
    78a0:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    78a2:	4b0b      	ldr	r3, [pc, #44]	; (78d0 <PMM_Sleep+0x18c>)
    78a4:	2201      	movs	r2, #1
    78a6:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    78a8:	4b16      	ldr	r3, [pc, #88]	; (7904 <PMM_Sleep+0x1c0>)
    78aa:	687a      	ldr	r2, [r7, #4]
    78ac:	601a      	str	r2, [r3, #0]
            /* End of sleep preparation */

            /* Put the system to sleep */
            HAL_Sleep(req->sleep_mode);
    78ae:	687b      	ldr	r3, [r7, #4]
    78b0:	791b      	ldrb	r3, [r3, #4]
    78b2:	0018      	movs	r0, r3
    78b4:	4b14      	ldr	r3, [pc, #80]	; (7908 <PMM_Sleep+0x1c4>)
    78b6:	4798      	blx	r3

            status = PMM_SLEEP_REQ_PROCESSED;
    78b8:	2317      	movs	r3, #23
    78ba:	18fb      	adds	r3, r7, r3
    78bc:	2201      	movs	r2, #1
    78be:	701a      	strb	r2, [r3, #0]
        }
    }

    return status;
    78c0:	2317      	movs	r3, #23
    78c2:	18fb      	adds	r3, r7, r3
    78c4:	781b      	ldrb	r3, [r3, #0]
}
    78c6:	0018      	movs	r0, r3
    78c8:	46bd      	mov	sp, r7
    78ca:	b007      	add	sp, #28
    78cc:	bd90      	pop	{r4, r7, pc}
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	20000cd0 	.word	0x20000cd0
    78d4:	000162f9 	.word	0x000162f9
    78d8:	00007709 	.word	0x00007709
    78dc:	00015b41 	.word	0x00015b41
    78e0:	00021069 	.word	0x00021069
    78e4:	07cebfb0 	.word	0x07cebfb0
    78e8:	00015f8d 	.word	0x00015f8d
    78ec:	00022461 	.word	0x00022461
    78f0:	00021e09 	.word	0x00021e09
    78f4:	42031375 	.word	0x42031375
    78f8:	000214d9 	.word	0x000214d9
    78fc:	0000790d 	.word	0x0000790d
    7900:	00007619 	.word	0x00007619
    7904:	20000ccc 	.word	0x20000ccc
    7908:	00007501 	.word	0x00007501

0000790c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    790c:	b5b0      	push	{r4, r5, r7, lr}
    790e:	b082      	sub	sp, #8
    7910:	af00      	add	r7, sp, #0
    uint64_t sleptTimeUs = 0;
    7912:	2300      	movs	r3, #0
    7914:	2400      	movs	r4, #0
    7916:	603b      	str	r3, [r7, #0]
    7918:	607c      	str	r4, [r7, #4]

    if (PMM_STATE_SLEEP == pmmState)
    791a:	4b21      	ldr	r3, [pc, #132]	; (79a0 <PMM_Wakeup+0x94>)
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	2b01      	cmp	r3, #1
    7920:	d139      	bne.n	7996 <PMM_Wakeup+0x8a>
    {

		pmmState = PMM_STATE_ACTIVE;
    7922:	4b1f      	ldr	r3, [pc, #124]	; (79a0 <PMM_Wakeup+0x94>)
    7924:	2200      	movs	r2, #0
    7926:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    7928:	4b1e      	ldr	r3, [pc, #120]	; (79a4 <PMM_Wakeup+0x98>)
    792a:	4798      	blx	r3
    792c:	0002      	movs	r2, r0
    792e:	4b1e      	ldr	r3, [pc, #120]	; (79a8 <PMM_Wakeup+0x9c>)
    7930:	0010      	movs	r0, r2
    7932:	4798      	blx	r3
    7934:	1c02      	adds	r2, r0, #0
    7936:	4b1d      	ldr	r3, [pc, #116]	; (79ac <PMM_Wakeup+0xa0>)
    7938:	491d      	ldr	r1, [pc, #116]	; (79b0 <PMM_Wakeup+0xa4>)
    793a:	1c10      	adds	r0, r2, #0
    793c:	4798      	blx	r3
    793e:	1c03      	adds	r3, r0, #0
    7940:	1c1a      	adds	r2, r3, #0
    7942:	4b1c      	ldr	r3, [pc, #112]	; (79b4 <PMM_Wakeup+0xa8>)
    7944:	1c10      	adds	r0, r2, #0
    7946:	4798      	blx	r3
    7948:	0003      	movs	r3, r0
    794a:	000c      	movs	r4, r1
    794c:	603b      	str	r3, [r7, #0]
    794e:	607c      	str	r4, [r7, #4]
        SleepTimerStop();
    7950:	4b19      	ldr	r3, [pc, #100]	; (79b8 <PMM_Wakeup+0xac>)
    7952:	4798      	blx	r3

        SystemTimerSync(sleptTimeUs);
    7954:	683b      	ldr	r3, [r7, #0]
    7956:	687c      	ldr	r4, [r7, #4]
    7958:	0018      	movs	r0, r3
    795a:	0021      	movs	r1, r4
    795c:	4b17      	ldr	r3, [pc, #92]	; (79bc <PMM_Wakeup+0xb0>)
    795e:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    7960:	4b17      	ldr	r3, [pc, #92]	; (79c0 <PMM_Wakeup+0xb4>)
    7962:	681b      	ldr	r3, [r3, #0]
    7964:	2b00      	cmp	r3, #0
    7966:	d016      	beq.n	7996 <PMM_Wakeup+0x8a>
    7968:	4b15      	ldr	r3, [pc, #84]	; (79c0 <PMM_Wakeup+0xb4>)
    796a:	681b      	ldr	r3, [r3, #0]
    796c:	689b      	ldr	r3, [r3, #8]
    796e:	2b00      	cmp	r3, #0
    7970:	d011      	beq.n	7996 <PMM_Wakeup+0x8a>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    7972:	4b13      	ldr	r3, [pc, #76]	; (79c0 <PMM_Wakeup+0xb4>)
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	689c      	ldr	r4, [r3, #8]
    7978:	6838      	ldr	r0, [r7, #0]
    797a:	6879      	ldr	r1, [r7, #4]
    797c:	4d11      	ldr	r5, [pc, #68]	; (79c4 <PMM_Wakeup+0xb8>)
    797e:	22fa      	movs	r2, #250	; 0xfa
    7980:	0092      	lsls	r2, r2, #2
    7982:	2300      	movs	r3, #0
    7984:	47a8      	blx	r5
    7986:	0002      	movs	r2, r0
    7988:	000b      	movs	r3, r1
    798a:	0013      	movs	r3, r2
    798c:	0018      	movs	r0, r3
    798e:	47a0      	blx	r4
            sleepReq = NULL;
    7990:	4b0b      	ldr	r3, [pc, #44]	; (79c0 <PMM_Wakeup+0xb4>)
    7992:	2200      	movs	r2, #0
    7994:	601a      	str	r2, [r3, #0]
        }
    }
}
    7996:	46c0      	nop			; (mov r8, r8)
    7998:	46bd      	mov	sp, r7
    799a:	b002      	add	sp, #8
    799c:	bdb0      	pop	{r4, r5, r7, pc}
    799e:	46c0      	nop			; (mov r8, r8)
    79a0:	20000cd0 	.word	0x20000cd0
    79a4:	000075fd 	.word	0x000075fd
    79a8:	00022461 	.word	0x00022461
    79ac:	00021e09 	.word	0x00021e09
    79b0:	41f423d7 	.word	0x41f423d7
    79b4:	00021545 	.word	0x00021545
    79b8:	0000766d 	.word	0x0000766d
    79bc:	00015fb5 	.word	0x00015fb5
    79c0:	20000ccc 	.word	0x20000ccc
    79c4:	00021445 	.word	0x00021445

000079c8 <LORAReg_InitAS>:
#endif
#endif
/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAS(IsmBand_t ismBand)
{
    79c8:	b590      	push	{r4, r7, lr}
    79ca:	b08b      	sub	sp, #44	; 0x2c
    79cc:	af02      	add	r7, sp, #8
    79ce:	0002      	movs	r2, r0
    79d0:	1dfb      	adds	r3, r7, #7
    79d2:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    79d4:	231f      	movs	r3, #31
    79d6:	18fb      	adds	r3, r7, r3
    79d8:	2208      	movs	r2, #8
    79da:	701a      	strb	r2, [r3, #0]
#if(AS_BAND == 1)
	static bool initialized = false;
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    79dc:	4bfc      	ldr	r3, [pc, #1008]	; (7dd0 <LORAReg_InitAS+0x408>)
    79de:	2226      	movs	r2, #38	; 0x26
    79e0:	2103      	movs	r1, #3
    79e2:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    79e4:	4bfa      	ldr	r3, [pc, #1000]	; (7dd0 <LORAReg_InitAS+0x408>)
    79e6:	222a      	movs	r2, #42	; 0x2a
    79e8:	2110      	movs	r1, #16
    79ea:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    79ec:	4bf8      	ldr	r3, [pc, #992]	; (7dd0 <LORAReg_InitAS+0x408>)
    79ee:	2229      	movs	r2, #41	; 0x29
    79f0:	2101      	movs	r1, #1
    79f2:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    79f4:	4bf6      	ldr	r3, [pc, #984]	; (7dd0 <LORAReg_InitAS+0x408>)
    79f6:	2227      	movs	r2, #39	; 0x27
    79f8:	2101      	movs	r1, #1
    79fa:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    79fc:	4bf4      	ldr	r3, [pc, #976]	; (7dd0 <LORAReg_InitAS+0x408>)
    79fe:	4af5      	ldr	r2, [pc, #980]	; (7dd4 <LORAReg_InitAS+0x40c>)
    7a00:	21ff      	movs	r1, #255	; 0xff
    7a02:	4011      	ands	r1, r2
    7a04:	000c      	movs	r4, r1
    7a06:	7919      	ldrb	r1, [r3, #4]
    7a08:	2000      	movs	r0, #0
    7a0a:	4001      	ands	r1, r0
    7a0c:	1c08      	adds	r0, r1, #0
    7a0e:	1c21      	adds	r1, r4, #0
    7a10:	4301      	orrs	r1, r0
    7a12:	7119      	strb	r1, [r3, #4]
    7a14:	0a11      	lsrs	r1, r2, #8
    7a16:	20ff      	movs	r0, #255	; 0xff
    7a18:	4001      	ands	r1, r0
    7a1a:	000c      	movs	r4, r1
    7a1c:	7959      	ldrb	r1, [r3, #5]
    7a1e:	2000      	movs	r0, #0
    7a20:	4001      	ands	r1, r0
    7a22:	1c08      	adds	r0, r1, #0
    7a24:	1c21      	adds	r1, r4, #0
    7a26:	4301      	orrs	r1, r0
    7a28:	7159      	strb	r1, [r3, #5]
    7a2a:	0c11      	lsrs	r1, r2, #16
    7a2c:	20ff      	movs	r0, #255	; 0xff
    7a2e:	4001      	ands	r1, r0
    7a30:	000c      	movs	r4, r1
    7a32:	7999      	ldrb	r1, [r3, #6]
    7a34:	2000      	movs	r0, #0
    7a36:	4001      	ands	r1, r0
    7a38:	1c08      	adds	r0, r1, #0
    7a3a:	1c21      	adds	r1, r4, #0
    7a3c:	4301      	orrs	r1, r0
    7a3e:	7199      	strb	r1, [r3, #6]
    7a40:	0e10      	lsrs	r0, r2, #24
    7a42:	79da      	ldrb	r2, [r3, #7]
    7a44:	2100      	movs	r1, #0
    7a46:	400a      	ands	r2, r1
    7a48:	1c11      	adds	r1, r2, #0
    7a4a:	1c02      	adds	r2, r0, #0
    7a4c:	430a      	orrs	r2, r1
    7a4e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    7a50:	4bdf      	ldr	r3, [pc, #892]	; (7dd0 <LORAReg_InitAS+0x408>)
    7a52:	4ae1      	ldr	r2, [pc, #900]	; (7dd8 <LORAReg_InitAS+0x410>)
    7a54:	21ff      	movs	r1, #255	; 0xff
    7a56:	4011      	ands	r1, r2
    7a58:	000c      	movs	r4, r1
    7a5a:	7819      	ldrb	r1, [r3, #0]
    7a5c:	2000      	movs	r0, #0
    7a5e:	4001      	ands	r1, r0
    7a60:	1c08      	adds	r0, r1, #0
    7a62:	1c21      	adds	r1, r4, #0
    7a64:	4301      	orrs	r1, r0
    7a66:	7019      	strb	r1, [r3, #0]
    7a68:	0a11      	lsrs	r1, r2, #8
    7a6a:	20ff      	movs	r0, #255	; 0xff
    7a6c:	4001      	ands	r1, r0
    7a6e:	000c      	movs	r4, r1
    7a70:	7859      	ldrb	r1, [r3, #1]
    7a72:	2000      	movs	r0, #0
    7a74:	4001      	ands	r1, r0
    7a76:	1c08      	adds	r0, r1, #0
    7a78:	1c21      	adds	r1, r4, #0
    7a7a:	4301      	orrs	r1, r0
    7a7c:	7059      	strb	r1, [r3, #1]
    7a7e:	0c11      	lsrs	r1, r2, #16
    7a80:	20ff      	movs	r0, #255	; 0xff
    7a82:	4001      	ands	r1, r0
    7a84:	000c      	movs	r4, r1
    7a86:	7899      	ldrb	r1, [r3, #2]
    7a88:	2000      	movs	r0, #0
    7a8a:	4001      	ands	r1, r0
    7a8c:	1c08      	adds	r0, r1, #0
    7a8e:	1c21      	adds	r1, r4, #0
    7a90:	4301      	orrs	r1, r0
    7a92:	7099      	strb	r1, [r3, #2]
    7a94:	0e10      	lsrs	r0, r2, #24
    7a96:	78da      	ldrb	r2, [r3, #3]
    7a98:	2100      	movs	r1, #0
    7a9a:	400a      	ands	r2, r1
    7a9c:	1c11      	adds	r1, r2, #0
    7a9e:	1c02      	adds	r2, r0, #0
    7aa0:	430a      	orrs	r2, r1
    7aa2:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    7aa4:	4bca      	ldr	r3, [pc, #808]	; (7dd0 <LORAReg_InitAS+0x408>)
    7aa6:	4acd      	ldr	r2, [pc, #820]	; (7ddc <LORAReg_InitAS+0x414>)
    7aa8:	21ff      	movs	r1, #255	; 0xff
    7aaa:	4011      	ands	r1, r2
    7aac:	000c      	movs	r4, r1
    7aae:	7a19      	ldrb	r1, [r3, #8]
    7ab0:	2000      	movs	r0, #0
    7ab2:	4001      	ands	r1, r0
    7ab4:	1c08      	adds	r0, r1, #0
    7ab6:	1c21      	adds	r1, r4, #0
    7ab8:	4301      	orrs	r1, r0
    7aba:	7219      	strb	r1, [r3, #8]
    7abc:	0a11      	lsrs	r1, r2, #8
    7abe:	20ff      	movs	r0, #255	; 0xff
    7ac0:	4001      	ands	r1, r0
    7ac2:	000c      	movs	r4, r1
    7ac4:	7a59      	ldrb	r1, [r3, #9]
    7ac6:	2000      	movs	r0, #0
    7ac8:	4001      	ands	r1, r0
    7aca:	1c08      	adds	r0, r1, #0
    7acc:	1c21      	adds	r1, r4, #0
    7ace:	4301      	orrs	r1, r0
    7ad0:	7259      	strb	r1, [r3, #9]
    7ad2:	0c11      	lsrs	r1, r2, #16
    7ad4:	20ff      	movs	r0, #255	; 0xff
    7ad6:	4001      	ands	r1, r0
    7ad8:	000c      	movs	r4, r1
    7ada:	7a99      	ldrb	r1, [r3, #10]
    7adc:	2000      	movs	r0, #0
    7ade:	4001      	ands	r1, r0
    7ae0:	1c08      	adds	r0, r1, #0
    7ae2:	1c21      	adds	r1, r4, #0
    7ae4:	4301      	orrs	r1, r0
    7ae6:	7299      	strb	r1, [r3, #10]
    7ae8:	0e10      	lsrs	r0, r2, #24
    7aea:	7ada      	ldrb	r2, [r3, #11]
    7aec:	2100      	movs	r1, #0
    7aee:	400a      	ands	r2, r1
    7af0:	1c11      	adds	r1, r2, #0
    7af2:	1c02      	adds	r2, r0, #0
    7af4:	430a      	orrs	r2, r1
    7af6:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7af8:	4bb5      	ldr	r3, [pc, #724]	; (7dd0 <LORAReg_InitAS+0x408>)
    7afa:	4ab9      	ldr	r2, [pc, #740]	; (7de0 <LORAReg_InitAS+0x418>)
    7afc:	21ff      	movs	r1, #255	; 0xff
    7afe:	4011      	ands	r1, r2
    7b00:	000c      	movs	r4, r1
    7b02:	7c19      	ldrb	r1, [r3, #16]
    7b04:	2000      	movs	r0, #0
    7b06:	4001      	ands	r1, r0
    7b08:	1c08      	adds	r0, r1, #0
    7b0a:	1c21      	adds	r1, r4, #0
    7b0c:	4301      	orrs	r1, r0
    7b0e:	7419      	strb	r1, [r3, #16]
    7b10:	0a11      	lsrs	r1, r2, #8
    7b12:	20ff      	movs	r0, #255	; 0xff
    7b14:	4001      	ands	r1, r0
    7b16:	000c      	movs	r4, r1
    7b18:	7c59      	ldrb	r1, [r3, #17]
    7b1a:	2000      	movs	r0, #0
    7b1c:	4001      	ands	r1, r0
    7b1e:	1c08      	adds	r0, r1, #0
    7b20:	1c21      	adds	r1, r4, #0
    7b22:	4301      	orrs	r1, r0
    7b24:	7459      	strb	r1, [r3, #17]
    7b26:	0c11      	lsrs	r1, r2, #16
    7b28:	20ff      	movs	r0, #255	; 0xff
    7b2a:	4001      	ands	r1, r0
    7b2c:	000c      	movs	r4, r1
    7b2e:	7c99      	ldrb	r1, [r3, #18]
    7b30:	2000      	movs	r0, #0
    7b32:	4001      	ands	r1, r0
    7b34:	1c08      	adds	r0, r1, #0
    7b36:	1c21      	adds	r1, r4, #0
    7b38:	4301      	orrs	r1, r0
    7b3a:	7499      	strb	r1, [r3, #18]
    7b3c:	0e10      	lsrs	r0, r2, #24
    7b3e:	7cda      	ldrb	r2, [r3, #19]
    7b40:	2100      	movs	r1, #0
    7b42:	400a      	ands	r2, r1
    7b44:	1c11      	adds	r1, r2, #0
    7b46:	1c02      	adds	r2, r0, #0
    7b48:	430a      	orrs	r2, r1
    7b4a:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    7b4c:	4ba0      	ldr	r3, [pc, #640]	; (7dd0 <LORAReg_InitAS+0x408>)
    7b4e:	4aa5      	ldr	r2, [pc, #660]	; (7de4 <LORAReg_InitAS+0x41c>)
    7b50:	21ff      	movs	r1, #255	; 0xff
    7b52:	4011      	ands	r1, r2
    7b54:	000c      	movs	r4, r1
    7b56:	7d19      	ldrb	r1, [r3, #20]
    7b58:	2000      	movs	r0, #0
    7b5a:	4001      	ands	r1, r0
    7b5c:	1c08      	adds	r0, r1, #0
    7b5e:	1c21      	adds	r1, r4, #0
    7b60:	4301      	orrs	r1, r0
    7b62:	7519      	strb	r1, [r3, #20]
    7b64:	0a11      	lsrs	r1, r2, #8
    7b66:	20ff      	movs	r0, #255	; 0xff
    7b68:	4001      	ands	r1, r0
    7b6a:	000c      	movs	r4, r1
    7b6c:	7d59      	ldrb	r1, [r3, #21]
    7b6e:	2000      	movs	r0, #0
    7b70:	4001      	ands	r1, r0
    7b72:	1c08      	adds	r0, r1, #0
    7b74:	1c21      	adds	r1, r4, #0
    7b76:	4301      	orrs	r1, r0
    7b78:	7559      	strb	r1, [r3, #21]
    7b7a:	0c11      	lsrs	r1, r2, #16
    7b7c:	20ff      	movs	r0, #255	; 0xff
    7b7e:	4001      	ands	r1, r0
    7b80:	000c      	movs	r4, r1
    7b82:	7d99      	ldrb	r1, [r3, #22]
    7b84:	2000      	movs	r0, #0
    7b86:	4001      	ands	r1, r0
    7b88:	1c08      	adds	r0, r1, #0
    7b8a:	1c21      	adds	r1, r4, #0
    7b8c:	4301      	orrs	r1, r0
    7b8e:	7599      	strb	r1, [r3, #22]
    7b90:	0e10      	lsrs	r0, r2, #24
    7b92:	7dda      	ldrb	r2, [r3, #23]
    7b94:	2100      	movs	r1, #0
    7b96:	400a      	ands	r2, r1
    7b98:	1c11      	adds	r1, r2, #0
    7b9a:	1c02      	adds	r2, r0, #0
    7b9c:	430a      	orrs	r2, r1
    7b9e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    7ba0:	4b8b      	ldr	r3, [pc, #556]	; (7dd0 <LORAReg_InitAS+0x408>)
    7ba2:	4a91      	ldr	r2, [pc, #580]	; (7de8 <LORAReg_InitAS+0x420>)
    7ba4:	21ff      	movs	r1, #255	; 0xff
    7ba6:	4011      	ands	r1, r2
    7ba8:	000c      	movs	r4, r1
    7baa:	7e19      	ldrb	r1, [r3, #24]
    7bac:	2000      	movs	r0, #0
    7bae:	4001      	ands	r1, r0
    7bb0:	1c08      	adds	r0, r1, #0
    7bb2:	1c21      	adds	r1, r4, #0
    7bb4:	4301      	orrs	r1, r0
    7bb6:	7619      	strb	r1, [r3, #24]
    7bb8:	0a11      	lsrs	r1, r2, #8
    7bba:	20ff      	movs	r0, #255	; 0xff
    7bbc:	4001      	ands	r1, r0
    7bbe:	000c      	movs	r4, r1
    7bc0:	7e59      	ldrb	r1, [r3, #25]
    7bc2:	2000      	movs	r0, #0
    7bc4:	4001      	ands	r1, r0
    7bc6:	1c08      	adds	r0, r1, #0
    7bc8:	1c21      	adds	r1, r4, #0
    7bca:	4301      	orrs	r1, r0
    7bcc:	7659      	strb	r1, [r3, #25]
    7bce:	0c11      	lsrs	r1, r2, #16
    7bd0:	20ff      	movs	r0, #255	; 0xff
    7bd2:	4001      	ands	r1, r0
    7bd4:	000c      	movs	r4, r1
    7bd6:	7e99      	ldrb	r1, [r3, #26]
    7bd8:	2000      	movs	r0, #0
    7bda:	4001      	ands	r1, r0
    7bdc:	1c08      	adds	r0, r1, #0
    7bde:	1c21      	adds	r1, r4, #0
    7be0:	4301      	orrs	r1, r0
    7be2:	7699      	strb	r1, [r3, #26]
    7be4:	0e10      	lsrs	r0, r2, #24
    7be6:	7eda      	ldrb	r2, [r3, #27]
    7be8:	2100      	movs	r1, #0
    7bea:	400a      	ands	r2, r1
    7bec:	1c11      	adds	r1, r2, #0
    7bee:	1c02      	adds	r2, r0, #0
    7bf0:	430a      	orrs	r2, r1
    7bf2:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    7bf4:	4b76      	ldr	r3, [pc, #472]	; (7dd0 <LORAReg_InitAS+0x408>)
    7bf6:	4a7d      	ldr	r2, [pc, #500]	; (7dec <LORAReg_InitAS+0x424>)
    7bf8:	21ff      	movs	r1, #255	; 0xff
    7bfa:	4011      	ands	r1, r2
    7bfc:	000c      	movs	r4, r1
    7bfe:	7b19      	ldrb	r1, [r3, #12]
    7c00:	2000      	movs	r0, #0
    7c02:	4001      	ands	r1, r0
    7c04:	1c08      	adds	r0, r1, #0
    7c06:	1c21      	adds	r1, r4, #0
    7c08:	4301      	orrs	r1, r0
    7c0a:	7319      	strb	r1, [r3, #12]
    7c0c:	0a11      	lsrs	r1, r2, #8
    7c0e:	20ff      	movs	r0, #255	; 0xff
    7c10:	4001      	ands	r1, r0
    7c12:	000c      	movs	r4, r1
    7c14:	7b59      	ldrb	r1, [r3, #13]
    7c16:	2000      	movs	r0, #0
    7c18:	4001      	ands	r1, r0
    7c1a:	1c08      	adds	r0, r1, #0
    7c1c:	1c21      	adds	r1, r4, #0
    7c1e:	4301      	orrs	r1, r0
    7c20:	7359      	strb	r1, [r3, #13]
    7c22:	0c11      	lsrs	r1, r2, #16
    7c24:	20ff      	movs	r0, #255	; 0xff
    7c26:	4001      	ands	r1, r0
    7c28:	000c      	movs	r4, r1
    7c2a:	7b99      	ldrb	r1, [r3, #14]
    7c2c:	2000      	movs	r0, #0
    7c2e:	4001      	ands	r1, r0
    7c30:	1c08      	adds	r0, r1, #0
    7c32:	1c21      	adds	r1, r4, #0
    7c34:	4301      	orrs	r1, r0
    7c36:	7399      	strb	r1, [r3, #14]
    7c38:	0e10      	lsrs	r0, r2, #24
    7c3a:	7bda      	ldrb	r2, [r3, #15]
    7c3c:	2100      	movs	r1, #0
    7c3e:	400a      	ands	r2, r1
    7c40:	1c11      	adds	r1, r2, #0
    7c42:	1c02      	adds	r2, r0, #0
    7c44:	430a      	orrs	r2, r1
    7c46:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    7c48:	4b61      	ldr	r3, [pc, #388]	; (7dd0 <LORAReg_InitAS+0x408>)
    7c4a:	2222      	movs	r2, #34	; 0x22
    7c4c:	2102      	movs	r1, #2
    7c4e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    7c50:	4b5f      	ldr	r3, [pc, #380]	; (7dd0 <LORAReg_InitAS+0x408>)
    7c52:	2223      	movs	r2, #35	; 0x23
    7c54:	2102      	movs	r1, #2
    7c56:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    7c58:	4b5d      	ldr	r3, [pc, #372]	; (7dd0 <LORAReg_InitAS+0x408>)
    7c5a:	7f1a      	ldrb	r2, [r3, #28]
    7c5c:	2100      	movs	r1, #0
    7c5e:	400a      	ands	r2, r1
    7c60:	771a      	strb	r2, [r3, #28]
    7c62:	7f5a      	ldrb	r2, [r3, #29]
    7c64:	2100      	movs	r1, #0
    7c66:	400a      	ands	r2, r1
    7c68:	1c11      	adds	r1, r2, #0
    7c6a:	2216      	movs	r2, #22
    7c6c:	4252      	negs	r2, r2
    7c6e:	430a      	orrs	r2, r1
    7c70:	775a      	strb	r2, [r3, #29]
    7c72:	7f9a      	ldrb	r2, [r3, #30]
    7c74:	2100      	movs	r1, #0
    7c76:	400a      	ands	r2, r1
    7c78:	1c11      	adds	r1, r2, #0
    7c7a:	2206      	movs	r2, #6
    7c7c:	430a      	orrs	r2, r1
    7c7e:	779a      	strb	r2, [r3, #30]
    7c80:	7fda      	ldrb	r2, [r3, #31]
    7c82:	2100      	movs	r1, #0
    7c84:	400a      	ands	r2, r1
    7c86:	1c11      	adds	r1, r2, #0
    7c88:	2237      	movs	r2, #55	; 0x37
    7c8a:	430a      	orrs	r2, r1
    7c8c:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    7c8e:	4b50      	ldr	r3, [pc, #320]	; (7dd0 <LORAReg_InitAS+0x408>)
    7c90:	2221      	movs	r2, #33	; 0x21
    7c92:	2102      	movs	r1, #2
    7c94:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    7c96:	4b4e      	ldr	r3, [pc, #312]	; (7dd0 <LORAReg_InitAS+0x408>)
    7c98:	2220      	movs	r2, #32
    7c9a:	2132      	movs	r1, #50	; 0x32
    7c9c:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    7c9e:	4b4c      	ldr	r3, [pc, #304]	; (7dd0 <LORAReg_InitAS+0x408>)
    7ca0:	2224      	movs	r2, #36	; 0x24
    7ca2:	2107      	movs	r1, #7
    7ca4:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    7ca6:	4b4a      	ldr	r3, [pc, #296]	; (7dd0 <LORAReg_InitAS+0x408>)
    7ca8:	2225      	movs	r2, #37	; 0x25
    7caa:	2100      	movs	r1, #0
    7cac:	5499      	strb	r1, [r3, r2]
	RegParams.Rx1DrOffset = 7;
    7cae:	4b48      	ldr	r3, [pc, #288]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cb0:	222c      	movs	r2, #44	; 0x2c
    7cb2:	2107      	movs	r1, #7
    7cb4:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    7cb6:	4b46      	ldr	r3, [pc, #280]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cb8:	222d      	movs	r2, #45	; 0x2d
    7cba:	2107      	movs	r1, #7
    7cbc:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AS;
    7cbe:	4b44      	ldr	r3, [pc, #272]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cc0:	222e      	movs	r2, #46	; 0x2e
    7cc2:	2101      	movs	r1, #1
    7cc4:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    7cc6:	4b42      	ldr	r3, [pc, #264]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cc8:	2228      	movs	r2, #40	; 0x28
    7cca:	2110      	movs	r1, #16
    7ccc:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    7cce:	4a40      	ldr	r2, [pc, #256]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cd0:	23c2      	movs	r3, #194	; 0xc2
    7cd2:	33ff      	adds	r3, #255	; 0xff
    7cd4:	2102      	movs	r1, #2
    7cd6:	54d1      	strb	r1, [r2, r3]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    7cd8:	4b3d      	ldr	r3, [pc, #244]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cda:	7c1a      	ldrb	r2, [r3, #16]
    7cdc:	7c59      	ldrb	r1, [r3, #17]
    7cde:	0209      	lsls	r1, r1, #8
    7ce0:	430a      	orrs	r2, r1
    7ce2:	7c99      	ldrb	r1, [r3, #18]
    7ce4:	0409      	lsls	r1, r1, #16
    7ce6:	430a      	orrs	r2, r1
    7ce8:	7cdb      	ldrb	r3, [r3, #19]
    7cea:	061b      	lsls	r3, r3, #24
    7cec:	4313      	orrs	r3, r2
    7cee:	001a      	movs	r2, r3
    7cf0:	4b3f      	ldr	r3, [pc, #252]	; (7df0 <LORAReg_InitAS+0x428>)
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	7113      	strb	r3, [r2, #4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    7cf6:	4b36      	ldr	r3, [pc, #216]	; (7dd0 <LORAReg_InitAS+0x408>)
    7cf8:	7e1a      	ldrb	r2, [r3, #24]
    7cfa:	7e59      	ldrb	r1, [r3, #25]
    7cfc:	0209      	lsls	r1, r1, #8
    7cfe:	430a      	orrs	r2, r1
    7d00:	7e99      	ldrb	r1, [r3, #26]
    7d02:	0409      	lsls	r1, r1, #16
    7d04:	430a      	orrs	r2, r1
    7d06:	7edb      	ldrb	r3, [r3, #27]
    7d08:	061b      	lsls	r3, r3, #24
    7d0a:	4313      	orrs	r3, r2
    7d0c:	001a      	movs	r2, r3
    7d0e:	4b38      	ldr	r3, [pc, #224]	; (7df0 <LORAReg_InitAS+0x428>)
    7d10:	785b      	ldrb	r3, [r3, #1]
    7d12:	7013      	strb	r3, [r2, #0]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    7d14:	4b2e      	ldr	r3, [pc, #184]	; (7dd0 <LORAReg_InitAS+0x408>)
    7d16:	7d1a      	ldrb	r2, [r3, #20]
    7d18:	7d59      	ldrb	r1, [r3, #21]
    7d1a:	0209      	lsls	r1, r1, #8
    7d1c:	430a      	orrs	r2, r1
    7d1e:	7d99      	ldrb	r1, [r3, #22]
    7d20:	0409      	lsls	r1, r1, #16
    7d22:	430a      	orrs	r2, r1
    7d24:	7ddb      	ldrb	r3, [r3, #23]
    7d26:	061b      	lsls	r3, r3, #24
    7d28:	4313      	orrs	r3, r2
    7d2a:	001a      	movs	r2, r3
    7d2c:	4b30      	ldr	r3, [pc, #192]	; (7df0 <LORAReg_InitAS+0x428>)
    7d2e:	789b      	ldrb	r3, [r3, #2]
    7d30:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    7d32:	4b27      	ldr	r3, [pc, #156]	; (7dd0 <LORAReg_InitAS+0x408>)
    7d34:	7d1a      	ldrb	r2, [r3, #20]
    7d36:	7d59      	ldrb	r1, [r3, #21]
    7d38:	0209      	lsls	r1, r1, #8
    7d3a:	430a      	orrs	r2, r1
    7d3c:	7d99      	ldrb	r1, [r3, #22]
    7d3e:	0409      	lsls	r1, r1, #16
    7d40:	430a      	orrs	r2, r1
    7d42:	7ddb      	ldrb	r3, [r3, #23]
    7d44:	061b      	lsls	r3, r3, #24
    7d46:	4313      	orrs	r3, r2
    7d48:	791a      	ldrb	r2, [r3, #4]
    7d4a:	2100      	movs	r1, #0
    7d4c:	400a      	ands	r2, r1
    7d4e:	711a      	strb	r2, [r3, #4]
    7d50:	795a      	ldrb	r2, [r3, #5]
    7d52:	2100      	movs	r1, #0
    7d54:	400a      	ands	r2, r1
    7d56:	715a      	strb	r2, [r3, #5]
    7d58:	799a      	ldrb	r2, [r3, #6]
    7d5a:	2100      	movs	r1, #0
    7d5c:	400a      	ands	r2, r1
    7d5e:	719a      	strb	r2, [r3, #6]
    7d60:	79da      	ldrb	r2, [r3, #7]
    7d62:	2100      	movs	r1, #0
    7d64:	400a      	ands	r2, r1
    7d66:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    7d68:	4b19      	ldr	r3, [pc, #100]	; (7dd0 <LORAReg_InitAS+0x408>)
    7d6a:	2243      	movs	r2, #67	; 0x43
    7d6c:	2100      	movs	r1, #0
    7d6e:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    7d70:	4b17      	ldr	r3, [pc, #92]	; (7dd0 <LORAReg_InitAS+0x408>)
    7d72:	333f      	adds	r3, #63	; 0x3f
    7d74:	781a      	ldrb	r2, [r3, #0]
    7d76:	2100      	movs	r1, #0
    7d78:	400a      	ands	r2, r1
    7d7a:	701a      	strb	r2, [r3, #0]
    7d7c:	785a      	ldrb	r2, [r3, #1]
    7d7e:	2100      	movs	r1, #0
    7d80:	400a      	ands	r2, r1
    7d82:	705a      	strb	r2, [r3, #1]
    7d84:	789a      	ldrb	r2, [r3, #2]
    7d86:	2100      	movs	r1, #0
    7d88:	400a      	ands	r2, r1
    7d8a:	709a      	strb	r2, [r3, #2]
    7d8c:	78da      	ldrb	r2, [r3, #3]
    7d8e:	2100      	movs	r1, #0
    7d90:	400a      	ands	r2, r1
    7d92:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    7d94:	4a0e      	ldr	r2, [pc, #56]	; (7dd0 <LORAReg_InitAS+0x408>)
    7d96:	23c4      	movs	r3, #196	; 0xc4
    7d98:	33ff      	adds	r3, #255	; 0xff
    7d9a:	5cd1      	ldrb	r1, [r2, r3]
    7d9c:	2001      	movs	r0, #1
    7d9e:	4301      	orrs	r1, r0
    7da0:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    7da2:	4a0b      	ldr	r2, [pc, #44]	; (7dd0 <LORAReg_InitAS+0x408>)
    7da4:	23c4      	movs	r3, #196	; 0xc4
    7da6:	33ff      	adds	r3, #255	; 0xff
    7da8:	5cd1      	ldrb	r1, [r2, r3]
    7daa:	2002      	movs	r0, #2
    7dac:	4301      	orrs	r1, r0
    7dae:	54d1      	strb	r1, [r2, r3]
	
	RegParams.band = ismBand;
    7db0:	4b07      	ldr	r3, [pc, #28]	; (7dd0 <LORAReg_InitAS+0x408>)
    7db2:	1dfa      	adds	r2, r7, #7
    7db4:	212f      	movs	r1, #47	; 0x2f
    7db6:	7812      	ldrb	r2, [r2, #0]
    7db8:	545a      	strb	r2, [r3, r1]
	
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    7dba:	1dfb      	adds	r3, r7, #7
    7dbc:	781b      	ldrb	r3, [r3, #0]
    7dbe:	2b05      	cmp	r3, #5
    7dc0:	d800      	bhi.n	7dc4 <LORAReg_InitAS+0x3fc>
    7dc2:	e08d      	b.n	7ee0 <LORAReg_InitAS+0x518>
    7dc4:	1dfb      	adds	r3, r7, #7
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	2b0e      	cmp	r3, #14
    7dca:	d900      	bls.n	7dce <LORAReg_InitAS+0x406>
    7dcc:	e088      	b.n	7ee0 <LORAReg_InitAS+0x518>
    7dce:	e011      	b.n	7df4 <LORAReg_InitAS+0x42c>
    7dd0:	200014a8 	.word	0x200014a8
    7dd4:	2000152c 	.word	0x2000152c
    7dd8:	200014ec 	.word	0x200014ec
    7ddc:	2000154c 	.word	0x2000154c
    7de0:	2000160c 	.word	0x2000160c
    7de4:	200014dd 	.word	0x200014dd
    7de8:	200014e6 	.word	0x200014e6
    7dec:	2000166c 	.word	0x2000166c
    7df0:	200014a4 	.word	0x200014a4
	{
		InitDefault923Channels ();
    7df4:	4b5a      	ldr	r3, [pc, #360]	; (7f60 <LORAReg_InitAS+0x598>)
    7df6:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    7df8:	4a5a      	ldr	r2, [pc, #360]	; (7f64 <LORAReg_InitAS+0x59c>)
    7dfa:	23e1      	movs	r3, #225	; 0xe1
    7dfc:	005b      	lsls	r3, r3, #1
    7dfe:	2110      	movs	r1, #16
    7e00:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    7e02:	4b58      	ldr	r3, [pc, #352]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e04:	781a      	ldrb	r2, [r3, #0]
    7e06:	7859      	ldrb	r1, [r3, #1]
    7e08:	0209      	lsls	r1, r1, #8
    7e0a:	430a      	orrs	r2, r1
    7e0c:	7899      	ldrb	r1, [r3, #2]
    7e0e:	0409      	lsls	r1, r1, #16
    7e10:	430a      	orrs	r2, r1
    7e12:	78db      	ldrb	r3, [r3, #3]
    7e14:	061b      	lsls	r3, r3, #24
    7e16:	4313      	orrs	r3, r2
    7e18:	001a      	movs	r2, r3
    7e1a:	4b53      	ldr	r3, [pc, #332]	; (7f68 <LORAReg_InitAS+0x5a0>)
    7e1c:	0010      	movs	r0, r2
    7e1e:	0019      	movs	r1, r3
    7e20:	2340      	movs	r3, #64	; 0x40
    7e22:	001a      	movs	r2, r3
    7e24:	4b51      	ldr	r3, [pc, #324]	; (7f6c <LORAReg_InitAS+0x5a4>)
    7e26:	4798      	blx	r3
#if (ENABLE_PDS == 1)
		/*Fill PDS item id in RegParam Structure */
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    7e28:	4a4e      	ldr	r2, [pc, #312]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e2a:	2383      	movs	r3, #131	; 0x83
    7e2c:	009b      	lsls	r3, r3, #2
    7e2e:	2104      	movs	r1, #4
    7e30:	54d1      	strb	r1, [r2, r3]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    7e32:	4b4c      	ldr	r3, [pc, #304]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e34:	4a4e      	ldr	r2, [pc, #312]	; (7f70 <LORAReg_InitAS+0x5a8>)
    7e36:	5c99      	ldrb	r1, [r3, r2]
    7e38:	2000      	movs	r0, #0
    7e3a:	4001      	ands	r1, r0
    7e3c:	5499      	strb	r1, [r3, r2]
    7e3e:	189b      	adds	r3, r3, r2
    7e40:	785a      	ldrb	r2, [r3, #1]
    7e42:	2100      	movs	r1, #0
    7e44:	400a      	ands	r2, r1
    7e46:	1c11      	adds	r1, r2, #0
    7e48:	2204      	movs	r2, #4
    7e4a:	430a      	orrs	r2, r1
    7e4c:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    7e4e:	4b45      	ldr	r3, [pc, #276]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e50:	4a48      	ldr	r2, [pc, #288]	; (7f74 <LORAReg_InitAS+0x5ac>)
    7e52:	5c99      	ldrb	r1, [r3, r2]
    7e54:	2000      	movs	r0, #0
    7e56:	4001      	ands	r1, r0
    7e58:	1c08      	adds	r0, r1, #0
    7e5a:	2101      	movs	r1, #1
    7e5c:	4301      	orrs	r1, r0
    7e5e:	5499      	strb	r1, [r3, r2]
    7e60:	189b      	adds	r3, r3, r2
    7e62:	785a      	ldrb	r2, [r3, #1]
    7e64:	2100      	movs	r1, #0
    7e66:	400a      	ands	r2, r1
    7e68:	1c11      	adds	r1, r2, #0
    7e6a:	2204      	movs	r2, #4
    7e6c:	430a      	orrs	r2, r1
    7e6e:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    7e70:	4b3c      	ldr	r3, [pc, #240]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e72:	4a41      	ldr	r2, [pc, #260]	; (7f78 <LORAReg_InitAS+0x5b0>)
    7e74:	5c99      	ldrb	r1, [r3, r2]
    7e76:	2000      	movs	r0, #0
    7e78:	4001      	ands	r1, r0
    7e7a:	1c08      	adds	r0, r1, #0
    7e7c:	2102      	movs	r1, #2
    7e7e:	4301      	orrs	r1, r0
    7e80:	5499      	strb	r1, [r3, r2]
    7e82:	189b      	adds	r3, r3, r2
    7e84:	785a      	ldrb	r2, [r3, #1]
    7e86:	2100      	movs	r1, #0
    7e88:	400a      	ands	r2, r1
    7e8a:	1c11      	adds	r1, r2, #0
    7e8c:	2204      	movs	r2, #4
    7e8e:	430a      	orrs	r2, r1
    7e90:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    7e92:	4b34      	ldr	r3, [pc, #208]	; (7f64 <LORAReg_InitAS+0x59c>)
    7e94:	4a39      	ldr	r2, [pc, #228]	; (7f7c <LORAReg_InitAS+0x5b4>)
    7e96:	5c99      	ldrb	r1, [r3, r2]
    7e98:	2000      	movs	r0, #0
    7e9a:	4001      	ands	r1, r0
    7e9c:	5499      	strb	r1, [r3, r2]
    7e9e:	189b      	adds	r3, r3, r2
    7ea0:	785a      	ldrb	r2, [r3, #1]
    7ea2:	2100      	movs	r1, #0
    7ea4:	400a      	ands	r2, r1
    7ea6:	705a      	strb	r2, [r3, #1]
		/* File ID AS923 - Register */
		PdsFileMarks_t filemarks;
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    7ea8:	230c      	movs	r3, #12
    7eaa:	18fb      	adds	r3, r7, r3
    7eac:	4a34      	ldr	r2, [pc, #208]	; (7f80 <LORAReg_InitAS+0x5b8>)
    7eae:	601a      	str	r2, [r3, #0]
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    7eb0:	230c      	movs	r3, #12
    7eb2:	18fb      	adds	r3, r7, r3
    7eb4:	2203      	movs	r2, #3
    7eb6:	711a      	strb	r2, [r3, #4]
		filemarks.itemListAddr = (ItemMap_t *)&pds_reg_as_item_list;
    7eb8:	230c      	movs	r3, #12
    7eba:	18fb      	adds	r3, r7, r3
    7ebc:	4a31      	ldr	r2, [pc, #196]	; (7f84 <LORAReg_InitAS+0x5bc>)
    7ebe:	609a      	str	r2, [r3, #8]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    7ec0:	230c      	movs	r3, #12
    7ec2:	18fb      	adds	r3, r7, r3
    7ec4:	4a30      	ldr	r2, [pc, #192]	; (7f88 <LORAReg_InitAS+0x5c0>)
    7ec6:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    7ec8:	230c      	movs	r3, #12
    7eca:	18fb      	adds	r3, r7, r3
    7ecc:	466a      	mov	r2, sp
    7ece:	68d9      	ldr	r1, [r3, #12]
    7ed0:	6011      	str	r1, [r2, #0]
    7ed2:	6819      	ldr	r1, [r3, #0]
    7ed4:	685a      	ldr	r2, [r3, #4]
    7ed6:	689b      	ldr	r3, [r3, #8]
    7ed8:	2004      	movs	r0, #4
    7eda:	4c2c      	ldr	r4, [pc, #176]	; (7f8c <LORAReg_InitAS+0x5c4>)
    7edc:	47a0      	blx	r4
	{
    7ede:	e003      	b.n	7ee8 <LORAReg_InitAS+0x520>
#endif		
	}
	else
	{
		result =  LORAWAN_INVALID_PARAMETER;
    7ee0:	231f      	movs	r3, #31
    7ee2:	18fb      	adds	r3, r7, r3
    7ee4:	220a      	movs	r2, #10
    7ee6:	701a      	strb	r2, [r3, #0]
	}
	
	if(!initialized)
    7ee8:	4b29      	ldr	r3, [pc, #164]	; (7f90 <LORAReg_InitAS+0x5c8>)
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	2201      	movs	r2, #1
    7eee:	4053      	eors	r3, r2
    7ef0:	b2db      	uxtb	r3, r3
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d002      	beq.n	7efc <LORAReg_InitAS+0x534>
	{
		initialized = true;
    7ef6:	4b26      	ldr	r3, [pc, #152]	; (7f90 <LORAReg_InitAS+0x5c8>)
    7ef8:	2201      	movs	r2, #1
    7efa:	701a      	strb	r2, [r3, #0]
	}

    LORAREG_InitGetAttrFnPtrsAS();	
    7efc:	4b25      	ldr	r3, [pc, #148]	; (7f94 <LORAReg_InitAS+0x5cc>)
    7efe:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    7f00:	4b25      	ldr	r3, [pc, #148]	; (7f98 <LORAReg_InitAS+0x5d0>)
    7f02:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    7f04:	4b25      	ldr	r3, [pc, #148]	; (7f9c <LORAReg_InitAS+0x5d4>)
    7f06:	4798      	blx	r3
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.band_item_id);
    7f08:	4b16      	ldr	r3, [pc, #88]	; (7f64 <LORAReg_InitAS+0x59c>)
    7f0a:	4a1b      	ldr	r2, [pc, #108]	; (7f78 <LORAReg_InitAS+0x5b0>)
    7f0c:	5c9a      	ldrb	r2, [r3, r2]
    7f0e:	2185      	movs	r1, #133	; 0x85
    7f10:	0089      	lsls	r1, r1, #2
    7f12:	5c5b      	ldrb	r3, [r3, r1]
    7f14:	021b      	lsls	r3, r3, #8
    7f16:	4313      	orrs	r3, r2
    7f18:	b29b      	uxth	r3, r3
    7f1a:	0a1b      	lsrs	r3, r3, #8
    7f1c:	b29a      	uxth	r2, r3
    7f1e:	231e      	movs	r3, #30
    7f20:	18fb      	adds	r3, r7, r3
    7f22:	701a      	strb	r2, [r3, #0]
    7f24:	4b0f      	ldr	r3, [pc, #60]	; (7f64 <LORAReg_InitAS+0x59c>)
    7f26:	4a14      	ldr	r2, [pc, #80]	; (7f78 <LORAReg_InitAS+0x5b0>)
    7f28:	5c9a      	ldrb	r2, [r3, r2]
    7f2a:	2185      	movs	r1, #133	; 0x85
    7f2c:	0089      	lsls	r1, r1, #2
    7f2e:	5c5b      	ldrb	r3, [r3, r1]
    7f30:	021b      	lsls	r3, r3, #8
    7f32:	4313      	orrs	r3, r2
    7f34:	b29a      	uxth	r2, r3
    7f36:	231d      	movs	r3, #29
    7f38:	18fb      	adds	r3, r7, r3
    7f3a:	701a      	strb	r2, [r3, #0]
    7f3c:	231d      	movs	r3, #29
    7f3e:	18fb      	adds	r3, r7, r3
    7f40:	781a      	ldrb	r2, [r3, #0]
    7f42:	231e      	movs	r3, #30
    7f44:	18fb      	adds	r3, r7, r3
    7f46:	781b      	ldrb	r3, [r3, #0]
    7f48:	0011      	movs	r1, r2
    7f4a:	0018      	movs	r0, r3
    7f4c:	4b14      	ldr	r3, [pc, #80]	; (7fa0 <LORAReg_InitAS+0x5d8>)
    7f4e:	4798      	blx	r3
#endif
	
#else
	result = UNSUPPORTED_BAND;
#endif
	return result;
    7f50:	231f      	movs	r3, #31
    7f52:	18fb      	adds	r3, r7, r3
    7f54:	781b      	ldrb	r3, [r3, #0]
}
    7f56:	0018      	movs	r0, r3
    7f58:	46bd      	mov	sp, r7
    7f5a:	b009      	add	sp, #36	; 0x24
    7f5c:	bd90      	pop	{r4, r7, pc}
    7f5e:	46c0      	nop			; (mov r8, r8)
    7f60:	00007fa5 	.word	0x00007fa5
    7f64:	200014a8 	.word	0x200014a8
    7f68:	0002ad34 	.word	0x0002ad34
    7f6c:	00024149 	.word	0x00024149
    7f70:	0000020f 	.word	0x0000020f
    7f74:	00000211 	.word	0x00000211
    7f78:	00000213 	.word	0x00000213
    7f7c:	0000020d 	.word	0x0000020d
    7f80:	20001284 	.word	0x20001284
    7f84:	0002ad84 	.word	0x0002ad84
    7f88:	00008101 	.word	0x00008101
    7f8c:	00014001 	.word	0x00014001
    7f90:	20000cd1 	.word	0x20000cd1
    7f94:	0000abf1 	.word	0x0000abf1
    7f98:	0000cda5 	.word	0x0000cda5
    7f9c:	0000d15d 	.word	0x0000d15d
    7fa0:	00013b45 	.word	0x00013b45

00007fa4 <InitDefault923Channels>:
/*
 * \brief This function initializes all the AS923 Channels to default values
 */
#if(AS_BAND == 1)
void InitDefault923Channels (void)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b082      	sub	sp, #8
    7fa8:	af00      	add	r7, sp, #0
	uint8_t i;

	memset (RegParams.pChParams, 0, sizeof(DefaultChannels923) );
    7faa:	4b4d      	ldr	r3, [pc, #308]	; (80e0 <InitDefault923Channels+0x13c>)
    7fac:	791a      	ldrb	r2, [r3, #4]
    7fae:	7959      	ldrb	r1, [r3, #5]
    7fb0:	0209      	lsls	r1, r1, #8
    7fb2:	430a      	orrs	r2, r1
    7fb4:	7999      	ldrb	r1, [r3, #6]
    7fb6:	0409      	lsls	r1, r1, #16
    7fb8:	430a      	orrs	r2, r1
    7fba:	79db      	ldrb	r3, [r3, #7]
    7fbc:	061b      	lsls	r3, r3, #24
    7fbe:	4313      	orrs	r3, r2
    7fc0:	2204      	movs	r2, #4
    7fc2:	2100      	movs	r1, #0
    7fc4:	0018      	movs	r0, r3
    7fc6:	4b47      	ldr	r3, [pc, #284]	; (80e4 <InitDefault923Channels+0x140>)
    7fc8:	4798      	blx	r3
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923) );
    7fca:	4b45      	ldr	r3, [pc, #276]	; (80e0 <InitDefault923Channels+0x13c>)
    7fcc:	7a1a      	ldrb	r2, [r3, #8]
    7fce:	7a59      	ldrb	r1, [r3, #9]
    7fd0:	0209      	lsls	r1, r1, #8
    7fd2:	430a      	orrs	r2, r1
    7fd4:	7a99      	ldrb	r1, [r3, #10]
    7fd6:	0409      	lsls	r1, r1, #16
    7fd8:	430a      	orrs	r2, r1
    7fda:	7adb      	ldrb	r3, [r3, #11]
    7fdc:	061b      	lsls	r3, r3, #24
    7fde:	4313      	orrs	r3, r2
    7fe0:	2218      	movs	r2, #24
    7fe2:	2100      	movs	r1, #0
    7fe4:	0018      	movs	r0, r3
    7fe6:	4b3f      	ldr	r3, [pc, #252]	; (80e4 <InitDefault923Channels+0x140>)
    7fe8:	4798      	blx	r3
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    7fea:	4b3d      	ldr	r3, [pc, #244]	; (80e0 <InitDefault923Channels+0x13c>)
    7fec:	791a      	ldrb	r2, [r3, #4]
    7fee:	7959      	ldrb	r1, [r3, #5]
    7ff0:	0209      	lsls	r1, r1, #8
    7ff2:	430a      	orrs	r2, r1
    7ff4:	7999      	ldrb	r1, [r3, #6]
    7ff6:	0409      	lsls	r1, r1, #16
    7ff8:	430a      	orrs	r2, r1
    7ffa:	79db      	ldrb	r3, [r3, #7]
    7ffc:	061b      	lsls	r3, r3, #24
    7ffe:	4313      	orrs	r3, r2
    8000:	001a      	movs	r2, r3
    8002:	4b39      	ldr	r3, [pc, #228]	; (80e8 <InitDefault923Channels+0x144>)
    8004:	0010      	movs	r0, r2
    8006:	0019      	movs	r1, r3
    8008:	2304      	movs	r3, #4
    800a:	001a      	movs	r2, r3
    800c:	4b37      	ldr	r3, [pc, #220]	; (80ec <InitDefault923Channels+0x148>)
    800e:	4798      	blx	r3
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    8010:	4b33      	ldr	r3, [pc, #204]	; (80e0 <InitDefault923Channels+0x13c>)
    8012:	7a1a      	ldrb	r2, [r3, #8]
    8014:	7a59      	ldrb	r1, [r3, #9]
    8016:	0209      	lsls	r1, r1, #8
    8018:	430a      	orrs	r2, r1
    801a:	7a99      	ldrb	r1, [r3, #10]
    801c:	0409      	lsls	r1, r1, #16
    801e:	430a      	orrs	r2, r1
    8020:	7adb      	ldrb	r3, [r3, #11]
    8022:	061b      	lsls	r3, r3, #24
    8024:	4313      	orrs	r3, r2
    8026:	001a      	movs	r2, r3
    8028:	4b31      	ldr	r3, [pc, #196]	; (80f0 <InitDefault923Channels+0x14c>)
    802a:	0010      	movs	r0, r2
    802c:	0019      	movs	r1, r3
    802e:	2318      	movs	r3, #24
    8030:	001a      	movs	r2, r3
    8032:	4b2e      	ldr	r3, [pc, #184]	; (80ec <InitDefault923Channels+0x148>)
    8034:	4798      	blx	r3
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams923) );
    8036:	4b2a      	ldr	r3, [pc, #168]	; (80e0 <InitDefault923Channels+0x13c>)
    8038:	7b1a      	ldrb	r2, [r3, #12]
    803a:	7b59      	ldrb	r1, [r3, #13]
    803c:	0209      	lsls	r1, r1, #8
    803e:	430a      	orrs	r2, r1
    8040:	7b99      	ldrb	r1, [r3, #14]
    8042:	0409      	lsls	r1, r1, #16
    8044:	430a      	orrs	r2, r1
    8046:	7bdb      	ldrb	r3, [r3, #15]
    8048:	061b      	lsls	r3, r3, #24
    804a:	4313      	orrs	r3, r2
    804c:	220c      	movs	r2, #12
    804e:	2100      	movs	r1, #0
    8050:	0018      	movs	r0, r3
    8052:	4b24      	ldr	r3, [pc, #144]	; (80e4 <InitDefault923Channels+0x140>)
    8054:	4798      	blx	r3
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    8056:	4b22      	ldr	r3, [pc, #136]	; (80e0 <InitDefault923Channels+0x13c>)
    8058:	7b1a      	ldrb	r2, [r3, #12]
    805a:	7b59      	ldrb	r1, [r3, #13]
    805c:	0209      	lsls	r1, r1, #8
    805e:	430a      	orrs	r2, r1
    8060:	7b99      	ldrb	r1, [r3, #14]
    8062:	0409      	lsls	r1, r1, #16
    8064:	430a      	orrs	r2, r1
    8066:	7bdb      	ldrb	r3, [r3, #15]
    8068:	061b      	lsls	r3, r3, #24
    806a:	4313      	orrs	r3, r2
    806c:	001a      	movs	r2, r3
    806e:	4b21      	ldr	r3, [pc, #132]	; (80f4 <InitDefault923Channels+0x150>)
    8070:	0010      	movs	r0, r2
    8072:	0019      	movs	r1, r3
    8074:	230c      	movs	r3, #12
    8076:	001a      	movs	r2, r3
    8078:	4b1c      	ldr	r3, [pc, #112]	; (80ec <InitDefault923Channels+0x148>)
    807a:	4798      	blx	r3
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle923));
    807c:	4b1e      	ldr	r3, [pc, #120]	; (80f8 <InitDefault923Channels+0x154>)
    807e:	2202      	movs	r2, #2
    8080:	2100      	movs	r1, #0
    8082:	0018      	movs	r0, r3
    8084:	4b17      	ldr	r3, [pc, #92]	; (80e4 <InitDefault923Channels+0x140>)
    8086:	4798      	blx	r3
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    8088:	491c      	ldr	r1, [pc, #112]	; (80fc <InitDefault923Channels+0x158>)
    808a:	4b1b      	ldr	r3, [pc, #108]	; (80f8 <InitDefault923Channels+0x154>)
    808c:	2202      	movs	r2, #2
    808e:	0018      	movs	r0, r3
    8090:	4b16      	ldr	r3, [pc, #88]	; (80ec <InitDefault923Channels+0x148>)
    8092:	4798      	blx	r3
	for (i = 2; i < RegParams.maxChannels; i++)
    8094:	1dfb      	adds	r3, r7, #7
    8096:	2202      	movs	r2, #2
    8098:	701a      	strb	r2, [r3, #0]
    809a:	e016      	b.n	80ca <InitDefault923Channels+0x126>
	{
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    809c:	4b10      	ldr	r3, [pc, #64]	; (80e0 <InitDefault923Channels+0x13c>)
    809e:	791a      	ldrb	r2, [r3, #4]
    80a0:	7959      	ldrb	r1, [r3, #5]
    80a2:	0209      	lsls	r1, r1, #8
    80a4:	430a      	orrs	r2, r1
    80a6:	7999      	ldrb	r1, [r3, #6]
    80a8:	0409      	lsls	r1, r1, #16
    80aa:	430a      	orrs	r2, r1
    80ac:	79db      	ldrb	r3, [r3, #7]
    80ae:	061b      	lsls	r3, r3, #24
    80b0:	4313      	orrs	r3, r2
    80b2:	001a      	movs	r2, r3
    80b4:	1dfb      	adds	r3, r7, #7
    80b6:	781b      	ldrb	r3, [r3, #0]
    80b8:	005b      	lsls	r3, r3, #1
    80ba:	18d3      	adds	r3, r2, r3
    80bc:	22ff      	movs	r2, #255	; 0xff
    80be:	705a      	strb	r2, [r3, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    80c0:	1dfb      	adds	r3, r7, #7
    80c2:	781a      	ldrb	r2, [r3, #0]
    80c4:	1dfb      	adds	r3, r7, #7
    80c6:	3201      	adds	r2, #1
    80c8:	701a      	strb	r2, [r3, #0]
    80ca:	1dfb      	adds	r3, r7, #7
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	4a04      	ldr	r2, [pc, #16]	; (80e0 <InitDefault923Channels+0x13c>)
    80d0:	212a      	movs	r1, #42	; 0x2a
    80d2:	5652      	ldrsb	r2, [r2, r1]
    80d4:	4293      	cmp	r3, r2
    80d6:	dbe1      	blt.n	809c <InitDefault923Channels+0xf8>
	}
}
    80d8:	46c0      	nop			; (mov r8, r8)
    80da:	46bd      	mov	sp, r7
    80dc:	b002      	add	sp, #8
    80de:	bd80      	pop	{r7, pc}
    80e0:	200014a8 	.word	0x200014a8
    80e4:	000241cd 	.word	0x000241cd
    80e8:	0002ad18 	.word	0x0002ad18
    80ec:	00024149 	.word	0x00024149
    80f0:	0002ad1c 	.word	0x0002ad1c
    80f4:	0002ad74 	.word	0x0002ad74
    80f8:	20001656 	.word	0x20001656
    80fc:	0002ad80 	.word	0x0002ad80

00008100 <LorawanReg_AS_Pds_Cb>:
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
    8100:	b580      	push	{r7, lr}
    8102:	af00      	add	r7, sp, #0
	; // nothing to do
}
    8104:	46c0      	nop			; (mov r8, r8)
    8106:	46bd      	mov	sp, r7
    8108:	bd80      	pop	{r7, pc}
	...

0000810c <LORAReg_InitAU>:


/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitAU(IsmBand_t ismBand)
{
    810c:	b590      	push	{r4, r7, lr}
    810e:	b08b      	sub	sp, #44	; 0x2c
    8110:	af02      	add	r7, sp, #8
    8112:	0002      	movs	r2, r0
    8114:	1dfb      	adds	r3, r7, #7
    8116:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    8118:	231f      	movs	r3, #31
    811a:	18fb      	adds	r3, r7, r3
    811c:	2208      	movs	r2, #8
    811e:	701a      	strb	r2, [r3, #0]
#if(AU_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    8120:	4bfe      	ldr	r3, [pc, #1016]	; (851c <LORAReg_InitAU+0x410>)
    8122:	2226      	movs	r2, #38	; 0x26
    8124:	2103      	movs	r1, #3
    8126:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    8128:	4bfc      	ldr	r3, [pc, #1008]	; (851c <LORAReg_InitAU+0x410>)
    812a:	222a      	movs	r2, #42	; 0x2a
    812c:	2148      	movs	r1, #72	; 0x48
    812e:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    8130:	4bfa      	ldr	r3, [pc, #1000]	; (851c <LORAReg_InitAU+0x410>)
    8132:	2227      	movs	r2, #39	; 0x27
    8134:	2107      	movs	r1, #7
    8136:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    8138:	4bf8      	ldr	r3, [pc, #992]	; (851c <LORAReg_InitAU+0x410>)
    813a:	4af9      	ldr	r2, [pc, #996]	; (8520 <LORAReg_InitAU+0x414>)
    813c:	21ff      	movs	r1, #255	; 0xff
    813e:	4011      	ands	r1, r2
    8140:	000c      	movs	r4, r1
    8142:	7919      	ldrb	r1, [r3, #4]
    8144:	2000      	movs	r0, #0
    8146:	4001      	ands	r1, r0
    8148:	1c08      	adds	r0, r1, #0
    814a:	1c21      	adds	r1, r4, #0
    814c:	4301      	orrs	r1, r0
    814e:	7119      	strb	r1, [r3, #4]
    8150:	0a11      	lsrs	r1, r2, #8
    8152:	20ff      	movs	r0, #255	; 0xff
    8154:	4001      	ands	r1, r0
    8156:	000c      	movs	r4, r1
    8158:	7959      	ldrb	r1, [r3, #5]
    815a:	2000      	movs	r0, #0
    815c:	4001      	ands	r1, r0
    815e:	1c08      	adds	r0, r1, #0
    8160:	1c21      	adds	r1, r4, #0
    8162:	4301      	orrs	r1, r0
    8164:	7159      	strb	r1, [r3, #5]
    8166:	0c11      	lsrs	r1, r2, #16
    8168:	20ff      	movs	r0, #255	; 0xff
    816a:	4001      	ands	r1, r0
    816c:	000c      	movs	r4, r1
    816e:	7999      	ldrb	r1, [r3, #6]
    8170:	2000      	movs	r0, #0
    8172:	4001      	ands	r1, r0
    8174:	1c08      	adds	r0, r1, #0
    8176:	1c21      	adds	r1, r4, #0
    8178:	4301      	orrs	r1, r0
    817a:	7199      	strb	r1, [r3, #6]
    817c:	0e10      	lsrs	r0, r2, #24
    817e:	79da      	ldrb	r2, [r3, #7]
    8180:	2100      	movs	r1, #0
    8182:	400a      	ands	r2, r1
    8184:	1c11      	adds	r1, r2, #0
    8186:	1c02      	adds	r2, r0, #0
    8188:	430a      	orrs	r2, r1
    818a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    818c:	4be3      	ldr	r3, [pc, #908]	; (851c <LORAReg_InitAU+0x410>)
    818e:	4ae5      	ldr	r2, [pc, #916]	; (8524 <LORAReg_InitAU+0x418>)
    8190:	21ff      	movs	r1, #255	; 0xff
    8192:	4011      	ands	r1, r2
    8194:	000c      	movs	r4, r1
    8196:	7819      	ldrb	r1, [r3, #0]
    8198:	2000      	movs	r0, #0
    819a:	4001      	ands	r1, r0
    819c:	1c08      	adds	r0, r1, #0
    819e:	1c21      	adds	r1, r4, #0
    81a0:	4301      	orrs	r1, r0
    81a2:	7019      	strb	r1, [r3, #0]
    81a4:	0a11      	lsrs	r1, r2, #8
    81a6:	20ff      	movs	r0, #255	; 0xff
    81a8:	4001      	ands	r1, r0
    81aa:	000c      	movs	r4, r1
    81ac:	7859      	ldrb	r1, [r3, #1]
    81ae:	2000      	movs	r0, #0
    81b0:	4001      	ands	r1, r0
    81b2:	1c08      	adds	r0, r1, #0
    81b4:	1c21      	adds	r1, r4, #0
    81b6:	4301      	orrs	r1, r0
    81b8:	7059      	strb	r1, [r3, #1]
    81ba:	0c11      	lsrs	r1, r2, #16
    81bc:	20ff      	movs	r0, #255	; 0xff
    81be:	4001      	ands	r1, r0
    81c0:	000c      	movs	r4, r1
    81c2:	7899      	ldrb	r1, [r3, #2]
    81c4:	2000      	movs	r0, #0
    81c6:	4001      	ands	r1, r0
    81c8:	1c08      	adds	r0, r1, #0
    81ca:	1c21      	adds	r1, r4, #0
    81cc:	4301      	orrs	r1, r0
    81ce:	7099      	strb	r1, [r3, #2]
    81d0:	0e10      	lsrs	r0, r2, #24
    81d2:	78da      	ldrb	r2, [r3, #3]
    81d4:	2100      	movs	r1, #0
    81d6:	400a      	ands	r2, r1
    81d8:	1c11      	adds	r1, r2, #0
    81da:	1c02      	adds	r2, r0, #0
    81dc:	430a      	orrs	r2, r1
    81de:	70da      	strb	r2, [r3, #3]
	RegParams.MinNewChIndex = 0xFF;
    81e0:	4bce      	ldr	r3, [pc, #824]	; (851c <LORAReg_InitAU+0x410>)
    81e2:	2221      	movs	r2, #33	; 0x21
    81e4:	21ff      	movs	r1, #255	; 0xff
    81e6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    81e8:	4bcc      	ldr	r3, [pc, #816]	; (851c <LORAReg_InitAU+0x410>)
    81ea:	2222      	movs	r2, #34	; 0x22
    81ec:	2108      	movs	r1, #8
    81ee:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    81f0:	4bca      	ldr	r3, [pc, #808]	; (851c <LORAReg_InitAU+0x410>)
    81f2:	2223      	movs	r2, #35	; 0x23
    81f4:	2108      	movs	r1, #8
    81f6:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    81f8:	4bc8      	ldr	r3, [pc, #800]	; (851c <LORAReg_InitAU+0x410>)
    81fa:	7f1a      	ldrb	r2, [r3, #28]
    81fc:	2100      	movs	r1, #0
    81fe:	400a      	ands	r2, r1
    8200:	1c11      	adds	r1, r2, #0
    8202:	2260      	movs	r2, #96	; 0x60
    8204:	4252      	negs	r2, r2
    8206:	430a      	orrs	r2, r1
    8208:	771a      	strb	r2, [r3, #28]
    820a:	7f5a      	ldrb	r2, [r3, #29]
    820c:	2100      	movs	r1, #0
    820e:	400a      	ands	r2, r1
    8210:	1c11      	adds	r1, r2, #0
    8212:	2270      	movs	r2, #112	; 0x70
    8214:	430a      	orrs	r2, r1
    8216:	775a      	strb	r2, [r3, #29]
    8218:	7f9a      	ldrb	r2, [r3, #30]
    821a:	2100      	movs	r1, #0
    821c:	400a      	ands	r2, r1
    821e:	1c11      	adds	r1, r2, #0
    8220:	2208      	movs	r2, #8
    8222:	430a      	orrs	r2, r1
    8224:	779a      	strb	r2, [r3, #30]
    8226:	7fda      	ldrb	r2, [r3, #31]
    8228:	2100      	movs	r1, #0
    822a:	400a      	ands	r2, r1
    822c:	1c11      	adds	r1, r2, #0
    822e:	2237      	movs	r2, #55	; 0x37
    8230:	430a      	orrs	r2, r1
    8232:	77da      	strb	r2, [r3, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    8234:	4bb9      	ldr	r3, [pc, #740]	; (851c <LORAReg_InitAU+0x410>)
    8236:	2220      	movs	r2, #32
    8238:	2138      	movs	r1, #56	; 0x38
    823a:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    823c:	4bb7      	ldr	r3, [pc, #732]	; (851c <LORAReg_InitAU+0x410>)
    823e:	2224      	movs	r2, #36	; 0x24
    8240:	2106      	movs	r1, #6
    8242:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    8244:	4bb5      	ldr	r3, [pc, #724]	; (851c <LORAReg_InitAU+0x410>)
    8246:	2225      	movs	r2, #37	; 0x25
    8248:	2100      	movs	r1, #0
    824a:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    824c:	4ab3      	ldr	r2, [pc, #716]	; (851c <LORAReg_InitAU+0x410>)
    824e:	23aa      	movs	r3, #170	; 0xaa
    8250:	005b      	lsls	r3, r3, #1
    8252:	2140      	movs	r1, #64	; 0x40
    8254:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    8256:	4ab1      	ldr	r2, [pc, #708]	; (851c <LORAReg_InitAU+0x410>)
    8258:	2356      	movs	r3, #86	; 0x56
    825a:	33ff      	adds	r3, #255	; 0xff
    825c:	2108      	movs	r1, #8
    825e:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    8260:	4aae      	ldr	r2, [pc, #696]	; (851c <LORAReg_InitAU+0x410>)
    8262:	23a8      	movs	r3, #168	; 0xa8
    8264:	005b      	lsls	r3, r3, #1
    8266:	2100      	movs	r1, #0
    8268:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    826a:	4aac      	ldr	r2, [pc, #688]	; (851c <LORAReg_InitAU+0x410>)
    826c:	2352      	movs	r3, #82	; 0x52
    826e:	33ff      	adds	r3, #255	; 0xff
    8270:	2106      	movs	r1, #6
    8272:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    8274:	4aa9      	ldr	r2, [pc, #676]	; (851c <LORAReg_InitAU+0x410>)
    8276:	23a9      	movs	r3, #169	; 0xa9
    8278:	005b      	lsls	r3, r3, #1
    827a:	2108      	movs	r1, #8
    827c:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    827e:	4aa7      	ldr	r2, [pc, #668]	; (851c <LORAReg_InitAU+0x410>)
    8280:	2354      	movs	r3, #84	; 0x54
    8282:	33ff      	adds	r3, #255	; 0xff
    8284:	210d      	movs	r1, #13
    8286:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    8288:	4aa4      	ldr	r2, [pc, #656]	; (851c <LORAReg_InitAU+0x410>)
    828a:	23ab      	movs	r3, #171	; 0xab
    828c:	005b      	lsls	r3, r3, #1
    828e:	2108      	movs	r1, #8
    8290:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    8292:	4aa2      	ldr	r2, [pc, #648]	; (851c <LORAReg_InitAU+0x410>)
    8294:	23a2      	movs	r3, #162	; 0xa2
    8296:	005b      	lsls	r3, r3, #1
    8298:	5cd1      	ldrb	r1, [r2, r3]
    829a:	2000      	movs	r0, #0
    829c:	4001      	ands	r1, r0
    829e:	54d1      	strb	r1, [r2, r3]
    82a0:	18d1      	adds	r1, r2, r3
    82a2:	7848      	ldrb	r0, [r1, #1]
    82a4:	2400      	movs	r4, #0
    82a6:	4020      	ands	r0, r4
    82a8:	1c04      	adds	r4, r0, #0
    82aa:	2028      	movs	r0, #40	; 0x28
    82ac:	4240      	negs	r0, r0
    82ae:	4320      	orrs	r0, r4
    82b0:	7048      	strb	r0, [r1, #1]
    82b2:	18d1      	adds	r1, r2, r3
    82b4:	7888      	ldrb	r0, [r1, #2]
    82b6:	2400      	movs	r4, #0
    82b8:	4020      	ands	r0, r4
    82ba:	1c04      	adds	r4, r0, #0
    82bc:	2074      	movs	r0, #116	; 0x74
    82be:	4240      	negs	r0, r0
    82c0:	4320      	orrs	r0, r4
    82c2:	7088      	strb	r0, [r1, #2]
    82c4:	18d3      	adds	r3, r2, r3
    82c6:	78da      	ldrb	r2, [r3, #3]
    82c8:	2100      	movs	r1, #0
    82ca:	400a      	ands	r2, r1
    82cc:	1c11      	adds	r1, r2, #0
    82ce:	2236      	movs	r2, #54	; 0x36
    82d0:	430a      	orrs	r2, r1
    82d2:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    82d4:	4a91      	ldr	r2, [pc, #580]	; (851c <LORAReg_InitAU+0x410>)
    82d6:	23a4      	movs	r3, #164	; 0xa4
    82d8:	005b      	lsls	r3, r3, #1
    82da:	5cd1      	ldrb	r1, [r2, r3]
    82dc:	2000      	movs	r0, #0
    82de:	4001      	ands	r1, r0
    82e0:	1c08      	adds	r0, r1, #0
    82e2:	2160      	movs	r1, #96	; 0x60
    82e4:	4301      	orrs	r1, r0
    82e6:	54d1      	strb	r1, [r2, r3]
    82e8:	18d1      	adds	r1, r2, r3
    82ea:	7848      	ldrb	r0, [r1, #1]
    82ec:	2400      	movs	r4, #0
    82ee:	4020      	ands	r0, r4
    82f0:	1c04      	adds	r4, r0, #0
    82f2:	207a      	movs	r0, #122	; 0x7a
    82f4:	4240      	negs	r0, r0
    82f6:	4320      	orrs	r0, r4
    82f8:	7048      	strb	r0, [r1, #1]
    82fa:	18d1      	adds	r1, r2, r3
    82fc:	7888      	ldrb	r0, [r1, #2]
    82fe:	2400      	movs	r4, #0
    8300:	4020      	ands	r0, r4
    8302:	1c04      	adds	r4, r0, #0
    8304:	2069      	movs	r0, #105	; 0x69
    8306:	4240      	negs	r0, r0
    8308:	4320      	orrs	r0, r4
    830a:	7088      	strb	r0, [r1, #2]
    830c:	18d3      	adds	r3, r2, r3
    830e:	78da      	ldrb	r2, [r3, #3]
    8310:	2100      	movs	r1, #0
    8312:	400a      	ands	r2, r1
    8314:	1c11      	adds	r1, r2, #0
    8316:	2236      	movs	r2, #54	; 0x36
    8318:	430a      	orrs	r2, r1
    831a:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    831c:	4a7f      	ldr	r2, [pc, #508]	; (851c <LORAReg_InitAU+0x410>)
    831e:	23a6      	movs	r3, #166	; 0xa6
    8320:	005b      	lsls	r3, r3, #1
    8322:	5cd1      	ldrb	r1, [r2, r3]
    8324:	2000      	movs	r0, #0
    8326:	4001      	ands	r1, r0
    8328:	1c08      	adds	r0, r1, #0
    832a:	2160      	movs	r1, #96	; 0x60
    832c:	4249      	negs	r1, r1
    832e:	4301      	orrs	r1, r0
    8330:	54d1      	strb	r1, [r2, r3]
    8332:	18d1      	adds	r1, r2, r3
    8334:	7848      	ldrb	r0, [r1, #1]
    8336:	2400      	movs	r4, #0
    8338:	4020      	ands	r0, r4
    833a:	1c04      	adds	r4, r0, #0
    833c:	2070      	movs	r0, #112	; 0x70
    833e:	4320      	orrs	r0, r4
    8340:	7048      	strb	r0, [r1, #1]
    8342:	18d1      	adds	r1, r2, r3
    8344:	7888      	ldrb	r0, [r1, #2]
    8346:	2400      	movs	r4, #0
    8348:	4020      	ands	r0, r4
    834a:	1c04      	adds	r4, r0, #0
    834c:	2008      	movs	r0, #8
    834e:	4320      	orrs	r0, r4
    8350:	7088      	strb	r0, [r1, #2]
    8352:	18d3      	adds	r3, r2, r3
    8354:	78da      	ldrb	r2, [r3, #3]
    8356:	2100      	movs	r1, #0
    8358:	400a      	ands	r2, r1
    835a:	1c11      	adds	r1, r2, #0
    835c:	2237      	movs	r2, #55	; 0x37
    835e:	430a      	orrs	r2, r1
    8360:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8362:	4b6e      	ldr	r3, [pc, #440]	; (851c <LORAReg_InitAU+0x410>)
    8364:	4a70      	ldr	r2, [pc, #448]	; (8528 <LORAReg_InitAU+0x41c>)
    8366:	21ff      	movs	r1, #255	; 0xff
    8368:	4011      	ands	r1, r2
    836a:	000c      	movs	r4, r1
    836c:	7d19      	ldrb	r1, [r3, #20]
    836e:	2000      	movs	r0, #0
    8370:	4001      	ands	r1, r0
    8372:	1c08      	adds	r0, r1, #0
    8374:	1c21      	adds	r1, r4, #0
    8376:	4301      	orrs	r1, r0
    8378:	7519      	strb	r1, [r3, #20]
    837a:	0a11      	lsrs	r1, r2, #8
    837c:	20ff      	movs	r0, #255	; 0xff
    837e:	4001      	ands	r1, r0
    8380:	000c      	movs	r4, r1
    8382:	7d59      	ldrb	r1, [r3, #21]
    8384:	2000      	movs	r0, #0
    8386:	4001      	ands	r1, r0
    8388:	1c08      	adds	r0, r1, #0
    838a:	1c21      	adds	r1, r4, #0
    838c:	4301      	orrs	r1, r0
    838e:	7559      	strb	r1, [r3, #21]
    8390:	0c11      	lsrs	r1, r2, #16
    8392:	20ff      	movs	r0, #255	; 0xff
    8394:	4001      	ands	r1, r0
    8396:	000c      	movs	r4, r1
    8398:	7d99      	ldrb	r1, [r3, #22]
    839a:	2000      	movs	r0, #0
    839c:	4001      	ands	r1, r0
    839e:	1c08      	adds	r0, r1, #0
    83a0:	1c21      	adds	r1, r4, #0
    83a2:	4301      	orrs	r1, r0
    83a4:	7599      	strb	r1, [r3, #22]
    83a6:	0e10      	lsrs	r0, r2, #24
    83a8:	7dda      	ldrb	r2, [r3, #23]
    83aa:	2100      	movs	r1, #0
    83ac:	400a      	ands	r2, r1
    83ae:	1c11      	adds	r1, r2, #0
    83b0:	1c02      	adds	r2, r0, #0
    83b2:	430a      	orrs	r2, r1
    83b4:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    83b6:	4b59      	ldr	r3, [pc, #356]	; (851c <LORAReg_InitAU+0x410>)
    83b8:	4a5c      	ldr	r2, [pc, #368]	; (852c <LORAReg_InitAU+0x420>)
    83ba:	21ff      	movs	r1, #255	; 0xff
    83bc:	4011      	ands	r1, r2
    83be:	000c      	movs	r4, r1
    83c0:	7e19      	ldrb	r1, [r3, #24]
    83c2:	2000      	movs	r0, #0
    83c4:	4001      	ands	r1, r0
    83c6:	1c08      	adds	r0, r1, #0
    83c8:	1c21      	adds	r1, r4, #0
    83ca:	4301      	orrs	r1, r0
    83cc:	7619      	strb	r1, [r3, #24]
    83ce:	0a11      	lsrs	r1, r2, #8
    83d0:	20ff      	movs	r0, #255	; 0xff
    83d2:	4001      	ands	r1, r0
    83d4:	000c      	movs	r4, r1
    83d6:	7e59      	ldrb	r1, [r3, #25]
    83d8:	2000      	movs	r0, #0
    83da:	4001      	ands	r1, r0
    83dc:	1c08      	adds	r0, r1, #0
    83de:	1c21      	adds	r1, r4, #0
    83e0:	4301      	orrs	r1, r0
    83e2:	7659      	strb	r1, [r3, #25]
    83e4:	0c11      	lsrs	r1, r2, #16
    83e6:	20ff      	movs	r0, #255	; 0xff
    83e8:	4001      	ands	r1, r0
    83ea:	000c      	movs	r4, r1
    83ec:	7e99      	ldrb	r1, [r3, #26]
    83ee:	2000      	movs	r0, #0
    83f0:	4001      	ands	r1, r0
    83f2:	1c08      	adds	r0, r1, #0
    83f4:	1c21      	adds	r1, r4, #0
    83f6:	4301      	orrs	r1, r0
    83f8:	7699      	strb	r1, [r3, #26]
    83fa:	0e10      	lsrs	r0, r2, #24
    83fc:	7eda      	ldrb	r2, [r3, #27]
    83fe:	2100      	movs	r1, #0
    8400:	400a      	ands	r2, r1
    8402:	1c11      	adds	r1, r2, #0
    8404:	1c02      	adds	r2, r0, #0
    8406:	430a      	orrs	r2, r1
    8408:	76da      	strb	r2, [r3, #27]
    RegParams.Rx1DrOffset = 5;
    840a:	4b44      	ldr	r3, [pc, #272]	; (851c <LORAReg_InitAU+0x410>)
    840c:	222c      	movs	r2, #44	; 0x2c
    840e:	2105      	movs	r1, #5
    8410:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 10;
    8412:	4b42      	ldr	r3, [pc, #264]	; (851c <LORAReg_InitAU+0x410>)
    8414:	222d      	movs	r2, #45	; 0x2d
    8416:	210a      	movs	r1, #10
    8418:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_AU;
    841a:	4b40      	ldr	r3, [pc, #256]	; (851c <LORAReg_InitAU+0x410>)
    841c:	222e      	movs	r2, #46	; 0x2e
    841e:	2107      	movs	r1, #7
    8420:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    8422:	4b3e      	ldr	r3, [pc, #248]	; (851c <LORAReg_InitAU+0x410>)
    8424:	2228      	movs	r2, #40	; 0x28
    8426:	211e      	movs	r1, #30
    8428:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    842a:	4a3c      	ldr	r2, [pc, #240]	; (851c <LORAReg_InitAU+0x410>)
    842c:	23ac      	movs	r3, #172	; 0xac
    842e:	005b      	lsls	r3, r3, #1
    8430:	2100      	movs	r1, #0
    8432:	54d1      	strb	r1, [r2, r3]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    8434:	4b39      	ldr	r3, [pc, #228]	; (851c <LORAReg_InitAU+0x410>)
    8436:	7e1a      	ldrb	r2, [r3, #24]
    8438:	7e59      	ldrb	r1, [r3, #25]
    843a:	0209      	lsls	r1, r1, #8
    843c:	430a      	orrs	r2, r1
    843e:	7e99      	ldrb	r1, [r3, #26]
    8440:	0409      	lsls	r1, r1, #16
    8442:	430a      	orrs	r2, r1
    8444:	7edb      	ldrb	r3, [r3, #27]
    8446:	061b      	lsls	r3, r3, #24
    8448:	4313      	orrs	r3, r2
    844a:	001a      	movs	r2, r3
    844c:	4b38      	ldr	r3, [pc, #224]	; (8530 <LORAReg_InitAU+0x424>)
    844e:	781b      	ldrb	r3, [r3, #0]
    8450:	7013      	strb	r3, [r2, #0]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    8452:	4b32      	ldr	r3, [pc, #200]	; (851c <LORAReg_InitAU+0x410>)
    8454:	7d1a      	ldrb	r2, [r3, #20]
    8456:	7d59      	ldrb	r1, [r3, #21]
    8458:	0209      	lsls	r1, r1, #8
    845a:	430a      	orrs	r2, r1
    845c:	7d99      	ldrb	r1, [r3, #22]
    845e:	0409      	lsls	r1, r1, #16
    8460:	430a      	orrs	r2, r1
    8462:	7ddb      	ldrb	r3, [r3, #23]
    8464:	061b      	lsls	r3, r3, #24
    8466:	4313      	orrs	r3, r2
    8468:	001a      	movs	r2, r3
    846a:	4b31      	ldr	r3, [pc, #196]	; (8530 <LORAReg_InitAU+0x424>)
    846c:	785b      	ldrb	r3, [r3, #1]
    846e:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8470:	4b2a      	ldr	r3, [pc, #168]	; (851c <LORAReg_InitAU+0x410>)
    8472:	7d1a      	ldrb	r2, [r3, #20]
    8474:	7d59      	ldrb	r1, [r3, #21]
    8476:	0209      	lsls	r1, r1, #8
    8478:	430a      	orrs	r2, r1
    847a:	7d99      	ldrb	r1, [r3, #22]
    847c:	0409      	lsls	r1, r1, #16
    847e:	430a      	orrs	r2, r1
    8480:	7ddb      	ldrb	r3, [r3, #23]
    8482:	061b      	lsls	r3, r3, #24
    8484:	4313      	orrs	r3, r2
    8486:	791a      	ldrb	r2, [r3, #4]
    8488:	2100      	movs	r1, #0
    848a:	400a      	ands	r2, r1
    848c:	711a      	strb	r2, [r3, #4]
    848e:	795a      	ldrb	r2, [r3, #5]
    8490:	2100      	movs	r1, #0
    8492:	400a      	ands	r2, r1
    8494:	715a      	strb	r2, [r3, #5]
    8496:	799a      	ldrb	r2, [r3, #6]
    8498:	2100      	movs	r1, #0
    849a:	400a      	ands	r2, r1
    849c:	719a      	strb	r2, [r3, #6]
    849e:	79da      	ldrb	r2, [r3, #7]
    84a0:	2100      	movs	r1, #0
    84a2:	400a      	ands	r2, r1
    84a4:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    84a6:	4b1d      	ldr	r3, [pc, #116]	; (851c <LORAReg_InitAU+0x410>)
    84a8:	2243      	movs	r2, #67	; 0x43
    84aa:	2100      	movs	r1, #0
    84ac:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    84ae:	4b1b      	ldr	r3, [pc, #108]	; (851c <LORAReg_InitAU+0x410>)
    84b0:	333f      	adds	r3, #63	; 0x3f
    84b2:	781a      	ldrb	r2, [r3, #0]
    84b4:	2100      	movs	r1, #0
    84b6:	400a      	ands	r2, r1
    84b8:	701a      	strb	r2, [r3, #0]
    84ba:	785a      	ldrb	r2, [r3, #1]
    84bc:	2100      	movs	r1, #0
    84be:	400a      	ands	r2, r1
    84c0:	705a      	strb	r2, [r3, #1]
    84c2:	789a      	ldrb	r2, [r3, #2]
    84c4:	2100      	movs	r1, #0
    84c6:	400a      	ands	r2, r1
    84c8:	709a      	strb	r2, [r3, #2]
    84ca:	78da      	ldrb	r2, [r3, #3]
    84cc:	2100      	movs	r1, #0
    84ce:	400a      	ands	r2, r1
    84d0:	70da      	strb	r2, [r3, #3]
	
	RegParams.band = ismBand;
    84d2:	4b12      	ldr	r3, [pc, #72]	; (851c <LORAReg_InitAU+0x410>)
    84d4:	1dfa      	adds	r2, r7, #7
    84d6:	212f      	movs	r1, #47	; 0x2f
    84d8:	7812      	ldrb	r2, [r2, #0]
    84da:	545a      	strb	r2, [r3, r1]
	
    InitDefault915ChannelsAU ();
    84dc:	4b15      	ldr	r3, [pc, #84]	; (8534 <LORAReg_InitAU+0x428>)
    84de:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    84e0:	4b0e      	ldr	r3, [pc, #56]	; (851c <LORAReg_InitAU+0x410>)
    84e2:	781a      	ldrb	r2, [r3, #0]
    84e4:	7859      	ldrb	r1, [r3, #1]
    84e6:	0209      	lsls	r1, r1, #8
    84e8:	430a      	orrs	r2, r1
    84ea:	7899      	ldrb	r1, [r3, #2]
    84ec:	0409      	lsls	r1, r1, #16
    84ee:	430a      	orrs	r2, r1
    84f0:	78db      	ldrb	r3, [r3, #3]
    84f2:	061b      	lsls	r3, r3, #24
    84f4:	4313      	orrs	r3, r2
    84f6:	001a      	movs	r2, r3
    84f8:	4b0f      	ldr	r3, [pc, #60]	; (8538 <LORAReg_InitAU+0x42c>)
    84fa:	0010      	movs	r0, r2
    84fc:	0019      	movs	r1, r3
    84fe:	2370      	movs	r3, #112	; 0x70
    8500:	001a      	movs	r2, r3
    8502:	4b0e      	ldr	r3, [pc, #56]	; (853c <LORAReg_InitAU+0x430>)
    8504:	4798      	blx	r3
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    8506:	4a05      	ldr	r2, [pc, #20]	; (851c <LORAReg_InitAU+0x410>)
    8508:	2358      	movs	r3, #88	; 0x58
    850a:	33ff      	adds	r3, #255	; 0xff
    850c:	2100      	movs	r1, #0
    850e:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)

	/*Fill PDS item id in RegParam Structure */
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    8510:	4a02      	ldr	r2, [pc, #8]	; (851c <LORAReg_InitAU+0x410>)
    8512:	2383      	movs	r3, #131	; 0x83
    8514:	009b      	lsls	r3, r3, #2
    8516:	2108      	movs	r1, #8
    8518:	e012      	b.n	8540 <LORAReg_InitAU+0x434>
    851a:	46c0      	nop			; (mov r8, r8)
    851c:	200014a8 	.word	0x200014a8
    8520:	2000155c 	.word	0x2000155c
    8524:	200014ec 	.word	0x200014ec
    8528:	200014dd 	.word	0x200014dd
    852c:	200014e6 	.word	0x200014e6
    8530:	200014a4 	.word	0x200014a4
    8534:	0000862d 	.word	0x0000862d
    8538:	0002ae2c 	.word	0x0002ae2c
    853c:	00024149 	.word	0x00024149
    8540:	54d1      	strb	r1, [r2, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    8542:	4b2e      	ldr	r3, [pc, #184]	; (85fc <LORAReg_InitAU+0x4f0>)
    8544:	4a2e      	ldr	r2, [pc, #184]	; (8600 <LORAReg_InitAU+0x4f4>)
    8546:	5c99      	ldrb	r1, [r3, r2]
    8548:	2000      	movs	r0, #0
    854a:	4001      	ands	r1, r0
    854c:	5499      	strb	r1, [r3, r2]
    854e:	189b      	adds	r3, r3, r2
    8550:	785a      	ldrb	r2, [r3, #1]
    8552:	2100      	movs	r1, #0
    8554:	400a      	ands	r2, r1
    8556:	1c11      	adds	r1, r2, #0
    8558:	2208      	movs	r2, #8
    855a:	430a      	orrs	r2, r1
    855c:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    855e:	4b27      	ldr	r3, [pc, #156]	; (85fc <LORAReg_InitAU+0x4f0>)
    8560:	4a28      	ldr	r2, [pc, #160]	; (8604 <LORAReg_InitAU+0x4f8>)
    8562:	5c99      	ldrb	r1, [r3, r2]
    8564:	2000      	movs	r0, #0
    8566:	4001      	ands	r1, r0
    8568:	5499      	strb	r1, [r3, r2]
    856a:	189b      	adds	r3, r3, r2
    856c:	785a      	ldrb	r2, [r3, #1]
    856e:	2100      	movs	r1, #0
    8570:	400a      	ands	r2, r1
    8572:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    8574:	4b21      	ldr	r3, [pc, #132]	; (85fc <LORAReg_InitAU+0x4f0>)
    8576:	4a24      	ldr	r2, [pc, #144]	; (8608 <LORAReg_InitAU+0x4fc>)
    8578:	5c99      	ldrb	r1, [r3, r2]
    857a:	2000      	movs	r0, #0
    857c:	4001      	ands	r1, r0
    857e:	5499      	strb	r1, [r3, r2]
    8580:	189b      	adds	r3, r3, r2
    8582:	785a      	ldrb	r2, [r3, #1]
    8584:	2100      	movs	r1, #0
    8586:	400a      	ands	r2, r1
    8588:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    858a:	4b1c      	ldr	r3, [pc, #112]	; (85fc <LORAReg_InitAU+0x4f0>)
    858c:	4a1f      	ldr	r2, [pc, #124]	; (860c <LORAReg_InitAU+0x500>)
    858e:	5c99      	ldrb	r1, [r3, r2]
    8590:	2000      	movs	r0, #0
    8592:	4001      	ands	r1, r0
    8594:	1c08      	adds	r0, r1, #0
    8596:	2101      	movs	r1, #1
    8598:	4301      	orrs	r1, r0
    859a:	5499      	strb	r1, [r3, r2]
    859c:	189b      	adds	r3, r3, r2
    859e:	785a      	ldrb	r2, [r3, #1]
    85a0:	2100      	movs	r1, #0
    85a2:	400a      	ands	r2, r1
    85a4:	1c11      	adds	r1, r2, #0
    85a6:	2208      	movs	r2, #8
    85a8:	430a      	orrs	r2, r1
    85aa:	705a      	strb	r2, [r3, #1]
	PdsFileMarks_t filemarks;
	/* File ID AU - Register */
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    85ac:	230c      	movs	r3, #12
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	4a17      	ldr	r2, [pc, #92]	; (8610 <LORAReg_InitAU+0x504>)
    85b2:	601a      	str	r2, [r3, #0]
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    85b4:	230c      	movs	r3, #12
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	2202      	movs	r2, #2
    85ba:	711a      	strb	r2, [r3, #4]
	filemarks.itemListAddr = (ItemMap_t *)&pds_reg_au_item_list;
    85bc:	230c      	movs	r3, #12
    85be:	18fb      	adds	r3, r7, r3
    85c0:	4a14      	ldr	r2, [pc, #80]	; (8614 <LORAReg_InitAU+0x508>)
    85c2:	609a      	str	r2, [r3, #8]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    85c4:	230c      	movs	r3, #12
    85c6:	18fb      	adds	r3, r7, r3
    85c8:	4a13      	ldr	r2, [pc, #76]	; (8618 <LORAReg_InitAU+0x50c>)
    85ca:	60da      	str	r2, [r3, #12]
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    85cc:	230c      	movs	r3, #12
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	466a      	mov	r2, sp
    85d2:	68d9      	ldr	r1, [r3, #12]
    85d4:	6011      	str	r1, [r2, #0]
    85d6:	6819      	ldr	r1, [r3, #0]
    85d8:	685a      	ldr	r2, [r3, #4]
    85da:	689b      	ldr	r3, [r3, #8]
    85dc:	2008      	movs	r0, #8
    85de:	4c0f      	ldr	r4, [pc, #60]	; (861c <LORAReg_InitAU+0x510>)
    85e0:	47a0      	blx	r4
#endif	
    LORAREG_InitGetAttrFnPtrsAU();
    85e2:	4b0f      	ldr	r3, [pc, #60]	; (8620 <LORAReg_InitAU+0x514>)
    85e4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    85e6:	4b0f      	ldr	r3, [pc, #60]	; (8624 <LORAReg_InitAU+0x518>)
    85e8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    85ea:	4b0f      	ldr	r3, [pc, #60]	; (8628 <LORAReg_InitAU+0x51c>)
    85ec:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
    85ee:	231f      	movs	r3, #31
    85f0:	18fb      	adds	r3, r7, r3
    85f2:	781b      	ldrb	r3, [r3, #0]
}
    85f4:	0018      	movs	r0, r3
    85f6:	46bd      	mov	sp, r7
    85f8:	b009      	add	sp, #36	; 0x24
    85fa:	bd90      	pop	{r4, r7, pc}
    85fc:	200014a8 	.word	0x200014a8
    8600:	0000020f 	.word	0x0000020f
    8604:	00000211 	.word	0x00000211
    8608:	00000213 	.word	0x00000213
    860c:	0000020d 	.word	0x0000020d
    8610:	20001288 	.word	0x20001288
    8614:	0002ae9c 	.word	0x0002ae9c
    8618:	0000868d 	.word	0x0000868d
    861c:	00014001 	.word	0x00014001
    8620:	0000ad85 	.word	0x0000ad85
    8624:	0000ce35 	.word	0x0000ce35
    8628:	0000d1f1 	.word	0x0000d1f1

0000862c <InitDefault915ChannelsAU>:
/*
 * \brief Initalized all NA 915 Supported Channels
 */
#if(AU_BAND == 1)
static void InitDefault915ChannelsAU (void)
{
    862c:	b580      	push	{r7, lr}
    862e:	af00      	add	r7, sp, #0
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915AU) );
    8630:	4b12      	ldr	r3, [pc, #72]	; (867c <InitDefault915ChannelsAU+0x50>)
    8632:	791a      	ldrb	r2, [r3, #4]
    8634:	7959      	ldrb	r1, [r3, #5]
    8636:	0209      	lsls	r1, r1, #8
    8638:	430a      	orrs	r2, r1
    863a:	7999      	ldrb	r1, [r3, #6]
    863c:	0409      	lsls	r1, r1, #16
    863e:	430a      	orrs	r2, r1
    8640:	79db      	ldrb	r3, [r3, #7]
    8642:	061b      	lsls	r3, r3, #24
    8644:	4313      	orrs	r3, r2
    8646:	2290      	movs	r2, #144	; 0x90
    8648:	2100      	movs	r1, #0
    864a:	0018      	movs	r0, r3
    864c:	4b0c      	ldr	r3, [pc, #48]	; (8680 <InitDefault915ChannelsAU+0x54>)
    864e:	4798      	blx	r3
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    8650:	4b0a      	ldr	r3, [pc, #40]	; (867c <InitDefault915ChannelsAU+0x50>)
    8652:	791a      	ldrb	r2, [r3, #4]
    8654:	7959      	ldrb	r1, [r3, #5]
    8656:	0209      	lsls	r1, r1, #8
    8658:	430a      	orrs	r2, r1
    865a:	7999      	ldrb	r1, [r3, #6]
    865c:	0409      	lsls	r1, r1, #16
    865e:	430a      	orrs	r2, r1
    8660:	79db      	ldrb	r3, [r3, #7]
    8662:	061b      	lsls	r3, r3, #24
    8664:	4313      	orrs	r3, r2
    8666:	001a      	movs	r2, r3
    8668:	4b06      	ldr	r3, [pc, #24]	; (8684 <InitDefault915ChannelsAU+0x58>)
    866a:	0010      	movs	r0, r2
    866c:	0019      	movs	r1, r3
    866e:	2390      	movs	r3, #144	; 0x90
    8670:	001a      	movs	r2, r3
    8672:	4b05      	ldr	r3, [pc, #20]	; (8688 <InitDefault915ChannelsAU+0x5c>)
    8674:	4798      	blx	r3
}
    8676:	46c0      	nop			; (mov r8, r8)
    8678:	46bd      	mov	sp, r7
    867a:	bd80      	pop	{r7, pc}
    867c:	200014a8 	.word	0x200014a8
    8680:	000241cd 	.word	0x000241cd
    8684:	0002ad9c 	.word	0x0002ad9c
    8688:	00024149 	.word	0x00024149

0000868c <LorawanReg_AU_Pds_Cb>:
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
    868c:	b580      	push	{r7, lr}
    868e:	af00      	add	r7, sp, #0
	
}
    8690:	46c0      	nop			; (mov r8, r8)
    8692:	46bd      	mov	sp, r7
    8694:	bd80      	pop	{r7, pc}
	...

00008698 <LORAReg_InitEU>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitEU(IsmBand_t ismBand)
{
    8698:	b590      	push	{r4, r7, lr}
    869a:	b08f      	sub	sp, #60	; 0x3c
    869c:	af02      	add	r7, sp, #8
    869e:	0002      	movs	r2, r0
    86a0:	1dfb      	adds	r3, r7, #7
    86a2:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t status = LORAWAN_SUCCESS;
    86a4:	232f      	movs	r3, #47	; 0x2f
    86a6:	18fb      	adds	r3, r7, r3
    86a8:	2208      	movs	r2, #8
    86aa:	701a      	strb	r2, [r3, #0]
#if (EU_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    86ac:	4bfd      	ldr	r3, [pc, #1012]	; (8aa4 <LORAReg_InitEU+0x40c>)
    86ae:	2226      	movs	r2, #38	; 0x26
    86b0:	2103      	movs	r1, #3
    86b2:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    86b4:	4bfb      	ldr	r3, [pc, #1004]	; (8aa4 <LORAReg_InitEU+0x40c>)
    86b6:	222a      	movs	r2, #42	; 0x2a
    86b8:	2110      	movs	r1, #16
    86ba:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    86bc:	4bf9      	ldr	r3, [pc, #996]	; (8aa4 <LORAReg_InitEU+0x40c>)
    86be:	2229      	movs	r2, #41	; 0x29
    86c0:	2106      	movs	r1, #6
    86c2:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    86c4:	4bf7      	ldr	r3, [pc, #988]	; (8aa4 <LORAReg_InitEU+0x40c>)
    86c6:	2227      	movs	r2, #39	; 0x27
    86c8:	2101      	movs	r1, #1
    86ca:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    86cc:	4bf5      	ldr	r3, [pc, #980]	; (8aa4 <LORAReg_InitEU+0x40c>)
    86ce:	4af6      	ldr	r2, [pc, #984]	; (8aa8 <LORAReg_InitEU+0x410>)
    86d0:	21ff      	movs	r1, #255	; 0xff
    86d2:	4011      	ands	r1, r2
    86d4:	000c      	movs	r4, r1
    86d6:	7919      	ldrb	r1, [r3, #4]
    86d8:	2000      	movs	r0, #0
    86da:	4001      	ands	r1, r0
    86dc:	1c08      	adds	r0, r1, #0
    86de:	1c21      	adds	r1, r4, #0
    86e0:	4301      	orrs	r1, r0
    86e2:	7119      	strb	r1, [r3, #4]
    86e4:	0a11      	lsrs	r1, r2, #8
    86e6:	20ff      	movs	r0, #255	; 0xff
    86e8:	4001      	ands	r1, r0
    86ea:	000c      	movs	r4, r1
    86ec:	7959      	ldrb	r1, [r3, #5]
    86ee:	2000      	movs	r0, #0
    86f0:	4001      	ands	r1, r0
    86f2:	1c08      	adds	r0, r1, #0
    86f4:	1c21      	adds	r1, r4, #0
    86f6:	4301      	orrs	r1, r0
    86f8:	7159      	strb	r1, [r3, #5]
    86fa:	0c11      	lsrs	r1, r2, #16
    86fc:	20ff      	movs	r0, #255	; 0xff
    86fe:	4001      	ands	r1, r0
    8700:	000c      	movs	r4, r1
    8702:	7999      	ldrb	r1, [r3, #6]
    8704:	2000      	movs	r0, #0
    8706:	4001      	ands	r1, r0
    8708:	1c08      	adds	r0, r1, #0
    870a:	1c21      	adds	r1, r4, #0
    870c:	4301      	orrs	r1, r0
    870e:	7199      	strb	r1, [r3, #6]
    8710:	0e10      	lsrs	r0, r2, #24
    8712:	79da      	ldrb	r2, [r3, #7]
    8714:	2100      	movs	r1, #0
    8716:	400a      	ands	r2, r1
    8718:	1c11      	adds	r1, r2, #0
    871a:	1c02      	adds	r2, r0, #0
    871c:	430a      	orrs	r2, r1
    871e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8720:	4be0      	ldr	r3, [pc, #896]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8722:	4ae2      	ldr	r2, [pc, #904]	; (8aac <LORAReg_InitEU+0x414>)
    8724:	21ff      	movs	r1, #255	; 0xff
    8726:	4011      	ands	r1, r2
    8728:	000c      	movs	r4, r1
    872a:	7819      	ldrb	r1, [r3, #0]
    872c:	2000      	movs	r0, #0
    872e:	4001      	ands	r1, r0
    8730:	1c08      	adds	r0, r1, #0
    8732:	1c21      	adds	r1, r4, #0
    8734:	4301      	orrs	r1, r0
    8736:	7019      	strb	r1, [r3, #0]
    8738:	0a11      	lsrs	r1, r2, #8
    873a:	20ff      	movs	r0, #255	; 0xff
    873c:	4001      	ands	r1, r0
    873e:	000c      	movs	r4, r1
    8740:	7859      	ldrb	r1, [r3, #1]
    8742:	2000      	movs	r0, #0
    8744:	4001      	ands	r1, r0
    8746:	1c08      	adds	r0, r1, #0
    8748:	1c21      	adds	r1, r4, #0
    874a:	4301      	orrs	r1, r0
    874c:	7059      	strb	r1, [r3, #1]
    874e:	0c11      	lsrs	r1, r2, #16
    8750:	20ff      	movs	r0, #255	; 0xff
    8752:	4001      	ands	r1, r0
    8754:	000c      	movs	r4, r1
    8756:	7899      	ldrb	r1, [r3, #2]
    8758:	2000      	movs	r0, #0
    875a:	4001      	ands	r1, r0
    875c:	1c08      	adds	r0, r1, #0
    875e:	1c21      	adds	r1, r4, #0
    8760:	4301      	orrs	r1, r0
    8762:	7099      	strb	r1, [r3, #2]
    8764:	0e10      	lsrs	r0, r2, #24
    8766:	78da      	ldrb	r2, [r3, #3]
    8768:	2100      	movs	r1, #0
    876a:	400a      	ands	r2, r1
    876c:	1c11      	adds	r1, r2, #0
    876e:	1c02      	adds	r2, r0, #0
    8770:	430a      	orrs	r2, r1
    8772:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8774:	4bcb      	ldr	r3, [pc, #812]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8776:	4ace      	ldr	r2, [pc, #824]	; (8ab0 <LORAReg_InitEU+0x418>)
    8778:	21ff      	movs	r1, #255	; 0xff
    877a:	4011      	ands	r1, r2
    877c:	000c      	movs	r4, r1
    877e:	7b19      	ldrb	r1, [r3, #12]
    8780:	2000      	movs	r0, #0
    8782:	4001      	ands	r1, r0
    8784:	1c08      	adds	r0, r1, #0
    8786:	1c21      	adds	r1, r4, #0
    8788:	4301      	orrs	r1, r0
    878a:	7319      	strb	r1, [r3, #12]
    878c:	0a11      	lsrs	r1, r2, #8
    878e:	20ff      	movs	r0, #255	; 0xff
    8790:	4001      	ands	r1, r0
    8792:	000c      	movs	r4, r1
    8794:	7b59      	ldrb	r1, [r3, #13]
    8796:	2000      	movs	r0, #0
    8798:	4001      	ands	r1, r0
    879a:	1c08      	adds	r0, r1, #0
    879c:	1c21      	adds	r1, r4, #0
    879e:	4301      	orrs	r1, r0
    87a0:	7359      	strb	r1, [r3, #13]
    87a2:	0c11      	lsrs	r1, r2, #16
    87a4:	20ff      	movs	r0, #255	; 0xff
    87a6:	4001      	ands	r1, r0
    87a8:	000c      	movs	r4, r1
    87aa:	7b99      	ldrb	r1, [r3, #14]
    87ac:	2000      	movs	r0, #0
    87ae:	4001      	ands	r1, r0
    87b0:	1c08      	adds	r0, r1, #0
    87b2:	1c21      	adds	r1, r4, #0
    87b4:	4301      	orrs	r1, r0
    87b6:	7399      	strb	r1, [r3, #14]
    87b8:	0e10      	lsrs	r0, r2, #24
    87ba:	7bda      	ldrb	r2, [r3, #15]
    87bc:	2100      	movs	r1, #0
    87be:	400a      	ands	r2, r1
    87c0:	1c11      	adds	r1, r2, #0
    87c2:	1c02      	adds	r2, r0, #0
    87c4:	430a      	orrs	r2, r1
    87c6:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    87c8:	4bb6      	ldr	r3, [pc, #728]	; (8aa4 <LORAReg_InitEU+0x40c>)
    87ca:	4aba      	ldr	r2, [pc, #744]	; (8ab4 <LORAReg_InitEU+0x41c>)
    87cc:	21ff      	movs	r1, #255	; 0xff
    87ce:	4011      	ands	r1, r2
    87d0:	000c      	movs	r4, r1
    87d2:	7a19      	ldrb	r1, [r3, #8]
    87d4:	2000      	movs	r0, #0
    87d6:	4001      	ands	r1, r0
    87d8:	1c08      	adds	r0, r1, #0
    87da:	1c21      	adds	r1, r4, #0
    87dc:	4301      	orrs	r1, r0
    87de:	7219      	strb	r1, [r3, #8]
    87e0:	0a11      	lsrs	r1, r2, #8
    87e2:	20ff      	movs	r0, #255	; 0xff
    87e4:	4001      	ands	r1, r0
    87e6:	000c      	movs	r4, r1
    87e8:	7a59      	ldrb	r1, [r3, #9]
    87ea:	2000      	movs	r0, #0
    87ec:	4001      	ands	r1, r0
    87ee:	1c08      	adds	r0, r1, #0
    87f0:	1c21      	adds	r1, r4, #0
    87f2:	4301      	orrs	r1, r0
    87f4:	7259      	strb	r1, [r3, #9]
    87f6:	0c11      	lsrs	r1, r2, #16
    87f8:	20ff      	movs	r0, #255	; 0xff
    87fa:	4001      	ands	r1, r0
    87fc:	000c      	movs	r4, r1
    87fe:	7a99      	ldrb	r1, [r3, #10]
    8800:	2000      	movs	r0, #0
    8802:	4001      	ands	r1, r0
    8804:	1c08      	adds	r0, r1, #0
    8806:	1c21      	adds	r1, r4, #0
    8808:	4301      	orrs	r1, r0
    880a:	7299      	strb	r1, [r3, #10]
    880c:	0e10      	lsrs	r0, r2, #24
    880e:	7ada      	ldrb	r2, [r3, #11]
    8810:	2100      	movs	r1, #0
    8812:	400a      	ands	r2, r1
    8814:	1c11      	adds	r1, r2, #0
    8816:	1c02      	adds	r2, r0, #0
    8818:	430a      	orrs	r2, r1
    881a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    881c:	4ba1      	ldr	r3, [pc, #644]	; (8aa4 <LORAReg_InitEU+0x40c>)
    881e:	4aa6      	ldr	r2, [pc, #664]	; (8ab8 <LORAReg_InitEU+0x420>)
    8820:	21ff      	movs	r1, #255	; 0xff
    8822:	4011      	ands	r1, r2
    8824:	000c      	movs	r4, r1
    8826:	7c19      	ldrb	r1, [r3, #16]
    8828:	2000      	movs	r0, #0
    882a:	4001      	ands	r1, r0
    882c:	1c08      	adds	r0, r1, #0
    882e:	1c21      	adds	r1, r4, #0
    8830:	4301      	orrs	r1, r0
    8832:	7419      	strb	r1, [r3, #16]
    8834:	0a11      	lsrs	r1, r2, #8
    8836:	20ff      	movs	r0, #255	; 0xff
    8838:	4001      	ands	r1, r0
    883a:	000c      	movs	r4, r1
    883c:	7c59      	ldrb	r1, [r3, #17]
    883e:	2000      	movs	r0, #0
    8840:	4001      	ands	r1, r0
    8842:	1c08      	adds	r0, r1, #0
    8844:	1c21      	adds	r1, r4, #0
    8846:	4301      	orrs	r1, r0
    8848:	7459      	strb	r1, [r3, #17]
    884a:	0c11      	lsrs	r1, r2, #16
    884c:	20ff      	movs	r0, #255	; 0xff
    884e:	4001      	ands	r1, r0
    8850:	000c      	movs	r4, r1
    8852:	7c99      	ldrb	r1, [r3, #18]
    8854:	2000      	movs	r0, #0
    8856:	4001      	ands	r1, r0
    8858:	1c08      	adds	r0, r1, #0
    885a:	1c21      	adds	r1, r4, #0
    885c:	4301      	orrs	r1, r0
    885e:	7499      	strb	r1, [r3, #18]
    8860:	0e10      	lsrs	r0, r2, #24
    8862:	7cda      	ldrb	r2, [r3, #19]
    8864:	2100      	movs	r1, #0
    8866:	400a      	ands	r2, r1
    8868:	1c11      	adds	r1, r2, #0
    886a:	1c02      	adds	r2, r0, #0
    886c:	430a      	orrs	r2, r1
    886e:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8870:	4b8c      	ldr	r3, [pc, #560]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8872:	4a92      	ldr	r2, [pc, #584]	; (8abc <LORAReg_InitEU+0x424>)
    8874:	21ff      	movs	r1, #255	; 0xff
    8876:	4011      	ands	r1, r2
    8878:	000c      	movs	r4, r1
    887a:	7d19      	ldrb	r1, [r3, #20]
    887c:	2000      	movs	r0, #0
    887e:	4001      	ands	r1, r0
    8880:	1c08      	adds	r0, r1, #0
    8882:	1c21      	adds	r1, r4, #0
    8884:	4301      	orrs	r1, r0
    8886:	7519      	strb	r1, [r3, #20]
    8888:	0a11      	lsrs	r1, r2, #8
    888a:	20ff      	movs	r0, #255	; 0xff
    888c:	4001      	ands	r1, r0
    888e:	000c      	movs	r4, r1
    8890:	7d59      	ldrb	r1, [r3, #21]
    8892:	2000      	movs	r0, #0
    8894:	4001      	ands	r1, r0
    8896:	1c08      	adds	r0, r1, #0
    8898:	1c21      	adds	r1, r4, #0
    889a:	4301      	orrs	r1, r0
    889c:	7559      	strb	r1, [r3, #21]
    889e:	0c11      	lsrs	r1, r2, #16
    88a0:	20ff      	movs	r0, #255	; 0xff
    88a2:	4001      	ands	r1, r0
    88a4:	000c      	movs	r4, r1
    88a6:	7d99      	ldrb	r1, [r3, #22]
    88a8:	2000      	movs	r0, #0
    88aa:	4001      	ands	r1, r0
    88ac:	1c08      	adds	r0, r1, #0
    88ae:	1c21      	adds	r1, r4, #0
    88b0:	4301      	orrs	r1, r0
    88b2:	7599      	strb	r1, [r3, #22]
    88b4:	0e10      	lsrs	r0, r2, #24
    88b6:	7dda      	ldrb	r2, [r3, #23]
    88b8:	2100      	movs	r1, #0
    88ba:	400a      	ands	r2, r1
    88bc:	1c11      	adds	r1, r2, #0
    88be:	1c02      	adds	r2, r0, #0
    88c0:	430a      	orrs	r2, r1
    88c2:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    88c4:	4b77      	ldr	r3, [pc, #476]	; (8aa4 <LORAReg_InitEU+0x40c>)
    88c6:	4a7e      	ldr	r2, [pc, #504]	; (8ac0 <LORAReg_InitEU+0x428>)
    88c8:	21ff      	movs	r1, #255	; 0xff
    88ca:	4011      	ands	r1, r2
    88cc:	000c      	movs	r4, r1
    88ce:	7e19      	ldrb	r1, [r3, #24]
    88d0:	2000      	movs	r0, #0
    88d2:	4001      	ands	r1, r0
    88d4:	1c08      	adds	r0, r1, #0
    88d6:	1c21      	adds	r1, r4, #0
    88d8:	4301      	orrs	r1, r0
    88da:	7619      	strb	r1, [r3, #24]
    88dc:	0a11      	lsrs	r1, r2, #8
    88de:	20ff      	movs	r0, #255	; 0xff
    88e0:	4001      	ands	r1, r0
    88e2:	000c      	movs	r4, r1
    88e4:	7e59      	ldrb	r1, [r3, #25]
    88e6:	2000      	movs	r0, #0
    88e8:	4001      	ands	r1, r0
    88ea:	1c08      	adds	r0, r1, #0
    88ec:	1c21      	adds	r1, r4, #0
    88ee:	4301      	orrs	r1, r0
    88f0:	7659      	strb	r1, [r3, #25]
    88f2:	0c11      	lsrs	r1, r2, #16
    88f4:	20ff      	movs	r0, #255	; 0xff
    88f6:	4001      	ands	r1, r0
    88f8:	000c      	movs	r4, r1
    88fa:	7e99      	ldrb	r1, [r3, #26]
    88fc:	2000      	movs	r0, #0
    88fe:	4001      	ands	r1, r0
    8900:	1c08      	adds	r0, r1, #0
    8902:	1c21      	adds	r1, r4, #0
    8904:	4301      	orrs	r1, r0
    8906:	7699      	strb	r1, [r3, #26]
    8908:	0e10      	lsrs	r0, r2, #24
    890a:	7eda      	ldrb	r2, [r3, #27]
    890c:	2100      	movs	r1, #0
    890e:	400a      	ands	r2, r1
    8910:	1c11      	adds	r1, r2, #0
    8912:	1c02      	adds	r2, r0, #0
    8914:	430a      	orrs	r2, r1
    8916:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    8918:	4b62      	ldr	r3, [pc, #392]	; (8aa4 <LORAReg_InitEU+0x40c>)
    891a:	2221      	movs	r2, #33	; 0x21
    891c:	2103      	movs	r1, #3
    891e:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    8920:	4b60      	ldr	r3, [pc, #384]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8922:	2220      	movs	r2, #32
    8924:	2122      	movs	r1, #34	; 0x22
    8926:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    8928:	4b5e      	ldr	r3, [pc, #376]	; (8aa4 <LORAReg_InitEU+0x40c>)
    892a:	2224      	movs	r2, #36	; 0x24
    892c:	2107      	movs	r1, #7
    892e:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    8930:	4b5c      	ldr	r3, [pc, #368]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8932:	2225      	movs	r2, #37	; 0x25
    8934:	2100      	movs	r1, #0
    8936:	5499      	strb	r1, [r3, r2]
	RegParams.Rx1DrOffset = 5;
    8938:	4b5a      	ldr	r3, [pc, #360]	; (8aa4 <LORAReg_InitEU+0x40c>)
    893a:	222c      	movs	r2, #44	; 0x2c
    893c:	2105      	movs	r1, #5
    893e:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    8940:	4b58      	ldr	r3, [pc, #352]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8942:	222d      	movs	r2, #45	; 0x2d
    8944:	2107      	movs	r1, #7
    8946:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_EU;
    8948:	4b56      	ldr	r3, [pc, #344]	; (8aa4 <LORAReg_InitEU+0x40c>)
    894a:	222e      	movs	r2, #46	; 0x2e
    894c:	2101      	movs	r1, #1
    894e:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8950:	4a54      	ldr	r2, [pc, #336]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8952:	23c2      	movs	r3, #194	; 0xc2
    8954:	33ff      	adds	r3, #255	; 0xff
    8956:	2103      	movs	r1, #3
    8958:	54d1      	strb	r1, [r2, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    895a:	4b52      	ldr	r3, [pc, #328]	; (8aa4 <LORAReg_InitEU+0x40c>)
    895c:	2228      	movs	r2, #40	; 0x28
    895e:	2110      	movs	r1, #16
    8960:	5499      	strb	r1, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8962:	4b50      	ldr	r3, [pc, #320]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8964:	7c1a      	ldrb	r2, [r3, #16]
    8966:	7c59      	ldrb	r1, [r3, #17]
    8968:	0209      	lsls	r1, r1, #8
    896a:	430a      	orrs	r2, r1
    896c:	7c99      	ldrb	r1, [r3, #18]
    896e:	0409      	lsls	r1, r1, #16
    8970:	430a      	orrs	r2, r1
    8972:	7cdb      	ldrb	r3, [r3, #19]
    8974:	061b      	lsls	r3, r3, #24
    8976:	4313      	orrs	r3, r2
    8978:	001a      	movs	r2, r3
    897a:	4b52      	ldr	r3, [pc, #328]	; (8ac4 <LORAReg_InitEU+0x42c>)
    897c:	781b      	ldrb	r3, [r3, #0]
    897e:	7113      	strb	r3, [r2, #4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8980:	4b48      	ldr	r3, [pc, #288]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8982:	7e1a      	ldrb	r2, [r3, #24]
    8984:	7e59      	ldrb	r1, [r3, #25]
    8986:	0209      	lsls	r1, r1, #8
    8988:	430a      	orrs	r2, r1
    898a:	7e99      	ldrb	r1, [r3, #26]
    898c:	0409      	lsls	r1, r1, #16
    898e:	430a      	orrs	r2, r1
    8990:	7edb      	ldrb	r3, [r3, #27]
    8992:	061b      	lsls	r3, r3, #24
    8994:	4313      	orrs	r3, r2
    8996:	001a      	movs	r2, r3
    8998:	4b4a      	ldr	r3, [pc, #296]	; (8ac4 <LORAReg_InitEU+0x42c>)
    899a:	785b      	ldrb	r3, [r3, #1]
    899c:	7013      	strb	r3, [r2, #0]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    899e:	4b41      	ldr	r3, [pc, #260]	; (8aa4 <LORAReg_InitEU+0x40c>)
    89a0:	7d1a      	ldrb	r2, [r3, #20]
    89a2:	7d59      	ldrb	r1, [r3, #21]
    89a4:	0209      	lsls	r1, r1, #8
    89a6:	430a      	orrs	r2, r1
    89a8:	7d99      	ldrb	r1, [r3, #22]
    89aa:	0409      	lsls	r1, r1, #16
    89ac:	430a      	orrs	r2, r1
    89ae:	7ddb      	ldrb	r3, [r3, #23]
    89b0:	061b      	lsls	r3, r3, #24
    89b2:	4313      	orrs	r3, r2
    89b4:	001a      	movs	r2, r3
    89b6:	4b43      	ldr	r3, [pc, #268]	; (8ac4 <LORAReg_InitEU+0x42c>)
    89b8:	789b      	ldrb	r3, [r3, #2]
    89ba:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    89bc:	4b39      	ldr	r3, [pc, #228]	; (8aa4 <LORAReg_InitEU+0x40c>)
    89be:	7d1a      	ldrb	r2, [r3, #20]
    89c0:	7d59      	ldrb	r1, [r3, #21]
    89c2:	0209      	lsls	r1, r1, #8
    89c4:	430a      	orrs	r2, r1
    89c6:	7d99      	ldrb	r1, [r3, #22]
    89c8:	0409      	lsls	r1, r1, #16
    89ca:	430a      	orrs	r2, r1
    89cc:	7ddb      	ldrb	r3, [r3, #23]
    89ce:	061b      	lsls	r3, r3, #24
    89d0:	4313      	orrs	r3, r2
    89d2:	791a      	ldrb	r2, [r3, #4]
    89d4:	2100      	movs	r1, #0
    89d6:	400a      	ands	r2, r1
    89d8:	711a      	strb	r2, [r3, #4]
    89da:	795a      	ldrb	r2, [r3, #5]
    89dc:	2100      	movs	r1, #0
    89de:	400a      	ands	r2, r1
    89e0:	715a      	strb	r2, [r3, #5]
    89e2:	799a      	ldrb	r2, [r3, #6]
    89e4:	2100      	movs	r1, #0
    89e6:	400a      	ands	r2, r1
    89e8:	719a      	strb	r2, [r3, #6]
    89ea:	79da      	ldrb	r2, [r3, #7]
    89ec:	2100      	movs	r1, #0
    89ee:	400a      	ands	r2, r1
    89f0:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    89f2:	4b2c      	ldr	r3, [pc, #176]	; (8aa4 <LORAReg_InitEU+0x40c>)
    89f4:	2243      	movs	r2, #67	; 0x43
    89f6:	2100      	movs	r1, #0
    89f8:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    89fa:	4b2a      	ldr	r3, [pc, #168]	; (8aa4 <LORAReg_InitEU+0x40c>)
    89fc:	333f      	adds	r3, #63	; 0x3f
    89fe:	781a      	ldrb	r2, [r3, #0]
    8a00:	2100      	movs	r1, #0
    8a02:	400a      	ands	r2, r1
    8a04:	701a      	strb	r2, [r3, #0]
    8a06:	785a      	ldrb	r2, [r3, #1]
    8a08:	2100      	movs	r1, #0
    8a0a:	400a      	ands	r2, r1
    8a0c:	705a      	strb	r2, [r3, #1]
    8a0e:	789a      	ldrb	r2, [r3, #2]
    8a10:	2100      	movs	r1, #0
    8a12:	400a      	ands	r2, r1
    8a14:	709a      	strb	r2, [r3, #2]
    8a16:	78da      	ldrb	r2, [r3, #3]
    8a18:	2100      	movs	r1, #0
    8a1a:	400a      	ands	r2, r1
    8a1c:	70da      	strb	r2, [r3, #3]
	
	RegParams.band = ismBand;
    8a1e:	4b21      	ldr	r3, [pc, #132]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a20:	1dfa      	adds	r2, r7, #7
    8a22:	212f      	movs	r1, #47	; 0x2f
    8a24:	7812      	ldrb	r2, [r2, #0]
    8a26:	545a      	strb	r2, [r3, r1]
	
	if(ismBand == ISM_EU868)
    8a28:	1dfb      	adds	r3, r7, #7
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d000      	beq.n	8a32 <LORAReg_InitEU+0x39a>
    8a30:	e0ad      	b.n	8b8e <LORAReg_InitEU+0x4f6>
	{
		InitDefault868Channels ();
    8a32:	4b25      	ldr	r3, [pc, #148]	; (8ac8 <LORAReg_InitEU+0x430>)
    8a34:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    8a36:	4b1b      	ldr	r3, [pc, #108]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a38:	2222      	movs	r2, #34	; 0x22
    8a3a:	2100      	movs	r1, #0
    8a3c:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    8a3e:	4b19      	ldr	r3, [pc, #100]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a40:	2223      	movs	r2, #35	; 0x23
    8a42:	2100      	movs	r1, #0
    8a44:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    8a46:	4b17      	ldr	r3, [pc, #92]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a48:	7f1a      	ldrb	r2, [r3, #28]
    8a4a:	2100      	movs	r1, #0
    8a4c:	400a      	ands	r2, r1
    8a4e:	1c11      	adds	r1, r2, #0
    8a50:	2208      	movs	r2, #8
    8a52:	430a      	orrs	r2, r1
    8a54:	771a      	strb	r2, [r3, #28]
    8a56:	7f5a      	ldrb	r2, [r3, #29]
    8a58:	2100      	movs	r1, #0
    8a5a:	400a      	ands	r2, r1
    8a5c:	1c11      	adds	r1, r2, #0
    8a5e:	221a      	movs	r2, #26
    8a60:	4252      	negs	r2, r2
    8a62:	430a      	orrs	r2, r1
    8a64:	775a      	strb	r2, [r3, #29]
    8a66:	7f9a      	ldrb	r2, [r3, #30]
    8a68:	2100      	movs	r1, #0
    8a6a:	400a      	ands	r2, r1
    8a6c:	1c11      	adds	r1, r2, #0
    8a6e:	222d      	movs	r2, #45	; 0x2d
    8a70:	4252      	negs	r2, r2
    8a72:	430a      	orrs	r2, r1
    8a74:	779a      	strb	r2, [r3, #30]
    8a76:	7fda      	ldrb	r2, [r3, #31]
    8a78:	2100      	movs	r1, #0
    8a7a:	400a      	ands	r2, r1
    8a7c:	1c11      	adds	r1, r2, #0
    8a7e:	2233      	movs	r2, #51	; 0x33
    8a80:	430a      	orrs	r2, r1
    8a82:	77da      	strb	r2, [r3, #31]

#if (ENABLE_PDS == 1)

		/*Fill PDS item id in RegParam Structure */
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    8a84:	4a07      	ldr	r2, [pc, #28]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a86:	2383      	movs	r3, #131	; 0x83
    8a88:	009b      	lsls	r3, r3, #2
    8a8a:	2103      	movs	r1, #3
    8a8c:	54d1      	strb	r1, [r2, r3]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    8a8e:	4b05      	ldr	r3, [pc, #20]	; (8aa4 <LORAReg_InitEU+0x40c>)
    8a90:	4a0e      	ldr	r2, [pc, #56]	; (8acc <LORAReg_InitEU+0x434>)
    8a92:	5c99      	ldrb	r1, [r3, r2]
    8a94:	2000      	movs	r0, #0
    8a96:	4001      	ands	r1, r0
    8a98:	5499      	strb	r1, [r3, r2]
    8a9a:	189b      	adds	r3, r3, r2
    8a9c:	785a      	ldrb	r2, [r3, #1]
    8a9e:	2100      	movs	r1, #0
    8aa0:	400a      	ands	r2, r1
    8aa2:	e015      	b.n	8ad0 <LORAReg_InitEU+0x438>
    8aa4:	200014a8 	.word	0x200014a8
    8aa8:	2000152c 	.word	0x2000152c
    8aac:	200014ec 	.word	0x200014ec
    8ab0:	2000166c 	.word	0x2000166c
    8ab4:	2000154c 	.word	0x2000154c
    8ab8:	2000160c 	.word	0x2000160c
    8abc:	200014dd 	.word	0x200014dd
    8ac0:	200014e6 	.word	0x200014e6
    8ac4:	200014a4 	.word	0x200014a4
    8ac8:	00008c71 	.word	0x00008c71
    8acc:	0000020f 	.word	0x0000020f
    8ad0:	1c11      	adds	r1, r2, #0
    8ad2:	2203      	movs	r2, #3
    8ad4:	430a      	orrs	r2, r1
    8ad6:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    8ad8:	4b55      	ldr	r3, [pc, #340]	; (8c30 <LORAReg_InitEU+0x598>)
    8ada:	4a56      	ldr	r2, [pc, #344]	; (8c34 <LORAReg_InitEU+0x59c>)
    8adc:	5c99      	ldrb	r1, [r3, r2]
    8ade:	2000      	movs	r0, #0
    8ae0:	4001      	ands	r1, r0
    8ae2:	5499      	strb	r1, [r3, r2]
    8ae4:	189b      	adds	r3, r3, r2
    8ae6:	785a      	ldrb	r2, [r3, #1]
    8ae8:	2100      	movs	r1, #0
    8aea:	400a      	ands	r2, r1
    8aec:	1c11      	adds	r1, r2, #0
    8aee:	220b      	movs	r2, #11
    8af0:	430a      	orrs	r2, r1
    8af2:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    8af4:	4b4e      	ldr	r3, [pc, #312]	; (8c30 <LORAReg_InitEU+0x598>)
    8af6:	4a50      	ldr	r2, [pc, #320]	; (8c38 <LORAReg_InitEU+0x5a0>)
    8af8:	5c99      	ldrb	r1, [r3, r2]
    8afa:	2000      	movs	r0, #0
    8afc:	4001      	ands	r1, r0
    8afe:	5499      	strb	r1, [r3, r2]
    8b00:	189b      	adds	r3, r3, r2
    8b02:	785a      	ldrb	r2, [r3, #1]
    8b04:	2100      	movs	r1, #0
    8b06:	400a      	ands	r2, r1
    8b08:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8b0a:	4b49      	ldr	r3, [pc, #292]	; (8c30 <LORAReg_InitEU+0x598>)
    8b0c:	4a4b      	ldr	r2, [pc, #300]	; (8c3c <LORAReg_InitEU+0x5a4>)
    8b0e:	5c99      	ldrb	r1, [r3, r2]
    8b10:	2000      	movs	r0, #0
    8b12:	4001      	ands	r1, r0
    8b14:	5499      	strb	r1, [r3, r2]
    8b16:	189b      	adds	r3, r3, r2
    8b18:	785a      	ldrb	r2, [r3, #1]
    8b1a:	2100      	movs	r1, #0
    8b1c:	400a      	ands	r2, r1
    8b1e:	705a      	strb	r2, [r3, #1]
		
		PdsFileMarks_t filemarks_fid1;
		/* File ID EU868 - Register */
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    8b20:	231c      	movs	r3, #28
    8b22:	18fb      	adds	r3, r7, r3
    8b24:	4a46      	ldr	r2, [pc, #280]	; (8c40 <LORAReg_InitEU+0x5a8>)
    8b26:	601a      	str	r2, [r3, #0]
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    8b28:	231c      	movs	r3, #28
    8b2a:	18fb      	adds	r3, r7, r3
    8b2c:	2201      	movs	r2, #1
    8b2e:	711a      	strb	r2, [r3, #4]
		filemarks_fid1.itemListAddr = (ItemMap_t *)&pds_reg_eu868_fid1_item_list;
    8b30:	231c      	movs	r3, #28
    8b32:	18fb      	adds	r3, r7, r3
    8b34:	4a43      	ldr	r2, [pc, #268]	; (8c44 <LORAReg_InitEU+0x5ac>)
    8b36:	609a      	str	r2, [r3, #8]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    8b38:	231c      	movs	r3, #28
    8b3a:	18fb      	adds	r3, r7, r3
    8b3c:	4a42      	ldr	r2, [pc, #264]	; (8c48 <LORAReg_InitEU+0x5b0>)
    8b3e:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    8b40:	231c      	movs	r3, #28
    8b42:	18fb      	adds	r3, r7, r3
    8b44:	466a      	mov	r2, sp
    8b46:	68d9      	ldr	r1, [r3, #12]
    8b48:	6011      	str	r1, [r2, #0]
    8b4a:	6819      	ldr	r1, [r3, #0]
    8b4c:	685a      	ldr	r2, [r3, #4]
    8b4e:	689b      	ldr	r3, [r3, #8]
    8b50:	2003      	movs	r0, #3
    8b52:	4c3e      	ldr	r4, [pc, #248]	; (8c4c <LORAReg_InitEU+0x5b4>)
    8b54:	47a0      	blx	r4
		
		PdsFileMarks_t filemarks_fid2;
		/* File ID EU868 - Register */
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    8b56:	230c      	movs	r3, #12
    8b58:	18fb      	adds	r3, r7, r3
    8b5a:	4a3d      	ldr	r2, [pc, #244]	; (8c50 <LORAReg_InitEU+0x5b8>)
    8b5c:	601a      	str	r2, [r3, #0]
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    8b5e:	230c      	movs	r3, #12
    8b60:	18fb      	adds	r3, r7, r3
    8b62:	2201      	movs	r2, #1
    8b64:	711a      	strb	r2, [r3, #4]
		filemarks_fid2.itemListAddr = (ItemMap_t *)&pds_reg_eu868_fid2_item_list;
    8b66:	230c      	movs	r3, #12
    8b68:	18fb      	adds	r3, r7, r3
    8b6a:	4a3a      	ldr	r2, [pc, #232]	; (8c54 <LORAReg_InitEU+0x5bc>)
    8b6c:	609a      	str	r2, [r3, #8]
		filemarks_fid2.fIDcb = LorawanReg_EU868_Pds_Cb;
    8b6e:	230c      	movs	r3, #12
    8b70:	18fb      	adds	r3, r7, r3
    8b72:	4a35      	ldr	r2, [pc, #212]	; (8c48 <LORAReg_InitEU+0x5b0>)
    8b74:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    8b76:	230c      	movs	r3, #12
    8b78:	18fb      	adds	r3, r7, r3
    8b7a:	466a      	mov	r2, sp
    8b7c:	68d9      	ldr	r1, [r3, #12]
    8b7e:	6011      	str	r1, [r2, #0]
    8b80:	6819      	ldr	r1, [r3, #0]
    8b82:	685a      	ldr	r2, [r3, #4]
    8b84:	689b      	ldr	r3, [r3, #8]
    8b86:	200b      	movs	r0, #11
    8b88:	4c30      	ldr	r4, [pc, #192]	; (8c4c <LORAReg_InitEU+0x5b4>)
    8b8a:	47a0      	blx	r4
    8b8c:	e030      	b.n	8bf0 <LORAReg_InitEU+0x558>
		
#endif		
	}
	else if(ismBand == ISM_EU433)
    8b8e:	1dfb      	adds	r3, r7, #7
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	2b01      	cmp	r3, #1
    8b94:	d12a      	bne.n	8bec <LORAReg_InitEU+0x554>
	{
		InitDefault433Channels ();
    8b96:	4b30      	ldr	r3, [pc, #192]	; (8c58 <LORAReg_InitEU+0x5c0>)
    8b98:	4798      	blx	r3
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    8b9a:	4b25      	ldr	r3, [pc, #148]	; (8c30 <LORAReg_InitEU+0x598>)
    8b9c:	2222      	movs	r2, #34	; 0x22
    8b9e:	2105      	movs	r1, #5
    8ba0:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    8ba2:	4b23      	ldr	r3, [pc, #140]	; (8c30 <LORAReg_InitEU+0x598>)
    8ba4:	2223      	movs	r2, #35	; 0x23
    8ba6:	2100      	movs	r1, #0
    8ba8:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    8baa:	4b21      	ldr	r3, [pc, #132]	; (8c30 <LORAReg_InitEU+0x598>)
    8bac:	7f1a      	ldrb	r2, [r3, #28]
    8bae:	2100      	movs	r1, #0
    8bb0:	400a      	ands	r2, r1
    8bb2:	1c11      	adds	r1, r2, #0
    8bb4:	2270      	movs	r2, #112	; 0x70
    8bb6:	4252      	negs	r2, r2
    8bb8:	430a      	orrs	r2, r1
    8bba:	771a      	strb	r2, [r3, #28]
    8bbc:	7f5a      	ldrb	r2, [r3, #29]
    8bbe:	2100      	movs	r1, #0
    8bc0:	400a      	ands	r2, r1
    8bc2:	1c11      	adds	r1, r2, #0
    8bc4:	222f      	movs	r2, #47	; 0x2f
    8bc6:	4252      	negs	r2, r2
    8bc8:	430a      	orrs	r2, r1
    8bca:	775a      	strb	r2, [r3, #29]
    8bcc:	7f9a      	ldrb	r2, [r3, #30]
    8bce:	2100      	movs	r1, #0
    8bd0:	400a      	ands	r2, r1
    8bd2:	1c11      	adds	r1, r2, #0
    8bd4:	2231      	movs	r2, #49	; 0x31
    8bd6:	4252      	negs	r2, r2
    8bd8:	430a      	orrs	r2, r1
    8bda:	779a      	strb	r2, [r3, #30]
    8bdc:	7fda      	ldrb	r2, [r3, #31]
    8bde:	2100      	movs	r1, #0
    8be0:	400a      	ands	r2, r1
    8be2:	1c11      	adds	r1, r2, #0
    8be4:	2219      	movs	r2, #25
    8be6:	430a      	orrs	r2, r1
    8be8:	77da      	strb	r2, [r3, #31]
    8bea:	e001      	b.n	8bf0 <LORAReg_InitEU+0x558>

	}
	else
	{
		return UNSUPPORTED_BAND;
    8bec:	23c7      	movs	r3, #199	; 0xc7
    8bee:	e01b      	b.n	8c28 <LORAReg_InitEU+0x590>
	}
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    8bf0:	4b0f      	ldr	r3, [pc, #60]	; (8c30 <LORAReg_InitEU+0x598>)
    8bf2:	781a      	ldrb	r2, [r3, #0]
    8bf4:	7859      	ldrb	r1, [r3, #1]
    8bf6:	0209      	lsls	r1, r1, #8
    8bf8:	430a      	orrs	r2, r1
    8bfa:	7899      	ldrb	r1, [r3, #2]
    8bfc:	0409      	lsls	r1, r1, #16
    8bfe:	430a      	orrs	r2, r1
    8c00:	78db      	ldrb	r3, [r3, #3]
    8c02:	061b      	lsls	r3, r3, #24
    8c04:	4313      	orrs	r3, r2
    8c06:	001a      	movs	r2, r3
    8c08:	4b14      	ldr	r3, [pc, #80]	; (8c5c <LORAReg_InitEU+0x5c4>)
    8c0a:	0010      	movs	r0, r2
    8c0c:	0019      	movs	r1, r3
    8c0e:	2340      	movs	r3, #64	; 0x40
    8c10:	001a      	movs	r2, r3
    8c12:	4b13      	ldr	r3, [pc, #76]	; (8c60 <LORAReg_InitEU+0x5c8>)
    8c14:	4798      	blx	r3

    LORAREG_InitGetAttrFnPtrsEU();
    8c16:	4b13      	ldr	r3, [pc, #76]	; (8c64 <LORAReg_InitEU+0x5cc>)
    8c18:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    8c1a:	4b13      	ldr	r3, [pc, #76]	; (8c68 <LORAReg_InitEU+0x5d0>)
    8c1c:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    8c1e:	4b13      	ldr	r3, [pc, #76]	; (8c6c <LORAReg_InitEU+0x5d4>)
    8c20:	4798      	blx	r3
#else
    status = UNSUPPORTED_BAND;
#endif
	return status;
    8c22:	232f      	movs	r3, #47	; 0x2f
    8c24:	18fb      	adds	r3, r7, r3
    8c26:	781b      	ldrb	r3, [r3, #0]
}
    8c28:	0018      	movs	r0, r3
    8c2a:	46bd      	mov	sp, r7
    8c2c:	b00d      	add	sp, #52	; 0x34
    8c2e:	bd90      	pop	{r4, r7, pc}
    8c30:	200014a8 	.word	0x200014a8
    8c34:	00000211 	.word	0x00000211
    8c38:	00000213 	.word	0x00000213
    8c3c:	0000020d 	.word	0x0000020d
    8c40:	2000128c 	.word	0x2000128c
    8c44:	0002afa4 	.word	0x0002afa4
    8c48:	00008f09 	.word	0x00008f09
    8c4c:	00014001 	.word	0x00014001
    8c50:	20001290 	.word	0x20001290
    8c54:	0002afac 	.word	0x0002afac
    8c58:	00008dcd 	.word	0x00008dcd
    8c5c:	0002af64 	.word	0x0002af64
    8c60:	00024149 	.word	0x00024149
    8c64:	0000aa5d 	.word	0x0000aa5d
    8c68:	0000cd19 	.word	0x0000cd19
    8c6c:	0000d0d5 	.word	0x0000d0d5

00008c70 <InitDefault868Channels>:
/*
 * \brief This function initializes all the EU868 Channels to default values
 */
#if (EU_BAND == 1)
void InitDefault868Channels (void)
{
    8c70:	b580      	push	{r7, lr}
    8c72:	b082      	sub	sp, #8
    8c74:	af00      	add	r7, sp, #0
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels868) );
    8c76:	4b4d      	ldr	r3, [pc, #308]	; (8dac <InitDefault868Channels+0x13c>)
    8c78:	791a      	ldrb	r2, [r3, #4]
    8c7a:	7959      	ldrb	r1, [r3, #5]
    8c7c:	0209      	lsls	r1, r1, #8
    8c7e:	430a      	orrs	r2, r1
    8c80:	7999      	ldrb	r1, [r3, #6]
    8c82:	0409      	lsls	r1, r1, #16
    8c84:	430a      	orrs	r2, r1
    8c86:	79db      	ldrb	r3, [r3, #7]
    8c88:	061b      	lsls	r3, r3, #24
    8c8a:	4313      	orrs	r3, r2
    8c8c:	2206      	movs	r2, #6
    8c8e:	2100      	movs	r1, #0
    8c90:	0018      	movs	r0, r3
    8c92:	4b47      	ldr	r3, [pc, #284]	; (8db0 <InitDefault868Channels+0x140>)
    8c94:	4798      	blx	r3
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    8c96:	4b45      	ldr	r3, [pc, #276]	; (8dac <InitDefault868Channels+0x13c>)
    8c98:	791a      	ldrb	r2, [r3, #4]
    8c9a:	7959      	ldrb	r1, [r3, #5]
    8c9c:	0209      	lsls	r1, r1, #8
    8c9e:	430a      	orrs	r2, r1
    8ca0:	7999      	ldrb	r1, [r3, #6]
    8ca2:	0409      	lsls	r1, r1, #16
    8ca4:	430a      	orrs	r2, r1
    8ca6:	79db      	ldrb	r3, [r3, #7]
    8ca8:	061b      	lsls	r3, r3, #24
    8caa:	4313      	orrs	r3, r2
    8cac:	001a      	movs	r2, r3
    8cae:	4b41      	ldr	r3, [pc, #260]	; (8db4 <InitDefault868Channels+0x144>)
    8cb0:	0010      	movs	r0, r2
    8cb2:	0019      	movs	r1, r3
    8cb4:	2306      	movs	r3, #6
    8cb6:	001a      	movs	r2, r3
    8cb8:	4b3f      	ldr	r3, [pc, #252]	; (8db8 <InitDefault868Channels+0x148>)
    8cba:	4798      	blx	r3
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels868) );
    8cbc:	4b3b      	ldr	r3, [pc, #236]	; (8dac <InitDefault868Channels+0x13c>)
    8cbe:	7a1a      	ldrb	r2, [r3, #8]
    8cc0:	7a59      	ldrb	r1, [r3, #9]
    8cc2:	0209      	lsls	r1, r1, #8
    8cc4:	430a      	orrs	r2, r1
    8cc6:	7a99      	ldrb	r1, [r3, #10]
    8cc8:	0409      	lsls	r1, r1, #16
    8cca:	430a      	orrs	r2, r1
    8ccc:	7adb      	ldrb	r3, [r3, #11]
    8cce:	061b      	lsls	r3, r3, #24
    8cd0:	4313      	orrs	r3, r2
    8cd2:	2224      	movs	r2, #36	; 0x24
    8cd4:	2100      	movs	r1, #0
    8cd6:	0018      	movs	r0, r3
    8cd8:	4b35      	ldr	r3, [pc, #212]	; (8db0 <InitDefault868Channels+0x140>)
    8cda:	4798      	blx	r3
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    8cdc:	4b33      	ldr	r3, [pc, #204]	; (8dac <InitDefault868Channels+0x13c>)
    8cde:	7a1a      	ldrb	r2, [r3, #8]
    8ce0:	7a59      	ldrb	r1, [r3, #9]
    8ce2:	0209      	lsls	r1, r1, #8
    8ce4:	430a      	orrs	r2, r1
    8ce6:	7a99      	ldrb	r1, [r3, #10]
    8ce8:	0409      	lsls	r1, r1, #16
    8cea:	430a      	orrs	r2, r1
    8cec:	7adb      	ldrb	r3, [r3, #11]
    8cee:	061b      	lsls	r3, r3, #24
    8cf0:	4313      	orrs	r3, r2
    8cf2:	001a      	movs	r2, r3
    8cf4:	4b31      	ldr	r3, [pc, #196]	; (8dbc <InitDefault868Channels+0x14c>)
    8cf6:	0010      	movs	r0, r2
    8cf8:	0019      	movs	r1, r3
    8cfa:	2324      	movs	r3, #36	; 0x24
    8cfc:	001a      	movs	r2, r3
    8cfe:	4b2e      	ldr	r3, [pc, #184]	; (8db8 <InitDefault868Channels+0x148>)
    8d00:	4798      	blx	r3
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams868) );
    8d02:	4b2a      	ldr	r3, [pc, #168]	; (8dac <InitDefault868Channels+0x13c>)
    8d04:	7b1a      	ldrb	r2, [r3, #12]
    8d06:	7b59      	ldrb	r1, [r3, #13]
    8d08:	0209      	lsls	r1, r1, #8
    8d0a:	430a      	orrs	r2, r1
    8d0c:	7b99      	ldrb	r1, [r3, #14]
    8d0e:	0409      	lsls	r1, r1, #16
    8d10:	430a      	orrs	r2, r1
    8d12:	7bdb      	ldrb	r3, [r3, #15]
    8d14:	061b      	lsls	r3, r3, #24
    8d16:	4313      	orrs	r3, r2
    8d18:	2248      	movs	r2, #72	; 0x48
    8d1a:	2100      	movs	r1, #0
    8d1c:	0018      	movs	r0, r3
    8d1e:	4b24      	ldr	r3, [pc, #144]	; (8db0 <InitDefault868Channels+0x140>)
    8d20:	4798      	blx	r3
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    8d22:	4b22      	ldr	r3, [pc, #136]	; (8dac <InitDefault868Channels+0x13c>)
    8d24:	7b1a      	ldrb	r2, [r3, #12]
    8d26:	7b59      	ldrb	r1, [r3, #13]
    8d28:	0209      	lsls	r1, r1, #8
    8d2a:	430a      	orrs	r2, r1
    8d2c:	7b99      	ldrb	r1, [r3, #14]
    8d2e:	0409      	lsls	r1, r1, #16
    8d30:	430a      	orrs	r2, r1
    8d32:	7bdb      	ldrb	r3, [r3, #15]
    8d34:	061b      	lsls	r3, r3, #24
    8d36:	4313      	orrs	r3, r2
    8d38:	001a      	movs	r2, r3
    8d3a:	4b21      	ldr	r3, [pc, #132]	; (8dc0 <InitDefault868Channels+0x150>)
    8d3c:	0010      	movs	r0, r2
    8d3e:	0019      	movs	r1, r3
    8d40:	2348      	movs	r3, #72	; 0x48
    8d42:	001a      	movs	r2, r3
    8d44:	4b1c      	ldr	r3, [pc, #112]	; (8db8 <InitDefault868Channels+0x148>)
    8d46:	4798      	blx	r3
	memset(RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycle868));
    8d48:	4b1e      	ldr	r3, [pc, #120]	; (8dc4 <InitDefault868Channels+0x154>)
    8d4a:	220c      	movs	r2, #12
    8d4c:	2100      	movs	r1, #0
    8d4e:	0018      	movs	r0, r3
    8d50:	4b17      	ldr	r3, [pc, #92]	; (8db0 <InitDefault868Channels+0x140>)
    8d52:	4798      	blx	r3
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    8d54:	491c      	ldr	r1, [pc, #112]	; (8dc8 <InitDefault868Channels+0x158>)
    8d56:	4b1b      	ldr	r3, [pc, #108]	; (8dc4 <InitDefault868Channels+0x154>)
    8d58:	220c      	movs	r2, #12
    8d5a:	0018      	movs	r0, r3
    8d5c:	4b16      	ldr	r3, [pc, #88]	; (8db8 <InitDefault868Channels+0x148>)
    8d5e:	4798      	blx	r3
    for (i = 3; i < RegParams.maxChannels; i++)
    8d60:	1dfb      	adds	r3, r7, #7
    8d62:	2203      	movs	r2, #3
    8d64:	701a      	strb	r2, [r3, #0]
    8d66:	e016      	b.n	8d96 <InitDefault868Channels+0x126>
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8d68:	4b10      	ldr	r3, [pc, #64]	; (8dac <InitDefault868Channels+0x13c>)
    8d6a:	791a      	ldrb	r2, [r3, #4]
    8d6c:	7959      	ldrb	r1, [r3, #5]
    8d6e:	0209      	lsls	r1, r1, #8
    8d70:	430a      	orrs	r2, r1
    8d72:	7999      	ldrb	r1, [r3, #6]
    8d74:	0409      	lsls	r1, r1, #16
    8d76:	430a      	orrs	r2, r1
    8d78:	79db      	ldrb	r3, [r3, #7]
    8d7a:	061b      	lsls	r3, r3, #24
    8d7c:	4313      	orrs	r3, r2
    8d7e:	001a      	movs	r2, r3
    8d80:	1dfb      	adds	r3, r7, #7
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	005b      	lsls	r3, r3, #1
    8d86:	18d3      	adds	r3, r2, r3
    8d88:	22ff      	movs	r2, #255	; 0xff
    8d8a:	705a      	strb	r2, [r3, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8d8c:	1dfb      	adds	r3, r7, #7
    8d8e:	781a      	ldrb	r2, [r3, #0]
    8d90:	1dfb      	adds	r3, r7, #7
    8d92:	3201      	adds	r2, #1
    8d94:	701a      	strb	r2, [r3, #0]
    8d96:	1dfb      	adds	r3, r7, #7
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	4a04      	ldr	r2, [pc, #16]	; (8dac <InitDefault868Channels+0x13c>)
    8d9c:	212a      	movs	r1, #42	; 0x2a
    8d9e:	5652      	ldrsb	r2, [r2, r1]
    8da0:	4293      	cmp	r3, r2
    8da2:	dbe1      	blt.n	8d68 <InitDefault868Channels+0xf8>
    }
}
    8da4:	46c0      	nop			; (mov r8, r8)
    8da6:	46bd      	mov	sp, r7
    8da8:	b002      	add	sp, #8
    8daa:	bd80      	pop	{r7, pc}
    8dac:	200014a8 	.word	0x200014a8
    8db0:	000241cd 	.word	0x000241cd
    8db4:	0002aeac 	.word	0x0002aeac
    8db8:	00024149 	.word	0x00024149
    8dbc:	0002aebc 	.word	0x0002aebc
    8dc0:	0002af10 	.word	0x0002af10
    8dc4:	20001656 	.word	0x20001656
    8dc8:	0002af58 	.word	0x0002af58

00008dcc <InitDefault433Channels>:

/*
 * \brief This function initializes all the EU433 Channels to default values
 */
void InitDefault433Channels (void)
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b082      	sub	sp, #8
    8dd0:	af00      	add	r7, sp, #0
    uint8_t i;

    memset (RegParams.pChParams, 0, sizeof(DefaultChannels433) );
    8dd2:	4b47      	ldr	r3, [pc, #284]	; (8ef0 <InitDefault433Channels+0x124>)
    8dd4:	791a      	ldrb	r2, [r3, #4]
    8dd6:	7959      	ldrb	r1, [r3, #5]
    8dd8:	0209      	lsls	r1, r1, #8
    8dda:	430a      	orrs	r2, r1
    8ddc:	7999      	ldrb	r1, [r3, #6]
    8dde:	0409      	lsls	r1, r1, #16
    8de0:	430a      	orrs	r2, r1
    8de2:	79db      	ldrb	r3, [r3, #7]
    8de4:	061b      	lsls	r3, r3, #24
    8de6:	4313      	orrs	r3, r2
    8de8:	2206      	movs	r2, #6
    8dea:	2100      	movs	r1, #0
    8dec:	0018      	movs	r0, r3
    8dee:	4b41      	ldr	r3, [pc, #260]	; (8ef4 <InitDefault433Channels+0x128>)
    8df0:	4798      	blx	r3
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    8df2:	4b3f      	ldr	r3, [pc, #252]	; (8ef0 <InitDefault433Channels+0x124>)
    8df4:	791a      	ldrb	r2, [r3, #4]
    8df6:	7959      	ldrb	r1, [r3, #5]
    8df8:	0209      	lsls	r1, r1, #8
    8dfa:	430a      	orrs	r2, r1
    8dfc:	7999      	ldrb	r1, [r3, #6]
    8dfe:	0409      	lsls	r1, r1, #16
    8e00:	430a      	orrs	r2, r1
    8e02:	79db      	ldrb	r3, [r3, #7]
    8e04:	061b      	lsls	r3, r3, #24
    8e06:	4313      	orrs	r3, r2
    8e08:	001a      	movs	r2, r3
    8e0a:	4b3b      	ldr	r3, [pc, #236]	; (8ef8 <InitDefault433Channels+0x12c>)
    8e0c:	0010      	movs	r0, r2
    8e0e:	0019      	movs	r1, r3
    8e10:	2306      	movs	r3, #6
    8e12:	001a      	movs	r2, r3
    8e14:	4b39      	ldr	r3, [pc, #228]	; (8efc <InitDefault433Channels+0x130>)
    8e16:	4798      	blx	r3
    memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels433) );
    8e18:	4b35      	ldr	r3, [pc, #212]	; (8ef0 <InitDefault433Channels+0x124>)
    8e1a:	7a1a      	ldrb	r2, [r3, #8]
    8e1c:	7a59      	ldrb	r1, [r3, #9]
    8e1e:	0209      	lsls	r1, r1, #8
    8e20:	430a      	orrs	r2, r1
    8e22:	7a99      	ldrb	r1, [r3, #10]
    8e24:	0409      	lsls	r1, r1, #16
    8e26:	430a      	orrs	r2, r1
    8e28:	7adb      	ldrb	r3, [r3, #11]
    8e2a:	061b      	lsls	r3, r3, #24
    8e2c:	4313      	orrs	r3, r2
    8e2e:	2224      	movs	r2, #36	; 0x24
    8e30:	2100      	movs	r1, #0
    8e32:	0018      	movs	r0, r3
    8e34:	4b2f      	ldr	r3, [pc, #188]	; (8ef4 <InitDefault433Channels+0x128>)
    8e36:	4798      	blx	r3
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    8e38:	4b2d      	ldr	r3, [pc, #180]	; (8ef0 <InitDefault433Channels+0x124>)
    8e3a:	7a1a      	ldrb	r2, [r3, #8]
    8e3c:	7a59      	ldrb	r1, [r3, #9]
    8e3e:	0209      	lsls	r1, r1, #8
    8e40:	430a      	orrs	r2, r1
    8e42:	7a99      	ldrb	r1, [r3, #10]
    8e44:	0409      	lsls	r1, r1, #16
    8e46:	430a      	orrs	r2, r1
    8e48:	7adb      	ldrb	r3, [r3, #11]
    8e4a:	061b      	lsls	r3, r3, #24
    8e4c:	4313      	orrs	r3, r2
    8e4e:	001a      	movs	r2, r3
    8e50:	4b2b      	ldr	r3, [pc, #172]	; (8f00 <InitDefault433Channels+0x134>)
    8e52:	0010      	movs	r0, r2
    8e54:	0019      	movs	r1, r3
    8e56:	2324      	movs	r3, #36	; 0x24
    8e58:	001a      	movs	r2, r3
    8e5a:	4b28      	ldr	r3, [pc, #160]	; (8efc <InitDefault433Channels+0x130>)
    8e5c:	4798      	blx	r3
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParams433) );
    8e5e:	4b24      	ldr	r3, [pc, #144]	; (8ef0 <InitDefault433Channels+0x124>)
    8e60:	7b1a      	ldrb	r2, [r3, #12]
    8e62:	7b59      	ldrb	r1, [r3, #13]
    8e64:	0209      	lsls	r1, r1, #8
    8e66:	430a      	orrs	r2, r1
    8e68:	7b99      	ldrb	r1, [r3, #14]
    8e6a:	0409      	lsls	r1, r1, #16
    8e6c:	430a      	orrs	r2, r1
    8e6e:	7bdb      	ldrb	r3, [r3, #15]
    8e70:	061b      	lsls	r3, r3, #24
    8e72:	4313      	orrs	r3, r2
    8e74:	220c      	movs	r2, #12
    8e76:	2100      	movs	r1, #0
    8e78:	0018      	movs	r0, r3
    8e7a:	4b1e      	ldr	r3, [pc, #120]	; (8ef4 <InitDefault433Channels+0x128>)
    8e7c:	4798      	blx	r3
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    8e7e:	4b1c      	ldr	r3, [pc, #112]	; (8ef0 <InitDefault433Channels+0x124>)
    8e80:	7b1a      	ldrb	r2, [r3, #12]
    8e82:	7b59      	ldrb	r1, [r3, #13]
    8e84:	0209      	lsls	r1, r1, #8
    8e86:	430a      	orrs	r2, r1
    8e88:	7b99      	ldrb	r1, [r3, #14]
    8e8a:	0409      	lsls	r1, r1, #16
    8e8c:	430a      	orrs	r2, r1
    8e8e:	7bdb      	ldrb	r3, [r3, #15]
    8e90:	061b      	lsls	r3, r3, #24
    8e92:	4313      	orrs	r3, r2
    8e94:	001a      	movs	r2, r3
    8e96:	4b1b      	ldr	r3, [pc, #108]	; (8f04 <InitDefault433Channels+0x138>)
    8e98:	0010      	movs	r0, r2
    8e9a:	0019      	movs	r1, r3
    8e9c:	230c      	movs	r3, #12
    8e9e:	001a      	movs	r2, r3
    8ea0:	4b16      	ldr	r3, [pc, #88]	; (8efc <InitDefault433Channels+0x130>)
    8ea2:	4798      	blx	r3
	
    for (i = 3; i < RegParams.maxChannels; i++)
    8ea4:	1dfb      	adds	r3, r7, #7
    8ea6:	2203      	movs	r2, #3
    8ea8:	701a      	strb	r2, [r3, #0]
    8eaa:	e016      	b.n	8eda <InitDefault433Channels+0x10e>
    {
        // for undefined channels the duty cycle should be a very big value, and the data range a not-valid value
        //duty cycle 0 means no duty cycle limitation, the bigger the duty cycle value, the greater the limitation
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8eac:	4b10      	ldr	r3, [pc, #64]	; (8ef0 <InitDefault433Channels+0x124>)
    8eae:	791a      	ldrb	r2, [r3, #4]
    8eb0:	7959      	ldrb	r1, [r3, #5]
    8eb2:	0209      	lsls	r1, r1, #8
    8eb4:	430a      	orrs	r2, r1
    8eb6:	7999      	ldrb	r1, [r3, #6]
    8eb8:	0409      	lsls	r1, r1, #16
    8eba:	430a      	orrs	r2, r1
    8ebc:	79db      	ldrb	r3, [r3, #7]
    8ebe:	061b      	lsls	r3, r3, #24
    8ec0:	4313      	orrs	r3, r2
    8ec2:	001a      	movs	r2, r3
    8ec4:	1dfb      	adds	r3, r7, #7
    8ec6:	781b      	ldrb	r3, [r3, #0]
    8ec8:	005b      	lsls	r3, r3, #1
    8eca:	18d3      	adds	r3, r2, r3
    8ecc:	22ff      	movs	r2, #255	; 0xff
    8ece:	705a      	strb	r2, [r3, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8ed0:	1dfb      	adds	r3, r7, #7
    8ed2:	781a      	ldrb	r2, [r3, #0]
    8ed4:	1dfb      	adds	r3, r7, #7
    8ed6:	3201      	adds	r2, #1
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	1dfb      	adds	r3, r7, #7
    8edc:	781b      	ldrb	r3, [r3, #0]
    8ede:	4a04      	ldr	r2, [pc, #16]	; (8ef0 <InitDefault433Channels+0x124>)
    8ee0:	212a      	movs	r1, #42	; 0x2a
    8ee2:	5652      	ldrsb	r2, [r2, r1]
    8ee4:	4293      	cmp	r3, r2
    8ee6:	dbe1      	blt.n	8eac <InitDefault433Channels+0xe0>
    }
}
    8ee8:	46c0      	nop			; (mov r8, r8)
    8eea:	46bd      	mov	sp, r7
    8eec:	b002      	add	sp, #8
    8eee:	bd80      	pop	{r7, pc}
    8ef0:	200014a8 	.word	0x200014a8
    8ef4:	000241cd 	.word	0x000241cd
    8ef8:	0002aeb4 	.word	0x0002aeb4
    8efc:	00024149 	.word	0x00024149
    8f00:	0002aee0 	.word	0x0002aee0
    8f04:	0002af04 	.word	0x0002af04

00008f08 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
    8f08:	b580      	push	{r7, lr}
    8f0a:	af00      	add	r7, sp, #0
	
}
    8f0c:	46c0      	nop			; (mov r8, r8)
    8f0e:	46bd      	mov	sp, r7
    8f10:	bd80      	pop	{r7, pc}
	...

00008f14 <LORAReg_InitIN>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitIN(IsmBand_t ismBand)
{
    8f14:	b590      	push	{r4, r7, lr}
    8f16:	b08b      	sub	sp, #44	; 0x2c
    8f18:	af02      	add	r7, sp, #8
    8f1a:	0002      	movs	r2, r0
    8f1c:	1dfb      	adds	r3, r7, #7
    8f1e:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8f20:	231f      	movs	r3, #31
    8f22:	18fb      	adds	r3, r7, r3
    8f24:	2208      	movs	r2, #8
    8f26:	701a      	strb	r2, [r3, #0]
#if(IND_BAND == 1)
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    8f28:	4bfd      	ldr	r3, [pc, #1012]	; (9320 <LORAReg_InitIN+0x40c>)
    8f2a:	2226      	movs	r2, #38	; 0x26
    8f2c:	2103      	movs	r1, #3
    8f2e:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    8f30:	4bfb      	ldr	r3, [pc, #1004]	; (9320 <LORAReg_InitIN+0x40c>)
    8f32:	222a      	movs	r2, #42	; 0x2a
    8f34:	2110      	movs	r1, #16
    8f36:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    8f38:	4bf9      	ldr	r3, [pc, #996]	; (9320 <LORAReg_InitIN+0x40c>)
    8f3a:	2229      	movs	r2, #41	; 0x29
    8f3c:	2101      	movs	r1, #1
    8f3e:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    8f40:	4bf7      	ldr	r3, [pc, #988]	; (9320 <LORAReg_InitIN+0x40c>)
    8f42:	2227      	movs	r2, #39	; 0x27
    8f44:	2101      	movs	r1, #1
    8f46:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8f48:	4bf5      	ldr	r3, [pc, #980]	; (9320 <LORAReg_InitIN+0x40c>)
    8f4a:	4af6      	ldr	r2, [pc, #984]	; (9324 <LORAReg_InitIN+0x410>)
    8f4c:	21ff      	movs	r1, #255	; 0xff
    8f4e:	4011      	ands	r1, r2
    8f50:	000c      	movs	r4, r1
    8f52:	7919      	ldrb	r1, [r3, #4]
    8f54:	2000      	movs	r0, #0
    8f56:	4001      	ands	r1, r0
    8f58:	1c08      	adds	r0, r1, #0
    8f5a:	1c21      	adds	r1, r4, #0
    8f5c:	4301      	orrs	r1, r0
    8f5e:	7119      	strb	r1, [r3, #4]
    8f60:	0a11      	lsrs	r1, r2, #8
    8f62:	20ff      	movs	r0, #255	; 0xff
    8f64:	4001      	ands	r1, r0
    8f66:	000c      	movs	r4, r1
    8f68:	7959      	ldrb	r1, [r3, #5]
    8f6a:	2000      	movs	r0, #0
    8f6c:	4001      	ands	r1, r0
    8f6e:	1c08      	adds	r0, r1, #0
    8f70:	1c21      	adds	r1, r4, #0
    8f72:	4301      	orrs	r1, r0
    8f74:	7159      	strb	r1, [r3, #5]
    8f76:	0c11      	lsrs	r1, r2, #16
    8f78:	20ff      	movs	r0, #255	; 0xff
    8f7a:	4001      	ands	r1, r0
    8f7c:	000c      	movs	r4, r1
    8f7e:	7999      	ldrb	r1, [r3, #6]
    8f80:	2000      	movs	r0, #0
    8f82:	4001      	ands	r1, r0
    8f84:	1c08      	adds	r0, r1, #0
    8f86:	1c21      	adds	r1, r4, #0
    8f88:	4301      	orrs	r1, r0
    8f8a:	7199      	strb	r1, [r3, #6]
    8f8c:	0e10      	lsrs	r0, r2, #24
    8f8e:	79da      	ldrb	r2, [r3, #7]
    8f90:	2100      	movs	r1, #0
    8f92:	400a      	ands	r2, r1
    8f94:	1c11      	adds	r1, r2, #0
    8f96:	1c02      	adds	r2, r0, #0
    8f98:	430a      	orrs	r2, r1
    8f9a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8f9c:	4be0      	ldr	r3, [pc, #896]	; (9320 <LORAReg_InitIN+0x40c>)
    8f9e:	4ae2      	ldr	r2, [pc, #904]	; (9328 <LORAReg_InitIN+0x414>)
    8fa0:	21ff      	movs	r1, #255	; 0xff
    8fa2:	4011      	ands	r1, r2
    8fa4:	000c      	movs	r4, r1
    8fa6:	7819      	ldrb	r1, [r3, #0]
    8fa8:	2000      	movs	r0, #0
    8faa:	4001      	ands	r1, r0
    8fac:	1c08      	adds	r0, r1, #0
    8fae:	1c21      	adds	r1, r4, #0
    8fb0:	4301      	orrs	r1, r0
    8fb2:	7019      	strb	r1, [r3, #0]
    8fb4:	0a11      	lsrs	r1, r2, #8
    8fb6:	20ff      	movs	r0, #255	; 0xff
    8fb8:	4001      	ands	r1, r0
    8fba:	000c      	movs	r4, r1
    8fbc:	7859      	ldrb	r1, [r3, #1]
    8fbe:	2000      	movs	r0, #0
    8fc0:	4001      	ands	r1, r0
    8fc2:	1c08      	adds	r0, r1, #0
    8fc4:	1c21      	adds	r1, r4, #0
    8fc6:	4301      	orrs	r1, r0
    8fc8:	7059      	strb	r1, [r3, #1]
    8fca:	0c11      	lsrs	r1, r2, #16
    8fcc:	20ff      	movs	r0, #255	; 0xff
    8fce:	4001      	ands	r1, r0
    8fd0:	000c      	movs	r4, r1
    8fd2:	7899      	ldrb	r1, [r3, #2]
    8fd4:	2000      	movs	r0, #0
    8fd6:	4001      	ands	r1, r0
    8fd8:	1c08      	adds	r0, r1, #0
    8fda:	1c21      	adds	r1, r4, #0
    8fdc:	4301      	orrs	r1, r0
    8fde:	7099      	strb	r1, [r3, #2]
    8fe0:	0e10      	lsrs	r0, r2, #24
    8fe2:	78da      	ldrb	r2, [r3, #3]
    8fe4:	2100      	movs	r1, #0
    8fe6:	400a      	ands	r2, r1
    8fe8:	1c11      	adds	r1, r2, #0
    8fea:	1c02      	adds	r2, r0, #0
    8fec:	430a      	orrs	r2, r1
    8fee:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8ff0:	4bcb      	ldr	r3, [pc, #812]	; (9320 <LORAReg_InitIN+0x40c>)
    8ff2:	4ace      	ldr	r2, [pc, #824]	; (932c <LORAReg_InitIN+0x418>)
    8ff4:	21ff      	movs	r1, #255	; 0xff
    8ff6:	4011      	ands	r1, r2
    8ff8:	000c      	movs	r4, r1
    8ffa:	7a19      	ldrb	r1, [r3, #8]
    8ffc:	2000      	movs	r0, #0
    8ffe:	4001      	ands	r1, r0
    9000:	1c08      	adds	r0, r1, #0
    9002:	1c21      	adds	r1, r4, #0
    9004:	4301      	orrs	r1, r0
    9006:	7219      	strb	r1, [r3, #8]
    9008:	0a11      	lsrs	r1, r2, #8
    900a:	20ff      	movs	r0, #255	; 0xff
    900c:	4001      	ands	r1, r0
    900e:	000c      	movs	r4, r1
    9010:	7a59      	ldrb	r1, [r3, #9]
    9012:	2000      	movs	r0, #0
    9014:	4001      	ands	r1, r0
    9016:	1c08      	adds	r0, r1, #0
    9018:	1c21      	adds	r1, r4, #0
    901a:	4301      	orrs	r1, r0
    901c:	7259      	strb	r1, [r3, #9]
    901e:	0c11      	lsrs	r1, r2, #16
    9020:	20ff      	movs	r0, #255	; 0xff
    9022:	4001      	ands	r1, r0
    9024:	000c      	movs	r4, r1
    9026:	7a99      	ldrb	r1, [r3, #10]
    9028:	2000      	movs	r0, #0
    902a:	4001      	ands	r1, r0
    902c:	1c08      	adds	r0, r1, #0
    902e:	1c21      	adds	r1, r4, #0
    9030:	4301      	orrs	r1, r0
    9032:	7299      	strb	r1, [r3, #10]
    9034:	0e10      	lsrs	r0, r2, #24
    9036:	7ada      	ldrb	r2, [r3, #11]
    9038:	2100      	movs	r1, #0
    903a:	400a      	ands	r2, r1
    903c:	1c11      	adds	r1, r2, #0
    903e:	1c02      	adds	r2, r0, #0
    9040:	430a      	orrs	r2, r1
    9042:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    9044:	4bb6      	ldr	r3, [pc, #728]	; (9320 <LORAReg_InitIN+0x40c>)
    9046:	4aba      	ldr	r2, [pc, #744]	; (9330 <LORAReg_InitIN+0x41c>)
    9048:	21ff      	movs	r1, #255	; 0xff
    904a:	4011      	ands	r1, r2
    904c:	000c      	movs	r4, r1
    904e:	7c19      	ldrb	r1, [r3, #16]
    9050:	2000      	movs	r0, #0
    9052:	4001      	ands	r1, r0
    9054:	1c08      	adds	r0, r1, #0
    9056:	1c21      	adds	r1, r4, #0
    9058:	4301      	orrs	r1, r0
    905a:	7419      	strb	r1, [r3, #16]
    905c:	0a11      	lsrs	r1, r2, #8
    905e:	20ff      	movs	r0, #255	; 0xff
    9060:	4001      	ands	r1, r0
    9062:	000c      	movs	r4, r1
    9064:	7c59      	ldrb	r1, [r3, #17]
    9066:	2000      	movs	r0, #0
    9068:	4001      	ands	r1, r0
    906a:	1c08      	adds	r0, r1, #0
    906c:	1c21      	adds	r1, r4, #0
    906e:	4301      	orrs	r1, r0
    9070:	7459      	strb	r1, [r3, #17]
    9072:	0c11      	lsrs	r1, r2, #16
    9074:	20ff      	movs	r0, #255	; 0xff
    9076:	4001      	ands	r1, r0
    9078:	000c      	movs	r4, r1
    907a:	7c99      	ldrb	r1, [r3, #18]
    907c:	2000      	movs	r0, #0
    907e:	4001      	ands	r1, r0
    9080:	1c08      	adds	r0, r1, #0
    9082:	1c21      	adds	r1, r4, #0
    9084:	4301      	orrs	r1, r0
    9086:	7499      	strb	r1, [r3, #18]
    9088:	0e10      	lsrs	r0, r2, #24
    908a:	7cda      	ldrb	r2, [r3, #19]
    908c:	2100      	movs	r1, #0
    908e:	400a      	ands	r2, r1
    9090:	1c11      	adds	r1, r2, #0
    9092:	1c02      	adds	r2, r0, #0
    9094:	430a      	orrs	r2, r1
    9096:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    9098:	4ba1      	ldr	r3, [pc, #644]	; (9320 <LORAReg_InitIN+0x40c>)
    909a:	4aa6      	ldr	r2, [pc, #664]	; (9334 <LORAReg_InitIN+0x420>)
    909c:	21ff      	movs	r1, #255	; 0xff
    909e:	4011      	ands	r1, r2
    90a0:	000c      	movs	r4, r1
    90a2:	7d19      	ldrb	r1, [r3, #20]
    90a4:	2000      	movs	r0, #0
    90a6:	4001      	ands	r1, r0
    90a8:	1c08      	adds	r0, r1, #0
    90aa:	1c21      	adds	r1, r4, #0
    90ac:	4301      	orrs	r1, r0
    90ae:	7519      	strb	r1, [r3, #20]
    90b0:	0a11      	lsrs	r1, r2, #8
    90b2:	20ff      	movs	r0, #255	; 0xff
    90b4:	4001      	ands	r1, r0
    90b6:	000c      	movs	r4, r1
    90b8:	7d59      	ldrb	r1, [r3, #21]
    90ba:	2000      	movs	r0, #0
    90bc:	4001      	ands	r1, r0
    90be:	1c08      	adds	r0, r1, #0
    90c0:	1c21      	adds	r1, r4, #0
    90c2:	4301      	orrs	r1, r0
    90c4:	7559      	strb	r1, [r3, #21]
    90c6:	0c11      	lsrs	r1, r2, #16
    90c8:	20ff      	movs	r0, #255	; 0xff
    90ca:	4001      	ands	r1, r0
    90cc:	000c      	movs	r4, r1
    90ce:	7d99      	ldrb	r1, [r3, #22]
    90d0:	2000      	movs	r0, #0
    90d2:	4001      	ands	r1, r0
    90d4:	1c08      	adds	r0, r1, #0
    90d6:	1c21      	adds	r1, r4, #0
    90d8:	4301      	orrs	r1, r0
    90da:	7599      	strb	r1, [r3, #22]
    90dc:	0e10      	lsrs	r0, r2, #24
    90de:	7dda      	ldrb	r2, [r3, #23]
    90e0:	2100      	movs	r1, #0
    90e2:	400a      	ands	r2, r1
    90e4:	1c11      	adds	r1, r2, #0
    90e6:	1c02      	adds	r2, r0, #0
    90e8:	430a      	orrs	r2, r1
    90ea:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    90ec:	4b8c      	ldr	r3, [pc, #560]	; (9320 <LORAReg_InitIN+0x40c>)
    90ee:	4a92      	ldr	r2, [pc, #584]	; (9338 <LORAReg_InitIN+0x424>)
    90f0:	21ff      	movs	r1, #255	; 0xff
    90f2:	4011      	ands	r1, r2
    90f4:	000c      	movs	r4, r1
    90f6:	7e19      	ldrb	r1, [r3, #24]
    90f8:	2000      	movs	r0, #0
    90fa:	4001      	ands	r1, r0
    90fc:	1c08      	adds	r0, r1, #0
    90fe:	1c21      	adds	r1, r4, #0
    9100:	4301      	orrs	r1, r0
    9102:	7619      	strb	r1, [r3, #24]
    9104:	0a11      	lsrs	r1, r2, #8
    9106:	20ff      	movs	r0, #255	; 0xff
    9108:	4001      	ands	r1, r0
    910a:	000c      	movs	r4, r1
    910c:	7e59      	ldrb	r1, [r3, #25]
    910e:	2000      	movs	r0, #0
    9110:	4001      	ands	r1, r0
    9112:	1c08      	adds	r0, r1, #0
    9114:	1c21      	adds	r1, r4, #0
    9116:	4301      	orrs	r1, r0
    9118:	7659      	strb	r1, [r3, #25]
    911a:	0c11      	lsrs	r1, r2, #16
    911c:	20ff      	movs	r0, #255	; 0xff
    911e:	4001      	ands	r1, r0
    9120:	000c      	movs	r4, r1
    9122:	7e99      	ldrb	r1, [r3, #26]
    9124:	2000      	movs	r0, #0
    9126:	4001      	ands	r1, r0
    9128:	1c08      	adds	r0, r1, #0
    912a:	1c21      	adds	r1, r4, #0
    912c:	4301      	orrs	r1, r0
    912e:	7699      	strb	r1, [r3, #26]
    9130:	0e10      	lsrs	r0, r2, #24
    9132:	7eda      	ldrb	r2, [r3, #27]
    9134:	2100      	movs	r1, #0
    9136:	400a      	ands	r2, r1
    9138:	1c11      	adds	r1, r2, #0
    913a:	1c02      	adds	r2, r0, #0
    913c:	430a      	orrs	r2, r1
    913e:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    9140:	4b77      	ldr	r3, [pc, #476]	; (9320 <LORAReg_InitIN+0x40c>)
    9142:	2222      	movs	r2, #34	; 0x22
    9144:	2100      	movs	r1, #0
    9146:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    9148:	4b75      	ldr	r3, [pc, #468]	; (9320 <LORAReg_InitIN+0x40c>)
    914a:	2223      	movs	r2, #35	; 0x23
    914c:	2102      	movs	r1, #2
    914e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    9150:	4b73      	ldr	r3, [pc, #460]	; (9320 <LORAReg_InitIN+0x40c>)
    9152:	7f1a      	ldrb	r2, [r3, #28]
    9154:	2100      	movs	r1, #0
    9156:	400a      	ands	r2, r1
    9158:	1c11      	adds	r1, r2, #0
    915a:	2210      	movs	r2, #16
    915c:	4252      	negs	r2, r2
    915e:	430a      	orrs	r2, r1
    9160:	771a      	strb	r2, [r3, #28]
    9162:	7f5a      	ldrb	r2, [r3, #29]
    9164:	2100      	movs	r1, #0
    9166:	400a      	ands	r2, r1
    9168:	1c11      	adds	r1, r2, #0
    916a:	2280      	movs	r2, #128	; 0x80
    916c:	4252      	negs	r2, r2
    916e:	430a      	orrs	r2, r1
    9170:	775a      	strb	r2, [r3, #29]
    9172:	7f9a      	ldrb	r2, [r3, #30]
    9174:	2100      	movs	r1, #0
    9176:	400a      	ands	r2, r1
    9178:	1c11      	adds	r1, r2, #0
    917a:	225a      	movs	r2, #90	; 0x5a
    917c:	4252      	negs	r2, r2
    917e:	430a      	orrs	r2, r1
    9180:	779a      	strb	r2, [r3, #30]
    9182:	7fda      	ldrb	r2, [r3, #31]
    9184:	2100      	movs	r1, #0
    9186:	400a      	ands	r2, r1
    9188:	1c11      	adds	r1, r2, #0
    918a:	2233      	movs	r2, #51	; 0x33
    918c:	430a      	orrs	r2, r1
    918e:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    9190:	4b63      	ldr	r3, [pc, #396]	; (9320 <LORAReg_InitIN+0x40c>)
    9192:	2221      	movs	r2, #33	; 0x21
    9194:	2103      	movs	r1, #3
    9196:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    9198:	4b61      	ldr	r3, [pc, #388]	; (9320 <LORAReg_InitIN+0x40c>)
    919a:	2220      	movs	r2, #32
    919c:	2130      	movs	r1, #48	; 0x30
    919e:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    91a0:	4b5f      	ldr	r3, [pc, #380]	; (9320 <LORAReg_InitIN+0x40c>)
    91a2:	2224      	movs	r2, #36	; 0x24
    91a4:	2107      	movs	r1, #7
    91a6:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    91a8:	4b5d      	ldr	r3, [pc, #372]	; (9320 <LORAReg_InitIN+0x40c>)
    91aa:	2225      	movs	r2, #37	; 0x25
    91ac:	2100      	movs	r1, #0
    91ae:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    91b0:	4a5b      	ldr	r2, [pc, #364]	; (9320 <LORAReg_InitIN+0x40c>)
    91b2:	23c2      	movs	r3, #194	; 0xc2
    91b4:	33ff      	adds	r3, #255	; 0xff
    91b6:	2103      	movs	r1, #3
    91b8:	54d1      	strb	r1, [r2, r3]
	RegParams.Rx1DrOffset = 7;
    91ba:	4b59      	ldr	r3, [pc, #356]	; (9320 <LORAReg_InitIN+0x40c>)
    91bc:	222c      	movs	r2, #44	; 0x2c
    91be:	2107      	movs	r1, #7
    91c0:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 10;
    91c2:	4b57      	ldr	r3, [pc, #348]	; (9320 <LORAReg_InitIN+0x40c>)
    91c4:	222d      	movs	r2, #45	; 0x2d
    91c6:	210a      	movs	r1, #10
    91c8:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_IN;
    91ca:	4b55      	ldr	r3, [pc, #340]	; (9320 <LORAReg_InitIN+0x40c>)
    91cc:	222e      	movs	r2, #46	; 0x2e
    91ce:	2101      	movs	r1, #1
    91d0:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    91d2:	4b53      	ldr	r3, [pc, #332]	; (9320 <LORAReg_InitIN+0x40c>)
    91d4:	2228      	movs	r2, #40	; 0x28
    91d6:	211e      	movs	r1, #30
    91d8:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    91da:	4b51      	ldr	r3, [pc, #324]	; (9320 <LORAReg_InitIN+0x40c>)
    91dc:	7d1a      	ldrb	r2, [r3, #20]
    91de:	7d59      	ldrb	r1, [r3, #21]
    91e0:	0209      	lsls	r1, r1, #8
    91e2:	430a      	orrs	r2, r1
    91e4:	7d99      	ldrb	r1, [r3, #22]
    91e6:	0409      	lsls	r1, r1, #16
    91e8:	430a      	orrs	r2, r1
    91ea:	7ddb      	ldrb	r3, [r3, #23]
    91ec:	061b      	lsls	r3, r3, #24
    91ee:	4313      	orrs	r3, r2
    91f0:	001a      	movs	r2, r3
    91f2:	4b52      	ldr	r3, [pc, #328]	; (933c <LORAReg_InitIN+0x428>)
    91f4:	781b      	ldrb	r3, [r3, #0]
    91f6:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    91f8:	4b49      	ldr	r3, [pc, #292]	; (9320 <LORAReg_InitIN+0x40c>)
    91fa:	7d1a      	ldrb	r2, [r3, #20]
    91fc:	7d59      	ldrb	r1, [r3, #21]
    91fe:	0209      	lsls	r1, r1, #8
    9200:	430a      	orrs	r2, r1
    9202:	7d99      	ldrb	r1, [r3, #22]
    9204:	0409      	lsls	r1, r1, #16
    9206:	430a      	orrs	r2, r1
    9208:	7ddb      	ldrb	r3, [r3, #23]
    920a:	061b      	lsls	r3, r3, #24
    920c:	4313      	orrs	r3, r2
    920e:	791a      	ldrb	r2, [r3, #4]
    9210:	2100      	movs	r1, #0
    9212:	400a      	ands	r2, r1
    9214:	711a      	strb	r2, [r3, #4]
    9216:	795a      	ldrb	r2, [r3, #5]
    9218:	2100      	movs	r1, #0
    921a:	400a      	ands	r2, r1
    921c:	715a      	strb	r2, [r3, #5]
    921e:	799a      	ldrb	r2, [r3, #6]
    9220:	2100      	movs	r1, #0
    9222:	400a      	ands	r2, r1
    9224:	719a      	strb	r2, [r3, #6]
    9226:	79da      	ldrb	r2, [r3, #7]
    9228:	2100      	movs	r1, #0
    922a:	400a      	ands	r2, r1
    922c:	71da      	strb	r2, [r3, #7]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    922e:	4b3c      	ldr	r3, [pc, #240]	; (9320 <LORAReg_InitIN+0x40c>)
    9230:	7e1a      	ldrb	r2, [r3, #24]
    9232:	7e59      	ldrb	r1, [r3, #25]
    9234:	0209      	lsls	r1, r1, #8
    9236:	430a      	orrs	r2, r1
    9238:	7e99      	ldrb	r1, [r3, #26]
    923a:	0409      	lsls	r1, r1, #16
    923c:	430a      	orrs	r2, r1
    923e:	7edb      	ldrb	r3, [r3, #27]
    9240:	061b      	lsls	r3, r3, #24
    9242:	4313      	orrs	r3, r2
    9244:	001a      	movs	r2, r3
    9246:	4b3d      	ldr	r3, [pc, #244]	; (933c <LORAReg_InitIN+0x428>)
    9248:	785b      	ldrb	r3, [r3, #1]
    924a:	7013      	strb	r3, [r2, #0]
	RegParams.joinbccount =0;
    924c:	4b34      	ldr	r3, [pc, #208]	; (9320 <LORAReg_InitIN+0x40c>)
    924e:	2243      	movs	r2, #67	; 0x43
    9250:	2100      	movs	r1, #0
    9252:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9254:	4b32      	ldr	r3, [pc, #200]	; (9320 <LORAReg_InitIN+0x40c>)
    9256:	333f      	adds	r3, #63	; 0x3f
    9258:	781a      	ldrb	r2, [r3, #0]
    925a:	2100      	movs	r1, #0
    925c:	400a      	ands	r2, r1
    925e:	701a      	strb	r2, [r3, #0]
    9260:	785a      	ldrb	r2, [r3, #1]
    9262:	2100      	movs	r1, #0
    9264:	400a      	ands	r2, r1
    9266:	705a      	strb	r2, [r3, #1]
    9268:	789a      	ldrb	r2, [r3, #2]
    926a:	2100      	movs	r1, #0
    926c:	400a      	ands	r2, r1
    926e:	709a      	strb	r2, [r3, #2]
    9270:	78da      	ldrb	r2, [r3, #3]
    9272:	2100      	movs	r1, #0
    9274:	400a      	ands	r2, r1
    9276:	70da      	strb	r2, [r3, #3]
	
	RegParams.band = ismBand;
    9278:	4b29      	ldr	r3, [pc, #164]	; (9320 <LORAReg_InitIN+0x40c>)
    927a:	1dfa      	adds	r2, r7, #7
    927c:	212f      	movs	r1, #47	; 0x2f
    927e:	7812      	ldrb	r2, [r2, #0]
    9280:	545a      	strb	r2, [r3, r1]
	
	if(ismBand == ISM_IND865)
    9282:	1dfb      	adds	r3, r7, #7
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	2b0f      	cmp	r3, #15
    9288:	d000      	beq.n	928c <LORAReg_InitIN+0x378>
    928a:	e08c      	b.n	93a6 <LORAReg_InitIN+0x492>
	{
		InitDefault865Channels();
    928c:	4b2c      	ldr	r3, [pc, #176]	; (9340 <LORAReg_InitIN+0x42c>)
    928e:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    9290:	4a23      	ldr	r2, [pc, #140]	; (9320 <LORAReg_InitIN+0x40c>)
    9292:	23e1      	movs	r3, #225	; 0xe1
    9294:	005b      	lsls	r3, r3, #1
    9296:	211e      	movs	r1, #30
    9298:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    929a:	4b21      	ldr	r3, [pc, #132]	; (9320 <LORAReg_InitIN+0x40c>)
    929c:	781a      	ldrb	r2, [r3, #0]
    929e:	7859      	ldrb	r1, [r3, #1]
    92a0:	0209      	lsls	r1, r1, #8
    92a2:	430a      	orrs	r2, r1
    92a4:	7899      	ldrb	r1, [r3, #2]
    92a6:	0409      	lsls	r1, r1, #16
    92a8:	430a      	orrs	r2, r1
    92aa:	78db      	ldrb	r3, [r3, #3]
    92ac:	061b      	lsls	r3, r3, #24
    92ae:	4313      	orrs	r3, r2
    92b0:	001a      	movs	r2, r3
    92b2:	4b24      	ldr	r3, [pc, #144]	; (9344 <LORAReg_InitIN+0x430>)
    92b4:	0010      	movs	r0, r2
    92b6:	0019      	movs	r1, r3
    92b8:	2340      	movs	r3, #64	; 0x40
    92ba:	001a      	movs	r2, r3
    92bc:	4b22      	ldr	r3, [pc, #136]	; (9348 <LORAReg_InitIN+0x434>)
    92be:	4798      	blx	r3
#if (ENABLE_PDS == 1)

		/*Fill PDS item id in RegParam Structure */
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    92c0:	4a17      	ldr	r2, [pc, #92]	; (9320 <LORAReg_InitIN+0x40c>)
    92c2:	2383      	movs	r3, #131	; 0x83
    92c4:	009b      	lsls	r3, r3, #2
    92c6:	2106      	movs	r1, #6
    92c8:	54d1      	strb	r1, [r2, r3]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    92ca:	4b15      	ldr	r3, [pc, #84]	; (9320 <LORAReg_InitIN+0x40c>)
    92cc:	4a1f      	ldr	r2, [pc, #124]	; (934c <LORAReg_InitIN+0x438>)
    92ce:	5c99      	ldrb	r1, [r3, r2]
    92d0:	2000      	movs	r0, #0
    92d2:	4001      	ands	r1, r0
    92d4:	5499      	strb	r1, [r3, r2]
    92d6:	189b      	adds	r3, r3, r2
    92d8:	785a      	ldrb	r2, [r3, #1]
    92da:	2100      	movs	r1, #0
    92dc:	400a      	ands	r2, r1
    92de:	1c11      	adds	r1, r2, #0
    92e0:	2206      	movs	r2, #6
    92e2:	430a      	orrs	r2, r1
    92e4:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    92e6:	4b0e      	ldr	r3, [pc, #56]	; (9320 <LORAReg_InitIN+0x40c>)
    92e8:	4a19      	ldr	r2, [pc, #100]	; (9350 <LORAReg_InitIN+0x43c>)
    92ea:	5c99      	ldrb	r1, [r3, r2]
    92ec:	2000      	movs	r0, #0
    92ee:	4001      	ands	r1, r0
    92f0:	1c08      	adds	r0, r1, #0
    92f2:	2101      	movs	r1, #1
    92f4:	4301      	orrs	r1, r0
    92f6:	5499      	strb	r1, [r3, r2]
    92f8:	189b      	adds	r3, r3, r2
    92fa:	785a      	ldrb	r2, [r3, #1]
    92fc:	2100      	movs	r1, #0
    92fe:	400a      	ands	r2, r1
    9300:	1c11      	adds	r1, r2, #0
    9302:	2206      	movs	r2, #6
    9304:	430a      	orrs	r2, r1
    9306:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    9308:	4b05      	ldr	r3, [pc, #20]	; (9320 <LORAReg_InitIN+0x40c>)
    930a:	4a12      	ldr	r2, [pc, #72]	; (9354 <LORAReg_InitIN+0x440>)
    930c:	5c99      	ldrb	r1, [r3, r2]
    930e:	2000      	movs	r0, #0
    9310:	4001      	ands	r1, r0
    9312:	5499      	strb	r1, [r3, r2]
    9314:	189b      	adds	r3, r3, r2
    9316:	785a      	ldrb	r2, [r3, #1]
    9318:	2100      	movs	r1, #0
    931a:	400a      	ands	r2, r1
    931c:	705a      	strb	r2, [r3, #1]
    931e:	e01b      	b.n	9358 <LORAReg_InitIN+0x444>
    9320:	200014a8 	.word	0x200014a8
    9324:	2000152c 	.word	0x2000152c
    9328:	200014ec 	.word	0x200014ec
    932c:	2000154c 	.word	0x2000154c
    9330:	2000160c 	.word	0x2000160c
    9334:	200014dd 	.word	0x200014dd
    9338:	200014e6 	.word	0x200014e6
    933c:	200014a4 	.word	0x200014a4
    9340:	000093ed 	.word	0x000093ed
    9344:	0002afe0 	.word	0x0002afe0
    9348:	00024149 	.word	0x00024149
    934c:	0000020f 	.word	0x0000020f
    9350:	00000211 	.word	0x00000211
    9354:	00000213 	.word	0x00000213
		RegParams.regParamItems.lastUsedSB = 0;
    9358:	4b1b      	ldr	r3, [pc, #108]	; (93c8 <LORAReg_InitIN+0x4b4>)
    935a:	4a1c      	ldr	r2, [pc, #112]	; (93cc <LORAReg_InitIN+0x4b8>)
    935c:	5c99      	ldrb	r1, [r3, r2]
    935e:	2000      	movs	r0, #0
    9360:	4001      	ands	r1, r0
    9362:	5499      	strb	r1, [r3, r2]
    9364:	189b      	adds	r3, r3, r2
    9366:	785a      	ldrb	r2, [r3, #1]
    9368:	2100      	movs	r1, #0
    936a:	400a      	ands	r2, r1
    936c:	705a      	strb	r2, [r3, #1]
		
		PdsFileMarks_t filemarks;
		/* File ID IND - Register */
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    936e:	230c      	movs	r3, #12
    9370:	18fb      	adds	r3, r7, r3
    9372:	4a17      	ldr	r2, [pc, #92]	; (93d0 <LORAReg_InitIN+0x4bc>)
    9374:	601a      	str	r2, [r3, #0]
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    9376:	230c      	movs	r3, #12
    9378:	18fb      	adds	r3, r7, r3
    937a:	2202      	movs	r2, #2
    937c:	711a      	strb	r2, [r3, #4]
		filemarks.itemListAddr = (ItemMap_t *)&pds_reg_ind_item_list;
    937e:	230c      	movs	r3, #12
    9380:	18fb      	adds	r3, r7, r3
    9382:	4a14      	ldr	r2, [pc, #80]	; (93d4 <LORAReg_InitIN+0x4c0>)
    9384:	609a      	str	r2, [r3, #8]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    9386:	230c      	movs	r3, #12
    9388:	18fb      	adds	r3, r7, r3
    938a:	4a13      	ldr	r2, [pc, #76]	; (93d8 <LORAReg_InitIN+0x4c4>)
    938c:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    938e:	230c      	movs	r3, #12
    9390:	18fb      	adds	r3, r7, r3
    9392:	466a      	mov	r2, sp
    9394:	68d9      	ldr	r1, [r3, #12]
    9396:	6011      	str	r1, [r2, #0]
    9398:	6819      	ldr	r1, [r3, #0]
    939a:	685a      	ldr	r2, [r3, #4]
    939c:	689b      	ldr	r3, [r3, #8]
    939e:	2006      	movs	r0, #6
    93a0:	4c0e      	ldr	r4, [pc, #56]	; (93dc <LORAReg_InitIN+0x4c8>)
    93a2:	47a0      	blx	r4
    93a4:	e003      	b.n	93ae <LORAReg_InitIN+0x49a>
#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    93a6:	231f      	movs	r3, #31
    93a8:	18fb      	adds	r3, r7, r3
    93aa:	220a      	movs	r2, #10
    93ac:	701a      	strb	r2, [r3, #0]
	}
	
    LORAREG_InitGetAttrFnPtrsIN();
    93ae:	4b0c      	ldr	r3, [pc, #48]	; (93e0 <LORAReg_InitIN+0x4cc>)
    93b0:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    93b2:	4b0c      	ldr	r3, [pc, #48]	; (93e4 <LORAReg_InitIN+0x4d0>)
    93b4:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    93b6:	4b0c      	ldr	r3, [pc, #48]	; (93e8 <LORAReg_InitIN+0x4d4>)
    93b8:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
    93ba:	231f      	movs	r3, #31
    93bc:	18fb      	adds	r3, r7, r3
    93be:	781b      	ldrb	r3, [r3, #0]
}
    93c0:	0018      	movs	r0, r3
    93c2:	46bd      	mov	sp, r7
    93c4:	b009      	add	sp, #36	; 0x24
    93c6:	bd90      	pop	{r4, r7, pc}
    93c8:	200014a8 	.word	0x200014a8
    93cc:	0000020d 	.word	0x0000020d
    93d0:	20001294 	.word	0x20001294
    93d4:	0002b020 	.word	0x0002b020
    93d8:	000094d9 	.word	0x000094d9
    93dc:	00014001 	.word	0x00014001
    93e0:	0000af09 	.word	0x0000af09
    93e4:	0000cec5 	.word	0x0000cec5
    93e8:	0000d259 	.word	0x0000d259

000093ec <InitDefault865Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if(IND_BAND == 1)
static void InitDefault865Channels (void)
{
    93ec:	b580      	push	{r7, lr}
    93ee:	b082      	sub	sp, #8
    93f0:	af00      	add	r7, sp, #0
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels865) );
    93f2:	4b34      	ldr	r3, [pc, #208]	; (94c4 <InitDefault865Channels+0xd8>)
    93f4:	791a      	ldrb	r2, [r3, #4]
    93f6:	7959      	ldrb	r1, [r3, #5]
    93f8:	0209      	lsls	r1, r1, #8
    93fa:	430a      	orrs	r2, r1
    93fc:	7999      	ldrb	r1, [r3, #6]
    93fe:	0409      	lsls	r1, r1, #16
    9400:	430a      	orrs	r2, r1
    9402:	79db      	ldrb	r3, [r3, #7]
    9404:	061b      	lsls	r3, r3, #24
    9406:	4313      	orrs	r3, r2
    9408:	2206      	movs	r2, #6
    940a:	2100      	movs	r1, #0
    940c:	0018      	movs	r0, r3
    940e:	4b2e      	ldr	r3, [pc, #184]	; (94c8 <InitDefault865Channels+0xdc>)
    9410:	4798      	blx	r3
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels865) );
    9412:	4b2c      	ldr	r3, [pc, #176]	; (94c4 <InitDefault865Channels+0xd8>)
    9414:	7a1a      	ldrb	r2, [r3, #8]
    9416:	7a59      	ldrb	r1, [r3, #9]
    9418:	0209      	lsls	r1, r1, #8
    941a:	430a      	orrs	r2, r1
    941c:	7a99      	ldrb	r1, [r3, #10]
    941e:	0409      	lsls	r1, r1, #16
    9420:	430a      	orrs	r2, r1
    9422:	7adb      	ldrb	r3, [r3, #11]
    9424:	061b      	lsls	r3, r3, #24
    9426:	4313      	orrs	r3, r2
    9428:	2224      	movs	r2, #36	; 0x24
    942a:	2100      	movs	r1, #0
    942c:	0018      	movs	r0, r3
    942e:	4b26      	ldr	r3, [pc, #152]	; (94c8 <InitDefault865Channels+0xdc>)
    9430:	4798      	blx	r3
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    9432:	4b24      	ldr	r3, [pc, #144]	; (94c4 <InitDefault865Channels+0xd8>)
    9434:	791a      	ldrb	r2, [r3, #4]
    9436:	7959      	ldrb	r1, [r3, #5]
    9438:	0209      	lsls	r1, r1, #8
    943a:	430a      	orrs	r2, r1
    943c:	7999      	ldrb	r1, [r3, #6]
    943e:	0409      	lsls	r1, r1, #16
    9440:	430a      	orrs	r2, r1
    9442:	79db      	ldrb	r3, [r3, #7]
    9444:	061b      	lsls	r3, r3, #24
    9446:	4313      	orrs	r3, r2
    9448:	001a      	movs	r2, r3
    944a:	4b20      	ldr	r3, [pc, #128]	; (94cc <InitDefault865Channels+0xe0>)
    944c:	0010      	movs	r0, r2
    944e:	0019      	movs	r1, r3
    9450:	2306      	movs	r3, #6
    9452:	001a      	movs	r2, r3
    9454:	4b1e      	ldr	r3, [pc, #120]	; (94d0 <InitDefault865Channels+0xe4>)
    9456:	4798      	blx	r3
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    9458:	4b1a      	ldr	r3, [pc, #104]	; (94c4 <InitDefault865Channels+0xd8>)
    945a:	7a1a      	ldrb	r2, [r3, #8]
    945c:	7a59      	ldrb	r1, [r3, #9]
    945e:	0209      	lsls	r1, r1, #8
    9460:	430a      	orrs	r2, r1
    9462:	7a99      	ldrb	r1, [r3, #10]
    9464:	0409      	lsls	r1, r1, #16
    9466:	430a      	orrs	r2, r1
    9468:	7adb      	ldrb	r3, [r3, #11]
    946a:	061b      	lsls	r3, r3, #24
    946c:	4313      	orrs	r3, r2
    946e:	001a      	movs	r2, r3
    9470:	4b18      	ldr	r3, [pc, #96]	; (94d4 <InitDefault865Channels+0xe8>)
    9472:	0010      	movs	r0, r2
    9474:	0019      	movs	r1, r3
    9476:	2324      	movs	r3, #36	; 0x24
    9478:	001a      	movs	r2, r3
    947a:	4b15      	ldr	r3, [pc, #84]	; (94d0 <InitDefault865Channels+0xe4>)
    947c:	4798      	blx	r3
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    947e:	1dfb      	adds	r3, r7, #7
    9480:	2203      	movs	r2, #3
    9482:	701a      	strb	r2, [r3, #0]
    9484:	e016      	b.n	94b4 <InitDefault865Channels+0xc8>
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9486:	4b0f      	ldr	r3, [pc, #60]	; (94c4 <InitDefault865Channels+0xd8>)
    9488:	791a      	ldrb	r2, [r3, #4]
    948a:	7959      	ldrb	r1, [r3, #5]
    948c:	0209      	lsls	r1, r1, #8
    948e:	430a      	orrs	r2, r1
    9490:	7999      	ldrb	r1, [r3, #6]
    9492:	0409      	lsls	r1, r1, #16
    9494:	430a      	orrs	r2, r1
    9496:	79db      	ldrb	r3, [r3, #7]
    9498:	061b      	lsls	r3, r3, #24
    949a:	4313      	orrs	r3, r2
    949c:	001a      	movs	r2, r3
    949e:	1dfb      	adds	r3, r7, #7
    94a0:	781b      	ldrb	r3, [r3, #0]
    94a2:	005b      	lsls	r3, r3, #1
    94a4:	18d3      	adds	r3, r2, r3
    94a6:	22ff      	movs	r2, #255	; 0xff
    94a8:	705a      	strb	r2, [r3, #1]
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    94aa:	1dfb      	adds	r3, r7, #7
    94ac:	781a      	ldrb	r2, [r3, #0]
    94ae:	1dfb      	adds	r3, r7, #7
    94b0:	3201      	adds	r2, #1
    94b2:	701a      	strb	r2, [r3, #0]
    94b4:	1dfb      	adds	r3, r7, #7
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	2b0f      	cmp	r3, #15
    94ba:	d9e4      	bls.n	9486 <InitDefault865Channels+0x9a>
    }
}
    94bc:	46c0      	nop			; (mov r8, r8)
    94be:	46bd      	mov	sp, r7
    94c0:	b002      	add	sp, #8
    94c2:	bd80      	pop	{r7, pc}
    94c4:	200014a8 	.word	0x200014a8
    94c8:	000241cd 	.word	0x000241cd
    94cc:	0002afb4 	.word	0x0002afb4
    94d0:	00024149 	.word	0x00024149
    94d4:	0002afbc 	.word	0x0002afbc

000094d8 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
    94d8:	b580      	push	{r7, lr}
    94da:	af00      	add	r7, sp, #0
	
}
    94dc:	46c0      	nop			; (mov r8, r8)
    94de:	46bd      	mov	sp, r7
    94e0:	bd80      	pop	{r7, pc}
	...

000094e4 <LORAReg_InitJP>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitJP(IsmBand_t ismBand)
{
    94e4:	b590      	push	{r4, r7, lr}
    94e6:	b08b      	sub	sp, #44	; 0x2c
    94e8:	af02      	add	r7, sp, #8
    94ea:	0002      	movs	r2, r0
    94ec:	1dfb      	adds	r3, r7, #7
    94ee:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    94f0:	231f      	movs	r3, #31
    94f2:	18fb      	adds	r3, r7, r3
    94f4:	2208      	movs	r2, #8
    94f6:	701a      	strb	r2, [r3, #0]

#if (JPN_BAND == 1)

	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    94f8:	4bfe      	ldr	r3, [pc, #1016]	; (98f4 <LORAReg_InitJP+0x410>)
    94fa:	2226      	movs	r2, #38	; 0x26
    94fc:	2103      	movs	r1, #3
    94fe:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    9500:	4bfc      	ldr	r3, [pc, #1008]	; (98f4 <LORAReg_InitJP+0x410>)
    9502:	222a      	movs	r2, #42	; 0x2a
    9504:	2110      	movs	r1, #16
    9506:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    9508:	4bfa      	ldr	r3, [pc, #1000]	; (98f4 <LORAReg_InitJP+0x410>)
    950a:	2229      	movs	r2, #41	; 0x29
    950c:	2102      	movs	r1, #2
    950e:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    9510:	4bf8      	ldr	r3, [pc, #992]	; (98f4 <LORAReg_InitJP+0x410>)
    9512:	2227      	movs	r2, #39	; 0x27
    9514:	2101      	movs	r1, #1
    9516:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    9518:	4bf6      	ldr	r3, [pc, #984]	; (98f4 <LORAReg_InitJP+0x410>)
    951a:	4af7      	ldr	r2, [pc, #988]	; (98f8 <LORAReg_InitJP+0x414>)
    951c:	21ff      	movs	r1, #255	; 0xff
    951e:	4011      	ands	r1, r2
    9520:	000c      	movs	r4, r1
    9522:	7919      	ldrb	r1, [r3, #4]
    9524:	2000      	movs	r0, #0
    9526:	4001      	ands	r1, r0
    9528:	1c08      	adds	r0, r1, #0
    952a:	1c21      	adds	r1, r4, #0
    952c:	4301      	orrs	r1, r0
    952e:	7119      	strb	r1, [r3, #4]
    9530:	0a11      	lsrs	r1, r2, #8
    9532:	20ff      	movs	r0, #255	; 0xff
    9534:	4001      	ands	r1, r0
    9536:	000c      	movs	r4, r1
    9538:	7959      	ldrb	r1, [r3, #5]
    953a:	2000      	movs	r0, #0
    953c:	4001      	ands	r1, r0
    953e:	1c08      	adds	r0, r1, #0
    9540:	1c21      	adds	r1, r4, #0
    9542:	4301      	orrs	r1, r0
    9544:	7159      	strb	r1, [r3, #5]
    9546:	0c11      	lsrs	r1, r2, #16
    9548:	20ff      	movs	r0, #255	; 0xff
    954a:	4001      	ands	r1, r0
    954c:	000c      	movs	r4, r1
    954e:	7999      	ldrb	r1, [r3, #6]
    9550:	2000      	movs	r0, #0
    9552:	4001      	ands	r1, r0
    9554:	1c08      	adds	r0, r1, #0
    9556:	1c21      	adds	r1, r4, #0
    9558:	4301      	orrs	r1, r0
    955a:	7199      	strb	r1, [r3, #6]
    955c:	0e10      	lsrs	r0, r2, #24
    955e:	79da      	ldrb	r2, [r3, #7]
    9560:	2100      	movs	r1, #0
    9562:	400a      	ands	r2, r1
    9564:	1c11      	adds	r1, r2, #0
    9566:	1c02      	adds	r2, r0, #0
    9568:	430a      	orrs	r2, r1
    956a:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    956c:	4be1      	ldr	r3, [pc, #900]	; (98f4 <LORAReg_InitJP+0x410>)
    956e:	4ae3      	ldr	r2, [pc, #908]	; (98fc <LORAReg_InitJP+0x418>)
    9570:	21ff      	movs	r1, #255	; 0xff
    9572:	4011      	ands	r1, r2
    9574:	000c      	movs	r4, r1
    9576:	7819      	ldrb	r1, [r3, #0]
    9578:	2000      	movs	r0, #0
    957a:	4001      	ands	r1, r0
    957c:	1c08      	adds	r0, r1, #0
    957e:	1c21      	adds	r1, r4, #0
    9580:	4301      	orrs	r1, r0
    9582:	7019      	strb	r1, [r3, #0]
    9584:	0a11      	lsrs	r1, r2, #8
    9586:	20ff      	movs	r0, #255	; 0xff
    9588:	4001      	ands	r1, r0
    958a:	000c      	movs	r4, r1
    958c:	7859      	ldrb	r1, [r3, #1]
    958e:	2000      	movs	r0, #0
    9590:	4001      	ands	r1, r0
    9592:	1c08      	adds	r0, r1, #0
    9594:	1c21      	adds	r1, r4, #0
    9596:	4301      	orrs	r1, r0
    9598:	7059      	strb	r1, [r3, #1]
    959a:	0c11      	lsrs	r1, r2, #16
    959c:	20ff      	movs	r0, #255	; 0xff
    959e:	4001      	ands	r1, r0
    95a0:	000c      	movs	r4, r1
    95a2:	7899      	ldrb	r1, [r3, #2]
    95a4:	2000      	movs	r0, #0
    95a6:	4001      	ands	r1, r0
    95a8:	1c08      	adds	r0, r1, #0
    95aa:	1c21      	adds	r1, r4, #0
    95ac:	4301      	orrs	r1, r0
    95ae:	7099      	strb	r1, [r3, #2]
    95b0:	0e10      	lsrs	r0, r2, #24
    95b2:	78da      	ldrb	r2, [r3, #3]
    95b4:	2100      	movs	r1, #0
    95b6:	400a      	ands	r2, r1
    95b8:	1c11      	adds	r1, r2, #0
    95ba:	1c02      	adds	r2, r0, #0
    95bc:	430a      	orrs	r2, r1
    95be:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    95c0:	4bcc      	ldr	r3, [pc, #816]	; (98f4 <LORAReg_InitJP+0x410>)
    95c2:	4acf      	ldr	r2, [pc, #828]	; (9900 <LORAReg_InitJP+0x41c>)
    95c4:	21ff      	movs	r1, #255	; 0xff
    95c6:	4011      	ands	r1, r2
    95c8:	000c      	movs	r4, r1
    95ca:	7b19      	ldrb	r1, [r3, #12]
    95cc:	2000      	movs	r0, #0
    95ce:	4001      	ands	r1, r0
    95d0:	1c08      	adds	r0, r1, #0
    95d2:	1c21      	adds	r1, r4, #0
    95d4:	4301      	orrs	r1, r0
    95d6:	7319      	strb	r1, [r3, #12]
    95d8:	0a11      	lsrs	r1, r2, #8
    95da:	20ff      	movs	r0, #255	; 0xff
    95dc:	4001      	ands	r1, r0
    95de:	000c      	movs	r4, r1
    95e0:	7b59      	ldrb	r1, [r3, #13]
    95e2:	2000      	movs	r0, #0
    95e4:	4001      	ands	r1, r0
    95e6:	1c08      	adds	r0, r1, #0
    95e8:	1c21      	adds	r1, r4, #0
    95ea:	4301      	orrs	r1, r0
    95ec:	7359      	strb	r1, [r3, #13]
    95ee:	0c11      	lsrs	r1, r2, #16
    95f0:	20ff      	movs	r0, #255	; 0xff
    95f2:	4001      	ands	r1, r0
    95f4:	000c      	movs	r4, r1
    95f6:	7b99      	ldrb	r1, [r3, #14]
    95f8:	2000      	movs	r0, #0
    95fa:	4001      	ands	r1, r0
    95fc:	1c08      	adds	r0, r1, #0
    95fe:	1c21      	adds	r1, r4, #0
    9600:	4301      	orrs	r1, r0
    9602:	7399      	strb	r1, [r3, #14]
    9604:	0e10      	lsrs	r0, r2, #24
    9606:	7bda      	ldrb	r2, [r3, #15]
    9608:	2100      	movs	r1, #0
    960a:	400a      	ands	r2, r1
    960c:	1c11      	adds	r1, r2, #0
    960e:	1c02      	adds	r2, r0, #0
    9610:	430a      	orrs	r2, r1
    9612:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    9614:	4bb7      	ldr	r3, [pc, #732]	; (98f4 <LORAReg_InitJP+0x410>)
    9616:	4abb      	ldr	r2, [pc, #748]	; (9904 <LORAReg_InitJP+0x420>)
    9618:	21ff      	movs	r1, #255	; 0xff
    961a:	4011      	ands	r1, r2
    961c:	000c      	movs	r4, r1
    961e:	7a19      	ldrb	r1, [r3, #8]
    9620:	2000      	movs	r0, #0
    9622:	4001      	ands	r1, r0
    9624:	1c08      	adds	r0, r1, #0
    9626:	1c21      	adds	r1, r4, #0
    9628:	4301      	orrs	r1, r0
    962a:	7219      	strb	r1, [r3, #8]
    962c:	0a11      	lsrs	r1, r2, #8
    962e:	20ff      	movs	r0, #255	; 0xff
    9630:	4001      	ands	r1, r0
    9632:	000c      	movs	r4, r1
    9634:	7a59      	ldrb	r1, [r3, #9]
    9636:	2000      	movs	r0, #0
    9638:	4001      	ands	r1, r0
    963a:	1c08      	adds	r0, r1, #0
    963c:	1c21      	adds	r1, r4, #0
    963e:	4301      	orrs	r1, r0
    9640:	7259      	strb	r1, [r3, #9]
    9642:	0c11      	lsrs	r1, r2, #16
    9644:	20ff      	movs	r0, #255	; 0xff
    9646:	4001      	ands	r1, r0
    9648:	000c      	movs	r4, r1
    964a:	7a99      	ldrb	r1, [r3, #10]
    964c:	2000      	movs	r0, #0
    964e:	4001      	ands	r1, r0
    9650:	1c08      	adds	r0, r1, #0
    9652:	1c21      	adds	r1, r4, #0
    9654:	4301      	orrs	r1, r0
    9656:	7299      	strb	r1, [r3, #10]
    9658:	0e10      	lsrs	r0, r2, #24
    965a:	7ada      	ldrb	r2, [r3, #11]
    965c:	2100      	movs	r1, #0
    965e:	400a      	ands	r2, r1
    9660:	1c11      	adds	r1, r2, #0
    9662:	1c02      	adds	r2, r0, #0
    9664:	430a      	orrs	r2, r1
    9666:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    9668:	4ba2      	ldr	r3, [pc, #648]	; (98f4 <LORAReg_InitJP+0x410>)
    966a:	4aa7      	ldr	r2, [pc, #668]	; (9908 <LORAReg_InitJP+0x424>)
    966c:	21ff      	movs	r1, #255	; 0xff
    966e:	4011      	ands	r1, r2
    9670:	000c      	movs	r4, r1
    9672:	7c19      	ldrb	r1, [r3, #16]
    9674:	2000      	movs	r0, #0
    9676:	4001      	ands	r1, r0
    9678:	1c08      	adds	r0, r1, #0
    967a:	1c21      	adds	r1, r4, #0
    967c:	4301      	orrs	r1, r0
    967e:	7419      	strb	r1, [r3, #16]
    9680:	0a11      	lsrs	r1, r2, #8
    9682:	20ff      	movs	r0, #255	; 0xff
    9684:	4001      	ands	r1, r0
    9686:	000c      	movs	r4, r1
    9688:	7c59      	ldrb	r1, [r3, #17]
    968a:	2000      	movs	r0, #0
    968c:	4001      	ands	r1, r0
    968e:	1c08      	adds	r0, r1, #0
    9690:	1c21      	adds	r1, r4, #0
    9692:	4301      	orrs	r1, r0
    9694:	7459      	strb	r1, [r3, #17]
    9696:	0c11      	lsrs	r1, r2, #16
    9698:	20ff      	movs	r0, #255	; 0xff
    969a:	4001      	ands	r1, r0
    969c:	000c      	movs	r4, r1
    969e:	7c99      	ldrb	r1, [r3, #18]
    96a0:	2000      	movs	r0, #0
    96a2:	4001      	ands	r1, r0
    96a4:	1c08      	adds	r0, r1, #0
    96a6:	1c21      	adds	r1, r4, #0
    96a8:	4301      	orrs	r1, r0
    96aa:	7499      	strb	r1, [r3, #18]
    96ac:	0e10      	lsrs	r0, r2, #24
    96ae:	7cda      	ldrb	r2, [r3, #19]
    96b0:	2100      	movs	r1, #0
    96b2:	400a      	ands	r2, r1
    96b4:	1c11      	adds	r1, r2, #0
    96b6:	1c02      	adds	r2, r0, #0
    96b8:	430a      	orrs	r2, r1
    96ba:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    96bc:	4b8d      	ldr	r3, [pc, #564]	; (98f4 <LORAReg_InitJP+0x410>)
    96be:	4a93      	ldr	r2, [pc, #588]	; (990c <LORAReg_InitJP+0x428>)
    96c0:	21ff      	movs	r1, #255	; 0xff
    96c2:	4011      	ands	r1, r2
    96c4:	000c      	movs	r4, r1
    96c6:	7d19      	ldrb	r1, [r3, #20]
    96c8:	2000      	movs	r0, #0
    96ca:	4001      	ands	r1, r0
    96cc:	1c08      	adds	r0, r1, #0
    96ce:	1c21      	adds	r1, r4, #0
    96d0:	4301      	orrs	r1, r0
    96d2:	7519      	strb	r1, [r3, #20]
    96d4:	0a11      	lsrs	r1, r2, #8
    96d6:	20ff      	movs	r0, #255	; 0xff
    96d8:	4001      	ands	r1, r0
    96da:	000c      	movs	r4, r1
    96dc:	7d59      	ldrb	r1, [r3, #21]
    96de:	2000      	movs	r0, #0
    96e0:	4001      	ands	r1, r0
    96e2:	1c08      	adds	r0, r1, #0
    96e4:	1c21      	adds	r1, r4, #0
    96e6:	4301      	orrs	r1, r0
    96e8:	7559      	strb	r1, [r3, #21]
    96ea:	0c11      	lsrs	r1, r2, #16
    96ec:	20ff      	movs	r0, #255	; 0xff
    96ee:	4001      	ands	r1, r0
    96f0:	000c      	movs	r4, r1
    96f2:	7d99      	ldrb	r1, [r3, #22]
    96f4:	2000      	movs	r0, #0
    96f6:	4001      	ands	r1, r0
    96f8:	1c08      	adds	r0, r1, #0
    96fa:	1c21      	adds	r1, r4, #0
    96fc:	4301      	orrs	r1, r0
    96fe:	7599      	strb	r1, [r3, #22]
    9700:	0e10      	lsrs	r0, r2, #24
    9702:	7dda      	ldrb	r2, [r3, #23]
    9704:	2100      	movs	r1, #0
    9706:	400a      	ands	r2, r1
    9708:	1c11      	adds	r1, r2, #0
    970a:	1c02      	adds	r2, r0, #0
    970c:	430a      	orrs	r2, r1
    970e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    9710:	4b78      	ldr	r3, [pc, #480]	; (98f4 <LORAReg_InitJP+0x410>)
    9712:	4a7f      	ldr	r2, [pc, #508]	; (9910 <LORAReg_InitJP+0x42c>)
    9714:	21ff      	movs	r1, #255	; 0xff
    9716:	4011      	ands	r1, r2
    9718:	000c      	movs	r4, r1
    971a:	7e19      	ldrb	r1, [r3, #24]
    971c:	2000      	movs	r0, #0
    971e:	4001      	ands	r1, r0
    9720:	1c08      	adds	r0, r1, #0
    9722:	1c21      	adds	r1, r4, #0
    9724:	4301      	orrs	r1, r0
    9726:	7619      	strb	r1, [r3, #24]
    9728:	0a11      	lsrs	r1, r2, #8
    972a:	20ff      	movs	r0, #255	; 0xff
    972c:	4001      	ands	r1, r0
    972e:	000c      	movs	r4, r1
    9730:	7e59      	ldrb	r1, [r3, #25]
    9732:	2000      	movs	r0, #0
    9734:	4001      	ands	r1, r0
    9736:	1c08      	adds	r0, r1, #0
    9738:	1c21      	adds	r1, r4, #0
    973a:	4301      	orrs	r1, r0
    973c:	7659      	strb	r1, [r3, #25]
    973e:	0c11      	lsrs	r1, r2, #16
    9740:	20ff      	movs	r0, #255	; 0xff
    9742:	4001      	ands	r1, r0
    9744:	000c      	movs	r4, r1
    9746:	7e99      	ldrb	r1, [r3, #26]
    9748:	2000      	movs	r0, #0
    974a:	4001      	ands	r1, r0
    974c:	1c08      	adds	r0, r1, #0
    974e:	1c21      	adds	r1, r4, #0
    9750:	4301      	orrs	r1, r0
    9752:	7699      	strb	r1, [r3, #26]
    9754:	0e10      	lsrs	r0, r2, #24
    9756:	7eda      	ldrb	r2, [r3, #27]
    9758:	2100      	movs	r1, #0
    975a:	400a      	ands	r2, r1
    975c:	1c11      	adds	r1, r2, #0
    975e:	1c02      	adds	r2, r0, #0
    9760:	430a      	orrs	r2, r1
    9762:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    9764:	4b63      	ldr	r3, [pc, #396]	; (98f4 <LORAReg_InitJP+0x410>)
    9766:	2222      	movs	r2, #34	; 0x22
    9768:	2102      	movs	r1, #2
    976a:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    976c:	4b61      	ldr	r3, [pc, #388]	; (98f4 <LORAReg_InitJP+0x410>)
    976e:	2223      	movs	r2, #35	; 0x23
    9770:	2102      	movs	r1, #2
    9772:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    9774:	4b5f      	ldr	r3, [pc, #380]	; (98f4 <LORAReg_InitJP+0x410>)
    9776:	7f1a      	ldrb	r2, [r3, #28]
    9778:	2100      	movs	r1, #0
    977a:	400a      	ands	r2, r1
    977c:	771a      	strb	r2, [r3, #28]
    977e:	7f5a      	ldrb	r2, [r3, #29]
    9780:	2100      	movs	r1, #0
    9782:	400a      	ands	r2, r1
    9784:	1c11      	adds	r1, r2, #0
    9786:	2216      	movs	r2, #22
    9788:	4252      	negs	r2, r2
    978a:	430a      	orrs	r2, r1
    978c:	775a      	strb	r2, [r3, #29]
    978e:	7f9a      	ldrb	r2, [r3, #30]
    9790:	2100      	movs	r1, #0
    9792:	400a      	ands	r2, r1
    9794:	1c11      	adds	r1, r2, #0
    9796:	2206      	movs	r2, #6
    9798:	430a      	orrs	r2, r1
    979a:	779a      	strb	r2, [r3, #30]
    979c:	7fda      	ldrb	r2, [r3, #31]
    979e:	2100      	movs	r1, #0
    97a0:	400a      	ands	r2, r1
    97a2:	1c11      	adds	r1, r2, #0
    97a4:	2237      	movs	r2, #55	; 0x37
    97a6:	430a      	orrs	r2, r1
    97a8:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    97aa:	4b52      	ldr	r3, [pc, #328]	; (98f4 <LORAReg_InitJP+0x410>)
    97ac:	2221      	movs	r2, #33	; 0x21
    97ae:	2102      	movs	r1, #2
    97b0:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    97b2:	4b50      	ldr	r3, [pc, #320]	; (98f4 <LORAReg_InitJP+0x410>)
    97b4:	2220      	movs	r2, #32
    97b6:	2136      	movs	r1, #54	; 0x36
    97b8:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    97ba:	4b4e      	ldr	r3, [pc, #312]	; (98f4 <LORAReg_InitJP+0x410>)
    97bc:	2224      	movs	r2, #36	; 0x24
    97be:	2107      	movs	r1, #7
    97c0:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    97c2:	4b4c      	ldr	r3, [pc, #304]	; (98f4 <LORAReg_InitJP+0x410>)
    97c4:	2225      	movs	r2, #37	; 0x25
    97c6:	2100      	movs	r1, #0
    97c8:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    97ca:	4a4a      	ldr	r2, [pc, #296]	; (98f4 <LORAReg_InitJP+0x410>)
    97cc:	23df      	movs	r3, #223	; 0xdf
    97ce:	005b      	lsls	r3, r3, #1
    97d0:	2105      	movs	r1, #5
    97d2:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    97d4:	4a47      	ldr	r2, [pc, #284]	; (98f4 <LORAReg_InitJP+0x410>)
    97d6:	23c0      	movs	r3, #192	; 0xc0
    97d8:	33ff      	adds	r3, #255	; 0xff
    97da:	21b0      	movs	r1, #176	; 0xb0
    97dc:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    97de:	4a45      	ldr	r2, [pc, #276]	; (98f4 <LORAReg_InitJP+0x410>)
    97e0:	23e0      	movs	r3, #224	; 0xe0
    97e2:	005b      	lsls	r3, r3, #1
    97e4:	2105      	movs	r1, #5
    97e6:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    97e8:	4a42      	ldr	r2, [pc, #264]	; (98f4 <LORAReg_InitJP+0x410>)
    97ea:	23c2      	movs	r3, #194	; 0xc2
    97ec:	33ff      	adds	r3, #255	; 0xff
    97ee:	2102      	movs	r1, #2
    97f0:	54d1      	strb	r1, [r2, r3]
	RegParams.Rx1DrOffset = 7;
    97f2:	4b40      	ldr	r3, [pc, #256]	; (98f4 <LORAReg_InitJP+0x410>)
    97f4:	222c      	movs	r2, #44	; 0x2c
    97f6:	2107      	movs	r1, #7
    97f8:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    97fa:	4b3e      	ldr	r3, [pc, #248]	; (98f4 <LORAReg_InitJP+0x410>)
    97fc:	222d      	movs	r2, #45	; 0x2d
    97fe:	2107      	movs	r1, #7
    9800:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_JP;
    9802:	4b3c      	ldr	r3, [pc, #240]	; (98f4 <LORAReg_InitJP+0x410>)
    9804:	222e      	movs	r2, #46	; 0x2e
    9806:	2101      	movs	r1, #1
    9808:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    980a:	4b3a      	ldr	r3, [pc, #232]	; (98f4 <LORAReg_InitJP+0x410>)
    980c:	2228      	movs	r2, #40	; 0x28
    980e:	2110      	movs	r1, #16
    9810:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    9812:	4b40      	ldr	r3, [pc, #256]	; (9914 <LORAReg_InitJP+0x430>)
    9814:	7819      	ldrb	r1, [r3, #0]
    9816:	4a37      	ldr	r2, [pc, #220]	; (98f4 <LORAReg_InitJP+0x410>)
    9818:	23ae      	movs	r3, #174	; 0xae
    981a:	33ff      	adds	r3, #255	; 0xff
    981c:	54d1      	strb	r1, [r2, r3]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    981e:	4b35      	ldr	r3, [pc, #212]	; (98f4 <LORAReg_InitJP+0x410>)
    9820:	7c1a      	ldrb	r2, [r3, #16]
    9822:	7c59      	ldrb	r1, [r3, #17]
    9824:	0209      	lsls	r1, r1, #8
    9826:	430a      	orrs	r2, r1
    9828:	7c99      	ldrb	r1, [r3, #18]
    982a:	0409      	lsls	r1, r1, #16
    982c:	430a      	orrs	r2, r1
    982e:	7cdb      	ldrb	r3, [r3, #19]
    9830:	061b      	lsls	r3, r3, #24
    9832:	4313      	orrs	r3, r2
    9834:	001a      	movs	r2, r3
    9836:	4b37      	ldr	r3, [pc, #220]	; (9914 <LORAReg_InitJP+0x430>)
    9838:	785b      	ldrb	r3, [r3, #1]
    983a:	7113      	strb	r3, [r2, #4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    983c:	4b2d      	ldr	r3, [pc, #180]	; (98f4 <LORAReg_InitJP+0x410>)
    983e:	7e1a      	ldrb	r2, [r3, #24]
    9840:	7e59      	ldrb	r1, [r3, #25]
    9842:	0209      	lsls	r1, r1, #8
    9844:	430a      	orrs	r2, r1
    9846:	7e99      	ldrb	r1, [r3, #26]
    9848:	0409      	lsls	r1, r1, #16
    984a:	430a      	orrs	r2, r1
    984c:	7edb      	ldrb	r3, [r3, #27]
    984e:	061b      	lsls	r3, r3, #24
    9850:	4313      	orrs	r3, r2
    9852:	001a      	movs	r2, r3
    9854:	4b2f      	ldr	r3, [pc, #188]	; (9914 <LORAReg_InitJP+0x430>)
    9856:	789b      	ldrb	r3, [r3, #2]
    9858:	7013      	strb	r3, [r2, #0]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    985a:	4b26      	ldr	r3, [pc, #152]	; (98f4 <LORAReg_InitJP+0x410>)
    985c:	7d1a      	ldrb	r2, [r3, #20]
    985e:	7d59      	ldrb	r1, [r3, #21]
    9860:	0209      	lsls	r1, r1, #8
    9862:	430a      	orrs	r2, r1
    9864:	7d99      	ldrb	r1, [r3, #22]
    9866:	0409      	lsls	r1, r1, #16
    9868:	430a      	orrs	r2, r1
    986a:	7ddb      	ldrb	r3, [r3, #23]
    986c:	061b      	lsls	r3, r3, #24
    986e:	4313      	orrs	r3, r2
    9870:	001a      	movs	r2, r3
    9872:	4b28      	ldr	r3, [pc, #160]	; (9914 <LORAReg_InitJP+0x430>)
    9874:	78db      	ldrb	r3, [r3, #3]
    9876:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9878:	4b1e      	ldr	r3, [pc, #120]	; (98f4 <LORAReg_InitJP+0x410>)
    987a:	7d1a      	ldrb	r2, [r3, #20]
    987c:	7d59      	ldrb	r1, [r3, #21]
    987e:	0209      	lsls	r1, r1, #8
    9880:	430a      	orrs	r2, r1
    9882:	7d99      	ldrb	r1, [r3, #22]
    9884:	0409      	lsls	r1, r1, #16
    9886:	430a      	orrs	r2, r1
    9888:	7ddb      	ldrb	r3, [r3, #23]
    988a:	061b      	lsls	r3, r3, #24
    988c:	4313      	orrs	r3, r2
    988e:	791a      	ldrb	r2, [r3, #4]
    9890:	2100      	movs	r1, #0
    9892:	400a      	ands	r2, r1
    9894:	711a      	strb	r2, [r3, #4]
    9896:	795a      	ldrb	r2, [r3, #5]
    9898:	2100      	movs	r1, #0
    989a:	400a      	ands	r2, r1
    989c:	715a      	strb	r2, [r3, #5]
    989e:	799a      	ldrb	r2, [r3, #6]
    98a0:	2100      	movs	r1, #0
    98a2:	400a      	ands	r2, r1
    98a4:	719a      	strb	r2, [r3, #6]
    98a6:	79da      	ldrb	r2, [r3, #7]
    98a8:	2100      	movs	r1, #0
    98aa:	400a      	ands	r2, r1
    98ac:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    98ae:	4b11      	ldr	r3, [pc, #68]	; (98f4 <LORAReg_InitJP+0x410>)
    98b0:	2243      	movs	r2, #67	; 0x43
    98b2:	2100      	movs	r1, #0
    98b4:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    98b6:	4b0f      	ldr	r3, [pc, #60]	; (98f4 <LORAReg_InitJP+0x410>)
    98b8:	333f      	adds	r3, #63	; 0x3f
    98ba:	781a      	ldrb	r2, [r3, #0]
    98bc:	2100      	movs	r1, #0
    98be:	400a      	ands	r2, r1
    98c0:	701a      	strb	r2, [r3, #0]
    98c2:	785a      	ldrb	r2, [r3, #1]
    98c4:	2100      	movs	r1, #0
    98c6:	400a      	ands	r2, r1
    98c8:	705a      	strb	r2, [r3, #1]
    98ca:	789a      	ldrb	r2, [r3, #2]
    98cc:	2100      	movs	r1, #0
    98ce:	400a      	ands	r2, r1
    98d0:	709a      	strb	r2, [r3, #2]
    98d2:	78da      	ldrb	r2, [r3, #3]
    98d4:	2100      	movs	r1, #0
    98d6:	400a      	ands	r2, r1
    98d8:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    98da:	4a06      	ldr	r2, [pc, #24]	; (98f4 <LORAReg_InitJP+0x410>)
    98dc:	23c4      	movs	r3, #196	; 0xc4
    98de:	33ff      	adds	r3, #255	; 0xff
    98e0:	5cd1      	ldrb	r1, [r2, r3]
    98e2:	2001      	movs	r0, #1
    98e4:	4301      	orrs	r1, r0
    98e6:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    98e8:	4a02      	ldr	r2, [pc, #8]	; (98f4 <LORAReg_InitJP+0x410>)
    98ea:	23c4      	movs	r3, #196	; 0xc4
    98ec:	33ff      	adds	r3, #255	; 0xff
    98ee:	5cd1      	ldrb	r1, [r2, r3]
    98f0:	e012      	b.n	9918 <LORAReg_InitJP+0x434>
    98f2:	46c0      	nop			; (mov r8, r8)
    98f4:	200014a8 	.word	0x200014a8
    98f8:	2000152c 	.word	0x2000152c
    98fc:	200014ec 	.word	0x200014ec
    9900:	2000166c 	.word	0x2000166c
    9904:	2000154c 	.word	0x2000154c
    9908:	2000160c 	.word	0x2000160c
    990c:	200014dd 	.word	0x200014dd
    9910:	200014e6 	.word	0x200014e6
    9914:	200014a4 	.word	0x200014a4
    9918:	2002      	movs	r0, #2
    991a:	4301      	orrs	r1, r0
    991c:	54d1      	strb	r1, [r2, r3]
	RegParams.band = ismBand;
    991e:	4b45      	ldr	r3, [pc, #276]	; (9a34 <LORAReg_InitJP+0x550>)
    9920:	1dfa      	adds	r2, r7, #7
    9922:	212f      	movs	r1, #47	; 0x2f
    9924:	7812      	ldrb	r2, [r2, #0]
    9926:	545a      	strb	r2, [r3, r1]
	
	if(ismBand == ISM_JPN923)
    9928:	1dfb      	adds	r3, r7, #7
    992a:	781b      	ldrb	r3, [r3, #0]
    992c:	2b05      	cmp	r3, #5
    992e:	d16f      	bne.n	9a10 <LORAReg_InitJP+0x52c>
	{
		InitDefault920Channels();
    9930:	4b41      	ldr	r3, [pc, #260]	; (9a38 <LORAReg_InitJP+0x554>)
    9932:	4798      	blx	r3
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    9934:	4a3f      	ldr	r2, [pc, #252]	; (9a34 <LORAReg_InitJP+0x550>)
    9936:	23e1      	movs	r3, #225	; 0xe1
    9938:	005b      	lsls	r3, r3, #1
    993a:	2110      	movs	r1, #16
    993c:	54d1      	strb	r1, [r2, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    993e:	4b3d      	ldr	r3, [pc, #244]	; (9a34 <LORAReg_InitJP+0x550>)
    9940:	781a      	ldrb	r2, [r3, #0]
    9942:	7859      	ldrb	r1, [r3, #1]
    9944:	0209      	lsls	r1, r1, #8
    9946:	430a      	orrs	r2, r1
    9948:	7899      	ldrb	r1, [r3, #2]
    994a:	0409      	lsls	r1, r1, #16
    994c:	430a      	orrs	r2, r1
    994e:	78db      	ldrb	r3, [r3, #3]
    9950:	061b      	lsls	r3, r3, #24
    9952:	4313      	orrs	r3, r2
    9954:	001a      	movs	r2, r3
    9956:	4b39      	ldr	r3, [pc, #228]	; (9a3c <LORAReg_InitJP+0x558>)
    9958:	0010      	movs	r0, r2
    995a:	0019      	movs	r1, r3
    995c:	2340      	movs	r3, #64	; 0x40
    995e:	001a      	movs	r2, r3
    9960:	4b37      	ldr	r3, [pc, #220]	; (9a40 <LORAReg_InitJP+0x55c>)
    9962:	4798      	blx	r3
#if (ENABLE_PDS == 1)

		/*Fill PDS item id in RegParam Structure */
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    9964:	4a33      	ldr	r2, [pc, #204]	; (9a34 <LORAReg_InitJP+0x550>)
    9966:	2383      	movs	r3, #131	; 0x83
    9968:	009b      	lsls	r3, r3, #2
    996a:	2107      	movs	r1, #7
    996c:	54d1      	strb	r1, [r2, r3]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    996e:	4b31      	ldr	r3, [pc, #196]	; (9a34 <LORAReg_InitJP+0x550>)
    9970:	4a34      	ldr	r2, [pc, #208]	; (9a44 <LORAReg_InitJP+0x560>)
    9972:	5c99      	ldrb	r1, [r3, r2]
    9974:	2000      	movs	r0, #0
    9976:	4001      	ands	r1, r0
    9978:	5499      	strb	r1, [r3, r2]
    997a:	189b      	adds	r3, r3, r2
    997c:	785a      	ldrb	r2, [r3, #1]
    997e:	2100      	movs	r1, #0
    9980:	400a      	ands	r2, r1
    9982:	1c11      	adds	r1, r2, #0
    9984:	2207      	movs	r2, #7
    9986:	430a      	orrs	r2, r1
    9988:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    998a:	4b2a      	ldr	r3, [pc, #168]	; (9a34 <LORAReg_InitJP+0x550>)
    998c:	4a2e      	ldr	r2, [pc, #184]	; (9a48 <LORAReg_InitJP+0x564>)
    998e:	5c99      	ldrb	r1, [r3, r2]
    9990:	2000      	movs	r0, #0
    9992:	4001      	ands	r1, r0
    9994:	1c08      	adds	r0, r1, #0
    9996:	2101      	movs	r1, #1
    9998:	4301      	orrs	r1, r0
    999a:	5499      	strb	r1, [r3, r2]
    999c:	189b      	adds	r3, r3, r2
    999e:	785a      	ldrb	r2, [r3, #1]
    99a0:	2100      	movs	r1, #0
    99a2:	400a      	ands	r2, r1
    99a4:	1c11      	adds	r1, r2, #0
    99a6:	2207      	movs	r2, #7
    99a8:	430a      	orrs	r2, r1
    99aa:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    99ac:	4b21      	ldr	r3, [pc, #132]	; (9a34 <LORAReg_InitJP+0x550>)
    99ae:	4a27      	ldr	r2, [pc, #156]	; (9a4c <LORAReg_InitJP+0x568>)
    99b0:	5c99      	ldrb	r1, [r3, r2]
    99b2:	2000      	movs	r0, #0
    99b4:	4001      	ands	r1, r0
    99b6:	5499      	strb	r1, [r3, r2]
    99b8:	189b      	adds	r3, r3, r2
    99ba:	785a      	ldrb	r2, [r3, #1]
    99bc:	2100      	movs	r1, #0
    99be:	400a      	ands	r2, r1
    99c0:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    99c2:	4b1c      	ldr	r3, [pc, #112]	; (9a34 <LORAReg_InitJP+0x550>)
    99c4:	4a22      	ldr	r2, [pc, #136]	; (9a50 <LORAReg_InitJP+0x56c>)
    99c6:	5c99      	ldrb	r1, [r3, r2]
    99c8:	2000      	movs	r0, #0
    99ca:	4001      	ands	r1, r0
    99cc:	5499      	strb	r1, [r3, r2]
    99ce:	189b      	adds	r3, r3, r2
    99d0:	785a      	ldrb	r2, [r3, #1]
    99d2:	2100      	movs	r1, #0
    99d4:	400a      	ands	r2, r1
    99d6:	705a      	strb	r2, [r3, #1]
		
		PdsFileMarks_t filemarks;
		/* File ID JPN - Register */
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    99d8:	230c      	movs	r3, #12
    99da:	18fb      	adds	r3, r7, r3
    99dc:	4a1d      	ldr	r2, [pc, #116]	; (9a54 <LORAReg_InitJP+0x570>)
    99de:	601a      	str	r2, [r3, #0]
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    99e0:	230c      	movs	r3, #12
    99e2:	18fb      	adds	r3, r7, r3
    99e4:	2202      	movs	r2, #2
    99e6:	711a      	strb	r2, [r3, #4]
		filemarks.itemListAddr = (ItemMap_t *)&pds_reg_jpn_fid1_item_list;
    99e8:	230c      	movs	r3, #12
    99ea:	18fb      	adds	r3, r7, r3
    99ec:	4a1a      	ldr	r2, [pc, #104]	; (9a58 <LORAReg_InitJP+0x574>)
    99ee:	609a      	str	r2, [r3, #8]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    99f0:	230c      	movs	r3, #12
    99f2:	18fb      	adds	r3, r7, r3
    99f4:	4a19      	ldr	r2, [pc, #100]	; (9a5c <LORAReg_InitJP+0x578>)
    99f6:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    99f8:	230c      	movs	r3, #12
    99fa:	18fb      	adds	r3, r7, r3
    99fc:	466a      	mov	r2, sp
    99fe:	68d9      	ldr	r1, [r3, #12]
    9a00:	6011      	str	r1, [r2, #0]
    9a02:	6819      	ldr	r1, [r3, #0]
    9a04:	685a      	ldr	r2, [r3, #4]
    9a06:	689b      	ldr	r3, [r3, #8]
    9a08:	2007      	movs	r0, #7
    9a0a:	4c15      	ldr	r4, [pc, #84]	; (9a60 <LORAReg_InitJP+0x57c>)
    9a0c:	47a0      	blx	r4
    9a0e:	e003      	b.n	9a18 <LORAReg_InitJP+0x534>

#endif		
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    9a10:	231f      	movs	r3, #31
    9a12:	18fb      	adds	r3, r7, r3
    9a14:	220a      	movs	r2, #10
    9a16:	701a      	strb	r2, [r3, #0]
	}
	
	
    LORAREG_InitGetAttrFnPtrsJP();
    9a18:	4b12      	ldr	r3, [pc, #72]	; (9a64 <LORAReg_InitJP+0x580>)
    9a1a:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    9a1c:	4b12      	ldr	r3, [pc, #72]	; (9a68 <LORAReg_InitJP+0x584>)
    9a1e:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    9a20:	4b12      	ldr	r3, [pc, #72]	; (9a6c <LORAReg_InitJP+0x588>)
    9a22:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
    9a24:	231f      	movs	r3, #31
    9a26:	18fb      	adds	r3, r7, r3
    9a28:	781b      	ldrb	r3, [r3, #0]
}
    9a2a:	0018      	movs	r0, r3
    9a2c:	46bd      	mov	sp, r7
    9a2e:	b009      	add	sp, #36	; 0x24
    9a30:	bd90      	pop	{r4, r7, pc}
    9a32:	46c0      	nop			; (mov r8, r8)
    9a34:	200014a8 	.word	0x200014a8
    9a38:	00009a71 	.word	0x00009a71
    9a3c:	0002b04c 	.word	0x0002b04c
    9a40:	00024149 	.word	0x00024149
    9a44:	0000020f 	.word	0x0000020f
    9a48:	00000211 	.word	0x00000211
    9a4c:	00000213 	.word	0x00000213
    9a50:	0000020d 	.word	0x0000020d
    9a54:	20001298 	.word	0x20001298
    9a58:	0002b0a8 	.word	0x0002b0a8
    9a5c:	00009c05 	.word	0x00009c05
    9a60:	00014001 	.word	0x00014001
    9a64:	0000b085 	.word	0x0000b085
    9a68:	0000cf51 	.word	0x0000cf51
    9a6c:	0000d2d9 	.word	0x0000d2d9

00009a70 <InitDefault920Channels>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (JPN_BAND == 1)
void InitDefault920Channels (void)
{
    9a70:	b580      	push	{r7, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	af00      	add	r7, sp, #0
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels923JP) );
    9a76:	4b5b      	ldr	r3, [pc, #364]	; (9be4 <InitDefault920Channels+0x174>)
    9a78:	791a      	ldrb	r2, [r3, #4]
    9a7a:	7959      	ldrb	r1, [r3, #5]
    9a7c:	0209      	lsls	r1, r1, #8
    9a7e:	430a      	orrs	r2, r1
    9a80:	7999      	ldrb	r1, [r3, #6]
    9a82:	0409      	lsls	r1, r1, #16
    9a84:	430a      	orrs	r2, r1
    9a86:	79db      	ldrb	r3, [r3, #7]
    9a88:	061b      	lsls	r3, r3, #24
    9a8a:	4313      	orrs	r3, r2
    9a8c:	2204      	movs	r2, #4
    9a8e:	2100      	movs	r1, #0
    9a90:	0018      	movs	r0, r3
    9a92:	4b55      	ldr	r3, [pc, #340]	; (9be8 <InitDefault920Channels+0x178>)
    9a94:	4798      	blx	r3
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels923JP) );
    9a96:	4b53      	ldr	r3, [pc, #332]	; (9be4 <InitDefault920Channels+0x174>)
    9a98:	7a1a      	ldrb	r2, [r3, #8]
    9a9a:	7a59      	ldrb	r1, [r3, #9]
    9a9c:	0209      	lsls	r1, r1, #8
    9a9e:	430a      	orrs	r2, r1
    9aa0:	7a99      	ldrb	r1, [r3, #10]
    9aa2:	0409      	lsls	r1, r1, #16
    9aa4:	430a      	orrs	r2, r1
    9aa6:	7adb      	ldrb	r3, [r3, #11]
    9aa8:	061b      	lsls	r3, r3, #24
    9aaa:	4313      	orrs	r3, r2
    9aac:	2218      	movs	r2, #24
    9aae:	2100      	movs	r1, #0
    9ab0:	0018      	movs	r0, r3
    9ab2:	4b4d      	ldr	r3, [pc, #308]	; (9be8 <InitDefault920Channels+0x178>)
    9ab4:	4798      	blx	r3
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    9ab6:	4b4b      	ldr	r3, [pc, #300]	; (9be4 <InitDefault920Channels+0x174>)
    9ab8:	791a      	ldrb	r2, [r3, #4]
    9aba:	7959      	ldrb	r1, [r3, #5]
    9abc:	0209      	lsls	r1, r1, #8
    9abe:	430a      	orrs	r2, r1
    9ac0:	7999      	ldrb	r1, [r3, #6]
    9ac2:	0409      	lsls	r1, r1, #16
    9ac4:	430a      	orrs	r2, r1
    9ac6:	79db      	ldrb	r3, [r3, #7]
    9ac8:	061b      	lsls	r3, r3, #24
    9aca:	4313      	orrs	r3, r2
    9acc:	001a      	movs	r2, r3
    9ace:	4b47      	ldr	r3, [pc, #284]	; (9bec <InitDefault920Channels+0x17c>)
    9ad0:	0010      	movs	r0, r2
    9ad2:	0019      	movs	r1, r3
    9ad4:	2304      	movs	r3, #4
    9ad6:	001a      	movs	r2, r3
    9ad8:	4b45      	ldr	r3, [pc, #276]	; (9bf0 <InitDefault920Channels+0x180>)
    9ada:	4798      	blx	r3
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    9adc:	4b41      	ldr	r3, [pc, #260]	; (9be4 <InitDefault920Channels+0x174>)
    9ade:	7a1a      	ldrb	r2, [r3, #8]
    9ae0:	7a59      	ldrb	r1, [r3, #9]
    9ae2:	0209      	lsls	r1, r1, #8
    9ae4:	430a      	orrs	r2, r1
    9ae6:	7a99      	ldrb	r1, [r3, #10]
    9ae8:	0409      	lsls	r1, r1, #16
    9aea:	430a      	orrs	r2, r1
    9aec:	7adb      	ldrb	r3, [r3, #11]
    9aee:	061b      	lsls	r3, r3, #24
    9af0:	4313      	orrs	r3, r2
    9af2:	001a      	movs	r2, r3
    9af4:	4b3f      	ldr	r3, [pc, #252]	; (9bf4 <InitDefault920Channels+0x184>)
    9af6:	0010      	movs	r0, r2
    9af8:	0019      	movs	r1, r3
    9afa:	2318      	movs	r3, #24
    9afc:	001a      	movs	r2, r3
    9afe:	4b3c      	ldr	r3, [pc, #240]	; (9bf0 <InitDefault920Channels+0x180>)
    9b00:	4798      	blx	r3
	memset (RegParams.pSubBandParams, 0, sizeof(SubBandParamsJP923) );
    9b02:	4b38      	ldr	r3, [pc, #224]	; (9be4 <InitDefault920Channels+0x174>)
    9b04:	7b1a      	ldrb	r2, [r3, #12]
    9b06:	7b59      	ldrb	r1, [r3, #13]
    9b08:	0209      	lsls	r1, r1, #8
    9b0a:	430a      	orrs	r2, r1
    9b0c:	7b99      	ldrb	r1, [r3, #14]
    9b0e:	0409      	lsls	r1, r1, #16
    9b10:	430a      	orrs	r2, r1
    9b12:	7bdb      	ldrb	r3, [r3, #15]
    9b14:	061b      	lsls	r3, r3, #24
    9b16:	4313      	orrs	r3, r2
    9b18:	2218      	movs	r2, #24
    9b1a:	2100      	movs	r1, #0
    9b1c:	0018      	movs	r0, r3
    9b1e:	4b32      	ldr	r3, [pc, #200]	; (9be8 <InitDefault920Channels+0x178>)
    9b20:	4798      	blx	r3
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    9b22:	4b30      	ldr	r3, [pc, #192]	; (9be4 <InitDefault920Channels+0x174>)
    9b24:	7b1a      	ldrb	r2, [r3, #12]
    9b26:	7b59      	ldrb	r1, [r3, #13]
    9b28:	0209      	lsls	r1, r1, #8
    9b2a:	430a      	orrs	r2, r1
    9b2c:	7b99      	ldrb	r1, [r3, #14]
    9b2e:	0409      	lsls	r1, r1, #16
    9b30:	430a      	orrs	r2, r1
    9b32:	7bdb      	ldrb	r3, [r3, #15]
    9b34:	061b      	lsls	r3, r3, #24
    9b36:	4313      	orrs	r3, r2
    9b38:	001a      	movs	r2, r3
    9b3a:	4b2f      	ldr	r3, [pc, #188]	; (9bf8 <InitDefault920Channels+0x188>)
    9b3c:	0010      	movs	r0, r2
    9b3e:	0019      	movs	r1, r3
    9b40:	2318      	movs	r3, #24
    9b42:	001a      	movs	r2, r3
    9b44:	4b2a      	ldr	r3, [pc, #168]	; (9bf0 <InitDefault920Channels+0x180>)
    9b46:	4798      	blx	r3
	memset (RegParams.cmnParams.paramsType2.subBandDutyCycle,0,sizeof(SubBandDutyCycleJP923));
    9b48:	4b2c      	ldr	r3, [pc, #176]	; (9bfc <InitDefault920Channels+0x18c>)
    9b4a:	2204      	movs	r2, #4
    9b4c:	2100      	movs	r1, #0
    9b4e:	0018      	movs	r0, r3
    9b50:	4b25      	ldr	r3, [pc, #148]	; (9be8 <InitDefault920Channels+0x178>)
    9b52:	4798      	blx	r3
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    9b54:	492a      	ldr	r1, [pc, #168]	; (9c00 <InitDefault920Channels+0x190>)
    9b56:	4b29      	ldr	r3, [pc, #164]	; (9bfc <InitDefault920Channels+0x18c>)
    9b58:	2204      	movs	r2, #4
    9b5a:	0018      	movs	r0, r3
    9b5c:	4b24      	ldr	r3, [pc, #144]	; (9bf0 <InitDefault920Channels+0x180>)
    9b5e:	4798      	blx	r3
    for (i = 2; i < RegParams.maxChannels; i++)
    9b60:	1dfb      	adds	r3, r7, #7
    9b62:	2202      	movs	r2, #2
    9b64:	701a      	strb	r2, [r3, #0]
    9b66:	e02d      	b.n	9bc4 <InitDefault920Channels+0x154>
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9b68:	4b1e      	ldr	r3, [pc, #120]	; (9be4 <InitDefault920Channels+0x174>)
    9b6a:	791a      	ldrb	r2, [r3, #4]
    9b6c:	7959      	ldrb	r1, [r3, #5]
    9b6e:	0209      	lsls	r1, r1, #8
    9b70:	430a      	orrs	r2, r1
    9b72:	7999      	ldrb	r1, [r3, #6]
    9b74:	0409      	lsls	r1, r1, #16
    9b76:	430a      	orrs	r2, r1
    9b78:	79db      	ldrb	r3, [r3, #7]
    9b7a:	061b      	lsls	r3, r3, #24
    9b7c:	4313      	orrs	r3, r2
    9b7e:	001a      	movs	r2, r3
    9b80:	1dfb      	adds	r3, r7, #7
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	005b      	lsls	r3, r3, #1
    9b86:	18d3      	adds	r3, r2, r3
    9b88:	22ff      	movs	r2, #255	; 0xff
    9b8a:	705a      	strb	r2, [r3, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9b8c:	1dfb      	adds	r3, r7, #7
    9b8e:	781b      	ldrb	r3, [r3, #0]
    9b90:	4a14      	ldr	r2, [pc, #80]	; (9be4 <InitDefault920Channels+0x174>)
    9b92:	3358      	adds	r3, #88	; 0x58
    9b94:	009b      	lsls	r3, r3, #2
    9b96:	18d3      	adds	r3, r2, r3
    9b98:	3309      	adds	r3, #9
    9b9a:	781a      	ldrb	r2, [r3, #0]
    9b9c:	2100      	movs	r1, #0
    9b9e:	400a      	ands	r2, r1
    9ba0:	701a      	strb	r2, [r3, #0]
    9ba2:	785a      	ldrb	r2, [r3, #1]
    9ba4:	2100      	movs	r1, #0
    9ba6:	400a      	ands	r2, r1
    9ba8:	705a      	strb	r2, [r3, #1]
    9baa:	789a      	ldrb	r2, [r3, #2]
    9bac:	2100      	movs	r1, #0
    9bae:	400a      	ands	r2, r1
    9bb0:	709a      	strb	r2, [r3, #2]
    9bb2:	78da      	ldrb	r2, [r3, #3]
    9bb4:	2100      	movs	r1, #0
    9bb6:	400a      	ands	r2, r1
    9bb8:	70da      	strb	r2, [r3, #3]
    for (i = 2; i < RegParams.maxChannels; i++)
    9bba:	1dfb      	adds	r3, r7, #7
    9bbc:	781a      	ldrb	r2, [r3, #0]
    9bbe:	1dfb      	adds	r3, r7, #7
    9bc0:	3201      	adds	r2, #1
    9bc2:	701a      	strb	r2, [r3, #0]
    9bc4:	1dfb      	adds	r3, r7, #7
    9bc6:	781b      	ldrb	r3, [r3, #0]
    9bc8:	4a06      	ldr	r2, [pc, #24]	; (9be4 <InitDefault920Channels+0x174>)
    9bca:	212a      	movs	r1, #42	; 0x2a
    9bcc:	5652      	ldrsb	r2, [r2, r1]
    9bce:	4293      	cmp	r3, r2
    9bd0:	dbca      	blt.n	9b68 <InitDefault920Channels+0xf8>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9bd2:	4b04      	ldr	r3, [pc, #16]	; (9be4 <InitDefault920Channels+0x174>)
    9bd4:	2230      	movs	r2, #48	; 0x30
    9bd6:	21ff      	movs	r1, #255	; 0xff
    9bd8:	5499      	strb	r1, [r3, r2]
}
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	46bd      	mov	sp, r7
    9bde:	b002      	add	sp, #8
    9be0:	bd80      	pop	{r7, pc}
    9be2:	46c0      	nop			; (mov r8, r8)
    9be4:	200014a8 	.word	0x200014a8
    9be8:	000241cd 	.word	0x000241cd
    9bec:	0002b030 	.word	0x0002b030
    9bf0:	00024149 	.word	0x00024149
    9bf4:	0002b034 	.word	0x0002b034
    9bf8:	0002b08c 	.word	0x0002b08c
    9bfc:	20001656 	.word	0x20001656
    9c00:	0002b0a4 	.word	0x0002b0a4

00009c04 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{
    9c04:	b580      	push	{r7, lr}
    9c06:	af00      	add	r7, sp, #0

}
    9c08:	46c0      	nop			; (mov r8, r8)
    9c0a:	46bd      	mov	sp, r7
    9c0c:	bd80      	pop	{r7, pc}
	...

00009c10 <LORAReg_InitKR>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitKR(IsmBand_t ismBand)
{
    9c10:	b590      	push	{r4, r7, lr}
    9c12:	b08b      	sub	sp, #44	; 0x2c
    9c14:	af02      	add	r7, sp, #8
    9c16:	0002      	movs	r2, r0
    9c18:	1dfb      	adds	r3, r7, #7
    9c1a:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9c1c:	231f      	movs	r3, #31
    9c1e:	18fb      	adds	r3, r7, r3
    9c20:	2208      	movs	r2, #8
    9c22:	701a      	strb	r2, [r3, #0]

#if (KR_BAND == 1)
	
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    9c24:	4bef      	ldr	r3, [pc, #956]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c26:	2226      	movs	r2, #38	; 0x26
    9c28:	2103      	movs	r1, #3
    9c2a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    9c2c:	4bed      	ldr	r3, [pc, #948]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c2e:	222a      	movs	r2, #42	; 0x2a
    9c30:	2110      	movs	r1, #16
    9c32:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    9c34:	4beb      	ldr	r3, [pc, #940]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c36:	2229      	movs	r2, #41	; 0x29
    9c38:	2101      	movs	r1, #1
    9c3a:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    9c3c:	4be9      	ldr	r3, [pc, #932]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c3e:	2227      	movs	r2, #39	; 0x27
    9c40:	2101      	movs	r1, #1
    9c42:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    9c44:	4be7      	ldr	r3, [pc, #924]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c46:	4ae8      	ldr	r2, [pc, #928]	; (9fe8 <LORAReg_InitKR+0x3d8>)
    9c48:	21ff      	movs	r1, #255	; 0xff
    9c4a:	4011      	ands	r1, r2
    9c4c:	000c      	movs	r4, r1
    9c4e:	7919      	ldrb	r1, [r3, #4]
    9c50:	2000      	movs	r0, #0
    9c52:	4001      	ands	r1, r0
    9c54:	1c08      	adds	r0, r1, #0
    9c56:	1c21      	adds	r1, r4, #0
    9c58:	4301      	orrs	r1, r0
    9c5a:	7119      	strb	r1, [r3, #4]
    9c5c:	0a11      	lsrs	r1, r2, #8
    9c5e:	20ff      	movs	r0, #255	; 0xff
    9c60:	4001      	ands	r1, r0
    9c62:	000c      	movs	r4, r1
    9c64:	7959      	ldrb	r1, [r3, #5]
    9c66:	2000      	movs	r0, #0
    9c68:	4001      	ands	r1, r0
    9c6a:	1c08      	adds	r0, r1, #0
    9c6c:	1c21      	adds	r1, r4, #0
    9c6e:	4301      	orrs	r1, r0
    9c70:	7159      	strb	r1, [r3, #5]
    9c72:	0c11      	lsrs	r1, r2, #16
    9c74:	20ff      	movs	r0, #255	; 0xff
    9c76:	4001      	ands	r1, r0
    9c78:	000c      	movs	r4, r1
    9c7a:	7999      	ldrb	r1, [r3, #6]
    9c7c:	2000      	movs	r0, #0
    9c7e:	4001      	ands	r1, r0
    9c80:	1c08      	adds	r0, r1, #0
    9c82:	1c21      	adds	r1, r4, #0
    9c84:	4301      	orrs	r1, r0
    9c86:	7199      	strb	r1, [r3, #6]
    9c88:	0e10      	lsrs	r0, r2, #24
    9c8a:	79da      	ldrb	r2, [r3, #7]
    9c8c:	2100      	movs	r1, #0
    9c8e:	400a      	ands	r2, r1
    9c90:	1c11      	adds	r1, r2, #0
    9c92:	1c02      	adds	r2, r0, #0
    9c94:	430a      	orrs	r2, r1
    9c96:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    9c98:	4bd2      	ldr	r3, [pc, #840]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9c9a:	4ad4      	ldr	r2, [pc, #848]	; (9fec <LORAReg_InitKR+0x3dc>)
    9c9c:	21ff      	movs	r1, #255	; 0xff
    9c9e:	4011      	ands	r1, r2
    9ca0:	000c      	movs	r4, r1
    9ca2:	7819      	ldrb	r1, [r3, #0]
    9ca4:	2000      	movs	r0, #0
    9ca6:	4001      	ands	r1, r0
    9ca8:	1c08      	adds	r0, r1, #0
    9caa:	1c21      	adds	r1, r4, #0
    9cac:	4301      	orrs	r1, r0
    9cae:	7019      	strb	r1, [r3, #0]
    9cb0:	0a11      	lsrs	r1, r2, #8
    9cb2:	20ff      	movs	r0, #255	; 0xff
    9cb4:	4001      	ands	r1, r0
    9cb6:	000c      	movs	r4, r1
    9cb8:	7859      	ldrb	r1, [r3, #1]
    9cba:	2000      	movs	r0, #0
    9cbc:	4001      	ands	r1, r0
    9cbe:	1c08      	adds	r0, r1, #0
    9cc0:	1c21      	adds	r1, r4, #0
    9cc2:	4301      	orrs	r1, r0
    9cc4:	7059      	strb	r1, [r3, #1]
    9cc6:	0c11      	lsrs	r1, r2, #16
    9cc8:	20ff      	movs	r0, #255	; 0xff
    9cca:	4001      	ands	r1, r0
    9ccc:	000c      	movs	r4, r1
    9cce:	7899      	ldrb	r1, [r3, #2]
    9cd0:	2000      	movs	r0, #0
    9cd2:	4001      	ands	r1, r0
    9cd4:	1c08      	adds	r0, r1, #0
    9cd6:	1c21      	adds	r1, r4, #0
    9cd8:	4301      	orrs	r1, r0
    9cda:	7099      	strb	r1, [r3, #2]
    9cdc:	0e10      	lsrs	r0, r2, #24
    9cde:	78da      	ldrb	r2, [r3, #3]
    9ce0:	2100      	movs	r1, #0
    9ce2:	400a      	ands	r2, r1
    9ce4:	1c11      	adds	r1, r2, #0
    9ce6:	1c02      	adds	r2, r0, #0
    9ce8:	430a      	orrs	r2, r1
    9cea:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    9cec:	4bbd      	ldr	r3, [pc, #756]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9cee:	4ac0      	ldr	r2, [pc, #768]	; (9ff0 <LORAReg_InitKR+0x3e0>)
    9cf0:	21ff      	movs	r1, #255	; 0xff
    9cf2:	4011      	ands	r1, r2
    9cf4:	000c      	movs	r4, r1
    9cf6:	7a19      	ldrb	r1, [r3, #8]
    9cf8:	2000      	movs	r0, #0
    9cfa:	4001      	ands	r1, r0
    9cfc:	1c08      	adds	r0, r1, #0
    9cfe:	1c21      	adds	r1, r4, #0
    9d00:	4301      	orrs	r1, r0
    9d02:	7219      	strb	r1, [r3, #8]
    9d04:	0a11      	lsrs	r1, r2, #8
    9d06:	20ff      	movs	r0, #255	; 0xff
    9d08:	4001      	ands	r1, r0
    9d0a:	000c      	movs	r4, r1
    9d0c:	7a59      	ldrb	r1, [r3, #9]
    9d0e:	2000      	movs	r0, #0
    9d10:	4001      	ands	r1, r0
    9d12:	1c08      	adds	r0, r1, #0
    9d14:	1c21      	adds	r1, r4, #0
    9d16:	4301      	orrs	r1, r0
    9d18:	7259      	strb	r1, [r3, #9]
    9d1a:	0c11      	lsrs	r1, r2, #16
    9d1c:	20ff      	movs	r0, #255	; 0xff
    9d1e:	4001      	ands	r1, r0
    9d20:	000c      	movs	r4, r1
    9d22:	7a99      	ldrb	r1, [r3, #10]
    9d24:	2000      	movs	r0, #0
    9d26:	4001      	ands	r1, r0
    9d28:	1c08      	adds	r0, r1, #0
    9d2a:	1c21      	adds	r1, r4, #0
    9d2c:	4301      	orrs	r1, r0
    9d2e:	7299      	strb	r1, [r3, #10]
    9d30:	0e10      	lsrs	r0, r2, #24
    9d32:	7ada      	ldrb	r2, [r3, #11]
    9d34:	2100      	movs	r1, #0
    9d36:	400a      	ands	r2, r1
    9d38:	1c11      	adds	r1, r2, #0
    9d3a:	1c02      	adds	r2, r0, #0
    9d3c:	430a      	orrs	r2, r1
    9d3e:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    9d40:	4ba8      	ldr	r3, [pc, #672]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9d42:	4aac      	ldr	r2, [pc, #688]	; (9ff4 <LORAReg_InitKR+0x3e4>)
    9d44:	21ff      	movs	r1, #255	; 0xff
    9d46:	4011      	ands	r1, r2
    9d48:	000c      	movs	r4, r1
    9d4a:	7c19      	ldrb	r1, [r3, #16]
    9d4c:	2000      	movs	r0, #0
    9d4e:	4001      	ands	r1, r0
    9d50:	1c08      	adds	r0, r1, #0
    9d52:	1c21      	adds	r1, r4, #0
    9d54:	4301      	orrs	r1, r0
    9d56:	7419      	strb	r1, [r3, #16]
    9d58:	0a11      	lsrs	r1, r2, #8
    9d5a:	20ff      	movs	r0, #255	; 0xff
    9d5c:	4001      	ands	r1, r0
    9d5e:	000c      	movs	r4, r1
    9d60:	7c59      	ldrb	r1, [r3, #17]
    9d62:	2000      	movs	r0, #0
    9d64:	4001      	ands	r1, r0
    9d66:	1c08      	adds	r0, r1, #0
    9d68:	1c21      	adds	r1, r4, #0
    9d6a:	4301      	orrs	r1, r0
    9d6c:	7459      	strb	r1, [r3, #17]
    9d6e:	0c11      	lsrs	r1, r2, #16
    9d70:	20ff      	movs	r0, #255	; 0xff
    9d72:	4001      	ands	r1, r0
    9d74:	000c      	movs	r4, r1
    9d76:	7c99      	ldrb	r1, [r3, #18]
    9d78:	2000      	movs	r0, #0
    9d7a:	4001      	ands	r1, r0
    9d7c:	1c08      	adds	r0, r1, #0
    9d7e:	1c21      	adds	r1, r4, #0
    9d80:	4301      	orrs	r1, r0
    9d82:	7499      	strb	r1, [r3, #18]
    9d84:	0e10      	lsrs	r0, r2, #24
    9d86:	7cda      	ldrb	r2, [r3, #19]
    9d88:	2100      	movs	r1, #0
    9d8a:	400a      	ands	r2, r1
    9d8c:	1c11      	adds	r1, r2, #0
    9d8e:	1c02      	adds	r2, r0, #0
    9d90:	430a      	orrs	r2, r1
    9d92:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    9d94:	4b93      	ldr	r3, [pc, #588]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9d96:	4a98      	ldr	r2, [pc, #608]	; (9ff8 <LORAReg_InitKR+0x3e8>)
    9d98:	21ff      	movs	r1, #255	; 0xff
    9d9a:	4011      	ands	r1, r2
    9d9c:	000c      	movs	r4, r1
    9d9e:	7d19      	ldrb	r1, [r3, #20]
    9da0:	2000      	movs	r0, #0
    9da2:	4001      	ands	r1, r0
    9da4:	1c08      	adds	r0, r1, #0
    9da6:	1c21      	adds	r1, r4, #0
    9da8:	4301      	orrs	r1, r0
    9daa:	7519      	strb	r1, [r3, #20]
    9dac:	0a11      	lsrs	r1, r2, #8
    9dae:	20ff      	movs	r0, #255	; 0xff
    9db0:	4001      	ands	r1, r0
    9db2:	000c      	movs	r4, r1
    9db4:	7d59      	ldrb	r1, [r3, #21]
    9db6:	2000      	movs	r0, #0
    9db8:	4001      	ands	r1, r0
    9dba:	1c08      	adds	r0, r1, #0
    9dbc:	1c21      	adds	r1, r4, #0
    9dbe:	4301      	orrs	r1, r0
    9dc0:	7559      	strb	r1, [r3, #21]
    9dc2:	0c11      	lsrs	r1, r2, #16
    9dc4:	20ff      	movs	r0, #255	; 0xff
    9dc6:	4001      	ands	r1, r0
    9dc8:	000c      	movs	r4, r1
    9dca:	7d99      	ldrb	r1, [r3, #22]
    9dcc:	2000      	movs	r0, #0
    9dce:	4001      	ands	r1, r0
    9dd0:	1c08      	adds	r0, r1, #0
    9dd2:	1c21      	adds	r1, r4, #0
    9dd4:	4301      	orrs	r1, r0
    9dd6:	7599      	strb	r1, [r3, #22]
    9dd8:	0e10      	lsrs	r0, r2, #24
    9dda:	7dda      	ldrb	r2, [r3, #23]
    9ddc:	2100      	movs	r1, #0
    9dde:	400a      	ands	r2, r1
    9de0:	1c11      	adds	r1, r2, #0
    9de2:	1c02      	adds	r2, r0, #0
    9de4:	430a      	orrs	r2, r1
    9de6:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    9de8:	4b7e      	ldr	r3, [pc, #504]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9dea:	4a84      	ldr	r2, [pc, #528]	; (9ffc <LORAReg_InitKR+0x3ec>)
    9dec:	21ff      	movs	r1, #255	; 0xff
    9dee:	4011      	ands	r1, r2
    9df0:	000c      	movs	r4, r1
    9df2:	7e19      	ldrb	r1, [r3, #24]
    9df4:	2000      	movs	r0, #0
    9df6:	4001      	ands	r1, r0
    9df8:	1c08      	adds	r0, r1, #0
    9dfa:	1c21      	adds	r1, r4, #0
    9dfc:	4301      	orrs	r1, r0
    9dfe:	7619      	strb	r1, [r3, #24]
    9e00:	0a11      	lsrs	r1, r2, #8
    9e02:	20ff      	movs	r0, #255	; 0xff
    9e04:	4001      	ands	r1, r0
    9e06:	000c      	movs	r4, r1
    9e08:	7e59      	ldrb	r1, [r3, #25]
    9e0a:	2000      	movs	r0, #0
    9e0c:	4001      	ands	r1, r0
    9e0e:	1c08      	adds	r0, r1, #0
    9e10:	1c21      	adds	r1, r4, #0
    9e12:	4301      	orrs	r1, r0
    9e14:	7659      	strb	r1, [r3, #25]
    9e16:	0c11      	lsrs	r1, r2, #16
    9e18:	20ff      	movs	r0, #255	; 0xff
    9e1a:	4001      	ands	r1, r0
    9e1c:	000c      	movs	r4, r1
    9e1e:	7e99      	ldrb	r1, [r3, #26]
    9e20:	2000      	movs	r0, #0
    9e22:	4001      	ands	r1, r0
    9e24:	1c08      	adds	r0, r1, #0
    9e26:	1c21      	adds	r1, r4, #0
    9e28:	4301      	orrs	r1, r0
    9e2a:	7699      	strb	r1, [r3, #26]
    9e2c:	0e10      	lsrs	r0, r2, #24
    9e2e:	7eda      	ldrb	r2, [r3, #27]
    9e30:	2100      	movs	r1, #0
    9e32:	400a      	ands	r2, r1
    9e34:	1c11      	adds	r1, r2, #0
    9e36:	1c02      	adds	r2, r0, #0
    9e38:	430a      	orrs	r2, r1
    9e3a:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    9e3c:	4b69      	ldr	r3, [pc, #420]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e3e:	2222      	movs	r2, #34	; 0x22
    9e40:	2100      	movs	r1, #0
    9e42:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    9e44:	4b67      	ldr	r3, [pc, #412]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e46:	2223      	movs	r2, #35	; 0x23
    9e48:	2100      	movs	r1, #0
    9e4a:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    9e4c:	4b65      	ldr	r3, [pc, #404]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e4e:	7f1a      	ldrb	r2, [r3, #28]
    9e50:	2100      	movs	r1, #0
    9e52:	400a      	ands	r2, r1
    9e54:	1c11      	adds	r1, r2, #0
    9e56:	2220      	movs	r2, #32
    9e58:	4252      	negs	r2, r2
    9e5a:	430a      	orrs	r2, r1
    9e5c:	771a      	strb	r2, [r3, #28]
    9e5e:	7f5a      	ldrb	r2, [r3, #29]
    9e60:	2100      	movs	r1, #0
    9e62:	400a      	ands	r2, r1
    9e64:	1c11      	adds	r1, r2, #0
    9e66:	2213      	movs	r2, #19
    9e68:	430a      	orrs	r2, r1
    9e6a:	775a      	strb	r2, [r3, #29]
    9e6c:	7f9a      	ldrb	r2, [r3, #30]
    9e6e:	2100      	movs	r1, #0
    9e70:	400a      	ands	r2, r1
    9e72:	1c11      	adds	r1, r2, #0
    9e74:	220d      	movs	r2, #13
    9e76:	4252      	negs	r2, r2
    9e78:	430a      	orrs	r2, r1
    9e7a:	779a      	strb	r2, [r3, #30]
    9e7c:	7fda      	ldrb	r2, [r3, #31]
    9e7e:	2100      	movs	r1, #0
    9e80:	400a      	ands	r2, r1
    9e82:	1c11      	adds	r1, r2, #0
    9e84:	2236      	movs	r2, #54	; 0x36
    9e86:	430a      	orrs	r2, r1
    9e88:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    9e8a:	4b56      	ldr	r3, [pc, #344]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e8c:	2221      	movs	r2, #33	; 0x21
    9e8e:	2103      	movs	r1, #3
    9e90:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    9e92:	4b54      	ldr	r3, [pc, #336]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e94:	2220      	movs	r2, #32
    9e96:	2134      	movs	r1, #52	; 0x34
    9e98:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    9e9a:	4b52      	ldr	r3, [pc, #328]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9e9c:	2224      	movs	r2, #36	; 0x24
    9e9e:	2105      	movs	r1, #5
    9ea0:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    9ea2:	4b50      	ldr	r3, [pc, #320]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9ea4:	2225      	movs	r2, #37	; 0x25
    9ea6:	2100      	movs	r1, #0
    9ea8:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    9eaa:	4a4e      	ldr	r2, [pc, #312]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9eac:	23df      	movs	r3, #223	; 0xdf
    9eae:	005b      	lsls	r3, r3, #1
    9eb0:	210a      	movs	r1, #10
    9eb2:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    9eb4:	4a4b      	ldr	r2, [pc, #300]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9eb6:	23c0      	movs	r3, #192	; 0xc0
    9eb8:	33ff      	adds	r3, #255	; 0xff
    9eba:	21bf      	movs	r1, #191	; 0xbf
    9ebc:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    9ebe:	4a49      	ldr	r2, [pc, #292]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9ec0:	23e0      	movs	r3, #224	; 0xe0
    9ec2:	005b      	lsls	r3, r3, #1
    9ec4:	210a      	movs	r1, #10
    9ec6:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    9ec8:	4a46      	ldr	r2, [pc, #280]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9eca:	23c2      	movs	r3, #194	; 0xc2
    9ecc:	33ff      	adds	r3, #255	; 0xff
    9ece:	2103      	movs	r1, #3
    9ed0:	54d1      	strb	r1, [r2, r3]
	RegParams.Rx1DrOffset = 5;
    9ed2:	4b44      	ldr	r3, [pc, #272]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9ed4:	222c      	movs	r2, #44	; 0x2c
    9ed6:	2105      	movs	r1, #5
    9ed8:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    9eda:	4b42      	ldr	r3, [pc, #264]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9edc:	222d      	movs	r2, #45	; 0x2d
    9ede:	2107      	movs	r1, #7
    9ee0:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_KR;
    9ee2:	4b40      	ldr	r3, [pc, #256]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9ee4:	222e      	movs	r2, #46	; 0x2e
    9ee6:	2101      	movs	r1, #1
    9ee8:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    9eea:	4b3e      	ldr	r3, [pc, #248]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9eec:	2228      	movs	r2, #40	; 0x28
    9eee:	210e      	movs	r1, #14
    9ef0:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    9ef2:	4b43      	ldr	r3, [pc, #268]	; (a000 <LORAReg_InitKR+0x3f0>)
    9ef4:	7819      	ldrb	r1, [r3, #0]
    9ef6:	4a3b      	ldr	r2, [pc, #236]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9ef8:	23ae      	movs	r3, #174	; 0xae
    9efa:	33ff      	adds	r3, #255	; 0xff
    9efc:	54d1      	strb	r1, [r2, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    9efe:	4b39      	ldr	r3, [pc, #228]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f00:	7e1a      	ldrb	r2, [r3, #24]
    9f02:	7e59      	ldrb	r1, [r3, #25]
    9f04:	0209      	lsls	r1, r1, #8
    9f06:	430a      	orrs	r2, r1
    9f08:	7e99      	ldrb	r1, [r3, #26]
    9f0a:	0409      	lsls	r1, r1, #16
    9f0c:	430a      	orrs	r2, r1
    9f0e:	7edb      	ldrb	r3, [r3, #27]
    9f10:	061b      	lsls	r3, r3, #24
    9f12:	4313      	orrs	r3, r2
    9f14:	001a      	movs	r2, r3
    9f16:	4b3a      	ldr	r3, [pc, #232]	; (a000 <LORAReg_InitKR+0x3f0>)
    9f18:	785b      	ldrb	r3, [r3, #1]
    9f1a:	7013      	strb	r3, [r2, #0]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    9f1c:	4b31      	ldr	r3, [pc, #196]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f1e:	7d1a      	ldrb	r2, [r3, #20]
    9f20:	7d59      	ldrb	r1, [r3, #21]
    9f22:	0209      	lsls	r1, r1, #8
    9f24:	430a      	orrs	r2, r1
    9f26:	7d99      	ldrb	r1, [r3, #22]
    9f28:	0409      	lsls	r1, r1, #16
    9f2a:	430a      	orrs	r2, r1
    9f2c:	7ddb      	ldrb	r3, [r3, #23]
    9f2e:	061b      	lsls	r3, r3, #24
    9f30:	4313      	orrs	r3, r2
    9f32:	001a      	movs	r2, r3
    9f34:	4b32      	ldr	r3, [pc, #200]	; (a000 <LORAReg_InitKR+0x3f0>)
    9f36:	789b      	ldrb	r3, [r3, #2]
    9f38:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9f3a:	4b2a      	ldr	r3, [pc, #168]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f3c:	7d1a      	ldrb	r2, [r3, #20]
    9f3e:	7d59      	ldrb	r1, [r3, #21]
    9f40:	0209      	lsls	r1, r1, #8
    9f42:	430a      	orrs	r2, r1
    9f44:	7d99      	ldrb	r1, [r3, #22]
    9f46:	0409      	lsls	r1, r1, #16
    9f48:	430a      	orrs	r2, r1
    9f4a:	7ddb      	ldrb	r3, [r3, #23]
    9f4c:	061b      	lsls	r3, r3, #24
    9f4e:	4313      	orrs	r3, r2
    9f50:	791a      	ldrb	r2, [r3, #4]
    9f52:	2100      	movs	r1, #0
    9f54:	400a      	ands	r2, r1
    9f56:	711a      	strb	r2, [r3, #4]
    9f58:	795a      	ldrb	r2, [r3, #5]
    9f5a:	2100      	movs	r1, #0
    9f5c:	400a      	ands	r2, r1
    9f5e:	715a      	strb	r2, [r3, #5]
    9f60:	799a      	ldrb	r2, [r3, #6]
    9f62:	2100      	movs	r1, #0
    9f64:	400a      	ands	r2, r1
    9f66:	719a      	strb	r2, [r3, #6]
    9f68:	79da      	ldrb	r2, [r3, #7]
    9f6a:	2100      	movs	r1, #0
    9f6c:	400a      	ands	r2, r1
    9f6e:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    9f70:	4b1c      	ldr	r3, [pc, #112]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f72:	2243      	movs	r2, #67	; 0x43
    9f74:	2100      	movs	r1, #0
    9f76:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9f78:	4b1a      	ldr	r3, [pc, #104]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f7a:	333f      	adds	r3, #63	; 0x3f
    9f7c:	781a      	ldrb	r2, [r3, #0]
    9f7e:	2100      	movs	r1, #0
    9f80:	400a      	ands	r2, r1
    9f82:	701a      	strb	r2, [r3, #0]
    9f84:	785a      	ldrb	r2, [r3, #1]
    9f86:	2100      	movs	r1, #0
    9f88:	400a      	ands	r2, r1
    9f8a:	705a      	strb	r2, [r3, #1]
    9f8c:	789a      	ldrb	r2, [r3, #2]
    9f8e:	2100      	movs	r1, #0
    9f90:	400a      	ands	r2, r1
    9f92:	709a      	strb	r2, [r3, #2]
    9f94:	78da      	ldrb	r2, [r3, #3]
    9f96:	2100      	movs	r1, #0
    9f98:	400a      	ands	r2, r1
    9f9a:	70da      	strb	r2, [r3, #3]
		
	RegParams.band = ismBand;
    9f9c:	4b11      	ldr	r3, [pc, #68]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9f9e:	1dfa      	adds	r2, r7, #7
    9fa0:	212f      	movs	r1, #47	; 0x2f
    9fa2:	7812      	ldrb	r2, [r2, #0]
    9fa4:	545a      	strb	r2, [r3, r1]
	
	if(ismBand == ISM_KR920)
    9fa6:	1dfb      	adds	r3, r7, #7
    9fa8:	781b      	ldrb	r3, [r3, #0]
    9faa:	2b04      	cmp	r3, #4
    9fac:	d000      	beq.n	9fb0 <LORAReg_InitKR+0x3a0>
    9fae:	e0c0      	b.n	a132 <LORAReg_InitKR+0x522>
	{
		InitDefault920ChannelsKR();
    9fb0:	4b14      	ldr	r3, [pc, #80]	; (a004 <LORAReg_InitKR+0x3f4>)
    9fb2:	4798      	blx	r3

		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    9fb4:	4b0b      	ldr	r3, [pc, #44]	; (9fe4 <LORAReg_InitKR+0x3d4>)
    9fb6:	781a      	ldrb	r2, [r3, #0]
    9fb8:	7859      	ldrb	r1, [r3, #1]
    9fba:	0209      	lsls	r1, r1, #8
    9fbc:	430a      	orrs	r2, r1
    9fbe:	7899      	ldrb	r1, [r3, #2]
    9fc0:	0409      	lsls	r1, r1, #16
    9fc2:	430a      	orrs	r2, r1
    9fc4:	78db      	ldrb	r3, [r3, #3]
    9fc6:	061b      	lsls	r3, r3, #24
    9fc8:	4313      	orrs	r3, r2
    9fca:	001a      	movs	r2, r3
    9fcc:	4b0e      	ldr	r3, [pc, #56]	; (a008 <LORAReg_InitKR+0x3f8>)
    9fce:	0010      	movs	r0, r2
    9fd0:	0019      	movs	r1, r3
    9fd2:	2330      	movs	r3, #48	; 0x30
    9fd4:	001a      	movs	r2, r3
    9fd6:	4b0d      	ldr	r3, [pc, #52]	; (a00c <LORAReg_InitKR+0x3fc>)
    9fd8:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    9fda:	231e      	movs	r3, #30
    9fdc:	18fb      	adds	r3, r7, r3
    9fde:	2200      	movs	r2, #0
    9fe0:	701a      	strb	r2, [r3, #0]
    9fe2:	e047      	b.n	a074 <LORAReg_InitKR+0x464>
    9fe4:	200014a8 	.word	0x200014a8
    9fe8:	2000152c 	.word	0x2000152c
    9fec:	200014ec 	.word	0x200014ec
    9ff0:	2000154c 	.word	0x2000154c
    9ff4:	2000160c 	.word	0x2000160c
    9ff8:	200014dd 	.word	0x200014dd
    9ffc:	200014e6 	.word	0x200014e6
    a000:	200014a4 	.word	0x200014a4
    a004:	0000a185 	.word	0x0000a185
    a008:	0002b0e4 	.word	0x0002b0e4
    a00c:	00024149 	.word	0x00024149
		{
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    a010:	4b50      	ldr	r3, [pc, #320]	; (a154 <LORAReg_InitKR+0x544>)
    a012:	781a      	ldrb	r2, [r3, #0]
    a014:	7859      	ldrb	r1, [r3, #1]
    a016:	0209      	lsls	r1, r1, #8
    a018:	430a      	orrs	r2, r1
    a01a:	7899      	ldrb	r1, [r3, #2]
    a01c:	0409      	lsls	r1, r1, #16
    a01e:	430a      	orrs	r2, r1
    a020:	78db      	ldrb	r3, [r3, #3]
    a022:	061b      	lsls	r3, r3, #24
    a024:	4313      	orrs	r3, r2
    a026:	001a      	movs	r2, r3
    a028:	231e      	movs	r3, #30
    a02a:	18fb      	adds	r3, r7, r3
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	b25b      	sxtb	r3, r3
    a030:	00db      	lsls	r3, r3, #3
    a032:	18d3      	adds	r3, r2, r3
    a034:	2201      	movs	r2, #1
    a036:	71da      	strb	r2, [r3, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    a038:	4b46      	ldr	r3, [pc, #280]	; (a154 <LORAReg_InitKR+0x544>)
    a03a:	781a      	ldrb	r2, [r3, #0]
    a03c:	7859      	ldrb	r1, [r3, #1]
    a03e:	0209      	lsls	r1, r1, #8
    a040:	430a      	orrs	r2, r1
    a042:	7899      	ldrb	r1, [r3, #2]
    a044:	0409      	lsls	r1, r1, #16
    a046:	430a      	orrs	r2, r1
    a048:	78db      	ldrb	r3, [r3, #3]
    a04a:	061b      	lsls	r3, r3, #24
    a04c:	4313      	orrs	r3, r2
    a04e:	001a      	movs	r2, r3
    a050:	231e      	movs	r3, #30
    a052:	18fb      	adds	r3, r7, r3
    a054:	781b      	ldrb	r3, [r3, #0]
    a056:	b25b      	sxtb	r3, r3
    a058:	00db      	lsls	r3, r3, #3
    a05a:	18d3      	adds	r3, r2, r3
    a05c:	2207      	movs	r2, #7
    a05e:	719a      	strb	r2, [r3, #6]
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    a060:	231e      	movs	r3, #30
    a062:	18fb      	adds	r3, r7, r3
    a064:	781b      	ldrb	r3, [r3, #0]
    a066:	b25b      	sxtb	r3, r3
    a068:	b2db      	uxtb	r3, r3
    a06a:	3301      	adds	r3, #1
    a06c:	b2da      	uxtb	r2, r3
    a06e:	231e      	movs	r3, #30
    a070:	18fb      	adds	r3, r7, r3
    a072:	701a      	strb	r2, [r3, #0]
    a074:	231e      	movs	r3, #30
    a076:	18fb      	adds	r3, r7, r3
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	b25b      	sxtb	r3, r3
    a07c:	4a35      	ldr	r2, [pc, #212]	; (a154 <LORAReg_InitKR+0x544>)
    a07e:	2125      	movs	r1, #37	; 0x25
    a080:	5c52      	ldrb	r2, [r2, r1]
    a082:	4293      	cmp	r3, r2
    a084:	dbc4      	blt.n	a010 <LORAReg_InitKR+0x400>
		}
#if (ENABLE_PDS == 1)

		/*Fill PDS item id in RegParam Structure */
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    a086:	4a33      	ldr	r2, [pc, #204]	; (a154 <LORAReg_InitKR+0x544>)
    a088:	2383      	movs	r3, #131	; 0x83
    a08a:	009b      	lsls	r3, r3, #2
    a08c:	2105      	movs	r1, #5
    a08e:	54d1      	strb	r1, [r2, r3]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    a090:	4b30      	ldr	r3, [pc, #192]	; (a154 <LORAReg_InitKR+0x544>)
    a092:	4a31      	ldr	r2, [pc, #196]	; (a158 <LORAReg_InitKR+0x548>)
    a094:	5c99      	ldrb	r1, [r3, r2]
    a096:	2000      	movs	r0, #0
    a098:	4001      	ands	r1, r0
    a09a:	5499      	strb	r1, [r3, r2]
    a09c:	189b      	adds	r3, r3, r2
    a09e:	785a      	ldrb	r2, [r3, #1]
    a0a0:	2100      	movs	r1, #0
    a0a2:	400a      	ands	r2, r1
    a0a4:	1c11      	adds	r1, r2, #0
    a0a6:	2205      	movs	r2, #5
    a0a8:	430a      	orrs	r2, r1
    a0aa:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    a0ac:	4b29      	ldr	r3, [pc, #164]	; (a154 <LORAReg_InitKR+0x544>)
    a0ae:	4a2b      	ldr	r2, [pc, #172]	; (a15c <LORAReg_InitKR+0x54c>)
    a0b0:	5c99      	ldrb	r1, [r3, r2]
    a0b2:	2000      	movs	r0, #0
    a0b4:	4001      	ands	r1, r0
    a0b6:	1c08      	adds	r0, r1, #0
    a0b8:	2101      	movs	r1, #1
    a0ba:	4301      	orrs	r1, r0
    a0bc:	5499      	strb	r1, [r3, r2]
    a0be:	189b      	adds	r3, r3, r2
    a0c0:	785a      	ldrb	r2, [r3, #1]
    a0c2:	2100      	movs	r1, #0
    a0c4:	400a      	ands	r2, r1
    a0c6:	1c11      	adds	r1, r2, #0
    a0c8:	2205      	movs	r2, #5
    a0ca:	430a      	orrs	r2, r1
    a0cc:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.band_item_id = 0;
    a0ce:	4b21      	ldr	r3, [pc, #132]	; (a154 <LORAReg_InitKR+0x544>)
    a0d0:	4a23      	ldr	r2, [pc, #140]	; (a160 <LORAReg_InitKR+0x550>)
    a0d2:	5c99      	ldrb	r1, [r3, r2]
    a0d4:	2000      	movs	r0, #0
    a0d6:	4001      	ands	r1, r0
    a0d8:	5499      	strb	r1, [r3, r2]
    a0da:	189b      	adds	r3, r3, r2
    a0dc:	785a      	ldrb	r2, [r3, #1]
    a0de:	2100      	movs	r1, #0
    a0e0:	400a      	ands	r2, r1
    a0e2:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    a0e4:	4b1b      	ldr	r3, [pc, #108]	; (a154 <LORAReg_InitKR+0x544>)
    a0e6:	4a1f      	ldr	r2, [pc, #124]	; (a164 <LORAReg_InitKR+0x554>)
    a0e8:	5c99      	ldrb	r1, [r3, r2]
    a0ea:	2000      	movs	r0, #0
    a0ec:	4001      	ands	r1, r0
    a0ee:	5499      	strb	r1, [r3, r2]
    a0f0:	189b      	adds	r3, r3, r2
    a0f2:	785a      	ldrb	r2, [r3, #1]
    a0f4:	2100      	movs	r1, #0
    a0f6:	400a      	ands	r2, r1
    a0f8:	705a      	strb	r2, [r3, #1]
		
		PdsFileMarks_t filemarks;
		/* File ID KR - Register */
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    a0fa:	230c      	movs	r3, #12
    a0fc:	18fb      	adds	r3, r7, r3
    a0fe:	4a1a      	ldr	r2, [pc, #104]	; (a168 <LORAReg_InitKR+0x558>)
    a100:	601a      	str	r2, [r3, #0]
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    a102:	230c      	movs	r3, #12
    a104:	18fb      	adds	r3, r7, r3
    a106:	2202      	movs	r2, #2
    a108:	711a      	strb	r2, [r3, #4]
		filemarks.itemListAddr = (ItemMap_t *)&pds_reg_kr_fid1_item_list;
    a10a:	230c      	movs	r3, #12
    a10c:	18fb      	adds	r3, r7, r3
    a10e:	4a17      	ldr	r2, [pc, #92]	; (a16c <LORAReg_InitKR+0x55c>)
    a110:	609a      	str	r2, [r3, #8]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    a112:	230c      	movs	r3, #12
    a114:	18fb      	adds	r3, r7, r3
    a116:	4a16      	ldr	r2, [pc, #88]	; (a170 <LORAReg_InitKR+0x560>)
    a118:	60da      	str	r2, [r3, #12]
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    a11a:	230c      	movs	r3, #12
    a11c:	18fb      	adds	r3, r7, r3
    a11e:	466a      	mov	r2, sp
    a120:	68d9      	ldr	r1, [r3, #12]
    a122:	6011      	str	r1, [r2, #0]
    a124:	6819      	ldr	r1, [r3, #0]
    a126:	685a      	ldr	r2, [r3, #4]
    a128:	689b      	ldr	r3, [r3, #8]
    a12a:	2005      	movs	r0, #5
    a12c:	4c11      	ldr	r4, [pc, #68]	; (a174 <LORAReg_InitKR+0x564>)
    a12e:	47a0      	blx	r4
    a130:	e003      	b.n	a13a <LORAReg_InitKR+0x52a>
		
#endif
	}
	else
	{
		result = UNSUPPORTED_BAND;
    a132:	231f      	movs	r3, #31
    a134:	18fb      	adds	r3, r7, r3
    a136:	22c7      	movs	r2, #199	; 0xc7
    a138:	701a      	strb	r2, [r3, #0]
	}
	
    LORAREG_InitGetAttrFnPtrsKR();
    a13a:	4b0f      	ldr	r3, [pc, #60]	; (a178 <LORAReg_InitKR+0x568>)
    a13c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    a13e:	4b0f      	ldr	r3, [pc, #60]	; (a17c <LORAReg_InitKR+0x56c>)
    a140:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    a142:	4b0f      	ldr	r3, [pc, #60]	; (a180 <LORAReg_InitKR+0x570>)
    a144:	4798      	blx	r3
#else
    result = UNSUPPORTED_BAND;
#endif
	return result;
    a146:	231f      	movs	r3, #31
    a148:	18fb      	adds	r3, r7, r3
    a14a:	781b      	ldrb	r3, [r3, #0]
}
    a14c:	0018      	movs	r0, r3
    a14e:	46bd      	mov	sp, r7
    a150:	b009      	add	sp, #36	; 0x24
    a152:	bd90      	pop	{r4, r7, pc}
    a154:	200014a8 	.word	0x200014a8
    a158:	0000020f 	.word	0x0000020f
    a15c:	00000211 	.word	0x00000211
    a160:	00000213 	.word	0x00000213
    a164:	0000020d 	.word	0x0000020d
    a168:	2000129c 	.word	0x2000129c
    a16c:	0002b114 	.word	0x0002b114
    a170:	0000a305 	.word	0x0000a305
    a174:	00014001 	.word	0x00014001
    a178:	0000b231 	.word	0x0000b231
    a17c:	0000cfe1 	.word	0x0000cfe1
    a180:	0000d379 	.word	0x0000d379

0000a184 <InitDefault920ChannelsKR>:
/*
 * \brief This function initializes all the IN865 Channels to default values
 */
#if (KR_BAND == 1)
void InitDefault920ChannelsKR (void)
{
    a184:	b580      	push	{r7, lr}
    a186:	b082      	sub	sp, #8
    a188:	af00      	add	r7, sp, #0
    uint8_t i;
    memset (RegParams.pChParams, 0, sizeof(DefaultChannels920KR) );
    a18a:	4b59      	ldr	r3, [pc, #356]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a18c:	791a      	ldrb	r2, [r3, #4]
    a18e:	7959      	ldrb	r1, [r3, #5]
    a190:	0209      	lsls	r1, r1, #8
    a192:	430a      	orrs	r2, r1
    a194:	7999      	ldrb	r1, [r3, #6]
    a196:	0409      	lsls	r1, r1, #16
    a198:	430a      	orrs	r2, r1
    a19a:	79db      	ldrb	r3, [r3, #7]
    a19c:	061b      	lsls	r3, r3, #24
    a19e:	4313      	orrs	r3, r2
    a1a0:	2206      	movs	r2, #6
    a1a2:	2100      	movs	r1, #0
    a1a4:	0018      	movs	r0, r3
    a1a6:	4b53      	ldr	r3, [pc, #332]	; (a2f4 <InitDefault920ChannelsKR+0x170>)
    a1a8:	4798      	blx	r3
	memset (RegParams.pOtherChParams, 0, sizeof(AdvChannels920KR) );
    a1aa:	4b51      	ldr	r3, [pc, #324]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a1ac:	7a1a      	ldrb	r2, [r3, #8]
    a1ae:	7a59      	ldrb	r1, [r3, #9]
    a1b0:	0209      	lsls	r1, r1, #8
    a1b2:	430a      	orrs	r2, r1
    a1b4:	7a99      	ldrb	r1, [r3, #10]
    a1b6:	0409      	lsls	r1, r1, #16
    a1b8:	430a      	orrs	r2, r1
    a1ba:	7adb      	ldrb	r3, [r3, #11]
    a1bc:	061b      	lsls	r3, r3, #24
    a1be:	4313      	orrs	r3, r2
    a1c0:	2224      	movs	r2, #36	; 0x24
    a1c2:	2100      	movs	r1, #0
    a1c4:	0018      	movs	r0, r3
    a1c6:	4b4b      	ldr	r3, [pc, #300]	; (a2f4 <InitDefault920ChannelsKR+0x170>)
    a1c8:	4798      	blx	r3
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    a1ca:	4b49      	ldr	r3, [pc, #292]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a1cc:	791a      	ldrb	r2, [r3, #4]
    a1ce:	7959      	ldrb	r1, [r3, #5]
    a1d0:	0209      	lsls	r1, r1, #8
    a1d2:	430a      	orrs	r2, r1
    a1d4:	7999      	ldrb	r1, [r3, #6]
    a1d6:	0409      	lsls	r1, r1, #16
    a1d8:	430a      	orrs	r2, r1
    a1da:	79db      	ldrb	r3, [r3, #7]
    a1dc:	061b      	lsls	r3, r3, #24
    a1de:	4313      	orrs	r3, r2
    a1e0:	001a      	movs	r2, r3
    a1e2:	4b45      	ldr	r3, [pc, #276]	; (a2f8 <InitDefault920ChannelsKR+0x174>)
    a1e4:	0010      	movs	r0, r2
    a1e6:	0019      	movs	r1, r3
    a1e8:	2306      	movs	r3, #6
    a1ea:	001a      	movs	r2, r3
    a1ec:	4b43      	ldr	r3, [pc, #268]	; (a2fc <InitDefault920ChannelsKR+0x178>)
    a1ee:	4798      	blx	r3
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    a1f0:	4b3f      	ldr	r3, [pc, #252]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a1f2:	7a1a      	ldrb	r2, [r3, #8]
    a1f4:	7a59      	ldrb	r1, [r3, #9]
    a1f6:	0209      	lsls	r1, r1, #8
    a1f8:	430a      	orrs	r2, r1
    a1fa:	7a99      	ldrb	r1, [r3, #10]
    a1fc:	0409      	lsls	r1, r1, #16
    a1fe:	430a      	orrs	r2, r1
    a200:	7adb      	ldrb	r3, [r3, #11]
    a202:	061b      	lsls	r3, r3, #24
    a204:	4313      	orrs	r3, r2
    a206:	001a      	movs	r2, r3
    a208:	4b3d      	ldr	r3, [pc, #244]	; (a300 <InitDefault920ChannelsKR+0x17c>)
    a20a:	0010      	movs	r0, r2
    a20c:	0019      	movs	r1, r3
    a20e:	2324      	movs	r3, #36	; 0x24
    a210:	001a      	movs	r2, r3
    a212:	4b3a      	ldr	r3, [pc, #232]	; (a2fc <InitDefault920ChannelsKR+0x178>)
    a214:	4798      	blx	r3
    for (i = 3; i < RegParams.maxChannels; i++)
    a216:	1dfb      	adds	r3, r7, #7
    a218:	2203      	movs	r2, #3
    a21a:	701a      	strb	r2, [r3, #0]
    a21c:	e059      	b.n	a2d2 <InitDefault920ChannelsKR+0x14e>
    {
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    a21e:	4b34      	ldr	r3, [pc, #208]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a220:	791a      	ldrb	r2, [r3, #4]
    a222:	7959      	ldrb	r1, [r3, #5]
    a224:	0209      	lsls	r1, r1, #8
    a226:	430a      	orrs	r2, r1
    a228:	7999      	ldrb	r1, [r3, #6]
    a22a:	0409      	lsls	r1, r1, #16
    a22c:	430a      	orrs	r2, r1
    a22e:	79db      	ldrb	r3, [r3, #7]
    a230:	061b      	lsls	r3, r3, #24
    a232:	4313      	orrs	r3, r2
    a234:	001a      	movs	r2, r3
    a236:	1dfb      	adds	r3, r7, #7
    a238:	781b      	ldrb	r3, [r3, #0]
    a23a:	005b      	lsls	r3, r3, #1
    a23c:	18d3      	adds	r3, r2, r3
    a23e:	22ff      	movs	r2, #255	; 0xff
    a240:	705a      	strb	r2, [r3, #1]
		RegParams.pChParams[i].status = DISABLED;
    a242:	4b2b      	ldr	r3, [pc, #172]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a244:	791a      	ldrb	r2, [r3, #4]
    a246:	7959      	ldrb	r1, [r3, #5]
    a248:	0209      	lsls	r1, r1, #8
    a24a:	430a      	orrs	r2, r1
    a24c:	7999      	ldrb	r1, [r3, #6]
    a24e:	0409      	lsls	r1, r1, #16
    a250:	430a      	orrs	r2, r1
    a252:	79db      	ldrb	r3, [r3, #7]
    a254:	061b      	lsls	r3, r3, #24
    a256:	4313      	orrs	r3, r2
    a258:	001a      	movs	r2, r3
    a25a:	1dfb      	adds	r3, r7, #7
    a25c:	781b      	ldrb	r3, [r3, #0]
    a25e:	005b      	lsls	r3, r3, #1
    a260:	18d3      	adds	r3, r2, r3
    a262:	2200      	movs	r2, #0
    a264:	701a      	strb	r2, [r3, #0]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    a266:	4b22      	ldr	r3, [pc, #136]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a268:	7a1a      	ldrb	r2, [r3, #8]
    a26a:	7a59      	ldrb	r1, [r3, #9]
    a26c:	0209      	lsls	r1, r1, #8
    a26e:	430a      	orrs	r2, r1
    a270:	7a99      	ldrb	r1, [r3, #10]
    a272:	0409      	lsls	r1, r1, #16
    a274:	430a      	orrs	r2, r1
    a276:	7adb      	ldrb	r3, [r3, #11]
    a278:	061b      	lsls	r3, r3, #24
    a27a:	4313      	orrs	r3, r2
    a27c:	0019      	movs	r1, r3
    a27e:	1dfb      	adds	r3, r7, #7
    a280:	781a      	ldrb	r2, [r3, #0]
    a282:	0013      	movs	r3, r2
    a284:	005b      	lsls	r3, r3, #1
    a286:	189b      	adds	r3, r3, r2
    a288:	009b      	lsls	r3, r3, #2
    a28a:	18cb      	adds	r3, r1, r3
    a28c:	2200      	movs	r2, #0
    a28e:	725a      	strb	r2, [r3, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    a290:	4a17      	ldr	r2, [pc, #92]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a292:	23e1      	movs	r3, #225	; 0xe1
    a294:	005b      	lsls	r3, r3, #1
    a296:	21ff      	movs	r1, #255	; 0xff
    a298:	54d1      	strb	r1, [r2, r3]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    a29a:	1dfb      	adds	r3, r7, #7
    a29c:	781b      	ldrb	r3, [r3, #0]
    a29e:	4a14      	ldr	r2, [pc, #80]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a2a0:	3358      	adds	r3, #88	; 0x58
    a2a2:	009b      	lsls	r3, r3, #2
    a2a4:	18d3      	adds	r3, r2, r3
    a2a6:	3309      	adds	r3, #9
    a2a8:	781a      	ldrb	r2, [r3, #0]
    a2aa:	2100      	movs	r1, #0
    a2ac:	400a      	ands	r2, r1
    a2ae:	701a      	strb	r2, [r3, #0]
    a2b0:	785a      	ldrb	r2, [r3, #1]
    a2b2:	2100      	movs	r1, #0
    a2b4:	400a      	ands	r2, r1
    a2b6:	705a      	strb	r2, [r3, #1]
    a2b8:	789a      	ldrb	r2, [r3, #2]
    a2ba:	2100      	movs	r1, #0
    a2bc:	400a      	ands	r2, r1
    a2be:	709a      	strb	r2, [r3, #2]
    a2c0:	78da      	ldrb	r2, [r3, #3]
    a2c2:	2100      	movs	r1, #0
    a2c4:	400a      	ands	r2, r1
    a2c6:	70da      	strb	r2, [r3, #3]
    for (i = 3; i < RegParams.maxChannels; i++)
    a2c8:	1dfb      	adds	r3, r7, #7
    a2ca:	781a      	ldrb	r2, [r3, #0]
    a2cc:	1dfb      	adds	r3, r7, #7
    a2ce:	3201      	adds	r2, #1
    a2d0:	701a      	strb	r2, [r3, #0]
    a2d2:	1dfb      	adds	r3, r7, #7
    a2d4:	781b      	ldrb	r3, [r3, #0]
    a2d6:	4a06      	ldr	r2, [pc, #24]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a2d8:	212a      	movs	r1, #42	; 0x2a
    a2da:	5652      	ldrsb	r2, [r2, r1]
    a2dc:	4293      	cmp	r3, r2
    a2de:	db9e      	blt.n	a21e <InitDefault920ChannelsKR+0x9a>
    }
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    a2e0:	4b03      	ldr	r3, [pc, #12]	; (a2f0 <InitDefault920ChannelsKR+0x16c>)
    a2e2:	2230      	movs	r2, #48	; 0x30
    a2e4:	21ff      	movs	r1, #255	; 0xff
    a2e6:	5499      	strb	r1, [r3, r2]
}
    a2e8:	46c0      	nop			; (mov r8, r8)
    a2ea:	46bd      	mov	sp, r7
    a2ec:	b002      	add	sp, #8
    a2ee:	bd80      	pop	{r7, pc}
    a2f0:	200014a8 	.word	0x200014a8
    a2f4:	000241cd 	.word	0x000241cd
    a2f8:	0002b0b8 	.word	0x0002b0b8
    a2fc:	00024149 	.word	0x00024149
    a300:	0002b0c0 	.word	0x0002b0c0

0000a304 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{
    a304:	b580      	push	{r7, lr}
    a306:	af00      	add	r7, sp, #0

}
    a308:	46c0      	nop			; (mov r8, r8)
    a30a:	46bd      	mov	sp, r7
    a30c:	bd80      	pop	{r7, pc}
	...

0000a310 <LORAReg_InitNA>:
#endif

/****************************** FUNCTIONS *************************************/

StackRetStatus_t LORAReg_InitNA(IsmBand_t ismBand)
{
    a310:	b590      	push	{r4, r7, lr}
    a312:	b08b      	sub	sp, #44	; 0x2c
    a314:	af02      	add	r7, sp, #8
    a316:	0002      	movs	r2, r0
    a318:	1dfb      	adds	r3, r7, #7
    a31a:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a31c:	231f      	movs	r3, #31
    a31e:	18fb      	adds	r3, r7, r3
    a320:	2208      	movs	r2, #8
    a322:	701a      	strb	r2, [r3, #0]
#if(NA_BAND == 1)
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    a324:	4bfd      	ldr	r3, [pc, #1012]	; (a71c <LORAReg_InitNA+0x40c>)
    a326:	2226      	movs	r2, #38	; 0x26
    a328:	2102      	movs	r1, #2
    a32a:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    a32c:	4bfb      	ldr	r3, [pc, #1004]	; (a71c <LORAReg_InitNA+0x40c>)
    a32e:	222a      	movs	r2, #42	; 0x2a
    a330:	2148      	movs	r1, #72	; 0x48
    a332:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    a334:	4bf9      	ldr	r3, [pc, #996]	; (a71c <LORAReg_InitNA+0x40c>)
    a336:	2227      	movs	r2, #39	; 0x27
    a338:	2107      	movs	r1, #7
    a33a:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    a33c:	4bf7      	ldr	r3, [pc, #988]	; (a71c <LORAReg_InitNA+0x40c>)
    a33e:	2228      	movs	r2, #40	; 0x28
    a340:	211e      	movs	r1, #30
    a342:	5499      	strb	r1, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    a344:	4bf5      	ldr	r3, [pc, #980]	; (a71c <LORAReg_InitNA+0x40c>)
    a346:	4af6      	ldr	r2, [pc, #984]	; (a720 <LORAReg_InitNA+0x410>)
    a348:	21ff      	movs	r1, #255	; 0xff
    a34a:	4011      	ands	r1, r2
    a34c:	000c      	movs	r4, r1
    a34e:	7919      	ldrb	r1, [r3, #4]
    a350:	2000      	movs	r0, #0
    a352:	4001      	ands	r1, r0
    a354:	1c08      	adds	r0, r1, #0
    a356:	1c21      	adds	r1, r4, #0
    a358:	4301      	orrs	r1, r0
    a35a:	7119      	strb	r1, [r3, #4]
    a35c:	0a11      	lsrs	r1, r2, #8
    a35e:	20ff      	movs	r0, #255	; 0xff
    a360:	4001      	ands	r1, r0
    a362:	000c      	movs	r4, r1
    a364:	7959      	ldrb	r1, [r3, #5]
    a366:	2000      	movs	r0, #0
    a368:	4001      	ands	r1, r0
    a36a:	1c08      	adds	r0, r1, #0
    a36c:	1c21      	adds	r1, r4, #0
    a36e:	4301      	orrs	r1, r0
    a370:	7159      	strb	r1, [r3, #5]
    a372:	0c11      	lsrs	r1, r2, #16
    a374:	20ff      	movs	r0, #255	; 0xff
    a376:	4001      	ands	r1, r0
    a378:	000c      	movs	r4, r1
    a37a:	7999      	ldrb	r1, [r3, #6]
    a37c:	2000      	movs	r0, #0
    a37e:	4001      	ands	r1, r0
    a380:	1c08      	adds	r0, r1, #0
    a382:	1c21      	adds	r1, r4, #0
    a384:	4301      	orrs	r1, r0
    a386:	7199      	strb	r1, [r3, #6]
    a388:	0e10      	lsrs	r0, r2, #24
    a38a:	79da      	ldrb	r2, [r3, #7]
    a38c:	2100      	movs	r1, #0
    a38e:	400a      	ands	r2, r1
    a390:	1c11      	adds	r1, r2, #0
    a392:	1c02      	adds	r2, r0, #0
    a394:	430a      	orrs	r2, r1
    a396:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    a398:	4be0      	ldr	r3, [pc, #896]	; (a71c <LORAReg_InitNA+0x40c>)
    a39a:	4ae2      	ldr	r2, [pc, #904]	; (a724 <LORAReg_InitNA+0x414>)
    a39c:	21ff      	movs	r1, #255	; 0xff
    a39e:	4011      	ands	r1, r2
    a3a0:	000c      	movs	r4, r1
    a3a2:	7819      	ldrb	r1, [r3, #0]
    a3a4:	2000      	movs	r0, #0
    a3a6:	4001      	ands	r1, r0
    a3a8:	1c08      	adds	r0, r1, #0
    a3aa:	1c21      	adds	r1, r4, #0
    a3ac:	4301      	orrs	r1, r0
    a3ae:	7019      	strb	r1, [r3, #0]
    a3b0:	0a11      	lsrs	r1, r2, #8
    a3b2:	20ff      	movs	r0, #255	; 0xff
    a3b4:	4001      	ands	r1, r0
    a3b6:	000c      	movs	r4, r1
    a3b8:	7859      	ldrb	r1, [r3, #1]
    a3ba:	2000      	movs	r0, #0
    a3bc:	4001      	ands	r1, r0
    a3be:	1c08      	adds	r0, r1, #0
    a3c0:	1c21      	adds	r1, r4, #0
    a3c2:	4301      	orrs	r1, r0
    a3c4:	7059      	strb	r1, [r3, #1]
    a3c6:	0c11      	lsrs	r1, r2, #16
    a3c8:	20ff      	movs	r0, #255	; 0xff
    a3ca:	4001      	ands	r1, r0
    a3cc:	000c      	movs	r4, r1
    a3ce:	7899      	ldrb	r1, [r3, #2]
    a3d0:	2000      	movs	r0, #0
    a3d2:	4001      	ands	r1, r0
    a3d4:	1c08      	adds	r0, r1, #0
    a3d6:	1c21      	adds	r1, r4, #0
    a3d8:	4301      	orrs	r1, r0
    a3da:	7099      	strb	r1, [r3, #2]
    a3dc:	0e10      	lsrs	r0, r2, #24
    a3de:	78da      	ldrb	r2, [r3, #3]
    a3e0:	2100      	movs	r1, #0
    a3e2:	400a      	ands	r2, r1
    a3e4:	1c11      	adds	r1, r2, #0
    a3e6:	1c02      	adds	r2, r0, #0
    a3e8:	430a      	orrs	r2, r1
    a3ea:	70da      	strb	r2, [r3, #3]
	RegParams.MinNewChIndex = 0xFF;
    a3ec:	4bcb      	ldr	r3, [pc, #812]	; (a71c <LORAReg_InitNA+0x40c>)
    a3ee:	2221      	movs	r2, #33	; 0x21
    a3f0:	21ff      	movs	r1, #255	; 0xff
    a3f2:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    a3f4:	4bc9      	ldr	r3, [pc, #804]	; (a71c <LORAReg_InitNA+0x40c>)
    a3f6:	2222      	movs	r2, #34	; 0x22
    a3f8:	210a      	movs	r1, #10
    a3fa:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    a3fc:	4bc7      	ldr	r3, [pc, #796]	; (a71c <LORAReg_InitNA+0x40c>)
    a3fe:	2223      	movs	r2, #35	; 0x23
    a400:	2108      	movs	r1, #8
    a402:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    a404:	4bc5      	ldr	r3, [pc, #788]	; (a71c <LORAReg_InitNA+0x40c>)
    a406:	7f1a      	ldrb	r2, [r3, #28]
    a408:	2100      	movs	r1, #0
    a40a:	400a      	ands	r2, r1
    a40c:	1c11      	adds	r1, r2, #0
    a40e:	2260      	movs	r2, #96	; 0x60
    a410:	4252      	negs	r2, r2
    a412:	430a      	orrs	r2, r1
    a414:	771a      	strb	r2, [r3, #28]
    a416:	7f5a      	ldrb	r2, [r3, #29]
    a418:	2100      	movs	r1, #0
    a41a:	400a      	ands	r2, r1
    a41c:	1c11      	adds	r1, r2, #0
    a41e:	2270      	movs	r2, #112	; 0x70
    a420:	430a      	orrs	r2, r1
    a422:	775a      	strb	r2, [r3, #29]
    a424:	7f9a      	ldrb	r2, [r3, #30]
    a426:	2100      	movs	r1, #0
    a428:	400a      	ands	r2, r1
    a42a:	1c11      	adds	r1, r2, #0
    a42c:	2208      	movs	r2, #8
    a42e:	430a      	orrs	r2, r1
    a430:	779a      	strb	r2, [r3, #30]
    a432:	7fda      	ldrb	r2, [r3, #31]
    a434:	2100      	movs	r1, #0
    a436:	400a      	ands	r2, r1
    a438:	1c11      	adds	r1, r2, #0
    a43a:	2237      	movs	r2, #55	; 0x37
    a43c:	430a      	orrs	r2, r1
    a43e:	77da      	strb	r2, [r3, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    a440:	4bb6      	ldr	r3, [pc, #728]	; (a71c <LORAReg_InitNA+0x40c>)
    a442:	2220      	movs	r2, #32
    a444:	2138      	movs	r1, #56	; 0x38
    a446:	5499      	strb	r1, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    a448:	4bb4      	ldr	r3, [pc, #720]	; (a71c <LORAReg_InitNA+0x40c>)
    a44a:	2224      	movs	r2, #36	; 0x24
    a44c:	2104      	movs	r1, #4
    a44e:	5499      	strb	r1, [r3, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    a450:	4bb2      	ldr	r3, [pc, #712]	; (a71c <LORAReg_InitNA+0x40c>)
    a452:	2225      	movs	r2, #37	; 0x25
    a454:	2100      	movs	r1, #0
    a456:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    a458:	4ab0      	ldr	r2, [pc, #704]	; (a71c <LORAReg_InitNA+0x40c>)
    a45a:	23aa      	movs	r3, #170	; 0xaa
    a45c:	005b      	lsls	r3, r3, #1
    a45e:	2140      	movs	r1, #64	; 0x40
    a460:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    a462:	4aae      	ldr	r2, [pc, #696]	; (a71c <LORAReg_InitNA+0x40c>)
    a464:	2356      	movs	r3, #86	; 0x56
    a466:	33ff      	adds	r3, #255	; 0xff
    a468:	2108      	movs	r1, #8
    a46a:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    a46c:	4aab      	ldr	r2, [pc, #684]	; (a71c <LORAReg_InitNA+0x40c>)
    a46e:	23a8      	movs	r3, #168	; 0xa8
    a470:	005b      	lsls	r3, r3, #1
    a472:	2100      	movs	r1, #0
    a474:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    a476:	4aa9      	ldr	r2, [pc, #676]	; (a71c <LORAReg_InitNA+0x40c>)
    a478:	2352      	movs	r3, #82	; 0x52
    a47a:	33ff      	adds	r3, #255	; 0xff
    a47c:	2104      	movs	r1, #4
    a47e:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    a480:	4aa6      	ldr	r2, [pc, #664]	; (a71c <LORAReg_InitNA+0x40c>)
    a482:	23a9      	movs	r3, #169	; 0xa9
    a484:	005b      	lsls	r3, r3, #1
    a486:	2108      	movs	r1, #8
    a488:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    a48a:	4aa4      	ldr	r2, [pc, #656]	; (a71c <LORAReg_InitNA+0x40c>)
    a48c:	2354      	movs	r3, #84	; 0x54
    a48e:	33ff      	adds	r3, #255	; 0xff
    a490:	210d      	movs	r1, #13
    a492:	54d1      	strb	r1, [r2, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    a494:	4aa1      	ldr	r2, [pc, #644]	; (a71c <LORAReg_InitNA+0x40c>)
    a496:	23ab      	movs	r3, #171	; 0xab
    a498:	005b      	lsls	r3, r3, #1
    a49a:	210a      	movs	r1, #10
    a49c:	54d1      	strb	r1, [r2, r3]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    a49e:	4b9f      	ldr	r3, [pc, #636]	; (a71c <LORAReg_InitNA+0x40c>)
    a4a0:	4aa1      	ldr	r2, [pc, #644]	; (a728 <LORAReg_InitNA+0x418>)
    a4a2:	21ff      	movs	r1, #255	; 0xff
    a4a4:	4011      	ands	r1, r2
    a4a6:	000c      	movs	r4, r1
    a4a8:	7d19      	ldrb	r1, [r3, #20]
    a4aa:	2000      	movs	r0, #0
    a4ac:	4001      	ands	r1, r0
    a4ae:	1c08      	adds	r0, r1, #0
    a4b0:	1c21      	adds	r1, r4, #0
    a4b2:	4301      	orrs	r1, r0
    a4b4:	7519      	strb	r1, [r3, #20]
    a4b6:	0a11      	lsrs	r1, r2, #8
    a4b8:	20ff      	movs	r0, #255	; 0xff
    a4ba:	4001      	ands	r1, r0
    a4bc:	000c      	movs	r4, r1
    a4be:	7d59      	ldrb	r1, [r3, #21]
    a4c0:	2000      	movs	r0, #0
    a4c2:	4001      	ands	r1, r0
    a4c4:	1c08      	adds	r0, r1, #0
    a4c6:	1c21      	adds	r1, r4, #0
    a4c8:	4301      	orrs	r1, r0
    a4ca:	7559      	strb	r1, [r3, #21]
    a4cc:	0c11      	lsrs	r1, r2, #16
    a4ce:	20ff      	movs	r0, #255	; 0xff
    a4d0:	4001      	ands	r1, r0
    a4d2:	000c      	movs	r4, r1
    a4d4:	7d99      	ldrb	r1, [r3, #22]
    a4d6:	2000      	movs	r0, #0
    a4d8:	4001      	ands	r1, r0
    a4da:	1c08      	adds	r0, r1, #0
    a4dc:	1c21      	adds	r1, r4, #0
    a4de:	4301      	orrs	r1, r0
    a4e0:	7599      	strb	r1, [r3, #22]
    a4e2:	0e10      	lsrs	r0, r2, #24
    a4e4:	7dda      	ldrb	r2, [r3, #23]
    a4e6:	2100      	movs	r1, #0
    a4e8:	400a      	ands	r2, r1
    a4ea:	1c11      	adds	r1, r2, #0
    a4ec:	1c02      	adds	r2, r0, #0
    a4ee:	430a      	orrs	r2, r1
    a4f0:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    a4f2:	4b8a      	ldr	r3, [pc, #552]	; (a71c <LORAReg_InitNA+0x40c>)
    a4f4:	4a8d      	ldr	r2, [pc, #564]	; (a72c <LORAReg_InitNA+0x41c>)
    a4f6:	21ff      	movs	r1, #255	; 0xff
    a4f8:	4011      	ands	r1, r2
    a4fa:	000c      	movs	r4, r1
    a4fc:	7e19      	ldrb	r1, [r3, #24]
    a4fe:	2000      	movs	r0, #0
    a500:	4001      	ands	r1, r0
    a502:	1c08      	adds	r0, r1, #0
    a504:	1c21      	adds	r1, r4, #0
    a506:	4301      	orrs	r1, r0
    a508:	7619      	strb	r1, [r3, #24]
    a50a:	0a11      	lsrs	r1, r2, #8
    a50c:	20ff      	movs	r0, #255	; 0xff
    a50e:	4001      	ands	r1, r0
    a510:	000c      	movs	r4, r1
    a512:	7e59      	ldrb	r1, [r3, #25]
    a514:	2000      	movs	r0, #0
    a516:	4001      	ands	r1, r0
    a518:	1c08      	adds	r0, r1, #0
    a51a:	1c21      	adds	r1, r4, #0
    a51c:	4301      	orrs	r1, r0
    a51e:	7659      	strb	r1, [r3, #25]
    a520:	0c11      	lsrs	r1, r2, #16
    a522:	20ff      	movs	r0, #255	; 0xff
    a524:	4001      	ands	r1, r0
    a526:	000c      	movs	r4, r1
    a528:	7e99      	ldrb	r1, [r3, #26]
    a52a:	2000      	movs	r0, #0
    a52c:	4001      	ands	r1, r0
    a52e:	1c08      	adds	r0, r1, #0
    a530:	1c21      	adds	r1, r4, #0
    a532:	4301      	orrs	r1, r0
    a534:	7699      	strb	r1, [r3, #26]
    a536:	0e10      	lsrs	r0, r2, #24
    a538:	7eda      	ldrb	r2, [r3, #27]
    a53a:	2100      	movs	r1, #0
    a53c:	400a      	ands	r2, r1
    a53e:	1c11      	adds	r1, r2, #0
    a540:	1c02      	adds	r2, r0, #0
    a542:	430a      	orrs	r2, r1
    a544:	76da      	strb	r2, [r3, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    a546:	4a75      	ldr	r2, [pc, #468]	; (a71c <LORAReg_InitNA+0x40c>)
    a548:	23a2      	movs	r3, #162	; 0xa2
    a54a:	005b      	lsls	r3, r3, #1
    a54c:	5cd1      	ldrb	r1, [r2, r3]
    a54e:	2000      	movs	r0, #0
    a550:	4001      	ands	r1, r0
    a552:	1c08      	adds	r0, r1, #0
    a554:	2160      	movs	r1, #96	; 0x60
    a556:	4301      	orrs	r1, r0
    a558:	54d1      	strb	r1, [r2, r3]
    a55a:	18d1      	adds	r1, r2, r3
    a55c:	7848      	ldrb	r0, [r1, #1]
    a55e:	2400      	movs	r4, #0
    a560:	4020      	ands	r0, r4
    a562:	1c04      	adds	r4, r0, #0
    a564:	2001      	movs	r0, #1
    a566:	4320      	orrs	r0, r4
    a568:	7048      	strb	r0, [r1, #1]
    a56a:	18d1      	adds	r1, r2, r3
    a56c:	7888      	ldrb	r0, [r1, #2]
    a56e:	2400      	movs	r4, #0
    a570:	4020      	ands	r0, r4
    a572:	1c04      	adds	r4, r0, #0
    a574:	2038      	movs	r0, #56	; 0x38
    a576:	4240      	negs	r0, r0
    a578:	4320      	orrs	r0, r4
    a57a:	7088      	strb	r0, [r1, #2]
    a57c:	18d3      	adds	r3, r2, r3
    a57e:	78da      	ldrb	r2, [r3, #3]
    a580:	2100      	movs	r1, #0
    a582:	400a      	ands	r2, r1
    a584:	1c11      	adds	r1, r2, #0
    a586:	2235      	movs	r2, #53	; 0x35
    a588:	430a      	orrs	r2, r1
    a58a:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    a58c:	4a63      	ldr	r2, [pc, #396]	; (a71c <LORAReg_InitNA+0x40c>)
    a58e:	23a4      	movs	r3, #164	; 0xa4
    a590:	005b      	lsls	r3, r3, #1
    a592:	5cd1      	ldrb	r1, [r2, r3]
    a594:	2000      	movs	r0, #0
    a596:	4001      	ands	r1, r0
    a598:	1c08      	adds	r0, r1, #0
    a59a:	2140      	movs	r1, #64	; 0x40
    a59c:	4249      	negs	r1, r1
    a59e:	4301      	orrs	r1, r0
    a5a0:	54d1      	strb	r1, [r2, r3]
    a5a2:	18d1      	adds	r1, r2, r3
    a5a4:	7848      	ldrb	r0, [r1, #1]
    a5a6:	2400      	movs	r4, #0
    a5a8:	4020      	ands	r0, r4
    a5aa:	1c04      	adds	r4, r0, #0
    a5ac:	2051      	movs	r0, #81	; 0x51
    a5ae:	4240      	negs	r0, r0
    a5b0:	4320      	orrs	r0, r4
    a5b2:	7048      	strb	r0, [r1, #1]
    a5b4:	18d1      	adds	r1, r2, r3
    a5b6:	7888      	ldrb	r0, [r1, #2]
    a5b8:	2400      	movs	r4, #0
    a5ba:	4020      	ands	r0, r4
    a5bc:	1c04      	adds	r4, r0, #0
    a5be:	202e      	movs	r0, #46	; 0x2e
    a5c0:	4240      	negs	r0, r0
    a5c2:	4320      	orrs	r0, r4
    a5c4:	7088      	strb	r0, [r1, #2]
    a5c6:	18d3      	adds	r3, r2, r3
    a5c8:	78da      	ldrb	r2, [r3, #3]
    a5ca:	2100      	movs	r1, #0
    a5cc:	400a      	ands	r2, r1
    a5ce:	1c11      	adds	r1, r2, #0
    a5d0:	2235      	movs	r2, #53	; 0x35
    a5d2:	430a      	orrs	r2, r1
    a5d4:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    a5d6:	4a51      	ldr	r2, [pc, #324]	; (a71c <LORAReg_InitNA+0x40c>)
    a5d8:	23a6      	movs	r3, #166	; 0xa6
    a5da:	005b      	lsls	r3, r3, #1
    a5dc:	5cd1      	ldrb	r1, [r2, r3]
    a5de:	2000      	movs	r0, #0
    a5e0:	4001      	ands	r1, r0
    a5e2:	1c08      	adds	r0, r1, #0
    a5e4:	2160      	movs	r1, #96	; 0x60
    a5e6:	4249      	negs	r1, r1
    a5e8:	4301      	orrs	r1, r0
    a5ea:	54d1      	strb	r1, [r2, r3]
    a5ec:	18d1      	adds	r1, r2, r3
    a5ee:	7848      	ldrb	r0, [r1, #1]
    a5f0:	2400      	movs	r4, #0
    a5f2:	4020      	ands	r0, r4
    a5f4:	1c04      	adds	r4, r0, #0
    a5f6:	2070      	movs	r0, #112	; 0x70
    a5f8:	4320      	orrs	r0, r4
    a5fa:	7048      	strb	r0, [r1, #1]
    a5fc:	18d1      	adds	r1, r2, r3
    a5fe:	7888      	ldrb	r0, [r1, #2]
    a600:	2400      	movs	r4, #0
    a602:	4020      	ands	r0, r4
    a604:	1c04      	adds	r4, r0, #0
    a606:	2008      	movs	r0, #8
    a608:	4320      	orrs	r0, r4
    a60a:	7088      	strb	r0, [r1, #2]
    a60c:	18d3      	adds	r3, r2, r3
    a60e:	78da      	ldrb	r2, [r3, #3]
    a610:	2100      	movs	r1, #0
    a612:	400a      	ands	r2, r1
    a614:	1c11      	adds	r1, r2, #0
    a616:	2237      	movs	r2, #55	; 0x37
    a618:	430a      	orrs	r2, r1
    a61a:	70da      	strb	r2, [r3, #3]
	RegParams.Rx1DrOffset = 3;
    a61c:	4b3f      	ldr	r3, [pc, #252]	; (a71c <LORAReg_InitNA+0x40c>)
    a61e:	222c      	movs	r2, #44	; 0x2c
    a620:	2103      	movs	r1, #3
    a622:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwrIndx = 10;
    a624:	4b3d      	ldr	r3, [pc, #244]	; (a71c <LORAReg_InitNA+0x40c>)
    a626:	222d      	movs	r2, #45	; 0x2d
    a628:	210a      	movs	r1, #10
    a62a:	5499      	strb	r1, [r3, r2]
	RegParams.defTxPwrIndx = MAC_DEF_TX_POWER_NA;
    a62c:	4b3b      	ldr	r3, [pc, #236]	; (a71c <LORAReg_InitNA+0x40c>)
    a62e:	222e      	movs	r2, #46	; 0x2e
    a630:	2107      	movs	r1, #7
    a632:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a634:	4a39      	ldr	r2, [pc, #228]	; (a71c <LORAReg_InitNA+0x40c>)
    a636:	23ac      	movs	r3, #172	; 0xac
    a638:	005b      	lsls	r3, r3, #1
    a63a:	2100      	movs	r1, #0
    a63c:	54d1      	strb	r1, [r2, r3]

	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    a63e:	4b37      	ldr	r3, [pc, #220]	; (a71c <LORAReg_InitNA+0x40c>)
    a640:	7e1a      	ldrb	r2, [r3, #24]
    a642:	7e59      	ldrb	r1, [r3, #25]
    a644:	0209      	lsls	r1, r1, #8
    a646:	430a      	orrs	r2, r1
    a648:	7e99      	ldrb	r1, [r3, #26]
    a64a:	0409      	lsls	r1, r1, #16
    a64c:	430a      	orrs	r2, r1
    a64e:	7edb      	ldrb	r3, [r3, #27]
    a650:	061b      	lsls	r3, r3, #24
    a652:	4313      	orrs	r3, r2
    a654:	001a      	movs	r2, r3
    a656:	4b36      	ldr	r3, [pc, #216]	; (a730 <LORAReg_InitNA+0x420>)
    a658:	781b      	ldrb	r3, [r3, #0]
    a65a:	7013      	strb	r3, [r2, #0]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    a65c:	4b2f      	ldr	r3, [pc, #188]	; (a71c <LORAReg_InitNA+0x40c>)
    a65e:	7d1a      	ldrb	r2, [r3, #20]
    a660:	7d59      	ldrb	r1, [r3, #21]
    a662:	0209      	lsls	r1, r1, #8
    a664:	430a      	orrs	r2, r1
    a666:	7d99      	ldrb	r1, [r3, #22]
    a668:	0409      	lsls	r1, r1, #16
    a66a:	430a      	orrs	r2, r1
    a66c:	7ddb      	ldrb	r3, [r3, #23]
    a66e:	061b      	lsls	r3, r3, #24
    a670:	4313      	orrs	r3, r2
    a672:	001a      	movs	r2, r3
    a674:	4b2e      	ldr	r3, [pc, #184]	; (a730 <LORAReg_InitNA+0x420>)
    a676:	785b      	ldrb	r3, [r3, #1]
    a678:	7213      	strb	r3, [r2, #8]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    a67a:	4b28      	ldr	r3, [pc, #160]	; (a71c <LORAReg_InitNA+0x40c>)
    a67c:	7d1a      	ldrb	r2, [r3, #20]
    a67e:	7d59      	ldrb	r1, [r3, #21]
    a680:	0209      	lsls	r1, r1, #8
    a682:	430a      	orrs	r2, r1
    a684:	7d99      	ldrb	r1, [r3, #22]
    a686:	0409      	lsls	r1, r1, #16
    a688:	430a      	orrs	r2, r1
    a68a:	7ddb      	ldrb	r3, [r3, #23]
    a68c:	061b      	lsls	r3, r3, #24
    a68e:	4313      	orrs	r3, r2
    a690:	791a      	ldrb	r2, [r3, #4]
    a692:	2100      	movs	r1, #0
    a694:	400a      	ands	r2, r1
    a696:	711a      	strb	r2, [r3, #4]
    a698:	795a      	ldrb	r2, [r3, #5]
    a69a:	2100      	movs	r1, #0
    a69c:	400a      	ands	r2, r1
    a69e:	715a      	strb	r2, [r3, #5]
    a6a0:	799a      	ldrb	r2, [r3, #6]
    a6a2:	2100      	movs	r1, #0
    a6a4:	400a      	ands	r2, r1
    a6a6:	719a      	strb	r2, [r3, #6]
    a6a8:	79da      	ldrb	r2, [r3, #7]
    a6aa:	2100      	movs	r1, #0
    a6ac:	400a      	ands	r2, r1
    a6ae:	71da      	strb	r2, [r3, #7]
	RegParams.joinbccount =0;
    a6b0:	4b1a      	ldr	r3, [pc, #104]	; (a71c <LORAReg_InitNA+0x40c>)
    a6b2:	2243      	movs	r2, #67	; 0x43
    a6b4:	2100      	movs	r1, #0
    a6b6:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    a6b8:	4b18      	ldr	r3, [pc, #96]	; (a71c <LORAReg_InitNA+0x40c>)
    a6ba:	333f      	adds	r3, #63	; 0x3f
    a6bc:	781a      	ldrb	r2, [r3, #0]
    a6be:	2100      	movs	r1, #0
    a6c0:	400a      	ands	r2, r1
    a6c2:	701a      	strb	r2, [r3, #0]
    a6c4:	785a      	ldrb	r2, [r3, #1]
    a6c6:	2100      	movs	r1, #0
    a6c8:	400a      	ands	r2, r1
    a6ca:	705a      	strb	r2, [r3, #1]
    a6cc:	789a      	ldrb	r2, [r3, #2]
    a6ce:	2100      	movs	r1, #0
    a6d0:	400a      	ands	r2, r1
    a6d2:	709a      	strb	r2, [r3, #2]
    a6d4:	78da      	ldrb	r2, [r3, #3]
    a6d6:	2100      	movs	r1, #0
    a6d8:	400a      	ands	r2, r1
    a6da:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    a6dc:	4b0f      	ldr	r3, [pc, #60]	; (a71c <LORAReg_InitNA+0x40c>)
    a6de:	1dfa      	adds	r2, r7, #7
    a6e0:	212f      	movs	r1, #47	; 0x2f
    a6e2:	7812      	ldrb	r2, [r2, #0]
    a6e4:	545a      	strb	r2, [r3, r1]

    InitDefault915Channels ();
    a6e6:	4b13      	ldr	r3, [pc, #76]	; (a734 <LORAReg_InitNA+0x424>)
    a6e8:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    a6ea:	4b0c      	ldr	r3, [pc, #48]	; (a71c <LORAReg_InitNA+0x40c>)
    a6ec:	781a      	ldrb	r2, [r3, #0]
    a6ee:	7859      	ldrb	r1, [r3, #1]
    a6f0:	0209      	lsls	r1, r1, #8
    a6f2:	430a      	orrs	r2, r1
    a6f4:	7899      	ldrb	r1, [r3, #2]
    a6f6:	0409      	lsls	r1, r1, #16
    a6f8:	430a      	orrs	r2, r1
    a6fa:	78db      	ldrb	r3, [r3, #3]
    a6fc:	061b      	lsls	r3, r3, #24
    a6fe:	4313      	orrs	r3, r2
    a700:	001a      	movs	r2, r3
    a702:	4b0d      	ldr	r3, [pc, #52]	; (a738 <LORAReg_InitNA+0x428>)
    a704:	0010      	movs	r0, r2
    a706:	0019      	movs	r1, r3
    a708:	2370      	movs	r3, #112	; 0x70
    a70a:	001a      	movs	r2, r3
    a70c:	4b0b      	ldr	r3, [pc, #44]	; (a73c <LORAReg_InitNA+0x42c>)
    a70e:	4798      	blx	r3
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    a710:	4a02      	ldr	r2, [pc, #8]	; (a71c <LORAReg_InitNA+0x40c>)
    a712:	2358      	movs	r3, #88	; 0x58
    a714:	33ff      	adds	r3, #255	; 0xff
    a716:	2100      	movs	r1, #0
    a718:	54d1      	strb	r1, [r2, r3]
    a71a:	e011      	b.n	a740 <LORAReg_InitNA+0x430>
    a71c:	200014a8 	.word	0x200014a8
    a720:	2000155c 	.word	0x2000155c
    a724:	200014ec 	.word	0x200014ec
    a728:	200014dd 	.word	0x200014dd
    a72c:	200014e6 	.word	0x200014e6
    a730:	200014a4 	.word	0x200014a4
    a734:	0000a835 	.word	0x0000a835
    a738:	0002b1b4 	.word	0x0002b1b4
    a73c:	00024149 	.word	0x00024149

#if (ENABLE_PDS == 1)

	/*Fill PDS item id in RegParam Structure */
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    a740:	4a30      	ldr	r2, [pc, #192]	; (a804 <LORAReg_InitNA+0x4f4>)
    a742:	2383      	movs	r3, #131	; 0x83
    a744:	009b      	lsls	r3, r3, #2
    a746:	2102      	movs	r1, #2
    a748:	54d1      	strb	r1, [r2, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    a74a:	4b2e      	ldr	r3, [pc, #184]	; (a804 <LORAReg_InitNA+0x4f4>)
    a74c:	4a2e      	ldr	r2, [pc, #184]	; (a808 <LORAReg_InitNA+0x4f8>)
    a74e:	5c99      	ldrb	r1, [r3, r2]
    a750:	2000      	movs	r0, #0
    a752:	4001      	ands	r1, r0
    a754:	5499      	strb	r1, [r3, r2]
    a756:	189b      	adds	r3, r3, r2
    a758:	785a      	ldrb	r2, [r3, #1]
    a75a:	2100      	movs	r1, #0
    a75c:	400a      	ands	r2, r1
    a75e:	1c11      	adds	r1, r2, #0
    a760:	2202      	movs	r2, #2
    a762:	430a      	orrs	r2, r1
    a764:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    a766:	4b27      	ldr	r3, [pc, #156]	; (a804 <LORAReg_InitNA+0x4f4>)
    a768:	4a28      	ldr	r2, [pc, #160]	; (a80c <LORAReg_InitNA+0x4fc>)
    a76a:	5c99      	ldrb	r1, [r3, r2]
    a76c:	2000      	movs	r0, #0
    a76e:	4001      	ands	r1, r0
    a770:	5499      	strb	r1, [r3, r2]
    a772:	189b      	adds	r3, r3, r2
    a774:	785a      	ldrb	r2, [r3, #1]
    a776:	2100      	movs	r1, #0
    a778:	400a      	ands	r2, r1
    a77a:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    a77c:	4b21      	ldr	r3, [pc, #132]	; (a804 <LORAReg_InitNA+0x4f4>)
    a77e:	4a24      	ldr	r2, [pc, #144]	; (a810 <LORAReg_InitNA+0x500>)
    a780:	5c99      	ldrb	r1, [r3, r2]
    a782:	2000      	movs	r0, #0
    a784:	4001      	ands	r1, r0
    a786:	5499      	strb	r1, [r3, r2]
    a788:	189b      	adds	r3, r3, r2
    a78a:	785a      	ldrb	r2, [r3, #1]
    a78c:	2100      	movs	r1, #0
    a78e:	400a      	ands	r2, r1
    a790:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    a792:	4b1c      	ldr	r3, [pc, #112]	; (a804 <LORAReg_InitNA+0x4f4>)
    a794:	4a1f      	ldr	r2, [pc, #124]	; (a814 <LORAReg_InitNA+0x504>)
    a796:	5c99      	ldrb	r1, [r3, r2]
    a798:	2000      	movs	r0, #0
    a79a:	4001      	ands	r1, r0
    a79c:	1c08      	adds	r0, r1, #0
    a79e:	2101      	movs	r1, #1
    a7a0:	4301      	orrs	r1, r0
    a7a2:	5499      	strb	r1, [r3, r2]
    a7a4:	189b      	adds	r3, r3, r2
    a7a6:	785a      	ldrb	r2, [r3, #1]
    a7a8:	2100      	movs	r1, #0
    a7aa:	400a      	ands	r2, r1
    a7ac:	1c11      	adds	r1, r2, #0
    a7ae:	2202      	movs	r2, #2
    a7b0:	430a      	orrs	r2, r1
    a7b2:	705a      	strb	r2, [r3, #1]
	PdsFileMarks_t filemarks;
	/* File ID NA - Register */
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    a7b4:	230c      	movs	r3, #12
    a7b6:	18fb      	adds	r3, r7, r3
    a7b8:	4a17      	ldr	r2, [pc, #92]	; (a818 <LORAReg_InitNA+0x508>)
    a7ba:	601a      	str	r2, [r3, #0]
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    a7bc:	230c      	movs	r3, #12
    a7be:	18fb      	adds	r3, r7, r3
    a7c0:	2202      	movs	r2, #2
    a7c2:	711a      	strb	r2, [r3, #4]
	filemarks.itemListAddr = (ItemMap_t *)&pds_reg_na_item_list;
    a7c4:	230c      	movs	r3, #12
    a7c6:	18fb      	adds	r3, r7, r3
    a7c8:	4a14      	ldr	r2, [pc, #80]	; (a81c <LORAReg_InitNA+0x50c>)
    a7ca:	609a      	str	r2, [r3, #8]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    a7cc:	230c      	movs	r3, #12
    a7ce:	18fb      	adds	r3, r7, r3
    a7d0:	4a13      	ldr	r2, [pc, #76]	; (a820 <LORAReg_InitNA+0x510>)
    a7d2:	60da      	str	r2, [r3, #12]
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    a7d4:	230c      	movs	r3, #12
    a7d6:	18fb      	adds	r3, r7, r3
    a7d8:	466a      	mov	r2, sp
    a7da:	68d9      	ldr	r1, [r3, #12]
    a7dc:	6011      	str	r1, [r2, #0]
    a7de:	6819      	ldr	r1, [r3, #0]
    a7e0:	685a      	ldr	r2, [r3, #4]
    a7e2:	689b      	ldr	r3, [r3, #8]
    a7e4:	2002      	movs	r0, #2
    a7e6:	4c0f      	ldr	r4, [pc, #60]	; (a824 <LORAReg_InitNA+0x514>)
    a7e8:	47a0      	blx	r4
#endif
	
    LORAREG_InitGetAttrFnPtrsNA();
    a7ea:	4b0f      	ldr	r3, [pc, #60]	; (a828 <LORAReg_InitNA+0x518>)
    a7ec:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    a7ee:	4b0f      	ldr	r3, [pc, #60]	; (a82c <LORAReg_InitNA+0x51c>)
    a7f0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    a7f2:	4b0f      	ldr	r3, [pc, #60]	; (a830 <LORAReg_InitNA+0x520>)
    a7f4:	4798      	blx	r3

#else
    result = UNSUPPORTED_BAND;
#endif
    return result;
    a7f6:	231f      	movs	r3, #31
    a7f8:	18fb      	adds	r3, r7, r3
    a7fa:	781b      	ldrb	r3, [r3, #0]
}
    a7fc:	0018      	movs	r0, r3
    a7fe:	46bd      	mov	sp, r7
    a800:	b009      	add	sp, #36	; 0x24
    a802:	bd90      	pop	{r4, r7, pc}
    a804:	200014a8 	.word	0x200014a8
    a808:	0000020f 	.word	0x0000020f
    a80c:	00000211 	.word	0x00000211
    a810:	00000213 	.word	0x00000213
    a814:	0000020d 	.word	0x0000020d
    a818:	200012a0 	.word	0x200012a0
    a81c:	0002b224 	.word	0x0002b224
    a820:	0000a895 	.word	0x0000a895
    a824:	00014001 	.word	0x00014001
    a828:	0000a8d5 	.word	0x0000a8d5
    a82c:	0000cc89 	.word	0x0000cc89
    a830:	0000d06d 	.word	0x0000d06d

0000a834 <InitDefault915Channels>:
/*
 * \brief Initalized all NA 915 Supported Channels
 */
#if(NA_BAND == 1)
static void InitDefault915Channels (void)
{
    a834:	b580      	push	{r7, lr}
    a836:	af00      	add	r7, sp, #0
	memset (RegParams.pChParams, 0, sizeof(DefaultChannels915) );
    a838:	4b12      	ldr	r3, [pc, #72]	; (a884 <InitDefault915Channels+0x50>)
    a83a:	791a      	ldrb	r2, [r3, #4]
    a83c:	7959      	ldrb	r1, [r3, #5]
    a83e:	0209      	lsls	r1, r1, #8
    a840:	430a      	orrs	r2, r1
    a842:	7999      	ldrb	r1, [r3, #6]
    a844:	0409      	lsls	r1, r1, #16
    a846:	430a      	orrs	r2, r1
    a848:	79db      	ldrb	r3, [r3, #7]
    a84a:	061b      	lsls	r3, r3, #24
    a84c:	4313      	orrs	r3, r2
    a84e:	2290      	movs	r2, #144	; 0x90
    a850:	2100      	movs	r1, #0
    a852:	0018      	movs	r0, r3
    a854:	4b0c      	ldr	r3, [pc, #48]	; (a888 <InitDefault915Channels+0x54>)
    a856:	4798      	blx	r3
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    a858:	4b0a      	ldr	r3, [pc, #40]	; (a884 <InitDefault915Channels+0x50>)
    a85a:	791a      	ldrb	r2, [r3, #4]
    a85c:	7959      	ldrb	r1, [r3, #5]
    a85e:	0209      	lsls	r1, r1, #8
    a860:	430a      	orrs	r2, r1
    a862:	7999      	ldrb	r1, [r3, #6]
    a864:	0409      	lsls	r1, r1, #16
    a866:	430a      	orrs	r2, r1
    a868:	79db      	ldrb	r3, [r3, #7]
    a86a:	061b      	lsls	r3, r3, #24
    a86c:	4313      	orrs	r3, r2
    a86e:	001a      	movs	r2, r3
    a870:	4b06      	ldr	r3, [pc, #24]	; (a88c <InitDefault915Channels+0x58>)
    a872:	0010      	movs	r0, r2
    a874:	0019      	movs	r1, r3
    a876:	2390      	movs	r3, #144	; 0x90
    a878:	001a      	movs	r2, r3
    a87a:	4b05      	ldr	r3, [pc, #20]	; (a890 <InitDefault915Channels+0x5c>)
    a87c:	4798      	blx	r3
}
    a87e:	46c0      	nop			; (mov r8, r8)
    a880:	46bd      	mov	sp, r7
    a882:	bd80      	pop	{r7, pc}
    a884:	200014a8 	.word	0x200014a8
    a888:	000241cd 	.word	0x000241cd
    a88c:	0002b124 	.word	0x0002b124
    a890:	00024149 	.word	0x00024149

0000a894 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
    a894:	b580      	push	{r7, lr}
    a896:	af00      	add	r7, sp, #0
	
}
    a898:	46c0      	nop			; (mov r8, r8)
    a89a:	46bd      	mov	sp, r7
    a89c:	bd80      	pop	{r7, pc}

0000a89e <InValidGetAttr>:
/*****************************CONSTANTS ***************************************/

/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
    a89e:	b580      	push	{r7, lr}
    a8a0:	b084      	sub	sp, #16
    a8a2:	af00      	add	r7, sp, #0
    a8a4:	60b9      	str	r1, [r7, #8]
    a8a6:	607a      	str	r2, [r7, #4]
    a8a8:	230f      	movs	r3, #15
    a8aa:	18fb      	adds	r3, r7, r3
    a8ac:	1c02      	adds	r2, r0, #0
    a8ae:	701a      	strb	r2, [r3, #0]
	return LORAWAN_INVALID_REQUEST;
    a8b0:	2315      	movs	r3, #21
}
    a8b2:	0018      	movs	r0, r3
    a8b4:	46bd      	mov	sp, r7
    a8b6:	b004      	add	sp, #16
    a8b8:	bd80      	pop	{r7, pc}

0000a8ba <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
    a8ba:	b580      	push	{r7, lr}
    a8bc:	b082      	sub	sp, #8
    a8be:	af00      	add	r7, sp, #0
    a8c0:	0002      	movs	r2, r0
    a8c2:	6039      	str	r1, [r7, #0]
    a8c4:	1dfb      	adds	r3, r7, #7
    a8c6:	701a      	strb	r2, [r3, #0]
	return LORAWAN_INVALID_REQUEST;
    a8c8:	2315      	movs	r3, #21
}
    a8ca:	0018      	movs	r0, r3
    a8cc:	46bd      	mov	sp, r7
    a8ce:	b002      	add	sp, #8
    a8d0:	bd80      	pop	{r7, pc}
	...

0000a8d4 <LORAREG_InitGetAttrFnPtrsNA>:

#if (NA_BAND == 1)
void LORAREG_InitGetAttrFnPtrsNA(void)
{
    a8d4:	b580      	push	{r7, lr}
    a8d6:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    a8d8:	4b3d      	ldr	r3, [pc, #244]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8da:	4a3e      	ldr	r2, [pc, #248]	; (a9d4 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    a8dc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    a8de:	4b3c      	ldr	r3, [pc, #240]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8e0:	4a3d      	ldr	r2, [pc, #244]	; (a9d8 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    a8e2:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    a8e4:	4b3a      	ldr	r3, [pc, #232]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8e6:	4a3d      	ldr	r2, [pc, #244]	; (a9dc <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    a8e8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    a8ea:	4b39      	ldr	r3, [pc, #228]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8ec:	4a3c      	ldr	r2, [pc, #240]	; (a9e0 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    a8ee:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a8f0:	4b37      	ldr	r3, [pc, #220]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8f2:	4a3c      	ldr	r2, [pc, #240]	; (a9e4 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    a8f4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a8f6:	4b36      	ldr	r3, [pc, #216]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8f8:	4a3b      	ldr	r2, [pc, #236]	; (a9e8 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    a8fa:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a8fc:	4b34      	ldr	r3, [pc, #208]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a8fe:	4a3b      	ldr	r2, [pc, #236]	; (a9ec <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    a900:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a902:	4b33      	ldr	r3, [pc, #204]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a904:	4a3a      	ldr	r2, [pc, #232]	; (a9f0 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    a906:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a908:	4b31      	ldr	r3, [pc, #196]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a90a:	4a3a      	ldr	r2, [pc, #232]	; (a9f4 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    a90c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a90e:	4b30      	ldr	r3, [pc, #192]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a910:	4a39      	ldr	r2, [pc, #228]	; (a9f8 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    a912:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a914:	4b2e      	ldr	r3, [pc, #184]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a916:	4a39      	ldr	r2, [pc, #228]	; (a9fc <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    a918:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    a91a:	4b2d      	ldr	r3, [pc, #180]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a91c:	4a38      	ldr	r2, [pc, #224]	; (aa00 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    a91e:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a920:	4b2b      	ldr	r3, [pc, #172]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a922:	4a38      	ldr	r2, [pc, #224]	; (aa04 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    a924:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a926:	4b2a      	ldr	r3, [pc, #168]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a928:	4a37      	ldr	r2, [pc, #220]	; (aa08 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    a92a:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    a92c:	4b28      	ldr	r3, [pc, #160]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a92e:	4a37      	ldr	r2, [pc, #220]	; (aa0c <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    a930:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a932:	4b27      	ldr	r3, [pc, #156]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a934:	2180      	movs	r1, #128	; 0x80
    a936:	4a36      	ldr	r2, [pc, #216]	; (aa10 <LORAREG_InitGetAttrFnPtrsNA+0x13c>)
    a938:	505a      	str	r2, [r3, r1]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    a93a:	4b25      	ldr	r3, [pc, #148]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a93c:	4a35      	ldr	r2, [pc, #212]	; (aa14 <LORAREG_InitGetAttrFnPtrsNA+0x140>)
    a93e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    a940:	4b23      	ldr	r3, [pc, #140]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a942:	218c      	movs	r1, #140	; 0x8c
    a944:	4a34      	ldr	r2, [pc, #208]	; (aa18 <LORAREG_InitGetAttrFnPtrsNA+0x144>)
    a946:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    a948:	4b21      	ldr	r3, [pc, #132]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a94a:	2190      	movs	r1, #144	; 0x90
    a94c:	4a33      	ldr	r2, [pc, #204]	; (aa1c <LORAREG_InitGetAttrFnPtrsNA+0x148>)
    a94e:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    a950:	4b1f      	ldr	r3, [pc, #124]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a952:	2194      	movs	r1, #148	; 0x94
    a954:	4a32      	ldr	r2, [pc, #200]	; (aa20 <LORAREG_InitGetAttrFnPtrsNA+0x14c>)
    a956:	505a      	str	r2, [r3, r1]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    a958:	4b1d      	ldr	r3, [pc, #116]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a95a:	2198      	movs	r1, #152	; 0x98
    a95c:	4a31      	ldr	r2, [pc, #196]	; (aa24 <LORAREG_InitGetAttrFnPtrsNA+0x150>)
    a95e:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a960:	4b1b      	ldr	r3, [pc, #108]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a962:	219c      	movs	r1, #156	; 0x9c
    a964:	4a30      	ldr	r2, [pc, #192]	; (aa28 <LORAREG_InitGetAttrFnPtrsNA+0x154>)
    a966:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a968:	4b19      	ldr	r3, [pc, #100]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a96a:	21a0      	movs	r1, #160	; 0xa0
    a96c:	4a2f      	ldr	r2, [pc, #188]	; (aa2c <LORAREG_InitGetAttrFnPtrsNA+0x158>)
    a96e:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a970:	4b17      	ldr	r3, [pc, #92]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a972:	21a4      	movs	r1, #164	; 0xa4
    a974:	4a2e      	ldr	r2, [pc, #184]	; (aa30 <LORAREG_InitGetAttrFnPtrsNA+0x15c>)
    a976:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a978:	4b15      	ldr	r3, [pc, #84]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a97a:	21a8      	movs	r1, #168	; 0xa8
    a97c:	4a2d      	ldr	r2, [pc, #180]	; (aa34 <LORAREG_InitGetAttrFnPtrsNA+0x160>)
    a97e:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    a980:	4b13      	ldr	r3, [pc, #76]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a982:	21ac      	movs	r1, #172	; 0xac
    a984:	4a2c      	ldr	r2, [pc, #176]	; (aa38 <LORAREG_InitGetAttrFnPtrsNA+0x164>)
    a986:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a988:	4b11      	ldr	r3, [pc, #68]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a98a:	21b0      	movs	r1, #176	; 0xb0
    a98c:	4a2b      	ldr	r2, [pc, #172]	; (aa3c <LORAREG_InitGetAttrFnPtrsNA+0x168>)
    a98e:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a990:	4b0f      	ldr	r3, [pc, #60]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a992:	21b4      	movs	r1, #180	; 0xb4
    a994:	4a2a      	ldr	r2, [pc, #168]	; (aa40 <LORAREG_InitGetAttrFnPtrsNA+0x16c>)
    a996:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    a998:	4b0d      	ldr	r3, [pc, #52]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a99a:	21b8      	movs	r1, #184	; 0xb8
    a99c:	4a29      	ldr	r2, [pc, #164]	; (aa44 <LORAREG_InitGetAttrFnPtrsNA+0x170>)
    a99e:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    a9a0:	4b0b      	ldr	r3, [pc, #44]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a9a2:	21bc      	movs	r1, #188	; 0xbc
    a9a4:	4a28      	ldr	r2, [pc, #160]	; (aa48 <LORAREG_InitGetAttrFnPtrsNA+0x174>)
    a9a6:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a9a8:	4b09      	ldr	r3, [pc, #36]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a9aa:	21c0      	movs	r1, #192	; 0xc0
    a9ac:	4a27      	ldr	r2, [pc, #156]	; (aa4c <LORAREG_InitGetAttrFnPtrsNA+0x178>)
    a9ae:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a9b0:	4b07      	ldr	r3, [pc, #28]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a9b2:	21d4      	movs	r1, #212	; 0xd4
    a9b4:	4a26      	ldr	r2, [pc, #152]	; (aa50 <LORAREG_InitGetAttrFnPtrsNA+0x17c>)
    a9b6:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    a9b8:	4b05      	ldr	r3, [pc, #20]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a9ba:	21f0      	movs	r1, #240	; 0xf0
    a9bc:	4a25      	ldr	r2, [pc, #148]	; (aa54 <LORAREG_InitGetAttrFnPtrsNA+0x180>)
    a9be:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a9c0:	4b03      	ldr	r3, [pc, #12]	; (a9d0 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a9c2:	21d8      	movs	r1, #216	; 0xd8
    a9c4:	4a24      	ldr	r2, [pc, #144]	; (aa58 <LORAREG_InitGetAttrFnPtrsNA+0x184>)
    a9c6:	505a      	str	r2, [r3, r1]
}
    a9c8:	46c0      	nop			; (mov r8, r8)
    a9ca:	46bd      	mov	sp, r7
    a9cc:	bd80      	pop	{r7, pc}
    a9ce:	46c0      	nop			; (mov r8, r8)
    a9d0:	20000cd4 	.word	0x20000cd4
    a9d4:	0000b3c5 	.word	0x0000b3c5
    a9d8:	0000b589 	.word	0x0000b589
    a9dc:	0000b69d 	.word	0x0000b69d
    a9e0:	0000b7a1 	.word	0x0000b7a1
    a9e4:	0000ba71 	.word	0x0000ba71
    a9e8:	0000ba9d 	.word	0x0000ba9d
    a9ec:	0000bcfd 	.word	0x0000bcfd
    a9f0:	0000bd29 	.word	0x0000bd29
    a9f4:	0000bd55 	.word	0x0000bd55
    a9f8:	0000bd85 	.word	0x0000bd85
    a9fc:	0000bdb1 	.word	0x0000bdb1
    aa00:	0000be95 	.word	0x0000be95
    aa04:	0000be49 	.word	0x0000be49
    aa08:	0000c259 	.word	0x0000c259
    aa0c:	0000bf85 	.word	0x0000bf85
    aa10:	0000bfe5 	.word	0x0000bfe5
    aa14:	0000c2f5 	.word	0x0000c2f5
    aa18:	0000bae5 	.word	0x0000bae5
    aa1c:	0000bbf1 	.word	0x0000bbf1
    aa20:	0000b965 	.word	0x0000b965
    aa24:	0000c67d 	.word	0x0000c67d
    aa28:	0000c6a1 	.word	0x0000c6a1
    aa2c:	0000c6c5 	.word	0x0000c6c5
    aa30:	0000c6e9 	.word	0x0000c6e9
    aa34:	0000c711 	.word	0x0000c711
    aa38:	0000c739 	.word	0x0000c739
    aa3c:	0000c781 	.word	0x0000c781
    aa40:	0000c7a3 	.word	0x0000c7a3
    aa44:	0000c875 	.word	0x0000c875
    aa48:	0000c9ad 	.word	0x0000c9ad
    aa4c:	0000c849 	.word	0x0000c849
    aa50:	0000c7c5 	.word	0x0000c7c5
    aa54:	0000c7f1 	.word	0x0000c7f1
    aa58:	0000c81d 	.word	0x0000c81d

0000aa5c <LORAREG_InitGetAttrFnPtrsEU>:
#endif

#if(EU_BAND == 1)
void LORAREG_InitGetAttrFnPtrsEU(void)
{
    aa5c:	b580      	push	{r7, lr}
    aa5e:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    aa60:	4b3f      	ldr	r3, [pc, #252]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa62:	4a40      	ldr	r2, [pc, #256]	; (ab64 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    aa64:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    aa66:	4b3e      	ldr	r3, [pc, #248]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa68:	4a3f      	ldr	r2, [pc, #252]	; (ab68 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    aa6a:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    aa6c:	4b3c      	ldr	r3, [pc, #240]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa6e:	4a3f      	ldr	r2, [pc, #252]	; (ab6c <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    aa70:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    aa72:	4b3b      	ldr	r3, [pc, #236]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa74:	4a3e      	ldr	r2, [pc, #248]	; (ab70 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    aa76:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    aa78:	4b39      	ldr	r3, [pc, #228]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa7a:	4a3e      	ldr	r2, [pc, #248]	; (ab74 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    aa7c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    aa7e:	4b38      	ldr	r3, [pc, #224]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa80:	4a3d      	ldr	r2, [pc, #244]	; (ab78 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    aa82:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    aa84:	4b36      	ldr	r3, [pc, #216]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa86:	4a3d      	ldr	r2, [pc, #244]	; (ab7c <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    aa88:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    aa8a:	4b35      	ldr	r3, [pc, #212]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa8c:	4a3c      	ldr	r2, [pc, #240]	; (ab80 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    aa8e:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    aa90:	4b33      	ldr	r3, [pc, #204]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa92:	4a3c      	ldr	r2, [pc, #240]	; (ab84 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    aa94:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    aa96:	4b32      	ldr	r3, [pc, #200]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa98:	4a3b      	ldr	r2, [pc, #236]	; (ab88 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    aa9a:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    aa9c:	4b30      	ldr	r3, [pc, #192]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aa9e:	4a3b      	ldr	r2, [pc, #236]	; (ab8c <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    aaa0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    aaa2:	4b2f      	ldr	r3, [pc, #188]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aaa4:	4a3a      	ldr	r2, [pc, #232]	; (ab90 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    aaa6:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    aaa8:	4b2d      	ldr	r3, [pc, #180]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aaaa:	4a3a      	ldr	r2, [pc, #232]	; (ab94 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    aaac:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    aaae:	4b2c      	ldr	r3, [pc, #176]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aab0:	4a39      	ldr	r2, [pc, #228]	; (ab98 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    aab2:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    aab4:	4b2a      	ldr	r3, [pc, #168]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aab6:	4a39      	ldr	r2, [pc, #228]	; (ab9c <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    aab8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    aaba:	4b29      	ldr	r3, [pc, #164]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aabc:	2180      	movs	r1, #128	; 0x80
    aabe:	4a38      	ldr	r2, [pc, #224]	; (aba0 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    aac0:	505a      	str	r2, [r3, r1]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    aac2:	4b27      	ldr	r3, [pc, #156]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aac4:	4a37      	ldr	r2, [pc, #220]	; (aba4 <LORAREG_InitGetAttrFnPtrsEU+0x148>)
    aac6:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    aac8:	4b25      	ldr	r3, [pc, #148]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aaca:	218c      	movs	r1, #140	; 0x8c
    aacc:	4a36      	ldr	r2, [pc, #216]	; (aba8 <LORAREG_InitGetAttrFnPtrsEU+0x14c>)
    aace:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    aad0:	4b23      	ldr	r3, [pc, #140]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aad2:	2190      	movs	r1, #144	; 0x90
    aad4:	4a35      	ldr	r2, [pc, #212]	; (abac <LORAREG_InitGetAttrFnPtrsEU+0x150>)
    aad6:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    aad8:	4b21      	ldr	r3, [pc, #132]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aada:	2194      	movs	r1, #148	; 0x94
    aadc:	4a34      	ldr	r2, [pc, #208]	; (abb0 <LORAREG_InitGetAttrFnPtrsEU+0x154>)
    aade:	505a      	str	r2, [r3, r1]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    aae0:	4b1f      	ldr	r3, [pc, #124]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aae2:	2198      	movs	r1, #152	; 0x98
    aae4:	4a33      	ldr	r2, [pc, #204]	; (abb4 <LORAREG_InitGetAttrFnPtrsEU+0x158>)
    aae6:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    aae8:	4b1d      	ldr	r3, [pc, #116]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aaea:	219c      	movs	r1, #156	; 0x9c
    aaec:	4a32      	ldr	r2, [pc, #200]	; (abb8 <LORAREG_InitGetAttrFnPtrsEU+0x15c>)
    aaee:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    aaf0:	4b1b      	ldr	r3, [pc, #108]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aaf2:	21a0      	movs	r1, #160	; 0xa0
    aaf4:	4a31      	ldr	r2, [pc, #196]	; (abbc <LORAREG_InitGetAttrFnPtrsEU+0x160>)
    aaf6:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    aaf8:	4b19      	ldr	r3, [pc, #100]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    aafa:	21a4      	movs	r1, #164	; 0xa4
    aafc:	4a30      	ldr	r2, [pc, #192]	; (abc0 <LORAREG_InitGetAttrFnPtrsEU+0x164>)
    aafe:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ab00:	4b17      	ldr	r3, [pc, #92]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab02:	21a8      	movs	r1, #168	; 0xa8
    ab04:	4a2f      	ldr	r2, [pc, #188]	; (abc4 <LORAREG_InitGetAttrFnPtrsEU+0x168>)
    ab06:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ab08:	4b15      	ldr	r3, [pc, #84]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab0a:	21ac      	movs	r1, #172	; 0xac
    ab0c:	4a2e      	ldr	r2, [pc, #184]	; (abc8 <LORAREG_InitGetAttrFnPtrsEU+0x16c>)
    ab0e:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ab10:	4b13      	ldr	r3, [pc, #76]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab12:	21b0      	movs	r1, #176	; 0xb0
    ab14:	4a2d      	ldr	r2, [pc, #180]	; (abcc <LORAREG_InitGetAttrFnPtrsEU+0x170>)
    ab16:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ab18:	4b11      	ldr	r3, [pc, #68]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab1a:	21b4      	movs	r1, #180	; 0xb4
    ab1c:	4a2c      	ldr	r2, [pc, #176]	; (abd0 <LORAREG_InitGetAttrFnPtrsEU+0x174>)
    ab1e:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ab20:	4b0f      	ldr	r3, [pc, #60]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab22:	21b8      	movs	r1, #184	; 0xb8
    ab24:	4a2b      	ldr	r2, [pc, #172]	; (abd4 <LORAREG_InitGetAttrFnPtrsEU+0x178>)
    ab26:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    ab28:	4b0d      	ldr	r3, [pc, #52]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab2a:	21bc      	movs	r1, #188	; 0xbc
    ab2c:	4a2a      	ldr	r2, [pc, #168]	; (abd8 <LORAREG_InitGetAttrFnPtrsEU+0x17c>)
    ab2e:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ab30:	4b0b      	ldr	r3, [pc, #44]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab32:	21c0      	movs	r1, #192	; 0xc0
    ab34:	4a29      	ldr	r2, [pc, #164]	; (abdc <LORAREG_InitGetAttrFnPtrsEU+0x180>)
    ab36:	505a      	str	r2, [r3, r1]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    ab38:	4b09      	ldr	r3, [pc, #36]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab3a:	21cc      	movs	r1, #204	; 0xcc
    ab3c:	4a28      	ldr	r2, [pc, #160]	; (abe0 <LORAREG_InitGetAttrFnPtrsEU+0x184>)
    ab3e:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ab40:	4b07      	ldr	r3, [pc, #28]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab42:	21d4      	movs	r1, #212	; 0xd4
    ab44:	4a27      	ldr	r2, [pc, #156]	; (abe4 <LORAREG_InitGetAttrFnPtrsEU+0x188>)
    ab46:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    ab48:	4b05      	ldr	r3, [pc, #20]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab4a:	21f0      	movs	r1, #240	; 0xf0
    ab4c:	4a26      	ldr	r2, [pc, #152]	; (abe8 <LORAREG_InitGetAttrFnPtrsEU+0x18c>)
    ab4e:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ab50:	4b03      	ldr	r3, [pc, #12]	; (ab60 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    ab52:	21d8      	movs	r1, #216	; 0xd8
    ab54:	4a25      	ldr	r2, [pc, #148]	; (abec <LORAREG_InitGetAttrFnPtrsEU+0x190>)
    ab56:	505a      	str	r2, [r3, r1]
}
    ab58:	46c0      	nop			; (mov r8, r8)
    ab5a:	46bd      	mov	sp, r7
    ab5c:	bd80      	pop	{r7, pc}
    ab5e:	46c0      	nop			; (mov r8, r8)
    ab60:	20000cd4 	.word	0x20000cd4
    ab64:	0000b47d 	.word	0x0000b47d
    ab68:	0000b61d 	.word	0x0000b61d
    ab6c:	0000b729 	.word	0x0000b729
    ab70:	0000b831 	.word	0x0000b831
    ab74:	0000ba71 	.word	0x0000ba71
    ab78:	0000ba9d 	.word	0x0000ba9d
    ab7c:	0000bcfd 	.word	0x0000bcfd
    ab80:	0000bd29 	.word	0x0000bd29
    ab84:	0000bd55 	.word	0x0000bd55
    ab88:	0000bd85 	.word	0x0000bd85
    ab8c:	0000bdb1 	.word	0x0000bdb1
    ab90:	0000bf1d 	.word	0x0000bf1d
    ab94:	0000be49 	.word	0x0000be49
    ab98:	0000c259 	.word	0x0000c259
    ab9c:	0000c0b1 	.word	0x0000c0b1
    aba0:	0000bfe5 	.word	0x0000bfe5
    aba4:	0000c319 	.word	0x0000c319
    aba8:	0000bb75 	.word	0x0000bb75
    abac:	0000bc81 	.word	0x0000bc81
    abb0:	0000b9f5 	.word	0x0000b9f5
    abb4:	0000c3bd 	.word	0x0000c3bd
    abb8:	0000c6a1 	.word	0x0000c6a1
    abbc:	0000c6c5 	.word	0x0000c6c5
    abc0:	0000c6e9 	.word	0x0000c6e9
    abc4:	0000c711 	.word	0x0000c711
    abc8:	0000c739 	.word	0x0000c739
    abcc:	0000c781 	.word	0x0000c781
    abd0:	0000c7a3 	.word	0x0000c7a3
    abd4:	0000c911 	.word	0x0000c911
    abd8:	0000ca29 	.word	0x0000ca29
    abdc:	0000c849 	.word	0x0000c849
    abe0:	0000c1d1 	.word	0x0000c1d1
    abe4:	0000c7c5 	.word	0x0000c7c5
    abe8:	0000c7f1 	.word	0x0000c7f1
    abec:	0000c81d 	.word	0x0000c81d

0000abf0 <LORAREG_InitGetAttrFnPtrsAS>:
#endif


#if(AS_BAND == 1)
void LORAREG_InitGetAttrFnPtrsAS(void)
{
    abf0:	b580      	push	{r7, lr}
    abf2:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    abf4:	4b3f      	ldr	r3, [pc, #252]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    abf6:	4a40      	ldr	r2, [pc, #256]	; (acf8 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    abf8:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    abfa:	4b3e      	ldr	r3, [pc, #248]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    abfc:	4a3f      	ldr	r2, [pc, #252]	; (acfc <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    abfe:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ac00:	4b3c      	ldr	r3, [pc, #240]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac02:	4a3f      	ldr	r2, [pc, #252]	; (ad00 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    ac04:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    ac06:	4b3b      	ldr	r3, [pc, #236]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac08:	4a3e      	ldr	r2, [pc, #248]	; (ad04 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    ac0a:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ac0c:	4b39      	ldr	r3, [pc, #228]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac0e:	4a3e      	ldr	r2, [pc, #248]	; (ad08 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    ac10:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ac12:	4b38      	ldr	r3, [pc, #224]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac14:	4a3d      	ldr	r2, [pc, #244]	; (ad0c <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    ac16:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ac18:	4b36      	ldr	r3, [pc, #216]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac1a:	4a3d      	ldr	r2, [pc, #244]	; (ad10 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    ac1c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ac1e:	4b35      	ldr	r3, [pc, #212]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac20:	4a3c      	ldr	r2, [pc, #240]	; (ad14 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    ac22:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ac24:	4b33      	ldr	r3, [pc, #204]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac26:	4a3c      	ldr	r2, [pc, #240]	; (ad18 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    ac28:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ac2a:	4b32      	ldr	r3, [pc, #200]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac2c:	4a3b      	ldr	r2, [pc, #236]	; (ad1c <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    ac2e:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ac30:	4b30      	ldr	r3, [pc, #192]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac32:	4a3b      	ldr	r2, [pc, #236]	; (ad20 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    ac34:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ac36:	4b2f      	ldr	r3, [pc, #188]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac38:	4a3a      	ldr	r2, [pc, #232]	; (ad24 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    ac3a:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ac3c:	4b2d      	ldr	r3, [pc, #180]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac3e:	4a3a      	ldr	r2, [pc, #232]	; (ad28 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    ac40:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ac42:	4b2c      	ldr	r3, [pc, #176]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac44:	4a39      	ldr	r2, [pc, #228]	; (ad2c <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    ac46:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    ac48:	4b2a      	ldr	r3, [pc, #168]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac4a:	4a39      	ldr	r2, [pc, #228]	; (ad30 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    ac4c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ac4e:	4b29      	ldr	r3, [pc, #164]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac50:	2180      	movs	r1, #128	; 0x80
    ac52:	4a38      	ldr	r2, [pc, #224]	; (ad34 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    ac54:	505a      	str	r2, [r3, r1]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ac56:	4b27      	ldr	r3, [pc, #156]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac58:	218c      	movs	r1, #140	; 0x8c
    ac5a:	4a37      	ldr	r2, [pc, #220]	; (ad38 <LORAREG_InitGetAttrFnPtrsAS+0x148>)
    ac5c:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ac5e:	4b25      	ldr	r3, [pc, #148]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac60:	2190      	movs	r1, #144	; 0x90
    ac62:	4a36      	ldr	r2, [pc, #216]	; (ad3c <LORAREG_InitGetAttrFnPtrsAS+0x14c>)
    ac64:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ac66:	4b23      	ldr	r3, [pc, #140]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac68:	2194      	movs	r1, #148	; 0x94
    ac6a:	4a35      	ldr	r2, [pc, #212]	; (ad40 <LORAREG_InitGetAttrFnPtrsAS+0x150>)
    ac6c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ac6e:	4b21      	ldr	r3, [pc, #132]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac70:	219c      	movs	r1, #156	; 0x9c
    ac72:	4a34      	ldr	r2, [pc, #208]	; (ad44 <LORAREG_InitGetAttrFnPtrsAS+0x154>)
    ac74:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ac76:	4b1f      	ldr	r3, [pc, #124]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac78:	21a0      	movs	r1, #160	; 0xa0
    ac7a:	4a33      	ldr	r2, [pc, #204]	; (ad48 <LORAREG_InitGetAttrFnPtrsAS+0x158>)
    ac7c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ac7e:	4b1d      	ldr	r3, [pc, #116]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac80:	21a4      	movs	r1, #164	; 0xa4
    ac82:	4a32      	ldr	r2, [pc, #200]	; (ad4c <LORAREG_InitGetAttrFnPtrsAS+0x15c>)
    ac84:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ac86:	4b1b      	ldr	r3, [pc, #108]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac88:	21a8      	movs	r1, #168	; 0xa8
    ac8a:	4a31      	ldr	r2, [pc, #196]	; (ad50 <LORAREG_InitGetAttrFnPtrsAS+0x160>)
    ac8c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ac8e:	4b19      	ldr	r3, [pc, #100]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac90:	21ac      	movs	r1, #172	; 0xac
    ac92:	4a30      	ldr	r2, [pc, #192]	; (ad54 <LORAREG_InitGetAttrFnPtrsAS+0x164>)
    ac94:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ac96:	4b17      	ldr	r3, [pc, #92]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ac98:	21b0      	movs	r1, #176	; 0xb0
    ac9a:	4a2f      	ldr	r2, [pc, #188]	; (ad58 <LORAREG_InitGetAttrFnPtrsAS+0x168>)
    ac9c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ac9e:	4b15      	ldr	r3, [pc, #84]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    aca0:	21b4      	movs	r1, #180	; 0xb4
    aca2:	4a2e      	ldr	r2, [pc, #184]	; (ad5c <LORAREG_InitGetAttrFnPtrsAS+0x16c>)
    aca4:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    aca6:	4b13      	ldr	r3, [pc, #76]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    aca8:	21b8      	movs	r1, #184	; 0xb8
    acaa:	4a2d      	ldr	r2, [pc, #180]	; (ad60 <LORAREG_InitGetAttrFnPtrsAS+0x170>)
    acac:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    acae:	4b11      	ldr	r3, [pc, #68]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acb0:	21bc      	movs	r1, #188	; 0xbc
    acb2:	4a2c      	ldr	r2, [pc, #176]	; (ad64 <LORAREG_InitGetAttrFnPtrsAS+0x174>)
    acb4:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    acb6:	4b0f      	ldr	r3, [pc, #60]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acb8:	21c0      	movs	r1, #192	; 0xc0
    acba:	4a2b      	ldr	r2, [pc, #172]	; (ad68 <LORAREG_InitGetAttrFnPtrsAS+0x178>)
    acbc:	505a      	str	r2, [r3, r1]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    acbe:	4b0d      	ldr	r3, [pc, #52]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acc0:	21cc      	movs	r1, #204	; 0xcc
    acc2:	4a2a      	ldr	r2, [pc, #168]	; (ad6c <LORAREG_InitGetAttrFnPtrsAS+0x17c>)
    acc4:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    acc6:	4b0b      	ldr	r3, [pc, #44]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acc8:	21d4      	movs	r1, #212	; 0xd4
    acca:	4a29      	ldr	r2, [pc, #164]	; (ad70 <LORAREG_InitGetAttrFnPtrsAS+0x180>)
    accc:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    acce:	4b09      	ldr	r3, [pc, #36]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acd0:	21f0      	movs	r1, #240	; 0xf0
    acd2:	4a28      	ldr	r2, [pc, #160]	; (ad74 <LORAREG_InitGetAttrFnPtrsAS+0x184>)
    acd4:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    acd6:	4b07      	ldr	r3, [pc, #28]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    acd8:	21d8      	movs	r1, #216	; 0xd8
    acda:	4a27      	ldr	r2, [pc, #156]	; (ad78 <LORAREG_InitGetAttrFnPtrsAS+0x188>)
    acdc:	505a      	str	r2, [r3, r1]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    acde:	4b05      	ldr	r3, [pc, #20]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ace0:	4a26      	ldr	r2, [pc, #152]	; (ad7c <LORAREG_InitGetAttrFnPtrsAS+0x18c>)
    ace2:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    ace4:	4b03      	ldr	r3, [pc, #12]	; (acf4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ace6:	2198      	movs	r1, #152	; 0x98
    ace8:	4a25      	ldr	r2, [pc, #148]	; (ad80 <LORAREG_InitGetAttrFnPtrsAS+0x190>)
    acea:	505a      	str	r2, [r3, r1]
}
    acec:	46c0      	nop			; (mov r8, r8)
    acee:	46bd      	mov	sp, r7
    acf0:	bd80      	pop	{r7, pc}
    acf2:	46c0      	nop			; (mov r8, r8)
    acf4:	20000cd4 	.word	0x20000cd4
    acf8:	0000b501 	.word	0x0000b501
    acfc:	0000b61d 	.word	0x0000b61d
    ad00:	0000b729 	.word	0x0000b729
    ad04:	0000b8ad 	.word	0x0000b8ad
    ad08:	0000ba71 	.word	0x0000ba71
    ad0c:	0000ba9d 	.word	0x0000ba9d
    ad10:	0000bcfd 	.word	0x0000bcfd
    ad14:	0000bd29 	.word	0x0000bd29
    ad18:	0000bd55 	.word	0x0000bd55
    ad1c:	0000bd85 	.word	0x0000bd85
    ad20:	0000bdb1 	.word	0x0000bdb1
    ad24:	0000bf1d 	.word	0x0000bf1d
    ad28:	0000be49 	.word	0x0000be49
    ad2c:	0000c259 	.word	0x0000c259
    ad30:	0000c171 	.word	0x0000c171
    ad34:	0000bfe5 	.word	0x0000bfe5
    ad38:	0000bb75 	.word	0x0000bb75
    ad3c:	0000bc81 	.word	0x0000bc81
    ad40:	0000b9f5 	.word	0x0000b9f5
    ad44:	0000c6a1 	.word	0x0000c6a1
    ad48:	0000c6c5 	.word	0x0000c6c5
    ad4c:	0000c6e9 	.word	0x0000c6e9
    ad50:	0000c711 	.word	0x0000c711
    ad54:	0000c739 	.word	0x0000c739
    ad58:	0000c781 	.word	0x0000c781
    ad5c:	0000c7a3 	.word	0x0000c7a3
    ad60:	0000c911 	.word	0x0000c911
    ad64:	0000ca29 	.word	0x0000ca29
    ad68:	0000c849 	.word	0x0000c849
    ad6c:	0000c1d1 	.word	0x0000c1d1
    ad70:	0000c7c5 	.word	0x0000c7c5
    ad74:	0000c7f1 	.word	0x0000c7f1
    ad78:	0000c81d 	.word	0x0000c81d
    ad7c:	0000c319 	.word	0x0000c319
    ad80:	0000c3bd 	.word	0x0000c3bd

0000ad84 <LORAREG_InitGetAttrFnPtrsAU>:
#endif

#if(AU_BAND == 1)
void LORAREG_InitGetAttrFnPtrsAU(void)
{
    ad84:	b580      	push	{r7, lr}
    ad86:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    ad88:	4b3c      	ldr	r3, [pc, #240]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ad8a:	4a3d      	ldr	r2, [pc, #244]	; (ae80 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    ad8c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    ad8e:	4b3b      	ldr	r3, [pc, #236]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ad90:	4a3c      	ldr	r2, [pc, #240]	; (ae84 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    ad92:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    ad94:	4b39      	ldr	r3, [pc, #228]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ad96:	4a3c      	ldr	r2, [pc, #240]	; (ae88 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    ad98:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    ad9a:	4b38      	ldr	r3, [pc, #224]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ad9c:	4a3b      	ldr	r2, [pc, #236]	; (ae8c <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    ad9e:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ada0:	4b36      	ldr	r3, [pc, #216]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ada2:	4a3b      	ldr	r2, [pc, #236]	; (ae90 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    ada4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ada6:	4b35      	ldr	r3, [pc, #212]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ada8:	4a3a      	ldr	r2, [pc, #232]	; (ae94 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    adaa:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    adac:	4b33      	ldr	r3, [pc, #204]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adae:	4a3a      	ldr	r2, [pc, #232]	; (ae98 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    adb0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    adb2:	4b32      	ldr	r3, [pc, #200]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adb4:	4a39      	ldr	r2, [pc, #228]	; (ae9c <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    adb6:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    adb8:	4b30      	ldr	r3, [pc, #192]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adba:	4a39      	ldr	r2, [pc, #228]	; (aea0 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    adbc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    adbe:	4b2f      	ldr	r3, [pc, #188]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adc0:	4a38      	ldr	r2, [pc, #224]	; (aea4 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    adc2:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    adc4:	4b2d      	ldr	r3, [pc, #180]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adc6:	4a38      	ldr	r2, [pc, #224]	; (aea8 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    adc8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    adca:	4b2c      	ldr	r3, [pc, #176]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adcc:	4a37      	ldr	r2, [pc, #220]	; (aeac <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    adce:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    add0:	4b2a      	ldr	r3, [pc, #168]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    add2:	4a37      	ldr	r2, [pc, #220]	; (aeb0 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    add4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    add6:	4b29      	ldr	r3, [pc, #164]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    add8:	4a36      	ldr	r2, [pc, #216]	; (aeb4 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    adda:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    addc:	4b27      	ldr	r3, [pc, #156]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adde:	4a36      	ldr	r2, [pc, #216]	; (aeb8 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    ade0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ade2:	4b26      	ldr	r3, [pc, #152]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ade4:	2180      	movs	r1, #128	; 0x80
    ade6:	4a35      	ldr	r2, [pc, #212]	; (aebc <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    ade8:	505a      	str	r2, [r3, r1]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    adea:	4b24      	ldr	r3, [pc, #144]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adec:	4a34      	ldr	r2, [pc, #208]	; (aec0 <LORAREG_InitGetAttrFnPtrsAU+0x13c>)
    adee:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    adf0:	4b22      	ldr	r3, [pc, #136]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adf2:	4a34      	ldr	r2, [pc, #208]	; (aec4 <LORAREG_InitGetAttrFnPtrsAU+0x140>)
    adf4:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    adf6:	4b21      	ldr	r3, [pc, #132]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    adf8:	218c      	movs	r1, #140	; 0x8c
    adfa:	4a33      	ldr	r2, [pc, #204]	; (aec8 <LORAREG_InitGetAttrFnPtrsAU+0x144>)
    adfc:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    adfe:	4b1f      	ldr	r3, [pc, #124]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae00:	2190      	movs	r1, #144	; 0x90
    ae02:	4a32      	ldr	r2, [pc, #200]	; (aecc <LORAREG_InitGetAttrFnPtrsAU+0x148>)
    ae04:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ae06:	4b1d      	ldr	r3, [pc, #116]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae08:	2194      	movs	r1, #148	; 0x94
    ae0a:	4a31      	ldr	r2, [pc, #196]	; (aed0 <LORAREG_InitGetAttrFnPtrsAU+0x14c>)
    ae0c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ae0e:	4b1b      	ldr	r3, [pc, #108]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae10:	219c      	movs	r1, #156	; 0x9c
    ae12:	4a30      	ldr	r2, [pc, #192]	; (aed4 <LORAREG_InitGetAttrFnPtrsAU+0x150>)
    ae14:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ae16:	4b19      	ldr	r3, [pc, #100]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae18:	21a0      	movs	r1, #160	; 0xa0
    ae1a:	4a2f      	ldr	r2, [pc, #188]	; (aed8 <LORAREG_InitGetAttrFnPtrsAU+0x154>)
    ae1c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ae1e:	4b17      	ldr	r3, [pc, #92]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae20:	21a4      	movs	r1, #164	; 0xa4
    ae22:	4a2e      	ldr	r2, [pc, #184]	; (aedc <LORAREG_InitGetAttrFnPtrsAU+0x158>)
    ae24:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ae26:	4b15      	ldr	r3, [pc, #84]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae28:	21a8      	movs	r1, #168	; 0xa8
    ae2a:	4a2d      	ldr	r2, [pc, #180]	; (aee0 <LORAREG_InitGetAttrFnPtrsAU+0x15c>)
    ae2c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    ae2e:	4b13      	ldr	r3, [pc, #76]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae30:	21ac      	movs	r1, #172	; 0xac
    ae32:	4a2c      	ldr	r2, [pc, #176]	; (aee4 <LORAREG_InitGetAttrFnPtrsAU+0x160>)
    ae34:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ae36:	4b11      	ldr	r3, [pc, #68]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae38:	21b0      	movs	r1, #176	; 0xb0
    ae3a:	4a2b      	ldr	r2, [pc, #172]	; (aee8 <LORAREG_InitGetAttrFnPtrsAU+0x164>)
    ae3c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ae3e:	4b0f      	ldr	r3, [pc, #60]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae40:	21b4      	movs	r1, #180	; 0xb4
    ae42:	4a2a      	ldr	r2, [pc, #168]	; (aeec <LORAREG_InitGetAttrFnPtrsAU+0x168>)
    ae44:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ae46:	4b0d      	ldr	r3, [pc, #52]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae48:	21b8      	movs	r1, #184	; 0xb8
    ae4a:	4a29      	ldr	r2, [pc, #164]	; (aef0 <LORAREG_InitGetAttrFnPtrsAU+0x16c>)
    ae4c:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    ae4e:	4b0b      	ldr	r3, [pc, #44]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae50:	21bc      	movs	r1, #188	; 0xbc
    ae52:	4a28      	ldr	r2, [pc, #160]	; (aef4 <LORAREG_InitGetAttrFnPtrsAU+0x170>)
    ae54:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ae56:	4b09      	ldr	r3, [pc, #36]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae58:	21c0      	movs	r1, #192	; 0xc0
    ae5a:	4a27      	ldr	r2, [pc, #156]	; (aef8 <LORAREG_InitGetAttrFnPtrsAU+0x174>)
    ae5c:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ae5e:	4b07      	ldr	r3, [pc, #28]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae60:	21d4      	movs	r1, #212	; 0xd4
    ae62:	4a26      	ldr	r2, [pc, #152]	; (aefc <LORAREG_InitGetAttrFnPtrsAU+0x178>)
    ae64:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    ae66:	4b05      	ldr	r3, [pc, #20]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae68:	21f0      	movs	r1, #240	; 0xf0
    ae6a:	4a25      	ldr	r2, [pc, #148]	; (af00 <LORAREG_InitGetAttrFnPtrsAU+0x17c>)
    ae6c:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ae6e:	4b03      	ldr	r3, [pc, #12]	; (ae7c <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ae70:	21d8      	movs	r1, #216	; 0xd8
    ae72:	4a24      	ldr	r2, [pc, #144]	; (af04 <LORAREG_InitGetAttrFnPtrsAU+0x180>)
    ae74:	505a      	str	r2, [r3, r1]
}
    ae76:	46c0      	nop			; (mov r8, r8)
    ae78:	46bd      	mov	sp, r7
    ae7a:	bd80      	pop	{r7, pc}
    ae7c:	20000cd4 	.word	0x20000cd4
    ae80:	0000b3c5 	.word	0x0000b3c5
    ae84:	0000b589 	.word	0x0000b589
    ae88:	0000b69d 	.word	0x0000b69d
    ae8c:	0000b7a1 	.word	0x0000b7a1
    ae90:	0000ba71 	.word	0x0000ba71
    ae94:	0000ba9d 	.word	0x0000ba9d
    ae98:	0000bcfd 	.word	0x0000bcfd
    ae9c:	0000bd29 	.word	0x0000bd29
    aea0:	0000bd55 	.word	0x0000bd55
    aea4:	0000bd85 	.word	0x0000bd85
    aea8:	0000bdb1 	.word	0x0000bdb1
    aeac:	0000be95 	.word	0x0000be95
    aeb0:	0000be49 	.word	0x0000be49
    aeb4:	0000c259 	.word	0x0000c259
    aeb8:	0000bf85 	.word	0x0000bf85
    aebc:	0000bfe5 	.word	0x0000bfe5
    aec0:	0000c2f5 	.word	0x0000c2f5
    aec4:	0000c67d 	.word	0x0000c67d
    aec8:	0000bae5 	.word	0x0000bae5
    aecc:	0000bbf1 	.word	0x0000bbf1
    aed0:	0000b965 	.word	0x0000b965
    aed4:	0000c6a1 	.word	0x0000c6a1
    aed8:	0000c6c5 	.word	0x0000c6c5
    aedc:	0000c6e9 	.word	0x0000c6e9
    aee0:	0000c711 	.word	0x0000c711
    aee4:	0000c739 	.word	0x0000c739
    aee8:	0000c781 	.word	0x0000c781
    aeec:	0000c7a3 	.word	0x0000c7a3
    aef0:	0000c875 	.word	0x0000c875
    aef4:	0000c9ad 	.word	0x0000c9ad
    aef8:	0000c849 	.word	0x0000c849
    aefc:	0000c7c5 	.word	0x0000c7c5
    af00:	0000c7f1 	.word	0x0000c7f1
    af04:	0000c81d 	.word	0x0000c81d

0000af08 <LORAREG_InitGetAttrFnPtrsIN>:
#endif

#if(IND_BAND == 1)
void LORAREG_InitGetAttrFnPtrsIN(void)
{
    af08:	b580      	push	{r7, lr}
    af0a:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    af0c:	4b3b      	ldr	r3, [pc, #236]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af0e:	4a3c      	ldr	r2, [pc, #240]	; (b000 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    af10:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    af12:	4b3a      	ldr	r3, [pc, #232]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af14:	4a3b      	ldr	r2, [pc, #236]	; (b004 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    af16:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    af18:	4b38      	ldr	r3, [pc, #224]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af1a:	4a3b      	ldr	r2, [pc, #236]	; (b008 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    af1c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    af1e:	4b37      	ldr	r3, [pc, #220]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af20:	4a3a      	ldr	r2, [pc, #232]	; (b00c <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    af22:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    af24:	4b35      	ldr	r3, [pc, #212]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af26:	4a3a      	ldr	r2, [pc, #232]	; (b010 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    af28:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    af2a:	4b34      	ldr	r3, [pc, #208]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af2c:	4a39      	ldr	r2, [pc, #228]	; (b014 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    af2e:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    af30:	4b32      	ldr	r3, [pc, #200]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af32:	4a39      	ldr	r2, [pc, #228]	; (b018 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    af34:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    af36:	4b31      	ldr	r3, [pc, #196]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af38:	4a38      	ldr	r2, [pc, #224]	; (b01c <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    af3a:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    af3c:	4b2f      	ldr	r3, [pc, #188]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af3e:	4a38      	ldr	r2, [pc, #224]	; (b020 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    af40:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    af42:	4b2e      	ldr	r3, [pc, #184]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af44:	4a37      	ldr	r2, [pc, #220]	; (b024 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    af46:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    af48:	4b2c      	ldr	r3, [pc, #176]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af4a:	4a37      	ldr	r2, [pc, #220]	; (b028 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    af4c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    af4e:	4b2b      	ldr	r3, [pc, #172]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af50:	4a36      	ldr	r2, [pc, #216]	; (b02c <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    af52:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    af54:	4b29      	ldr	r3, [pc, #164]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af56:	4a36      	ldr	r2, [pc, #216]	; (b030 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    af58:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    af5a:	4b28      	ldr	r3, [pc, #160]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af5c:	4a35      	ldr	r2, [pc, #212]	; (b034 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    af5e:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    af60:	4b26      	ldr	r3, [pc, #152]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af62:	4a35      	ldr	r2, [pc, #212]	; (b038 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    af64:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    af66:	4b25      	ldr	r3, [pc, #148]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af68:	2180      	movs	r1, #128	; 0x80
    af6a:	4a34      	ldr	r2, [pc, #208]	; (b03c <LORAREG_InitGetAttrFnPtrsIN+0x134>)
    af6c:	505a      	str	r2, [r3, r1]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    af6e:	4b23      	ldr	r3, [pc, #140]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af70:	218c      	movs	r1, #140	; 0x8c
    af72:	4a33      	ldr	r2, [pc, #204]	; (b040 <LORAREG_InitGetAttrFnPtrsIN+0x138>)
    af74:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    af76:	4b21      	ldr	r3, [pc, #132]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af78:	2190      	movs	r1, #144	; 0x90
    af7a:	4a32      	ldr	r2, [pc, #200]	; (b044 <LORAREG_InitGetAttrFnPtrsIN+0x13c>)
    af7c:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    af7e:	4b1f      	ldr	r3, [pc, #124]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af80:	2194      	movs	r1, #148	; 0x94
    af82:	4a31      	ldr	r2, [pc, #196]	; (b048 <LORAREG_InitGetAttrFnPtrsIN+0x140>)
    af84:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    af86:	4b1d      	ldr	r3, [pc, #116]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af88:	219c      	movs	r1, #156	; 0x9c
    af8a:	4a30      	ldr	r2, [pc, #192]	; (b04c <LORAREG_InitGetAttrFnPtrsIN+0x144>)
    af8c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    af8e:	4b1b      	ldr	r3, [pc, #108]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af90:	21a0      	movs	r1, #160	; 0xa0
    af92:	4a2f      	ldr	r2, [pc, #188]	; (b050 <LORAREG_InitGetAttrFnPtrsIN+0x148>)
    af94:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    af96:	4b19      	ldr	r3, [pc, #100]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    af98:	21a4      	movs	r1, #164	; 0xa4
    af9a:	4a2e      	ldr	r2, [pc, #184]	; (b054 <LORAREG_InitGetAttrFnPtrsIN+0x14c>)
    af9c:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    af9e:	4b17      	ldr	r3, [pc, #92]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afa0:	21a8      	movs	r1, #168	; 0xa8
    afa2:	4a2d      	ldr	r2, [pc, #180]	; (b058 <LORAREG_InitGetAttrFnPtrsIN+0x150>)
    afa4:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    afa6:	4b15      	ldr	r3, [pc, #84]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afa8:	21ac      	movs	r1, #172	; 0xac
    afaa:	4a2c      	ldr	r2, [pc, #176]	; (b05c <LORAREG_InitGetAttrFnPtrsIN+0x154>)
    afac:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    afae:	4b13      	ldr	r3, [pc, #76]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afb0:	21b0      	movs	r1, #176	; 0xb0
    afb2:	4a2b      	ldr	r2, [pc, #172]	; (b060 <LORAREG_InitGetAttrFnPtrsIN+0x158>)
    afb4:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    afb6:	4b11      	ldr	r3, [pc, #68]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afb8:	21b4      	movs	r1, #180	; 0xb4
    afba:	4a2a      	ldr	r2, [pc, #168]	; (b064 <LORAREG_InitGetAttrFnPtrsIN+0x15c>)
    afbc:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    afbe:	4b0f      	ldr	r3, [pc, #60]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afc0:	21b8      	movs	r1, #184	; 0xb8
    afc2:	4a29      	ldr	r2, [pc, #164]	; (b068 <LORAREG_InitGetAttrFnPtrsIN+0x160>)
    afc4:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    afc6:	4b0d      	ldr	r3, [pc, #52]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afc8:	21bc      	movs	r1, #188	; 0xbc
    afca:	4a28      	ldr	r2, [pc, #160]	; (b06c <LORAREG_InitGetAttrFnPtrsIN+0x164>)
    afcc:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    afce:	4b0b      	ldr	r3, [pc, #44]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afd0:	21c0      	movs	r1, #192	; 0xc0
    afd2:	4a27      	ldr	r2, [pc, #156]	; (b070 <LORAREG_InitGetAttrFnPtrsIN+0x168>)
    afd4:	505a      	str	r2, [r3, r1]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    afd6:	4b09      	ldr	r3, [pc, #36]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afd8:	21cc      	movs	r1, #204	; 0xcc
    afda:	4a26      	ldr	r2, [pc, #152]	; (b074 <LORAREG_InitGetAttrFnPtrsIN+0x16c>)
    afdc:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    afde:	4b07      	ldr	r3, [pc, #28]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afe0:	21d4      	movs	r1, #212	; 0xd4
    afe2:	4a25      	ldr	r2, [pc, #148]	; (b078 <LORAREG_InitGetAttrFnPtrsIN+0x170>)
    afe4:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    afe6:	4b05      	ldr	r3, [pc, #20]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    afe8:	21f0      	movs	r1, #240	; 0xf0
    afea:	4a24      	ldr	r2, [pc, #144]	; (b07c <LORAREG_InitGetAttrFnPtrsIN+0x174>)
    afec:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    afee:	4b03      	ldr	r3, [pc, #12]	; (affc <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    aff0:	21d8      	movs	r1, #216	; 0xd8
    aff2:	4a23      	ldr	r2, [pc, #140]	; (b080 <LORAREG_InitGetAttrFnPtrsIN+0x178>)
    aff4:	505a      	str	r2, [r3, r1]
}
    aff6:	46c0      	nop			; (mov r8, r8)
    aff8:	46bd      	mov	sp, r7
    affa:	bd80      	pop	{r7, pc}
    affc:	20000cd4 	.word	0x20000cd4
    b000:	0000b47d 	.word	0x0000b47d
    b004:	0000b61d 	.word	0x0000b61d
    b008:	0000b729 	.word	0x0000b729
    b00c:	0000b831 	.word	0x0000b831
    b010:	0000ba71 	.word	0x0000ba71
    b014:	0000ba9d 	.word	0x0000ba9d
    b018:	0000bcfd 	.word	0x0000bcfd
    b01c:	0000bd29 	.word	0x0000bd29
    b020:	0000bd55 	.word	0x0000bd55
    b024:	0000bd85 	.word	0x0000bd85
    b028:	0000bdb1 	.word	0x0000bdb1
    b02c:	0000bf1d 	.word	0x0000bf1d
    b030:	0000be49 	.word	0x0000be49
    b034:	0000c259 	.word	0x0000c259
    b038:	0000c111 	.word	0x0000c111
    b03c:	0000bfe5 	.word	0x0000bfe5
    b040:	0000bb75 	.word	0x0000bb75
    b044:	0000bc81 	.word	0x0000bc81
    b048:	0000b9f5 	.word	0x0000b9f5
    b04c:	0000c6a1 	.word	0x0000c6a1
    b050:	0000c6c5 	.word	0x0000c6c5
    b054:	0000c6e9 	.word	0x0000c6e9
    b058:	0000c711 	.word	0x0000c711
    b05c:	0000c739 	.word	0x0000c739
    b060:	0000c781 	.word	0x0000c781
    b064:	0000c7a3 	.word	0x0000c7a3
    b068:	0000c911 	.word	0x0000c911
    b06c:	0000ca29 	.word	0x0000ca29
    b070:	0000c849 	.word	0x0000c849
    b074:	0000c1d1 	.word	0x0000c1d1
    b078:	0000c7c5 	.word	0x0000c7c5
    b07c:	0000c7f1 	.word	0x0000c7f1
    b080:	0000c81d 	.word	0x0000c81d

0000b084 <LORAREG_InitGetAttrFnPtrsJP>:
#endif

#if(JPN_BAND  == 1)
void LORAREG_InitGetAttrFnPtrsJP(void)
{
    b084:	b580      	push	{r7, lr}
    b086:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    b088:	4b43      	ldr	r3, [pc, #268]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b08a:	4a44      	ldr	r2, [pc, #272]	; (b19c <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    b08c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b08e:	4b42      	ldr	r3, [pc, #264]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b090:	4a43      	ldr	r2, [pc, #268]	; (b1a0 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    b092:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b094:	4b40      	ldr	r3, [pc, #256]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b096:	4a43      	ldr	r2, [pc, #268]	; (b1a4 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    b098:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    b09a:	4b3f      	ldr	r3, [pc, #252]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b09c:	4a42      	ldr	r2, [pc, #264]	; (b1a8 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    b09e:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b0a0:	4b3d      	ldr	r3, [pc, #244]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0a2:	4a42      	ldr	r2, [pc, #264]	; (b1ac <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    b0a4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b0a6:	4b3c      	ldr	r3, [pc, #240]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0a8:	4a41      	ldr	r2, [pc, #260]	; (b1b0 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    b0aa:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b0ac:	4b3a      	ldr	r3, [pc, #232]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0ae:	4a41      	ldr	r2, [pc, #260]	; (b1b4 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    b0b0:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b0b2:	4b39      	ldr	r3, [pc, #228]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0b4:	4a40      	ldr	r2, [pc, #256]	; (b1b8 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    b0b6:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b0b8:	4b37      	ldr	r3, [pc, #220]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0ba:	4a40      	ldr	r2, [pc, #256]	; (b1bc <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    b0bc:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b0be:	4b36      	ldr	r3, [pc, #216]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0c0:	4a3f      	ldr	r2, [pc, #252]	; (b1c0 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    b0c2:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b0c4:	4b34      	ldr	r3, [pc, #208]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0c6:	4a3f      	ldr	r2, [pc, #252]	; (b1c4 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    b0c8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b0ca:	4b33      	ldr	r3, [pc, #204]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0cc:	4a3e      	ldr	r2, [pc, #248]	; (b1c8 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    b0ce:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b0d0:	4b31      	ldr	r3, [pc, #196]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0d2:	4a3e      	ldr	r2, [pc, #248]	; (b1cc <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    b0d4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b0d6:	4b30      	ldr	r3, [pc, #192]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0d8:	4a3d      	ldr	r2, [pc, #244]	; (b1d0 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    b0da:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    b0dc:	4b2e      	ldr	r3, [pc, #184]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0de:	4a3d      	ldr	r2, [pc, #244]	; (b1d4 <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    b0e0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b0e2:	4b2d      	ldr	r3, [pc, #180]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0e4:	2180      	movs	r1, #128	; 0x80
    b0e6:	4a3c      	ldr	r2, [pc, #240]	; (b1d8 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    b0e8:	505a      	str	r2, [r3, r1]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b0ea:	4b2b      	ldr	r3, [pc, #172]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0ec:	218c      	movs	r1, #140	; 0x8c
    b0ee:	4a3b      	ldr	r2, [pc, #236]	; (b1dc <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    b0f0:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b0f2:	4b29      	ldr	r3, [pc, #164]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0f4:	2190      	movs	r1, #144	; 0x90
    b0f6:	4a3a      	ldr	r2, [pc, #232]	; (b1e0 <LORAREG_InitGetAttrFnPtrsJP+0x15c>)
    b0f8:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b0fa:	4b27      	ldr	r3, [pc, #156]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b0fc:	2194      	movs	r1, #148	; 0x94
    b0fe:	4a39      	ldr	r2, [pc, #228]	; (b1e4 <LORAREG_InitGetAttrFnPtrsJP+0x160>)
    b100:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b102:	4b25      	ldr	r3, [pc, #148]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b104:	219c      	movs	r1, #156	; 0x9c
    b106:	4a38      	ldr	r2, [pc, #224]	; (b1e8 <LORAREG_InitGetAttrFnPtrsJP+0x164>)
    b108:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b10a:	4b23      	ldr	r3, [pc, #140]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b10c:	21a0      	movs	r1, #160	; 0xa0
    b10e:	4a37      	ldr	r2, [pc, #220]	; (b1ec <LORAREG_InitGetAttrFnPtrsJP+0x168>)
    b110:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b112:	4b21      	ldr	r3, [pc, #132]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b114:	21a4      	movs	r1, #164	; 0xa4
    b116:	4a36      	ldr	r2, [pc, #216]	; (b1f0 <LORAREG_InitGetAttrFnPtrsJP+0x16c>)
    b118:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b11a:	4b1f      	ldr	r3, [pc, #124]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b11c:	21a8      	movs	r1, #168	; 0xa8
    b11e:	4a35      	ldr	r2, [pc, #212]	; (b1f4 <LORAREG_InitGetAttrFnPtrsJP+0x170>)
    b120:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b122:	4b1d      	ldr	r3, [pc, #116]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b124:	21ac      	movs	r1, #172	; 0xac
    b126:	4a34      	ldr	r2, [pc, #208]	; (b1f8 <LORAREG_InitGetAttrFnPtrsJP+0x174>)
    b128:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b12a:	4b1b      	ldr	r3, [pc, #108]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b12c:	21b0      	movs	r1, #176	; 0xb0
    b12e:	4a33      	ldr	r2, [pc, #204]	; (b1fc <LORAREG_InitGetAttrFnPtrsJP+0x178>)
    b130:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b132:	4b19      	ldr	r3, [pc, #100]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b134:	21b4      	movs	r1, #180	; 0xb4
    b136:	4a32      	ldr	r2, [pc, #200]	; (b200 <LORAREG_InitGetAttrFnPtrsJP+0x17c>)
    b138:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b13a:	4b17      	ldr	r3, [pc, #92]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b13c:	21b8      	movs	r1, #184	; 0xb8
    b13e:	4a31      	ldr	r2, [pc, #196]	; (b204 <LORAREG_InitGetAttrFnPtrsJP+0x180>)
    b140:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b142:	4b15      	ldr	r3, [pc, #84]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b144:	21bc      	movs	r1, #188	; 0xbc
    b146:	4a30      	ldr	r2, [pc, #192]	; (b208 <LORAREG_InitGetAttrFnPtrsJP+0x184>)
    b148:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b14a:	4b13      	ldr	r3, [pc, #76]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b14c:	21c0      	movs	r1, #192	; 0xc0
    b14e:	4a2f      	ldr	r2, [pc, #188]	; (b20c <LORAREG_InitGetAttrFnPtrsJP+0x188>)
    b150:	505a      	str	r2, [r3, r1]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    b152:	4b11      	ldr	r3, [pc, #68]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b154:	21c4      	movs	r1, #196	; 0xc4
    b156:	4a2e      	ldr	r2, [pc, #184]	; (b210 <LORAREG_InitGetAttrFnPtrsJP+0x18c>)
    b158:	505a      	str	r2, [r3, r1]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    b15a:	4b0f      	ldr	r3, [pc, #60]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b15c:	21c8      	movs	r1, #200	; 0xc8
    b15e:	4a2d      	ldr	r2, [pc, #180]	; (b214 <LORAREG_InitGetAttrFnPtrsJP+0x190>)
    b160:	505a      	str	r2, [r3, r1]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b162:	4b0d      	ldr	r3, [pc, #52]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b164:	21cc      	movs	r1, #204	; 0xcc
    b166:	4a2c      	ldr	r2, [pc, #176]	; (b218 <LORAREG_InitGetAttrFnPtrsJP+0x194>)
    b168:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b16a:	4b0b      	ldr	r3, [pc, #44]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b16c:	21d4      	movs	r1, #212	; 0xd4
    b16e:	4a2b      	ldr	r2, [pc, #172]	; (b21c <LORAREG_InitGetAttrFnPtrsJP+0x198>)
    b170:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b172:	4b09      	ldr	r3, [pc, #36]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b174:	21f0      	movs	r1, #240	; 0xf0
    b176:	4a2a      	ldr	r2, [pc, #168]	; (b220 <LORAREG_InitGetAttrFnPtrsJP+0x19c>)
    b178:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b17a:	4b07      	ldr	r3, [pc, #28]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b17c:	21d8      	movs	r1, #216	; 0xd8
    b17e:	4a29      	ldr	r2, [pc, #164]	; (b224 <LORAREG_InitGetAttrFnPtrsJP+0x1a0>)
    b180:	505a      	str	r2, [r3, r1]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    b182:	4b05      	ldr	r3, [pc, #20]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b184:	4a28      	ldr	r2, [pc, #160]	; (b228 <LORAREG_InitGetAttrFnPtrsJP+0x1a4>)
    b186:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    b188:	4b03      	ldr	r3, [pc, #12]	; (b198 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    b18a:	2198      	movs	r1, #152	; 0x98
    b18c:	4a27      	ldr	r2, [pc, #156]	; (b22c <LORAREG_InitGetAttrFnPtrsJP+0x1a8>)
    b18e:	505a      	str	r2, [r3, r1]
}
    b190:	46c0      	nop			; (mov r8, r8)
    b192:	46bd      	mov	sp, r7
    b194:	bd80      	pop	{r7, pc}
    b196:	46c0      	nop			; (mov r8, r8)
    b198:	20000cd4 	.word	0x20000cd4
    b19c:	0000b501 	.word	0x0000b501
    b1a0:	0000b61d 	.word	0x0000b61d
    b1a4:	0000b729 	.word	0x0000b729
    b1a8:	0000b8ad 	.word	0x0000b8ad
    b1ac:	0000ba71 	.word	0x0000ba71
    b1b0:	0000ba9d 	.word	0x0000ba9d
    b1b4:	0000bcfd 	.word	0x0000bcfd
    b1b8:	0000bd29 	.word	0x0000bd29
    b1bc:	0000bd55 	.word	0x0000bd55
    b1c0:	0000bd85 	.word	0x0000bd85
    b1c4:	0000bdb1 	.word	0x0000bdb1
    b1c8:	0000bf1d 	.word	0x0000bf1d
    b1cc:	0000be49 	.word	0x0000be49
    b1d0:	0000c259 	.word	0x0000c259
    b1d4:	0000c171 	.word	0x0000c171
    b1d8:	0000bfe5 	.word	0x0000bfe5
    b1dc:	0000bb75 	.word	0x0000bb75
    b1e0:	0000bc81 	.word	0x0000bc81
    b1e4:	0000b9f5 	.word	0x0000b9f5
    b1e8:	0000c6a1 	.word	0x0000c6a1
    b1ec:	0000c6c5 	.word	0x0000c6c5
    b1f0:	0000c6e9 	.word	0x0000c6e9
    b1f4:	0000c711 	.word	0x0000c711
    b1f8:	0000c739 	.word	0x0000c739
    b1fc:	0000c781 	.word	0x0000c781
    b200:	0000c7a3 	.word	0x0000c7a3
    b204:	0000c911 	.word	0x0000c911
    b208:	0000ca29 	.word	0x0000ca29
    b20c:	0000c849 	.word	0x0000c849
    b210:	0000caa5 	.word	0x0000caa5
    b214:	0000cafd 	.word	0x0000cafd
    b218:	0000c1d1 	.word	0x0000c1d1
    b21c:	0000c7c5 	.word	0x0000c7c5
    b220:	0000c7f1 	.word	0x0000c7f1
    b224:	0000c81d 	.word	0x0000c81d
    b228:	0000c319 	.word	0x0000c319
    b22c:	0000c3bd 	.word	0x0000c3bd

0000b230 <LORAREG_InitGetAttrFnPtrsKR>:
#endif

#if(KR_BAND == 1)
void LORAREG_InitGetAttrFnPtrsKR(void)
{
    b230:	b580      	push	{r7, lr}
    b232:	af00      	add	r7, sp, #0
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    b234:	4b3f      	ldr	r3, [pc, #252]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b236:	4a40      	ldr	r2, [pc, #256]	; (b338 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    b238:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    b23a:	4b3e      	ldr	r3, [pc, #248]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b23c:	4a3f      	ldr	r2, [pc, #252]	; (b33c <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    b23e:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    b240:	4b3c      	ldr	r3, [pc, #240]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b242:	4a3f      	ldr	r2, [pc, #252]	; (b340 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    b244:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    b246:	4b3b      	ldr	r3, [pc, #236]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b248:	4a3e      	ldr	r2, [pc, #248]	; (b344 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    b24a:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    b24c:	4b39      	ldr	r3, [pc, #228]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b24e:	4a3e      	ldr	r2, [pc, #248]	; (b348 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    b250:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    b252:	4b38      	ldr	r3, [pc, #224]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b254:	4a3d      	ldr	r2, [pc, #244]	; (b34c <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    b256:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    b258:	4b36      	ldr	r3, [pc, #216]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b25a:	4a3d      	ldr	r2, [pc, #244]	; (b350 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    b25c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    b25e:	4b35      	ldr	r3, [pc, #212]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b260:	4a3c      	ldr	r2, [pc, #240]	; (b354 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    b262:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    b264:	4b33      	ldr	r3, [pc, #204]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b266:	4a3c      	ldr	r2, [pc, #240]	; (b358 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    b268:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    b26a:	4b32      	ldr	r3, [pc, #200]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b26c:	4a3b      	ldr	r2, [pc, #236]	; (b35c <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    b26e:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    b270:	4b30      	ldr	r3, [pc, #192]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b272:	4a3b      	ldr	r2, [pc, #236]	; (b360 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    b274:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    b276:	4b2f      	ldr	r3, [pc, #188]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b278:	4a3a      	ldr	r2, [pc, #232]	; (b364 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    b27a:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    b27c:	4b2d      	ldr	r3, [pc, #180]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b27e:	4a3a      	ldr	r2, [pc, #232]	; (b368 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    b280:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    b282:	4b2c      	ldr	r3, [pc, #176]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b284:	4a39      	ldr	r2, [pc, #228]	; (b36c <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    b286:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    b288:	4b2a      	ldr	r3, [pc, #168]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b28a:	4a39      	ldr	r2, [pc, #228]	; (b370 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    b28c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    b28e:	4b29      	ldr	r3, [pc, #164]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b290:	2180      	movs	r1, #128	; 0x80
    b292:	4a38      	ldr	r2, [pc, #224]	; (b374 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    b294:	505a      	str	r2, [r3, r1]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    b296:	4b27      	ldr	r3, [pc, #156]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b298:	218c      	movs	r1, #140	; 0x8c
    b29a:	4a37      	ldr	r2, [pc, #220]	; (b378 <LORAREG_InitGetAttrFnPtrsKR+0x148>)
    b29c:	505a      	str	r2, [r3, r1]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    b29e:	4b25      	ldr	r3, [pc, #148]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2a0:	2190      	movs	r1, #144	; 0x90
    b2a2:	4a36      	ldr	r2, [pc, #216]	; (b37c <LORAREG_InitGetAttrFnPtrsKR+0x14c>)
    b2a4:	505a      	str	r2, [r3, r1]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    b2a6:	4b23      	ldr	r3, [pc, #140]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2a8:	2194      	movs	r1, #148	; 0x94
    b2aa:	4a35      	ldr	r2, [pc, #212]	; (b380 <LORAREG_InitGetAttrFnPtrsKR+0x150>)
    b2ac:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    b2ae:	4b21      	ldr	r3, [pc, #132]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2b0:	219c      	movs	r1, #156	; 0x9c
    b2b2:	4a34      	ldr	r2, [pc, #208]	; (b384 <LORAREG_InitGetAttrFnPtrsKR+0x154>)
    b2b4:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    b2b6:	4b1f      	ldr	r3, [pc, #124]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2b8:	21a0      	movs	r1, #160	; 0xa0
    b2ba:	4a33      	ldr	r2, [pc, #204]	; (b388 <LORAREG_InitGetAttrFnPtrsKR+0x158>)
    b2bc:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    b2be:	4b1d      	ldr	r3, [pc, #116]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2c0:	21a4      	movs	r1, #164	; 0xa4
    b2c2:	4a32      	ldr	r2, [pc, #200]	; (b38c <LORAREG_InitGetAttrFnPtrsKR+0x15c>)
    b2c4:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    b2c6:	4b1b      	ldr	r3, [pc, #108]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2c8:	21a8      	movs	r1, #168	; 0xa8
    b2ca:	4a31      	ldr	r2, [pc, #196]	; (b390 <LORAREG_InitGetAttrFnPtrsKR+0x160>)
    b2cc:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_RETRANSMIT_TIMEOUT] = LORAREG_GetAttr_MacRetransmitTimeout;
    b2ce:	4b19      	ldr	r3, [pc, #100]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2d0:	21ac      	movs	r1, #172	; 0xac
    b2d2:	4a30      	ldr	r2, [pc, #192]	; (b394 <LORAREG_InitGetAttrFnPtrsKR+0x164>)
    b2d4:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    b2d6:	4b17      	ldr	r3, [pc, #92]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2d8:	21b0      	movs	r1, #176	; 0xb0
    b2da:	4a2f      	ldr	r2, [pc, #188]	; (b398 <LORAREG_InitGetAttrFnPtrsKR+0x168>)
    b2dc:	505a      	str	r2, [r3, r1]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    b2de:	4b15      	ldr	r3, [pc, #84]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2e0:	21b4      	movs	r1, #180	; 0xb4
    b2e2:	4a2e      	ldr	r2, [pc, #184]	; (b39c <LORAREG_InitGetAttrFnPtrsKR+0x16c>)
    b2e4:	505a      	str	r2, [r3, r1]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    b2e6:	4b13      	ldr	r3, [pc, #76]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2e8:	21b8      	movs	r1, #184	; 0xb8
    b2ea:	4a2d      	ldr	r2, [pc, #180]	; (b3a0 <LORAREG_InitGetAttrFnPtrsKR+0x170>)
    b2ec:	505a      	str	r2, [r3, r1]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    b2ee:	4b11      	ldr	r3, [pc, #68]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2f0:	21bc      	movs	r1, #188	; 0xbc
    b2f2:	4a2c      	ldr	r2, [pc, #176]	; (b3a4 <LORAREG_InitGetAttrFnPtrsKR+0x174>)
    b2f4:	505a      	str	r2, [r3, r1]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    b2f6:	4b0f      	ldr	r3, [pc, #60]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b2f8:	21c0      	movs	r1, #192	; 0xc0
    b2fa:	4a2b      	ldr	r2, [pc, #172]	; (b3a8 <LORAREG_InitGetAttrFnPtrsKR+0x178>)
    b2fc:	505a      	str	r2, [r3, r1]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    b2fe:	4b0d      	ldr	r3, [pc, #52]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b300:	21c4      	movs	r1, #196	; 0xc4
    b302:	4a2a      	ldr	r2, [pc, #168]	; (b3ac <LORAREG_InitGetAttrFnPtrsKR+0x17c>)
    b304:	505a      	str	r2, [r3, r1]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    b306:	4b0b      	ldr	r3, [pc, #44]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b308:	21c8      	movs	r1, #200	; 0xc8
    b30a:	4a29      	ldr	r2, [pc, #164]	; (b3b0 <LORAREG_InitGetAttrFnPtrsKR+0x180>)
    b30c:	505a      	str	r2, [r3, r1]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    b30e:	4b09      	ldr	r3, [pc, #36]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b310:	21cc      	movs	r1, #204	; 0xcc
    b312:	4a28      	ldr	r2, [pc, #160]	; (b3b4 <LORAREG_InitGetAttrFnPtrsKR+0x184>)
    b314:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    b316:	4b07      	ldr	r3, [pc, #28]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b318:	21d4      	movs	r1, #212	; 0xd4
    b31a:	4a27      	ldr	r2, [pc, #156]	; (b3b8 <LORAREG_InitGetAttrFnPtrsKR+0x188>)
    b31c:	505a      	str	r2, [r3, r1]
	pGetAttr[DEF_TX_PWR] = LORAREG_GetAttr_DefTxPwr;
    b31e:	4b05      	ldr	r3, [pc, #20]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b320:	21f0      	movs	r1, #240	; 0xf0
    b322:	4a26      	ldr	r2, [pc, #152]	; (b3bc <LORAREG_InitGetAttrFnPtrsKR+0x18c>)
    b324:	505a      	str	r2, [r3, r1]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    b326:	4b03      	ldr	r3, [pc, #12]	; (b334 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    b328:	21d8      	movs	r1, #216	; 0xd8
    b32a:	4a25      	ldr	r2, [pc, #148]	; (b3c0 <LORAREG_InitGetAttrFnPtrsKR+0x190>)
    b32c:	505a      	str	r2, [r3, r1]
}
    b32e:	46c0      	nop			; (mov r8, r8)
    b330:	46bd      	mov	sp, r7
    b332:	bd80      	pop	{r7, pc}
    b334:	20000cd4 	.word	0x20000cd4
    b338:	0000b47d 	.word	0x0000b47d
    b33c:	0000b61d 	.word	0x0000b61d
    b340:	0000b729 	.word	0x0000b729
    b344:	0000b831 	.word	0x0000b831
    b348:	0000ba71 	.word	0x0000ba71
    b34c:	0000ba9d 	.word	0x0000ba9d
    b350:	0000bcfd 	.word	0x0000bcfd
    b354:	0000bd29 	.word	0x0000bd29
    b358:	0000bd55 	.word	0x0000bd55
    b35c:	0000bd85 	.word	0x0000bd85
    b360:	0000bdb1 	.word	0x0000bdb1
    b364:	0000bf1d 	.word	0x0000bf1d
    b368:	0000be49 	.word	0x0000be49
    b36c:	0000c259 	.word	0x0000c259
    b370:	0000c0b1 	.word	0x0000c0b1
    b374:	0000bfe5 	.word	0x0000bfe5
    b378:	0000bb75 	.word	0x0000bb75
    b37c:	0000bc81 	.word	0x0000bc81
    b380:	0000b9f5 	.word	0x0000b9f5
    b384:	0000c6a1 	.word	0x0000c6a1
    b388:	0000c6c5 	.word	0x0000c6c5
    b38c:	0000c6e9 	.word	0x0000c6e9
    b390:	0000c711 	.word	0x0000c711
    b394:	0000c739 	.word	0x0000c739
    b398:	0000c781 	.word	0x0000c781
    b39c:	0000c7a3 	.word	0x0000c7a3
    b3a0:	0000c911 	.word	0x0000c911
    b3a4:	0000ca29 	.word	0x0000ca29
    b3a8:	0000c849 	.word	0x0000c849
    b3ac:	0000caa5 	.word	0x0000caa5
    b3b0:	0000cafd 	.word	0x0000cafd
    b3b4:	0000c1d1 	.word	0x0000c1d1
    b3b8:	0000c7c5 	.word	0x0000c7c5
    b3bc:	0000c7f1 	.word	0x0000c7f1
    b3c0:	0000c81d 	.word	0x0000c81d

0000b3c4 <LORAREG_GetAttr_FreqT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_FreqT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b086      	sub	sp, #24
    b3c8:	af00      	add	r7, sp, #0
    b3ca:	60b9      	str	r1, [r7, #8]
    b3cc:	607a      	str	r2, [r7, #4]
    b3ce:	230f      	movs	r3, #15
    b3d0:	18fb      	adds	r3, r7, r3
    b3d2:	1c02      	adds	r2, r0, #0
    b3d4:	701a      	strb	r2, [r3, #0]
	uint8_t  channelId;
	
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b3d6:	2317      	movs	r3, #23
    b3d8:	18fb      	adds	r3, r7, r3
    b3da:	2208      	movs	r2, #8
    b3dc:	701a      	strb	r2, [r3, #0]

	channelId = *(uint8_t *)attrInput;
    b3de:	2316      	movs	r3, #22
    b3e0:	18fb      	adds	r3, r7, r3
    b3e2:	68ba      	ldr	r2, [r7, #8]
    b3e4:	7812      	ldrb	r2, [r2, #0]
    b3e6:	701a      	strb	r2, [r3, #0]
	if(channelId > RegParams.maxChannels)
    b3e8:	2316      	movs	r3, #22
    b3ea:	18fb      	adds	r3, r7, r3
    b3ec:	781b      	ldrb	r3, [r3, #0]
    b3ee:	4a20      	ldr	r2, [pc, #128]	; (b470 <LORAREG_GetAttr_FreqT1+0xac>)
    b3f0:	212a      	movs	r1, #42	; 0x2a
    b3f2:	5652      	ldrsb	r2, [r2, r1]
    b3f4:	4293      	cmp	r3, r2
    b3f6:	dd01      	ble.n	b3fc <LORAREG_GetAttr_FreqT1+0x38>
	{
		return LORAWAN_INVALID_PARAMETER;
    b3f8:	230a      	movs	r3, #10
    b3fa:	e034      	b.n	b466 <LORAREG_GetAttr_FreqT1+0xa2>
	}
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    b3fc:	4a1c      	ldr	r2, [pc, #112]	; (b470 <LORAREG_GetAttr_FreqT1+0xac>)
    b3fe:	23aa      	movs	r3, #170	; 0xaa
    b400:	005b      	lsls	r3, r3, #1
    b402:	5cd3      	ldrb	r3, [r2, r3]
    b404:	2216      	movs	r2, #22
    b406:	18ba      	adds	r2, r7, r2
    b408:	7812      	ldrb	r2, [r2, #0]
    b40a:	429a      	cmp	r2, r3
    b40c:	d209      	bcs.n	b422 <LORAREG_GetAttr_FreqT1+0x5e>
	{
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    b40e:	2316      	movs	r3, #22
    b410:	18fb      	adds	r3, r7, r3
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	0018      	movs	r0, r3
    b416:	4b17      	ldr	r3, [pc, #92]	; (b474 <LORAREG_GetAttr_FreqT1+0xb0>)
    b418:	4798      	blx	r3
    b41a:	0002      	movs	r2, r0
    b41c:	687b      	ldr	r3, [r7, #4]
    b41e:	601a      	str	r2, [r3, #0]
    b420:	e01e      	b.n	b460 <LORAREG_GetAttr_FreqT1+0x9c>
	}
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    b422:	2316      	movs	r3, #22
    b424:	18fb      	adds	r3, r7, r3
    b426:	781b      	ldrb	r3, [r3, #0]
    b428:	4a11      	ldr	r2, [pc, #68]	; (b470 <LORAREG_GetAttr_FreqT1+0xac>)
    b42a:	212a      	movs	r1, #42	; 0x2a
    b42c:	5652      	ldrsb	r2, [r2, r1]
    b42e:	4293      	cmp	r3, r2
    b430:	da12      	bge.n	b458 <LORAREG_GetAttr_FreqT1+0x94>
    b432:	4a0f      	ldr	r2, [pc, #60]	; (b470 <LORAREG_GetAttr_FreqT1+0xac>)
    b434:	23aa      	movs	r3, #170	; 0xaa
    b436:	005b      	lsls	r3, r3, #1
    b438:	5cd3      	ldrb	r3, [r2, r3]
    b43a:	2216      	movs	r2, #22
    b43c:	18ba      	adds	r2, r7, r2
    b43e:	7812      	ldrb	r2, [r2, #0]
    b440:	429a      	cmp	r2, r3
    b442:	d309      	bcc.n	b458 <LORAREG_GetAttr_FreqT1+0x94>
	{
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    b444:	2316      	movs	r3, #22
    b446:	18fb      	adds	r3, r7, r3
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	0018      	movs	r0, r3
    b44c:	4b0a      	ldr	r3, [pc, #40]	; (b478 <LORAREG_GetAttr_FreqT1+0xb4>)
    b44e:	4798      	blx	r3
    b450:	0002      	movs	r2, r0
    b452:	687b      	ldr	r3, [r7, #4]
    b454:	601a      	str	r2, [r3, #0]
    b456:	e003      	b.n	b460 <LORAREG_GetAttr_FreqT1+0x9c>
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
    b458:	2317      	movs	r3, #23
    b45a:	18fb      	adds	r3, r7, r3
    b45c:	220a      	movs	r2, #10
    b45e:	701a      	strb	r2, [r3, #0]
	}

	return result;
    b460:	2317      	movs	r3, #23
    b462:	18fb      	adds	r3, r7, r3
    b464:	781b      	ldrb	r3, [r3, #0]
}
    b466:	0018      	movs	r0, r3
    b468:	46bd      	mov	sp, r7
    b46a:	b006      	add	sp, #24
    b46c:	bd80      	pop	{r7, pc}
    b46e:	46c0      	nop			; (mov r8, r8)
    b470:	200014a8 	.word	0x200014a8
    b474:	0000d685 	.word	0x0000d685
    b478:	0000d6d9 	.word	0x0000d6d9

0000b47c <LORAREG_GetAttr_FreqT2>:
#endif

#if (EU_BAND == 1 || IND_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_FreqT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b47c:	b580      	push	{r7, lr}
    b47e:	b086      	sub	sp, #24
    b480:	af00      	add	r7, sp, #0
    b482:	60b9      	str	r1, [r7, #8]
    b484:	607a      	str	r2, [r7, #4]
    b486:	230f      	movs	r3, #15
    b488:	18fb      	adds	r3, r7, r3
    b48a:	1c02      	adds	r2, r0, #0
    b48c:	701a      	strb	r2, [r3, #0]
	uint8_t  channelId;
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b48e:	2317      	movs	r3, #23
    b490:	18fb      	adds	r3, r7, r3
    b492:	2208      	movs	r2, #8
    b494:	701a      	strb	r2, [r3, #0]

	channelId = *(uint8_t *)attrInput;
    b496:	2316      	movs	r3, #22
    b498:	18fb      	adds	r3, r7, r3
    b49a:	68ba      	ldr	r2, [r7, #8]
    b49c:	7812      	ldrb	r2, [r2, #0]
    b49e:	701a      	strb	r2, [r3, #0]
	if(channelId > RegParams.maxChannels)
    b4a0:	2316      	movs	r3, #22
    b4a2:	18fb      	adds	r3, r7, r3
    b4a4:	781b      	ldrb	r3, [r3, #0]
    b4a6:	4a14      	ldr	r2, [pc, #80]	; (b4f8 <LORAREG_GetAttr_FreqT2+0x7c>)
    b4a8:	212a      	movs	r1, #42	; 0x2a
    b4aa:	5652      	ldrsb	r2, [r2, r1]
    b4ac:	4293      	cmp	r3, r2
    b4ae:	dd01      	ble.n	b4b4 <LORAREG_GetAttr_FreqT2+0x38>
	{
		return LORAWAN_INVALID_PARAMETER;
    b4b0:	230a      	movs	r3, #10
    b4b2:	e01c      	b.n	b4ee <LORAREG_GetAttr_FreqT2+0x72>
	}
	else
	{
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    b4b4:	4b10      	ldr	r3, [pc, #64]	; (b4f8 <LORAREG_GetAttr_FreqT2+0x7c>)
    b4b6:	7a1a      	ldrb	r2, [r3, #8]
    b4b8:	7a59      	ldrb	r1, [r3, #9]
    b4ba:	0209      	lsls	r1, r1, #8
    b4bc:	430a      	orrs	r2, r1
    b4be:	7a99      	ldrb	r1, [r3, #10]
    b4c0:	0409      	lsls	r1, r1, #16
    b4c2:	430a      	orrs	r2, r1
    b4c4:	7adb      	ldrb	r3, [r3, #11]
    b4c6:	061b      	lsls	r3, r3, #24
    b4c8:	4313      	orrs	r3, r2
    b4ca:	0019      	movs	r1, r3
    b4cc:	2316      	movs	r3, #22
    b4ce:	18fb      	adds	r3, r7, r3
    b4d0:	781a      	ldrb	r2, [r3, #0]
    b4d2:	0013      	movs	r3, r2
    b4d4:	005b      	lsls	r3, r3, #1
    b4d6:	189b      	adds	r3, r3, r2
    b4d8:	009b      	lsls	r3, r3, #2
    b4da:	18cb      	adds	r3, r1, r3
    b4dc:	0019      	movs	r1, r3
    b4de:	687b      	ldr	r3, [r7, #4]
    b4e0:	2204      	movs	r2, #4
    b4e2:	0018      	movs	r0, r3
    b4e4:	4b05      	ldr	r3, [pc, #20]	; (b4fc <LORAREG_GetAttr_FreqT2+0x80>)
    b4e6:	4798      	blx	r3
	}
	
	return result;
    b4e8:	2317      	movs	r3, #23
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	781b      	ldrb	r3, [r3, #0]
}
    b4ee:	0018      	movs	r0, r3
    b4f0:	46bd      	mov	sp, r7
    b4f2:	b006      	add	sp, #24
    b4f4:	bd80      	pop	{r7, pc}
    b4f6:	46c0      	nop			; (mov r8, r8)
    b4f8:	200014a8 	.word	0x200014a8
    b4fc:	00024149 	.word	0x00024149

0000b500 <LORAREG_GetAttr_FreqT3>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_FreqT3(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b500:	b580      	push	{r7, lr}
    b502:	b086      	sub	sp, #24
    b504:	af00      	add	r7, sp, #0
    b506:	60b9      	str	r1, [r7, #8]
    b508:	607a      	str	r2, [r7, #4]
    b50a:	230f      	movs	r3, #15
    b50c:	18fb      	adds	r3, r7, r3
    b50e:	1c02      	adds	r2, r0, #0
    b510:	701a      	strb	r2, [r3, #0]
	uint8_t  channelId;
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b512:	2317      	movs	r3, #23
    b514:	18fb      	adds	r3, r7, r3
    b516:	2208      	movs	r2, #8
    b518:	701a      	strb	r2, [r3, #0]

	channelId = *(uint8_t *)attrInput;
    b51a:	2316      	movs	r3, #22
    b51c:	18fb      	adds	r3, r7, r3
    b51e:	68ba      	ldr	r2, [r7, #8]
    b520:	7812      	ldrb	r2, [r2, #0]
    b522:	701a      	strb	r2, [r3, #0]
	if(channelId > RegParams.maxChannels) 
    b524:	2316      	movs	r3, #22
    b526:	18fb      	adds	r3, r7, r3
    b528:	781b      	ldrb	r3, [r3, #0]
    b52a:	4a15      	ldr	r2, [pc, #84]	; (b580 <LORAREG_GetAttr_FreqT3+0x80>)
    b52c:	212a      	movs	r1, #42	; 0x2a
    b52e:	5652      	ldrsb	r2, [r2, r1]
    b530:	4293      	cmp	r3, r2
    b532:	dd04      	ble.n	b53e <LORAREG_GetAttr_FreqT3+0x3e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    b534:	2317      	movs	r3, #23
    b536:	18fb      	adds	r3, r7, r3
    b538:	220a      	movs	r2, #10
    b53a:	701a      	strb	r2, [r3, #0]
    b53c:	e019      	b.n	b572 <LORAREG_GetAttr_FreqT3+0x72>
	}
	else
	{
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    b53e:	4b10      	ldr	r3, [pc, #64]	; (b580 <LORAREG_GetAttr_FreqT3+0x80>)
    b540:	7a1a      	ldrb	r2, [r3, #8]
    b542:	7a59      	ldrb	r1, [r3, #9]
    b544:	0209      	lsls	r1, r1, #8
    b546:	430a      	orrs	r2, r1
    b548:	7a99      	ldrb	r1, [r3, #10]
    b54a:	0409      	lsls	r1, r1, #16
    b54c:	430a      	orrs	r2, r1
    b54e:	7adb      	ldrb	r3, [r3, #11]
    b550:	061b      	lsls	r3, r3, #24
    b552:	4313      	orrs	r3, r2
    b554:	0019      	movs	r1, r3
    b556:	2316      	movs	r3, #22
    b558:	18fb      	adds	r3, r7, r3
    b55a:	781a      	ldrb	r2, [r3, #0]
    b55c:	0013      	movs	r3, r2
    b55e:	005b      	lsls	r3, r3, #1
    b560:	189b      	adds	r3, r3, r2
    b562:	009b      	lsls	r3, r3, #2
    b564:	18cb      	adds	r3, r1, r3
    b566:	0019      	movs	r1, r3
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	2204      	movs	r2, #4
    b56c:	0018      	movs	r0, r3
    b56e:	4b05      	ldr	r3, [pc, #20]	; (b584 <LORAREG_GetAttr_FreqT3+0x84>)
    b570:	4798      	blx	r3
	}
	
	return result;
    b572:	2317      	movs	r3, #23
    b574:	18fb      	adds	r3, r7, r3
    b576:	781b      	ldrb	r3, [r3, #0]
}
    b578:	0018      	movs	r0, r3
    b57a:	46bd      	mov	sp, r7
    b57c:	b006      	add	sp, #24
    b57e:	bd80      	pop	{r7, pc}
    b580:	200014a8 	.word	0x200014a8
    b584:	00024149 	.word	0x00024149

0000b588 <LORAREG_GetAttr_RxWindowSizeT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_RxWindowSizeT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b588:	b580      	push	{r7, lr}
    b58a:	b086      	sub	sp, #24
    b58c:	af00      	add	r7, sp, #0
    b58e:	60b9      	str	r1, [r7, #8]
    b590:	607a      	str	r2, [r7, #4]
    b592:	230f      	movs	r3, #15
    b594:	18fb      	adds	r3, r7, r3
    b596:	1c02      	adds	r2, r0, #0
    b598:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b59a:	2317      	movs	r3, #23
    b59c:	18fb      	adds	r3, r7, r3
    b59e:	2208      	movs	r2, #8
    b5a0:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b5a2:	2316      	movs	r3, #22
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	68ba      	ldr	r2, [r7, #8]
    b5a8:	7812      	ldrb	r2, [r2, #0]
    b5aa:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b5ac:	68bb      	ldr	r3, [r7, #8]
    b5ae:	0019      	movs	r1, r3
    b5b0:	2010      	movs	r0, #16
    b5b2:	4b17      	ldr	r3, [pc, #92]	; (b610 <LORAREG_GetAttr_RxWindowSizeT1+0x88>)
    b5b4:	4798      	blx	r3
    b5b6:	0003      	movs	r3, r0
    b5b8:	2b08      	cmp	r3, #8
    b5ba:	d009      	beq.n	b5d0 <LORAREG_GetAttr_RxWindowSizeT1+0x48>
    b5bc:	68bb      	ldr	r3, [r7, #8]
    b5be:	0019      	movs	r1, r3
    b5c0:	200f      	movs	r0, #15
    b5c2:	4b14      	ldr	r3, [pc, #80]	; (b614 <LORAREG_GetAttr_RxWindowSizeT1+0x8c>)
    b5c4:	4798      	blx	r3
    b5c6:	0003      	movs	r3, r0
    b5c8:	2b08      	cmp	r3, #8
    b5ca:	d001      	beq.n	b5d0 <LORAREG_GetAttr_RxWindowSizeT1+0x48>
	{
		return LORAWAN_INVALID_PARAMETER;
    b5cc:	230a      	movs	r3, #10
    b5ce:	e01a      	b.n	b606 <LORAREG_GetAttr_RxWindowSizeT1+0x7e>
	}
	else
	{
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    b5d0:	4b11      	ldr	r3, [pc, #68]	; (b618 <LORAREG_GetAttr_RxWindowSizeT1+0x90>)
    b5d2:	781a      	ldrb	r2, [r3, #0]
    b5d4:	7859      	ldrb	r1, [r3, #1]
    b5d6:	0209      	lsls	r1, r1, #8
    b5d8:	430a      	orrs	r2, r1
    b5da:	7899      	ldrb	r1, [r3, #2]
    b5dc:	0409      	lsls	r1, r1, #16
    b5de:	430a      	orrs	r2, r1
    b5e0:	78db      	ldrb	r3, [r3, #3]
    b5e2:	061b      	lsls	r3, r3, #24
    b5e4:	4313      	orrs	r3, r2
    b5e6:	001a      	movs	r2, r3
    b5e8:	2316      	movs	r3, #22
    b5ea:	18fb      	adds	r3, r7, r3
    b5ec:	781b      	ldrb	r3, [r3, #0]
    b5ee:	00db      	lsls	r3, r3, #3
    b5f0:	18d3      	adds	r3, r2, r3
    b5f2:	781a      	ldrb	r2, [r3, #0]
    b5f4:	785b      	ldrb	r3, [r3, #1]
    b5f6:	021b      	lsls	r3, r3, #8
    b5f8:	4313      	orrs	r3, r2
    b5fa:	b29a      	uxth	r2, r3
    b5fc:	687b      	ldr	r3, [r7, #4]
    b5fe:	801a      	strh	r2, [r3, #0]
	}
	return result;
    b600:	2317      	movs	r3, #23
    b602:	18fb      	adds	r3, r7, r3
    b604:	781b      	ldrb	r3, [r3, #0]
}
    b606:	0018      	movs	r0, r3
    b608:	46bd      	mov	sp, r7
    b60a:	b006      	add	sp, #24
    b60c:	bd80      	pop	{r7, pc}
    b60e:	46c0      	nop			; (mov r8, r8)
    b610:	0000d735 	.word	0x0000d735
    b614:	0000d7ed 	.word	0x0000d7ed
    b618:	200014a8 	.word	0x200014a8

0000b61c <LORAREG_GetAttr_RxWindowSizeT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_RxWindowSizeT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b61c:	b580      	push	{r7, lr}
    b61e:	b086      	sub	sp, #24
    b620:	af00      	add	r7, sp, #0
    b622:	60b9      	str	r1, [r7, #8]
    b624:	607a      	str	r2, [r7, #4]
    b626:	230f      	movs	r3, #15
    b628:	18fb      	adds	r3, r7, r3
    b62a:	1c02      	adds	r2, r0, #0
    b62c:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b62e:	2317      	movs	r3, #23
    b630:	18fb      	adds	r3, r7, r3
    b632:	2208      	movs	r2, #8
    b634:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b636:	2316      	movs	r3, #22
    b638:	18fb      	adds	r3, r7, r3
    b63a:	68ba      	ldr	r2, [r7, #8]
    b63c:	7812      	ldrb	r2, [r2, #0]
    b63e:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b640:	68bb      	ldr	r3, [r7, #8]
    b642:	0019      	movs	r1, r3
    b644:	200f      	movs	r0, #15
    b646:	4b13      	ldr	r3, [pc, #76]	; (b694 <LORAREG_GetAttr_RxWindowSizeT2+0x78>)
    b648:	4798      	blx	r3
    b64a:	0003      	movs	r3, r0
    b64c:	2b08      	cmp	r3, #8
    b64e:	d001      	beq.n	b654 <LORAREG_GetAttr_RxWindowSizeT2+0x38>
	{
		return LORAWAN_INVALID_PARAMETER;
    b650:	230a      	movs	r3, #10
    b652:	e01a      	b.n	b68a <LORAREG_GetAttr_RxWindowSizeT2+0x6e>
	}
	else
	{
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    b654:	4b10      	ldr	r3, [pc, #64]	; (b698 <LORAREG_GetAttr_RxWindowSizeT2+0x7c>)
    b656:	781a      	ldrb	r2, [r3, #0]
    b658:	7859      	ldrb	r1, [r3, #1]
    b65a:	0209      	lsls	r1, r1, #8
    b65c:	430a      	orrs	r2, r1
    b65e:	7899      	ldrb	r1, [r3, #2]
    b660:	0409      	lsls	r1, r1, #16
    b662:	430a      	orrs	r2, r1
    b664:	78db      	ldrb	r3, [r3, #3]
    b666:	061b      	lsls	r3, r3, #24
    b668:	4313      	orrs	r3, r2
    b66a:	001a      	movs	r2, r3
    b66c:	2316      	movs	r3, #22
    b66e:	18fb      	adds	r3, r7, r3
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	00db      	lsls	r3, r3, #3
    b674:	18d3      	adds	r3, r2, r3
    b676:	781a      	ldrb	r2, [r3, #0]
    b678:	785b      	ldrb	r3, [r3, #1]
    b67a:	021b      	lsls	r3, r3, #8
    b67c:	4313      	orrs	r3, r2
    b67e:	b29a      	uxth	r2, r3
    b680:	687b      	ldr	r3, [r7, #4]
    b682:	801a      	strh	r2, [r3, #0]
	}
	return result;
    b684:	2317      	movs	r3, #23
    b686:	18fb      	adds	r3, r7, r3
    b688:	781b      	ldrb	r3, [r3, #0]
}
    b68a:	0018      	movs	r0, r3
    b68c:	46bd      	mov	sp, r7
    b68e:	b006      	add	sp, #24
    b690:	bd80      	pop	{r7, pc}
    b692:	46c0      	nop			; (mov r8, r8)
    b694:	0000fbb5 	.word	0x0000fbb5
    b698:	200014a8 	.word	0x200014a8

0000b69c <LORAREG_GetAttr_RxWindowOffsetT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_RxWindowOffsetT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b69c:	b580      	push	{r7, lr}
    b69e:	b086      	sub	sp, #24
    b6a0:	af00      	add	r7, sp, #0
    b6a2:	60b9      	str	r1, [r7, #8]
    b6a4:	607a      	str	r2, [r7, #4]
    b6a6:	230f      	movs	r3, #15
    b6a8:	18fb      	adds	r3, r7, r3
    b6aa:	1c02      	adds	r2, r0, #0
    b6ac:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b6ae:	2317      	movs	r3, #23
    b6b0:	18fb      	adds	r3, r7, r3
    b6b2:	2208      	movs	r2, #8
    b6b4:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b6b6:	2316      	movs	r3, #22
    b6b8:	18fb      	adds	r3, r7, r3
    b6ba:	68ba      	ldr	r2, [r7, #8]
    b6bc:	7812      	ldrb	r2, [r2, #0]
    b6be:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b6c0:	68bb      	ldr	r3, [r7, #8]
    b6c2:	0019      	movs	r1, r3
    b6c4:	2010      	movs	r0, #16
    b6c6:	4b15      	ldr	r3, [pc, #84]	; (b71c <LORAREG_GetAttr_RxWindowOffsetT1+0x80>)
    b6c8:	4798      	blx	r3
    b6ca:	0003      	movs	r3, r0
    b6cc:	2b08      	cmp	r3, #8
    b6ce:	d009      	beq.n	b6e4 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>
    b6d0:	68bb      	ldr	r3, [r7, #8]
    b6d2:	0019      	movs	r1, r3
    b6d4:	200f      	movs	r0, #15
    b6d6:	4b12      	ldr	r3, [pc, #72]	; (b720 <LORAREG_GetAttr_RxWindowOffsetT1+0x84>)
    b6d8:	4798      	blx	r3
    b6da:	0003      	movs	r3, r0
    b6dc:	2b08      	cmp	r3, #8
    b6de:	d001      	beq.n	b6e4 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>
	{
		return LORAWAN_INVALID_PARAMETER;
    b6e0:	230a      	movs	r3, #10
    b6e2:	e017      	b.n	b714 <LORAREG_GetAttr_RxWindowOffsetT1+0x78>
	}
    else
	{
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    b6e4:	4b0f      	ldr	r3, [pc, #60]	; (b724 <LORAREG_GetAttr_RxWindowOffsetT1+0x88>)
    b6e6:	781a      	ldrb	r2, [r3, #0]
    b6e8:	7859      	ldrb	r1, [r3, #1]
    b6ea:	0209      	lsls	r1, r1, #8
    b6ec:	430a      	orrs	r2, r1
    b6ee:	7899      	ldrb	r1, [r3, #2]
    b6f0:	0409      	lsls	r1, r1, #16
    b6f2:	430a      	orrs	r2, r1
    b6f4:	78db      	ldrb	r3, [r3, #3]
    b6f6:	061b      	lsls	r3, r3, #24
    b6f8:	4313      	orrs	r3, r2
    b6fa:	001a      	movs	r2, r3
    b6fc:	2316      	movs	r3, #22
    b6fe:	18fb      	adds	r3, r7, r3
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	00db      	lsls	r3, r3, #3
    b704:	18d3      	adds	r3, r2, r3
    b706:	2204      	movs	r2, #4
    b708:	569a      	ldrsb	r2, [r3, r2]
    b70a:	687b      	ldr	r3, [r7, #4]
    b70c:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
    b70e:	2317      	movs	r3, #23
    b710:	18fb      	adds	r3, r7, r3
    b712:	781b      	ldrb	r3, [r3, #0]
}
    b714:	0018      	movs	r0, r3
    b716:	46bd      	mov	sp, r7
    b718:	b006      	add	sp, #24
    b71a:	bd80      	pop	{r7, pc}
    b71c:	0000d735 	.word	0x0000d735
    b720:	0000d7ed 	.word	0x0000d7ed
    b724:	200014a8 	.word	0x200014a8

0000b728 <LORAREG_GetAttr_RxWindowOffsetT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_RxWindowOffsetT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b728:	b580      	push	{r7, lr}
    b72a:	b086      	sub	sp, #24
    b72c:	af00      	add	r7, sp, #0
    b72e:	60b9      	str	r1, [r7, #8]
    b730:	607a      	str	r2, [r7, #4]
    b732:	230f      	movs	r3, #15
    b734:	18fb      	adds	r3, r7, r3
    b736:	1c02      	adds	r2, r0, #0
    b738:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b73a:	2317      	movs	r3, #23
    b73c:	18fb      	adds	r3, r7, r3
    b73e:	2208      	movs	r2, #8
    b740:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b742:	2316      	movs	r3, #22
    b744:	18fb      	adds	r3, r7, r3
    b746:	68ba      	ldr	r2, [r7, #8]
    b748:	7812      	ldrb	r2, [r2, #0]
    b74a:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b74c:	68bb      	ldr	r3, [r7, #8]
    b74e:	0019      	movs	r1, r3
    b750:	200f      	movs	r0, #15
    b752:	4b11      	ldr	r3, [pc, #68]	; (b798 <LORAREG_GetAttr_RxWindowOffsetT2+0x70>)
    b754:	4798      	blx	r3
    b756:	0003      	movs	r3, r0
    b758:	2b08      	cmp	r3, #8
    b75a:	d001      	beq.n	b760 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>
	{
		return LORAWAN_INVALID_PARAMETER;
    b75c:	230a      	movs	r3, #10
    b75e:	e017      	b.n	b790 <LORAREG_GetAttr_RxWindowOffsetT2+0x68>
	}
	else
	{
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    b760:	4b0e      	ldr	r3, [pc, #56]	; (b79c <LORAREG_GetAttr_RxWindowOffsetT2+0x74>)
    b762:	781a      	ldrb	r2, [r3, #0]
    b764:	7859      	ldrb	r1, [r3, #1]
    b766:	0209      	lsls	r1, r1, #8
    b768:	430a      	orrs	r2, r1
    b76a:	7899      	ldrb	r1, [r3, #2]
    b76c:	0409      	lsls	r1, r1, #16
    b76e:	430a      	orrs	r2, r1
    b770:	78db      	ldrb	r3, [r3, #3]
    b772:	061b      	lsls	r3, r3, #24
    b774:	4313      	orrs	r3, r2
    b776:	001a      	movs	r2, r3
    b778:	2316      	movs	r3, #22
    b77a:	18fb      	adds	r3, r7, r3
    b77c:	781b      	ldrb	r3, [r3, #0]
    b77e:	00db      	lsls	r3, r3, #3
    b780:	18d3      	adds	r3, r2, r3
    b782:	2204      	movs	r2, #4
    b784:	569a      	ldrsb	r2, [r3, r2]
    b786:	687b      	ldr	r3, [r7, #4]
    b788:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
    b78a:	2317      	movs	r3, #23
    b78c:	18fb      	adds	r3, r7, r3
    b78e:	781b      	ldrb	r3, [r3, #0]
}
    b790:	0018      	movs	r0, r3
    b792:	46bd      	mov	sp, r7
    b794:	b006      	add	sp, #24
    b796:	bd80      	pop	{r7, pc}
    b798:	0000fbb5 	.word	0x0000fbb5
    b79c:	200014a8 	.word	0x200014a8

0000b7a0 <LORAREG_GetAttr_MaxPayloadT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MaxPayloadT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b7a0:	b580      	push	{r7, lr}
    b7a2:	b086      	sub	sp, #24
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	60b9      	str	r1, [r7, #8]
    b7a8:	607a      	str	r2, [r7, #4]
    b7aa:	230f      	movs	r3, #15
    b7ac:	18fb      	adds	r3, r7, r3
    b7ae:	1c02      	adds	r2, r0, #0
    b7b0:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b7b2:	2317      	movs	r3, #23
    b7b4:	18fb      	adds	r3, r7, r3
    b7b6:	2208      	movs	r2, #8
    b7b8:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b7ba:	2316      	movs	r3, #22
    b7bc:	18fb      	adds	r3, r7, r3
    b7be:	68ba      	ldr	r2, [r7, #8]
    b7c0:	7812      	ldrb	r2, [r2, #0]
    b7c2:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b7c4:	68bb      	ldr	r3, [r7, #8]
    b7c6:	0019      	movs	r1, r3
    b7c8:	2010      	movs	r0, #16
    b7ca:	4b16      	ldr	r3, [pc, #88]	; (b824 <LORAREG_GetAttr_MaxPayloadT1+0x84>)
    b7cc:	4798      	blx	r3
    b7ce:	0003      	movs	r3, r0
    b7d0:	2b08      	cmp	r3, #8
    b7d2:	d00c      	beq.n	b7ee <LORAREG_GetAttr_MaxPayloadT1+0x4e>
    b7d4:	68bb      	ldr	r3, [r7, #8]
    b7d6:	0019      	movs	r1, r3
    b7d8:	200f      	movs	r0, #15
    b7da:	4b13      	ldr	r3, [pc, #76]	; (b828 <LORAREG_GetAttr_MaxPayloadT1+0x88>)
    b7dc:	4798      	blx	r3
    b7de:	0003      	movs	r3, r0
    b7e0:	2b08      	cmp	r3, #8
    b7e2:	d004      	beq.n	b7ee <LORAREG_GetAttr_MaxPayloadT1+0x4e>
	{
		result =  LORAWAN_INVALID_PARAMETER;
    b7e4:	2317      	movs	r3, #23
    b7e6:	18fb      	adds	r3, r7, r3
    b7e8:	220a      	movs	r2, #10
    b7ea:	701a      	strb	r2, [r3, #0]
    b7ec:	e013      	b.n	b816 <LORAREG_GetAttr_MaxPayloadT1+0x76>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    b7ee:	4b0f      	ldr	r3, [pc, #60]	; (b82c <LORAREG_GetAttr_MaxPayloadT1+0x8c>)
    b7f0:	781a      	ldrb	r2, [r3, #0]
    b7f2:	7859      	ldrb	r1, [r3, #1]
    b7f4:	0209      	lsls	r1, r1, #8
    b7f6:	430a      	orrs	r2, r1
    b7f8:	7899      	ldrb	r1, [r3, #2]
    b7fa:	0409      	lsls	r1, r1, #16
    b7fc:	430a      	orrs	r2, r1
    b7fe:	78db      	ldrb	r3, [r3, #3]
    b800:	061b      	lsls	r3, r3, #24
    b802:	4313      	orrs	r3, r2
    b804:	001a      	movs	r2, r3
    b806:	2316      	movs	r3, #22
    b808:	18fb      	adds	r3, r7, r3
    b80a:	781b      	ldrb	r3, [r3, #0]
    b80c:	00db      	lsls	r3, r3, #3
    b80e:	18d3      	adds	r3, r2, r3
    b810:	789a      	ldrb	r2, [r3, #2]
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	701a      	strb	r2, [r3, #0]
	}
	return result;
    b816:	2317      	movs	r3, #23
    b818:	18fb      	adds	r3, r7, r3
    b81a:	781b      	ldrb	r3, [r3, #0]
}
    b81c:	0018      	movs	r0, r3
    b81e:	46bd      	mov	sp, r7
    b820:	b006      	add	sp, #24
    b822:	bd80      	pop	{r7, pc}
    b824:	0000d735 	.word	0x0000d735
    b828:	0000d7ed 	.word	0x0000d7ed
    b82c:	200014a8 	.word	0x200014a8

0000b830 <LORAREG_GetAttr_MaxPayloadT2>:
#endif

#if (EU_BAND == 1 || IND_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MaxPayloadT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b830:	b580      	push	{r7, lr}
    b832:	b086      	sub	sp, #24
    b834:	af00      	add	r7, sp, #0
    b836:	60b9      	str	r1, [r7, #8]
    b838:	607a      	str	r2, [r7, #4]
    b83a:	230f      	movs	r3, #15
    b83c:	18fb      	adds	r3, r7, r3
    b83e:	1c02      	adds	r2, r0, #0
    b840:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b842:	2317      	movs	r3, #23
    b844:	18fb      	adds	r3, r7, r3
    b846:	2208      	movs	r2, #8
    b848:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b84a:	2316      	movs	r3, #22
    b84c:	18fb      	adds	r3, r7, r3
    b84e:	68ba      	ldr	r2, [r7, #8]
    b850:	7812      	ldrb	r2, [r2, #0]
    b852:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b854:	68bb      	ldr	r3, [r7, #8]
    b856:	0019      	movs	r1, r3
    b858:	200f      	movs	r0, #15
    b85a:	4b12      	ldr	r3, [pc, #72]	; (b8a4 <LORAREG_GetAttr_MaxPayloadT2+0x74>)
    b85c:	4798      	blx	r3
    b85e:	0003      	movs	r3, r0
    b860:	2b08      	cmp	r3, #8
    b862:	d004      	beq.n	b86e <LORAREG_GetAttr_MaxPayloadT2+0x3e>
	{
		result =  LORAWAN_INVALID_PARAMETER;
    b864:	2317      	movs	r3, #23
    b866:	18fb      	adds	r3, r7, r3
    b868:	220a      	movs	r2, #10
    b86a:	701a      	strb	r2, [r3, #0]
    b86c:	e013      	b.n	b896 <LORAREG_GetAttr_MaxPayloadT2+0x66>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    b86e:	4b0e      	ldr	r3, [pc, #56]	; (b8a8 <LORAREG_GetAttr_MaxPayloadT2+0x78>)
    b870:	781a      	ldrb	r2, [r3, #0]
    b872:	7859      	ldrb	r1, [r3, #1]
    b874:	0209      	lsls	r1, r1, #8
    b876:	430a      	orrs	r2, r1
    b878:	7899      	ldrb	r1, [r3, #2]
    b87a:	0409      	lsls	r1, r1, #16
    b87c:	430a      	orrs	r2, r1
    b87e:	78db      	ldrb	r3, [r3, #3]
    b880:	061b      	lsls	r3, r3, #24
    b882:	4313      	orrs	r3, r2
    b884:	001a      	movs	r2, r3
    b886:	2316      	movs	r3, #22
    b888:	18fb      	adds	r3, r7, r3
    b88a:	781b      	ldrb	r3, [r3, #0]
    b88c:	00db      	lsls	r3, r3, #3
    b88e:	18d3      	adds	r3, r2, r3
    b890:	789a      	ldrb	r2, [r3, #2]
    b892:	687b      	ldr	r3, [r7, #4]
    b894:	701a      	strb	r2, [r3, #0]
	}
	return result;
    b896:	2317      	movs	r3, #23
    b898:	18fb      	adds	r3, r7, r3
    b89a:	781b      	ldrb	r3, [r3, #0]
}
    b89c:	0018      	movs	r0, r3
    b89e:	46bd      	mov	sp, r7
    b8a0:	b006      	add	sp, #24
    b8a2:	bd80      	pop	{r7, pc}
    b8a4:	0000fbb5 	.word	0x0000fbb5
    b8a8:	200014a8 	.word	0x200014a8

0000b8ac <LORAREG_GetAttr_MaxPayloadT3>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MaxPayloadT3(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b8ac:	b580      	push	{r7, lr}
    b8ae:	b086      	sub	sp, #24
    b8b0:	af00      	add	r7, sp, #0
    b8b2:	60b9      	str	r1, [r7, #8]
    b8b4:	607a      	str	r2, [r7, #4]
    b8b6:	230f      	movs	r3, #15
    b8b8:	18fb      	adds	r3, r7, r3
    b8ba:	1c02      	adds	r2, r0, #0
    b8bc:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b8be:	2317      	movs	r3, #23
    b8c0:	18fb      	adds	r3, r7, r3
    b8c2:	2208      	movs	r2, #8
    b8c4:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b8c6:	2316      	movs	r3, #22
    b8c8:	18fb      	adds	r3, r7, r3
    b8ca:	68ba      	ldr	r2, [r7, #8]
    b8cc:	7812      	ldrb	r2, [r2, #0]
    b8ce:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b8d0:	68bb      	ldr	r3, [r7, #8]
    b8d2:	0019      	movs	r1, r3
    b8d4:	200f      	movs	r0, #15
    b8d6:	4b21      	ldr	r3, [pc, #132]	; (b95c <LORAREG_GetAttr_MaxPayloadT3+0xb0>)
    b8d8:	4798      	blx	r3
    b8da:	0003      	movs	r3, r0
    b8dc:	2b08      	cmp	r3, #8
    b8de:	d003      	beq.n	b8e8 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	{
		result =  LORAWAN_INVALID_PARAMETER;
    b8e0:	2317      	movs	r3, #23
    b8e2:	18fb      	adds	r3, r7, r3
    b8e4:	220a      	movs	r2, #10
    b8e6:	701a      	strb	r2, [r3, #0]
	}
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    b8e8:	4a1d      	ldr	r2, [pc, #116]	; (b960 <LORAREG_GetAttr_MaxPayloadT3+0xb4>)
    b8ea:	23c4      	movs	r3, #196	; 0xc4
    b8ec:	33ff      	adds	r3, #255	; 0xff
    b8ee:	5cd3      	ldrb	r3, [r2, r3]
    b8f0:	2201      	movs	r2, #1
    b8f2:	4013      	ands	r3, r2
    b8f4:	b2db      	uxtb	r3, r3
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d014      	beq.n	b924 <LORAREG_GetAttr_MaxPayloadT3+0x78>
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    b8fa:	4b19      	ldr	r3, [pc, #100]	; (b960 <LORAREG_GetAttr_MaxPayloadT3+0xb4>)
    b8fc:	781a      	ldrb	r2, [r3, #0]
    b8fe:	7859      	ldrb	r1, [r3, #1]
    b900:	0209      	lsls	r1, r1, #8
    b902:	430a      	orrs	r2, r1
    b904:	7899      	ldrb	r1, [r3, #2]
    b906:	0409      	lsls	r1, r1, #16
    b908:	430a      	orrs	r2, r1
    b90a:	78db      	ldrb	r3, [r3, #3]
    b90c:	061b      	lsls	r3, r3, #24
    b90e:	4313      	orrs	r3, r2
    b910:	001a      	movs	r2, r3
    b912:	2316      	movs	r3, #22
    b914:	18fb      	adds	r3, r7, r3
    b916:	781b      	ldrb	r3, [r3, #0]
    b918:	00db      	lsls	r3, r3, #3
    b91a:	18d3      	adds	r3, r2, r3
    b91c:	78da      	ldrb	r2, [r3, #3]
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	701a      	strb	r2, [r3, #0]
    b922:	e013      	b.n	b94c <LORAREG_GetAttr_MaxPayloadT3+0xa0>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    b924:	4b0e      	ldr	r3, [pc, #56]	; (b960 <LORAREG_GetAttr_MaxPayloadT3+0xb4>)
    b926:	781a      	ldrb	r2, [r3, #0]
    b928:	7859      	ldrb	r1, [r3, #1]
    b92a:	0209      	lsls	r1, r1, #8
    b92c:	430a      	orrs	r2, r1
    b92e:	7899      	ldrb	r1, [r3, #2]
    b930:	0409      	lsls	r1, r1, #16
    b932:	430a      	orrs	r2, r1
    b934:	78db      	ldrb	r3, [r3, #3]
    b936:	061b      	lsls	r3, r3, #24
    b938:	4313      	orrs	r3, r2
    b93a:	001a      	movs	r2, r3
    b93c:	2316      	movs	r3, #22
    b93e:	18fb      	adds	r3, r7, r3
    b940:	781b      	ldrb	r3, [r3, #0]
    b942:	00db      	lsls	r3, r3, #3
    b944:	18d3      	adds	r3, r2, r3
    b946:	789a      	ldrb	r2, [r3, #2]
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	701a      	strb	r2, [r3, #0]
	}
	return result;
    b94c:	2317      	movs	r3, #23
    b94e:	18fb      	adds	r3, r7, r3
    b950:	781b      	ldrb	r3, [r3, #0]
}
    b952:	0018      	movs	r0, r3
    b954:	46bd      	mov	sp, r7
    b956:	b006      	add	sp, #24
    b958:	bd80      	pop	{r7, pc}
    b95a:	46c0      	nop			; (mov r8, r8)
    b95c:	0000fbb5 	.word	0x0000fbb5
    b960:	200014a8 	.word	0x200014a8

0000b964 <LORAREG_GetAttr_SpreadFactorT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_SpreadFactorT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b964:	b580      	push	{r7, lr}
    b966:	b086      	sub	sp, #24
    b968:	af00      	add	r7, sp, #0
    b96a:	60b9      	str	r1, [r7, #8]
    b96c:	607a      	str	r2, [r7, #4]
    b96e:	230f      	movs	r3, #15
    b970:	18fb      	adds	r3, r7, r3
    b972:	1c02      	adds	r2, r0, #0
    b974:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b976:	2317      	movs	r3, #23
    b978:	18fb      	adds	r3, r7, r3
    b97a:	2208      	movs	r2, #8
    b97c:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    b97e:	2316      	movs	r3, #22
    b980:	18fb      	adds	r3, r7, r3
    b982:	68ba      	ldr	r2, [r7, #8]
    b984:	7812      	ldrb	r2, [r2, #0]
    b986:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    b988:	68bb      	ldr	r3, [r7, #8]
    b98a:	0019      	movs	r1, r3
    b98c:	2010      	movs	r0, #16
    b98e:	4b16      	ldr	r3, [pc, #88]	; (b9e8 <LORAREG_GetAttr_SpreadFactorT1+0x84>)
    b990:	4798      	blx	r3
    b992:	0003      	movs	r3, r0
    b994:	2b08      	cmp	r3, #8
    b996:	d00c      	beq.n	b9b2 <LORAREG_GetAttr_SpreadFactorT1+0x4e>
    b998:	68bb      	ldr	r3, [r7, #8]
    b99a:	0019      	movs	r1, r3
    b99c:	200f      	movs	r0, #15
    b99e:	4b13      	ldr	r3, [pc, #76]	; (b9ec <LORAREG_GetAttr_SpreadFactorT1+0x88>)
    b9a0:	4798      	blx	r3
    b9a2:	0003      	movs	r3, r0
    b9a4:	2b08      	cmp	r3, #8
    b9a6:	d004      	beq.n	b9b2 <LORAREG_GetAttr_SpreadFactorT1+0x4e>
	{
		result =  LORAWAN_INVALID_PARAMETER;
    b9a8:	2317      	movs	r3, #23
    b9aa:	18fb      	adds	r3, r7, r3
    b9ac:	220a      	movs	r2, #10
    b9ae:	701a      	strb	r2, [r3, #0]
    b9b0:	e013      	b.n	b9da <LORAREG_GetAttr_SpreadFactorT1+0x76>
	}
    else
	{
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    b9b2:	4b0f      	ldr	r3, [pc, #60]	; (b9f0 <LORAREG_GetAttr_SpreadFactorT1+0x8c>)
    b9b4:	781a      	ldrb	r2, [r3, #0]
    b9b6:	7859      	ldrb	r1, [r3, #1]
    b9b8:	0209      	lsls	r1, r1, #8
    b9ba:	430a      	orrs	r2, r1
    b9bc:	7899      	ldrb	r1, [r3, #2]
    b9be:	0409      	lsls	r1, r1, #16
    b9c0:	430a      	orrs	r2, r1
    b9c2:	78db      	ldrb	r3, [r3, #3]
    b9c4:	061b      	lsls	r3, r3, #24
    b9c6:	4313      	orrs	r3, r2
    b9c8:	001a      	movs	r2, r3
    b9ca:	2316      	movs	r3, #22
    b9cc:	18fb      	adds	r3, r7, r3
    b9ce:	781b      	ldrb	r3, [r3, #0]
    b9d0:	00db      	lsls	r3, r3, #3
    b9d2:	18d3      	adds	r3, r2, r3
    b9d4:	795a      	ldrb	r2, [r3, #5]
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	701a      	strb	r2, [r3, #0]
	}
	return result;
    b9da:	2317      	movs	r3, #23
    b9dc:	18fb      	adds	r3, r7, r3
    b9de:	781b      	ldrb	r3, [r3, #0]
}
    b9e0:	0018      	movs	r0, r3
    b9e2:	46bd      	mov	sp, r7
    b9e4:	b006      	add	sp, #24
    b9e6:	bd80      	pop	{r7, pc}
    b9e8:	0000d735 	.word	0x0000d735
    b9ec:	0000d7ed 	.word	0x0000d7ed
    b9f0:	200014a8 	.word	0x200014a8

0000b9f4 <LORAREG_GetAttr_SpreadFactorT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_SpreadFactorT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    b9f4:	b580      	push	{r7, lr}
    b9f6:	b086      	sub	sp, #24
    b9f8:	af00      	add	r7, sp, #0
    b9fa:	60b9      	str	r1, [r7, #8]
    b9fc:	607a      	str	r2, [r7, #4]
    b9fe:	230f      	movs	r3, #15
    ba00:	18fb      	adds	r3, r7, r3
    ba02:	1c02      	adds	r2, r0, #0
    ba04:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ba06:	2317      	movs	r3, #23
    ba08:	18fb      	adds	r3, r7, r3
    ba0a:	2208      	movs	r2, #8
    ba0c:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	
	dataRate = *(uint8_t *)attrInput;
    ba0e:	2316      	movs	r3, #22
    ba10:	18fb      	adds	r3, r7, r3
    ba12:	68ba      	ldr	r2, [r7, #8]
    ba14:	7812      	ldrb	r2, [r2, #0]
    ba16:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    ba18:	68bb      	ldr	r3, [r7, #8]
    ba1a:	0019      	movs	r1, r3
    ba1c:	200f      	movs	r0, #15
    ba1e:	4b12      	ldr	r3, [pc, #72]	; (ba68 <LORAREG_GetAttr_SpreadFactorT2+0x74>)
    ba20:	4798      	blx	r3
    ba22:	0003      	movs	r3, r0
    ba24:	2b08      	cmp	r3, #8
    ba26:	d004      	beq.n	ba32 <LORAREG_GetAttr_SpreadFactorT2+0x3e>
	{
		result =  LORAWAN_INVALID_PARAMETER;
    ba28:	2317      	movs	r3, #23
    ba2a:	18fb      	adds	r3, r7, r3
    ba2c:	220a      	movs	r2, #10
    ba2e:	701a      	strb	r2, [r3, #0]
    ba30:	e013      	b.n	ba5a <LORAREG_GetAttr_SpreadFactorT2+0x66>
	}
	else
	{
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    ba32:	4b0e      	ldr	r3, [pc, #56]	; (ba6c <LORAREG_GetAttr_SpreadFactorT2+0x78>)
    ba34:	781a      	ldrb	r2, [r3, #0]
    ba36:	7859      	ldrb	r1, [r3, #1]
    ba38:	0209      	lsls	r1, r1, #8
    ba3a:	430a      	orrs	r2, r1
    ba3c:	7899      	ldrb	r1, [r3, #2]
    ba3e:	0409      	lsls	r1, r1, #16
    ba40:	430a      	orrs	r2, r1
    ba42:	78db      	ldrb	r3, [r3, #3]
    ba44:	061b      	lsls	r3, r3, #24
    ba46:	4313      	orrs	r3, r2
    ba48:	001a      	movs	r2, r3
    ba4a:	2316      	movs	r3, #22
    ba4c:	18fb      	adds	r3, r7, r3
    ba4e:	781b      	ldrb	r3, [r3, #0]
    ba50:	00db      	lsls	r3, r3, #3
    ba52:	18d3      	adds	r3, r2, r3
    ba54:	795a      	ldrb	r2, [r3, #5]
    ba56:	687b      	ldr	r3, [r7, #4]
    ba58:	701a      	strb	r2, [r3, #0]
	}
	return result;
    ba5a:	2317      	movs	r3, #23
    ba5c:	18fb      	adds	r3, r7, r3
    ba5e:	781b      	ldrb	r3, [r3, #0]
}
    ba60:	0018      	movs	r0, r3
    ba62:	46bd      	mov	sp, r7
    ba64:	b006      	add	sp, #24
    ba66:	bd80      	pop	{r7, pc}
    ba68:	0000fbb5 	.word	0x0000fbb5
    ba6c:	200014a8 	.word	0x200014a8

0000ba70 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    ba70:	b580      	push	{r7, lr}
    ba72:	b084      	sub	sp, #16
    ba74:	af00      	add	r7, sp, #0
    ba76:	60b9      	str	r1, [r7, #8]
    ba78:	607a      	str	r2, [r7, #4]
    ba7a:	230f      	movs	r3, #15
    ba7c:	18fb      	adds	r3, r7, r3
    ba7e:	1c02      	adds	r2, r0, #0
    ba80:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    ba82:	4b05      	ldr	r3, [pc, #20]	; (ba98 <LORAREG_GetAttr_MaxChannel+0x28>)
    ba84:	222a      	movs	r2, #42	; 0x2a
    ba86:	569b      	ldrsb	r3, [r3, r2]
    ba88:	b2da      	uxtb	r2, r3
    ba8a:	687b      	ldr	r3, [r7, #4]
    ba8c:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    ba8e:	2308      	movs	r3, #8
}
    ba90:	0018      	movs	r0, r3
    ba92:	46bd      	mov	sp, r7
    ba94:	b004      	add	sp, #16
    ba96:	bd80      	pop	{r7, pc}
    ba98:	200014a8 	.word	0x200014a8

0000ba9c <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    ba9c:	b580      	push	{r7, lr}
    ba9e:	b086      	sub	sp, #24
    baa0:	af00      	add	r7, sp, #0
    baa2:	60b9      	str	r1, [r7, #8]
    baa4:	607a      	str	r2, [r7, #4]
    baa6:	230f      	movs	r3, #15
    baa8:	18fb      	adds	r3, r7, r3
    baaa:	1c02      	adds	r2, r0, #0
    baac:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    baae:	2317      	movs	r3, #23
    bab0:	18fb      	adds	r3, r7, r3
    bab2:	2208      	movs	r2, #8
    bab4:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    bab6:	4b0a      	ldr	r3, [pc, #40]	; (bae0 <LORAREG_GetAttr_MinNewChIndex+0x44>)
    bab8:	2221      	movs	r2, #33	; 0x21
    baba:	5c9a      	ldrb	r2, [r3, r2]
    babc:	687b      	ldr	r3, [r7, #4]
    babe:	701a      	strb	r2, [r3, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    bac0:	4b07      	ldr	r3, [pc, #28]	; (bae0 <LORAREG_GetAttr_MinNewChIndex+0x44>)
    bac2:	2221      	movs	r2, #33	; 0x21
    bac4:	5c9b      	ldrb	r3, [r3, r2]
    bac6:	2bff      	cmp	r3, #255	; 0xff
    bac8:	d103      	bne.n	bad2 <LORAREG_GetAttr_MinNewChIndex+0x36>
	{
		result = LORAWAN_INVALID_PARAMETER;
    baca:	2317      	movs	r3, #23
    bacc:	18fb      	adds	r3, r7, r3
    bace:	220a      	movs	r2, #10
    bad0:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
    bad2:	2317      	movs	r3, #23
    bad4:	18fb      	adds	r3, r7, r3
    bad6:	781b      	ldrb	r3, [r3, #0]
}
    bad8:	0018      	movs	r0, r3
    bada:	46bd      	mov	sp, r7
    badc:	b006      	add	sp, #24
    bade:	bd80      	pop	{r7, pc}
    bae0:	200014a8 	.word	0x200014a8

0000bae4 <LORAREG_GetAttr_ModulationAttrT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_ModulationAttrT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bae4:	b580      	push	{r7, lr}
    bae6:	b086      	sub	sp, #24
    bae8:	af00      	add	r7, sp, #0
    baea:	60b9      	str	r1, [r7, #8]
    baec:	607a      	str	r2, [r7, #4]
    baee:	230f      	movs	r3, #15
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	1c02      	adds	r2, r0, #0
    baf4:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    baf6:	2317      	movs	r3, #23
    baf8:	18fb      	adds	r3, r7, r3
    bafa:	2208      	movs	r2, #8
    bafc:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    bafe:	2316      	movs	r3, #22
    bb00:	18fb      	adds	r3, r7, r3
    bb02:	68ba      	ldr	r2, [r7, #8]
    bb04:	7812      	ldrb	r2, [r2, #0]
    bb06:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    bb08:	68bb      	ldr	r3, [r7, #8]
    bb0a:	0019      	movs	r1, r3
    bb0c:	2010      	movs	r0, #16
    bb0e:	4b16      	ldr	r3, [pc, #88]	; (bb68 <LORAREG_GetAttr_ModulationAttrT1+0x84>)
    bb10:	4798      	blx	r3
    bb12:	0003      	movs	r3, r0
    bb14:	2b08      	cmp	r3, #8
    bb16:	d00c      	beq.n	bb32 <LORAREG_GetAttr_ModulationAttrT1+0x4e>
    bb18:	68bb      	ldr	r3, [r7, #8]
    bb1a:	0019      	movs	r1, r3
    bb1c:	200f      	movs	r0, #15
    bb1e:	4b13      	ldr	r3, [pc, #76]	; (bb6c <LORAREG_GetAttr_ModulationAttrT1+0x88>)
    bb20:	4798      	blx	r3
    bb22:	0003      	movs	r3, r0
    bb24:	2b08      	cmp	r3, #8
    bb26:	d004      	beq.n	bb32 <LORAREG_GetAttr_ModulationAttrT1+0x4e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    bb28:	2317      	movs	r3, #23
    bb2a:	18fb      	adds	r3, r7, r3
    bb2c:	220a      	movs	r2, #10
    bb2e:	701a      	strb	r2, [r3, #0]
    bb30:	e013      	b.n	bb5a <LORAREG_GetAttr_ModulationAttrT1+0x76>
	}
	else
	{
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    bb32:	4b0f      	ldr	r3, [pc, #60]	; (bb70 <LORAREG_GetAttr_ModulationAttrT1+0x8c>)
    bb34:	781a      	ldrb	r2, [r3, #0]
    bb36:	7859      	ldrb	r1, [r3, #1]
    bb38:	0209      	lsls	r1, r1, #8
    bb3a:	430a      	orrs	r2, r1
    bb3c:	7899      	ldrb	r1, [r3, #2]
    bb3e:	0409      	lsls	r1, r1, #16
    bb40:	430a      	orrs	r2, r1
    bb42:	78db      	ldrb	r3, [r3, #3]
    bb44:	061b      	lsls	r3, r3, #24
    bb46:	4313      	orrs	r3, r2
    bb48:	001a      	movs	r2, r3
    bb4a:	2316      	movs	r3, #22
    bb4c:	18fb      	adds	r3, r7, r3
    bb4e:	781b      	ldrb	r3, [r3, #0]
    bb50:	00db      	lsls	r3, r3, #3
    bb52:	18d3      	adds	r3, r2, r3
    bb54:	79da      	ldrb	r2, [r3, #7]
    bb56:	687b      	ldr	r3, [r7, #4]
    bb58:	701a      	strb	r2, [r3, #0]
	}

	return result;
    bb5a:	2317      	movs	r3, #23
    bb5c:	18fb      	adds	r3, r7, r3
    bb5e:	781b      	ldrb	r3, [r3, #0]
}
    bb60:	0018      	movs	r0, r3
    bb62:	46bd      	mov	sp, r7
    bb64:	b006      	add	sp, #24
    bb66:	bd80      	pop	{r7, pc}
    bb68:	0000d735 	.word	0x0000d735
    bb6c:	0000d7ed 	.word	0x0000d7ed
    bb70:	200014a8 	.word	0x200014a8

0000bb74 <LORAREG_GetAttr_ModulationAttrT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_ModulationAttrT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bb74:	b580      	push	{r7, lr}
    bb76:	b086      	sub	sp, #24
    bb78:	af00      	add	r7, sp, #0
    bb7a:	60b9      	str	r1, [r7, #8]
    bb7c:	607a      	str	r2, [r7, #4]
    bb7e:	230f      	movs	r3, #15
    bb80:	18fb      	adds	r3, r7, r3
    bb82:	1c02      	adds	r2, r0, #0
    bb84:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bb86:	2317      	movs	r3, #23
    bb88:	18fb      	adds	r3, r7, r3
    bb8a:	2208      	movs	r2, #8
    bb8c:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    bb8e:	2316      	movs	r3, #22
    bb90:	18fb      	adds	r3, r7, r3
    bb92:	68ba      	ldr	r2, [r7, #8]
    bb94:	7812      	ldrb	r2, [r2, #0]
    bb96:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    bb98:	68bb      	ldr	r3, [r7, #8]
    bb9a:	0019      	movs	r1, r3
    bb9c:	200f      	movs	r0, #15
    bb9e:	4b12      	ldr	r3, [pc, #72]	; (bbe8 <LORAREG_GetAttr_ModulationAttrT2+0x74>)
    bba0:	4798      	blx	r3
    bba2:	0003      	movs	r3, r0
    bba4:	2b08      	cmp	r3, #8
    bba6:	d004      	beq.n	bbb2 <LORAREG_GetAttr_ModulationAttrT2+0x3e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    bba8:	2317      	movs	r3, #23
    bbaa:	18fb      	adds	r3, r7, r3
    bbac:	220a      	movs	r2, #10
    bbae:	701a      	strb	r2, [r3, #0]
    bbb0:	e013      	b.n	bbda <LORAREG_GetAttr_ModulationAttrT2+0x66>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    bbb2:	4b0e      	ldr	r3, [pc, #56]	; (bbec <LORAREG_GetAttr_ModulationAttrT2+0x78>)
    bbb4:	781a      	ldrb	r2, [r3, #0]
    bbb6:	7859      	ldrb	r1, [r3, #1]
    bbb8:	0209      	lsls	r1, r1, #8
    bbba:	430a      	orrs	r2, r1
    bbbc:	7899      	ldrb	r1, [r3, #2]
    bbbe:	0409      	lsls	r1, r1, #16
    bbc0:	430a      	orrs	r2, r1
    bbc2:	78db      	ldrb	r3, [r3, #3]
    bbc4:	061b      	lsls	r3, r3, #24
    bbc6:	4313      	orrs	r3, r2
    bbc8:	001a      	movs	r2, r3
    bbca:	2316      	movs	r3, #22
    bbcc:	18fb      	adds	r3, r7, r3
    bbce:	781b      	ldrb	r3, [r3, #0]
    bbd0:	00db      	lsls	r3, r3, #3
    bbd2:	18d3      	adds	r3, r2, r3
    bbd4:	79da      	ldrb	r2, [r3, #7]
    bbd6:	687b      	ldr	r3, [r7, #4]
    bbd8:	701a      	strb	r2, [r3, #0]
	}

	return result;
    bbda:	2317      	movs	r3, #23
    bbdc:	18fb      	adds	r3, r7, r3
    bbde:	781b      	ldrb	r3, [r3, #0]
}
    bbe0:	0018      	movs	r0, r3
    bbe2:	46bd      	mov	sp, r7
    bbe4:	b006      	add	sp, #24
    bbe6:	bd80      	pop	{r7, pc}
    bbe8:	0000fbb5 	.word	0x0000fbb5
    bbec:	200014a8 	.word	0x200014a8

0000bbf0 <LORAREG_GetAttr_BandwidthAttrT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_BandwidthAttrT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bbf0:	b580      	push	{r7, lr}
    bbf2:	b086      	sub	sp, #24
    bbf4:	af00      	add	r7, sp, #0
    bbf6:	60b9      	str	r1, [r7, #8]
    bbf8:	607a      	str	r2, [r7, #4]
    bbfa:	230f      	movs	r3, #15
    bbfc:	18fb      	adds	r3, r7, r3
    bbfe:	1c02      	adds	r2, r0, #0
    bc00:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bc02:	2317      	movs	r3, #23
    bc04:	18fb      	adds	r3, r7, r3
    bc06:	2208      	movs	r2, #8
    bc08:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    bc0a:	2316      	movs	r3, #22
    bc0c:	18fb      	adds	r3, r7, r3
    bc0e:	68ba      	ldr	r2, [r7, #8]
    bc10:	7812      	ldrb	r2, [r2, #0]
    bc12:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    bc14:	68bb      	ldr	r3, [r7, #8]
    bc16:	0019      	movs	r1, r3
    bc18:	2010      	movs	r0, #16
    bc1a:	4b16      	ldr	r3, [pc, #88]	; (bc74 <LORAREG_GetAttr_BandwidthAttrT1+0x84>)
    bc1c:	4798      	blx	r3
    bc1e:	0003      	movs	r3, r0
    bc20:	2b08      	cmp	r3, #8
    bc22:	d00c      	beq.n	bc3e <LORAREG_GetAttr_BandwidthAttrT1+0x4e>
    bc24:	68bb      	ldr	r3, [r7, #8]
    bc26:	0019      	movs	r1, r3
    bc28:	200f      	movs	r0, #15
    bc2a:	4b13      	ldr	r3, [pc, #76]	; (bc78 <LORAREG_GetAttr_BandwidthAttrT1+0x88>)
    bc2c:	4798      	blx	r3
    bc2e:	0003      	movs	r3, r0
    bc30:	2b08      	cmp	r3, #8
    bc32:	d004      	beq.n	bc3e <LORAREG_GetAttr_BandwidthAttrT1+0x4e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    bc34:	2317      	movs	r3, #23
    bc36:	18fb      	adds	r3, r7, r3
    bc38:	220a      	movs	r2, #10
    bc3a:	701a      	strb	r2, [r3, #0]
    bc3c:	e013      	b.n	bc66 <LORAREG_GetAttr_BandwidthAttrT1+0x76>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    bc3e:	4b0f      	ldr	r3, [pc, #60]	; (bc7c <LORAREG_GetAttr_BandwidthAttrT1+0x8c>)
    bc40:	781a      	ldrb	r2, [r3, #0]
    bc42:	7859      	ldrb	r1, [r3, #1]
    bc44:	0209      	lsls	r1, r1, #8
    bc46:	430a      	orrs	r2, r1
    bc48:	7899      	ldrb	r1, [r3, #2]
    bc4a:	0409      	lsls	r1, r1, #16
    bc4c:	430a      	orrs	r2, r1
    bc4e:	78db      	ldrb	r3, [r3, #3]
    bc50:	061b      	lsls	r3, r3, #24
    bc52:	4313      	orrs	r3, r2
    bc54:	001a      	movs	r2, r3
    bc56:	2316      	movs	r3, #22
    bc58:	18fb      	adds	r3, r7, r3
    bc5a:	781b      	ldrb	r3, [r3, #0]
    bc5c:	00db      	lsls	r3, r3, #3
    bc5e:	18d3      	adds	r3, r2, r3
    bc60:	799a      	ldrb	r2, [r3, #6]
    bc62:	687b      	ldr	r3, [r7, #4]
    bc64:	701a      	strb	r2, [r3, #0]
	}
	return result;
    bc66:	2317      	movs	r3, #23
    bc68:	18fb      	adds	r3, r7, r3
    bc6a:	781b      	ldrb	r3, [r3, #0]
}
    bc6c:	0018      	movs	r0, r3
    bc6e:	46bd      	mov	sp, r7
    bc70:	b006      	add	sp, #24
    bc72:	bd80      	pop	{r7, pc}
    bc74:	0000d735 	.word	0x0000d735
    bc78:	0000d7ed 	.word	0x0000d7ed
    bc7c:	200014a8 	.word	0x200014a8

0000bc80 <LORAREG_GetAttr_BandwidthAttrT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_BandwidthAttrT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bc80:	b580      	push	{r7, lr}
    bc82:	b086      	sub	sp, #24
    bc84:	af00      	add	r7, sp, #0
    bc86:	60b9      	str	r1, [r7, #8]
    bc88:	607a      	str	r2, [r7, #4]
    bc8a:	230f      	movs	r3, #15
    bc8c:	18fb      	adds	r3, r7, r3
    bc8e:	1c02      	adds	r2, r0, #0
    bc90:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bc92:	2317      	movs	r3, #23
    bc94:	18fb      	adds	r3, r7, r3
    bc96:	2208      	movs	r2, #8
    bc98:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    bc9a:	2316      	movs	r3, #22
    bc9c:	18fb      	adds	r3, r7, r3
    bc9e:	68ba      	ldr	r2, [r7, #8]
    bca0:	7812      	ldrb	r2, [r2, #0]
    bca2:	701a      	strb	r2, [r3, #0]
	if((ValidateDataRate(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    bca4:	68bb      	ldr	r3, [r7, #8]
    bca6:	0019      	movs	r1, r3
    bca8:	200f      	movs	r0, #15
    bcaa:	4b12      	ldr	r3, [pc, #72]	; (bcf4 <LORAREG_GetAttr_BandwidthAttrT2+0x74>)
    bcac:	4798      	blx	r3
    bcae:	0003      	movs	r3, r0
    bcb0:	2b08      	cmp	r3, #8
    bcb2:	d004      	beq.n	bcbe <LORAREG_GetAttr_BandwidthAttrT2+0x3e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    bcb4:	2317      	movs	r3, #23
    bcb6:	18fb      	adds	r3, r7, r3
    bcb8:	220a      	movs	r2, #10
    bcba:	701a      	strb	r2, [r3, #0]
    bcbc:	e013      	b.n	bce6 <LORAREG_GetAttr_BandwidthAttrT2+0x66>
	}
	else
	{
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    bcbe:	4b0e      	ldr	r3, [pc, #56]	; (bcf8 <LORAREG_GetAttr_BandwidthAttrT2+0x78>)
    bcc0:	781a      	ldrb	r2, [r3, #0]
    bcc2:	7859      	ldrb	r1, [r3, #1]
    bcc4:	0209      	lsls	r1, r1, #8
    bcc6:	430a      	orrs	r2, r1
    bcc8:	7899      	ldrb	r1, [r3, #2]
    bcca:	0409      	lsls	r1, r1, #16
    bccc:	430a      	orrs	r2, r1
    bcce:	78db      	ldrb	r3, [r3, #3]
    bcd0:	061b      	lsls	r3, r3, #24
    bcd2:	4313      	orrs	r3, r2
    bcd4:	001a      	movs	r2, r3
    bcd6:	2316      	movs	r3, #22
    bcd8:	18fb      	adds	r3, r7, r3
    bcda:	781b      	ldrb	r3, [r3, #0]
    bcdc:	00db      	lsls	r3, r3, #3
    bcde:	18d3      	adds	r3, r2, r3
    bce0:	799a      	ldrb	r2, [r3, #6]
    bce2:	687b      	ldr	r3, [r7, #4]
    bce4:	701a      	strb	r2, [r3, #0]
	}
	return result;
    bce6:	2317      	movs	r3, #23
    bce8:	18fb      	adds	r3, r7, r3
    bcea:	781b      	ldrb	r3, [r3, #0]
}
    bcec:	0018      	movs	r0, r3
    bcee:	46bd      	mov	sp, r7
    bcf0:	b006      	add	sp, #24
    bcf2:	bd80      	pop	{r7, pc}
    bcf4:	0000fbb5 	.word	0x0000fbb5
    bcf8:	200014a8 	.word	0x200014a8

0000bcfc <LORAREG_GetAttr_DefRx1DataRate>:
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bcfc:	b580      	push	{r7, lr}
    bcfe:	b084      	sub	sp, #16
    bd00:	af00      	add	r7, sp, #0
    bd02:	60b9      	str	r1, [r7, #8]
    bd04:	607a      	str	r2, [r7, #4]
    bd06:	230f      	movs	r3, #15
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	1c02      	adds	r2, r0, #0
    bd0c:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    bd0e:	4b05      	ldr	r3, [pc, #20]	; (bd24 <LORAREG_GetAttr_DefRx1DataRate+0x28>)
    bd10:	2222      	movs	r2, #34	; 0x22
    bd12:	5c9a      	ldrb	r2, [r3, r2]
    bd14:	687b      	ldr	r3, [r7, #4]
    bd16:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    bd18:	2308      	movs	r3, #8
}
    bd1a:	0018      	movs	r0, r3
    bd1c:	46bd      	mov	sp, r7
    bd1e:	b004      	add	sp, #16
    bd20:	bd80      	pop	{r7, pc}
    bd22:	46c0      	nop			; (mov r8, r8)
    bd24:	200014a8 	.word	0x200014a8

0000bd28 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	b084      	sub	sp, #16
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	60b9      	str	r1, [r7, #8]
    bd30:	607a      	str	r2, [r7, #4]
    bd32:	230f      	movs	r3, #15
    bd34:	18fb      	adds	r3, r7, r3
    bd36:	1c02      	adds	r2, r0, #0
    bd38:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    bd3a:	4b05      	ldr	r3, [pc, #20]	; (bd50 <LORAREG_GetAttr_DefRx2DataRate+0x28>)
    bd3c:	2223      	movs	r2, #35	; 0x23
    bd3e:	5c9a      	ldrb	r2, [r3, r2]
    bd40:	687b      	ldr	r3, [r7, #4]
    bd42:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    bd44:	2308      	movs	r3, #8
}
    bd46:	0018      	movs	r0, r3
    bd48:	46bd      	mov	sp, r7
    bd4a:	b004      	add	sp, #16
    bd4c:	bd80      	pop	{r7, pc}
    bd4e:	46c0      	nop			; (mov r8, r8)
    bd50:	200014a8 	.word	0x200014a8

0000bd54 <LORAREG_GetAttr_DefRx2Freq>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2Freq(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bd54:	b580      	push	{r7, lr}
    bd56:	b084      	sub	sp, #16
    bd58:	af00      	add	r7, sp, #0
    bd5a:	60b9      	str	r1, [r7, #8]
    bd5c:	607a      	str	r2, [r7, #4]
    bd5e:	230f      	movs	r3, #15
    bd60:	18fb      	adds	r3, r7, r3
    bd62:	1c02      	adds	r2, r0, #0
    bd64:	701a      	strb	r2, [r3, #0]
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    bd66:	4905      	ldr	r1, [pc, #20]	; (bd7c <LORAREG_GetAttr_DefRx2Freq+0x28>)
    bd68:	687b      	ldr	r3, [r7, #4]
    bd6a:	2204      	movs	r2, #4
    bd6c:	0018      	movs	r0, r3
    bd6e:	4b04      	ldr	r3, [pc, #16]	; (bd80 <LORAREG_GetAttr_DefRx2Freq+0x2c>)
    bd70:	4798      	blx	r3
	//*(uint32_t *)attrOutput = DefRx2Freq;
	return LORAWAN_SUCCESS;
    bd72:	2308      	movs	r3, #8
}
    bd74:	0018      	movs	r0, r3
    bd76:	46bd      	mov	sp, r7
    bd78:	b004      	add	sp, #16
    bd7a:	bd80      	pop	{r7, pc}
    bd7c:	200014c4 	.word	0x200014c4
    bd80:	00024149 	.word	0x00024149

0000bd84 <LORAREG_GetAttr_RegFeatures>:

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bd84:	b580      	push	{r7, lr}
    bd86:	b084      	sub	sp, #16
    bd88:	af00      	add	r7, sp, #0
    bd8a:	60b9      	str	r1, [r7, #8]
    bd8c:	607a      	str	r2, [r7, #4]
    bd8e:	230f      	movs	r3, #15
    bd90:	18fb      	adds	r3, r7, r3
    bd92:	1c02      	adds	r2, r0, #0
    bd94:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    bd96:	4b05      	ldr	r3, [pc, #20]	; (bdac <LORAREG_GetAttr_RegFeatures+0x28>)
    bd98:	2220      	movs	r2, #32
    bd9a:	5c9b      	ldrb	r3, [r3, r2]
    bd9c:	001a      	movs	r2, r3
    bd9e:	687b      	ldr	r3, [r7, #4]
    bda0:	601a      	str	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    bda2:	2308      	movs	r3, #8
}
    bda4:	0018      	movs	r0, r3
    bda6:	46bd      	mov	sp, r7
    bda8:	b004      	add	sp, #16
    bdaa:	bd80      	pop	{r7, pc}
    bdac:	200014a8 	.word	0x200014a8

0000bdb0 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bdb0:	b580      	push	{r7, lr}
    bdb2:	b086      	sub	sp, #24
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	60b9      	str	r1, [r7, #8]
    bdb8:	607a      	str	r2, [r7, #4]
    bdba:	230f      	movs	r3, #15
    bdbc:	18fb      	adds	r3, r7, r3
    bdbe:	1c02      	adds	r2, r0, #0
    bdc0:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bdc2:	2317      	movs	r3, #23
    bdc4:	18fb      	adds	r3, r7, r3
    bdc6:	2208      	movs	r2, #8
    bdc8:	701a      	strb	r2, [r3, #0]
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    bdca:	68bb      	ldr	r3, [r7, #8]
    bdcc:	781a      	ldrb	r2, [r3, #0]
    bdce:	2314      	movs	r3, #20
    bdd0:	18fb      	adds	r3, r7, r3
    bdd2:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    bdd4:	2314      	movs	r3, #20
    bdd6:	18fb      	adds	r3, r7, r3
    bdd8:	2201      	movs	r2, #1
    bdda:	705a      	strb	r2, [r3, #1]
	channelId = *(uint8_t *)attrInput;
    bddc:	2316      	movs	r3, #22
    bdde:	18fb      	adds	r3, r7, r3
    bde0:	68ba      	ldr	r2, [r7, #8]
    bde2:	7812      	ldrb	r2, [r2, #0]
    bde4:	701a      	strb	r2, [r3, #0]
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    bde6:	4b16      	ldr	r3, [pc, #88]	; (be40 <LORAREG_GetAttr_DataRange+0x90>)
    bde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bdea:	2214      	movs	r2, #20
    bdec:	18ba      	adds	r2, r7, r2
    bdee:	0011      	movs	r1, r2
    bdf0:	2015      	movs	r0, #21
    bdf2:	4798      	blx	r3
    bdf4:	0003      	movs	r3, r0
    bdf6:	2b08      	cmp	r3, #8
    bdf8:	d114      	bne.n	be24 <LORAREG_GetAttr_DataRange+0x74>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    bdfa:	4b12      	ldr	r3, [pc, #72]	; (be44 <LORAREG_GetAttr_DataRange+0x94>)
    bdfc:	791a      	ldrb	r2, [r3, #4]
    bdfe:	7959      	ldrb	r1, [r3, #5]
    be00:	0209      	lsls	r1, r1, #8
    be02:	430a      	orrs	r2, r1
    be04:	7999      	ldrb	r1, [r3, #6]
    be06:	0409      	lsls	r1, r1, #16
    be08:	430a      	orrs	r2, r1
    be0a:	79db      	ldrb	r3, [r3, #7]
    be0c:	061b      	lsls	r3, r3, #24
    be0e:	4313      	orrs	r3, r2
    be10:	001a      	movs	r2, r3
    be12:	2316      	movs	r3, #22
    be14:	18fb      	adds	r3, r7, r3
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	005b      	lsls	r3, r3, #1
    be1a:	18d3      	adds	r3, r2, r3
    be1c:	785a      	ldrb	r2, [r3, #1]
    be1e:	687b      	ldr	r3, [r7, #4]
    be20:	701a      	strb	r2, [r3, #0]
    be22:	e006      	b.n	be32 <LORAREG_GetAttr_DataRange+0x82>
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    be24:	687b      	ldr	r3, [r7, #4]
    be26:	22ff      	movs	r2, #255	; 0xff
    be28:	701a      	strb	r2, [r3, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    be2a:	2317      	movs	r3, #23
    be2c:	18fb      	adds	r3, r7, r3
    be2e:	220a      	movs	r2, #10
    be30:	701a      	strb	r2, [r3, #0]
	}
	return result;
    be32:	2317      	movs	r3, #23
    be34:	18fb      	adds	r3, r7, r3
    be36:	781b      	ldrb	r3, [r3, #0]
}
    be38:	0018      	movs	r0, r3
    be3a:	46bd      	mov	sp, r7
    be3c:	b006      	add	sp, #24
    be3e:	bd80      	pop	{r7, pc}
    be40:	20000dc8 	.word	0x20000dc8
    be44:	200014a8 	.word	0x200014a8

0000be48 <LORAREG_GetAttr_MinMaxDr>:

static StackRetStatus_t LORAREG_GetAttr_MinMaxDr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    be48:	b580      	push	{r7, lr}
    be4a:	b086      	sub	sp, #24
    be4c:	af00      	add	r7, sp, #0
    be4e:	60b9      	str	r1, [r7, #8]
    be50:	607a      	str	r2, [r7, #4]
    be52:	230f      	movs	r3, #15
    be54:	18fb      	adds	r3, r7, r3
    be56:	1c02      	adds	r2, r0, #0
    be58:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    be5a:	2317      	movs	r3, #23
    be5c:	18fb      	adds	r3, r7, r3
    be5e:	2208      	movs	r2, #8
    be60:	701a      	strb	r2, [r3, #0]
	MinMaxDr_t minmaxDr;
	UpdateMinMaxChDataRate(&minmaxDr);
    be62:	2314      	movs	r3, #20
    be64:	18fb      	adds	r3, r7, r3
    be66:	0018      	movs	r0, r3
    be68:	4b08      	ldr	r3, [pc, #32]	; (be8c <LORAREG_GetAttr_MinMaxDr+0x44>)
    be6a:	4798      	blx	r3
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    be6c:	687a      	ldr	r2, [r7, #4]
    be6e:	2314      	movs	r3, #20
    be70:	18fb      	adds	r3, r7, r3
    be72:	0010      	movs	r0, r2
    be74:	0019      	movs	r1, r3
    be76:	2302      	movs	r3, #2
    be78:	001a      	movs	r2, r3
    be7a:	4b05      	ldr	r3, [pc, #20]	; (be90 <LORAREG_GetAttr_MinMaxDr+0x48>)
    be7c:	4798      	blx	r3
	return result;
    be7e:	2317      	movs	r3, #23
    be80:	18fb      	adds	r3, r7, r3
    be82:	781b      	ldrb	r3, [r3, #0]
}
    be84:	0018      	movs	r0, r3
    be86:	46bd      	mov	sp, r7
    be88:	b006      	add	sp, #24
    be8a:	bd80      	pop	{r7, pc}
    be8c:	0000d981 	.word	0x0000d981
    be90:	00024149 	.word	0x00024149

0000be94 <LORAREG_GetAttr_DRangeChBandT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DRangeChBandT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    be94:	b580      	push	{r7, lr}
    be96:	b088      	sub	sp, #32
    be98:	af00      	add	r7, sp, #0
    be9a:	60b9      	str	r1, [r7, #8]
    be9c:	607a      	str	r2, [r7, #4]
    be9e:	230f      	movs	r3, #15
    bea0:	18fb      	adds	r3, r7, r3
    bea2:	1c02      	adds	r2, r0, #0
    bea4:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bea6:	231f      	movs	r3, #31
    bea8:	18fb      	adds	r3, r7, r3
    beaa:	2208      	movs	r2, #8
    beac:	701a      	strb	r2, [r3, #0]
	BandDrReq_t bandDrReq;
	DataRange_t chBandDr;

	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    beae:	68b9      	ldr	r1, [r7, #8]
    beb0:	2318      	movs	r3, #24
    beb2:	18fb      	adds	r3, r7, r3
    beb4:	2204      	movs	r2, #4
    beb6:	0018      	movs	r0, r3
    beb8:	4b15      	ldr	r3, [pc, #84]	; (bf10 <LORAREG_GetAttr_DRangeChBandT1+0x7c>)
    beba:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    bebc:	2318      	movs	r3, #24
    bebe:	18fb      	adds	r3, r7, r3
    bec0:	0019      	movs	r1, r3
    bec2:	201b      	movs	r0, #27
    bec4:	4b13      	ldr	r3, [pc, #76]	; (bf14 <LORAREG_GetAttr_DRangeChBandT1+0x80>)
    bec6:	4798      	blx	r3
    bec8:	0003      	movs	r3, r0
    beca:	2b08      	cmp	r3, #8
    becc:	d004      	beq.n	bed8 <LORAREG_GetAttr_DRangeChBandT1+0x44>
	{
		result = LORAWAN_INVALID_PARAMETER;
    bece:	231f      	movs	r3, #31
    bed0:	18fb      	adds	r3, r7, r3
    bed2:	220a      	movs	r2, #10
    bed4:	701a      	strb	r2, [r3, #0]
    bed6:	e013      	b.n	bf00 <LORAREG_GetAttr_DRangeChBandT1+0x6c>
	}
	else
	{
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    bed8:	2318      	movs	r3, #24
    beda:	18fb      	adds	r3, r7, r3
    bedc:	781a      	ldrb	r2, [r3, #0]
    bede:	2318      	movs	r3, #24
    bee0:	18fb      	adds	r3, r7, r3
    bee2:	885b      	ldrh	r3, [r3, #2]
    bee4:	0019      	movs	r1, r3
    bee6:	0010      	movs	r0, r2
    bee8:	4b0b      	ldr	r3, [pc, #44]	; (bf18 <LORAREG_GetAttr_DRangeChBandT1+0x84>)
    beea:	4798      	blx	r3
    beec:	1c03      	adds	r3, r0, #0
    beee:	1c1a      	adds	r2, r3, #0
    bef0:	2314      	movs	r3, #20
    bef2:	18fb      	adds	r3, r7, r3
    bef4:	701a      	strb	r2, [r3, #0]
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    bef6:	2314      	movs	r3, #20
    bef8:	18fb      	adds	r3, r7, r3
    befa:	781a      	ldrb	r2, [r3, #0]
    befc:	687b      	ldr	r3, [r7, #4]
    befe:	701a      	strb	r2, [r3, #0]
	}
	return result;
    bf00:	231f      	movs	r3, #31
    bf02:	18fb      	adds	r3, r7, r3
    bf04:	781b      	ldrb	r3, [r3, #0]
}
    bf06:	0018      	movs	r0, r3
    bf08:	46bd      	mov	sp, r7
    bf0a:	b008      	add	sp, #32
    bf0c:	bd80      	pop	{r7, pc}
    bf0e:	46c0      	nop			; (mov r8, r8)
    bf10:	00024149 	.word	0x00024149
    bf14:	0000db55 	.word	0x0000db55
    bf18:	0000dca5 	.word	0x0000dca5

0000bf1c <LORAREG_GetAttr_DRangeChBandT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DRangeChBandT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bf1c:	b580      	push	{r7, lr}
    bf1e:	b088      	sub	sp, #32
    bf20:	af00      	add	r7, sp, #0
    bf22:	60b9      	str	r1, [r7, #8]
    bf24:	607a      	str	r2, [r7, #4]
    bf26:	230f      	movs	r3, #15
    bf28:	18fb      	adds	r3, r7, r3
    bf2a:	1c02      	adds	r2, r0, #0
    bf2c:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bf2e:	231f      	movs	r3, #31
    bf30:	18fb      	adds	r3, r7, r3
    bf32:	2208      	movs	r2, #8
    bf34:	701a      	strb	r2, [r3, #0]
	BandDrReq_t bandDrReq;
	DataRange_t chBandDr;

	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    bf36:	68b9      	ldr	r1, [r7, #8]
    bf38:	2318      	movs	r3, #24
    bf3a:	18fb      	adds	r3, r7, r3
    bf3c:	2204      	movs	r2, #4
    bf3e:	0018      	movs	r0, r3
    bf40:	4b0e      	ldr	r3, [pc, #56]	; (bf7c <LORAREG_GetAttr_DRangeChBandT2+0x60>)
    bf42:	4798      	blx	r3
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	else
	{*/
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    bf44:	2318      	movs	r3, #24
    bf46:	18fb      	adds	r3, r7, r3
    bf48:	781a      	ldrb	r2, [r3, #0]
    bf4a:	2318      	movs	r3, #24
    bf4c:	18fb      	adds	r3, r7, r3
    bf4e:	885b      	ldrh	r3, [r3, #2]
    bf50:	0019      	movs	r1, r3
    bf52:	0010      	movs	r0, r2
    bf54:	4b0a      	ldr	r3, [pc, #40]	; (bf80 <LORAREG_GetAttr_DRangeChBandT2+0x64>)
    bf56:	4798      	blx	r3
    bf58:	1c03      	adds	r3, r0, #0
    bf5a:	1c1a      	adds	r2, r3, #0
    bf5c:	2314      	movs	r3, #20
    bf5e:	18fb      	adds	r3, r7, r3
    bf60:	701a      	strb	r2, [r3, #0]
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    bf62:	2314      	movs	r3, #20
    bf64:	18fb      	adds	r3, r7, r3
    bf66:	781a      	ldrb	r2, [r3, #0]
    bf68:	687b      	ldr	r3, [r7, #4]
    bf6a:	701a      	strb	r2, [r3, #0]
	//}
	return result;
    bf6c:	231f      	movs	r3, #31
    bf6e:	18fb      	adds	r3, r7, r3
    bf70:	781b      	ldrb	r3, [r3, #0]
}
    bf72:	0018      	movs	r0, r3
    bf74:	46bd      	mov	sp, r7
    bf76:	b008      	add	sp, #32
    bf78:	bd80      	pop	{r7, pc}
    bf7a:	46c0      	nop			; (mov r8, r8)
    bf7c:	00024149 	.word	0x00024149
    bf80:	0000dfc5 	.word	0x0000dfc5

0000bf84 <LORAREG_GetAttr_Rx1WindowparamsType1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_Rx1WindowparamsType1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    bf84:	b580      	push	{r7, lr}
    bf86:	b088      	sub	sp, #32
    bf88:	af00      	add	r7, sp, #0
    bf8a:	60b9      	str	r1, [r7, #8]
    bf8c:	607a      	str	r2, [r7, #4]
    bf8e:	230f      	movs	r3, #15
    bf90:	18fb      	adds	r3, r7, r3
    bf92:	1c02      	adds	r2, r0, #0
    bf94:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bf96:	231f      	movs	r3, #31
    bf98:	18fb      	adds	r3, r7, r3
    bf9a:	2208      	movs	r2, #8
    bf9c:	701a      	strb	r2, [r3, #0]
	
	Rx1WindowParamsReq_t rx1WindowParamsReq;
			
	Rx1WindowParams_t rx1WindowParamsResp;

	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    bf9e:	231c      	movs	r3, #28
    bfa0:	18fa      	adds	r2, r7, r3
    bfa2:	68bb      	ldr	r3, [r7, #8]
    bfa4:	0010      	movs	r0, r2
    bfa6:	0019      	movs	r1, r3
    bfa8:	2303      	movs	r3, #3
    bfaa:	001a      	movs	r2, r3
    bfac:	4b0b      	ldr	r3, [pc, #44]	; (bfdc <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>)
    bfae:	4798      	blx	r3
			
	getRx1WindowparamsType1(&rx1WindowParamsReq,&rx1WindowParamsResp);
    bfb0:	2314      	movs	r3, #20
    bfb2:	18fa      	adds	r2, r7, r3
    bfb4:	231c      	movs	r3, #28
    bfb6:	18fb      	adds	r3, r7, r3
    bfb8:	0011      	movs	r1, r2
    bfba:	0018      	movs	r0, r3
    bfbc:	4b08      	ldr	r3, [pc, #32]	; (bfe0 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>)
    bfbe:	4798      	blx	r3

	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    bfc0:	2314      	movs	r3, #20
    bfc2:	18f9      	adds	r1, r7, r3
    bfc4:	687b      	ldr	r3, [r7, #4]
    bfc6:	2208      	movs	r2, #8
    bfc8:	0018      	movs	r0, r3
    bfca:	4b04      	ldr	r3, [pc, #16]	; (bfdc <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>)
    bfcc:	4798      	blx	r3
	
	return result;
    bfce:	231f      	movs	r3, #31
    bfd0:	18fb      	adds	r3, r7, r3
    bfd2:	781b      	ldrb	r3, [r3, #0]
}
    bfd4:	0018      	movs	r0, r3
    bfd6:	46bd      	mov	sp, r7
    bfd8:	b008      	add	sp, #32
    bfda:	bd80      	pop	{r7, pc}
    bfdc:	00024149 	.word	0x00024149
    bfe0:	0000e27d 	.word	0x0000e27d

0000bfe4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
#endif
static StackRetStatus_t LORAREG_GetAttr_JoinDutyCycleRemainingTime(LorawanRegionalAttributes_t attr,void *attrInput, void *attrOutput)
{
    bfe4:	b580      	push	{r7, lr}
    bfe6:	b086      	sub	sp, #24
    bfe8:	af00      	add	r7, sp, #0
    bfea:	60b9      	str	r1, [r7, #8]
    bfec:	607a      	str	r2, [r7, #4]
    bfee:	230f      	movs	r3, #15
    bff0:	18fb      	adds	r3, r7, r3
    bff2:	1c02      	adds	r2, r0, #0
    bff4:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    bff6:	2317      	movs	r3, #23
    bff8:	18fb      	adds	r3, r7, r3
    bffa:	2208      	movs	r2, #8
    bffc:	701a      	strb	r2, [r3, #0]
	
	uint32_t timeremaining =0;
    bffe:	2300      	movs	r3, #0
    c000:	613b      	str	r3, [r7, #16]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    c002:	4b26      	ldr	r3, [pc, #152]	; (c09c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xb8>)
    c004:	7d1a      	ldrb	r2, [r3, #20]
    c006:	7d59      	ldrb	r1, [r3, #21]
    c008:	0209      	lsls	r1, r1, #8
    c00a:	430a      	orrs	r2, r1
    c00c:	7d99      	ldrb	r1, [r3, #22]
    c00e:	0409      	lsls	r1, r1, #16
    c010:	430a      	orrs	r2, r1
    c012:	7ddb      	ldrb	r3, [r3, #23]
    c014:	061b      	lsls	r3, r3, #24
    c016:	4313      	orrs	r3, r2
    c018:	7a1b      	ldrb	r3, [r3, #8]
    c01a:	0018      	movs	r0, r3
    c01c:	4b20      	ldr	r3, [pc, #128]	; (c0a0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xbc>)
    c01e:	4798      	blx	r3
    c020:	1e03      	subs	r3, r0, #0
    c022:	d02d      	beq.n	c080 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>
	{
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    c024:	4b1d      	ldr	r3, [pc, #116]	; (c09c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xb8>)
    c026:	7d1a      	ldrb	r2, [r3, #20]
    c028:	7d59      	ldrb	r1, [r3, #21]
    c02a:	0209      	lsls	r1, r1, #8
    c02c:	430a      	orrs	r2, r1
    c02e:	7d99      	ldrb	r1, [r3, #22]
    c030:	0409      	lsls	r1, r1, #16
    c032:	430a      	orrs	r2, r1
    c034:	7ddb      	ldrb	r3, [r3, #23]
    c036:	061b      	lsls	r3, r3, #24
    c038:	4313      	orrs	r3, r2
    c03a:	7a1b      	ldrb	r3, [r3, #8]
    c03c:	0018      	movs	r0, r3
    c03e:	4b19      	ldr	r3, [pc, #100]	; (c0a4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xc0>)
    c040:	4798      	blx	r3
    c042:	4b19      	ldr	r3, [pc, #100]	; (c0a8 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xc4>)
    c044:	22fa      	movs	r2, #250	; 0xfa
    c046:	0091      	lsls	r1, r2, #2
    c048:	4798      	blx	r3
    c04a:	0003      	movs	r3, r0
    c04c:	613b      	str	r3, [r7, #16]
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    c04e:	4b13      	ldr	r3, [pc, #76]	; (c09c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xb8>)
    c050:	7d1a      	ldrb	r2, [r3, #20]
    c052:	7d59      	ldrb	r1, [r3, #21]
    c054:	0209      	lsls	r1, r1, #8
    c056:	430a      	orrs	r2, r1
    c058:	7d99      	ldrb	r1, [r3, #22]
    c05a:	0409      	lsls	r1, r1, #16
    c05c:	430a      	orrs	r2, r1
    c05e:	7ddb      	ldrb	r3, [r3, #23]
    c060:	061b      	lsls	r3, r3, #24
    c062:	4313      	orrs	r3, r2
    c064:	791a      	ldrb	r2, [r3, #4]
    c066:	7959      	ldrb	r1, [r3, #5]
    c068:	0209      	lsls	r1, r1, #8
    c06a:	430a      	orrs	r2, r1
    c06c:	7999      	ldrb	r1, [r3, #6]
    c06e:	0409      	lsls	r1, r1, #16
    c070:	430a      	orrs	r2, r1
    c072:	79db      	ldrb	r3, [r3, #7]
    c074:	061b      	lsls	r3, r3, #24
    c076:	4313      	orrs	r3, r2
    c078:	001a      	movs	r2, r3
    c07a:	693b      	ldr	r3, [r7, #16]
    c07c:	18d3      	adds	r3, r2, r3
    c07e:	613b      	str	r3, [r7, #16]
	}
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    c080:	2310      	movs	r3, #16
    c082:	18f9      	adds	r1, r7, r3
    c084:	687b      	ldr	r3, [r7, #4]
    c086:	2204      	movs	r2, #4
    c088:	0018      	movs	r0, r3
    c08a:	4b08      	ldr	r3, [pc, #32]	; (c0ac <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0xc8>)
    c08c:	4798      	blx	r3
	return result;
    c08e:	2317      	movs	r3, #23
    c090:	18fb      	adds	r3, r7, r3
    c092:	781b      	ldrb	r3, [r3, #0]
}
    c094:	0018      	movs	r0, r3
    c096:	46bd      	mov	sp, r7
    c098:	b006      	add	sp, #24
    c09a:	bd80      	pop	{r7, pc}
    c09c:	200014a8 	.word	0x200014a8
    c0a0:	00015a89 	.word	0x00015a89
    c0a4:	00015ab9 	.word	0x00015ab9
    c0a8:	00021069 	.word	0x00021069
    c0ac:	00024149 	.word	0x00024149

0000c0b0 <LORAREG_GetAttr_Rx1WindowparamsType2>:

#if (EU_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_Rx1WindowparamsType2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c0b0:	b580      	push	{r7, lr}
    c0b2:	b088      	sub	sp, #32
    c0b4:	af00      	add	r7, sp, #0
    c0b6:	60b9      	str	r1, [r7, #8]
    c0b8:	607a      	str	r2, [r7, #4]
    c0ba:	230f      	movs	r3, #15
    c0bc:	18fb      	adds	r3, r7, r3
    c0be:	1c02      	adds	r2, r0, #0
    c0c0:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c0c2:	231f      	movs	r3, #31
    c0c4:	18fb      	adds	r3, r7, r3
    c0c6:	2208      	movs	r2, #8
    c0c8:	701a      	strb	r2, [r3, #0]
	
	Rx1WindowParamsReq_t rx1WindowParamsReq;
	
	Rx1WindowParams_t rx1WindowParamsResp;

	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    c0ca:	231c      	movs	r3, #28
    c0cc:	18fa      	adds	r2, r7, r3
    c0ce:	68bb      	ldr	r3, [r7, #8]
    c0d0:	0010      	movs	r0, r2
    c0d2:	0019      	movs	r1, r3
    c0d4:	2303      	movs	r3, #3
    c0d6:	001a      	movs	r2, r3
    c0d8:	4b0b      	ldr	r3, [pc, #44]	; (c108 <LORAREG_GetAttr_Rx1WindowparamsType2+0x58>)
    c0da:	4798      	blx	r3
	
	getRx1WindowparamsType2(&rx1WindowParamsReq,&rx1WindowParamsResp);
    c0dc:	2314      	movs	r3, #20
    c0de:	18fa      	adds	r2, r7, r3
    c0e0:	231c      	movs	r3, #28
    c0e2:	18fb      	adds	r3, r7, r3
    c0e4:	0011      	movs	r1, r2
    c0e6:	0018      	movs	r0, r3
    c0e8:	4b08      	ldr	r3, [pc, #32]	; (c10c <LORAREG_GetAttr_Rx1WindowparamsType2+0x5c>)
    c0ea:	4798      	blx	r3

	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    c0ec:	2314      	movs	r3, #20
    c0ee:	18f9      	adds	r1, r7, r3
    c0f0:	687b      	ldr	r3, [r7, #4]
    c0f2:	2208      	movs	r2, #8
    c0f4:	0018      	movs	r0, r3
    c0f6:	4b04      	ldr	r3, [pc, #16]	; (c108 <LORAREG_GetAttr_Rx1WindowparamsType2+0x58>)
    c0f8:	4798      	blx	r3
	
	return result;
    c0fa:	231f      	movs	r3, #31
    c0fc:	18fb      	adds	r3, r7, r3
    c0fe:	781b      	ldrb	r3, [r3, #0]
}
    c100:	0018      	movs	r0, r3
    c102:	46bd      	mov	sp, r7
    c104:	b008      	add	sp, #32
    c106:	bd80      	pop	{r7, pc}
    c108:	00024149 	.word	0x00024149
    c10c:	0000e331 	.word	0x0000e331

0000c110 <LORAREG_GetAttr_Rx1WindowparamsType3>:
#endif

#if (IND_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_Rx1WindowparamsType3(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c110:	b580      	push	{r7, lr}
    c112:	b088      	sub	sp, #32
    c114:	af00      	add	r7, sp, #0
    c116:	60b9      	str	r1, [r7, #8]
    c118:	607a      	str	r2, [r7, #4]
    c11a:	230f      	movs	r3, #15
    c11c:	18fb      	adds	r3, r7, r3
    c11e:	1c02      	adds	r2, r0, #0
    c120:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c122:	231f      	movs	r3, #31
    c124:	18fb      	adds	r3, r7, r3
    c126:	2208      	movs	r2, #8
    c128:	701a      	strb	r2, [r3, #0]
	
	Rx1WindowParamsReq_t rx1WindowParamsReq;
	
	Rx1WindowParams_t rx1WindowParamsResp;

	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    c12a:	231c      	movs	r3, #28
    c12c:	18fa      	adds	r2, r7, r3
    c12e:	68bb      	ldr	r3, [r7, #8]
    c130:	0010      	movs	r0, r2
    c132:	0019      	movs	r1, r3
    c134:	2303      	movs	r3, #3
    c136:	001a      	movs	r2, r3
    c138:	4b0b      	ldr	r3, [pc, #44]	; (c168 <LORAREG_GetAttr_Rx1WindowparamsType3+0x58>)
    c13a:	4798      	blx	r3
	
	getRx1WindowparamsType3(&rx1WindowParamsReq,&rx1WindowParamsResp);
    c13c:	2314      	movs	r3, #20
    c13e:	18fa      	adds	r2, r7, r3
    c140:	231c      	movs	r3, #28
    c142:	18fb      	adds	r3, r7, r3
    c144:	0011      	movs	r1, r2
    c146:	0018      	movs	r0, r3
    c148:	4b08      	ldr	r3, [pc, #32]	; (c16c <LORAREG_GetAttr_Rx1WindowparamsType3+0x5c>)
    c14a:	4798      	blx	r3

	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    c14c:	2314      	movs	r3, #20
    c14e:	18f9      	adds	r1, r7, r3
    c150:	687b      	ldr	r3, [r7, #4]
    c152:	2208      	movs	r2, #8
    c154:	0018      	movs	r0, r3
    c156:	4b04      	ldr	r3, [pc, #16]	; (c168 <LORAREG_GetAttr_Rx1WindowparamsType3+0x58>)
    c158:	4798      	blx	r3
	
	return result;
    c15a:	231f      	movs	r3, #31
    c15c:	18fb      	adds	r3, r7, r3
    c15e:	781b      	ldrb	r3, [r3, #0]
}
    c160:	0018      	movs	r0, r3
    c162:	46bd      	mov	sp, r7
    c164:	b008      	add	sp, #32
    c166:	bd80      	pop	{r7, pc}
    c168:	00024149 	.word	0x00024149
    c16c:	0000e3b1 	.word	0x0000e3b1

0000c170 <LORAREG_GetAttr_Rx1WindowparamsType4>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_Rx1WindowparamsType4(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c170:	b580      	push	{r7, lr}
    c172:	b088      	sub	sp, #32
    c174:	af00      	add	r7, sp, #0
    c176:	60b9      	str	r1, [r7, #8]
    c178:	607a      	str	r2, [r7, #4]
    c17a:	230f      	movs	r3, #15
    c17c:	18fb      	adds	r3, r7, r3
    c17e:	1c02      	adds	r2, r0, #0
    c180:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c182:	231f      	movs	r3, #31
    c184:	18fb      	adds	r3, r7, r3
    c186:	2208      	movs	r2, #8
    c188:	701a      	strb	r2, [r3, #0]
	
	Rx1WindowParamsReq_t rx1WindowParamsReq;
	
	Rx1WindowParams_t rx1WindowParamsResp;

	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    c18a:	231c      	movs	r3, #28
    c18c:	18fa      	adds	r2, r7, r3
    c18e:	68bb      	ldr	r3, [r7, #8]
    c190:	0010      	movs	r0, r2
    c192:	0019      	movs	r1, r3
    c194:	2303      	movs	r3, #3
    c196:	001a      	movs	r2, r3
    c198:	4b0b      	ldr	r3, [pc, #44]	; (c1c8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x58>)
    c19a:	4798      	blx	r3
	
	getRx1WindowparamsType4(&rx1WindowParamsReq,&rx1WindowParamsResp);
    c19c:	2314      	movs	r3, #20
    c19e:	18fa      	adds	r2, r7, r3
    c1a0:	231c      	movs	r3, #28
    c1a2:	18fb      	adds	r3, r7, r3
    c1a4:	0011      	movs	r1, r2
    c1a6:	0018      	movs	r0, r3
    c1a8:	4b08      	ldr	r3, [pc, #32]	; (c1cc <LORAREG_GetAttr_Rx1WindowparamsType4+0x5c>)
    c1aa:	4798      	blx	r3

	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    c1ac:	2314      	movs	r3, #20
    c1ae:	18f9      	adds	r1, r7, r3
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	2208      	movs	r2, #8
    c1b4:	0018      	movs	r0, r3
    c1b6:	4b04      	ldr	r3, [pc, #16]	; (c1c8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x58>)
    c1b8:	4798      	blx	r3
	
	return result;
    c1ba:	231f      	movs	r3, #31
    c1bc:	18fb      	adds	r3, r7, r3
    c1be:	781b      	ldrb	r3, [r3, #0]
}
    c1c0:	0018      	movs	r0, r3
    c1c2:	46bd      	mov	sp, r7
    c1c4:	b008      	add	sp, #32
    c1c6:	bd80      	pop	{r7, pc}
    c1c8:	00024149 	.word	0x00024149
    c1cc:	0000e4a9 	.word	0x0000e4a9

0000c1d0 <LORAREG_GetAttr_DlFrequency>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DlFrequency(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c1d0:	b580      	push	{r7, lr}
    c1d2:	b086      	sub	sp, #24
    c1d4:	af00      	add	r7, sp, #0
    c1d6:	60b9      	str	r1, [r7, #8]
    c1d8:	607a      	str	r2, [r7, #4]
    c1da:	230f      	movs	r3, #15
    c1dc:	18fb      	adds	r3, r7, r3
    c1de:	1c02      	adds	r2, r0, #0
    c1e0:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c1e2:	2317      	movs	r3, #23
    c1e4:	18fb      	adds	r3, r7, r3
    c1e6:	2208      	movs	r2, #8
    c1e8:	701a      	strb	r2, [r3, #0]
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    c1ea:	2316      	movs	r3, #22
    c1ec:	18fb      	adds	r3, r7, r3
    c1ee:	68ba      	ldr	r2, [r7, #8]
    c1f0:	7812      	ldrb	r2, [r2, #0]
    c1f2:	701a      	strb	r2, [r3, #0]
	if (channelId > RegParams.maxChannels)
    c1f4:	2316      	movs	r3, #22
    c1f6:	18fb      	adds	r3, r7, r3
    c1f8:	781b      	ldrb	r3, [r3, #0]
    c1fa:	4a15      	ldr	r2, [pc, #84]	; (c250 <LORAREG_GetAttr_DlFrequency+0x80>)
    c1fc:	212a      	movs	r1, #42	; 0x2a
    c1fe:	5652      	ldrsb	r2, [r2, r1]
    c200:	4293      	cmp	r3, r2
    c202:	dd04      	ble.n	c20e <LORAREG_GetAttr_DlFrequency+0x3e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    c204:	2317      	movs	r3, #23
    c206:	18fb      	adds	r3, r7, r3
    c208:	220a      	movs	r2, #10
    c20a:	701a      	strb	r2, [r3, #0]
    c20c:	e019      	b.n	c242 <LORAREG_GetAttr_DlFrequency+0x72>
	}
	else
	{
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    c20e:	4b10      	ldr	r3, [pc, #64]	; (c250 <LORAREG_GetAttr_DlFrequency+0x80>)
    c210:	7a1a      	ldrb	r2, [r3, #8]
    c212:	7a59      	ldrb	r1, [r3, #9]
    c214:	0209      	lsls	r1, r1, #8
    c216:	430a      	orrs	r2, r1
    c218:	7a99      	ldrb	r1, [r3, #10]
    c21a:	0409      	lsls	r1, r1, #16
    c21c:	430a      	orrs	r2, r1
    c21e:	7adb      	ldrb	r3, [r3, #11]
    c220:	061b      	lsls	r3, r3, #24
    c222:	4313      	orrs	r3, r2
    c224:	0019      	movs	r1, r3
    c226:	2316      	movs	r3, #22
    c228:	18fb      	adds	r3, r7, r3
    c22a:	781a      	ldrb	r2, [r3, #0]
    c22c:	0013      	movs	r3, r2
    c22e:	005b      	lsls	r3, r3, #1
    c230:	189b      	adds	r3, r3, r2
    c232:	009b      	lsls	r3, r3, #2
    c234:	18cb      	adds	r3, r1, r3
    c236:	1d19      	adds	r1, r3, #4
    c238:	687b      	ldr	r3, [r7, #4]
    c23a:	2204      	movs	r2, #4
    c23c:	0018      	movs	r0, r3
    c23e:	4b05      	ldr	r3, [pc, #20]	; (c254 <LORAREG_GetAttr_DlFrequency+0x84>)
    c240:	4798      	blx	r3
	}
	return result;
    c242:	2317      	movs	r3, #23
    c244:	18fb      	adds	r3, r7, r3
    c246:	781b      	ldrb	r3, [r3, #0]
}
    c248:	0018      	movs	r0, r3
    c24a:	46bd      	mov	sp, r7
    c24c:	b006      	add	sp, #24
    c24e:	bd80      	pop	{r7, pc}
    c250:	200014a8 	.word	0x200014a8
    c254:	00024149 	.word	0x00024149

0000c258 <LORAREG_GetAttr_ChIdStatus>:
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c258:	b580      	push	{r7, lr}
    c25a:	b086      	sub	sp, #24
    c25c:	af00      	add	r7, sp, #0
    c25e:	60b9      	str	r1, [r7, #8]
    c260:	607a      	str	r2, [r7, #4]
    c262:	230f      	movs	r3, #15
    c264:	18fb      	adds	r3, r7, r3
    c266:	1c02      	adds	r2, r0, #0
    c268:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c26a:	2317      	movs	r3, #23
    c26c:	18fb      	adds	r3, r7, r3
    c26e:	2208      	movs	r2, #8
    c270:	701a      	strb	r2, [r3, #0]
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    c272:	2316      	movs	r3, #22
    c274:	18fb      	adds	r3, r7, r3
    c276:	68ba      	ldr	r2, [r7, #8]
    c278:	7812      	ldrb	r2, [r2, #0]
    c27a:	701a      	strb	r2, [r3, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    c27c:	68bb      	ldr	r3, [r7, #8]
    c27e:	781a      	ldrb	r2, [r3, #0]
    c280:	2314      	movs	r3, #20
    c282:	18fb      	adds	r3, r7, r3
    c284:	701a      	strb	r2, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    c286:	2314      	movs	r3, #20
    c288:	18fb      	adds	r3, r7, r3
    c28a:	2201      	movs	r2, #1
    c28c:	705a      	strb	r2, [r3, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    c28e:	4b17      	ldr	r3, [pc, #92]	; (c2ec <LORAREG_GetAttr_ChIdStatus+0x94>)
    c290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c292:	2214      	movs	r2, #20
    c294:	18ba      	adds	r2, r7, r2
    c296:	0011      	movs	r1, r2
    c298:	2015      	movs	r0, #21
    c29a:	4798      	blx	r3
    c29c:	0003      	movs	r3, r0
    c29e:	2b08      	cmp	r3, #8
    c2a0:	d115      	bne.n	c2ce <LORAREG_GetAttr_ChIdStatus+0x76>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    c2a2:	4b13      	ldr	r3, [pc, #76]	; (c2f0 <LORAREG_GetAttr_ChIdStatus+0x98>)
    c2a4:	791a      	ldrb	r2, [r3, #4]
    c2a6:	7959      	ldrb	r1, [r3, #5]
    c2a8:	0209      	lsls	r1, r1, #8
    c2aa:	430a      	orrs	r2, r1
    c2ac:	7999      	ldrb	r1, [r3, #6]
    c2ae:	0409      	lsls	r1, r1, #16
    c2b0:	430a      	orrs	r2, r1
    c2b2:	79db      	ldrb	r3, [r3, #7]
    c2b4:	061b      	lsls	r3, r3, #24
    c2b6:	4313      	orrs	r3, r2
    c2b8:	001a      	movs	r2, r3
    c2ba:	2316      	movs	r3, #22
    c2bc:	18fb      	adds	r3, r7, r3
    c2be:	781b      	ldrb	r3, [r3, #0]
    c2c0:	005b      	lsls	r3, r3, #1
    c2c2:	18d3      	adds	r3, r2, r3
    c2c4:	781b      	ldrb	r3, [r3, #0]
    c2c6:	001a      	movs	r2, r3
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	701a      	strb	r2, [r3, #0]
    c2cc:	e006      	b.n	c2dc <LORAREG_GetAttr_ChIdStatus+0x84>
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    c2ce:	687b      	ldr	r3, [r7, #4]
    c2d0:	2200      	movs	r2, #0
    c2d2:	701a      	strb	r2, [r3, #0]
		result = LORAWAN_INVALID_PARAMETER;
    c2d4:	2317      	movs	r3, #23
    c2d6:	18fb      	adds	r3, r7, r3
    c2d8:	220a      	movs	r2, #10
    c2da:	701a      	strb	r2, [r3, #0]
	}
	return result;
    c2dc:	2317      	movs	r3, #23
    c2de:	18fb      	adds	r3, r7, r3
    c2e0:	781b      	ldrb	r3, [r3, #0]
}
    c2e2:	0018      	movs	r0, r3
    c2e4:	46bd      	mov	sp, r7
    c2e6:	b006      	add	sp, #24
    c2e8:	bd80      	pop	{r7, pc}
    c2ea:	46c0      	nop			; (mov r8, r8)
    c2ec:	20000dc8 	.word	0x20000dc8
    c2f0:	200014a8 	.word	0x200014a8

0000c2f4 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c2f4:	b580      	push	{r7, lr}
    c2f6:	b084      	sub	sp, #16
    c2f8:	af00      	add	r7, sp, #0
    c2fa:	60b9      	str	r1, [r7, #8]
    c2fc:	607a      	str	r2, [r7, #4]
    c2fe:	230f      	movs	r3, #15
    c300:	18fb      	adds	r3, r7, r3
    c302:	1c02      	adds	r2, r0, #0
    c304:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = UINT16_MAX;
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	2201      	movs	r2, #1
    c30a:	4252      	negs	r2, r2
    c30c:	801a      	strh	r2, [r3, #0]
	return LORAWAN_INVALID_PARAMETER;
    c30e:	230a      	movs	r3, #10
}
    c310:	0018      	movs	r0, r3
    c312:	46bd      	mov	sp, r7
    c314:	b004      	add	sp, #16
    c316:	bd80      	pop	{r7, pc}

0000c318 <LORAREG_GetAttr_DutyCycleT2>:
#endif

#if (EU_BAND == 1) || (AS_BAND == 1) || (JPN_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c318:	b590      	push	{r4, r7, lr}
    c31a:	b087      	sub	sp, #28
    c31c:	af00      	add	r7, sp, #0
    c31e:	60b9      	str	r1, [r7, #8]
    c320:	607a      	str	r2, [r7, #4]
    c322:	230f      	movs	r3, #15
    c324:	18fb      	adds	r3, r7, r3
    c326:	1c02      	adds	r2, r0, #0
    c328:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c32a:	2317      	movs	r3, #23
    c32c:	18fb      	adds	r3, r7, r3
    c32e:	2208      	movs	r2, #8
    c330:	701a      	strb	r2, [r3, #0]
    uint8_t  channelId;
    uint8_t subBandId;
	ValChId_t valChid;
	
	valChid.channelIndex = *(uint8_t *)attrInput;
    c332:	68bb      	ldr	r3, [r7, #8]
    c334:	781a      	ldrb	r2, [r3, #0]
    c336:	2310      	movs	r3, #16
    c338:	18fb      	adds	r3, r7, r3
    c33a:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    c33c:	2310      	movs	r3, #16
    c33e:	18fb      	adds	r3, r7, r3
    c340:	2201      	movs	r2, #1
    c342:	705a      	strb	r2, [r3, #1]
    channelId = *(uint8_t *)attrInput;
    c344:	2316      	movs	r3, #22
    c346:	18fb      	adds	r3, r7, r3
    c348:	68ba      	ldr	r2, [r7, #8]
    c34a:	7812      	ldrb	r2, [r2, #0]
    c34c:	701a      	strb	r2, [r3, #0]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    c34e:	2310      	movs	r3, #16
    c350:	18fb      	adds	r3, r7, r3
    c352:	0019      	movs	r1, r3
    c354:	2015      	movs	r0, #21
    c356:	4b17      	ldr	r3, [pc, #92]	; (c3b4 <LORAREG_GetAttr_DutyCycleT2+0x9c>)
    c358:	4798      	blx	r3
    c35a:	0003      	movs	r3, r0
    c35c:	2b08      	cmp	r3, #8
    c35e:	d11e      	bne.n	c39e <LORAREG_GetAttr_DutyCycleT2+0x86>
    {
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    c360:	2316      	movs	r3, #22
    c362:	18fb      	adds	r3, r7, r3
    c364:	781a      	ldrb	r2, [r3, #0]
    c366:	2315      	movs	r3, #21
    c368:	18f9      	adds	r1, r7, r3
    c36a:	4813      	ldr	r0, [pc, #76]	; (c3b8 <LORAREG_GetAttr_DutyCycleT2+0xa0>)
    c36c:	24ac      	movs	r4, #172	; 0xac
    c36e:	0013      	movs	r3, r2
    c370:	005b      	lsls	r3, r3, #1
    c372:	189b      	adds	r3, r3, r2
    c374:	009b      	lsls	r3, r3, #2
    c376:	18c3      	adds	r3, r0, r3
    c378:	191b      	adds	r3, r3, r4
    c37a:	781b      	ldrb	r3, [r3, #0]
    c37c:	700b      	strb	r3, [r1, #0]
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    c37e:	2315      	movs	r3, #21
    c380:	18fb      	adds	r3, r7, r3
    c382:	781b      	ldrb	r3, [r3, #0]
    c384:	4a0c      	ldr	r2, [pc, #48]	; (c3b8 <LORAREG_GetAttr_DutyCycleT2+0xa0>)
    c386:	33d4      	adds	r3, #212	; 0xd4
    c388:	005b      	lsls	r3, r3, #1
    c38a:	18d1      	adds	r1, r2, r3
    c38c:	7989      	ldrb	r1, [r1, #6]
    c38e:	18d3      	adds	r3, r2, r3
    c390:	79db      	ldrb	r3, [r3, #7]
    c392:	021b      	lsls	r3, r3, #8
    c394:	430b      	orrs	r3, r1
    c396:	b29a      	uxth	r2, r3
    c398:	687b      	ldr	r3, [r7, #4]
    c39a:	801a      	strh	r2, [r3, #0]
    c39c:	e003      	b.n	c3a6 <LORAREG_GetAttr_DutyCycleT2+0x8e>
    }
    else
    {
	    result = LORAWAN_INVALID_PARAMETER;
    c39e:	2317      	movs	r3, #23
    c3a0:	18fb      	adds	r3, r7, r3
    c3a2:	220a      	movs	r2, #10
    c3a4:	701a      	strb	r2, [r3, #0]
    }
	return result;
    c3a6:	2317      	movs	r3, #23
    c3a8:	18fb      	adds	r3, r7, r3
    c3aa:	781b      	ldrb	r3, [r3, #0]
}
    c3ac:	0018      	movs	r0, r3
    c3ae:	46bd      	mov	sp, r7
    c3b0:	b007      	add	sp, #28
    c3b2:	bd90      	pop	{r4, r7, pc}
    c3b4:	0000d905 	.word	0x0000d905
    c3b8:	200014a8 	.word	0x200014a8

0000c3bc <LORAREG_GetAttr_DutyCycleTimer>:
#endif

#if (EU_BAND == 1) || (AS_BAND == 1) || (JPN_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c3bc:	b590      	push	{r4, r7, lr}
    c3be:	b08b      	sub	sp, #44	; 0x2c
    c3c0:	af00      	add	r7, sp, #0
    c3c2:	60b9      	str	r1, [r7, #8]
    c3c4:	607a      	str	r2, [r7, #4]
    c3c6:	230f      	movs	r3, #15
    c3c8:	18fb      	adds	r3, r7, r3
    c3ca:	1c02      	adds	r2, r0, #0
    c3cc:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3ce:	2322      	movs	r3, #34	; 0x22
    c3d0:	18fb      	adds	r3, r7, r3
    c3d2:	2208      	movs	r2, #8
    c3d4:	701a      	strb	r2, [r3, #0]
    //To get the next free channel when duty cycle is enabled
    uint32_t minimSubBandTimer = UINT32_MAX;
    c3d6:	2301      	movs	r3, #1
    c3d8:	425b      	negs	r3, r3
    c3da:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t minDutyCycleTimer,ticks,delta;
    uint8_t bandId;
    uint8_t  currentDataRate;
    currentDataRate = *(uint8_t *)attrInput;
    c3dc:	2321      	movs	r3, #33	; 0x21
    c3de:	18fb      	adds	r3, r7, r3
    c3e0:	68ba      	ldr	r2, [r7, #8]
    c3e2:	7812      	ldrb	r2, [r2, #0]
    c3e4:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    c3e6:	2323      	movs	r3, #35	; 0x23
    c3e8:	18fb      	adds	r3, r7, r3
    c3ea:	2200      	movs	r2, #0
    c3ec:	701a      	strb	r2, [r3, #0]
    c3ee:	e0be      	b.n	c56e <LORAREG_GetAttr_DutyCycleTimer+0x1b2>
    {
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    c3f0:	4b9e      	ldr	r3, [pc, #632]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c3f2:	791a      	ldrb	r2, [r3, #4]
    c3f4:	7959      	ldrb	r1, [r3, #5]
    c3f6:	0209      	lsls	r1, r1, #8
    c3f8:	430a      	orrs	r2, r1
    c3fa:	7999      	ldrb	r1, [r3, #6]
    c3fc:	0409      	lsls	r1, r1, #16
    c3fe:	430a      	orrs	r2, r1
    c400:	79db      	ldrb	r3, [r3, #7]
    c402:	061b      	lsls	r3, r3, #24
    c404:	4313      	orrs	r3, r2
    c406:	001a      	movs	r2, r3
    c408:	2323      	movs	r3, #35	; 0x23
    c40a:	18fb      	adds	r3, r7, r3
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	005b      	lsls	r3, r3, #1
    c410:	18d3      	adds	r3, r2, r3
    c412:	781b      	ldrb	r3, [r3, #0]
    c414:	2b00      	cmp	r3, #0
    c416:	d100      	bne.n	c41a <LORAREG_GetAttr_DutyCycleTimer+0x5e>
    c418:	e0a2      	b.n	c560 <LORAREG_GetAttr_DutyCycleTimer+0x1a4>
	    {
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    c41a:	2323      	movs	r3, #35	; 0x23
    c41c:	18fb      	adds	r3, r7, r3
    c41e:	781a      	ldrb	r2, [r3, #0]
    c420:	2320      	movs	r3, #32
    c422:	18f9      	adds	r1, r7, r3
    c424:	4891      	ldr	r0, [pc, #580]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c426:	24ac      	movs	r4, #172	; 0xac
    c428:	0013      	movs	r3, r2
    c42a:	005b      	lsls	r3, r3, #1
    c42c:	189b      	adds	r3, r3, r2
    c42e:	009b      	lsls	r3, r3, #2
    c430:	18c3      	adds	r3, r0, r3
    c432:	191b      	adds	r3, r3, r4
    c434:	781b      	ldrb	r3, [r3, #0]
    c436:	700b      	strb	r3, [r1, #0]
		        
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    c438:	4b8c      	ldr	r3, [pc, #560]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c43a:	7b1a      	ldrb	r2, [r3, #12]
    c43c:	7b59      	ldrb	r1, [r3, #13]
    c43e:	0209      	lsls	r1, r1, #8
    c440:	430a      	orrs	r2, r1
    c442:	7b99      	ldrb	r1, [r3, #14]
    c444:	0409      	lsls	r1, r1, #16
    c446:	430a      	orrs	r2, r1
    c448:	7bdb      	ldrb	r3, [r3, #15]
    c44a:	061b      	lsls	r3, r3, #24
    c44c:	4313      	orrs	r3, r2
    c44e:	0019      	movs	r1, r3
    c450:	2320      	movs	r3, #32
    c452:	18fb      	adds	r3, r7, r3
    c454:	781a      	ldrb	r2, [r3, #0]
    c456:	0013      	movs	r3, r2
    c458:	005b      	lsls	r3, r3, #1
    c45a:	189b      	adds	r3, r3, r2
    c45c:	009b      	lsls	r3, r3, #2
    c45e:	18cb      	adds	r3, r1, r3
    c460:	7a1a      	ldrb	r2, [r3, #8]
    c462:	7a59      	ldrb	r1, [r3, #9]
    c464:	0209      	lsls	r1, r1, #8
    c466:	430a      	orrs	r2, r1
    c468:	7a99      	ldrb	r1, [r3, #10]
    c46a:	0409      	lsls	r1, r1, #16
    c46c:	430a      	orrs	r2, r1
    c46e:	7adb      	ldrb	r3, [r3, #11]
    c470:	061b      	lsls	r3, r3, #24
    c472:	4313      	orrs	r3, r2
    c474:	d074      	beq.n	c560 <LORAREG_GetAttr_DutyCycleTimer+0x1a4>
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    c476:	4b7d      	ldr	r3, [pc, #500]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c478:	7b1a      	ldrb	r2, [r3, #12]
    c47a:	7b59      	ldrb	r1, [r3, #13]
    c47c:	0209      	lsls	r1, r1, #8
    c47e:	430a      	orrs	r2, r1
    c480:	7b99      	ldrb	r1, [r3, #14]
    c482:	0409      	lsls	r1, r1, #16
    c484:	430a      	orrs	r2, r1
    c486:	7bdb      	ldrb	r3, [r3, #15]
    c488:	061b      	lsls	r3, r3, #24
    c48a:	4313      	orrs	r3, r2
    c48c:	0019      	movs	r1, r3
    c48e:	2320      	movs	r3, #32
    c490:	18fb      	adds	r3, r7, r3
    c492:	781a      	ldrb	r2, [r3, #0]
    c494:	0013      	movs	r3, r2
    c496:	005b      	lsls	r3, r3, #1
    c498:	189b      	adds	r3, r3, r2
    c49a:	009b      	lsls	r3, r3, #2
    c49c:	18cb      	adds	r3, r1, r3
    c49e:	7a1a      	ldrb	r2, [r3, #8]
    c4a0:	7a59      	ldrb	r1, [r3, #9]
    c4a2:	0209      	lsls	r1, r1, #8
    c4a4:	430a      	orrs	r2, r1
    c4a6:	7a99      	ldrb	r1, [r3, #10]
    c4a8:	0409      	lsls	r1, r1, #16
    c4aa:	430a      	orrs	r2, r1
    c4ac:	7adb      	ldrb	r3, [r3, #11]
    c4ae:	061b      	lsls	r3, r3, #24
    c4b0:	4313      	orrs	r3, r2
    c4b2:	001a      	movs	r2, r3
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c4b6:	429a      	cmp	r2, r3
    c4b8:	d852      	bhi.n	c560 <LORAREG_GetAttr_DutyCycleTimer+0x1a4>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    c4ba:	2321      	movs	r3, #33	; 0x21
    c4bc:	18fb      	adds	r3, r7, r3
    c4be:	781a      	ldrb	r2, [r3, #0]
    c4c0:	4b6a      	ldr	r3, [pc, #424]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c4c2:	7919      	ldrb	r1, [r3, #4]
    c4c4:	7958      	ldrb	r0, [r3, #5]
    c4c6:	0200      	lsls	r0, r0, #8
    c4c8:	4301      	orrs	r1, r0
    c4ca:	7998      	ldrb	r0, [r3, #6]
    c4cc:	0400      	lsls	r0, r0, #16
    c4ce:	4301      	orrs	r1, r0
    c4d0:	79db      	ldrb	r3, [r3, #7]
    c4d2:	061b      	lsls	r3, r3, #24
    c4d4:	430b      	orrs	r3, r1
    c4d6:	0019      	movs	r1, r3
    c4d8:	2323      	movs	r3, #35	; 0x23
    c4da:	18fb      	adds	r3, r7, r3
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	005b      	lsls	r3, r3, #1
    c4e0:	18cb      	adds	r3, r1, r3
    c4e2:	785b      	ldrb	r3, [r3, #1]
    c4e4:	071b      	lsls	r3, r3, #28
    c4e6:	0f1b      	lsrs	r3, r3, #28
    c4e8:	b2db      	uxtb	r3, r3
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    c4ea:	429a      	cmp	r2, r3
    c4ec:	db38      	blt.n	c560 <LORAREG_GetAttr_DutyCycleTimer+0x1a4>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    c4ee:	2321      	movs	r3, #33	; 0x21
    c4f0:	18fb      	adds	r3, r7, r3
    c4f2:	781a      	ldrb	r2, [r3, #0]
    c4f4:	4b5d      	ldr	r3, [pc, #372]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c4f6:	7919      	ldrb	r1, [r3, #4]
    c4f8:	7958      	ldrb	r0, [r3, #5]
    c4fa:	0200      	lsls	r0, r0, #8
    c4fc:	4301      	orrs	r1, r0
    c4fe:	7998      	ldrb	r0, [r3, #6]
    c500:	0400      	lsls	r0, r0, #16
    c502:	4301      	orrs	r1, r0
    c504:	79db      	ldrb	r3, [r3, #7]
    c506:	061b      	lsls	r3, r3, #24
    c508:	430b      	orrs	r3, r1
    c50a:	0019      	movs	r1, r3
    c50c:	2323      	movs	r3, #35	; 0x23
    c50e:	18fb      	adds	r3, r7, r3
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	005b      	lsls	r3, r3, #1
    c514:	18cb      	adds	r3, r1, r3
    c516:	785b      	ldrb	r3, [r3, #1]
    c518:	061b      	lsls	r3, r3, #24
    c51a:	0f1b      	lsrs	r3, r3, #28
    c51c:	b2db      	uxtb	r3, r3
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    c51e:	429a      	cmp	r2, r3
    c520:	dc1e      	bgt.n	c560 <LORAREG_GetAttr_DutyCycleTimer+0x1a4>
		    {
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    c522:	4b52      	ldr	r3, [pc, #328]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c524:	7b1a      	ldrb	r2, [r3, #12]
    c526:	7b59      	ldrb	r1, [r3, #13]
    c528:	0209      	lsls	r1, r1, #8
    c52a:	430a      	orrs	r2, r1
    c52c:	7b99      	ldrb	r1, [r3, #14]
    c52e:	0409      	lsls	r1, r1, #16
    c530:	430a      	orrs	r2, r1
    c532:	7bdb      	ldrb	r3, [r3, #15]
    c534:	061b      	lsls	r3, r3, #24
    c536:	4313      	orrs	r3, r2
    c538:	0019      	movs	r1, r3
    c53a:	2320      	movs	r3, #32
    c53c:	18fb      	adds	r3, r7, r3
    c53e:	781a      	ldrb	r2, [r3, #0]
    c540:	0013      	movs	r3, r2
    c542:	005b      	lsls	r3, r3, #1
    c544:	189b      	adds	r3, r3, r2
    c546:	009b      	lsls	r3, r3, #2
    c548:	18cb      	adds	r3, r1, r3
    c54a:	7a1a      	ldrb	r2, [r3, #8]
    c54c:	7a59      	ldrb	r1, [r3, #9]
    c54e:	0209      	lsls	r1, r1, #8
    c550:	430a      	orrs	r2, r1
    c552:	7a99      	ldrb	r1, [r3, #10]
    c554:	0409      	lsls	r1, r1, #16
    c556:	430a      	orrs	r2, r1
    c558:	7adb      	ldrb	r3, [r3, #11]
    c55a:	061b      	lsls	r3, r3, #24
    c55c:	4313      	orrs	r3, r2
    c55e:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    c560:	2323      	movs	r3, #35	; 0x23
    c562:	18fb      	adds	r3, r7, r3
    c564:	781a      	ldrb	r2, [r3, #0]
    c566:	2323      	movs	r3, #35	; 0x23
    c568:	18fb      	adds	r3, r7, r3
    c56a:	3201      	adds	r2, #1
    c56c:	701a      	strb	r2, [r3, #0]
    c56e:	2323      	movs	r3, #35	; 0x23
    c570:	18fb      	adds	r3, r7, r3
    c572:	781b      	ldrb	r3, [r3, #0]
    c574:	4a3d      	ldr	r2, [pc, #244]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c576:	212a      	movs	r1, #42	; 0x2a
    c578:	5652      	ldrsb	r2, [r2, r1]
    c57a:	4293      	cmp	r3, r2
    c57c:	da00      	bge.n	c580 <LORAREG_GetAttr_DutyCycleTimer+0x1c4>
    c57e:	e737      	b.n	c3f0 <LORAREG_GetAttr_DutyCycleTimer+0x34>
		    }
	    }
    }
        
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c582:	3301      	adds	r3, #1
    c584:	d019      	beq.n	c5ba <LORAREG_GetAttr_DutyCycleTimer+0x1fe>
    c586:	4b39      	ldr	r3, [pc, #228]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c588:	22dd      	movs	r2, #221	; 0xdd
    c58a:	0052      	lsls	r2, r2, #1
    c58c:	5c9a      	ldrb	r2, [r3, r2]
    c58e:	21bc      	movs	r1, #188	; 0xbc
    c590:	31ff      	adds	r1, #255	; 0xff
    c592:	5c59      	ldrb	r1, [r3, r1]
    c594:	0209      	lsls	r1, r1, #8
    c596:	430a      	orrs	r2, r1
    c598:	21de      	movs	r1, #222	; 0xde
    c59a:	0049      	lsls	r1, r1, #1
    c59c:	5c59      	ldrb	r1, [r3, r1]
    c59e:	0409      	lsls	r1, r1, #16
    c5a0:	430a      	orrs	r2, r1
    c5a2:	21be      	movs	r1, #190	; 0xbe
    c5a4:	31ff      	adds	r1, #255	; 0xff
    c5a6:	5c5b      	ldrb	r3, [r3, r1]
    c5a8:	061b      	lsls	r3, r3, #24
    c5aa:	4313      	orrs	r3, r2
    c5ac:	001a      	movs	r2, r3
    c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5b0:	429a      	cmp	r2, r3
    c5b2:	d802      	bhi.n	c5ba <LORAREG_GetAttr_DutyCycleTimer+0x1fe>
    {
	    minDutyCycleTimer = minimSubBandTimer;
    c5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c5b6:	617b      	str	r3, [r7, #20]
    c5b8:	e013      	b.n	c5e2 <LORAREG_GetAttr_DutyCycleTimer+0x226>
    }
    else
    {
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    c5ba:	4b2c      	ldr	r3, [pc, #176]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c5bc:	22dd      	movs	r2, #221	; 0xdd
    c5be:	0052      	lsls	r2, r2, #1
    c5c0:	5c9a      	ldrb	r2, [r3, r2]
    c5c2:	21bc      	movs	r1, #188	; 0xbc
    c5c4:	31ff      	adds	r1, #255	; 0xff
    c5c6:	5c59      	ldrb	r1, [r3, r1]
    c5c8:	0209      	lsls	r1, r1, #8
    c5ca:	430a      	orrs	r2, r1
    c5cc:	21de      	movs	r1, #222	; 0xde
    c5ce:	0049      	lsls	r1, r1, #1
    c5d0:	5c59      	ldrb	r1, [r3, r1]
    c5d2:	0409      	lsls	r1, r1, #16
    c5d4:	430a      	orrs	r2, r1
    c5d6:	21be      	movs	r1, #190	; 0xbe
    c5d8:	31ff      	adds	r1, #255	; 0xff
    c5da:	5c5b      	ldrb	r3, [r3, r1]
    c5dc:	061b      	lsls	r3, r3, #24
    c5de:	4313      	orrs	r3, r2
    c5e0:	617b      	str	r3, [r7, #20]
    }
        
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    c5e2:	4b22      	ldr	r3, [pc, #136]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c5e4:	7c1a      	ldrb	r2, [r3, #16]
    c5e6:	7c59      	ldrb	r1, [r3, #17]
    c5e8:	0209      	lsls	r1, r1, #8
    c5ea:	430a      	orrs	r2, r1
    c5ec:	7c99      	ldrb	r1, [r3, #18]
    c5ee:	0409      	lsls	r1, r1, #16
    c5f0:	430a      	orrs	r2, r1
    c5f2:	7cdb      	ldrb	r3, [r3, #19]
    c5f4:	061b      	lsls	r3, r3, #24
    c5f6:	4313      	orrs	r3, r2
    c5f8:	791b      	ldrb	r3, [r3, #4]
    c5fa:	0018      	movs	r0, r3
    c5fc:	4b1c      	ldr	r3, [pc, #112]	; (c670 <LORAREG_GetAttr_DutyCycleTimer+0x2b4>)
    c5fe:	4798      	blx	r3
    c600:	0003      	movs	r3, r0
    c602:	61fb      	str	r3, [r7, #28]
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    c604:	4b19      	ldr	r3, [pc, #100]	; (c66c <LORAREG_GetAttr_DutyCycleTimer+0x2b0>)
    c606:	7c1a      	ldrb	r2, [r3, #16]
    c608:	7c59      	ldrb	r1, [r3, #17]
    c60a:	0209      	lsls	r1, r1, #8
    c60c:	430a      	orrs	r2, r1
    c60e:	7c99      	ldrb	r1, [r3, #18]
    c610:	0409      	lsls	r1, r1, #16
    c612:	430a      	orrs	r2, r1
    c614:	7cdb      	ldrb	r3, [r3, #19]
    c616:	061b      	lsls	r3, r3, #24
    c618:	4313      	orrs	r3, r2
    c61a:	781a      	ldrb	r2, [r3, #0]
    c61c:	7859      	ldrb	r1, [r3, #1]
    c61e:	0209      	lsls	r1, r1, #8
    c620:	430a      	orrs	r2, r1
    c622:	7899      	ldrb	r1, [r3, #2]
    c624:	0409      	lsls	r1, r1, #16
    c626:	430a      	orrs	r2, r1
    c628:	78db      	ldrb	r3, [r3, #3]
    c62a:	061b      	lsls	r3, r3, #24
    c62c:	4313      	orrs	r3, r2
    c62e:	001c      	movs	r4, r3
    c630:	69f8      	ldr	r0, [r7, #28]
    c632:	4b10      	ldr	r3, [pc, #64]	; (c674 <LORAREG_GetAttr_DutyCycleTimer+0x2b8>)
    c634:	22fa      	movs	r2, #250	; 0xfa
    c636:	0091      	lsls	r1, r2, #2
    c638:	4798      	blx	r3
    c63a:	0003      	movs	r3, r0
    c63c:	1ae3      	subs	r3, r4, r3
    c63e:	61bb      	str	r3, [r7, #24]
    
	if( minDutyCycleTimer != 0)
    c640:	697b      	ldr	r3, [r7, #20]
    c642:	2b00      	cmp	r3, #0
    c644:	d003      	beq.n	c64e <LORAREG_GetAttr_DutyCycleTimer+0x292>
	{
		/*Get the time left for the band timer which supports the requested data rate to expire*/
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    c646:	697a      	ldr	r2, [r7, #20]
    c648:	69bb      	ldr	r3, [r7, #24]
    c64a:	1ad3      	subs	r3, r2, r3
    c64c:	617b      	str	r3, [r7, #20]
	}
        
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    c64e:	2314      	movs	r3, #20
    c650:	18f9      	adds	r1, r7, r3
    c652:	687b      	ldr	r3, [r7, #4]
    c654:	2204      	movs	r2, #4
    c656:	0018      	movs	r0, r3
    c658:	4b07      	ldr	r3, [pc, #28]	; (c678 <LORAREG_GetAttr_DutyCycleTimer+0x2bc>)
    c65a:	4798      	blx	r3
	
	return result;
    c65c:	2322      	movs	r3, #34	; 0x22
    c65e:	18fb      	adds	r3, r7, r3
    c660:	781b      	ldrb	r3, [r3, #0]
}
    c662:	0018      	movs	r0, r3
    c664:	46bd      	mov	sp, r7
    c666:	b00b      	add	sp, #44	; 0x2c
    c668:	bd90      	pop	{r4, r7, pc}
    c66a:	46c0      	nop			; (mov r8, r8)
    c66c:	200014a8 	.word	0x200014a8
    c670:	00015ab9 	.word	0x00015ab9
    c674:	00021069 	.word	0x00021069
    c678:	00024149 	.word	0x00024149

0000c67c <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c67c:	b580      	push	{r7, lr}
    c67e:	b084      	sub	sp, #16
    c680:	af00      	add	r7, sp, #0
    c682:	60b9      	str	r1, [r7, #8]
    c684:	607a      	str	r2, [r7, #4]
    c686:	230f      	movs	r3, #15
    c688:	18fb      	adds	r3, r7, r3
    c68a:	1c02      	adds	r2, r0, #0
    c68c:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)attrOutput = UINT32_MAX;
    c68e:	687b      	ldr	r3, [r7, #4]
    c690:	2201      	movs	r2, #1
    c692:	4252      	negs	r2, r2
    c694:	601a      	str	r2, [r3, #0]
	return LORAWAN_INVALID_PARAMETER;
    c696:	230a      	movs	r3, #10
}
    c698:	0018      	movs	r0, r3
    c69a:	46bd      	mov	sp, r7
    c69c:	b004      	add	sp, #16
    c69e:	bd80      	pop	{r7, pc}

0000c6a0 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c6a0:	b580      	push	{r7, lr}
    c6a2:	b084      	sub	sp, #16
    c6a4:	af00      	add	r7, sp, #0
    c6a6:	60b9      	str	r1, [r7, #8]
    c6a8:	607a      	str	r2, [r7, #4]
    c6aa:	230f      	movs	r3, #15
    c6ac:	18fb      	adds	r3, r7, r3
    c6ae:	1c02      	adds	r2, r0, #0
    c6b0:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    c6b2:	687b      	ldr	r3, [r7, #4]
    c6b4:	22fa      	movs	r2, #250	; 0xfa
    c6b6:	0092      	lsls	r2, r2, #2
    c6b8:	801a      	strh	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c6ba:	2308      	movs	r3, #8
}
    c6bc:	0018      	movs	r0, r3
    c6be:	46bd      	mov	sp, r7
    c6c0:	b004      	add	sp, #16
    c6c2:	bd80      	pop	{r7, pc}

0000c6c4 <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c6c4:	b580      	push	{r7, lr}
    c6c6:	b084      	sub	sp, #16
    c6c8:	af00      	add	r7, sp, #0
    c6ca:	60b9      	str	r1, [r7, #8]
    c6cc:	607a      	str	r2, [r7, #4]
    c6ce:	230f      	movs	r3, #15
    c6d0:	18fb      	adds	r3, r7, r3
    c6d2:	1c02      	adds	r2, r0, #0
    c6d4:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    c6d6:	687b      	ldr	r3, [r7, #4]
    c6d8:	22fa      	movs	r2, #250	; 0xfa
    c6da:	00d2      	lsls	r2, r2, #3
    c6dc:	801a      	strh	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c6de:	2308      	movs	r3, #8
}
    c6e0:	0018      	movs	r0, r3
    c6e2:	46bd      	mov	sp, r7
    c6e4:	b004      	add	sp, #16
    c6e6:	bd80      	pop	{r7, pc}

0000c6e8 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c6e8:	b580      	push	{r7, lr}
    c6ea:	b084      	sub	sp, #16
    c6ec:	af00      	add	r7, sp, #0
    c6ee:	60b9      	str	r1, [r7, #8]
    c6f0:	607a      	str	r2, [r7, #4]
    c6f2:	230f      	movs	r3, #15
    c6f4:	18fb      	adds	r3, r7, r3
    c6f6:	1c02      	adds	r2, r0, #0
    c6f8:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    c6fa:	687b      	ldr	r3, [r7, #4]
    c6fc:	4a03      	ldr	r2, [pc, #12]	; (c70c <LORAREG_GetAttr_MacJoinAcptDelay1+0x24>)
    c6fe:	801a      	strh	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c700:	2308      	movs	r3, #8
}
    c702:	0018      	movs	r0, r3
    c704:	46bd      	mov	sp, r7
    c706:	b004      	add	sp, #16
    c708:	bd80      	pop	{r7, pc}
    c70a:	46c0      	nop			; (mov r8, r8)
    c70c:	00001388 	.word	0x00001388

0000c710 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c710:	b580      	push	{r7, lr}
    c712:	b084      	sub	sp, #16
    c714:	af00      	add	r7, sp, #0
    c716:	60b9      	str	r1, [r7, #8]
    c718:	607a      	str	r2, [r7, #4]
    c71a:	230f      	movs	r3, #15
    c71c:	18fb      	adds	r3, r7, r3
    c71e:	1c02      	adds	r2, r0, #0
    c720:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    c722:	687b      	ldr	r3, [r7, #4]
    c724:	4a03      	ldr	r2, [pc, #12]	; (c734 <LORAREG_GetAttr_MacJoinAcptDelay2+0x24>)
    c726:	801a      	strh	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c728:	2308      	movs	r3, #8
}
    c72a:	0018      	movs	r0, r3
    c72c:	46bd      	mov	sp, r7
    c72e:	b004      	add	sp, #16
    c730:	bd80      	pop	{r7, pc}
    c732:	46c0      	nop			; (mov r8, r8)
    c734:	00001770 	.word	0x00001770

0000c738 <LORAREG_GetAttr_MacRetransmitTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacRetransmitTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c738:	b580      	push	{r7, lr}
    c73a:	b084      	sub	sp, #16
    c73c:	af00      	add	r7, sp, #0
    c73e:	60b9      	str	r1, [r7, #8]
    c740:	607a      	str	r2, [r7, #4]
    c742:	230f      	movs	r3, #15
    c744:	18fb      	adds	r3, r7, r3
    c746:	1c02      	adds	r2, r0, #0
    c748:	701a      	strb	r2, [r3, #0]
	*(uint16_t *)attrOutput = RETRANSMIT_TIMEOUT;
    c74a:	4b0a      	ldr	r3, [pc, #40]	; (c774 <LORAREG_GetAttr_MacRetransmitTimeout+0x3c>)
    c74c:	4798      	blx	r3
    c74e:	0002      	movs	r2, r0
    c750:	4b09      	ldr	r3, [pc, #36]	; (c778 <LORAREG_GetAttr_MacRetransmitTimeout+0x40>)
    c752:	490a      	ldr	r1, [pc, #40]	; (c77c <LORAREG_GetAttr_MacRetransmitTimeout+0x44>)
    c754:	0010      	movs	r0, r2
    c756:	4798      	blx	r3
    c758:	000b      	movs	r3, r1
    c75a:	b29b      	uxth	r3, r3
    c75c:	22fa      	movs	r2, #250	; 0xfa
    c75e:	0092      	lsls	r2, r2, #2
    c760:	4694      	mov	ip, r2
    c762:	4463      	add	r3, ip
    c764:	b29a      	uxth	r2, r3
    c766:	687b      	ldr	r3, [r7, #4]
    c768:	801a      	strh	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c76a:	2308      	movs	r3, #8
}
    c76c:	0018      	movs	r0, r3
    c76e:	46bd      	mov	sp, r7
    c770:	b004      	add	sp, #16
    c772:	bd80      	pop	{r7, pc}
    c774:	0002434d 	.word	0x0002434d
    c778:	00021349 	.word	0x00021349
    c77c:	000007d1 	.word	0x000007d1

0000c780 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c780:	b580      	push	{r7, lr}
    c782:	b084      	sub	sp, #16
    c784:	af00      	add	r7, sp, #0
    c786:	60b9      	str	r1, [r7, #8]
    c788:	607a      	str	r2, [r7, #4]
    c78a:	230f      	movs	r3, #15
    c78c:	18fb      	adds	r3, r7, r3
    c78e:	1c02      	adds	r2, r0, #0
    c790:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    c792:	687b      	ldr	r3, [r7, #4]
    c794:	2220      	movs	r2, #32
    c796:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c798:	2308      	movs	r3, #8
}
    c79a:	0018      	movs	r0, r3
    c79c:	46bd      	mov	sp, r7
    c79e:	b004      	add	sp, #16
    c7a0:	bd80      	pop	{r7, pc}

0000c7a2 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c7a2:	b580      	push	{r7, lr}
    c7a4:	b084      	sub	sp, #16
    c7a6:	af00      	add	r7, sp, #0
    c7a8:	60b9      	str	r1, [r7, #8]
    c7aa:	607a      	str	r2, [r7, #4]
    c7ac:	230f      	movs	r3, #15
    c7ae:	18fb      	adds	r3, r7, r3
    c7b0:	1c02      	adds	r2, r0, #0
    c7b2:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    c7b4:	687b      	ldr	r3, [r7, #4]
    c7b6:	2240      	movs	r2, #64	; 0x40
    c7b8:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c7ba:	2308      	movs	r3, #8
}
    c7bc:	0018      	movs	r0, r3
    c7be:	46bd      	mov	sp, r7
    c7c0:	b004      	add	sp, #16
    c7c2:	bd80      	pop	{r7, pc}

0000c7c4 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c7c4:	b580      	push	{r7, lr}
    c7c6:	b084      	sub	sp, #16
    c7c8:	af00      	add	r7, sp, #0
    c7ca:	60b9      	str	r1, [r7, #8]
    c7cc:	607a      	str	r2, [r7, #4]
    c7ce:	230f      	movs	r3, #15
    c7d0:	18fb      	adds	r3, r7, r3
    c7d2:	1c02      	adds	r2, r0, #0
    c7d4:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    c7d6:	4b05      	ldr	r3, [pc, #20]	; (c7ec <LORAREG_GetAttr_RegDefTxPwr+0x28>)
    c7d8:	2227      	movs	r2, #39	; 0x27
    c7da:	569b      	ldrsb	r3, [r3, r2]
    c7dc:	b2da      	uxtb	r2, r3
    c7de:	687b      	ldr	r3, [r7, #4]
    c7e0:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c7e2:	2308      	movs	r3, #8
}
    c7e4:	0018      	movs	r0, r3
    c7e6:	46bd      	mov	sp, r7
    c7e8:	b004      	add	sp, #16
    c7ea:	bd80      	pop	{r7, pc}
    c7ec:	200014a8 	.word	0x200014a8

0000c7f0 <LORAREG_GetAttr_DefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_DefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b084      	sub	sp, #16
    c7f4:	af00      	add	r7, sp, #0
    c7f6:	60b9      	str	r1, [r7, #8]
    c7f8:	607a      	str	r2, [r7, #4]
    c7fa:	230f      	movs	r3, #15
    c7fc:	18fb      	adds	r3, r7, r3
    c7fe:	1c02      	adds	r2, r0, #0
    c800:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.defTxPwrIndx;
    c802:	4b05      	ldr	r3, [pc, #20]	; (c818 <LORAREG_GetAttr_DefTxPwr+0x28>)
    c804:	222e      	movs	r2, #46	; 0x2e
    c806:	569b      	ldrsb	r3, [r3, r2]
    c808:	b2da      	uxtb	r2, r3
    c80a:	687b      	ldr	r3, [r7, #4]
    c80c:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c80e:	2308      	movs	r3, #8
}
    c810:	0018      	movs	r0, r3
    c812:	46bd      	mov	sp, r7
    c814:	b004      	add	sp, #16
    c816:	bd80      	pop	{r7, pc}
    c818:	200014a8 	.word	0x200014a8

0000c81c <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c81c:	b580      	push	{r7, lr}
    c81e:	b084      	sub	sp, #16
    c820:	af00      	add	r7, sp, #0
    c822:	60b9      	str	r1, [r7, #8]
    c824:	607a      	str	r2, [r7, #4]
    c826:	230f      	movs	r3, #15
    c828:	18fb      	adds	r3, r7, r3
    c82a:	1c02      	adds	r2, r0, #0
    c82c:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    c82e:	4b05      	ldr	r3, [pc, #20]	; (c844 <LORAREG_GetAttr_RegDefTxDR+0x28>)
    c830:	2226      	movs	r2, #38	; 0x26
    c832:	569b      	ldrsb	r3, [r3, r2]
    c834:	b2da      	uxtb	r2, r3
    c836:	687b      	ldr	r3, [r7, #4]
    c838:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c83a:	2308      	movs	r3, #8
}
    c83c:	0018      	movs	r0, r3
    c83e:	46bd      	mov	sp, r7
    c840:	b004      	add	sp, #16
    c842:	bd80      	pop	{r7, pc}
    c844:	200014a8 	.word	0x200014a8

0000c848 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c848:	b580      	push	{r7, lr}
    c84a:	b084      	sub	sp, #16
    c84c:	af00      	add	r7, sp, #0
    c84e:	60b9      	str	r1, [r7, #8]
    c850:	607a      	str	r2, [r7, #4]
    c852:	230f      	movs	r3, #15
    c854:	18fb      	adds	r3, r7, r3
    c856:	1c02      	adds	r2, r0, #0
    c858:	701a      	strb	r2, [r3, #0]
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    c85a:	4b05      	ldr	r3, [pc, #20]	; (c870 <LORAREG_GetAttr_CurChIndx+0x28>)
    c85c:	2230      	movs	r2, #48	; 0x30
    c85e:	5c9a      	ldrb	r2, [r3, r2]
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;
    c864:	2308      	movs	r3, #8
}
    c866:	0018      	movs	r0, r3
    c868:	46bd      	mov	sp, r7
    c86a:	b004      	add	sp, #16
    c86c:	bd80      	pop	{r7, pc}
    c86e:	46c0      	nop			; (mov r8, r8)
    c870:	200014a8 	.word	0x200014a8

0000c874 <LORAREG_GetAttr_NewTxChConfigT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_NewTxChConfigT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c874:	b5b0      	push	{r4, r5, r7, lr}
    c876:	b086      	sub	sp, #24
    c878:	af00      	add	r7, sp, #0
    c87a:	60b9      	str	r1, [r7, #8]
    c87c:	607a      	str	r2, [r7, #4]
    c87e:	230f      	movs	r3, #15
    c880:	18fb      	adds	r3, r7, r3
    c882:	1c02      	adds	r2, r0, #0
    c884:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c886:	2317      	movs	r3, #23
    c888:	18fb      	adds	r3, r7, r3
    c88a:	2208      	movs	r2, #8
    c88c:	701a      	strb	r2, [r3, #0]
	NewTxChannelReq_t newTxChannelReq;

	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c88e:	2314      	movs	r3, #20
    c890:	18fa      	adds	r2, r7, r3
    c892:	68bb      	ldr	r3, [r7, #8]
    c894:	0010      	movs	r0, r2
    c896:	0019      	movs	r1, r3
    c898:	2303      	movs	r3, #3
    c89a:	001a      	movs	r2, r3
    c89c:	4b18      	ldr	r3, [pc, #96]	; (c900 <LORAREG_GetAttr_NewTxChConfigT1+0x8c>)
    c89e:	4798      	blx	r3
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR, (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    c8a0:	2314      	movs	r3, #20
    c8a2:	18fb      	adds	r3, r7, r3
    c8a4:	3302      	adds	r3, #2
    c8a6:	0019      	movs	r1, r3
    c8a8:	2010      	movs	r0, #16
    c8aa:	4b16      	ldr	r3, [pc, #88]	; (c904 <LORAREG_GetAttr_NewTxChConfigT1+0x90>)
    c8ac:	4798      	blx	r3
    c8ae:	0003      	movs	r3, r0
    c8b0:	2b08      	cmp	r3, #8
    c8b2:	d109      	bne.n	c8c8 <LORAREG_GetAttr_NewTxChConfigT1+0x54>
    c8b4:	2314      	movs	r3, #20
    c8b6:	18fb      	adds	r3, r7, r3
    c8b8:	3301      	adds	r3, #1
    c8ba:	0019      	movs	r1, r3
    c8bc:	201d      	movs	r0, #29
    c8be:	4b12      	ldr	r3, [pc, #72]	; (c908 <LORAREG_GetAttr_NewTxChConfigT1+0x94>)
    c8c0:	4798      	blx	r3
    c8c2:	0003      	movs	r3, r0
    c8c4:	2b08      	cmp	r3, #8
    c8c6:	d004      	beq.n	c8d2 <LORAREG_GetAttr_NewTxChConfigT1+0x5e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    c8c8:	2317      	movs	r3, #23
    c8ca:	18fb      	adds	r3, r7, r3
    c8cc:	220a      	movs	r2, #10
    c8ce:	701a      	strb	r2, [r3, #0]
    c8d0:	e00f      	b.n	c8f2 <LORAREG_GetAttr_NewTxChConfigT1+0x7e>
	}
	else
	{
		result = GetTxChannelConfig1(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c8d2:	2314      	movs	r3, #20
    c8d4:	18fb      	adds	r3, r7, r3
    c8d6:	7818      	ldrb	r0, [r3, #0]
    c8d8:	2314      	movs	r3, #20
    c8da:	18fb      	adds	r3, r7, r3
    c8dc:	7859      	ldrb	r1, [r3, #1]
    c8de:	2314      	movs	r3, #20
    c8e0:	18fb      	adds	r3, r7, r3
    c8e2:	789a      	ldrb	r2, [r3, #2]
    c8e4:	2317      	movs	r3, #23
    c8e6:	18fc      	adds	r4, r7, r3
    c8e8:	687b      	ldr	r3, [r7, #4]
    c8ea:	4d08      	ldr	r5, [pc, #32]	; (c90c <LORAREG_GetAttr_NewTxChConfigT1+0x98>)
    c8ec:	47a8      	blx	r5
    c8ee:	0003      	movs	r3, r0
    c8f0:	7023      	strb	r3, [r4, #0]
	}
	return result;
    c8f2:	2317      	movs	r3, #23
    c8f4:	18fb      	adds	r3, r7, r3
    c8f6:	781b      	ldrb	r3, [r3, #0]
}
    c8f8:	0018      	movs	r0, r3
    c8fa:	46bd      	mov	sp, r7
    c8fc:	b006      	add	sp, #24
    c8fe:	bdb0      	pop	{r4, r5, r7, pc}
    c900:	00024149 	.word	0x00024149
    c904:	0000d735 	.word	0x0000d735
    c908:	0000e635 	.word	0x0000e635
    c90c:	0000e689 	.word	0x0000e689

0000c910 <LORAREG_GetAttr_NewTxChConfigT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_NewTxChConfigT2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c910:	b5b0      	push	{r4, r5, r7, lr}
    c912:	b086      	sub	sp, #24
    c914:	af00      	add	r7, sp, #0
    c916:	60b9      	str	r1, [r7, #8]
    c918:	607a      	str	r2, [r7, #4]
    c91a:	230f      	movs	r3, #15
    c91c:	18fb      	adds	r3, r7, r3
    c91e:	1c02      	adds	r2, r0, #0
    c920:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c922:	2317      	movs	r3, #23
    c924:	18fb      	adds	r3, r7, r3
    c926:	2208      	movs	r2, #8
    c928:	701a      	strb	r2, [r3, #0]
	NewTxChannelReq_t newTxChannelReq;

	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c92a:	2314      	movs	r3, #20
    c92c:	18fa      	adds	r2, r7, r3
    c92e:	68bb      	ldr	r3, [r7, #8]
    c930:	0010      	movs	r0, r2
    c932:	0019      	movs	r1, r3
    c934:	2303      	movs	r3, #3
    c936:	001a      	movs	r2, r3
    c938:	4b18      	ldr	r3, [pc, #96]	; (c99c <LORAREG_GetAttr_NewTxChConfigT2+0x8c>)
    c93a:	4798      	blx	r3
	if((ValidateDataRate(RX_DATARATE, (void *)&newTxChannelReq.currDr) != LORAWAN_SUCCESS) || (ValidateTxPower(TX_PWR,  (void *)&newTxChannelReq.txPwr) != LORAWAN_SUCCESS))
    c93c:	2314      	movs	r3, #20
    c93e:	18fb      	adds	r3, r7, r3
    c940:	3302      	adds	r3, #2
    c942:	0019      	movs	r1, r3
    c944:	200f      	movs	r0, #15
    c946:	4b16      	ldr	r3, [pc, #88]	; (c9a0 <LORAREG_GetAttr_NewTxChConfigT2+0x90>)
    c948:	4798      	blx	r3
    c94a:	0003      	movs	r3, r0
    c94c:	2b08      	cmp	r3, #8
    c94e:	d109      	bne.n	c964 <LORAREG_GetAttr_NewTxChConfigT2+0x54>
    c950:	2314      	movs	r3, #20
    c952:	18fb      	adds	r3, r7, r3
    c954:	3301      	adds	r3, #1
    c956:	0019      	movs	r1, r3
    c958:	201d      	movs	r0, #29
    c95a:	4b12      	ldr	r3, [pc, #72]	; (c9a4 <LORAREG_GetAttr_NewTxChConfigT2+0x94>)
    c95c:	4798      	blx	r3
    c95e:	0003      	movs	r3, r0
    c960:	2b08      	cmp	r3, #8
    c962:	d004      	beq.n	c96e <LORAREG_GetAttr_NewTxChConfigT2+0x5e>
	{
		result = LORAWAN_INVALID_PARAMETER;
    c964:	2317      	movs	r3, #23
    c966:	18fb      	adds	r3, r7, r3
    c968:	220a      	movs	r2, #10
    c96a:	701a      	strb	r2, [r3, #0]
    c96c:	e00f      	b.n	c98e <LORAREG_GetAttr_NewTxChConfigT2+0x7e>
	}
	else
	{
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c96e:	2314      	movs	r3, #20
    c970:	18fb      	adds	r3, r7, r3
    c972:	7818      	ldrb	r0, [r3, #0]
    c974:	2314      	movs	r3, #20
    c976:	18fb      	adds	r3, r7, r3
    c978:	7859      	ldrb	r1, [r3, #1]
    c97a:	2314      	movs	r3, #20
    c97c:	18fb      	adds	r3, r7, r3
    c97e:	789a      	ldrb	r2, [r3, #2]
    c980:	2317      	movs	r3, #23
    c982:	18fc      	adds	r4, r7, r3
    c984:	687b      	ldr	r3, [r7, #4]
    c986:	4d08      	ldr	r5, [pc, #32]	; (c9a8 <LORAREG_GetAttr_NewTxChConfigT2+0x98>)
    c988:	47a8      	blx	r5
    c98a:	0003      	movs	r3, r0
    c98c:	7023      	strb	r3, [r4, #0]
	}
	return result;
    c98e:	2317      	movs	r3, #23
    c990:	18fb      	adds	r3, r7, r3
    c992:	781b      	ldrb	r3, [r3, #0]

}
    c994:	0018      	movs	r0, r3
    c996:	46bd      	mov	sp, r7
    c998:	b006      	add	sp, #24
    c99a:	bdb0      	pop	{r4, r5, r7, pc}
    c99c:	00024149 	.word	0x00024149
    c9a0:	0000fbb5 	.word	0x0000fbb5
    c9a4:	0000e635 	.word	0x0000e635
    c9a8:	0000e889 	.word	0x0000e889

0000c9ac <LORAREG_GetAttr_FreeChannel1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_FreeChannel1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    c9ac:	b5b0      	push	{r4, r5, r7, lr}
    c9ae:	b086      	sub	sp, #24
    c9b0:	af00      	add	r7, sp, #0
    c9b2:	60b9      	str	r1, [r7, #8]
    c9b4:	607a      	str	r2, [r7, #4]
    c9b6:	230f      	movs	r3, #15
    c9b8:	18fb      	adds	r3, r7, r3
    c9ba:	1c02      	adds	r2, r0, #0
    c9bc:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c9be:	2317      	movs	r3, #23
    c9c0:	18fb      	adds	r3, r7, r3
    c9c2:	2208      	movs	r2, #8
    c9c4:	701a      	strb	r2, [r3, #0]
	NewFreeChannelReq_t newFreeChannelReq;

	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    c9c6:	2314      	movs	r3, #20
    c9c8:	18fa      	adds	r2, r7, r3
    c9ca:	68bb      	ldr	r3, [r7, #8]
    c9cc:	0010      	movs	r0, r2
    c9ce:	0019      	movs	r1, r3
    c9d0:	2303      	movs	r3, #3
    c9d2:	001a      	movs	r2, r3
    c9d4:	4b11      	ldr	r3, [pc, #68]	; (ca1c <LORAREG_GetAttr_FreeChannel1+0x70>)
    c9d6:	4798      	blx	r3
	
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    c9d8:	2314      	movs	r3, #20
    c9da:	18fb      	adds	r3, r7, r3
    c9dc:	785b      	ldrb	r3, [r3, #1]
    c9de:	0019      	movs	r1, r3
    c9e0:	4b0f      	ldr	r3, [pc, #60]	; (ca20 <LORAREG_GetAttr_FreeChannel1+0x74>)
    c9e2:	222a      	movs	r2, #42	; 0x2a
    c9e4:	569b      	ldrsb	r3, [r3, r2]
    c9e6:	4299      	cmp	r1, r3
    c9e8:	dd01      	ble.n	c9ee <LORAREG_GetAttr_FreeChannel1+0x42>
	{
		return LORAWAN_INVALID_PARAMETER;
    c9ea:	230a      	movs	r3, #10
    c9ec:	e012      	b.n	ca14 <LORAREG_GetAttr_FreeChannel1+0x68>
	}
	else
	{
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    c9ee:	2314      	movs	r3, #20
    c9f0:	18fb      	adds	r3, r7, r3
    c9f2:	7858      	ldrb	r0, [r3, #1]
    c9f4:	2314      	movs	r3, #20
    c9f6:	18fb      	adds	r3, r7, r3
    c9f8:	7819      	ldrb	r1, [r3, #0]
    c9fa:	2314      	movs	r3, #20
    c9fc:	18fb      	adds	r3, r7, r3
    c9fe:	789a      	ldrb	r2, [r3, #2]
    ca00:	2317      	movs	r3, #23
    ca02:	18fc      	adds	r4, r7, r3
    ca04:	687b      	ldr	r3, [r7, #4]
    ca06:	4d07      	ldr	r5, [pc, #28]	; (ca24 <LORAREG_GetAttr_FreeChannel1+0x78>)
    ca08:	47a8      	blx	r5
    ca0a:	0003      	movs	r3, r0
    ca0c:	7023      	strb	r3, [r4, #0]
	}
	
	return result;
    ca0e:	2317      	movs	r3, #23
    ca10:	18fb      	adds	r3, r7, r3
    ca12:	781b      	ldrb	r3, [r3, #0]
}
    ca14:	0018      	movs	r0, r3
    ca16:	46bd      	mov	sp, r7
    ca18:	b006      	add	sp, #24
    ca1a:	bdb0      	pop	{r4, r5, r7, pc}
    ca1c:	00024149 	.word	0x00024149
    ca20:	200014a8 	.word	0x200014a8
    ca24:	0000ea21 	.word	0x0000ea21

0000ca28 <LORAREG_GetAttr_FreeChannel2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_FreeChannel2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    ca28:	b5b0      	push	{r4, r5, r7, lr}
    ca2a:	b086      	sub	sp, #24
    ca2c:	af00      	add	r7, sp, #0
    ca2e:	60b9      	str	r1, [r7, #8]
    ca30:	607a      	str	r2, [r7, #4]
    ca32:	230f      	movs	r3, #15
    ca34:	18fb      	adds	r3, r7, r3
    ca36:	1c02      	adds	r2, r0, #0
    ca38:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ca3a:	2317      	movs	r3, #23
    ca3c:	18fb      	adds	r3, r7, r3
    ca3e:	2208      	movs	r2, #8
    ca40:	701a      	strb	r2, [r3, #0]
	NewFreeChannelReq_t newFreeChannelReq;

	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    ca42:	2314      	movs	r3, #20
    ca44:	18fa      	adds	r2, r7, r3
    ca46:	68bb      	ldr	r3, [r7, #8]
    ca48:	0010      	movs	r0, r2
    ca4a:	0019      	movs	r1, r3
    ca4c:	2303      	movs	r3, #3
    ca4e:	001a      	movs	r2, r3
    ca50:	4b11      	ldr	r3, [pc, #68]	; (ca98 <LORAREG_GetAttr_FreeChannel2+0x70>)
    ca52:	4798      	blx	r3
	
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    ca54:	2314      	movs	r3, #20
    ca56:	18fb      	adds	r3, r7, r3
    ca58:	785b      	ldrb	r3, [r3, #1]
    ca5a:	0019      	movs	r1, r3
    ca5c:	4b0f      	ldr	r3, [pc, #60]	; (ca9c <LORAREG_GetAttr_FreeChannel2+0x74>)
    ca5e:	222a      	movs	r2, #42	; 0x2a
    ca60:	569b      	ldrsb	r3, [r3, r2]
    ca62:	4299      	cmp	r1, r3
    ca64:	dd01      	ble.n	ca6a <LORAREG_GetAttr_FreeChannel2+0x42>
	{
		return LORAWAN_INVALID_PARAMETER;
    ca66:	230a      	movs	r3, #10
    ca68:	e012      	b.n	ca90 <LORAREG_GetAttr_FreeChannel2+0x68>
	}
	else
	{
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    ca6a:	2314      	movs	r3, #20
    ca6c:	18fb      	adds	r3, r7, r3
    ca6e:	7858      	ldrb	r0, [r3, #1]
    ca70:	2314      	movs	r3, #20
    ca72:	18fb      	adds	r3, r7, r3
    ca74:	7819      	ldrb	r1, [r3, #0]
    ca76:	2314      	movs	r3, #20
    ca78:	18fb      	adds	r3, r7, r3
    ca7a:	789a      	ldrb	r2, [r3, #2]
    ca7c:	2317      	movs	r3, #23
    ca7e:	18fc      	adds	r4, r7, r3
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	4d07      	ldr	r5, [pc, #28]	; (caa0 <LORAREG_GetAttr_FreeChannel2+0x78>)
    ca84:	47a8      	blx	r5
    ca86:	0003      	movs	r3, r0
    ca88:	7023      	strb	r3, [r4, #0]
	}
	
	return result;
    ca8a:	2317      	movs	r3, #23
    ca8c:	18fb      	adds	r3, r7, r3
    ca8e:	781b      	ldrb	r3, [r3, #0]
}
    ca90:	0018      	movs	r0, r3
    ca92:	46bd      	mov	sp, r7
    ca94:	b006      	add	sp, #24
    ca96:	bdb0      	pop	{r4, r5, r7, pc}
    ca98:	00024149 	.word	0x00024149
    ca9c:	200014a8 	.word	0x200014a8
    caa0:	0000ee49 	.word	0x0000ee49

0000caa4 <LORAREG_GetAttr_DefLBTParams>:
#endif

#if (JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    caa4:	b580      	push	{r7, lr}
    caa6:	b086      	sub	sp, #24
    caa8:	af00      	add	r7, sp, #0
    caaa:	60b9      	str	r1, [r7, #8]
    caac:	607a      	str	r2, [r7, #4]
    caae:	230f      	movs	r3, #15
    cab0:	18fb      	adds	r3, r7, r3
    cab2:	1c02      	adds	r2, r0, #0
    cab4:	701a      	strb	r2, [r3, #0]
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
    cab6:	687b      	ldr	r3, [r7, #4]
    cab8:	617b      	str	r3, [r7, #20]
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    caba:	4a0f      	ldr	r2, [pc, #60]	; (caf8 <LORAREG_GetAttr_DefLBTParams+0x54>)
    cabc:	23e0      	movs	r3, #224	; 0xe0
    cabe:	005b      	lsls	r3, r3, #1
    cac0:	5cd2      	ldrb	r2, [r2, r3]
    cac2:	697b      	ldr	r3, [r7, #20]
    cac4:	719a      	strb	r2, [r3, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    cac6:	4a0c      	ldr	r2, [pc, #48]	; (caf8 <LORAREG_GetAttr_DefLBTParams+0x54>)
    cac8:	23df      	movs	r3, #223	; 0xdf
    caca:	005b      	lsls	r3, r3, #1
    cacc:	5cd3      	ldrb	r3, [r2, r3]
    cace:	b29a      	uxth	r2, r3
    cad0:	697b      	ldr	r3, [r7, #20]
    cad2:	801a      	strh	r2, [r3, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    cad4:	4a08      	ldr	r2, [pc, #32]	; (caf8 <LORAREG_GetAttr_DefLBTParams+0x54>)
    cad6:	23c0      	movs	r3, #192	; 0xc0
    cad8:	33ff      	adds	r3, #255	; 0xff
    cada:	56d3      	ldrsb	r3, [r2, r3]
    cadc:	b21a      	sxth	r2, r3
    cade:	697b      	ldr	r3, [r7, #20]
    cae0:	805a      	strh	r2, [r3, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    cae2:	697b      	ldr	r3, [r7, #20]
    cae4:	2201      	movs	r2, #1
    cae6:	71da      	strb	r2, [r3, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    cae8:	697b      	ldr	r3, [r7, #20]
    caea:	2205      	movs	r2, #5
    caec:	809a      	strh	r2, [r3, #4]
	return 0;
    caee:	2300      	movs	r3, #0
}
    caf0:	0018      	movs	r0, r3
    caf2:	46bd      	mov	sp, r7
    caf4:	b006      	add	sp, #24
    caf6:	bd80      	pop	{r7, pc}
    caf8:	200014a8 	.word	0x200014a8

0000cafc <LORAREG_GetAttr_minLBTChPauseTimer>:
#endif

#if (JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_minLBTChPauseTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    cafc:	b580      	push	{r7, lr}
    cafe:	b086      	sub	sp, #24
    cb00:	af00      	add	r7, sp, #0
    cb02:	60b9      	str	r1, [r7, #8]
    cb04:	607a      	str	r2, [r7, #4]
    cb06:	230f      	movs	r3, #15
    cb08:	18fb      	adds	r3, r7, r3
    cb0a:	1c02      	adds	r2, r0, #0
    cb0c:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    cb0e:	2316      	movs	r3, #22
    cb10:	18fb      	adds	r3, r7, r3
    cb12:	2208      	movs	r2, #8
    cb14:	701a      	strb	r2, [r3, #0]
	uint32_t minim = UINT32_MAX;
    cb16:	2301      	movs	r3, #1
    cb18:	425b      	negs	r3, r3
    cb1a:	613b      	str	r3, [r7, #16]
	uint8_t  currentDataRate;
	currentDataRate = *(uint8_t *)attrInput;
    cb1c:	2315      	movs	r3, #21
    cb1e:	18fb      	adds	r3, r7, r3
    cb20:	68ba      	ldr	r2, [r7, #8]
    cb22:	7812      	ldrb	r2, [r2, #0]
    cb24:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    cb26:	2317      	movs	r3, #23
    cb28:	18fb      	adds	r3, r7, r3
    cb2a:	2200      	movs	r2, #0
    cb2c:	701a      	strb	r2, [r3, #0]
    cb2e:	e090      	b.n	cc52 <LORAREG_GetAttr_minLBTChPauseTimer+0x156>
	{
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    cb30:	4b53      	ldr	r3, [pc, #332]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cb32:	791a      	ldrb	r2, [r3, #4]
    cb34:	7959      	ldrb	r1, [r3, #5]
    cb36:	0209      	lsls	r1, r1, #8
    cb38:	430a      	orrs	r2, r1
    cb3a:	7999      	ldrb	r1, [r3, #6]
    cb3c:	0409      	lsls	r1, r1, #16
    cb3e:	430a      	orrs	r2, r1
    cb40:	79db      	ldrb	r3, [r3, #7]
    cb42:	061b      	lsls	r3, r3, #24
    cb44:	4313      	orrs	r3, r2
    cb46:	001a      	movs	r2, r3
    cb48:	2317      	movs	r3, #23
    cb4a:	18fb      	adds	r3, r7, r3
    cb4c:	781b      	ldrb	r3, [r3, #0]
    cb4e:	005b      	lsls	r3, r3, #1
    cb50:	18d3      	adds	r3, r2, r3
    cb52:	781b      	ldrb	r3, [r3, #0]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d075      	beq.n	cc44 <LORAREG_GetAttr_minLBTChPauseTimer+0x148>
    cb58:	2317      	movs	r3, #23
    cb5a:	18fb      	adds	r3, r7, r3
    cb5c:	781b      	ldrb	r3, [r3, #0]
    cb5e:	4a48      	ldr	r2, [pc, #288]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cb60:	3358      	adds	r3, #88	; 0x58
    cb62:	009b      	lsls	r3, r3, #2
    cb64:	18d1      	adds	r1, r2, r3
    cb66:	7a49      	ldrb	r1, [r1, #9]
    cb68:	18d0      	adds	r0, r2, r3
    cb6a:	7a80      	ldrb	r0, [r0, #10]
    cb6c:	0200      	lsls	r0, r0, #8
    cb6e:	4301      	orrs	r1, r0
    cb70:	18d0      	adds	r0, r2, r3
    cb72:	7ac0      	ldrb	r0, [r0, #11]
    cb74:	0400      	lsls	r0, r0, #16
    cb76:	4301      	orrs	r1, r0
    cb78:	18d3      	adds	r3, r2, r3
    cb7a:	7b1b      	ldrb	r3, [r3, #12]
    cb7c:	061b      	lsls	r3, r3, #24
    cb7e:	430b      	orrs	r3, r1
    cb80:	d060      	beq.n	cc44 <LORAREG_GetAttr_minLBTChPauseTimer+0x148>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    cb82:	2317      	movs	r3, #23
    cb84:	18fb      	adds	r3, r7, r3
    cb86:	781b      	ldrb	r3, [r3, #0]
    cb88:	4a3d      	ldr	r2, [pc, #244]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cb8a:	3358      	adds	r3, #88	; 0x58
    cb8c:	009b      	lsls	r3, r3, #2
    cb8e:	18d1      	adds	r1, r2, r3
    cb90:	7a49      	ldrb	r1, [r1, #9]
    cb92:	18d0      	adds	r0, r2, r3
    cb94:	7a80      	ldrb	r0, [r0, #10]
    cb96:	0200      	lsls	r0, r0, #8
    cb98:	4301      	orrs	r1, r0
    cb9a:	18d0      	adds	r0, r2, r3
    cb9c:	7ac0      	ldrb	r0, [r0, #11]
    cb9e:	0400      	lsls	r0, r0, #16
    cba0:	4301      	orrs	r1, r0
    cba2:	18d3      	adds	r3, r2, r3
    cba4:	7b1b      	ldrb	r3, [r3, #12]
    cba6:	061b      	lsls	r3, r3, #24
    cba8:	430b      	orrs	r3, r1
    cbaa:	001a      	movs	r2, r3
    cbac:	693b      	ldr	r3, [r7, #16]
    cbae:	429a      	cmp	r2, r3
    cbb0:	d848      	bhi.n	cc44 <LORAREG_GetAttr_minLBTChPauseTimer+0x148>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    cbb2:	2315      	movs	r3, #21
    cbb4:	18fb      	adds	r3, r7, r3
    cbb6:	781a      	ldrb	r2, [r3, #0]
    cbb8:	4b31      	ldr	r3, [pc, #196]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cbba:	7919      	ldrb	r1, [r3, #4]
    cbbc:	7958      	ldrb	r0, [r3, #5]
    cbbe:	0200      	lsls	r0, r0, #8
    cbc0:	4301      	orrs	r1, r0
    cbc2:	7998      	ldrb	r0, [r3, #6]
    cbc4:	0400      	lsls	r0, r0, #16
    cbc6:	4301      	orrs	r1, r0
    cbc8:	79db      	ldrb	r3, [r3, #7]
    cbca:	061b      	lsls	r3, r3, #24
    cbcc:	430b      	orrs	r3, r1
    cbce:	0019      	movs	r1, r3
    cbd0:	2317      	movs	r3, #23
    cbd2:	18fb      	adds	r3, r7, r3
    cbd4:	781b      	ldrb	r3, [r3, #0]
    cbd6:	005b      	lsls	r3, r3, #1
    cbd8:	18cb      	adds	r3, r1, r3
    cbda:	785b      	ldrb	r3, [r3, #1]
    cbdc:	071b      	lsls	r3, r3, #28
    cbde:	0f1b      	lsrs	r3, r3, #28
    cbe0:	b2db      	uxtb	r3, r3
    cbe2:	429a      	cmp	r2, r3
    cbe4:	db2e      	blt.n	cc44 <LORAREG_GetAttr_minLBTChPauseTimer+0x148>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    cbe6:	2315      	movs	r3, #21
    cbe8:	18fb      	adds	r3, r7, r3
    cbea:	781a      	ldrb	r2, [r3, #0]
    cbec:	4b24      	ldr	r3, [pc, #144]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cbee:	7919      	ldrb	r1, [r3, #4]
    cbf0:	7958      	ldrb	r0, [r3, #5]
    cbf2:	0200      	lsls	r0, r0, #8
    cbf4:	4301      	orrs	r1, r0
    cbf6:	7998      	ldrb	r0, [r3, #6]
    cbf8:	0400      	lsls	r0, r0, #16
    cbfa:	4301      	orrs	r1, r0
    cbfc:	79db      	ldrb	r3, [r3, #7]
    cbfe:	061b      	lsls	r3, r3, #24
    cc00:	430b      	orrs	r3, r1
    cc02:	0019      	movs	r1, r3
    cc04:	2317      	movs	r3, #23
    cc06:	18fb      	adds	r3, r7, r3
    cc08:	781b      	ldrb	r3, [r3, #0]
    cc0a:	005b      	lsls	r3, r3, #1
    cc0c:	18cb      	adds	r3, r1, r3
    cc0e:	785b      	ldrb	r3, [r3, #1]
    cc10:	061b      	lsls	r3, r3, #24
    cc12:	0f1b      	lsrs	r3, r3, #28
    cc14:	b2db      	uxtb	r3, r3
    cc16:	429a      	cmp	r2, r3
    cc18:	dc14      	bgt.n	cc44 <LORAREG_GetAttr_minLBTChPauseTimer+0x148>
		{
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    cc1a:	2317      	movs	r3, #23
    cc1c:	18fb      	adds	r3, r7, r3
    cc1e:	781b      	ldrb	r3, [r3, #0]
    cc20:	4a17      	ldr	r2, [pc, #92]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cc22:	3358      	adds	r3, #88	; 0x58
    cc24:	009b      	lsls	r3, r3, #2
    cc26:	18d1      	adds	r1, r2, r3
    cc28:	7a49      	ldrb	r1, [r1, #9]
    cc2a:	18d0      	adds	r0, r2, r3
    cc2c:	7a80      	ldrb	r0, [r0, #10]
    cc2e:	0200      	lsls	r0, r0, #8
    cc30:	4301      	orrs	r1, r0
    cc32:	18d0      	adds	r0, r2, r3
    cc34:	7ac0      	ldrb	r0, [r0, #11]
    cc36:	0400      	lsls	r0, r0, #16
    cc38:	4301      	orrs	r1, r0
    cc3a:	18d3      	adds	r3, r2, r3
    cc3c:	7b1b      	ldrb	r3, [r3, #12]
    cc3e:	061b      	lsls	r3, r3, #24
    cc40:	430b      	orrs	r3, r1
    cc42:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    cc44:	2317      	movs	r3, #23
    cc46:	18fb      	adds	r3, r7, r3
    cc48:	781a      	ldrb	r2, [r3, #0]
    cc4a:	2317      	movs	r3, #23
    cc4c:	18fb      	adds	r3, r7, r3
    cc4e:	3201      	adds	r2, #1
    cc50:	701a      	strb	r2, [r3, #0]
    cc52:	2317      	movs	r3, #23
    cc54:	18fb      	adds	r3, r7, r3
    cc56:	781b      	ldrb	r3, [r3, #0]
    cc58:	4a09      	ldr	r2, [pc, #36]	; (cc80 <LORAREG_GetAttr_minLBTChPauseTimer+0x184>)
    cc5a:	212a      	movs	r1, #42	; 0x2a
    cc5c:	5652      	ldrsb	r2, [r2, r1]
    cc5e:	4293      	cmp	r3, r2
    cc60:	da00      	bge.n	cc64 <LORAREG_GetAttr_minLBTChPauseTimer+0x168>
    cc62:	e765      	b.n	cb30 <LORAREG_GetAttr_minLBTChPauseTimer+0x34>
		}
	}
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    cc64:	2310      	movs	r3, #16
    cc66:	18f9      	adds	r1, r7, r3
    cc68:	687b      	ldr	r3, [r7, #4]
    cc6a:	2204      	movs	r2, #4
    cc6c:	0018      	movs	r0, r3
    cc6e:	4b05      	ldr	r3, [pc, #20]	; (cc84 <LORAREG_GetAttr_minLBTChPauseTimer+0x188>)
    cc70:	4798      	blx	r3
	return retVal;
    cc72:	2316      	movs	r3, #22
    cc74:	18fb      	adds	r3, r7, r3
    cc76:	781b      	ldrb	r3, [r3, #0]
}
    cc78:	0018      	movs	r0, r3
    cc7a:	46bd      	mov	sp, r7
    cc7c:	b006      	add	sp, #24
    cc7e:	bd80      	pop	{r7, pc}
    cc80:	200014a8 	.word	0x200014a8
    cc84:	00024149 	.word	0x00024149

0000cc88 <LORAREG_InitValidateAttrFnPtrsNA>:
#endif

#if(NA_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsNA(void)
{
    cc88:	b580      	push	{r7, lr}
    cc8a:	af00      	add	r7, sp, #0
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    cc8c:	4b15      	ldr	r3, [pc, #84]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    cc8e:	4a16      	ldr	r2, [pc, #88]	; (cce8 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    cc90:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    cc92:	4b14      	ldr	r3, [pc, #80]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    cc94:	4a15      	ldr	r2, [pc, #84]	; (ccec <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    cc96:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    cc98:	4b12      	ldr	r3, [pc, #72]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    cc9a:	4a15      	ldr	r2, [pc, #84]	; (ccf0 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    cc9c:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    cc9e:	4b11      	ldr	r3, [pc, #68]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    cca0:	4a14      	ldr	r2, [pc, #80]	; (ccf4 <LORAREG_InitValidateAttrFnPtrsNA+0x6c>)
    cca2:	641a      	str	r2, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cca4:	4b0f      	ldr	r3, [pc, #60]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    cca6:	4a14      	ldr	r2, [pc, #80]	; (ccf8 <LORAREG_InitValidateAttrFnPtrsNA+0x70>)
    cca8:	645a      	str	r2, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    ccaa:	4b0e      	ldr	r3, [pc, #56]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccac:	4a13      	ldr	r2, [pc, #76]	; (ccfc <LORAREG_InitValidateAttrFnPtrsNA+0x74>)
    ccae:	649a      	str	r2, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    ccb0:	4b0c      	ldr	r3, [pc, #48]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccb2:	4a13      	ldr	r2, [pc, #76]	; (cd00 <LORAREG_InitValidateAttrFnPtrsNA+0x78>)
    ccb4:	655a      	str	r2, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    ccb6:	4b0b      	ldr	r3, [pc, #44]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccb8:	4a0d      	ldr	r2, [pc, #52]	; (ccf0 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    ccba:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    ccbc:	4b09      	ldr	r3, [pc, #36]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccbe:	4a11      	ldr	r2, [pc, #68]	; (cd04 <LORAREG_InitValidateAttrFnPtrsNA+0x7c>)
    ccc0:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    ccc2:	4b08      	ldr	r3, [pc, #32]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccc4:	4a10      	ldr	r2, [pc, #64]	; (cd08 <LORAREG_InitValidateAttrFnPtrsNA+0x80>)
    ccc6:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    ccc8:	4b06      	ldr	r3, [pc, #24]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccca:	4a10      	ldr	r2, [pc, #64]	; (cd0c <LORAREG_InitValidateAttrFnPtrsNA+0x84>)
    cccc:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    ccce:	4b05      	ldr	r3, [pc, #20]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccd0:	4a0f      	ldr	r2, [pc, #60]	; (cd10 <LORAREG_InitValidateAttrFnPtrsNA+0x88>)
    ccd2:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    ccd4:	4b03      	ldr	r3, [pc, #12]	; (cce4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    ccd6:	21dc      	movs	r1, #220	; 0xdc
    ccd8:	4a0e      	ldr	r2, [pc, #56]	; (cd14 <LORAREG_InitValidateAttrFnPtrsNA+0x8c>)
    ccda:	505a      	str	r2, [r3, r1]
}
    ccdc:	46c0      	nop			; (mov r8, r8)
    ccde:	46bd      	mov	sp, r7
    cce0:	bd80      	pop	{r7, pc}
    cce2:	46c0      	nop			; (mov r8, r8)
    cce4:	20000dc8 	.word	0x20000dc8
    cce8:	0000fcfd 	.word	0x0000fcfd
    ccec:	0000fd65 	.word	0x0000fd65
    ccf0:	0000d7ed 	.word	0x0000d7ed
    ccf4:	0000d735 	.word	0x0000d735
    ccf8:	0000fc09 	.word	0x0000fc09
    ccfc:	0000fe05 	.word	0x0000fe05
    cd00:	0000d8b9 	.word	0x0000d8b9
    cd04:	0000fff1 	.word	0x0000fff1
    cd08:	0000f20d 	.word	0x0000f20d
    cd0c:	0000db55 	.word	0x0000db55
    cd10:	0000e635 	.word	0x0000e635
    cd14:	0000dba1 	.word	0x0000dba1

0000cd18 <LORAREG_InitValidateAttrFnPtrsEU>:
#endif

#if(EU_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsEU(void)
{
    cd18:	b580      	push	{r7, lr}
    cd1a:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    cd1c:	4b15      	ldr	r3, [pc, #84]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd1e:	4a16      	ldr	r2, [pc, #88]	; (cd78 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    cd20:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    cd22:	4b14      	ldr	r3, [pc, #80]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd24:	4a15      	ldr	r2, [pc, #84]	; (cd7c <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    cd26:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    cd28:	4b12      	ldr	r3, [pc, #72]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd2a:	4a15      	ldr	r2, [pc, #84]	; (cd80 <LORAREG_InitValidateAttrFnPtrsEU+0x68>)
    cd2c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    cd2e:	4b11      	ldr	r3, [pc, #68]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd30:	4a13      	ldr	r2, [pc, #76]	; (cd80 <LORAREG_InitValidateAttrFnPtrsEU+0x68>)
    cd32:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cd34:	4b0f      	ldr	r3, [pc, #60]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd36:	4a13      	ldr	r2, [pc, #76]	; (cd84 <LORAREG_InitValidateAttrFnPtrsEU+0x6c>)
    cd38:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    cd3a:	4b0e      	ldr	r3, [pc, #56]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd3c:	4a12      	ldr	r2, [pc, #72]	; (cd88 <LORAREG_InitValidateAttrFnPtrsEU+0x70>)
    cd3e:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    cd40:	4b0c      	ldr	r3, [pc, #48]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd42:	4a12      	ldr	r2, [pc, #72]	; (cd8c <LORAREG_InitValidateAttrFnPtrsEU+0x74>)
    cd44:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    cd46:	4b0b      	ldr	r3, [pc, #44]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd48:	4a0d      	ldr	r2, [pc, #52]	; (cd80 <LORAREG_InitValidateAttrFnPtrsEU+0x68>)
    cd4a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    cd4c:	4b09      	ldr	r3, [pc, #36]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd4e:	4a10      	ldr	r2, [pc, #64]	; (cd90 <LORAREG_InitValidateAttrFnPtrsEU+0x78>)
    cd50:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    cd52:	4b08      	ldr	r3, [pc, #32]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd54:	4a0f      	ldr	r2, [pc, #60]	; (cd94 <LORAREG_InitValidateAttrFnPtrsEU+0x7c>)
    cd56:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    cd58:	4b06      	ldr	r3, [pc, #24]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd5a:	4a0f      	ldr	r2, [pc, #60]	; (cd98 <LORAREG_InitValidateAttrFnPtrsEU+0x80>)
    cd5c:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    cd5e:	4b05      	ldr	r3, [pc, #20]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd60:	4a0e      	ldr	r2, [pc, #56]	; (cd9c <LORAREG_InitValidateAttrFnPtrsEU+0x84>)
    cd62:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    cd64:	4b03      	ldr	r3, [pc, #12]	; (cd74 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    cd66:	21dc      	movs	r1, #220	; 0xdc
    cd68:	4a0d      	ldr	r2, [pc, #52]	; (cda0 <LORAREG_InitValidateAttrFnPtrsEU+0x88>)
    cd6a:	505a      	str	r2, [r3, r1]
}
    cd6c:	46c0      	nop			; (mov r8, r8)
    cd6e:	46bd      	mov	sp, r7
    cd70:	bd80      	pop	{r7, pc}
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	20000dc8 	.word	0x20000dc8
    cd78:	0001003d 	.word	0x0001003d
    cd7c:	00010081 	.word	0x00010081
    cd80:	0000fbb5 	.word	0x0000fbb5
    cd84:	0000fc09 	.word	0x0000fc09
    cd88:	0000ff55 	.word	0x0000ff55
    cd8c:	0000d905 	.word	0x0000d905
    cd90:	0000fff1 	.word	0x0000fff1
    cd94:	0000f225 	.word	0x0000f225
    cd98:	0000f2f9 	.word	0x0000f2f9
    cd9c:	0000e635 	.word	0x0000e635
    cda0:	0000dc2d 	.word	0x0000dc2d

0000cda4 <LORAREG_InitValidateAttrFnPtrsAS>:
#endif

#if(AS_BAND == 1 )
void LORAREG_InitValidateAttrFnPtrsAS(void)
{
    cda4:	b580      	push	{r7, lr}
    cda6:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    cda8:	4b15      	ldr	r3, [pc, #84]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdaa:	4a16      	ldr	r2, [pc, #88]	; (ce04 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    cdac:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    cdae:	4b14      	ldr	r3, [pc, #80]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdb0:	4a15      	ldr	r2, [pc, #84]	; (ce08 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    cdb2:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    cdb4:	4b12      	ldr	r3, [pc, #72]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdb6:	4a15      	ldr	r2, [pc, #84]	; (ce0c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    cdb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    cdba:	4b11      	ldr	r3, [pc, #68]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdbc:	4a14      	ldr	r2, [pc, #80]	; (ce10 <LORAREG_InitValidateAttrFnPtrsAS+0x6c>)
    cdbe:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cdc0:	4b0f      	ldr	r3, [pc, #60]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdc2:	4a14      	ldr	r2, [pc, #80]	; (ce14 <LORAREG_InitValidateAttrFnPtrsAS+0x70>)
    cdc4:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    cdc6:	4b0e      	ldr	r3, [pc, #56]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdc8:	4a13      	ldr	r2, [pc, #76]	; (ce18 <LORAREG_InitValidateAttrFnPtrsAS+0x74>)
    cdca:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    cdcc:	4b0c      	ldr	r3, [pc, #48]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdce:	4a13      	ldr	r2, [pc, #76]	; (ce1c <LORAREG_InitValidateAttrFnPtrsAS+0x78>)
    cdd0:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    cdd2:	4b0b      	ldr	r3, [pc, #44]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdd4:	4a0d      	ldr	r2, [pc, #52]	; (ce0c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    cdd6:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    cdd8:	4b09      	ldr	r3, [pc, #36]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdda:	4a11      	ldr	r2, [pc, #68]	; (ce20 <LORAREG_InitValidateAttrFnPtrsAS+0x7c>)
    cddc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    cdde:	4b08      	ldr	r3, [pc, #32]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cde0:	4a10      	ldr	r2, [pc, #64]	; (ce24 <LORAREG_InitValidateAttrFnPtrsAS+0x80>)
    cde2:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    cde4:	4b06      	ldr	r3, [pc, #24]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cde6:	4a10      	ldr	r2, [pc, #64]	; (ce28 <LORAREG_InitValidateAttrFnPtrsAS+0x84>)
    cde8:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    cdea:	4b05      	ldr	r3, [pc, #20]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdec:	4a0f      	ldr	r2, [pc, #60]	; (ce2c <LORAREG_InitValidateAttrFnPtrsAS+0x88>)
    cdee:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    cdf0:	4b03      	ldr	r3, [pc, #12]	; (ce00 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    cdf2:	21dc      	movs	r1, #220	; 0xdc
    cdf4:	4a0e      	ldr	r2, [pc, #56]	; (ce30 <LORAREG_InitValidateAttrFnPtrsAS+0x8c>)
    cdf6:	505a      	str	r2, [r3, r1]
}
    cdf8:	46c0      	nop			; (mov r8, r8)
    cdfa:	46bd      	mov	sp, r7
    cdfc:	bd80      	pop	{r7, pc}
    cdfe:	46c0      	nop			; (mov r8, r8)
    ce00:	20000dc8 	.word	0x20000dc8
    ce04:	00010f4d 	.word	0x00010f4d
    ce08:	00010081 	.word	0x00010081
    ce0c:	0000d84d 	.word	0x0000d84d
    ce10:	0000d781 	.word	0x0000d781
    ce14:	0000fc09 	.word	0x0000fc09
    ce18:	0000ff55 	.word	0x0000ff55
    ce1c:	0000d905 	.word	0x0000d905
    ce20:	0000fff1 	.word	0x0000fff1
    ce24:	0000f225 	.word	0x0000f225
    ce28:	0000f2f9 	.word	0x0000f2f9
    ce2c:	0000e635 	.word	0x0000e635
    ce30:	0000dc2d 	.word	0x0000dc2d

0000ce34 <LORAREG_InitValidateAttrFnPtrsAU>:
#endif

#if(AU_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsAU(void)
{
    ce34:	b580      	push	{r7, lr}
    ce36:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    ce38:	4b15      	ldr	r3, [pc, #84]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce3a:	4a16      	ldr	r2, [pc, #88]	; (ce94 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    ce3c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    ce3e:	4b14      	ldr	r3, [pc, #80]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce40:	4a15      	ldr	r2, [pc, #84]	; (ce98 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    ce42:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    ce44:	4b12      	ldr	r3, [pc, #72]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce46:	4a15      	ldr	r2, [pc, #84]	; (ce9c <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    ce48:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    ce4a:	4b11      	ldr	r3, [pc, #68]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce4c:	4a14      	ldr	r2, [pc, #80]	; (cea0 <LORAREG_InitValidateAttrFnPtrsAU+0x6c>)
    ce4e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    ce50:	4b0f      	ldr	r3, [pc, #60]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce52:	4a14      	ldr	r2, [pc, #80]	; (cea4 <LORAREG_InitValidateAttrFnPtrsAU+0x70>)
    ce54:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    ce56:	4b0e      	ldr	r3, [pc, #56]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce58:	4a13      	ldr	r2, [pc, #76]	; (cea8 <LORAREG_InitValidateAttrFnPtrsAU+0x74>)
    ce5a:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    ce5c:	4b0c      	ldr	r3, [pc, #48]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce5e:	4a13      	ldr	r2, [pc, #76]	; (ceac <LORAREG_InitValidateAttrFnPtrsAU+0x78>)
    ce60:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    ce62:	4b0b      	ldr	r3, [pc, #44]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce64:	4a0d      	ldr	r2, [pc, #52]	; (ce9c <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    ce66:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    ce68:	4b09      	ldr	r3, [pc, #36]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce6a:	4a11      	ldr	r2, [pc, #68]	; (ceb0 <LORAREG_InitValidateAttrFnPtrsAU+0x7c>)
    ce6c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    ce6e:	4b08      	ldr	r3, [pc, #32]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce70:	4a10      	ldr	r2, [pc, #64]	; (ceb4 <LORAREG_InitValidateAttrFnPtrsAU+0x80>)
    ce72:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    ce74:	4b06      	ldr	r3, [pc, #24]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce76:	4a10      	ldr	r2, [pc, #64]	; (ceb8 <LORAREG_InitValidateAttrFnPtrsAU+0x84>)
    ce78:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    ce7a:	4b05      	ldr	r3, [pc, #20]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce7c:	4a0f      	ldr	r2, [pc, #60]	; (cebc <LORAREG_InitValidateAttrFnPtrsAU+0x88>)
    ce7e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    ce80:	4b03      	ldr	r3, [pc, #12]	; (ce90 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    ce82:	21dc      	movs	r1, #220	; 0xdc
    ce84:	4a0e      	ldr	r2, [pc, #56]	; (cec0 <LORAREG_InitValidateAttrFnPtrsAU+0x8c>)
    ce86:	505a      	str	r2, [r3, r1]
}
    ce88:	46c0      	nop			; (mov r8, r8)
    ce8a:	46bd      	mov	sp, r7
    ce8c:	bd80      	pop	{r7, pc}
    ce8e:	46c0      	nop			; (mov r8, r8)
    ce90:	20000dc8 	.word	0x20000dc8
    ce94:	0000fcfd 	.word	0x0000fcfd
    ce98:	0000fd65 	.word	0x0000fd65
    ce9c:	0000d7ed 	.word	0x0000d7ed
    cea0:	0000d735 	.word	0x0000d735
    cea4:	0000fc09 	.word	0x0000fc09
    cea8:	0000fe05 	.word	0x0000fe05
    ceac:	0000d8b9 	.word	0x0000d8b9
    ceb0:	0000fff1 	.word	0x0000fff1
    ceb4:	0000f20d 	.word	0x0000f20d
    ceb8:	0000db55 	.word	0x0000db55
    cebc:	0000e635 	.word	0x0000e635
    cec0:	0000dba1 	.word	0x0000dba1

0000cec4 <LORAREG_InitValidateAttrFnPtrsIN>:
#endif

#if(IND_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsIN(void)
{
    cec4:	b580      	push	{r7, lr}
    cec6:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    cec8:	4b15      	ldr	r3, [pc, #84]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    ceca:	4a16      	ldr	r2, [pc, #88]	; (cf24 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    cecc:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    cece:	4b14      	ldr	r3, [pc, #80]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    ced0:	4a15      	ldr	r2, [pc, #84]	; (cf28 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    ced2:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    ced4:	4b12      	ldr	r3, [pc, #72]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    ced6:	4a15      	ldr	r2, [pc, #84]	; (cf2c <LORAREG_InitValidateAttrFnPtrsIN+0x68>)
    ced8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    ceda:	4b11      	ldr	r3, [pc, #68]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cedc:	4a13      	ldr	r2, [pc, #76]	; (cf2c <LORAREG_InitValidateAttrFnPtrsIN+0x68>)
    cede:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cee0:	4b0f      	ldr	r3, [pc, #60]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cee2:	4a13      	ldr	r2, [pc, #76]	; (cf30 <LORAREG_InitValidateAttrFnPtrsIN+0x6c>)
    cee4:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    cee6:	4b0e      	ldr	r3, [pc, #56]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cee8:	4a12      	ldr	r2, [pc, #72]	; (cf34 <LORAREG_InitValidateAttrFnPtrsIN+0x70>)
    ceea:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    ceec:	4b0c      	ldr	r3, [pc, #48]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    ceee:	4a12      	ldr	r2, [pc, #72]	; (cf38 <LORAREG_InitValidateAttrFnPtrsIN+0x74>)
    cef0:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    cef2:	4b0b      	ldr	r3, [pc, #44]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cef4:	4a0d      	ldr	r2, [pc, #52]	; (cf2c <LORAREG_InitValidateAttrFnPtrsIN+0x68>)
    cef6:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    cef8:	4b09      	ldr	r3, [pc, #36]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cefa:	4a10      	ldr	r2, [pc, #64]	; (cf3c <LORAREG_InitValidateAttrFnPtrsIN+0x78>)
    cefc:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    cefe:	4b08      	ldr	r3, [pc, #32]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cf00:	4a0f      	ldr	r2, [pc, #60]	; (cf40 <LORAREG_InitValidateAttrFnPtrsIN+0x7c>)
    cf02:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    cf04:	4b06      	ldr	r3, [pc, #24]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cf06:	4a0f      	ldr	r2, [pc, #60]	; (cf44 <LORAREG_InitValidateAttrFnPtrsIN+0x80>)
    cf08:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    cf0a:	4b05      	ldr	r3, [pc, #20]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cf0c:	4a0e      	ldr	r2, [pc, #56]	; (cf48 <LORAREG_InitValidateAttrFnPtrsIN+0x84>)
    cf0e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    cf10:	4b03      	ldr	r3, [pc, #12]	; (cf20 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    cf12:	21dc      	movs	r1, #220	; 0xdc
    cf14:	4a0d      	ldr	r2, [pc, #52]	; (cf4c <LORAREG_InitValidateAttrFnPtrsIN+0x88>)
    cf16:	505a      	str	r2, [r3, r1]
}
    cf18:	46c0      	nop			; (mov r8, r8)
    cf1a:	46bd      	mov	sp, r7
    cf1c:	bd80      	pop	{r7, pc}
    cf1e:	46c0      	nop			; (mov r8, r8)
    cf20:	20000dc8 	.word	0x20000dc8
    cf24:	000100d1 	.word	0x000100d1
    cf28:	00010081 	.word	0x00010081
    cf2c:	0000fbb5 	.word	0x0000fbb5
    cf30:	0000fc09 	.word	0x0000fc09
    cf34:	0000ff55 	.word	0x0000ff55
    cf38:	0000d905 	.word	0x0000d905
    cf3c:	0000fff1 	.word	0x0000fff1
    cf40:	0000f225 	.word	0x0000f225
    cf44:	0000f2f9 	.word	0x0000f2f9
    cf48:	0000e635 	.word	0x0000e635
    cf4c:	0000dc2d 	.word	0x0000dc2d

0000cf50 <LORAREG_InitValidateAttrFnPtrsJP>:
#endif

#if( JPN_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsJP(void)
{
    cf50:	b580      	push	{r7, lr}
    cf52:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    cf54:	4b15      	ldr	r3, [pc, #84]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf56:	4a16      	ldr	r2, [pc, #88]	; (cfb0 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    cf58:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    cf5a:	4b14      	ldr	r3, [pc, #80]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf5c:	4a15      	ldr	r2, [pc, #84]	; (cfb4 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    cf5e:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    cf60:	4b12      	ldr	r3, [pc, #72]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf62:	4a15      	ldr	r2, [pc, #84]	; (cfb8 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    cf64:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    cf66:	4b11      	ldr	r3, [pc, #68]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf68:	4a14      	ldr	r2, [pc, #80]	; (cfbc <LORAREG_InitValidateAttrFnPtrsJP+0x6c>)
    cf6a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cf6c:	4b0f      	ldr	r3, [pc, #60]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf6e:	4a14      	ldr	r2, [pc, #80]	; (cfc0 <LORAREG_InitValidateAttrFnPtrsJP+0x70>)
    cf70:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    cf72:	4b0e      	ldr	r3, [pc, #56]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf74:	4a13      	ldr	r2, [pc, #76]	; (cfc4 <LORAREG_InitValidateAttrFnPtrsJP+0x74>)
    cf76:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    cf78:	4b0c      	ldr	r3, [pc, #48]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf7a:	4a13      	ldr	r2, [pc, #76]	; (cfc8 <LORAREG_InitValidateAttrFnPtrsJP+0x78>)
    cf7c:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    cf7e:	4b0b      	ldr	r3, [pc, #44]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf80:	4a0d      	ldr	r2, [pc, #52]	; (cfb8 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    cf82:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    cf84:	4b09      	ldr	r3, [pc, #36]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf86:	4a11      	ldr	r2, [pc, #68]	; (cfcc <LORAREG_InitValidateAttrFnPtrsJP+0x7c>)
    cf88:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    cf8a:	4b08      	ldr	r3, [pc, #32]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf8c:	4a10      	ldr	r2, [pc, #64]	; (cfd0 <LORAREG_InitValidateAttrFnPtrsJP+0x80>)
    cf8e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    cf90:	4b06      	ldr	r3, [pc, #24]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf92:	4a10      	ldr	r2, [pc, #64]	; (cfd4 <LORAREG_InitValidateAttrFnPtrsJP+0x84>)
    cf94:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    cf96:	4b05      	ldr	r3, [pc, #20]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf98:	4a0f      	ldr	r2, [pc, #60]	; (cfd8 <LORAREG_InitValidateAttrFnPtrsJP+0x88>)
    cf9a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    cf9c:	4b03      	ldr	r3, [pc, #12]	; (cfac <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    cf9e:	21dc      	movs	r1, #220	; 0xdc
    cfa0:	4a0e      	ldr	r2, [pc, #56]	; (cfdc <LORAREG_InitValidateAttrFnPtrsJP+0x8c>)
    cfa2:	505a      	str	r2, [r3, r1]
}
    cfa4:	46c0      	nop			; (mov r8, r8)
    cfa6:	46bd      	mov	sp, r7
    cfa8:	bd80      	pop	{r7, pc}
    cfaa:	46c0      	nop			; (mov r8, r8)
    cfac:	20000dc8 	.word	0x20000dc8
    cfb0:	0001012d 	.word	0x0001012d
    cfb4:	00010081 	.word	0x00010081
    cfb8:	0000d84d 	.word	0x0000d84d
    cfbc:	0000d781 	.word	0x0000d781
    cfc0:	0000fc09 	.word	0x0000fc09
    cfc4:	0000ff55 	.word	0x0000ff55
    cfc8:	0000d905 	.word	0x0000d905
    cfcc:	0000fff1 	.word	0x0000fff1
    cfd0:	0000f225 	.word	0x0000f225
    cfd4:	0000f2f9 	.word	0x0000f2f9
    cfd8:	0000e635 	.word	0x0000e635
    cfdc:	0000dc2d 	.word	0x0000dc2d

0000cfe0 <LORAREG_InitValidateAttrFnPtrsKR>:
#endif

#if(KR_BAND == 1)
void LORAREG_InitValidateAttrFnPtrsKR(void)
{
    cfe0:	b580      	push	{r7, lr}
    cfe2:	af00      	add	r7, sp, #0
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    cfe4:	4b15      	ldr	r3, [pc, #84]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    cfe6:	4a16      	ldr	r2, [pc, #88]	; (d040 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    cfe8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    cfea:	4b14      	ldr	r3, [pc, #80]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    cfec:	4a15      	ldr	r2, [pc, #84]	; (d044 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    cfee:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    cff0:	4b12      	ldr	r3, [pc, #72]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    cff2:	4a15      	ldr	r2, [pc, #84]	; (d048 <LORAREG_InitValidateAttrFnPtrsKR+0x68>)
    cff4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    cff6:	4b11      	ldr	r3, [pc, #68]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    cff8:	4a13      	ldr	r2, [pc, #76]	; (d048 <LORAREG_InitValidateAttrFnPtrsKR+0x68>)
    cffa:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    cffc:	4b0f      	ldr	r3, [pc, #60]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    cffe:	4a13      	ldr	r2, [pc, #76]	; (d04c <LORAREG_InitValidateAttrFnPtrsKR+0x6c>)
    d000:	645a      	str	r2, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d002:	4b0e      	ldr	r3, [pc, #56]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d004:	4a12      	ldr	r2, [pc, #72]	; (d050 <LORAREG_InitValidateAttrFnPtrsKR+0x70>)
    d006:	649a      	str	r2, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d008:	4b0c      	ldr	r3, [pc, #48]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d00a:	4a12      	ldr	r2, [pc, #72]	; (d054 <LORAREG_InitValidateAttrFnPtrsKR+0x74>)
    d00c:	655a      	str	r2, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d00e:	4b0b      	ldr	r3, [pc, #44]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d010:	4a0d      	ldr	r2, [pc, #52]	; (d048 <LORAREG_InitValidateAttrFnPtrsKR+0x68>)
    d012:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d014:	4b09      	ldr	r3, [pc, #36]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d016:	4a10      	ldr	r2, [pc, #64]	; (d058 <LORAREG_InitValidateAttrFnPtrsKR+0x78>)
    d018:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d01a:	4b08      	ldr	r3, [pc, #32]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d01c:	4a0f      	ldr	r2, [pc, #60]	; (d05c <LORAREG_InitValidateAttrFnPtrsKR+0x7c>)
    d01e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d020:	4b06      	ldr	r3, [pc, #24]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d022:	4a0f      	ldr	r2, [pc, #60]	; (d060 <LORAREG_InitValidateAttrFnPtrsKR+0x80>)
    d024:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d026:	4b05      	ldr	r3, [pc, #20]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d028:	4a0e      	ldr	r2, [pc, #56]	; (d064 <LORAREG_InitValidateAttrFnPtrsKR+0x84>)
    d02a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d02c:	4b03      	ldr	r3, [pc, #12]	; (d03c <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d02e:	21dc      	movs	r1, #220	; 0xdc
    d030:	4a0d      	ldr	r2, [pc, #52]	; (d068 <LORAREG_InitValidateAttrFnPtrsKR+0x88>)
    d032:	505a      	str	r2, [r3, r1]
}
    d034:	46c0      	nop			; (mov r8, r8)
    d036:	46bd      	mov	sp, r7
    d038:	bd80      	pop	{r7, pc}
    d03a:	46c0      	nop			; (mov r8, r8)
    d03c:	20000dc8 	.word	0x20000dc8
    d040:	00010189 	.word	0x00010189
    d044:	00010081 	.word	0x00010081
    d048:	0000fbb5 	.word	0x0000fbb5
    d04c:	0000fc09 	.word	0x0000fc09
    d050:	0000ff55 	.word	0x0000ff55
    d054:	0000d905 	.word	0x0000d905
    d058:	0000fff1 	.word	0x0000fff1
    d05c:	0000f225 	.word	0x0000f225
    d060:	0000f2f9 	.word	0x0000f2f9
    d064:	0000e635 	.word	0x0000e635
    d068:	0000dc2d 	.word	0x0000dc2d

0000d06c <LORAREG_InitSetAttrFnPtrsNA>:
#endif

#if(NA_BAND == 1)
void LORAREG_InitSetAttrFnPtrsNA(void)
{
    d06c:	b580      	push	{r7, lr}
    d06e:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRange;
    d070:	4b0f      	ldr	r3, [pc, #60]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d072:	4a10      	ldr	r2, [pc, #64]	; (d0b4 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    d074:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d076:	4b0e      	ldr	r3, [pc, #56]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d078:	4a0f      	ldr	r2, [pc, #60]	; (d0b8 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    d07a:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d07c:	4b0c      	ldr	r3, [pc, #48]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d07e:	4a0f      	ldr	r2, [pc, #60]	; (d0bc <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    d080:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d082:	4b0b      	ldr	r3, [pc, #44]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d084:	21e4      	movs	r1, #228	; 0xe4
    d086:	4a0e      	ldr	r2, [pc, #56]	; (d0c0 <LORAREG_InitSetAttrFnPtrsNA+0x54>)
    d088:	505a      	str	r2, [r3, r1]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d08a:	4b09      	ldr	r3, [pc, #36]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d08c:	21e8      	movs	r1, #232	; 0xe8
    d08e:	4a0d      	ldr	r2, [pc, #52]	; (d0c4 <LORAREG_InitSetAttrFnPtrsNA+0x58>)
    d090:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d092:	4b07      	ldr	r3, [pc, #28]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d094:	2180      	movs	r1, #128	; 0x80
    d096:	4a0c      	ldr	r2, [pc, #48]	; (d0c8 <LORAREG_InitSetAttrFnPtrsNA+0x5c>)
    d098:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d09a:	4b05      	ldr	r3, [pc, #20]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d09c:	2184      	movs	r1, #132	; 0x84
    d09e:	4a0b      	ldr	r2, [pc, #44]	; (d0cc <LORAREG_InitSetAttrFnPtrsNA+0x60>)
    d0a0:	505a      	str	r2, [r3, r1]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d0a2:	4b03      	ldr	r3, [pc, #12]	; (d0b0 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d0a4:	21e0      	movs	r1, #224	; 0xe0
    d0a6:	4a0a      	ldr	r2, [pc, #40]	; (d0d0 <LORAREG_InitSetAttrFnPtrsNA+0x64>)
    d0a8:	505a      	str	r2, [r3, r1]
}
    d0aa:	46c0      	nop			; (mov r8, r8)
    d0ac:	46bd      	mov	sp, r7
    d0ae:	bd80      	pop	{r7, pc}
    d0b0:	20000ebc 	.word	0x20000ebc
    d0b4:	000102e1 	.word	0x000102e1
    d0b8:	00010635 	.word	0x00010635
    d0bc:	00010805 	.word	0x00010805
    d0c0:	00012e5d 	.word	0x00012e5d
    d0c4:	00012f8d 	.word	0x00012f8d
    d0c8:	00011a29 	.word	0x00011a29
    d0cc:	00011f89 	.word	0x00011f89
    d0d0:	00012025 	.word	0x00012025

0000d0d4 <LORAREG_InitSetAttrFnPtrsEU>:
#endif

#if(EU_BAND == 1)
void LORAREG_InitSetAttrFnPtrsEU(void)
{
    d0d4:	b580      	push	{r7, lr}
    d0d6:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d0d8:	4b14      	ldr	r3, [pc, #80]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0da:	4a15      	ldr	r2, [pc, #84]	; (d130 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    d0dc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d0de:	4b13      	ldr	r3, [pc, #76]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0e0:	4a14      	ldr	r2, [pc, #80]	; (d134 <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    d0e2:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d0e4:	4b11      	ldr	r3, [pc, #68]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0e6:	4a14      	ldr	r2, [pc, #80]	; (d138 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    d0e8:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d0ea:	4b10      	ldr	r3, [pc, #64]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0ec:	4a13      	ldr	r2, [pc, #76]	; (d13c <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    d0ee:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    d0f0:	4b0e      	ldr	r3, [pc, #56]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0f2:	4a13      	ldr	r2, [pc, #76]	; (d140 <LORAREG_InitSetAttrFnPtrsEU+0x6c>)
    d0f4:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d0f6:	4b0d      	ldr	r3, [pc, #52]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0f8:	4a12      	ldr	r2, [pc, #72]	; (d144 <LORAREG_InitSetAttrFnPtrsEU+0x70>)
    d0fa:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d0fc:	4b0b      	ldr	r3, [pc, #44]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d0fe:	2180      	movs	r1, #128	; 0x80
    d100:	4a11      	ldr	r2, [pc, #68]	; (d148 <LORAREG_InitSetAttrFnPtrsEU+0x74>)
    d102:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d104:	4b09      	ldr	r3, [pc, #36]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d106:	2184      	movs	r1, #132	; 0x84
    d108:	4a10      	ldr	r2, [pc, #64]	; (d14c <LORAREG_InitSetAttrFnPtrsEU+0x78>)
    d10a:	505a      	str	r2, [r3, r1]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d10c:	4b07      	ldr	r3, [pc, #28]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d10e:	21cc      	movs	r1, #204	; 0xcc
    d110:	4a0f      	ldr	r2, [pc, #60]	; (d150 <LORAREG_InitSetAttrFnPtrsEU+0x7c>)
    d112:	505a      	str	r2, [r3, r1]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d114:	4b05      	ldr	r3, [pc, #20]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d116:	21e0      	movs	r1, #224	; 0xe0
    d118:	4a0e      	ldr	r2, [pc, #56]	; (d154 <LORAREG_InitSetAttrFnPtrsEU+0x80>)
    d11a:	505a      	str	r2, [r3, r1]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d11c:	4b03      	ldr	r3, [pc, #12]	; (d12c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d11e:	21ec      	movs	r1, #236	; 0xec
    d120:	4a0d      	ldr	r2, [pc, #52]	; (d158 <LORAREG_InitSetAttrFnPtrsEU+0x84>)
    d122:	505a      	str	r2, [r3, r1]
}
    d124:	46c0      	nop			; (mov r8, r8)
    d126:	46bd      	mov	sp, r7
    d128:	bd80      	pop	{r7, pc}
    d12a:	46c0      	nop			; (mov r8, r8)
    d12c:	20000ebc 	.word	0x20000ebc
    d130:	00010489 	.word	0x00010489
    d134:	000106a5 	.word	0x000106a5
    d138:	00011065 	.word	0x00011065
    d13c:	00011239 	.word	0x00011239
    d140:	00012125 	.word	0x00012125
    d144:	000123ad 	.word	0x000123ad
    d148:	00011a29 	.word	0x00011a29
    d14c:	00011f89 	.word	0x00011f89
    d150:	0001253d 	.word	0x0001253d
    d154:	00012025 	.word	0x00012025
    d158:	000130a5 	.word	0x000130a5

0000d15c <LORAREG_InitSetAttrFnPtrsAS>:
#endif

#if(AS_BAND == 1)
void LORAREG_InitSetAttrFnPtrsAS(void)
{
    d15c:	b580      	push	{r7, lr}
    d15e:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d160:	4b16      	ldr	r3, [pc, #88]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d162:	4a17      	ldr	r2, [pc, #92]	; (d1c0 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    d164:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d166:	4b15      	ldr	r3, [pc, #84]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d168:	4a16      	ldr	r2, [pc, #88]	; (d1c4 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    d16a:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d16c:	4b13      	ldr	r3, [pc, #76]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d16e:	4a16      	ldr	r2, [pc, #88]	; (d1c8 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    d170:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d172:	4b12      	ldr	r3, [pc, #72]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d174:	21cc      	movs	r1, #204	; 0xcc
    d176:	4a15      	ldr	r2, [pc, #84]	; (d1cc <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    d178:	505a      	str	r2, [r3, r1]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    d17a:	4b10      	ldr	r3, [pc, #64]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d17c:	4a14      	ldr	r2, [pc, #80]	; (d1d0 <LORAREG_InitSetAttrFnPtrsAS+0x74>)
    d17e:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d180:	4b0e      	ldr	r3, [pc, #56]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d182:	2180      	movs	r1, #128	; 0x80
    d184:	4a13      	ldr	r2, [pc, #76]	; (d1d4 <LORAREG_InitSetAttrFnPtrsAS+0x78>)
    d186:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d188:	4b0c      	ldr	r3, [pc, #48]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d18a:	2184      	movs	r1, #132	; 0x84
    d18c:	4a12      	ldr	r2, [pc, #72]	; (d1d8 <LORAREG_InitSetAttrFnPtrsAS+0x7c>)
    d18e:	505a      	str	r2, [r3, r1]
	pSetAttr[TX_PARAMS] = setTxParams;
    d190:	4b0a      	ldr	r3, [pc, #40]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d192:	21d0      	movs	r1, #208	; 0xd0
    d194:	4a11      	ldr	r2, [pc, #68]	; (d1dc <LORAREG_InitSetAttrFnPtrsAS+0x80>)
    d196:	505a      	str	r2, [r3, r1]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d198:	4b08      	ldr	r3, [pc, #32]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d19a:	4a11      	ldr	r2, [pc, #68]	; (d1e0 <LORAREG_InitSetAttrFnPtrsAS+0x84>)
    d19c:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d19e:	4b07      	ldr	r3, [pc, #28]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d1a0:	4a10      	ldr	r2, [pc, #64]	; (d1e4 <LORAREG_InitSetAttrFnPtrsAS+0x88>)
    d1a2:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d1a4:	4b05      	ldr	r3, [pc, #20]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d1a6:	21e0      	movs	r1, #224	; 0xe0
    d1a8:	4a0f      	ldr	r2, [pc, #60]	; (d1e8 <LORAREG_InitSetAttrFnPtrsAS+0x8c>)
    d1aa:	505a      	str	r2, [r3, r1]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d1ac:	4b03      	ldr	r3, [pc, #12]	; (d1bc <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d1ae:	21ec      	movs	r1, #236	; 0xec
    d1b0:	4a0e      	ldr	r2, [pc, #56]	; (d1ec <LORAREG_InitSetAttrFnPtrsAS+0x90>)
    d1b2:	505a      	str	r2, [r3, r1]
}
    d1b4:	46c0      	nop			; (mov r8, r8)
    d1b6:	46bd      	mov	sp, r7
    d1b8:	bd80      	pop	{r7, pc}
    d1ba:	46c0      	nop			; (mov r8, r8)
    d1bc:	20000ebc 	.word	0x20000ebc
    d1c0:	00010489 	.word	0x00010489
    d1c4:	00010755 	.word	0x00010755
    d1c8:	00012125 	.word	0x00012125
    d1cc:	0001253d 	.word	0x0001253d
    d1d0:	000123ad 	.word	0x000123ad
    d1d4:	00011a29 	.word	0x00011a29
    d1d8:	00011f89 	.word	0x00011f89
    d1dc:	00012695 	.word	0x00012695
    d1e0:	00011065 	.word	0x00011065
    d1e4:	00011239 	.word	0x00011239
    d1e8:	00012025 	.word	0x00012025
    d1ec:	000130a5 	.word	0x000130a5

0000d1f0 <LORAREG_InitSetAttrFnPtrsAU>:
#endif

#if(AU_BAND == 1)
void LORAREG_InitSetAttrFnPtrsAU(void)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRange;
    d1f4:	4b0f      	ldr	r3, [pc, #60]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d1f6:	4a10      	ldr	r2, [pc, #64]	; (d238 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    d1f8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d1fa:	4b0e      	ldr	r3, [pc, #56]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d1fc:	4a0f      	ldr	r2, [pc, #60]	; (d23c <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    d1fe:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d200:	4b0c      	ldr	r3, [pc, #48]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d202:	4a0f      	ldr	r2, [pc, #60]	; (d240 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    d204:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d206:	4b0b      	ldr	r3, [pc, #44]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d208:	21e4      	movs	r1, #228	; 0xe4
    d20a:	4a0e      	ldr	r2, [pc, #56]	; (d244 <LORAREG_InitSetAttrFnPtrsAU+0x54>)
    d20c:	505a      	str	r2, [r3, r1]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d20e:	4b09      	ldr	r3, [pc, #36]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d210:	21e8      	movs	r1, #232	; 0xe8
    d212:	4a0d      	ldr	r2, [pc, #52]	; (d248 <LORAREG_InitSetAttrFnPtrsAU+0x58>)
    d214:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d216:	4b07      	ldr	r3, [pc, #28]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d218:	2180      	movs	r1, #128	; 0x80
    d21a:	4a0c      	ldr	r2, [pc, #48]	; (d24c <LORAREG_InitSetAttrFnPtrsAU+0x5c>)
    d21c:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d21e:	4b05      	ldr	r3, [pc, #20]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d220:	2184      	movs	r1, #132	; 0x84
    d222:	4a0b      	ldr	r2, [pc, #44]	; (d250 <LORAREG_InitSetAttrFnPtrsAU+0x60>)
    d224:	505a      	str	r2, [r3, r1]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d226:	4b03      	ldr	r3, [pc, #12]	; (d234 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d228:	21e0      	movs	r1, #224	; 0xe0
    d22a:	4a0a      	ldr	r2, [pc, #40]	; (d254 <LORAREG_InitSetAttrFnPtrsAU+0x64>)
    d22c:	505a      	str	r2, [r3, r1]
}
    d22e:	46c0      	nop			; (mov r8, r8)
    d230:	46bd      	mov	sp, r7
    d232:	bd80      	pop	{r7, pc}
    d234:	20000ebc 	.word	0x20000ebc
    d238:	000102e1 	.word	0x000102e1
    d23c:	00010635 	.word	0x00010635
    d240:	00010805 	.word	0x00010805
    d244:	00012e5d 	.word	0x00012e5d
    d248:	00012f8d 	.word	0x00012f8d
    d24c:	00011a29 	.word	0x00011a29
    d250:	00011f89 	.word	0x00011f89
    d254:	00012025 	.word	0x00012025

0000d258 <LORAREG_InitSetAttrFnPtrsIN>:
#endif

#if(IND_BAND == 1)
void LORAREG_InitSetAttrFnPtrsIN(void)
{
    d258:	b580      	push	{r7, lr}
    d25a:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d25c:	4b13      	ldr	r3, [pc, #76]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d25e:	4a14      	ldr	r2, [pc, #80]	; (d2b0 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    d260:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d262:	4b12      	ldr	r3, [pc, #72]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d264:	4a13      	ldr	r2, [pc, #76]	; (d2b4 <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    d266:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d268:	4b10      	ldr	r3, [pc, #64]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d26a:	4a13      	ldr	r2, [pc, #76]	; (d2b8 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    d26c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d26e:	4b0f      	ldr	r3, [pc, #60]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d270:	4a12      	ldr	r2, [pc, #72]	; (d2bc <LORAREG_InitSetAttrFnPtrsIN+0x64>)
    d272:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d274:	4b0d      	ldr	r3, [pc, #52]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d276:	2180      	movs	r1, #128	; 0x80
    d278:	4a11      	ldr	r2, [pc, #68]	; (d2c0 <LORAREG_InitSetAttrFnPtrsIN+0x68>)
    d27a:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d27c:	4b0b      	ldr	r3, [pc, #44]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d27e:	2184      	movs	r1, #132	; 0x84
    d280:	4a10      	ldr	r2, [pc, #64]	; (d2c4 <LORAREG_InitSetAttrFnPtrsIN+0x6c>)
    d282:	505a      	str	r2, [r3, r1]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d284:	4b09      	ldr	r3, [pc, #36]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d286:	21cc      	movs	r1, #204	; 0xcc
    d288:	4a0f      	ldr	r2, [pc, #60]	; (d2c8 <LORAREG_InitSetAttrFnPtrsIN+0x70>)
    d28a:	505a      	str	r2, [r3, r1]
	pSetAttr[TX_PARAMS] = setTxParams;
    d28c:	4b07      	ldr	r3, [pc, #28]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d28e:	21d0      	movs	r1, #208	; 0xd0
    d290:	4a0e      	ldr	r2, [pc, #56]	; (d2cc <LORAREG_InitSetAttrFnPtrsIN+0x74>)
    d292:	505a      	str	r2, [r3, r1]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d294:	4b05      	ldr	r3, [pc, #20]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d296:	21e0      	movs	r1, #224	; 0xe0
    d298:	4a0d      	ldr	r2, [pc, #52]	; (d2d0 <LORAREG_InitSetAttrFnPtrsIN+0x78>)
    d29a:	505a      	str	r2, [r3, r1]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d29c:	4b03      	ldr	r3, [pc, #12]	; (d2ac <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d29e:	21ec      	movs	r1, #236	; 0xec
    d2a0:	4a0c      	ldr	r2, [pc, #48]	; (d2d4 <LORAREG_InitSetAttrFnPtrsIN+0x7c>)
    d2a2:	505a      	str	r2, [r3, r1]
}
    d2a4:	46c0      	nop			; (mov r8, r8)
    d2a6:	46bd      	mov	sp, r7
    d2a8:	bd80      	pop	{r7, pc}
    d2aa:	46c0      	nop			; (mov r8, r8)
    d2ac:	20000ebc 	.word	0x20000ebc
    d2b0:	00010489 	.word	0x00010489
    d2b4:	000106a5 	.word	0x000106a5
    d2b8:	00012125 	.word	0x00012125
    d2bc:	000123ad 	.word	0x000123ad
    d2c0:	00011a29 	.word	0x00011a29
    d2c4:	00011f89 	.word	0x00011f89
    d2c8:	0001253d 	.word	0x0001253d
    d2cc:	00012695 	.word	0x00012695
    d2d0:	00012025 	.word	0x00012025
    d2d4:	000130a5 	.word	0x000130a5

0000d2d8 <LORAREG_InitSetAttrFnPtrsJP>:
#endif

#if(JPN_BAND == 1)
void LORAREG_InitSetAttrFnPtrsJP(void)
{
    d2d8:	b580      	push	{r7, lr}
    d2da:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d2dc:	4b18      	ldr	r3, [pc, #96]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d2de:	4a19      	ldr	r2, [pc, #100]	; (d344 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    d2e0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d2e2:	4b17      	ldr	r3, [pc, #92]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d2e4:	4a18      	ldr	r2, [pc, #96]	; (d348 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    d2e6:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d2e8:	4b15      	ldr	r3, [pc, #84]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d2ea:	2188      	movs	r1, #136	; 0x88
    d2ec:	4a17      	ldr	r2, [pc, #92]	; (d34c <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    d2ee:	505a      	str	r2, [r3, r1]
	pSetAttr[FREQUENCY] = setFrequency;
    d2f0:	4b13      	ldr	r3, [pc, #76]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d2f2:	4a17      	ldr	r2, [pc, #92]	; (d350 <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    d2f4:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d2f6:	4b12      	ldr	r3, [pc, #72]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d2f8:	21cc      	movs	r1, #204	; 0xcc
    d2fa:	4a16      	ldr	r2, [pc, #88]	; (d354 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    d2fc:	505a      	str	r2, [r3, r1]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d2fe:	4b10      	ldr	r3, [pc, #64]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d300:	4a15      	ldr	r2, [pc, #84]	; (d358 <LORAREG_InitSetAttrFnPtrsJP+0x80>)
    d302:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d304:	4b0e      	ldr	r3, [pc, #56]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d306:	2180      	movs	r1, #128	; 0x80
    d308:	4a14      	ldr	r2, [pc, #80]	; (d35c <LORAREG_InitSetAttrFnPtrsJP+0x84>)
    d30a:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d30c:	4b0c      	ldr	r3, [pc, #48]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d30e:	2184      	movs	r1, #132	; 0x84
    d310:	4a13      	ldr	r2, [pc, #76]	; (d360 <LORAREG_InitSetAttrFnPtrsJP+0x88>)
    d312:	505a      	str	r2, [r3, r1]
	pSetAttr[TX_PARAMS] = setTxParams;
    d314:	4b0a      	ldr	r3, [pc, #40]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d316:	21d0      	movs	r1, #208	; 0xd0
    d318:	4a12      	ldr	r2, [pc, #72]	; (d364 <LORAREG_InitSetAttrFnPtrsJP+0x8c>)
    d31a:	505a      	str	r2, [r3, r1]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d31c:	4b08      	ldr	r3, [pc, #32]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d31e:	4a12      	ldr	r2, [pc, #72]	; (d368 <LORAREG_InitSetAttrFnPtrsJP+0x90>)
    d320:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d322:	4b07      	ldr	r3, [pc, #28]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d324:	4a11      	ldr	r2, [pc, #68]	; (d36c <LORAREG_InitSetAttrFnPtrsJP+0x94>)
    d326:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d328:	4b05      	ldr	r3, [pc, #20]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d32a:	21e0      	movs	r1, #224	; 0xe0
    d32c:	4a10      	ldr	r2, [pc, #64]	; (d370 <LORAREG_InitSetAttrFnPtrsJP+0x98>)
    d32e:	505a      	str	r2, [r3, r1]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d330:	4b03      	ldr	r3, [pc, #12]	; (d340 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d332:	21ec      	movs	r1, #236	; 0xec
    d334:	4a0f      	ldr	r2, [pc, #60]	; (d374 <LORAREG_InitSetAttrFnPtrsJP+0x9c>)
    d336:	505a      	str	r2, [r3, r1]
}
    d338:	46c0      	nop			; (mov r8, r8)
    d33a:	46bd      	mov	sp, r7
    d33c:	bd80      	pop	{r7, pc}
    d33e:	46c0      	nop			; (mov r8, r8)
    d340:	20000ebc 	.word	0x20000ebc
    d344:	00010489 	.word	0x00010489
    d348:	00010755 	.word	0x00010755
    d34c:	00012a19 	.word	0x00012a19
    d350:	00012125 	.word	0x00012125
    d354:	0001253d 	.word	0x0001253d
    d358:	000123ad 	.word	0x000123ad
    d35c:	00011a29 	.word	0x00011a29
    d360:	00011f89 	.word	0x00011f89
    d364:	00012695 	.word	0x00012695
    d368:	00011065 	.word	0x00011065
    d36c:	00011239 	.word	0x00011239
    d370:	00012025 	.word	0x00012025
    d374:	000130a5 	.word	0x000130a5

0000d378 <LORAREG_InitSetAttrFnPtrsKR>:
#endif

#if(KR_BAND == 1)
void LORAREG_InitSetAttrFnPtrsKR(void)
{
    d378:	b580      	push	{r7, lr}
    d37a:	af00      	add	r7, sp, #0
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d37c:	4b15      	ldr	r3, [pc, #84]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d37e:	4a16      	ldr	r2, [pc, #88]	; (d3d8 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    d380:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d382:	4b14      	ldr	r3, [pc, #80]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d384:	4a15      	ldr	r2, [pc, #84]	; (d3dc <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    d386:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d388:	4b12      	ldr	r3, [pc, #72]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d38a:	2188      	movs	r1, #136	; 0x88
    d38c:	4a14      	ldr	r2, [pc, #80]	; (d3e0 <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    d38e:	505a      	str	r2, [r3, r1]
	pSetAttr[FREQUENCY] = setFrequency;
    d390:	4b10      	ldr	r3, [pc, #64]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d392:	4a14      	ldr	r2, [pc, #80]	; (d3e4 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    d394:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d396:	4b0f      	ldr	r3, [pc, #60]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d398:	21cc      	movs	r1, #204	; 0xcc
    d39a:	4a13      	ldr	r2, [pc, #76]	; (d3e8 <LORAREG_InitSetAttrFnPtrsKR+0x70>)
    d39c:	505a      	str	r2, [r3, r1]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d39e:	4b0d      	ldr	r3, [pc, #52]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3a0:	4a12      	ldr	r2, [pc, #72]	; (d3ec <LORAREG_InitSetAttrFnPtrsKR+0x74>)
    d3a2:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d3a4:	4b0b      	ldr	r3, [pc, #44]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3a6:	2180      	movs	r1, #128	; 0x80
    d3a8:	4a11      	ldr	r2, [pc, #68]	; (d3f0 <LORAREG_InitSetAttrFnPtrsKR+0x78>)
    d3aa:	505a      	str	r2, [r3, r1]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d3ac:	4b09      	ldr	r3, [pc, #36]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3ae:	2184      	movs	r1, #132	; 0x84
    d3b0:	4a10      	ldr	r2, [pc, #64]	; (d3f4 <LORAREG_InitSetAttrFnPtrsKR+0x7c>)
    d3b2:	505a      	str	r2, [r3, r1]
	pSetAttr[TX_PARAMS] = setTxParams;
    d3b4:	4b07      	ldr	r3, [pc, #28]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3b6:	21d0      	movs	r1, #208	; 0xd0
    d3b8:	4a0f      	ldr	r2, [pc, #60]	; (d3f8 <LORAREG_InitSetAttrFnPtrsKR+0x80>)
    d3ba:	505a      	str	r2, [r3, r1]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d3bc:	4b05      	ldr	r3, [pc, #20]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3be:	21e0      	movs	r1, #224	; 0xe0
    d3c0:	4a0e      	ldr	r2, [pc, #56]	; (d3fc <LORAREG_InitSetAttrFnPtrsKR+0x84>)
    d3c2:	505a      	str	r2, [r3, r1]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d3c4:	4b03      	ldr	r3, [pc, #12]	; (d3d4 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d3c6:	21ec      	movs	r1, #236	; 0xec
    d3c8:	4a0d      	ldr	r2, [pc, #52]	; (d400 <LORAREG_InitSetAttrFnPtrsKR+0x88>)
    d3ca:	505a      	str	r2, [r3, r1]
}
    d3cc:	46c0      	nop			; (mov r8, r8)
    d3ce:	46bd      	mov	sp, r7
    d3d0:	bd80      	pop	{r7, pc}
    d3d2:	46c0      	nop			; (mov r8, r8)
    d3d4:	20000ebc 	.word	0x20000ebc
    d3d8:	00010489 	.word	0x00010489
    d3dc:	00010755 	.word	0x00010755
    d3e0:	00012a19 	.word	0x00012a19
    d3e4:	00012125 	.word	0x00012125
    d3e8:	0001253d 	.word	0x0001253d
    d3ec:	000123ad 	.word	0x000123ad
    d3f0:	00011a29 	.word	0x00011a29
    d3f4:	00011f89 	.word	0x00011f89
    d3f8:	00012695 	.word	0x00012695
    d3fc:	00012025 	.word	0x00012025
    d400:	000130a5 	.word	0x000130a5

0000d404 <LORAREG_Init>:
 *	corresponding to the band
 * \retval LORAWAN_SUCCESS : If initialization is successful
 *	LORAWAN_INVALID_PARAMETER if Initialization is failed
 */
StackRetStatus_t LORAREG_Init(IsmBand_t ismBand)
{	
    d404:	b590      	push	{r4, r7, lr}
    d406:	b085      	sub	sp, #20
    d408:	af00      	add	r7, sp, #0
    d40a:	0002      	movs	r2, r0
    d40c:	1dfb      	adds	r3, r7, #7
    d40e:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d410:	230f      	movs	r3, #15
    d412:	18fb      	adds	r3, r7, r3
    d414:	2208      	movs	r2, #8
    d416:	701a      	strb	r2, [r3, #0]
	static bool initialized  = false;
	
	if(!initialized)
    d418:	4b4f      	ldr	r3, [pc, #316]	; (d558 <LORAREG_Init+0x154>)
    d41a:	781b      	ldrb	r3, [r3, #0]
    d41c:	2201      	movs	r2, #1
    d41e:	4053      	eors	r3, r2
    d420:	b2db      	uxtb	r3, r3
    d422:	2b00      	cmp	r3, #0
    d424:	d00d      	beq.n	d442 <LORAREG_Init+0x3e>
	{		
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    d426:	4b4d      	ldr	r3, [pc, #308]	; (d55c <LORAREG_Init+0x158>)
    d428:	4798      	blx	r3
    d42a:	0003      	movs	r3, r0
    d42c:	2b08      	cmp	r3, #8
    d42e:	d103      	bne.n	d438 <LORAREG_Init+0x34>
		{
//			SetCallbackRegSoftwareTimers();		
			initialized = true;
    d430:	4b49      	ldr	r3, [pc, #292]	; (d558 <LORAREG_Init+0x154>)
    d432:	2201      	movs	r2, #1
    d434:	701a      	strb	r2, [r3, #0]
    d436:	e006      	b.n	d446 <LORAREG_Init+0x42>
		}
		else
		{
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    d438:	230f      	movs	r3, #15
    d43a:	18fb      	adds	r3, r7, r3
    d43c:	2214      	movs	r2, #20
    d43e:	701a      	strb	r2, [r3, #0]
    d440:	e001      	b.n	d446 <LORAREG_Init+0x42>
		}
	}
	else
	{
		StopAllRegSoftwareTimers();	
    d442:	4b47      	ldr	r3, [pc, #284]	; (d560 <LORAREG_Init+0x15c>)
    d444:	4798      	blx	r3
	}

	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    d446:	2300      	movs	r3, #0
    d448:	60bb      	str	r3, [r7, #8]
    d44a:	e011      	b.n	d470 <LORAREG_Init+0x6c>
	{
		pGetAttr[i] = InValidGetAttr;
    d44c:	4b45      	ldr	r3, [pc, #276]	; (d564 <LORAREG_Init+0x160>)
    d44e:	68ba      	ldr	r2, [r7, #8]
    d450:	0092      	lsls	r2, r2, #2
    d452:	4945      	ldr	r1, [pc, #276]	; (d568 <LORAREG_Init+0x164>)
    d454:	50d1      	str	r1, [r2, r3]
		pValidateAttr[i] = InValidAttr;
    d456:	4b45      	ldr	r3, [pc, #276]	; (d56c <LORAREG_Init+0x168>)
    d458:	68ba      	ldr	r2, [r7, #8]
    d45a:	0092      	lsls	r2, r2, #2
    d45c:	4944      	ldr	r1, [pc, #272]	; (d570 <LORAREG_Init+0x16c>)
    d45e:	50d1      	str	r1, [r2, r3]
		pSetAttr[i] = InValidAttr;
    d460:	4b44      	ldr	r3, [pc, #272]	; (d574 <LORAREG_Init+0x170>)
    d462:	68ba      	ldr	r2, [r7, #8]
    d464:	0092      	lsls	r2, r2, #2
    d466:	4942      	ldr	r1, [pc, #264]	; (d570 <LORAREG_Init+0x16c>)
    d468:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    d46a:	68bb      	ldr	r3, [r7, #8]
    d46c:	3301      	adds	r3, #1
    d46e:	60bb      	str	r3, [r7, #8]
    d470:	68bb      	ldr	r3, [r7, #8]
    d472:	2b3c      	cmp	r3, #60	; 0x3c
    d474:	ddea      	ble.n	d44c <LORAREG_Init+0x48>
	}
	
	if(ismBand == ISM_NA915)
    d476:	1dfb      	adds	r3, r7, #7
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	2b02      	cmp	r3, #2
    d47c:	d109      	bne.n	d492 <LORAREG_Init+0x8e>
	{
	    result = LORAReg_InitNA(ismBand);
    d47e:	230f      	movs	r3, #15
    d480:	18fc      	adds	r4, r7, r3
    d482:	1dfb      	adds	r3, r7, #7
    d484:	781b      	ldrb	r3, [r3, #0]
    d486:	0018      	movs	r0, r3
    d488:	4b3b      	ldr	r3, [pc, #236]	; (d578 <LORAREG_Init+0x174>)
    d48a:	4798      	blx	r3
    d48c:	0003      	movs	r3, r0
    d48e:	7023      	strb	r3, [r4, #0]
    d490:	e05a      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    d492:	1dfb      	adds	r3, r7, #7
    d494:	781b      	ldrb	r3, [r3, #0]
    d496:	2b00      	cmp	r3, #0
    d498:	d003      	beq.n	d4a2 <LORAREG_Init+0x9e>
    d49a:	1dfb      	adds	r3, r7, #7
    d49c:	781b      	ldrb	r3, [r3, #0]
    d49e:	2b01      	cmp	r3, #1
    d4a0:	d109      	bne.n	d4b6 <LORAREG_Init+0xb2>
	{
	    result = LORAReg_InitEU(ismBand);		
    d4a2:	230f      	movs	r3, #15
    d4a4:	18fc      	adds	r4, r7, r3
    d4a6:	1dfb      	adds	r3, r7, #7
    d4a8:	781b      	ldrb	r3, [r3, #0]
    d4aa:	0018      	movs	r0, r3
    d4ac:	4b33      	ldr	r3, [pc, #204]	; (d57c <LORAREG_Init+0x178>)
    d4ae:	4798      	blx	r3
    d4b0:	0003      	movs	r3, r0
    d4b2:	7023      	strb	r3, [r4, #0]
    d4b4:	e048      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    d4b6:	1dfb      	adds	r3, r7, #7
    d4b8:	781b      	ldrb	r3, [r3, #0]
    d4ba:	2b05      	cmp	r3, #5
    d4bc:	d90d      	bls.n	d4da <LORAREG_Init+0xd6>
    d4be:	1dfb      	adds	r3, r7, #7
    d4c0:	781b      	ldrb	r3, [r3, #0]
    d4c2:	2b0e      	cmp	r3, #14
    d4c4:	d809      	bhi.n	d4da <LORAREG_Init+0xd6>
	{
		result = LORAReg_InitAS(ismBand);
    d4c6:	230f      	movs	r3, #15
    d4c8:	18fc      	adds	r4, r7, r3
    d4ca:	1dfb      	adds	r3, r7, #7
    d4cc:	781b      	ldrb	r3, [r3, #0]
    d4ce:	0018      	movs	r0, r3
    d4d0:	4b2b      	ldr	r3, [pc, #172]	; (d580 <LORAREG_Init+0x17c>)
    d4d2:	4798      	blx	r3
    d4d4:	0003      	movs	r3, r0
    d4d6:	7023      	strb	r3, [r4, #0]
    d4d8:	e036      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand == ISM_AU915)
    d4da:	1dfb      	adds	r3, r7, #7
    d4dc:	781b      	ldrb	r3, [r3, #0]
    d4de:	2b03      	cmp	r3, #3
    d4e0:	d109      	bne.n	d4f6 <LORAREG_Init+0xf2>
	{
		result = LORAReg_InitAU(ismBand);
    d4e2:	230f      	movs	r3, #15
    d4e4:	18fc      	adds	r4, r7, r3
    d4e6:	1dfb      	adds	r3, r7, #7
    d4e8:	781b      	ldrb	r3, [r3, #0]
    d4ea:	0018      	movs	r0, r3
    d4ec:	4b25      	ldr	r3, [pc, #148]	; (d584 <LORAREG_Init+0x180>)
    d4ee:	4798      	blx	r3
    d4f0:	0003      	movs	r3, r0
    d4f2:	7023      	strb	r3, [r4, #0]
    d4f4:	e028      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand == ISM_IND865)
    d4f6:	1dfb      	adds	r3, r7, #7
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	2b0f      	cmp	r3, #15
    d4fc:	d109      	bne.n	d512 <LORAREG_Init+0x10e>
	{
		result = LORAReg_InitIN(ismBand);
    d4fe:	230f      	movs	r3, #15
    d500:	18fc      	adds	r4, r7, r3
    d502:	1dfb      	adds	r3, r7, #7
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	0018      	movs	r0, r3
    d508:	4b1f      	ldr	r3, [pc, #124]	; (d588 <LORAREG_Init+0x184>)
    d50a:	4798      	blx	r3
    d50c:	0003      	movs	r3, r0
    d50e:	7023      	strb	r3, [r4, #0]
    d510:	e01a      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand == ISM_JPN923)
    d512:	1dfb      	adds	r3, r7, #7
    d514:	781b      	ldrb	r3, [r3, #0]
    d516:	2b05      	cmp	r3, #5
    d518:	d109      	bne.n	d52e <LORAREG_Init+0x12a>
	{
		result = LORAReg_InitJP(ismBand);
    d51a:	230f      	movs	r3, #15
    d51c:	18fc      	adds	r4, r7, r3
    d51e:	1dfb      	adds	r3, r7, #7
    d520:	781b      	ldrb	r3, [r3, #0]
    d522:	0018      	movs	r0, r3
    d524:	4b19      	ldr	r3, [pc, #100]	; (d58c <LORAREG_Init+0x188>)
    d526:	4798      	blx	r3
    d528:	0003      	movs	r3, r0
    d52a:	7023      	strb	r3, [r4, #0]
    d52c:	e00c      	b.n	d548 <LORAREG_Init+0x144>
	}
	else if(ismBand == ISM_KR920)
    d52e:	1dfb      	adds	r3, r7, #7
    d530:	781b      	ldrb	r3, [r3, #0]
    d532:	2b04      	cmp	r3, #4
    d534:	d108      	bne.n	d548 <LORAREG_Init+0x144>
	{
		result = LORAReg_InitKR(ismBand);
    d536:	230f      	movs	r3, #15
    d538:	18fc      	adds	r4, r7, r3
    d53a:	1dfb      	adds	r3, r7, #7
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	0018      	movs	r0, r3
    d540:	4b13      	ldr	r3, [pc, #76]	; (d590 <LORAREG_Init+0x18c>)
    d542:	4798      	blx	r3
    d544:	0003      	movs	r3, r0
    d546:	7023      	strb	r3, [r4, #0]
	}
	
	return result;
    d548:	230f      	movs	r3, #15
    d54a:	18fb      	adds	r3, r7, r3
    d54c:	781b      	ldrb	r3, [r3, #0]
}
    d54e:	0018      	movs	r0, r3
    d550:	46bd      	mov	sp, r7
    d552:	b005      	add	sp, #20
    d554:	bd90      	pop	{r4, r7, pc}
    d556:	46c0      	nop			; (mov r8, r8)
    d558:	20000fb0 	.word	0x20000fb0
    d55c:	0000f399 	.word	0x0000f399
    d560:	0000f3f5 	.word	0x0000f3f5
    d564:	20000cd4 	.word	0x20000cd4
    d568:	0000a89f 	.word	0x0000a89f
    d56c:	20000dc8 	.word	0x20000dc8
    d570:	0000a8bb 	.word	0x0000a8bb
    d574:	20000ebc 	.word	0x20000ebc
    d578:	0000a311 	.word	0x0000a311
    d57c:	00008699 	.word	0x00008699
    d580:	000079c9 	.word	0x000079c9
    d584:	0000810d 	.word	0x0000810d
    d588:	00008f15 	.word	0x00008f15
    d58c:	000094e5 	.word	0x000094e5
    d590:	00009c11 	.word	0x00009c11

0000d594 <LORAREG_GetAttr>:
 * \param[out] Result of the GET operation
 * \retval LORAWAN_SUCCESS : If GET is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_GetAttr(LorawanRegionalAttributes_t attrType, void *attrInput, void *attrOutput)
{
    d594:	b5b0      	push	{r4, r5, r7, lr}
    d596:	b086      	sub	sp, #24
    d598:	af00      	add	r7, sp, #0
    d59a:	60b9      	str	r1, [r7, #8]
    d59c:	607a      	str	r2, [r7, #4]
    d59e:	230f      	movs	r3, #15
    d5a0:	18fb      	adds	r3, r7, r3
    d5a2:	1c02      	adds	r2, r0, #0
    d5a4:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d5a6:	2317      	movs	r3, #23
    d5a8:	18fb      	adds	r3, r7, r3
    d5aa:	220a      	movs	r2, #10
    d5ac:	701a      	strb	r2, [r3, #0]
	if(attrType < REG_NUM_ATTRIBUTES)
    d5ae:	230f      	movs	r3, #15
    d5b0:	18fb      	adds	r3, r7, r3
    d5b2:	781b      	ldrb	r3, [r3, #0]
    d5b4:	2b3c      	cmp	r3, #60	; 0x3c
    d5b6:	d810      	bhi.n	d5da <LORAREG_GetAttr+0x46>
	{
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d5b8:	230f      	movs	r3, #15
    d5ba:	18fb      	adds	r3, r7, r3
    d5bc:	781a      	ldrb	r2, [r3, #0]
    d5be:	4b0a      	ldr	r3, [pc, #40]	; (d5e8 <LORAREG_GetAttr+0x54>)
    d5c0:	0092      	lsls	r2, r2, #2
    d5c2:	58d3      	ldr	r3, [r2, r3]
    d5c4:	2217      	movs	r2, #23
    d5c6:	18bc      	adds	r4, r7, r2
    d5c8:	687d      	ldr	r5, [r7, #4]
    d5ca:	68b9      	ldr	r1, [r7, #8]
    d5cc:	220f      	movs	r2, #15
    d5ce:	18ba      	adds	r2, r7, r2
    d5d0:	7810      	ldrb	r0, [r2, #0]
    d5d2:	002a      	movs	r2, r5
    d5d4:	4798      	blx	r3
    d5d6:	0003      	movs	r3, r0
    d5d8:	7023      	strb	r3, [r4, #0]
	}

	return result;
    d5da:	2317      	movs	r3, #23
    d5dc:	18fb      	adds	r3, r7, r3
    d5de:	781b      	ldrb	r3, [r3, #0]
}
    d5e0:	0018      	movs	r0, r3
    d5e2:	46bd      	mov	sp, r7
    d5e4:	b006      	add	sp, #24
    d5e6:	bdb0      	pop	{r4, r5, r7, pc}
    d5e8:	20000cd4 	.word	0x20000cd4

0000d5ec <LORAREG_ValidateAttr>:
 * \param[in] attrInput Input used to validate the attribute value
 * \retval LORAWAN_SUCCESS : If Validate is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_ValidateAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d5ec:	b590      	push	{r4, r7, lr}
    d5ee:	b085      	sub	sp, #20
    d5f0:	af00      	add	r7, sp, #0
    d5f2:	0002      	movs	r2, r0
    d5f4:	6039      	str	r1, [r7, #0]
    d5f6:	1dfb      	adds	r3, r7, #7
    d5f8:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d5fa:	230f      	movs	r3, #15
    d5fc:	18fb      	adds	r3, r7, r3
    d5fe:	220a      	movs	r2, #10
    d600:	701a      	strb	r2, [r3, #0]
	
	if(attrType < REG_NUM_ATTRIBUTES)
    d602:	1dfb      	adds	r3, r7, #7
    d604:	781b      	ldrb	r3, [r3, #0]
    d606:	2b3c      	cmp	r3, #60	; 0x3c
    d608:	d80d      	bhi.n	d626 <LORAREG_ValidateAttr+0x3a>
	{
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d60a:	1dfb      	adds	r3, r7, #7
    d60c:	781a      	ldrb	r2, [r3, #0]
    d60e:	4b09      	ldr	r3, [pc, #36]	; (d634 <LORAREG_ValidateAttr+0x48>)
    d610:	0092      	lsls	r2, r2, #2
    d612:	58d3      	ldr	r3, [r2, r3]
    d614:	220f      	movs	r2, #15
    d616:	18bc      	adds	r4, r7, r2
    d618:	6839      	ldr	r1, [r7, #0]
    d61a:	1dfa      	adds	r2, r7, #7
    d61c:	7812      	ldrb	r2, [r2, #0]
    d61e:	0010      	movs	r0, r2
    d620:	4798      	blx	r3
    d622:	0003      	movs	r3, r0
    d624:	7023      	strb	r3, [r4, #0]
	}

	return result;
    d626:	230f      	movs	r3, #15
    d628:	18fb      	adds	r3, r7, r3
    d62a:	781b      	ldrb	r3, [r3, #0]
}
    d62c:	0018      	movs	r0, r3
    d62e:	46bd      	mov	sp, r7
    d630:	b005      	add	sp, #20
    d632:	bd90      	pop	{r4, r7, pc}
    d634:	20000dc8 	.word	0x20000dc8

0000d638 <LORAREG_SetAttr>:
 * \param[in] attrInput Input used to update the attribute value
 * \retval LORAWAN_SUCCESS : If Update is successful
 *	LORAWAN_INVALID_PARAMETER if the input attribute or the attribute type is invalid
 */
StackRetStatus_t LORAREG_SetAttr(LorawanRegionalAttributes_t attrType, void *attrInput)
{
    d638:	b590      	push	{r4, r7, lr}
    d63a:	b085      	sub	sp, #20
    d63c:	af00      	add	r7, sp, #0
    d63e:	0002      	movs	r2, r0
    d640:	6039      	str	r1, [r7, #0]
    d642:	1dfb      	adds	r3, r7, #7
    d644:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d646:	230f      	movs	r3, #15
    d648:	18fb      	adds	r3, r7, r3
    d64a:	220a      	movs	r2, #10
    d64c:	701a      	strb	r2, [r3, #0]
	if(attrType < REG_NUM_ATTRIBUTES)
    d64e:	1dfb      	adds	r3, r7, #7
    d650:	781b      	ldrb	r3, [r3, #0]
    d652:	2b3c      	cmp	r3, #60	; 0x3c
    d654:	d80d      	bhi.n	d672 <LORAREG_SetAttr+0x3a>
	{
	    result = pSetAttr[attrType](attrType, attrInput);		
    d656:	1dfb      	adds	r3, r7, #7
    d658:	781a      	ldrb	r2, [r3, #0]
    d65a:	4b09      	ldr	r3, [pc, #36]	; (d680 <LORAREG_SetAttr+0x48>)
    d65c:	0092      	lsls	r2, r2, #2
    d65e:	58d3      	ldr	r3, [r2, r3]
    d660:	220f      	movs	r2, #15
    d662:	18bc      	adds	r4, r7, r2
    d664:	6839      	ldr	r1, [r7, #0]
    d666:	1dfa      	adds	r2, r7, #7
    d668:	7812      	ldrb	r2, [r2, #0]
    d66a:	0010      	movs	r0, r2
    d66c:	4798      	blx	r3
    d66e:	0003      	movs	r3, r0
    d670:	7023      	strb	r3, [r4, #0]
	}

	return result;
    d672:	230f      	movs	r3, #15
    d674:	18fb      	adds	r3, r7, r3
    d676:	781b      	ldrb	r3, [r3, #0]
}
    d678:	0018      	movs	r0, r3
    d67a:	46bd      	mov	sp, r7
    d67c:	b005      	add	sp, #20
    d67e:	bd90      	pop	{r4, r7, pc}
    d680:	20000ebc 	.word	0x20000ebc

0000d684 <GenerateFrequency1>:
 * utilizing LoRa 125 kHz BW varying from SF7 to SF10 (DR0..DR3) starting at 902.3 MHz 
 * and incrementing linearly by 200 kHz to 914.9 MHz
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static uint32_t GenerateFrequency1 (uint8_t channelIndex)   // channelIndex should be a random number between 0 and 63, generated with the random function
{
    d684:	b580      	push	{r7, lr}
    d686:	b084      	sub	sp, #16
    d688:	af00      	add	r7, sp, #0
    d68a:	0002      	movs	r2, r0
    d68c:	1dfb      	adds	r3, r7, #7
    d68e:	701a      	strb	r2, [r3, #0]
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    d690:	4b0f      	ldr	r3, [pc, #60]	; (d6d0 <GenerateFrequency1+0x4c>)
    d692:	22a2      	movs	r2, #162	; 0xa2
    d694:	0052      	lsls	r2, r2, #1
    d696:	5c9a      	ldrb	r2, [r3, r2]
    d698:	2146      	movs	r1, #70	; 0x46
    d69a:	31ff      	adds	r1, #255	; 0xff
    d69c:	5c59      	ldrb	r1, [r3, r1]
    d69e:	0209      	lsls	r1, r1, #8
    d6a0:	430a      	orrs	r2, r1
    d6a2:	21a3      	movs	r1, #163	; 0xa3
    d6a4:	0049      	lsls	r1, r1, #1
    d6a6:	5c59      	ldrb	r1, [r3, r1]
    d6a8:	0409      	lsls	r1, r1, #16
    d6aa:	430a      	orrs	r2, r1
    d6ac:	2148      	movs	r1, #72	; 0x48
    d6ae:	31ff      	adds	r1, #255	; 0xff
    d6b0:	5c5b      	ldrb	r3, [r3, r1]
    d6b2:	061b      	lsls	r3, r3, #24
    d6b4:	4313      	orrs	r3, r2
    d6b6:	0019      	movs	r1, r3
    d6b8:	1dfb      	adds	r3, r7, #7
    d6ba:	781b      	ldrb	r3, [r3, #0]
    d6bc:	4a05      	ldr	r2, [pc, #20]	; (d6d4 <GenerateFrequency1+0x50>)
    d6be:	4353      	muls	r3, r2
    d6c0:	18cb      	adds	r3, r1, r3
    d6c2:	60fb      	str	r3, [r7, #12]
    return channelFrequency;
    d6c4:	68fb      	ldr	r3, [r7, #12]
}
    d6c6:	0018      	movs	r0, r3
    d6c8:	46bd      	mov	sp, r7
    d6ca:	b004      	add	sp, #16
    d6cc:	bd80      	pop	{r7, pc}
    d6ce:	46c0      	nop			; (mov r8, r8)
    d6d0:	200014a8 	.word	0x200014a8
    d6d4:	00030d40 	.word	0x00030d40

0000d6d8 <GenerateFrequency2>:
 * utilizing LoRa 500 kHz BW at SF8 (DR4) starting at 903.0 MHz and 
 * incrementing linearly by 1.6 MHz to 914.2 MHz
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    d6d8:	b580      	push	{r7, lr}
    d6da:	b084      	sub	sp, #16
    d6dc:	af00      	add	r7, sp, #0
    d6de:	0002      	movs	r2, r0
    d6e0:	1dfb      	adds	r3, r7, #7
    d6e2:	701a      	strb	r2, [r3, #0]
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    d6e4:	4b11      	ldr	r3, [pc, #68]	; (d72c <GenerateFrequency2+0x54>)
    d6e6:	22a4      	movs	r2, #164	; 0xa4
    d6e8:	0052      	lsls	r2, r2, #1
    d6ea:	5c9a      	ldrb	r2, [r3, r2]
    d6ec:	214a      	movs	r1, #74	; 0x4a
    d6ee:	31ff      	adds	r1, #255	; 0xff
    d6f0:	5c59      	ldrb	r1, [r3, r1]
    d6f2:	0209      	lsls	r1, r1, #8
    d6f4:	430a      	orrs	r2, r1
    d6f6:	21a5      	movs	r1, #165	; 0xa5
    d6f8:	0049      	lsls	r1, r1, #1
    d6fa:	5c59      	ldrb	r1, [r3, r1]
    d6fc:	0409      	lsls	r1, r1, #16
    d6fe:	430a      	orrs	r2, r1
    d700:	214c      	movs	r1, #76	; 0x4c
    d702:	31ff      	adds	r1, #255	; 0xff
    d704:	5c5b      	ldrb	r3, [r3, r1]
    d706:	061b      	lsls	r3, r3, #24
    d708:	4313      	orrs	r3, r2
    d70a:	0018      	movs	r0, r3
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    d70c:	1dfb      	adds	r3, r7, #7
    d70e:	781b      	ldrb	r3, [r3, #0]
    d710:	4906      	ldr	r1, [pc, #24]	; (d72c <GenerateFrequency2+0x54>)
    d712:	22aa      	movs	r2, #170	; 0xaa
    d714:	0052      	lsls	r2, r2, #1
    d716:	5c8a      	ldrb	r2, [r1, r2]
    d718:	1a9b      	subs	r3, r3, r2
    d71a:	4a05      	ldr	r2, [pc, #20]	; (d730 <GenerateFrequency2+0x58>)
    d71c:	4353      	muls	r3, r2
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    d71e:	18c3      	adds	r3, r0, r3
    d720:	60fb      	str	r3, [r7, #12]
    return channelFrequency;
    d722:	68fb      	ldr	r3, [r7, #12]
}
    d724:	0018      	movs	r0, r3
    d726:	46bd      	mov	sp, r7
    d728:	b004      	add	sp, #16
    d72a:	bd80      	pop	{r7, pc}
    d72c:	200014a8 	.word	0x200014a8
    d730:	00186a00 	.word	0x00186a00

0000d734 <ValidateDataRateTxT1>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the data rate is not supported
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    d734:	b580      	push	{r7, lr}
    d736:	b084      	sub	sp, #16
    d738:	af00      	add	r7, sp, #0
    d73a:	0002      	movs	r2, r0
    d73c:	6039      	str	r1, [r7, #0]
    d73e:	1dfb      	adds	r3, r7, #7
    d740:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d742:	230f      	movs	r3, #15
    d744:	18fb      	adds	r3, r7, r3
    d746:	2208      	movs	r2, #8
    d748:	701a      	strb	r2, [r3, #0]
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    d74a:	230e      	movs	r3, #14
    d74c:	18fb      	adds	r3, r7, r3
    d74e:	683a      	ldr	r2, [r7, #0]
    d750:	7812      	ldrb	r2, [r2, #0]
    d752:	701a      	strb	r2, [r3, #0]

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    d754:	4a09      	ldr	r2, [pc, #36]	; (d77c <ValidateDataRateTxT1+0x48>)
    d756:	2352      	movs	r3, #82	; 0x52
    d758:	33ff      	adds	r3, #255	; 0xff
    d75a:	5cd3      	ldrb	r3, [r2, r3]
    d75c:	220e      	movs	r2, #14
    d75e:	18ba      	adds	r2, r7, r2
    d760:	7812      	ldrb	r2, [r2, #0]
    d762:	429a      	cmp	r2, r3
    d764:	d903      	bls.n	d76e <ValidateDataRateTxT1+0x3a>
	{
		result = LORAWAN_INVALID_PARAMETER;
    d766:	230f      	movs	r3, #15
    d768:	18fb      	adds	r3, r7, r3
    d76a:	220a      	movs	r2, #10
    d76c:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
    d76e:	230f      	movs	r3, #15
    d770:	18fb      	adds	r3, r7, r3
    d772:	781b      	ldrb	r3, [r3, #0]
}
    d774:	0018      	movs	r0, r3
    d776:	46bd      	mov	sp, r7
    d778:	b004      	add	sp, #16
    d77a:	bd80      	pop	{r7, pc}
    d77c:	200014a8 	.word	0x200014a8

0000d780 <ValidateDataRateTxT2>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
    d780:	b580      	push	{r7, lr}
    d782:	b084      	sub	sp, #16
    d784:	af00      	add	r7, sp, #0
    d786:	0002      	movs	r2, r0
    d788:	6039      	str	r1, [r7, #0]
    d78a:	1dfb      	adds	r3, r7, #7
    d78c:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d78e:	230f      	movs	r3, #15
    d790:	18fb      	adds	r3, r7, r3
    d792:	2208      	movs	r2, #8
    d794:	701a      	strb	r2, [r3, #0]
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    d796:	230e      	movs	r3, #14
    d798:	18fb      	adds	r3, r7, r3
    d79a:	683a      	ldr	r2, [r7, #0]
    d79c:	7812      	ldrb	r2, [r2, #0]
    d79e:	701a      	strb	r2, [r3, #0]
	
	if(dataRate > RegParams.minDataRate ||
    d7a0:	4b11      	ldr	r3, [pc, #68]	; (d7e8 <ValidateDataRateTxT2+0x68>)
    d7a2:	2224      	movs	r2, #36	; 0x24
    d7a4:	5c9b      	ldrb	r3, [r3, r2]
    d7a6:	220e      	movs	r2, #14
    d7a8:	18ba      	adds	r2, r7, r2
    d7aa:	7812      	ldrb	r2, [r2, #0]
    d7ac:	429a      	cmp	r2, r3
    d7ae:	d810      	bhi.n	d7d2 <ValidateDataRateTxT2+0x52>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    d7b0:	4a0d      	ldr	r2, [pc, #52]	; (d7e8 <ValidateDataRateTxT2+0x68>)
    d7b2:	23c4      	movs	r3, #196	; 0xc4
    d7b4:	33ff      	adds	r3, #255	; 0xff
    d7b6:	5cd3      	ldrb	r3, [r2, r3]
    d7b8:	2201      	movs	r2, #1
    d7ba:	4013      	ands	r3, r2
    d7bc:	b2db      	uxtb	r3, r3
	if(dataRate > RegParams.minDataRate ||
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d00b      	beq.n	d7da <ValidateDataRateTxT2+0x5a>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    d7c2:	4b09      	ldr	r3, [pc, #36]	; (d7e8 <ValidateDataRateTxT2+0x68>)
    d7c4:	2222      	movs	r2, #34	; 0x22
    d7c6:	5c9b      	ldrb	r3, [r3, r2]
    d7c8:	220e      	movs	r2, #14
    d7ca:	18ba      	adds	r2, r7, r2
    d7cc:	7812      	ldrb	r2, [r2, #0]
    d7ce:	429a      	cmp	r2, r3
    d7d0:	d203      	bcs.n	d7da <ValidateDataRateTxT2+0x5a>
	{
		result = LORAWAN_INVALID_PARAMETER;
    d7d2:	230f      	movs	r3, #15
    d7d4:	18fb      	adds	r3, r7, r3
    d7d6:	220a      	movs	r2, #10
    d7d8:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
    d7da:	230f      	movs	r3, #15
    d7dc:	18fb      	adds	r3, r7, r3
    d7de:	781b      	ldrb	r3, [r3, #0]
}
    d7e0:	0018      	movs	r0, r3
    d7e2:	46bd      	mov	sp, r7
    d7e4:	b004      	add	sp, #16
    d7e6:	bd80      	pop	{r7, pc}
    d7e8:	200014a8 	.word	0x200014a8

0000d7ec <ValidateDataRateRxT1>:
 *		   LORAWAN_INVALID_PARAMETER If the data rate is not supported
 */

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    d7ec:	b580      	push	{r7, lr}
    d7ee:	b084      	sub	sp, #16
    d7f0:	af00      	add	r7, sp, #0
    d7f2:	0002      	movs	r2, r0
    d7f4:	6039      	str	r1, [r7, #0]
    d7f6:	1dfb      	adds	r3, r7, #7
    d7f8:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d7fa:	230f      	movs	r3, #15
    d7fc:	18fb      	adds	r3, r7, r3
    d7fe:	2208      	movs	r2, #8
    d800:	701a      	strb	r2, [r3, #0]
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    d802:	230e      	movs	r3, #14
    d804:	18fb      	adds	r3, r7, r3
    d806:	683a      	ldr	r2, [r7, #0]
    d808:	7812      	ldrb	r2, [r2, #0]
    d80a:	701a      	strb	r2, [r3, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    d80c:	4a0e      	ldr	r2, [pc, #56]	; (d848 <ValidateDataRateRxT1+0x5c>)
    d80e:	2354      	movs	r3, #84	; 0x54
    d810:	33ff      	adds	r3, #255	; 0xff
    d812:	5cd3      	ldrb	r3, [r2, r3]
    d814:	220e      	movs	r2, #14
    d816:	18ba      	adds	r2, r7, r2
    d818:	7812      	ldrb	r2, [r2, #0]
    d81a:	429a      	cmp	r2, r3
    d81c:	d808      	bhi.n	d830 <ValidateDataRateRxT1+0x44>
    d81e:	4a0a      	ldr	r2, [pc, #40]	; (d848 <ValidateDataRateRxT1+0x5c>)
    d820:	23a9      	movs	r3, #169	; 0xa9
    d822:	005b      	lsls	r3, r3, #1
    d824:	5cd3      	ldrb	r3, [r2, r3]
    d826:	220e      	movs	r2, #14
    d828:	18ba      	adds	r2, r7, r2
    d82a:	7812      	ldrb	r2, [r2, #0]
    d82c:	429a      	cmp	r2, r3
    d82e:	d203      	bcs.n	d838 <ValidateDataRateRxT1+0x4c>
	{
		result = LORAWAN_INVALID_PARAMETER;
    d830:	230f      	movs	r3, #15
    d832:	18fb      	adds	r3, r7, r3
    d834:	220a      	movs	r2, #10
    d836:	701a      	strb	r2, [r3, #0]
	}
	return result;
    d838:	230f      	movs	r3, #15
    d83a:	18fb      	adds	r3, r7, r3
    d83c:	781b      	ldrb	r3, [r3, #0]
}
    d83e:	0018      	movs	r0, r3
    d840:	46bd      	mov	sp, r7
    d842:	b004      	add	sp, #16
    d844:	bd80      	pop	{r7, pc}
    d846:	46c0      	nop			; (mov r8, r8)
    d848:	200014a8 	.word	0x200014a8

0000d84c <ValidateDataRateRxT2>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    d84c:	b580      	push	{r7, lr}
    d84e:	b084      	sub	sp, #16
    d850:	af00      	add	r7, sp, #0
    d852:	0002      	movs	r2, r0
    d854:	6039      	str	r1, [r7, #0]
    d856:	1dfb      	adds	r3, r7, #7
    d858:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    d85a:	230f      	movs	r3, #15
    d85c:	18fb      	adds	r3, r7, r3
    d85e:	2208      	movs	r2, #8
    d860:	701a      	strb	r2, [r3, #0]
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    d862:	230e      	movs	r3, #14
    d864:	18fb      	adds	r3, r7, r3
    d866:	683a      	ldr	r2, [r7, #0]
    d868:	7812      	ldrb	r2, [r2, #0]
    d86a:	701a      	strb	r2, [r3, #0]

    if(dataRate > RegParams.minDataRate || (
    d86c:	4b11      	ldr	r3, [pc, #68]	; (d8b4 <ValidateDataRateRxT2+0x68>)
    d86e:	2224      	movs	r2, #36	; 0x24
    d870:	5c9b      	ldrb	r3, [r3, r2]
    d872:	220e      	movs	r2, #14
    d874:	18ba      	adds	r2, r7, r2
    d876:	7812      	ldrb	r2, [r2, #0]
    d878:	429a      	cmp	r2, r3
    d87a:	d810      	bhi.n	d89e <ValidateDataRateRxT2+0x52>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    d87c:	4a0d      	ldr	r2, [pc, #52]	; (d8b4 <ValidateDataRateRxT2+0x68>)
    d87e:	23c4      	movs	r3, #196	; 0xc4
    d880:	33ff      	adds	r3, #255	; 0xff
    d882:	5cd3      	ldrb	r3, [r2, r3]
    d884:	2202      	movs	r2, #2
    d886:	4013      	ands	r3, r2
    d888:	b2db      	uxtb	r3, r3
    if(dataRate > RegParams.minDataRate || (
    d88a:	2b00      	cmp	r3, #0
    d88c:	d00b      	beq.n	d8a6 <ValidateDataRateRxT2+0x5a>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    d88e:	4b09      	ldr	r3, [pc, #36]	; (d8b4 <ValidateDataRateRxT2+0x68>)
    d890:	2222      	movs	r2, #34	; 0x22
    d892:	5c9b      	ldrb	r3, [r3, r2]
    d894:	220e      	movs	r2, #14
    d896:	18ba      	adds	r2, r7, r2
    d898:	7812      	ldrb	r2, [r2, #0]
    d89a:	429a      	cmp	r2, r3
    d89c:	d203      	bcs.n	d8a6 <ValidateDataRateRxT2+0x5a>
	{
		result = LORAWAN_INVALID_PARAMETER;
    d89e:	230f      	movs	r3, #15
    d8a0:	18fb      	adds	r3, r7, r3
    d8a2:	220a      	movs	r2, #10
    d8a4:	701a      	strb	r2, [r3, #0]
	}

	return result;
    d8a6:	230f      	movs	r3, #15
    d8a8:	18fb      	adds	r3, r7, r3
    d8aa:	781b      	ldrb	r3, [r3, #0]
}
    d8ac:	0018      	movs	r0, r3
    d8ae:	46bd      	mov	sp, r7
    d8b0:	b004      	add	sp, #16
    d8b2:	bd80      	pop	{r7, pc}
    d8b4:	200014a8 	.word	0x200014a8

0000d8b8 <ValidateChannelId>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the Channel Id is not supported
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelId (LorawanRegionalAttributes_t attr, void *attrInput)  //if allowedForDefaultChannels is 1, all the channels can be modified, if it is 0 channels 0, 1, 2 and 16, 17, and 18 (dual band) cannot be modified
{
    d8b8:	b580      	push	{r7, lr}
    d8ba:	b084      	sub	sp, #16
    d8bc:	af00      	add	r7, sp, #0
    d8be:	0002      	movs	r2, r0
    d8c0:	6039      	str	r1, [r7, #0]
    d8c2:	1dfb      	adds	r3, r7, #7
    d8c4:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    d8c6:	230f      	movs	r3, #15
    d8c8:	18fb      	adds	r3, r7, r3
    d8ca:	2208      	movs	r2, #8
    d8cc:	701a      	strb	r2, [r3, #0]
	
    uint8_t channelId = *(uint8_t *)attrInput;
    d8ce:	230e      	movs	r3, #14
    d8d0:	18fb      	adds	r3, r7, r3
    d8d2:	683a      	ldr	r2, [r7, #0]
    d8d4:	7812      	ldrb	r2, [r2, #0]
    d8d6:	701a      	strb	r2, [r3, #0]
	
    if (channelId >= RegParams.maxChannels)
    d8d8:	230e      	movs	r3, #14
    d8da:	18fb      	adds	r3, r7, r3
    d8dc:	781b      	ldrb	r3, [r3, #0]
    d8de:	4a08      	ldr	r2, [pc, #32]	; (d900 <ValidateChannelId+0x48>)
    d8e0:	212a      	movs	r1, #42	; 0x2a
    d8e2:	5652      	ldrsb	r2, [r2, r1]
    d8e4:	4293      	cmp	r3, r2
    d8e6:	db03      	blt.n	d8f0 <ValidateChannelId+0x38>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    d8e8:	230f      	movs	r3, #15
    d8ea:	18fb      	adds	r3, r7, r3
    d8ec:	220a      	movs	r2, #10
    d8ee:	701a      	strb	r2, [r3, #0]
    }
	
    return result;
    d8f0:	230f      	movs	r3, #15
    d8f2:	18fb      	adds	r3, r7, r3
    d8f4:	781b      	ldrb	r3, [r3, #0]
}
    d8f6:	0018      	movs	r0, r3
    d8f8:	46bd      	mov	sp, r7
    d8fa:	b004      	add	sp, #16
    d8fc:	bd80      	pop	{r7, pc}
    d8fe:	46c0      	nop			; (mov r8, r8)
    d900:	200014a8 	.word	0x200014a8

0000d904 <ValidateChannelIdT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    d904:	b580      	push	{r7, lr}
    d906:	b084      	sub	sp, #16
    d908:	af00      	add	r7, sp, #0
    d90a:	0002      	movs	r2, r0
    d90c:	6039      	str	r1, [r7, #0]
    d90e:	1dfb      	adds	r3, r7, #7
    d910:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    d912:	230f      	movs	r3, #15
    d914:	18fb      	adds	r3, r7, r3
    d916:	2208      	movs	r2, #8
    d918:	701a      	strb	r2, [r3, #0]
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    d91a:	230c      	movs	r3, #12
    d91c:	18fa      	adds	r2, r7, r3
    d91e:	683b      	ldr	r3, [r7, #0]
    d920:	0010      	movs	r0, r2
    d922:	0019      	movs	r1, r3
    d924:	2302      	movs	r3, #2
    d926:	001a      	movs	r2, r3
    d928:	4b13      	ldr	r3, [pc, #76]	; (d978 <ValidateChannelIdT2+0x74>)
    d92a:	4798      	blx	r3
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    d92c:	230c      	movs	r3, #12
    d92e:	18fb      	adds	r3, r7, r3
    d930:	781b      	ldrb	r3, [r3, #0]
    d932:	0019      	movs	r1, r3
    d934:	4b11      	ldr	r3, [pc, #68]	; (d97c <ValidateChannelIdT2+0x78>)
    d936:	222a      	movs	r2, #42	; 0x2a
    d938:	569b      	ldrsb	r3, [r3, r2]
    d93a:	4299      	cmp	r1, r3
    d93c:	da10      	bge.n	d960 <ValidateChannelIdT2+0x5c>
    d93e:	230c      	movs	r3, #12
    d940:	18fb      	adds	r3, r7, r3
    d942:	785b      	ldrb	r3, [r3, #1]
    d944:	2201      	movs	r2, #1
    d946:	4053      	eors	r3, r2
    d948:	b2db      	uxtb	r3, r3
    d94a:	2b00      	cmp	r3, #0
    d94c:	d00c      	beq.n	d968 <ValidateChannelIdT2+0x64>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    d94e:	230c      	movs	r3, #12
    d950:	18fb      	adds	r3, r7, r3
    d952:	781a      	ldrb	r2, [r3, #0]
    d954:	4909      	ldr	r1, [pc, #36]	; (d97c <ValidateChannelIdT2+0x78>)
    d956:	23c2      	movs	r3, #194	; 0xc2
    d958:	33ff      	adds	r3, #255	; 0xff
    d95a:	5ccb      	ldrb	r3, [r1, r3]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    d95c:	429a      	cmp	r2, r3
    d95e:	d203      	bcs.n	d968 <ValidateChannelIdT2+0x64>
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    d960:	230f      	movs	r3, #15
    d962:	18fb      	adds	r3, r7, r3
    d964:	220a      	movs	r2, #10
    d966:	701a      	strb	r2, [r3, #0]
	 }
	 return retVal;
    d968:	230f      	movs	r3, #15
    d96a:	18fb      	adds	r3, r7, r3
    d96c:	781b      	ldrb	r3, [r3, #0]
}
    d96e:	0018      	movs	r0, r3
    d970:	46bd      	mov	sp, r7
    d972:	b004      	add	sp, #16
    d974:	bd80      	pop	{r7, pc}
    d976:	46c0      	nop			; (mov r8, r8)
    d978:	00024149 	.word	0x00024149
    d97c:	200014a8 	.word	0x200014a8

0000d980 <UpdateMinMaxChDataRate>:
/*
 * \brief Updates the Min and Max Channel datarate of all the enbled channels
 * \param[out] minmax_val Min MAX Datarate of the Enabled Channels
 */
static void UpdateMinMaxChDataRate (MinMaxDr_t* minmax_val)
{
    d980:	b580      	push	{r7, lr}
    d982:	b084      	sub	sp, #16
    d984:	af00      	add	r7, sp, #0
    d986:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    d988:	230e      	movs	r3, #14
    d98a:	18fb      	adds	r3, r7, r3
    d98c:	4a6f      	ldr	r2, [pc, #444]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    d98e:	2124      	movs	r1, #36	; 0x24
    d990:	5c52      	ldrb	r2, [r2, r1]
    d992:	701a      	strb	r2, [r3, #0]
	uint8_t maxDataRate = RegParams.maxDataRate;
    d994:	230d      	movs	r3, #13
    d996:	18fb      	adds	r3, r7, r3
    d998:	4a6c      	ldr	r2, [pc, #432]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    d99a:	2125      	movs	r1, #37	; 0x25
    d99c:	5c52      	ldrb	r2, [r2, r1]
    d99e:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < RegParams.maxChannels; i++)
    d9a0:	230f      	movs	r3, #15
    d9a2:	18fb      	adds	r3, r7, r3
    d9a4:	2200      	movs	r2, #0
    d9a6:	701a      	strb	r2, [r3, #0]
    d9a8:	e094      	b.n	dad4 <UpdateMinMaxChDataRate+0x154>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    d9aa:	4b68      	ldr	r3, [pc, #416]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    d9ac:	791a      	ldrb	r2, [r3, #4]
    d9ae:	7959      	ldrb	r1, [r3, #5]
    d9b0:	0209      	lsls	r1, r1, #8
    d9b2:	430a      	orrs	r2, r1
    d9b4:	7999      	ldrb	r1, [r3, #6]
    d9b6:	0409      	lsls	r1, r1, #16
    d9b8:	430a      	orrs	r2, r1
    d9ba:	79db      	ldrb	r3, [r3, #7]
    d9bc:	061b      	lsls	r3, r3, #24
    d9be:	4313      	orrs	r3, r2
    d9c0:	001a      	movs	r2, r3
    d9c2:	230f      	movs	r3, #15
    d9c4:	18fb      	adds	r3, r7, r3
    d9c6:	781b      	ldrb	r3, [r3, #0]
    d9c8:	005b      	lsls	r3, r3, #1
    d9ca:	18d3      	adds	r3, r2, r3
    d9cc:	785b      	ldrb	r3, [r3, #1]
    d9ce:	071b      	lsls	r3, r3, #28
    d9d0:	0f1b      	lsrs	r3, r3, #28
    d9d2:	b2db      	uxtb	r3, r3
    d9d4:	001a      	movs	r2, r3
    d9d6:	230e      	movs	r3, #14
    d9d8:	18fb      	adds	r3, r7, r3
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	429a      	cmp	r2, r3
    d9de:	da2b      	bge.n	da38 <UpdateMinMaxChDataRate+0xb8>
    d9e0:	4b5a      	ldr	r3, [pc, #360]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    d9e2:	791a      	ldrb	r2, [r3, #4]
    d9e4:	7959      	ldrb	r1, [r3, #5]
    d9e6:	0209      	lsls	r1, r1, #8
    d9e8:	430a      	orrs	r2, r1
    d9ea:	7999      	ldrb	r1, [r3, #6]
    d9ec:	0409      	lsls	r1, r1, #16
    d9ee:	430a      	orrs	r2, r1
    d9f0:	79db      	ldrb	r3, [r3, #7]
    d9f2:	061b      	lsls	r3, r3, #24
    d9f4:	4313      	orrs	r3, r2
    d9f6:	001a      	movs	r2, r3
    d9f8:	230f      	movs	r3, #15
    d9fa:	18fb      	adds	r3, r7, r3
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	005b      	lsls	r3, r3, #1
    da00:	18d3      	adds	r3, r2, r3
    da02:	781b      	ldrb	r3, [r3, #0]
    da04:	2b00      	cmp	r3, #0
    da06:	d017      	beq.n	da38 <UpdateMinMaxChDataRate+0xb8>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
    da08:	4b50      	ldr	r3, [pc, #320]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    da0a:	791a      	ldrb	r2, [r3, #4]
    da0c:	7959      	ldrb	r1, [r3, #5]
    da0e:	0209      	lsls	r1, r1, #8
    da10:	430a      	orrs	r2, r1
    da12:	7999      	ldrb	r1, [r3, #6]
    da14:	0409      	lsls	r1, r1, #16
    da16:	430a      	orrs	r2, r1
    da18:	79db      	ldrb	r3, [r3, #7]
    da1a:	061b      	lsls	r3, r3, #24
    da1c:	4313      	orrs	r3, r2
    da1e:	001a      	movs	r2, r3
    da20:	230f      	movs	r3, #15
    da22:	18fb      	adds	r3, r7, r3
    da24:	781b      	ldrb	r3, [r3, #0]
    da26:	005b      	lsls	r3, r3, #1
    da28:	18d3      	adds	r3, r2, r3
    da2a:	785b      	ldrb	r3, [r3, #1]
    da2c:	071b      	lsls	r3, r3, #28
    da2e:	0f1b      	lsrs	r3, r3, #28
    da30:	b2da      	uxtb	r2, r3
    da32:	230e      	movs	r3, #14
    da34:	18fb      	adds	r3, r7, r3
    da36:	701a      	strb	r2, [r3, #0]
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    da38:	4b44      	ldr	r3, [pc, #272]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    da3a:	791a      	ldrb	r2, [r3, #4]
    da3c:	7959      	ldrb	r1, [r3, #5]
    da3e:	0209      	lsls	r1, r1, #8
    da40:	430a      	orrs	r2, r1
    da42:	7999      	ldrb	r1, [r3, #6]
    da44:	0409      	lsls	r1, r1, #16
    da46:	430a      	orrs	r2, r1
    da48:	79db      	ldrb	r3, [r3, #7]
    da4a:	061b      	lsls	r3, r3, #24
    da4c:	4313      	orrs	r3, r2
    da4e:	001a      	movs	r2, r3
    da50:	230f      	movs	r3, #15
    da52:	18fb      	adds	r3, r7, r3
    da54:	781b      	ldrb	r3, [r3, #0]
    da56:	005b      	lsls	r3, r3, #1
    da58:	18d3      	adds	r3, r2, r3
    da5a:	785b      	ldrb	r3, [r3, #1]
    da5c:	061b      	lsls	r3, r3, #24
    da5e:	0f1b      	lsrs	r3, r3, #28
    da60:	b2db      	uxtb	r3, r3
    da62:	001a      	movs	r2, r3
    da64:	230d      	movs	r3, #13
    da66:	18fb      	adds	r3, r7, r3
    da68:	781b      	ldrb	r3, [r3, #0]
    da6a:	429a      	cmp	r2, r3
    da6c:	dd2b      	ble.n	dac6 <UpdateMinMaxChDataRate+0x146>
    da6e:	4b37      	ldr	r3, [pc, #220]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    da70:	791a      	ldrb	r2, [r3, #4]
    da72:	7959      	ldrb	r1, [r3, #5]
    da74:	0209      	lsls	r1, r1, #8
    da76:	430a      	orrs	r2, r1
    da78:	7999      	ldrb	r1, [r3, #6]
    da7a:	0409      	lsls	r1, r1, #16
    da7c:	430a      	orrs	r2, r1
    da7e:	79db      	ldrb	r3, [r3, #7]
    da80:	061b      	lsls	r3, r3, #24
    da82:	4313      	orrs	r3, r2
    da84:	001a      	movs	r2, r3
    da86:	230f      	movs	r3, #15
    da88:	18fb      	adds	r3, r7, r3
    da8a:	781b      	ldrb	r3, [r3, #0]
    da8c:	005b      	lsls	r3, r3, #1
    da8e:	18d3      	adds	r3, r2, r3
    da90:	781b      	ldrb	r3, [r3, #0]
    da92:	2b00      	cmp	r3, #0
    da94:	d017      	beq.n	dac6 <UpdateMinMaxChDataRate+0x146>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    da96:	4b2d      	ldr	r3, [pc, #180]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    da98:	791a      	ldrb	r2, [r3, #4]
    da9a:	7959      	ldrb	r1, [r3, #5]
    da9c:	0209      	lsls	r1, r1, #8
    da9e:	430a      	orrs	r2, r1
    daa0:	7999      	ldrb	r1, [r3, #6]
    daa2:	0409      	lsls	r1, r1, #16
    daa4:	430a      	orrs	r2, r1
    daa6:	79db      	ldrb	r3, [r3, #7]
    daa8:	061b      	lsls	r3, r3, #24
    daaa:	4313      	orrs	r3, r2
    daac:	001a      	movs	r2, r3
    daae:	230f      	movs	r3, #15
    dab0:	18fb      	adds	r3, r7, r3
    dab2:	781b      	ldrb	r3, [r3, #0]
    dab4:	005b      	lsls	r3, r3, #1
    dab6:	18d3      	adds	r3, r2, r3
    dab8:	785b      	ldrb	r3, [r3, #1]
    daba:	061b      	lsls	r3, r3, #24
    dabc:	0f1b      	lsrs	r3, r3, #28
    dabe:	b2da      	uxtb	r2, r3
    dac0:	230d      	movs	r3, #13
    dac2:	18fb      	adds	r3, r7, r3
    dac4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < RegParams.maxChannels; i++)
    dac6:	230f      	movs	r3, #15
    dac8:	18fb      	adds	r3, r7, r3
    daca:	781a      	ldrb	r2, [r3, #0]
    dacc:	230f      	movs	r3, #15
    dace:	18fb      	adds	r3, r7, r3
    dad0:	3201      	adds	r2, #1
    dad2:	701a      	strb	r2, [r3, #0]
    dad4:	230f      	movs	r3, #15
    dad6:	18fb      	adds	r3, r7, r3
    dad8:	781b      	ldrb	r3, [r3, #0]
    dada:	4a1c      	ldr	r2, [pc, #112]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    dadc:	212a      	movs	r1, #42	; 0x2a
    dade:	5652      	ldrsb	r2, [r2, r1]
    dae0:	4293      	cmp	r3, r2
    dae2:	da00      	bge.n	dae6 <UpdateMinMaxChDataRate+0x166>
    dae4:	e761      	b.n	d9aa <UpdateMinMaxChDataRate+0x2a>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    dae6:	4a19      	ldr	r2, [pc, #100]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    dae8:	23c4      	movs	r3, #196	; 0xc4
    daea:	33ff      	adds	r3, #255	; 0xff
    daec:	5cd3      	ldrb	r3, [r2, r3]
    daee:	2201      	movs	r2, #1
    daf0:	4013      	ands	r3, r2
    daf2:	b2db      	uxtb	r3, r3
    daf4:	2b00      	cmp	r3, #0
    daf6:	d01a      	beq.n	db2e <UpdateMinMaxChDataRate+0x1ae>
    daf8:	4b14      	ldr	r3, [pc, #80]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    dafa:	222f      	movs	r2, #47	; 0x2f
    dafc:	5c9b      	ldrb	r3, [r3, r2]
    dafe:	001a      	movs	r2, r3
    db00:	4b13      	ldr	r3, [pc, #76]	; (db50 <UpdateMinMaxChDataRate+0x1d0>)
    db02:	4113      	asrs	r3, r2
    db04:	2201      	movs	r2, #1
    db06:	4013      	ands	r3, r2
    db08:	d108      	bne.n	db1c <UpdateMinMaxChDataRate+0x19c>
    db0a:	4b10      	ldr	r3, [pc, #64]	; (db4c <UpdateMinMaxChDataRate+0x1cc>)
    db0c:	222f      	movs	r2, #47	; 0x2f
    db0e:	5c9b      	ldrb	r3, [r3, r2]
    db10:	001a      	movs	r2, r3
    db12:	2320      	movs	r3, #32
    db14:	4113      	asrs	r3, r2
    db16:	2201      	movs	r2, #1
    db18:	4013      	ands	r3, r2
    db1a:	d001      	beq.n	db20 <UpdateMinMaxChDataRate+0x1a0>
    db1c:	2301      	movs	r3, #1
    db1e:	e000      	b.n	db22 <UpdateMinMaxChDataRate+0x1a2>
    db20:	2300      	movs	r3, #0
    db22:	2b00      	cmp	r3, #0
    db24:	d003      	beq.n	db2e <UpdateMinMaxChDataRate+0x1ae>
	{
		minDataRate = DR2;
    db26:	230e      	movs	r3, #14
    db28:	18fb      	adds	r3, r7, r3
    db2a:	2202      	movs	r2, #2
    db2c:	701a      	strb	r2, [r3, #0]
	}
	
	minmax_val->minDr = minDataRate;
    db2e:	687b      	ldr	r3, [r7, #4]
    db30:	220e      	movs	r2, #14
    db32:	18ba      	adds	r2, r7, r2
    db34:	7812      	ldrb	r2, [r2, #0]
    db36:	701a      	strb	r2, [r3, #0]
	minmax_val->maxDr = maxDataRate;
    db38:	687b      	ldr	r3, [r7, #4]
    db3a:	220d      	movs	r2, #13
    db3c:	18ba      	adds	r2, r7, r2
    db3e:	7812      	ldrb	r2, [r2, #0]
    db40:	705a      	strb	r2, [r3, #1]
}
    db42:	46c0      	nop			; (mov r8, r8)
    db44:	46bd      	mov	sp, r7
    db46:	b004      	add	sp, #16
    db48:	bd80      	pop	{r7, pc}
    db4a:	46c0      	nop			; (mov r8, r8)
    db4c:	200014a8 	.word	0x200014a8
    db50:	00007fc0 	.word	0x00007fc0

0000db54 <ValidateChannelMaskCntl>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the channelMask Cntrol is not supported
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    db54:	b580      	push	{r7, lr}
    db56:	b084      	sub	sp, #16
    db58:	af00      	add	r7, sp, #0
    db5a:	0002      	movs	r2, r0
    db5c:	6039      	str	r1, [r7, #0]
    db5e:	1dfb      	adds	r3, r7, #7
    db60:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    db62:	230f      	movs	r3, #15
    db64:	18fb      	adds	r3, r7, r3
    db66:	2208      	movs	r2, #8
    db68:	701a      	strb	r2, [r3, #0]
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    db6a:	230e      	movs	r3, #14
    db6c:	18fb      	adds	r3, r7, r3
    db6e:	683a      	ldr	r2, [r7, #0]
    db70:	7812      	ldrb	r2, [r2, #0]
    db72:	701a      	strb	r2, [r3, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    db74:	230e      	movs	r3, #14
    db76:	18fb      	adds	r3, r7, r3
    db78:	781b      	ldrb	r3, [r3, #0]
    db7a:	2b05      	cmp	r3, #5
    db7c:	d004      	beq.n	db88 <ValidateChannelMaskCntl+0x34>
    db7e:	230e      	movs	r3, #14
    db80:	18fb      	adds	r3, r7, r3
    db82:	781b      	ldrb	r3, [r3, #0]
    db84:	2b07      	cmp	r3, #7
    db86:	d903      	bls.n	db90 <ValidateChannelMaskCntl+0x3c>
    {
        result = LORAWAN_INVALID_PARAMETER;
    db88:	230f      	movs	r3, #15
    db8a:	18fb      	adds	r3, r7, r3
    db8c:	220a      	movs	r2, #10
    db8e:	701a      	strb	r2, [r3, #0]
    }

    return result;
    db90:	230f      	movs	r3, #15
    db92:	18fb      	adds	r3, r7, r3
    db94:	781b      	ldrb	r3, [r3, #0]
}
    db96:	0018      	movs	r0, r3
    db98:	46bd      	mov	sp, r7
    db9a:	b004      	add	sp, #16
    db9c:	bd80      	pop	{r7, pc}
	...

0000dba0 <ValidateChMaskChCntl>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the channelMask Cntrol is not supported
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChMaskChCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    dba0:	b590      	push	{r4, r7, lr}
    dba2:	b085      	sub	sp, #20
    dba4:	af00      	add	r7, sp, #0
    dba6:	0002      	movs	r2, r0
    dba8:	6039      	str	r1, [r7, #0]
    dbaa:	1dfb      	adds	r3, r7, #7
    dbac:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    dbae:	230f      	movs	r3, #15
    dbb0:	18fb      	adds	r3, r7, r3
    dbb2:	220a      	movs	r2, #10
    dbb4:	701a      	strb	r2, [r3, #0]
	
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    dbb6:	2308      	movs	r3, #8
    dbb8:	18fa      	adds	r2, r7, r3
    dbba:	683b      	ldr	r3, [r7, #0]
    dbbc:	0010      	movs	r0, r2
    dbbe:	0019      	movs	r1, r3
    dbc0:	2304      	movs	r3, #4
    dbc2:	001a      	movs	r2, r3
    dbc4:	4b16      	ldr	r3, [pc, #88]	; (dc20 <ValidateChMaskChCntl+0x80>)
    dbc6:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    dbc8:	2308      	movs	r3, #8
    dbca:	18fb      	adds	r3, r7, r3
    dbcc:	885b      	ldrh	r3, [r3, #2]
    dbce:	2b00      	cmp	r3, #0
    dbd0:	d109      	bne.n	dbe6 <ValidateChMaskChCntl+0x46>
    dbd2:	2308      	movs	r3, #8
    dbd4:	18fb      	adds	r3, r7, r3
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	2b07      	cmp	r3, #7
    dbda:	d104      	bne.n	dbe6 <ValidateChMaskChCntl+0x46>
    {
        result = LORAWAN_INVALID_PARAMETER;
    dbdc:	230f      	movs	r3, #15
    dbde:	18fb      	adds	r3, r7, r3
    dbe0:	220a      	movs	r2, #10
    dbe2:	701a      	strb	r2, [r3, #0]
    dbe4:	e014      	b.n	dc10 <ValidateChMaskChCntl+0x70>
    }
	else
	{
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    dbe6:	2308      	movs	r3, #8
    dbe8:	18fb      	adds	r3, r7, r3
    dbea:	3302      	adds	r3, #2
    dbec:	0019      	movs	r1, r3
    dbee:	201a      	movs	r0, #26
    dbf0:	4b0c      	ldr	r3, [pc, #48]	; (dc24 <ValidateChMaskChCntl+0x84>)
    dbf2:	4798      	blx	r3
    dbf4:	0003      	movs	r3, r0
    dbf6:	001c      	movs	r4, r3
    dbf8:	2308      	movs	r3, #8
    dbfa:	18fb      	adds	r3, r7, r3
    dbfc:	0019      	movs	r1, r3
    dbfe:	201b      	movs	r0, #27
    dc00:	4b09      	ldr	r3, [pc, #36]	; (dc28 <ValidateChMaskChCntl+0x88>)
    dc02:	4798      	blx	r3
    dc04:	0003      	movs	r3, r0
    dc06:	001a      	movs	r2, r3
    dc08:	230f      	movs	r3, #15
    dc0a:	18fb      	adds	r3, r7, r3
    dc0c:	4322      	orrs	r2, r4
    dc0e:	701a      	strb	r2, [r3, #0]
	}
    return result;
    dc10:	230f      	movs	r3, #15
    dc12:	18fb      	adds	r3, r7, r3
    dc14:	781b      	ldrb	r3, [r3, #0]
}
    dc16:	0018      	movs	r0, r3
    dc18:	46bd      	mov	sp, r7
    dc1a:	b005      	add	sp, #20
    dc1c:	bd90      	pop	{r4, r7, pc}
    dc1e:	46c0      	nop			; (mov r8, r8)
    dc20:	00024149 	.word	0x00024149
    dc24:	0000f20d 	.word	0x0000f20d
    dc28:	0000db55 	.word	0x0000db55

0000dc2c <ValidateChMaskChCntlT2>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the channelMask Cntrol is not supported
 */
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChMaskChCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    dc2c:	b580      	push	{r7, lr}
    dc2e:	b084      	sub	sp, #16
    dc30:	af00      	add	r7, sp, #0
    dc32:	0002      	movs	r2, r0
    dc34:	6039      	str	r1, [r7, #0]
    dc36:	1dfb      	adds	r3, r7, #7
    dc38:	701a      	strb	r2, [r3, #0]
//     StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
// 	
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    dc3a:	230c      	movs	r3, #12
    dc3c:	18fa      	adds	r2, r7, r3
    dc3e:	683b      	ldr	r3, [r7, #0]
    dc40:	0010      	movs	r0, r2
    dc42:	0019      	movs	r1, r3
    dc44:	2304      	movs	r3, #4
    dc46:	001a      	movs	r2, r3
    dc48:	4b13      	ldr	r3, [pc, #76]	; (dc98 <ValidateChMaskChCntlT2+0x6c>)
    dc4a:	4798      	blx	r3
// 	    result = ((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)));
// 	}
// 
//     return result;
	/*If Both Mask and Cntl are 0 then its an invalid combination*/
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    dc4c:	230c      	movs	r3, #12
    dc4e:	18fb      	adds	r3, r7, r3
    dc50:	885b      	ldrh	r3, [r3, #2]
    dc52:	2b00      	cmp	r3, #0
    dc54:	d104      	bne.n	dc60 <ValidateChMaskChCntlT2+0x34>
    dc56:	230c      	movs	r3, #12
    dc58:	18fb      	adds	r3, r7, r3
    dc5a:	781b      	ldrb	r3, [r3, #0]
    dc5c:	2b00      	cmp	r3, #0
    dc5e:	d016      	beq.n	dc8e <ValidateChMaskChCntlT2+0x62>
	{
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    dc60:	230c      	movs	r3, #12
    dc62:	18fb      	adds	r3, r7, r3
    dc64:	3302      	adds	r3, #2
    dc66:	0019      	movs	r1, r3
    dc68:	201a      	movs	r0, #26
    dc6a:	4b0c      	ldr	r3, [pc, #48]	; (dc9c <ValidateChMaskChCntlT2+0x70>)
    dc6c:	4798      	blx	r3
    dc6e:	0003      	movs	r3, r0
    dc70:	2b08      	cmp	r3, #8
    dc72:	d10a      	bne.n	dc8a <ValidateChMaskChCntlT2+0x5e>
    dc74:	230c      	movs	r3, #12
    dc76:	18fb      	adds	r3, r7, r3
    dc78:	0019      	movs	r1, r3
    dc7a:	201b      	movs	r0, #27
    dc7c:	4b08      	ldr	r3, [pc, #32]	; (dca0 <ValidateChMaskChCntlT2+0x74>)
    dc7e:	4798      	blx	r3
    dc80:	0003      	movs	r3, r0
    dc82:	2b08      	cmp	r3, #8
    dc84:	d101      	bne.n	dc8a <ValidateChMaskChCntlT2+0x5e>
		{
			return LORAWAN_SUCCESS;
    dc86:	2308      	movs	r3, #8
    dc88:	e002      	b.n	dc90 <ValidateChMaskChCntlT2+0x64>
	}
		else
		{
			return LORAWAN_INVALID_PARAMETER;
    dc8a:	230a      	movs	r3, #10
    dc8c:	e000      	b.n	dc90 <ValidateChMaskChCntlT2+0x64>
}
	}
	else
	{
		return LORAWAN_INVALID_PARAMETER;
    dc8e:	230a      	movs	r3, #10
	}
}
    dc90:	0018      	movs	r0, r3
    dc92:	46bd      	mov	sp, r7
    dc94:	b004      	add	sp, #16
    dc96:	bd80      	pop	{r7, pc}
    dc98:	00024149 	.word	0x00024149
    dc9c:	0000f225 	.word	0x0000f225
    dca0:	0000f2f9 	.word	0x0000f2f9

0000dca4 <getChBandDrT1>:
 * supported by all the channels 
 * \retval Data Range supported by the Channel band
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static DataRange_t getChBandDrT1(uint8_t chMaskCntl,uint16_t channelMask)
{
    dca4:	b580      	push	{r7, lr}
    dca6:	b086      	sub	sp, #24
    dca8:	af00      	add	r7, sp, #0
    dcaa:	0002      	movs	r2, r0
    dcac:	1dfb      	adds	r3, r7, #7
    dcae:	701a      	strb	r2, [r3, #0]
    dcb0:	1d3b      	adds	r3, r7, #4
    dcb2:	1c0a      	adds	r2, r1, #0
    dcb4:	801a      	strh	r2, [r3, #0]

	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    dcb6:	2317      	movs	r3, #23
    dcb8:	18fb      	adds	r3, r7, r3
    dcba:	2207      	movs	r2, #7
    dcbc:	701a      	strb	r2, [r3, #0]
    dcbe:	2316      	movs	r3, #22
    dcc0:	18fb      	adds	r3, r7, r3
    dcc2:	2200      	movs	r2, #0
    dcc4:	701a      	strb	r2, [r3, #0]
	uint16_t auxChannelMask;
	uint8_t startingIndex, endingIndex;
	DataRange_t bandDr;
	auxChannelMask = channelMask;
    dcc6:	2312      	movs	r3, #18
    dcc8:	18fb      	adds	r3, r7, r3
    dcca:	1d3a      	adds	r2, r7, #4
    dccc:	8812      	ldrh	r2, [r2, #0]
    dcce:	801a      	strh	r2, [r3, #0]
	
	if( RegParams.band == ISM_AU915)
    dcd0:	4bba      	ldr	r3, [pc, #744]	; (dfbc <getChBandDrT1+0x318>)
    dcd2:	222f      	movs	r2, #47	; 0x2f
    dcd4:	5c9b      	ldrb	r3, [r3, r2]
    dcd6:	2b03      	cmp	r3, #3
    dcd8:	d103      	bne.n	dce2 <getChBandDrT1+0x3e>
	{
		auxMinDataRate = DR6;
    dcda:	2317      	movs	r3, #23
    dcdc:	18fb      	adds	r3, r7, r3
    dcde:	2206      	movs	r2, #6
    dce0:	701a      	strb	r2, [r3, #0]
	}
	
	switch (chMaskCntl)
    dce2:	1dfb      	adds	r3, r7, #7
    dce4:	781b      	ldrb	r3, [r3, #0]
    dce6:	2b07      	cmp	r3, #7
    dce8:	d900      	bls.n	dcec <getChBandDrT1+0x48>
    dcea:	e13e      	b.n	df6a <getChBandDrT1+0x2c6>
    dcec:	009a      	lsls	r2, r3, #2
    dcee:	4bb4      	ldr	r3, [pc, #720]	; (dfc0 <getChBandDrT1+0x31c>)
    dcf0:	18d3      	adds	r3, r2, r3
    dcf2:	681b      	ldr	r3, [r3, #0]
    dcf4:	469f      	mov	pc, r3
		case 0:
		case 1:
		case 2:
		case 3:
		{
			startingIndex = chMaskCntl << SHIFT4;
    dcf6:	2311      	movs	r3, #17
    dcf8:	18fb      	adds	r3, r7, r3
    dcfa:	1dfa      	adds	r2, r7, #7
    dcfc:	7812      	ldrb	r2, [r2, #0]
    dcfe:	0112      	lsls	r2, r2, #4
    dd00:	701a      	strb	r2, [r3, #0]
			endingIndex = startingIndex + 16;
    dd02:	2310      	movs	r3, #16
    dd04:	18fb      	adds	r3, r7, r3
    dd06:	2211      	movs	r2, #17
    dd08:	18ba      	adds	r2, r7, r2
    dd0a:	7812      	ldrb	r2, [r2, #0]
    dd0c:	3210      	adds	r2, #16
    dd0e:	701a      	strb	r2, [r3, #0]
			for (i = startingIndex; i < endingIndex; i++)
    dd10:	2315      	movs	r3, #21
    dd12:	18fb      	adds	r3, r7, r3
    dd14:	2211      	movs	r2, #17
    dd16:	18ba      	adds	r2, r7, r2
    dd18:	7812      	ldrb	r2, [r2, #0]
    dd1a:	701a      	strb	r2, [r3, #0]
    dd1c:	e089      	b.n	de32 <getChBandDrT1+0x18e>
			{
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    dd1e:	4ba7      	ldr	r3, [pc, #668]	; (dfbc <getChBandDrT1+0x318>)
    dd20:	791a      	ldrb	r2, [r3, #4]
    dd22:	7959      	ldrb	r1, [r3, #5]
    dd24:	0209      	lsls	r1, r1, #8
    dd26:	430a      	orrs	r2, r1
    dd28:	7999      	ldrb	r1, [r3, #6]
    dd2a:	0409      	lsls	r1, r1, #16
    dd2c:	430a      	orrs	r2, r1
    dd2e:	79db      	ldrb	r3, [r3, #7]
    dd30:	061b      	lsls	r3, r3, #24
    dd32:	4313      	orrs	r3, r2
    dd34:	001a      	movs	r2, r3
    dd36:	2315      	movs	r3, #21
    dd38:	18fb      	adds	r3, r7, r3
    dd3a:	781b      	ldrb	r3, [r3, #0]
    dd3c:	005b      	lsls	r3, r3, #1
    dd3e:	18d3      	adds	r3, r2, r3
    dd40:	785b      	ldrb	r3, [r3, #1]
    dd42:	071b      	lsls	r3, r3, #28
    dd44:	0f1b      	lsrs	r3, r3, #28
    dd46:	b2db      	uxtb	r3, r3
    dd48:	001a      	movs	r2, r3
    dd4a:	2317      	movs	r3, #23
    dd4c:	18fb      	adds	r3, r7, r3
    dd4e:	781b      	ldrb	r3, [r3, #0]
    dd50:	429a      	cmp	r2, r3
    dd52:	da22      	bge.n	dd9a <getChBandDrT1+0xf6>
    dd54:	2312      	movs	r3, #18
    dd56:	18fb      	adds	r3, r7, r3
    dd58:	881b      	ldrh	r3, [r3, #0]
    dd5a:	2201      	movs	r2, #1
    dd5c:	4013      	ands	r3, r2
    dd5e:	d104      	bne.n	dd6a <getChBandDrT1+0xc6>
    dd60:	2312      	movs	r3, #18
    dd62:	18fb      	adds	r3, r7, r3
    dd64:	881b      	ldrh	r3, [r3, #0]
    dd66:	2b00      	cmp	r3, #0
    dd68:	d117      	bne.n	dd9a <getChBandDrT1+0xf6>
				{
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    dd6a:	4b94      	ldr	r3, [pc, #592]	; (dfbc <getChBandDrT1+0x318>)
    dd6c:	791a      	ldrb	r2, [r3, #4]
    dd6e:	7959      	ldrb	r1, [r3, #5]
    dd70:	0209      	lsls	r1, r1, #8
    dd72:	430a      	orrs	r2, r1
    dd74:	7999      	ldrb	r1, [r3, #6]
    dd76:	0409      	lsls	r1, r1, #16
    dd78:	430a      	orrs	r2, r1
    dd7a:	79db      	ldrb	r3, [r3, #7]
    dd7c:	061b      	lsls	r3, r3, #24
    dd7e:	4313      	orrs	r3, r2
    dd80:	001a      	movs	r2, r3
    dd82:	2315      	movs	r3, #21
    dd84:	18fb      	adds	r3, r7, r3
    dd86:	781b      	ldrb	r3, [r3, #0]
    dd88:	005b      	lsls	r3, r3, #1
    dd8a:	18d3      	adds	r3, r2, r3
    dd8c:	785b      	ldrb	r3, [r3, #1]
    dd8e:	071b      	lsls	r3, r3, #28
    dd90:	0f1b      	lsrs	r3, r3, #28
    dd92:	b2da      	uxtb	r2, r3
    dd94:	2317      	movs	r3, #23
    dd96:	18fb      	adds	r3, r7, r3
    dd98:	701a      	strb	r2, [r3, #0]
				}
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    dd9a:	4b88      	ldr	r3, [pc, #544]	; (dfbc <getChBandDrT1+0x318>)
    dd9c:	791a      	ldrb	r2, [r3, #4]
    dd9e:	7959      	ldrb	r1, [r3, #5]
    dda0:	0209      	lsls	r1, r1, #8
    dda2:	430a      	orrs	r2, r1
    dda4:	7999      	ldrb	r1, [r3, #6]
    dda6:	0409      	lsls	r1, r1, #16
    dda8:	430a      	orrs	r2, r1
    ddaa:	79db      	ldrb	r3, [r3, #7]
    ddac:	061b      	lsls	r3, r3, #24
    ddae:	4313      	orrs	r3, r2
    ddb0:	001a      	movs	r2, r3
    ddb2:	2315      	movs	r3, #21
    ddb4:	18fb      	adds	r3, r7, r3
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	005b      	lsls	r3, r3, #1
    ddba:	18d3      	adds	r3, r2, r3
    ddbc:	785b      	ldrb	r3, [r3, #1]
    ddbe:	061b      	lsls	r3, r3, #24
    ddc0:	0f1b      	lsrs	r3, r3, #28
    ddc2:	b2db      	uxtb	r3, r3
    ddc4:	001a      	movs	r2, r3
    ddc6:	2316      	movs	r3, #22
    ddc8:	18fb      	adds	r3, r7, r3
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	429a      	cmp	r2, r3
    ddce:	dd22      	ble.n	de16 <getChBandDrT1+0x172>
    ddd0:	2312      	movs	r3, #18
    ddd2:	18fb      	adds	r3, r7, r3
    ddd4:	881b      	ldrh	r3, [r3, #0]
    ddd6:	2201      	movs	r2, #1
    ddd8:	4013      	ands	r3, r2
    ddda:	d104      	bne.n	dde6 <getChBandDrT1+0x142>
    dddc:	2312      	movs	r3, #18
    ddde:	18fb      	adds	r3, r7, r3
    dde0:	881b      	ldrh	r3, [r3, #0]
    dde2:	2b00      	cmp	r3, #0
    dde4:	d117      	bne.n	de16 <getChBandDrT1+0x172>
				{
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    dde6:	4b75      	ldr	r3, [pc, #468]	; (dfbc <getChBandDrT1+0x318>)
    dde8:	791a      	ldrb	r2, [r3, #4]
    ddea:	7959      	ldrb	r1, [r3, #5]
    ddec:	0209      	lsls	r1, r1, #8
    ddee:	430a      	orrs	r2, r1
    ddf0:	7999      	ldrb	r1, [r3, #6]
    ddf2:	0409      	lsls	r1, r1, #16
    ddf4:	430a      	orrs	r2, r1
    ddf6:	79db      	ldrb	r3, [r3, #7]
    ddf8:	061b      	lsls	r3, r3, #24
    ddfa:	4313      	orrs	r3, r2
    ddfc:	001a      	movs	r2, r3
    ddfe:	2315      	movs	r3, #21
    de00:	18fb      	adds	r3, r7, r3
    de02:	781b      	ldrb	r3, [r3, #0]
    de04:	005b      	lsls	r3, r3, #1
    de06:	18d3      	adds	r3, r2, r3
    de08:	785b      	ldrb	r3, [r3, #1]
    de0a:	061b      	lsls	r3, r3, #24
    de0c:	0f1b      	lsrs	r3, r3, #28
    de0e:	b2da      	uxtb	r2, r3
    de10:	2316      	movs	r3, #22
    de12:	18fb      	adds	r3, r7, r3
    de14:	701a      	strb	r2, [r3, #0]
				}
				auxChannelMask = auxChannelMask >> SHIFT1;
    de16:	2312      	movs	r3, #18
    de18:	18fb      	adds	r3, r7, r3
    de1a:	2212      	movs	r2, #18
    de1c:	18ba      	adds	r2, r7, r2
    de1e:	8812      	ldrh	r2, [r2, #0]
    de20:	0852      	lsrs	r2, r2, #1
    de22:	801a      	strh	r2, [r3, #0]
			for (i = startingIndex; i < endingIndex; i++)
    de24:	2315      	movs	r3, #21
    de26:	18fb      	adds	r3, r7, r3
    de28:	781a      	ldrb	r2, [r3, #0]
    de2a:	2315      	movs	r3, #21
    de2c:	18fb      	adds	r3, r7, r3
    de2e:	3201      	adds	r2, #1
    de30:	701a      	strb	r2, [r3, #0]
    de32:	2315      	movs	r3, #21
    de34:	18fa      	adds	r2, r7, r3
    de36:	2310      	movs	r3, #16
    de38:	18fb      	adds	r3, r7, r3
    de3a:	7812      	ldrb	r2, [r2, #0]
    de3c:	781b      	ldrb	r3, [r3, #0]
    de3e:	429a      	cmp	r2, r3
    de40:	d200      	bcs.n	de44 <getChBandDrT1+0x1a0>
    de42:	e76c      	b.n	dd1e <getChBandDrT1+0x7a>
			}
		} break;
    de44:	e091      	b.n	df6a <getChBandDrT1+0x2c6>

		case 4:
		case 7:
		{
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    de46:	2317      	movs	r3, #23
    de48:	18fb      	adds	r3, r7, r3
    de4a:	495c      	ldr	r1, [pc, #368]	; (dfbc <getChBandDrT1+0x318>)
    de4c:	2252      	movs	r2, #82	; 0x52
    de4e:	32ff      	adds	r2, #255	; 0xff
    de50:	5c8a      	ldrb	r2, [r1, r2]
    de52:	701a      	strb	r2, [r3, #0]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    de54:	2316      	movs	r3, #22
    de56:	18fb      	adds	r3, r7, r3
    de58:	4958      	ldr	r1, [pc, #352]	; (dfbc <getChBandDrT1+0x318>)
    de5a:	2252      	movs	r2, #82	; 0x52
    de5c:	32ff      	adds	r2, #255	; 0xff
    de5e:	5c8a      	ldrb	r2, [r1, r2]
    de60:	701a      	strb	r2, [r3, #0]
		} break;
    de62:	e082      	b.n	df6a <getChBandDrT1+0x2c6>

		case 6:
		{
			// verify channels 0 to 63 for min/max datarate
			for (i = 0; i < 64; i++)
    de64:	2315      	movs	r3, #21
    de66:	18fb      	adds	r3, r7, r3
    de68:	2200      	movs	r2, #0
    de6a:	701a      	strb	r2, [r3, #0]
    de6c:	e06c      	b.n	df48 <getChBandDrT1+0x2a4>
			{
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    de6e:	4b53      	ldr	r3, [pc, #332]	; (dfbc <getChBandDrT1+0x318>)
    de70:	791a      	ldrb	r2, [r3, #4]
    de72:	7959      	ldrb	r1, [r3, #5]
    de74:	0209      	lsls	r1, r1, #8
    de76:	430a      	orrs	r2, r1
    de78:	7999      	ldrb	r1, [r3, #6]
    de7a:	0409      	lsls	r1, r1, #16
    de7c:	430a      	orrs	r2, r1
    de7e:	79db      	ldrb	r3, [r3, #7]
    de80:	061b      	lsls	r3, r3, #24
    de82:	4313      	orrs	r3, r2
    de84:	001a      	movs	r2, r3
    de86:	2315      	movs	r3, #21
    de88:	18fb      	adds	r3, r7, r3
    de8a:	781b      	ldrb	r3, [r3, #0]
    de8c:	005b      	lsls	r3, r3, #1
    de8e:	18d3      	adds	r3, r2, r3
    de90:	785b      	ldrb	r3, [r3, #1]
    de92:	071b      	lsls	r3, r3, #28
    de94:	0f1b      	lsrs	r3, r3, #28
    de96:	b2db      	uxtb	r3, r3
    de98:	001a      	movs	r2, r3
    de9a:	2317      	movs	r3, #23
    de9c:	18fb      	adds	r3, r7, r3
    de9e:	781b      	ldrb	r3, [r3, #0]
    dea0:	429a      	cmp	r2, r3
    dea2:	da17      	bge.n	ded4 <getChBandDrT1+0x230>
				{
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    dea4:	4b45      	ldr	r3, [pc, #276]	; (dfbc <getChBandDrT1+0x318>)
    dea6:	791a      	ldrb	r2, [r3, #4]
    dea8:	7959      	ldrb	r1, [r3, #5]
    deaa:	0209      	lsls	r1, r1, #8
    deac:	430a      	orrs	r2, r1
    deae:	7999      	ldrb	r1, [r3, #6]
    deb0:	0409      	lsls	r1, r1, #16
    deb2:	430a      	orrs	r2, r1
    deb4:	79db      	ldrb	r3, [r3, #7]
    deb6:	061b      	lsls	r3, r3, #24
    deb8:	4313      	orrs	r3, r2
    deba:	001a      	movs	r2, r3
    debc:	2315      	movs	r3, #21
    debe:	18fb      	adds	r3, r7, r3
    dec0:	781b      	ldrb	r3, [r3, #0]
    dec2:	005b      	lsls	r3, r3, #1
    dec4:	18d3      	adds	r3, r2, r3
    dec6:	785b      	ldrb	r3, [r3, #1]
    dec8:	071b      	lsls	r3, r3, #28
    deca:	0f1b      	lsrs	r3, r3, #28
    decc:	b2da      	uxtb	r2, r3
    dece:	2317      	movs	r3, #23
    ded0:	18fb      	adds	r3, r7, r3
    ded2:	701a      	strb	r2, [r3, #0]
				}
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    ded4:	4b39      	ldr	r3, [pc, #228]	; (dfbc <getChBandDrT1+0x318>)
    ded6:	791a      	ldrb	r2, [r3, #4]
    ded8:	7959      	ldrb	r1, [r3, #5]
    deda:	0209      	lsls	r1, r1, #8
    dedc:	430a      	orrs	r2, r1
    dede:	7999      	ldrb	r1, [r3, #6]
    dee0:	0409      	lsls	r1, r1, #16
    dee2:	430a      	orrs	r2, r1
    dee4:	79db      	ldrb	r3, [r3, #7]
    dee6:	061b      	lsls	r3, r3, #24
    dee8:	4313      	orrs	r3, r2
    deea:	001a      	movs	r2, r3
    deec:	2315      	movs	r3, #21
    deee:	18fb      	adds	r3, r7, r3
    def0:	781b      	ldrb	r3, [r3, #0]
    def2:	005b      	lsls	r3, r3, #1
    def4:	18d3      	adds	r3, r2, r3
    def6:	785b      	ldrb	r3, [r3, #1]
    def8:	061b      	lsls	r3, r3, #24
    defa:	0f1b      	lsrs	r3, r3, #28
    defc:	b2db      	uxtb	r3, r3
    defe:	001a      	movs	r2, r3
    df00:	2316      	movs	r3, #22
    df02:	18fb      	adds	r3, r7, r3
    df04:	781b      	ldrb	r3, [r3, #0]
    df06:	429a      	cmp	r2, r3
    df08:	dd17      	ble.n	df3a <getChBandDrT1+0x296>
				{
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    df0a:	4b2c      	ldr	r3, [pc, #176]	; (dfbc <getChBandDrT1+0x318>)
    df0c:	791a      	ldrb	r2, [r3, #4]
    df0e:	7959      	ldrb	r1, [r3, #5]
    df10:	0209      	lsls	r1, r1, #8
    df12:	430a      	orrs	r2, r1
    df14:	7999      	ldrb	r1, [r3, #6]
    df16:	0409      	lsls	r1, r1, #16
    df18:	430a      	orrs	r2, r1
    df1a:	79db      	ldrb	r3, [r3, #7]
    df1c:	061b      	lsls	r3, r3, #24
    df1e:	4313      	orrs	r3, r2
    df20:	001a      	movs	r2, r3
    df22:	2315      	movs	r3, #21
    df24:	18fb      	adds	r3, r7, r3
    df26:	781b      	ldrb	r3, [r3, #0]
    df28:	005b      	lsls	r3, r3, #1
    df2a:	18d3      	adds	r3, r2, r3
    df2c:	785b      	ldrb	r3, [r3, #1]
    df2e:	061b      	lsls	r3, r3, #24
    df30:	0f1b      	lsrs	r3, r3, #28
    df32:	b2da      	uxtb	r2, r3
    df34:	2316      	movs	r3, #22
    df36:	18fb      	adds	r3, r7, r3
    df38:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < 64; i++)
    df3a:	2315      	movs	r3, #21
    df3c:	18fb      	adds	r3, r7, r3
    df3e:	781a      	ldrb	r2, [r3, #0]
    df40:	2315      	movs	r3, #21
    df42:	18fb      	adds	r3, r7, r3
    df44:	3201      	adds	r2, #1
    df46:	701a      	strb	r2, [r3, #0]
    df48:	2315      	movs	r3, #21
    df4a:	18fb      	adds	r3, r7, r3
    df4c:	781b      	ldrb	r3, [r3, #0]
    df4e:	2b3f      	cmp	r3, #63	; 0x3f
    df50:	d98d      	bls.n	de6e <getChBandDrT1+0x1ca>
				}
			}
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    df52:	1d3b      	adds	r3, r7, #4
    df54:	881b      	ldrh	r3, [r3, #0]
    df56:	2b00      	cmp	r3, #0
    df58:	d006      	beq.n	df68 <getChBandDrT1+0x2c4>
			{
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    df5a:	2316      	movs	r3, #22
    df5c:	18fb      	adds	r3, r7, r3
    df5e:	4917      	ldr	r1, [pc, #92]	; (dfbc <getChBandDrT1+0x318>)
    df60:	2252      	movs	r2, #82	; 0x52
    df62:	32ff      	adds	r2, #255	; 0xff
    df64:	5c8a      	ldrb	r2, [r1, r2]
    df66:	701a      	strb	r2, [r3, #0]
			}
		} break;
    df68:	46c0      	nop			; (mov r8, r8)
	}
	
	bandDr.min = auxMinDataRate;
    df6a:	2317      	movs	r3, #23
    df6c:	18fb      	adds	r3, r7, r3
    df6e:	781b      	ldrb	r3, [r3, #0]
    df70:	220f      	movs	r2, #15
    df72:	4013      	ands	r3, r2
    df74:	b2da      	uxtb	r2, r3
    df76:	230c      	movs	r3, #12
    df78:	18fb      	adds	r3, r7, r3
    df7a:	210f      	movs	r1, #15
    df7c:	400a      	ands	r2, r1
    df7e:	0010      	movs	r0, r2
    df80:	781a      	ldrb	r2, [r3, #0]
    df82:	210f      	movs	r1, #15
    df84:	438a      	bics	r2, r1
    df86:	1c11      	adds	r1, r2, #0
    df88:	1c02      	adds	r2, r0, #0
    df8a:	430a      	orrs	r2, r1
    df8c:	701a      	strb	r2, [r3, #0]
	bandDr.max = auxMaxDataRate;
    df8e:	2316      	movs	r3, #22
    df90:	18fb      	adds	r3, r7, r3
    df92:	781b      	ldrb	r3, [r3, #0]
    df94:	220f      	movs	r2, #15
    df96:	4013      	ands	r3, r2
    df98:	b2da      	uxtb	r2, r3
    df9a:	230c      	movs	r3, #12
    df9c:	18fb      	adds	r3, r7, r3
    df9e:	0110      	lsls	r0, r2, #4
    dfa0:	781a      	ldrb	r2, [r3, #0]
    dfa2:	210f      	movs	r1, #15
    dfa4:	400a      	ands	r2, r1
    dfa6:	1c11      	adds	r1, r2, #0
    dfa8:	1c02      	adds	r2, r0, #0
    dfaa:	430a      	orrs	r2, r1
    dfac:	701a      	strb	r2, [r3, #0]
	
	return bandDr;
    dfae:	230c      	movs	r3, #12
    dfb0:	18fb      	adds	r3, r7, r3
    dfb2:	781b      	ldrb	r3, [r3, #0]
	
}
    dfb4:	1c18      	adds	r0, r3, #0
    dfb6:	46bd      	mov	sp, r7
    dfb8:	b006      	add	sp, #24
    dfba:	bd80      	pop	{r7, pc}
    dfbc:	200014a8 	.word	0x200014a8
    dfc0:	0002b234 	.word	0x0002b234

0000dfc4 <getChBandDrT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static DataRange_t getChBandDrT2(uint8_t chMaskCntl,uint16_t channelMask)
{
    dfc4:	b580      	push	{r7, lr}
    dfc6:	b084      	sub	sp, #16
    dfc8:	af00      	add	r7, sp, #0
    dfca:	0002      	movs	r2, r0
    dfcc:	1dfb      	adds	r3, r7, #7
    dfce:	701a      	strb	r2, [r3, #0]
    dfd0:	1d3b      	adds	r3, r7, #4
    dfd2:	1c0a      	adds	r2, r1, #0
    dfd4:	801a      	strh	r2, [r3, #0]
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    dfd6:	230f      	movs	r3, #15
    dfd8:	18fb      	adds	r3, r7, r3
    dfda:	2207      	movs	r2, #7
    dfdc:	701a      	strb	r2, [r3, #0]
    dfde:	230e      	movs	r3, #14
    dfe0:	18fb      	adds	r3, r7, r3
    dfe2:	2200      	movs	r2, #0
    dfe4:	701a      	strb	r2, [r3, #0]
	uint16_t auxChannelMask;
	DataRange_t bandDr;
	auxChannelMask = channelMask;
    dfe6:	230a      	movs	r3, #10
    dfe8:	18fb      	adds	r3, r7, r3
    dfea:	1d3a      	adds	r2, r7, #4
    dfec:	8812      	ldrh	r2, [r2, #0]
    dfee:	801a      	strh	r2, [r3, #0]
	
	switch (chMaskCntl)
    dff0:	1dfb      	adds	r3, r7, #7
    dff2:	781b      	ldrb	r3, [r3, #0]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d003      	beq.n	e000 <getChBandDrT2+0x3c>
    dff8:	2b06      	cmp	r3, #6
    dffa:	d100      	bne.n	dffe <getChBandDrT2+0x3a>
    dffc:	e08f      	b.n	e11e <getChBandDrT2+0x15a>
    dffe:	e109      	b.n	e214 <getChBandDrT2+0x250>
	{
		case 0:
		{
			for (i = 0; i < RegParams.maxChannels; i++)
    e000:	230d      	movs	r3, #13
    e002:	18fb      	adds	r3, r7, r3
    e004:	2200      	movs	r2, #0
    e006:	701a      	strb	r2, [r3, #0]
    e008:	e07f      	b.n	e10a <getChBandDrT2+0x146>
			{
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    e00a:	4b9b      	ldr	r3, [pc, #620]	; (e278 <getChBandDrT2+0x2b4>)
    e00c:	791a      	ldrb	r2, [r3, #4]
    e00e:	7959      	ldrb	r1, [r3, #5]
    e010:	0209      	lsls	r1, r1, #8
    e012:	430a      	orrs	r2, r1
    e014:	7999      	ldrb	r1, [r3, #6]
    e016:	0409      	lsls	r1, r1, #16
    e018:	430a      	orrs	r2, r1
    e01a:	79db      	ldrb	r3, [r3, #7]
    e01c:	061b      	lsls	r3, r3, #24
    e01e:	4313      	orrs	r3, r2
    e020:	001a      	movs	r2, r3
    e022:	230d      	movs	r3, #13
    e024:	18fb      	adds	r3, r7, r3
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	005b      	lsls	r3, r3, #1
    e02a:	18d3      	adds	r3, r2, r3
    e02c:	785b      	ldrb	r3, [r3, #1]
    e02e:	071b      	lsls	r3, r3, #28
    e030:	0f1b      	lsrs	r3, r3, #28
    e032:	b2db      	uxtb	r3, r3
    e034:	001a      	movs	r2, r3
    e036:	230f      	movs	r3, #15
    e038:	18fb      	adds	r3, r7, r3
    e03a:	781b      	ldrb	r3, [r3, #0]
    e03c:	429a      	cmp	r2, r3
    e03e:	da1d      	bge.n	e07c <getChBandDrT2+0xb8>
    e040:	230a      	movs	r3, #10
    e042:	18fb      	adds	r3, r7, r3
    e044:	881b      	ldrh	r3, [r3, #0]
    e046:	2201      	movs	r2, #1
    e048:	4013      	ands	r3, r2
    e04a:	d017      	beq.n	e07c <getChBandDrT2+0xb8>
				{
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    e04c:	4b8a      	ldr	r3, [pc, #552]	; (e278 <getChBandDrT2+0x2b4>)
    e04e:	791a      	ldrb	r2, [r3, #4]
    e050:	7959      	ldrb	r1, [r3, #5]
    e052:	0209      	lsls	r1, r1, #8
    e054:	430a      	orrs	r2, r1
    e056:	7999      	ldrb	r1, [r3, #6]
    e058:	0409      	lsls	r1, r1, #16
    e05a:	430a      	orrs	r2, r1
    e05c:	79db      	ldrb	r3, [r3, #7]
    e05e:	061b      	lsls	r3, r3, #24
    e060:	4313      	orrs	r3, r2
    e062:	001a      	movs	r2, r3
    e064:	230d      	movs	r3, #13
    e066:	18fb      	adds	r3, r7, r3
    e068:	781b      	ldrb	r3, [r3, #0]
    e06a:	005b      	lsls	r3, r3, #1
    e06c:	18d3      	adds	r3, r2, r3
    e06e:	785b      	ldrb	r3, [r3, #1]
    e070:	071b      	lsls	r3, r3, #28
    e072:	0f1b      	lsrs	r3, r3, #28
    e074:	b2da      	uxtb	r2, r3
    e076:	230f      	movs	r3, #15
    e078:	18fb      	adds	r3, r7, r3
    e07a:	701a      	strb	r2, [r3, #0]
				}
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    e07c:	4b7e      	ldr	r3, [pc, #504]	; (e278 <getChBandDrT2+0x2b4>)
    e07e:	791a      	ldrb	r2, [r3, #4]
    e080:	7959      	ldrb	r1, [r3, #5]
    e082:	0209      	lsls	r1, r1, #8
    e084:	430a      	orrs	r2, r1
    e086:	7999      	ldrb	r1, [r3, #6]
    e088:	0409      	lsls	r1, r1, #16
    e08a:	430a      	orrs	r2, r1
    e08c:	79db      	ldrb	r3, [r3, #7]
    e08e:	061b      	lsls	r3, r3, #24
    e090:	4313      	orrs	r3, r2
    e092:	001a      	movs	r2, r3
    e094:	230d      	movs	r3, #13
    e096:	18fb      	adds	r3, r7, r3
    e098:	781b      	ldrb	r3, [r3, #0]
    e09a:	005b      	lsls	r3, r3, #1
    e09c:	18d3      	adds	r3, r2, r3
    e09e:	785b      	ldrb	r3, [r3, #1]
    e0a0:	061b      	lsls	r3, r3, #24
    e0a2:	0f1b      	lsrs	r3, r3, #28
    e0a4:	b2db      	uxtb	r3, r3
    e0a6:	001a      	movs	r2, r3
    e0a8:	230e      	movs	r3, #14
    e0aa:	18fb      	adds	r3, r7, r3
    e0ac:	781b      	ldrb	r3, [r3, #0]
    e0ae:	429a      	cmp	r2, r3
    e0b0:	dd1d      	ble.n	e0ee <getChBandDrT2+0x12a>
    e0b2:	230a      	movs	r3, #10
    e0b4:	18fb      	adds	r3, r7, r3
    e0b6:	881b      	ldrh	r3, [r3, #0]
    e0b8:	2201      	movs	r2, #1
    e0ba:	4013      	ands	r3, r2
    e0bc:	d017      	beq.n	e0ee <getChBandDrT2+0x12a>
				{
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    e0be:	4b6e      	ldr	r3, [pc, #440]	; (e278 <getChBandDrT2+0x2b4>)
    e0c0:	791a      	ldrb	r2, [r3, #4]
    e0c2:	7959      	ldrb	r1, [r3, #5]
    e0c4:	0209      	lsls	r1, r1, #8
    e0c6:	430a      	orrs	r2, r1
    e0c8:	7999      	ldrb	r1, [r3, #6]
    e0ca:	0409      	lsls	r1, r1, #16
    e0cc:	430a      	orrs	r2, r1
    e0ce:	79db      	ldrb	r3, [r3, #7]
    e0d0:	061b      	lsls	r3, r3, #24
    e0d2:	4313      	orrs	r3, r2
    e0d4:	001a      	movs	r2, r3
    e0d6:	230d      	movs	r3, #13
    e0d8:	18fb      	adds	r3, r7, r3
    e0da:	781b      	ldrb	r3, [r3, #0]
    e0dc:	005b      	lsls	r3, r3, #1
    e0de:	18d3      	adds	r3, r2, r3
    e0e0:	785b      	ldrb	r3, [r3, #1]
    e0e2:	061b      	lsls	r3, r3, #24
    e0e4:	0f1b      	lsrs	r3, r3, #28
    e0e6:	b2da      	uxtb	r2, r3
    e0e8:	230e      	movs	r3, #14
    e0ea:	18fb      	adds	r3, r7, r3
    e0ec:	701a      	strb	r2, [r3, #0]
				}
				auxChannelMask = auxChannelMask >> SHIFT1;
    e0ee:	230a      	movs	r3, #10
    e0f0:	18fb      	adds	r3, r7, r3
    e0f2:	220a      	movs	r2, #10
    e0f4:	18ba      	adds	r2, r7, r2
    e0f6:	8812      	ldrh	r2, [r2, #0]
    e0f8:	0852      	lsrs	r2, r2, #1
    e0fa:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < RegParams.maxChannels; i++)
    e0fc:	230d      	movs	r3, #13
    e0fe:	18fb      	adds	r3, r7, r3
    e100:	781a      	ldrb	r2, [r3, #0]
    e102:	230d      	movs	r3, #13
    e104:	18fb      	adds	r3, r7, r3
    e106:	3201      	adds	r2, #1
    e108:	701a      	strb	r2, [r3, #0]
    e10a:	230d      	movs	r3, #13
    e10c:	18fb      	adds	r3, r7, r3
    e10e:	781b      	ldrb	r3, [r3, #0]
    e110:	4a59      	ldr	r2, [pc, #356]	; (e278 <getChBandDrT2+0x2b4>)
    e112:	212a      	movs	r1, #42	; 0x2a
    e114:	5652      	ldrsb	r2, [r2, r1]
    e116:	4293      	cmp	r3, r2
    e118:	da00      	bge.n	e11c <getChBandDrT2+0x158>
    e11a:	e776      	b.n	e00a <getChBandDrT2+0x46>
			}
			break;
    e11c:	e083      	b.n	e226 <getChBandDrT2+0x262>
		}

		case 6:
		{
			for (i = 0; i < RegParams.maxChannels; i++)
    e11e:	230d      	movs	r3, #13
    e120:	18fb      	adds	r3, r7, r3
    e122:	2200      	movs	r2, #0
    e124:	701a      	strb	r2, [r3, #0]
    e126:	e06c      	b.n	e202 <getChBandDrT2+0x23e>
			{
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    e128:	4b53      	ldr	r3, [pc, #332]	; (e278 <getChBandDrT2+0x2b4>)
    e12a:	791a      	ldrb	r2, [r3, #4]
    e12c:	7959      	ldrb	r1, [r3, #5]
    e12e:	0209      	lsls	r1, r1, #8
    e130:	430a      	orrs	r2, r1
    e132:	7999      	ldrb	r1, [r3, #6]
    e134:	0409      	lsls	r1, r1, #16
    e136:	430a      	orrs	r2, r1
    e138:	79db      	ldrb	r3, [r3, #7]
    e13a:	061b      	lsls	r3, r3, #24
    e13c:	4313      	orrs	r3, r2
    e13e:	001a      	movs	r2, r3
    e140:	230d      	movs	r3, #13
    e142:	18fb      	adds	r3, r7, r3
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	005b      	lsls	r3, r3, #1
    e148:	18d3      	adds	r3, r2, r3
    e14a:	785b      	ldrb	r3, [r3, #1]
    e14c:	071b      	lsls	r3, r3, #28
    e14e:	0f1b      	lsrs	r3, r3, #28
    e150:	b2db      	uxtb	r3, r3
    e152:	001a      	movs	r2, r3
    e154:	230f      	movs	r3, #15
    e156:	18fb      	adds	r3, r7, r3
    e158:	781b      	ldrb	r3, [r3, #0]
    e15a:	429a      	cmp	r2, r3
    e15c:	da17      	bge.n	e18e <getChBandDrT2+0x1ca>
				{
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    e15e:	4b46      	ldr	r3, [pc, #280]	; (e278 <getChBandDrT2+0x2b4>)
    e160:	791a      	ldrb	r2, [r3, #4]
    e162:	7959      	ldrb	r1, [r3, #5]
    e164:	0209      	lsls	r1, r1, #8
    e166:	430a      	orrs	r2, r1
    e168:	7999      	ldrb	r1, [r3, #6]
    e16a:	0409      	lsls	r1, r1, #16
    e16c:	430a      	orrs	r2, r1
    e16e:	79db      	ldrb	r3, [r3, #7]
    e170:	061b      	lsls	r3, r3, #24
    e172:	4313      	orrs	r3, r2
    e174:	001a      	movs	r2, r3
    e176:	230d      	movs	r3, #13
    e178:	18fb      	adds	r3, r7, r3
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	005b      	lsls	r3, r3, #1
    e17e:	18d3      	adds	r3, r2, r3
    e180:	785b      	ldrb	r3, [r3, #1]
    e182:	071b      	lsls	r3, r3, #28
    e184:	0f1b      	lsrs	r3, r3, #28
    e186:	b2da      	uxtb	r2, r3
    e188:	230f      	movs	r3, #15
    e18a:	18fb      	adds	r3, r7, r3
    e18c:	701a      	strb	r2, [r3, #0]
				}
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    e18e:	4b3a      	ldr	r3, [pc, #232]	; (e278 <getChBandDrT2+0x2b4>)
    e190:	791a      	ldrb	r2, [r3, #4]
    e192:	7959      	ldrb	r1, [r3, #5]
    e194:	0209      	lsls	r1, r1, #8
    e196:	430a      	orrs	r2, r1
    e198:	7999      	ldrb	r1, [r3, #6]
    e19a:	0409      	lsls	r1, r1, #16
    e19c:	430a      	orrs	r2, r1
    e19e:	79db      	ldrb	r3, [r3, #7]
    e1a0:	061b      	lsls	r3, r3, #24
    e1a2:	4313      	orrs	r3, r2
    e1a4:	001a      	movs	r2, r3
    e1a6:	230d      	movs	r3, #13
    e1a8:	18fb      	adds	r3, r7, r3
    e1aa:	781b      	ldrb	r3, [r3, #0]
    e1ac:	005b      	lsls	r3, r3, #1
    e1ae:	18d3      	adds	r3, r2, r3
    e1b0:	785b      	ldrb	r3, [r3, #1]
    e1b2:	061b      	lsls	r3, r3, #24
    e1b4:	0f1b      	lsrs	r3, r3, #28
    e1b6:	b2db      	uxtb	r3, r3
    e1b8:	001a      	movs	r2, r3
    e1ba:	230e      	movs	r3, #14
    e1bc:	18fb      	adds	r3, r7, r3
    e1be:	781b      	ldrb	r3, [r3, #0]
    e1c0:	429a      	cmp	r2, r3
    e1c2:	dd17      	ble.n	e1f4 <getChBandDrT2+0x230>
				{
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    e1c4:	4b2c      	ldr	r3, [pc, #176]	; (e278 <getChBandDrT2+0x2b4>)
    e1c6:	791a      	ldrb	r2, [r3, #4]
    e1c8:	7959      	ldrb	r1, [r3, #5]
    e1ca:	0209      	lsls	r1, r1, #8
    e1cc:	430a      	orrs	r2, r1
    e1ce:	7999      	ldrb	r1, [r3, #6]
    e1d0:	0409      	lsls	r1, r1, #16
    e1d2:	430a      	orrs	r2, r1
    e1d4:	79db      	ldrb	r3, [r3, #7]
    e1d6:	061b      	lsls	r3, r3, #24
    e1d8:	4313      	orrs	r3, r2
    e1da:	001a      	movs	r2, r3
    e1dc:	230d      	movs	r3, #13
    e1de:	18fb      	adds	r3, r7, r3
    e1e0:	781b      	ldrb	r3, [r3, #0]
    e1e2:	005b      	lsls	r3, r3, #1
    e1e4:	18d3      	adds	r3, r2, r3
    e1e6:	785b      	ldrb	r3, [r3, #1]
    e1e8:	061b      	lsls	r3, r3, #24
    e1ea:	0f1b      	lsrs	r3, r3, #28
    e1ec:	b2da      	uxtb	r2, r3
    e1ee:	230e      	movs	r3, #14
    e1f0:	18fb      	adds	r3, r7, r3
    e1f2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < RegParams.maxChannels; i++)
    e1f4:	230d      	movs	r3, #13
    e1f6:	18fb      	adds	r3, r7, r3
    e1f8:	781a      	ldrb	r2, [r3, #0]
    e1fa:	230d      	movs	r3, #13
    e1fc:	18fb      	adds	r3, r7, r3
    e1fe:	3201      	adds	r2, #1
    e200:	701a      	strb	r2, [r3, #0]
    e202:	230d      	movs	r3, #13
    e204:	18fb      	adds	r3, r7, r3
    e206:	781b      	ldrb	r3, [r3, #0]
    e208:	4a1b      	ldr	r2, [pc, #108]	; (e278 <getChBandDrT2+0x2b4>)
    e20a:	212a      	movs	r1, #42	; 0x2a
    e20c:	5652      	ldrsb	r2, [r2, r1]
    e20e:	4293      	cmp	r3, r2
    e210:	db8a      	blt.n	e128 <getChBandDrT2+0x164>
				}
			}
			break;
    e212:	e008      	b.n	e226 <getChBandDrT2+0x262>
		}
		
		default:
		{
			auxMinDataRate = 0xFF;
    e214:	230f      	movs	r3, #15
    e216:	18fb      	adds	r3, r7, r3
    e218:	22ff      	movs	r2, #255	; 0xff
    e21a:	701a      	strb	r2, [r3, #0]
			auxMaxDataRate = 0xFF;
    e21c:	230e      	movs	r3, #14
    e21e:	18fb      	adds	r3, r7, r3
    e220:	22ff      	movs	r2, #255	; 0xff
    e222:	701a      	strb	r2, [r3, #0]
			break;
    e224:	46c0      	nop			; (mov r8, r8)
		}
	}
	
	bandDr.min = auxMinDataRate;
    e226:	230f      	movs	r3, #15
    e228:	18fb      	adds	r3, r7, r3
    e22a:	781b      	ldrb	r3, [r3, #0]
    e22c:	220f      	movs	r2, #15
    e22e:	4013      	ands	r3, r2
    e230:	b2da      	uxtb	r2, r3
    e232:	2308      	movs	r3, #8
    e234:	18fb      	adds	r3, r7, r3
    e236:	210f      	movs	r1, #15
    e238:	400a      	ands	r2, r1
    e23a:	0010      	movs	r0, r2
    e23c:	781a      	ldrb	r2, [r3, #0]
    e23e:	210f      	movs	r1, #15
    e240:	438a      	bics	r2, r1
    e242:	1c11      	adds	r1, r2, #0
    e244:	1c02      	adds	r2, r0, #0
    e246:	430a      	orrs	r2, r1
    e248:	701a      	strb	r2, [r3, #0]
	bandDr.max = auxMaxDataRate;
    e24a:	230e      	movs	r3, #14
    e24c:	18fb      	adds	r3, r7, r3
    e24e:	781b      	ldrb	r3, [r3, #0]
    e250:	220f      	movs	r2, #15
    e252:	4013      	ands	r3, r2
    e254:	b2da      	uxtb	r2, r3
    e256:	2308      	movs	r3, #8
    e258:	18fb      	adds	r3, r7, r3
    e25a:	0110      	lsls	r0, r2, #4
    e25c:	781a      	ldrb	r2, [r3, #0]
    e25e:	210f      	movs	r1, #15
    e260:	400a      	ands	r2, r1
    e262:	1c11      	adds	r1, r2, #0
    e264:	1c02      	adds	r2, r0, #0
    e266:	430a      	orrs	r2, r1
    e268:	701a      	strb	r2, [r3, #0]
	
	return bandDr;
    e26a:	2308      	movs	r3, #8
    e26c:	18fb      	adds	r3, r7, r3
    e26e:	781b      	ldrb	r3, [r3, #0]
}
    e270:	1c18      	adds	r0, r3, #0
    e272:	46bd      	mov	sp, r7
    e274:	b004      	add	sp, #16
    e276:	bd80      	pop	{r7, pc}
    e278:	200014a8 	.word	0x200014a8

0000e27c <getRx1WindowparamsType1>:
 * \param[out] rx1WindowParams Structure containing the datarate and frequency used for rx1 window
 */

#if (NA_BAND == 1 || AU_BAND == 1)
static void getRx1WindowparamsType1(Rx1WindowParamsReq_t* rx1WindowParamReq ,Rx1WindowParams_t* rx1WindowParams)
{
    e27c:	b580      	push	{r7, lr}
    e27e:	b082      	sub	sp, #8
    e280:	af00      	add	r7, sp, #0
    e282:	6078      	str	r0, [r7, #4]
    e284:	6039      	str	r1, [r7, #0]
	
	if(rx1WindowParamReq->joining)
    e286:	687b      	ldr	r3, [r7, #4]
    e288:	781b      	ldrb	r3, [r3, #0]
    e28a:	2b00      	cmp	r3, #0
    e28c:	d011      	beq.n	e2b2 <getRx1WindowparamsType1+0x36>
	{
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    e28e:	4b26      	ldr	r3, [pc, #152]	; (e328 <getRx1WindowparamsType1+0xac>)
    e290:	2230      	movs	r2, #48	; 0x30
    e292:	5c9b      	ldrb	r3, [r3, r2]
    e294:	2b40      	cmp	r3, #64	; 0x40
    e296:	d806      	bhi.n	e2a6 <getRx1WindowparamsType1+0x2a>
		{
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    e298:	4a23      	ldr	r2, [pc, #140]	; (e328 <getRx1WindowparamsType1+0xac>)
    e29a:	23a8      	movs	r3, #168	; 0xa8
    e29c:	005b      	lsls	r3, r3, #1
    e29e:	5cd2      	ldrb	r2, [r2, r3]
    e2a0:	687b      	ldr	r3, [r7, #4]
    e2a2:	709a      	strb	r2, [r3, #2]
    e2a4:	e005      	b.n	e2b2 <getRx1WindowparamsType1+0x36>
		}
		else
		{
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    e2a6:	4a20      	ldr	r2, [pc, #128]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2a8:	2352      	movs	r3, #82	; 0x52
    e2aa:	33ff      	adds	r3, #255	; 0xff
    e2ac:	5cd2      	ldrb	r2, [r2, r3]
    e2ae:	687b      	ldr	r3, [r7, #4]
    e2b0:	709a      	strb	r2, [r3, #2]
		}
	}
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    e2b2:	687b      	ldr	r3, [r7, #4]
    e2b4:	789a      	ldrb	r2, [r3, #2]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    e2b6:	491c      	ldr	r1, [pc, #112]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2b8:	23ab      	movs	r3, #171	; 0xab
    e2ba:	005b      	lsls	r3, r3, #1
    e2bc:	5ccb      	ldrb	r3, [r1, r3]
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    e2be:	18d3      	adds	r3, r2, r3
    e2c0:	b2da      	uxtb	r2, r3
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    e2c2:	687b      	ldr	r3, [r7, #4]
    e2c4:	785b      	ldrb	r3, [r3, #1]
    e2c6:	1ad3      	subs	r3, r2, r3
    e2c8:	b2da      	uxtb	r2, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    e2ca:	683b      	ldr	r3, [r7, #0]
    e2cc:	711a      	strb	r2, [r3, #4]
		
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    e2ce:	683b      	ldr	r3, [r7, #0]
    e2d0:	791a      	ldrb	r2, [r3, #4]
    e2d2:	4915      	ldr	r1, [pc, #84]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2d4:	2354      	movs	r3, #84	; 0x54
    e2d6:	33ff      	adds	r3, #255	; 0xff
    e2d8:	5ccb      	ldrb	r3, [r1, r3]
    e2da:	429a      	cmp	r2, r3
    e2dc:	d906      	bls.n	e2ec <getRx1WindowparamsType1+0x70>
	{
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    e2de:	4a12      	ldr	r2, [pc, #72]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2e0:	2354      	movs	r3, #84	; 0x54
    e2e2:	33ff      	adds	r3, #255	; 0xff
    e2e4:	5cd2      	ldrb	r2, [r2, r3]
    e2e6:	683b      	ldr	r3, [r7, #0]
    e2e8:	711a      	strb	r2, [r3, #4]
    e2ea:	e00d      	b.n	e308 <getRx1WindowparamsType1+0x8c>
	}
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    e2ec:	683b      	ldr	r3, [r7, #0]
    e2ee:	791a      	ldrb	r2, [r3, #4]
    e2f0:	490d      	ldr	r1, [pc, #52]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2f2:	23a9      	movs	r3, #169	; 0xa9
    e2f4:	005b      	lsls	r3, r3, #1
    e2f6:	5ccb      	ldrb	r3, [r1, r3]
    e2f8:	429a      	cmp	r2, r3
    e2fa:	d205      	bcs.n	e308 <getRx1WindowparamsType1+0x8c>
	{
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    e2fc:	4a0a      	ldr	r2, [pc, #40]	; (e328 <getRx1WindowparamsType1+0xac>)
    e2fe:	23a9      	movs	r3, #169	; 0xa9
    e300:	005b      	lsls	r3, r3, #1
    e302:	5cd2      	ldrb	r2, [r2, r3]
    e304:	683b      	ldr	r3, [r7, #0]
    e306:	711a      	strb	r2, [r3, #4]
	}
	
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    e308:	4b07      	ldr	r3, [pc, #28]	; (e328 <getRx1WindowparamsType1+0xac>)
    e30a:	2230      	movs	r2, #48	; 0x30
    e30c:	5c9b      	ldrb	r3, [r3, r2]
    e30e:	2207      	movs	r2, #7
    e310:	4013      	ands	r3, r2
    e312:	b2db      	uxtb	r3, r3
    e314:	0018      	movs	r0, r3
    e316:	4b05      	ldr	r3, [pc, #20]	; (e32c <getRx1WindowparamsType1+0xb0>)
    e318:	4798      	blx	r3
    e31a:	0002      	movs	r2, r0
    e31c:	683b      	ldr	r3, [r7, #0]
    e31e:	601a      	str	r2, [r3, #0]
}
    e320:	46c0      	nop			; (mov r8, r8)
    e322:	46bd      	mov	sp, r7
    e324:	b002      	add	sp, #8
    e326:	bd80      	pop	{r7, pc}
    e328:	200014a8 	.word	0x200014a8
    e32c:	0000f345 	.word	0x0000f345

0000e330 <getRx1WindowparamsType2>:
 * \param[in] rx1WindowParamReq Structure containg the members required for getting the rx1 window parameters
 * \param[out] rx1WindowParams Structure containing the datarate and frequency used for rx1 window
 */
#if (EU_BAND == 1 || KR_BAND == 1)
static void getRx1WindowparamsType2(Rx1WindowParamsReq_t* rx1WindowParamReq,Rx1WindowParams_t* rx1WindowParams)
{
    e330:	b580      	push	{r7, lr}
    e332:	b082      	sub	sp, #8
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
    e338:	6039      	str	r1, [r7, #0]

    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    e33a:	687b      	ldr	r3, [r7, #4]
    e33c:	789a      	ldrb	r2, [r3, #2]
    e33e:	687b      	ldr	r3, [r7, #4]
    e340:	785b      	ldrb	r3, [r3, #1]
    e342:	429a      	cmp	r2, r3
    e344:	d308      	bcc.n	e358 <getRx1WindowparamsType2+0x28>
    {
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    e346:	687b      	ldr	r3, [r7, #4]
    e348:	789a      	ldrb	r2, [r3, #2]
    e34a:	687b      	ldr	r3, [r7, #4]
    e34c:	785b      	ldrb	r3, [r3, #1]
    e34e:	1ad3      	subs	r3, r2, r3
    e350:	b2da      	uxtb	r2, r3
    e352:	683b      	ldr	r3, [r7, #0]
    e354:	711a      	strb	r2, [r3, #4]
    e356:	e002      	b.n	e35e <getRx1WindowparamsType2+0x2e>
    }
    else
    {
        rx1WindowParams->rx1Dr = DR0;
    e358:	683b      	ldr	r3, [r7, #0]
    e35a:	2200      	movs	r2, #0
    e35c:	711a      	strb	r2, [r3, #4]
    }

	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    e35e:	4b13      	ldr	r3, [pc, #76]	; (e3ac <getRx1WindowparamsType2+0x7c>)
    e360:	7a1a      	ldrb	r2, [r3, #8]
    e362:	7a59      	ldrb	r1, [r3, #9]
    e364:	0209      	lsls	r1, r1, #8
    e366:	430a      	orrs	r2, r1
    e368:	7a99      	ldrb	r1, [r3, #10]
    e36a:	0409      	lsls	r1, r1, #16
    e36c:	430a      	orrs	r2, r1
    e36e:	7adb      	ldrb	r3, [r3, #11]
    e370:	061b      	lsls	r3, r3, #24
    e372:	4313      	orrs	r3, r2
    e374:	0019      	movs	r1, r3
    e376:	4b0d      	ldr	r3, [pc, #52]	; (e3ac <getRx1WindowparamsType2+0x7c>)
    e378:	2230      	movs	r2, #48	; 0x30
    e37a:	5c9b      	ldrb	r3, [r3, r2]
    e37c:	001a      	movs	r2, r3
    e37e:	0013      	movs	r3, r2
    e380:	005b      	lsls	r3, r3, #1
    e382:	189b      	adds	r3, r3, r2
    e384:	009b      	lsls	r3, r3, #2
    e386:	18cb      	adds	r3, r1, r3
    e388:	791a      	ldrb	r2, [r3, #4]
    e38a:	7959      	ldrb	r1, [r3, #5]
    e38c:	0209      	lsls	r1, r1, #8
    e38e:	430a      	orrs	r2, r1
    e390:	7999      	ldrb	r1, [r3, #6]
    e392:	0409      	lsls	r1, r1, #16
    e394:	430a      	orrs	r2, r1
    e396:	79db      	ldrb	r3, [r3, #7]
    e398:	061b      	lsls	r3, r3, #24
    e39a:	4313      	orrs	r3, r2
    e39c:	001a      	movs	r2, r3
    e39e:	683b      	ldr	r3, [r7, #0]
    e3a0:	601a      	str	r2, [r3, #0]

}
    e3a2:	46c0      	nop			; (mov r8, r8)
    e3a4:	46bd      	mov	sp, r7
    e3a6:	b002      	add	sp, #8
    e3a8:	bd80      	pop	{r7, pc}
    e3aa:	46c0      	nop			; (mov r8, r8)
    e3ac:	200014a8 	.word	0x200014a8

0000e3b0 <getRx1WindowparamsType3>:
 * \param[in] rx1WindowParamReq Structure containg the members required for getting the rx1 window parameters
 * \param[out] rx1WindowParams Structure containing the datarate and frequency used for rx1 window
 */
#if (IND_BAND == 1)
static void getRx1WindowparamsType3(Rx1WindowParamsReq_t* rx1WindowParamReq,Rx1WindowParams_t* rx1WindowParams)
{
    e3b0:	b580      	push	{r7, lr}
    e3b2:	b084      	sub	sp, #16
    e3b4:	af00      	add	r7, sp, #0
    e3b6:	6078      	str	r0, [r7, #4]
    e3b8:	6039      	str	r1, [r7, #0]
	uint8_t maxDR = DR5;
    e3ba:	230f      	movs	r3, #15
    e3bc:	18fb      	adds	r3, r7, r3
    e3be:	2205      	movs	r2, #5
    e3c0:	701a      	strb	r2, [r3, #0]
	uint8_t minDR = DR0;
    e3c2:	230e      	movs	r3, #14
    e3c4:	18fb      	adds	r3, r7, r3
    e3c6:	2200      	movs	r2, #0
    e3c8:	701a      	strb	r2, [r3, #0]
	int8_t effectiveDROffset;
	
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    e3ca:	687b      	ldr	r3, [r7, #4]
    e3cc:	785b      	ldrb	r3, [r3, #1]
    e3ce:	220f      	movs	r2, #15
    e3d0:	18ba      	adds	r2, r7, r2
    e3d2:	7812      	ldrb	r2, [r2, #0]
    e3d4:	429a      	cmp	r2, r3
    e3d6:	d208      	bcs.n	e3ea <getRx1WindowparamsType3+0x3a>
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	785b      	ldrb	r3, [r3, #1]
    e3dc:	220f      	movs	r2, #15
    e3de:	18ba      	adds	r2, r7, r2
    e3e0:	7812      	ldrb	r2, [r2, #0]
    e3e2:	1ad3      	subs	r3, r2, r3
    e3e4:	b2db      	uxtb	r3, r3
    e3e6:	b25b      	sxtb	r3, r3
    e3e8:	e002      	b.n	e3f0 <getRx1WindowparamsType3+0x40>
    e3ea:	687b      	ldr	r3, [r7, #4]
    e3ec:	785b      	ldrb	r3, [r3, #1]
    e3ee:	b25b      	sxtb	r3, r3
    e3f0:	220d      	movs	r2, #13
    e3f2:	18ba      	adds	r2, r7, r2
    e3f4:	7013      	strb	r3, [r2, #0]
	
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    e3f6:	687b      	ldr	r3, [r7, #4]
    e3f8:	789b      	ldrb	r3, [r3, #2]
    e3fa:	001a      	movs	r2, r3
    e3fc:	230d      	movs	r3, #13
    e3fe:	18fb      	adds	r3, r7, r3
    e400:	781b      	ldrb	r3, [r3, #0]
    e402:	b25b      	sxtb	r3, r3
    e404:	429a      	cmp	r2, r3
    e406:	db22      	blt.n	e44e <getRx1WindowparamsType3+0x9e>
    {
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	789a      	ldrb	r2, [r3, #2]
    e40c:	230d      	movs	r3, #13
    e40e:	18fb      	adds	r3, r7, r3
    e410:	781b      	ldrb	r3, [r3, #0]
    e412:	1ad3      	subs	r3, r2, r3
    e414:	b2da      	uxtb	r2, r3
    e416:	683b      	ldr	r3, [r7, #0]
    e418:	711a      	strb	r2, [r3, #4]
		if(rx1WindowParams->rx1Dr < minDR)
    e41a:	683b      	ldr	r3, [r7, #0]
    e41c:	791b      	ldrb	r3, [r3, #4]
    e41e:	220e      	movs	r2, #14
    e420:	18ba      	adds	r2, r7, r2
    e422:	7812      	ldrb	r2, [r2, #0]
    e424:	429a      	cmp	r2, r3
    e426:	d905      	bls.n	e434 <getRx1WindowparamsType3+0x84>
		{
			rx1WindowParams->rx1Dr = minDR;
    e428:	683b      	ldr	r3, [r7, #0]
    e42a:	220e      	movs	r2, #14
    e42c:	18ba      	adds	r2, r7, r2
    e42e:	7812      	ldrb	r2, [r2, #0]
    e430:	711a      	strb	r2, [r3, #4]
    e432:	e011      	b.n	e458 <getRx1WindowparamsType3+0xa8>
		}
		else if(rx1WindowParams->rx1Dr > maxDR)
    e434:	683b      	ldr	r3, [r7, #0]
    e436:	791b      	ldrb	r3, [r3, #4]
    e438:	220f      	movs	r2, #15
    e43a:	18ba      	adds	r2, r7, r2
    e43c:	7812      	ldrb	r2, [r2, #0]
    e43e:	429a      	cmp	r2, r3
    e440:	d20a      	bcs.n	e458 <getRx1WindowparamsType3+0xa8>
		{
			rx1WindowParams->rx1Dr = maxDR;
    e442:	683b      	ldr	r3, [r7, #0]
    e444:	220f      	movs	r2, #15
    e446:	18ba      	adds	r2, r7, r2
    e448:	7812      	ldrb	r2, [r2, #0]
    e44a:	711a      	strb	r2, [r3, #4]
    e44c:	e004      	b.n	e458 <getRx1WindowparamsType3+0xa8>
		}
    }
    else
    {
        rx1WindowParams->rx1Dr = minDR;
    e44e:	683b      	ldr	r3, [r7, #0]
    e450:	220e      	movs	r2, #14
    e452:	18ba      	adds	r2, r7, r2
    e454:	7812      	ldrb	r2, [r2, #0]
    e456:	711a      	strb	r2, [r3, #4]
    }

	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    e458:	4b12      	ldr	r3, [pc, #72]	; (e4a4 <getRx1WindowparamsType3+0xf4>)
    e45a:	7a1a      	ldrb	r2, [r3, #8]
    e45c:	7a59      	ldrb	r1, [r3, #9]
    e45e:	0209      	lsls	r1, r1, #8
    e460:	430a      	orrs	r2, r1
    e462:	7a99      	ldrb	r1, [r3, #10]
    e464:	0409      	lsls	r1, r1, #16
    e466:	430a      	orrs	r2, r1
    e468:	7adb      	ldrb	r3, [r3, #11]
    e46a:	061b      	lsls	r3, r3, #24
    e46c:	4313      	orrs	r3, r2
    e46e:	0019      	movs	r1, r3
    e470:	4b0c      	ldr	r3, [pc, #48]	; (e4a4 <getRx1WindowparamsType3+0xf4>)
    e472:	2230      	movs	r2, #48	; 0x30
    e474:	5c9b      	ldrb	r3, [r3, r2]
    e476:	001a      	movs	r2, r3
    e478:	0013      	movs	r3, r2
    e47a:	005b      	lsls	r3, r3, #1
    e47c:	189b      	adds	r3, r3, r2
    e47e:	009b      	lsls	r3, r3, #2
    e480:	18cb      	adds	r3, r1, r3
    e482:	791a      	ldrb	r2, [r3, #4]
    e484:	7959      	ldrb	r1, [r3, #5]
    e486:	0209      	lsls	r1, r1, #8
    e488:	430a      	orrs	r2, r1
    e48a:	7999      	ldrb	r1, [r3, #6]
    e48c:	0409      	lsls	r1, r1, #16
    e48e:	430a      	orrs	r2, r1
    e490:	79db      	ldrb	r3, [r3, #7]
    e492:	061b      	lsls	r3, r3, #24
    e494:	4313      	orrs	r3, r2
    e496:	001a      	movs	r2, r3
    e498:	683b      	ldr	r3, [r7, #0]
    e49a:	601a      	str	r2, [r3, #0]

}
    e49c:	46c0      	nop			; (mov r8, r8)
    e49e:	46bd      	mov	sp, r7
    e4a0:	b004      	add	sp, #16
    e4a2:	bd80      	pop	{r7, pc}
    e4a4:	200014a8 	.word	0x200014a8

0000e4a8 <getRx1WindowparamsType4>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static void getRx1WindowparamsType4(Rx1WindowParamsReq_t* rx1WindowParamReq,Rx1WindowParams_t* rx1WindowParams)
{
    e4a8:	b580      	push	{r7, lr}
    e4aa:	b084      	sub	sp, #16
    e4ac:	af00      	add	r7, sp, #0
    e4ae:	6078      	str	r0, [r7, #4]
    e4b0:	6039      	str	r1, [r7, #0]
	uint8_t maxDR = DR5;
    e4b2:	230e      	movs	r3, #14
    e4b4:	18fb      	adds	r3, r7, r3
    e4b6:	2205      	movs	r2, #5
    e4b8:	701a      	strb	r2, [r3, #0]
	uint8_t minDR = DR0;
    e4ba:	230f      	movs	r3, #15
    e4bc:	18fb      	adds	r3, r7, r3
    e4be:	2200      	movs	r2, #0
    e4c0:	701a      	strb	r2, [r3, #0]
	int8_t effectiveDROffset;
	
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    e4c2:	4b5a      	ldr	r3, [pc, #360]	; (e62c <getRx1WindowparamsType4+0x184>)
    e4c4:	222f      	movs	r2, #47	; 0x2f
    e4c6:	5c9b      	ldrb	r3, [r3, r2]
    e4c8:	001a      	movs	r2, r3
    e4ca:	4b59      	ldr	r3, [pc, #356]	; (e630 <getRx1WindowparamsType4+0x188>)
    e4cc:	4113      	asrs	r3, r2
    e4ce:	2201      	movs	r2, #1
    e4d0:	4013      	ands	r3, r2
    e4d2:	d108      	bne.n	e4e6 <getRx1WindowparamsType4+0x3e>
    e4d4:	4b55      	ldr	r3, [pc, #340]	; (e62c <getRx1WindowparamsType4+0x184>)
    e4d6:	222f      	movs	r2, #47	; 0x2f
    e4d8:	5c9b      	ldrb	r3, [r3, r2]
    e4da:	001a      	movs	r2, r3
    e4dc:	2320      	movs	r3, #32
    e4de:	4113      	asrs	r3, r2
    e4e0:	2201      	movs	r2, #1
    e4e2:	4013      	ands	r3, r2
    e4e4:	d029      	beq.n	e53a <getRx1WindowparamsType4+0x92>
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	781b      	ldrb	r3, [r3, #0]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d025      	beq.n	e53a <getRx1WindowparamsType4+0x92>
	{
		rx1WindowParams->rx1Dr = DR2;
    e4ee:	683b      	ldr	r3, [r7, #0]
    e4f0:	2202      	movs	r2, #2
    e4f2:	711a      	strb	r2, [r3, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    e4f4:	4b4d      	ldr	r3, [pc, #308]	; (e62c <getRx1WindowparamsType4+0x184>)
    e4f6:	7a1a      	ldrb	r2, [r3, #8]
    e4f8:	7a59      	ldrb	r1, [r3, #9]
    e4fa:	0209      	lsls	r1, r1, #8
    e4fc:	430a      	orrs	r2, r1
    e4fe:	7a99      	ldrb	r1, [r3, #10]
    e500:	0409      	lsls	r1, r1, #16
    e502:	430a      	orrs	r2, r1
    e504:	7adb      	ldrb	r3, [r3, #11]
    e506:	061b      	lsls	r3, r3, #24
    e508:	4313      	orrs	r3, r2
    e50a:	0019      	movs	r1, r3
    e50c:	4b47      	ldr	r3, [pc, #284]	; (e62c <getRx1WindowparamsType4+0x184>)
    e50e:	2230      	movs	r2, #48	; 0x30
    e510:	5c9b      	ldrb	r3, [r3, r2]
    e512:	001a      	movs	r2, r3
    e514:	0013      	movs	r3, r2
    e516:	005b      	lsls	r3, r3, #1
    e518:	189b      	adds	r3, r3, r2
    e51a:	009b      	lsls	r3, r3, #2
    e51c:	18cb      	adds	r3, r1, r3
    e51e:	791a      	ldrb	r2, [r3, #4]
    e520:	7959      	ldrb	r1, [r3, #5]
    e522:	0209      	lsls	r1, r1, #8
    e524:	430a      	orrs	r2, r1
    e526:	7999      	ldrb	r1, [r3, #6]
    e528:	0409      	lsls	r1, r1, #16
    e52a:	430a      	orrs	r2, r1
    e52c:	79db      	ldrb	r3, [r3, #7]
    e52e:	061b      	lsls	r3, r3, #24
    e530:	4313      	orrs	r3, r2
    e532:	001a      	movs	r2, r3
    e534:	683b      	ldr	r3, [r7, #0]
    e536:	601a      	str	r2, [r3, #0]
		return;
    e538:	e075      	b.n	e626 <getRx1WindowparamsType4+0x17e>
	}
	
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    e53a:	4a3c      	ldr	r2, [pc, #240]	; (e62c <getRx1WindowparamsType4+0x184>)
    e53c:	23c4      	movs	r3, #196	; 0xc4
    e53e:	33ff      	adds	r3, #255	; 0xff
    e540:	5cd3      	ldrb	r3, [r2, r3]
    e542:	2202      	movs	r2, #2
    e544:	4013      	ands	r3, r2
    e546:	b2db      	uxtb	r3, r3
    e548:	2b00      	cmp	r3, #0
    e54a:	d003      	beq.n	e554 <getRx1WindowparamsType4+0xac>
	{
		minDR = DR2;
    e54c:	230f      	movs	r3, #15
    e54e:	18fb      	adds	r3, r7, r3
    e550:	2202      	movs	r2, #2
    e552:	701a      	strb	r2, [r3, #0]
	}
	
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    e554:	687b      	ldr	r3, [r7, #4]
    e556:	785b      	ldrb	r3, [r3, #1]
    e558:	220e      	movs	r2, #14
    e55a:	18ba      	adds	r2, r7, r2
    e55c:	7812      	ldrb	r2, [r2, #0]
    e55e:	429a      	cmp	r2, r3
    e560:	d208      	bcs.n	e574 <getRx1WindowparamsType4+0xcc>
    e562:	687b      	ldr	r3, [r7, #4]
    e564:	785b      	ldrb	r3, [r3, #1]
    e566:	220e      	movs	r2, #14
    e568:	18ba      	adds	r2, r7, r2
    e56a:	7812      	ldrb	r2, [r2, #0]
    e56c:	1ad3      	subs	r3, r2, r3
    e56e:	b2db      	uxtb	r3, r3
    e570:	b25b      	sxtb	r3, r3
    e572:	e002      	b.n	e57a <getRx1WindowparamsType4+0xd2>
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	785b      	ldrb	r3, [r3, #1]
    e578:	b25b      	sxtb	r3, r3
    e57a:	220d      	movs	r2, #13
    e57c:	18ba      	adds	r2, r7, r2
    e57e:	7013      	strb	r3, [r2, #0]
	
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    e580:	687b      	ldr	r3, [r7, #4]
    e582:	789b      	ldrb	r3, [r3, #2]
    e584:	001a      	movs	r2, r3
    e586:	230d      	movs	r3, #13
    e588:	18fb      	adds	r3, r7, r3
    e58a:	781b      	ldrb	r3, [r3, #0]
    e58c:	b25b      	sxtb	r3, r3
    e58e:	429a      	cmp	r2, r3
    e590:	db22      	blt.n	e5d8 <getRx1WindowparamsType4+0x130>
	{
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    e592:	687b      	ldr	r3, [r7, #4]
    e594:	789a      	ldrb	r2, [r3, #2]
    e596:	230d      	movs	r3, #13
    e598:	18fb      	adds	r3, r7, r3
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	1ad3      	subs	r3, r2, r3
    e59e:	b2da      	uxtb	r2, r3
    e5a0:	683b      	ldr	r3, [r7, #0]
    e5a2:	711a      	strb	r2, [r3, #4]
		if(rx1WindowParams->rx1Dr < minDR)
    e5a4:	683b      	ldr	r3, [r7, #0]
    e5a6:	791b      	ldrb	r3, [r3, #4]
    e5a8:	220f      	movs	r2, #15
    e5aa:	18ba      	adds	r2, r7, r2
    e5ac:	7812      	ldrb	r2, [r2, #0]
    e5ae:	429a      	cmp	r2, r3
    e5b0:	d905      	bls.n	e5be <getRx1WindowparamsType4+0x116>
		{
			rx1WindowParams->rx1Dr = minDR;
    e5b2:	683b      	ldr	r3, [r7, #0]
    e5b4:	220f      	movs	r2, #15
    e5b6:	18ba      	adds	r2, r7, r2
    e5b8:	7812      	ldrb	r2, [r2, #0]
    e5ba:	711a      	strb	r2, [r3, #4]
    e5bc:	e011      	b.n	e5e2 <getRx1WindowparamsType4+0x13a>
		}
		else if(rx1WindowParams->rx1Dr > maxDR)
    e5be:	683b      	ldr	r3, [r7, #0]
    e5c0:	791b      	ldrb	r3, [r3, #4]
    e5c2:	220e      	movs	r2, #14
    e5c4:	18ba      	adds	r2, r7, r2
    e5c6:	7812      	ldrb	r2, [r2, #0]
    e5c8:	429a      	cmp	r2, r3
    e5ca:	d20a      	bcs.n	e5e2 <getRx1WindowparamsType4+0x13a>
		{
			rx1WindowParams->rx1Dr = maxDR;
    e5cc:	683b      	ldr	r3, [r7, #0]
    e5ce:	220e      	movs	r2, #14
    e5d0:	18ba      	adds	r2, r7, r2
    e5d2:	7812      	ldrb	r2, [r2, #0]
    e5d4:	711a      	strb	r2, [r3, #4]
    e5d6:	e004      	b.n	e5e2 <getRx1WindowparamsType4+0x13a>
		}
	}
	else
	{
		rx1WindowParams->rx1Dr = minDR;
    e5d8:	683b      	ldr	r3, [r7, #0]
    e5da:	220f      	movs	r2, #15
    e5dc:	18ba      	adds	r2, r7, r2
    e5de:	7812      	ldrb	r2, [r2, #0]
    e5e0:	711a      	strb	r2, [r3, #4]
	}

	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    e5e2:	4b12      	ldr	r3, [pc, #72]	; (e62c <getRx1WindowparamsType4+0x184>)
    e5e4:	7a1a      	ldrb	r2, [r3, #8]
    e5e6:	7a59      	ldrb	r1, [r3, #9]
    e5e8:	0209      	lsls	r1, r1, #8
    e5ea:	430a      	orrs	r2, r1
    e5ec:	7a99      	ldrb	r1, [r3, #10]
    e5ee:	0409      	lsls	r1, r1, #16
    e5f0:	430a      	orrs	r2, r1
    e5f2:	7adb      	ldrb	r3, [r3, #11]
    e5f4:	061b      	lsls	r3, r3, #24
    e5f6:	4313      	orrs	r3, r2
    e5f8:	0019      	movs	r1, r3
    e5fa:	4b0c      	ldr	r3, [pc, #48]	; (e62c <getRx1WindowparamsType4+0x184>)
    e5fc:	2230      	movs	r2, #48	; 0x30
    e5fe:	5c9b      	ldrb	r3, [r3, r2]
    e600:	001a      	movs	r2, r3
    e602:	0013      	movs	r3, r2
    e604:	005b      	lsls	r3, r3, #1
    e606:	189b      	adds	r3, r3, r2
    e608:	009b      	lsls	r3, r3, #2
    e60a:	18cb      	adds	r3, r1, r3
    e60c:	791a      	ldrb	r2, [r3, #4]
    e60e:	7959      	ldrb	r1, [r3, #5]
    e610:	0209      	lsls	r1, r1, #8
    e612:	430a      	orrs	r2, r1
    e614:	7999      	ldrb	r1, [r3, #6]
    e616:	0409      	lsls	r1, r1, #16
    e618:	430a      	orrs	r2, r1
    e61a:	79db      	ldrb	r3, [r3, #7]
    e61c:	061b      	lsls	r3, r3, #24
    e61e:	4313      	orrs	r3, r2
    e620:	001a      	movs	r2, r3
    e622:	683b      	ldr	r3, [r7, #0]
    e624:	601a      	str	r2, [r3, #0]

}
    e626:	46bd      	mov	sp, r7
    e628:	b004      	add	sp, #16
    e62a:	bd80      	pop	{r7, pc}
    e62c:	200014a8 	.word	0x200014a8
    e630:	00007fc0 	.word	0x00007fc0

0000e634 <ValidateTxPower>:
 * \param[in] txPowerNew Transmit Power to be validated
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the Transmit Power is not supported
 */
static StackRetStatus_t ValidateTxPower (LorawanRegionalAttributes_t attr, void *attrInput)
{
    e634:	b580      	push	{r7, lr}
    e636:	b084      	sub	sp, #16
    e638:	af00      	add	r7, sp, #0
    e63a:	0002      	movs	r2, r0
    e63c:	6039      	str	r1, [r7, #0]
    e63e:	1dfb      	adds	r3, r7, #7
    e640:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e642:	230f      	movs	r3, #15
    e644:	18fb      	adds	r3, r7, r3
    e646:	2208      	movs	r2, #8
    e648:	701a      	strb	r2, [r3, #0]
	uint8_t txPowerNew = *(uint8_t *)attrInput;
    e64a:	230e      	movs	r3, #14
    e64c:	18fb      	adds	r3, r7, r3
    e64e:	683a      	ldr	r2, [r7, #0]
    e650:	7812      	ldrb	r2, [r2, #0]
    e652:	701a      	strb	r2, [r3, #0]
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
    if (0xf != txPowerNew)
    e654:	230e      	movs	r3, #14
    e656:	18fb      	adds	r3, r7, r3
    e658:	781b      	ldrb	r3, [r3, #0]
    e65a:	2b0f      	cmp	r3, #15
    e65c:	d00b      	beq.n	e676 <ValidateTxPower+0x42>
    { /* 0xF means keep the current settings & ignore this cmd */
	    if (txPowerNew > RegParams.maxTxPwrIndx)
    e65e:	230e      	movs	r3, #14
    e660:	18fb      	adds	r3, r7, r3
    e662:	781b      	ldrb	r3, [r3, #0]
    e664:	4a07      	ldr	r2, [pc, #28]	; (e684 <ValidateTxPower+0x50>)
    e666:	212d      	movs	r1, #45	; 0x2d
    e668:	5652      	ldrsb	r2, [r2, r1]
    e66a:	4293      	cmp	r3, r2
    e66c:	dd03      	ble.n	e676 <ValidateTxPower+0x42>
	    {
		    result = LORAWAN_INVALID_PARAMETER;
    e66e:	230f      	movs	r3, #15
    e670:	18fb      	adds	r3, r7, r3
    e672:	220a      	movs	r2, #10
    e674:	701a      	strb	r2, [r3, #0]
	    }
    }    

	return result;
    e676:	230f      	movs	r3, #15
    e678:	18fb      	adds	r3, r7, r3
    e67a:	781b      	ldrb	r3, [r3, #0]
}
    e67c:	0018      	movs	r0, r3
    e67e:	46bd      	mov	sp, r7
    e680:	b004      	add	sp, #16
    e682:	bd80      	pop	{r7, pc}
    e684:	200014a8 	.word	0x200014a8

0000e688 <GetTxChannelConfig1>:
 * \retval LORAWAN_SUCCESS : If Channel is found successfully is successful
 *	LORAWAN_NO_CHANNELS_FOUND if No free channel is available
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t GetTxChannelConfig1 (bool transmissionType,uint8_t txPwrIndx,uint8_t currDr,radioConfig_t* radioConfig)  // transmission type is 0 means join request, transmission type is 1 means data message mode
{
    e688:	b5b0      	push	{r4, r5, r7, lr}
    e68a:	b084      	sub	sp, #16
    e68c:	af00      	add	r7, sp, #0
    e68e:	0004      	movs	r4, r0
    e690:	0008      	movs	r0, r1
    e692:	0011      	movs	r1, r2
    e694:	603b      	str	r3, [r7, #0]
    e696:	1dfb      	adds	r3, r7, #7
    e698:	1c22      	adds	r2, r4, #0
    e69a:	701a      	strb	r2, [r3, #0]
    e69c:	1dbb      	adds	r3, r7, #6
    e69e:	1c02      	adds	r2, r0, #0
    e6a0:	701a      	strb	r2, [r3, #0]
    e6a2:	1d7b      	adds	r3, r7, #5
    e6a4:	1c0a      	adds	r2, r1, #0
    e6a6:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e6a8:	230f      	movs	r3, #15
    e6aa:	18fb      	adds	r3, r7, r3
    e6ac:	2208      	movs	r2, #8
    e6ae:	701a      	strb	r2, [r3, #0]
	uint8_t channelIndex;
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    e6b0:	4b6e      	ldr	r3, [pc, #440]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e6b2:	2228      	movs	r2, #40	; 0x28
    e6b4:	5c99      	ldrb	r1, [r3, r2]
    e6b6:	1dbb      	adds	r3, r7, #6
    e6b8:	781b      	ldrb	r3, [r3, #0]
    e6ba:	18db      	adds	r3, r3, r3
    e6bc:	b2da      	uxtb	r2, r3
    e6be:	230e      	movs	r3, #14
    e6c0:	18fb      	adds	r3, r7, r3
    e6c2:	1a8a      	subs	r2, r1, r2
    e6c4:	701a      	strb	r2, [r3, #0]

	if (transmissionType == 1) // data message (not join request), it should search in all
    e6c6:	1dfb      	adds	r3, r7, #7
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d024      	beq.n	e718 <GetTxChannelConfig1+0x90>
	{
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    e6ce:	4b67      	ldr	r3, [pc, #412]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e6d0:	222a      	movs	r2, #42	; 0x2a
    e6d2:	569b      	ldrsb	r3, [r3, r2]
    e6d4:	b2d8      	uxtb	r0, r3
    e6d6:	230f      	movs	r3, #15
    e6d8:	18fc      	adds	r4, r7, r3
    e6da:	230b      	movs	r3, #11
    e6dc:	18fd      	adds	r5, r7, r3
    e6de:	1d7b      	adds	r3, r7, #5
    e6e0:	781a      	ldrb	r2, [r3, #0]
    e6e2:	1dfb      	adds	r3, r7, #7
    e6e4:	7819      	ldrb	r1, [r3, #0]
    e6e6:	002b      	movs	r3, r5
    e6e8:	4d61      	ldr	r5, [pc, #388]	; (e870 <GetTxChannelConfig1+0x1e8>)
    e6ea:	47a8      	blx	r5
    e6ec:	0003      	movs	r3, r0
    e6ee:	7023      	strb	r3, [r4, #0]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    e6f0:	4b5e      	ldr	r3, [pc, #376]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e6f2:	781a      	ldrb	r2, [r3, #0]
    e6f4:	7859      	ldrb	r1, [r3, #1]
    e6f6:	0209      	lsls	r1, r1, #8
    e6f8:	430a      	orrs	r2, r1
    e6fa:	7899      	ldrb	r1, [r3, #2]
    e6fc:	0409      	lsls	r1, r1, #16
    e6fe:	430a      	orrs	r2, r1
    e700:	78db      	ldrb	r3, [r3, #3]
    e702:	061b      	lsls	r3, r3, #24
    e704:	4313      	orrs	r3, r2
    e706:	001a      	movs	r2, r3
    e708:	1d7b      	adds	r3, r7, #5
    e70a:	781b      	ldrb	r3, [r3, #0]
    e70c:	00db      	lsls	r3, r3, #3
    e70e:	18d3      	adds	r3, r2, r3
    e710:	795a      	ldrb	r2, [r3, #5]
    e712:	683b      	ldr	r3, [r7, #0]
    e714:	72da      	strb	r2, [r3, #11]
    e716:	e046      	b.n	e7a6 <GetTxChannelConfig1+0x11e>

	}
	else   // join request message, first should search between channels 0 - 63 using DR0, then 64 - 71 using DR4, and so on
	{
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    e718:	4a54      	ldr	r2, [pc, #336]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e71a:	23aa      	movs	r3, #170	; 0xaa
    e71c:	005b      	lsls	r3, r3, #1
    e71e:	5cd0      	ldrb	r0, [r2, r3]
    e720:	230f      	movs	r3, #15
    e722:	18fc      	adds	r4, r7, r3
    e724:	230b      	movs	r3, #11
    e726:	18fa      	adds	r2, r7, r3
    e728:	1dfb      	adds	r3, r7, #7
    e72a:	7819      	ldrb	r1, [r3, #0]
    e72c:	0013      	movs	r3, r2
    e72e:	2200      	movs	r2, #0
    e730:	4d4f      	ldr	r5, [pc, #316]	; (e870 <GetTxChannelConfig1+0x1e8>)
    e732:	47a8      	blx	r5
    e734:	0003      	movs	r3, r0
    e736:	7023      	strb	r3, [r4, #0]
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    e738:	230b      	movs	r3, #11
    e73a:	18fb      	adds	r3, r7, r3
    e73c:	781b      	ldrb	r3, [r3, #0]
    e73e:	2b3f      	cmp	r3, #63	; 0x3f
    e740:	d80c      	bhi.n	e75c <GetTxChannelConfig1+0xd4>
		{
			if( RegParams.band == ISM_NA915)
    e742:	4b4a      	ldr	r3, [pc, #296]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e744:	222f      	movs	r2, #47	; 0x2f
    e746:	5c9b      	ldrb	r3, [r3, r2]
    e748:	2b02      	cmp	r3, #2
    e74a:	d103      	bne.n	e754 <GetTxChannelConfig1+0xcc>
			{
				radioConfig->sf = SF_10;
    e74c:	683b      	ldr	r3, [r7, #0]
    e74e:	220a      	movs	r2, #10
    e750:	72da      	strb	r2, [r3, #11]
    e752:	e006      	b.n	e762 <GetTxChannelConfig1+0xda>
			}
			else
			{
				radioConfig->sf = SF_12;
    e754:	683b      	ldr	r3, [r7, #0]
    e756:	220c      	movs	r2, #12
    e758:	72da      	strb	r2, [r3, #11]
    e75a:	e002      	b.n	e762 <GetTxChannelConfig1+0xda>
			}
		}
		else
		{
			radioConfig->sf = SF_8;
    e75c:	683b      	ldr	r3, [r7, #0]
    e75e:	2208      	movs	r2, #8
    e760:	72da      	strb	r2, [r3, #11]
		}

#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    e762:	4b42      	ldr	r3, [pc, #264]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e764:	4a43      	ldr	r2, [pc, #268]	; (e874 <GetTxChannelConfig1+0x1ec>)
    e766:	5c9a      	ldrb	r2, [r3, r2]
    e768:	4943      	ldr	r1, [pc, #268]	; (e878 <GetTxChannelConfig1+0x1f0>)
    e76a:	5c5b      	ldrb	r3, [r3, r1]
    e76c:	021b      	lsls	r3, r3, #8
    e76e:	4313      	orrs	r3, r2
    e770:	b29b      	uxth	r3, r3
    e772:	0a1b      	lsrs	r3, r3, #8
    e774:	b29a      	uxth	r2, r3
    e776:	230d      	movs	r3, #13
    e778:	18fb      	adds	r3, r7, r3
    e77a:	701a      	strb	r2, [r3, #0]
    e77c:	4b3b      	ldr	r3, [pc, #236]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e77e:	4a3d      	ldr	r2, [pc, #244]	; (e874 <GetTxChannelConfig1+0x1ec>)
    e780:	5c9a      	ldrb	r2, [r3, r2]
    e782:	493d      	ldr	r1, [pc, #244]	; (e878 <GetTxChannelConfig1+0x1f0>)
    e784:	5c5b      	ldrb	r3, [r3, r1]
    e786:	021b      	lsls	r3, r3, #8
    e788:	4313      	orrs	r3, r2
    e78a:	b29a      	uxth	r2, r3
    e78c:	230c      	movs	r3, #12
    e78e:	18fb      	adds	r3, r7, r3
    e790:	701a      	strb	r2, [r3, #0]
    e792:	230c      	movs	r3, #12
    e794:	18fb      	adds	r3, r7, r3
    e796:	781a      	ldrb	r2, [r3, #0]
    e798:	230d      	movs	r3, #13
    e79a:	18fb      	adds	r3, r7, r3
    e79c:	781b      	ldrb	r3, [r3, #0]
    e79e:	0011      	movs	r1, r2
    e7a0:	0018      	movs	r0, r3
    e7a2:	4b36      	ldr	r3, [pc, #216]	; (e87c <GetTxChannelConfig1+0x1f4>)
    e7a4:	4798      	blx	r3
#endif

	}


	if (result == LORAWAN_SUCCESS)
    e7a6:	230f      	movs	r3, #15
    e7a8:	18fb      	adds	r3, r7, r3
    e7aa:	781b      	ldrb	r3, [r3, #0]
    e7ac:	2b08      	cmp	r3, #8
    e7ae:	d155      	bne.n	e85c <GetTxChannelConfig1+0x1d4>
	{
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    e7b0:	4a2e      	ldr	r2, [pc, #184]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e7b2:	23aa      	movs	r3, #170	; 0xaa
    e7b4:	005b      	lsls	r3, r3, #1
    e7b6:	5cd2      	ldrb	r2, [r2, r3]
    e7b8:	230b      	movs	r3, #11
    e7ba:	18fb      	adds	r3, r7, r3
    e7bc:	781b      	ldrb	r3, [r3, #0]
    e7be:	429a      	cmp	r2, r3
    e7c0:	d91d      	bls.n	e7fe <GetTxChannelConfig1+0x176>
		{
			radioConfig->bandwidth = BW_125KHZ;
    e7c2:	683b      	ldr	r3, [r7, #0]
    e7c4:	2207      	movs	r2, #7
    e7c6:	729a      	strb	r2, [r3, #10]
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    e7c8:	230b      	movs	r3, #11
    e7ca:	18fb      	adds	r3, r7, r3
    e7cc:	781b      	ldrb	r3, [r3, #0]
    e7ce:	0018      	movs	r0, r3
    e7d0:	4b2b      	ldr	r3, [pc, #172]	; (e880 <GetTxChannelConfig1+0x1f8>)
    e7d2:	4798      	blx	r3
    e7d4:	0002      	movs	r2, r0
    e7d6:	683b      	ldr	r3, [r7, #0]
    e7d8:	601a      	str	r2, [r3, #0]
			radioConfig->txPower = txPower;
    e7da:	230e      	movs	r3, #14
    e7dc:	18fb      	adds	r3, r7, r3
    e7de:	2200      	movs	r2, #0
    e7e0:	569a      	ldrsb	r2, [r3, r2]
    e7e2:	683b      	ldr	r3, [r7, #0]
    e7e4:	721a      	strb	r2, [r3, #8]
			if(RegParams.band == ISM_NA915)
    e7e6:	4b21      	ldr	r3, [pc, #132]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e7e8:	222f      	movs	r2, #47	; 0x2f
    e7ea:	5c9b      	ldrb	r3, [r3, r2]
    e7ec:	2b02      	cmp	r3, #2
    e7ee:	d129      	bne.n	e844 <GetTxChannelConfig1+0x1bc>
			{
    			radioConfig->ecrConfig.override = true;
    e7f0:	683b      	ldr	r3, [r7, #0]
    e7f2:	2201      	movs	r2, #1
    e7f4:	71da      	strb	r2, [r3, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    e7f6:	683b      	ldr	r3, [r7, #0]
    e7f8:	2201      	movs	r2, #1
    e7fa:	719a      	strb	r2, [r3, #6]
    e7fc:	e022      	b.n	e844 <GetTxChannelConfig1+0x1bc>
			}
		}
		else
		{
			radioConfig->bandwidth = BW_500KHZ;
    e7fe:	683b      	ldr	r3, [r7, #0]
    e800:	2209      	movs	r2, #9
    e802:	729a      	strb	r2, [r3, #10]
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    e804:	230b      	movs	r3, #11
    e806:	18fb      	adds	r3, r7, r3
    e808:	781b      	ldrb	r3, [r3, #0]
    e80a:	0018      	movs	r0, r3
    e80c:	4b1d      	ldr	r3, [pc, #116]	; (e884 <GetTxChannelConfig1+0x1fc>)
    e80e:	4798      	blx	r3
    e810:	0002      	movs	r2, r0
    e812:	683b      	ldr	r3, [r7, #0]
    e814:	601a      	str	r2, [r3, #0]
			if( RegParams.band == ISM_NA915)
    e816:	4b15      	ldr	r3, [pc, #84]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e818:	222f      	movs	r2, #47	; 0x2f
    e81a:	5c9b      	ldrb	r3, [r3, r2]
    e81c:	2b02      	cmp	r3, #2
    e81e:	d102      	bne.n	e826 <GetTxChannelConfig1+0x19e>
			{
			    radioConfig->ecrConfig.override = false;
    e820:	683b      	ldr	r3, [r7, #0]
    e822:	2200      	movs	r2, #0
    e824:	71da      	strb	r2, [r3, #7]
			}
			//devices, when transmitting with 500 kHz BW may use a maximum of 26 dBm
			if (txPower <= 26)
    e826:	230e      	movs	r3, #14
    e828:	18fb      	adds	r3, r7, r3
    e82a:	781b      	ldrb	r3, [r3, #0]
    e82c:	2b1a      	cmp	r3, #26
    e82e:	d806      	bhi.n	e83e <GetTxChannelConfig1+0x1b6>
			{
				radioConfig->txPower = txPower;
    e830:	230e      	movs	r3, #14
    e832:	18fb      	adds	r3, r7, r3
    e834:	2200      	movs	r2, #0
    e836:	569a      	ldrsb	r2, [r3, r2]
    e838:	683b      	ldr	r3, [r7, #0]
    e83a:	721a      	strb	r2, [r3, #8]
    e83c:	e002      	b.n	e844 <GetTxChannelConfig1+0x1bc>
			}
			else
			{
				radioConfig->txPower = 26;
    e83e:	683b      	ldr	r3, [r7, #0]
    e840:	221a      	movs	r2, #26
    e842:	721a      	strb	r2, [r3, #8]
			}
		}
		radioConfig->freq_hop_period = DISABLED;
    e844:	683b      	ldr	r3, [r7, #0]
    e846:	2200      	movs	r2, #0
    e848:	809a      	strh	r2, [r3, #4]
		radioConfig->modulation = MODULATION_LORA;
    e84a:	683b      	ldr	r3, [r7, #0]
    e84c:	2201      	movs	r2, #1
    e84e:	725a      	strb	r2, [r3, #9]
		//ConfigureRadioTx(radioConfig);
		RegParams.lastUsedChannelIndex = channelIndex;
    e850:	230b      	movs	r3, #11
    e852:	18fb      	adds	r3, r7, r3
    e854:	7819      	ldrb	r1, [r3, #0]
    e856:	4b05      	ldr	r3, [pc, #20]	; (e86c <GetTxChannelConfig1+0x1e4>)
    e858:	2230      	movs	r2, #48	; 0x30
    e85a:	5499      	strb	r1, [r3, r2]
	}

	return result;
    e85c:	230f      	movs	r3, #15
    e85e:	18fb      	adds	r3, r7, r3
    e860:	781b      	ldrb	r3, [r3, #0]
}
    e862:	0018      	movs	r0, r3
    e864:	46bd      	mov	sp, r7
    e866:	b004      	add	sp, #16
    e868:	bdb0      	pop	{r4, r5, r7, pc}
    e86a:	46c0      	nop			; (mov r8, r8)
    e86c:	200014a8 	.word	0x200014a8
    e870:	0000ea21 	.word	0x0000ea21
    e874:	0000020d 	.word	0x0000020d
    e878:	0000020e 	.word	0x0000020e
    e87c:	00013b45 	.word	0x00013b45
    e880:	0000d685 	.word	0x0000d685
    e884:	0000d6d9 	.word	0x0000d6d9

0000e888 <GetTxChannelConfig2>:
 * \retval LORAWAN_SUCCESS : If Channel is found successfully is successful
 *	LORAWAN_NO_CHANNELS_FOUND if No free channel is available
 */
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t GetTxChannelConfig2 (bool transmissionType,uint8_t txPwrIndx,uint8_t currDr,radioConfig_t* radioConfig)  // transmission type is 0 means join request, transmission type is 1 means data message mode
{
    e888:	b5b0      	push	{r4, r5, r7, lr}
    e88a:	b084      	sub	sp, #16
    e88c:	af00      	add	r7, sp, #0
    e88e:	0004      	movs	r4, r0
    e890:	0008      	movs	r0, r1
    e892:	0011      	movs	r1, r2
    e894:	603b      	str	r3, [r7, #0]
    e896:	1dfb      	adds	r3, r7, #7
    e898:	1c22      	adds	r2, r4, #0
    e89a:	701a      	strb	r2, [r3, #0]
    e89c:	1dbb      	adds	r3, r7, #6
    e89e:	1c02      	adds	r2, r0, #0
    e8a0:	701a      	strb	r2, [r3, #0]
    e8a2:	1d7b      	adds	r3, r7, #5
    e8a4:	1c0a      	adds	r2, r1, #0
    e8a6:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    e8a8:	230f      	movs	r3, #15
    e8aa:	18fb      	adds	r3, r7, r3
    e8ac:	2208      	movs	r2, #8
    e8ae:	701a      	strb	r2, [r3, #0]
	uint8_t channelIndex;

	
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    e8b0:	4b58      	ldr	r3, [pc, #352]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e8b2:	222f      	movs	r2, #47	; 0x2f
    e8b4:	5c9b      	ldrb	r3, [r3, r2]
    e8b6:	001a      	movs	r2, r3
    e8b8:	4b57      	ldr	r3, [pc, #348]	; (ea18 <GetTxChannelConfig2+0x190>)
    e8ba:	4113      	asrs	r3, r2
    e8bc:	2201      	movs	r2, #1
    e8be:	4013      	ands	r3, r2
    e8c0:	d108      	bne.n	e8d4 <GetTxChannelConfig2+0x4c>
    e8c2:	4b54      	ldr	r3, [pc, #336]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e8c4:	222f      	movs	r2, #47	; 0x2f
    e8c6:	5c9b      	ldrb	r3, [r3, r2]
    e8c8:	001a      	movs	r2, r3
    e8ca:	2320      	movs	r3, #32
    e8cc:	4113      	asrs	r3, r2
    e8ce:	2201      	movs	r2, #1
    e8d0:	4013      	ands	r3, r2
    e8d2:	d001      	beq.n	e8d8 <GetTxChannelConfig2+0x50>
    e8d4:	2301      	movs	r3, #1
    e8d6:	e000      	b.n	e8da <GetTxChannelConfig2+0x52>
    e8d8:	2300      	movs	r3, #0
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d009      	beq.n	e8f2 <GetTxChannelConfig2+0x6a>
    e8de:	1dfb      	adds	r3, r7, #7
    e8e0:	781b      	ldrb	r3, [r3, #0]
    e8e2:	2201      	movs	r2, #1
    e8e4:	4053      	eors	r3, r2
    e8e6:	b2db      	uxtb	r3, r3
    e8e8:	2b00      	cmp	r3, #0
    e8ea:	d002      	beq.n	e8f2 <GetTxChannelConfig2+0x6a>
	{
		/*DR2 is the default Join Data rate*/
		currDr = DR2;
    e8ec:	1d7b      	adds	r3, r7, #5
    e8ee:	2202      	movs	r2, #2
    e8f0:	701a      	strb	r2, [r3, #0]
	}
	
	
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    e8f2:	4b48      	ldr	r3, [pc, #288]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e8f4:	222a      	movs	r2, #42	; 0x2a
    e8f6:	569b      	ldrsb	r3, [r3, r2]
    e8f8:	b2d8      	uxtb	r0, r3
    e8fa:	230f      	movs	r3, #15
    e8fc:	18fc      	adds	r4, r7, r3
    e8fe:	230e      	movs	r3, #14
    e900:	18fd      	adds	r5, r7, r3
    e902:	1d7b      	adds	r3, r7, #5
    e904:	781a      	ldrb	r2, [r3, #0]
    e906:	1dfb      	adds	r3, r7, #7
    e908:	7819      	ldrb	r1, [r3, #0]
    e90a:	002b      	movs	r3, r5
    e90c:	4d43      	ldr	r5, [pc, #268]	; (ea1c <GetTxChannelConfig2+0x194>)
    e90e:	47a8      	blx	r5
    e910:	0003      	movs	r3, r0
    e912:	7023      	strb	r3, [r4, #0]

	if (result == LORAWAN_SUCCESS)
    e914:	230f      	movs	r3, #15
    e916:	18fb      	adds	r3, r7, r3
    e918:	781b      	ldrb	r3, [r3, #0]
    e91a:	2b08      	cmp	r3, #8
    e91c:	d172      	bne.n	ea04 <GetTxChannelConfig2+0x17c>
	{
		RegParams.lastUsedChannelIndex = channelIndex;
    e91e:	230e      	movs	r3, #14
    e920:	18fb      	adds	r3, r7, r3
    e922:	7819      	ldrb	r1, [r3, #0]
    e924:	4b3b      	ldr	r3, [pc, #236]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e926:	2230      	movs	r2, #48	; 0x30
    e928:	5499      	strb	r1, [r3, r2]

		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    e92a:	4b3a      	ldr	r3, [pc, #232]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e92c:	7a1a      	ldrb	r2, [r3, #8]
    e92e:	7a59      	ldrb	r1, [r3, #9]
    e930:	0209      	lsls	r1, r1, #8
    e932:	430a      	orrs	r2, r1
    e934:	7a99      	ldrb	r1, [r3, #10]
    e936:	0409      	lsls	r1, r1, #16
    e938:	430a      	orrs	r2, r1
    e93a:	7adb      	ldrb	r3, [r3, #11]
    e93c:	061b      	lsls	r3, r3, #24
    e93e:	4313      	orrs	r3, r2
    e940:	0019      	movs	r1, r3
    e942:	230e      	movs	r3, #14
    e944:	18fb      	adds	r3, r7, r3
    e946:	781b      	ldrb	r3, [r3, #0]
    e948:	001a      	movs	r2, r3
    e94a:	0013      	movs	r3, r2
    e94c:	005b      	lsls	r3, r3, #1
    e94e:	189b      	adds	r3, r3, r2
    e950:	009b      	lsls	r3, r3, #2
    e952:	18cb      	adds	r3, r1, r3
    e954:	781a      	ldrb	r2, [r3, #0]
    e956:	7859      	ldrb	r1, [r3, #1]
    e958:	0209      	lsls	r1, r1, #8
    e95a:	430a      	orrs	r2, r1
    e95c:	7899      	ldrb	r1, [r3, #2]
    e95e:	0409      	lsls	r1, r1, #16
    e960:	430a      	orrs	r2, r1
    e962:	78db      	ldrb	r3, [r3, #3]
    e964:	061b      	lsls	r3, r3, #24
    e966:	4313      	orrs	r3, r2
    e968:	001a      	movs	r2, r3
    e96a:	683b      	ldr	r3, [r7, #0]
    e96c:	601a      	str	r2, [r3, #0]

		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    e96e:	4b29      	ldr	r3, [pc, #164]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e970:	2228      	movs	r2, #40	; 0x28
    e972:	5c9a      	ldrb	r2, [r3, r2]
    e974:	1dbb      	adds	r3, r7, #6
    e976:	781b      	ldrb	r3, [r3, #0]
    e978:	18db      	adds	r3, r3, r3
    e97a:	b2db      	uxtb	r3, r3
    e97c:	1ad3      	subs	r3, r2, r3
    e97e:	b2db      	uxtb	r3, r3
    e980:	b25a      	sxtb	r2, r3
    e982:	683b      	ldr	r3, [r7, #0]
    e984:	721a      	strb	r2, [r3, #8]
		
		radioConfig->freq_hop_period = DISABLED ;
    e986:	683b      	ldr	r3, [r7, #0]
    e988:	2200      	movs	r2, #0
    e98a:	809a      	strh	r2, [r3, #4]
		
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    e98c:	4b21      	ldr	r3, [pc, #132]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e98e:	781a      	ldrb	r2, [r3, #0]
    e990:	7859      	ldrb	r1, [r3, #1]
    e992:	0209      	lsls	r1, r1, #8
    e994:	430a      	orrs	r2, r1
    e996:	7899      	ldrb	r1, [r3, #2]
    e998:	0409      	lsls	r1, r1, #16
    e99a:	430a      	orrs	r2, r1
    e99c:	78db      	ldrb	r3, [r3, #3]
    e99e:	061b      	lsls	r3, r3, #24
    e9a0:	4313      	orrs	r3, r2
    e9a2:	001a      	movs	r2, r3
    e9a4:	1d7b      	adds	r3, r7, #5
    e9a6:	781b      	ldrb	r3, [r3, #0]
    e9a8:	00db      	lsls	r3, r3, #3
    e9aa:	18d3      	adds	r3, r2, r3
    e9ac:	79da      	ldrb	r2, [r3, #7]
    e9ae:	683b      	ldr	r3, [r7, #0]
    e9b0:	725a      	strb	r2, [r3, #9]
		
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    e9b2:	4b18      	ldr	r3, [pc, #96]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e9b4:	781a      	ldrb	r2, [r3, #0]
    e9b6:	7859      	ldrb	r1, [r3, #1]
    e9b8:	0209      	lsls	r1, r1, #8
    e9ba:	430a      	orrs	r2, r1
    e9bc:	7899      	ldrb	r1, [r3, #2]
    e9be:	0409      	lsls	r1, r1, #16
    e9c0:	430a      	orrs	r2, r1
    e9c2:	78db      	ldrb	r3, [r3, #3]
    e9c4:	061b      	lsls	r3, r3, #24
    e9c6:	4313      	orrs	r3, r2
    e9c8:	001a      	movs	r2, r3
    e9ca:	1d7b      	adds	r3, r7, #5
    e9cc:	781b      	ldrb	r3, [r3, #0]
    e9ce:	00db      	lsls	r3, r3, #3
    e9d0:	18d3      	adds	r3, r2, r3
    e9d2:	799a      	ldrb	r2, [r3, #6]
    e9d4:	683b      	ldr	r3, [r7, #0]
    e9d6:	729a      	strb	r2, [r3, #10]
		
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    e9d8:	4b0e      	ldr	r3, [pc, #56]	; (ea14 <GetTxChannelConfig2+0x18c>)
    e9da:	781a      	ldrb	r2, [r3, #0]
    e9dc:	7859      	ldrb	r1, [r3, #1]
    e9de:	0209      	lsls	r1, r1, #8
    e9e0:	430a      	orrs	r2, r1
    e9e2:	7899      	ldrb	r1, [r3, #2]
    e9e4:	0409      	lsls	r1, r1, #16
    e9e6:	430a      	orrs	r2, r1
    e9e8:	78db      	ldrb	r3, [r3, #3]
    e9ea:	061b      	lsls	r3, r3, #24
    e9ec:	4313      	orrs	r3, r2
    e9ee:	001a      	movs	r2, r3
    e9f0:	1d7b      	adds	r3, r7, #5
    e9f2:	781b      	ldrb	r3, [r3, #0]
    e9f4:	00db      	lsls	r3, r3, #3
    e9f6:	18d3      	adds	r3, r2, r3
    e9f8:	795a      	ldrb	r2, [r3, #5]
    e9fa:	683b      	ldr	r3, [r7, #0]
    e9fc:	72da      	strb	r2, [r3, #11]
		
		/*IND Regulatory does not prescribe specific ecr*/
		radioConfig->ecrConfig.override = false;
    e9fe:	683b      	ldr	r3, [r7, #0]
    ea00:	2200      	movs	r2, #0
    ea02:	71da      	strb	r2, [r3, #7]
		
	}
	return result;
    ea04:	230f      	movs	r3, #15
    ea06:	18fb      	adds	r3, r7, r3
    ea08:	781b      	ldrb	r3, [r3, #0]
}
    ea0a:	0018      	movs	r0, r3
    ea0c:	46bd      	mov	sp, r7
    ea0e:	b004      	add	sp, #16
    ea10:	bdb0      	pop	{r4, r5, r7, pc}
    ea12:	46c0      	nop			; (mov r8, r8)
    ea14:	200014a8 	.word	0x200014a8
    ea18:	00007fc0 	.word	0x00007fc0
    ea1c:	0000ee49 	.word	0x0000ee49

0000ea20 <SearchAvailableChannel1>:
 *	LORAWAN_NO_CHANNELS_FOUND if No free channel is available
 */
//Pass current data rate into this function
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t SearchAvailableChannel1 (uint8_t maxChannels, bool transmissionType,uint8_t currDr, uint8_t* channelIndex)
{
    ea20:	b590      	push	{r4, r7, lr}
    ea22:	b0a9      	sub	sp, #164	; 0xa4
    ea24:	af00      	add	r7, sp, #0
    ea26:	0004      	movs	r4, r0
    ea28:	0008      	movs	r0, r1
    ea2a:	0011      	movs	r1, r2
    ea2c:	603b      	str	r3, [r7, #0]
    ea2e:	1dfb      	adds	r3, r7, #7
    ea30:	1c22      	adds	r2, r4, #0
    ea32:	701a      	strb	r2, [r3, #0]
    ea34:	1dbb      	adds	r3, r7, #6
    ea36:	1c02      	adds	r2, r0, #0
    ea38:	701a      	strb	r2, [r3, #0]
    ea3a:	1d7b      	adds	r3, r7, #5
    ea3c:	1c0a      	adds	r2, r1, #0
    ea3e:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ea40:	239f      	movs	r3, #159	; 0x9f
    ea42:	18fb      	adds	r3, r7, r3
    ea44:	2208      	movs	r2, #8
    ea46:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0,j = 0,k = 0;
    ea48:	239e      	movs	r3, #158	; 0x9e
    ea4a:	18fb      	adds	r3, r7, r3
    ea4c:	2200      	movs	r2, #0
    ea4e:	701a      	strb	r2, [r3, #0]
    ea50:	239d      	movs	r3, #157	; 0x9d
    ea52:	18fb      	adds	r3, r7, r3
    ea54:	2200      	movs	r2, #0
    ea56:	701a      	strb	r2, [r3, #0]
    ea58:	239c      	movs	r3, #156	; 0x9c
    ea5a:	18fb      	adds	r3, r7, r3
    ea5c:	2200      	movs	r2, #0
    ea5e:	701a      	strb	r2, [r3, #0]
	/* Channel list is a 2-dimensional array, which stores the Channel 
	 * in first index and corresponding Sub-band in second index
	 * For eg: Channel ID 1 and corresponding sub-band is 1.
	 * Channel ID 55 and corresponding sub-band is 6 */
	uint8_t ChList[MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA][2];
	uint8_t num = 0;
    ea60:	239b      	movs	r3, #155	; 0x9b
    ea62:	18fb      	adds	r3, r7, r3
    ea64:	2200      	movs	r2, #0
    ea66:	701a      	strb	r2, [r3, #0]
	uint8_t randomNumber = 0;
    ea68:	239a      	movs	r3, #154	; 0x9a
    ea6a:	18fb      	adds	r3, r7, r3
    ea6c:	2200      	movs	r2, #0
    ea6e:	701a      	strb	r2, [r3, #0]
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    ea70:	2308      	movs	r3, #8
    ea72:	18fb      	adds	r3, r7, r3
    ea74:	2290      	movs	r2, #144	; 0x90
    ea76:	2100      	movs	r1, #0
    ea78:	0018      	movs	r0, r3
    ea7a:	4bc1      	ldr	r3, [pc, #772]	; (ed80 <SearchAvailableChannel1+0x360>)
    ea7c:	4798      	blx	r3

	if(transmissionType == false)
    ea7e:	1dbb      	adds	r3, r7, #6
    ea80:	781b      	ldrb	r3, [r3, #0]
    ea82:	2201      	movs	r2, #1
    ea84:	4053      	eors	r3, r2
    ea86:	b2db      	uxtb	r3, r3
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d019      	beq.n	eac0 <SearchAvailableChannel1+0xa0>
	{   
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    ea8c:	4bbd      	ldr	r3, [pc, #756]	; (ed84 <SearchAvailableChannel1+0x364>)
    ea8e:	2220      	movs	r2, #32
    ea90:	5c9b      	ldrb	r3, [r3, r2]
    ea92:	001a      	movs	r2, r3
    ea94:	2320      	movs	r3, #32
    ea96:	4013      	ands	r3, r2
    ea98:	d012      	beq.n	eac0 <SearchAvailableChannel1+0xa0>
		{
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    ea9a:	4bba      	ldr	r3, [pc, #744]	; (ed84 <SearchAvailableChannel1+0x364>)
    ea9c:	7d1a      	ldrb	r2, [r3, #20]
    ea9e:	7d59      	ldrb	r1, [r3, #21]
    eaa0:	0209      	lsls	r1, r1, #8
    eaa2:	430a      	orrs	r2, r1
    eaa4:	7d99      	ldrb	r1, [r3, #22]
    eaa6:	0409      	lsls	r1, r1, #16
    eaa8:	430a      	orrs	r2, r1
    eaaa:	7ddb      	ldrb	r3, [r3, #23]
    eaac:	061b      	lsls	r3, r3, #24
    eaae:	4313      	orrs	r3, r2
    eab0:	7a1b      	ldrb	r3, [r3, #8]
    eab2:	0018      	movs	r0, r3
    eab4:	4bb4      	ldr	r3, [pc, #720]	; (ed88 <SearchAvailableChannel1+0x368>)
    eab6:	4798      	blx	r3
    eab8:	1e03      	subs	r3, r0, #0
    eaba:	d001      	beq.n	eac0 <SearchAvailableChannel1+0xa0>
			{
					return LORAWAN_NO_CHANNELS_FOUND;
    eabc:	2310      	movs	r3, #16
    eabe:	e1bc      	b.n	ee3a <SearchAvailableChannel1+0x41a>
			}
			}
	} 
	  
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    eac0:	239e      	movs	r3, #158	; 0x9e
    eac2:	18fb      	adds	r3, r7, r3
    eac4:	2200      	movs	r2, #0
    eac6:	701a      	strb	r2, [r3, #0]
    eac8:	239c      	movs	r3, #156	; 0x9c
    eaca:	18fb      	adds	r3, r7, r3
    eacc:	2200      	movs	r2, #0
    eace:	701a      	strb	r2, [r3, #0]
    ead0:	e11b      	b.n	ed0a <SearchAvailableChannel1+0x2ea>
	{
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    ead2:	239d      	movs	r3, #157	; 0x9d
    ead4:	18fb      	adds	r3, r7, r3
    ead6:	2200      	movs	r2, #0
    ead8:	701a      	strb	r2, [r3, #0]
    eada:	e102      	b.n	ece2 <SearchAvailableChannel1+0x2c2>
				*			3b2. Channel ID is greater than 63 and lastUsedSB is equals to Channel ID - 63.
				*		Here k value is index and goes from 0-7.
				*		lastUsedSB is value and goes from 1-8. 
				*		Need to get channels only from next sub-band of previously used one.
				*/
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    eadc:	1dbb      	adds	r3, r7, #6
    eade:	781b      	ldrb	r3, [r3, #0]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d05d      	beq.n	eba0 <SearchAvailableChannel1+0x180>
    eae4:	1d7b      	adds	r3, r7, #5
    eae6:	781a      	ldrb	r2, [r3, #0]
    eae8:	4ba6      	ldr	r3, [pc, #664]	; (ed84 <SearchAvailableChannel1+0x364>)
    eaea:	7919      	ldrb	r1, [r3, #4]
    eaec:	7958      	ldrb	r0, [r3, #5]
    eaee:	0200      	lsls	r0, r0, #8
    eaf0:	4301      	orrs	r1, r0
    eaf2:	7998      	ldrb	r0, [r3, #6]
    eaf4:	0400      	lsls	r0, r0, #16
    eaf6:	4301      	orrs	r1, r0
    eaf8:	79db      	ldrb	r3, [r3, #7]
    eafa:	061b      	lsls	r3, r3, #24
    eafc:	430b      	orrs	r3, r1
    eafe:	0018      	movs	r0, r3
    eb00:	239e      	movs	r3, #158	; 0x9e
    eb02:	18fb      	adds	r3, r7, r3
    eb04:	7819      	ldrb	r1, [r3, #0]
    eb06:	239d      	movs	r3, #157	; 0x9d
    eb08:	18fb      	adds	r3, r7, r3
    eb0a:	781b      	ldrb	r3, [r3, #0]
    eb0c:	18cb      	adds	r3, r1, r3
    eb0e:	005b      	lsls	r3, r3, #1
    eb10:	18c3      	adds	r3, r0, r3
    eb12:	785b      	ldrb	r3, [r3, #1]
    eb14:	071b      	lsls	r3, r3, #28
    eb16:	0f1b      	lsrs	r3, r3, #28
    eb18:	b2db      	uxtb	r3, r3
    eb1a:	429a      	cmp	r2, r3
    eb1c:	db40      	blt.n	eba0 <SearchAvailableChannel1+0x180>
    eb1e:	1d7b      	adds	r3, r7, #5
    eb20:	781a      	ldrb	r2, [r3, #0]
    eb22:	4b98      	ldr	r3, [pc, #608]	; (ed84 <SearchAvailableChannel1+0x364>)
    eb24:	7919      	ldrb	r1, [r3, #4]
    eb26:	7958      	ldrb	r0, [r3, #5]
    eb28:	0200      	lsls	r0, r0, #8
    eb2a:	4301      	orrs	r1, r0
    eb2c:	7998      	ldrb	r0, [r3, #6]
    eb2e:	0400      	lsls	r0, r0, #16
    eb30:	4301      	orrs	r1, r0
    eb32:	79db      	ldrb	r3, [r3, #7]
    eb34:	061b      	lsls	r3, r3, #24
    eb36:	430b      	orrs	r3, r1
    eb38:	0018      	movs	r0, r3
    eb3a:	239e      	movs	r3, #158	; 0x9e
    eb3c:	18fb      	adds	r3, r7, r3
    eb3e:	7819      	ldrb	r1, [r3, #0]
    eb40:	239d      	movs	r3, #157	; 0x9d
    eb42:	18fb      	adds	r3, r7, r3
    eb44:	781b      	ldrb	r3, [r3, #0]
    eb46:	18cb      	adds	r3, r1, r3
    eb48:	005b      	lsls	r3, r3, #1
    eb4a:	18c3      	adds	r3, r0, r3
    eb4c:	785b      	ldrb	r3, [r3, #1]
    eb4e:	061b      	lsls	r3, r3, #24
    eb50:	0f1b      	lsrs	r3, r3, #28
    eb52:	b2db      	uxtb	r3, r3
    eb54:	429a      	cmp	r2, r3
    eb56:	dc23      	bgt.n	eba0 <SearchAvailableChannel1+0x180>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    eb58:	4b8a      	ldr	r3, [pc, #552]	; (ed84 <SearchAvailableChannel1+0x364>)
    eb5a:	791a      	ldrb	r2, [r3, #4]
    eb5c:	7959      	ldrb	r1, [r3, #5]
    eb5e:	0209      	lsls	r1, r1, #8
    eb60:	430a      	orrs	r2, r1
    eb62:	7999      	ldrb	r1, [r3, #6]
    eb64:	0409      	lsls	r1, r1, #16
    eb66:	430a      	orrs	r2, r1
    eb68:	79db      	ldrb	r3, [r3, #7]
    eb6a:	061b      	lsls	r3, r3, #24
    eb6c:	4313      	orrs	r3, r2
    eb6e:	0019      	movs	r1, r3
    eb70:	239e      	movs	r3, #158	; 0x9e
    eb72:	18fb      	adds	r3, r7, r3
    eb74:	781a      	ldrb	r2, [r3, #0]
    eb76:	239d      	movs	r3, #157	; 0x9d
    eb78:	18fb      	adds	r3, r7, r3
    eb7a:	781b      	ldrb	r3, [r3, #0]
    eb7c:	18d3      	adds	r3, r2, r3
    eb7e:	005b      	lsls	r3, r3, #1
    eb80:	18cb      	adds	r3, r1, r3
    eb82:	781b      	ldrb	r3, [r3, #0]
    eb84:	2b00      	cmp	r3, #0
    eb86:	d00b      	beq.n	eba0 <SearchAvailableChannel1+0x180>
    eb88:	239e      	movs	r3, #158	; 0x9e
    eb8a:	18fb      	adds	r3, r7, r3
    eb8c:	781a      	ldrb	r2, [r3, #0]
    eb8e:	239d      	movs	r3, #157	; 0x9d
    eb90:	18fb      	adds	r3, r7, r3
    eb92:	781b      	ldrb	r3, [r3, #0]
    eb94:	18d3      	adds	r3, r2, r3
    eb96:	4a7b      	ldr	r2, [pc, #492]	; (ed84 <SearchAvailableChannel1+0x364>)
    eb98:	2130      	movs	r1, #48	; 0x30
    eb9a:	5c52      	ldrb	r2, [r2, r1]
    eb9c:	4293      	cmp	r3, r2
    eb9e:	d156      	bne.n	ec4e <SearchAvailableChannel1+0x22e>
					||
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    eba0:	1dbb      	adds	r3, r7, #6
    eba2:	781b      	ldrb	r3, [r3, #0]
    eba4:	2201      	movs	r2, #1
    eba6:	4053      	eors	r3, r2
    eba8:	b2db      	uxtb	r3, r3
					||
    ebaa:	2b00      	cmp	r3, #0
    ebac:	d100      	bne.n	ebb0 <SearchAvailableChannel1+0x190>
    ebae:	e091      	b.n	ecd4 <SearchAvailableChannel1+0x2b4>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    ebb0:	4b74      	ldr	r3, [pc, #464]	; (ed84 <SearchAvailableChannel1+0x364>)
    ebb2:	791a      	ldrb	r2, [r3, #4]
    ebb4:	7959      	ldrb	r1, [r3, #5]
    ebb6:	0209      	lsls	r1, r1, #8
    ebb8:	430a      	orrs	r2, r1
    ebba:	7999      	ldrb	r1, [r3, #6]
    ebbc:	0409      	lsls	r1, r1, #16
    ebbe:	430a      	orrs	r2, r1
    ebc0:	79db      	ldrb	r3, [r3, #7]
    ebc2:	061b      	lsls	r3, r3, #24
    ebc4:	4313      	orrs	r3, r2
    ebc6:	0019      	movs	r1, r3
    ebc8:	239e      	movs	r3, #158	; 0x9e
    ebca:	18fb      	adds	r3, r7, r3
    ebcc:	781a      	ldrb	r2, [r3, #0]
    ebce:	239d      	movs	r3, #157	; 0x9d
    ebd0:	18fb      	adds	r3, r7, r3
    ebd2:	781b      	ldrb	r3, [r3, #0]
    ebd4:	18d3      	adds	r3, r2, r3
    ebd6:	005b      	lsls	r3, r3, #1
    ebd8:	18cb      	adds	r3, r1, r3
    ebda:	781b      	ldrb	r3, [r3, #0]
    ebdc:	2b00      	cmp	r3, #0
    ebde:	d100      	bne.n	ebe2 <SearchAvailableChannel1+0x1c2>
    ebe0:	e078      	b.n	ecd4 <SearchAvailableChannel1+0x2b4>
    ebe2:	239e      	movs	r3, #158	; 0x9e
    ebe4:	18fb      	adds	r3, r7, r3
    ebe6:	781a      	ldrb	r2, [r3, #0]
    ebe8:	239d      	movs	r3, #157	; 0x9d
    ebea:	18fb      	adds	r3, r7, r3
    ebec:	781b      	ldrb	r3, [r3, #0]
    ebee:	18d3      	adds	r3, r2, r3
    ebf0:	4a64      	ldr	r2, [pc, #400]	; (ed84 <SearchAvailableChannel1+0x364>)
    ebf2:	2130      	movs	r1, #48	; 0x30
    ebf4:	5c52      	ldrb	r2, [r2, r1]
    ebf6:	4293      	cmp	r3, r2
    ebf8:	d06c      	beq.n	ecd4 <SearchAvailableChannel1+0x2b4>
	#if (RANDOM_NW_ACQ == 1)
					&&
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    ebfa:	239e      	movs	r3, #158	; 0x9e
    ebfc:	18fb      	adds	r3, r7, r3
    ebfe:	781a      	ldrb	r2, [r3, #0]
    ec00:	239d      	movs	r3, #157	; 0x9d
    ec02:	18fb      	adds	r3, r7, r3
    ec04:	781b      	ldrb	r3, [r3, #0]
    ec06:	18d3      	adds	r3, r2, r3
					&&
    ec08:	2b3f      	cmp	r3, #63	; 0x3f
    ec0a:	dc08      	bgt.n	ec1e <SearchAvailableChannel1+0x1fe>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    ec0c:	4a5d      	ldr	r2, [pc, #372]	; (ed84 <SearchAvailableChannel1+0x364>)
    ec0e:	23ac      	movs	r3, #172	; 0xac
    ec10:	005b      	lsls	r3, r3, #1
    ec12:	5cd3      	ldrb	r3, [r2, r3]
    ec14:	229c      	movs	r2, #156	; 0x9c
    ec16:	18ba      	adds	r2, r7, r2
    ec18:	7812      	ldrb	r2, [r2, #0]
    ec1a:	429a      	cmp	r2, r3
    ec1c:	d017      	beq.n	ec4e <SearchAvailableChannel1+0x22e>
					|| 
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    ec1e:	239e      	movs	r3, #158	; 0x9e
    ec20:	18fb      	adds	r3, r7, r3
    ec22:	781a      	ldrb	r2, [r3, #0]
    ec24:	239d      	movs	r3, #157	; 0x9d
    ec26:	18fb      	adds	r3, r7, r3
    ec28:	781b      	ldrb	r3, [r3, #0]
    ec2a:	18d3      	adds	r3, r2, r3
					|| 
    ec2c:	2b40      	cmp	r3, #64	; 0x40
    ec2e:	dd51      	ble.n	ecd4 <SearchAvailableChannel1+0x2b4>
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    ec30:	4a54      	ldr	r2, [pc, #336]	; (ed84 <SearchAvailableChannel1+0x364>)
    ec32:	23ac      	movs	r3, #172	; 0xac
    ec34:	005b      	lsls	r3, r3, #1
    ec36:	5cd3      	ldrb	r3, [r2, r3]
    ec38:	0019      	movs	r1, r3
    ec3a:	239e      	movs	r3, #158	; 0x9e
    ec3c:	18fb      	adds	r3, r7, r3
    ec3e:	781a      	ldrb	r2, [r3, #0]
    ec40:	239d      	movs	r3, #157	; 0x9d
    ec42:	18fb      	adds	r3, r7, r3
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	18d3      	adds	r3, r2, r3
    ec48:	3b40      	subs	r3, #64	; 0x40
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    ec4a:	4299      	cmp	r1, r3
    ec4c:	d142      	bne.n	ecd4 <SearchAvailableChannel1+0x2b4>
					))
				{
						// Mark this channel i+j
						// Mark this sub band k
						// increment number of channel;
						ChList[num][0] = i+j;
    ec4e:	239b      	movs	r3, #155	; 0x9b
    ec50:	18fb      	adds	r3, r7, r3
    ec52:	781a      	ldrb	r2, [r3, #0]
    ec54:	239e      	movs	r3, #158	; 0x9e
    ec56:	18f9      	adds	r1, r7, r3
    ec58:	239d      	movs	r3, #157	; 0x9d
    ec5a:	18fb      	adds	r3, r7, r3
    ec5c:	7809      	ldrb	r1, [r1, #0]
    ec5e:	781b      	ldrb	r3, [r3, #0]
    ec60:	18cb      	adds	r3, r1, r3
    ec62:	b2d9      	uxtb	r1, r3
    ec64:	2308      	movs	r3, #8
    ec66:	18fb      	adds	r3, r7, r3
    ec68:	0052      	lsls	r2, r2, #1
    ec6a:	54d1      	strb	r1, [r2, r3]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    ec6c:	239e      	movs	r3, #158	; 0x9e
    ec6e:	18fb      	adds	r3, r7, r3
    ec70:	781a      	ldrb	r2, [r3, #0]
    ec72:	239d      	movs	r3, #157	; 0x9d
    ec74:	18fb      	adds	r3, r7, r3
    ec76:	781b      	ldrb	r3, [r3, #0]
    ec78:	18d3      	adds	r3, r2, r3
    ec7a:	2b3f      	cmp	r3, #63	; 0x3f
    ec7c:	dd14      	ble.n	eca8 <SearchAvailableChannel1+0x288>
						{
								/* The channel falls under 500KHz range. So need to calculate sub-band correctly */
								/* Sub-band values are stored in range of 1-8. So adding 1 to the index */
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    ec7e:	239b      	movs	r3, #155	; 0x9b
    ec80:	18fb      	adds	r3, r7, r3
    ec82:	781b      	ldrb	r3, [r3, #0]
    ec84:	229e      	movs	r2, #158	; 0x9e
    ec86:	18b9      	adds	r1, r7, r2
    ec88:	229d      	movs	r2, #157	; 0x9d
    ec8a:	18ba      	adds	r2, r7, r2
    ec8c:	7809      	ldrb	r1, [r1, #0]
    ec8e:	7812      	ldrb	r2, [r2, #0]
    ec90:	188a      	adds	r2, r1, r2
    ec92:	b2d2      	uxtb	r2, r2
    ec94:	3a3f      	subs	r2, #63	; 0x3f
    ec96:	b2d1      	uxtb	r1, r2
    ec98:	2208      	movs	r2, #8
    ec9a:	18ba      	adds	r2, r7, r2
    ec9c:	005b      	lsls	r3, r3, #1
    ec9e:	18d3      	adds	r3, r2, r3
    eca0:	3301      	adds	r3, #1
    eca2:	1c0a      	adds	r2, r1, #0
    eca4:	701a      	strb	r2, [r3, #0]
    eca6:	e00e      	b.n	ecc6 <SearchAvailableChannel1+0x2a6>
						}
						else
						{
								/* Channel is in the range of 0-63 125Khz range, Store the k value as sub-band */
								/* Sub-band values are stored in range of 1-8. So adding 1 to the index */
								ChList[num][1] = k + 1;    
    eca8:	239b      	movs	r3, #155	; 0x9b
    ecaa:	18fb      	adds	r3, r7, r3
    ecac:	781b      	ldrb	r3, [r3, #0]
    ecae:	229c      	movs	r2, #156	; 0x9c
    ecb0:	18ba      	adds	r2, r7, r2
    ecb2:	7812      	ldrb	r2, [r2, #0]
    ecb4:	3201      	adds	r2, #1
    ecb6:	b2d1      	uxtb	r1, r2
    ecb8:	2208      	movs	r2, #8
    ecba:	18ba      	adds	r2, r7, r2
    ecbc:	005b      	lsls	r3, r3, #1
    ecbe:	18d3      	adds	r3, r2, r3
    ecc0:	3301      	adds	r3, #1
    ecc2:	1c0a      	adds	r2, r1, #0
    ecc4:	701a      	strb	r2, [r3, #0]
						}
						num++;
    ecc6:	239b      	movs	r3, #155	; 0x9b
    ecc8:	18fb      	adds	r3, r7, r3
    ecca:	781a      	ldrb	r2, [r3, #0]
    eccc:	239b      	movs	r3, #155	; 0x9b
    ecce:	18fb      	adds	r3, r7, r3
    ecd0:	3201      	adds	r2, #1
    ecd2:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    ecd4:	239d      	movs	r3, #157	; 0x9d
    ecd6:	18fb      	adds	r3, r7, r3
    ecd8:	781a      	ldrb	r2, [r3, #0]
    ecda:	239d      	movs	r3, #157	; 0x9d
    ecdc:	18fb      	adds	r3, r7, r3
    ecde:	3201      	adds	r2, #1
    ece0:	701a      	strb	r2, [r3, #0]
    ece2:	239d      	movs	r3, #157	; 0x9d
    ece4:	18fb      	adds	r3, r7, r3
    ece6:	781b      	ldrb	r3, [r3, #0]
    ece8:	2b07      	cmp	r3, #7
    ecea:	d800      	bhi.n	ecee <SearchAvailableChannel1+0x2ce>
    ecec:	e6f6      	b.n	eadc <SearchAvailableChannel1+0xbc>
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    ecee:	239e      	movs	r3, #158	; 0x9e
    ecf0:	18fb      	adds	r3, r7, r3
    ecf2:	229e      	movs	r2, #158	; 0x9e
    ecf4:	18ba      	adds	r2, r7, r2
    ecf6:	7812      	ldrb	r2, [r2, #0]
    ecf8:	3208      	adds	r2, #8
    ecfa:	701a      	strb	r2, [r3, #0]
    ecfc:	239c      	movs	r3, #156	; 0x9c
    ecfe:	18fb      	adds	r3, r7, r3
    ed00:	781a      	ldrb	r2, [r3, #0]
    ed02:	239c      	movs	r3, #156	; 0x9c
    ed04:	18fb      	adds	r3, r7, r3
    ed06:	3201      	adds	r2, #1
    ed08:	701a      	strb	r2, [r3, #0]
    ed0a:	239e      	movs	r3, #158	; 0x9e
    ed0c:	18fb      	adds	r3, r7, r3
    ed0e:	781b      	ldrb	r3, [r3, #0]
    ed10:	2b47      	cmp	r3, #71	; 0x47
    ed12:	d800      	bhi.n	ed16 <SearchAvailableChannel1+0x2f6>
    ed14:	e6dd      	b.n	ead2 <SearchAvailableChannel1+0xb2>
					}					
		}
	}
	/* Get a random number and select a channel */
	if(0 != num)
    ed16:	239b      	movs	r3, #155	; 0x9b
    ed18:	18fb      	adds	r3, r7, r3
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d039      	beq.n	ed94 <SearchAvailableChannel1+0x374>
	{
		randomNumber = rand() % num;
    ed20:	4b1a      	ldr	r3, [pc, #104]	; (ed8c <SearchAvailableChannel1+0x36c>)
    ed22:	4798      	blx	r3
    ed24:	239b      	movs	r3, #155	; 0x9b
    ed26:	18fb      	adds	r3, r7, r3
    ed28:	781a      	ldrb	r2, [r3, #0]
    ed2a:	4b19      	ldr	r3, [pc, #100]	; (ed90 <SearchAvailableChannel1+0x370>)
    ed2c:	0011      	movs	r1, r2
    ed2e:	4798      	blx	r3
    ed30:	000b      	movs	r3, r1
    ed32:	001a      	movs	r2, r3
    ed34:	239a      	movs	r3, #154	; 0x9a
    ed36:	18fb      	adds	r3, r7, r3
    ed38:	701a      	strb	r2, [r3, #0]
		*channelIndex = ChList[randomNumber][0];
    ed3a:	239a      	movs	r3, #154	; 0x9a
    ed3c:	18fb      	adds	r3, r7, r3
    ed3e:	781a      	ldrb	r2, [r3, #0]
    ed40:	2308      	movs	r3, #8
    ed42:	18fb      	adds	r3, r7, r3
    ed44:	0052      	lsls	r2, r2, #1
    ed46:	5cd2      	ldrb	r2, [r2, r3]
    ed48:	683b      	ldr	r3, [r7, #0]
    ed4a:	701a      	strb	r2, [r3, #0]
	#if (RANDOM_NW_ACQ == 1)          
		/* Update the lastUsedSB value based on the channel selected */
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    ed4c:	239a      	movs	r3, #154	; 0x9a
    ed4e:	18fb      	adds	r3, r7, r3
    ed50:	781b      	ldrb	r3, [r3, #0]
    ed52:	2208      	movs	r2, #8
    ed54:	18ba      	adds	r2, r7, r2
    ed56:	005b      	lsls	r3, r3, #1
    ed58:	18d3      	adds	r3, r2, r3
    ed5a:	3301      	adds	r3, #1
    ed5c:	7819      	ldrb	r1, [r3, #0]
    ed5e:	4a09      	ldr	r2, [pc, #36]	; (ed84 <SearchAvailableChannel1+0x364>)
    ed60:	23ac      	movs	r3, #172	; 0xac
    ed62:	005b      	lsls	r3, r3, #1
    ed64:	54d1      	strb	r1, [r2, r3]
		/* If the lastUsedSB value is 8, then it means roll over has to happen.
		* So changing the value to 1
		*/
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    ed66:	4a07      	ldr	r2, [pc, #28]	; (ed84 <SearchAvailableChannel1+0x364>)
    ed68:	23ac      	movs	r3, #172	; 0xac
    ed6a:	005b      	lsls	r3, r3, #1
    ed6c:	5cd3      	ldrb	r3, [r2, r3]
    ed6e:	2b07      	cmp	r3, #7
    ed70:	d960      	bls.n	ee34 <SearchAvailableChannel1+0x414>
		{
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    ed72:	4a04      	ldr	r2, [pc, #16]	; (ed84 <SearchAvailableChannel1+0x364>)
    ed74:	23ac      	movs	r3, #172	; 0xac
    ed76:	005b      	lsls	r3, r3, #1
    ed78:	2100      	movs	r1, #0
    ed7a:	54d1      	strb	r1, [r2, r3]
    ed7c:	e05a      	b.n	ee34 <SearchAvailableChannel1+0x414>
    ed7e:	46c0      	nop			; (mov r8, r8)
    ed80:	000241cd 	.word	0x000241cd
    ed84:	200014a8 	.word	0x200014a8
    ed88:	00015a89 	.word	0x00015a89
    ed8c:	0002434d 	.word	0x0002434d
    ed90:	00021349 	.word	0x00021349
		}
	#endif 
	}
	else
	{
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    ed94:	4b2b      	ldr	r3, [pc, #172]	; (ee44 <SearchAvailableChannel1+0x424>)
    ed96:	791a      	ldrb	r2, [r3, #4]
    ed98:	7959      	ldrb	r1, [r3, #5]
    ed9a:	0209      	lsls	r1, r1, #8
    ed9c:	430a      	orrs	r2, r1
    ed9e:	7999      	ldrb	r1, [r3, #6]
    eda0:	0409      	lsls	r1, r1, #16
    eda2:	430a      	orrs	r2, r1
    eda4:	79db      	ldrb	r3, [r3, #7]
    eda6:	061b      	lsls	r3, r3, #24
    eda8:	4313      	orrs	r3, r2
    edaa:	0019      	movs	r1, r3
    edac:	4b25      	ldr	r3, [pc, #148]	; (ee44 <SearchAvailableChannel1+0x424>)
    edae:	2230      	movs	r2, #48	; 0x30
    edb0:	5c9b      	ldrb	r3, [r3, r2]
    edb2:	005b      	lsls	r3, r3, #1
    edb4:	18cb      	adds	r3, r1, r3
    edb6:	781b      	ldrb	r3, [r3, #0]
    edb8:	2b00      	cmp	r3, #0
    edba:	d037      	beq.n	ee2c <SearchAvailableChannel1+0x40c>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    edbc:	1d7b      	adds	r3, r7, #5
    edbe:	781a      	ldrb	r2, [r3, #0]
    edc0:	4b20      	ldr	r3, [pc, #128]	; (ee44 <SearchAvailableChannel1+0x424>)
    edc2:	7919      	ldrb	r1, [r3, #4]
    edc4:	7958      	ldrb	r0, [r3, #5]
    edc6:	0200      	lsls	r0, r0, #8
    edc8:	4301      	orrs	r1, r0
    edca:	7998      	ldrb	r0, [r3, #6]
    edcc:	0400      	lsls	r0, r0, #16
    edce:	4301      	orrs	r1, r0
    edd0:	79db      	ldrb	r3, [r3, #7]
    edd2:	061b      	lsls	r3, r3, #24
    edd4:	430b      	orrs	r3, r1
    edd6:	0018      	movs	r0, r3
    edd8:	4b1a      	ldr	r3, [pc, #104]	; (ee44 <SearchAvailableChannel1+0x424>)
    edda:	2130      	movs	r1, #48	; 0x30
    eddc:	5c5b      	ldrb	r3, [r3, r1]
    edde:	005b      	lsls	r3, r3, #1
    ede0:	18c3      	adds	r3, r0, r3
    ede2:	785b      	ldrb	r3, [r3, #1]
    ede4:	071b      	lsls	r3, r3, #28
    ede6:	0f1b      	lsrs	r3, r3, #28
    ede8:	b2db      	uxtb	r3, r3
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    edea:	429a      	cmp	r2, r3
    edec:	db1e      	blt.n	ee2c <SearchAvailableChannel1+0x40c>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    edee:	1d7b      	adds	r3, r7, #5
    edf0:	781a      	ldrb	r2, [r3, #0]
    edf2:	4b14      	ldr	r3, [pc, #80]	; (ee44 <SearchAvailableChannel1+0x424>)
    edf4:	7919      	ldrb	r1, [r3, #4]
    edf6:	7958      	ldrb	r0, [r3, #5]
    edf8:	0200      	lsls	r0, r0, #8
    edfa:	4301      	orrs	r1, r0
    edfc:	7998      	ldrb	r0, [r3, #6]
    edfe:	0400      	lsls	r0, r0, #16
    ee00:	4301      	orrs	r1, r0
    ee02:	79db      	ldrb	r3, [r3, #7]
    ee04:	061b      	lsls	r3, r3, #24
    ee06:	430b      	orrs	r3, r1
    ee08:	0018      	movs	r0, r3
    ee0a:	4b0e      	ldr	r3, [pc, #56]	; (ee44 <SearchAvailableChannel1+0x424>)
    ee0c:	2130      	movs	r1, #48	; 0x30
    ee0e:	5c5b      	ldrb	r3, [r3, r1]
    ee10:	005b      	lsls	r3, r3, #1
    ee12:	18c3      	adds	r3, r0, r3
    ee14:	785b      	ldrb	r3, [r3, #1]
    ee16:	061b      	lsls	r3, r3, #24
    ee18:	0f1b      	lsrs	r3, r3, #28
    ee1a:	b2db      	uxtb	r3, r3
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    ee1c:	429a      	cmp	r2, r3
    ee1e:	dc05      	bgt.n	ee2c <SearchAvailableChannel1+0x40c>
		{
			*channelIndex = RegParams.lastUsedChannelIndex;
    ee20:	4b08      	ldr	r3, [pc, #32]	; (ee44 <SearchAvailableChannel1+0x424>)
    ee22:	2230      	movs	r2, #48	; 0x30
    ee24:	5c9a      	ldrb	r2, [r3, r2]
    ee26:	683b      	ldr	r3, [r7, #0]
    ee28:	701a      	strb	r2, [r3, #0]
    ee2a:	e003      	b.n	ee34 <SearchAvailableChannel1+0x414>
		}
		else
		{
			result = LORAWAN_NO_CHANNELS_FOUND;
    ee2c:	239f      	movs	r3, #159	; 0x9f
    ee2e:	18fb      	adds	r3, r7, r3
    ee30:	2210      	movs	r2, #16
    ee32:	701a      	strb	r2, [r3, #0]
		}

	}
	return result;	
    ee34:	239f      	movs	r3, #159	; 0x9f
    ee36:	18fb      	adds	r3, r7, r3
    ee38:	781b      	ldrb	r3, [r3, #0]
}
    ee3a:	0018      	movs	r0, r3
    ee3c:	46bd      	mov	sp, r7
    ee3e:	b029      	add	sp, #164	; 0xa4
    ee40:	bd90      	pop	{r4, r7, pc}
    ee42:	46c0      	nop			; (mov r8, r8)
    ee44:	200014a8 	.word	0x200014a8

0000ee48 <SearchAvailableChannel2>:
 *	LORAWAN_NO_CHANNELS_FOUND if No free channel is available
 */
//Pass current data rate into this function
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t SearchAvailableChannel2 (uint8_t maxChannels, bool transmissionType,uint8_t currDr, uint8_t* channelIndex)
{
    ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee4a:	b08f      	sub	sp, #60	; 0x3c
    ee4c:	af00      	add	r7, sp, #0
    ee4e:	0006      	movs	r6, r0
    ee50:	0008      	movs	r0, r1
    ee52:	0011      	movs	r1, r2
    ee54:	623b      	str	r3, [r7, #32]
    ee56:	2327      	movs	r3, #39	; 0x27
    ee58:	18fb      	adds	r3, r7, r3
    ee5a:	1c32      	adds	r2, r6, #0
    ee5c:	701a      	strb	r2, [r3, #0]
    ee5e:	2326      	movs	r3, #38	; 0x26
    ee60:	18fb      	adds	r3, r7, r3
    ee62:	1c02      	adds	r2, r0, #0
    ee64:	701a      	strb	r2, [r3, #0]
    ee66:	2325      	movs	r3, #37	; 0x25
    ee68:	18fb      	adds	r3, r7, r3
    ee6a:	1c0a      	adds	r2, r1, #0
    ee6c:	701a      	strb	r2, [r3, #0]
    ee6e:	466b      	mov	r3, sp
    ee70:	607b      	str	r3, [r7, #4]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ee72:	2317      	movs	r3, #23
    ee74:	2220      	movs	r2, #32
    ee76:	4694      	mov	ip, r2
    ee78:	44bc      	add	ip, r7
    ee7a:	4463      	add	r3, ip
    ee7c:	2208      	movs	r2, #8
    ee7e:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
    ee80:	2316      	movs	r3, #22
    ee82:	2220      	movs	r2, #32
    ee84:	4694      	mov	ip, r2
    ee86:	44bc      	add	ip, r7
    ee88:	4463      	add	r3, ip
    ee8a:	2200      	movs	r2, #0
    ee8c:	701a      	strb	r2, [r3, #0]
	uint8_t num = 0;
    ee8e:	2315      	movs	r3, #21
    ee90:	2220      	movs	r2, #32
    ee92:	4694      	mov	ip, r2
    ee94:	44bc      	add	ip, r7
    ee96:	4463      	add	r3, ip
    ee98:	2200      	movs	r2, #0
    ee9a:	701a      	strb	r2, [r3, #0]
	uint8_t ChList[maxChannels];
    ee9c:	2327      	movs	r3, #39	; 0x27
    ee9e:	18fb      	adds	r3, r7, r3
    eea0:	781b      	ldrb	r3, [r3, #0]
    eea2:	001a      	movs	r2, r3
    eea4:	3a01      	subs	r2, #1
    eea6:	633a      	str	r2, [r7, #48]	; 0x30
    eea8:	613b      	str	r3, [r7, #16]
    eeaa:	2200      	movs	r2, #0
    eeac:	617a      	str	r2, [r7, #20]
    eeae:	6938      	ldr	r0, [r7, #16]
    eeb0:	6979      	ldr	r1, [r7, #20]
    eeb2:	0002      	movs	r2, r0
    eeb4:	0f52      	lsrs	r2, r2, #29
    eeb6:	000e      	movs	r6, r1
    eeb8:	00f6      	lsls	r6, r6, #3
    eeba:	61fe      	str	r6, [r7, #28]
    eebc:	69fe      	ldr	r6, [r7, #28]
    eebe:	4316      	orrs	r6, r2
    eec0:	61fe      	str	r6, [r7, #28]
    eec2:	0002      	movs	r2, r0
    eec4:	00d2      	lsls	r2, r2, #3
    eec6:	61ba      	str	r2, [r7, #24]
    eec8:	60bb      	str	r3, [r7, #8]
    eeca:	2200      	movs	r2, #0
    eecc:	60fa      	str	r2, [r7, #12]
    eece:	68b8      	ldr	r0, [r7, #8]
    eed0:	68f9      	ldr	r1, [r7, #12]
    eed2:	0002      	movs	r2, r0
    eed4:	0f52      	lsrs	r2, r2, #29
    eed6:	000e      	movs	r6, r1
    eed8:	00f5      	lsls	r5, r6, #3
    eeda:	4315      	orrs	r5, r2
    eedc:	0002      	movs	r2, r0
    eede:	00d4      	lsls	r4, r2, #3
    eee0:	001a      	movs	r2, r3
    eee2:	3207      	adds	r2, #7
    eee4:	08d2      	lsrs	r2, r2, #3
    eee6:	00d2      	lsls	r2, r2, #3
    eee8:	4669      	mov	r1, sp
    eeea:	1a8a      	subs	r2, r1, r2
    eeec:	4695      	mov	sp, r2
    eeee:	466a      	mov	r2, sp
    eef0:	3200      	adds	r2, #0
    eef2:	62fa      	str	r2, [r7, #44]	; 0x2c
	uint8_t randomNumber = 0;
    eef4:	220b      	movs	r2, #11
    eef6:	2120      	movs	r1, #32
    eef8:	468c      	mov	ip, r1
    eefa:	44bc      	add	ip, r7
    eefc:	4462      	add	r2, ip
    eefe:	2100      	movs	r1, #0
    ef00:	7011      	strb	r1, [r2, #0]
	memset(ChList, 0, sizeof(ChList));
    ef02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ef04:	001a      	movs	r2, r3
    ef06:	2100      	movs	r1, #0
    ef08:	4bba      	ldr	r3, [pc, #744]	; (f1f4 <SearchAvailableChannel2+0x3ac>)
    ef0a:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    ef0c:	4bba      	ldr	r3, [pc, #744]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    ef0e:	222f      	movs	r2, #47	; 0x2f
    ef10:	5c9b      	ldrb	r3, [r3, r2]
    ef12:	001a      	movs	r2, r3
    ef14:	4bb9      	ldr	r3, [pc, #740]	; (f1fc <SearchAvailableChannel2+0x3b4>)
    ef16:	4113      	asrs	r3, r2
    ef18:	2201      	movs	r2, #1
    ef1a:	401a      	ands	r2, r3
    ef1c:	230a      	movs	r3, #10
    ef1e:	2120      	movs	r1, #32
    ef20:	468c      	mov	ip, r1
    ef22:	44bc      	add	ip, r7
    ef24:	4463      	add	r3, ip
    ef26:	4251      	negs	r1, r2
    ef28:	414a      	adcs	r2, r1
    ef2a:	701a      	strb	r2, [r3, #0]
	
    if(transmissionType == false)
    ef2c:	2326      	movs	r3, #38	; 0x26
    ef2e:	18fb      	adds	r3, r7, r3
    ef30:	781b      	ldrb	r3, [r3, #0]
    ef32:	2201      	movs	r2, #1
    ef34:	4053      	eors	r3, r2
    ef36:	b2db      	uxtb	r3, r3
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d019      	beq.n	ef70 <SearchAvailableChannel2+0x128>
    {
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    ef3c:	4bae      	ldr	r3, [pc, #696]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    ef3e:	2220      	movs	r2, #32
    ef40:	5c9b      	ldrb	r3, [r3, r2]
    ef42:	001a      	movs	r2, r3
    ef44:	2320      	movs	r3, #32
    ef46:	4013      	ands	r3, r2
    ef48:	d028      	beq.n	ef9c <SearchAvailableChannel2+0x154>
	    {
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    ef4a:	4bab      	ldr	r3, [pc, #684]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    ef4c:	7d1a      	ldrb	r2, [r3, #20]
    ef4e:	7d59      	ldrb	r1, [r3, #21]
    ef50:	0209      	lsls	r1, r1, #8
    ef52:	430a      	orrs	r2, r1
    ef54:	7d99      	ldrb	r1, [r3, #22]
    ef56:	0409      	lsls	r1, r1, #16
    ef58:	430a      	orrs	r2, r1
    ef5a:	7ddb      	ldrb	r3, [r3, #23]
    ef5c:	061b      	lsls	r3, r3, #24
    ef5e:	4313      	orrs	r3, r2
    ef60:	7a1b      	ldrb	r3, [r3, #8]
    ef62:	0018      	movs	r0, r3
    ef64:	4ba6      	ldr	r3, [pc, #664]	; (f200 <SearchAvailableChannel2+0x3b8>)
    ef66:	4798      	blx	r3
    ef68:	1e03      	subs	r3, r0, #0
    ef6a:	d017      	beq.n	ef9c <SearchAvailableChannel2+0x154>
		    {
			    return LORAWAN_NO_CHANNELS_FOUND;
    ef6c:	2310      	movs	r3, #16
    ef6e:	e13b      	b.n	f1e8 <SearchAvailableChannel2+0x3a0>
		    }
	    }
    }
    else
    {
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    ef70:	4ba1      	ldr	r3, [pc, #644]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    ef72:	22dd      	movs	r2, #221	; 0xdd
    ef74:	0052      	lsls	r2, r2, #1
    ef76:	5c9a      	ldrb	r2, [r3, r2]
    ef78:	21bc      	movs	r1, #188	; 0xbc
    ef7a:	31ff      	adds	r1, #255	; 0xff
    ef7c:	5c59      	ldrb	r1, [r3, r1]
    ef7e:	0209      	lsls	r1, r1, #8
    ef80:	430a      	orrs	r2, r1
    ef82:	21de      	movs	r1, #222	; 0xde
    ef84:	0049      	lsls	r1, r1, #1
    ef86:	5c59      	ldrb	r1, [r3, r1]
    ef88:	0409      	lsls	r1, r1, #16
    ef8a:	430a      	orrs	r2, r1
    ef8c:	21be      	movs	r1, #190	; 0xbe
    ef8e:	31ff      	adds	r1, #255	; 0xff
    ef90:	5c5b      	ldrb	r3, [r3, r1]
    ef92:	061b      	lsls	r3, r3, #24
    ef94:	4313      	orrs	r3, r2
    ef96:	d001      	beq.n	ef9c <SearchAvailableChannel2+0x154>
	    {
		    return LORAWAN_NO_CHANNELS_FOUND;
    ef98:	2310      	movs	r3, #16
    ef9a:	e125      	b.n	f1e8 <SearchAvailableChannel2+0x3a0>
	    }
    }
	
	for (i = 0; i < maxChannels; i++)
    ef9c:	2316      	movs	r3, #22
    ef9e:	2220      	movs	r2, #32
    efa0:	4694      	mov	ip, r2
    efa2:	44bc      	add	ip, r7
    efa4:	4463      	add	r3, ip
    efa6:	2200      	movs	r2, #0
    efa8:	701a      	strb	r2, [r3, #0]
    efaa:	e0df      	b.n	f16c <SearchAvailableChannel2+0x324>
	{
			if ((RegParams.pChParams[i].status == ENABLED) &&
    efac:	4b92      	ldr	r3, [pc, #584]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    efae:	791a      	ldrb	r2, [r3, #4]
    efb0:	7959      	ldrb	r1, [r3, #5]
    efb2:	0209      	lsls	r1, r1, #8
    efb4:	430a      	orrs	r2, r1
    efb6:	7999      	ldrb	r1, [r3, #6]
    efb8:	0409      	lsls	r1, r1, #16
    efba:	430a      	orrs	r2, r1
    efbc:	79db      	ldrb	r3, [r3, #7]
    efbe:	061b      	lsls	r3, r3, #24
    efc0:	4313      	orrs	r3, r2
    efc2:	001a      	movs	r2, r3
    efc4:	2316      	movs	r3, #22
    efc6:	2120      	movs	r1, #32
    efc8:	468c      	mov	ip, r1
    efca:	44bc      	add	ip, r7
    efcc:	4463      	add	r3, ip
    efce:	781b      	ldrb	r3, [r3, #0]
    efd0:	005b      	lsls	r3, r3, #1
    efd2:	18d3      	adds	r3, r2, r3
    efd4:	781b      	ldrb	r3, [r3, #0]
    efd6:	2b00      	cmp	r3, #0
    efd8:	d100      	bne.n	efdc <SearchAvailableChannel2+0x194>
    efda:	e0ba      	b.n	f152 <SearchAvailableChannel2+0x30a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    efdc:	2325      	movs	r3, #37	; 0x25
    efde:	18fb      	adds	r3, r7, r3
    efe0:	781a      	ldrb	r2, [r3, #0]
    efe2:	4b85      	ldr	r3, [pc, #532]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    efe4:	7919      	ldrb	r1, [r3, #4]
    efe6:	7958      	ldrb	r0, [r3, #5]
    efe8:	0200      	lsls	r0, r0, #8
    efea:	4301      	orrs	r1, r0
    efec:	7998      	ldrb	r0, [r3, #6]
    efee:	0400      	lsls	r0, r0, #16
    eff0:	4301      	orrs	r1, r0
    eff2:	79db      	ldrb	r3, [r3, #7]
    eff4:	061b      	lsls	r3, r3, #24
    eff6:	430b      	orrs	r3, r1
    eff8:	0019      	movs	r1, r3
    effa:	2316      	movs	r3, #22
    effc:	2020      	movs	r0, #32
    effe:	4684      	mov	ip, r0
    f000:	44bc      	add	ip, r7
    f002:	4463      	add	r3, ip
    f004:	781b      	ldrb	r3, [r3, #0]
    f006:	005b      	lsls	r3, r3, #1
    f008:	18cb      	adds	r3, r1, r3
    f00a:	785b      	ldrb	r3, [r3, #1]
    f00c:	071b      	lsls	r3, r3, #28
    f00e:	0f1b      	lsrs	r3, r3, #28
    f010:	b2db      	uxtb	r3, r3
			if ((RegParams.pChParams[i].status == ENABLED) &&
    f012:	429a      	cmp	r2, r3
    f014:	da00      	bge.n	f018 <SearchAvailableChannel2+0x1d0>
    f016:	e09c      	b.n	f152 <SearchAvailableChannel2+0x30a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    f018:	2325      	movs	r3, #37	; 0x25
    f01a:	18fb      	adds	r3, r7, r3
    f01c:	781a      	ldrb	r2, [r3, #0]
    f01e:	4b76      	ldr	r3, [pc, #472]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    f020:	7919      	ldrb	r1, [r3, #4]
    f022:	7958      	ldrb	r0, [r3, #5]
    f024:	0200      	lsls	r0, r0, #8
    f026:	4301      	orrs	r1, r0
    f028:	7998      	ldrb	r0, [r3, #6]
    f02a:	0400      	lsls	r0, r0, #16
    f02c:	4301      	orrs	r1, r0
    f02e:	79db      	ldrb	r3, [r3, #7]
    f030:	061b      	lsls	r3, r3, #24
    f032:	430b      	orrs	r3, r1
    f034:	0019      	movs	r1, r3
    f036:	2316      	movs	r3, #22
    f038:	2020      	movs	r0, #32
    f03a:	4684      	mov	ip, r0
    f03c:	44bc      	add	ip, r7
    f03e:	4463      	add	r3, ip
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	005b      	lsls	r3, r3, #1
    f044:	18cb      	adds	r3, r1, r3
    f046:	785b      	ldrb	r3, [r3, #1]
    f048:	061b      	lsls	r3, r3, #24
    f04a:	0f1b      	lsrs	r3, r3, #28
    f04c:	b2db      	uxtb	r3, r3
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    f04e:	429a      	cmp	r2, r3
    f050:	dd00      	ble.n	f054 <SearchAvailableChannel2+0x20c>
    f052:	e07e      	b.n	f152 <SearchAvailableChannel2+0x30a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    f054:	230a      	movs	r3, #10
    f056:	2220      	movs	r2, #32
    f058:	4694      	mov	ip, r2
    f05a:	44bc      	add	ip, r7
    f05c:	4463      	add	r3, ip
    f05e:	781b      	ldrb	r3, [r3, #0]
    f060:	2b00      	cmp	r3, #0
    f062:	d134      	bne.n	f0ce <SearchAvailableChannel2+0x286>

				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    f064:	4b64      	ldr	r3, [pc, #400]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    f066:	7b1a      	ldrb	r2, [r3, #12]
    f068:	7b59      	ldrb	r1, [r3, #13]
    f06a:	0209      	lsls	r1, r1, #8
    f06c:	430a      	orrs	r2, r1
    f06e:	7b99      	ldrb	r1, [r3, #14]
    f070:	0409      	lsls	r1, r1, #16
    f072:	430a      	orrs	r2, r1
    f074:	7bdb      	ldrb	r3, [r3, #15]
    f076:	061b      	lsls	r3, r3, #24
    f078:	4313      	orrs	r3, r2
    f07a:	0018      	movs	r0, r3
    f07c:	4b5e      	ldr	r3, [pc, #376]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    f07e:	7a1a      	ldrb	r2, [r3, #8]
    f080:	7a59      	ldrb	r1, [r3, #9]
    f082:	0209      	lsls	r1, r1, #8
    f084:	430a      	orrs	r2, r1
    f086:	7a99      	ldrb	r1, [r3, #10]
    f088:	0409      	lsls	r1, r1, #16
    f08a:	430a      	orrs	r2, r1
    f08c:	7adb      	ldrb	r3, [r3, #11]
    f08e:	061b      	lsls	r3, r3, #24
    f090:	4313      	orrs	r3, r2
    f092:	0019      	movs	r1, r3
    f094:	2316      	movs	r3, #22
    f096:	2220      	movs	r2, #32
    f098:	4694      	mov	ip, r2
    f09a:	44bc      	add	ip, r7
    f09c:	4463      	add	r3, ip
    f09e:	781a      	ldrb	r2, [r3, #0]
    f0a0:	0013      	movs	r3, r2
    f0a2:	005b      	lsls	r3, r3, #1
    f0a4:	189b      	adds	r3, r3, r2
    f0a6:	009b      	lsls	r3, r3, #2
    f0a8:	18cb      	adds	r3, r1, r3
    f0aa:	7a1b      	ldrb	r3, [r3, #8]
    f0ac:	001a      	movs	r2, r3
    f0ae:	0013      	movs	r3, r2
    f0b0:	005b      	lsls	r3, r3, #1
    f0b2:	189b      	adds	r3, r3, r2
    f0b4:	009b      	lsls	r3, r3, #2
    f0b6:	18c3      	adds	r3, r0, r3
    f0b8:	7a1a      	ldrb	r2, [r3, #8]
    f0ba:	7a59      	ldrb	r1, [r3, #9]
    f0bc:	0209      	lsls	r1, r1, #8
    f0be:	430a      	orrs	r2, r1
    f0c0:	7a99      	ldrb	r1, [r3, #10]
    f0c2:	0409      	lsls	r1, r1, #16
    f0c4:	430a      	orrs	r2, r1
    f0c6:	7adb      	ldrb	r3, [r3, #11]
    f0c8:	061b      	lsls	r3, r3, #24
    f0ca:	4313      	orrs	r3, r2
    f0cc:	d141      	bne.n	f152 <SearchAvailableChannel2+0x30a>
			{
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    f0ce:	2326      	movs	r3, #38	; 0x26
    f0d0:	18fb      	adds	r3, r7, r3
    f0d2:	781b      	ldrb	r3, [r3, #0]
    f0d4:	2201      	movs	r2, #1
    f0d6:	4053      	eors	r3, r2
    f0d8:	b2db      	uxtb	r3, r3
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d019      	beq.n	f112 <SearchAvailableChannel2+0x2ca>
    f0de:	4b46      	ldr	r3, [pc, #280]	; (f1f8 <SearchAvailableChannel2+0x3b0>)
    f0e0:	7a1a      	ldrb	r2, [r3, #8]
    f0e2:	7a59      	ldrb	r1, [r3, #9]
    f0e4:	0209      	lsls	r1, r1, #8
    f0e6:	430a      	orrs	r2, r1
    f0e8:	7a99      	ldrb	r1, [r3, #10]
    f0ea:	0409      	lsls	r1, r1, #16
    f0ec:	430a      	orrs	r2, r1
    f0ee:	7adb      	ldrb	r3, [r3, #11]
    f0f0:	061b      	lsls	r3, r3, #24
    f0f2:	4313      	orrs	r3, r2
    f0f4:	0019      	movs	r1, r3
    f0f6:	2316      	movs	r3, #22
    f0f8:	2220      	movs	r2, #32
    f0fa:	4694      	mov	ip, r2
    f0fc:	44bc      	add	ip, r7
    f0fe:	4463      	add	r3, ip
    f100:	781a      	ldrb	r2, [r3, #0]
    f102:	0013      	movs	r3, r2
    f104:	005b      	lsls	r3, r3, #1
    f106:	189b      	adds	r3, r3, r2
    f108:	009b      	lsls	r3, r3, #2
    f10a:	18cb      	adds	r3, r1, r3
    f10c:	7a5b      	ldrb	r3, [r3, #9]
    f10e:	2b00      	cmp	r3, #0
    f110:	d104      	bne.n	f11c <SearchAvailableChannel2+0x2d4>
    f112:	2326      	movs	r3, #38	; 0x26
    f114:	18fb      	adds	r3, r7, r3
    f116:	781b      	ldrb	r3, [r3, #0]
    f118:	2b00      	cmp	r3, #0
    f11a:	d01a      	beq.n	f152 <SearchAvailableChannel2+0x30a>
				{
					ChList[num] = i;
    f11c:	2315      	movs	r3, #21
    f11e:	2220      	movs	r2, #32
    f120:	4694      	mov	ip, r2
    f122:	44bc      	add	ip, r7
    f124:	4463      	add	r3, ip
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    f12a:	2116      	movs	r1, #22
    f12c:	2020      	movs	r0, #32
    f12e:	4684      	mov	ip, r0
    f130:	44bc      	add	ip, r7
    f132:	4461      	add	r1, ip
    f134:	7809      	ldrb	r1, [r1, #0]
    f136:	54d1      	strb	r1, [r2, r3]
					num++;
    f138:	2315      	movs	r3, #21
    f13a:	2220      	movs	r2, #32
    f13c:	4694      	mov	ip, r2
    f13e:	44bc      	add	ip, r7
    f140:	4463      	add	r3, ip
    f142:	781a      	ldrb	r2, [r3, #0]
    f144:	2315      	movs	r3, #21
    f146:	2120      	movs	r1, #32
    f148:	468c      	mov	ip, r1
    f14a:	44bc      	add	ip, r7
    f14c:	4463      	add	r3, ip
    f14e:	3201      	adds	r2, #1
    f150:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < maxChannels; i++)
    f152:	2316      	movs	r3, #22
    f154:	2220      	movs	r2, #32
    f156:	4694      	mov	ip, r2
    f158:	44bc      	add	ip, r7
    f15a:	4463      	add	r3, ip
    f15c:	781a      	ldrb	r2, [r3, #0]
    f15e:	2316      	movs	r3, #22
    f160:	2120      	movs	r1, #32
    f162:	468c      	mov	ip, r1
    f164:	44bc      	add	ip, r7
    f166:	4463      	add	r3, ip
    f168:	3201      	adds	r2, #1
    f16a:	701a      	strb	r2, [r3, #0]
    f16c:	2316      	movs	r3, #22
    f16e:	2220      	movs	r2, #32
    f170:	18ba      	adds	r2, r7, r2
    f172:	18d2      	adds	r2, r2, r3
    f174:	2327      	movs	r3, #39	; 0x27
    f176:	18fb      	adds	r3, r7, r3
    f178:	7812      	ldrb	r2, [r2, #0]
    f17a:	781b      	ldrb	r3, [r3, #0]
    f17c:	429a      	cmp	r2, r3
    f17e:	d200      	bcs.n	f182 <SearchAvailableChannel2+0x33a>
    f180:	e714      	b.n	efac <SearchAvailableChannel2+0x164>
				}
				
				
			}
	}
	if(0 != num)
    f182:	2315      	movs	r3, #21
    f184:	2220      	movs	r2, #32
    f186:	4694      	mov	ip, r2
    f188:	44bc      	add	ip, r7
    f18a:	4463      	add	r3, ip
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	2b00      	cmp	r3, #0
    f190:	d01d      	beq.n	f1ce <SearchAvailableChannel2+0x386>
	{
		randomNumber = rand() % num;
    f192:	4b1c      	ldr	r3, [pc, #112]	; (f204 <SearchAvailableChannel2+0x3bc>)
    f194:	4798      	blx	r3
    f196:	2315      	movs	r3, #21
    f198:	2220      	movs	r2, #32
    f19a:	4694      	mov	ip, r2
    f19c:	44bc      	add	ip, r7
    f19e:	4463      	add	r3, ip
    f1a0:	781a      	ldrb	r2, [r3, #0]
    f1a2:	4b19      	ldr	r3, [pc, #100]	; (f208 <SearchAvailableChannel2+0x3c0>)
    f1a4:	0011      	movs	r1, r2
    f1a6:	4798      	blx	r3
    f1a8:	000b      	movs	r3, r1
    f1aa:	001a      	movs	r2, r3
    f1ac:	230b      	movs	r3, #11
    f1ae:	2120      	movs	r1, #32
    f1b0:	468c      	mov	ip, r1
    f1b2:	44bc      	add	ip, r7
    f1b4:	4463      	add	r3, ip
    f1b6:	701a      	strb	r2, [r3, #0]
		*channelIndex = ChList[randomNumber];
    f1b8:	230b      	movs	r3, #11
    f1ba:	2220      	movs	r2, #32
    f1bc:	4694      	mov	ip, r2
    f1be:	44bc      	add	ip, r7
    f1c0:	4463      	add	r3, ip
    f1c2:	781b      	ldrb	r3, [r3, #0]
    f1c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    f1c6:	5cd2      	ldrb	r2, [r2, r3]
    f1c8:	6a3b      	ldr	r3, [r7, #32]
    f1ca:	701a      	strb	r2, [r3, #0]
    f1cc:	e006      	b.n	f1dc <SearchAvailableChannel2+0x394>
	}
	else
	{
		result = LORAWAN_NO_CHANNELS_FOUND;
    f1ce:	2317      	movs	r3, #23
    f1d0:	2220      	movs	r2, #32
    f1d2:	4694      	mov	ip, r2
    f1d4:	44bc      	add	ip, r7
    f1d6:	4463      	add	r3, ip
    f1d8:	2210      	movs	r2, #16
    f1da:	701a      	strb	r2, [r3, #0]
	}
	return result;
    f1dc:	2317      	movs	r3, #23
    f1de:	2220      	movs	r2, #32
    f1e0:	4694      	mov	ip, r2
    f1e2:	44bc      	add	ip, r7
    f1e4:	4463      	add	r3, ip
    f1e6:	781b      	ldrb	r3, [r3, #0]
    f1e8:	687a      	ldr	r2, [r7, #4]
    f1ea:	4695      	mov	sp, r2
}
    f1ec:	0018      	movs	r0, r3
    f1ee:	46bd      	mov	sp, r7
    f1f0:	b00f      	add	sp, #60	; 0x3c
    f1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1f4:	000241cd 	.word	0x000241cd
    f1f8:	200014a8 	.word	0x200014a8
    f1fc:	00007fe3 	.word	0x00007fe3
    f200:	00015a89 	.word	0x00015a89
    f204:	0002434d 	.word	0x0002434d
    f208:	00021349 	.word	0x00021349

0000f20c <ValidateChannelMask>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the channelMask is invalid
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
    f20c:	b580      	push	{r7, lr}
    f20e:	b082      	sub	sp, #8
    f210:	af00      	add	r7, sp, #0
    f212:	0002      	movs	r2, r0
    f214:	6039      	str	r1, [r7, #0]
    f216:	1dfb      	adds	r3, r7, #7
    f218:	701a      	strb	r2, [r3, #0]
	return LORAWAN_SUCCESS;	
    f21a:	2308      	movs	r3, #8
}
    f21c:	0018      	movs	r0, r3
    f21e:	46bd      	mov	sp, r7
    f220:	b002      	add	sp, #8
    f222:	bd80      	pop	{r7, pc}

0000f224 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    f224:	b580      	push	{r7, lr}
    f226:	b084      	sub	sp, #16
    f228:	af00      	add	r7, sp, #0
    f22a:	0002      	movs	r2, r0
    f22c:	6039      	str	r1, [r7, #0]
    f22e:	1dfb      	adds	r3, r7, #7
    f230:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    f232:	230c      	movs	r3, #12
    f234:	18fb      	adds	r3, r7, r3
    f236:	2208      	movs	r2, #8
    f238:	701a      	strb	r2, [r3, #0]
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    f23a:	230e      	movs	r3, #14
    f23c:	18fb      	adds	r3, r7, r3
    f23e:	683a      	ldr	r2, [r7, #0]
    f240:	8812      	ldrh	r2, [r2, #0]
    f242:	801a      	strh	r2, [r3, #0]
	
	if(channelMask != 0x0000U)
    f244:	230e      	movs	r3, #14
    f246:	18fb      	adds	r3, r7, r3
    f248:	881b      	ldrh	r3, [r3, #0]
    f24a:	2b00      	cmp	r3, #0
    f24c:	d046      	beq.n	f2dc <ValidateChannelMaskT2+0xb8>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    f24e:	230d      	movs	r3, #13
    f250:	18fb      	adds	r3, r7, r3
    f252:	2200      	movs	r2, #0
    f254:	701a      	strb	r2, [r3, #0]
    f256:	e031      	b.n	f2bc <ValidateChannelMaskT2+0x98>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    f258:	230e      	movs	r3, #14
    f25a:	18fb      	adds	r3, r7, r3
    f25c:	881b      	ldrh	r3, [r3, #0]
    f25e:	2b00      	cmp	r3, #0
    f260:	d01e      	beq.n	f2a0 <ValidateChannelMaskT2+0x7c>
    f262:	4b24      	ldr	r3, [pc, #144]	; (f2f4 <ValidateChannelMaskT2+0xd0>)
    f264:	7a1a      	ldrb	r2, [r3, #8]
    f266:	7a59      	ldrb	r1, [r3, #9]
    f268:	0209      	lsls	r1, r1, #8
    f26a:	430a      	orrs	r2, r1
    f26c:	7a99      	ldrb	r1, [r3, #10]
    f26e:	0409      	lsls	r1, r1, #16
    f270:	430a      	orrs	r2, r1
    f272:	7adb      	ldrb	r3, [r3, #11]
    f274:	061b      	lsls	r3, r3, #24
    f276:	4313      	orrs	r3, r2
    f278:	0019      	movs	r1, r3
    f27a:	230d      	movs	r3, #13
    f27c:	18fb      	adds	r3, r7, r3
    f27e:	781a      	ldrb	r2, [r3, #0]
    f280:	0013      	movs	r3, r2
    f282:	005b      	lsls	r3, r3, #1
    f284:	189b      	adds	r3, r3, r2
    f286:	009b      	lsls	r3, r3, #2
    f288:	18cb      	adds	r3, r1, r3
    f28a:	7adb      	ldrb	r3, [r3, #11]
    f28c:	001a      	movs	r2, r3
    f28e:	2303      	movs	r3, #3
    f290:	4013      	ands	r3, r2
    f292:	2b03      	cmp	r3, #3
    f294:	d004      	beq.n	f2a0 <ValidateChannelMaskT2+0x7c>
			{
				retVal = LORAWAN_INVALID_PARAMETER;
    f296:	230c      	movs	r3, #12
    f298:	18fb      	adds	r3, r7, r3
    f29a:	220a      	movs	r2, #10
    f29c:	701a      	strb	r2, [r3, #0]
				break;
    f29e:	e015      	b.n	f2cc <ValidateChannelMaskT2+0xa8>
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    f2a0:	230e      	movs	r3, #14
    f2a2:	18fb      	adds	r3, r7, r3
    f2a4:	220e      	movs	r2, #14
    f2a6:	18ba      	adds	r2, r7, r2
    f2a8:	8812      	ldrh	r2, [r2, #0]
    f2aa:	0852      	lsrs	r2, r2, #1
    f2ac:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    f2ae:	230d      	movs	r3, #13
    f2b0:	18fb      	adds	r3, r7, r3
    f2b2:	781a      	ldrb	r2, [r3, #0]
    f2b4:	230d      	movs	r3, #13
    f2b6:	18fb      	adds	r3, r7, r3
    f2b8:	3201      	adds	r2, #1
    f2ba:	701a      	strb	r2, [r3, #0]
    f2bc:	230d      	movs	r3, #13
    f2be:	18fb      	adds	r3, r7, r3
    f2c0:	781b      	ldrb	r3, [r3, #0]
    f2c2:	4a0c      	ldr	r2, [pc, #48]	; (f2f4 <ValidateChannelMaskT2+0xd0>)
    f2c4:	212a      	movs	r1, #42	; 0x2a
    f2c6:	5652      	ldrsb	r2, [r2, r1]
    f2c8:	4293      	cmp	r3, r2
    f2ca:	dbc5      	blt.n	f258 <ValidateChannelMaskT2+0x34>
			}
		}
		return retVal = LORAWAN_SUCCESS;
    f2cc:	230c      	movs	r3, #12
    f2ce:	18fb      	adds	r3, r7, r3
    f2d0:	2208      	movs	r2, #8
    f2d2:	701a      	strb	r2, [r3, #0]
    f2d4:	230c      	movs	r3, #12
    f2d6:	18fb      	adds	r3, r7, r3
    f2d8:	781b      	ldrb	r3, [r3, #0]
    f2da:	e006      	b.n	f2ea <ValidateChannelMaskT2+0xc6>
	}
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
    f2dc:	230c      	movs	r3, #12
    f2de:	18fb      	adds	r3, r7, r3
    f2e0:	2208      	movs	r2, #8
    f2e2:	701a      	strb	r2, [r3, #0]
    f2e4:	230c      	movs	r3, #12
    f2e6:	18fb      	adds	r3, r7, r3
    f2e8:	781b      	ldrb	r3, [r3, #0]
	}
	
	return retVal;
}
    f2ea:	0018      	movs	r0, r3
    f2ec:	46bd      	mov	sp, r7
    f2ee:	b004      	add	sp, #16
    f2f0:	bd80      	pop	{r7, pc}
    f2f2:	46c0      	nop			; (mov r8, r8)
    f2f4:	200014a8 	.word	0x200014a8

0000f2f8 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    f2f8:	b580      	push	{r7, lr}
    f2fa:	b084      	sub	sp, #16
    f2fc:	af00      	add	r7, sp, #0
    f2fe:	0002      	movs	r2, r0
    f300:	6039      	str	r1, [r7, #0]
    f302:	1dfb      	adds	r3, r7, #7
    f304:	701a      	strb	r2, [r3, #0]
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    f306:	683b      	ldr	r3, [r7, #0]
    f308:	881a      	ldrh	r2, [r3, #0]
    f30a:	230e      	movs	r3, #14
    f30c:	18fb      	adds	r3, r7, r3
    f30e:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    f310:	230f      	movs	r3, #15
    f312:	18fb      	adds	r3, r7, r3
    f314:	2208      	movs	r2, #8
    f316:	701a      	strb	r2, [r3, #0]
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    f318:	230e      	movs	r3, #14
    f31a:	18fb      	adds	r3, r7, r3
    f31c:	781b      	ldrb	r3, [r3, #0]
    f31e:	2b00      	cmp	r3, #0
    f320:	d008      	beq.n	f334 <ValidateChannelMaskCntlT2+0x3c>
    f322:	230e      	movs	r3, #14
    f324:	18fb      	adds	r3, r7, r3
    f326:	781b      	ldrb	r3, [r3, #0]
    f328:	2b06      	cmp	r3, #6
    f32a:	d003      	beq.n	f334 <ValidateChannelMaskCntlT2+0x3c>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    f32c:	230f      	movs	r3, #15
    f32e:	18fb      	adds	r3, r7, r3
    f330:	220a      	movs	r2, #10
    f332:	701a      	strb	r2, [r3, #0]
    }
	return result;
    f334:	230f      	movs	r3, #15
    f336:	18fb      	adds	r3, r7, r3
    f338:	781b      	ldrb	r3, [r3, #0]
}
    f33a:	0018      	movs	r0, r3
    f33c:	46bd      	mov	sp, r7
    f33e:	b004      	add	sp, #16
    f340:	bd80      	pop	{r7, pc}
	...

0000f344 <GenerateFrequencyReception>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static uint32_t GenerateFrequencyReception (uint8_t channelIndex)
{
    f344:	b580      	push	{r7, lr}
    f346:	b084      	sub	sp, #16
    f348:	af00      	add	r7, sp, #0
    f34a:	0002      	movs	r2, r0
    f34c:	1dfb      	adds	r3, r7, #7
    f34e:	701a      	strb	r2, [r3, #0]
	uint32_t channelFrequency;
	
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    f350:	4b0f      	ldr	r3, [pc, #60]	; (f390 <GenerateFrequencyReception+0x4c>)
    f352:	22a6      	movs	r2, #166	; 0xa6
    f354:	0052      	lsls	r2, r2, #1
    f356:	5c9a      	ldrb	r2, [r3, r2]
    f358:	214e      	movs	r1, #78	; 0x4e
    f35a:	31ff      	adds	r1, #255	; 0xff
    f35c:	5c59      	ldrb	r1, [r3, r1]
    f35e:	0209      	lsls	r1, r1, #8
    f360:	430a      	orrs	r2, r1
    f362:	21a7      	movs	r1, #167	; 0xa7
    f364:	0049      	lsls	r1, r1, #1
    f366:	5c59      	ldrb	r1, [r3, r1]
    f368:	0409      	lsls	r1, r1, #16
    f36a:	430a      	orrs	r2, r1
    f36c:	2150      	movs	r1, #80	; 0x50
    f36e:	31ff      	adds	r1, #255	; 0xff
    f370:	5c5b      	ldrb	r3, [r3, r1]
    f372:	061b      	lsls	r3, r3, #24
    f374:	4313      	orrs	r3, r2
    f376:	0019      	movs	r1, r3
    f378:	1dfb      	adds	r3, r7, #7
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	4a05      	ldr	r2, [pc, #20]	; (f394 <GenerateFrequencyReception+0x50>)
    f37e:	4353      	muls	r3, r2
    f380:	18cb      	adds	r3, r1, r3
    f382:	60fb      	str	r3, [r7, #12]
	return channelFrequency;
    f384:	68fb      	ldr	r3, [r7, #12]
}
    f386:	0018      	movs	r0, r3
    f388:	46bd      	mov	sp, r7
    f38a:	b004      	add	sp, #16
    f38c:	bd80      	pop	{r7, pc}
    f38e:	46c0      	nop			; (mov r8, r8)
    f390:	200014a8 	.word	0x200014a8
    f394:	000927c0 	.word	0x000927c0

0000f398 <CreateAllRegSoftwareTimers>:

/*
 * \brief This function Creates all the timers required for the regional module
 */
StackRetStatus_t CreateAllRegSoftwareTimers (void)
{
    f398:	b590      	push	{r4, r7, lr}
    f39a:	b083      	sub	sp, #12
    f39c:	af00      	add	r7, sp, #0
    /* For other bands, regTimerId[0] is used for required purpose. */
	StackRetStatus_t status  = LORAWAN_SUCCESS;
    f39e:	1dfb      	adds	r3, r7, #7
    f3a0:	2208      	movs	r2, #8
    f3a2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i < REG_PARAMS_TIMERS_COUNT; i++)
    f3a4:	1dbb      	adds	r3, r7, #6
    f3a6:	2200      	movs	r2, #0
    f3a8:	701a      	strb	r2, [r3, #0]
    f3aa:	e012      	b.n	f3d2 <CreateAllRegSoftwareTimers+0x3a>
	{
		if(LORAWAN_SUCCESS == status)
    f3ac:	1dfb      	adds	r3, r7, #7
    f3ae:	781b      	ldrb	r3, [r3, #0]
    f3b0:	2b08      	cmp	r3, #8
    f3b2:	d113      	bne.n	f3dc <CreateAllRegSoftwareTimers+0x44>
		{
			status = SwTimerCreate(&regTimerId[i]);
    f3b4:	1dbb      	adds	r3, r7, #6
    f3b6:	781a      	ldrb	r2, [r3, #0]
    f3b8:	4b0c      	ldr	r3, [pc, #48]	; (f3ec <CreateAllRegSoftwareTimers+0x54>)
    f3ba:	18d3      	adds	r3, r2, r3
    f3bc:	1dfc      	adds	r4, r7, #7
    f3be:	0018      	movs	r0, r3
    f3c0:	4b0b      	ldr	r3, [pc, #44]	; (f3f0 <CreateAllRegSoftwareTimers+0x58>)
    f3c2:	4798      	blx	r3
    f3c4:	0003      	movs	r3, r0
    f3c6:	7023      	strb	r3, [r4, #0]
	for(uint8_t i=0; i < REG_PARAMS_TIMERS_COUNT; i++)
    f3c8:	1dbb      	adds	r3, r7, #6
    f3ca:	781a      	ldrb	r2, [r3, #0]
    f3cc:	1dbb      	adds	r3, r7, #6
    f3ce:	3201      	adds	r2, #1
    f3d0:	701a      	strb	r2, [r3, #0]
    f3d2:	1dbb      	adds	r3, r7, #6
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	2b03      	cmp	r3, #3
    f3d8:	d9e8      	bls.n	f3ac <CreateAllRegSoftwareTimers+0x14>
    f3da:	e000      	b.n	f3de <CreateAllRegSoftwareTimers+0x46>
		}
		else
		{
			break;
    f3dc:	46c0      	nop			; (mov r8, r8)
		}
	}
    return status;
    f3de:	1dfb      	adds	r3, r7, #7
    f3e0:	781b      	ldrb	r3, [r3, #0]
}
    f3e2:	0018      	movs	r0, r3
    f3e4:	46bd      	mov	sp, r7
    f3e6:	b003      	add	sp, #12
    f3e8:	bd90      	pop	{r4, r7, pc}
    f3ea:	46c0      	nop			; (mov r8, r8)
    f3ec:	200014a4 	.word	0x200014a4
    f3f0:	00015965 	.word	0x00015965

0000f3f4 <StopAllRegSoftwareTimers>:
/*
 * \brief This function Stops  all the timers of the regional module
 */

void StopAllRegSoftwareTimers (void)
{
    f3f4:	b580      	push	{r7, lr}
    f3f6:	b082      	sub	sp, #8
    f3f8:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    f3fa:	1dfb      	adds	r3, r7, #7
    f3fc:	2200      	movs	r2, #0
    f3fe:	701a      	strb	r2, [r3, #0]
    f400:	e00b      	b.n	f41a <StopAllRegSoftwareTimers+0x26>
	{
		SwTimerStop(regTimerId[i]);
    f402:	1dfb      	adds	r3, r7, #7
    f404:	781b      	ldrb	r3, [r3, #0]
    f406:	4a09      	ldr	r2, [pc, #36]	; (f42c <StopAllRegSoftwareTimers+0x38>)
    f408:	5cd3      	ldrb	r3, [r2, r3]
    f40a:	0018      	movs	r0, r3
    f40c:	4b08      	ldr	r3, [pc, #32]	; (f430 <StopAllRegSoftwareTimers+0x3c>)
    f40e:	4798      	blx	r3
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    f410:	1dfb      	adds	r3, r7, #7
    f412:	781a      	ldrb	r2, [r3, #0]
    f414:	1dfb      	adds	r3, r7, #7
    f416:	3201      	adds	r2, #1
    f418:	701a      	strb	r2, [r3, #0]
    f41a:	1dfb      	adds	r3, r7, #7
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2b03      	cmp	r3, #3
    f420:	d9ef      	bls.n	f402 <StopAllRegSoftwareTimers+0xe>
	}
	
}
    f422:	46c0      	nop			; (mov r8, r8)
    f424:	46bd      	mov	sp, r7
    f426:	b002      	add	sp, #8
    f428:	bd80      	pop	{r7, pc}
    f42a:	46c0      	nop			; (mov r8, r8)
    f42c:	200014a4 	.word	0x200014a4
    f430:	00015cfd 	.word	0x00015cfd

0000f434 <DutyCycleCallback>:
 * \brief Timer callback for updating the duty cycle timer
 * \param Timer Parameters
 */
#if (EU_BAND == 1) || (AS_BAND == 1) || (JPN_BAND == 1)
static void DutyCycleCallback (uint8_t param)
{
    f434:	b5f0      	push	{r4, r5, r6, r7, lr}
    f436:	b089      	sub	sp, #36	; 0x24
    f438:	af02      	add	r7, sp, #8
    f43a:	0002      	movs	r2, r0
    f43c:	1dfb      	adds	r3, r7, #7
    f43e:	701a      	strb	r2, [r3, #0]
    uint32_t minimSubBandTimer = UINT32_MAX;
    f440:	2301      	movs	r3, #1
    f442:	425b      	negs	r3, r3
    f444:	617b      	str	r3, [r7, #20]
	uint32_t nextTimer;
    bool found = 0;
    f446:	230f      	movs	r3, #15
    f448:	18fb      	adds	r3, r7, r3
    f44a:	2200      	movs	r2, #0
    f44c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
	// todo : ASIA DCYCLE / this code has potential for bug; it can be a garbage value. never initialized
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    f44e:	4bee      	ldr	r3, [pc, #952]	; (f808 <DutyCycleCallback+0x3d4>)
    f450:	22dd      	movs	r2, #221	; 0xdd
    f452:	0052      	lsls	r2, r2, #1
    f454:	5c9a      	ldrb	r2, [r3, r2]
    f456:	21bc      	movs	r1, #188	; 0xbc
    f458:	31ff      	adds	r1, #255	; 0xff
    f45a:	5c59      	ldrb	r1, [r3, r1]
    f45c:	0209      	lsls	r1, r1, #8
    f45e:	430a      	orrs	r2, r1
    f460:	21de      	movs	r1, #222	; 0xde
    f462:	0049      	lsls	r1, r1, #1
    f464:	5c59      	ldrb	r1, [r3, r1]
    f466:	0409      	lsls	r1, r1, #16
    f468:	430a      	orrs	r2, r1
    f46a:	21be      	movs	r1, #190	; 0xbe
    f46c:	31ff      	adds	r1, #255	; 0xff
    f46e:	5c5b      	ldrb	r3, [r3, r1]
    f470:	061b      	lsls	r3, r3, #24
    f472:	4313      	orrs	r3, r2
    f474:	60bb      	str	r3, [r7, #8]

    for (i=0; i < RegParams.maxSubBands; i++)
    f476:	230e      	movs	r3, #14
    f478:	18fb      	adds	r3, r7, r3
    f47a:	2200      	movs	r2, #0
    f47c:	701a      	strb	r2, [r3, #0]
    f47e:	e156      	b.n	f72e <DutyCycleCallback+0x2fa>
    {
        //Validate this only for enabled channels
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    f480:	4be1      	ldr	r3, [pc, #900]	; (f808 <DutyCycleCallback+0x3d4>)
    f482:	7b1a      	ldrb	r2, [r3, #12]
    f484:	7b59      	ldrb	r1, [r3, #13]
    f486:	0209      	lsls	r1, r1, #8
    f488:	430a      	orrs	r2, r1
    f48a:	7b99      	ldrb	r1, [r3, #14]
    f48c:	0409      	lsls	r1, r1, #16
    f48e:	430a      	orrs	r2, r1
    f490:	7bdb      	ldrb	r3, [r3, #15]
    f492:	061b      	lsls	r3, r3, #24
    f494:	4313      	orrs	r3, r2
    f496:	0019      	movs	r1, r3
    f498:	230e      	movs	r3, #14
    f49a:	18fb      	adds	r3, r7, r3
    f49c:	781a      	ldrb	r2, [r3, #0]
    f49e:	0013      	movs	r3, r2
    f4a0:	005b      	lsls	r3, r3, #1
    f4a2:	189b      	adds	r3, r3, r2
    f4a4:	009b      	lsls	r3, r3, #2
    f4a6:	18cb      	adds	r3, r1, r3
    f4a8:	7a1a      	ldrb	r2, [r3, #8]
    f4aa:	7a59      	ldrb	r1, [r3, #9]
    f4ac:	0209      	lsls	r1, r1, #8
    f4ae:	430a      	orrs	r2, r1
    f4b0:	7a99      	ldrb	r1, [r3, #10]
    f4b2:	0409      	lsls	r1, r1, #16
    f4b4:	430a      	orrs	r2, r1
    f4b6:	7adb      	ldrb	r3, [r3, #11]
    f4b8:	061b      	lsls	r3, r3, #24
    f4ba:	4313      	orrs	r3, r2
    f4bc:	d100      	bne.n	f4c0 <DutyCycleCallback+0x8c>
    f4be:	e12f      	b.n	f720 <DutyCycleCallback+0x2ec>
        {
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    f4c0:	4bd1      	ldr	r3, [pc, #836]	; (f808 <DutyCycleCallback+0x3d4>)
    f4c2:	7b1a      	ldrb	r2, [r3, #12]
    f4c4:	7b59      	ldrb	r1, [r3, #13]
    f4c6:	0209      	lsls	r1, r1, #8
    f4c8:	430a      	orrs	r2, r1
    f4ca:	7b99      	ldrb	r1, [r3, #14]
    f4cc:	0409      	lsls	r1, r1, #16
    f4ce:	430a      	orrs	r2, r1
    f4d0:	7bdb      	ldrb	r3, [r3, #15]
    f4d2:	061b      	lsls	r3, r3, #24
    f4d4:	4313      	orrs	r3, r2
    f4d6:	0019      	movs	r1, r3
    f4d8:	230e      	movs	r3, #14
    f4da:	18fb      	adds	r3, r7, r3
    f4dc:	781a      	ldrb	r2, [r3, #0]
    f4de:	0013      	movs	r3, r2
    f4e0:	005b      	lsls	r3, r3, #1
    f4e2:	189b      	adds	r3, r3, r2
    f4e4:	009b      	lsls	r3, r3, #2
    f4e6:	18cb      	adds	r3, r1, r3
    f4e8:	7a1a      	ldrb	r2, [r3, #8]
    f4ea:	7a59      	ldrb	r1, [r3, #9]
    f4ec:	0209      	lsls	r1, r1, #8
    f4ee:	430a      	orrs	r2, r1
    f4f0:	7a99      	ldrb	r1, [r3, #10]
    f4f2:	0409      	lsls	r1, r1, #16
    f4f4:	430a      	orrs	r2, r1
    f4f6:	7adb      	ldrb	r3, [r3, #11]
    f4f8:	061b      	lsls	r3, r3, #24
    f4fa:	4313      	orrs	r3, r2
    f4fc:	0018      	movs	r0, r3
    f4fe:	4bc2      	ldr	r3, [pc, #776]	; (f808 <DutyCycleCallback+0x3d4>)
    f500:	7c1a      	ldrb	r2, [r3, #16]
    f502:	7c59      	ldrb	r1, [r3, #17]
    f504:	0209      	lsls	r1, r1, #8
    f506:	430a      	orrs	r2, r1
    f508:	7c99      	ldrb	r1, [r3, #18]
    f50a:	0409      	lsls	r1, r1, #16
    f50c:	430a      	orrs	r2, r1
    f50e:	7cdb      	ldrb	r3, [r3, #19]
    f510:	061b      	lsls	r3, r3, #24
    f512:	4313      	orrs	r3, r2
    f514:	781a      	ldrb	r2, [r3, #0]
    f516:	7859      	ldrb	r1, [r3, #1]
    f518:	0209      	lsls	r1, r1, #8
    f51a:	430a      	orrs	r2, r1
    f51c:	7899      	ldrb	r1, [r3, #2]
    f51e:	0409      	lsls	r1, r1, #16
    f520:	430a      	orrs	r2, r1
    f522:	78db      	ldrb	r3, [r3, #3]
    f524:	061b      	lsls	r3, r3, #24
    f526:	4313      	orrs	r3, r2
    f528:	4298      	cmp	r0, r3
    f52a:	d971      	bls.n	f610 <DutyCycleCallback+0x1dc>
            {
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    f52c:	4bb6      	ldr	r3, [pc, #728]	; (f808 <DutyCycleCallback+0x3d4>)
    f52e:	7b1a      	ldrb	r2, [r3, #12]
    f530:	7b59      	ldrb	r1, [r3, #13]
    f532:	0209      	lsls	r1, r1, #8
    f534:	430a      	orrs	r2, r1
    f536:	7b99      	ldrb	r1, [r3, #14]
    f538:	0409      	lsls	r1, r1, #16
    f53a:	430a      	orrs	r2, r1
    f53c:	7bdb      	ldrb	r3, [r3, #15]
    f53e:	061b      	lsls	r3, r3, #24
    f540:	4313      	orrs	r3, r2
    f542:	0019      	movs	r1, r3
    f544:	230e      	movs	r3, #14
    f546:	18fb      	adds	r3, r7, r3
    f548:	781a      	ldrb	r2, [r3, #0]
    f54a:	0013      	movs	r3, r2
    f54c:	005b      	lsls	r3, r3, #1
    f54e:	189b      	adds	r3, r3, r2
    f550:	009b      	lsls	r3, r3, #2
    f552:	18cb      	adds	r3, r1, r3
    f554:	4aac      	ldr	r2, [pc, #688]	; (f808 <DutyCycleCallback+0x3d4>)
    f556:	7b11      	ldrb	r1, [r2, #12]
    f558:	7b50      	ldrb	r0, [r2, #13]
    f55a:	0200      	lsls	r0, r0, #8
    f55c:	4301      	orrs	r1, r0
    f55e:	7b90      	ldrb	r0, [r2, #14]
    f560:	0400      	lsls	r0, r0, #16
    f562:	4301      	orrs	r1, r0
    f564:	7bd2      	ldrb	r2, [r2, #15]
    f566:	0612      	lsls	r2, r2, #24
    f568:	430a      	orrs	r2, r1
    f56a:	0010      	movs	r0, r2
    f56c:	220e      	movs	r2, #14
    f56e:	18ba      	adds	r2, r7, r2
    f570:	7811      	ldrb	r1, [r2, #0]
    f572:	000a      	movs	r2, r1
    f574:	0052      	lsls	r2, r2, #1
    f576:	1852      	adds	r2, r2, r1
    f578:	0092      	lsls	r2, r2, #2
    f57a:	1882      	adds	r2, r0, r2
    f57c:	7a11      	ldrb	r1, [r2, #8]
    f57e:	7a50      	ldrb	r0, [r2, #9]
    f580:	0200      	lsls	r0, r0, #8
    f582:	4301      	orrs	r1, r0
    f584:	7a90      	ldrb	r0, [r2, #10]
    f586:	0400      	lsls	r0, r0, #16
    f588:	4301      	orrs	r1, r0
    f58a:	7ad2      	ldrb	r2, [r2, #11]
    f58c:	0612      	lsls	r2, r2, #24
    f58e:	430a      	orrs	r2, r1
    f590:	0014      	movs	r4, r2
    f592:	4a9d      	ldr	r2, [pc, #628]	; (f808 <DutyCycleCallback+0x3d4>)
    f594:	7c11      	ldrb	r1, [r2, #16]
    f596:	7c50      	ldrb	r0, [r2, #17]
    f598:	0200      	lsls	r0, r0, #8
    f59a:	4301      	orrs	r1, r0
    f59c:	7c90      	ldrb	r0, [r2, #18]
    f59e:	0400      	lsls	r0, r0, #16
    f5a0:	4301      	orrs	r1, r0
    f5a2:	7cd2      	ldrb	r2, [r2, #19]
    f5a4:	0612      	lsls	r2, r2, #24
    f5a6:	430a      	orrs	r2, r1
    f5a8:	7811      	ldrb	r1, [r2, #0]
    f5aa:	7850      	ldrb	r0, [r2, #1]
    f5ac:	0200      	lsls	r0, r0, #8
    f5ae:	4301      	orrs	r1, r0
    f5b0:	7890      	ldrb	r0, [r2, #2]
    f5b2:	0400      	lsls	r0, r0, #16
    f5b4:	4301      	orrs	r1, r0
    f5b6:	78d2      	ldrb	r2, [r2, #3]
    f5b8:	0612      	lsls	r2, r2, #24
    f5ba:	430a      	orrs	r2, r1
    f5bc:	1aa2      	subs	r2, r4, r2
    f5be:	21ff      	movs	r1, #255	; 0xff
    f5c0:	4011      	ands	r1, r2
    f5c2:	000c      	movs	r4, r1
    f5c4:	7a19      	ldrb	r1, [r3, #8]
    f5c6:	2000      	movs	r0, #0
    f5c8:	4001      	ands	r1, r0
    f5ca:	1c08      	adds	r0, r1, #0
    f5cc:	1c21      	adds	r1, r4, #0
    f5ce:	4301      	orrs	r1, r0
    f5d0:	7219      	strb	r1, [r3, #8]
    f5d2:	0a11      	lsrs	r1, r2, #8
    f5d4:	20ff      	movs	r0, #255	; 0xff
    f5d6:	4001      	ands	r1, r0
    f5d8:	000c      	movs	r4, r1
    f5da:	7a59      	ldrb	r1, [r3, #9]
    f5dc:	2000      	movs	r0, #0
    f5de:	4001      	ands	r1, r0
    f5e0:	1c08      	adds	r0, r1, #0
    f5e2:	1c21      	adds	r1, r4, #0
    f5e4:	4301      	orrs	r1, r0
    f5e6:	7259      	strb	r1, [r3, #9]
    f5e8:	0c11      	lsrs	r1, r2, #16
    f5ea:	20ff      	movs	r0, #255	; 0xff
    f5ec:	4001      	ands	r1, r0
    f5ee:	000c      	movs	r4, r1
    f5f0:	7a99      	ldrb	r1, [r3, #10]
    f5f2:	2000      	movs	r0, #0
    f5f4:	4001      	ands	r1, r0
    f5f6:	1c08      	adds	r0, r1, #0
    f5f8:	1c21      	adds	r1, r4, #0
    f5fa:	4301      	orrs	r1, r0
    f5fc:	7299      	strb	r1, [r3, #10]
    f5fe:	0e10      	lsrs	r0, r2, #24
    f600:	7ada      	ldrb	r2, [r3, #11]
    f602:	2100      	movs	r1, #0
    f604:	400a      	ands	r2, r1
    f606:	1c11      	adds	r1, r2, #0
    f608:	1c02      	adds	r2, r0, #0
    f60a:	430a      	orrs	r2, r1
    f60c:	72da      	strb	r2, [r3, #11]
    f60e:	e023      	b.n	f658 <DutyCycleCallback+0x224>
            }
            else
            {
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    f610:	4b7d      	ldr	r3, [pc, #500]	; (f808 <DutyCycleCallback+0x3d4>)
    f612:	7b1a      	ldrb	r2, [r3, #12]
    f614:	7b59      	ldrb	r1, [r3, #13]
    f616:	0209      	lsls	r1, r1, #8
    f618:	430a      	orrs	r2, r1
    f61a:	7b99      	ldrb	r1, [r3, #14]
    f61c:	0409      	lsls	r1, r1, #16
    f61e:	430a      	orrs	r2, r1
    f620:	7bdb      	ldrb	r3, [r3, #15]
    f622:	061b      	lsls	r3, r3, #24
    f624:	4313      	orrs	r3, r2
    f626:	0019      	movs	r1, r3
    f628:	230e      	movs	r3, #14
    f62a:	18fb      	adds	r3, r7, r3
    f62c:	781a      	ldrb	r2, [r3, #0]
    f62e:	0013      	movs	r3, r2
    f630:	005b      	lsls	r3, r3, #1
    f632:	189b      	adds	r3, r3, r2
    f634:	009b      	lsls	r3, r3, #2
    f636:	18cb      	adds	r3, r1, r3
    f638:	7a1a      	ldrb	r2, [r3, #8]
    f63a:	2100      	movs	r1, #0
    f63c:	400a      	ands	r2, r1
    f63e:	721a      	strb	r2, [r3, #8]
    f640:	7a5a      	ldrb	r2, [r3, #9]
    f642:	2100      	movs	r1, #0
    f644:	400a      	ands	r2, r1
    f646:	725a      	strb	r2, [r3, #9]
    f648:	7a9a      	ldrb	r2, [r3, #10]
    f64a:	2100      	movs	r1, #0
    f64c:	400a      	ands	r2, r1
    f64e:	729a      	strb	r2, [r3, #10]
    f650:	7ada      	ldrb	r2, [r3, #11]
    f652:	2100      	movs	r1, #0
    f654:	400a      	ands	r2, r1
    f656:	72da      	strb	r2, [r3, #11]
            } 
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    f658:	4b6b      	ldr	r3, [pc, #428]	; (f808 <DutyCycleCallback+0x3d4>)
    f65a:	7b1a      	ldrb	r2, [r3, #12]
    f65c:	7b59      	ldrb	r1, [r3, #13]
    f65e:	0209      	lsls	r1, r1, #8
    f660:	430a      	orrs	r2, r1
    f662:	7b99      	ldrb	r1, [r3, #14]
    f664:	0409      	lsls	r1, r1, #16
    f666:	430a      	orrs	r2, r1
    f668:	7bdb      	ldrb	r3, [r3, #15]
    f66a:	061b      	lsls	r3, r3, #24
    f66c:	4313      	orrs	r3, r2
    f66e:	0019      	movs	r1, r3
    f670:	230e      	movs	r3, #14
    f672:	18fb      	adds	r3, r7, r3
    f674:	781a      	ldrb	r2, [r3, #0]
    f676:	0013      	movs	r3, r2
    f678:	005b      	lsls	r3, r3, #1
    f67a:	189b      	adds	r3, r3, r2
    f67c:	009b      	lsls	r3, r3, #2
    f67e:	18cb      	adds	r3, r1, r3
    f680:	7a1a      	ldrb	r2, [r3, #8]
    f682:	7a59      	ldrb	r1, [r3, #9]
    f684:	0209      	lsls	r1, r1, #8
    f686:	430a      	orrs	r2, r1
    f688:	7a99      	ldrb	r1, [r3, #10]
    f68a:	0409      	lsls	r1, r1, #16
    f68c:	430a      	orrs	r2, r1
    f68e:	7adb      	ldrb	r3, [r3, #11]
    f690:	061b      	lsls	r3, r3, #24
    f692:	4313      	orrs	r3, r2
    f694:	001a      	movs	r2, r3
    f696:	697b      	ldr	r3, [r7, #20]
    f698:	429a      	cmp	r2, r3
    f69a:	d841      	bhi.n	f720 <DutyCycleCallback+0x2ec>
    f69c:	4b5a      	ldr	r3, [pc, #360]	; (f808 <DutyCycleCallback+0x3d4>)
    f69e:	7b1a      	ldrb	r2, [r3, #12]
    f6a0:	7b59      	ldrb	r1, [r3, #13]
    f6a2:	0209      	lsls	r1, r1, #8
    f6a4:	430a      	orrs	r2, r1
    f6a6:	7b99      	ldrb	r1, [r3, #14]
    f6a8:	0409      	lsls	r1, r1, #16
    f6aa:	430a      	orrs	r2, r1
    f6ac:	7bdb      	ldrb	r3, [r3, #15]
    f6ae:	061b      	lsls	r3, r3, #24
    f6b0:	4313      	orrs	r3, r2
    f6b2:	0019      	movs	r1, r3
    f6b4:	230e      	movs	r3, #14
    f6b6:	18fb      	adds	r3, r7, r3
    f6b8:	781a      	ldrb	r2, [r3, #0]
    f6ba:	0013      	movs	r3, r2
    f6bc:	005b      	lsls	r3, r3, #1
    f6be:	189b      	adds	r3, r3, r2
    f6c0:	009b      	lsls	r3, r3, #2
    f6c2:	18cb      	adds	r3, r1, r3
    f6c4:	7a1a      	ldrb	r2, [r3, #8]
    f6c6:	7a59      	ldrb	r1, [r3, #9]
    f6c8:	0209      	lsls	r1, r1, #8
    f6ca:	430a      	orrs	r2, r1
    f6cc:	7a99      	ldrb	r1, [r3, #10]
    f6ce:	0409      	lsls	r1, r1, #16
    f6d0:	430a      	orrs	r2, r1
    f6d2:	7adb      	ldrb	r3, [r3, #11]
    f6d4:	061b      	lsls	r3, r3, #24
    f6d6:	4313      	orrs	r3, r2
    f6d8:	d022      	beq.n	f720 <DutyCycleCallback+0x2ec>
            {
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    f6da:	4b4b      	ldr	r3, [pc, #300]	; (f808 <DutyCycleCallback+0x3d4>)
    f6dc:	7b1a      	ldrb	r2, [r3, #12]
    f6de:	7b59      	ldrb	r1, [r3, #13]
    f6e0:	0209      	lsls	r1, r1, #8
    f6e2:	430a      	orrs	r2, r1
    f6e4:	7b99      	ldrb	r1, [r3, #14]
    f6e6:	0409      	lsls	r1, r1, #16
    f6e8:	430a      	orrs	r2, r1
    f6ea:	7bdb      	ldrb	r3, [r3, #15]
    f6ec:	061b      	lsls	r3, r3, #24
    f6ee:	4313      	orrs	r3, r2
    f6f0:	0019      	movs	r1, r3
    f6f2:	230e      	movs	r3, #14
    f6f4:	18fb      	adds	r3, r7, r3
    f6f6:	781a      	ldrb	r2, [r3, #0]
    f6f8:	0013      	movs	r3, r2
    f6fa:	005b      	lsls	r3, r3, #1
    f6fc:	189b      	adds	r3, r3, r2
    f6fe:	009b      	lsls	r3, r3, #2
    f700:	18cb      	adds	r3, r1, r3
    f702:	7a1a      	ldrb	r2, [r3, #8]
    f704:	7a59      	ldrb	r1, [r3, #9]
    f706:	0209      	lsls	r1, r1, #8
    f708:	430a      	orrs	r2, r1
    f70a:	7a99      	ldrb	r1, [r3, #10]
    f70c:	0409      	lsls	r1, r1, #16
    f70e:	430a      	orrs	r2, r1
    f710:	7adb      	ldrb	r3, [r3, #11]
    f712:	061b      	lsls	r3, r3, #24
    f714:	4313      	orrs	r3, r2
    f716:	617b      	str	r3, [r7, #20]
                found = 1;
    f718:	230f      	movs	r3, #15
    f71a:	18fb      	adds	r3, r7, r3
    f71c:	2201      	movs	r2, #1
    f71e:	701a      	strb	r2, [r3, #0]
    for (i=0; i < RegParams.maxSubBands; i++)
    f720:	230e      	movs	r3, #14
    f722:	18fb      	adds	r3, r7, r3
    f724:	781a      	ldrb	r2, [r3, #0]
    f726:	230e      	movs	r3, #14
    f728:	18fb      	adds	r3, r7, r3
    f72a:	3201      	adds	r2, #1
    f72c:	701a      	strb	r2, [r3, #0]
    f72e:	4b36      	ldr	r3, [pc, #216]	; (f808 <DutyCycleCallback+0x3d4>)
    f730:	2229      	movs	r2, #41	; 0x29
    f732:	5c9b      	ldrb	r3, [r3, r2]
    f734:	220e      	movs	r2, #14
    f736:	18ba      	adds	r2, r7, r2
    f738:	7812      	ldrb	r2, [r2, #0]
    f73a:	429a      	cmp	r2, r3
    f73c:	d200      	bcs.n	f740 <DutyCycleCallback+0x30c>
    f73e:	e69f      	b.n	f480 <DutyCycleCallback+0x4c>
            }
        }
    }
	
    if (( DutyCycleTimeout != 0 ))
    f740:	68bb      	ldr	r3, [r7, #8]
    f742:	2b00      	cmp	r3, #0
    f744:	d100      	bne.n	f748 <DutyCycleCallback+0x314>
    f746:	e092      	b.n	f86e <DutyCycleCallback+0x43a>
    {
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    f748:	4b2f      	ldr	r3, [pc, #188]	; (f808 <DutyCycleCallback+0x3d4>)
    f74a:	7c1a      	ldrb	r2, [r3, #16]
    f74c:	7c59      	ldrb	r1, [r3, #17]
    f74e:	0209      	lsls	r1, r1, #8
    f750:	430a      	orrs	r2, r1
    f752:	7c99      	ldrb	r1, [r3, #18]
    f754:	0409      	lsls	r1, r1, #16
    f756:	430a      	orrs	r2, r1
    f758:	7cdb      	ldrb	r3, [r3, #19]
    f75a:	061b      	lsls	r3, r3, #24
    f75c:	4313      	orrs	r3, r2
    f75e:	781a      	ldrb	r2, [r3, #0]
    f760:	7859      	ldrb	r1, [r3, #1]
    f762:	0209      	lsls	r1, r1, #8
    f764:	430a      	orrs	r2, r1
    f766:	7899      	ldrb	r1, [r3, #2]
    f768:	0409      	lsls	r1, r1, #16
    f76a:	430a      	orrs	r2, r1
    f76c:	78db      	ldrb	r3, [r3, #3]
    f76e:	061b      	lsls	r3, r3, #24
    f770:	4313      	orrs	r3, r2
    f772:	001a      	movs	r2, r3
    f774:	68bb      	ldr	r3, [r7, #8]
    f776:	429a      	cmp	r2, r3
    f778:	d248      	bcs.n	f80c <DutyCycleCallback+0x3d8>
	    {
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    f77a:	4b23      	ldr	r3, [pc, #140]	; (f808 <DutyCycleCallback+0x3d4>)
    f77c:	7c1a      	ldrb	r2, [r3, #16]
    f77e:	7c59      	ldrb	r1, [r3, #17]
    f780:	0209      	lsls	r1, r1, #8
    f782:	430a      	orrs	r2, r1
    f784:	7c99      	ldrb	r1, [r3, #18]
    f786:	0409      	lsls	r1, r1, #16
    f788:	430a      	orrs	r2, r1
    f78a:	7cdb      	ldrb	r3, [r3, #19]
    f78c:	061b      	lsls	r3, r3, #24
    f78e:	4313      	orrs	r3, r2
    f790:	781a      	ldrb	r2, [r3, #0]
    f792:	7859      	ldrb	r1, [r3, #1]
    f794:	0209      	lsls	r1, r1, #8
    f796:	430a      	orrs	r2, r1
    f798:	7899      	ldrb	r1, [r3, #2]
    f79a:	0409      	lsls	r1, r1, #16
    f79c:	430a      	orrs	r2, r1
    f79e:	78db      	ldrb	r3, [r3, #3]
    f7a0:	061b      	lsls	r3, r3, #24
    f7a2:	4313      	orrs	r3, r2
    f7a4:	001a      	movs	r2, r3
    f7a6:	68bb      	ldr	r3, [r7, #8]
    f7a8:	1a99      	subs	r1, r3, r2
    f7aa:	4a17      	ldr	r2, [pc, #92]	; (f808 <DutyCycleCallback+0x3d4>)
    f7ac:	23dd      	movs	r3, #221	; 0xdd
    f7ae:	005b      	lsls	r3, r3, #1
    f7b0:	20ff      	movs	r0, #255	; 0xff
    f7b2:	4008      	ands	r0, r1
    f7b4:	0005      	movs	r5, r0
    f7b6:	5cd0      	ldrb	r0, [r2, r3]
    f7b8:	2400      	movs	r4, #0
    f7ba:	4020      	ands	r0, r4
    f7bc:	1c04      	adds	r4, r0, #0
    f7be:	1c28      	adds	r0, r5, #0
    f7c0:	4320      	orrs	r0, r4
    f7c2:	54d0      	strb	r0, [r2, r3]
    f7c4:	0a08      	lsrs	r0, r1, #8
    f7c6:	24ff      	movs	r4, #255	; 0xff
    f7c8:	4020      	ands	r0, r4
    f7ca:	0006      	movs	r6, r0
    f7cc:	18d0      	adds	r0, r2, r3
    f7ce:	7844      	ldrb	r4, [r0, #1]
    f7d0:	2500      	movs	r5, #0
    f7d2:	402c      	ands	r4, r5
    f7d4:	1c25      	adds	r5, r4, #0
    f7d6:	1c34      	adds	r4, r6, #0
    f7d8:	432c      	orrs	r4, r5
    f7da:	7044      	strb	r4, [r0, #1]
    f7dc:	0c08      	lsrs	r0, r1, #16
    f7de:	24ff      	movs	r4, #255	; 0xff
    f7e0:	4020      	ands	r0, r4
    f7e2:	0006      	movs	r6, r0
    f7e4:	18d0      	adds	r0, r2, r3
    f7e6:	7884      	ldrb	r4, [r0, #2]
    f7e8:	2500      	movs	r5, #0
    f7ea:	402c      	ands	r4, r5
    f7ec:	1c25      	adds	r5, r4, #0
    f7ee:	1c34      	adds	r4, r6, #0
    f7f0:	432c      	orrs	r4, r5
    f7f2:	7084      	strb	r4, [r0, #2]
    f7f4:	0e08      	lsrs	r0, r1, #24
    f7f6:	18d3      	adds	r3, r2, r3
    f7f8:	78da      	ldrb	r2, [r3, #3]
    f7fa:	2100      	movs	r1, #0
    f7fc:	400a      	ands	r2, r1
    f7fe:	1c11      	adds	r1, r2, #0
    f800:	1c02      	adds	r2, r0, #0
    f802:	430a      	orrs	r2, r1
    f804:	70da      	strb	r2, [r3, #3]
    f806:	e017      	b.n	f838 <DutyCycleCallback+0x404>
    f808:	200014a8 	.word	0x200014a8
	    }
	    else
	    {
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    f80c:	4a46      	ldr	r2, [pc, #280]	; (f928 <DutyCycleCallback+0x4f4>)
    f80e:	23dd      	movs	r3, #221	; 0xdd
    f810:	005b      	lsls	r3, r3, #1
    f812:	5cd1      	ldrb	r1, [r2, r3]
    f814:	2000      	movs	r0, #0
    f816:	4001      	ands	r1, r0
    f818:	54d1      	strb	r1, [r2, r3]
    f81a:	18d1      	adds	r1, r2, r3
    f81c:	7848      	ldrb	r0, [r1, #1]
    f81e:	2400      	movs	r4, #0
    f820:	4020      	ands	r0, r4
    f822:	7048      	strb	r0, [r1, #1]
    f824:	18d1      	adds	r1, r2, r3
    f826:	7888      	ldrb	r0, [r1, #2]
    f828:	2400      	movs	r4, #0
    f82a:	4020      	ands	r0, r4
    f82c:	7088      	strb	r0, [r1, #2]
    f82e:	18d3      	adds	r3, r2, r3
    f830:	78da      	ldrb	r2, [r3, #3]
    f832:	2100      	movs	r1, #0
    f834:	400a      	ands	r2, r1
    f836:	70da      	strb	r2, [r3, #3]
	    }
		
		DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    f838:	4b3b      	ldr	r3, [pc, #236]	; (f928 <DutyCycleCallback+0x4f4>)
    f83a:	22dd      	movs	r2, #221	; 0xdd
    f83c:	0052      	lsls	r2, r2, #1
    f83e:	5c9a      	ldrb	r2, [r3, r2]
    f840:	21bc      	movs	r1, #188	; 0xbc
    f842:	31ff      	adds	r1, #255	; 0xff
    f844:	5c59      	ldrb	r1, [r3, r1]
    f846:	0209      	lsls	r1, r1, #8
    f848:	430a      	orrs	r2, r1
    f84a:	21de      	movs	r1, #222	; 0xde
    f84c:	0049      	lsls	r1, r1, #1
    f84e:	5c59      	ldrb	r1, [r3, r1]
    f850:	0409      	lsls	r1, r1, #16
    f852:	430a      	orrs	r2, r1
    f854:	21be      	movs	r1, #190	; 0xbe
    f856:	31ff      	adds	r1, #255	; 0xff
    f858:	5c5b      	ldrb	r3, [r3, r1]
    f85a:	061b      	lsls	r3, r3, #24
    f85c:	4313      	orrs	r3, r2
    f85e:	60bb      	str	r3, [r7, #8]
		
		if(DutyCycleTimeout)
    f860:	68bb      	ldr	r3, [r7, #8]
    f862:	2b00      	cmp	r3, #0
    f864:	d003      	beq.n	f86e <DutyCycleCallback+0x43a>
		{
			found = 1;
    f866:	230f      	movs	r3, #15
    f868:	18fb      	adds	r3, r7, r3
    f86a:	2201      	movs	r2, #1
    f86c:	701a      	strb	r2, [r3, #0]
		}
    }
		
			
    if ( found == 1 )
    f86e:	230f      	movs	r3, #15
    f870:	18fb      	adds	r3, r7, r3
    f872:	781b      	ldrb	r3, [r3, #0]
    f874:	2b00      	cmp	r3, #0
    f876:	d053      	beq.n	f920 <DutyCycleCallback+0x4ec>
    {		
		if ((DutyCycleTimeout >= minimSubBandTimer))
    f878:	68ba      	ldr	r2, [r7, #8]
    f87a:	697b      	ldr	r3, [r7, #20]
    f87c:	429a      	cmp	r2, r3
    f87e:	d302      	bcc.n	f886 <DutyCycleCallback+0x452>
		{
			nextTimer  = DutyCycleTimeout;			
    f880:	68bb      	ldr	r3, [r7, #8]
    f882:	613b      	str	r3, [r7, #16]
    f884:	e001      	b.n	f88a <DutyCycleCallback+0x456>
		}
		else
		{
			nextTimer = minimSubBandTimer;
    f886:	697b      	ldr	r3, [r7, #20]
    f888:	613b      	str	r3, [r7, #16]
		}

        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    f88a:	4b27      	ldr	r3, [pc, #156]	; (f928 <DutyCycleCallback+0x4f4>)
    f88c:	7c1a      	ldrb	r2, [r3, #16]
    f88e:	7c59      	ldrb	r1, [r3, #17]
    f890:	0209      	lsls	r1, r1, #8
    f892:	430a      	orrs	r2, r1
    f894:	7c99      	ldrb	r1, [r3, #18]
    f896:	0409      	lsls	r1, r1, #16
    f898:	430a      	orrs	r2, r1
    f89a:	7cdb      	ldrb	r3, [r3, #19]
    f89c:	061b      	lsls	r3, r3, #24
    f89e:	4313      	orrs	r3, r2
    f8a0:	2210      	movs	r2, #16
    f8a2:	18ba      	adds	r2, r7, r2
    f8a4:	7810      	ldrb	r0, [r2, #0]
    f8a6:	781a      	ldrb	r2, [r3, #0]
    f8a8:	2100      	movs	r1, #0
    f8aa:	400a      	ands	r2, r1
    f8ac:	1c11      	adds	r1, r2, #0
    f8ae:	1c02      	adds	r2, r0, #0
    f8b0:	430a      	orrs	r2, r1
    f8b2:	701a      	strb	r2, [r3, #0]
    f8b4:	2211      	movs	r2, #17
    f8b6:	18ba      	adds	r2, r7, r2
    f8b8:	7810      	ldrb	r0, [r2, #0]
    f8ba:	785a      	ldrb	r2, [r3, #1]
    f8bc:	2100      	movs	r1, #0
    f8be:	400a      	ands	r2, r1
    f8c0:	1c11      	adds	r1, r2, #0
    f8c2:	1c02      	adds	r2, r0, #0
    f8c4:	430a      	orrs	r2, r1
    f8c6:	705a      	strb	r2, [r3, #1]
    f8c8:	2212      	movs	r2, #18
    f8ca:	18ba      	adds	r2, r7, r2
    f8cc:	7810      	ldrb	r0, [r2, #0]
    f8ce:	789a      	ldrb	r2, [r3, #2]
    f8d0:	2100      	movs	r1, #0
    f8d2:	400a      	ands	r2, r1
    f8d4:	1c11      	adds	r1, r2, #0
    f8d6:	1c02      	adds	r2, r0, #0
    f8d8:	430a      	orrs	r2, r1
    f8da:	709a      	strb	r2, [r3, #2]
    f8dc:	2213      	movs	r2, #19
    f8de:	18ba      	adds	r2, r7, r2
    f8e0:	7810      	ldrb	r0, [r2, #0]
    f8e2:	78da      	ldrb	r2, [r3, #3]
    f8e4:	2100      	movs	r1, #0
    f8e6:	400a      	ands	r2, r1
    f8e8:	1c11      	adds	r1, r2, #0
    f8ea:	1c02      	adds	r2, r0, #0
    f8ec:	430a      	orrs	r2, r1
    f8ee:	70da      	strb	r2, [r3, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    f8f0:	4b0d      	ldr	r3, [pc, #52]	; (f928 <DutyCycleCallback+0x4f4>)
    f8f2:	7c1a      	ldrb	r2, [r3, #16]
    f8f4:	7c59      	ldrb	r1, [r3, #17]
    f8f6:	0209      	lsls	r1, r1, #8
    f8f8:	430a      	orrs	r2, r1
    f8fa:	7c99      	ldrb	r1, [r3, #18]
    f8fc:	0409      	lsls	r1, r1, #16
    f8fe:	430a      	orrs	r2, r1
    f900:	7cdb      	ldrb	r3, [r3, #19]
    f902:	061b      	lsls	r3, r3, #24
    f904:	4313      	orrs	r3, r2
    f906:	7918      	ldrb	r0, [r3, #4]
    f908:	693b      	ldr	r3, [r7, #16]
    f90a:	22fa      	movs	r2, #250	; 0xfa
    f90c:	0092      	lsls	r2, r2, #2
    f90e:	435a      	muls	r2, r3
    f910:	0011      	movs	r1, r2
    f912:	4a06      	ldr	r2, [pc, #24]	; (f92c <DutyCycleCallback+0x4f8>)
    f914:	2300      	movs	r3, #0
    f916:	9300      	str	r3, [sp, #0]
    f918:	0013      	movs	r3, r2
    f91a:	2200      	movs	r2, #0
    f91c:	4c04      	ldr	r4, [pc, #16]	; (f930 <DutyCycleCallback+0x4fc>)
    f91e:	47a0      	blx	r4
        
    }
}
    f920:	46c0      	nop			; (mov r8, r8)
    f922:	46bd      	mov	sp, r7
    f924:	b007      	add	sp, #28
    f926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f928:	200014a8 	.word	0x200014a8
    f92c:	0000f435 	.word	0x0000f435
    f930:	000159bd 	.word	0x000159bd

0000f934 <JoinDutyCycleCallback>:
#endif
void JoinDutyCycleCallback (uint8_t param)
{   
    f934:	b590      	push	{r4, r7, lr}
    f936:	b085      	sub	sp, #20
    f938:	af02      	add	r7, sp, #8
    f93a:	0002      	movs	r2, r0
    f93c:	1dfb      	adds	r3, r7, #7
    f93e:	701a      	strb	r2, [r3, #0]
	
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    f940:	4b7e      	ldr	r3, [pc, #504]	; (fb3c <JoinDutyCycleCallback+0x208>)
    f942:	7d1a      	ldrb	r2, [r3, #20]
    f944:	7d59      	ldrb	r1, [r3, #21]
    f946:	0209      	lsls	r1, r1, #8
    f948:	430a      	orrs	r2, r1
    f94a:	7d99      	ldrb	r1, [r3, #22]
    f94c:	0409      	lsls	r1, r1, #16
    f94e:	430a      	orrs	r2, r1
    f950:	7ddb      	ldrb	r3, [r3, #23]
    f952:	061b      	lsls	r3, r3, #24
    f954:	4313      	orrs	r3, r2
    f956:	791a      	ldrb	r2, [r3, #4]
    f958:	7959      	ldrb	r1, [r3, #5]
    f95a:	0209      	lsls	r1, r1, #8
    f95c:	430a      	orrs	r2, r1
    f95e:	7999      	ldrb	r1, [r3, #6]
    f960:	0409      	lsls	r1, r1, #16
    f962:	430a      	orrs	r2, r1
    f964:	79db      	ldrb	r3, [r3, #7]
    f966:	061b      	lsls	r3, r3, #24
    f968:	4313      	orrs	r3, r2
    f96a:	d100      	bne.n	f96e <JoinDutyCycleCallback+0x3a>
    f96c:	e0c1      	b.n	faf2 <JoinDutyCycleCallback+0x1be>
	{
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    f96e:	4b73      	ldr	r3, [pc, #460]	; (fb3c <JoinDutyCycleCallback+0x208>)
    f970:	7d1a      	ldrb	r2, [r3, #20]
    f972:	7d59      	ldrb	r1, [r3, #21]
    f974:	0209      	lsls	r1, r1, #8
    f976:	430a      	orrs	r2, r1
    f978:	7d99      	ldrb	r1, [r3, #22]
    f97a:	0409      	lsls	r1, r1, #16
    f97c:	430a      	orrs	r2, r1
    f97e:	7ddb      	ldrb	r3, [r3, #23]
    f980:	061b      	lsls	r3, r3, #24
    f982:	4313      	orrs	r3, r2
    f984:	791a      	ldrb	r2, [r3, #4]
    f986:	7959      	ldrb	r1, [r3, #5]
    f988:	0209      	lsls	r1, r1, #8
    f98a:	430a      	orrs	r2, r1
    f98c:	7999      	ldrb	r1, [r3, #6]
    f98e:	0409      	lsls	r1, r1, #16
    f990:	430a      	orrs	r2, r1
    f992:	79db      	ldrb	r3, [r3, #7]
    f994:	061b      	lsls	r3, r3, #24
    f996:	4313      	orrs	r3, r2
    f998:	001a      	movs	r2, r3
    f99a:	4b69      	ldr	r3, [pc, #420]	; (fb40 <JoinDutyCycleCallback+0x20c>)
    f99c:	429a      	cmp	r2, r3
    f99e:	d95f      	bls.n	fa60 <JoinDutyCycleCallback+0x12c>
		{
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    f9a0:	4b66      	ldr	r3, [pc, #408]	; (fb3c <JoinDutyCycleCallback+0x208>)
    f9a2:	7d1a      	ldrb	r2, [r3, #20]
    f9a4:	7d59      	ldrb	r1, [r3, #21]
    f9a6:	0209      	lsls	r1, r1, #8
    f9a8:	430a      	orrs	r2, r1
    f9aa:	7d99      	ldrb	r1, [r3, #22]
    f9ac:	0409      	lsls	r1, r1, #16
    f9ae:	430a      	orrs	r2, r1
    f9b0:	7ddb      	ldrb	r3, [r3, #23]
    f9b2:	061b      	lsls	r3, r3, #24
    f9b4:	4313      	orrs	r3, r2
    f9b6:	4a61      	ldr	r2, [pc, #388]	; (fb3c <JoinDutyCycleCallback+0x208>)
    f9b8:	7d11      	ldrb	r1, [r2, #20]
    f9ba:	7d50      	ldrb	r0, [r2, #21]
    f9bc:	0200      	lsls	r0, r0, #8
    f9be:	4301      	orrs	r1, r0
    f9c0:	7d90      	ldrb	r0, [r2, #22]
    f9c2:	0400      	lsls	r0, r0, #16
    f9c4:	4301      	orrs	r1, r0
    f9c6:	7dd2      	ldrb	r2, [r2, #23]
    f9c8:	0612      	lsls	r2, r2, #24
    f9ca:	430a      	orrs	r2, r1
    f9cc:	7911      	ldrb	r1, [r2, #4]
    f9ce:	7950      	ldrb	r0, [r2, #5]
    f9d0:	0200      	lsls	r0, r0, #8
    f9d2:	4301      	orrs	r1, r0
    f9d4:	7990      	ldrb	r0, [r2, #6]
    f9d6:	0400      	lsls	r0, r0, #16
    f9d8:	4301      	orrs	r1, r0
    f9da:	79d2      	ldrb	r2, [r2, #7]
    f9dc:	0612      	lsls	r2, r2, #24
    f9de:	430a      	orrs	r2, r1
    f9e0:	4958      	ldr	r1, [pc, #352]	; (fb44 <JoinDutyCycleCallback+0x210>)
    f9e2:	468c      	mov	ip, r1
    f9e4:	4462      	add	r2, ip
    f9e6:	21ff      	movs	r1, #255	; 0xff
    f9e8:	4011      	ands	r1, r2
    f9ea:	000c      	movs	r4, r1
    f9ec:	7919      	ldrb	r1, [r3, #4]
    f9ee:	2000      	movs	r0, #0
    f9f0:	4001      	ands	r1, r0
    f9f2:	1c08      	adds	r0, r1, #0
    f9f4:	1c21      	adds	r1, r4, #0
    f9f6:	4301      	orrs	r1, r0
    f9f8:	7119      	strb	r1, [r3, #4]
    f9fa:	0a11      	lsrs	r1, r2, #8
    f9fc:	20ff      	movs	r0, #255	; 0xff
    f9fe:	4001      	ands	r1, r0
    fa00:	000c      	movs	r4, r1
    fa02:	7959      	ldrb	r1, [r3, #5]
    fa04:	2000      	movs	r0, #0
    fa06:	4001      	ands	r1, r0
    fa08:	1c08      	adds	r0, r1, #0
    fa0a:	1c21      	adds	r1, r4, #0
    fa0c:	4301      	orrs	r1, r0
    fa0e:	7159      	strb	r1, [r3, #5]
    fa10:	0c11      	lsrs	r1, r2, #16
    fa12:	20ff      	movs	r0, #255	; 0xff
    fa14:	4001      	ands	r1, r0
    fa16:	000c      	movs	r4, r1
    fa18:	7999      	ldrb	r1, [r3, #6]
    fa1a:	2000      	movs	r0, #0
    fa1c:	4001      	ands	r1, r0
    fa1e:	1c08      	adds	r0, r1, #0
    fa20:	1c21      	adds	r1, r4, #0
    fa22:	4301      	orrs	r1, r0
    fa24:	7199      	strb	r1, [r3, #6]
    fa26:	0e10      	lsrs	r0, r2, #24
    fa28:	79da      	ldrb	r2, [r3, #7]
    fa2a:	2100      	movs	r1, #0
    fa2c:	400a      	ands	r2, r1
    fa2e:	1c11      	adds	r1, r2, #0
    fa30:	1c02      	adds	r2, r0, #0
    fa32:	430a      	orrs	r2, r1
    fa34:	71da      	strb	r2, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    fa36:	4b41      	ldr	r3, [pc, #260]	; (fb3c <JoinDutyCycleCallback+0x208>)
    fa38:	7d1a      	ldrb	r2, [r3, #20]
    fa3a:	7d59      	ldrb	r1, [r3, #21]
    fa3c:	0209      	lsls	r1, r1, #8
    fa3e:	430a      	orrs	r2, r1
    fa40:	7d99      	ldrb	r1, [r3, #22]
    fa42:	0409      	lsls	r1, r1, #16
    fa44:	430a      	orrs	r2, r1
    fa46:	7ddb      	ldrb	r3, [r3, #23]
    fa48:	061b      	lsls	r3, r3, #24
    fa4a:	4313      	orrs	r3, r2
    fa4c:	7a18      	ldrb	r0, [r3, #8]
    fa4e:	4a3e      	ldr	r2, [pc, #248]	; (fb48 <JoinDutyCycleCallback+0x214>)
    fa50:	493e      	ldr	r1, [pc, #248]	; (fb4c <JoinDutyCycleCallback+0x218>)
    fa52:	2300      	movs	r3, #0
    fa54:	9300      	str	r3, [sp, #0]
    fa56:	0013      	movs	r3, r2
    fa58:	2200      	movs	r2, #0
    fa5a:	4c3d      	ldr	r4, [pc, #244]	; (fb50 <JoinDutyCycleCallback+0x21c>)
    fa5c:	47a0      	blx	r4
	{
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
	RegParams.joinDutyCycleTimeout = 0;
	
	}
}
    fa5e:	e069      	b.n	fb34 <JoinDutyCycleCallback+0x200>
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    fa60:	4b36      	ldr	r3, [pc, #216]	; (fb3c <JoinDutyCycleCallback+0x208>)
    fa62:	7d1a      	ldrb	r2, [r3, #20]
    fa64:	7d59      	ldrb	r1, [r3, #21]
    fa66:	0209      	lsls	r1, r1, #8
    fa68:	430a      	orrs	r2, r1
    fa6a:	7d99      	ldrb	r1, [r3, #22]
    fa6c:	0409      	lsls	r1, r1, #16
    fa6e:	430a      	orrs	r2, r1
    fa70:	7ddb      	ldrb	r3, [r3, #23]
    fa72:	061b      	lsls	r3, r3, #24
    fa74:	4313      	orrs	r3, r2
    fa76:	7a18      	ldrb	r0, [r3, #8]
    fa78:	4b30      	ldr	r3, [pc, #192]	; (fb3c <JoinDutyCycleCallback+0x208>)
    fa7a:	7d1a      	ldrb	r2, [r3, #20]
    fa7c:	7d59      	ldrb	r1, [r3, #21]
    fa7e:	0209      	lsls	r1, r1, #8
    fa80:	430a      	orrs	r2, r1
    fa82:	7d99      	ldrb	r1, [r3, #22]
    fa84:	0409      	lsls	r1, r1, #16
    fa86:	430a      	orrs	r2, r1
    fa88:	7ddb      	ldrb	r3, [r3, #23]
    fa8a:	061b      	lsls	r3, r3, #24
    fa8c:	4313      	orrs	r3, r2
    fa8e:	791a      	ldrb	r2, [r3, #4]
    fa90:	7959      	ldrb	r1, [r3, #5]
    fa92:	0209      	lsls	r1, r1, #8
    fa94:	430a      	orrs	r2, r1
    fa96:	7999      	ldrb	r1, [r3, #6]
    fa98:	0409      	lsls	r1, r1, #16
    fa9a:	430a      	orrs	r2, r1
    fa9c:	79db      	ldrb	r3, [r3, #7]
    fa9e:	061b      	lsls	r3, r3, #24
    faa0:	4313      	orrs	r3, r2
    faa2:	001a      	movs	r2, r3
    faa4:	23fa      	movs	r3, #250	; 0xfa
    faa6:	009b      	lsls	r3, r3, #2
    faa8:	4353      	muls	r3, r2
    faaa:	0019      	movs	r1, r3
    faac:	4a26      	ldr	r2, [pc, #152]	; (fb48 <JoinDutyCycleCallback+0x214>)
    faae:	2300      	movs	r3, #0
    fab0:	9300      	str	r3, [sp, #0]
    fab2:	0013      	movs	r3, r2
    fab4:	2200      	movs	r2, #0
    fab6:	4c26      	ldr	r4, [pc, #152]	; (fb50 <JoinDutyCycleCallback+0x21c>)
    fab8:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    faba:	4b20      	ldr	r3, [pc, #128]	; (fb3c <JoinDutyCycleCallback+0x208>)
    fabc:	7d1a      	ldrb	r2, [r3, #20]
    fabe:	7d59      	ldrb	r1, [r3, #21]
    fac0:	0209      	lsls	r1, r1, #8
    fac2:	430a      	orrs	r2, r1
    fac4:	7d99      	ldrb	r1, [r3, #22]
    fac6:	0409      	lsls	r1, r1, #16
    fac8:	430a      	orrs	r2, r1
    faca:	7ddb      	ldrb	r3, [r3, #23]
    facc:	061b      	lsls	r3, r3, #24
    face:	4313      	orrs	r3, r2
    fad0:	791a      	ldrb	r2, [r3, #4]
    fad2:	2100      	movs	r1, #0
    fad4:	400a      	ands	r2, r1
    fad6:	711a      	strb	r2, [r3, #4]
    fad8:	795a      	ldrb	r2, [r3, #5]
    fada:	2100      	movs	r1, #0
    fadc:	400a      	ands	r2, r1
    fade:	715a      	strb	r2, [r3, #5]
    fae0:	799a      	ldrb	r2, [r3, #6]
    fae2:	2100      	movs	r1, #0
    fae4:	400a      	ands	r2, r1
    fae6:	719a      	strb	r2, [r3, #6]
    fae8:	79da      	ldrb	r2, [r3, #7]
    faea:	2100      	movs	r1, #0
    faec:	400a      	ands	r2, r1
    faee:	71da      	strb	r2, [r3, #7]
}
    faf0:	e020      	b.n	fb34 <JoinDutyCycleCallback+0x200>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    faf2:	4b12      	ldr	r3, [pc, #72]	; (fb3c <JoinDutyCycleCallback+0x208>)
    faf4:	7d1a      	ldrb	r2, [r3, #20]
    faf6:	7d59      	ldrb	r1, [r3, #21]
    faf8:	0209      	lsls	r1, r1, #8
    fafa:	430a      	orrs	r2, r1
    fafc:	7d99      	ldrb	r1, [r3, #22]
    fafe:	0409      	lsls	r1, r1, #16
    fb00:	430a      	orrs	r2, r1
    fb02:	7ddb      	ldrb	r3, [r3, #23]
    fb04:	061b      	lsls	r3, r3, #24
    fb06:	4313      	orrs	r3, r2
    fb08:	7a1b      	ldrb	r3, [r3, #8]
    fb0a:	0018      	movs	r0, r3
    fb0c:	4b11      	ldr	r3, [pc, #68]	; (fb54 <JoinDutyCycleCallback+0x220>)
    fb0e:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    fb10:	4b0a      	ldr	r3, [pc, #40]	; (fb3c <JoinDutyCycleCallback+0x208>)
    fb12:	333f      	adds	r3, #63	; 0x3f
    fb14:	781a      	ldrb	r2, [r3, #0]
    fb16:	2100      	movs	r1, #0
    fb18:	400a      	ands	r2, r1
    fb1a:	701a      	strb	r2, [r3, #0]
    fb1c:	785a      	ldrb	r2, [r3, #1]
    fb1e:	2100      	movs	r1, #0
    fb20:	400a      	ands	r2, r1
    fb22:	705a      	strb	r2, [r3, #1]
    fb24:	789a      	ldrb	r2, [r3, #2]
    fb26:	2100      	movs	r1, #0
    fb28:	400a      	ands	r2, r1
    fb2a:	709a      	strb	r2, [r3, #2]
    fb2c:	78da      	ldrb	r2, [r3, #3]
    fb2e:	2100      	movs	r1, #0
    fb30:	400a      	ands	r2, r1
    fb32:	70da      	strb	r2, [r3, #3]
}
    fb34:	46c0      	nop			; (mov r8, r8)
    fb36:	46bd      	mov	sp, r7
    fb38:	b003      	add	sp, #12
    fb3a:	bd90      	pop	{r4, r7, pc}
    fb3c:	200014a8 	.word	0x200014a8
    fb40:	0020c49b 	.word	0x0020c49b
    fb44:	ffdf3b65 	.word	0xffdf3b65
    fb48:	0000f935 	.word	0x0000f935
    fb4c:	7fffffff 	.word	0x7fffffff
    fb50:	000159bd 	.word	0x000159bd
    fb54:	00015cfd 	.word	0x00015cfd

0000fb58 <JoinBackoffCallback>:

void JoinBackoffCallback (uint8_t param)
{
    fb58:	b590      	push	{r4, r7, lr}
    fb5a:	b085      	sub	sp, #20
    fb5c:	af02      	add	r7, sp, #8
    fb5e:	0002      	movs	r2, r0
    fb60:	1dfb      	adds	r3, r7, #7
    fb62:	701a      	strb	r2, [r3, #0]
	RegParams.joinbccount ++;
    fb64:	4b0f      	ldr	r3, [pc, #60]	; (fba4 <JoinBackoffCallback+0x4c>)
    fb66:	2243      	movs	r2, #67	; 0x43
    fb68:	5c9b      	ldrb	r3, [r3, r2]
    fb6a:	3301      	adds	r3, #1
    fb6c:	b2d9      	uxtb	r1, r3
    fb6e:	4b0d      	ldr	r3, [pc, #52]	; (fba4 <JoinBackoffCallback+0x4c>)
    fb70:	2243      	movs	r2, #67	; 0x43
    fb72:	5499      	strb	r1, [r3, r2]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    fb74:	4b0b      	ldr	r3, [pc, #44]	; (fba4 <JoinBackoffCallback+0x4c>)
    fb76:	7e1a      	ldrb	r2, [r3, #24]
    fb78:	7e59      	ldrb	r1, [r3, #25]
    fb7a:	0209      	lsls	r1, r1, #8
    fb7c:	430a      	orrs	r2, r1
    fb7e:	7e99      	ldrb	r1, [r3, #26]
    fb80:	0409      	lsls	r1, r1, #16
    fb82:	430a      	orrs	r2, r1
    fb84:	7edb      	ldrb	r3, [r3, #27]
    fb86:	061b      	lsls	r3, r3, #24
    fb88:	4313      	orrs	r3, r2
    fb8a:	7818      	ldrb	r0, [r3, #0]
    fb8c:	4a06      	ldr	r2, [pc, #24]	; (fba8 <JoinBackoffCallback+0x50>)
    fb8e:	4907      	ldr	r1, [pc, #28]	; (fbac <JoinBackoffCallback+0x54>)
    fb90:	2300      	movs	r3, #0
    fb92:	9300      	str	r3, [sp, #0]
    fb94:	0013      	movs	r3, r2
    fb96:	2200      	movs	r2, #0
    fb98:	4c05      	ldr	r4, [pc, #20]	; (fbb0 <JoinBackoffCallback+0x58>)
    fb9a:	47a0      	blx	r4
}
    fb9c:	46c0      	nop			; (mov r8, r8)
    fb9e:	46bd      	mov	sp, r7
    fba0:	b003      	add	sp, #12
    fba2:	bd90      	pop	{r4, r7, pc}
    fba4:	200014a8 	.word	0x200014a8
    fba8:	0000fb59 	.word	0x0000fb59
    fbac:	6b49d200 	.word	0x6b49d200
    fbb0:	000159bd 	.word	0x000159bd

0000fbb4 <ValidateDataRate>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the data rate is not supported
 */
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRate (LorawanRegionalAttributes_t attr, void *attrInput)
{
    fbb4:	b580      	push	{r7, lr}
    fbb6:	b084      	sub	sp, #16
    fbb8:	af00      	add	r7, sp, #0
    fbba:	0002      	movs	r2, r0
    fbbc:	6039      	str	r1, [r7, #0]
    fbbe:	1dfb      	adds	r3, r7, #7
    fbc0:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    fbc2:	230f      	movs	r3, #15
    fbc4:	18fb      	adds	r3, r7, r3
    fbc6:	2208      	movs	r2, #8
    fbc8:	701a      	strb	r2, [r3, #0]
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    fbca:	230e      	movs	r3, #14
    fbcc:	18fb      	adds	r3, r7, r3
    fbce:	683a      	ldr	r2, [r7, #0]
    fbd0:	7812      	ldrb	r2, [r2, #0]
    fbd2:	701a      	strb	r2, [r3, #0]

    if (0xf != dataRate)
    fbd4:	230e      	movs	r3, #14
    fbd6:	18fb      	adds	r3, r7, r3
    fbd8:	781b      	ldrb	r3, [r3, #0]
    fbda:	2b0f      	cmp	r3, #15
    fbdc:	d00b      	beq.n	fbf6 <ValidateDataRate+0x42>
    { /* 0xF means keep the current settings & ignore this cmd */
        if ( dataRate > RegParams.minDataRate )
    fbde:	4b09      	ldr	r3, [pc, #36]	; (fc04 <ValidateDataRate+0x50>)
    fbe0:	2224      	movs	r2, #36	; 0x24
    fbe2:	5c9b      	ldrb	r3, [r3, r2]
    fbe4:	220e      	movs	r2, #14
    fbe6:	18ba      	adds	r2, r7, r2
    fbe8:	7812      	ldrb	r2, [r2, #0]
    fbea:	429a      	cmp	r2, r3
    fbec:	d903      	bls.n	fbf6 <ValidateDataRate+0x42>
        {
            result = LORAWAN_INVALID_PARAMETER;
    fbee:	230f      	movs	r3, #15
    fbf0:	18fb      	adds	r3, r7, r3
    fbf2:	220a      	movs	r2, #10
    fbf4:	701a      	strb	r2, [r3, #0]
        }        
    }

    return result;
    fbf6:	230f      	movs	r3, #15
    fbf8:	18fb      	adds	r3, r7, r3
    fbfa:	781b      	ldrb	r3, [r3, #0]
}
    fbfc:	0018      	movs	r0, r3
    fbfe:	46bd      	mov	sp, r7
    fc00:	b004      	add	sp, #16
    fc02:	bd80      	pop	{r7, pc}
    fc04:	200014a8 	.word	0x200014a8

0000fc08 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    fc08:	b580      	push	{r7, lr}
    fc0a:	b084      	sub	sp, #16
    fc0c:	af00      	add	r7, sp, #0
    fc0e:	0002      	movs	r2, r0
    fc10:	6039      	str	r1, [r7, #0]
    fc12:	1dfb      	adds	r3, r7, #7
    fc14:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    fc16:	230f      	movs	r3, #15
    fc18:	18fb      	adds	r3, r7, r3
    fc1a:	220a      	movs	r2, #10
    fc1c:	701a      	strb	r2, [r3, #0]
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    fc1e:	230d      	movs	r3, #13
    fc20:	18fb      	adds	r3, r7, r3
    fc22:	683a      	ldr	r2, [r7, #0]
    fc24:	7812      	ldrb	r2, [r2, #0]
    fc26:	701a      	strb	r2, [r3, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    fc28:	230e      	movs	r3, #14
    fc2a:	18fb      	adds	r3, r7, r3
    fc2c:	2200      	movs	r2, #0
    fc2e:	701a      	strb	r2, [r3, #0]
    fc30:	e053      	b.n	fcda <ValidateSupportedDr+0xd2>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    fc32:	4b31      	ldr	r3, [pc, #196]	; (fcf8 <ValidateSupportedDr+0xf0>)
    fc34:	791a      	ldrb	r2, [r3, #4]
    fc36:	7959      	ldrb	r1, [r3, #5]
    fc38:	0209      	lsls	r1, r1, #8
    fc3a:	430a      	orrs	r2, r1
    fc3c:	7999      	ldrb	r1, [r3, #6]
    fc3e:	0409      	lsls	r1, r1, #16
    fc40:	430a      	orrs	r2, r1
    fc42:	79db      	ldrb	r3, [r3, #7]
    fc44:	061b      	lsls	r3, r3, #24
    fc46:	4313      	orrs	r3, r2
    fc48:	001a      	movs	r2, r3
    fc4a:	230e      	movs	r3, #14
    fc4c:	18fb      	adds	r3, r7, r3
    fc4e:	781b      	ldrb	r3, [r3, #0]
    fc50:	005b      	lsls	r3, r3, #1
    fc52:	18d3      	adds	r3, r2, r3
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	2b00      	cmp	r3, #0
    fc58:	d038      	beq.n	fccc <ValidateSupportedDr+0xc4>
    fc5a:	230d      	movs	r3, #13
    fc5c:	18fb      	adds	r3, r7, r3
    fc5e:	781a      	ldrb	r2, [r3, #0]
    fc60:	4b25      	ldr	r3, [pc, #148]	; (fcf8 <ValidateSupportedDr+0xf0>)
    fc62:	7919      	ldrb	r1, [r3, #4]
    fc64:	7958      	ldrb	r0, [r3, #5]
    fc66:	0200      	lsls	r0, r0, #8
    fc68:	4301      	orrs	r1, r0
    fc6a:	7998      	ldrb	r0, [r3, #6]
    fc6c:	0400      	lsls	r0, r0, #16
    fc6e:	4301      	orrs	r1, r0
    fc70:	79db      	ldrb	r3, [r3, #7]
    fc72:	061b      	lsls	r3, r3, #24
    fc74:	430b      	orrs	r3, r1
    fc76:	0019      	movs	r1, r3
    fc78:	230e      	movs	r3, #14
    fc7a:	18fb      	adds	r3, r7, r3
    fc7c:	781b      	ldrb	r3, [r3, #0]
    fc7e:	005b      	lsls	r3, r3, #1
    fc80:	18cb      	adds	r3, r1, r3
    fc82:	785b      	ldrb	r3, [r3, #1]
    fc84:	071b      	lsls	r3, r3, #28
    fc86:	0f1b      	lsrs	r3, r3, #28
    fc88:	b2db      	uxtb	r3, r3
    fc8a:	429a      	cmp	r2, r3
    fc8c:	db1e      	blt.n	fccc <ValidateSupportedDr+0xc4>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    fc8e:	230d      	movs	r3, #13
    fc90:	18fb      	adds	r3, r7, r3
    fc92:	781a      	ldrb	r2, [r3, #0]
    fc94:	4b18      	ldr	r3, [pc, #96]	; (fcf8 <ValidateSupportedDr+0xf0>)
    fc96:	7919      	ldrb	r1, [r3, #4]
    fc98:	7958      	ldrb	r0, [r3, #5]
    fc9a:	0200      	lsls	r0, r0, #8
    fc9c:	4301      	orrs	r1, r0
    fc9e:	7998      	ldrb	r0, [r3, #6]
    fca0:	0400      	lsls	r0, r0, #16
    fca2:	4301      	orrs	r1, r0
    fca4:	79db      	ldrb	r3, [r3, #7]
    fca6:	061b      	lsls	r3, r3, #24
    fca8:	430b      	orrs	r3, r1
    fcaa:	0019      	movs	r1, r3
    fcac:	230e      	movs	r3, #14
    fcae:	18fb      	adds	r3, r7, r3
    fcb0:	781b      	ldrb	r3, [r3, #0]
    fcb2:	005b      	lsls	r3, r3, #1
    fcb4:	18cb      	adds	r3, r1, r3
    fcb6:	785b      	ldrb	r3, [r3, #1]
    fcb8:	061b      	lsls	r3, r3, #24
    fcba:	0f1b      	lsrs	r3, r3, #28
    fcbc:	b2db      	uxtb	r3, r3
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    fcbe:	429a      	cmp	r2, r3
    fcc0:	dc04      	bgt.n	fccc <ValidateSupportedDr+0xc4>
		{
			result = LORAWAN_SUCCESS;
    fcc2:	230f      	movs	r3, #15
    fcc4:	18fb      	adds	r3, r7, r3
    fcc6:	2208      	movs	r2, #8
    fcc8:	701a      	strb	r2, [r3, #0]
			break;
    fcca:	e00e      	b.n	fcea <ValidateSupportedDr+0xe2>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    fccc:	230e      	movs	r3, #14
    fcce:	18fb      	adds	r3, r7, r3
    fcd0:	781a      	ldrb	r2, [r3, #0]
    fcd2:	230e      	movs	r3, #14
    fcd4:	18fb      	adds	r3, r7, r3
    fcd6:	3201      	adds	r2, #1
    fcd8:	701a      	strb	r2, [r3, #0]
    fcda:	230e      	movs	r3, #14
    fcdc:	18fb      	adds	r3, r7, r3
    fcde:	781b      	ldrb	r3, [r3, #0]
    fce0:	4a05      	ldr	r2, [pc, #20]	; (fcf8 <ValidateSupportedDr+0xf0>)
    fce2:	212a      	movs	r1, #42	; 0x2a
    fce4:	5652      	ldrsb	r2, [r2, r1]
    fce6:	4293      	cmp	r3, r2
    fce8:	dba3      	blt.n	fc32 <ValidateSupportedDr+0x2a>
		}
	}
	return result;	
    fcea:	230f      	movs	r3, #15
    fcec:	18fb      	adds	r3, r7, r3
    fcee:	781b      	ldrb	r3, [r3, #0]
}
    fcf0:	0018      	movs	r0, r3
    fcf2:	46bd      	mov	sp, r7
    fcf4:	b004      	add	sp, #16
    fcf6:	bd80      	pop	{r7, pc}
    fcf8:	200014a8 	.word	0x200014a8

0000fcfc <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    fcfc:	b580      	push	{r7, lr}
    fcfe:	b084      	sub	sp, #16
    fd00:	af00      	add	r7, sp, #0
    fd02:	0002      	movs	r2, r0
    fd04:	6039      	str	r1, [r7, #0]
    fd06:	1dfb      	adds	r3, r7, #7
    fd08:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    fd0a:	230f      	movs	r3, #15
    fd0c:	18fb      	adds	r3, r7, r3
    fd0e:	2208      	movs	r2, #8
    fd10:	701a      	strb	r2, [r3, #0]
	uint32_t FreqNew = *(uint32_t *)attrInput;
    fd12:	683b      	ldr	r3, [r7, #0]
    fd14:	681b      	ldr	r3, [r3, #0]
    fd16:	60bb      	str	r3, [r7, #8]
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    fd18:	68bb      	ldr	r3, [r7, #8]
    fd1a:	4a0d      	ldr	r2, [pc, #52]	; (fd50 <ValidateRxFreqT1+0x54>)
    fd1c:	4293      	cmp	r3, r2
    fd1e:	d90c      	bls.n	fd3a <ValidateRxFreqT1+0x3e>
    fd20:	68bb      	ldr	r3, [r7, #8]
    fd22:	4a0c      	ldr	r2, [pc, #48]	; (fd54 <ValidateRxFreqT1+0x58>)
    fd24:	4293      	cmp	r3, r2
    fd26:	d808      	bhi.n	fd3a <ValidateRxFreqT1+0x3e>
    fd28:	68bb      	ldr	r3, [r7, #8]
    fd2a:	4a0b      	ldr	r2, [pc, #44]	; (fd58 <ValidateRxFreqT1+0x5c>)
    fd2c:	189a      	adds	r2, r3, r2
    fd2e:	4b0b      	ldr	r3, [pc, #44]	; (fd5c <ValidateRxFreqT1+0x60>)
    fd30:	490b      	ldr	r1, [pc, #44]	; (fd60 <ValidateRxFreqT1+0x64>)
    fd32:	0010      	movs	r0, r2
    fd34:	4798      	blx	r3
    fd36:	1e0b      	subs	r3, r1, #0
    fd38:	d003      	beq.n	fd42 <ValidateRxFreqT1+0x46>
	{
		result = LORAWAN_INVALID_PARAMETER;
    fd3a:	230f      	movs	r3, #15
    fd3c:	18fb      	adds	r3, r7, r3
    fd3e:	220a      	movs	r2, #10
    fd40:	701a      	strb	r2, [r3, #0]
	}
	return result;
    fd42:	230f      	movs	r3, #15
    fd44:	18fb      	adds	r3, r7, r3
    fd46:	781b      	ldrb	r3, [r3, #0]
}
    fd48:	0018      	movs	r0, r3
    fd4a:	46bd      	mov	sp, r7
    fd4c:	b004      	add	sp, #16
    fd4e:	bd80      	pop	{r7, pc}
    fd50:	3708709f 	.word	0x3708709f
    fd54:	374886e0 	.word	0x374886e0
    fd58:	c8f78f60 	.word	0xc8f78f60
    fd5c:	00021175 	.word	0x00021175
    fd60:	000927c0 	.word	0x000927c0

0000fd64 <ValidateTxFreqT1>:

static StackRetStatus_t ValidateTxFreqT1(LorawanRegionalAttributes_t attr, void *attrInput)
{
    fd64:	b590      	push	{r4, r7, lr}
    fd66:	b087      	sub	sp, #28
    fd68:	af00      	add	r7, sp, #0
    fd6a:	0002      	movs	r2, r0
    fd6c:	6039      	str	r1, [r7, #0]
    fd6e:	1dfb      	adds	r3, r7, #7
    fd70:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    fd72:	2317      	movs	r3, #23
    fd74:	18fb      	adds	r3, r7, r3
    fd76:	2208      	movs	r2, #8
    fd78:	701a      	strb	r2, [r3, #0]
	ValUpdateFreqTx_t  val_freqTx;
	uint8_t ChIndex;
	
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    fd7a:	6839      	ldr	r1, [r7, #0]
    fd7c:	230c      	movs	r3, #12
    fd7e:	18fb      	adds	r3, r7, r3
    fd80:	2208      	movs	r2, #8
    fd82:	0018      	movs	r0, r3
    fd84:	4b1b      	ldr	r3, [pc, #108]	; (fdf4 <ValidateTxFreqT1+0x90>)
    fd86:	4798      	blx	r3
	ChIndex = val_freqTx.channelIndex;
    fd88:	2316      	movs	r3, #22
    fd8a:	18fb      	adds	r3, r7, r3
    fd8c:	220c      	movs	r2, #12
    fd8e:	18ba      	adds	r2, r7, r2
    fd90:	7912      	ldrb	r2, [r2, #4]
    fd92:	701a      	strb	r2, [r3, #0]
	if(ChIndex > RegParams.maxChannels)
    fd94:	2316      	movs	r3, #22
    fd96:	18fb      	adds	r3, r7, r3
    fd98:	781b      	ldrb	r3, [r3, #0]
    fd9a:	4a17      	ldr	r2, [pc, #92]	; (fdf8 <ValidateTxFreqT1+0x94>)
    fd9c:	212a      	movs	r1, #42	; 0x2a
    fd9e:	5652      	ldrsb	r2, [r2, r1]
    fda0:	4293      	cmp	r3, r2
    fda2:	dd03      	ble.n	fdac <ValidateTxFreqT1+0x48>
	{
		result = LORAWAN_INVALID_PARAMETER;
    fda4:	2317      	movs	r3, #23
    fda6:	18fb      	adds	r3, r7, r3
    fda8:	220a      	movs	r2, #10
    fdaa:	701a      	strb	r2, [r3, #0]
	}
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    fdac:	230c      	movs	r3, #12
    fdae:	18fb      	adds	r3, r7, r3
    fdb0:	681c      	ldr	r4, [r3, #0]
    fdb2:	2316      	movs	r3, #22
    fdb4:	18fb      	adds	r3, r7, r3
    fdb6:	781b      	ldrb	r3, [r3, #0]
    fdb8:	0018      	movs	r0, r3
    fdba:	4b10      	ldr	r3, [pc, #64]	; (fdfc <ValidateTxFreqT1+0x98>)
    fdbc:	4798      	blx	r3
    fdbe:	0003      	movs	r3, r0
    fdc0:	429c      	cmp	r4, r3
    fdc2:	d00f      	beq.n	fde4 <ValidateTxFreqT1+0x80>
	   val_freqTx.frequencyNew != GenerateFrequency2(ChIndex))
    fdc4:	230c      	movs	r3, #12
    fdc6:	18fb      	adds	r3, r7, r3
    fdc8:	681c      	ldr	r4, [r3, #0]
    fdca:	2316      	movs	r3, #22
    fdcc:	18fb      	adds	r3, r7, r3
    fdce:	781b      	ldrb	r3, [r3, #0]
    fdd0:	0018      	movs	r0, r3
    fdd2:	4b0b      	ldr	r3, [pc, #44]	; (fe00 <ValidateTxFreqT1+0x9c>)
    fdd4:	4798      	blx	r3
    fdd6:	0003      	movs	r3, r0
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    fdd8:	429c      	cmp	r4, r3
    fdda:	d003      	beq.n	fde4 <ValidateTxFreqT1+0x80>
	{
		result = LORAWAN_INVALID_PARAMETER;
    fddc:	2317      	movs	r3, #23
    fdde:	18fb      	adds	r3, r7, r3
    fde0:	220a      	movs	r2, #10
    fde2:	701a      	strb	r2, [r3, #0]
	}
	return result;
    fde4:	2317      	movs	r3, #23
    fde6:	18fb      	adds	r3, r7, r3
    fde8:	781b      	ldrb	r3, [r3, #0]
}
    fdea:	0018      	movs	r0, r3
    fdec:	46bd      	mov	sp, r7
    fdee:	b007      	add	sp, #28
    fdf0:	bd90      	pop	{r4, r7, pc}
    fdf2:	46c0      	nop			; (mov r8, r8)
    fdf4:	00024149 	.word	0x00024149
    fdf8:	200014a8 	.word	0x200014a8
    fdfc:	0000d685 	.word	0x0000d685
    fe00:	0000d6d9 	.word	0x0000d6d9

0000fe04 <ValidateDataRange>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRange(LorawanRegionalAttributes_t attr, void *attrInput)
{
    fe04:	b580      	push	{r7, lr}
    fe06:	b086      	sub	sp, #24
    fe08:	af00      	add	r7, sp, #0
    fe0a:	0002      	movs	r2, r0
    fe0c:	6039      	str	r1, [r7, #0]
    fe0e:	1dfb      	adds	r3, r7, #7
    fe10:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    fe12:	2317      	movs	r3, #23
    fe14:	18fb      	adds	r3, r7, r3
    fe16:	2208      	movs	r2, #8
    fe18:	701a      	strb	r2, [r3, #0]
	ValUpdateDrange_t val_drange;
	uint8_t chId;
	uint8_t dataRateMin, dataRateMax;
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    fe1a:	2316      	movs	r3, #22
    fe1c:	18fb      	adds	r3, r7, r3
    fe1e:	494a      	ldr	r1, [pc, #296]	; (ff48 <ValidateDataRange+0x144>)
    fe20:	2252      	movs	r2, #82	; 0x52
    fe22:	32ff      	adds	r2, #255	; 0xff
    fe24:	5c8a      	ldrb	r2, [r1, r2]
    fe26:	701a      	strb	r2, [r3, #0]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    fe28:	2310      	movs	r3, #16
    fe2a:	18fa      	adds	r2, r7, r3
    fe2c:	683b      	ldr	r3, [r7, #0]
    fe2e:	0010      	movs	r0, r2
    fe30:	0019      	movs	r1, r3
    fe32:	2302      	movs	r3, #2
    fe34:	001a      	movs	r2, r3
    fe36:	4b45      	ldr	r3, [pc, #276]	; (ff4c <ValidateDataRange+0x148>)
    fe38:	4798      	blx	r3
	
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    fe3a:	2310      	movs	r3, #16
    fe3c:	18fb      	adds	r3, r7, r3
    fe3e:	785b      	ldrb	r3, [r3, #1]
    fe40:	220f      	movs	r2, #15
    fe42:	4013      	ands	r3, r2
    fe44:	b2da      	uxtb	r2, r3
    fe46:	230f      	movs	r3, #15
    fe48:	18fb      	adds	r3, r7, r3
    fe4a:	701a      	strb	r2, [r3, #0]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    fe4c:	2310      	movs	r3, #16
    fe4e:	18fb      	adds	r3, r7, r3
    fe50:	785b      	ldrb	r3, [r3, #1]
    fe52:	091b      	lsrs	r3, r3, #4
    fe54:	b2da      	uxtb	r2, r3
    fe56:	230e      	movs	r3, #14
    fe58:	18fb      	adds	r3, r7, r3
    fe5a:	701a      	strb	r2, [r3, #0]
	chId = val_drange.channelIndex;
    fe5c:	2315      	movs	r3, #21
    fe5e:	18fb      	adds	r3, r7, r3
    fe60:	2210      	movs	r2, #16
    fe62:	18ba      	adds	r2, r7, r2
    fe64:	7812      	ldrb	r2, [r2, #0]
    fe66:	701a      	strb	r2, [r3, #0]
	
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    fe68:	230e      	movs	r3, #14
    fe6a:	18fb      	adds	r3, r7, r3
    fe6c:	0019      	movs	r1, r3
    fe6e:	2010      	movs	r0, #16
    fe70:	4b37      	ldr	r3, [pc, #220]	; (ff50 <ValidateDataRange+0x14c>)
    fe72:	4798      	blx	r3
    fe74:	0003      	movs	r3, r0
    fe76:	2b08      	cmp	r3, #8
    fe78:	d15b      	bne.n	ff32 <ValidateDataRange+0x12e>
    fe7a:	230f      	movs	r3, #15
    fe7c:	18fb      	adds	r3, r7, r3
    fe7e:	0019      	movs	r1, r3
    fe80:	2010      	movs	r0, #16
    fe82:	4b33      	ldr	r3, [pc, #204]	; (ff50 <ValidateDataRange+0x14c>)
    fe84:	4798      	blx	r3
    fe86:	0003      	movs	r3, r0
    fe88:	2b08      	cmp	r3, #8
    fe8a:	d152      	bne.n	ff32 <ValidateDataRange+0x12e>
    fe8c:	230e      	movs	r3, #14
    fe8e:	18fb      	adds	r3, r7, r3
    fe90:	781a      	ldrb	r2, [r3, #0]
    fe92:	230f      	movs	r3, #15
    fe94:	18fb      	adds	r3, r7, r3
    fe96:	781b      	ldrb	r3, [r3, #0]
    fe98:	429a      	cmp	r2, r3
    fe9a:	d34a      	bcc.n	ff32 <ValidateDataRange+0x12e>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    fe9c:	4a2a      	ldr	r2, [pc, #168]	; (ff48 <ValidateDataRange+0x144>)
    fe9e:	23aa      	movs	r3, #170	; 0xaa
    fea0:	005b      	lsls	r3, r3, #1
    fea2:	5cd3      	ldrb	r3, [r2, r3]
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    fea4:	2215      	movs	r2, #21
    fea6:	18ba      	adds	r2, r7, r2
    fea8:	7812      	ldrb	r2, [r2, #0]
    feaa:	429a      	cmp	r2, r3
    feac:	d20f      	bcs.n	fece <ValidateDataRange+0xca>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    feae:	230f      	movs	r3, #15
    feb0:	18fb      	adds	r3, r7, r3
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	2216      	movs	r2, #22
    feb6:	18ba      	adds	r2, r7, r2
    feb8:	7812      	ldrb	r2, [r2, #0]
    feba:	429a      	cmp	r2, r3
    febc:	d039      	beq.n	ff32 <ValidateDataRange+0x12e>
    febe:	230e      	movs	r3, #14
    fec0:	18fb      	adds	r3, r7, r3
    fec2:	781b      	ldrb	r3, [r3, #0]
    fec4:	2216      	movs	r2, #22
    fec6:	18ba      	adds	r2, r7, r2
    fec8:	7812      	ldrb	r2, [r2, #0]
    feca:	429a      	cmp	r2, r3
    fecc:	d031      	beq.n	ff32 <ValidateDataRange+0x12e>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    fece:	4a1e      	ldr	r2, [pc, #120]	; (ff48 <ValidateDataRange+0x144>)
    fed0:	23aa      	movs	r3, #170	; 0xaa
    fed2:	005b      	lsls	r3, r3, #1
    fed4:	5cd3      	ldrb	r3, [r2, r3]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    fed6:	2215      	movs	r2, #21
    fed8:	18ba      	adds	r2, r7, r2
    feda:	7812      	ldrb	r2, [r2, #0]
    fedc:	429a      	cmp	r2, r3
    fede:	d30f      	bcc.n	ff00 <ValidateDataRange+0xfc>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    fee0:	2315      	movs	r3, #21
    fee2:	18fb      	adds	r3, r7, r3
    fee4:	781b      	ldrb	r3, [r3, #0]
    fee6:	4a18      	ldr	r2, [pc, #96]	; (ff48 <ValidateDataRange+0x144>)
    fee8:	212a      	movs	r1, #42	; 0x2a
    feea:	5652      	ldrsb	r2, [r2, r1]
    feec:	4293      	cmp	r3, r2
    feee:	da07      	bge.n	ff00 <ValidateDataRange+0xfc>
    fef0:	230f      	movs	r3, #15
    fef2:	18fb      	adds	r3, r7, r3
    fef4:	781b      	ldrb	r3, [r3, #0]
    fef6:	2216      	movs	r2, #22
    fef8:	18ba      	adds	r2, r7, r2
    fefa:	7812      	ldrb	r2, [r2, #0]
    fefc:	429a      	cmp	r2, r3
    fefe:	d118      	bne.n	ff32 <ValidateDataRange+0x12e>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    ff00:	4a11      	ldr	r2, [pc, #68]	; (ff48 <ValidateDataRange+0x144>)
    ff02:	23aa      	movs	r3, #170	; 0xaa
    ff04:	005b      	lsls	r3, r3, #1
    ff06:	5cd3      	ldrb	r3, [r2, r3]
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    ff08:	2215      	movs	r2, #21
    ff0a:	18ba      	adds	r2, r7, r2
    ff0c:	7812      	ldrb	r2, [r2, #0]
    ff0e:	429a      	cmp	r2, r3
    ff10:	d313      	bcc.n	ff3a <ValidateDataRange+0x136>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    ff12:	2315      	movs	r3, #21
    ff14:	18fb      	adds	r3, r7, r3
    ff16:	781b      	ldrb	r3, [r3, #0]
    ff18:	4a0b      	ldr	r2, [pc, #44]	; (ff48 <ValidateDataRange+0x144>)
    ff1a:	212a      	movs	r1, #42	; 0x2a
    ff1c:	5652      	ldrsb	r2, [r2, r1]
    ff1e:	4293      	cmp	r3, r2
    ff20:	da0b      	bge.n	ff3a <ValidateDataRange+0x136>
    ff22:	230e      	movs	r3, #14
    ff24:	18fb      	adds	r3, r7, r3
    ff26:	781b      	ldrb	r3, [r3, #0]
    ff28:	2216      	movs	r2, #22
    ff2a:	18ba      	adds	r2, r7, r2
    ff2c:	7812      	ldrb	r2, [r2, #0]
    ff2e:	429a      	cmp	r2, r3
    ff30:	d003      	beq.n	ff3a <ValidateDataRange+0x136>
    {
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    ff32:	2317      	movs	r3, #23
    ff34:	18fb      	adds	r3, r7, r3
    ff36:	220a      	movs	r2, #10
    ff38:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
    ff3a:	2317      	movs	r3, #23
    ff3c:	18fb      	adds	r3, r7, r3
    ff3e:	781b      	ldrb	r3, [r3, #0]
}
    ff40:	0018      	movs	r0, r3
    ff42:	46bd      	mov	sp, r7
    ff44:	b006      	add	sp, #24
    ff46:	bd80      	pop	{r7, pc}
    ff48:	200014a8 	.word	0x200014a8
    ff4c:	00024149 	.word	0x00024149
    ff50:	0000d735 	.word	0x0000d735

0000ff54 <ValidateDataRangeT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateDataRangeT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
    ff54:	b580      	push	{r7, lr}
    ff56:	b084      	sub	sp, #16
    ff58:	af00      	add	r7, sp, #0
    ff5a:	0002      	movs	r2, r0
    ff5c:	6039      	str	r1, [r7, #0]
    ff5e:	1dfb      	adds	r3, r7, #7
    ff60:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ff62:	230f      	movs	r3, #15
    ff64:	18fb      	adds	r3, r7, r3
    ff66:	2208      	movs	r2, #8
    ff68:	701a      	strb	r2, [r3, #0]
	ValUpdateDrange_t val_drange;
	uint8_t dataRateMin, dataRateMax;
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    ff6a:	230c      	movs	r3, #12
    ff6c:	18fa      	adds	r2, r7, r3
    ff6e:	683b      	ldr	r3, [r7, #0]
    ff70:	0010      	movs	r0, r2
    ff72:	0019      	movs	r1, r3
    ff74:	2302      	movs	r3, #2
    ff76:	001a      	movs	r2, r3
    ff78:	4b1b      	ldr	r3, [pc, #108]	; (ffe8 <ValidateDataRangeT2+0x94>)
    ff7a:	4798      	blx	r3
	
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    ff7c:	230c      	movs	r3, #12
    ff7e:	18fb      	adds	r3, r7, r3
    ff80:	785b      	ldrb	r3, [r3, #1]
    ff82:	220f      	movs	r2, #15
    ff84:	4013      	ands	r3, r2
    ff86:	b2da      	uxtb	r2, r3
    ff88:	230b      	movs	r3, #11
    ff8a:	18fb      	adds	r3, r7, r3
    ff8c:	701a      	strb	r2, [r3, #0]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    ff8e:	230c      	movs	r3, #12
    ff90:	18fb      	adds	r3, r7, r3
    ff92:	785b      	ldrb	r3, [r3, #1]
    ff94:	091b      	lsrs	r3, r3, #4
    ff96:	b2da      	uxtb	r2, r3
    ff98:	230a      	movs	r3, #10
    ff9a:	18fb      	adds	r3, r7, r3
    ff9c:	701a      	strb	r2, [r3, #0]
	
	if((ValidateDataRate(RX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS) || (ValidateDataRate(RX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS)
    ff9e:	230b      	movs	r3, #11
    ffa0:	18fb      	adds	r3, r7, r3
    ffa2:	0019      	movs	r1, r3
    ffa4:	200f      	movs	r0, #15
    ffa6:	4b11      	ldr	r3, [pc, #68]	; (ffec <ValidateDataRangeT2+0x98>)
    ffa8:	4798      	blx	r3
    ffaa:	0003      	movs	r3, r0
    ffac:	2b08      	cmp	r3, #8
    ffae:	d110      	bne.n	ffd2 <ValidateDataRangeT2+0x7e>
    ffb0:	230a      	movs	r3, #10
    ffb2:	18fb      	adds	r3, r7, r3
    ffb4:	0019      	movs	r1, r3
    ffb6:	200f      	movs	r0, #15
    ffb8:	4b0c      	ldr	r3, [pc, #48]	; (ffec <ValidateDataRangeT2+0x98>)
    ffba:	4798      	blx	r3
    ffbc:	0003      	movs	r3, r0
    ffbe:	2b08      	cmp	r3, #8
    ffc0:	d107      	bne.n	ffd2 <ValidateDataRangeT2+0x7e>
	   || (dataRateMax < dataRateMin) )
    ffc2:	230a      	movs	r3, #10
    ffc4:	18fb      	adds	r3, r7, r3
    ffc6:	781a      	ldrb	r2, [r3, #0]
    ffc8:	230b      	movs	r3, #11
    ffca:	18fb      	adds	r3, r7, r3
    ffcc:	781b      	ldrb	r3, [r3, #0]
    ffce:	429a      	cmp	r2, r3
    ffd0:	d203      	bcs.n	ffda <ValidateDataRangeT2+0x86>
	{
		retVal = LORAWAN_INVALID_PARAMETER;
    ffd2:	230f      	movs	r3, #15
    ffd4:	18fb      	adds	r3, r7, r3
    ffd6:	220a      	movs	r2, #10
    ffd8:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
    ffda:	230f      	movs	r3, #15
    ffdc:	18fb      	adds	r3, r7, r3
    ffde:	781b      	ldrb	r3, [r3, #0]
}
    ffe0:	0018      	movs	r0, r3
    ffe2:	46bd      	mov	sp, r7
    ffe4:	b004      	add	sp, #16
    ffe6:	bd80      	pop	{r7, pc}
    ffe8:	00024149 	.word	0x00024149
    ffec:	0000fbb5 	.word	0x0000fbb5

0000fff0 <ValidateRx1DataRateOffset>:
#endif

static StackRetStatus_t ValidateRx1DataRateOffset(LorawanRegionalAttributes_t attr, void *attrInput)
{
    fff0:	b580      	push	{r7, lr}
    fff2:	b084      	sub	sp, #16
    fff4:	af00      	add	r7, sp, #0
    fff6:	0002      	movs	r2, r0
    fff8:	6039      	str	r1, [r7, #0]
    fffa:	1dfb      	adds	r3, r7, #7
    fffc:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    fffe:	230f      	movs	r3, #15
   10000:	18fb      	adds	r3, r7, r3
   10002:	220a      	movs	r2, #10
   10004:	701a      	strb	r2, [r3, #0]
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
   10006:	230e      	movs	r3, #14
   10008:	18fb      	adds	r3, r7, r3
   1000a:	683a      	ldr	r2, [r7, #0]
   1000c:	7812      	ldrb	r2, [r2, #0]
   1000e:	701a      	strb	r2, [r3, #0]
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
   10010:	230e      	movs	r3, #14
   10012:	18fb      	adds	r3, r7, r3
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	4a08      	ldr	r2, [pc, #32]	; (10038 <ValidateRx1DataRateOffset+0x48>)
   10018:	212c      	movs	r1, #44	; 0x2c
   1001a:	5652      	ldrsb	r2, [r2, r1]
   1001c:	4293      	cmp	r3, r2
   1001e:	dc03      	bgt.n	10028 <ValidateRx1DataRateOffset+0x38>
	{
		retVal = LORAWAN_SUCCESS;
   10020:	230f      	movs	r3, #15
   10022:	18fb      	adds	r3, r7, r3
   10024:	2208      	movs	r2, #8
   10026:	701a      	strb	r2, [r3, #0]
	}
	
	return retVal;
   10028:	230f      	movs	r3, #15
   1002a:	18fb      	adds	r3, r7, r3
   1002c:	781b      	ldrb	r3, [r3, #0]
}
   1002e:	0018      	movs	r0, r3
   10030:	46bd      	mov	sp, r7
   10032:	b004      	add	sp, #16
   10034:	bd80      	pop	{r7, pc}
   10036:	46c0      	nop			; (mov r8, r8)
   10038:	200014a8 	.word	0x200014a8

0001003c <ValidateFreq>:

#if(EU_BAND == 1)
static StackRetStatus_t ValidateFreq (LorawanRegionalAttributes_t attr, void *attrInput)
{
   1003c:	b580      	push	{r7, lr}
   1003e:	b084      	sub	sp, #16
   10040:	af00      	add	r7, sp, #0
   10042:	0002      	movs	r2, r0
   10044:	6039      	str	r1, [r7, #0]
   10046:	1dfb      	adds	r3, r7, #7
   10048:	701a      	strb	r2, [r3, #0]
	uint32_t frequencyNew = *(uint32_t *)attrInput;
   1004a:	683b      	ldr	r3, [r7, #0]
   1004c:	681b      	ldr	r3, [r3, #0]
   1004e:	60bb      	str	r3, [r7, #8]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   10050:	230f      	movs	r3, #15
   10052:	18fb      	adds	r3, r7, r3
   10054:	2208      	movs	r2, #8
   10056:	701a      	strb	r2, [r3, #0]

    if(getSubBandId(frequencyNew) == 0xFF)
   10058:	68bb      	ldr	r3, [r7, #8]
   1005a:	0018      	movs	r0, r3
   1005c:	4b07      	ldr	r3, [pc, #28]	; (1007c <ValidateFreq+0x40>)
   1005e:	4798      	blx	r3
   10060:	0003      	movs	r3, r0
   10062:	2bff      	cmp	r3, #255	; 0xff
   10064:	d103      	bne.n	1006e <ValidateFreq+0x32>
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   10066:	230f      	movs	r3, #15
   10068:	18fb      	adds	r3, r7, r3
   1006a:	220a      	movs	r2, #10
   1006c:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
   1006e:	230f      	movs	r3, #15
   10070:	18fb      	adds	r3, r7, r3
   10072:	781b      	ldrb	r3, [r3, #0]
}
   10074:	0018      	movs	r0, r3
   10076:	46bd      	mov	sp, r7
   10078:	b004      	add	sp, #16
   1007a:	bd80      	pop	{r7, pc}
   1007c:	00010201 	.word	0x00010201

00010080 <ValidateTxFreqT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateTxFreqT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10080:	b590      	push	{r4, r7, lr}
   10082:	b087      	sub	sp, #28
   10084:	af00      	add	r7, sp, #0
   10086:	0002      	movs	r2, r0
   10088:	6039      	str	r1, [r7, #0]
   1008a:	1dfb      	adds	r3, r7, #7
   1008c:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   1008e:	2317      	movs	r3, #23
   10090:	18fb      	adds	r3, r7, r3
   10092:	2208      	movs	r2, #8
   10094:	701a      	strb	r2, [r3, #0]
	ValUpdateFreqTx_t  val_freqTx;
	
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
   10096:	6839      	ldr	r1, [r7, #0]
   10098:	230c      	movs	r3, #12
   1009a:	18fb      	adds	r3, r7, r3
   1009c:	2208      	movs	r2, #8
   1009e:	0018      	movs	r0, r3
   100a0:	4b09      	ldr	r3, [pc, #36]	; (100c8 <ValidateTxFreqT2+0x48>)
   100a2:	4798      	blx	r3
	
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
   100a4:	4b09      	ldr	r3, [pc, #36]	; (100cc <ValidateTxFreqT2+0x4c>)
   100a6:	685b      	ldr	r3, [r3, #4]
   100a8:	2217      	movs	r2, #23
   100aa:	18bc      	adds	r4, r7, r2
   100ac:	220c      	movs	r2, #12
   100ae:	18ba      	adds	r2, r7, r2
   100b0:	0011      	movs	r1, r2
   100b2:	2001      	movs	r0, #1
   100b4:	4798      	blx	r3
   100b6:	0003      	movs	r3, r0
   100b8:	7023      	strb	r3, [r4, #0]

	return retVal;
   100ba:	2317      	movs	r3, #23
   100bc:	18fb      	adds	r3, r7, r3
   100be:	781b      	ldrb	r3, [r3, #0]
}
   100c0:	0018      	movs	r0, r3
   100c2:	46bd      	mov	sp, r7
   100c4:	b007      	add	sp, #28
   100c6:	bd90      	pop	{r4, r7, pc}
   100c8:	00024149 	.word	0x00024149
   100cc:	20000dc8 	.word	0x20000dc8

000100d0 <ValidateFreqIN>:
#endif

#if( IND_BAND == 1)
static StackRetStatus_t ValidateFreqIN (LorawanRegionalAttributes_t attr, void *attrInput)
{
   100d0:	b580      	push	{r7, lr}
   100d2:	b084      	sub	sp, #16
   100d4:	af00      	add	r7, sp, #0
   100d6:	0002      	movs	r2, r0
   100d8:	6039      	str	r1, [r7, #0]
   100da:	1dfb      	adds	r3, r7, #7
   100dc:	701a      	strb	r2, [r3, #0]
	uint32_t newFreq = 0;
   100de:	2300      	movs	r3, #0
   100e0:	60bb      	str	r3, [r7, #8]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   100e2:	230f      	movs	r3, #15
   100e4:	18fb      	adds	r3, r7, r3
   100e6:	2208      	movs	r2, #8
   100e8:	701a      	strb	r2, [r3, #0]
	
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
   100ea:	6839      	ldr	r1, [r7, #0]
   100ec:	2308      	movs	r3, #8
   100ee:	18fb      	adds	r3, r7, r3
   100f0:	2204      	movs	r2, #4
   100f2:	0018      	movs	r0, r3
   100f4:	4b0a      	ldr	r3, [pc, #40]	; (10120 <ValidateFreqIN+0x50>)
   100f6:	4798      	blx	r3
	
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
   100f8:	68bb      	ldr	r3, [r7, #8]
   100fa:	4a0a      	ldr	r2, [pc, #40]	; (10124 <ValidateFreqIN+0x54>)
   100fc:	4293      	cmp	r3, r2
   100fe:	d803      	bhi.n	10108 <ValidateFreqIN+0x38>
   10100:	68bb      	ldr	r3, [r7, #8]
   10102:	4a09      	ldr	r2, [pc, #36]	; (10128 <ValidateFreqIN+0x58>)
   10104:	4293      	cmp	r3, r2
   10106:	d803      	bhi.n	10110 <ValidateFreqIN+0x40>
	{
		result = LORAWAN_INVALID_PARAMETER;
   10108:	230f      	movs	r3, #15
   1010a:	18fb      	adds	r3, r7, r3
   1010c:	220a      	movs	r2, #10
   1010e:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
   10110:	230f      	movs	r3, #15
   10112:	18fb      	adds	r3, r7, r3
   10114:	781b      	ldrb	r3, [r3, #0]
}
   10116:	0018      	movs	r0, r3
   10118:	46bd      	mov	sp, r7
   1011a:	b004      	add	sp, #16
   1011c:	bd80      	pop	{r7, pc}
   1011e:	46c0      	nop			; (mov r8, r8)
   10120:	00024149 	.word	0x00024149
   10124:	33ad5ec0 	.word	0x33ad5ec0
   10128:	338eda3f 	.word	0x338eda3f

0001012c <ValidateFreqJP>:
#endif

#if( JPN_BAND == 1 )
static StackRetStatus_t ValidateFreqJP (LorawanRegionalAttributes_t attr, void *attrInput)
{
   1012c:	b580      	push	{r7, lr}
   1012e:	b084      	sub	sp, #16
   10130:	af00      	add	r7, sp, #0
   10132:	0002      	movs	r2, r0
   10134:	6039      	str	r1, [r7, #0]
   10136:	1dfb      	adds	r3, r7, #7
   10138:	701a      	strb	r2, [r3, #0]
	uint32_t newFreq = 0;
   1013a:	2300      	movs	r3, #0
   1013c:	60bb      	str	r3, [r7, #8]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   1013e:	230f      	movs	r3, #15
   10140:	18fb      	adds	r3, r7, r3
   10142:	2208      	movs	r2, #8
   10144:	701a      	strb	r2, [r3, #0]
	
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
   10146:	6839      	ldr	r1, [r7, #0]
   10148:	2308      	movs	r3, #8
   1014a:	18fb      	adds	r3, r7, r3
   1014c:	2204      	movs	r2, #4
   1014e:	0018      	movs	r0, r3
   10150:	4b0a      	ldr	r3, [pc, #40]	; (1017c <ValidateFreqJP+0x50>)
   10152:	4798      	blx	r3
	
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
   10154:	68bb      	ldr	r3, [r7, #8]
   10156:	4a0a      	ldr	r2, [pc, #40]	; (10180 <ValidateFreqJP+0x54>)
   10158:	4293      	cmp	r3, r2
   1015a:	d803      	bhi.n	10164 <ValidateFreqJP+0x38>
   1015c:	68bb      	ldr	r3, [r7, #8]
   1015e:	4a09      	ldr	r2, [pc, #36]	; (10184 <ValidateFreqJP+0x58>)
   10160:	4293      	cmp	r3, r2
   10162:	d803      	bhi.n	1016c <ValidateFreqJP+0x40>
	{
		result = LORAWAN_INVALID_PARAMETER;
   10164:	230f      	movs	r3, #15
   10166:	18fb      	adds	r3, r7, r3
   10168:	220a      	movs	r2, #10
   1016a:	701a      	strb	r2, [r3, #0]
	}
	
	return result;
   1016c:	230f      	movs	r3, #15
   1016e:	18fb      	adds	r3, r7, r3
   10170:	781b      	ldrb	r3, [r3, #0]
}
   10172:	0018      	movs	r0, r3
   10174:	46bd      	mov	sp, r7
   10176:	b004      	add	sp, #16
   10178:	bd80      	pop	{r7, pc}
   1017a:	46c0      	nop			; (mov r8, r8)
   1017c:	00024149 	.word	0x00024149
   10180:	37502800 	.word	0x37502800
   10184:	36d615ff 	.word	0x36d615ff

00010188 <ValidateFreqKR>:
#endif

#if( KR_BAND == 1)
static StackRetStatus_t ValidateFreqKR (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10188:	b580      	push	{r7, lr}
   1018a:	b086      	sub	sp, #24
   1018c:	af00      	add	r7, sp, #0
   1018e:	0002      	movs	r2, r0
   10190:	6039      	str	r1, [r7, #0]
   10192:	1dfb      	adds	r3, r7, #7
   10194:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   10196:	2317      	movs	r3, #23
   10198:	18fb      	adds	r3, r7, r3
   1019a:	220a      	movs	r2, #10
   1019c:	701a      	strb	r2, [r3, #0]
	uint32_t freqwidth = 200000;
   1019e:	4b14      	ldr	r3, [pc, #80]	; (101f0 <ValidateFreqKR+0x68>)
   101a0:	60fb      	str	r3, [r7, #12]
	uint32_t freq = 0, freqNew = 0;
   101a2:	2300      	movs	r3, #0
   101a4:	613b      	str	r3, [r7, #16]
   101a6:	2300      	movs	r3, #0
   101a8:	60bb      	str	r3, [r7, #8]
	
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
   101aa:	6839      	ldr	r1, [r7, #0]
   101ac:	2308      	movs	r3, #8
   101ae:	18fb      	adds	r3, r7, r3
   101b0:	2204      	movs	r2, #4
   101b2:	0018      	movs	r0, r3
   101b4:	4b0f      	ldr	r3, [pc, #60]	; (101f4 <ValidateFreqKR+0x6c>)
   101b6:	4798      	blx	r3
	
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
   101b8:	4b0f      	ldr	r3, [pc, #60]	; (101f8 <ValidateFreqKR+0x70>)
   101ba:	613b      	str	r3, [r7, #16]
   101bc:	e00c      	b.n	101d8 <ValidateFreqKR+0x50>
	{
		if(freq == freqNew)
   101be:	68bb      	ldr	r3, [r7, #8]
   101c0:	693a      	ldr	r2, [r7, #16]
   101c2:	429a      	cmp	r2, r3
   101c4:	d104      	bne.n	101d0 <ValidateFreqKR+0x48>
		{
			result = LORAWAN_SUCCESS;
   101c6:	2317      	movs	r3, #23
   101c8:	18fb      	adds	r3, r7, r3
   101ca:	2208      	movs	r2, #8
   101cc:	701a      	strb	r2, [r3, #0]
			break;
   101ce:	e007      	b.n	101e0 <ValidateFreqKR+0x58>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
   101d0:	693a      	ldr	r2, [r7, #16]
   101d2:	68fb      	ldr	r3, [r7, #12]
   101d4:	18d3      	adds	r3, r2, r3
   101d6:	613b      	str	r3, [r7, #16]
   101d8:	693b      	ldr	r3, [r7, #16]
   101da:	4a08      	ldr	r2, [pc, #32]	; (101fc <ValidateFreqKR+0x74>)
   101dc:	4293      	cmp	r3, r2
   101de:	d9ee      	bls.n	101be <ValidateFreqKR+0x36>
		}
	}
	return result;	
   101e0:	2317      	movs	r3, #23
   101e2:	18fb      	adds	r3, r7, r3
   101e4:	781b      	ldrb	r3, [r3, #0]
}
   101e6:	0018      	movs	r0, r3
   101e8:	46bd      	mov	sp, r7
   101ea:	b006      	add	sp, #24
   101ec:	bd80      	pop	{r7, pc}
   101ee:	46c0      	nop			; (mov r8, r8)
   101f0:	00030d40 	.word	0x00030d40
   101f4:	00024149 	.word	0x00024149
   101f8:	36e3d1a0 	.word	0x36e3d1a0
   101fc:	370870a0 	.word	0x370870a0

00010200 <getSubBandId>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
   10200:	b580      	push	{r7, lr}
   10202:	b084      	sub	sp, #16
   10204:	af00      	add	r7, sp, #0
   10206:	6078      	str	r0, [r7, #4]
	uint8_t subBandId = 0xFF;
   10208:	230f      	movs	r3, #15
   1020a:	18fb      	adds	r3, r7, r3
   1020c:	22ff      	movs	r2, #255	; 0xff
   1020e:	701a      	strb	r2, [r3, #0]
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
   10210:	230e      	movs	r3, #14
   10212:	18fb      	adds	r3, r7, r3
   10214:	2200      	movs	r2, #0
   10216:	701a      	strb	r2, [r3, #0]
   10218:	e051      	b.n	102be <getSubBandId+0xbe>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
   1021a:	4b30      	ldr	r3, [pc, #192]	; (102dc <getSubBandId+0xdc>)
   1021c:	7b1a      	ldrb	r2, [r3, #12]
   1021e:	7b59      	ldrb	r1, [r3, #13]
   10220:	0209      	lsls	r1, r1, #8
   10222:	430a      	orrs	r2, r1
   10224:	7b99      	ldrb	r1, [r3, #14]
   10226:	0409      	lsls	r1, r1, #16
   10228:	430a      	orrs	r2, r1
   1022a:	7bdb      	ldrb	r3, [r3, #15]
   1022c:	061b      	lsls	r3, r3, #24
   1022e:	4313      	orrs	r3, r2
   10230:	0019      	movs	r1, r3
   10232:	230e      	movs	r3, #14
   10234:	18fb      	adds	r3, r7, r3
   10236:	781a      	ldrb	r2, [r3, #0]
   10238:	0013      	movs	r3, r2
   1023a:	005b      	lsls	r3, r3, #1
   1023c:	189b      	adds	r3, r3, r2
   1023e:	009b      	lsls	r3, r3, #2
   10240:	18cb      	adds	r3, r1, r3
   10242:	781a      	ldrb	r2, [r3, #0]
   10244:	7859      	ldrb	r1, [r3, #1]
   10246:	0209      	lsls	r1, r1, #8
   10248:	430a      	orrs	r2, r1
   1024a:	7899      	ldrb	r1, [r3, #2]
   1024c:	0409      	lsls	r1, r1, #16
   1024e:	430a      	orrs	r2, r1
   10250:	78db      	ldrb	r3, [r3, #3]
   10252:	061b      	lsls	r3, r3, #24
   10254:	4313      	orrs	r3, r2
   10256:	001a      	movs	r2, r3
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	429a      	cmp	r2, r3
   1025c:	d828      	bhi.n	102b0 <getSubBandId+0xb0>
   1025e:	4b1f      	ldr	r3, [pc, #124]	; (102dc <getSubBandId+0xdc>)
   10260:	7b1a      	ldrb	r2, [r3, #12]
   10262:	7b59      	ldrb	r1, [r3, #13]
   10264:	0209      	lsls	r1, r1, #8
   10266:	430a      	orrs	r2, r1
   10268:	7b99      	ldrb	r1, [r3, #14]
   1026a:	0409      	lsls	r1, r1, #16
   1026c:	430a      	orrs	r2, r1
   1026e:	7bdb      	ldrb	r3, [r3, #15]
   10270:	061b      	lsls	r3, r3, #24
   10272:	4313      	orrs	r3, r2
   10274:	0019      	movs	r1, r3
   10276:	230e      	movs	r3, #14
   10278:	18fb      	adds	r3, r7, r3
   1027a:	781a      	ldrb	r2, [r3, #0]
   1027c:	0013      	movs	r3, r2
   1027e:	005b      	lsls	r3, r3, #1
   10280:	189b      	adds	r3, r3, r2
   10282:	009b      	lsls	r3, r3, #2
   10284:	18cb      	adds	r3, r1, r3
   10286:	791a      	ldrb	r2, [r3, #4]
   10288:	7959      	ldrb	r1, [r3, #5]
   1028a:	0209      	lsls	r1, r1, #8
   1028c:	430a      	orrs	r2, r1
   1028e:	7999      	ldrb	r1, [r3, #6]
   10290:	0409      	lsls	r1, r1, #16
   10292:	430a      	orrs	r2, r1
   10294:	79db      	ldrb	r3, [r3, #7]
   10296:	061b      	lsls	r3, r3, #24
   10298:	4313      	orrs	r3, r2
   1029a:	001a      	movs	r2, r3
   1029c:	687b      	ldr	r3, [r7, #4]
   1029e:	429a      	cmp	r2, r3
   102a0:	d306      	bcc.n	102b0 <getSubBandId+0xb0>
		{
			subBandId = i;
   102a2:	230f      	movs	r3, #15
   102a4:	18fb      	adds	r3, r7, r3
   102a6:	220e      	movs	r2, #14
   102a8:	18ba      	adds	r2, r7, r2
   102aa:	7812      	ldrb	r2, [r2, #0]
   102ac:	701a      	strb	r2, [r3, #0]
			break;
   102ae:	e00e      	b.n	102ce <getSubBandId+0xce>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
   102b0:	230e      	movs	r3, #14
   102b2:	18fb      	adds	r3, r7, r3
   102b4:	781a      	ldrb	r2, [r3, #0]
   102b6:	230e      	movs	r3, #14
   102b8:	18fb      	adds	r3, r7, r3
   102ba:	3201      	adds	r2, #1
   102bc:	701a      	strb	r2, [r3, #0]
   102be:	4b07      	ldr	r3, [pc, #28]	; (102dc <getSubBandId+0xdc>)
   102c0:	2229      	movs	r2, #41	; 0x29
   102c2:	5c9b      	ldrb	r3, [r3, r2]
   102c4:	220e      	movs	r2, #14
   102c6:	18ba      	adds	r2, r7, r2
   102c8:	7812      	ldrb	r2, [r2, #0]
   102ca:	429a      	cmp	r2, r3
   102cc:	d3a5      	bcc.n	1021a <getSubBandId+0x1a>
	}
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
   102ce:	230f      	movs	r3, #15
   102d0:	18fb      	adds	r3, r7, r3
   102d2:	781b      	ldrb	r3, [r3, #0]
}
   102d4:	0018      	movs	r0, r3
   102d6:	46bd      	mov	sp, r7
   102d8:	b004      	add	sp, #16
   102da:	bd80      	pop	{r7, pc}
   102dc:	200014a8 	.word	0x200014a8

000102e0 <setDataRange>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t setDataRange (LorawanRegionalAttributes_t attr, void *attrInput)
{
   102e0:	b580      	push	{r7, lr}
   102e2:	b084      	sub	sp, #16
   102e4:	af00      	add	r7, sp, #0
   102e6:	0002      	movs	r2, r0
   102e8:	6039      	str	r1, [r7, #0]
   102ea:	1dfb      	adds	r3, r7, #7
   102ec:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   102ee:	230f      	movs	r3, #15
   102f0:	18fb      	adds	r3, r7, r3
   102f2:	2208      	movs	r2, #8
   102f4:	701a      	strb	r2, [r3, #0]
	ValUpdateDrange_t  update_dr;
	
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
   102f6:	2308      	movs	r3, #8
   102f8:	18fa      	adds	r2, r7, r3
   102fa:	683b      	ldr	r3, [r7, #0]
   102fc:	0010      	movs	r0, r2
   102fe:	0019      	movs	r1, r3
   10300:	2302      	movs	r3, #2
   10302:	001a      	movs	r2, r3
   10304:	4b2b      	ldr	r3, [pc, #172]	; (103b4 <setDataRange+0xd4>)
   10306:	4798      	blx	r3
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
   10308:	683b      	ldr	r3, [r7, #0]
   1030a:	0019      	movs	r1, r3
   1030c:	2012      	movs	r0, #18
   1030e:	4b2a      	ldr	r3, [pc, #168]	; (103b8 <setDataRange+0xd8>)
   10310:	4798      	blx	r3
   10312:	0003      	movs	r3, r0
   10314:	2b08      	cmp	r3, #8
   10316:	d108      	bne.n	1032a <setDataRange+0x4a>
   10318:	2308      	movs	r3, #8
   1031a:	18fb      	adds	r3, r7, r3
   1031c:	0019      	movs	r1, r3
   1031e:	2015      	movs	r0, #21
   10320:	4b26      	ldr	r3, [pc, #152]	; (103bc <setDataRange+0xdc>)
   10322:	4798      	blx	r3
   10324:	0003      	movs	r3, r0
   10326:	2b08      	cmp	r3, #8
   10328:	d004      	beq.n	10334 <setDataRange+0x54>
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   1032a:	230f      	movs	r3, #15
   1032c:	18fb      	adds	r3, r7, r3
   1032e:	220a      	movs	r2, #10
   10330:	701a      	strb	r2, [r3, #0]
   10332:	e038      	b.n	103a6 <setDataRange+0xc6>
	}
	else
	{
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
   10334:	4b22      	ldr	r3, [pc, #136]	; (103c0 <setDataRange+0xe0>)
   10336:	791a      	ldrb	r2, [r3, #4]
   10338:	7959      	ldrb	r1, [r3, #5]
   1033a:	0209      	lsls	r1, r1, #8
   1033c:	430a      	orrs	r2, r1
   1033e:	7999      	ldrb	r1, [r3, #6]
   10340:	0409      	lsls	r1, r1, #16
   10342:	430a      	orrs	r2, r1
   10344:	79db      	ldrb	r3, [r3, #7]
   10346:	061b      	lsls	r3, r3, #24
   10348:	4313      	orrs	r3, r2
   1034a:	001a      	movs	r2, r3
   1034c:	2308      	movs	r3, #8
   1034e:	18fb      	adds	r3, r7, r3
   10350:	781b      	ldrb	r3, [r3, #0]
   10352:	005b      	lsls	r3, r3, #1
   10354:	18d3      	adds	r3, r2, r3
   10356:	2208      	movs	r2, #8
   10358:	18ba      	adds	r2, r7, r2
   1035a:	7852      	ldrb	r2, [r2, #1]
   1035c:	705a      	strb	r2, [r3, #1]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   1035e:	4b18      	ldr	r3, [pc, #96]	; (103c0 <setDataRange+0xe0>)
   10360:	4a18      	ldr	r2, [pc, #96]	; (103c4 <setDataRange+0xe4>)
   10362:	5c9a      	ldrb	r2, [r3, r2]
   10364:	2184      	movs	r1, #132	; 0x84
   10366:	0089      	lsls	r1, r1, #2
   10368:	5c5b      	ldrb	r3, [r3, r1]
   1036a:	021b      	lsls	r3, r3, #8
   1036c:	4313      	orrs	r3, r2
   1036e:	b29b      	uxth	r3, r3
   10370:	0a1b      	lsrs	r3, r3, #8
   10372:	b29a      	uxth	r2, r3
   10374:	230e      	movs	r3, #14
   10376:	18fb      	adds	r3, r7, r3
   10378:	701a      	strb	r2, [r3, #0]
   1037a:	4b11      	ldr	r3, [pc, #68]	; (103c0 <setDataRange+0xe0>)
   1037c:	4a11      	ldr	r2, [pc, #68]	; (103c4 <setDataRange+0xe4>)
   1037e:	5c9a      	ldrb	r2, [r3, r2]
   10380:	2184      	movs	r1, #132	; 0x84
   10382:	0089      	lsls	r1, r1, #2
   10384:	5c5b      	ldrb	r3, [r3, r1]
   10386:	021b      	lsls	r3, r3, #8
   10388:	4313      	orrs	r3, r2
   1038a:	b29a      	uxth	r2, r3
   1038c:	230d      	movs	r3, #13
   1038e:	18fb      	adds	r3, r7, r3
   10390:	701a      	strb	r2, [r3, #0]
   10392:	230d      	movs	r3, #13
   10394:	18fb      	adds	r3, r7, r3
   10396:	781a      	ldrb	r2, [r3, #0]
   10398:	230e      	movs	r3, #14
   1039a:	18fb      	adds	r3, r7, r3
   1039c:	781b      	ldrb	r3, [r3, #0]
   1039e:	0011      	movs	r1, r2
   103a0:	0018      	movs	r0, r3
   103a2:	4b09      	ldr	r3, [pc, #36]	; (103c8 <setDataRange+0xe8>)
   103a4:	4798      	blx	r3
#endif
	}
	
	return retVal;
   103a6:	230f      	movs	r3, #15
   103a8:	18fb      	adds	r3, r7, r3
   103aa:	781b      	ldrb	r3, [r3, #0]
}
   103ac:	0018      	movs	r0, r3
   103ae:	46bd      	mov	sp, r7
   103b0:	b004      	add	sp, #16
   103b2:	bd80      	pop	{r7, pc}
   103b4:	00024149 	.word	0x00024149
   103b8:	0000fe05 	.word	0x0000fe05
   103bc:	0000d8b9 	.word	0x0000d8b9
   103c0:	200014a8 	.word	0x200014a8
   103c4:	0000020f 	.word	0x0000020f
   103c8:	00013b45 	.word	0x00013b45

000103cc <setDefaultTxPower>:
#endif
StackRetStatus_t setDefaultTxPower(IsmBand_t ismBand)
{   
   103cc:	b580      	push	{r7, lr}
   103ce:	b084      	sub	sp, #16
   103d0:	af00      	add	r7, sp, #0
   103d2:	0002      	movs	r2, r0
   103d4:	1dfb      	adds	r3, r7, #7
   103d6:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   103d8:	230f      	movs	r3, #15
   103da:	18fb      	adds	r3, r7, r3
   103dc:	2208      	movs	r2, #8
   103de:	701a      	strb	r2, [r3, #0]
	if(ismBand == ISM_EU868)
   103e0:	1dfb      	adds	r3, r7, #7
   103e2:	781b      	ldrb	r3, [r3, #0]
   103e4:	2b00      	cmp	r3, #0
   103e6:	d104      	bne.n	103f2 <setDefaultTxPower+0x26>
	{
			RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
   103e8:	4b25      	ldr	r3, [pc, #148]	; (10480 <setDefaultTxPower+0xb4>)
   103ea:	2227      	movs	r2, #39	; 0x27
   103ec:	2101      	movs	r1, #1
   103ee:	5499      	strb	r1, [r3, r2]
   103f0:	e027      	b.n	10442 <setDefaultTxPower+0x76>
	}
	else if(ismBand == ISM_JPN923)
   103f2:	1dfb      	adds	r3, r7, #7
   103f4:	781b      	ldrb	r3, [r3, #0]
   103f6:	2b05      	cmp	r3, #5
   103f8:	d104      	bne.n	10404 <setDefaultTxPower+0x38>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
   103fa:	4b21      	ldr	r3, [pc, #132]	; (10480 <setDefaultTxPower+0xb4>)
   103fc:	2227      	movs	r2, #39	; 0x27
   103fe:	2101      	movs	r1, #1
   10400:	5499      	strb	r1, [r3, r2]
   10402:	e01e      	b.n	10442 <setDefaultTxPower+0x76>
	}
	else if (ismBand == ISM_KR920)
   10404:	1dfb      	adds	r3, r7, #7
   10406:	781b      	ldrb	r3, [r3, #0]
   10408:	2b04      	cmp	r3, #4
   1040a:	d104      	bne.n	10416 <setDefaultTxPower+0x4a>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
   1040c:	4b1c      	ldr	r3, [pc, #112]	; (10480 <setDefaultTxPower+0xb4>)
   1040e:	2227      	movs	r2, #39	; 0x27
   10410:	2101      	movs	r1, #1
   10412:	5499      	strb	r1, [r3, r2]
   10414:	e015      	b.n	10442 <setDefaultTxPower+0x76>
	}
	else if (ismBand == ISM_ASBAND)
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
	}
	else if(ismBand == ISM_AU915)
   10416:	1dfb      	adds	r3, r7, #7
   10418:	781b      	ldrb	r3, [r3, #0]
   1041a:	2b03      	cmp	r3, #3
   1041c:	d104      	bne.n	10428 <setDefaultTxPower+0x5c>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
   1041e:	4b18      	ldr	r3, [pc, #96]	; (10480 <setDefaultTxPower+0xb4>)
   10420:	2227      	movs	r2, #39	; 0x27
   10422:	2107      	movs	r1, #7
   10424:	5499      	strb	r1, [r3, r2]
   10426:	e00c      	b.n	10442 <setDefaultTxPower+0x76>
	}
	else if(ismBand == ISM_NA915)
   10428:	1dfb      	adds	r3, r7, #7
   1042a:	781b      	ldrb	r3, [r3, #0]
   1042c:	2b02      	cmp	r3, #2
   1042e:	d104      	bne.n	1043a <setDefaultTxPower+0x6e>
	{
		RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
   10430:	4b13      	ldr	r3, [pc, #76]	; (10480 <setDefaultTxPower+0xb4>)
   10432:	2227      	movs	r2, #39	; 0x27
   10434:	2107      	movs	r1, #7
   10436:	5499      	strb	r1, [r3, r2]
   10438:	e003      	b.n	10442 <setDefaultTxPower+0x76>
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
   1043a:	230f      	movs	r3, #15
   1043c:	18fb      	adds	r3, r7, r3
   1043e:	220a      	movs	r2, #10
   10440:	701a      	strb	r2, [r3, #0]
	}
#if (ENABLE_PDS==1)
	PDS_STORE(RegParams.MacTxPower);
   10442:	4b0f      	ldr	r3, [pc, #60]	; (10480 <setDefaultTxPower+0xb4>)
   10444:	2227      	movs	r2, #39	; 0x27
   10446:	569b      	ldrsb	r3, [r3, r2]
   10448:	121a      	asrs	r2, r3, #8
   1044a:	230e      	movs	r3, #14
   1044c:	18fb      	adds	r3, r7, r3
   1044e:	701a      	strb	r2, [r3, #0]
   10450:	4b0b      	ldr	r3, [pc, #44]	; (10480 <setDefaultTxPower+0xb4>)
   10452:	2227      	movs	r2, #39	; 0x27
   10454:	569a      	ldrsb	r2, [r3, r2]
   10456:	230d      	movs	r3, #13
   10458:	18fb      	adds	r3, r7, r3
   1045a:	701a      	strb	r2, [r3, #0]
   1045c:	230d      	movs	r3, #13
   1045e:	18fb      	adds	r3, r7, r3
   10460:	781a      	ldrb	r2, [r3, #0]
   10462:	230e      	movs	r3, #14
   10464:	18fb      	adds	r3, r7, r3
   10466:	781b      	ldrb	r3, [r3, #0]
   10468:	0011      	movs	r1, r2
   1046a:	0018      	movs	r0, r3
   1046c:	4b05      	ldr	r3, [pc, #20]	; (10484 <setDefaultTxPower+0xb8>)
   1046e:	4798      	blx	r3
#endif
	return result;
   10470:	230f      	movs	r3, #15
   10472:	18fb      	adds	r3, r7, r3
   10474:	781b      	ldrb	r3, [r3, #0]
}
   10476:	0018      	movs	r0, r3
   10478:	46bd      	mov	sp, r7
   1047a:	b004      	add	sp, #16
   1047c:	bd80      	pop	{r7, pc}
   1047e:	46c0      	nop			; (mov r8, r8)
   10480:	200014a8 	.word	0x200014a8
   10484:	00013b45 	.word	0x00013b45

00010488 <setDataRangeT2>:
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setDataRangeT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10488:	b580      	push	{r7, lr}
   1048a:	b086      	sub	sp, #24
   1048c:	af00      	add	r7, sp, #0
   1048e:	0002      	movs	r2, r0
   10490:	6039      	str	r1, [r7, #0]
   10492:	1dfb      	adds	r3, r7, #7
   10494:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   10496:	2317      	movs	r3, #23
   10498:	18fb      	adds	r3, r7, r3
   1049a:	2208      	movs	r2, #8
   1049c:	701a      	strb	r2, [r3, #0]
	ValUpdateDrange_t  update_dr;
	ValChId_t val_chid;
	
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
   1049e:	2310      	movs	r3, #16
   104a0:	18fa      	adds	r2, r7, r3
   104a2:	683b      	ldr	r3, [r7, #0]
   104a4:	0010      	movs	r0, r2
   104a6:	0019      	movs	r1, r3
   104a8:	2302      	movs	r3, #2
   104aa:	001a      	movs	r2, r3
   104ac:	4b59      	ldr	r3, [pc, #356]	; (10614 <setDataRangeT2+0x18c>)
   104ae:	4798      	blx	r3
	
	val_chid.channelIndex = update_dr.channelIndex;
   104b0:	2310      	movs	r3, #16
   104b2:	18fb      	adds	r3, r7, r3
   104b4:	781a      	ldrb	r2, [r3, #0]
   104b6:	230c      	movs	r3, #12
   104b8:	18fb      	adds	r3, r7, r3
   104ba:	701a      	strb	r2, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
   104bc:	230c      	movs	r3, #12
   104be:	18fb      	adds	r3, r7, r3
   104c0:	2201      	movs	r2, #1
   104c2:	705a      	strb	r2, [r3, #1]
	
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
   104c4:	683b      	ldr	r3, [r7, #0]
   104c6:	0019      	movs	r1, r3
   104c8:	2012      	movs	r0, #18
   104ca:	4b53      	ldr	r3, [pc, #332]	; (10618 <setDataRangeT2+0x190>)
   104cc:	4798      	blx	r3
   104ce:	0003      	movs	r3, r0
   104d0:	2b08      	cmp	r3, #8
   104d2:	d108      	bne.n	104e6 <setDataRangeT2+0x5e>
   104d4:	230c      	movs	r3, #12
   104d6:	18fb      	adds	r3, r7, r3
   104d8:	0019      	movs	r1, r3
   104da:	2015      	movs	r0, #21
   104dc:	4b4f      	ldr	r3, [pc, #316]	; (1061c <setDataRangeT2+0x194>)
   104de:	4798      	blx	r3
   104e0:	0003      	movs	r3, r0
   104e2:	2b08      	cmp	r3, #8
   104e4:	d004      	beq.n	104f0 <setDataRangeT2+0x68>
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   104e6:	2317      	movs	r3, #23
   104e8:	18fb      	adds	r3, r7, r3
   104ea:	220a      	movs	r2, #10
   104ec:	701a      	strb	r2, [r3, #0]
   104ee:	e089      	b.n	10604 <setDataRangeT2+0x17c>
	}
	else
	{
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
   104f0:	4b4b      	ldr	r3, [pc, #300]	; (10620 <setDataRangeT2+0x198>)
   104f2:	791a      	ldrb	r2, [r3, #4]
   104f4:	7959      	ldrb	r1, [r3, #5]
   104f6:	0209      	lsls	r1, r1, #8
   104f8:	430a      	orrs	r2, r1
   104fa:	7999      	ldrb	r1, [r3, #6]
   104fc:	0409      	lsls	r1, r1, #16
   104fe:	430a      	orrs	r2, r1
   10500:	79db      	ldrb	r3, [r3, #7]
   10502:	061b      	lsls	r3, r3, #24
   10504:	4313      	orrs	r3, r2
   10506:	001a      	movs	r2, r3
   10508:	2310      	movs	r3, #16
   1050a:	18fb      	adds	r3, r7, r3
   1050c:	781b      	ldrb	r3, [r3, #0]
   1050e:	005b      	lsls	r3, r3, #1
   10510:	18d3      	adds	r3, r2, r3
   10512:	2210      	movs	r2, #16
   10514:	18ba      	adds	r2, r7, r2
   10516:	7852      	ldrb	r2, [r2, #1]
   10518:	705a      	strb	r2, [r3, #1]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   1051a:	4b41      	ldr	r3, [pc, #260]	; (10620 <setDataRangeT2+0x198>)
   1051c:	4a41      	ldr	r2, [pc, #260]	; (10624 <setDataRangeT2+0x19c>)
   1051e:	5c9a      	ldrb	r2, [r3, r2]
   10520:	2184      	movs	r1, #132	; 0x84
   10522:	0089      	lsls	r1, r1, #2
   10524:	5c5b      	ldrb	r3, [r3, r1]
   10526:	021b      	lsls	r3, r3, #8
   10528:	4313      	orrs	r3, r2
   1052a:	b29b      	uxth	r3, r3
   1052c:	0a1b      	lsrs	r3, r3, #8
   1052e:	b29a      	uxth	r2, r3
   10530:	2316      	movs	r3, #22
   10532:	18fb      	adds	r3, r7, r3
   10534:	701a      	strb	r2, [r3, #0]
   10536:	4b3a      	ldr	r3, [pc, #232]	; (10620 <setDataRangeT2+0x198>)
   10538:	4a3a      	ldr	r2, [pc, #232]	; (10624 <setDataRangeT2+0x19c>)
   1053a:	5c9a      	ldrb	r2, [r3, r2]
   1053c:	2184      	movs	r1, #132	; 0x84
   1053e:	0089      	lsls	r1, r1, #2
   10540:	5c5b      	ldrb	r3, [r3, r1]
   10542:	021b      	lsls	r3, r3, #8
   10544:	4313      	orrs	r3, r2
   10546:	b29a      	uxth	r2, r3
   10548:	2315      	movs	r3, #21
   1054a:	18fb      	adds	r3, r7, r3
   1054c:	701a      	strb	r2, [r3, #0]
   1054e:	2315      	movs	r3, #21
   10550:	18fb      	adds	r3, r7, r3
   10552:	781a      	ldrb	r2, [r3, #0]
   10554:	2316      	movs	r3, #22
   10556:	18fb      	adds	r3, r7, r3
   10558:	781b      	ldrb	r3, [r3, #0]
   1055a:	0011      	movs	r1, r2
   1055c:	0018      	movs	r0, r3
   1055e:	4b32      	ldr	r3, [pc, #200]	; (10628 <setDataRangeT2+0x1a0>)
   10560:	4798      	blx	r3
#endif
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
   10562:	4b2f      	ldr	r3, [pc, #188]	; (10620 <setDataRangeT2+0x198>)
   10564:	7a1a      	ldrb	r2, [r3, #8]
   10566:	7a59      	ldrb	r1, [r3, #9]
   10568:	0209      	lsls	r1, r1, #8
   1056a:	430a      	orrs	r2, r1
   1056c:	7a99      	ldrb	r1, [r3, #10]
   1056e:	0409      	lsls	r1, r1, #16
   10570:	430a      	orrs	r2, r1
   10572:	7adb      	ldrb	r3, [r3, #11]
   10574:	061b      	lsls	r3, r3, #24
   10576:	4313      	orrs	r3, r2
   10578:	0019      	movs	r1, r3
   1057a:	2310      	movs	r3, #16
   1057c:	18fb      	adds	r3, r7, r3
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	001a      	movs	r2, r3
   10582:	0013      	movs	r3, r2
   10584:	005b      	lsls	r3, r3, #1
   10586:	189b      	adds	r3, r3, r2
   10588:	009b      	lsls	r3, r3, #2
   1058a:	18ca      	adds	r2, r1, r3
   1058c:	4b24      	ldr	r3, [pc, #144]	; (10620 <setDataRangeT2+0x198>)
   1058e:	7a19      	ldrb	r1, [r3, #8]
   10590:	7a58      	ldrb	r0, [r3, #9]
   10592:	0200      	lsls	r0, r0, #8
   10594:	4301      	orrs	r1, r0
   10596:	7a98      	ldrb	r0, [r3, #10]
   10598:	0400      	lsls	r0, r0, #16
   1059a:	4301      	orrs	r1, r0
   1059c:	7adb      	ldrb	r3, [r3, #11]
   1059e:	061b      	lsls	r3, r3, #24
   105a0:	430b      	orrs	r3, r1
   105a2:	0018      	movs	r0, r3
   105a4:	2310      	movs	r3, #16
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	781b      	ldrb	r3, [r3, #0]
   105aa:	0019      	movs	r1, r3
   105ac:	000b      	movs	r3, r1
   105ae:	005b      	lsls	r3, r3, #1
   105b0:	185b      	adds	r3, r3, r1
   105b2:	009b      	lsls	r3, r3, #2
   105b4:	18c3      	adds	r3, r0, r3
   105b6:	7adb      	ldrb	r3, [r3, #11]
   105b8:	2102      	movs	r1, #2
   105ba:	430b      	orrs	r3, r1
   105bc:	b2db      	uxtb	r3, r3
   105be:	72d3      	strb	r3, [r2, #11]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   105c0:	4b17      	ldr	r3, [pc, #92]	; (10620 <setDataRangeT2+0x198>)
   105c2:	4a1a      	ldr	r2, [pc, #104]	; (1062c <setDataRangeT2+0x1a4>)
   105c4:	5c9a      	ldrb	r2, [r3, r2]
   105c6:	491a      	ldr	r1, [pc, #104]	; (10630 <setDataRangeT2+0x1a8>)
   105c8:	5c5b      	ldrb	r3, [r3, r1]
   105ca:	021b      	lsls	r3, r3, #8
   105cc:	4313      	orrs	r3, r2
   105ce:	b29b      	uxth	r3, r3
   105d0:	0a1b      	lsrs	r3, r3, #8
   105d2:	b29a      	uxth	r2, r3
   105d4:	2314      	movs	r3, #20
   105d6:	18fb      	adds	r3, r7, r3
   105d8:	701a      	strb	r2, [r3, #0]
   105da:	4b11      	ldr	r3, [pc, #68]	; (10620 <setDataRangeT2+0x198>)
   105dc:	4a13      	ldr	r2, [pc, #76]	; (1062c <setDataRangeT2+0x1a4>)
   105de:	5c9a      	ldrb	r2, [r3, r2]
   105e0:	4913      	ldr	r1, [pc, #76]	; (10630 <setDataRangeT2+0x1a8>)
   105e2:	5c5b      	ldrb	r3, [r3, r1]
   105e4:	021b      	lsls	r3, r3, #8
   105e6:	4313      	orrs	r3, r2
   105e8:	b29a      	uxth	r2, r3
   105ea:	2313      	movs	r3, #19
   105ec:	18fb      	adds	r3, r7, r3
   105ee:	701a      	strb	r2, [r3, #0]
   105f0:	2313      	movs	r3, #19
   105f2:	18fb      	adds	r3, r7, r3
   105f4:	781a      	ldrb	r2, [r3, #0]
   105f6:	2314      	movs	r3, #20
   105f8:	18fb      	adds	r3, r7, r3
   105fa:	781b      	ldrb	r3, [r3, #0]
   105fc:	0011      	movs	r1, r2
   105fe:	0018      	movs	r0, r3
   10600:	4b09      	ldr	r3, [pc, #36]	; (10628 <setDataRangeT2+0x1a0>)
   10602:	4798      	blx	r3
#endif
	}
	
	return retVal;
   10604:	2317      	movs	r3, #23
   10606:	18fb      	adds	r3, r7, r3
   10608:	781b      	ldrb	r3, [r3, #0]
}
   1060a:	0018      	movs	r0, r3
   1060c:	46bd      	mov	sp, r7
   1060e:	b006      	add	sp, #24
   10610:	bd80      	pop	{r7, pc}
   10612:	46c0      	nop			; (mov r8, r8)
   10614:	00024149 	.word	0x00024149
   10618:	0000ff55 	.word	0x0000ff55
   1061c:	0000d905 	.word	0x0000d905
   10620:	200014a8 	.word	0x200014a8
   10624:	0000020f 	.word	0x0000020f
   10628:	00013b45 	.word	0x00013b45
   1062c:	00000211 	.word	0x00000211
   10630:	00000212 	.word	0x00000212

00010634 <setChannelIdStatus>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t setChannelIdStatus (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10634:	b580      	push	{r7, lr}
   10636:	b084      	sub	sp, #16
   10638:	af00      	add	r7, sp, #0
   1063a:	0002      	movs	r2, r0
   1063c:	6039      	str	r1, [r7, #0]
   1063e:	1dfb      	adds	r3, r7, #7
   10640:	701a      	strb	r2, [r3, #0]
	UpdateChId_t updateChid;
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   10642:	230f      	movs	r3, #15
   10644:	18fb      	adds	r3, r7, r3
   10646:	2208      	movs	r2, #8
   10648:	701a      	strb	r2, [r3, #0]
	if(ValidateChannelId(CHANNEL_ID, attrInput) == LORAWAN_SUCCESS)
   1064a:	683b      	ldr	r3, [r7, #0]
   1064c:	0019      	movs	r1, r3
   1064e:	2015      	movs	r0, #21
   10650:	4b11      	ldr	r3, [pc, #68]	; (10698 <setChannelIdStatus+0x64>)
   10652:	4798      	blx	r3
   10654:	0003      	movs	r3, r0
   10656:	2b08      	cmp	r3, #8
   10658:	d113      	bne.n	10682 <setChannelIdStatus+0x4e>
	{
		memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
   1065a:	230c      	movs	r3, #12
   1065c:	18fa      	adds	r2, r7, r3
   1065e:	683b      	ldr	r3, [r7, #0]
   10660:	0010      	movs	r0, r2
   10662:	0019      	movs	r1, r3
   10664:	2302      	movs	r3, #2
   10666:	001a      	movs	r2, r3
   10668:	4b0c      	ldr	r3, [pc, #48]	; (1069c <setChannelIdStatus+0x68>)
   1066a:	4798      	blx	r3
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
   1066c:	230c      	movs	r3, #12
   1066e:	18fb      	adds	r3, r7, r3
   10670:	781a      	ldrb	r2, [r3, #0]
   10672:	230c      	movs	r3, #12
   10674:	18fb      	adds	r3, r7, r3
   10676:	785b      	ldrb	r3, [r3, #1]
   10678:	0019      	movs	r1, r3
   1067a:	0010      	movs	r0, r2
   1067c:	4b08      	ldr	r3, [pc, #32]	; (106a0 <setChannelIdStatus+0x6c>)
   1067e:	4798      	blx	r3
   10680:	e003      	b.n	1068a <setChannelIdStatus+0x56>
	}
	else
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   10682:	230f      	movs	r3, #15
   10684:	18fb      	adds	r3, r7, r3
   10686:	220a      	movs	r2, #10
   10688:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
   1068a:	230f      	movs	r3, #15
   1068c:	18fb      	adds	r3, r7, r3
   1068e:	781b      	ldrb	r3, [r3, #0]
}
   10690:	0018      	movs	r0, r3
   10692:	46bd      	mov	sp, r7
   10694:	b004      	add	sp, #16
   10696:	bd80      	pop	{r7, pc}
   10698:	0000d8b9 	.word	0x0000d8b9
   1069c:	00024149 	.word	0x00024149
   106a0:	00010969 	.word	0x00010969

000106a4 <setChannelIdStatusT2>:
#endif

#if( EU_BAND == 1 || IND_BAND == 1)
static StackRetStatus_t setChannelIdStatusT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
   106a4:	b580      	push	{r7, lr}
   106a6:	b084      	sub	sp, #16
   106a8:	af00      	add	r7, sp, #0
   106aa:	0002      	movs	r2, r0
   106ac:	6039      	str	r1, [r7, #0]
   106ae:	1dfb      	adds	r3, r7, #7
   106b0:	701a      	strb	r2, [r3, #0]
	UpdateChId_t updateChid;
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   106b2:	230f      	movs	r3, #15
   106b4:	18fb      	adds	r3, r7, r3
   106b6:	2208      	movs	r2, #8
   106b8:	701a      	strb	r2, [r3, #0]
	ValChId_t valChid;
	
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
   106ba:	230c      	movs	r3, #12
   106bc:	18fa      	adds	r2, r7, r3
   106be:	683b      	ldr	r3, [r7, #0]
   106c0:	0010      	movs	r0, r2
   106c2:	0019      	movs	r1, r3
   106c4:	2302      	movs	r3, #2
   106c6:	001a      	movs	r2, r3
   106c8:	4b1d      	ldr	r3, [pc, #116]	; (10740 <setChannelIdStatusT2+0x9c>)
   106ca:	4798      	blx	r3
	
	valChid.channelIndex = updateChid.channelIndex;
   106cc:	230c      	movs	r3, #12
   106ce:	18fb      	adds	r3, r7, r3
   106d0:	781a      	ldrb	r2, [r3, #0]
   106d2:	2308      	movs	r3, #8
   106d4:	18fb      	adds	r3, r7, r3
   106d6:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
   106d8:	2308      	movs	r3, #8
   106da:	18fb      	adds	r3, r7, r3
   106dc:	2201      	movs	r2, #1
   106de:	705a      	strb	r2, [r3, #1]
	
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
   106e0:	2308      	movs	r3, #8
   106e2:	18fb      	adds	r3, r7, r3
   106e4:	0019      	movs	r1, r3
   106e6:	2015      	movs	r0, #21
   106e8:	4b16      	ldr	r3, [pc, #88]	; (10744 <setChannelIdStatusT2+0xa0>)
   106ea:	4798      	blx	r3
   106ec:	0003      	movs	r3, r0
   106ee:	2b08      	cmp	r3, #8
   106f0:	d11a      	bne.n	10728 <setChannelIdStatusT2+0x84>
	{
		if(RegParams.band ==  ISM_IND865)
   106f2:	4b15      	ldr	r3, [pc, #84]	; (10748 <setChannelIdStatusT2+0xa4>)
   106f4:	222f      	movs	r2, #47	; 0x2f
   106f6:	5c9b      	ldrb	r3, [r3, r2]
   106f8:	2b0f      	cmp	r3, #15
   106fa:	d10a      	bne.n	10712 <setChannelIdStatusT2+0x6e>
		{
#if ((IND_BAND) == 1)
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
   106fc:	230c      	movs	r3, #12
   106fe:	18fb      	adds	r3, r7, r3
   10700:	781a      	ldrb	r2, [r3, #0]
   10702:	230c      	movs	r3, #12
   10704:	18fb      	adds	r3, r7, r3
   10706:	785b      	ldrb	r3, [r3, #1]
   10708:	0019      	movs	r1, r3
   1070a:	0010      	movs	r0, r2
   1070c:	4b0f      	ldr	r3, [pc, #60]	; (1074c <setChannelIdStatusT2+0xa8>)
   1070e:	4798      	blx	r3
   10710:	e00e      	b.n	10730 <setChannelIdStatusT2+0x8c>
#endif
		}
		else
		{
#if ((EU_BAND) == 1)
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
   10712:	230c      	movs	r3, #12
   10714:	18fb      	adds	r3, r7, r3
   10716:	781a      	ldrb	r2, [r3, #0]
   10718:	230c      	movs	r3, #12
   1071a:	18fb      	adds	r3, r7, r3
   1071c:	785b      	ldrb	r3, [r3, #1]
   1071e:	0019      	movs	r1, r3
   10720:	0010      	movs	r0, r2
   10722:	4b0b      	ldr	r3, [pc, #44]	; (10750 <setChannelIdStatusT2+0xac>)
   10724:	4798      	blx	r3
   10726:	e003      	b.n	10730 <setChannelIdStatusT2+0x8c>
		}

	}
	else
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   10728:	230f      	movs	r3, #15
   1072a:	18fb      	adds	r3, r7, r3
   1072c:	220a      	movs	r2, #10
   1072e:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
   10730:	230f      	movs	r3, #15
   10732:	18fb      	adds	r3, r7, r3
   10734:	781b      	ldrb	r3, [r3, #0]
}
   10736:	0018      	movs	r0, r3
   10738:	46bd      	mov	sp, r7
   1073a:	b004      	add	sp, #16
   1073c:	bd80      	pop	{r7, pc}
   1073e:	46c0      	nop			; (mov r8, r8)
   10740:	00024149 	.word	0x00024149
   10744:	0000d905 	.word	0x0000d905
   10748:	200014a8 	.word	0x200014a8
   1074c:	00010969 	.word	0x00010969
   10750:	00010a2d 	.word	0x00010a2d

00010754 <setChannelIdStatusT3>:
#endif

#if( AS_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChannelIdStatusT3 (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10754:	b580      	push	{r7, lr}
   10756:	b084      	sub	sp, #16
   10758:	af00      	add	r7, sp, #0
   1075a:	0002      	movs	r2, r0
   1075c:	6039      	str	r1, [r7, #0]
   1075e:	1dfb      	adds	r3, r7, #7
   10760:	701a      	strb	r2, [r3, #0]
	UpdateChId_t updateChid;
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   10762:	230f      	movs	r3, #15
   10764:	18fb      	adds	r3, r7, r3
   10766:	2208      	movs	r2, #8
   10768:	701a      	strb	r2, [r3, #0]
	ValChId_t valChid;
	
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
   1076a:	230c      	movs	r3, #12
   1076c:	18fa      	adds	r2, r7, r3
   1076e:	683b      	ldr	r3, [r7, #0]
   10770:	0010      	movs	r0, r2
   10772:	0019      	movs	r1, r3
   10774:	2302      	movs	r3, #2
   10776:	001a      	movs	r2, r3
   10778:	4b1d      	ldr	r3, [pc, #116]	; (107f0 <setChannelIdStatusT3+0x9c>)
   1077a:	4798      	blx	r3
	
	valChid.channelIndex = updateChid.channelIndex;
   1077c:	230c      	movs	r3, #12
   1077e:	18fb      	adds	r3, r7, r3
   10780:	781a      	ldrb	r2, [r3, #0]
   10782:	2308      	movs	r3, #8
   10784:	18fb      	adds	r3, r7, r3
   10786:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
   10788:	2308      	movs	r3, #8
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	2201      	movs	r2, #1
   1078e:	705a      	strb	r2, [r3, #1]
	
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
   10790:	2308      	movs	r3, #8
   10792:	18fb      	adds	r3, r7, r3
   10794:	0019      	movs	r1, r3
   10796:	2015      	movs	r0, #21
   10798:	4b16      	ldr	r3, [pc, #88]	; (107f4 <setChannelIdStatusT3+0xa0>)
   1079a:	4798      	blx	r3
   1079c:	0003      	movs	r3, r0
   1079e:	2b08      	cmp	r3, #8
   107a0:	d11a      	bne.n	107d8 <setChannelIdStatusT3+0x84>
	{
		if( RegParams.band == ISM_KR920)
   107a2:	4b15      	ldr	r3, [pc, #84]	; (107f8 <setChannelIdStatusT3+0xa4>)
   107a4:	222f      	movs	r2, #47	; 0x2f
   107a6:	5c9b      	ldrb	r3, [r3, r2]
   107a8:	2b04      	cmp	r3, #4
   107aa:	d10a      	bne.n	107c2 <setChannelIdStatusT3+0x6e>
		{
#if (KR_BAND == 1)
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
   107ac:	230c      	movs	r3, #12
   107ae:	18fb      	adds	r3, r7, r3
   107b0:	781a      	ldrb	r2, [r3, #0]
   107b2:	230c      	movs	r3, #12
   107b4:	18fb      	adds	r3, r7, r3
   107b6:	785b      	ldrb	r3, [r3, #1]
   107b8:	0019      	movs	r1, r3
   107ba:	0010      	movs	r0, r2
   107bc:	4b0f      	ldr	r3, [pc, #60]	; (107fc <setChannelIdStatusT3+0xa8>)
   107be:	4798      	blx	r3
   107c0:	e00e      	b.n	107e0 <setChannelIdStatusT3+0x8c>
#endif
		}
		else
		{
#if (((AS_BAND) == 1) || ((JPN_BAND) == 1))
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
   107c2:	230c      	movs	r3, #12
   107c4:	18fb      	adds	r3, r7, r3
   107c6:	781a      	ldrb	r2, [r3, #0]
   107c8:	230c      	movs	r3, #12
   107ca:	18fb      	adds	r3, r7, r3
   107cc:	785b      	ldrb	r3, [r3, #1]
   107ce:	0019      	movs	r1, r3
   107d0:	0010      	movs	r0, r2
   107d2:	4b0b      	ldr	r3, [pc, #44]	; (10800 <setChannelIdStatusT3+0xac>)
   107d4:	4798      	blx	r3
   107d6:	e003      	b.n	107e0 <setChannelIdStatusT3+0x8c>
#endif
		}
	}
	else
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   107d8:	230f      	movs	r3, #15
   107da:	18fb      	adds	r3, r7, r3
   107dc:	220a      	movs	r2, #10
   107de:	701a      	strb	r2, [r3, #0]
	}
	return retVal;
   107e0:	230f      	movs	r3, #15
   107e2:	18fb      	adds	r3, r7, r3
   107e4:	781b      	ldrb	r3, [r3, #0]
}
   107e6:	0018      	movs	r0, r3
   107e8:	46bd      	mov	sp, r7
   107ea:	b004      	add	sp, #16
   107ec:	bd80      	pop	{r7, pc}
   107ee:	46c0      	nop			; (mov r8, r8)
   107f0:	00024149 	.word	0x00024149
   107f4:	0000d905 	.word	0x0000d905
   107f8:	200014a8 	.word	0x200014a8
   107fc:	00010d3d 	.word	0x00010d3d
   10800:	00010c25 	.word	0x00010c25

00010804 <setNewChannelsT1>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t setNewChannelsT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10804:	b580      	push	{r7, lr}
   10806:	b086      	sub	sp, #24
   10808:	af00      	add	r7, sp, #0
   1080a:	0002      	movs	r2, r0
   1080c:	6039      	str	r1, [r7, #0]
   1080e:	1dfb      	adds	r3, r7, #7
   10810:	701a      	strb	r2, [r3, #0]
	UpdateNewCh_t updateNewCh;
	uint16_t chMask = 0;
   10812:	2314      	movs	r3, #20
   10814:	18fb      	adds	r3, r7, r3
   10816:	2200      	movs	r2, #0
   10818:	801a      	strh	r2, [r3, #0]
	uint8_t chMaskCtrl = 0;
   1081a:	230b      	movs	r3, #11
   1081c:	18fb      	adds	r3, r7, r3
   1081e:	2200      	movs	r2, #0
   10820:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
   10822:	2317      	movs	r3, #23
   10824:	18fb      	adds	r3, r7, r3
   10826:	2208      	movs	r2, #8
   10828:	701a      	strb	r2, [r3, #0]
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
   1082a:	6839      	ldr	r1, [r7, #0]
   1082c:	230c      	movs	r3, #12
   1082e:	18fb      	adds	r3, r7, r3
   10830:	2204      	movs	r2, #4
   10832:	0018      	movs	r0, r3
   10834:	4b47      	ldr	r3, [pc, #284]	; (10954 <setNewChannelsT1+0x150>)
   10836:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
   10838:	2314      	movs	r3, #20
   1083a:	18fb      	adds	r3, r7, r3
   1083c:	220c      	movs	r2, #12
   1083e:	18ba      	adds	r2, r7, r2
   10840:	8812      	ldrh	r2, [r2, #0]
   10842:	801a      	strh	r2, [r3, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
   10844:	230c      	movs	r3, #12
   10846:	18fb      	adds	r3, r7, r3
   10848:	789a      	ldrb	r2, [r3, #2]
   1084a:	230b      	movs	r3, #11
   1084c:	18fb      	adds	r3, r7, r3
   1084e:	701a      	strb	r2, [r3, #0]

	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
   10850:	230b      	movs	r3, #11
   10852:	18fb      	adds	r3, r7, r3
   10854:	0019      	movs	r1, r3
   10856:	201b      	movs	r0, #27
   10858:	4b3f      	ldr	r3, [pc, #252]	; (10958 <setNewChannelsT1+0x154>)
   1085a:	4798      	blx	r3
   1085c:	0003      	movs	r3, r0
   1085e:	2b08      	cmp	r3, #8
   10860:	d16a      	bne.n	10938 <setNewChannelsT1+0x134>
	{
		uint8_t i = 0;
   10862:	2316      	movs	r3, #22
   10864:	18fb      	adds	r3, r7, r3
   10866:	2200      	movs	r2, #0
   10868:	701a      	strb	r2, [r3, #0]
		uint8_t channel = 0;
   1086a:	2313      	movs	r3, #19
   1086c:	18fb      	adds	r3, r7, r3
   1086e:	2200      	movs	r2, #0
   10870:	701a      	strb	r2, [r3, #0]

		channel = chMaskCtrl << SHIFT4;
   10872:	230b      	movs	r3, #11
   10874:	18fb      	adds	r3, r7, r3
   10876:	781a      	ldrb	r2, [r3, #0]
   10878:	2313      	movs	r3, #19
   1087a:	18fb      	adds	r3, r7, r3
   1087c:	0112      	lsls	r2, r2, #4
   1087e:	701a      	strb	r2, [r3, #0]
		switch(chMaskCtrl)
   10880:	230b      	movs	r3, #11
   10882:	18fb      	adds	r3, r7, r3
   10884:	781b      	ldrb	r3, [r3, #0]
   10886:	2b07      	cmp	r3, #7
   10888:	d85c      	bhi.n	10944 <setNewChannelsT1+0x140>
   1088a:	009a      	lsls	r2, r3, #2
   1088c:	4b33      	ldr	r3, [pc, #204]	; (1095c <setNewChannelsT1+0x158>)
   1088e:	18d3      	adds	r3, r2, r3
   10890:	681b      	ldr	r3, [r3, #0]
   10892:	469f      	mov	pc, r3
			case 1:
			case 2:
			case 3:
			case 4:
			{
				EnableChannels2(channel, channel + 15, chMask);
   10894:	2313      	movs	r3, #19
   10896:	18fb      	adds	r3, r7, r3
   10898:	781b      	ldrb	r3, [r3, #0]
   1089a:	330f      	adds	r3, #15
   1089c:	b2d9      	uxtb	r1, r3
   1089e:	2314      	movs	r3, #20
   108a0:	18fb      	adds	r3, r7, r3
   108a2:	881a      	ldrh	r2, [r3, #0]
   108a4:	2313      	movs	r3, #19
   108a6:	18fb      	adds	r3, r7, r3
   108a8:	781b      	ldrb	r3, [r3, #0]
   108aa:	0018      	movs	r0, r3
   108ac:	4b2c      	ldr	r3, [pc, #176]	; (10960 <setNewChannelsT1+0x15c>)
   108ae:	4798      	blx	r3
				break;
   108b0:	e048      	b.n	10944 <setNewChannelsT1+0x140>
			}
			case 5:
			    break;
			case 6:
			{
				for(i = 0; i < 63; i++)
   108b2:	2316      	movs	r3, #22
   108b4:	18fb      	adds	r3, r7, r3
   108b6:	2200      	movs	r2, #0
   108b8:	701a      	strb	r2, [r3, #0]
   108ba:	e00d      	b.n	108d8 <setNewChannelsT1+0xd4>
				{
					UpdateChannelIdStatus(i, ENABLED);
   108bc:	2316      	movs	r3, #22
   108be:	18fb      	adds	r3, r7, r3
   108c0:	781b      	ldrb	r3, [r3, #0]
   108c2:	2101      	movs	r1, #1
   108c4:	0018      	movs	r0, r3
   108c6:	4b27      	ldr	r3, [pc, #156]	; (10964 <setNewChannelsT1+0x160>)
   108c8:	4798      	blx	r3
				for(i = 0; i < 63; i++)
   108ca:	2316      	movs	r3, #22
   108cc:	18fb      	adds	r3, r7, r3
   108ce:	781a      	ldrb	r2, [r3, #0]
   108d0:	2316      	movs	r3, #22
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	3201      	adds	r2, #1
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	2316      	movs	r3, #22
   108da:	18fb      	adds	r3, r7, r3
   108dc:	781b      	ldrb	r3, [r3, #0]
   108de:	2b3e      	cmp	r3, #62	; 0x3e
   108e0:	d9ec      	bls.n	108bc <setNewChannelsT1+0xb8>
				}
				EnableChannels2(64, 71, chMask);
   108e2:	2314      	movs	r3, #20
   108e4:	18fb      	adds	r3, r7, r3
   108e6:	881b      	ldrh	r3, [r3, #0]
   108e8:	001a      	movs	r2, r3
   108ea:	2147      	movs	r1, #71	; 0x47
   108ec:	2040      	movs	r0, #64	; 0x40
   108ee:	4b1c      	ldr	r3, [pc, #112]	; (10960 <setNewChannelsT1+0x15c>)
   108f0:	4798      	blx	r3
			}
			    break;
   108f2:	e027      	b.n	10944 <setNewChannelsT1+0x140>
			case 7:
			{
				for(i = 0; i< 63; i++)
   108f4:	2316      	movs	r3, #22
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	2200      	movs	r2, #0
   108fa:	701a      	strb	r2, [r3, #0]
   108fc:	e00d      	b.n	1091a <setNewChannelsT1+0x116>
				{
					UpdateChannelIdStatus(i, DISABLED);
   108fe:	2316      	movs	r3, #22
   10900:	18fb      	adds	r3, r7, r3
   10902:	781b      	ldrb	r3, [r3, #0]
   10904:	2100      	movs	r1, #0
   10906:	0018      	movs	r0, r3
   10908:	4b16      	ldr	r3, [pc, #88]	; (10964 <setNewChannelsT1+0x160>)
   1090a:	4798      	blx	r3
				for(i = 0; i< 63; i++)
   1090c:	2316      	movs	r3, #22
   1090e:	18fb      	adds	r3, r7, r3
   10910:	781a      	ldrb	r2, [r3, #0]
   10912:	2316      	movs	r3, #22
   10914:	18fb      	adds	r3, r7, r3
   10916:	3201      	adds	r2, #1
   10918:	701a      	strb	r2, [r3, #0]
   1091a:	2316      	movs	r3, #22
   1091c:	18fb      	adds	r3, r7, r3
   1091e:	781b      	ldrb	r3, [r3, #0]
   10920:	2b3e      	cmp	r3, #62	; 0x3e
   10922:	d9ec      	bls.n	108fe <setNewChannelsT1+0xfa>
				}
				EnableChannels2(64, 71, chMask);
   10924:	2314      	movs	r3, #20
   10926:	18fb      	adds	r3, r7, r3
   10928:	881b      	ldrh	r3, [r3, #0]
   1092a:	001a      	movs	r2, r3
   1092c:	2147      	movs	r1, #71	; 0x47
   1092e:	2040      	movs	r0, #64	; 0x40
   10930:	4b0b      	ldr	r3, [pc, #44]	; (10960 <setNewChannelsT1+0x15c>)
   10932:	4798      	blx	r3
				break;
   10934:	46c0      	nop			; (mov r8, r8)
   10936:	e005      	b.n	10944 <setNewChannelsT1+0x140>
			}
		}
	}
	else
	{
		retVal = LORAWAN_INVALID_PARAMETER;
   10938:	2317      	movs	r3, #23
   1093a:	18fb      	adds	r3, r7, r3
   1093c:	220a      	movs	r2, #10
   1093e:	701a      	strb	r2, [r3, #0]
   10940:	e000      	b.n	10944 <setNewChannelsT1+0x140>
			    break;
   10942:	46c0      	nop			; (mov r8, r8)
	}
	return retVal;
   10944:	2317      	movs	r3, #23
   10946:	18fb      	adds	r3, r7, r3
   10948:	781b      	ldrb	r3, [r3, #0]
}
   1094a:	0018      	movs	r0, r3
   1094c:	46bd      	mov	sp, r7
   1094e:	b006      	add	sp, #24
   10950:	bd80      	pop	{r7, pc}
   10952:	46c0      	nop			; (mov r8, r8)
   10954:	00024149 	.word	0x00024149
   10958:	0000db55 	.word	0x0000db55
   1095c:	0002b254 	.word	0x0002b254
   10960:	00010ec1 	.word	0x00010ec1
   10964:	00010969 	.word	0x00010969

00010968 <UpdateChannelIdStatus>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1 || IND_BAND == 1)
static void UpdateChannelIdStatus(uint8_t chid, bool statusNew)
{
   10968:	b580      	push	{r7, lr}
   1096a:	b084      	sub	sp, #16
   1096c:	af00      	add	r7, sp, #0
   1096e:	0002      	movs	r2, r0
   10970:	1dfb      	adds	r3, r7, #7
   10972:	701a      	strb	r2, [r3, #0]
   10974:	1dbb      	adds	r3, r7, #6
   10976:	1c0a      	adds	r2, r1, #0
   10978:	701a      	strb	r2, [r3, #0]
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
   1097a:	1dfb      	adds	r3, r7, #7
   1097c:	781b      	ldrb	r3, [r3, #0]
   1097e:	4a28      	ldr	r2, [pc, #160]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   10980:	212a      	movs	r1, #42	; 0x2a
   10982:	5652      	ldrsb	r2, [r2, r1]
   10984:	4293      	cmp	r3, r2
   10986:	db10      	blt.n	109aa <UpdateChannelIdStatus+0x42>
   10988:	4b25      	ldr	r3, [pc, #148]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   1098a:	222f      	movs	r2, #47	; 0x2f
   1098c:	5c9b      	ldrb	r3, [r3, r2]
   1098e:	001a      	movs	r2, r3
   10990:	230c      	movs	r3, #12
   10992:	4113      	asrs	r3, r2
   10994:	2201      	movs	r2, #1
   10996:	4013      	ands	r3, r2
   10998:	d13e      	bne.n	10a18 <UpdateChannelIdStatus+0xb0>
   1099a:	4a21      	ldr	r2, [pc, #132]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   1099c:	23c2      	movs	r3, #194	; 0xc2
   1099e:	33ff      	adds	r3, #255	; 0xff
   109a0:	5cd3      	ldrb	r3, [r2, r3]
   109a2:	1dfa      	adds	r2, r7, #7
   109a4:	7812      	ldrb	r2, [r2, #0]
   109a6:	429a      	cmp	r2, r3
   109a8:	d336      	bcc.n	10a18 <UpdateChannelIdStatus+0xb0>
	{
		RegParams.pChParams[chid].status = statusNew;
   109aa:	4b1d      	ldr	r3, [pc, #116]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   109ac:	791a      	ldrb	r2, [r3, #4]
   109ae:	7959      	ldrb	r1, [r3, #5]
   109b0:	0209      	lsls	r1, r1, #8
   109b2:	430a      	orrs	r2, r1
   109b4:	7999      	ldrb	r1, [r3, #6]
   109b6:	0409      	lsls	r1, r1, #16
   109b8:	430a      	orrs	r2, r1
   109ba:	79db      	ldrb	r3, [r3, #7]
   109bc:	061b      	lsls	r3, r3, #24
   109be:	4313      	orrs	r3, r2
   109c0:	001a      	movs	r2, r3
   109c2:	1dfb      	adds	r3, r7, #7
   109c4:	781b      	ldrb	r3, [r3, #0]
   109c6:	005b      	lsls	r3, r3, #1
   109c8:	18d3      	adds	r3, r2, r3
   109ca:	1dba      	adds	r2, r7, #6
   109cc:	7812      	ldrb	r2, [r2, #0]
   109ce:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   109d0:	4b13      	ldr	r3, [pc, #76]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   109d2:	4a14      	ldr	r2, [pc, #80]	; (10a24 <UpdateChannelIdStatus+0xbc>)
   109d4:	5c9a      	ldrb	r2, [r3, r2]
   109d6:	2184      	movs	r1, #132	; 0x84
   109d8:	0089      	lsls	r1, r1, #2
   109da:	5c5b      	ldrb	r3, [r3, r1]
   109dc:	021b      	lsls	r3, r3, #8
   109de:	4313      	orrs	r3, r2
   109e0:	b29b      	uxth	r3, r3
   109e2:	0a1b      	lsrs	r3, r3, #8
   109e4:	b29a      	uxth	r2, r3
   109e6:	230f      	movs	r3, #15
   109e8:	18fb      	adds	r3, r7, r3
   109ea:	701a      	strb	r2, [r3, #0]
   109ec:	4b0c      	ldr	r3, [pc, #48]	; (10a20 <UpdateChannelIdStatus+0xb8>)
   109ee:	4a0d      	ldr	r2, [pc, #52]	; (10a24 <UpdateChannelIdStatus+0xbc>)
   109f0:	5c9a      	ldrb	r2, [r3, r2]
   109f2:	2184      	movs	r1, #132	; 0x84
   109f4:	0089      	lsls	r1, r1, #2
   109f6:	5c5b      	ldrb	r3, [r3, r1]
   109f8:	021b      	lsls	r3, r3, #8
   109fa:	4313      	orrs	r3, r2
   109fc:	b29a      	uxth	r2, r3
   109fe:	230e      	movs	r3, #14
   10a00:	18fb      	adds	r3, r7, r3
   10a02:	701a      	strb	r2, [r3, #0]
   10a04:	230e      	movs	r3, #14
   10a06:	18fb      	adds	r3, r7, r3
   10a08:	781a      	ldrb	r2, [r3, #0]
   10a0a:	230f      	movs	r3, #15
   10a0c:	18fb      	adds	r3, r7, r3
   10a0e:	781b      	ldrb	r3, [r3, #0]
   10a10:	0011      	movs	r1, r2
   10a12:	0018      	movs	r0, r3
   10a14:	4b04      	ldr	r3, [pc, #16]	; (10a28 <UpdateChannelIdStatus+0xc0>)
   10a16:	4798      	blx	r3
#endif

		
	}
}
   10a18:	46c0      	nop			; (mov r8, r8)
   10a1a:	46bd      	mov	sp, r7
   10a1c:	b004      	add	sp, #16
   10a1e:	bd80      	pop	{r7, pc}
   10a20:	200014a8 	.word	0x200014a8
   10a24:	0000020f 	.word	0x0000020f
   10a28:	00013b45 	.word	0x00013b45

00010a2c <UpdateChannelIdStatusT2>:
#endif

#if ((EU_BAND) == 1)
static void UpdateChannelIdStatusT2(uint8_t chid, bool statusNew)
{
   10a2c:	b580      	push	{r7, lr}
   10a2e:	b084      	sub	sp, #16
   10a30:	af00      	add	r7, sp, #0
   10a32:	0002      	movs	r2, r0
   10a34:	1dfb      	adds	r3, r7, #7
   10a36:	701a      	strb	r2, [r3, #0]
   10a38:	1dbb      	adds	r3, r7, #6
   10a3a:	1c0a      	adds	r2, r1, #0
   10a3c:	701a      	strb	r2, [r3, #0]
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
   10a3e:	1dfb      	adds	r3, r7, #7
   10a40:	781b      	ldrb	r3, [r3, #0]
   10a42:	4a75      	ldr	r2, [pc, #468]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10a44:	212a      	movs	r1, #42	; 0x2a
   10a46:	5652      	ldrsb	r2, [r2, r1]
   10a48:	4293      	cmp	r3, r2
   10a4a:	db00      	blt.n	10a4e <UpdateChannelIdStatusT2+0x22>
   10a4c:	e0e1      	b.n	10c12 <UpdateChannelIdStatusT2+0x1e6>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
   10a4e:	4b72      	ldr	r3, [pc, #456]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10a50:	7a1a      	ldrb	r2, [r3, #8]
   10a52:	7a59      	ldrb	r1, [r3, #9]
   10a54:	0209      	lsls	r1, r1, #8
   10a56:	430a      	orrs	r2, r1
   10a58:	7a99      	ldrb	r1, [r3, #10]
   10a5a:	0409      	lsls	r1, r1, #16
   10a5c:	430a      	orrs	r2, r1
   10a5e:	7adb      	ldrb	r3, [r3, #11]
   10a60:	061b      	lsls	r3, r3, #24
   10a62:	4313      	orrs	r3, r2
   10a64:	0019      	movs	r1, r3
   10a66:	1dfb      	adds	r3, r7, #7
   10a68:	781a      	ldrb	r2, [r3, #0]
   10a6a:	0013      	movs	r3, r2
   10a6c:	005b      	lsls	r3, r3, #1
   10a6e:	189b      	adds	r3, r3, r2
   10a70:	009b      	lsls	r3, r3, #2
   10a72:	18cb      	adds	r3, r1, r3
   10a74:	7adb      	ldrb	r3, [r3, #11]
   10a76:	001a      	movs	r2, r3
   10a78:	2303      	movs	r3, #3
   10a7a:	4013      	ands	r3, r2
	if(chid < RegParams.maxChannels && /* chid >= RegParams.cmnParams.paramsType2.minNonDefChId && */
   10a7c:	2b03      	cmp	r3, #3
   10a7e:	d000      	beq.n	10a82 <UpdateChannelIdStatusT2+0x56>
   10a80:	e0c7      	b.n	10c12 <UpdateChannelIdStatusT2+0x1e6>
	{
		RegParams.pChParams[chid].status = statusNew;
   10a82:	4b65      	ldr	r3, [pc, #404]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10a84:	791a      	ldrb	r2, [r3, #4]
   10a86:	7959      	ldrb	r1, [r3, #5]
   10a88:	0209      	lsls	r1, r1, #8
   10a8a:	430a      	orrs	r2, r1
   10a8c:	7999      	ldrb	r1, [r3, #6]
   10a8e:	0409      	lsls	r1, r1, #16
   10a90:	430a      	orrs	r2, r1
   10a92:	79db      	ldrb	r3, [r3, #7]
   10a94:	061b      	lsls	r3, r3, #24
   10a96:	4313      	orrs	r3, r2
   10a98:	001a      	movs	r2, r3
   10a9a:	1dfb      	adds	r3, r7, #7
   10a9c:	781b      	ldrb	r3, [r3, #0]
   10a9e:	005b      	lsls	r3, r3, #1
   10aa0:	18d3      	adds	r3, r2, r3
   10aa2:	1dba      	adds	r2, r7, #6
   10aa4:	7812      	ldrb	r2, [r2, #0]
   10aa6:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   10aa8:	4b5b      	ldr	r3, [pc, #364]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10aaa:	4a5c      	ldr	r2, [pc, #368]	; (10c1c <UpdateChannelIdStatusT2+0x1f0>)
   10aac:	5c9a      	ldrb	r2, [r3, r2]
   10aae:	2184      	movs	r1, #132	; 0x84
   10ab0:	0089      	lsls	r1, r1, #2
   10ab2:	5c5b      	ldrb	r3, [r3, r1]
   10ab4:	021b      	lsls	r3, r3, #8
   10ab6:	4313      	orrs	r3, r2
   10ab8:	b29b      	uxth	r3, r3
   10aba:	0a1b      	lsrs	r3, r3, #8
   10abc:	b29a      	uxth	r2, r3
   10abe:	230e      	movs	r3, #14
   10ac0:	18fb      	adds	r3, r7, r3
   10ac2:	701a      	strb	r2, [r3, #0]
   10ac4:	4b54      	ldr	r3, [pc, #336]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10ac6:	4a55      	ldr	r2, [pc, #340]	; (10c1c <UpdateChannelIdStatusT2+0x1f0>)
   10ac8:	5c9a      	ldrb	r2, [r3, r2]
   10aca:	2184      	movs	r1, #132	; 0x84
   10acc:	0089      	lsls	r1, r1, #2
   10ace:	5c5b      	ldrb	r3, [r3, r1]
   10ad0:	021b      	lsls	r3, r3, #8
   10ad2:	4313      	orrs	r3, r2
   10ad4:	b29a      	uxth	r2, r3
   10ad6:	230d      	movs	r3, #13
   10ad8:	18fb      	adds	r3, r7, r3
   10ada:	701a      	strb	r2, [r3, #0]
   10adc:	230d      	movs	r3, #13
   10ade:	18fb      	adds	r3, r7, r3
   10ae0:	781a      	ldrb	r2, [r3, #0]
   10ae2:	230e      	movs	r3, #14
   10ae4:	18fb      	adds	r3, r7, r3
   10ae6:	781b      	ldrb	r3, [r3, #0]
   10ae8:	0011      	movs	r1, r2
   10aea:	0018      	movs	r0, r3
   10aec:	4b4c      	ldr	r3, [pc, #304]	; (10c20 <UpdateChannelIdStatusT2+0x1f4>)
   10aee:	4798      	blx	r3
#endif

		
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
   10af0:	4b49      	ldr	r3, [pc, #292]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10af2:	222f      	movs	r2, #47	; 0x2f
   10af4:	5c9b      	ldrb	r3, [r3, r2]
   10af6:	001a      	movs	r2, r3
   10af8:	2303      	movs	r3, #3
   10afa:	4113      	asrs	r3, r2
   10afc:	2201      	movs	r2, #1
   10afe:	4013      	ands	r3, r2
   10b00:	d100      	bne.n	10b04 <UpdateChannelIdStatusT2+0xd8>
   10b02:	e086      	b.n	10c12 <UpdateChannelIdStatusT2+0x1e6>
   10b04:	1dbb      	adds	r3, r7, #6
   10b06:	781b      	ldrb	r3, [r3, #0]
   10b08:	2201      	movs	r2, #1
   10b0a:	4053      	eors	r3, r2
   10b0c:	b2db      	uxtb	r3, r3
   10b0e:	2b00      	cmp	r3, #0
   10b10:	d100      	bne.n	10b14 <UpdateChannelIdStatusT2+0xe8>
   10b12:	e07e      	b.n	10c12 <UpdateChannelIdStatusT2+0x1e6>
		{
			uint8_t subBandId;
			subBandId = RegParams.pOtherChParams[chid].subBandId;
   10b14:	4b40      	ldr	r3, [pc, #256]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10b16:	7a1a      	ldrb	r2, [r3, #8]
   10b18:	7a59      	ldrb	r1, [r3, #9]
   10b1a:	0209      	lsls	r1, r1, #8
   10b1c:	430a      	orrs	r2, r1
   10b1e:	7a99      	ldrb	r1, [r3, #10]
   10b20:	0409      	lsls	r1, r1, #16
   10b22:	430a      	orrs	r2, r1
   10b24:	7adb      	ldrb	r3, [r3, #11]
   10b26:	061b      	lsls	r3, r3, #24
   10b28:	4313      	orrs	r3, r2
   10b2a:	0019      	movs	r1, r3
   10b2c:	1dfb      	adds	r3, r7, #7
   10b2e:	781a      	ldrb	r2, [r3, #0]
   10b30:	0013      	movs	r3, r2
   10b32:	005b      	lsls	r3, r3, #1
   10b34:	189b      	adds	r3, r3, r2
   10b36:	009b      	lsls	r3, r3, #2
   10b38:	18ca      	adds	r2, r1, r3
   10b3a:	230c      	movs	r3, #12
   10b3c:	18fb      	adds	r3, r7, r3
   10b3e:	7a12      	ldrb	r2, [r2, #8]
   10b40:	701a      	strb	r2, [r3, #0]
			
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
   10b42:	230f      	movs	r3, #15
   10b44:	18fb      	adds	r3, r7, r3
   10b46:	2200      	movs	r2, #0
   10b48:	701a      	strb	r2, [r3, #0]
   10b4a:	e034      	b.n	10bb6 <UpdateChannelIdStatusT2+0x18a>
			{
				if(RegParams.pChParams[i].status == ENABLED &&
   10b4c:	4b32      	ldr	r3, [pc, #200]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10b4e:	791a      	ldrb	r2, [r3, #4]
   10b50:	7959      	ldrb	r1, [r3, #5]
   10b52:	0209      	lsls	r1, r1, #8
   10b54:	430a      	orrs	r2, r1
   10b56:	7999      	ldrb	r1, [r3, #6]
   10b58:	0409      	lsls	r1, r1, #16
   10b5a:	430a      	orrs	r2, r1
   10b5c:	79db      	ldrb	r3, [r3, #7]
   10b5e:	061b      	lsls	r3, r3, #24
   10b60:	4313      	orrs	r3, r2
   10b62:	001a      	movs	r2, r3
   10b64:	230f      	movs	r3, #15
   10b66:	18fb      	adds	r3, r7, r3
   10b68:	781b      	ldrb	r3, [r3, #0]
   10b6a:	005b      	lsls	r3, r3, #1
   10b6c:	18d3      	adds	r3, r2, r3
   10b6e:	781b      	ldrb	r3, [r3, #0]
   10b70:	2b00      	cmp	r3, #0
   10b72:	d019      	beq.n	10ba8 <UpdateChannelIdStatusT2+0x17c>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
   10b74:	4b28      	ldr	r3, [pc, #160]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10b76:	7a1a      	ldrb	r2, [r3, #8]
   10b78:	7a59      	ldrb	r1, [r3, #9]
   10b7a:	0209      	lsls	r1, r1, #8
   10b7c:	430a      	orrs	r2, r1
   10b7e:	7a99      	ldrb	r1, [r3, #10]
   10b80:	0409      	lsls	r1, r1, #16
   10b82:	430a      	orrs	r2, r1
   10b84:	7adb      	ldrb	r3, [r3, #11]
   10b86:	061b      	lsls	r3, r3, #24
   10b88:	4313      	orrs	r3, r2
   10b8a:	0019      	movs	r1, r3
   10b8c:	230f      	movs	r3, #15
   10b8e:	18fb      	adds	r3, r7, r3
   10b90:	781a      	ldrb	r2, [r3, #0]
   10b92:	0013      	movs	r3, r2
   10b94:	005b      	lsls	r3, r3, #1
   10b96:	189b      	adds	r3, r3, r2
   10b98:	009b      	lsls	r3, r3, #2
   10b9a:	18cb      	adds	r3, r1, r3
   10b9c:	7a1b      	ldrb	r3, [r3, #8]
				if(RegParams.pChParams[i].status == ENABLED &&
   10b9e:	220c      	movs	r2, #12
   10ba0:	18ba      	adds	r2, r7, r2
   10ba2:	7812      	ldrb	r2, [r2, #0]
   10ba4:	429a      	cmp	r2, r3
   10ba6:	d033      	beq.n	10c10 <UpdateChannelIdStatusT2+0x1e4>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
   10ba8:	230f      	movs	r3, #15
   10baa:	18fb      	adds	r3, r7, r3
   10bac:	781a      	ldrb	r2, [r3, #0]
   10bae:	230f      	movs	r3, #15
   10bb0:	18fb      	adds	r3, r7, r3
   10bb2:	3201      	adds	r2, #1
   10bb4:	701a      	strb	r2, [r3, #0]
   10bb6:	230f      	movs	r3, #15
   10bb8:	18fb      	adds	r3, r7, r3
   10bba:	781b      	ldrb	r3, [r3, #0]
   10bbc:	4a16      	ldr	r2, [pc, #88]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10bbe:	212a      	movs	r1, #42	; 0x2a
   10bc0:	5652      	ldrsb	r2, [r2, r1]
   10bc2:	4293      	cmp	r3, r2
   10bc4:	dbc2      	blt.n	10b4c <UpdateChannelIdStatusT2+0x120>
				 {
					 return;
				 }
			}
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
   10bc6:	4b14      	ldr	r3, [pc, #80]	; (10c18 <UpdateChannelIdStatusT2+0x1ec>)
   10bc8:	7b1a      	ldrb	r2, [r3, #12]
   10bca:	7b59      	ldrb	r1, [r3, #13]
   10bcc:	0209      	lsls	r1, r1, #8
   10bce:	430a      	orrs	r2, r1
   10bd0:	7b99      	ldrb	r1, [r3, #14]
   10bd2:	0409      	lsls	r1, r1, #16
   10bd4:	430a      	orrs	r2, r1
   10bd6:	7bdb      	ldrb	r3, [r3, #15]
   10bd8:	061b      	lsls	r3, r3, #24
   10bda:	4313      	orrs	r3, r2
   10bdc:	0019      	movs	r1, r3
   10bde:	230c      	movs	r3, #12
   10be0:	18fb      	adds	r3, r7, r3
   10be2:	781a      	ldrb	r2, [r3, #0]
   10be4:	0013      	movs	r3, r2
   10be6:	005b      	lsls	r3, r3, #1
   10be8:	189b      	adds	r3, r3, r2
   10bea:	009b      	lsls	r3, r3, #2
   10bec:	18cb      	adds	r3, r1, r3
   10bee:	7a1a      	ldrb	r2, [r3, #8]
   10bf0:	2100      	movs	r1, #0
   10bf2:	400a      	ands	r2, r1
   10bf4:	721a      	strb	r2, [r3, #8]
   10bf6:	7a5a      	ldrb	r2, [r3, #9]
   10bf8:	2100      	movs	r1, #0
   10bfa:	400a      	ands	r2, r1
   10bfc:	725a      	strb	r2, [r3, #9]
   10bfe:	7a9a      	ldrb	r2, [r3, #10]
   10c00:	2100      	movs	r1, #0
   10c02:	400a      	ands	r2, r1
   10c04:	729a      	strb	r2, [r3, #10]
   10c06:	7ada      	ldrb	r2, [r3, #11]
   10c08:	2100      	movs	r1, #0
   10c0a:	400a      	ands	r2, r1
   10c0c:	72da      	strb	r2, [r3, #11]
   10c0e:	e000      	b.n	10c12 <UpdateChannelIdStatusT2+0x1e6>
					 return;
   10c10:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   10c12:	46bd      	mov	sp, r7
   10c14:	b004      	add	sp, #16
   10c16:	bd80      	pop	{r7, pc}
   10c18:	200014a8 	.word	0x200014a8
   10c1c:	0000020f 	.word	0x0000020f
   10c20:	00013b45 	.word	0x00013b45

00010c24 <UpdateChannelIdStatusT3>:
#endif

#if (AS_BAND == 1 || JPN_BAND == 1)
static void UpdateChannelIdStatusT3(uint8_t chid, bool statusNew)
{
   10c24:	b580      	push	{r7, lr}
   10c26:	b084      	sub	sp, #16
   10c28:	af00      	add	r7, sp, #0
   10c2a:	0002      	movs	r2, r0
   10c2c:	1dfb      	adds	r3, r7, #7
   10c2e:	701a      	strb	r2, [r3, #0]
   10c30:	1dbb      	adds	r3, r7, #6
   10c32:	1c0a      	adds	r2, r1, #0
   10c34:	701a      	strb	r2, [r3, #0]
	RegParams.pChParams[chid].status = statusNew;
   10c36:	4b3c      	ldr	r3, [pc, #240]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10c38:	791a      	ldrb	r2, [r3, #4]
   10c3a:	7959      	ldrb	r1, [r3, #5]
   10c3c:	0209      	lsls	r1, r1, #8
   10c3e:	430a      	orrs	r2, r1
   10c40:	7999      	ldrb	r1, [r3, #6]
   10c42:	0409      	lsls	r1, r1, #16
   10c44:	430a      	orrs	r2, r1
   10c46:	79db      	ldrb	r3, [r3, #7]
   10c48:	061b      	lsls	r3, r3, #24
   10c4a:	4313      	orrs	r3, r2
   10c4c:	001a      	movs	r2, r3
   10c4e:	1dfb      	adds	r3, r7, #7
   10c50:	781b      	ldrb	r3, [r3, #0]
   10c52:	005b      	lsls	r3, r3, #1
   10c54:	18d3      	adds	r3, r2, r3
   10c56:	1dba      	adds	r2, r7, #6
   10c58:	7812      	ldrb	r2, [r2, #0]
   10c5a:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   10c5c:	4b32      	ldr	r3, [pc, #200]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10c5e:	4a33      	ldr	r2, [pc, #204]	; (10d2c <UpdateChannelIdStatusT3+0x108>)
   10c60:	5c9a      	ldrb	r2, [r3, r2]
   10c62:	2184      	movs	r1, #132	; 0x84
   10c64:	0089      	lsls	r1, r1, #2
   10c66:	5c5b      	ldrb	r3, [r3, r1]
   10c68:	021b      	lsls	r3, r3, #8
   10c6a:	4313      	orrs	r3, r2
   10c6c:	b29b      	uxth	r3, r3
   10c6e:	0a1b      	lsrs	r3, r3, #8
   10c70:	b29a      	uxth	r2, r3
   10c72:	230f      	movs	r3, #15
   10c74:	18fb      	adds	r3, r7, r3
   10c76:	701a      	strb	r2, [r3, #0]
   10c78:	4b2b      	ldr	r3, [pc, #172]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10c7a:	4a2c      	ldr	r2, [pc, #176]	; (10d2c <UpdateChannelIdStatusT3+0x108>)
   10c7c:	5c9a      	ldrb	r2, [r3, r2]
   10c7e:	2184      	movs	r1, #132	; 0x84
   10c80:	0089      	lsls	r1, r1, #2
   10c82:	5c5b      	ldrb	r3, [r3, r1]
   10c84:	021b      	lsls	r3, r3, #8
   10c86:	4313      	orrs	r3, r2
   10c88:	b29a      	uxth	r2, r3
   10c8a:	230e      	movs	r3, #14
   10c8c:	18fb      	adds	r3, r7, r3
   10c8e:	701a      	strb	r2, [r3, #0]
   10c90:	230e      	movs	r3, #14
   10c92:	18fb      	adds	r3, r7, r3
   10c94:	781a      	ldrb	r2, [r3, #0]
   10c96:	230f      	movs	r3, #15
   10c98:	18fb      	adds	r3, r7, r3
   10c9a:	781b      	ldrb	r3, [r3, #0]
   10c9c:	0011      	movs	r1, r2
   10c9e:	0018      	movs	r0, r3
   10ca0:	4b23      	ldr	r3, [pc, #140]	; (10d30 <UpdateChannelIdStatusT3+0x10c>)
   10ca2:	4798      	blx	r3
#endif
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   10ca4:	4b20      	ldr	r3, [pc, #128]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10ca6:	4a23      	ldr	r2, [pc, #140]	; (10d34 <UpdateChannelIdStatusT3+0x110>)
   10ca8:	5c9a      	ldrb	r2, [r3, r2]
   10caa:	4923      	ldr	r1, [pc, #140]	; (10d38 <UpdateChannelIdStatusT3+0x114>)
   10cac:	5c5b      	ldrb	r3, [r3, r1]
   10cae:	021b      	lsls	r3, r3, #8
   10cb0:	4313      	orrs	r3, r2
   10cb2:	b29b      	uxth	r3, r3
   10cb4:	0a1b      	lsrs	r3, r3, #8
   10cb6:	b29a      	uxth	r2, r3
   10cb8:	230d      	movs	r3, #13
   10cba:	18fb      	adds	r3, r7, r3
   10cbc:	701a      	strb	r2, [r3, #0]
   10cbe:	4b1a      	ldr	r3, [pc, #104]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10cc0:	4a1c      	ldr	r2, [pc, #112]	; (10d34 <UpdateChannelIdStatusT3+0x110>)
   10cc2:	5c9a      	ldrb	r2, [r3, r2]
   10cc4:	491c      	ldr	r1, [pc, #112]	; (10d38 <UpdateChannelIdStatusT3+0x114>)
   10cc6:	5c5b      	ldrb	r3, [r3, r1]
   10cc8:	021b      	lsls	r3, r3, #8
   10cca:	4313      	orrs	r3, r2
   10ccc:	b29a      	uxth	r2, r3
   10cce:	230c      	movs	r3, #12
   10cd0:	18fb      	adds	r3, r7, r3
   10cd2:	701a      	strb	r2, [r3, #0]
   10cd4:	230c      	movs	r3, #12
   10cd6:	18fb      	adds	r3, r7, r3
   10cd8:	781a      	ldrb	r2, [r3, #0]
   10cda:	230d      	movs	r3, #13
   10cdc:	18fb      	adds	r3, r7, r3
   10cde:	781b      	ldrb	r3, [r3, #0]
   10ce0:	0011      	movs	r1, r2
   10ce2:	0018      	movs	r0, r3
   10ce4:	4b12      	ldr	r3, [pc, #72]	; (10d30 <UpdateChannelIdStatusT3+0x10c>)
   10ce6:	4798      	blx	r3
#endif
	if( RegParams.band == ISM_JPN923)
   10ce8:	4b0f      	ldr	r3, [pc, #60]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10cea:	222f      	movs	r2, #47	; 0x2f
   10cec:	5c9b      	ldrb	r3, [r3, r2]
   10cee:	2b05      	cmp	r3, #5
   10cf0:	d116      	bne.n	10d20 <UpdateChannelIdStatusT3+0xfc>
	{
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
   10cf2:	1dfb      	adds	r3, r7, #7
   10cf4:	781b      	ldrb	r3, [r3, #0]
   10cf6:	4a0c      	ldr	r2, [pc, #48]	; (10d28 <UpdateChannelIdStatusT3+0x104>)
   10cf8:	3358      	adds	r3, #88	; 0x58
   10cfa:	009b      	lsls	r3, r3, #2
   10cfc:	18d3      	adds	r3, r2, r3
   10cfe:	3309      	adds	r3, #9
   10d00:	781a      	ldrb	r2, [r3, #0]
   10d02:	2100      	movs	r1, #0
   10d04:	400a      	ands	r2, r1
   10d06:	701a      	strb	r2, [r3, #0]
   10d08:	785a      	ldrb	r2, [r3, #1]
   10d0a:	2100      	movs	r1, #0
   10d0c:	400a      	ands	r2, r1
   10d0e:	705a      	strb	r2, [r3, #1]
   10d10:	789a      	ldrb	r2, [r3, #2]
   10d12:	2100      	movs	r1, #0
   10d14:	400a      	ands	r2, r1
   10d16:	709a      	strb	r2, [r3, #2]
   10d18:	78da      	ldrb	r2, [r3, #3]
   10d1a:	2100      	movs	r1, #0
   10d1c:	400a      	ands	r2, r1
   10d1e:	70da      	strb	r2, [r3, #3]
	}

}
   10d20:	46c0      	nop			; (mov r8, r8)
   10d22:	46bd      	mov	sp, r7
   10d24:	b004      	add	sp, #16
   10d26:	bd80      	pop	{r7, pc}
   10d28:	200014a8 	.word	0x200014a8
   10d2c:	0000020f 	.word	0x0000020f
   10d30:	00013b45 	.word	0x00013b45
   10d34:	00000211 	.word	0x00000211
   10d38:	00000212 	.word	0x00000212

00010d3c <UpdateChannelIdStatusT4>:
#endif

#if (KR_BAND == 1)
static void UpdateChannelIdStatusT4(uint8_t chid, bool statusNew)
{
   10d3c:	b580      	push	{r7, lr}
   10d3e:	b084      	sub	sp, #16
   10d40:	af00      	add	r7, sp, #0
   10d42:	0002      	movs	r2, r0
   10d44:	1dfb      	adds	r3, r7, #7
   10d46:	701a      	strb	r2, [r3, #0]
   10d48:	1dbb      	adds	r3, r7, #6
   10d4a:	1c0a      	adds	r2, r1, #0
   10d4c:	701a      	strb	r2, [r3, #0]
	RegParams.pChParams[chid].status = statusNew;
   10d4e:	4b56      	ldr	r3, [pc, #344]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10d50:	791a      	ldrb	r2, [r3, #4]
   10d52:	7959      	ldrb	r1, [r3, #5]
   10d54:	0209      	lsls	r1, r1, #8
   10d56:	430a      	orrs	r2, r1
   10d58:	7999      	ldrb	r1, [r3, #6]
   10d5a:	0409      	lsls	r1, r1, #16
   10d5c:	430a      	orrs	r2, r1
   10d5e:	79db      	ldrb	r3, [r3, #7]
   10d60:	061b      	lsls	r3, r3, #24
   10d62:	4313      	orrs	r3, r2
   10d64:	001a      	movs	r2, r3
   10d66:	1dfb      	adds	r3, r7, #7
   10d68:	781b      	ldrb	r3, [r3, #0]
   10d6a:	005b      	lsls	r3, r3, #1
   10d6c:	18d3      	adds	r3, r2, r3
   10d6e:	1dba      	adds	r2, r7, #6
   10d70:	7812      	ldrb	r2, [r2, #0]
   10d72:	701a      	strb	r2, [r3, #0]
	
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   10d74:	4b4c      	ldr	r3, [pc, #304]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10d76:	4a4d      	ldr	r2, [pc, #308]	; (10eac <UpdateChannelIdStatusT4+0x170>)
   10d78:	5c9a      	ldrb	r2, [r3, r2]
   10d7a:	2184      	movs	r1, #132	; 0x84
   10d7c:	0089      	lsls	r1, r1, #2
   10d7e:	5c5b      	ldrb	r3, [r3, r1]
   10d80:	021b      	lsls	r3, r3, #8
   10d82:	4313      	orrs	r3, r2
   10d84:	b29b      	uxth	r3, r3
   10d86:	0a1b      	lsrs	r3, r3, #8
   10d88:	b29a      	uxth	r2, r3
   10d8a:	230f      	movs	r3, #15
   10d8c:	18fb      	adds	r3, r7, r3
   10d8e:	701a      	strb	r2, [r3, #0]
   10d90:	4b45      	ldr	r3, [pc, #276]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10d92:	4a46      	ldr	r2, [pc, #280]	; (10eac <UpdateChannelIdStatusT4+0x170>)
   10d94:	5c9a      	ldrb	r2, [r3, r2]
   10d96:	2184      	movs	r1, #132	; 0x84
   10d98:	0089      	lsls	r1, r1, #2
   10d9a:	5c5b      	ldrb	r3, [r3, r1]
   10d9c:	021b      	lsls	r3, r3, #8
   10d9e:	4313      	orrs	r3, r2
   10da0:	b29a      	uxth	r2, r3
   10da2:	230e      	movs	r3, #14
   10da4:	18fb      	adds	r3, r7, r3
   10da6:	701a      	strb	r2, [r3, #0]
   10da8:	230e      	movs	r3, #14
   10daa:	18fb      	adds	r3, r7, r3
   10dac:	781a      	ldrb	r2, [r3, #0]
   10dae:	230f      	movs	r3, #15
   10db0:	18fb      	adds	r3, r7, r3
   10db2:	781b      	ldrb	r3, [r3, #0]
   10db4:	0011      	movs	r1, r2
   10db6:	0018      	movs	r0, r3
   10db8:	4b3d      	ldr	r3, [pc, #244]	; (10eb0 <UpdateChannelIdStatusT4+0x174>)
   10dba:	4798      	blx	r3
#endif
	
	if(statusNew == ENABLED)
   10dbc:	1dbb      	adds	r3, r7, #6
   10dbe:	781b      	ldrb	r3, [r3, #0]
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d06d      	beq.n	10ea0 <UpdateChannelIdStatusT4+0x164>
	{
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
   10dc4:	4b38      	ldr	r3, [pc, #224]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10dc6:	7a1a      	ldrb	r2, [r3, #8]
   10dc8:	7a59      	ldrb	r1, [r3, #9]
   10dca:	0209      	lsls	r1, r1, #8
   10dcc:	430a      	orrs	r2, r1
   10dce:	7a99      	ldrb	r1, [r3, #10]
   10dd0:	0409      	lsls	r1, r1, #16
   10dd2:	430a      	orrs	r2, r1
   10dd4:	7adb      	ldrb	r3, [r3, #11]
   10dd6:	061b      	lsls	r3, r3, #24
   10dd8:	4313      	orrs	r3, r2
   10dda:	0019      	movs	r1, r3
   10ddc:	1dfb      	adds	r3, r7, #7
   10dde:	781a      	ldrb	r2, [r3, #0]
   10de0:	0013      	movs	r3, r2
   10de2:	005b      	lsls	r3, r3, #1
   10de4:	189b      	adds	r3, r3, r2
   10de6:	009b      	lsls	r3, r3, #2
   10de8:	18cb      	adds	r3, r1, r3
   10dea:	781a      	ldrb	r2, [r3, #0]
   10dec:	7859      	ldrb	r1, [r3, #1]
   10dee:	0209      	lsls	r1, r1, #8
   10df0:	430a      	orrs	r2, r1
   10df2:	7899      	ldrb	r1, [r3, #2]
   10df4:	0409      	lsls	r1, r1, #16
   10df6:	430a      	orrs	r2, r1
   10df8:	78db      	ldrb	r3, [r3, #3]
   10dfa:	061b      	lsls	r3, r3, #24
   10dfc:	4313      	orrs	r3, r2
   10dfe:	001a      	movs	r2, r3
   10e00:	4b2c      	ldr	r3, [pc, #176]	; (10eb4 <UpdateChannelIdStatusT4+0x178>)
   10e02:	429a      	cmp	r2, r3
   10e04:	d815      	bhi.n	10e32 <UpdateChannelIdStatusT4+0xf6>
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
   10e06:	4b28      	ldr	r3, [pc, #160]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10e08:	7a1a      	ldrb	r2, [r3, #8]
   10e0a:	7a59      	ldrb	r1, [r3, #9]
   10e0c:	0209      	lsls	r1, r1, #8
   10e0e:	430a      	orrs	r2, r1
   10e10:	7a99      	ldrb	r1, [r3, #10]
   10e12:	0409      	lsls	r1, r1, #16
   10e14:	430a      	orrs	r2, r1
   10e16:	7adb      	ldrb	r3, [r3, #11]
   10e18:	061b      	lsls	r3, r3, #24
   10e1a:	4313      	orrs	r3, r2
   10e1c:	0019      	movs	r1, r3
   10e1e:	1dfb      	adds	r3, r7, #7
   10e20:	781a      	ldrb	r2, [r3, #0]
   10e22:	0013      	movs	r3, r2
   10e24:	005b      	lsls	r3, r3, #1
   10e26:	189b      	adds	r3, r3, r2
   10e28:	009b      	lsls	r3, r3, #2
   10e2a:	18cb      	adds	r3, r1, r3
   10e2c:	220a      	movs	r2, #10
   10e2e:	729a      	strb	r2, [r3, #10]
   10e30:	e014      	b.n	10e5c <UpdateChannelIdStatusT4+0x120>
		}
		else
		{
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
   10e32:	4b1d      	ldr	r3, [pc, #116]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10e34:	7a1a      	ldrb	r2, [r3, #8]
   10e36:	7a59      	ldrb	r1, [r3, #9]
   10e38:	0209      	lsls	r1, r1, #8
   10e3a:	430a      	orrs	r2, r1
   10e3c:	7a99      	ldrb	r1, [r3, #10]
   10e3e:	0409      	lsls	r1, r1, #16
   10e40:	430a      	orrs	r2, r1
   10e42:	7adb      	ldrb	r3, [r3, #11]
   10e44:	061b      	lsls	r3, r3, #24
   10e46:	4313      	orrs	r3, r2
   10e48:	0019      	movs	r1, r3
   10e4a:	1dfb      	adds	r3, r7, #7
   10e4c:	781a      	ldrb	r2, [r3, #0]
   10e4e:	0013      	movs	r3, r2
   10e50:	005b      	lsls	r3, r3, #1
   10e52:	189b      	adds	r3, r3, r2
   10e54:	009b      	lsls	r3, r3, #2
   10e56:	18cb      	adds	r3, r1, r3
   10e58:	220e      	movs	r2, #14
   10e5a:	729a      	strb	r2, [r3, #10]
		}
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   10e5c:	4b12      	ldr	r3, [pc, #72]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10e5e:	4a16      	ldr	r2, [pc, #88]	; (10eb8 <UpdateChannelIdStatusT4+0x17c>)
   10e60:	5c9a      	ldrb	r2, [r3, r2]
   10e62:	4916      	ldr	r1, [pc, #88]	; (10ebc <UpdateChannelIdStatusT4+0x180>)
   10e64:	5c5b      	ldrb	r3, [r3, r1]
   10e66:	021b      	lsls	r3, r3, #8
   10e68:	4313      	orrs	r3, r2
   10e6a:	b29b      	uxth	r3, r3
   10e6c:	0a1b      	lsrs	r3, r3, #8
   10e6e:	b29a      	uxth	r2, r3
   10e70:	230d      	movs	r3, #13
   10e72:	18fb      	adds	r3, r7, r3
   10e74:	701a      	strb	r2, [r3, #0]
   10e76:	4b0c      	ldr	r3, [pc, #48]	; (10ea8 <UpdateChannelIdStatusT4+0x16c>)
   10e78:	4a0f      	ldr	r2, [pc, #60]	; (10eb8 <UpdateChannelIdStatusT4+0x17c>)
   10e7a:	5c9a      	ldrb	r2, [r3, r2]
   10e7c:	490f      	ldr	r1, [pc, #60]	; (10ebc <UpdateChannelIdStatusT4+0x180>)
   10e7e:	5c5b      	ldrb	r3, [r3, r1]
   10e80:	021b      	lsls	r3, r3, #8
   10e82:	4313      	orrs	r3, r2
   10e84:	b29a      	uxth	r2, r3
   10e86:	230c      	movs	r3, #12
   10e88:	18fb      	adds	r3, r7, r3
   10e8a:	701a      	strb	r2, [r3, #0]
   10e8c:	230c      	movs	r3, #12
   10e8e:	18fb      	adds	r3, r7, r3
   10e90:	781a      	ldrb	r2, [r3, #0]
   10e92:	230d      	movs	r3, #13
   10e94:	18fb      	adds	r3, r7, r3
   10e96:	781b      	ldrb	r3, [r3, #0]
   10e98:	0011      	movs	r1, r2
   10e9a:	0018      	movs	r0, r3
   10e9c:	4b04      	ldr	r3, [pc, #16]	; (10eb0 <UpdateChannelIdStatusT4+0x174>)
   10e9e:	4798      	blx	r3
#endif

	}
}
   10ea0:	46c0      	nop			; (mov r8, r8)
   10ea2:	46bd      	mov	sp, r7
   10ea4:	b004      	add	sp, #16
   10ea6:	bd80      	pop	{r7, pc}
   10ea8:	200014a8 	.word	0x200014a8
   10eac:	0000020f 	.word	0x0000020f
   10eb0:	00013b45 	.word	0x00013b45
   10eb4:	36f6211f 	.word	0x36f6211f
   10eb8:	00000211 	.word	0x00000211
   10ebc:	00000212 	.word	0x00000212

00010ec0 <EnableChannels2>:
#endif

#if ((NA_BAND) == 1 || (AU_BAND) == 1)
static void EnableChannels2(uint8_t startIndx, uint8_t endIndx, uint16_t chMask)
{
   10ec0:	b590      	push	{r4, r7, lr}
   10ec2:	b085      	sub	sp, #20
   10ec4:	af00      	add	r7, sp, #0
   10ec6:	0004      	movs	r4, r0
   10ec8:	0008      	movs	r0, r1
   10eca:	0011      	movs	r1, r2
   10ecc:	1dfb      	adds	r3, r7, #7
   10ece:	1c22      	adds	r2, r4, #0
   10ed0:	701a      	strb	r2, [r3, #0]
   10ed2:	1dbb      	adds	r3, r7, #6
   10ed4:	1c02      	adds	r2, r0, #0
   10ed6:	701a      	strb	r2, [r3, #0]
   10ed8:	1d3b      	adds	r3, r7, #4
   10eda:	1c0a      	adds	r2, r1, #0
   10edc:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
   10ede:	230f      	movs	r3, #15
   10ee0:	18fb      	adds	r3, r7, r3
   10ee2:	2200      	movs	r2, #0
   10ee4:	701a      	strb	r2, [r3, #0]
	
	for(i = startIndx; i <= endIndx; i++)
   10ee6:	230f      	movs	r3, #15
   10ee8:	18fb      	adds	r3, r7, r3
   10eea:	1dfa      	adds	r2, r7, #7
   10eec:	7812      	ldrb	r2, [r2, #0]
   10eee:	701a      	strb	r2, [r3, #0]
   10ef0:	e01f      	b.n	10f32 <EnableChannels2+0x72>
	{
		if((chMask & (0x0001)) == 0x0001)
   10ef2:	1d3b      	adds	r3, r7, #4
   10ef4:	881b      	ldrh	r3, [r3, #0]
   10ef6:	2201      	movs	r2, #1
   10ef8:	4013      	ands	r3, r2
   10efa:	d007      	beq.n	10f0c <EnableChannels2+0x4c>
		{
			UpdateChannelIdStatus(i, ENABLED);
   10efc:	230f      	movs	r3, #15
   10efe:	18fb      	adds	r3, r7, r3
   10f00:	781b      	ldrb	r3, [r3, #0]
   10f02:	2101      	movs	r1, #1
   10f04:	0018      	movs	r0, r3
   10f06:	4b10      	ldr	r3, [pc, #64]	; (10f48 <EnableChannels2+0x88>)
   10f08:	4798      	blx	r3
   10f0a:	e006      	b.n	10f1a <EnableChannels2+0x5a>
		}
		else
		{
			UpdateChannelIdStatus(i, DISABLED);
   10f0c:	230f      	movs	r3, #15
   10f0e:	18fb      	adds	r3, r7, r3
   10f10:	781b      	ldrb	r3, [r3, #0]
   10f12:	2100      	movs	r1, #0
   10f14:	0018      	movs	r0, r3
   10f16:	4b0c      	ldr	r3, [pc, #48]	; (10f48 <EnableChannels2+0x88>)
   10f18:	4798      	blx	r3
		}
		chMask = chMask >> SHIFT1;
   10f1a:	1d3b      	adds	r3, r7, #4
   10f1c:	1d3a      	adds	r2, r7, #4
   10f1e:	8812      	ldrh	r2, [r2, #0]
   10f20:	0852      	lsrs	r2, r2, #1
   10f22:	801a      	strh	r2, [r3, #0]
	for(i = startIndx; i <= endIndx; i++)
   10f24:	230f      	movs	r3, #15
   10f26:	18fb      	adds	r3, r7, r3
   10f28:	781a      	ldrb	r2, [r3, #0]
   10f2a:	230f      	movs	r3, #15
   10f2c:	18fb      	adds	r3, r7, r3
   10f2e:	3201      	adds	r2, #1
   10f30:	701a      	strb	r2, [r3, #0]
   10f32:	230f      	movs	r3, #15
   10f34:	18fa      	adds	r2, r7, r3
   10f36:	1dbb      	adds	r3, r7, #6
   10f38:	7812      	ldrb	r2, [r2, #0]
   10f3a:	781b      	ldrb	r3, [r3, #0]
   10f3c:	429a      	cmp	r2, r3
   10f3e:	d9d8      	bls.n	10ef2 <EnableChannels2+0x32>
	}
}
   10f40:	46c0      	nop			; (mov r8, r8)
   10f42:	46bd      	mov	sp, r7
   10f44:	b005      	add	sp, #20
   10f46:	bd90      	pop	{r4, r7, pc}
   10f48:	00010969 	.word	0x00010969

00010f4c <ValidateFrequencyAS>:
 * \retval LORAWAN_SUCCESS If the validation is successful
 *		   LORAWAN_INVALID_PARAMETER If the Frequency is not supported
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
   10f4c:	b580      	push	{r7, lr}
   10f4e:	b084      	sub	sp, #16
   10f50:	af00      	add	r7, sp, #0
   10f52:	0002      	movs	r2, r0
   10f54:	6039      	str	r1, [r7, #0]
   10f56:	1dfb      	adds	r3, r7, #7
   10f58:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   10f5a:	230f      	movs	r3, #15
   10f5c:	18fb      	adds	r3, r7, r3
   10f5e:	2208      	movs	r2, #8
   10f60:	701a      	strb	r2, [r3, #0]
	uint32_t frequencyNew = * (uint32_t *)attrInput;
   10f62:	683b      	ldr	r3, [r7, #0]
   10f64:	681b      	ldr	r3, [r3, #0]
   10f66:	60bb      	str	r3, [r7, #8]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
   10f68:	4b37      	ldr	r3, [pc, #220]	; (11048 <ValidateFrequencyAS+0xfc>)
   10f6a:	222f      	movs	r2, #47	; 0x2f
   10f6c:	5c9b      	ldrb	r3, [r3, r2]
   10f6e:	2b06      	cmp	r3, #6
   10f70:	d00e      	beq.n	10f90 <ValidateFrequencyAS+0x44>
   10f72:	4b35      	ldr	r3, [pc, #212]	; (11048 <ValidateFrequencyAS+0xfc>)
   10f74:	222f      	movs	r2, #47	; 0x2f
   10f76:	5c9b      	ldrb	r3, [r3, r2]
   10f78:	2b07      	cmp	r3, #7
   10f7a:	d009      	beq.n	10f90 <ValidateFrequencyAS+0x44>
   10f7c:	4b32      	ldr	r3, [pc, #200]	; (11048 <ValidateFrequencyAS+0xfc>)
   10f7e:	222f      	movs	r2, #47	; 0x2f
   10f80:	5c9b      	ldrb	r3, [r3, r2]
   10f82:	2b08      	cmp	r3, #8
   10f84:	d004      	beq.n	10f90 <ValidateFrequencyAS+0x44>
   10f86:	4b30      	ldr	r3, [pc, #192]	; (11048 <ValidateFrequencyAS+0xfc>)
   10f88:	222f      	movs	r2, #47	; 0x2f
   10f8a:	5c9b      	ldrb	r3, [r3, r2]
   10f8c:	2b09      	cmp	r3, #9
   10f8e:	d10c      	bne.n	10faa <ValidateFrequencyAS+0x5e>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   10f90:	68bb      	ldr	r3, [r7, #8]
   10f92:	4a2e      	ldr	r2, [pc, #184]	; (1104c <ValidateFrequencyAS+0x100>)
   10f94:	4293      	cmp	r3, r2
   10f96:	d903      	bls.n	10fa0 <ValidateFrequencyAS+0x54>
   10f98:	68bb      	ldr	r3, [r7, #8]
   10f9a:	4a2d      	ldr	r2, [pc, #180]	; (11050 <ValidateFrequencyAS+0x104>)
   10f9c:	4293      	cmp	r3, r2
   10f9e:	d949      	bls.n	11034 <ValidateFrequencyAS+0xe8>
		{
			result = LORAWAN_INVALID_PARAMETER;
   10fa0:	230f      	movs	r3, #15
   10fa2:	18fb      	adds	r3, r7, r3
   10fa4:	220a      	movs	r2, #10
   10fa6:	701a      	strb	r2, [r3, #0]
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   10fa8:	e044      	b.n	11034 <ValidateFrequencyAS+0xe8>
		}
	}
	/*Bands Supporting Freq 915 - 928MHz*/
	else if(RegParams.band == ISM_NZ923)
   10faa:	4b27      	ldr	r3, [pc, #156]	; (11048 <ValidateFrequencyAS+0xfc>)
   10fac:	222f      	movs	r2, #47	; 0x2f
   10fae:	5c9b      	ldrb	r3, [r3, r2]
   10fb0:	2b0a      	cmp	r3, #10
   10fb2:	d10c      	bne.n	10fce <ValidateFrequencyAS+0x82>
	{
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
   10fb4:	68bb      	ldr	r3, [r7, #8]
   10fb6:	4a27      	ldr	r2, [pc, #156]	; (11054 <ValidateFrequencyAS+0x108>)
   10fb8:	4293      	cmp	r3, r2
   10fba:	d903      	bls.n	10fc4 <ValidateFrequencyAS+0x78>
   10fbc:	68bb      	ldr	r3, [r7, #8]
   10fbe:	4a26      	ldr	r2, [pc, #152]	; (11058 <ValidateFrequencyAS+0x10c>)
   10fc0:	4293      	cmp	r3, r2
   10fc2:	d93a      	bls.n	1103a <ValidateFrequencyAS+0xee>
		{
			result = LORAWAN_INVALID_PARAMETER;
   10fc4:	230f      	movs	r3, #15
   10fc6:	18fb      	adds	r3, r7, r3
   10fc8:	220a      	movs	r2, #10
   10fca:	701a      	strb	r2, [r3, #0]
   10fcc:	e035      	b.n	1103a <ValidateFrequencyAS+0xee>
		}		
	}
	/*Bands Supporting Freq 920 - 925MHz*/
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
   10fce:	4b1e      	ldr	r3, [pc, #120]	; (11048 <ValidateFrequencyAS+0xfc>)
   10fd0:	222f      	movs	r2, #47	; 0x2f
   10fd2:	5c9b      	ldrb	r3, [r3, r2]
   10fd4:	2b0b      	cmp	r3, #11
   10fd6:	d009      	beq.n	10fec <ValidateFrequencyAS+0xa0>
   10fd8:	4b1b      	ldr	r3, [pc, #108]	; (11048 <ValidateFrequencyAS+0xfc>)
   10fda:	222f      	movs	r2, #47	; 0x2f
   10fdc:	5c9b      	ldrb	r3, [r3, r2]
   10fde:	2b0d      	cmp	r3, #13
   10fe0:	d004      	beq.n	10fec <ValidateFrequencyAS+0xa0>
   10fe2:	4b19      	ldr	r3, [pc, #100]	; (11048 <ValidateFrequencyAS+0xfc>)
   10fe4:	222f      	movs	r2, #47	; 0x2f
   10fe6:	5c9b      	ldrb	r3, [r3, r2]
   10fe8:	2b0e      	cmp	r3, #14
   10fea:	d10c      	bne.n	11006 <ValidateFrequencyAS+0xba>
	{
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   10fec:	68bb      	ldr	r3, [r7, #8]
   10fee:	4a1b      	ldr	r2, [pc, #108]	; (1105c <ValidateFrequencyAS+0x110>)
   10ff0:	4293      	cmp	r3, r2
   10ff2:	d903      	bls.n	10ffc <ValidateFrequencyAS+0xb0>
   10ff4:	68bb      	ldr	r3, [r7, #8]
   10ff6:	4a16      	ldr	r2, [pc, #88]	; (11050 <ValidateFrequencyAS+0x104>)
   10ff8:	4293      	cmp	r3, r2
   10ffa:	d91d      	bls.n	11038 <ValidateFrequencyAS+0xec>
		{
			result = LORAWAN_INVALID_PARAMETER;
   10ffc:	230f      	movs	r3, #15
   10ffe:	18fb      	adds	r3, r7, r3
   11000:	220a      	movs	r2, #10
   11002:	701a      	strb	r2, [r3, #0]
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   11004:	e018      	b.n	11038 <ValidateFrequencyAS+0xec>
		}
	}
	/*Bands Supporting Freq 922 - 928MHz*/
	else if(RegParams.band == ISM_TWN923)
   11006:	4b10      	ldr	r3, [pc, #64]	; (11048 <ValidateFrequencyAS+0xfc>)
   11008:	222f      	movs	r2, #47	; 0x2f
   1100a:	5c9b      	ldrb	r3, [r3, r2]
   1100c:	2b0c      	cmp	r3, #12
   1100e:	d10c      	bne.n	1102a <ValidateFrequencyAS+0xde>
	{
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
   11010:	68bb      	ldr	r3, [r7, #8]
   11012:	4a13      	ldr	r2, [pc, #76]	; (11060 <ValidateFrequencyAS+0x114>)
   11014:	4293      	cmp	r3, r2
   11016:	d903      	bls.n	11020 <ValidateFrequencyAS+0xd4>
   11018:	68bb      	ldr	r3, [r7, #8]
   1101a:	4a0f      	ldr	r2, [pc, #60]	; (11058 <ValidateFrequencyAS+0x10c>)
   1101c:	4293      	cmp	r3, r2
   1101e:	d90c      	bls.n	1103a <ValidateFrequencyAS+0xee>
		{
			result = LORAWAN_INVALID_PARAMETER;
   11020:	230f      	movs	r3, #15
   11022:	18fb      	adds	r3, r7, r3
   11024:	220a      	movs	r2, #10
   11026:	701a      	strb	r2, [r3, #0]
   11028:	e007      	b.n	1103a <ValidateFrequencyAS+0xee>
		}
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
   1102a:	230f      	movs	r3, #15
   1102c:	18fb      	adds	r3, r7, r3
   1102e:	220a      	movs	r2, #10
   11030:	701a      	strb	r2, [r3, #0]
   11032:	e002      	b.n	1103a <ValidateFrequencyAS+0xee>
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   11034:	46c0      	nop			; (mov r8, r8)
   11036:	e000      	b.n	1103a <ValidateFrequencyAS+0xee>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
   11038:	46c0      	nop			; (mov r8, r8)
	}
	return result;
   1103a:	230f      	movs	r3, #15
   1103c:	18fb      	adds	r3, r7, r3
   1103e:	781b      	ldrb	r3, [r3, #0]
}
   11040:	0018      	movs	r0, r3
   11042:	46bd      	mov	sp, r7
   11044:	b004      	add	sp, #16
   11046:	bd80      	pop	{r7, pc}
   11048:	200014a8 	.word	0x200014a8
   1104c:	3703dcbf 	.word	0x3703dcbf
   11050:	37226140 	.word	0x37226140
   11054:	3689cabf 	.word	0x3689cabf
   11058:	37502800 	.word	0x37502800
   1105c:	36d615ff 	.word	0x36d615ff
   11060:	36f49a7f 	.word	0x36f49a7f

00011064 <setDutyCycle>:
#endif

#if (EU_BAND == 1) || (AS_BAND == 1) || (JPN_BAND == 1)
static StackRetStatus_t setDutyCycle(LorawanRegionalAttributes_t attr, void *attrInput)
{
   11064:	b590      	push	{r4, r7, lr}
   11066:	b087      	sub	sp, #28
   11068:	af00      	add	r7, sp, #0
   1106a:	0002      	movs	r2, r0
   1106c:	6039      	str	r1, [r7, #0]
   1106e:	1dfb      	adds	r3, r7, #7
   11070:	701a      	strb	r2, [r3, #0]
    UpdateDutyCycle_t updateDCycle;
	ValChId_t val_chid;
	StackRetStatus_t result = LORAWAN_SUCCESS;
   11072:	2317      	movs	r3, #23
   11074:	18fb      	adds	r3, r7, r3
   11076:	2208      	movs	r2, #8
   11078:	701a      	strb	r2, [r3, #0]
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
   1107a:	6839      	ldr	r1, [r7, #0]
   1107c:	2310      	movs	r3, #16
   1107e:	18fb      	adds	r3, r7, r3
   11080:	2204      	movs	r2, #4
   11082:	0018      	movs	r0, r3
   11084:	4b66      	ldr	r3, [pc, #408]	; (11220 <setDutyCycle+0x1bc>)
   11086:	4798      	blx	r3
	
	val_chid.channelIndex = updateDCycle.channelIndex;
   11088:	2310      	movs	r3, #16
   1108a:	18fb      	adds	r3, r7, r3
   1108c:	789a      	ldrb	r2, [r3, #2]
   1108e:	230c      	movs	r3, #12
   11090:	18fb      	adds	r3, r7, r3
   11092:	701a      	strb	r2, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
   11094:	230c      	movs	r3, #12
   11096:	18fb      	adds	r3, r7, r3
   11098:	2201      	movs	r2, #1
   1109a:	705a      	strb	r2, [r3, #1]
	
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
   1109c:	230c      	movs	r3, #12
   1109e:	18fb      	adds	r3, r7, r3
   110a0:	0019      	movs	r1, r3
   110a2:	2015      	movs	r0, #21
   110a4:	4b5f      	ldr	r3, [pc, #380]	; (11224 <setDutyCycle+0x1c0>)
   110a6:	4798      	blx	r3
   110a8:	0003      	movs	r3, r0
   110aa:	2b08      	cmp	r3, #8
   110ac:	d000      	beq.n	110b0 <setDutyCycle+0x4c>
   110ae:	e0ab      	b.n	11208 <setDutyCycle+0x1a4>
	{
		uint8_t bandId;
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
   110b0:	4b5d      	ldr	r3, [pc, #372]	; (11228 <setDutyCycle+0x1c4>)
   110b2:	7a1a      	ldrb	r2, [r3, #8]
   110b4:	7a59      	ldrb	r1, [r3, #9]
   110b6:	0209      	lsls	r1, r1, #8
   110b8:	430a      	orrs	r2, r1
   110ba:	7a99      	ldrb	r1, [r3, #10]
   110bc:	0409      	lsls	r1, r1, #16
   110be:	430a      	orrs	r2, r1
   110c0:	7adb      	ldrb	r3, [r3, #11]
   110c2:	061b      	lsls	r3, r3, #24
   110c4:	4313      	orrs	r3, r2
   110c6:	0019      	movs	r1, r3
   110c8:	2310      	movs	r3, #16
   110ca:	18fb      	adds	r3, r7, r3
   110cc:	789b      	ldrb	r3, [r3, #2]
   110ce:	001a      	movs	r2, r3
   110d0:	0013      	movs	r3, r2
   110d2:	005b      	lsls	r3, r3, #1
   110d4:	189b      	adds	r3, r3, r2
   110d6:	009b      	lsls	r3, r3, #2
   110d8:	18ca      	adds	r2, r1, r3
   110da:	2316      	movs	r3, #22
   110dc:	18fb      	adds	r3, r7, r3
   110de:	7a12      	ldrb	r2, [r2, #8]
   110e0:	701a      	strb	r2, [r3, #0]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
   110e2:	2316      	movs	r3, #22
   110e4:	18fb      	adds	r3, r7, r3
   110e6:	781b      	ldrb	r3, [r3, #0]
   110e8:	2210      	movs	r2, #16
   110ea:	18ba      	adds	r2, r7, r2
   110ec:	8812      	ldrh	r2, [r2, #0]
   110ee:	494e      	ldr	r1, [pc, #312]	; (11228 <setDutyCycle+0x1c4>)
   110f0:	33d4      	adds	r3, #212	; 0xd4
   110f2:	005b      	lsls	r3, r3, #1
   110f4:	18cb      	adds	r3, r1, r3
   110f6:	21ff      	movs	r1, #255	; 0xff
   110f8:	4011      	ands	r1, r2
   110fa:	000c      	movs	r4, r1
   110fc:	7999      	ldrb	r1, [r3, #6]
   110fe:	2000      	movs	r0, #0
   11100:	4001      	ands	r1, r0
   11102:	1c08      	adds	r0, r1, #0
   11104:	1c21      	adds	r1, r4, #0
   11106:	4301      	orrs	r1, r0
   11108:	7199      	strb	r1, [r3, #6]
   1110a:	0a12      	lsrs	r2, r2, #8
   1110c:	b290      	uxth	r0, r2
   1110e:	79da      	ldrb	r2, [r3, #7]
   11110:	2100      	movs	r1, #0
   11112:	400a      	ands	r2, r1
   11114:	1c11      	adds	r1, r2, #0
   11116:	1c02      	adds	r2, r0, #0
   11118:	430a      	orrs	r2, r1
   1111a:	71da      	strb	r2, [r3, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
   1111c:	4b42      	ldr	r3, [pc, #264]	; (11228 <setDutyCycle+0x1c4>)
   1111e:	7b1a      	ldrb	r2, [r3, #12]
   11120:	7b59      	ldrb	r1, [r3, #13]
   11122:	0209      	lsls	r1, r1, #8
   11124:	430a      	orrs	r2, r1
   11126:	7b99      	ldrb	r1, [r3, #14]
   11128:	0409      	lsls	r1, r1, #16
   1112a:	430a      	orrs	r2, r1
   1112c:	7bdb      	ldrb	r3, [r3, #15]
   1112e:	061b      	lsls	r3, r3, #24
   11130:	4313      	orrs	r3, r2
   11132:	0019      	movs	r1, r3
   11134:	2316      	movs	r3, #22
   11136:	18fb      	adds	r3, r7, r3
   11138:	781a      	ldrb	r2, [r3, #0]
   1113a:	0013      	movs	r3, r2
   1113c:	005b      	lsls	r3, r3, #1
   1113e:	189b      	adds	r3, r3, r2
   11140:	009b      	lsls	r3, r3, #2
   11142:	18cb      	adds	r3, r1, r3
   11144:	7a1a      	ldrb	r2, [r3, #8]
   11146:	2100      	movs	r1, #0
   11148:	400a      	ands	r2, r1
   1114a:	721a      	strb	r2, [r3, #8]
   1114c:	7a5a      	ldrb	r2, [r3, #9]
   1114e:	2100      	movs	r1, #0
   11150:	400a      	ands	r2, r1
   11152:	725a      	strb	r2, [r3, #9]
   11154:	7a9a      	ldrb	r2, [r3, #10]
   11156:	2100      	movs	r1, #0
   11158:	400a      	ands	r2, r1
   1115a:	729a      	strb	r2, [r3, #10]
   1115c:	7ada      	ldrb	r2, [r3, #11]
   1115e:	2100      	movs	r1, #0
   11160:	400a      	ands	r2, r1
   11162:	72da      	strb	r2, [r3, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
   11164:	4b30      	ldr	r3, [pc, #192]	; (11228 <setDutyCycle+0x1c4>)
   11166:	7a1a      	ldrb	r2, [r3, #8]
   11168:	7a59      	ldrb	r1, [r3, #9]
   1116a:	0209      	lsls	r1, r1, #8
   1116c:	430a      	orrs	r2, r1
   1116e:	7a99      	ldrb	r1, [r3, #10]
   11170:	0409      	lsls	r1, r1, #16
   11172:	430a      	orrs	r2, r1
   11174:	7adb      	ldrb	r3, [r3, #11]
   11176:	061b      	lsls	r3, r3, #24
   11178:	4313      	orrs	r3, r2
   1117a:	0019      	movs	r1, r3
   1117c:	2310      	movs	r3, #16
   1117e:	18fb      	adds	r3, r7, r3
   11180:	789b      	ldrb	r3, [r3, #2]
   11182:	001a      	movs	r2, r3
   11184:	0013      	movs	r3, r2
   11186:	005b      	lsls	r3, r3, #1
   11188:	189b      	adds	r3, r3, r2
   1118a:	009b      	lsls	r3, r3, #2
   1118c:	18ca      	adds	r2, r1, r3
   1118e:	4b26      	ldr	r3, [pc, #152]	; (11228 <setDutyCycle+0x1c4>)
   11190:	7a19      	ldrb	r1, [r3, #8]
   11192:	7a58      	ldrb	r0, [r3, #9]
   11194:	0200      	lsls	r0, r0, #8
   11196:	4301      	orrs	r1, r0
   11198:	7a98      	ldrb	r0, [r3, #10]
   1119a:	0400      	lsls	r0, r0, #16
   1119c:	4301      	orrs	r1, r0
   1119e:	7adb      	ldrb	r3, [r3, #11]
   111a0:	061b      	lsls	r3, r3, #24
   111a2:	430b      	orrs	r3, r1
   111a4:	0018      	movs	r0, r3
   111a6:	2310      	movs	r3, #16
   111a8:	18fb      	adds	r3, r7, r3
   111aa:	789b      	ldrb	r3, [r3, #2]
   111ac:	0019      	movs	r1, r3
   111ae:	000b      	movs	r3, r1
   111b0:	005b      	lsls	r3, r3, #1
   111b2:	185b      	adds	r3, r3, r1
   111b4:	009b      	lsls	r3, r3, #2
   111b6:	18c3      	adds	r3, r0, r3
   111b8:	7adb      	ldrb	r3, [r3, #11]
   111ba:	2104      	movs	r1, #4
   111bc:	430b      	orrs	r3, r1
   111be:	b2db      	uxtb	r3, r3
   111c0:	72d3      	strb	r3, [r2, #11]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   111c2:	4b19      	ldr	r3, [pc, #100]	; (11228 <setDutyCycle+0x1c4>)
   111c4:	4a19      	ldr	r2, [pc, #100]	; (1122c <setDutyCycle+0x1c8>)
   111c6:	5c9a      	ldrb	r2, [r3, r2]
   111c8:	4919      	ldr	r1, [pc, #100]	; (11230 <setDutyCycle+0x1cc>)
   111ca:	5c5b      	ldrb	r3, [r3, r1]
   111cc:	021b      	lsls	r3, r3, #8
   111ce:	4313      	orrs	r3, r2
   111d0:	b29b      	uxth	r3, r3
   111d2:	0a1b      	lsrs	r3, r3, #8
   111d4:	b29a      	uxth	r2, r3
   111d6:	2315      	movs	r3, #21
   111d8:	18fb      	adds	r3, r7, r3
   111da:	701a      	strb	r2, [r3, #0]
   111dc:	4b12      	ldr	r3, [pc, #72]	; (11228 <setDutyCycle+0x1c4>)
   111de:	4a13      	ldr	r2, [pc, #76]	; (1122c <setDutyCycle+0x1c8>)
   111e0:	5c9a      	ldrb	r2, [r3, r2]
   111e2:	4913      	ldr	r1, [pc, #76]	; (11230 <setDutyCycle+0x1cc>)
   111e4:	5c5b      	ldrb	r3, [r3, r1]
   111e6:	021b      	lsls	r3, r3, #8
   111e8:	4313      	orrs	r3, r2
   111ea:	b29a      	uxth	r2, r3
   111ec:	2314      	movs	r3, #20
   111ee:	18fb      	adds	r3, r7, r3
   111f0:	701a      	strb	r2, [r3, #0]
   111f2:	2314      	movs	r3, #20
   111f4:	18fb      	adds	r3, r7, r3
   111f6:	781a      	ldrb	r2, [r3, #0]
   111f8:	2315      	movs	r3, #21
   111fa:	18fb      	adds	r3, r7, r3
   111fc:	781b      	ldrb	r3, [r3, #0]
   111fe:	0011      	movs	r1, r2
   11200:	0018      	movs	r0, r3
   11202:	4b0c      	ldr	r3, [pc, #48]	; (11234 <setDutyCycle+0x1d0>)
   11204:	4798      	blx	r3
   11206:	e003      	b.n	11210 <setDutyCycle+0x1ac>
#endif
	}
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
   11208:	2317      	movs	r3, #23
   1120a:	18fb      	adds	r3, r7, r3
   1120c:	220a      	movs	r2, #10
   1120e:	701a      	strb	r2, [r3, #0]
	}
	return result;
   11210:	2317      	movs	r3, #23
   11212:	18fb      	adds	r3, r7, r3
   11214:	781b      	ldrb	r3, [r3, #0]
}
   11216:	0018      	movs	r0, r3
   11218:	46bd      	mov	sp, r7
   1121a:	b007      	add	sp, #28
   1121c:	bd90      	pop	{r4, r7, pc}
   1121e:	46c0      	nop			; (mov r8, r8)
   11220:	00024149 	.word	0x00024149
   11224:	0000d905 	.word	0x0000d905
   11228:	200014a8 	.word	0x200014a8
   1122c:	00000211 	.word	0x00000211
   11230:	00000212 	.word	0x00000212
   11234:	00013b45 	.word	0x00013b45

00011238 <setDutyCycleTimer>:
#endif

#if (EU_BAND == 1) || (AS_BAND == 1) || (JPN_BAND == 1)
static StackRetStatus_t setDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
   11238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1123a:	b08d      	sub	sp, #52	; 0x34
   1123c:	af02      	add	r7, sp, #8
   1123e:	0002      	movs	r2, r0
   11240:	6039      	str	r1, [r7, #0]
   11242:	1dfb      	adds	r3, r7, #7
   11244:	701a      	strb	r2, [r3, #0]
	UpdateDutyCycleTimer_t updateDCTimer;
	StackRetStatus_t result = LORAWAN_SUCCESS;
   11246:	2317      	movs	r3, #23
   11248:	18fb      	adds	r3, r7, r3
   1124a:	2208      	movs	r2, #8
   1124c:	701a      	strb	r2, [r3, #0]
    bool found = 0;
   1124e:	2327      	movs	r3, #39	; 0x27
   11250:	18fb      	adds	r3, r7, r3
   11252:	2200      	movs	r2, #0
   11254:	701a      	strb	r2, [r3, #0]
    uint8_t i,bandId;
    
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
   11256:	2300      	movs	r3, #0
   11258:	623b      	str	r3, [r7, #32]
   1125a:	2301      	movs	r3, #1
   1125c:	425b      	negs	r3, r3
   1125e:	61fb      	str	r3, [r7, #28]
	
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
   11260:	6839      	ldr	r1, [r7, #0]
   11262:	2308      	movs	r3, #8
   11264:	18fb      	adds	r3, r7, r3
   11266:	2206      	movs	r2, #6
   11268:	0018      	movs	r0, r3
   1126a:	4bb2      	ldr	r3, [pc, #712]	; (11534 <setDutyCycleTimer+0x2fc>)
   1126c:	4798      	blx	r3
	
    //i = RegParams.lastUsedChannelIndex;
	
	// step1: find the sub band of the last used channel
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
   1126e:	4bb2      	ldr	r3, [pc, #712]	; (11538 <setDutyCycleTimer+0x300>)
   11270:	7a1a      	ldrb	r2, [r3, #8]
   11272:	7a59      	ldrb	r1, [r3, #9]
   11274:	0209      	lsls	r1, r1, #8
   11276:	430a      	orrs	r2, r1
   11278:	7a99      	ldrb	r1, [r3, #10]
   1127a:	0409      	lsls	r1, r1, #16
   1127c:	430a      	orrs	r2, r1
   1127e:	7adb      	ldrb	r3, [r3, #11]
   11280:	061b      	lsls	r3, r3, #24
   11282:	4313      	orrs	r3, r2
   11284:	0019      	movs	r1, r3
   11286:	4bac      	ldr	r3, [pc, #688]	; (11538 <setDutyCycleTimer+0x300>)
   11288:	2230      	movs	r2, #48	; 0x30
   1128a:	5c9b      	ldrb	r3, [r3, r2]
   1128c:	001a      	movs	r2, r3
   1128e:	0013      	movs	r3, r2
   11290:	005b      	lsls	r3, r3, #1
   11292:	189b      	adds	r3, r3, r2
   11294:	009b      	lsls	r3, r3, #2
   11296:	18ca      	adds	r2, r1, r3
   11298:	2316      	movs	r3, #22
   1129a:	18fb      	adds	r3, r7, r3
   1129c:	7a12      	ldrb	r2, [r2, #8]
   1129e:	701a      	strb	r2, [r3, #0]
	// Return immediately if the last channel used in not under Dutycycle restrictions as per ARIB Spec
	// Band 0 => 920.6 MHz to 922.2 MHz -> Following LBT
	// Band 1 => 922.4 Mhz to 928.0 MHz -> Follwoing both LBT and Dutycycle 
	if (bandId == 0 && RegParams.band == ISM_JPN923)
   112a0:	2316      	movs	r3, #22
   112a2:	18fb      	adds	r3, r7, r3
   112a4:	781b      	ldrb	r3, [r3, #0]
   112a6:	2b00      	cmp	r3, #0
   112a8:	d108      	bne.n	112bc <setDutyCycleTimer+0x84>
   112aa:	4ba3      	ldr	r3, [pc, #652]	; (11538 <setDutyCycleTimer+0x300>)
   112ac:	222f      	movs	r2, #47	; 0x2f
   112ae:	5c9b      	ldrb	r3, [r3, r2]
   112b0:	2b05      	cmp	r3, #5
   112b2:	d103      	bne.n	112bc <setDutyCycleTimer+0x84>
	{
		return result;
   112b4:	2317      	movs	r3, #23
   112b6:	18fb      	adds	r3, r7, r3
   112b8:	781b      	ldrb	r3, [r3, #0]
   112ba:	e3aa      	b.n	11a12 <setDutyCycleTimer+0x7da>
	}
	
	// this duty cycle setting applies only for data frames; if join frame was latest, then return immediately
	if(updateDCTimer.joining != 1)
   112bc:	2308      	movs	r3, #8
   112be:	18fb      	adds	r3, r7, r3
   112c0:	791b      	ldrb	r3, [r3, #4]
   112c2:	2201      	movs	r2, #1
   112c4:	4053      	eors	r3, r2
   112c6:	b2db      	uxtb	r3, r3
   112c8:	2b00      	cmp	r3, #0
   112ca:	d100      	bne.n	112ce <setDutyCycleTimer+0x96>
   112cc:	e087      	b.n	113de <setDutyCycleTimer+0x1a6>
	{
		// find the new timeout for the subband used for last TX
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
   112ce:	4b9a      	ldr	r3, [pc, #616]	; (11538 <setDutyCycleTimer+0x300>)
   112d0:	7b1a      	ldrb	r2, [r3, #12]
   112d2:	7b59      	ldrb	r1, [r3, #13]
   112d4:	0209      	lsls	r1, r1, #8
   112d6:	430a      	orrs	r2, r1
   112d8:	7b99      	ldrb	r1, [r3, #14]
   112da:	0409      	lsls	r1, r1, #16
   112dc:	430a      	orrs	r2, r1
   112de:	7bdb      	ldrb	r3, [r3, #15]
   112e0:	061b      	lsls	r3, r3, #24
   112e2:	4313      	orrs	r3, r2
   112e4:	0019      	movs	r1, r3
   112e6:	2316      	movs	r3, #22
   112e8:	18fb      	adds	r3, r7, r3
   112ea:	781a      	ldrb	r2, [r3, #0]
   112ec:	0013      	movs	r3, r2
   112ee:	005b      	lsls	r3, r3, #1
   112f0:	189b      	adds	r3, r3, r2
   112f2:	009b      	lsls	r3, r3, #2
   112f4:	18cb      	adds	r3, r1, r3
   112f6:	2208      	movs	r2, #8
   112f8:	18ba      	adds	r2, r7, r2
   112fa:	8812      	ldrh	r2, [r2, #0]
   112fc:	0014      	movs	r4, r2
   112fe:	2216      	movs	r2, #22
   11300:	18ba      	adds	r2, r7, r2
   11302:	7812      	ldrb	r2, [r2, #0]
   11304:	498c      	ldr	r1, [pc, #560]	; (11538 <setDutyCycleTimer+0x300>)
   11306:	32d4      	adds	r2, #212	; 0xd4
   11308:	0052      	lsls	r2, r2, #1
   1130a:	1888      	adds	r0, r1, r2
   1130c:	7980      	ldrb	r0, [r0, #6]
   1130e:	188a      	adds	r2, r1, r2
   11310:	79d2      	ldrb	r2, [r2, #7]
   11312:	0212      	lsls	r2, r2, #8
   11314:	4302      	orrs	r2, r0
   11316:	b292      	uxth	r2, r2
   11318:	3a01      	subs	r2, #1
   1131a:	4362      	muls	r2, r4
   1131c:	21ff      	movs	r1, #255	; 0xff
   1131e:	4011      	ands	r1, r2
   11320:	000c      	movs	r4, r1
   11322:	7a19      	ldrb	r1, [r3, #8]
   11324:	2000      	movs	r0, #0
   11326:	4001      	ands	r1, r0
   11328:	1c08      	adds	r0, r1, #0
   1132a:	1c21      	adds	r1, r4, #0
   1132c:	4301      	orrs	r1, r0
   1132e:	7219      	strb	r1, [r3, #8]
   11330:	0a11      	lsrs	r1, r2, #8
   11332:	20ff      	movs	r0, #255	; 0xff
   11334:	4001      	ands	r1, r0
   11336:	000c      	movs	r4, r1
   11338:	7a59      	ldrb	r1, [r3, #9]
   1133a:	2000      	movs	r0, #0
   1133c:	4001      	ands	r1, r0
   1133e:	1c08      	adds	r0, r1, #0
   11340:	1c21      	adds	r1, r4, #0
   11342:	4301      	orrs	r1, r0
   11344:	7259      	strb	r1, [r3, #9]
   11346:	0c11      	lsrs	r1, r2, #16
   11348:	20ff      	movs	r0, #255	; 0xff
   1134a:	4001      	ands	r1, r0
   1134c:	000c      	movs	r4, r1
   1134e:	7a99      	ldrb	r1, [r3, #10]
   11350:	2000      	movs	r0, #0
   11352:	4001      	ands	r1, r0
   11354:	1c08      	adds	r0, r1, #0
   11356:	1c21      	adds	r1, r4, #0
   11358:	4301      	orrs	r1, r0
   1135a:	7299      	strb	r1, [r3, #10]
   1135c:	0e10      	lsrs	r0, r2, #24
   1135e:	7ada      	ldrb	r2, [r3, #11]
   11360:	2100      	movs	r1, #0
   11362:	400a      	ands	r2, r1
   11364:	1c11      	adds	r1, r2, #0
   11366:	1c02      	adds	r2, r0, #0
   11368:	430a      	orrs	r2, r1
   1136a:	72da      	strb	r2, [r3, #11]
		// find the new aggregated timeout over all bands
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
   1136c:	2308      	movs	r3, #8
   1136e:	18fb      	adds	r3, r7, r3
   11370:	881b      	ldrh	r3, [r3, #0]
   11372:	001a      	movs	r2, r3
   11374:	2308      	movs	r3, #8
   11376:	18fb      	adds	r3, r7, r3
   11378:	885b      	ldrh	r3, [r3, #2]
   1137a:	3b01      	subs	r3, #1
   1137c:	4353      	muls	r3, r2
   1137e:	0019      	movs	r1, r3
   11380:	4a6d      	ldr	r2, [pc, #436]	; (11538 <setDutyCycleTimer+0x300>)
   11382:	23dd      	movs	r3, #221	; 0xdd
   11384:	005b      	lsls	r3, r3, #1
   11386:	20ff      	movs	r0, #255	; 0xff
   11388:	4008      	ands	r0, r1
   1138a:	0005      	movs	r5, r0
   1138c:	5cd0      	ldrb	r0, [r2, r3]
   1138e:	2400      	movs	r4, #0
   11390:	4020      	ands	r0, r4
   11392:	1c04      	adds	r4, r0, #0
   11394:	1c28      	adds	r0, r5, #0
   11396:	4320      	orrs	r0, r4
   11398:	54d0      	strb	r0, [r2, r3]
   1139a:	0a08      	lsrs	r0, r1, #8
   1139c:	24ff      	movs	r4, #255	; 0xff
   1139e:	4020      	ands	r0, r4
   113a0:	0006      	movs	r6, r0
   113a2:	18d0      	adds	r0, r2, r3
   113a4:	7844      	ldrb	r4, [r0, #1]
   113a6:	2500      	movs	r5, #0
   113a8:	402c      	ands	r4, r5
   113aa:	1c25      	adds	r5, r4, #0
   113ac:	1c34      	adds	r4, r6, #0
   113ae:	432c      	orrs	r4, r5
   113b0:	7044      	strb	r4, [r0, #1]
   113b2:	0c08      	lsrs	r0, r1, #16
   113b4:	24ff      	movs	r4, #255	; 0xff
   113b6:	4020      	ands	r0, r4
   113b8:	0006      	movs	r6, r0
   113ba:	18d0      	adds	r0, r2, r3
   113bc:	7884      	ldrb	r4, [r0, #2]
   113be:	2500      	movs	r5, #0
   113c0:	402c      	ands	r4, r5
   113c2:	1c25      	adds	r5, r4, #0
   113c4:	1c34      	adds	r4, r6, #0
   113c6:	432c      	orrs	r4, r5
   113c8:	7084      	strb	r4, [r0, #2]
   113ca:	0e08      	lsrs	r0, r1, #24
   113cc:	18d3      	adds	r3, r2, r3
   113ce:	78da      	ldrb	r2, [r3, #3]
   113d0:	2100      	movs	r1, #0
   113d2:	400a      	ands	r2, r1
   113d4:	1c11      	adds	r1, r2, #0
   113d6:	1c02      	adds	r2, r0, #0
   113d8:	430a      	orrs	r2, r1
   113da:	70da      	strb	r2, [r3, #3]
   113dc:	e032      	b.n	11444 <setDutyCycleTimer+0x20c>
	}
	else
	{
		//return result;
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
   113de:	2308      	movs	r3, #8
   113e0:	18fb      	adds	r3, r7, r3
   113e2:	881b      	ldrh	r3, [r3, #0]
   113e4:	001a      	movs	r2, r3
   113e6:	2308      	movs	r3, #8
   113e8:	18fb      	adds	r3, r7, r3
   113ea:	885b      	ldrh	r3, [r3, #2]
   113ec:	3b01      	subs	r3, #1
   113ee:	435a      	muls	r2, r3
   113f0:	4b51      	ldr	r3, [pc, #324]	; (11538 <setDutyCycleTimer+0x300>)
   113f2:	333f      	adds	r3, #63	; 0x3f
   113f4:	21ff      	movs	r1, #255	; 0xff
   113f6:	4011      	ands	r1, r2
   113f8:	000c      	movs	r4, r1
   113fa:	7819      	ldrb	r1, [r3, #0]
   113fc:	2000      	movs	r0, #0
   113fe:	4001      	ands	r1, r0
   11400:	1c08      	adds	r0, r1, #0
   11402:	1c21      	adds	r1, r4, #0
   11404:	4301      	orrs	r1, r0
   11406:	7019      	strb	r1, [r3, #0]
   11408:	0a11      	lsrs	r1, r2, #8
   1140a:	20ff      	movs	r0, #255	; 0xff
   1140c:	4001      	ands	r1, r0
   1140e:	000c      	movs	r4, r1
   11410:	7859      	ldrb	r1, [r3, #1]
   11412:	2000      	movs	r0, #0
   11414:	4001      	ands	r1, r0
   11416:	1c08      	adds	r0, r1, #0
   11418:	1c21      	adds	r1, r4, #0
   1141a:	4301      	orrs	r1, r0
   1141c:	7059      	strb	r1, [r3, #1]
   1141e:	0c11      	lsrs	r1, r2, #16
   11420:	20ff      	movs	r0, #255	; 0xff
   11422:	4001      	ands	r1, r0
   11424:	000c      	movs	r4, r1
   11426:	7899      	ldrb	r1, [r3, #2]
   11428:	2000      	movs	r0, #0
   1142a:	4001      	ands	r1, r0
   1142c:	1c08      	adds	r0, r1, #0
   1142e:	1c21      	adds	r1, r4, #0
   11430:	4301      	orrs	r1, r0
   11432:	7099      	strb	r1, [r3, #2]
   11434:	0e10      	lsrs	r0, r2, #24
   11436:	78da      	ldrb	r2, [r3, #3]
   11438:	2100      	movs	r1, #0
   1143a:	400a      	ands	r2, r1
   1143c:	1c11      	adds	r1, r2, #0
   1143e:	1c02      	adds	r2, r0, #0
   11440:	430a      	orrs	r2, r1
   11442:	70da      	strb	r2, [r3, #3]
	}
	
	// find how much time from last timeout is due yet
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
   11444:	4b3c      	ldr	r3, [pc, #240]	; (11538 <setDutyCycleTimer+0x300>)
   11446:	7c1a      	ldrb	r2, [r3, #16]
   11448:	7c59      	ldrb	r1, [r3, #17]
   1144a:	0209      	lsls	r1, r1, #8
   1144c:	430a      	orrs	r2, r1
   1144e:	7c99      	ldrb	r1, [r3, #18]
   11450:	0409      	lsls	r1, r1, #16
   11452:	430a      	orrs	r2, r1
   11454:	7cdb      	ldrb	r3, [r3, #19]
   11456:	061b      	lsls	r3, r3, #24
   11458:	4313      	orrs	r3, r2
   1145a:	791b      	ldrb	r3, [r3, #4]
   1145c:	0018      	movs	r0, r3
   1145e:	4b37      	ldr	r3, [pc, #220]	; (1153c <setDutyCycleTimer+0x304>)
   11460:	4798      	blx	r3
   11462:	1e03      	subs	r3, r0, #0
   11464:	d03d      	beq.n	114e2 <setDutyCycleTimer+0x2aa>
	{
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
   11466:	4b34      	ldr	r3, [pc, #208]	; (11538 <setDutyCycleTimer+0x300>)
   11468:	7c1a      	ldrb	r2, [r3, #16]
   1146a:	7c59      	ldrb	r1, [r3, #17]
   1146c:	0209      	lsls	r1, r1, #8
   1146e:	430a      	orrs	r2, r1
   11470:	7c99      	ldrb	r1, [r3, #18]
   11472:	0409      	lsls	r1, r1, #16
   11474:	430a      	orrs	r2, r1
   11476:	7cdb      	ldrb	r3, [r3, #19]
   11478:	061b      	lsls	r3, r3, #24
   1147a:	4313      	orrs	r3, r2
   1147c:	791b      	ldrb	r3, [r3, #4]
   1147e:	0018      	movs	r0, r3
   11480:	4b2f      	ldr	r3, [pc, #188]	; (11540 <setDutyCycleTimer+0x308>)
   11482:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
   11484:	4b2c      	ldr	r3, [pc, #176]	; (11538 <setDutyCycleTimer+0x300>)
   11486:	7c1a      	ldrb	r2, [r3, #16]
   11488:	7c59      	ldrb	r1, [r3, #17]
   1148a:	0209      	lsls	r1, r1, #8
   1148c:	430a      	orrs	r2, r1
   1148e:	7c99      	ldrb	r1, [r3, #18]
   11490:	0409      	lsls	r1, r1, #16
   11492:	430a      	orrs	r2, r1
   11494:	7cdb      	ldrb	r3, [r3, #19]
   11496:	061b      	lsls	r3, r3, #24
   11498:	4313      	orrs	r3, r2
   1149a:	791b      	ldrb	r3, [r3, #4]
   1149c:	0018      	movs	r0, r3
   1149e:	4b29      	ldr	r3, [pc, #164]	; (11544 <setDutyCycleTimer+0x30c>)
   114a0:	4798      	blx	r3
   114a2:	0003      	movs	r3, r0
   114a4:	613b      	str	r3, [r7, #16]
		
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
   114a6:	4b24      	ldr	r3, [pc, #144]	; (11538 <setDutyCycleTimer+0x300>)
   114a8:	7c1a      	ldrb	r2, [r3, #16]
   114aa:	7c59      	ldrb	r1, [r3, #17]
   114ac:	0209      	lsls	r1, r1, #8
   114ae:	430a      	orrs	r2, r1
   114b0:	7c99      	ldrb	r1, [r3, #18]
   114b2:	0409      	lsls	r1, r1, #16
   114b4:	430a      	orrs	r2, r1
   114b6:	7cdb      	ldrb	r3, [r3, #19]
   114b8:	061b      	lsls	r3, r3, #24
   114ba:	4313      	orrs	r3, r2
   114bc:	781a      	ldrb	r2, [r3, #0]
   114be:	7859      	ldrb	r1, [r3, #1]
   114c0:	0209      	lsls	r1, r1, #8
   114c2:	430a      	orrs	r2, r1
   114c4:	7899      	ldrb	r1, [r3, #2]
   114c6:	0409      	lsls	r1, r1, #16
   114c8:	430a      	orrs	r2, r1
   114ca:	78db      	ldrb	r3, [r3, #3]
   114cc:	061b      	lsls	r3, r3, #24
   114ce:	4313      	orrs	r3, r2
   114d0:	001c      	movs	r4, r3
   114d2:	6938      	ldr	r0, [r7, #16]
   114d4:	4b1c      	ldr	r3, [pc, #112]	; (11548 <setDutyCycleTimer+0x310>)
   114d6:	22fa      	movs	r2, #250	; 0xfa
   114d8:	0091      	lsls	r1, r2, #2
   114da:	4798      	blx	r3
   114dc:	0003      	movs	r3, r0
   114de:	1ae3      	subs	r3, r4, r3
   114e0:	623b      	str	r3, [r7, #32]
	}
	// assume that last-used-subband has the minimum most timeout
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
   114e2:	4b15      	ldr	r3, [pc, #84]	; (11538 <setDutyCycleTimer+0x300>)
   114e4:	7b1a      	ldrb	r2, [r3, #12]
   114e6:	7b59      	ldrb	r1, [r3, #13]
   114e8:	0209      	lsls	r1, r1, #8
   114ea:	430a      	orrs	r2, r1
   114ec:	7b99      	ldrb	r1, [r3, #14]
   114ee:	0409      	lsls	r1, r1, #16
   114f0:	430a      	orrs	r2, r1
   114f2:	7bdb      	ldrb	r3, [r3, #15]
   114f4:	061b      	lsls	r3, r3, #24
   114f6:	4313      	orrs	r3, r2
   114f8:	0019      	movs	r1, r3
   114fa:	2316      	movs	r3, #22
   114fc:	18fb      	adds	r3, r7, r3
   114fe:	781a      	ldrb	r2, [r3, #0]
   11500:	0013      	movs	r3, r2
   11502:	005b      	lsls	r3, r3, #1
   11504:	189b      	adds	r3, r3, r2
   11506:	009b      	lsls	r3, r3, #2
   11508:	18cb      	adds	r3, r1, r3
   1150a:	7a1a      	ldrb	r2, [r3, #8]
   1150c:	7a59      	ldrb	r1, [r3, #9]
   1150e:	0209      	lsls	r1, r1, #8
   11510:	430a      	orrs	r2, r1
   11512:	7a99      	ldrb	r1, [r3, #10]
   11514:	0409      	lsls	r1, r1, #16
   11516:	430a      	orrs	r2, r1
   11518:	7adb      	ldrb	r3, [r3, #11]
   1151a:	061b      	lsls	r3, r3, #24
   1151c:	4313      	orrs	r3, r2
   1151e:	61fb      	str	r3, [r7, #28]
	found = 1;
   11520:	2327      	movs	r3, #39	; 0x27
   11522:	18fb      	adds	r3, r7, r3
   11524:	2201      	movs	r2, #1
   11526:	701a      	strb	r2, [r3, #0]
	
	// walk over all available sub-bands
	for(i = 0; i < RegParams.maxSubBands; i++)
   11528:	2326      	movs	r3, #38	; 0x26
   1152a:	18fb      	adds	r3, r7, r3
   1152c:	2200      	movs	r2, #0
   1152e:	701a      	strb	r2, [r3, #0]
   11530:	e144      	b.n	117bc <setDutyCycleTimer+0x584>
   11532:	46c0      	nop			; (mov r8, r8)
   11534:	00024149 	.word	0x00024149
   11538:	200014a8 	.word	0x200014a8
   1153c:	00015a89 	.word	0x00015a89
   11540:	00015cfd 	.word	0x00015cfd
   11544:	00015ab9 	.word	0x00015ab9
   11548:	00021069 	.word	0x00021069
	{ // ignore if this the last used sub-band -- bandId stores it's index
		// cond #1: it is a sub-band other than last used sub-band
		// cond #2: it is a sub-band that cannot be used right now
		// BOTH HAS TO HOLD TRUE
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
   1154c:	2326      	movs	r3, #38	; 0x26
   1154e:	18fa      	adds	r2, r7, r3
   11550:	2316      	movs	r3, #22
   11552:	18fb      	adds	r3, r7, r3
   11554:	7812      	ldrb	r2, [r2, #0]
   11556:	781b      	ldrb	r3, [r3, #0]
   11558:	429a      	cmp	r2, r3
   1155a:	d100      	bne.n	1155e <setDutyCycleTimer+0x326>
   1155c:	e127      	b.n	117ae <setDutyCycleTimer+0x576>
   1155e:	4bd4      	ldr	r3, [pc, #848]	; (118b0 <setDutyCycleTimer+0x678>)
   11560:	7b1a      	ldrb	r2, [r3, #12]
   11562:	7b59      	ldrb	r1, [r3, #13]
   11564:	0209      	lsls	r1, r1, #8
   11566:	430a      	orrs	r2, r1
   11568:	7b99      	ldrb	r1, [r3, #14]
   1156a:	0409      	lsls	r1, r1, #16
   1156c:	430a      	orrs	r2, r1
   1156e:	7bdb      	ldrb	r3, [r3, #15]
   11570:	061b      	lsls	r3, r3, #24
   11572:	4313      	orrs	r3, r2
   11574:	0019      	movs	r1, r3
   11576:	2326      	movs	r3, #38	; 0x26
   11578:	18fb      	adds	r3, r7, r3
   1157a:	781a      	ldrb	r2, [r3, #0]
   1157c:	0013      	movs	r3, r2
   1157e:	005b      	lsls	r3, r3, #1
   11580:	189b      	adds	r3, r3, r2
   11582:	009b      	lsls	r3, r3, #2
   11584:	18cb      	adds	r3, r1, r3
   11586:	7a1a      	ldrb	r2, [r3, #8]
   11588:	7a59      	ldrb	r1, [r3, #9]
   1158a:	0209      	lsls	r1, r1, #8
   1158c:	430a      	orrs	r2, r1
   1158e:	7a99      	ldrb	r1, [r3, #10]
   11590:	0409      	lsls	r1, r1, #16
   11592:	430a      	orrs	r2, r1
   11594:	7adb      	ldrb	r3, [r3, #11]
   11596:	061b      	lsls	r3, r3, #24
   11598:	4313      	orrs	r3, r2
   1159a:	d100      	bne.n	1159e <setDutyCycleTimer+0x366>
   1159c:	e107      	b.n	117ae <setDutyCycleTimer+0x576>
		{
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
   1159e:	4bc4      	ldr	r3, [pc, #784]	; (118b0 <setDutyCycleTimer+0x678>)
   115a0:	7b1a      	ldrb	r2, [r3, #12]
   115a2:	7b59      	ldrb	r1, [r3, #13]
   115a4:	0209      	lsls	r1, r1, #8
   115a6:	430a      	orrs	r2, r1
   115a8:	7b99      	ldrb	r1, [r3, #14]
   115aa:	0409      	lsls	r1, r1, #16
   115ac:	430a      	orrs	r2, r1
   115ae:	7bdb      	ldrb	r3, [r3, #15]
   115b0:	061b      	lsls	r3, r3, #24
   115b2:	4313      	orrs	r3, r2
   115b4:	0019      	movs	r1, r3
   115b6:	2326      	movs	r3, #38	; 0x26
   115b8:	18fb      	adds	r3, r7, r3
   115ba:	781a      	ldrb	r2, [r3, #0]
   115bc:	0013      	movs	r3, r2
   115be:	005b      	lsls	r3, r3, #1
   115c0:	189b      	adds	r3, r3, r2
   115c2:	009b      	lsls	r3, r3, #2
   115c4:	18cb      	adds	r3, r1, r3
   115c6:	7a1a      	ldrb	r2, [r3, #8]
   115c8:	7a59      	ldrb	r1, [r3, #9]
   115ca:	0209      	lsls	r1, r1, #8
   115cc:	430a      	orrs	r2, r1
   115ce:	7a99      	ldrb	r1, [r3, #10]
   115d0:	0409      	lsls	r1, r1, #16
   115d2:	430a      	orrs	r2, r1
   115d4:	7adb      	ldrb	r3, [r3, #11]
   115d6:	061b      	lsls	r3, r3, #24
   115d8:	4313      	orrs	r3, r2
   115da:	001a      	movs	r2, r3
   115dc:	6a3b      	ldr	r3, [r7, #32]
   115de:	429a      	cmp	r2, r3
   115e0:	d95d      	bls.n	1169e <setDutyCycleTimer+0x466>
			{
				// this sub-band has timeout left yet
				RegParams.pSubBandParams[i].subBandTimeout = 
   115e2:	4bb3      	ldr	r3, [pc, #716]	; (118b0 <setDutyCycleTimer+0x678>)
   115e4:	7b1a      	ldrb	r2, [r3, #12]
   115e6:	7b59      	ldrb	r1, [r3, #13]
   115e8:	0209      	lsls	r1, r1, #8
   115ea:	430a      	orrs	r2, r1
   115ec:	7b99      	ldrb	r1, [r3, #14]
   115ee:	0409      	lsls	r1, r1, #16
   115f0:	430a      	orrs	r2, r1
   115f2:	7bdb      	ldrb	r3, [r3, #15]
   115f4:	061b      	lsls	r3, r3, #24
   115f6:	4313      	orrs	r3, r2
   115f8:	0019      	movs	r1, r3
   115fa:	2326      	movs	r3, #38	; 0x26
   115fc:	18fb      	adds	r3, r7, r3
   115fe:	781a      	ldrb	r2, [r3, #0]
   11600:	0013      	movs	r3, r2
   11602:	005b      	lsls	r3, r3, #1
   11604:	189b      	adds	r3, r3, r2
   11606:	009b      	lsls	r3, r3, #2
   11608:	18cb      	adds	r3, r1, r3
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
   1160a:	4aa9      	ldr	r2, [pc, #676]	; (118b0 <setDutyCycleTimer+0x678>)
   1160c:	7b11      	ldrb	r1, [r2, #12]
   1160e:	7b50      	ldrb	r0, [r2, #13]
   11610:	0200      	lsls	r0, r0, #8
   11612:	4301      	orrs	r1, r0
   11614:	7b90      	ldrb	r0, [r2, #14]
   11616:	0400      	lsls	r0, r0, #16
   11618:	4301      	orrs	r1, r0
   1161a:	7bd2      	ldrb	r2, [r2, #15]
   1161c:	0612      	lsls	r2, r2, #24
   1161e:	430a      	orrs	r2, r1
   11620:	0010      	movs	r0, r2
   11622:	2226      	movs	r2, #38	; 0x26
   11624:	18ba      	adds	r2, r7, r2
   11626:	7811      	ldrb	r1, [r2, #0]
   11628:	000a      	movs	r2, r1
   1162a:	0052      	lsls	r2, r2, #1
   1162c:	1852      	adds	r2, r2, r1
   1162e:	0092      	lsls	r2, r2, #2
   11630:	1882      	adds	r2, r0, r2
   11632:	7a11      	ldrb	r1, [r2, #8]
   11634:	7a50      	ldrb	r0, [r2, #9]
   11636:	0200      	lsls	r0, r0, #8
   11638:	4301      	orrs	r1, r0
   1163a:	7a90      	ldrb	r0, [r2, #10]
   1163c:	0400      	lsls	r0, r0, #16
   1163e:	4301      	orrs	r1, r0
   11640:	7ad2      	ldrb	r2, [r2, #11]
   11642:	0612      	lsls	r2, r2, #24
   11644:	430a      	orrs	r2, r1
   11646:	0011      	movs	r1, r2
   11648:	6a3a      	ldr	r2, [r7, #32]
   1164a:	1a8a      	subs	r2, r1, r2
				RegParams.pSubBandParams[i].subBandTimeout = 
   1164c:	21ff      	movs	r1, #255	; 0xff
   1164e:	4011      	ands	r1, r2
   11650:	000c      	movs	r4, r1
   11652:	7a19      	ldrb	r1, [r3, #8]
   11654:	2000      	movs	r0, #0
   11656:	4001      	ands	r1, r0
   11658:	1c08      	adds	r0, r1, #0
   1165a:	1c21      	adds	r1, r4, #0
   1165c:	4301      	orrs	r1, r0
   1165e:	7219      	strb	r1, [r3, #8]
   11660:	0a11      	lsrs	r1, r2, #8
   11662:	20ff      	movs	r0, #255	; 0xff
   11664:	4001      	ands	r1, r0
   11666:	000c      	movs	r4, r1
   11668:	7a59      	ldrb	r1, [r3, #9]
   1166a:	2000      	movs	r0, #0
   1166c:	4001      	ands	r1, r0
   1166e:	1c08      	adds	r0, r1, #0
   11670:	1c21      	adds	r1, r4, #0
   11672:	4301      	orrs	r1, r0
   11674:	7259      	strb	r1, [r3, #9]
   11676:	0c11      	lsrs	r1, r2, #16
   11678:	20ff      	movs	r0, #255	; 0xff
   1167a:	4001      	ands	r1, r0
   1167c:	000c      	movs	r4, r1
   1167e:	7a99      	ldrb	r1, [r3, #10]
   11680:	2000      	movs	r0, #0
   11682:	4001      	ands	r1, r0
   11684:	1c08      	adds	r0, r1, #0
   11686:	1c21      	adds	r1, r4, #0
   11688:	4301      	orrs	r1, r0
   1168a:	7299      	strb	r1, [r3, #10]
   1168c:	0e10      	lsrs	r0, r2, #24
   1168e:	7ada      	ldrb	r2, [r3, #11]
   11690:	2100      	movs	r1, #0
   11692:	400a      	ands	r2, r1
   11694:	1c11      	adds	r1, r2, #0
   11696:	1c02      	adds	r2, r0, #0
   11698:	430a      	orrs	r2, r1
   1169a:	72da      	strb	r2, [r3, #11]
   1169c:	e023      	b.n	116e6 <setDutyCycleTimer+0x4ae>
			}
			else
			{// this sub-band timeout has elapsed already
				RegParams.pSubBandParams[i].subBandTimeout = 0;
   1169e:	4b84      	ldr	r3, [pc, #528]	; (118b0 <setDutyCycleTimer+0x678>)
   116a0:	7b1a      	ldrb	r2, [r3, #12]
   116a2:	7b59      	ldrb	r1, [r3, #13]
   116a4:	0209      	lsls	r1, r1, #8
   116a6:	430a      	orrs	r2, r1
   116a8:	7b99      	ldrb	r1, [r3, #14]
   116aa:	0409      	lsls	r1, r1, #16
   116ac:	430a      	orrs	r2, r1
   116ae:	7bdb      	ldrb	r3, [r3, #15]
   116b0:	061b      	lsls	r3, r3, #24
   116b2:	4313      	orrs	r3, r2
   116b4:	0019      	movs	r1, r3
   116b6:	2326      	movs	r3, #38	; 0x26
   116b8:	18fb      	adds	r3, r7, r3
   116ba:	781a      	ldrb	r2, [r3, #0]
   116bc:	0013      	movs	r3, r2
   116be:	005b      	lsls	r3, r3, #1
   116c0:	189b      	adds	r3, r3, r2
   116c2:	009b      	lsls	r3, r3, #2
   116c4:	18cb      	adds	r3, r1, r3
   116c6:	7a1a      	ldrb	r2, [r3, #8]
   116c8:	2100      	movs	r1, #0
   116ca:	400a      	ands	r2, r1
   116cc:	721a      	strb	r2, [r3, #8]
   116ce:	7a5a      	ldrb	r2, [r3, #9]
   116d0:	2100      	movs	r1, #0
   116d2:	400a      	ands	r2, r1
   116d4:	725a      	strb	r2, [r3, #9]
   116d6:	7a9a      	ldrb	r2, [r3, #10]
   116d8:	2100      	movs	r1, #0
   116da:	400a      	ands	r2, r1
   116dc:	729a      	strb	r2, [r3, #10]
   116de:	7ada      	ldrb	r2, [r3, #11]
   116e0:	2100      	movs	r1, #0
   116e2:	400a      	ands	r2, r1
   116e4:	72da      	strb	r2, [r3, #11]
			}
			
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
   116e6:	4b72      	ldr	r3, [pc, #456]	; (118b0 <setDutyCycleTimer+0x678>)
   116e8:	7b1a      	ldrb	r2, [r3, #12]
   116ea:	7b59      	ldrb	r1, [r3, #13]
   116ec:	0209      	lsls	r1, r1, #8
   116ee:	430a      	orrs	r2, r1
   116f0:	7b99      	ldrb	r1, [r3, #14]
   116f2:	0409      	lsls	r1, r1, #16
   116f4:	430a      	orrs	r2, r1
   116f6:	7bdb      	ldrb	r3, [r3, #15]
   116f8:	061b      	lsls	r3, r3, #24
   116fa:	4313      	orrs	r3, r2
   116fc:	0019      	movs	r1, r3
   116fe:	2326      	movs	r3, #38	; 0x26
   11700:	18fb      	adds	r3, r7, r3
   11702:	781a      	ldrb	r2, [r3, #0]
   11704:	0013      	movs	r3, r2
   11706:	005b      	lsls	r3, r3, #1
   11708:	189b      	adds	r3, r3, r2
   1170a:	009b      	lsls	r3, r3, #2
   1170c:	18cb      	adds	r3, r1, r3
   1170e:	7a1a      	ldrb	r2, [r3, #8]
   11710:	7a59      	ldrb	r1, [r3, #9]
   11712:	0209      	lsls	r1, r1, #8
   11714:	430a      	orrs	r2, r1
   11716:	7a99      	ldrb	r1, [r3, #10]
   11718:	0409      	lsls	r1, r1, #16
   1171a:	430a      	orrs	r2, r1
   1171c:	7adb      	ldrb	r3, [r3, #11]
   1171e:	061b      	lsls	r3, r3, #24
   11720:	4313      	orrs	r3, r2
   11722:	001a      	movs	r2, r3
   11724:	69fb      	ldr	r3, [r7, #28]
   11726:	429a      	cmp	r2, r3
   11728:	d841      	bhi.n	117ae <setDutyCycleTimer+0x576>
   1172a:	4b61      	ldr	r3, [pc, #388]	; (118b0 <setDutyCycleTimer+0x678>)
   1172c:	7b1a      	ldrb	r2, [r3, #12]
   1172e:	7b59      	ldrb	r1, [r3, #13]
   11730:	0209      	lsls	r1, r1, #8
   11732:	430a      	orrs	r2, r1
   11734:	7b99      	ldrb	r1, [r3, #14]
   11736:	0409      	lsls	r1, r1, #16
   11738:	430a      	orrs	r2, r1
   1173a:	7bdb      	ldrb	r3, [r3, #15]
   1173c:	061b      	lsls	r3, r3, #24
   1173e:	4313      	orrs	r3, r2
   11740:	0019      	movs	r1, r3
   11742:	2326      	movs	r3, #38	; 0x26
   11744:	18fb      	adds	r3, r7, r3
   11746:	781a      	ldrb	r2, [r3, #0]
   11748:	0013      	movs	r3, r2
   1174a:	005b      	lsls	r3, r3, #1
   1174c:	189b      	adds	r3, r3, r2
   1174e:	009b      	lsls	r3, r3, #2
   11750:	18cb      	adds	r3, r1, r3
   11752:	7a1a      	ldrb	r2, [r3, #8]
   11754:	7a59      	ldrb	r1, [r3, #9]
   11756:	0209      	lsls	r1, r1, #8
   11758:	430a      	orrs	r2, r1
   1175a:	7a99      	ldrb	r1, [r3, #10]
   1175c:	0409      	lsls	r1, r1, #16
   1175e:	430a      	orrs	r2, r1
   11760:	7adb      	ldrb	r3, [r3, #11]
   11762:	061b      	lsls	r3, r3, #24
   11764:	4313      	orrs	r3, r2
   11766:	d022      	beq.n	117ae <setDutyCycleTimer+0x576>
			{
				// if this is smaller time than last used subband and it has still timeout to elapse then this is the new minimum
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
   11768:	4b51      	ldr	r3, [pc, #324]	; (118b0 <setDutyCycleTimer+0x678>)
   1176a:	7b1a      	ldrb	r2, [r3, #12]
   1176c:	7b59      	ldrb	r1, [r3, #13]
   1176e:	0209      	lsls	r1, r1, #8
   11770:	430a      	orrs	r2, r1
   11772:	7b99      	ldrb	r1, [r3, #14]
   11774:	0409      	lsls	r1, r1, #16
   11776:	430a      	orrs	r2, r1
   11778:	7bdb      	ldrb	r3, [r3, #15]
   1177a:	061b      	lsls	r3, r3, #24
   1177c:	4313      	orrs	r3, r2
   1177e:	0019      	movs	r1, r3
   11780:	2326      	movs	r3, #38	; 0x26
   11782:	18fb      	adds	r3, r7, r3
   11784:	781a      	ldrb	r2, [r3, #0]
   11786:	0013      	movs	r3, r2
   11788:	005b      	lsls	r3, r3, #1
   1178a:	189b      	adds	r3, r3, r2
   1178c:	009b      	lsls	r3, r3, #2
   1178e:	18cb      	adds	r3, r1, r3
   11790:	7a1a      	ldrb	r2, [r3, #8]
   11792:	7a59      	ldrb	r1, [r3, #9]
   11794:	0209      	lsls	r1, r1, #8
   11796:	430a      	orrs	r2, r1
   11798:	7a99      	ldrb	r1, [r3, #10]
   1179a:	0409      	lsls	r1, r1, #16
   1179c:	430a      	orrs	r2, r1
   1179e:	7adb      	ldrb	r3, [r3, #11]
   117a0:	061b      	lsls	r3, r3, #24
   117a2:	4313      	orrs	r3, r2
   117a4:	61fb      	str	r3, [r7, #28]
				found = 1;
   117a6:	2327      	movs	r3, #39	; 0x27
   117a8:	18fb      	adds	r3, r7, r3
   117aa:	2201      	movs	r2, #1
   117ac:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < RegParams.maxSubBands; i++)
   117ae:	2326      	movs	r3, #38	; 0x26
   117b0:	18fb      	adds	r3, r7, r3
   117b2:	781a      	ldrb	r2, [r3, #0]
   117b4:	2326      	movs	r3, #38	; 0x26
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	3201      	adds	r2, #1
   117ba:	701a      	strb	r2, [r3, #0]
   117bc:	4b3c      	ldr	r3, [pc, #240]	; (118b0 <setDutyCycleTimer+0x678>)
   117be:	2229      	movs	r2, #41	; 0x29
   117c0:	5c9b      	ldrb	r3, [r3, r2]
   117c2:	2226      	movs	r2, #38	; 0x26
   117c4:	18ba      	adds	r2, r7, r2
   117c6:	7812      	ldrb	r2, [r2, #0]
   117c8:	429a      	cmp	r2, r3
   117ca:	d200      	bcs.n	117ce <setDutyCycleTimer+0x596>
   117cc:	e6be      	b.n	1154c <setDutyCycleTimer+0x314>
			}
		}
	}
	
	// following block works if DutyCycleReq command imposed specific restrictions in addition to the regional parameters regulations
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
   117ce:	4b38      	ldr	r3, [pc, #224]	; (118b0 <setDutyCycleTimer+0x678>)
   117d0:	22dd      	movs	r2, #221	; 0xdd
   117d2:	0052      	lsls	r2, r2, #1
   117d4:	5c9a      	ldrb	r2, [r3, r2]
   117d6:	21bc      	movs	r1, #188	; 0xbc
   117d8:	31ff      	adds	r1, #255	; 0xff
   117da:	5c59      	ldrb	r1, [r3, r1]
   117dc:	0209      	lsls	r1, r1, #8
   117de:	430a      	orrs	r2, r1
   117e0:	21de      	movs	r1, #222	; 0xde
   117e2:	0049      	lsls	r1, r1, #1
   117e4:	5c59      	ldrb	r1, [r3, r1]
   117e6:	0409      	lsls	r1, r1, #16
   117e8:	430a      	orrs	r2, r1
   117ea:	21be      	movs	r1, #190	; 0xbe
   117ec:	31ff      	adds	r1, #255	; 0xff
   117ee:	5c5b      	ldrb	r3, [r3, r1]
   117f0:	061b      	lsls	r3, r3, #24
   117f2:	4313      	orrs	r3, r2
   117f4:	d100      	bne.n	117f8 <setDutyCycleTimer+0x5c0>
   117f6:	e08b      	b.n	11910 <setDutyCycleTimer+0x6d8>
	{
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
   117f8:	4b2d      	ldr	r3, [pc, #180]	; (118b0 <setDutyCycleTimer+0x678>)
   117fa:	22dd      	movs	r2, #221	; 0xdd
   117fc:	0052      	lsls	r2, r2, #1
   117fe:	5c9a      	ldrb	r2, [r3, r2]
   11800:	21bc      	movs	r1, #188	; 0xbc
   11802:	31ff      	adds	r1, #255	; 0xff
   11804:	5c59      	ldrb	r1, [r3, r1]
   11806:	0209      	lsls	r1, r1, #8
   11808:	430a      	orrs	r2, r1
   1180a:	21de      	movs	r1, #222	; 0xde
   1180c:	0049      	lsls	r1, r1, #1
   1180e:	5c59      	ldrb	r1, [r3, r1]
   11810:	0409      	lsls	r1, r1, #16
   11812:	430a      	orrs	r2, r1
   11814:	21be      	movs	r1, #190	; 0xbe
   11816:	31ff      	adds	r1, #255	; 0xff
   11818:	5c5b      	ldrb	r3, [r3, r1]
   1181a:	061b      	lsls	r3, r3, #24
   1181c:	4313      	orrs	r3, r2
   1181e:	001a      	movs	r2, r3
   11820:	6a3b      	ldr	r3, [r7, #32]
   11822:	429a      	cmp	r2, r3
   11824:	d946      	bls.n	118b4 <setDutyCycleTimer+0x67c>
		{
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
   11826:	4b22      	ldr	r3, [pc, #136]	; (118b0 <setDutyCycleTimer+0x678>)
   11828:	22dd      	movs	r2, #221	; 0xdd
   1182a:	0052      	lsls	r2, r2, #1
   1182c:	5c9a      	ldrb	r2, [r3, r2]
   1182e:	21bc      	movs	r1, #188	; 0xbc
   11830:	31ff      	adds	r1, #255	; 0xff
   11832:	5c59      	ldrb	r1, [r3, r1]
   11834:	0209      	lsls	r1, r1, #8
   11836:	430a      	orrs	r2, r1
   11838:	21de      	movs	r1, #222	; 0xde
   1183a:	0049      	lsls	r1, r1, #1
   1183c:	5c59      	ldrb	r1, [r3, r1]
   1183e:	0409      	lsls	r1, r1, #16
   11840:	430a      	orrs	r2, r1
   11842:	21be      	movs	r1, #190	; 0xbe
   11844:	31ff      	adds	r1, #255	; 0xff
   11846:	5c5b      	ldrb	r3, [r3, r1]
   11848:	061b      	lsls	r3, r3, #24
   1184a:	4313      	orrs	r3, r2
   1184c:	001a      	movs	r2, r3
   1184e:	6a3b      	ldr	r3, [r7, #32]
   11850:	1ad1      	subs	r1, r2, r3
   11852:	4a17      	ldr	r2, [pc, #92]	; (118b0 <setDutyCycleTimer+0x678>)
   11854:	23dd      	movs	r3, #221	; 0xdd
   11856:	005b      	lsls	r3, r3, #1
   11858:	20ff      	movs	r0, #255	; 0xff
   1185a:	4008      	ands	r0, r1
   1185c:	0005      	movs	r5, r0
   1185e:	5cd0      	ldrb	r0, [r2, r3]
   11860:	2400      	movs	r4, #0
   11862:	4020      	ands	r0, r4
   11864:	1c04      	adds	r4, r0, #0
   11866:	1c28      	adds	r0, r5, #0
   11868:	4320      	orrs	r0, r4
   1186a:	54d0      	strb	r0, [r2, r3]
   1186c:	0a08      	lsrs	r0, r1, #8
   1186e:	24ff      	movs	r4, #255	; 0xff
   11870:	4020      	ands	r0, r4
   11872:	0006      	movs	r6, r0
   11874:	18d0      	adds	r0, r2, r3
   11876:	7844      	ldrb	r4, [r0, #1]
   11878:	2500      	movs	r5, #0
   1187a:	402c      	ands	r4, r5
   1187c:	1c25      	adds	r5, r4, #0
   1187e:	1c34      	adds	r4, r6, #0
   11880:	432c      	orrs	r4, r5
   11882:	7044      	strb	r4, [r0, #1]
   11884:	0c08      	lsrs	r0, r1, #16
   11886:	24ff      	movs	r4, #255	; 0xff
   11888:	4020      	ands	r0, r4
   1188a:	0006      	movs	r6, r0
   1188c:	18d0      	adds	r0, r2, r3
   1188e:	7884      	ldrb	r4, [r0, #2]
   11890:	2500      	movs	r5, #0
   11892:	402c      	ands	r4, r5
   11894:	1c25      	adds	r5, r4, #0
   11896:	1c34      	adds	r4, r6, #0
   11898:	432c      	orrs	r4, r5
   1189a:	7084      	strb	r4, [r0, #2]
   1189c:	0e08      	lsrs	r0, r1, #24
   1189e:	18d3      	adds	r3, r2, r3
   118a0:	78da      	ldrb	r2, [r3, #3]
   118a2:	2100      	movs	r1, #0
   118a4:	400a      	ands	r2, r1
   118a6:	1c11      	adds	r1, r2, #0
   118a8:	1c02      	adds	r2, r0, #0
   118aa:	430a      	orrs	r2, r1
   118ac:	70da      	strb	r2, [r3, #3]
   118ae:	e017      	b.n	118e0 <setDutyCycleTimer+0x6a8>
   118b0:	200014a8 	.word	0x200014a8
		}
		else
		{
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
   118b4:	4a59      	ldr	r2, [pc, #356]	; (11a1c <setDutyCycleTimer+0x7e4>)
   118b6:	23dd      	movs	r3, #221	; 0xdd
   118b8:	005b      	lsls	r3, r3, #1
   118ba:	5cd1      	ldrb	r1, [r2, r3]
   118bc:	2000      	movs	r0, #0
   118be:	4001      	ands	r1, r0
   118c0:	54d1      	strb	r1, [r2, r3]
   118c2:	18d1      	adds	r1, r2, r3
   118c4:	7848      	ldrb	r0, [r1, #1]
   118c6:	2400      	movs	r4, #0
   118c8:	4020      	ands	r0, r4
   118ca:	7048      	strb	r0, [r1, #1]
   118cc:	18d1      	adds	r1, r2, r3
   118ce:	7888      	ldrb	r0, [r1, #2]
   118d0:	2400      	movs	r4, #0
   118d2:	4020      	ands	r0, r4
   118d4:	7088      	strb	r0, [r1, #2]
   118d6:	18d3      	adds	r3, r2, r3
   118d8:	78da      	ldrb	r2, [r3, #3]
   118da:	2100      	movs	r1, #0
   118dc:	400a      	ands	r2, r1
   118de:	70da      	strb	r2, [r3, #3]
		}
		
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
   118e0:	4b4e      	ldr	r3, [pc, #312]	; (11a1c <setDutyCycleTimer+0x7e4>)
   118e2:	22dd      	movs	r2, #221	; 0xdd
   118e4:	0052      	lsls	r2, r2, #1
   118e6:	5c9a      	ldrb	r2, [r3, r2]
   118e8:	21bc      	movs	r1, #188	; 0xbc
   118ea:	31ff      	adds	r1, #255	; 0xff
   118ec:	5c59      	ldrb	r1, [r3, r1]
   118ee:	0209      	lsls	r1, r1, #8
   118f0:	430a      	orrs	r2, r1
   118f2:	21de      	movs	r1, #222	; 0xde
   118f4:	0049      	lsls	r1, r1, #1
   118f6:	5c59      	ldrb	r1, [r3, r1]
   118f8:	0409      	lsls	r1, r1, #16
   118fa:	430a      	orrs	r2, r1
   118fc:	21be      	movs	r1, #190	; 0xbe
   118fe:	31ff      	adds	r1, #255	; 0xff
   11900:	5c5b      	ldrb	r3, [r3, r1]
   11902:	061b      	lsls	r3, r3, #24
   11904:	4313      	orrs	r3, r2
   11906:	d003      	beq.n	11910 <setDutyCycleTimer+0x6d8>
		{
			found = 1;
   11908:	2327      	movs	r3, #39	; 0x27
   1190a:	18fb      	adds	r3, r7, r3
   1190c:	2201      	movs	r2, #1
   1190e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	
	if(found == 1)
   11910:	2327      	movs	r3, #39	; 0x27
   11912:	18fb      	adds	r3, r7, r3
   11914:	781b      	ldrb	r3, [r3, #0]
   11916:	2b00      	cmp	r3, #0
   11918:	d078      	beq.n	11a0c <setDutyCycleTimer+0x7d4>
	{
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
   1191a:	4b40      	ldr	r3, [pc, #256]	; (11a1c <setDutyCycleTimer+0x7e4>)
   1191c:	22dd      	movs	r2, #221	; 0xdd
   1191e:	0052      	lsls	r2, r2, #1
   11920:	5c9a      	ldrb	r2, [r3, r2]
   11922:	21bc      	movs	r1, #188	; 0xbc
   11924:	31ff      	adds	r1, #255	; 0xff
   11926:	5c59      	ldrb	r1, [r3, r1]
   11928:	0209      	lsls	r1, r1, #8
   1192a:	430a      	orrs	r2, r1
   1192c:	21de      	movs	r1, #222	; 0xde
   1192e:	0049      	lsls	r1, r1, #1
   11930:	5c59      	ldrb	r1, [r3, r1]
   11932:	0409      	lsls	r1, r1, #16
   11934:	430a      	orrs	r2, r1
   11936:	21be      	movs	r1, #190	; 0xbe
   11938:	31ff      	adds	r1, #255	; 0xff
   1193a:	5c5b      	ldrb	r3, [r3, r1]
   1193c:	061b      	lsls	r3, r3, #24
   1193e:	4313      	orrs	r3, r2
   11940:	001a      	movs	r2, r3
   11942:	69fb      	ldr	r3, [r7, #28]
   11944:	429a      	cmp	r2, r3
   11946:	d314      	bcc.n	11972 <setDutyCycleTimer+0x73a>
		{
			nextTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
   11948:	4b34      	ldr	r3, [pc, #208]	; (11a1c <setDutyCycleTimer+0x7e4>)
   1194a:	22dd      	movs	r2, #221	; 0xdd
   1194c:	0052      	lsls	r2, r2, #1
   1194e:	5c9a      	ldrb	r2, [r3, r2]
   11950:	21bc      	movs	r1, #188	; 0xbc
   11952:	31ff      	adds	r1, #255	; 0xff
   11954:	5c59      	ldrb	r1, [r3, r1]
   11956:	0209      	lsls	r1, r1, #8
   11958:	430a      	orrs	r2, r1
   1195a:	21de      	movs	r1, #222	; 0xde
   1195c:	0049      	lsls	r1, r1, #1
   1195e:	5c59      	ldrb	r1, [r3, r1]
   11960:	0409      	lsls	r1, r1, #16
   11962:	430a      	orrs	r2, r1
   11964:	21be      	movs	r1, #190	; 0xbe
   11966:	31ff      	adds	r1, #255	; 0xff
   11968:	5c5b      	ldrb	r3, [r3, r1]
   1196a:	061b      	lsls	r3, r3, #24
   1196c:	4313      	orrs	r3, r2
   1196e:	61bb      	str	r3, [r7, #24]
   11970:	e001      	b.n	11976 <setDutyCycleTimer+0x73e>
		}
		else
		{
			nextTimer = minimSubBandTimer;
   11972:	69fb      	ldr	r3, [r7, #28]
   11974:	61bb      	str	r3, [r7, #24]
		}
		
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
   11976:	4b29      	ldr	r3, [pc, #164]	; (11a1c <setDutyCycleTimer+0x7e4>)
   11978:	7c1a      	ldrb	r2, [r3, #16]
   1197a:	7c59      	ldrb	r1, [r3, #17]
   1197c:	0209      	lsls	r1, r1, #8
   1197e:	430a      	orrs	r2, r1
   11980:	7c99      	ldrb	r1, [r3, #18]
   11982:	0409      	lsls	r1, r1, #16
   11984:	430a      	orrs	r2, r1
   11986:	7cdb      	ldrb	r3, [r3, #19]
   11988:	061b      	lsls	r3, r3, #24
   1198a:	4313      	orrs	r3, r2
   1198c:	2218      	movs	r2, #24
   1198e:	18ba      	adds	r2, r7, r2
   11990:	7810      	ldrb	r0, [r2, #0]
   11992:	781a      	ldrb	r2, [r3, #0]
   11994:	2100      	movs	r1, #0
   11996:	400a      	ands	r2, r1
   11998:	1c11      	adds	r1, r2, #0
   1199a:	1c02      	adds	r2, r0, #0
   1199c:	430a      	orrs	r2, r1
   1199e:	701a      	strb	r2, [r3, #0]
   119a0:	2219      	movs	r2, #25
   119a2:	18ba      	adds	r2, r7, r2
   119a4:	7810      	ldrb	r0, [r2, #0]
   119a6:	785a      	ldrb	r2, [r3, #1]
   119a8:	2100      	movs	r1, #0
   119aa:	400a      	ands	r2, r1
   119ac:	1c11      	adds	r1, r2, #0
   119ae:	1c02      	adds	r2, r0, #0
   119b0:	430a      	orrs	r2, r1
   119b2:	705a      	strb	r2, [r3, #1]
   119b4:	221a      	movs	r2, #26
   119b6:	18ba      	adds	r2, r7, r2
   119b8:	7810      	ldrb	r0, [r2, #0]
   119ba:	789a      	ldrb	r2, [r3, #2]
   119bc:	2100      	movs	r1, #0
   119be:	400a      	ands	r2, r1
   119c0:	1c11      	adds	r1, r2, #0
   119c2:	1c02      	adds	r2, r0, #0
   119c4:	430a      	orrs	r2, r1
   119c6:	709a      	strb	r2, [r3, #2]
   119c8:	221b      	movs	r2, #27
   119ca:	18ba      	adds	r2, r7, r2
   119cc:	7810      	ldrb	r0, [r2, #0]
   119ce:	78da      	ldrb	r2, [r3, #3]
   119d0:	2100      	movs	r1, #0
   119d2:	400a      	ands	r2, r1
   119d4:	1c11      	adds	r1, r2, #0
   119d6:	1c02      	adds	r2, r0, #0
   119d8:	430a      	orrs	r2, r1
   119da:	70da      	strb	r2, [r3, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
   119dc:	4b0f      	ldr	r3, [pc, #60]	; (11a1c <setDutyCycleTimer+0x7e4>)
   119de:	7c1a      	ldrb	r2, [r3, #16]
   119e0:	7c59      	ldrb	r1, [r3, #17]
   119e2:	0209      	lsls	r1, r1, #8
   119e4:	430a      	orrs	r2, r1
   119e6:	7c99      	ldrb	r1, [r3, #18]
   119e8:	0409      	lsls	r1, r1, #16
   119ea:	430a      	orrs	r2, r1
   119ec:	7cdb      	ldrb	r3, [r3, #19]
   119ee:	061b      	lsls	r3, r3, #24
   119f0:	4313      	orrs	r3, r2
   119f2:	7918      	ldrb	r0, [r3, #4]
   119f4:	69bb      	ldr	r3, [r7, #24]
   119f6:	22fa      	movs	r2, #250	; 0xfa
   119f8:	0092      	lsls	r2, r2, #2
   119fa:	435a      	muls	r2, r3
   119fc:	0011      	movs	r1, r2
   119fe:	4a08      	ldr	r2, [pc, #32]	; (11a20 <setDutyCycleTimer+0x7e8>)
   11a00:	2300      	movs	r3, #0
   11a02:	9300      	str	r3, [sp, #0]
   11a04:	0013      	movs	r3, r2
   11a06:	2200      	movs	r2, #0
   11a08:	4c06      	ldr	r4, [pc, #24]	; (11a24 <setDutyCycleTimer+0x7ec>)
   11a0a:	47a0      	blx	r4
		//SwTimerSetTimeout(RegParams.pDutyCycleTimer->timerId, MS_TO_TICKS(nextTimer));
		//SwTimerStart(RegParams.pDutyCycleTimer->timerId);
	}
	return result;
   11a0c:	2317      	movs	r3, #23
   11a0e:	18fb      	adds	r3, r7, r3
   11a10:	781b      	ldrb	r3, [r3, #0]
}
   11a12:	0018      	movs	r0, r3
   11a14:	46bd      	mov	sp, r7
   11a16:	b00b      	add	sp, #44	; 0x2c
   11a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a1a:	46c0      	nop			; (mov r8, r8)
   11a1c:	200014a8 	.word	0x200014a8
   11a20:	0000f435 	.word	0x0000f435
   11a24:	000159bd 	.word	0x000159bd

00011a28 <setJoinDutyCycleTimer>:
#endif

static StackRetStatus_t setJoinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
   11a28:	b590      	push	{r4, r7, lr}
   11a2a:	b08b      	sub	sp, #44	; 0x2c
   11a2c:	af02      	add	r7, sp, #8
   11a2e:	0002      	movs	r2, r0
   11a30:	6039      	str	r1, [r7, #0]
   11a32:	1dfb      	adds	r3, r7, #7
   11a34:	701a      	strb	r2, [r3, #0]
	UpdateJoinDutyCycleTimer_t UpdateJoinDutyCycleTimer;
	StackRetStatus_t result = LORAWAN_SUCCESS;
   11a36:	231b      	movs	r3, #27
   11a38:	18fb      	adds	r3, r7, r3
   11a3a:	2208      	movs	r2, #8
   11a3c:	701a      	strb	r2, [r3, #0]
	
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
   11a3e:	6839      	ldr	r1, [r7, #0]
   11a40:	230c      	movs	r3, #12
   11a42:	18fb      	adds	r3, r7, r3
   11a44:	2208      	movs	r2, #8
   11a46:	0018      	movs	r0, r3
   11a48:	4b3b      	ldr	r3, [pc, #236]	; (11b38 <setJoinDutyCycleTimer+0x110>)
   11a4a:	4798      	blx	r3
	
	uint32_t delta = 0,ticks;
   11a4c:	2300      	movs	r3, #0
   11a4e:	61fb      	str	r3, [r7, #28]
	
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
   11a50:	230c      	movs	r3, #12
   11a52:	18fb      	adds	r3, r7, r3
   11a54:	791b      	ldrb	r3, [r3, #4]
   11a56:	2b00      	cmp	r3, #0
   11a58:	d100      	bne.n	11a5c <setJoinDutyCycleTimer+0x34>
   11a5a:	e24d      	b.n	11ef8 <setJoinDutyCycleTimer+0x4d0>
	{
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
   11a5c:	4b37      	ldr	r3, [pc, #220]	; (11b3c <setJoinDutyCycleTimer+0x114>)
   11a5e:	2243      	movs	r2, #67	; 0x43
   11a60:	5c9b      	ldrb	r3, [r3, r2]
   11a62:	2b01      	cmp	r3, #1
   11a64:	d832      	bhi.n	11acc <setJoinDutyCycleTimer+0xa4>
			{
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
   11a66:	230c      	movs	r3, #12
   11a68:	18fb      	adds	r3, r7, r3
   11a6a:	681a      	ldr	r2, [r3, #0]
   11a6c:	0013      	movs	r3, r2
   11a6e:	005b      	lsls	r3, r3, #1
   11a70:	189b      	adds	r3, r3, r2
   11a72:	015a      	lsls	r2, r3, #5
   11a74:	189a      	adds	r2, r3, r2
   11a76:	4b31      	ldr	r3, [pc, #196]	; (11b3c <setJoinDutyCycleTimer+0x114>)
   11a78:	333f      	adds	r3, #63	; 0x3f
   11a7a:	21ff      	movs	r1, #255	; 0xff
   11a7c:	4011      	ands	r1, r2
   11a7e:	000c      	movs	r4, r1
   11a80:	7819      	ldrb	r1, [r3, #0]
   11a82:	2000      	movs	r0, #0
   11a84:	4001      	ands	r1, r0
   11a86:	1c08      	adds	r0, r1, #0
   11a88:	1c21      	adds	r1, r4, #0
   11a8a:	4301      	orrs	r1, r0
   11a8c:	7019      	strb	r1, [r3, #0]
   11a8e:	0a11      	lsrs	r1, r2, #8
   11a90:	20ff      	movs	r0, #255	; 0xff
   11a92:	4001      	ands	r1, r0
   11a94:	000c      	movs	r4, r1
   11a96:	7859      	ldrb	r1, [r3, #1]
   11a98:	2000      	movs	r0, #0
   11a9a:	4001      	ands	r1, r0
   11a9c:	1c08      	adds	r0, r1, #0
   11a9e:	1c21      	adds	r1, r4, #0
   11aa0:	4301      	orrs	r1, r0
   11aa2:	7059      	strb	r1, [r3, #1]
   11aa4:	0c11      	lsrs	r1, r2, #16
   11aa6:	20ff      	movs	r0, #255	; 0xff
   11aa8:	4001      	ands	r1, r0
   11aaa:	000c      	movs	r4, r1
   11aac:	7899      	ldrb	r1, [r3, #2]
   11aae:	2000      	movs	r0, #0
   11ab0:	4001      	ands	r1, r0
   11ab2:	1c08      	adds	r0, r1, #0
   11ab4:	1c21      	adds	r1, r4, #0
   11ab6:	4301      	orrs	r1, r0
   11ab8:	7099      	strb	r1, [r3, #2]
   11aba:	0e10      	lsrs	r0, r2, #24
   11abc:	78da      	ldrb	r2, [r3, #3]
   11abe:	2100      	movs	r1, #0
   11ac0:	400a      	ands	r2, r1
   11ac2:	1c11      	adds	r1, r2, #0
   11ac4:	1c02      	adds	r2, r0, #0
   11ac6:	430a      	orrs	r2, r1
   11ac8:	70da      	strb	r2, [r3, #3]
   11aca:	e06a      	b.n	11ba2 <setJoinDutyCycleTimer+0x17a>
				
			}
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
   11acc:	4b1b      	ldr	r3, [pc, #108]	; (11b3c <setJoinDutyCycleTimer+0x114>)
   11ace:	2243      	movs	r2, #67	; 0x43
   11ad0:	5c9b      	ldrb	r3, [r3, r2]
   11ad2:	2b13      	cmp	r3, #19
   11ad4:	d836      	bhi.n	11b44 <setJoinDutyCycleTimer+0x11c>
			{
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
   11ad6:	230c      	movs	r3, #12
   11ad8:	18fb      	adds	r3, r7, r3
   11ada:	681b      	ldr	r3, [r3, #0]
   11adc:	4a18      	ldr	r2, [pc, #96]	; (11b40 <setJoinDutyCycleTimer+0x118>)
   11ade:	435a      	muls	r2, r3
   11ae0:	4b16      	ldr	r3, [pc, #88]	; (11b3c <setJoinDutyCycleTimer+0x114>)
   11ae2:	333f      	adds	r3, #63	; 0x3f
   11ae4:	21ff      	movs	r1, #255	; 0xff
   11ae6:	4011      	ands	r1, r2
   11ae8:	000c      	movs	r4, r1
   11aea:	7819      	ldrb	r1, [r3, #0]
   11aec:	2000      	movs	r0, #0
   11aee:	4001      	ands	r1, r0
   11af0:	1c08      	adds	r0, r1, #0
   11af2:	1c21      	adds	r1, r4, #0
   11af4:	4301      	orrs	r1, r0
   11af6:	7019      	strb	r1, [r3, #0]
   11af8:	0a11      	lsrs	r1, r2, #8
   11afa:	20ff      	movs	r0, #255	; 0xff
   11afc:	4001      	ands	r1, r0
   11afe:	000c      	movs	r4, r1
   11b00:	7859      	ldrb	r1, [r3, #1]
   11b02:	2000      	movs	r0, #0
   11b04:	4001      	ands	r1, r0
   11b06:	1c08      	adds	r0, r1, #0
   11b08:	1c21      	adds	r1, r4, #0
   11b0a:	4301      	orrs	r1, r0
   11b0c:	7059      	strb	r1, [r3, #1]
   11b0e:	0c11      	lsrs	r1, r2, #16
   11b10:	20ff      	movs	r0, #255	; 0xff
   11b12:	4001      	ands	r1, r0
   11b14:	000c      	movs	r4, r1
   11b16:	7899      	ldrb	r1, [r3, #2]
   11b18:	2000      	movs	r0, #0
   11b1a:	4001      	ands	r1, r0
   11b1c:	1c08      	adds	r0, r1, #0
   11b1e:	1c21      	adds	r1, r4, #0
   11b20:	4301      	orrs	r1, r0
   11b22:	7099      	strb	r1, [r3, #2]
   11b24:	0e10      	lsrs	r0, r2, #24
   11b26:	78da      	ldrb	r2, [r3, #3]
   11b28:	2100      	movs	r1, #0
   11b2a:	400a      	ands	r2, r1
   11b2c:	1c11      	adds	r1, r2, #0
   11b2e:	1c02      	adds	r2, r0, #0
   11b30:	430a      	orrs	r2, r1
   11b32:	70da      	strb	r2, [r3, #3]
   11b34:	e035      	b.n	11ba2 <setJoinDutyCycleTimer+0x17a>
   11b36:	46c0      	nop			; (mov r8, r8)
   11b38:	00024149 	.word	0x00024149
   11b3c:	200014a8 	.word	0x200014a8
   11b40:	000003e7 	.word	0x000003e7
				
			}
			else
			{
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
   11b44:	230c      	movs	r3, #12
   11b46:	18fb      	adds	r3, r7, r3
   11b48:	681b      	ldr	r3, [r3, #0]
   11b4a:	4ae0      	ldr	r2, [pc, #896]	; (11ecc <setJoinDutyCycleTimer+0x4a4>)
   11b4c:	435a      	muls	r2, r3
   11b4e:	4be0      	ldr	r3, [pc, #896]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11b50:	333f      	adds	r3, #63	; 0x3f
   11b52:	21ff      	movs	r1, #255	; 0xff
   11b54:	4011      	ands	r1, r2
   11b56:	000c      	movs	r4, r1
   11b58:	7819      	ldrb	r1, [r3, #0]
   11b5a:	2000      	movs	r0, #0
   11b5c:	4001      	ands	r1, r0
   11b5e:	1c08      	adds	r0, r1, #0
   11b60:	1c21      	adds	r1, r4, #0
   11b62:	4301      	orrs	r1, r0
   11b64:	7019      	strb	r1, [r3, #0]
   11b66:	0a11      	lsrs	r1, r2, #8
   11b68:	20ff      	movs	r0, #255	; 0xff
   11b6a:	4001      	ands	r1, r0
   11b6c:	000c      	movs	r4, r1
   11b6e:	7859      	ldrb	r1, [r3, #1]
   11b70:	2000      	movs	r0, #0
   11b72:	4001      	ands	r1, r0
   11b74:	1c08      	adds	r0, r1, #0
   11b76:	1c21      	adds	r1, r4, #0
   11b78:	4301      	orrs	r1, r0
   11b7a:	7059      	strb	r1, [r3, #1]
   11b7c:	0c11      	lsrs	r1, r2, #16
   11b7e:	20ff      	movs	r0, #255	; 0xff
   11b80:	4001      	ands	r1, r0
   11b82:	000c      	movs	r4, r1
   11b84:	7899      	ldrb	r1, [r3, #2]
   11b86:	2000      	movs	r0, #0
   11b88:	4001      	ands	r1, r0
   11b8a:	1c08      	adds	r0, r1, #0
   11b8c:	1c21      	adds	r1, r4, #0
   11b8e:	4301      	orrs	r1, r0
   11b90:	7099      	strb	r1, [r3, #2]
   11b92:	0e10      	lsrs	r0, r2, #24
   11b94:	78da      	ldrb	r2, [r3, #3]
   11b96:	2100      	movs	r1, #0
   11b98:	400a      	ands	r2, r1
   11b9a:	1c11      	adds	r1, r2, #0
   11b9c:	1c02      	adds	r2, r0, #0
   11b9e:	430a      	orrs	r2, r1
   11ba0:	70da      	strb	r2, [r3, #3]
				
			}
		
				
		// find how much time from last timeout is due yet
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
   11ba2:	4bcb      	ldr	r3, [pc, #812]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11ba4:	7d1a      	ldrb	r2, [r3, #20]
   11ba6:	7d59      	ldrb	r1, [r3, #21]
   11ba8:	0209      	lsls	r1, r1, #8
   11baa:	430a      	orrs	r2, r1
   11bac:	7d99      	ldrb	r1, [r3, #22]
   11bae:	0409      	lsls	r1, r1, #16
   11bb0:	430a      	orrs	r2, r1
   11bb2:	7ddb      	ldrb	r3, [r3, #23]
   11bb4:	061b      	lsls	r3, r3, #24
   11bb6:	4313      	orrs	r3, r2
   11bb8:	7a1b      	ldrb	r3, [r3, #8]
   11bba:	0018      	movs	r0, r3
   11bbc:	4bc5      	ldr	r3, [pc, #788]	; (11ed4 <setJoinDutyCycleTimer+0x4ac>)
   11bbe:	4798      	blx	r3
   11bc0:	1e03      	subs	r3, r0, #0
   11bc2:	d03d      	beq.n	11c40 <setJoinDutyCycleTimer+0x218>
		{
			
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
   11bc4:	4bc2      	ldr	r3, [pc, #776]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11bc6:	7d1a      	ldrb	r2, [r3, #20]
   11bc8:	7d59      	ldrb	r1, [r3, #21]
   11bca:	0209      	lsls	r1, r1, #8
   11bcc:	430a      	orrs	r2, r1
   11bce:	7d99      	ldrb	r1, [r3, #22]
   11bd0:	0409      	lsls	r1, r1, #16
   11bd2:	430a      	orrs	r2, r1
   11bd4:	7ddb      	ldrb	r3, [r3, #23]
   11bd6:	061b      	lsls	r3, r3, #24
   11bd8:	4313      	orrs	r3, r2
   11bda:	7a1b      	ldrb	r3, [r3, #8]
   11bdc:	0018      	movs	r0, r3
   11bde:	4bbe      	ldr	r3, [pc, #760]	; (11ed8 <setJoinDutyCycleTimer+0x4b0>)
   11be0:	4798      	blx	r3
   11be2:	0003      	movs	r3, r0
   11be4:	617b      	str	r3, [r7, #20]
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
   11be6:	4bba      	ldr	r3, [pc, #744]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11be8:	7d1a      	ldrb	r2, [r3, #20]
   11bea:	7d59      	ldrb	r1, [r3, #21]
   11bec:	0209      	lsls	r1, r1, #8
   11bee:	430a      	orrs	r2, r1
   11bf0:	7d99      	ldrb	r1, [r3, #22]
   11bf2:	0409      	lsls	r1, r1, #16
   11bf4:	430a      	orrs	r2, r1
   11bf6:	7ddb      	ldrb	r3, [r3, #23]
   11bf8:	061b      	lsls	r3, r3, #24
   11bfa:	4313      	orrs	r3, r2
   11bfc:	7a1b      	ldrb	r3, [r3, #8]
   11bfe:	0018      	movs	r0, r3
   11c00:	4bb6      	ldr	r3, [pc, #728]	; (11edc <setJoinDutyCycleTimer+0x4b4>)
   11c02:	4798      	blx	r3
			
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
   11c04:	4bb2      	ldr	r3, [pc, #712]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11c06:	7d1a      	ldrb	r2, [r3, #20]
   11c08:	7d59      	ldrb	r1, [r3, #21]
   11c0a:	0209      	lsls	r1, r1, #8
   11c0c:	430a      	orrs	r2, r1
   11c0e:	7d99      	ldrb	r1, [r3, #22]
   11c10:	0409      	lsls	r1, r1, #16
   11c12:	430a      	orrs	r2, r1
   11c14:	7ddb      	ldrb	r3, [r3, #23]
   11c16:	061b      	lsls	r3, r3, #24
   11c18:	4313      	orrs	r3, r2
   11c1a:	781a      	ldrb	r2, [r3, #0]
   11c1c:	7859      	ldrb	r1, [r3, #1]
   11c1e:	0209      	lsls	r1, r1, #8
   11c20:	430a      	orrs	r2, r1
   11c22:	7899      	ldrb	r1, [r3, #2]
   11c24:	0409      	lsls	r1, r1, #16
   11c26:	430a      	orrs	r2, r1
   11c28:	78db      	ldrb	r3, [r3, #3]
   11c2a:	061b      	lsls	r3, r3, #24
   11c2c:	4313      	orrs	r3, r2
   11c2e:	001c      	movs	r4, r3
   11c30:	6978      	ldr	r0, [r7, #20]
   11c32:	4bab      	ldr	r3, [pc, #684]	; (11ee0 <setJoinDutyCycleTimer+0x4b8>)
   11c34:	22fa      	movs	r2, #250	; 0xfa
   11c36:	0091      	lsls	r1, r2, #2
   11c38:	4798      	blx	r3
   11c3a:	0003      	movs	r3, r0
   11c3c:	1ae3      	subs	r3, r4, r3
   11c3e:	61fb      	str	r3, [r7, #28]
		}
		
		// following block works if DutyCycleReq command imposed specific restrictions in addition to the regional parameters regulations
		if(RegParams.joinDutyCycleTimeout != 0)
   11c40:	4ba3      	ldr	r3, [pc, #652]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11c42:	223f      	movs	r2, #63	; 0x3f
   11c44:	5c9a      	ldrb	r2, [r3, r2]
   11c46:	2140      	movs	r1, #64	; 0x40
   11c48:	5c59      	ldrb	r1, [r3, r1]
   11c4a:	0209      	lsls	r1, r1, #8
   11c4c:	430a      	orrs	r2, r1
   11c4e:	2141      	movs	r1, #65	; 0x41
   11c50:	5c59      	ldrb	r1, [r3, r1]
   11c52:	0409      	lsls	r1, r1, #16
   11c54:	430a      	orrs	r2, r1
   11c56:	2142      	movs	r1, #66	; 0x42
   11c58:	5c5b      	ldrb	r3, [r3, r1]
   11c5a:	061b      	lsls	r3, r3, #24
   11c5c:	4313      	orrs	r3, r2
   11c5e:	d100      	bne.n	11c62 <setJoinDutyCycleTimer+0x23a>
   11c60:	e186      	b.n	11f70 <setJoinDutyCycleTimer+0x548>
		{
			if(RegParams.joinDutyCycleTimeout > delta)
   11c62:	4b9b      	ldr	r3, [pc, #620]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11c64:	223f      	movs	r2, #63	; 0x3f
   11c66:	5c9a      	ldrb	r2, [r3, r2]
   11c68:	2140      	movs	r1, #64	; 0x40
   11c6a:	5c59      	ldrb	r1, [r3, r1]
   11c6c:	0209      	lsls	r1, r1, #8
   11c6e:	430a      	orrs	r2, r1
   11c70:	2141      	movs	r1, #65	; 0x41
   11c72:	5c59      	ldrb	r1, [r3, r1]
   11c74:	0409      	lsls	r1, r1, #16
   11c76:	430a      	orrs	r2, r1
   11c78:	2142      	movs	r1, #66	; 0x42
   11c7a:	5c5b      	ldrb	r3, [r3, r1]
   11c7c:	061b      	lsls	r3, r3, #24
   11c7e:	4313      	orrs	r3, r2
   11c80:	001a      	movs	r2, r3
   11c82:	69fb      	ldr	r3, [r7, #28]
   11c84:	429a      	cmp	r2, r3
   11c86:	d800      	bhi.n	11c8a <setJoinDutyCycleTimer+0x262>
   11c88:	e10c      	b.n	11ea4 <setJoinDutyCycleTimer+0x47c>
			{
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
   11c8a:	4b91      	ldr	r3, [pc, #580]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11c8c:	223f      	movs	r2, #63	; 0x3f
   11c8e:	5c9a      	ldrb	r2, [r3, r2]
   11c90:	2140      	movs	r1, #64	; 0x40
   11c92:	5c59      	ldrb	r1, [r3, r1]
   11c94:	0209      	lsls	r1, r1, #8
   11c96:	430a      	orrs	r2, r1
   11c98:	2141      	movs	r1, #65	; 0x41
   11c9a:	5c59      	ldrb	r1, [r3, r1]
   11c9c:	0409      	lsls	r1, r1, #16
   11c9e:	430a      	orrs	r2, r1
   11ca0:	2142      	movs	r1, #66	; 0x42
   11ca2:	5c5b      	ldrb	r3, [r3, r1]
   11ca4:	061b      	lsls	r3, r3, #24
   11ca6:	4313      	orrs	r3, r2
   11ca8:	001a      	movs	r2, r3
   11caa:	69fb      	ldr	r3, [r7, #28]
   11cac:	1ad2      	subs	r2, r2, r3
   11cae:	4b88      	ldr	r3, [pc, #544]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11cb0:	333f      	adds	r3, #63	; 0x3f
   11cb2:	21ff      	movs	r1, #255	; 0xff
   11cb4:	4011      	ands	r1, r2
   11cb6:	000c      	movs	r4, r1
   11cb8:	7819      	ldrb	r1, [r3, #0]
   11cba:	2000      	movs	r0, #0
   11cbc:	4001      	ands	r1, r0
   11cbe:	1c08      	adds	r0, r1, #0
   11cc0:	1c21      	adds	r1, r4, #0
   11cc2:	4301      	orrs	r1, r0
   11cc4:	7019      	strb	r1, [r3, #0]
   11cc6:	0a11      	lsrs	r1, r2, #8
   11cc8:	20ff      	movs	r0, #255	; 0xff
   11cca:	4001      	ands	r1, r0
   11ccc:	000c      	movs	r4, r1
   11cce:	7859      	ldrb	r1, [r3, #1]
   11cd0:	2000      	movs	r0, #0
   11cd2:	4001      	ands	r1, r0
   11cd4:	1c08      	adds	r0, r1, #0
   11cd6:	1c21      	adds	r1, r4, #0
   11cd8:	4301      	orrs	r1, r0
   11cda:	7059      	strb	r1, [r3, #1]
   11cdc:	0c11      	lsrs	r1, r2, #16
   11cde:	20ff      	movs	r0, #255	; 0xff
   11ce0:	4001      	ands	r1, r0
   11ce2:	000c      	movs	r4, r1
   11ce4:	7899      	ldrb	r1, [r3, #2]
   11ce6:	2000      	movs	r0, #0
   11ce8:	4001      	ands	r1, r0
   11cea:	1c08      	adds	r0, r1, #0
   11cec:	1c21      	adds	r1, r4, #0
   11cee:	4301      	orrs	r1, r0
   11cf0:	7099      	strb	r1, [r3, #2]
   11cf2:	0e10      	lsrs	r0, r2, #24
   11cf4:	78da      	ldrb	r2, [r3, #3]
   11cf6:	2100      	movs	r1, #0
   11cf8:	400a      	ands	r2, r1
   11cfa:	1c11      	adds	r1, r2, #0
   11cfc:	1c02      	adds	r2, r0, #0
   11cfe:	430a      	orrs	r2, r1
   11d00:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
   11d02:	4b73      	ldr	r3, [pc, #460]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11d04:	223f      	movs	r2, #63	; 0x3f
   11d06:	5c9a      	ldrb	r2, [r3, r2]
   11d08:	2140      	movs	r1, #64	; 0x40
   11d0a:	5c59      	ldrb	r1, [r3, r1]
   11d0c:	0209      	lsls	r1, r1, #8
   11d0e:	430a      	orrs	r2, r1
   11d10:	2141      	movs	r1, #65	; 0x41
   11d12:	5c59      	ldrb	r1, [r3, r1]
   11d14:	0409      	lsls	r1, r1, #16
   11d16:	430a      	orrs	r2, r1
   11d18:	2142      	movs	r1, #66	; 0x42
   11d1a:	5c5b      	ldrb	r3, [r3, r1]
   11d1c:	061b      	lsls	r3, r3, #24
   11d1e:	4313      	orrs	r3, r2
   11d20:	001a      	movs	r2, r3
   11d22:	4b70      	ldr	r3, [pc, #448]	; (11ee4 <setJoinDutyCycleTimer+0x4bc>)
   11d24:	429a      	cmp	r2, r3
   11d26:	d800      	bhi.n	11d2a <setJoinDutyCycleTimer+0x302>
   11d28:	e094      	b.n	11e54 <setJoinDutyCycleTimer+0x42c>
				{
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
   11d2a:	4b69      	ldr	r3, [pc, #420]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11d2c:	7d1a      	ldrb	r2, [r3, #20]
   11d2e:	7d59      	ldrb	r1, [r3, #21]
   11d30:	0209      	lsls	r1, r1, #8
   11d32:	430a      	orrs	r2, r1
   11d34:	7d99      	ldrb	r1, [r3, #22]
   11d36:	0409      	lsls	r1, r1, #16
   11d38:	430a      	orrs	r2, r1
   11d3a:	7ddb      	ldrb	r3, [r3, #23]
   11d3c:	061b      	lsls	r3, r3, #24
   11d3e:	4313      	orrs	r3, r2
   11d40:	4a63      	ldr	r2, [pc, #396]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11d42:	213f      	movs	r1, #63	; 0x3f
   11d44:	5c51      	ldrb	r1, [r2, r1]
   11d46:	2040      	movs	r0, #64	; 0x40
   11d48:	5c10      	ldrb	r0, [r2, r0]
   11d4a:	0200      	lsls	r0, r0, #8
   11d4c:	4301      	orrs	r1, r0
   11d4e:	2041      	movs	r0, #65	; 0x41
   11d50:	5c10      	ldrb	r0, [r2, r0]
   11d52:	0400      	lsls	r0, r0, #16
   11d54:	4301      	orrs	r1, r0
   11d56:	2042      	movs	r0, #66	; 0x42
   11d58:	5c12      	ldrb	r2, [r2, r0]
   11d5a:	0612      	lsls	r2, r2, #24
   11d5c:	430a      	orrs	r2, r1
   11d5e:	4962      	ldr	r1, [pc, #392]	; (11ee8 <setJoinDutyCycleTimer+0x4c0>)
   11d60:	468c      	mov	ip, r1
   11d62:	4462      	add	r2, ip
   11d64:	21ff      	movs	r1, #255	; 0xff
   11d66:	4011      	ands	r1, r2
   11d68:	000c      	movs	r4, r1
   11d6a:	7919      	ldrb	r1, [r3, #4]
   11d6c:	2000      	movs	r0, #0
   11d6e:	4001      	ands	r1, r0
   11d70:	1c08      	adds	r0, r1, #0
   11d72:	1c21      	adds	r1, r4, #0
   11d74:	4301      	orrs	r1, r0
   11d76:	7119      	strb	r1, [r3, #4]
   11d78:	0a11      	lsrs	r1, r2, #8
   11d7a:	20ff      	movs	r0, #255	; 0xff
   11d7c:	4001      	ands	r1, r0
   11d7e:	000c      	movs	r4, r1
   11d80:	7959      	ldrb	r1, [r3, #5]
   11d82:	2000      	movs	r0, #0
   11d84:	4001      	ands	r1, r0
   11d86:	1c08      	adds	r0, r1, #0
   11d88:	1c21      	adds	r1, r4, #0
   11d8a:	4301      	orrs	r1, r0
   11d8c:	7159      	strb	r1, [r3, #5]
   11d8e:	0c11      	lsrs	r1, r2, #16
   11d90:	20ff      	movs	r0, #255	; 0xff
   11d92:	4001      	ands	r1, r0
   11d94:	000c      	movs	r4, r1
   11d96:	7999      	ldrb	r1, [r3, #6]
   11d98:	2000      	movs	r0, #0
   11d9a:	4001      	ands	r1, r0
   11d9c:	1c08      	adds	r0, r1, #0
   11d9e:	1c21      	adds	r1, r4, #0
   11da0:	4301      	orrs	r1, r0
   11da2:	7199      	strb	r1, [r3, #6]
   11da4:	0e10      	lsrs	r0, r2, #24
   11da6:	79da      	ldrb	r2, [r3, #7]
   11da8:	2100      	movs	r1, #0
   11daa:	400a      	ands	r2, r1
   11dac:	1c11      	adds	r1, r2, #0
   11dae:	1c02      	adds	r2, r0, #0
   11db0:	430a      	orrs	r2, r1
   11db2:	71da      	strb	r2, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
   11db4:	4b46      	ldr	r3, [pc, #280]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11db6:	7d1a      	ldrb	r2, [r3, #20]
   11db8:	7d59      	ldrb	r1, [r3, #21]
   11dba:	0209      	lsls	r1, r1, #8
   11dbc:	430a      	orrs	r2, r1
   11dbe:	7d99      	ldrb	r1, [r3, #22]
   11dc0:	0409      	lsls	r1, r1, #16
   11dc2:	430a      	orrs	r2, r1
   11dc4:	7ddb      	ldrb	r3, [r3, #23]
   11dc6:	061b      	lsls	r3, r3, #24
   11dc8:	4313      	orrs	r3, r2
   11dca:	7a18      	ldrb	r0, [r3, #8]
   11dcc:	4a47      	ldr	r2, [pc, #284]	; (11eec <setJoinDutyCycleTimer+0x4c4>)
   11dce:	4948      	ldr	r1, [pc, #288]	; (11ef0 <setJoinDutyCycleTimer+0x4c8>)
   11dd0:	2300      	movs	r3, #0
   11dd2:	9300      	str	r3, [sp, #0]
   11dd4:	0013      	movs	r3, r2
   11dd6:	2200      	movs	r2, #0
   11dd8:	4c46      	ldr	r4, [pc, #280]	; (11ef4 <setJoinDutyCycleTimer+0x4cc>)
   11dda:	47a0      	blx	r4
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
   11ddc:	4b3c      	ldr	r3, [pc, #240]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11dde:	223f      	movs	r2, #63	; 0x3f
   11de0:	5c9a      	ldrb	r2, [r3, r2]
   11de2:	2140      	movs	r1, #64	; 0x40
   11de4:	5c59      	ldrb	r1, [r3, r1]
   11de6:	0209      	lsls	r1, r1, #8
   11de8:	430a      	orrs	r2, r1
   11dea:	2141      	movs	r1, #65	; 0x41
   11dec:	5c59      	ldrb	r1, [r3, r1]
   11dee:	0409      	lsls	r1, r1, #16
   11df0:	430a      	orrs	r2, r1
   11df2:	2142      	movs	r1, #66	; 0x42
   11df4:	5c5b      	ldrb	r3, [r3, r1]
   11df6:	061b      	lsls	r3, r3, #24
   11df8:	4313      	orrs	r3, r2
   11dfa:	4a3b      	ldr	r2, [pc, #236]	; (11ee8 <setJoinDutyCycleTimer+0x4c0>)
   11dfc:	189a      	adds	r2, r3, r2
   11dfe:	4b34      	ldr	r3, [pc, #208]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11e00:	333f      	adds	r3, #63	; 0x3f
   11e02:	21ff      	movs	r1, #255	; 0xff
   11e04:	4011      	ands	r1, r2
   11e06:	000c      	movs	r4, r1
   11e08:	7819      	ldrb	r1, [r3, #0]
   11e0a:	2000      	movs	r0, #0
   11e0c:	4001      	ands	r1, r0
   11e0e:	1c08      	adds	r0, r1, #0
   11e10:	1c21      	adds	r1, r4, #0
   11e12:	4301      	orrs	r1, r0
   11e14:	7019      	strb	r1, [r3, #0]
   11e16:	0a11      	lsrs	r1, r2, #8
   11e18:	20ff      	movs	r0, #255	; 0xff
   11e1a:	4001      	ands	r1, r0
   11e1c:	000c      	movs	r4, r1
   11e1e:	7859      	ldrb	r1, [r3, #1]
   11e20:	2000      	movs	r0, #0
   11e22:	4001      	ands	r1, r0
   11e24:	1c08      	adds	r0, r1, #0
   11e26:	1c21      	adds	r1, r4, #0
   11e28:	4301      	orrs	r1, r0
   11e2a:	7059      	strb	r1, [r3, #1]
   11e2c:	0c11      	lsrs	r1, r2, #16
   11e2e:	20ff      	movs	r0, #255	; 0xff
   11e30:	4001      	ands	r1, r0
   11e32:	000c      	movs	r4, r1
   11e34:	7899      	ldrb	r1, [r3, #2]
   11e36:	2000      	movs	r0, #0
   11e38:	4001      	ands	r1, r0
   11e3a:	1c08      	adds	r0, r1, #0
   11e3c:	1c21      	adds	r1, r4, #0
   11e3e:	4301      	orrs	r1, r0
   11e40:	7099      	strb	r1, [r3, #2]
   11e42:	0e10      	lsrs	r0, r2, #24
   11e44:	78da      	ldrb	r2, [r3, #3]
   11e46:	2100      	movs	r1, #0
   11e48:	400a      	ands	r2, r1
   11e4a:	1c11      	adds	r1, r2, #0
   11e4c:	1c02      	adds	r2, r0, #0
   11e4e:	430a      	orrs	r2, r1
   11e50:	70da      	strb	r2, [r3, #3]
   11e52:	e08d      	b.n	11f70 <setJoinDutyCycleTimer+0x548>
				
				}
				else
				{
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
   11e54:	4b1e      	ldr	r3, [pc, #120]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11e56:	7d1a      	ldrb	r2, [r3, #20]
   11e58:	7d59      	ldrb	r1, [r3, #21]
   11e5a:	0209      	lsls	r1, r1, #8
   11e5c:	430a      	orrs	r2, r1
   11e5e:	7d99      	ldrb	r1, [r3, #22]
   11e60:	0409      	lsls	r1, r1, #16
   11e62:	430a      	orrs	r2, r1
   11e64:	7ddb      	ldrb	r3, [r3, #23]
   11e66:	061b      	lsls	r3, r3, #24
   11e68:	4313      	orrs	r3, r2
   11e6a:	7a18      	ldrb	r0, [r3, #8]
   11e6c:	4b18      	ldr	r3, [pc, #96]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11e6e:	223f      	movs	r2, #63	; 0x3f
   11e70:	5c9a      	ldrb	r2, [r3, r2]
   11e72:	2140      	movs	r1, #64	; 0x40
   11e74:	5c59      	ldrb	r1, [r3, r1]
   11e76:	0209      	lsls	r1, r1, #8
   11e78:	430a      	orrs	r2, r1
   11e7a:	2141      	movs	r1, #65	; 0x41
   11e7c:	5c59      	ldrb	r1, [r3, r1]
   11e7e:	0409      	lsls	r1, r1, #16
   11e80:	430a      	orrs	r2, r1
   11e82:	2142      	movs	r1, #66	; 0x42
   11e84:	5c5b      	ldrb	r3, [r3, r1]
   11e86:	061b      	lsls	r3, r3, #24
   11e88:	4313      	orrs	r3, r2
   11e8a:	001a      	movs	r2, r3
   11e8c:	23fa      	movs	r3, #250	; 0xfa
   11e8e:	009b      	lsls	r3, r3, #2
   11e90:	4353      	muls	r3, r2
   11e92:	0019      	movs	r1, r3
   11e94:	4a15      	ldr	r2, [pc, #84]	; (11eec <setJoinDutyCycleTimer+0x4c4>)
   11e96:	2300      	movs	r3, #0
   11e98:	9300      	str	r3, [sp, #0]
   11e9a:	0013      	movs	r3, r2
   11e9c:	2200      	movs	r2, #0
   11e9e:	4c15      	ldr	r4, [pc, #84]	; (11ef4 <setJoinDutyCycleTimer+0x4cc>)
   11ea0:	47a0      	blx	r4
   11ea2:	e065      	b.n	11f70 <setJoinDutyCycleTimer+0x548>
				}
			}
			else
			{
				RegParams.joinDutyCycleTimeout = 0;
   11ea4:	4b0a      	ldr	r3, [pc, #40]	; (11ed0 <setJoinDutyCycleTimer+0x4a8>)
   11ea6:	333f      	adds	r3, #63	; 0x3f
   11ea8:	781a      	ldrb	r2, [r3, #0]
   11eaa:	2100      	movs	r1, #0
   11eac:	400a      	ands	r2, r1
   11eae:	701a      	strb	r2, [r3, #0]
   11eb0:	785a      	ldrb	r2, [r3, #1]
   11eb2:	2100      	movs	r1, #0
   11eb4:	400a      	ands	r2, r1
   11eb6:	705a      	strb	r2, [r3, #1]
   11eb8:	789a      	ldrb	r2, [r3, #2]
   11eba:	2100      	movs	r1, #0
   11ebc:	400a      	ands	r2, r1
   11ebe:	709a      	strb	r2, [r3, #2]
   11ec0:	78da      	ldrb	r2, [r3, #3]
   11ec2:	2100      	movs	r1, #0
   11ec4:	400a      	ands	r2, r1
   11ec6:	70da      	strb	r2, [r3, #3]
   11ec8:	e052      	b.n	11f70 <setJoinDutyCycleTimer+0x548>
   11eca:	46c0      	nop			; (mov r8, r8)
   11ecc:	0000270f 	.word	0x0000270f
   11ed0:	200014a8 	.word	0x200014a8
   11ed4:	00015a89 	.word	0x00015a89
   11ed8:	00015ab9 	.word	0x00015ab9
   11edc:	00015cfd 	.word	0x00015cfd
   11ee0:	00021069 	.word	0x00021069
   11ee4:	0020c49b 	.word	0x0020c49b
   11ee8:	ffdf3b65 	.word	0xffdf3b65
   11eec:	0000f935 	.word	0x0000f935
   11ef0:	7fffffff 	.word	0x7fffffff
   11ef4:	000159bd 	.word	0x000159bd
			
		}
	}
	else
	{
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
   11ef8:	4b21      	ldr	r3, [pc, #132]	; (11f80 <setJoinDutyCycleTimer+0x558>)
   11efa:	7d1a      	ldrb	r2, [r3, #20]
   11efc:	7d59      	ldrb	r1, [r3, #21]
   11efe:	0209      	lsls	r1, r1, #8
   11f00:	430a      	orrs	r2, r1
   11f02:	7d99      	ldrb	r1, [r3, #22]
   11f04:	0409      	lsls	r1, r1, #16
   11f06:	430a      	orrs	r2, r1
   11f08:	7ddb      	ldrb	r3, [r3, #23]
   11f0a:	061b      	lsls	r3, r3, #24
   11f0c:	4313      	orrs	r3, r2
   11f0e:	7a1b      	ldrb	r3, [r3, #8]
   11f10:	0018      	movs	r0, r3
   11f12:	4b1c      	ldr	r3, [pc, #112]	; (11f84 <setJoinDutyCycleTimer+0x55c>)
   11f14:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
   11f16:	4b1a      	ldr	r3, [pc, #104]	; (11f80 <setJoinDutyCycleTimer+0x558>)
   11f18:	333f      	adds	r3, #63	; 0x3f
   11f1a:	781a      	ldrb	r2, [r3, #0]
   11f1c:	2100      	movs	r1, #0
   11f1e:	400a      	ands	r2, r1
   11f20:	701a      	strb	r2, [r3, #0]
   11f22:	785a      	ldrb	r2, [r3, #1]
   11f24:	2100      	movs	r1, #0
   11f26:	400a      	ands	r2, r1
   11f28:	705a      	strb	r2, [r3, #1]
   11f2a:	789a      	ldrb	r2, [r3, #2]
   11f2c:	2100      	movs	r1, #0
   11f2e:	400a      	ands	r2, r1
   11f30:	709a      	strb	r2, [r3, #2]
   11f32:	78da      	ldrb	r2, [r3, #3]
   11f34:	2100      	movs	r1, #0
   11f36:	400a      	ands	r2, r1
   11f38:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
   11f3a:	4b11      	ldr	r3, [pc, #68]	; (11f80 <setJoinDutyCycleTimer+0x558>)
   11f3c:	7d1a      	ldrb	r2, [r3, #20]
   11f3e:	7d59      	ldrb	r1, [r3, #21]
   11f40:	0209      	lsls	r1, r1, #8
   11f42:	430a      	orrs	r2, r1
   11f44:	7d99      	ldrb	r1, [r3, #22]
   11f46:	0409      	lsls	r1, r1, #16
   11f48:	430a      	orrs	r2, r1
   11f4a:	7ddb      	ldrb	r3, [r3, #23]
   11f4c:	061b      	lsls	r3, r3, #24
   11f4e:	4313      	orrs	r3, r2
   11f50:	791a      	ldrb	r2, [r3, #4]
   11f52:	2100      	movs	r1, #0
   11f54:	400a      	ands	r2, r1
   11f56:	711a      	strb	r2, [r3, #4]
   11f58:	795a      	ldrb	r2, [r3, #5]
   11f5a:	2100      	movs	r1, #0
   11f5c:	400a      	ands	r2, r1
   11f5e:	715a      	strb	r2, [r3, #5]
   11f60:	799a      	ldrb	r2, [r3, #6]
   11f62:	2100      	movs	r1, #0
   11f64:	400a      	ands	r2, r1
   11f66:	719a      	strb	r2, [r3, #6]
   11f68:	79da      	ldrb	r2, [r3, #7]
   11f6a:	2100      	movs	r1, #0
   11f6c:	400a      	ands	r2, r1
   11f6e:	71da      	strb	r2, [r3, #7]
	}
return result;
   11f70:	231b      	movs	r3, #27
   11f72:	18fb      	adds	r3, r7, r3
   11f74:	781b      	ldrb	r3, [r3, #0]
	
}
   11f76:	0018      	movs	r0, r3
   11f78:	46bd      	mov	sp, r7
   11f7a:	b009      	add	sp, #36	; 0x24
   11f7c:	bd90      	pop	{r4, r7, pc}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	200014a8 	.word	0x200014a8
   11f84:	00015cfd 	.word	0x00015cfd

00011f88 <setJoinBackOffTimer>:
static StackRetStatus_t setJoinBackOffTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
   11f88:	b590      	push	{r4, r7, lr}
   11f8a:	b087      	sub	sp, #28
   11f8c:	af02      	add	r7, sp, #8
   11f8e:	0002      	movs	r2, r0
   11f90:	6039      	str	r1, [r7, #0]
   11f92:	1dfb      	adds	r3, r7, #7
   11f94:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   11f96:	230f      	movs	r3, #15
   11f98:	18fb      	adds	r3, r7, r3
   11f9a:	2208      	movs	r2, #8
   11f9c:	701a      	strb	r2, [r3, #0]
	bool startJoinBackOffTimer;
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
   11f9e:	683b      	ldr	r3, [r7, #0]
   11fa0:	781a      	ldrb	r2, [r3, #0]
   11fa2:	230e      	movs	r3, #14
   11fa4:	18fb      	adds	r3, r7, r3
   11fa6:	701a      	strb	r2, [r3, #0]
	if(startJoinBackOffTimer == true)
   11fa8:	230e      	movs	r3, #14
   11faa:	18fb      	adds	r3, r7, r3
   11fac:	781b      	ldrb	r3, [r3, #0]
   11fae:	2b00      	cmp	r3, #0
   11fb0:	d014      	beq.n	11fdc <setJoinBackOffTimer+0x54>
	{
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
   11fb2:	4b17      	ldr	r3, [pc, #92]	; (12010 <setJoinBackOffTimer+0x88>)
   11fb4:	7e1a      	ldrb	r2, [r3, #24]
   11fb6:	7e59      	ldrb	r1, [r3, #25]
   11fb8:	0209      	lsls	r1, r1, #8
   11fba:	430a      	orrs	r2, r1
   11fbc:	7e99      	ldrb	r1, [r3, #26]
   11fbe:	0409      	lsls	r1, r1, #16
   11fc0:	430a      	orrs	r2, r1
   11fc2:	7edb      	ldrb	r3, [r3, #27]
   11fc4:	061b      	lsls	r3, r3, #24
   11fc6:	4313      	orrs	r3, r2
   11fc8:	7818      	ldrb	r0, [r3, #0]
   11fca:	4a12      	ldr	r2, [pc, #72]	; (12014 <setJoinBackOffTimer+0x8c>)
   11fcc:	4912      	ldr	r1, [pc, #72]	; (12018 <setJoinBackOffTimer+0x90>)
   11fce:	2300      	movs	r3, #0
   11fd0:	9300      	str	r3, [sp, #0]
   11fd2:	0013      	movs	r3, r2
   11fd4:	2200      	movs	r2, #0
   11fd6:	4c11      	ldr	r4, [pc, #68]	; (1201c <setJoinBackOffTimer+0x94>)
   11fd8:	47a0      	blx	r4
   11fda:	e012      	b.n	12002 <setJoinBackOffTimer+0x7a>
	}
	else
	{
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
   11fdc:	4b0c      	ldr	r3, [pc, #48]	; (12010 <setJoinBackOffTimer+0x88>)
   11fde:	7e1a      	ldrb	r2, [r3, #24]
   11fe0:	7e59      	ldrb	r1, [r3, #25]
   11fe2:	0209      	lsls	r1, r1, #8
   11fe4:	430a      	orrs	r2, r1
   11fe6:	7e99      	ldrb	r1, [r3, #26]
   11fe8:	0409      	lsls	r1, r1, #16
   11fea:	430a      	orrs	r2, r1
   11fec:	7edb      	ldrb	r3, [r3, #27]
   11fee:	061b      	lsls	r3, r3, #24
   11ff0:	4313      	orrs	r3, r2
   11ff2:	781b      	ldrb	r3, [r3, #0]
   11ff4:	0018      	movs	r0, r3
   11ff6:	4b0a      	ldr	r3, [pc, #40]	; (12020 <setJoinBackOffTimer+0x98>)
   11ff8:	4798      	blx	r3
		RegParams.joinbccount = 0;
   11ffa:	4b05      	ldr	r3, [pc, #20]	; (12010 <setJoinBackOffTimer+0x88>)
   11ffc:	2243      	movs	r2, #67	; 0x43
   11ffe:	2100      	movs	r1, #0
   12000:	5499      	strb	r1, [r3, r2]
	}
 return result;
   12002:	230f      	movs	r3, #15
   12004:	18fb      	adds	r3, r7, r3
   12006:	781b      	ldrb	r3, [r3, #0]
}
   12008:	0018      	movs	r0, r3
   1200a:	46bd      	mov	sp, r7
   1200c:	b005      	add	sp, #20
   1200e:	bd90      	pop	{r4, r7, pc}
   12010:	200014a8 	.word	0x200014a8
   12014:	0000fb59 	.word	0x0000fb59
   12018:	6b49d200 	.word	0x6b49d200
   1201c:	000159bd 	.word	0x000159bd
   12020:	00015cfd 	.word	0x00015cfd

00012024 <setJoinBackoffCntl>:
static StackRetStatus_t setJoinBackoffCntl(LorawanRegionalAttributes_t attr,void *attrInput)
{   
   12024:	b580      	push	{r7, lr}
   12026:	b084      	sub	sp, #16
   12028:	af00      	add	r7, sp, #0
   1202a:	0002      	movs	r2, r0
   1202c:	6039      	str	r1, [r7, #0]
   1202e:	1dfb      	adds	r3, r7, #7
   12030:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   12032:	230f      	movs	r3, #15
   12034:	18fb      	adds	r3, r7, r3
   12036:	2208      	movs	r2, #8
   12038:	701a      	strb	r2, [r3, #0]
	bool joinbackoffcntl;
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
   1203a:	683b      	ldr	r3, [r7, #0]
   1203c:	781a      	ldrb	r2, [r3, #0]
   1203e:	230e      	movs	r3, #14
   12040:	18fb      	adds	r3, r7, r3
   12042:	701a      	strb	r2, [r3, #0]
	if(joinbackoffcntl == false)
   12044:	230e      	movs	r3, #14
   12046:	18fb      	adds	r3, r7, r3
   12048:	781b      	ldrb	r3, [r3, #0]
   1204a:	2201      	movs	r2, #1
   1204c:	4053      	eors	r3, r2
   1204e:	b2db      	uxtb	r3, r3
   12050:	2b00      	cmp	r3, #0
   12052:	d050      	beq.n	120f6 <setJoinBackoffCntl+0xd2>
	{
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
   12054:	4b30      	ldr	r3, [pc, #192]	; (12118 <setJoinBackoffCntl+0xf4>)
   12056:	2220      	movs	r2, #32
   12058:	5c9b      	ldrb	r3, [r3, r2]
   1205a:	001a      	movs	r2, r3
   1205c:	2320      	movs	r3, #32
   1205e:	4013      	ands	r3, r2
   12060:	d052      	beq.n	12108 <setJoinBackoffCntl+0xe4>
		{
			/*Disable joinbackoff */
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
   12062:	4b2d      	ldr	r3, [pc, #180]	; (12118 <setJoinBackoffCntl+0xf4>)
   12064:	2220      	movs	r2, #32
   12066:	5c9b      	ldrb	r3, [r3, r2]
   12068:	2220      	movs	r2, #32
   1206a:	4393      	bics	r3, r2
   1206c:	b2d9      	uxtb	r1, r3
   1206e:	4b2a      	ldr	r3, [pc, #168]	; (12118 <setJoinBackoffCntl+0xf4>)
   12070:	2220      	movs	r2, #32
   12072:	5499      	strb	r1, [r3, r2]
			
			/* Stop Join Backoff timer */
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
   12074:	4b28      	ldr	r3, [pc, #160]	; (12118 <setJoinBackoffCntl+0xf4>)
   12076:	7e1a      	ldrb	r2, [r3, #24]
   12078:	7e59      	ldrb	r1, [r3, #25]
   1207a:	0209      	lsls	r1, r1, #8
   1207c:	430a      	orrs	r2, r1
   1207e:	7e99      	ldrb	r1, [r3, #26]
   12080:	0409      	lsls	r1, r1, #16
   12082:	430a      	orrs	r2, r1
   12084:	7edb      	ldrb	r3, [r3, #27]
   12086:	061b      	lsls	r3, r3, #24
   12088:	4313      	orrs	r3, r2
   1208a:	781b      	ldrb	r3, [r3, #0]
   1208c:	0018      	movs	r0, r3
   1208e:	4b23      	ldr	r3, [pc, #140]	; (1211c <setJoinBackoffCntl+0xf8>)
   12090:	4798      	blx	r3
   12092:	1e03      	subs	r3, r0, #0
   12094:	d00e      	beq.n	120b4 <setJoinBackoffCntl+0x90>
			{
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
   12096:	4b20      	ldr	r3, [pc, #128]	; (12118 <setJoinBackoffCntl+0xf4>)
   12098:	7e1a      	ldrb	r2, [r3, #24]
   1209a:	7e59      	ldrb	r1, [r3, #25]
   1209c:	0209      	lsls	r1, r1, #8
   1209e:	430a      	orrs	r2, r1
   120a0:	7e99      	ldrb	r1, [r3, #26]
   120a2:	0409      	lsls	r1, r1, #16
   120a4:	430a      	orrs	r2, r1
   120a6:	7edb      	ldrb	r3, [r3, #27]
   120a8:	061b      	lsls	r3, r3, #24
   120aa:	4313      	orrs	r3, r2
   120ac:	781b      	ldrb	r3, [r3, #0]
   120ae:	0018      	movs	r0, r3
   120b0:	4b1b      	ldr	r3, [pc, #108]	; (12120 <setJoinBackoffCntl+0xfc>)
   120b2:	4798      	blx	r3
			}
			/* Stop Join Dutycycle timer */
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
   120b4:	4b18      	ldr	r3, [pc, #96]	; (12118 <setJoinBackoffCntl+0xf4>)
   120b6:	7d1a      	ldrb	r2, [r3, #20]
   120b8:	7d59      	ldrb	r1, [r3, #21]
   120ba:	0209      	lsls	r1, r1, #8
   120bc:	430a      	orrs	r2, r1
   120be:	7d99      	ldrb	r1, [r3, #22]
   120c0:	0409      	lsls	r1, r1, #16
   120c2:	430a      	orrs	r2, r1
   120c4:	7ddb      	ldrb	r3, [r3, #23]
   120c6:	061b      	lsls	r3, r3, #24
   120c8:	4313      	orrs	r3, r2
   120ca:	7a1b      	ldrb	r3, [r3, #8]
   120cc:	0018      	movs	r0, r3
   120ce:	4b13      	ldr	r3, [pc, #76]	; (1211c <setJoinBackoffCntl+0xf8>)
   120d0:	4798      	blx	r3
   120d2:	1e03      	subs	r3, r0, #0
   120d4:	d018      	beq.n	12108 <setJoinBackoffCntl+0xe4>
			{
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
   120d6:	4b10      	ldr	r3, [pc, #64]	; (12118 <setJoinBackoffCntl+0xf4>)
   120d8:	7d1a      	ldrb	r2, [r3, #20]
   120da:	7d59      	ldrb	r1, [r3, #21]
   120dc:	0209      	lsls	r1, r1, #8
   120de:	430a      	orrs	r2, r1
   120e0:	7d99      	ldrb	r1, [r3, #22]
   120e2:	0409      	lsls	r1, r1, #16
   120e4:	430a      	orrs	r2, r1
   120e6:	7ddb      	ldrb	r3, [r3, #23]
   120e8:	061b      	lsls	r3, r3, #24
   120ea:	4313      	orrs	r3, r2
   120ec:	7a1b      	ldrb	r3, [r3, #8]
   120ee:	0018      	movs	r0, r3
   120f0:	4b0b      	ldr	r3, [pc, #44]	; (12120 <setJoinBackoffCntl+0xfc>)
   120f2:	4798      	blx	r3
   120f4:	e008      	b.n	12108 <setJoinBackoffCntl+0xe4>
		}
	
	}
	else
	{   /*Enable join backoff */
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
   120f6:	4b08      	ldr	r3, [pc, #32]	; (12118 <setJoinBackoffCntl+0xf4>)
   120f8:	2220      	movs	r2, #32
   120fa:	5c9b      	ldrb	r3, [r3, r2]
   120fc:	2220      	movs	r2, #32
   120fe:	4313      	orrs	r3, r2
   12100:	b2d9      	uxtb	r1, r3
   12102:	4b05      	ldr	r3, [pc, #20]	; (12118 <setJoinBackoffCntl+0xf4>)
   12104:	2220      	movs	r2, #32
   12106:	5499      	strb	r1, [r3, r2]
	}
return result;
   12108:	230f      	movs	r3, #15
   1210a:	18fb      	adds	r3, r7, r3
   1210c:	781b      	ldrb	r3, [r3, #0]
}
   1210e:	0018      	movs	r0, r3
   12110:	46bd      	mov	sp, r7
   12112:	b004      	add	sp, #16
   12114:	bd80      	pop	{r7, pc}
   12116:	46c0      	nop			; (mov r8, r8)
   12118:	200014a8 	.word	0x200014a8
   1211c:	00015a89 	.word	0x00015a89
   12120:	00015cfd 	.word	0x00015cfd

00012124 <setFrequency>:
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setFrequency(LorawanRegionalAttributes_t attr, void *attrInput)
{
   12124:	b590      	push	{r4, r7, lr}
   12126:	b087      	sub	sp, #28
   12128:	af00      	add	r7, sp, #0
   1212a:	0002      	movs	r2, r0
   1212c:	6039      	str	r1, [r7, #0]
   1212e:	1dfb      	adds	r3, r7, #7
   12130:	701a      	strb	r2, [r3, #0]
	ValUpdateFreqTx_t updateTxFreq;
	ValChId_t valChid;
	StackRetStatus_t result = LORAWAN_SUCCESS;
   12132:	2317      	movs	r3, #23
   12134:	18fb      	adds	r3, r7, r3
   12136:	2208      	movs	r2, #8
   12138:	701a      	strb	r2, [r3, #0]

	
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
   1213a:	6839      	ldr	r1, [r7, #0]
   1213c:	230c      	movs	r3, #12
   1213e:	18fb      	adds	r3, r7, r3
   12140:	2208      	movs	r2, #8
   12142:	0018      	movs	r0, r3
   12144:	4b91      	ldr	r3, [pc, #580]	; (1238c <setFrequency+0x268>)
   12146:	4798      	blx	r3
	
	valChid.channelIndex = updateTxFreq.channelIndex;
   12148:	230c      	movs	r3, #12
   1214a:	18fb      	adds	r3, r7, r3
   1214c:	791a      	ldrb	r2, [r3, #4]
   1214e:	2308      	movs	r3, #8
   12150:	18fb      	adds	r3, r7, r3
   12152:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
   12154:	2308      	movs	r3, #8
   12156:	18fb      	adds	r3, r7, r3
   12158:	2200      	movs	r2, #0
   1215a:	705a      	strb	r2, [r3, #1]

	
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
   1215c:	4b8c      	ldr	r3, [pc, #560]	; (12390 <setFrequency+0x26c>)
   1215e:	685b      	ldr	r3, [r3, #4]
   12160:	220c      	movs	r2, #12
   12162:	18ba      	adds	r2, r7, r2
   12164:	0011      	movs	r1, r2
   12166:	2001      	movs	r0, #1
   12168:	4798      	blx	r3
   1216a:	0003      	movs	r3, r0
   1216c:	2b08      	cmp	r3, #8
   1216e:	d108      	bne.n	12182 <setFrequency+0x5e>
   12170:	2308      	movs	r3, #8
   12172:	18fb      	adds	r3, r7, r3
   12174:	0019      	movs	r1, r3
   12176:	2015      	movs	r0, #21
   12178:	4b86      	ldr	r3, [pc, #536]	; (12394 <setFrequency+0x270>)
   1217a:	4798      	blx	r3
   1217c:	0003      	movs	r3, r0
   1217e:	2b08      	cmp	r3, #8
   12180:	d004      	beq.n	1218c <setFrequency+0x68>
	{
		result = LORAWAN_INVALID_PARAMETER;
   12182:	2317      	movs	r3, #23
   12184:	18fb      	adds	r3, r7, r3
   12186:	220a      	movs	r2, #10
   12188:	701a      	strb	r2, [r3, #0]
   1218a:	e0f7      	b.n	1237c <setFrequency+0x258>
	}
	else
	{
		uint8_t chIndx = updateTxFreq.channelIndex;
   1218c:	2316      	movs	r3, #22
   1218e:	18fb      	adds	r3, r7, r3
   12190:	220c      	movs	r2, #12
   12192:	18ba      	adds	r2, r7, r2
   12194:	7912      	ldrb	r2, [r2, #4]
   12196:	701a      	strb	r2, [r3, #0]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
   12198:	4b7f      	ldr	r3, [pc, #508]	; (12398 <setFrequency+0x274>)
   1219a:	222f      	movs	r2, #47	; 0x2f
   1219c:	5c9b      	ldrb	r3, [r3, r2]
   1219e:	001a      	movs	r2, r3
   121a0:	2323      	movs	r3, #35	; 0x23
   121a2:	4113      	asrs	r3, r2
   121a4:	2201      	movs	r2, #1
   121a6:	4013      	ands	r3, r2
   121a8:	d01b      	beq.n	121e2 <setFrequency+0xbe>
		{
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
   121aa:	4b7b      	ldr	r3, [pc, #492]	; (12398 <setFrequency+0x274>)
   121ac:	7a1a      	ldrb	r2, [r3, #8]
   121ae:	7a59      	ldrb	r1, [r3, #9]
   121b0:	0209      	lsls	r1, r1, #8
   121b2:	430a      	orrs	r2, r1
   121b4:	7a99      	ldrb	r1, [r3, #10]
   121b6:	0409      	lsls	r1, r1, #16
   121b8:	430a      	orrs	r2, r1
   121ba:	7adb      	ldrb	r3, [r3, #11]
   121bc:	061b      	lsls	r3, r3, #24
   121be:	4313      	orrs	r3, r2
   121c0:	0019      	movs	r1, r3
   121c2:	2316      	movs	r3, #22
   121c4:	18fb      	adds	r3, r7, r3
   121c6:	781a      	ldrb	r2, [r3, #0]
   121c8:	0013      	movs	r3, r2
   121ca:	005b      	lsls	r3, r3, #1
   121cc:	189b      	adds	r3, r3, r2
   121ce:	009b      	lsls	r3, r3, #2
   121d0:	18cc      	adds	r4, r1, r3
   121d2:	230c      	movs	r3, #12
   121d4:	18fb      	adds	r3, r7, r3
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	0018      	movs	r0, r3
   121da:	4b70      	ldr	r3, [pc, #448]	; (1239c <setFrequency+0x278>)
   121dc:	4798      	blx	r3
   121de:	0003      	movs	r3, r0
   121e0:	7223      	strb	r3, [r4, #8]
		}
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
   121e2:	4b6d      	ldr	r3, [pc, #436]	; (12398 <setFrequency+0x274>)
   121e4:	7a1a      	ldrb	r2, [r3, #8]
   121e6:	7a59      	ldrb	r1, [r3, #9]
   121e8:	0209      	lsls	r1, r1, #8
   121ea:	430a      	orrs	r2, r1
   121ec:	7a99      	ldrb	r1, [r3, #10]
   121ee:	0409      	lsls	r1, r1, #16
   121f0:	430a      	orrs	r2, r1
   121f2:	7adb      	ldrb	r3, [r3, #11]
   121f4:	061b      	lsls	r3, r3, #24
   121f6:	4313      	orrs	r3, r2
   121f8:	0019      	movs	r1, r3
   121fa:	2316      	movs	r3, #22
   121fc:	18fb      	adds	r3, r7, r3
   121fe:	781a      	ldrb	r2, [r3, #0]
   12200:	0013      	movs	r3, r2
   12202:	005b      	lsls	r3, r3, #1
   12204:	189b      	adds	r3, r3, r2
   12206:	009b      	lsls	r3, r3, #2
   12208:	18cb      	adds	r3, r1, r3
   1220a:	220c      	movs	r2, #12
   1220c:	18ba      	adds	r2, r7, r2
   1220e:	6812      	ldr	r2, [r2, #0]
   12210:	21ff      	movs	r1, #255	; 0xff
   12212:	4011      	ands	r1, r2
   12214:	000c      	movs	r4, r1
   12216:	7819      	ldrb	r1, [r3, #0]
   12218:	2000      	movs	r0, #0
   1221a:	4001      	ands	r1, r0
   1221c:	1c08      	adds	r0, r1, #0
   1221e:	1c21      	adds	r1, r4, #0
   12220:	4301      	orrs	r1, r0
   12222:	7019      	strb	r1, [r3, #0]
   12224:	0a11      	lsrs	r1, r2, #8
   12226:	20ff      	movs	r0, #255	; 0xff
   12228:	4001      	ands	r1, r0
   1222a:	000c      	movs	r4, r1
   1222c:	7859      	ldrb	r1, [r3, #1]
   1222e:	2000      	movs	r0, #0
   12230:	4001      	ands	r1, r0
   12232:	1c08      	adds	r0, r1, #0
   12234:	1c21      	adds	r1, r4, #0
   12236:	4301      	orrs	r1, r0
   12238:	7059      	strb	r1, [r3, #1]
   1223a:	0c11      	lsrs	r1, r2, #16
   1223c:	20ff      	movs	r0, #255	; 0xff
   1223e:	4001      	ands	r1, r0
   12240:	000c      	movs	r4, r1
   12242:	7899      	ldrb	r1, [r3, #2]
   12244:	2000      	movs	r0, #0
   12246:	4001      	ands	r1, r0
   12248:	1c08      	adds	r0, r1, #0
   1224a:	1c21      	adds	r1, r4, #0
   1224c:	4301      	orrs	r1, r0
   1224e:	7099      	strb	r1, [r3, #2]
   12250:	0e10      	lsrs	r0, r2, #24
   12252:	78da      	ldrb	r2, [r3, #3]
   12254:	2100      	movs	r1, #0
   12256:	400a      	ands	r2, r1
   12258:	1c11      	adds	r1, r2, #0
   1225a:	1c02      	adds	r2, r0, #0
   1225c:	430a      	orrs	r2, r1
   1225e:	70da      	strb	r2, [r3, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
   12260:	4b4d      	ldr	r3, [pc, #308]	; (12398 <setFrequency+0x274>)
   12262:	7a1a      	ldrb	r2, [r3, #8]
   12264:	7a59      	ldrb	r1, [r3, #9]
   12266:	0209      	lsls	r1, r1, #8
   12268:	430a      	orrs	r2, r1
   1226a:	7a99      	ldrb	r1, [r3, #10]
   1226c:	0409      	lsls	r1, r1, #16
   1226e:	430a      	orrs	r2, r1
   12270:	7adb      	ldrb	r3, [r3, #11]
   12272:	061b      	lsls	r3, r3, #24
   12274:	4313      	orrs	r3, r2
   12276:	0019      	movs	r1, r3
   12278:	2316      	movs	r3, #22
   1227a:	18fb      	adds	r3, r7, r3
   1227c:	781a      	ldrb	r2, [r3, #0]
   1227e:	0013      	movs	r3, r2
   12280:	005b      	lsls	r3, r3, #1
   12282:	189b      	adds	r3, r3, r2
   12284:	009b      	lsls	r3, r3, #2
   12286:	18cb      	adds	r3, r1, r3
   12288:	220c      	movs	r2, #12
   1228a:	18ba      	adds	r2, r7, r2
   1228c:	6812      	ldr	r2, [r2, #0]
   1228e:	21ff      	movs	r1, #255	; 0xff
   12290:	4011      	ands	r1, r2
   12292:	000c      	movs	r4, r1
   12294:	7919      	ldrb	r1, [r3, #4]
   12296:	2000      	movs	r0, #0
   12298:	4001      	ands	r1, r0
   1229a:	1c08      	adds	r0, r1, #0
   1229c:	1c21      	adds	r1, r4, #0
   1229e:	4301      	orrs	r1, r0
   122a0:	7119      	strb	r1, [r3, #4]
   122a2:	0a11      	lsrs	r1, r2, #8
   122a4:	20ff      	movs	r0, #255	; 0xff
   122a6:	4001      	ands	r1, r0
   122a8:	000c      	movs	r4, r1
   122aa:	7959      	ldrb	r1, [r3, #5]
   122ac:	2000      	movs	r0, #0
   122ae:	4001      	ands	r1, r0
   122b0:	1c08      	adds	r0, r1, #0
   122b2:	1c21      	adds	r1, r4, #0
   122b4:	4301      	orrs	r1, r0
   122b6:	7159      	strb	r1, [r3, #5]
   122b8:	0c11      	lsrs	r1, r2, #16
   122ba:	20ff      	movs	r0, #255	; 0xff
   122bc:	4001      	ands	r1, r0
   122be:	000c      	movs	r4, r1
   122c0:	7999      	ldrb	r1, [r3, #6]
   122c2:	2000      	movs	r0, #0
   122c4:	4001      	ands	r1, r0
   122c6:	1c08      	adds	r0, r1, #0
   122c8:	1c21      	adds	r1, r4, #0
   122ca:	4301      	orrs	r1, r0
   122cc:	7199      	strb	r1, [r3, #6]
   122ce:	0e10      	lsrs	r0, r2, #24
   122d0:	79da      	ldrb	r2, [r3, #7]
   122d2:	2100      	movs	r1, #0
   122d4:	400a      	ands	r2, r1
   122d6:	1c11      	adds	r1, r2, #0
   122d8:	1c02      	adds	r2, r0, #0
   122da:	430a      	orrs	r2, r1
   122dc:	71da      	strb	r2, [r3, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
   122de:	4b2e      	ldr	r3, [pc, #184]	; (12398 <setFrequency+0x274>)
   122e0:	7a1a      	ldrb	r2, [r3, #8]
   122e2:	7a59      	ldrb	r1, [r3, #9]
   122e4:	0209      	lsls	r1, r1, #8
   122e6:	430a      	orrs	r2, r1
   122e8:	7a99      	ldrb	r1, [r3, #10]
   122ea:	0409      	lsls	r1, r1, #16
   122ec:	430a      	orrs	r2, r1
   122ee:	7adb      	ldrb	r3, [r3, #11]
   122f0:	061b      	lsls	r3, r3, #24
   122f2:	4313      	orrs	r3, r2
   122f4:	0019      	movs	r1, r3
   122f6:	2316      	movs	r3, #22
   122f8:	18fb      	adds	r3, r7, r3
   122fa:	781a      	ldrb	r2, [r3, #0]
   122fc:	0013      	movs	r3, r2
   122fe:	005b      	lsls	r3, r3, #1
   12300:	189b      	adds	r3, r3, r2
   12302:	009b      	lsls	r3, r3, #2
   12304:	18c9      	adds	r1, r1, r3
   12306:	4b24      	ldr	r3, [pc, #144]	; (12398 <setFrequency+0x274>)
   12308:	7a1a      	ldrb	r2, [r3, #8]
   1230a:	7a58      	ldrb	r0, [r3, #9]
   1230c:	0200      	lsls	r0, r0, #8
   1230e:	4302      	orrs	r2, r0
   12310:	7a98      	ldrb	r0, [r3, #10]
   12312:	0400      	lsls	r0, r0, #16
   12314:	4302      	orrs	r2, r0
   12316:	7adb      	ldrb	r3, [r3, #11]
   12318:	061b      	lsls	r3, r3, #24
   1231a:	4313      	orrs	r3, r2
   1231c:	0018      	movs	r0, r3
   1231e:	2316      	movs	r3, #22
   12320:	18fb      	adds	r3, r7, r3
   12322:	781a      	ldrb	r2, [r3, #0]
   12324:	0013      	movs	r3, r2
   12326:	005b      	lsls	r3, r3, #1
   12328:	189b      	adds	r3, r3, r2
   1232a:	009b      	lsls	r3, r3, #2
   1232c:	18c3      	adds	r3, r0, r3
   1232e:	7adb      	ldrb	r3, [r3, #11]
   12330:	2201      	movs	r2, #1
   12332:	4313      	orrs	r3, r2
   12334:	b2db      	uxtb	r3, r3
   12336:	72cb      	strb	r3, [r1, #11]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   12338:	4b17      	ldr	r3, [pc, #92]	; (12398 <setFrequency+0x274>)
   1233a:	4a19      	ldr	r2, [pc, #100]	; (123a0 <setFrequency+0x27c>)
   1233c:	5c9a      	ldrb	r2, [r3, r2]
   1233e:	4919      	ldr	r1, [pc, #100]	; (123a4 <setFrequency+0x280>)
   12340:	5c5b      	ldrb	r3, [r3, r1]
   12342:	021b      	lsls	r3, r3, #8
   12344:	4313      	orrs	r3, r2
   12346:	b29b      	uxth	r3, r3
   12348:	0a1b      	lsrs	r3, r3, #8
   1234a:	b29a      	uxth	r2, r3
   1234c:	2315      	movs	r3, #21
   1234e:	18fb      	adds	r3, r7, r3
   12350:	701a      	strb	r2, [r3, #0]
   12352:	4b11      	ldr	r3, [pc, #68]	; (12398 <setFrequency+0x274>)
   12354:	4a12      	ldr	r2, [pc, #72]	; (123a0 <setFrequency+0x27c>)
   12356:	5c9a      	ldrb	r2, [r3, r2]
   12358:	4912      	ldr	r1, [pc, #72]	; (123a4 <setFrequency+0x280>)
   1235a:	5c5b      	ldrb	r3, [r3, r1]
   1235c:	021b      	lsls	r3, r3, #8
   1235e:	4313      	orrs	r3, r2
   12360:	b29a      	uxth	r2, r3
   12362:	2314      	movs	r3, #20
   12364:	18fb      	adds	r3, r7, r3
   12366:	701a      	strb	r2, [r3, #0]
   12368:	2314      	movs	r3, #20
   1236a:	18fb      	adds	r3, r7, r3
   1236c:	781a      	ldrb	r2, [r3, #0]
   1236e:	2315      	movs	r3, #21
   12370:	18fb      	adds	r3, r7, r3
   12372:	781b      	ldrb	r3, [r3, #0]
   12374:	0011      	movs	r1, r2
   12376:	0018      	movs	r0, r3
   12378:	4b0b      	ldr	r3, [pc, #44]	; (123a8 <setFrequency+0x284>)
   1237a:	4798      	blx	r3
#endif

	}
	return result;
   1237c:	2317      	movs	r3, #23
   1237e:	18fb      	adds	r3, r7, r3
   12380:	781b      	ldrb	r3, [r3, #0]
}
   12382:	0018      	movs	r0, r3
   12384:	46bd      	mov	sp, r7
   12386:	b007      	add	sp, #28
   12388:	bd90      	pop	{r4, r7, pc}
   1238a:	46c0      	nop			; (mov r8, r8)
   1238c:	00024149 	.word	0x00024149
   12390:	20000dc8 	.word	0x20000dc8
   12394:	0000d905 	.word	0x0000d905
   12398:	200014a8 	.word	0x200014a8
   1239c:	00010201 	.word	0x00010201
   123a0:	00000211 	.word	0x00000211
   123a4:	00000212 	.word	0x00000212
   123a8:	00013b45 	.word	0x00013b45

000123ac <setNewChannel>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setNewChannel(LorawanRegionalAttributes_t attr, void *attrInput)
{
   123ac:	b580      	push	{r7, lr}
   123ae:	b088      	sub	sp, #32
   123b0:	af00      	add	r7, sp, #0
   123b2:	0002      	movs	r2, r0
   123b4:	6039      	str	r1, [r7, #0]
   123b6:	1dfb      	adds	r3, r7, #7
   123b8:	701a      	strb	r2, [r3, #0]
	UpdateNewCh_t newCh;
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   123ba:	231f      	movs	r3, #31
   123bc:	18fb      	adds	r3, r7, r3
   123be:	220a      	movs	r2, #10
   123c0:	701a      	strb	r2, [r3, #0]
	pUpdateChIdStatus_t pUpdateChidStatus = NULL;
   123c2:	2300      	movs	r3, #0
   123c4:	61bb      	str	r3, [r7, #24]
	
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
   123c6:	4b55      	ldr	r3, [pc, #340]	; (1251c <setNewChannel+0x170>)
   123c8:	222f      	movs	r2, #47	; 0x2f
   123ca:	5c9b      	ldrb	r3, [r3, r2]
   123cc:	001a      	movs	r2, r3
   123ce:	4b54      	ldr	r3, [pc, #336]	; (12520 <setNewChannel+0x174>)
   123d0:	4113      	asrs	r3, r2
   123d2:	2201      	movs	r2, #1
   123d4:	4013      	ands	r3, r2
   123d6:	d104      	bne.n	123e2 <setNewChannel+0x36>
   123d8:	4b50      	ldr	r3, [pc, #320]	; (1251c <setNewChannel+0x170>)
   123da:	222f      	movs	r2, #47	; 0x2f
   123dc:	5c9b      	ldrb	r3, [r3, r2]
   123de:	2b05      	cmp	r3, #5
   123e0:	d102      	bne.n	123e8 <setNewChannel+0x3c>
	{
#if (((AS_BAND) == 1) || ((JPN_BAND) == 1))		
		pUpdateChidStatus = UpdateChannelIdStatusT3;
   123e2:	4b50      	ldr	r3, [pc, #320]	; (12524 <setNewChannel+0x178>)
   123e4:	61bb      	str	r3, [r7, #24]
   123e6:	e011      	b.n	1240c <setNewChannel+0x60>
#endif
	}
	else if( ISM_KR920 == RegParams.band)
   123e8:	4b4c      	ldr	r3, [pc, #304]	; (1251c <setNewChannel+0x170>)
   123ea:	222f      	movs	r2, #47	; 0x2f
   123ec:	5c9b      	ldrb	r3, [r3, r2]
   123ee:	2b04      	cmp	r3, #4
   123f0:	d102      	bne.n	123f8 <setNewChannel+0x4c>
	{
#if (KR_BAND == 1)
		pUpdateChidStatus = UpdateChannelIdStatusT4;
   123f2:	4b4d      	ldr	r3, [pc, #308]	; (12528 <setNewChannel+0x17c>)
   123f4:	61bb      	str	r3, [r7, #24]
   123f6:	e009      	b.n	1240c <setNewChannel+0x60>
#endif
	}
	else if( ISM_IND865 == RegParams.band)
   123f8:	4b48      	ldr	r3, [pc, #288]	; (1251c <setNewChannel+0x170>)
   123fa:	222f      	movs	r2, #47	; 0x2f
   123fc:	5c9b      	ldrb	r3, [r3, r2]
   123fe:	2b0f      	cmp	r3, #15
   12400:	d102      	bne.n	12408 <setNewChannel+0x5c>
	{
#if ((IND_BAND) == 1)
		pUpdateChidStatus = UpdateChannelIdStatus;
   12402:	4b4a      	ldr	r3, [pc, #296]	; (1252c <setNewChannel+0x180>)
   12404:	61bb      	str	r3, [r7, #24]
   12406:	e001      	b.n	1240c <setNewChannel+0x60>
#endif
	}
	else
	{
#if ((EU_BAND) == 1)
		pUpdateChidStatus = UpdateChannelIdStatusT2;
   12408:	4b49      	ldr	r3, [pc, #292]	; (12530 <setNewChannel+0x184>)
   1240a:	61bb      	str	r3, [r7, #24]
#endif
	}
	
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
   1240c:	6839      	ldr	r1, [r7, #0]
   1240e:	2310      	movs	r3, #16
   12410:	18fb      	adds	r3, r7, r3
   12412:	2204      	movs	r2, #4
   12414:	0018      	movs	r0, r3
   12416:	4b47      	ldr	r3, [pc, #284]	; (12534 <setNewChannel+0x188>)
   12418:	4798      	blx	r3
	
	ValChMaskCntl_t valchMaskCntl;
	
	valchMaskCntl.chnlMask = newCh.channelMask;
   1241a:	2310      	movs	r3, #16
   1241c:	18fb      	adds	r3, r7, r3
   1241e:	881a      	ldrh	r2, [r3, #0]
   12420:	230c      	movs	r3, #12
   12422:	18fb      	adds	r3, r7, r3
   12424:	805a      	strh	r2, [r3, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
   12426:	2310      	movs	r3, #16
   12428:	18fb      	adds	r3, r7, r3
   1242a:	789a      	ldrb	r2, [r3, #2]
   1242c:	230c      	movs	r3, #12
   1242e:	18fb      	adds	r3, r7, r3
   12430:	701a      	strb	r2, [r3, #0]
	
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
   12432:	230c      	movs	r3, #12
   12434:	18fb      	adds	r3, r7, r3
   12436:	0019      	movs	r1, r3
   12438:	2037      	movs	r0, #55	; 0x37
   1243a:	4b3f      	ldr	r3, [pc, #252]	; (12538 <setNewChannel+0x18c>)
   1243c:	4798      	blx	r3
   1243e:	0003      	movs	r3, r0
   12440:	2b08      	cmp	r3, #8
   12442:	d004      	beq.n	1244e <setNewChannel+0xa2>
	{
		result = LORAWAN_INVALID_PARAMETER;
   12444:	231f      	movs	r3, #31
   12446:	18fb      	adds	r3, r7, r3
   12448:	220a      	movs	r2, #10
   1244a:	701a      	strb	r2, [r3, #0]
   1244c:	e05f      	b.n	1250e <setNewChannel+0x162>
	}
	else
	{
		uint8_t i = 0;
   1244e:	2317      	movs	r3, #23
   12450:	18fb      	adds	r3, r7, r3
   12452:	2200      	movs	r2, #0
   12454:	701a      	strb	r2, [r3, #0]
		result = LORAWAN_SUCCESS;
   12456:	231f      	movs	r3, #31
   12458:	18fb      	adds	r3, r7, r3
   1245a:	2208      	movs	r2, #8
   1245c:	701a      	strb	r2, [r3, #0]
		
		if(newCh.channelMaskCntl == 6)
   1245e:	2310      	movs	r3, #16
   12460:	18fb      	adds	r3, r7, r3
   12462:	789b      	ldrb	r3, [r3, #2]
   12464:	2b06      	cmp	r3, #6
   12466:	d11b      	bne.n	124a0 <setNewChannel+0xf4>
		{
			for(i = 0; i < RegParams.maxChannels; i++)
   12468:	2317      	movs	r3, #23
   1246a:	18fb      	adds	r3, r7, r3
   1246c:	2200      	movs	r2, #0
   1246e:	701a      	strb	r2, [r3, #0]
   12470:	e00d      	b.n	1248e <setNewChannel+0xe2>
			{
				pUpdateChidStatus(i,ENABLED);
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	781a      	ldrb	r2, [r3, #0]
   12478:	69bb      	ldr	r3, [r7, #24]
   1247a:	2101      	movs	r1, #1
   1247c:	0010      	movs	r0, r2
   1247e:	4798      	blx	r3
			for(i = 0; i < RegParams.maxChannels; i++)
   12480:	2317      	movs	r3, #23
   12482:	18fb      	adds	r3, r7, r3
   12484:	781a      	ldrb	r2, [r3, #0]
   12486:	2317      	movs	r3, #23
   12488:	18fb      	adds	r3, r7, r3
   1248a:	3201      	adds	r2, #1
   1248c:	701a      	strb	r2, [r3, #0]
   1248e:	2317      	movs	r3, #23
   12490:	18fb      	adds	r3, r7, r3
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	4a21      	ldr	r2, [pc, #132]	; (1251c <setNewChannel+0x170>)
   12496:	212a      	movs	r1, #42	; 0x2a
   12498:	5652      	ldrsb	r2, [r2, r1]
   1249a:	4293      	cmp	r3, r2
   1249c:	dbe9      	blt.n	12472 <setNewChannel+0xc6>
   1249e:	e036      	b.n	1250e <setNewChannel+0x162>
			}
		}
		else if(newCh.channelMaskCntl == 0)
   124a0:	2310      	movs	r3, #16
   124a2:	18fb      	adds	r3, r7, r3
   124a4:	789b      	ldrb	r3, [r3, #2]
   124a6:	2b00      	cmp	r3, #0
   124a8:	d131      	bne.n	1250e <setNewChannel+0x162>
		{
			for(i = 0; i < RegParams.maxChannels; i++)
   124aa:	2317      	movs	r3, #23
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	2200      	movs	r2, #0
   124b0:	701a      	strb	r2, [r3, #0]
   124b2:	e024      	b.n	124fe <setNewChannel+0x152>
			{
				if((newCh.channelMask & BIT0) == BIT0)
   124b4:	2310      	movs	r3, #16
   124b6:	18fb      	adds	r3, r7, r3
   124b8:	881b      	ldrh	r3, [r3, #0]
   124ba:	001a      	movs	r2, r3
   124bc:	2301      	movs	r3, #1
   124be:	4013      	ands	r3, r2
   124c0:	d007      	beq.n	124d2 <setNewChannel+0x126>
				{
					pUpdateChidStatus(i, ENABLED);
   124c2:	2317      	movs	r3, #23
   124c4:	18fb      	adds	r3, r7, r3
   124c6:	781a      	ldrb	r2, [r3, #0]
   124c8:	69bb      	ldr	r3, [r7, #24]
   124ca:	2101      	movs	r1, #1
   124cc:	0010      	movs	r0, r2
   124ce:	4798      	blx	r3
   124d0:	e006      	b.n	124e0 <setNewChannel+0x134>
				}
				else
				{
					pUpdateChidStatus(i,DISABLED);
   124d2:	2317      	movs	r3, #23
   124d4:	18fb      	adds	r3, r7, r3
   124d6:	781a      	ldrb	r2, [r3, #0]
   124d8:	69bb      	ldr	r3, [r7, #24]
   124da:	2100      	movs	r1, #0
   124dc:	0010      	movs	r0, r2
   124de:	4798      	blx	r3
				}
				newCh.channelMask = newCh.channelMask >> SHIFT1;
   124e0:	2310      	movs	r3, #16
   124e2:	18fb      	adds	r3, r7, r3
   124e4:	881b      	ldrh	r3, [r3, #0]
   124e6:	085b      	lsrs	r3, r3, #1
   124e8:	b29a      	uxth	r2, r3
   124ea:	2310      	movs	r3, #16
   124ec:	18fb      	adds	r3, r7, r3
   124ee:	801a      	strh	r2, [r3, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
   124f0:	2317      	movs	r3, #23
   124f2:	18fb      	adds	r3, r7, r3
   124f4:	781a      	ldrb	r2, [r3, #0]
   124f6:	2317      	movs	r3, #23
   124f8:	18fb      	adds	r3, r7, r3
   124fa:	3201      	adds	r2, #1
   124fc:	701a      	strb	r2, [r3, #0]
   124fe:	2317      	movs	r3, #23
   12500:	18fb      	adds	r3, r7, r3
   12502:	781b      	ldrb	r3, [r3, #0]
   12504:	4a05      	ldr	r2, [pc, #20]	; (1251c <setNewChannel+0x170>)
   12506:	212a      	movs	r1, #42	; 0x2a
   12508:	5652      	ldrsb	r2, [r2, r1]
   1250a:	4293      	cmp	r3, r2
   1250c:	dbd2      	blt.n	124b4 <setNewChannel+0x108>
			}
		}
	}
	return result;
   1250e:	231f      	movs	r3, #31
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
}
   12514:	0018      	movs	r0, r3
   12516:	46bd      	mov	sp, r7
   12518:	b008      	add	sp, #32
   1251a:	bd80      	pop	{r7, pc}
   1251c:	200014a8 	.word	0x200014a8
   12520:	00007fc0 	.word	0x00007fc0
   12524:	00010c25 	.word	0x00010c25
   12528:	00010d3d 	.word	0x00010d3d
   1252c:	00010969 	.word	0x00010969
   12530:	00010a2d 	.word	0x00010a2d
   12534:	00024149 	.word	0x00024149
   12538:	0000d5ed 	.word	0x0000d5ed

0001253c <setDlFrequency>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setDlFrequency(LorawanRegionalAttributes_t attr, void *attrInput)
{
   1253c:	b590      	push	{r4, r7, lr}
   1253e:	b087      	sub	sp, #28
   12540:	af00      	add	r7, sp, #0
   12542:	0002      	movs	r2, r0
   12544:	6039      	str	r1, [r7, #0]
   12546:	1dfb      	adds	r3, r7, #7
   12548:	701a      	strb	r2, [r3, #0]
	ValUpdateFreqTx_t updateDlFreq;
	StackRetStatus_t result = LORAWAN_SUCCESS;
   1254a:	2317      	movs	r3, #23
   1254c:	18fb      	adds	r3, r7, r3
   1254e:	2208      	movs	r2, #8
   12550:	701a      	strb	r2, [r3, #0]
	ValChId_t Chid;

		
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
   12552:	6839      	ldr	r1, [r7, #0]
   12554:	230c      	movs	r3, #12
   12556:	18fb      	adds	r3, r7, r3
   12558:	2208      	movs	r2, #8
   1255a:	0018      	movs	r0, r3
   1255c:	4b46      	ldr	r3, [pc, #280]	; (12678 <setDlFrequency+0x13c>)
   1255e:	4798      	blx	r3
	
	Chid.channelIndex = updateDlFreq.channelIndex;
   12560:	230c      	movs	r3, #12
   12562:	18fb      	adds	r3, r7, r3
   12564:	791a      	ldrb	r2, [r3, #4]
   12566:	2308      	movs	r3, #8
   12568:	18fb      	adds	r3, r7, r3
   1256a:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
   1256c:	2308      	movs	r3, #8
   1256e:	18fb      	adds	r3, r7, r3
   12570:	2201      	movs	r2, #1
   12572:	705a      	strb	r2, [r3, #1]
// 		Chid.allowedForDefaultChannels = ALL_CHANNELS;
// 	}
// 	
	

	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
   12574:	4b41      	ldr	r3, [pc, #260]	; (1267c <setDlFrequency+0x140>)
   12576:	685b      	ldr	r3, [r3, #4]
   12578:	220c      	movs	r2, #12
   1257a:	18ba      	adds	r2, r7, r2
   1257c:	0011      	movs	r1, r2
   1257e:	2001      	movs	r0, #1
   12580:	4798      	blx	r3
   12582:	0003      	movs	r3, r0
   12584:	2b08      	cmp	r3, #8
   12586:	d108      	bne.n	1259a <setDlFrequency+0x5e>
   12588:	2308      	movs	r3, #8
   1258a:	18fb      	adds	r3, r7, r3
   1258c:	0019      	movs	r1, r3
   1258e:	2015      	movs	r0, #21
   12590:	4b3b      	ldr	r3, [pc, #236]	; (12680 <setDlFrequency+0x144>)
   12592:	4798      	blx	r3
   12594:	0003      	movs	r3, r0
   12596:	2b08      	cmp	r3, #8
   12598:	d004      	beq.n	125a4 <setDlFrequency+0x68>
	{
		result = LORAWAN_INVALID_PARAMETER;
   1259a:	2317      	movs	r3, #23
   1259c:	18fb      	adds	r3, r7, r3
   1259e:	220a      	movs	r2, #10
   125a0:	701a      	strb	r2, [r3, #0]
   125a2:	e061      	b.n	12668 <setDlFrequency+0x12c>
	}
	else
	{
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
   125a4:	4b37      	ldr	r3, [pc, #220]	; (12684 <setDlFrequency+0x148>)
   125a6:	7a1a      	ldrb	r2, [r3, #8]
   125a8:	7a59      	ldrb	r1, [r3, #9]
   125aa:	0209      	lsls	r1, r1, #8
   125ac:	430a      	orrs	r2, r1
   125ae:	7a99      	ldrb	r1, [r3, #10]
   125b0:	0409      	lsls	r1, r1, #16
   125b2:	430a      	orrs	r2, r1
   125b4:	7adb      	ldrb	r3, [r3, #11]
   125b6:	061b      	lsls	r3, r3, #24
   125b8:	4313      	orrs	r3, r2
   125ba:	0019      	movs	r1, r3
   125bc:	230c      	movs	r3, #12
   125be:	18fb      	adds	r3, r7, r3
   125c0:	791b      	ldrb	r3, [r3, #4]
   125c2:	001a      	movs	r2, r3
   125c4:	0013      	movs	r3, r2
   125c6:	005b      	lsls	r3, r3, #1
   125c8:	189b      	adds	r3, r3, r2
   125ca:	009b      	lsls	r3, r3, #2
   125cc:	18cb      	adds	r3, r1, r3
   125ce:	220c      	movs	r2, #12
   125d0:	18ba      	adds	r2, r7, r2
   125d2:	6812      	ldr	r2, [r2, #0]
   125d4:	21ff      	movs	r1, #255	; 0xff
   125d6:	4011      	ands	r1, r2
   125d8:	000c      	movs	r4, r1
   125da:	7919      	ldrb	r1, [r3, #4]
   125dc:	2000      	movs	r0, #0
   125de:	4001      	ands	r1, r0
   125e0:	1c08      	adds	r0, r1, #0
   125e2:	1c21      	adds	r1, r4, #0
   125e4:	4301      	orrs	r1, r0
   125e6:	7119      	strb	r1, [r3, #4]
   125e8:	0a11      	lsrs	r1, r2, #8
   125ea:	20ff      	movs	r0, #255	; 0xff
   125ec:	4001      	ands	r1, r0
   125ee:	000c      	movs	r4, r1
   125f0:	7959      	ldrb	r1, [r3, #5]
   125f2:	2000      	movs	r0, #0
   125f4:	4001      	ands	r1, r0
   125f6:	1c08      	adds	r0, r1, #0
   125f8:	1c21      	adds	r1, r4, #0
   125fa:	4301      	orrs	r1, r0
   125fc:	7159      	strb	r1, [r3, #5]
   125fe:	0c11      	lsrs	r1, r2, #16
   12600:	20ff      	movs	r0, #255	; 0xff
   12602:	4001      	ands	r1, r0
   12604:	000c      	movs	r4, r1
   12606:	7999      	ldrb	r1, [r3, #6]
   12608:	2000      	movs	r0, #0
   1260a:	4001      	ands	r1, r0
   1260c:	1c08      	adds	r0, r1, #0
   1260e:	1c21      	adds	r1, r4, #0
   12610:	4301      	orrs	r1, r0
   12612:	7199      	strb	r1, [r3, #6]
   12614:	0e10      	lsrs	r0, r2, #24
   12616:	79da      	ldrb	r2, [r3, #7]
   12618:	2100      	movs	r1, #0
   1261a:	400a      	ands	r2, r1
   1261c:	1c11      	adds	r1, r2, #0
   1261e:	1c02      	adds	r2, r0, #0
   12620:	430a      	orrs	r2, r1
   12622:	71da      	strb	r2, [r3, #7]
#if (ENABLE_PDS == 1)
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
   12624:	4b17      	ldr	r3, [pc, #92]	; (12684 <setDlFrequency+0x148>)
   12626:	4a18      	ldr	r2, [pc, #96]	; (12688 <setDlFrequency+0x14c>)
   12628:	5c9a      	ldrb	r2, [r3, r2]
   1262a:	4918      	ldr	r1, [pc, #96]	; (1268c <setDlFrequency+0x150>)
   1262c:	5c5b      	ldrb	r3, [r3, r1]
   1262e:	021b      	lsls	r3, r3, #8
   12630:	4313      	orrs	r3, r2
   12632:	b29b      	uxth	r3, r3
   12634:	0a1b      	lsrs	r3, r3, #8
   12636:	b29a      	uxth	r2, r3
   12638:	2316      	movs	r3, #22
   1263a:	18fb      	adds	r3, r7, r3
   1263c:	701a      	strb	r2, [r3, #0]
   1263e:	4b11      	ldr	r3, [pc, #68]	; (12684 <setDlFrequency+0x148>)
   12640:	4a11      	ldr	r2, [pc, #68]	; (12688 <setDlFrequency+0x14c>)
   12642:	5c9a      	ldrb	r2, [r3, r2]
   12644:	4911      	ldr	r1, [pc, #68]	; (1268c <setDlFrequency+0x150>)
   12646:	5c5b      	ldrb	r3, [r3, r1]
   12648:	021b      	lsls	r3, r3, #8
   1264a:	4313      	orrs	r3, r2
   1264c:	b29a      	uxth	r2, r3
   1264e:	2315      	movs	r3, #21
   12650:	18fb      	adds	r3, r7, r3
   12652:	701a      	strb	r2, [r3, #0]
   12654:	2315      	movs	r3, #21
   12656:	18fb      	adds	r3, r7, r3
   12658:	781a      	ldrb	r2, [r3, #0]
   1265a:	2316      	movs	r3, #22
   1265c:	18fb      	adds	r3, r7, r3
   1265e:	781b      	ldrb	r3, [r3, #0]
   12660:	0011      	movs	r1, r2
   12662:	0018      	movs	r0, r3
   12664:	4b0a      	ldr	r3, [pc, #40]	; (12690 <setDlFrequency+0x154>)
   12666:	4798      	blx	r3
#endif
	}
	
	return result;
   12668:	2317      	movs	r3, #23
   1266a:	18fb      	adds	r3, r7, r3
   1266c:	781b      	ldrb	r3, [r3, #0]
}
   1266e:	0018      	movs	r0, r3
   12670:	46bd      	mov	sp, r7
   12672:	b007      	add	sp, #28
   12674:	bd90      	pop	{r4, r7, pc}
   12676:	46c0      	nop			; (mov r8, r8)
   12678:	00024149 	.word	0x00024149
   1267c:	20000dc8 	.word	0x20000dc8
   12680:	0000d905 	.word	0x0000d905
   12684:	200014a8 	.word	0x200014a8
   12688:	00000211 	.word	0x00000211
   1268c:	00000212 	.word	0x00000212
   12690:	00013b45 	.word	0x00013b45

00012694 <setTxParams>:
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
   12694:	b590      	push	{r4, r7, lr}
   12696:	b085      	sub	sp, #20
   12698:	af00      	add	r7, sp, #0
   1269a:	0002      	movs	r2, r0
   1269c:	6039      	str	r1, [r7, #0]
   1269e:	1dfb      	adds	r3, r7, #7
   126a0:	701a      	strb	r2, [r3, #0]
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
   126a2:	230c      	movs	r3, #12
   126a4:	18fa      	adds	r2, r7, r3
   126a6:	683b      	ldr	r3, [r7, #0]
   126a8:	0010      	movs	r0, r2
   126aa:	0019      	movs	r1, r3
   126ac:	2302      	movs	r3, #2
   126ae:	001a      	movs	r2, r3
   126b0:	4b22      	ldr	r3, [pc, #136]	; (1273c <setTxParams+0xa8>)
   126b2:	4798      	blx	r3
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
   126b4:	230c      	movs	r3, #12
   126b6:	18fb      	adds	r3, r7, r3
   126b8:	785b      	ldrb	r3, [r3, #1]
   126ba:	07db      	lsls	r3, r3, #31
   126bc:	0fdb      	lsrs	r3, r3, #31
   126be:	b2d9      	uxtb	r1, r3
   126c0:	4a1f      	ldr	r2, [pc, #124]	; (12740 <setTxParams+0xac>)
   126c2:	23c4      	movs	r3, #196	; 0xc4
   126c4:	33ff      	adds	r3, #255	; 0xff
   126c6:	2001      	movs	r0, #1
   126c8:	4001      	ands	r1, r0
   126ca:	000c      	movs	r4, r1
   126cc:	5cd1      	ldrb	r1, [r2, r3]
   126ce:	2001      	movs	r0, #1
   126d0:	4381      	bics	r1, r0
   126d2:	1c08      	adds	r0, r1, #0
   126d4:	1c21      	adds	r1, r4, #0
   126d6:	4301      	orrs	r1, r0
   126d8:	54d1      	strb	r1, [r2, r3]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
   126da:	4a19      	ldr	r2, [pc, #100]	; (12740 <setTxParams+0xac>)
   126dc:	23c4      	movs	r3, #196	; 0xc4
   126de:	33ff      	adds	r3, #255	; 0xff
   126e0:	5cd3      	ldrb	r3, [r2, r3]
   126e2:	2201      	movs	r2, #1
   126e4:	4013      	ands	r3, r2
   126e6:	b2db      	uxtb	r3, r3
   126e8:	2b00      	cmp	r3, #0
   126ea:	d004      	beq.n	126f6 <setTxParams+0x62>
	{
		RegParams.maxDataRate = DR2;
   126ec:	4b14      	ldr	r3, [pc, #80]	; (12740 <setTxParams+0xac>)
   126ee:	2225      	movs	r2, #37	; 0x25
   126f0:	2102      	movs	r1, #2
   126f2:	5499      	strb	r1, [r3, r2]
   126f4:	e003      	b.n	126fe <setTxParams+0x6a>
	}
	else
	{
		RegParams.maxDataRate = DR0;
   126f6:	4b12      	ldr	r3, [pc, #72]	; (12740 <setTxParams+0xac>)
   126f8:	2225      	movs	r2, #37	; 0x25
   126fa:	2100      	movs	r1, #0
   126fc:	5499      	strb	r1, [r3, r2]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
   126fe:	230c      	movs	r3, #12
   12700:	18fb      	adds	r3, r7, r3
   12702:	785b      	ldrb	r3, [r3, #1]
   12704:	079b      	lsls	r3, r3, #30
   12706:	0fdb      	lsrs	r3, r3, #31
   12708:	b2d9      	uxtb	r1, r3
   1270a:	4a0d      	ldr	r2, [pc, #52]	; (12740 <setTxParams+0xac>)
   1270c:	23c4      	movs	r3, #196	; 0xc4
   1270e:	33ff      	adds	r3, #255	; 0xff
   12710:	2001      	movs	r0, #1
   12712:	4001      	ands	r1, r0
   12714:	184c      	adds	r4, r1, r1
   12716:	5cd1      	ldrb	r1, [r2, r3]
   12718:	2002      	movs	r0, #2
   1271a:	4381      	bics	r1, r0
   1271c:	1c08      	adds	r0, r1, #0
   1271e:	1c21      	adds	r1, r4, #0
   12720:	4301      	orrs	r1, r0
   12722:	54d1      	strb	r1, [r2, r3]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
   12724:	230c      	movs	r3, #12
   12726:	18fb      	adds	r3, r7, r3
   12728:	7819      	ldrb	r1, [r3, #0]
   1272a:	4b05      	ldr	r3, [pc, #20]	; (12740 <setTxParams+0xac>)
   1272c:	2228      	movs	r2, #40	; 0x28
   1272e:	5499      	strb	r1, [r3, r2]
	
	return LORAWAN_SUCCESS;
   12730:	2308      	movs	r3, #8
}
   12732:	0018      	movs	r0, r3
   12734:	46bd      	mov	sp, r7
   12736:	b005      	add	sp, #20
   12738:	bd90      	pop	{r4, r7, pc}
   1273a:	46c0      	nop			; (mov r8, r8)
   1273c:	00024149 	.word	0x00024149
   12740:	200014a8 	.word	0x200014a8

00012744 <LBTChannelPauseCallback>:
 * \brief Timer callback for updating the duty cycle timer
 * \param Timer Parameters
 */

static void LBTChannelPauseCallback (uint8_t param)
{
   12744:	b590      	push	{r4, r7, lr}
   12746:	b089      	sub	sp, #36	; 0x24
   12748:	af02      	add	r7, sp, #8
   1274a:	0002      	movs	r2, r0
   1274c:	1dfb      	adds	r3, r7, #7
   1274e:	701a      	strb	r2, [r3, #0]
    uint32_t minim = UINT32_MAX;
   12750:	2301      	movs	r3, #1
   12752:	425b      	negs	r3, r3
   12754:	617b      	str	r3, [r7, #20]
    bool found = 0;
   12756:	2313      	movs	r3, #19
   12758:	18fb      	adds	r3, r7, r3
   1275a:	2200      	movs	r2, #0
   1275c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
	LBTTimer_t *pLBTTimer;
	
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
   1275e:	4baa      	ldr	r3, [pc, #680]	; (12a08 <LBTChannelPauseCallback+0x2c4>)
   12760:	60fb      	str	r3, [r7, #12]

    for (i=0; i < RegParams.maxChannels; i++)
   12762:	2312      	movs	r3, #18
   12764:	18fb      	adds	r3, r7, r3
   12766:	2200      	movs	r2, #0
   12768:	701a      	strb	r2, [r3, #0]
   1276a:	e104      	b.n	12976 <LBTChannelPauseCallback+0x232>
    {
        //Validate this only for enabled channels
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
   1276c:	4ba7      	ldr	r3, [pc, #668]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   1276e:	791a      	ldrb	r2, [r3, #4]
   12770:	7959      	ldrb	r1, [r3, #5]
   12772:	0209      	lsls	r1, r1, #8
   12774:	430a      	orrs	r2, r1
   12776:	7999      	ldrb	r1, [r3, #6]
   12778:	0409      	lsls	r1, r1, #16
   1277a:	430a      	orrs	r2, r1
   1277c:	79db      	ldrb	r3, [r3, #7]
   1277e:	061b      	lsls	r3, r3, #24
   12780:	4313      	orrs	r3, r2
   12782:	001a      	movs	r2, r3
   12784:	2312      	movs	r3, #18
   12786:	18fb      	adds	r3, r7, r3
   12788:	781b      	ldrb	r3, [r3, #0]
   1278a:	005b      	lsls	r3, r3, #1
   1278c:	18d3      	adds	r3, r2, r3
   1278e:	781b      	ldrb	r3, [r3, #0]
   12790:	2b00      	cmp	r3, #0
   12792:	d100      	bne.n	12796 <LBTChannelPauseCallback+0x52>
   12794:	e0e8      	b.n	12968 <LBTChannelPauseCallback+0x224>
   12796:	2312      	movs	r3, #18
   12798:	18fb      	adds	r3, r7, r3
   1279a:	781b      	ldrb	r3, [r3, #0]
   1279c:	4a9b      	ldr	r2, [pc, #620]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   1279e:	3358      	adds	r3, #88	; 0x58
   127a0:	009b      	lsls	r3, r3, #2
   127a2:	18d1      	adds	r1, r2, r3
   127a4:	7a49      	ldrb	r1, [r1, #9]
   127a6:	18d0      	adds	r0, r2, r3
   127a8:	7a80      	ldrb	r0, [r0, #10]
   127aa:	0200      	lsls	r0, r0, #8
   127ac:	4301      	orrs	r1, r0
   127ae:	18d0      	adds	r0, r2, r3
   127b0:	7ac0      	ldrb	r0, [r0, #11]
   127b2:	0400      	lsls	r0, r0, #16
   127b4:	4301      	orrs	r1, r0
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	7b1b      	ldrb	r3, [r3, #12]
   127ba:	061b      	lsls	r3, r3, #24
   127bc:	430b      	orrs	r3, r1
   127be:	d100      	bne.n	127c2 <LBTChannelPauseCallback+0x7e>
   127c0:	e0d2      	b.n	12968 <LBTChannelPauseCallback+0x224>
        {
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
   127c2:	2312      	movs	r3, #18
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	4a90      	ldr	r2, [pc, #576]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   127ca:	3358      	adds	r3, #88	; 0x58
   127cc:	009b      	lsls	r3, r3, #2
   127ce:	18d1      	adds	r1, r2, r3
   127d0:	7a49      	ldrb	r1, [r1, #9]
   127d2:	18d0      	adds	r0, r2, r3
   127d4:	7a80      	ldrb	r0, [r0, #10]
   127d6:	0200      	lsls	r0, r0, #8
   127d8:	4301      	orrs	r1, r0
   127da:	18d0      	adds	r0, r2, r3
   127dc:	7ac0      	ldrb	r0, [r0, #11]
   127de:	0400      	lsls	r0, r0, #16
   127e0:	4301      	orrs	r1, r0
   127e2:	18d3      	adds	r3, r2, r3
   127e4:	7b1b      	ldrb	r3, [r3, #12]
   127e6:	061b      	lsls	r3, r3, #24
   127e8:	430b      	orrs	r3, r1
   127ea:	0018      	movs	r0, r3
   127ec:	68fb      	ldr	r3, [r7, #12]
   127ee:	781a      	ldrb	r2, [r3, #0]
   127f0:	7859      	ldrb	r1, [r3, #1]
   127f2:	0209      	lsls	r1, r1, #8
   127f4:	430a      	orrs	r2, r1
   127f6:	7899      	ldrb	r1, [r3, #2]
   127f8:	0409      	lsls	r1, r1, #16
   127fa:	430a      	orrs	r2, r1
   127fc:	78db      	ldrb	r3, [r3, #3]
   127fe:	061b      	lsls	r3, r3, #24
   12800:	4313      	orrs	r3, r2
   12802:	4298      	cmp	r0, r3
   12804:	d952      	bls.n	128ac <LBTChannelPauseCallback+0x168>
            {
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
   12806:	2312      	movs	r3, #18
   12808:	18fb      	adds	r3, r7, r3
   1280a:	7818      	ldrb	r0, [r3, #0]
   1280c:	2312      	movs	r3, #18
   1280e:	18fb      	adds	r3, r7, r3
   12810:	781b      	ldrb	r3, [r3, #0]
   12812:	4a7e      	ldr	r2, [pc, #504]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   12814:	3358      	adds	r3, #88	; 0x58
   12816:	009b      	lsls	r3, r3, #2
   12818:	18d1      	adds	r1, r2, r3
   1281a:	7a49      	ldrb	r1, [r1, #9]
   1281c:	18d4      	adds	r4, r2, r3
   1281e:	7aa4      	ldrb	r4, [r4, #10]
   12820:	0224      	lsls	r4, r4, #8
   12822:	4321      	orrs	r1, r4
   12824:	18d4      	adds	r4, r2, r3
   12826:	7ae4      	ldrb	r4, [r4, #11]
   12828:	0424      	lsls	r4, r4, #16
   1282a:	4321      	orrs	r1, r4
   1282c:	18d3      	adds	r3, r2, r3
   1282e:	7b1b      	ldrb	r3, [r3, #12]
   12830:	061b      	lsls	r3, r3, #24
   12832:	430b      	orrs	r3, r1
   12834:	001c      	movs	r4, r3
   12836:	68fb      	ldr	r3, [r7, #12]
   12838:	781a      	ldrb	r2, [r3, #0]
   1283a:	7859      	ldrb	r1, [r3, #1]
   1283c:	0209      	lsls	r1, r1, #8
   1283e:	430a      	orrs	r2, r1
   12840:	7899      	ldrb	r1, [r3, #2]
   12842:	0409      	lsls	r1, r1, #16
   12844:	430a      	orrs	r2, r1
   12846:	78db      	ldrb	r3, [r3, #3]
   12848:	061b      	lsls	r3, r3, #24
   1284a:	4313      	orrs	r3, r2
   1284c:	1ae2      	subs	r2, r4, r3
   1284e:	496f      	ldr	r1, [pc, #444]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   12850:	0003      	movs	r3, r0
   12852:	3358      	adds	r3, #88	; 0x58
   12854:	009b      	lsls	r3, r3, #2
   12856:	18cb      	adds	r3, r1, r3
   12858:	3309      	adds	r3, #9
   1285a:	21ff      	movs	r1, #255	; 0xff
   1285c:	4011      	ands	r1, r2
   1285e:	000c      	movs	r4, r1
   12860:	7819      	ldrb	r1, [r3, #0]
   12862:	2000      	movs	r0, #0
   12864:	4001      	ands	r1, r0
   12866:	1c08      	adds	r0, r1, #0
   12868:	1c21      	adds	r1, r4, #0
   1286a:	4301      	orrs	r1, r0
   1286c:	7019      	strb	r1, [r3, #0]
   1286e:	0a11      	lsrs	r1, r2, #8
   12870:	20ff      	movs	r0, #255	; 0xff
   12872:	4001      	ands	r1, r0
   12874:	000c      	movs	r4, r1
   12876:	7859      	ldrb	r1, [r3, #1]
   12878:	2000      	movs	r0, #0
   1287a:	4001      	ands	r1, r0
   1287c:	1c08      	adds	r0, r1, #0
   1287e:	1c21      	adds	r1, r4, #0
   12880:	4301      	orrs	r1, r0
   12882:	7059      	strb	r1, [r3, #1]
   12884:	0c11      	lsrs	r1, r2, #16
   12886:	20ff      	movs	r0, #255	; 0xff
   12888:	4001      	ands	r1, r0
   1288a:	000c      	movs	r4, r1
   1288c:	7899      	ldrb	r1, [r3, #2]
   1288e:	2000      	movs	r0, #0
   12890:	4001      	ands	r1, r0
   12892:	1c08      	adds	r0, r1, #0
   12894:	1c21      	adds	r1, r4, #0
   12896:	4301      	orrs	r1, r0
   12898:	7099      	strb	r1, [r3, #2]
   1289a:	0e10      	lsrs	r0, r2, #24
   1289c:	78da      	ldrb	r2, [r3, #3]
   1289e:	2100      	movs	r1, #0
   128a0:	400a      	ands	r2, r1
   128a2:	1c11      	adds	r1, r2, #0
   128a4:	1c02      	adds	r2, r0, #0
   128a6:	430a      	orrs	r2, r1
   128a8:	70da      	strb	r2, [r3, #3]
   128aa:	e017      	b.n	128dc <LBTChannelPauseCallback+0x198>
            }
            else
            {
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
   128ac:	2312      	movs	r3, #18
   128ae:	18fb      	adds	r3, r7, r3
   128b0:	781b      	ldrb	r3, [r3, #0]
   128b2:	4a56      	ldr	r2, [pc, #344]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   128b4:	3358      	adds	r3, #88	; 0x58
   128b6:	009b      	lsls	r3, r3, #2
   128b8:	18d3      	adds	r3, r2, r3
   128ba:	3309      	adds	r3, #9
   128bc:	781a      	ldrb	r2, [r3, #0]
   128be:	2100      	movs	r1, #0
   128c0:	400a      	ands	r2, r1
   128c2:	701a      	strb	r2, [r3, #0]
   128c4:	785a      	ldrb	r2, [r3, #1]
   128c6:	2100      	movs	r1, #0
   128c8:	400a      	ands	r2, r1
   128ca:	705a      	strb	r2, [r3, #1]
   128cc:	789a      	ldrb	r2, [r3, #2]
   128ce:	2100      	movs	r1, #0
   128d0:	400a      	ands	r2, r1
   128d2:	709a      	strb	r2, [r3, #2]
   128d4:	78da      	ldrb	r2, [r3, #3]
   128d6:	2100      	movs	r1, #0
   128d8:	400a      	ands	r2, r1
   128da:	70da      	strb	r2, [r3, #3]
            }
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
   128dc:	2312      	movs	r3, #18
   128de:	18fb      	adds	r3, r7, r3
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	4a4a      	ldr	r2, [pc, #296]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   128e4:	3358      	adds	r3, #88	; 0x58
   128e6:	009b      	lsls	r3, r3, #2
   128e8:	18d1      	adds	r1, r2, r3
   128ea:	7a49      	ldrb	r1, [r1, #9]
   128ec:	18d0      	adds	r0, r2, r3
   128ee:	7a80      	ldrb	r0, [r0, #10]
   128f0:	0200      	lsls	r0, r0, #8
   128f2:	4301      	orrs	r1, r0
   128f4:	18d0      	adds	r0, r2, r3
   128f6:	7ac0      	ldrb	r0, [r0, #11]
   128f8:	0400      	lsls	r0, r0, #16
   128fa:	4301      	orrs	r1, r0
   128fc:	18d3      	adds	r3, r2, r3
   128fe:	7b1b      	ldrb	r3, [r3, #12]
   12900:	061b      	lsls	r3, r3, #24
   12902:	430b      	orrs	r3, r1
   12904:	001a      	movs	r2, r3
   12906:	697b      	ldr	r3, [r7, #20]
   12908:	429a      	cmp	r2, r3
   1290a:	d82d      	bhi.n	12968 <LBTChannelPauseCallback+0x224>
   1290c:	2312      	movs	r3, #18
   1290e:	18fb      	adds	r3, r7, r3
   12910:	781b      	ldrb	r3, [r3, #0]
   12912:	4a3e      	ldr	r2, [pc, #248]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   12914:	3358      	adds	r3, #88	; 0x58
   12916:	009b      	lsls	r3, r3, #2
   12918:	18d1      	adds	r1, r2, r3
   1291a:	7a49      	ldrb	r1, [r1, #9]
   1291c:	18d0      	adds	r0, r2, r3
   1291e:	7a80      	ldrb	r0, [r0, #10]
   12920:	0200      	lsls	r0, r0, #8
   12922:	4301      	orrs	r1, r0
   12924:	18d0      	adds	r0, r2, r3
   12926:	7ac0      	ldrb	r0, [r0, #11]
   12928:	0400      	lsls	r0, r0, #16
   1292a:	4301      	orrs	r1, r0
   1292c:	18d3      	adds	r3, r2, r3
   1292e:	7b1b      	ldrb	r3, [r3, #12]
   12930:	061b      	lsls	r3, r3, #24
   12932:	430b      	orrs	r3, r1
   12934:	d018      	beq.n	12968 <LBTChannelPauseCallback+0x224>
            {
                minim  = RegParams.cmnParams.paramsType2.channelTimer[i];
   12936:	2312      	movs	r3, #18
   12938:	18fb      	adds	r3, r7, r3
   1293a:	781b      	ldrb	r3, [r3, #0]
   1293c:	4a33      	ldr	r2, [pc, #204]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   1293e:	3358      	adds	r3, #88	; 0x58
   12940:	009b      	lsls	r3, r3, #2
   12942:	18d1      	adds	r1, r2, r3
   12944:	7a49      	ldrb	r1, [r1, #9]
   12946:	18d0      	adds	r0, r2, r3
   12948:	7a80      	ldrb	r0, [r0, #10]
   1294a:	0200      	lsls	r0, r0, #8
   1294c:	4301      	orrs	r1, r0
   1294e:	18d0      	adds	r0, r2, r3
   12950:	7ac0      	ldrb	r0, [r0, #11]
   12952:	0400      	lsls	r0, r0, #16
   12954:	4301      	orrs	r1, r0
   12956:	18d3      	adds	r3, r2, r3
   12958:	7b1b      	ldrb	r3, [r3, #12]
   1295a:	061b      	lsls	r3, r3, #24
   1295c:	430b      	orrs	r3, r1
   1295e:	617b      	str	r3, [r7, #20]
                found = 1;
   12960:	2313      	movs	r3, #19
   12962:	18fb      	adds	r3, r7, r3
   12964:	2201      	movs	r2, #1
   12966:	701a      	strb	r2, [r3, #0]
    for (i=0; i < RegParams.maxChannels; i++)
   12968:	2312      	movs	r3, #18
   1296a:	18fb      	adds	r3, r7, r3
   1296c:	781a      	ldrb	r2, [r3, #0]
   1296e:	2312      	movs	r3, #18
   12970:	18fb      	adds	r3, r7, r3
   12972:	3201      	adds	r2, #1
   12974:	701a      	strb	r2, [r3, #0]
   12976:	2312      	movs	r3, #18
   12978:	18fb      	adds	r3, r7, r3
   1297a:	781b      	ldrb	r3, [r3, #0]
   1297c:	4a23      	ldr	r2, [pc, #140]	; (12a0c <LBTChannelPauseCallback+0x2c8>)
   1297e:	212a      	movs	r1, #42	; 0x2a
   12980:	5652      	ldrsb	r2, [r2, r1]
   12982:	4293      	cmp	r3, r2
   12984:	da00      	bge.n	12988 <LBTChannelPauseCallback+0x244>
   12986:	e6f1      	b.n	1276c <LBTChannelPauseCallback+0x28>
            }
        }
    }
    if ( found == 1 )
   12988:	2313      	movs	r3, #19
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	2b00      	cmp	r3, #0
   12990:	d036      	beq.n	12a00 <LBTChannelPauseCallback+0x2bc>
    {
        pLBTTimer->lastTimerValue = minim;
   12992:	68fb      	ldr	r3, [r7, #12]
   12994:	2214      	movs	r2, #20
   12996:	18ba      	adds	r2, r7, r2
   12998:	7810      	ldrb	r0, [r2, #0]
   1299a:	781a      	ldrb	r2, [r3, #0]
   1299c:	2100      	movs	r1, #0
   1299e:	400a      	ands	r2, r1
   129a0:	1c11      	adds	r1, r2, #0
   129a2:	1c02      	adds	r2, r0, #0
   129a4:	430a      	orrs	r2, r1
   129a6:	701a      	strb	r2, [r3, #0]
   129a8:	2215      	movs	r2, #21
   129aa:	18ba      	adds	r2, r7, r2
   129ac:	7810      	ldrb	r0, [r2, #0]
   129ae:	785a      	ldrb	r2, [r3, #1]
   129b0:	2100      	movs	r1, #0
   129b2:	400a      	ands	r2, r1
   129b4:	1c11      	adds	r1, r2, #0
   129b6:	1c02      	adds	r2, r0, #0
   129b8:	430a      	orrs	r2, r1
   129ba:	705a      	strb	r2, [r3, #1]
   129bc:	2216      	movs	r2, #22
   129be:	18ba      	adds	r2, r7, r2
   129c0:	7810      	ldrb	r0, [r2, #0]
   129c2:	789a      	ldrb	r2, [r3, #2]
   129c4:	2100      	movs	r1, #0
   129c6:	400a      	ands	r2, r1
   129c8:	1c11      	adds	r1, r2, #0
   129ca:	1c02      	adds	r2, r0, #0
   129cc:	430a      	orrs	r2, r1
   129ce:	709a      	strb	r2, [r3, #2]
   129d0:	2217      	movs	r2, #23
   129d2:	18ba      	adds	r2, r7, r2
   129d4:	7810      	ldrb	r0, [r2, #0]
   129d6:	78da      	ldrb	r2, [r3, #3]
   129d8:	2100      	movs	r1, #0
   129da:	400a      	ands	r2, r1
   129dc:	1c11      	adds	r1, r2, #0
   129de:	1c02      	adds	r2, r0, #0
   129e0:	430a      	orrs	r2, r1
   129e2:	70da      	strb	r2, [r3, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
   129e4:	68fb      	ldr	r3, [r7, #12]
   129e6:	7918      	ldrb	r0, [r3, #4]
   129e8:	697b      	ldr	r3, [r7, #20]
   129ea:	22fa      	movs	r2, #250	; 0xfa
   129ec:	0092      	lsls	r2, r2, #2
   129ee:	435a      	muls	r2, r3
   129f0:	0011      	movs	r1, r2
   129f2:	4a07      	ldr	r2, [pc, #28]	; (12a10 <LBTChannelPauseCallback+0x2cc>)
   129f4:	2300      	movs	r3, #0
   129f6:	9300      	str	r3, [sp, #0]
   129f8:	0013      	movs	r3, r2
   129fa:	2200      	movs	r2, #0
   129fc:	4c05      	ldr	r4, [pc, #20]	; (12a14 <LBTChannelPauseCallback+0x2d0>)
   129fe:	47a0      	blx	r4
    }
}
   12a00:	46c0      	nop			; (mov r8, r8)
   12a02:	46bd      	mov	sp, r7
   12a04:	b007      	add	sp, #28
   12a06:	bd90      	pop	{r4, r7, pc}
   12a08:	20001651 	.word	0x20001651
   12a0c:	200014a8 	.word	0x200014a8
   12a10:	00012745 	.word	0x00012745
   12a14:	000159bd 	.word	0x000159bd

00012a18 <setLBTTimer>:


static StackRetStatus_t setLBTTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
   12a18:	b590      	push	{r4, r7, lr}
   12a1a:	b08b      	sub	sp, #44	; 0x2c
   12a1c:	af02      	add	r7, sp, #8
   12a1e:	0002      	movs	r2, r0
   12a20:	6039      	str	r1, [r7, #0]
   12a22:	1dfb      	adds	r3, r7, #7
   12a24:	701a      	strb	r2, [r3, #0]
    bool found = 0;
   12a26:	231f      	movs	r3, #31
   12a28:	18fb      	adds	r3, r7, r3
   12a2a:	2200      	movs	r2, #0
   12a2c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
   12a2e:	2300      	movs	r3, #0
   12a30:	61bb      	str	r3, [r7, #24]
   12a32:	2301      	movs	r3, #1
   12a34:	425b      	negs	r3, r3
   12a36:	617b      	str	r3, [r7, #20]
	LBTTimer_t *pLBTTimer;

    i = RegParams.lastUsedChannelIndex;
   12a38:	231e      	movs	r3, #30
   12a3a:	18fb      	adds	r3, r7, r3
   12a3c:	4ad6      	ldr	r2, [pc, #856]	; (12d98 <setLBTTimer+0x380>)
   12a3e:	2130      	movs	r1, #48	; 0x30
   12a40:	5c52      	ldrb	r2, [r2, r1]
   12a42:	701a      	strb	r2, [r3, #0]
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
   12a44:	4bd5      	ldr	r3, [pc, #852]	; (12d9c <setLBTTimer+0x384>)
   12a46:	613b      	str	r3, [r7, #16]
	
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
   12a48:	231e      	movs	r3, #30
   12a4a:	18fb      	adds	r3, r7, r3
   12a4c:	781b      	ldrb	r3, [r3, #0]
   12a4e:	4ad2      	ldr	r2, [pc, #840]	; (12d98 <setLBTTimer+0x380>)
   12a50:	3358      	adds	r3, #88	; 0x58
   12a52:	009b      	lsls	r3, r3, #2
   12a54:	18d3      	adds	r3, r2, r3
   12a56:	3309      	adds	r3, #9
   12a58:	781a      	ldrb	r2, [r3, #0]
   12a5a:	2100      	movs	r1, #0
   12a5c:	400a      	ands	r2, r1
   12a5e:	1c11      	adds	r1, r2, #0
   12a60:	2232      	movs	r2, #50	; 0x32
   12a62:	430a      	orrs	r2, r1
   12a64:	701a      	strb	r2, [r3, #0]
   12a66:	785a      	ldrb	r2, [r3, #1]
   12a68:	2100      	movs	r1, #0
   12a6a:	400a      	ands	r2, r1
   12a6c:	705a      	strb	r2, [r3, #1]
   12a6e:	789a      	ldrb	r2, [r3, #2]
   12a70:	2100      	movs	r1, #0
   12a72:	400a      	ands	r2, r1
   12a74:	709a      	strb	r2, [r3, #2]
   12a76:	78da      	ldrb	r2, [r3, #3]
   12a78:	2100      	movs	r1, #0
   12a7a:	400a      	ands	r2, r1
   12a7c:	70da      	strb	r2, [r3, #3]
	
	if(SwTimerIsRunning(pLBTTimer->timerId))
   12a7e:	693b      	ldr	r3, [r7, #16]
   12a80:	791b      	ldrb	r3, [r3, #4]
   12a82:	0018      	movs	r0, r3
   12a84:	4bc6      	ldr	r3, [pc, #792]	; (12da0 <setLBTTimer+0x388>)
   12a86:	4798      	blx	r3
   12a88:	1e03      	subs	r3, r0, #0
   12a8a:	d020      	beq.n	12ace <setLBTTimer+0xb6>
	{
		SwTimerStop(pLBTTimer->timerId);
   12a8c:	693b      	ldr	r3, [r7, #16]
   12a8e:	791b      	ldrb	r3, [r3, #4]
   12a90:	0018      	movs	r0, r3
   12a92:	4bc4      	ldr	r3, [pc, #784]	; (12da4 <setLBTTimer+0x38c>)
   12a94:	4798      	blx	r3
		
		ticks = SwTimerReadValue(pLBTTimer->timerId);
   12a96:	693b      	ldr	r3, [r7, #16]
   12a98:	791b      	ldrb	r3, [r3, #4]
   12a9a:	0018      	movs	r0, r3
   12a9c:	4bc2      	ldr	r3, [pc, #776]	; (12da8 <setLBTTimer+0x390>)
   12a9e:	4798      	blx	r3
   12aa0:	0003      	movs	r3, r0
   12aa2:	60fb      	str	r3, [r7, #12]
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
   12aa4:	693b      	ldr	r3, [r7, #16]
   12aa6:	781a      	ldrb	r2, [r3, #0]
   12aa8:	7859      	ldrb	r1, [r3, #1]
   12aaa:	0209      	lsls	r1, r1, #8
   12aac:	430a      	orrs	r2, r1
   12aae:	7899      	ldrb	r1, [r3, #2]
   12ab0:	0409      	lsls	r1, r1, #16
   12ab2:	430a      	orrs	r2, r1
   12ab4:	78db      	ldrb	r3, [r3, #3]
   12ab6:	061b      	lsls	r3, r3, #24
   12ab8:	4313      	orrs	r3, r2
   12aba:	001c      	movs	r4, r3
   12abc:	68f8      	ldr	r0, [r7, #12]
   12abe:	4bbb      	ldr	r3, [pc, #748]	; (12dac <setLBTTimer+0x394>)
   12ac0:	22fa      	movs	r2, #250	; 0xfa
   12ac2:	0091      	lsls	r1, r2, #2
   12ac4:	4798      	blx	r3
   12ac6:	0003      	movs	r3, r0
   12ac8:	1ae3      	subs	r3, r4, r3
   12aca:	61bb      	str	r3, [r7, #24]
   12acc:	e018      	b.n	12b00 <setLBTTimer+0xe8>
	}
	else
	{
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
   12ace:	231e      	movs	r3, #30
   12ad0:	18fb      	adds	r3, r7, r3
   12ad2:	781b      	ldrb	r3, [r3, #0]
   12ad4:	4ab0      	ldr	r2, [pc, #704]	; (12d98 <setLBTTimer+0x380>)
   12ad6:	3358      	adds	r3, #88	; 0x58
   12ad8:	009b      	lsls	r3, r3, #2
   12ada:	18d1      	adds	r1, r2, r3
   12adc:	7a49      	ldrb	r1, [r1, #9]
   12ade:	18d0      	adds	r0, r2, r3
   12ae0:	7a80      	ldrb	r0, [r0, #10]
   12ae2:	0200      	lsls	r0, r0, #8
   12ae4:	4301      	orrs	r1, r0
   12ae6:	18d0      	adds	r0, r2, r3
   12ae8:	7ac0      	ldrb	r0, [r0, #11]
   12aea:	0400      	lsls	r0, r0, #16
   12aec:	4301      	orrs	r1, r0
   12aee:	18d3      	adds	r3, r2, r3
   12af0:	7b1b      	ldrb	r3, [r3, #12]
   12af2:	061b      	lsls	r3, r3, #24
   12af4:	430b      	orrs	r3, r1
   12af6:	617b      	str	r3, [r7, #20]
		found = 1;
   12af8:	231f      	movs	r3, #31
   12afa:	18fb      	adds	r3, r7, r3
   12afc:	2201      	movs	r2, #1
   12afe:	701a      	strb	r2, [r3, #0]
	}
	
	for(i = 0; i < RegParams.maxChannels; i++)
   12b00:	231e      	movs	r3, #30
   12b02:	18fb      	adds	r3, r7, r3
   12b04:	2200      	movs	r2, #0
   12b06:	701a      	strb	r2, [r3, #0]
   12b08:	e0f9      	b.n	12cfe <setLBTTimer+0x2e6>
	{
		if(i != RegParams.lastUsedChannelIndex)
   12b0a:	4ba3      	ldr	r3, [pc, #652]	; (12d98 <setLBTTimer+0x380>)
   12b0c:	2230      	movs	r2, #48	; 0x30
   12b0e:	5c9b      	ldrb	r3, [r3, r2]
   12b10:	221e      	movs	r2, #30
   12b12:	18ba      	adds	r2, r7, r2
   12b14:	7812      	ldrb	r2, [r2, #0]
   12b16:	429a      	cmp	r2, r3
   12b18:	d100      	bne.n	12b1c <setLBTTimer+0x104>
   12b1a:	e0e9      	b.n	12cf0 <setLBTTimer+0x2d8>
		{
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
   12b1c:	4b9e      	ldr	r3, [pc, #632]	; (12d98 <setLBTTimer+0x380>)
   12b1e:	791a      	ldrb	r2, [r3, #4]
   12b20:	7959      	ldrb	r1, [r3, #5]
   12b22:	0209      	lsls	r1, r1, #8
   12b24:	430a      	orrs	r2, r1
   12b26:	7999      	ldrb	r1, [r3, #6]
   12b28:	0409      	lsls	r1, r1, #16
   12b2a:	430a      	orrs	r2, r1
   12b2c:	79db      	ldrb	r3, [r3, #7]
   12b2e:	061b      	lsls	r3, r3, #24
   12b30:	4313      	orrs	r3, r2
   12b32:	001a      	movs	r2, r3
   12b34:	231e      	movs	r3, #30
   12b36:	18fb      	adds	r3, r7, r3
   12b38:	781b      	ldrb	r3, [r3, #0]
   12b3a:	005b      	lsls	r3, r3, #1
   12b3c:	18d3      	adds	r3, r2, r3
   12b3e:	781b      	ldrb	r3, [r3, #0]
   12b40:	2b00      	cmp	r3, #0
   12b42:	d100      	bne.n	12b46 <setLBTTimer+0x12e>
   12b44:	e0d4      	b.n	12cf0 <setLBTTimer+0x2d8>
   12b46:	231e      	movs	r3, #30
   12b48:	18fb      	adds	r3, r7, r3
   12b4a:	781b      	ldrb	r3, [r3, #0]
   12b4c:	4a92      	ldr	r2, [pc, #584]	; (12d98 <setLBTTimer+0x380>)
   12b4e:	3358      	adds	r3, #88	; 0x58
   12b50:	009b      	lsls	r3, r3, #2
   12b52:	18d1      	adds	r1, r2, r3
   12b54:	7a49      	ldrb	r1, [r1, #9]
   12b56:	18d0      	adds	r0, r2, r3
   12b58:	7a80      	ldrb	r0, [r0, #10]
   12b5a:	0200      	lsls	r0, r0, #8
   12b5c:	4301      	orrs	r1, r0
   12b5e:	18d0      	adds	r0, r2, r3
   12b60:	7ac0      	ldrb	r0, [r0, #11]
   12b62:	0400      	lsls	r0, r0, #16
   12b64:	4301      	orrs	r1, r0
   12b66:	18d3      	adds	r3, r2, r3
   12b68:	7b1b      	ldrb	r3, [r3, #12]
   12b6a:	061b      	lsls	r3, r3, #24
   12b6c:	430b      	orrs	r3, r1
   12b6e:	d100      	bne.n	12b72 <setLBTTimer+0x15a>
   12b70:	e0be      	b.n	12cf0 <setLBTTimer+0x2d8>
			{
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
   12b72:	231e      	movs	r3, #30
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	781b      	ldrb	r3, [r3, #0]
   12b78:	4a87      	ldr	r2, [pc, #540]	; (12d98 <setLBTTimer+0x380>)
   12b7a:	3358      	adds	r3, #88	; 0x58
   12b7c:	009b      	lsls	r3, r3, #2
   12b7e:	18d1      	adds	r1, r2, r3
   12b80:	7a49      	ldrb	r1, [r1, #9]
   12b82:	18d0      	adds	r0, r2, r3
   12b84:	7a80      	ldrb	r0, [r0, #10]
   12b86:	0200      	lsls	r0, r0, #8
   12b88:	4301      	orrs	r1, r0
   12b8a:	18d0      	adds	r0, r2, r3
   12b8c:	7ac0      	ldrb	r0, [r0, #11]
   12b8e:	0400      	lsls	r0, r0, #16
   12b90:	4301      	orrs	r1, r0
   12b92:	18d3      	adds	r3, r2, r3
   12b94:	7b1b      	ldrb	r3, [r3, #12]
   12b96:	061b      	lsls	r3, r3, #24
   12b98:	430b      	orrs	r3, r1
   12b9a:	001a      	movs	r2, r3
   12b9c:	69bb      	ldr	r3, [r7, #24]
   12b9e:	429a      	cmp	r2, r3
   12ba0:	d948      	bls.n	12c34 <setLBTTimer+0x21c>
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
   12ba2:	231e      	movs	r3, #30
   12ba4:	18fb      	adds	r3, r7, r3
   12ba6:	7818      	ldrb	r0, [r3, #0]
   12ba8:	231e      	movs	r3, #30
   12baa:	18fb      	adds	r3, r7, r3
   12bac:	781b      	ldrb	r3, [r3, #0]
   12bae:	4a7a      	ldr	r2, [pc, #488]	; (12d98 <setLBTTimer+0x380>)
   12bb0:	3358      	adds	r3, #88	; 0x58
   12bb2:	009b      	lsls	r3, r3, #2
   12bb4:	18d1      	adds	r1, r2, r3
   12bb6:	7a49      	ldrb	r1, [r1, #9]
   12bb8:	18d4      	adds	r4, r2, r3
   12bba:	7aa4      	ldrb	r4, [r4, #10]
   12bbc:	0224      	lsls	r4, r4, #8
   12bbe:	4321      	orrs	r1, r4
   12bc0:	18d4      	adds	r4, r2, r3
   12bc2:	7ae4      	ldrb	r4, [r4, #11]
   12bc4:	0424      	lsls	r4, r4, #16
   12bc6:	4321      	orrs	r1, r4
   12bc8:	18d3      	adds	r3, r2, r3
   12bca:	7b1b      	ldrb	r3, [r3, #12]
   12bcc:	061b      	lsls	r3, r3, #24
   12bce:	430b      	orrs	r3, r1
   12bd0:	001a      	movs	r2, r3
   12bd2:	69bb      	ldr	r3, [r7, #24]
   12bd4:	1ad2      	subs	r2, r2, r3
   12bd6:	4970      	ldr	r1, [pc, #448]	; (12d98 <setLBTTimer+0x380>)
   12bd8:	0003      	movs	r3, r0
   12bda:	3358      	adds	r3, #88	; 0x58
   12bdc:	009b      	lsls	r3, r3, #2
   12bde:	18cb      	adds	r3, r1, r3
   12be0:	3309      	adds	r3, #9
   12be2:	21ff      	movs	r1, #255	; 0xff
   12be4:	4011      	ands	r1, r2
   12be6:	000c      	movs	r4, r1
   12be8:	7819      	ldrb	r1, [r3, #0]
   12bea:	2000      	movs	r0, #0
   12bec:	4001      	ands	r1, r0
   12bee:	1c08      	adds	r0, r1, #0
   12bf0:	1c21      	adds	r1, r4, #0
   12bf2:	4301      	orrs	r1, r0
   12bf4:	7019      	strb	r1, [r3, #0]
   12bf6:	0a11      	lsrs	r1, r2, #8
   12bf8:	20ff      	movs	r0, #255	; 0xff
   12bfa:	4001      	ands	r1, r0
   12bfc:	000c      	movs	r4, r1
   12bfe:	7859      	ldrb	r1, [r3, #1]
   12c00:	2000      	movs	r0, #0
   12c02:	4001      	ands	r1, r0
   12c04:	1c08      	adds	r0, r1, #0
   12c06:	1c21      	adds	r1, r4, #0
   12c08:	4301      	orrs	r1, r0
   12c0a:	7059      	strb	r1, [r3, #1]
   12c0c:	0c11      	lsrs	r1, r2, #16
   12c0e:	20ff      	movs	r0, #255	; 0xff
   12c10:	4001      	ands	r1, r0
   12c12:	000c      	movs	r4, r1
   12c14:	7899      	ldrb	r1, [r3, #2]
   12c16:	2000      	movs	r0, #0
   12c18:	4001      	ands	r1, r0
   12c1a:	1c08      	adds	r0, r1, #0
   12c1c:	1c21      	adds	r1, r4, #0
   12c1e:	4301      	orrs	r1, r0
   12c20:	7099      	strb	r1, [r3, #2]
   12c22:	0e10      	lsrs	r0, r2, #24
   12c24:	78da      	ldrb	r2, [r3, #3]
   12c26:	2100      	movs	r1, #0
   12c28:	400a      	ands	r2, r1
   12c2a:	1c11      	adds	r1, r2, #0
   12c2c:	1c02      	adds	r2, r0, #0
   12c2e:	430a      	orrs	r2, r1
   12c30:	70da      	strb	r2, [r3, #3]
   12c32:	e017      	b.n	12c64 <setLBTTimer+0x24c>
				}
				else
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
   12c34:	231e      	movs	r3, #30
   12c36:	18fb      	adds	r3, r7, r3
   12c38:	781b      	ldrb	r3, [r3, #0]
   12c3a:	4a57      	ldr	r2, [pc, #348]	; (12d98 <setLBTTimer+0x380>)
   12c3c:	3358      	adds	r3, #88	; 0x58
   12c3e:	009b      	lsls	r3, r3, #2
   12c40:	18d3      	adds	r3, r2, r3
   12c42:	3309      	adds	r3, #9
   12c44:	781a      	ldrb	r2, [r3, #0]
   12c46:	2100      	movs	r1, #0
   12c48:	400a      	ands	r2, r1
   12c4a:	701a      	strb	r2, [r3, #0]
   12c4c:	785a      	ldrb	r2, [r3, #1]
   12c4e:	2100      	movs	r1, #0
   12c50:	400a      	ands	r2, r1
   12c52:	705a      	strb	r2, [r3, #1]
   12c54:	789a      	ldrb	r2, [r3, #2]
   12c56:	2100      	movs	r1, #0
   12c58:	400a      	ands	r2, r1
   12c5a:	709a      	strb	r2, [r3, #2]
   12c5c:	78da      	ldrb	r2, [r3, #3]
   12c5e:	2100      	movs	r1, #0
   12c60:	400a      	ands	r2, r1
   12c62:	70da      	strb	r2, [r3, #3]
				}
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
   12c64:	231e      	movs	r3, #30
   12c66:	18fb      	adds	r3, r7, r3
   12c68:	781b      	ldrb	r3, [r3, #0]
   12c6a:	4a4b      	ldr	r2, [pc, #300]	; (12d98 <setLBTTimer+0x380>)
   12c6c:	3358      	adds	r3, #88	; 0x58
   12c6e:	009b      	lsls	r3, r3, #2
   12c70:	18d1      	adds	r1, r2, r3
   12c72:	7a49      	ldrb	r1, [r1, #9]
   12c74:	18d0      	adds	r0, r2, r3
   12c76:	7a80      	ldrb	r0, [r0, #10]
   12c78:	0200      	lsls	r0, r0, #8
   12c7a:	4301      	orrs	r1, r0
   12c7c:	18d0      	adds	r0, r2, r3
   12c7e:	7ac0      	ldrb	r0, [r0, #11]
   12c80:	0400      	lsls	r0, r0, #16
   12c82:	4301      	orrs	r1, r0
   12c84:	18d3      	adds	r3, r2, r3
   12c86:	7b1b      	ldrb	r3, [r3, #12]
   12c88:	061b      	lsls	r3, r3, #24
   12c8a:	430b      	orrs	r3, r1
   12c8c:	001a      	movs	r2, r3
   12c8e:	697b      	ldr	r3, [r7, #20]
   12c90:	429a      	cmp	r2, r3
   12c92:	d82d      	bhi.n	12cf0 <setLBTTimer+0x2d8>
   12c94:	231e      	movs	r3, #30
   12c96:	18fb      	adds	r3, r7, r3
   12c98:	781b      	ldrb	r3, [r3, #0]
   12c9a:	4a3f      	ldr	r2, [pc, #252]	; (12d98 <setLBTTimer+0x380>)
   12c9c:	3358      	adds	r3, #88	; 0x58
   12c9e:	009b      	lsls	r3, r3, #2
   12ca0:	18d1      	adds	r1, r2, r3
   12ca2:	7a49      	ldrb	r1, [r1, #9]
   12ca4:	18d0      	adds	r0, r2, r3
   12ca6:	7a80      	ldrb	r0, [r0, #10]
   12ca8:	0200      	lsls	r0, r0, #8
   12caa:	4301      	orrs	r1, r0
   12cac:	18d0      	adds	r0, r2, r3
   12cae:	7ac0      	ldrb	r0, [r0, #11]
   12cb0:	0400      	lsls	r0, r0, #16
   12cb2:	4301      	orrs	r1, r0
   12cb4:	18d3      	adds	r3, r2, r3
   12cb6:	7b1b      	ldrb	r3, [r3, #12]
   12cb8:	061b      	lsls	r3, r3, #24
   12cba:	430b      	orrs	r3, r1
   12cbc:	d018      	beq.n	12cf0 <setLBTTimer+0x2d8>
				{
					minim = RegParams.cmnParams.paramsType2.channelTimer[i];
   12cbe:	231e      	movs	r3, #30
   12cc0:	18fb      	adds	r3, r7, r3
   12cc2:	781b      	ldrb	r3, [r3, #0]
   12cc4:	4a34      	ldr	r2, [pc, #208]	; (12d98 <setLBTTimer+0x380>)
   12cc6:	3358      	adds	r3, #88	; 0x58
   12cc8:	009b      	lsls	r3, r3, #2
   12cca:	18d1      	adds	r1, r2, r3
   12ccc:	7a49      	ldrb	r1, [r1, #9]
   12cce:	18d0      	adds	r0, r2, r3
   12cd0:	7a80      	ldrb	r0, [r0, #10]
   12cd2:	0200      	lsls	r0, r0, #8
   12cd4:	4301      	orrs	r1, r0
   12cd6:	18d0      	adds	r0, r2, r3
   12cd8:	7ac0      	ldrb	r0, [r0, #11]
   12cda:	0400      	lsls	r0, r0, #16
   12cdc:	4301      	orrs	r1, r0
   12cde:	18d3      	adds	r3, r2, r3
   12ce0:	7b1b      	ldrb	r3, [r3, #12]
   12ce2:	061b      	lsls	r3, r3, #24
   12ce4:	430b      	orrs	r3, r1
   12ce6:	617b      	str	r3, [r7, #20]
					found = 1;
   12ce8:	231f      	movs	r3, #31
   12cea:	18fb      	adds	r3, r7, r3
   12cec:	2201      	movs	r2, #1
   12cee:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < RegParams.maxChannels; i++)
   12cf0:	231e      	movs	r3, #30
   12cf2:	18fb      	adds	r3, r7, r3
   12cf4:	781a      	ldrb	r2, [r3, #0]
   12cf6:	231e      	movs	r3, #30
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	3201      	adds	r2, #1
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	231e      	movs	r3, #30
   12d00:	18fb      	adds	r3, r7, r3
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	4a24      	ldr	r2, [pc, #144]	; (12d98 <setLBTTimer+0x380>)
   12d06:	212a      	movs	r1, #42	; 0x2a
   12d08:	5652      	ldrsb	r2, [r2, r1]
   12d0a:	4293      	cmp	r3, r2
   12d0c:	da00      	bge.n	12d10 <setLBTTimer+0x2f8>
   12d0e:	e6fc      	b.n	12b0a <setLBTTimer+0xf2>
				}
			}
		}
	}
	if((found == 1) && minim)
   12d10:	231f      	movs	r3, #31
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	781b      	ldrb	r3, [r3, #0]
   12d16:	2b00      	cmp	r3, #0
   12d18:	d039      	beq.n	12d8e <setLBTTimer+0x376>
   12d1a:	697b      	ldr	r3, [r7, #20]
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	d036      	beq.n	12d8e <setLBTTimer+0x376>
	{
		pLBTTimer->lastTimerValue = minim;
   12d20:	693b      	ldr	r3, [r7, #16]
   12d22:	2214      	movs	r2, #20
   12d24:	18ba      	adds	r2, r7, r2
   12d26:	7810      	ldrb	r0, [r2, #0]
   12d28:	781a      	ldrb	r2, [r3, #0]
   12d2a:	2100      	movs	r1, #0
   12d2c:	400a      	ands	r2, r1
   12d2e:	1c11      	adds	r1, r2, #0
   12d30:	1c02      	adds	r2, r0, #0
   12d32:	430a      	orrs	r2, r1
   12d34:	701a      	strb	r2, [r3, #0]
   12d36:	2215      	movs	r2, #21
   12d38:	18ba      	adds	r2, r7, r2
   12d3a:	7810      	ldrb	r0, [r2, #0]
   12d3c:	785a      	ldrb	r2, [r3, #1]
   12d3e:	2100      	movs	r1, #0
   12d40:	400a      	ands	r2, r1
   12d42:	1c11      	adds	r1, r2, #0
   12d44:	1c02      	adds	r2, r0, #0
   12d46:	430a      	orrs	r2, r1
   12d48:	705a      	strb	r2, [r3, #1]
   12d4a:	2216      	movs	r2, #22
   12d4c:	18ba      	adds	r2, r7, r2
   12d4e:	7810      	ldrb	r0, [r2, #0]
   12d50:	789a      	ldrb	r2, [r3, #2]
   12d52:	2100      	movs	r1, #0
   12d54:	400a      	ands	r2, r1
   12d56:	1c11      	adds	r1, r2, #0
   12d58:	1c02      	adds	r2, r0, #0
   12d5a:	430a      	orrs	r2, r1
   12d5c:	709a      	strb	r2, [r3, #2]
   12d5e:	2217      	movs	r2, #23
   12d60:	18ba      	adds	r2, r7, r2
   12d62:	7810      	ldrb	r0, [r2, #0]
   12d64:	78da      	ldrb	r2, [r3, #3]
   12d66:	2100      	movs	r1, #0
   12d68:	400a      	ands	r2, r1
   12d6a:	1c11      	adds	r1, r2, #0
   12d6c:	1c02      	adds	r2, r0, #0
   12d6e:	430a      	orrs	r2, r1
   12d70:	70da      	strb	r2, [r3, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
   12d72:	693b      	ldr	r3, [r7, #16]
   12d74:	7918      	ldrb	r0, [r3, #4]
   12d76:	697b      	ldr	r3, [r7, #20]
   12d78:	22fa      	movs	r2, #250	; 0xfa
   12d7a:	0092      	lsls	r2, r2, #2
   12d7c:	435a      	muls	r2, r3
   12d7e:	0011      	movs	r1, r2
   12d80:	4a0b      	ldr	r2, [pc, #44]	; (12db0 <setLBTTimer+0x398>)
   12d82:	2300      	movs	r3, #0
   12d84:	9300      	str	r3, [sp, #0]
   12d86:	0013      	movs	r3, r2
   12d88:	2200      	movs	r2, #0
   12d8a:	4c0a      	ldr	r4, [pc, #40]	; (12db4 <setLBTTimer+0x39c>)
   12d8c:	47a0      	blx	r4
	}
	return LORAWAN_SUCCESS;
   12d8e:	2308      	movs	r3, #8
}
   12d90:	0018      	movs	r0, r3
   12d92:	46bd      	mov	sp, r7
   12d94:	b009      	add	sp, #36	; 0x24
   12d96:	bd90      	pop	{r4, r7, pc}
   12d98:	200014a8 	.word	0x200014a8
   12d9c:	20001651 	.word	0x20001651
   12da0:	00015a89 	.word	0x00015a89
   12da4:	00015cfd 	.word	0x00015cfd
   12da8:	00015ab9 	.word	0x00015ab9
   12dac:	00021069 	.word	0x00021069
   12db0:	00012745 	.word	0x00012745
   12db4:	000159bd 	.word	0x000159bd

00012db8 <LORAREG_SupportedBands>:
#endif

StackRetStatus_t LORAREG_SupportedBands(uint16_t *bands)
{
   12db8:	b580      	push	{r7, lr}
   12dba:	b084      	sub	sp, #16
   12dbc:	af00      	add	r7, sp, #0
   12dbe:	6078      	str	r0, [r7, #4]
	StackRetStatus_t  status = LORAWAN_SUCCESS;
   12dc0:	230f      	movs	r3, #15
   12dc2:	18fb      	adds	r3, r7, r3
   12dc4:	2208      	movs	r2, #8
   12dc6:	701a      	strb	r2, [r3, #0]
	uint16_t value = 0;
   12dc8:	230c      	movs	r3, #12
   12dca:	18fb      	adds	r3, r7, r3
   12dcc:	2200      	movs	r2, #0
   12dce:	801a      	strh	r2, [r3, #0]
	
	value  = value |
   12dd0:	230c      	movs	r3, #12
   12dd2:	18fb      	adds	r3, r7, r3
   12dd4:	2201      	movs	r2, #1
   12dd6:	4252      	negs	r2, r2
   12dd8:	801a      	strh	r2, [r3, #0]
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
   12dda:	687b      	ldr	r3, [r7, #4]
   12ddc:	220c      	movs	r2, #12
   12dde:	18ba      	adds	r2, r7, r2
   12de0:	8812      	ldrh	r2, [r2, #0]
   12de2:	801a      	strh	r2, [r3, #0]
	
	return status;
   12de4:	230f      	movs	r3, #15
   12de6:	18fb      	adds	r3, r7, r3
   12de8:	781b      	ldrb	r3, [r3, #0]
}
   12dea:	0018      	movs	r0, r3
   12dec:	46bd      	mov	sp, r7
   12dee:	b004      	add	sp, #16
   12df0:	bd80      	pop	{r7, pc}
	...

00012df4 <LORAREG_UnInit>:

StackRetStatus_t LORAREG_UnInit(void)
{
   12df4:	b580      	push	{r7, lr}
   12df6:	b082      	sub	sp, #8
   12df8:	af00      	add	r7, sp, #0
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
   12dfa:	1dfb      	adds	r3, r7, #7
   12dfc:	220a      	movs	r2, #10
   12dfe:	701a      	strb	r2, [r3, #0]
	
	StopAllRegSoftwareTimers();
   12e00:	4b11      	ldr	r3, [pc, #68]	; (12e48 <LORAREG_UnInit+0x54>)
   12e02:	4798      	blx	r3

#if (ENABLE_PDS == 1)
	/* Do not reset the mac fild id1 */
	if(RegParams.regParamItems.fileid)
   12e04:	4a11      	ldr	r2, [pc, #68]	; (12e4c <LORAREG_UnInit+0x58>)
   12e06:	2383      	movs	r3, #131	; 0x83
   12e08:	009b      	lsls	r3, r3, #2
   12e0a:	5cd3      	ldrb	r3, [r2, r3]
   12e0c:	2b00      	cmp	r3, #0
   12e0e:	d00e      	beq.n	12e2e <LORAREG_UnInit+0x3a>
	{
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
   12e10:	4a0e      	ldr	r2, [pc, #56]	; (12e4c <LORAREG_UnInit+0x58>)
   12e12:	2383      	movs	r3, #131	; 0x83
   12e14:	009b      	lsls	r3, r3, #2
   12e16:	5cd3      	ldrb	r3, [r2, r3]
   12e18:	0018      	movs	r0, r3
   12e1a:	4b0d      	ldr	r3, [pc, #52]	; (12e50 <LORAREG_UnInit+0x5c>)
   12e1c:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
   12e1e:	4b0b      	ldr	r3, [pc, #44]	; (12e4c <LORAREG_UnInit+0x58>)
   12e20:	222f      	movs	r2, #47	; 0x2f
   12e22:	5c9b      	ldrb	r3, [r3, r2]
   12e24:	2b00      	cmp	r3, #0
   12e26:	d102      	bne.n	12e2e <LORAREG_UnInit+0x3a>
		{
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
   12e28:	200b      	movs	r0, #11
   12e2a:	4b09      	ldr	r3, [pc, #36]	; (12e50 <LORAREG_UnInit+0x5c>)
   12e2c:	4798      	blx	r3
		}
	}
#endif	
	memset(&RegParams,0,sizeof(RegParams_t));
   12e2e:	4a09      	ldr	r2, [pc, #36]	; (12e54 <LORAREG_UnInit+0x60>)
   12e30:	4b06      	ldr	r3, [pc, #24]	; (12e4c <LORAREG_UnInit+0x58>)
   12e32:	2100      	movs	r1, #0
   12e34:	0018      	movs	r0, r3
   12e36:	4b08      	ldr	r3, [pc, #32]	; (12e58 <LORAREG_UnInit+0x64>)
   12e38:	4798      	blx	r3
	
	return result;
   12e3a:	1dfb      	adds	r3, r7, #7
   12e3c:	781b      	ldrb	r3, [r3, #0]
}
   12e3e:	0018      	movs	r0, r3
   12e40:	46bd      	mov	sp, r7
   12e42:	b002      	add	sp, #8
   12e44:	bd80      	pop	{r7, pc}
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	0000f3f5 	.word	0x0000f3f5
   12e4c:	200014a8 	.word	0x200014a8
   12e50:	00014081 	.word	0x00014081
   12e54:	00000215 	.word	0x00000215
   12e58:	000241cd 	.word	0x000241cd

00012e5c <setJoinSuccess>:
 * \retval LORAWAN_SUCCESS for both NA915 and AU915.
 *		   LORAWAN_INVALID_PARAMETER for all other regions
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t setJoinSuccess(LorawanRegionalAttributes_t attr, void *attrInput)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	b084      	sub	sp, #16
   12e60:	af00      	add	r7, sp, #0
   12e62:	0002      	movs	r2, r0
   12e64:	6039      	str	r1, [r7, #0]
   12e66:	1dfb      	adds	r3, r7, #7
   12e68:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t status = LORAWAN_SUCCESS;
   12e6a:	230d      	movs	r3, #13
   12e6c:	18fb      	adds	r3, r7, r3
   12e6e:	2208      	movs	r2, #8
   12e70:	701a      	strb	r2, [r3, #0]
#if (RANDOM_NW_ACQ == 1)
	uint8_t lastUsedSB;
	/* Temporarily making it 8 to disable the remaining channels and after the check, will be changed it to 0 */
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
   12e72:	4a43      	ldr	r2, [pc, #268]	; (12f80 <setJoinSuccess+0x124>)
   12e74:	23ac      	movs	r3, #172	; 0xac
   12e76:	005b      	lsls	r3, r3, #1
   12e78:	5cd3      	ldrb	r3, [r2, r3]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	d104      	bne.n	12e88 <setJoinSuccess+0x2c>
	{
		lastUsedSB = 8;
   12e7e:	230f      	movs	r3, #15
   12e80:	18fb      	adds	r3, r7, r3
   12e82:	2208      	movs	r2, #8
   12e84:	701a      	strb	r2, [r3, #0]
   12e86:	e006      	b.n	12e96 <setJoinSuccess+0x3a>
	}
	else
	{
		lastUsedSB = RegParams.cmnParams.paramsType1.lastUsedSB;
   12e88:	230f      	movs	r3, #15
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	493c      	ldr	r1, [pc, #240]	; (12f80 <setJoinSuccess+0x124>)
   12e8e:	22ac      	movs	r2, #172	; 0xac
   12e90:	0052      	lsls	r2, r2, #1
   12e92:	5c8a      	ldrb	r2, [r1, r2]
   12e94:	701a      	strb	r2, [r3, #0]
	}
		
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   12e96:	230e      	movs	r3, #14
   12e98:	18fb      	adds	r3, r7, r3
   12e9a:	2200      	movs	r2, #0
   12e9c:	701a      	strb	r2, [r3, #0]
   12e9e:	e03f      	b.n	12f20 <setJoinSuccess+0xc4>
	{
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
   12ea0:	230e      	movs	r3, #14
   12ea2:	18fb      	adds	r3, r7, r3
   12ea4:	781b      	ldrb	r3, [r3, #0]
   12ea6:	2b3f      	cmp	r3, #63	; 0x3f
   12ea8:	d812      	bhi.n	12ed0 <setJoinSuccess+0x74>
   12eaa:	230e      	movs	r3, #14
   12eac:	18fb      	adds	r3, r7, r3
   12eae:	781a      	ldrb	r2, [r3, #0]
   12eb0:	230f      	movs	r3, #15
   12eb2:	18fb      	adds	r3, r7, r3
   12eb4:	781b      	ldrb	r3, [r3, #0]
   12eb6:	3b01      	subs	r3, #1
   12eb8:	00db      	lsls	r3, r3, #3
   12eba:	429a      	cmp	r2, r3
   12ebc:	db16      	blt.n	12eec <setJoinSuccess+0x90>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
   12ebe:	230e      	movs	r3, #14
   12ec0:	18fb      	adds	r3, r7, r3
   12ec2:	781a      	ldrb	r2, [r3, #0]
   12ec4:	230f      	movs	r3, #15
   12ec6:	18fb      	adds	r3, r7, r3
   12ec8:	781b      	ldrb	r3, [r3, #0]
   12eca:	00db      	lsls	r3, r3, #3
   12ecc:	429a      	cmp	r2, r3
   12ece:	da0d      	bge.n	12eec <setJoinSuccess+0x90>
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
   12ed0:	230e      	movs	r3, #14
   12ed2:	18fb      	adds	r3, r7, r3
   12ed4:	781b      	ldrb	r3, [r3, #0]
   12ed6:	2b3f      	cmp	r3, #63	; 0x3f
   12ed8:	d91b      	bls.n	12f12 <setJoinSuccess+0xb6>
   12eda:	230e      	movs	r3, #14
   12edc:	18fb      	adds	r3, r7, r3
   12ede:	781a      	ldrb	r2, [r3, #0]
   12ee0:	230f      	movs	r3, #15
   12ee2:	18fb      	adds	r3, r7, r3
   12ee4:	781b      	ldrb	r3, [r3, #0]
   12ee6:	333f      	adds	r3, #63	; 0x3f
   12ee8:	429a      	cmp	r2, r3
   12eea:	d012      	beq.n	12f12 <setJoinSuccess+0xb6>
		{
			RegParams.pChParams[i].status = DISABLED;	
   12eec:	4b24      	ldr	r3, [pc, #144]	; (12f80 <setJoinSuccess+0x124>)
   12eee:	791a      	ldrb	r2, [r3, #4]
   12ef0:	7959      	ldrb	r1, [r3, #5]
   12ef2:	0209      	lsls	r1, r1, #8
   12ef4:	430a      	orrs	r2, r1
   12ef6:	7999      	ldrb	r1, [r3, #6]
   12ef8:	0409      	lsls	r1, r1, #16
   12efa:	430a      	orrs	r2, r1
   12efc:	79db      	ldrb	r3, [r3, #7]
   12efe:	061b      	lsls	r3, r3, #24
   12f00:	4313      	orrs	r3, r2
   12f02:	001a      	movs	r2, r3
   12f04:	230e      	movs	r3, #14
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	005b      	lsls	r3, r3, #1
   12f0c:	18d3      	adds	r3, r2, r3
   12f0e:	2200      	movs	r2, #0
   12f10:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   12f12:	230e      	movs	r3, #14
   12f14:	18fb      	adds	r3, r7, r3
   12f16:	781a      	ldrb	r2, [r3, #0]
   12f18:	230e      	movs	r3, #14
   12f1a:	18fb      	adds	r3, r7, r3
   12f1c:	3201      	adds	r2, #1
   12f1e:	701a      	strb	r2, [r3, #0]
   12f20:	230e      	movs	r3, #14
   12f22:	18fb      	adds	r3, r7, r3
   12f24:	781b      	ldrb	r3, [r3, #0]
   12f26:	2b47      	cmp	r3, #71	; 0x47
   12f28:	d9ba      	bls.n	12ea0 <setJoinSuccess+0x44>
		}
	}
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   12f2a:	4b15      	ldr	r3, [pc, #84]	; (12f80 <setJoinSuccess+0x124>)
   12f2c:	4a15      	ldr	r2, [pc, #84]	; (12f84 <setJoinSuccess+0x128>)
   12f2e:	5c9a      	ldrb	r2, [r3, r2]
   12f30:	2184      	movs	r1, #132	; 0x84
   12f32:	0089      	lsls	r1, r1, #2
   12f34:	5c5b      	ldrb	r3, [r3, r1]
   12f36:	021b      	lsls	r3, r3, #8
   12f38:	4313      	orrs	r3, r2
   12f3a:	b29b      	uxth	r3, r3
   12f3c:	0a1b      	lsrs	r3, r3, #8
   12f3e:	b29a      	uxth	r2, r3
   12f40:	230c      	movs	r3, #12
   12f42:	18fb      	adds	r3, r7, r3
   12f44:	701a      	strb	r2, [r3, #0]
   12f46:	4b0e      	ldr	r3, [pc, #56]	; (12f80 <setJoinSuccess+0x124>)
   12f48:	4a0e      	ldr	r2, [pc, #56]	; (12f84 <setJoinSuccess+0x128>)
   12f4a:	5c9a      	ldrb	r2, [r3, r2]
   12f4c:	2184      	movs	r1, #132	; 0x84
   12f4e:	0089      	lsls	r1, r1, #2
   12f50:	5c5b      	ldrb	r3, [r3, r1]
   12f52:	021b      	lsls	r3, r3, #8
   12f54:	4313      	orrs	r3, r2
   12f56:	b29a      	uxth	r2, r3
   12f58:	230b      	movs	r3, #11
   12f5a:	18fb      	adds	r3, r7, r3
   12f5c:	701a      	strb	r2, [r3, #0]
   12f5e:	230b      	movs	r3, #11
   12f60:	18fb      	adds	r3, r7, r3
   12f62:	781a      	ldrb	r2, [r3, #0]
   12f64:	230c      	movs	r3, #12
   12f66:	18fb      	adds	r3, r7, r3
   12f68:	781b      	ldrb	r3, [r3, #0]
   12f6a:	0011      	movs	r1, r2
   12f6c:	0018      	movs	r0, r3
   12f6e:	4b06      	ldr	r3, [pc, #24]	; (12f88 <setJoinSuccess+0x12c>)
   12f70:	4798      	blx	r3
#endif
#endif
	return status;
   12f72:	230d      	movs	r3, #13
   12f74:	18fb      	adds	r3, r7, r3
   12f76:	781b      	ldrb	r3, [r3, #0]
}
   12f78:	0018      	movs	r0, r3
   12f7a:	46bd      	mov	sp, r7
   12f7c:	b004      	add	sp, #16
   12f7e:	bd80      	pop	{r7, pc}
   12f80:	200014a8 	.word	0x200014a8
   12f84:	0000020f 	.word	0x0000020f
   12f88:	00013b45 	.word	0x00013b45

00012f8c <setEnableAllChs>:

static StackRetStatus_t setEnableAllChs(LorawanRegionalAttributes_t attr, void *attrInput)
{
   12f8c:	b580      	push	{r7, lr}
   12f8e:	b084      	sub	sp, #16
   12f90:	af00      	add	r7, sp, #0
   12f92:	0002      	movs	r2, r0
   12f94:	6039      	str	r1, [r7, #0]
   12f96:	1dfb      	adds	r3, r7, #7
   12f98:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t status = LORAWAN_SUCCESS;
   12f9a:	230e      	movs	r3, #14
   12f9c:	18fb      	adds	r3, r7, r3
   12f9e:	2208      	movs	r2, #8
   12fa0:	701a      	strb	r2, [r3, #0]
#if (RANDOM_NW_ACQ == 1)		
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   12fa2:	230f      	movs	r3, #15
   12fa4:	18fb      	adds	r3, r7, r3
   12fa6:	2200      	movs	r2, #0
   12fa8:	701a      	strb	r2, [r3, #0]
   12faa:	e019      	b.n	12fe0 <setEnableAllChs+0x54>
	{
		RegParams.pChParams[i].status = ENABLED;	
   12fac:	4b38      	ldr	r3, [pc, #224]	; (13090 <setEnableAllChs+0x104>)
   12fae:	791a      	ldrb	r2, [r3, #4]
   12fb0:	7959      	ldrb	r1, [r3, #5]
   12fb2:	0209      	lsls	r1, r1, #8
   12fb4:	430a      	orrs	r2, r1
   12fb6:	7999      	ldrb	r1, [r3, #6]
   12fb8:	0409      	lsls	r1, r1, #16
   12fba:	430a      	orrs	r2, r1
   12fbc:	79db      	ldrb	r3, [r3, #7]
   12fbe:	061b      	lsls	r3, r3, #24
   12fc0:	4313      	orrs	r3, r2
   12fc2:	001a      	movs	r2, r3
   12fc4:	230f      	movs	r3, #15
   12fc6:	18fb      	adds	r3, r7, r3
   12fc8:	781b      	ldrb	r3, [r3, #0]
   12fca:	005b      	lsls	r3, r3, #1
   12fcc:	18d3      	adds	r3, r2, r3
   12fce:	2201      	movs	r2, #1
   12fd0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   12fd2:	230f      	movs	r3, #15
   12fd4:	18fb      	adds	r3, r7, r3
   12fd6:	781a      	ldrb	r2, [r3, #0]
   12fd8:	230f      	movs	r3, #15
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	3201      	adds	r2, #1
   12fde:	701a      	strb	r2, [r3, #0]
   12fe0:	230f      	movs	r3, #15
   12fe2:	18fb      	adds	r3, r7, r3
   12fe4:	781b      	ldrb	r3, [r3, #0]
   12fe6:	2b47      	cmp	r3, #71	; 0x47
   12fe8:	d9e0      	bls.n	12fac <setEnableAllChs+0x20>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
   12fea:	4a29      	ldr	r2, [pc, #164]	; (13090 <setEnableAllChs+0x104>)
   12fec:	23ac      	movs	r3, #172	; 0xac
   12fee:	005b      	lsls	r3, r3, #1
   12ff0:	2100      	movs	r1, #0
   12ff2:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   12ff4:	4b26      	ldr	r3, [pc, #152]	; (13090 <setEnableAllChs+0x104>)
   12ff6:	4a27      	ldr	r2, [pc, #156]	; (13094 <setEnableAllChs+0x108>)
   12ff8:	5c9a      	ldrb	r2, [r3, r2]
   12ffa:	2184      	movs	r1, #132	; 0x84
   12ffc:	0089      	lsls	r1, r1, #2
   12ffe:	5c5b      	ldrb	r3, [r3, r1]
   13000:	021b      	lsls	r3, r3, #8
   13002:	4313      	orrs	r3, r2
   13004:	b29b      	uxth	r3, r3
   13006:	0a1b      	lsrs	r3, r3, #8
   13008:	b29a      	uxth	r2, r3
   1300a:	230d      	movs	r3, #13
   1300c:	18fb      	adds	r3, r7, r3
   1300e:	701a      	strb	r2, [r3, #0]
   13010:	4b1f      	ldr	r3, [pc, #124]	; (13090 <setEnableAllChs+0x104>)
   13012:	4a20      	ldr	r2, [pc, #128]	; (13094 <setEnableAllChs+0x108>)
   13014:	5c9a      	ldrb	r2, [r3, r2]
   13016:	2184      	movs	r1, #132	; 0x84
   13018:	0089      	lsls	r1, r1, #2
   1301a:	5c5b      	ldrb	r3, [r3, r1]
   1301c:	021b      	lsls	r3, r3, #8
   1301e:	4313      	orrs	r3, r2
   13020:	b29a      	uxth	r2, r3
   13022:	230c      	movs	r3, #12
   13024:	18fb      	adds	r3, r7, r3
   13026:	701a      	strb	r2, [r3, #0]
   13028:	230c      	movs	r3, #12
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	781a      	ldrb	r2, [r3, #0]
   1302e:	230d      	movs	r3, #13
   13030:	18fb      	adds	r3, r7, r3
   13032:	781b      	ldrb	r3, [r3, #0]
   13034:	0011      	movs	r1, r2
   13036:	0018      	movs	r0, r3
   13038:	4b17      	ldr	r3, [pc, #92]	; (13098 <setEnableAllChs+0x10c>)
   1303a:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
   1303c:	4b14      	ldr	r3, [pc, #80]	; (13090 <setEnableAllChs+0x104>)
   1303e:	4a17      	ldr	r2, [pc, #92]	; (1309c <setEnableAllChs+0x110>)
   13040:	5c9a      	ldrb	r2, [r3, r2]
   13042:	4917      	ldr	r1, [pc, #92]	; (130a0 <setEnableAllChs+0x114>)
   13044:	5c5b      	ldrb	r3, [r3, r1]
   13046:	021b      	lsls	r3, r3, #8
   13048:	4313      	orrs	r3, r2
   1304a:	b29b      	uxth	r3, r3
   1304c:	0a1b      	lsrs	r3, r3, #8
   1304e:	b29a      	uxth	r2, r3
   13050:	230b      	movs	r3, #11
   13052:	18fb      	adds	r3, r7, r3
   13054:	701a      	strb	r2, [r3, #0]
   13056:	4b0e      	ldr	r3, [pc, #56]	; (13090 <setEnableAllChs+0x104>)
   13058:	4a10      	ldr	r2, [pc, #64]	; (1309c <setEnableAllChs+0x110>)
   1305a:	5c9a      	ldrb	r2, [r3, r2]
   1305c:	4910      	ldr	r1, [pc, #64]	; (130a0 <setEnableAllChs+0x114>)
   1305e:	5c5b      	ldrb	r3, [r3, r1]
   13060:	021b      	lsls	r3, r3, #8
   13062:	4313      	orrs	r3, r2
   13064:	b29a      	uxth	r2, r3
   13066:	230a      	movs	r3, #10
   13068:	18fb      	adds	r3, r7, r3
   1306a:	701a      	strb	r2, [r3, #0]
   1306c:	230a      	movs	r3, #10
   1306e:	18fb      	adds	r3, r7, r3
   13070:	781a      	ldrb	r2, [r3, #0]
   13072:	230b      	movs	r3, #11
   13074:	18fb      	adds	r3, r7, r3
   13076:	781b      	ldrb	r3, [r3, #0]
   13078:	0011      	movs	r1, r2
   1307a:	0018      	movs	r0, r3
   1307c:	4b06      	ldr	r3, [pc, #24]	; (13098 <setEnableAllChs+0x10c>)
   1307e:	4798      	blx	r3
#endif
#endif	
	return status;
   13080:	230e      	movs	r3, #14
   13082:	18fb      	adds	r3, r7, r3
   13084:	781b      	ldrb	r3, [r3, #0]
}
   13086:	0018      	movs	r0, r3
   13088:	46bd      	mov	sp, r7
   1308a:	b004      	add	sp, #16
   1308c:	bd80      	pop	{r7, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	200014a8 	.word	0x200014a8
   13094:	0000020f 	.word	0x0000020f
   13098:	00013b45 	.word	0x00013b45
   1309c:	0000020d 	.word	0x0000020d
   130a0:	0000020e 	.word	0x0000020e

000130a4 <setChlistDefaultState>:
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
   130a4:	b580      	push	{r7, lr}
   130a6:	b084      	sub	sp, #16
   130a8:	af00      	add	r7, sp, #0
   130aa:	0002      	movs	r2, r0
   130ac:	6039      	str	r1, [r7, #0]
   130ae:	1dfb      	adds	r3, r7, #7
   130b0:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t status = LORAWAN_SUCCESS;
   130b2:	230e      	movs	r3, #14
   130b4:	18fb      	adds	r3, r7, r3
   130b6:	2208      	movs	r2, #8
   130b8:	701a      	strb	r2, [r3, #0]
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
   130ba:	230f      	movs	r3, #15
   130bc:	18fb      	adds	r3, r7, r3
   130be:	2200      	movs	r2, #0
   130c0:	701a      	strb	r2, [r3, #0]
   130c2:	e033      	b.n	1312c <setChlistDefaultState+0x88>
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
   130c4:	4b21      	ldr	r3, [pc, #132]	; (1314c <setChlistDefaultState+0xa8>)
   130c6:	7a1a      	ldrb	r2, [r3, #8]
   130c8:	7a59      	ldrb	r1, [r3, #9]
   130ca:	0209      	lsls	r1, r1, #8
   130cc:	430a      	orrs	r2, r1
   130ce:	7a99      	ldrb	r1, [r3, #10]
   130d0:	0409      	lsls	r1, r1, #16
   130d2:	430a      	orrs	r2, r1
   130d4:	7adb      	ldrb	r3, [r3, #11]
   130d6:	061b      	lsls	r3, r3, #24
   130d8:	4313      	orrs	r3, r2
   130da:	0019      	movs	r1, r3
   130dc:	230f      	movs	r3, #15
   130de:	18fb      	adds	r3, r7, r3
   130e0:	781a      	ldrb	r2, [r3, #0]
   130e2:	0013      	movs	r3, r2
   130e4:	005b      	lsls	r3, r3, #1
   130e6:	189b      	adds	r3, r3, r2
   130e8:	009b      	lsls	r3, r3, #2
   130ea:	18cb      	adds	r3, r1, r3
   130ec:	7a5b      	ldrb	r3, [r3, #9]
   130ee:	2201      	movs	r2, #1
   130f0:	4053      	eors	r3, r2
   130f2:	b2db      	uxtb	r3, r3
   130f4:	2b00      	cmp	r3, #0
   130f6:	d012      	beq.n	1311e <setChlistDefaultState+0x7a>
		{
			RegParams.pChParams[i].status = DISABLED;
   130f8:	4b14      	ldr	r3, [pc, #80]	; (1314c <setChlistDefaultState+0xa8>)
   130fa:	791a      	ldrb	r2, [r3, #4]
   130fc:	7959      	ldrb	r1, [r3, #5]
   130fe:	0209      	lsls	r1, r1, #8
   13100:	430a      	orrs	r2, r1
   13102:	7999      	ldrb	r1, [r3, #6]
   13104:	0409      	lsls	r1, r1, #16
   13106:	430a      	orrs	r2, r1
   13108:	79db      	ldrb	r3, [r3, #7]
   1310a:	061b      	lsls	r3, r3, #24
   1310c:	4313      	orrs	r3, r2
   1310e:	001a      	movs	r2, r3
   13110:	230f      	movs	r3, #15
   13112:	18fb      	adds	r3, r7, r3
   13114:	781b      	ldrb	r3, [r3, #0]
   13116:	005b      	lsls	r3, r3, #1
   13118:	18d3      	adds	r3, r2, r3
   1311a:	2200      	movs	r2, #0
   1311c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
   1311e:	230f      	movs	r3, #15
   13120:	18fb      	adds	r3, r7, r3
   13122:	781a      	ldrb	r2, [r3, #0]
   13124:	230f      	movs	r3, #15
   13126:	18fb      	adds	r3, r7, r3
   13128:	3201      	adds	r2, #1
   1312a:	701a      	strb	r2, [r3, #0]
   1312c:	230f      	movs	r3, #15
   1312e:	18fb      	adds	r3, r7, r3
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	4a06      	ldr	r2, [pc, #24]	; (1314c <setChlistDefaultState+0xa8>)
   13134:	212a      	movs	r1, #42	; 0x2a
   13136:	5652      	ldrsb	r2, [r2, r1]
   13138:	4293      	cmp	r3, r2
   1313a:	ddc3      	ble.n	130c4 <setChlistDefaultState+0x20>
		}
	}
	return status;
   1313c:	230e      	movs	r3, #14
   1313e:	18fb      	adds	r3, r7, r3
   13140:	781b      	ldrb	r3, [r3, #0]
}
   13142:	0018      	movs	r0, r3
   13144:	46bd      	mov	sp, r7
   13146:	b004      	add	sp, #16
   13148:	bd80      	pop	{r7, pc}
   1314a:	46c0      	nop			; (mov r8, r8)
   1314c:	200014a8 	.word	0x200014a8

00013150 <Enableallchannels>:
#endif
void Enableallchannels()
{
   13150:	b580      	push	{r7, lr}
   13152:	b082      	sub	sp, #8
   13154:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   13156:	1dfb      	adds	r3, r7, #7
   13158:	2200      	movs	r2, #0
   1315a:	701a      	strb	r2, [r3, #0]
   1315c:	e016      	b.n	1318c <Enableallchannels+0x3c>
	{
		RegParams.pChParams[i].status = ENABLED;
   1315e:	4b31      	ldr	r3, [pc, #196]	; (13224 <Enableallchannels+0xd4>)
   13160:	791a      	ldrb	r2, [r3, #4]
   13162:	7959      	ldrb	r1, [r3, #5]
   13164:	0209      	lsls	r1, r1, #8
   13166:	430a      	orrs	r2, r1
   13168:	7999      	ldrb	r1, [r3, #6]
   1316a:	0409      	lsls	r1, r1, #16
   1316c:	430a      	orrs	r2, r1
   1316e:	79db      	ldrb	r3, [r3, #7]
   13170:	061b      	lsls	r3, r3, #24
   13172:	4313      	orrs	r3, r2
   13174:	001a      	movs	r2, r3
   13176:	1dfb      	adds	r3, r7, #7
   13178:	781b      	ldrb	r3, [r3, #0]
   1317a:	005b      	lsls	r3, r3, #1
   1317c:	18d3      	adds	r3, r2, r3
   1317e:	2201      	movs	r2, #1
   13180:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
   13182:	1dfb      	adds	r3, r7, #7
   13184:	781a      	ldrb	r2, [r3, #0]
   13186:	1dfb      	adds	r3, r7, #7
   13188:	3201      	adds	r2, #1
   1318a:	701a      	strb	r2, [r3, #0]
   1318c:	1dfb      	adds	r3, r7, #7
   1318e:	781b      	ldrb	r3, [r3, #0]
   13190:	2b47      	cmp	r3, #71	; 0x47
   13192:	d9e4      	bls.n	1315e <Enableallchannels+0xe>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
   13194:	4a23      	ldr	r2, [pc, #140]	; (13224 <Enableallchannels+0xd4>)
   13196:	23ac      	movs	r3, #172	; 0xac
   13198:	005b      	lsls	r3, r3, #1
   1319a:	2100      	movs	r1, #0
   1319c:	54d1      	strb	r1, [r2, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
   1319e:	4b21      	ldr	r3, [pc, #132]	; (13224 <Enableallchannels+0xd4>)
   131a0:	4a21      	ldr	r2, [pc, #132]	; (13228 <Enableallchannels+0xd8>)
   131a2:	5c9a      	ldrb	r2, [r3, r2]
   131a4:	2184      	movs	r1, #132	; 0x84
   131a6:	0089      	lsls	r1, r1, #2
   131a8:	5c5b      	ldrb	r3, [r3, r1]
   131aa:	021b      	lsls	r3, r3, #8
   131ac:	4313      	orrs	r3, r2
   131ae:	b29b      	uxth	r3, r3
   131b0:	0a1b      	lsrs	r3, r3, #8
   131b2:	b29a      	uxth	r2, r3
   131b4:	1dbb      	adds	r3, r7, #6
   131b6:	701a      	strb	r2, [r3, #0]
   131b8:	4b1a      	ldr	r3, [pc, #104]	; (13224 <Enableallchannels+0xd4>)
   131ba:	4a1b      	ldr	r2, [pc, #108]	; (13228 <Enableallchannels+0xd8>)
   131bc:	5c9a      	ldrb	r2, [r3, r2]
   131be:	2184      	movs	r1, #132	; 0x84
   131c0:	0089      	lsls	r1, r1, #2
   131c2:	5c5b      	ldrb	r3, [r3, r1]
   131c4:	021b      	lsls	r3, r3, #8
   131c6:	4313      	orrs	r3, r2
   131c8:	b29a      	uxth	r2, r3
   131ca:	1d7b      	adds	r3, r7, #5
   131cc:	701a      	strb	r2, [r3, #0]
   131ce:	1d7b      	adds	r3, r7, #5
   131d0:	781a      	ldrb	r2, [r3, #0]
   131d2:	1dbb      	adds	r3, r7, #6
   131d4:	781b      	ldrb	r3, [r3, #0]
   131d6:	0011      	movs	r1, r2
   131d8:	0018      	movs	r0, r3
   131da:	4b14      	ldr	r3, [pc, #80]	; (1322c <Enableallchannels+0xdc>)
   131dc:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
   131de:	4b11      	ldr	r3, [pc, #68]	; (13224 <Enableallchannels+0xd4>)
   131e0:	4a13      	ldr	r2, [pc, #76]	; (13230 <Enableallchannels+0xe0>)
   131e2:	5c9a      	ldrb	r2, [r3, r2]
   131e4:	4913      	ldr	r1, [pc, #76]	; (13234 <Enableallchannels+0xe4>)
   131e6:	5c5b      	ldrb	r3, [r3, r1]
   131e8:	021b      	lsls	r3, r3, #8
   131ea:	4313      	orrs	r3, r2
   131ec:	b29b      	uxth	r3, r3
   131ee:	0a1b      	lsrs	r3, r3, #8
   131f0:	b29a      	uxth	r2, r3
   131f2:	1d3b      	adds	r3, r7, #4
   131f4:	701a      	strb	r2, [r3, #0]
   131f6:	4b0b      	ldr	r3, [pc, #44]	; (13224 <Enableallchannels+0xd4>)
   131f8:	4a0d      	ldr	r2, [pc, #52]	; (13230 <Enableallchannels+0xe0>)
   131fa:	5c9a      	ldrb	r2, [r3, r2]
   131fc:	490d      	ldr	r1, [pc, #52]	; (13234 <Enableallchannels+0xe4>)
   131fe:	5c5b      	ldrb	r3, [r3, r1]
   13200:	021b      	lsls	r3, r3, #8
   13202:	4313      	orrs	r3, r2
   13204:	b29a      	uxth	r2, r3
   13206:	1cfb      	adds	r3, r7, #3
   13208:	701a      	strb	r2, [r3, #0]
   1320a:	1cfb      	adds	r3, r7, #3
   1320c:	781a      	ldrb	r2, [r3, #0]
   1320e:	1d3b      	adds	r3, r7, #4
   13210:	781b      	ldrb	r3, [r3, #0]
   13212:	0011      	movs	r1, r2
   13214:	0018      	movs	r0, r3
   13216:	4b05      	ldr	r3, [pc, #20]	; (1322c <Enableallchannels+0xdc>)
   13218:	4798      	blx	r3
#endif
}
   1321a:	46c0      	nop			; (mov r8, r8)
   1321c:	46bd      	mov	sp, r7
   1321e:	b002      	add	sp, #8
   13220:	bd80      	pop	{r7, pc}
   13222:	46c0      	nop			; (mov r8, r8)
   13224:	200014a8 	.word	0x200014a8
   13228:	0000020f 	.word	0x0000020f
   1322c:	00013b45 	.word	0x00013b45
   13230:	0000020d 	.word	0x0000020d
   13234:	0000020e 	.word	0x0000020e

00013238 <LORAREG_EnableallChannels>:
StackRetStatus_t LORAREG_EnableallChannels(IsmBand_t ismBand)
{
   13238:	b580      	push	{r7, lr}
   1323a:	b084      	sub	sp, #16
   1323c:	af00      	add	r7, sp, #0
   1323e:	0002      	movs	r2, r0
   13240:	1dfb      	adds	r3, r7, #7
   13242:	701a      	strb	r2, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
   13244:	230f      	movs	r3, #15
   13246:	18fb      	adds	r3, r7, r3
   13248:	2208      	movs	r2, #8
   1324a:	701a      	strb	r2, [r3, #0]
	if(ismBand == ISM_EU868)
   1324c:	1dfb      	adds	r3, r7, #7
   1324e:	781b      	ldrb	r3, [r3, #0]
   13250:	2b00      	cmp	r3, #0
   13252:	d102      	bne.n	1325a <LORAREG_EnableallChannels+0x22>
	{
		 InitDefault868Channels();
   13254:	4b14      	ldr	r3, [pc, #80]	; (132a8 <LORAREG_EnableallChannels+0x70>)
   13256:	4798      	blx	r3
   13258:	e01e      	b.n	13298 <LORAREG_EnableallChannels+0x60>
	}
	else if (ismBand == ISM_EU433)
   1325a:	1dfb      	adds	r3, r7, #7
   1325c:	781b      	ldrb	r3, [r3, #0]
   1325e:	2b01      	cmp	r3, #1
   13260:	d102      	bne.n	13268 <LORAREG_EnableallChannels+0x30>
	{
		 InitDefault433Channels();
   13262:	4b12      	ldr	r3, [pc, #72]	; (132ac <LORAREG_EnableallChannels+0x74>)
   13264:	4798      	blx	r3
   13266:	e017      	b.n	13298 <LORAREG_EnableallChannels+0x60>
	}
	else if(ismBand == ISM_JPN923)
   13268:	1dfb      	adds	r3, r7, #7
   1326a:	781b      	ldrb	r3, [r3, #0]
   1326c:	2b05      	cmp	r3, #5
   1326e:	d102      	bne.n	13276 <LORAREG_EnableallChannels+0x3e>
	{
		 InitDefault920Channels();	
   13270:	4b0f      	ldr	r3, [pc, #60]	; (132b0 <LORAREG_EnableallChannels+0x78>)
   13272:	4798      	blx	r3
   13274:	e010      	b.n	13298 <LORAREG_EnableallChannels+0x60>
	}
	else if (ismBand == ISM_KR920)
   13276:	1dfb      	adds	r3, r7, #7
   13278:	781b      	ldrb	r3, [r3, #0]
   1327a:	2b04      	cmp	r3, #4
   1327c:	d102      	bne.n	13284 <LORAREG_EnableallChannels+0x4c>
	{
		 InitDefault920ChannelsKR();
   1327e:	4b0d      	ldr	r3, [pc, #52]	; (132b4 <LORAREG_EnableallChannels+0x7c>)
   13280:	4798      	blx	r3
   13282:	e009      	b.n	13298 <LORAREG_EnableallChannels+0x60>
	}
	else if (ismBand == ISM_ASBAND)
	{
		 InitDefault923Channels ();
	}
	else if(ismBand == ISM_AU915 || ismBand == ISM_NA915)
   13284:	1dfb      	adds	r3, r7, #7
   13286:	781b      	ldrb	r3, [r3, #0]
   13288:	2b03      	cmp	r3, #3
   1328a:	d003      	beq.n	13294 <LORAREG_EnableallChannels+0x5c>
   1328c:	1dfb      	adds	r3, r7, #7
   1328e:	781b      	ldrb	r3, [r3, #0]
   13290:	2b02      	cmp	r3, #2
   13292:	d101      	bne.n	13298 <LORAREG_EnableallChannels+0x60>
	{
		 Enableallchannels();
   13294:	4b08      	ldr	r3, [pc, #32]	; (132b8 <LORAREG_EnableallChannels+0x80>)
   13296:	4798      	blx	r3
	}
	return result;
   13298:	230f      	movs	r3, #15
   1329a:	18fb      	adds	r3, r7, r3
   1329c:	781b      	ldrb	r3, [r3, #0]
}
   1329e:	0018      	movs	r0, r3
   132a0:	46bd      	mov	sp, r7
   132a2:	b004      	add	sp, #16
   132a4:	bd80      	pop	{r7, pc}
   132a6:	46c0      	nop			; (mov r8, r8)
   132a8:	00008c71 	.word	0x00008c71
   132ac:	00008dcd 	.word	0x00008dcd
   132b0:	00009a71 	.word	0x00009a71
   132b4:	0000a185 	.word	0x0000a185
   132b8:	00013151 	.word	0x00013151

000132bc <SAL_Init>:
 * \return value of type SalStatus_t
 *         SAL_SUCCESS -- when initialization is successful
 *         SAL_FAILURE -- when initialization of AES/ECC608 is failed
 */
SalStatus_t SAL_Init(void)
{
   132bc:	b580      	push	{r7, lr}
   132be:	b082      	sub	sp, #8
   132c0:	af00      	add	r7, sp, #0
	SalStatus_t sal_status = SAL_SUCCESS;
   132c2:	1dfb      	adds	r3, r7, #7
   132c4:	2200      	movs	r2, #0
   132c6:	701a      	strb	r2, [r3, #0]
#ifndef UT	
	/* Initialize the AES Engine */
	AESInit();
   132c8:	4b03      	ldr	r3, [pc, #12]	; (132d8 <SAL_Init+0x1c>)
   132ca:	4798      	blx	r3
		/* Write Key Encryption Key to KEK Slot in ECC608A */
		sal_status = sal_WriteKeyEncryptionKey();
	}
#endif	
#endif
   return sal_status;	
   132cc:	1dfb      	adds	r3, r7, #7
   132ce:	781b      	ldrb	r3, [r3, #0]
}
   132d0:	0018      	movs	r0, r3
   132d2:	46bd      	mov	sp, r7
   132d4:	b002      	add	sp, #8
   132d6:	bd80      	pop	{r7, pc}
   132d8:	00013ad9 	.word	0x00013ad9

000132dc <SAL_AESEncode>:
 *         SAL_SUCCESS			-- when encryption is successful
 *         SAL_FAILURE			-- when encryption is failed
 *		   SAL_INVALID_KEY_TYPE -- when invalid key_type is given as input parameter
 */
SalStatus_t SAL_AESEncode(unsigned char* buffer, salItems_t key_type, unsigned char* key)
{
   132dc:	b580      	push	{r7, lr}
   132de:	b08a      	sub	sp, #40	; 0x28
   132e0:	af00      	add	r7, sp, #0
   132e2:	60f8      	str	r0, [r7, #12]
   132e4:	607a      	str	r2, [r7, #4]
   132e6:	230b      	movs	r3, #11
   132e8:	18fb      	adds	r3, r7, r3
   132ea:	1c0a      	adds	r2, r1, #0
   132ec:	701a      	strb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
   132ee:	2327      	movs	r3, #39	; 0x27
   132f0:	18fb      	adds	r3, r7, r3
   132f2:	2200      	movs	r2, #0
   132f4:	701a      	strb	r2, [r3, #0]
	
	uint8_t useKey[16];	
#ifndef CRYPTO_DEV_ENABLED // If Keys are provide by the MAC for encrypting the data
	memcpy(useKey, key, sizeof(useKey));
   132f6:	2314      	movs	r3, #20
   132f8:	18fa      	adds	r2, r7, r3
   132fa:	687b      	ldr	r3, [r7, #4]
   132fc:	0010      	movs	r0, r2
   132fe:	0019      	movs	r1, r3
   13300:	2310      	movs	r3, #16
   13302:	001a      	movs	r2, r3
   13304:	4b0a      	ldr	r3, [pc, #40]	; (13330 <SAL_AESEncode+0x54>)
   13306:	4798      	blx	r3
	/* Encrypt the block using AES (HW/SW) Engine */
	AESEncode(buffer, useKey);
   13308:	2314      	movs	r3, #20
   1330a:	18fa      	adds	r2, r7, r3
   1330c:	68fb      	ldr	r3, [r7, #12]
   1330e:	0011      	movs	r1, r2
   13310:	0018      	movs	r0, r3
   13312:	4b08      	ldr	r3, [pc, #32]	; (13334 <SAL_AESEncode+0x58>)
   13314:	4798      	blx	r3
	key_type = key_type;
   13316:	230b      	movs	r3, #11
   13318:	18fb      	adds	r3, r7, r3
   1331a:	220b      	movs	r2, #11
   1331c:	18ba      	adds	r2, r7, r2
   1331e:	7812      	ldrb	r2, [r2, #0]
   13320:	701a      	strb	r2, [r3, #0]
			sal_status = SAL_INVALID_KEY_TYPE;
		}
		break;
	}
#endif	
	return sal_status;
   13322:	2327      	movs	r3, #39	; 0x27
   13324:	18fb      	adds	r3, r7, r3
   13326:	781b      	ldrb	r3, [r3, #0]
}
   13328:	0018      	movs	r0, r3
   1332a:	46bd      	mov	sp, r7
   1332c:	b00a      	add	sp, #40	; 0x28
   1332e:	bd80      	pop	{r7, pc}
   13330:	00024149 	.word	0x00024149
   13334:	0001398d 	.word	0x0001398d

00013338 <SAL_DeriveSessionKey>:
 *         SAL_SUCCESS			-- when Session key derivation is successful
 *         SAL_FAILURE			-- when Session key derivation is failed
 *		   SAL_INVALID_KEY_TYPE -- when invalid key_type is given as input parameter
 */
SalStatus_t SAL_DeriveSessionKey(unsigned char* block, salItems_t src_key, unsigned char* key, salItems_t target_key)
{
   13338:	b590      	push	{r4, r7, lr}
   1333a:	b087      	sub	sp, #28
   1333c:	af00      	add	r7, sp, #0
   1333e:	60f8      	str	r0, [r7, #12]
   13340:	0008      	movs	r0, r1
   13342:	607a      	str	r2, [r7, #4]
   13344:	0019      	movs	r1, r3
   13346:	230b      	movs	r3, #11
   13348:	18fb      	adds	r3, r7, r3
   1334a:	1c02      	adds	r2, r0, #0
   1334c:	701a      	strb	r2, [r3, #0]
   1334e:	230a      	movs	r3, #10
   13350:	18fb      	adds	r3, r7, r3
   13352:	1c0a      	adds	r2, r1, #0
   13354:	701a      	strb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
   13356:	2317      	movs	r3, #23
   13358:	18fb      	adds	r3, r7, r3
   1335a:	2200      	movs	r2, #0
   1335c:	701a      	strb	r2, [r3, #0]
	
#ifndef CRYPTO_DEV_ENABLED // If Key is provided by the MAC layer for deriving the session keys
	sal_status = SAL_AESEncode(block, src_key, key);
   1335e:	2317      	movs	r3, #23
   13360:	18fc      	adds	r4, r7, r3
   13362:	687a      	ldr	r2, [r7, #4]
   13364:	230b      	movs	r3, #11
   13366:	18fb      	adds	r3, r7, r3
   13368:	7819      	ldrb	r1, [r3, #0]
   1336a:	68fb      	ldr	r3, [r7, #12]
   1336c:	0018      	movs	r0, r3
   1336e:	4b05      	ldr	r3, [pc, #20]	; (13384 <SAL_DeriveSessionKey+0x4c>)
   13370:	4798      	blx	r3
   13372:	0003      	movs	r3, r0
   13374:	7023      	strb	r3, [r4, #0]
	 if(ATCA_SUCCESS != atcad_status)
	 {
		 sal_status = SAL_FAILURE;
	 }
#endif	
	 return sal_status;
   13376:	2317      	movs	r3, #23
   13378:	18fb      	adds	r3, r7, r3
   1337a:	781b      	ldrb	r3, [r3, #0]
}
   1337c:	0018      	movs	r0, r3
   1337e:	46bd      	mov	sp, r7
   13380:	b007      	add	sp, #28
   13382:	bd90      	pop	{r4, r7, pc}
   13384:	000132dd 	.word	0x000132dd

00013388 <SAL_Read>:
 *         SAL_SUCCESS			-- when the key is successfully read back from ECC608 device
 *         SAL_FAILURE			-- when the read function got failed
 *		   SAL_INVALID_KEY_TYPE -- when invalid key_type is given as input parameter
 */
SalStatus_t SAL_Read(salItems_t key_type, uint8_t* key)
{
   13388:	b580      	push	{r7, lr}
   1338a:	b084      	sub	sp, #16
   1338c:	af00      	add	r7, sp, #0
   1338e:	0002      	movs	r2, r0
   13390:	6039      	str	r1, [r7, #0]
   13392:	1dfb      	adds	r3, r7, #7
   13394:	701a      	strb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
   13396:	230f      	movs	r3, #15
   13398:	18fb      	adds	r3, r7, r3
   1339a:	2200      	movs	r2, #0
   1339c:	701a      	strb	r2, [r3, #0]
		sal_status = SAL_FAILURE;
	}
	
#else	
	/* Keep Compiler Happy */
	key_type = key_type;
   1339e:	1dfb      	adds	r3, r7, #7
   133a0:	1dfa      	adds	r2, r7, #7
   133a2:	7812      	ldrb	r2, [r2, #0]
   133a4:	701a      	strb	r2, [r3, #0]
	key = key;
#endif
    return sal_status;
   133a6:	230f      	movs	r3, #15
   133a8:	18fb      	adds	r3, r7, r3
   133aa:	781b      	ldrb	r3, [r3, #0]
}
   133ac:	0018      	movs	r0, r3
   133ae:	46bd      	mov	sp, r7
   133b0:	b004      	add	sp, #16
   133b2:	bd80      	pop	{r7, pc}

000133b4 <SAL_AESCmac>:
 *         SAL_SUCCESS			-- when CMAC calculation is successful
 *         SAL_FAILURE			-- when CMAC calculation is failed
 *		   SAL_INVALID_KEY_TYPE -- when invalid key_type is given as input parameter
 */
SalStatus_t SAL_AESCmac(uint8_t* key, salItems_t key_type, uint8_t* output, uint8_t* input, uint16_t size)
{
   133b4:	b590      	push	{r4, r7, lr}
   133b6:	b0a1      	sub	sp, #132	; 0x84
   133b8:	af00      	add	r7, sp, #0
   133ba:	60f8      	str	r0, [r7, #12]
   133bc:	607a      	str	r2, [r7, #4]
   133be:	603b      	str	r3, [r7, #0]
   133c0:	230b      	movs	r3, #11
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	1c0a      	adds	r2, r1, #0
   133c6:	701a      	strb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
   133c8:	2378      	movs	r3, #120	; 0x78
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	2200      	movs	r2, #0
   133ce:	701a      	strb	r2, [r3, #0]
	uint16_t n = 0, i = 0, j =0;
   133d0:	237e      	movs	r3, #126	; 0x7e
   133d2:	18fb      	adds	r3, r7, r3
   133d4:	2200      	movs	r2, #0
   133d6:	801a      	strh	r2, [r3, #0]
   133d8:	237c      	movs	r3, #124	; 0x7c
   133da:	18fb      	adds	r3, r7, r3
   133dc:	2200      	movs	r2, #0
   133de:	801a      	strh	r2, [r3, #0]
   133e0:	237a      	movs	r3, #122	; 0x7a
   133e2:	18fb      	adds	r3, r7, r3
   133e4:	2200      	movs	r2, #0
   133e6:	801a      	strh	r2, [r3, #0]
	bool flag = false;
   133e8:	2379      	movs	r3, #121	; 0x79
   133ea:	18fb      	adds	r3, r7, r3
   133ec:	2200      	movs	r2, #0
   133ee:	701a      	strb	r2, [r3, #0]
	uint8_t k1[16], k2[16];
	uint8_t x[16], y[16], mLast[16], padded[16];
	uint8_t *ptr = NULL;
   133f0:	2300      	movs	r3, #0
   133f2:	677b      	str	r3, [r7, #116]	; 0x74

	sal_GenerateSubkey(key, key_type, k1, k2);
   133f4:	2354      	movs	r3, #84	; 0x54
   133f6:	18fc      	adds	r4, r7, r3
   133f8:	2364      	movs	r3, #100	; 0x64
   133fa:	18fa      	adds	r2, r7, r3
   133fc:	230b      	movs	r3, #11
   133fe:	18fb      	adds	r3, r7, r3
   13400:	7819      	ldrb	r1, [r3, #0]
   13402:	68f8      	ldr	r0, [r7, #12]
   13404:	0023      	movs	r3, r4
   13406:	4cb4      	ldr	r4, [pc, #720]	; (136d8 <SAL_AESCmac+0x324>)
   13408:	47a0      	blx	r4

	n = (size + 15) >> 4;
   1340a:	2390      	movs	r3, #144	; 0x90
   1340c:	18fb      	adds	r3, r7, r3
   1340e:	881b      	ldrh	r3, [r3, #0]
   13410:	330f      	adds	r3, #15
   13412:	111a      	asrs	r2, r3, #4
   13414:	237e      	movs	r3, #126	; 0x7e
   13416:	18fb      	adds	r3, r7, r3
   13418:	801a      	strh	r2, [r3, #0]
	if (n == 0)
   1341a:	237e      	movs	r3, #126	; 0x7e
   1341c:	18fb      	adds	r3, r7, r3
   1341e:	881b      	ldrh	r3, [r3, #0]
   13420:	2b00      	cmp	r3, #0
   13422:	d108      	bne.n	13436 <SAL_AESCmac+0x82>
	{
		n = 1;
   13424:	237e      	movs	r3, #126	; 0x7e
   13426:	18fb      	adds	r3, r7, r3
   13428:	2201      	movs	r2, #1
   1342a:	801a      	strh	r2, [r3, #0]
		flag = 0;
   1342c:	2379      	movs	r3, #121	; 0x79
   1342e:	18fb      	adds	r3, r7, r3
   13430:	2200      	movs	r2, #0
   13432:	701a      	strb	r2, [r3, #0]
   13434:	e00a      	b.n	1344c <SAL_AESCmac+0x98>
	}
	else
	{
		flag = !(size % 16);
   13436:	2390      	movs	r3, #144	; 0x90
   13438:	18fb      	adds	r3, r7, r3
   1343a:	881b      	ldrh	r3, [r3, #0]
   1343c:	220f      	movs	r2, #15
   1343e:	4013      	ands	r3, r2
   13440:	b29a      	uxth	r2, r3
   13442:	2379      	movs	r3, #121	; 0x79
   13444:	18fb      	adds	r3, r7, r3
   13446:	4251      	negs	r1, r2
   13448:	414a      	adcs	r2, r1
   1344a:	701a      	strb	r2, [r3, #0]
	}

	if ( flag == 1 )
   1344c:	2379      	movs	r3, #121	; 0x79
   1344e:	18fb      	adds	r3, r7, r3
   13450:	781b      	ldrb	r3, [r3, #0]
   13452:	2b00      	cmp	r3, #0
   13454:	d039      	beq.n	134ca <SAL_AESCmac+0x116>
	{
		j = 0;
   13456:	237a      	movs	r3, #122	; 0x7a
   13458:	18fb      	adds	r3, r7, r3
   1345a:	2200      	movs	r2, #0
   1345c:	801a      	strh	r2, [r3, #0]
		for (i=((n-1) << 4); i<(n << 4); i++)
   1345e:	237e      	movs	r3, #126	; 0x7e
   13460:	18fb      	adds	r3, r7, r3
   13462:	881b      	ldrh	r3, [r3, #0]
   13464:	3b01      	subs	r3, #1
   13466:	b29a      	uxth	r2, r3
   13468:	237c      	movs	r3, #124	; 0x7c
   1346a:	18fb      	adds	r3, r7, r3
   1346c:	0112      	lsls	r2, r2, #4
   1346e:	801a      	strh	r2, [r3, #0]
   13470:	e021      	b.n	134b6 <SAL_AESCmac+0x102>
		{
			mLast[j] = input[i] ^ k1[j];
   13472:	237a      	movs	r3, #122	; 0x7a
   13474:	18fb      	adds	r3, r7, r3
   13476:	881b      	ldrh	r3, [r3, #0]
   13478:	227c      	movs	r2, #124	; 0x7c
   1347a:	18ba      	adds	r2, r7, r2
   1347c:	8812      	ldrh	r2, [r2, #0]
   1347e:	6839      	ldr	r1, [r7, #0]
   13480:	188a      	adds	r2, r1, r2
   13482:	7811      	ldrb	r1, [r2, #0]
   13484:	227a      	movs	r2, #122	; 0x7a
   13486:	18ba      	adds	r2, r7, r2
   13488:	8812      	ldrh	r2, [r2, #0]
   1348a:	2064      	movs	r0, #100	; 0x64
   1348c:	1838      	adds	r0, r7, r0
   1348e:	5c82      	ldrb	r2, [r0, r2]
   13490:	404a      	eors	r2, r1
   13492:	b2d1      	uxtb	r1, r2
   13494:	2224      	movs	r2, #36	; 0x24
   13496:	18ba      	adds	r2, r7, r2
   13498:	54d1      	strb	r1, [r2, r3]
			j++;
   1349a:	237a      	movs	r3, #122	; 0x7a
   1349c:	18fb      	adds	r3, r7, r3
   1349e:	881a      	ldrh	r2, [r3, #0]
   134a0:	237a      	movs	r3, #122	; 0x7a
   134a2:	18fb      	adds	r3, r7, r3
   134a4:	3201      	adds	r2, #1
   134a6:	801a      	strh	r2, [r3, #0]
		for (i=((n-1) << 4); i<(n << 4); i++)
   134a8:	237c      	movs	r3, #124	; 0x7c
   134aa:	18fb      	adds	r3, r7, r3
   134ac:	881a      	ldrh	r2, [r3, #0]
   134ae:	237c      	movs	r3, #124	; 0x7c
   134b0:	18fb      	adds	r3, r7, r3
   134b2:	3201      	adds	r2, #1
   134b4:	801a      	strh	r2, [r3, #0]
   134b6:	237c      	movs	r3, #124	; 0x7c
   134b8:	18fb      	adds	r3, r7, r3
   134ba:	881a      	ldrh	r2, [r3, #0]
   134bc:	237e      	movs	r3, #126	; 0x7e
   134be:	18fb      	adds	r3, r7, r3
   134c0:	881b      	ldrh	r3, [r3, #0]
   134c2:	011b      	lsls	r3, r3, #4
   134c4:	429a      	cmp	r2, r3
   134c6:	dbd4      	blt.n	13472 <SAL_AESCmac+0xbe>
   134c8:	e06f      	b.n	135aa <SAL_AESCmac+0x1f6>
		}
	}
	else
	{
		// padding
		ptr = &input[size - (size%16)];
   134ca:	2390      	movs	r3, #144	; 0x90
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	881b      	ldrh	r3, [r3, #0]
   134d0:	220f      	movs	r2, #15
   134d2:	4393      	bics	r3, r2
   134d4:	683a      	ldr	r2, [r7, #0]
   134d6:	18d3      	adds	r3, r2, r3
   134d8:	677b      	str	r3, [r7, #116]	; 0x74
		for (i=0; i<16; i++)
   134da:	237c      	movs	r3, #124	; 0x7c
   134dc:	18fb      	adds	r3, r7, r3
   134de:	2200      	movs	r2, #0
   134e0:	801a      	strh	r2, [r3, #0]
   134e2:	e038      	b.n	13556 <SAL_AESCmac+0x1a2>
		{
			if ( i < (size%16) )
   134e4:	2390      	movs	r3, #144	; 0x90
   134e6:	18fb      	adds	r3, r7, r3
   134e8:	881b      	ldrh	r3, [r3, #0]
   134ea:	220f      	movs	r2, #15
   134ec:	4013      	ands	r3, r2
   134ee:	b29b      	uxth	r3, r3
   134f0:	227c      	movs	r2, #124	; 0x7c
   134f2:	18ba      	adds	r2, r7, r2
   134f4:	8812      	ldrh	r2, [r2, #0]
   134f6:	429a      	cmp	r2, r3
   134f8:	d20c      	bcs.n	13514 <SAL_AESCmac+0x160>
			{
				padded[i] = ptr[i];
   134fa:	237c      	movs	r3, #124	; 0x7c
   134fc:	18fb      	adds	r3, r7, r3
   134fe:	881b      	ldrh	r3, [r3, #0]
   13500:	227c      	movs	r2, #124	; 0x7c
   13502:	18ba      	adds	r2, r7, r2
   13504:	8812      	ldrh	r2, [r2, #0]
   13506:	6f79      	ldr	r1, [r7, #116]	; 0x74
   13508:	188a      	adds	r2, r1, r2
   1350a:	7811      	ldrb	r1, [r2, #0]
   1350c:	2214      	movs	r2, #20
   1350e:	18ba      	adds	r2, r7, r2
   13510:	54d1      	strb	r1, [r2, r3]
   13512:	e019      	b.n	13548 <SAL_AESCmac+0x194>
			}
			else
			{
				if ( i == (size%16) )
   13514:	2390      	movs	r3, #144	; 0x90
   13516:	18fb      	adds	r3, r7, r3
   13518:	881b      	ldrh	r3, [r3, #0]
   1351a:	220f      	movs	r2, #15
   1351c:	4013      	ands	r3, r2
   1351e:	b29b      	uxth	r3, r3
   13520:	227c      	movs	r2, #124	; 0x7c
   13522:	18ba      	adds	r2, r7, r2
   13524:	8812      	ldrh	r2, [r2, #0]
   13526:	429a      	cmp	r2, r3
   13528:	d107      	bne.n	1353a <SAL_AESCmac+0x186>
				{
					padded[i] = 0x80;
   1352a:	237c      	movs	r3, #124	; 0x7c
   1352c:	18fb      	adds	r3, r7, r3
   1352e:	881b      	ldrh	r3, [r3, #0]
   13530:	2214      	movs	r2, #20
   13532:	18ba      	adds	r2, r7, r2
   13534:	2180      	movs	r1, #128	; 0x80
   13536:	54d1      	strb	r1, [r2, r3]
   13538:	e006      	b.n	13548 <SAL_AESCmac+0x194>
				}
				else
				{
					padded[i] = 0x00;
   1353a:	237c      	movs	r3, #124	; 0x7c
   1353c:	18fb      	adds	r3, r7, r3
   1353e:	881b      	ldrh	r3, [r3, #0]
   13540:	2214      	movs	r2, #20
   13542:	18ba      	adds	r2, r7, r2
   13544:	2100      	movs	r1, #0
   13546:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<16; i++)
   13548:	237c      	movs	r3, #124	; 0x7c
   1354a:	18fb      	adds	r3, r7, r3
   1354c:	881a      	ldrh	r2, [r3, #0]
   1354e:	237c      	movs	r3, #124	; 0x7c
   13550:	18fb      	adds	r3, r7, r3
   13552:	3201      	adds	r2, #1
   13554:	801a      	strh	r2, [r3, #0]
   13556:	237c      	movs	r3, #124	; 0x7c
   13558:	18fb      	adds	r3, r7, r3
   1355a:	881b      	ldrh	r3, [r3, #0]
   1355c:	2b0f      	cmp	r3, #15
   1355e:	d9c1      	bls.n	134e4 <SAL_AESCmac+0x130>
				}
			}
		}

		// XOR
		for (i=0; i<sizeof(mLast); i++)
   13560:	237c      	movs	r3, #124	; 0x7c
   13562:	18fb      	adds	r3, r7, r3
   13564:	2200      	movs	r2, #0
   13566:	801a      	strh	r2, [r3, #0]
   13568:	e01a      	b.n	135a0 <SAL_AESCmac+0x1ec>
		{
			mLast[i] = padded[i] ^ k2[i];
   1356a:	237c      	movs	r3, #124	; 0x7c
   1356c:	18fb      	adds	r3, r7, r3
   1356e:	881b      	ldrh	r3, [r3, #0]
   13570:	227c      	movs	r2, #124	; 0x7c
   13572:	18ba      	adds	r2, r7, r2
   13574:	8812      	ldrh	r2, [r2, #0]
   13576:	2114      	movs	r1, #20
   13578:	1879      	adds	r1, r7, r1
   1357a:	5c89      	ldrb	r1, [r1, r2]
   1357c:	227c      	movs	r2, #124	; 0x7c
   1357e:	18ba      	adds	r2, r7, r2
   13580:	8812      	ldrh	r2, [r2, #0]
   13582:	2054      	movs	r0, #84	; 0x54
   13584:	1838      	adds	r0, r7, r0
   13586:	5c82      	ldrb	r2, [r0, r2]
   13588:	404a      	eors	r2, r1
   1358a:	b2d1      	uxtb	r1, r2
   1358c:	2224      	movs	r2, #36	; 0x24
   1358e:	18ba      	adds	r2, r7, r2
   13590:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<sizeof(mLast); i++)
   13592:	237c      	movs	r3, #124	; 0x7c
   13594:	18fb      	adds	r3, r7, r3
   13596:	881a      	ldrh	r2, [r3, #0]
   13598:	237c      	movs	r3, #124	; 0x7c
   1359a:	18fb      	adds	r3, r7, r3
   1359c:	3201      	adds	r2, #1
   1359e:	801a      	strh	r2, [r3, #0]
   135a0:	237c      	movs	r3, #124	; 0x7c
   135a2:	18fb      	adds	r3, r7, r3
   135a4:	881b      	ldrh	r3, [r3, #0]
   135a6:	2b0f      	cmp	r3, #15
   135a8:	d9df      	bls.n	1356a <SAL_AESCmac+0x1b6>
		}
	}

	memset(x, 0, sizeof(x));
   135aa:	2344      	movs	r3, #68	; 0x44
   135ac:	18fb      	adds	r3, r7, r3
   135ae:	2210      	movs	r2, #16
   135b0:	2100      	movs	r1, #0
   135b2:	0018      	movs	r0, r3
   135b4:	4b49      	ldr	r3, [pc, #292]	; (136dc <SAL_AESCmac+0x328>)
   135b6:	4798      	blx	r3

	for (i=0; i<(n-1); i++)
   135b8:	237c      	movs	r3, #124	; 0x7c
   135ba:	18fb      	adds	r3, r7, r3
   135bc:	2200      	movs	r2, #0
   135be:	801a      	strh	r2, [r3, #0]
   135c0:	e042      	b.n	13648 <SAL_AESCmac+0x294>
	{
		for (j=0; j<16; j++)
   135c2:	237a      	movs	r3, #122	; 0x7a
   135c4:	18fb      	adds	r3, r7, r3
   135c6:	2200      	movs	r2, #0
   135c8:	801a      	strh	r2, [r3, #0]
   135ca:	e020      	b.n	1360e <SAL_AESCmac+0x25a>
		{
			y[j] = x[j] ^ input[(i << 4)+j];
   135cc:	237a      	movs	r3, #122	; 0x7a
   135ce:	18fb      	adds	r3, r7, r3
   135d0:	881b      	ldrh	r3, [r3, #0]
   135d2:	227a      	movs	r2, #122	; 0x7a
   135d4:	18ba      	adds	r2, r7, r2
   135d6:	8812      	ldrh	r2, [r2, #0]
   135d8:	2144      	movs	r1, #68	; 0x44
   135da:	1879      	adds	r1, r7, r1
   135dc:	5c89      	ldrb	r1, [r1, r2]
   135de:	227c      	movs	r2, #124	; 0x7c
   135e0:	18ba      	adds	r2, r7, r2
   135e2:	8812      	ldrh	r2, [r2, #0]
   135e4:	0110      	lsls	r0, r2, #4
   135e6:	227a      	movs	r2, #122	; 0x7a
   135e8:	18ba      	adds	r2, r7, r2
   135ea:	8812      	ldrh	r2, [r2, #0]
   135ec:	1882      	adds	r2, r0, r2
   135ee:	0010      	movs	r0, r2
   135f0:	683a      	ldr	r2, [r7, #0]
   135f2:	1812      	adds	r2, r2, r0
   135f4:	7812      	ldrb	r2, [r2, #0]
   135f6:	404a      	eors	r2, r1
   135f8:	b2d1      	uxtb	r1, r2
   135fa:	2234      	movs	r2, #52	; 0x34
   135fc:	18ba      	adds	r2, r7, r2
   135fe:	54d1      	strb	r1, [r2, r3]
		for (j=0; j<16; j++)
   13600:	237a      	movs	r3, #122	; 0x7a
   13602:	18fb      	adds	r3, r7, r3
   13604:	881a      	ldrh	r2, [r3, #0]
   13606:	237a      	movs	r3, #122	; 0x7a
   13608:	18fb      	adds	r3, r7, r3
   1360a:	3201      	adds	r2, #1
   1360c:	801a      	strh	r2, [r3, #0]
   1360e:	237a      	movs	r3, #122	; 0x7a
   13610:	18fb      	adds	r3, r7, r3
   13612:	881b      	ldrh	r3, [r3, #0]
   13614:	2b0f      	cmp	r3, #15
   13616:	d9d9      	bls.n	135cc <SAL_AESCmac+0x218>
		}
		memcpy(x, y, sizeof(y));
   13618:	2344      	movs	r3, #68	; 0x44
   1361a:	18fb      	adds	r3, r7, r3
   1361c:	2234      	movs	r2, #52	; 0x34
   1361e:	18ba      	adds	r2, r7, r2
   13620:	ca13      	ldmia	r2!, {r0, r1, r4}
   13622:	c313      	stmia	r3!, {r0, r1, r4}
   13624:	6812      	ldr	r2, [r2, #0]
   13626:	601a      	str	r2, [r3, #0]
		SAL_AESEncode(x, key_type, key);
   13628:	68fa      	ldr	r2, [r7, #12]
   1362a:	230b      	movs	r3, #11
   1362c:	18fb      	adds	r3, r7, r3
   1362e:	7819      	ldrb	r1, [r3, #0]
   13630:	2344      	movs	r3, #68	; 0x44
   13632:	18fb      	adds	r3, r7, r3
   13634:	0018      	movs	r0, r3
   13636:	4b2a      	ldr	r3, [pc, #168]	; (136e0 <SAL_AESCmac+0x32c>)
   13638:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
   1363a:	237c      	movs	r3, #124	; 0x7c
   1363c:	18fb      	adds	r3, r7, r3
   1363e:	881a      	ldrh	r2, [r3, #0]
   13640:	237c      	movs	r3, #124	; 0x7c
   13642:	18fb      	adds	r3, r7, r3
   13644:	3201      	adds	r2, #1
   13646:	801a      	strh	r2, [r3, #0]
   13648:	237c      	movs	r3, #124	; 0x7c
   1364a:	18fb      	adds	r3, r7, r3
   1364c:	881a      	ldrh	r2, [r3, #0]
   1364e:	237e      	movs	r3, #126	; 0x7e
   13650:	18fb      	adds	r3, r7, r3
   13652:	881b      	ldrh	r3, [r3, #0]
   13654:	3b01      	subs	r3, #1
   13656:	429a      	cmp	r2, r3
   13658:	dbb3      	blt.n	135c2 <SAL_AESCmac+0x20e>
	}

	for (i=0; i<sizeof(x); i++)
   1365a:	237c      	movs	r3, #124	; 0x7c
   1365c:	18fb      	adds	r3, r7, r3
   1365e:	2200      	movs	r2, #0
   13660:	801a      	strh	r2, [r3, #0]
   13662:	e01a      	b.n	1369a <SAL_AESCmac+0x2e6>
	{
		y[i] = x[i] ^ mLast[i];
   13664:	237c      	movs	r3, #124	; 0x7c
   13666:	18fb      	adds	r3, r7, r3
   13668:	881b      	ldrh	r3, [r3, #0]
   1366a:	227c      	movs	r2, #124	; 0x7c
   1366c:	18ba      	adds	r2, r7, r2
   1366e:	8812      	ldrh	r2, [r2, #0]
   13670:	2144      	movs	r1, #68	; 0x44
   13672:	1879      	adds	r1, r7, r1
   13674:	5c89      	ldrb	r1, [r1, r2]
   13676:	227c      	movs	r2, #124	; 0x7c
   13678:	18ba      	adds	r2, r7, r2
   1367a:	8812      	ldrh	r2, [r2, #0]
   1367c:	2024      	movs	r0, #36	; 0x24
   1367e:	1838      	adds	r0, r7, r0
   13680:	5c82      	ldrb	r2, [r0, r2]
   13682:	404a      	eors	r2, r1
   13684:	b2d1      	uxtb	r1, r2
   13686:	2234      	movs	r2, #52	; 0x34
   13688:	18ba      	adds	r2, r7, r2
   1368a:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<sizeof(x); i++)
   1368c:	237c      	movs	r3, #124	; 0x7c
   1368e:	18fb      	adds	r3, r7, r3
   13690:	881a      	ldrh	r2, [r3, #0]
   13692:	237c      	movs	r3, #124	; 0x7c
   13694:	18fb      	adds	r3, r7, r3
   13696:	3201      	adds	r2, #1
   13698:	801a      	strh	r2, [r3, #0]
   1369a:	237c      	movs	r3, #124	; 0x7c
   1369c:	18fb      	adds	r3, r7, r3
   1369e:	881b      	ldrh	r3, [r3, #0]
   136a0:	2b0f      	cmp	r3, #15
   136a2:	d9df      	bls.n	13664 <SAL_AESCmac+0x2b0>
	}

	SAL_AESEncode(y, key_type, key);
   136a4:	68fa      	ldr	r2, [r7, #12]
   136a6:	230b      	movs	r3, #11
   136a8:	18fb      	adds	r3, r7, r3
   136aa:	7819      	ldrb	r1, [r3, #0]
   136ac:	2334      	movs	r3, #52	; 0x34
   136ae:	18fb      	adds	r3, r7, r3
   136b0:	0018      	movs	r0, r3
   136b2:	4b0b      	ldr	r3, [pc, #44]	; (136e0 <SAL_AESCmac+0x32c>)
   136b4:	4798      	blx	r3

	memcpy(output, y, sizeof(y));
   136b6:	687a      	ldr	r2, [r7, #4]
   136b8:	2334      	movs	r3, #52	; 0x34
   136ba:	18fb      	adds	r3, r7, r3
   136bc:	0010      	movs	r0, r2
   136be:	0019      	movs	r1, r3
   136c0:	2310      	movs	r3, #16
   136c2:	001a      	movs	r2, r3
   136c4:	4b07      	ldr	r3, [pc, #28]	; (136e4 <SAL_AESCmac+0x330>)
   136c6:	4798      	blx	r3
	
	return sal_status;
   136c8:	2378      	movs	r3, #120	; 0x78
   136ca:	18fb      	adds	r3, r7, r3
   136cc:	781b      	ldrb	r3, [r3, #0]
}
   136ce:	0018      	movs	r0, r3
   136d0:	46bd      	mov	sp, r7
   136d2:	b021      	add	sp, #132	; 0x84
   136d4:	bd90      	pop	{r4, r7, pc}
   136d6:	46c0      	nop			; (mov r8, r8)
   136d8:	000136e9 	.word	0x000136e9
   136dc:	000241cd 	.word	0x000241cd
   136e0:	000132dd 	.word	0x000132dd
   136e4:	00024149 	.word	0x00024149

000136e8 <sal_GenerateSubkey>:

/****************************** PRIVATE FUNCTIONS *****************************/
static void sal_GenerateSubkey (uint8_t* key, salItems_t key_type, uint8_t* k1, uint8_t* k2)
{
   136e8:	b580      	push	{r7, lr}
   136ea:	b08e      	sub	sp, #56	; 0x38
   136ec:	af00      	add	r7, sp, #0
   136ee:	60f8      	str	r0, [r7, #12]
   136f0:	607a      	str	r2, [r7, #4]
   136f2:	603b      	str	r3, [r7, #0]
   136f4:	230b      	movs	r3, #11
   136f6:	18fb      	adds	r3, r7, r3
   136f8:	1c0a      	adds	r2, r1, #0
   136fa:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
   136fc:	2337      	movs	r3, #55	; 0x37
   136fe:	18fb      	adds	r3, r7, r3
   13700:	2200      	movs	r2, #0
   13702:	701a      	strb	r2, [r3, #0]
	uint8_t l[16];
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   13704:	2314      	movs	r3, #20
   13706:	18fb      	adds	r3, r7, r3
   13708:	0018      	movs	r0, r3
   1370a:	2310      	movs	r3, #16
   1370c:	001a      	movs	r2, r3
   1370e:	2100      	movs	r1, #0
   13710:	4b45      	ldr	r3, [pc, #276]	; (13828 <sal_GenerateSubkey+0x140>)
   13712:	4798      	blx	r3
   13714:	2314      	movs	r3, #20
   13716:	18fb      	adds	r3, r7, r3
   13718:	2287      	movs	r2, #135	; 0x87
   1371a:	73da      	strb	r2, [r3, #15]
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};


	memset(l, 0, sizeof(l));
   1371c:	2324      	movs	r3, #36	; 0x24
   1371e:	18fb      	adds	r3, r7, r3
   13720:	2210      	movs	r2, #16
   13722:	2100      	movs	r1, #0
   13724:	0018      	movs	r0, r3
   13726:	4b40      	ldr	r3, [pc, #256]	; (13828 <sal_GenerateSubkey+0x140>)
   13728:	4798      	blx	r3

	SAL_AESEncode(l, key_type, key);
   1372a:	68fa      	ldr	r2, [r7, #12]
   1372c:	230b      	movs	r3, #11
   1372e:	18fb      	adds	r3, r7, r3
   13730:	7819      	ldrb	r1, [r3, #0]
   13732:	2324      	movs	r3, #36	; 0x24
   13734:	18fb      	adds	r3, r7, r3
   13736:	0018      	movs	r0, r3
   13738:	4b3c      	ldr	r3, [pc, #240]	; (1382c <sal_GenerateSubkey+0x144>)
   1373a:	4798      	blx	r3

	// compute k1 sub-key
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
   1373c:	2324      	movs	r3, #36	; 0x24
   1373e:	18fb      	adds	r3, r7, r3
   13740:	781b      	ldrb	r3, [r3, #0]
   13742:	b25b      	sxtb	r3, r3
   13744:	2b00      	cmp	r3, #0
   13746:	db07      	blt.n	13758 <sal_GenerateSubkey+0x70>
	{
		sal_FillSubKey( l, k1, (sizeof(l) ) );
   13748:	6879      	ldr	r1, [r7, #4]
   1374a:	2324      	movs	r3, #36	; 0x24
   1374c:	18fb      	adds	r3, r7, r3
   1374e:	2210      	movs	r2, #16
   13750:	0018      	movs	r0, r3
   13752:	4b37      	ldr	r3, [pc, #220]	; (13830 <sal_GenerateSubkey+0x148>)
   13754:	4798      	blx	r3
   13756:	e02b      	b.n	137b0 <sal_GenerateSubkey+0xc8>
	}
	else
	{
		sal_FillSubKey( l, k1, (sizeof(l) ) );
   13758:	6879      	ldr	r1, [r7, #4]
   1375a:	2324      	movs	r3, #36	; 0x24
   1375c:	18fb      	adds	r3, r7, r3
   1375e:	2210      	movs	r2, #16
   13760:	0018      	movs	r0, r3
   13762:	4b33      	ldr	r3, [pc, #204]	; (13830 <sal_GenerateSubkey+0x148>)
   13764:	4798      	blx	r3

		for (i=0; i<sizeof(l); i++)
   13766:	2337      	movs	r3, #55	; 0x37
   13768:	18fb      	adds	r3, r7, r3
   1376a:	2200      	movs	r2, #0
   1376c:	701a      	strb	r2, [r3, #0]
   1376e:	e01a      	b.n	137a6 <sal_GenerateSubkey+0xbe>
		{
			k1[i] ^= const_Rb[i];
   13770:	2337      	movs	r3, #55	; 0x37
   13772:	18fb      	adds	r3, r7, r3
   13774:	781b      	ldrb	r3, [r3, #0]
   13776:	687a      	ldr	r2, [r7, #4]
   13778:	18d3      	adds	r3, r2, r3
   1377a:	2237      	movs	r2, #55	; 0x37
   1377c:	18ba      	adds	r2, r7, r2
   1377e:	7812      	ldrb	r2, [r2, #0]
   13780:	6879      	ldr	r1, [r7, #4]
   13782:	188a      	adds	r2, r1, r2
   13784:	7811      	ldrb	r1, [r2, #0]
   13786:	2237      	movs	r2, #55	; 0x37
   13788:	18ba      	adds	r2, r7, r2
   1378a:	7812      	ldrb	r2, [r2, #0]
   1378c:	2014      	movs	r0, #20
   1378e:	1838      	adds	r0, r7, r0
   13790:	5c82      	ldrb	r2, [r0, r2]
   13792:	404a      	eors	r2, r1
   13794:	b2d2      	uxtb	r2, r2
   13796:	701a      	strb	r2, [r3, #0]
		for (i=0; i<sizeof(l); i++)
   13798:	2337      	movs	r3, #55	; 0x37
   1379a:	18fb      	adds	r3, r7, r3
   1379c:	781a      	ldrb	r2, [r3, #0]
   1379e:	2337      	movs	r3, #55	; 0x37
   137a0:	18fb      	adds	r3, r7, r3
   137a2:	3201      	adds	r2, #1
   137a4:	701a      	strb	r2, [r3, #0]
   137a6:	2337      	movs	r3, #55	; 0x37
   137a8:	18fb      	adds	r3, r7, r3
   137aa:	781b      	ldrb	r3, [r3, #0]
   137ac:	2b0f      	cmp	r3, #15
   137ae:	d9df      	bls.n	13770 <sal_GenerateSubkey+0x88>
		}
	}

	// compute k2 sub-key
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
   137b0:	687b      	ldr	r3, [r7, #4]
   137b2:	781b      	ldrb	r3, [r3, #0]
   137b4:	b25b      	sxtb	r3, r3
   137b6:	2b00      	cmp	r3, #0
   137b8:	db06      	blt.n	137c8 <sal_GenerateSubkey+0xe0>
	{
		sal_FillSubKey( k1, k2, (sizeof(l)) );
   137ba:	6839      	ldr	r1, [r7, #0]
   137bc:	687b      	ldr	r3, [r7, #4]
   137be:	2210      	movs	r2, #16
   137c0:	0018      	movs	r0, r3
   137c2:	4b1b      	ldr	r3, [pc, #108]	; (13830 <sal_GenerateSubkey+0x148>)
   137c4:	4798      	blx	r3
		for (i=0; i<sizeof(l); i++)
		{
			k2[i] = k2[i] ^ const_Rb[i];
		}
	}
}
   137c6:	e02a      	b.n	1381e <sal_GenerateSubkey+0x136>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
   137c8:	6839      	ldr	r1, [r7, #0]
   137ca:	687b      	ldr	r3, [r7, #4]
   137cc:	2210      	movs	r2, #16
   137ce:	0018      	movs	r0, r3
   137d0:	4b17      	ldr	r3, [pc, #92]	; (13830 <sal_GenerateSubkey+0x148>)
   137d2:	4798      	blx	r3
		for (i=0; i<sizeof(l); i++)
   137d4:	2337      	movs	r3, #55	; 0x37
   137d6:	18fb      	adds	r3, r7, r3
   137d8:	2200      	movs	r2, #0
   137da:	701a      	strb	r2, [r3, #0]
   137dc:	e01a      	b.n	13814 <sal_GenerateSubkey+0x12c>
			k2[i] = k2[i] ^ const_Rb[i];
   137de:	2337      	movs	r3, #55	; 0x37
   137e0:	18fb      	adds	r3, r7, r3
   137e2:	781b      	ldrb	r3, [r3, #0]
   137e4:	683a      	ldr	r2, [r7, #0]
   137e6:	18d3      	adds	r3, r2, r3
   137e8:	2237      	movs	r2, #55	; 0x37
   137ea:	18ba      	adds	r2, r7, r2
   137ec:	7812      	ldrb	r2, [r2, #0]
   137ee:	6839      	ldr	r1, [r7, #0]
   137f0:	188a      	adds	r2, r1, r2
   137f2:	7811      	ldrb	r1, [r2, #0]
   137f4:	2237      	movs	r2, #55	; 0x37
   137f6:	18ba      	adds	r2, r7, r2
   137f8:	7812      	ldrb	r2, [r2, #0]
   137fa:	2014      	movs	r0, #20
   137fc:	1838      	adds	r0, r7, r0
   137fe:	5c82      	ldrb	r2, [r0, r2]
   13800:	404a      	eors	r2, r1
   13802:	b2d2      	uxtb	r2, r2
   13804:	701a      	strb	r2, [r3, #0]
		for (i=0; i<sizeof(l); i++)
   13806:	2337      	movs	r3, #55	; 0x37
   13808:	18fb      	adds	r3, r7, r3
   1380a:	781a      	ldrb	r2, [r3, #0]
   1380c:	2337      	movs	r3, #55	; 0x37
   1380e:	18fb      	adds	r3, r7, r3
   13810:	3201      	adds	r2, #1
   13812:	701a      	strb	r2, [r3, #0]
   13814:	2337      	movs	r3, #55	; 0x37
   13816:	18fb      	adds	r3, r7, r3
   13818:	781b      	ldrb	r3, [r3, #0]
   1381a:	2b0f      	cmp	r3, #15
   1381c:	d9df      	bls.n	137de <sal_GenerateSubkey+0xf6>
}
   1381e:	46c0      	nop			; (mov r8, r8)
   13820:	46bd      	mov	sp, r7
   13822:	b00e      	add	sp, #56	; 0x38
   13824:	bd80      	pop	{r7, pc}
   13826:	46c0      	nop			; (mov r8, r8)
   13828:	000241cd 	.word	0x000241cd
   1382c:	000132dd 	.word	0x000132dd
   13830:	00013835 	.word	0x00013835

00013834 <sal_FillSubKey>:

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
   13834:	b580      	push	{r7, lr}
   13836:	b086      	sub	sp, #24
   13838:	af00      	add	r7, sp, #0
   1383a:	60f8      	str	r0, [r7, #12]
   1383c:	60b9      	str	r1, [r7, #8]
   1383e:	1dfb      	adds	r3, r7, #7
   13840:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
   13842:	2317      	movs	r3, #23
   13844:	18fb      	adds	r3, r7, r3
   13846:	2200      	movs	r2, #0
   13848:	701a      	strb	r2, [r3, #0]
	uint8_t carry = 0;
   1384a:	2316      	movs	r3, #22
   1384c:	18fb      	adds	r3, r7, r3
   1384e:	2200      	movs	r2, #0
   13850:	701a      	strb	r2, [r3, #0]

	i=size;
   13852:	2317      	movs	r3, #23
   13854:	18fb      	adds	r3, r7, r3
   13856:	1dfa      	adds	r2, r7, #7
   13858:	7812      	ldrb	r2, [r2, #0]
   1385a:	701a      	strb	r2, [r3, #0]

	while(i--)
   1385c:	e021      	b.n	138a2 <sal_FillSubKey+0x6e>
	{
		key[i] = (source[i] << 1) | carry;
   1385e:	2317      	movs	r3, #23
   13860:	18fb      	adds	r3, r7, r3
   13862:	781b      	ldrb	r3, [r3, #0]
   13864:	68ba      	ldr	r2, [r7, #8]
   13866:	18d3      	adds	r3, r2, r3
   13868:	2217      	movs	r2, #23
   1386a:	18ba      	adds	r2, r7, r2
   1386c:	7812      	ldrb	r2, [r2, #0]
   1386e:	68f9      	ldr	r1, [r7, #12]
   13870:	188a      	adds	r2, r1, r2
   13872:	7812      	ldrb	r2, [r2, #0]
   13874:	0052      	lsls	r2, r2, #1
   13876:	b251      	sxtb	r1, r2
   13878:	2216      	movs	r2, #22
   1387a:	18ba      	adds	r2, r7, r2
   1387c:	7812      	ldrb	r2, [r2, #0]
   1387e:	b252      	sxtb	r2, r2
   13880:	430a      	orrs	r2, r1
   13882:	b252      	sxtb	r2, r2
   13884:	b2d2      	uxtb	r2, r2
   13886:	701a      	strb	r2, [r3, #0]
		carry = !!(source[i] & 0x80);
   13888:	2317      	movs	r3, #23
   1388a:	18fb      	adds	r3, r7, r3
   1388c:	781b      	ldrb	r3, [r3, #0]
   1388e:	68fa      	ldr	r2, [r7, #12]
   13890:	18d3      	adds	r3, r2, r3
   13892:	781b      	ldrb	r3, [r3, #0]
   13894:	b25b      	sxtb	r3, r3
   13896:	b2db      	uxtb	r3, r3
   13898:	09db      	lsrs	r3, r3, #7
   1389a:	b2da      	uxtb	r2, r3
   1389c:	2316      	movs	r3, #22
   1389e:	18fb      	adds	r3, r7, r3
   138a0:	701a      	strb	r2, [r3, #0]
	while(i--)
   138a2:	2317      	movs	r3, #23
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2217      	movs	r2, #23
   138aa:	18ba      	adds	r2, r7, r2
   138ac:	1e59      	subs	r1, r3, #1
   138ae:	7011      	strb	r1, [r2, #0]
   138b0:	2b00      	cmp	r3, #0
   138b2:	d1d4      	bne.n	1385e <sal_FillSubKey+0x2a>
	}
}
   138b4:	46c0      	nop			; (mov r8, r8)
   138b6:	46bd      	mov	sp, r7
   138b8:	b006      	add	sp, #24
   138ba:	bd80      	pop	{r7, pc}

000138bc <convert_byte_array_to_32_bit>:
    return (data[0] | ((uint16_t)data[1] << 8));
}

/* Converts a 4 Byte array into a 32-Bit value */
static inline uint32_t convert_byte_array_to_32_bit(uint8_t *data)
{
   138bc:	b580      	push	{r7, lr}
   138be:	b084      	sub	sp, #16
   138c0:	af00      	add	r7, sp, #0
   138c2:	6078      	str	r0, [r7, #4]
	{
		uint32_t u32;
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
   138c4:	230f      	movs	r3, #15
   138c6:	18fb      	adds	r3, r7, r3
   138c8:	2200      	movs	r2, #0
   138ca:	701a      	strb	r2, [r3, #0]
   138cc:	e010      	b.n	138f0 <convert_byte_array_to_32_bit+0x34>
	{
		long_addr.u8[index] = *data++;
   138ce:	230f      	movs	r3, #15
   138d0:	18fb      	adds	r3, r7, r3
   138d2:	781a      	ldrb	r2, [r3, #0]
   138d4:	687b      	ldr	r3, [r7, #4]
   138d6:	1c59      	adds	r1, r3, #1
   138d8:	6079      	str	r1, [r7, #4]
   138da:	7819      	ldrb	r1, [r3, #0]
   138dc:	2308      	movs	r3, #8
   138de:	18fb      	adds	r3, r7, r3
   138e0:	5499      	strb	r1, [r3, r2]
	for (index = 0; index < 4; index++)
   138e2:	230f      	movs	r3, #15
   138e4:	18fb      	adds	r3, r7, r3
   138e6:	781a      	ldrb	r2, [r3, #0]
   138e8:	230f      	movs	r3, #15
   138ea:	18fb      	adds	r3, r7, r3
   138ec:	3201      	adds	r2, #1
   138ee:	701a      	strb	r2, [r3, #0]
   138f0:	230f      	movs	r3, #15
   138f2:	18fb      	adds	r3, r7, r3
   138f4:	781b      	ldrb	r3, [r3, #0]
   138f6:	2b03      	cmp	r3, #3
   138f8:	d9e9      	bls.n	138ce <convert_byte_array_to_32_bit+0x12>
	}
	return long_addr.u32;
   138fa:	68bb      	ldr	r3, [r7, #8]
}
   138fc:	0018      	movs	r0, r3
   138fe:	46bd      	mov	sp, r7
   13900:	b004      	add	sp, #16
   13902:	bd80      	pop	{r7, pc}

00013904 <aes_set_new_message>:
 *
 * \param[in] module Pointer to the AES software instance struct
 *
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
   13904:	b580      	push	{r7, lr}
   13906:	b082      	sub	sp, #8
   13908:	af00      	add	r7, sp, #0
   1390a:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
   1390c:	687b      	ldr	r3, [r7, #4]
   1390e:	681a      	ldr	r2, [r3, #0]
   13910:	687b      	ldr	r3, [r7, #4]
   13912:	681b      	ldr	r3, [r3, #0]
   13914:	791b      	ldrb	r3, [r3, #4]
   13916:	b2db      	uxtb	r3, r3
   13918:	2102      	movs	r1, #2
   1391a:	430b      	orrs	r3, r1
   1391c:	b2db      	uxtb	r3, r3
   1391e:	7113      	strb	r3, [r2, #4]
}
   13920:	46c0      	nop			; (mov r8, r8)
   13922:	46bd      	mov	sp, r7
   13924:	b002      	add	sp, #8
   13926:	bd80      	pop	{r7, pc}

00013928 <aes_clear_new_message>:
 *
 * \param[in] module Pointer to the AES software instance struct
 *
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
   13928:	b580      	push	{r7, lr}
   1392a:	b082      	sub	sp, #8
   1392c:	af00      	add	r7, sp, #0
   1392e:	6078      	str	r0, [r7, #4]
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
   13930:	687b      	ldr	r3, [r7, #4]
   13932:	681a      	ldr	r2, [r3, #0]
   13934:	687b      	ldr	r3, [r7, #4]
   13936:	681b      	ldr	r3, [r3, #0]
   13938:	791b      	ldrb	r3, [r3, #4]
   1393a:	b2db      	uxtb	r3, r3
   1393c:	2102      	movs	r1, #2
   1393e:	438b      	bics	r3, r1
   13940:	b2db      	uxtb	r3, r3
   13942:	7113      	strb	r3, [r2, #4]
}
   13944:	46c0      	nop			; (mov r8, r8)
   13946:	46bd      	mov	sp, r7
   13948:	b002      	add	sp, #8
   1394a:	bd80      	pop	{r7, pc}

0001394c <aes_get_status>:
 *
 * \retval AES_ENCRYPTION_COMPLETE   AES encryption complete
 * \retval AES_GF_MULTI_COMPLETE   AES GF multiplication complete
 */
static inline uint32_t aes_get_status(struct aes_module *const module)
{
   1394c:	b580      	push	{r7, lr}
   1394e:	b084      	sub	sp, #16
   13950:	af00      	add	r7, sp, #0
   13952:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	79db      	ldrb	r3, [r3, #7]
   1395a:	b2db      	uxtb	r3, r3
   1395c:	60bb      	str	r3, [r7, #8]
	uint32_t status_flags = 0;
   1395e:	2300      	movs	r3, #0
   13960:	60fb      	str	r3, [r7, #12]

	if (int_flags & AES_INTFLAG_ENCCMP) {
   13962:	68bb      	ldr	r3, [r7, #8]
   13964:	2201      	movs	r2, #1
   13966:	4013      	ands	r3, r2
   13968:	d003      	beq.n	13972 <aes_get_status+0x26>
		status_flags |= AES_ENCRYPTION_COMPLETE;
   1396a:	68fb      	ldr	r3, [r7, #12]
   1396c:	2201      	movs	r2, #1
   1396e:	4313      	orrs	r3, r2
   13970:	60fb      	str	r3, [r7, #12]
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
   13972:	68bb      	ldr	r3, [r7, #8]
   13974:	2202      	movs	r2, #2
   13976:	4013      	ands	r3, r2
   13978:	d003      	beq.n	13982 <aes_get_status+0x36>
		status_flags |= AES_GF_MULTI_COMPLETE;
   1397a:	68fb      	ldr	r3, [r7, #12]
   1397c:	2202      	movs	r2, #2
   1397e:	4313      	orrs	r3, r2
   13980:	60fb      	str	r3, [r7, #12]
	}

	return status_flags;
   13982:	68fb      	ldr	r3, [r7, #12]
}
   13984:	0018      	movs	r0, r3
   13986:	46bd      	mov	sp, r7
   13988:	b004      	add	sp, #16
   1398a:	bd80      	pop	{r7, pc}

0001398c <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
   1398c:	b590      	push	{r4, r7, lr}
   1398e:	b085      	sub	sp, #20
   13990:	af00      	add	r7, sp, #0
   13992:	6078      	str	r0, [r7, #4]
   13994:	6039      	str	r1, [r7, #0]
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
   13996:	4b43      	ldr	r3, [pc, #268]	; (13aa4 <AESEncode+0x118>)
   13998:	2201      	movs	r2, #1
   1399a:	701a      	strb	r2, [r3, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
   1399c:	4b41      	ldr	r3, [pc, #260]	; (13aa4 <AESEncode+0x118>)
   1399e:	2200      	movs	r2, #0
   139a0:	705a      	strb	r2, [r3, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
   139a2:	4b40      	ldr	r3, [pc, #256]	; (13aa4 <AESEncode+0x118>)
   139a4:	2201      	movs	r2, #1
   139a6:	709a      	strb	r2, [r3, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
   139a8:	4b3e      	ldr	r3, [pc, #248]	; (13aa4 <AESEncode+0x118>)
   139aa:	2200      	movs	r2, #0
   139ac:	70da      	strb	r2, [r3, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
   139ae:	4b3d      	ldr	r3, [pc, #244]	; (13aa4 <AESEncode+0x118>)
   139b0:	2200      	movs	r2, #0
   139b2:	711a      	strb	r2, [r3, #4]
	g_aes_cfg.lod = false;
   139b4:	4b3b      	ldr	r3, [pc, #236]	; (13aa4 <AESEncode+0x118>)
   139b6:	2200      	movs	r2, #0
   139b8:	721a      	strb	r2, [r3, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
   139ba:	4a3a      	ldr	r2, [pc, #232]	; (13aa4 <AESEncode+0x118>)
   139bc:	493a      	ldr	r1, [pc, #232]	; (13aa8 <AESEncode+0x11c>)
   139be:	4b3b      	ldr	r3, [pc, #236]	; (13aac <AESEncode+0x120>)
   139c0:	0018      	movs	r0, r3
   139c2:	4b3b      	ldr	r3, [pc, #236]	; (13ab0 <AESEncode+0x124>)
   139c4:	4798      	blx	r3
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   139c6:	230f      	movs	r3, #15
   139c8:	18fb      	adds	r3, r7, r3
   139ca:	2200      	movs	r2, #0
   139cc:	701a      	strb	r2, [r3, #0]
   139ce:	e016      	b.n	139fe <AESEncode+0x72>
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
   139d0:	230f      	movs	r3, #15
   139d2:	18fb      	adds	r3, r7, r3
   139d4:	781c      	ldrb	r4, [r3, #0]
   139d6:	230f      	movs	r3, #15
   139d8:	18fb      	adds	r3, r7, r3
   139da:	781b      	ldrb	r3, [r3, #0]
   139dc:	009b      	lsls	r3, r3, #2
   139de:	683a      	ldr	r2, [r7, #0]
   139e0:	18d3      	adds	r3, r2, r3
   139e2:	0018      	movs	r0, r3
   139e4:	4b33      	ldr	r3, [pc, #204]	; (13ab4 <AESEncode+0x128>)
   139e6:	4798      	blx	r3
   139e8:	0001      	movs	r1, r0
   139ea:	4b33      	ldr	r3, [pc, #204]	; (13ab8 <AESEncode+0x12c>)
   139ec:	00a2      	lsls	r2, r4, #2
   139ee:	50d1      	str	r1, [r2, r3]
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   139f0:	230f      	movs	r3, #15
   139f2:	18fb      	adds	r3, r7, r3
   139f4:	781a      	ldrb	r2, [r3, #0]
   139f6:	230f      	movs	r3, #15
   139f8:	18fb      	adds	r3, r7, r3
   139fa:	3201      	adds	r2, #1
   139fc:	701a      	strb	r2, [r3, #0]
   139fe:	230f      	movs	r3, #15
   13a00:	18fb      	adds	r3, r7, r3
   13a02:	781b      	ldrb	r3, [r3, #0]
   13a04:	2b03      	cmp	r3, #3
   13a06:	d9e3      	bls.n	139d0 <AESEncode+0x44>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
   13a08:	4a2b      	ldr	r2, [pc, #172]	; (13ab8 <AESEncode+0x12c>)
   13a0a:	4b28      	ldr	r3, [pc, #160]	; (13aac <AESEncode+0x120>)
   13a0c:	0011      	movs	r1, r2
   13a0e:	0018      	movs	r0, r3
   13a10:	4b2a      	ldr	r3, [pc, #168]	; (13abc <AESEncode+0x130>)
   13a12:	4798      	blx	r3

	/* The initialization vector is not used by the ECB cipher mode. */
	
	aes_set_new_message(&aes_instance);
   13a14:	4b25      	ldr	r3, [pc, #148]	; (13aac <AESEncode+0x120>)
   13a16:	0018      	movs	r0, r3
   13a18:	4b29      	ldr	r3, [pc, #164]	; (13ac0 <AESEncode+0x134>)
   13a1a:	4798      	blx	r3
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   13a1c:	230e      	movs	r3, #14
   13a1e:	18fb      	adds	r3, r7, r3
   13a20:	2200      	movs	r2, #0
   13a22:	701a      	strb	r2, [r3, #0]
   13a24:	e016      	b.n	13a54 <AESEncode+0xc8>
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
   13a26:	230e      	movs	r3, #14
   13a28:	18fb      	adds	r3, r7, r3
   13a2a:	781c      	ldrb	r4, [r3, #0]
   13a2c:	230e      	movs	r3, #14
   13a2e:	18fb      	adds	r3, r7, r3
   13a30:	781b      	ldrb	r3, [r3, #0]
   13a32:	009b      	lsls	r3, r3, #2
   13a34:	687a      	ldr	r2, [r7, #4]
   13a36:	18d3      	adds	r3, r2, r3
   13a38:	0018      	movs	r0, r3
   13a3a:	4b1e      	ldr	r3, [pc, #120]	; (13ab4 <AESEncode+0x128>)
   13a3c:	4798      	blx	r3
   13a3e:	0001      	movs	r1, r0
   13a40:	4b1d      	ldr	r3, [pc, #116]	; (13ab8 <AESEncode+0x12c>)
   13a42:	00a2      	lsls	r2, r4, #2
   13a44:	50d1      	str	r1, [r2, r3]
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
   13a46:	230e      	movs	r3, #14
   13a48:	18fb      	adds	r3, r7, r3
   13a4a:	781a      	ldrb	r2, [r3, #0]
   13a4c:	230e      	movs	r3, #14
   13a4e:	18fb      	adds	r3, r7, r3
   13a50:	3201      	adds	r2, #1
   13a52:	701a      	strb	r2, [r3, #0]
   13a54:	230e      	movs	r3, #14
   13a56:	18fb      	adds	r3, r7, r3
   13a58:	781b      	ldrb	r3, [r3, #0]
   13a5a:	2b03      	cmp	r3, #3
   13a5c:	d9e3      	bls.n	13a26 <AESEncode+0x9a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
   13a5e:	4a16      	ldr	r2, [pc, #88]	; (13ab8 <AESEncode+0x12c>)
   13a60:	4b12      	ldr	r3, [pc, #72]	; (13aac <AESEncode+0x120>)
   13a62:	0011      	movs	r1, r2
   13a64:	0018      	movs	r0, r3
   13a66:	4b17      	ldr	r3, [pc, #92]	; (13ac4 <AESEncode+0x138>)
   13a68:	4798      	blx	r3
	aes_clear_new_message(&aes_instance);
   13a6a:	4b10      	ldr	r3, [pc, #64]	; (13aac <AESEncode+0x120>)
   13a6c:	0018      	movs	r0, r3
   13a6e:	4b16      	ldr	r3, [pc, #88]	; (13ac8 <AESEncode+0x13c>)
   13a70:	4798      	blx	r3
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
   13a72:	46c0      	nop			; (mov r8, r8)
   13a74:	4b0d      	ldr	r3, [pc, #52]	; (13aac <AESEncode+0x120>)
   13a76:	0018      	movs	r0, r3
   13a78:	4b14      	ldr	r3, [pc, #80]	; (13acc <AESEncode+0x140>)
   13a7a:	4798      	blx	r3
   13a7c:	0002      	movs	r2, r0
   13a7e:	2301      	movs	r3, #1
   13a80:	4013      	ands	r3, r2
   13a82:	d0f7      	beq.n	13a74 <AESEncode+0xe8>
	}
	aes_read_output_data(&aes_instance,io_data);
   13a84:	4a0c      	ldr	r2, [pc, #48]	; (13ab8 <AESEncode+0x12c>)
   13a86:	4b09      	ldr	r3, [pc, #36]	; (13aac <AESEncode+0x120>)
   13a88:	0011      	movs	r1, r2
   13a8a:	0018      	movs	r0, r3
   13a8c:	4b10      	ldr	r3, [pc, #64]	; (13ad0 <AESEncode+0x144>)
   13a8e:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
   13a90:	4909      	ldr	r1, [pc, #36]	; (13ab8 <AESEncode+0x12c>)
   13a92:	687b      	ldr	r3, [r7, #4]
   13a94:	2210      	movs	r2, #16
   13a96:	0018      	movs	r0, r3
   13a98:	4b0e      	ldr	r3, [pc, #56]	; (13ad4 <AESEncode+0x148>)
   13a9a:	4798      	blx	r3
#endif	
}
   13a9c:	46c0      	nop			; (mov r8, r8)
   13a9e:	46bd      	mov	sp, r7
   13aa0:	b005      	add	sp, #20
   13aa2:	bd90      	pop	{r4, r7, pc}
   13aa4:	200016c0 	.word	0x200016c0
   13aa8:	42003400 	.word	0x42003400
   13aac:	200016cc 	.word	0x200016cc
   13ab0:	000010d9 	.word	0x000010d9
   13ab4:	000138bd 	.word	0x000138bd
   13ab8:	20000fb4 	.word	0x20000fb4
   13abc:	00001195 	.word	0x00001195
   13ac0:	00013905 	.word	0x00013905
   13ac4:	000011fd 	.word	0x000011fd
   13ac8:	00013929 	.word	0x00013929
   13acc:	0001394d 	.word	0x0001394d
   13ad0:	00001291 	.word	0x00001291
   13ad4:	00024149 	.word	0x00024149

00013ad8 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
   13ad8:	b580      	push	{r7, lr}
   13ada:	af00      	add	r7, sp, #0
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
   13adc:	4b08      	ldr	r3, [pc, #32]	; (13b00 <AESInit+0x28>)
   13ade:	0018      	movs	r0, r3
   13ae0:	4b08      	ldr	r3, [pc, #32]	; (13b04 <AESInit+0x2c>)
   13ae2:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
   13ae4:	4a06      	ldr	r2, [pc, #24]	; (13b00 <AESInit+0x28>)
   13ae6:	4908      	ldr	r1, [pc, #32]	; (13b08 <AESInit+0x30>)
   13ae8:	4b08      	ldr	r3, [pc, #32]	; (13b0c <AESInit+0x34>)
   13aea:	0018      	movs	r0, r3
   13aec:	4b08      	ldr	r3, [pc, #32]	; (13b10 <AESInit+0x38>)
   13aee:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
   13af0:	4b06      	ldr	r3, [pc, #24]	; (13b0c <AESInit+0x34>)
   13af2:	0018      	movs	r0, r3
   13af4:	4b07      	ldr	r3, [pc, #28]	; (13b14 <AESInit+0x3c>)
   13af6:	4798      	blx	r3
#endif	
}
   13af8:	46c0      	nop			; (mov r8, r8)
   13afa:	46bd      	mov	sp, r7
   13afc:	bd80      	pop	{r7, pc}
   13afe:	46c0      	nop			; (mov r8, r8)
   13b00:	200016c0 	.word	0x200016c0
   13b04:	00001005 	.word	0x00001005
   13b08:	42003400 	.word	0x42003400
   13b0c:	200016cc 	.word	0x200016cc
   13b10:	0000104d 	.word	0x0000104d
   13b14:	00001089 	.word	0x00001089

00013b18 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
   13b18:	b590      	push	{r4, r7, lr}
   13b1a:	b083      	sub	sp, #12
   13b1c:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
   13b1e:	1dfc      	adds	r4, r7, #7
   13b20:	4b06      	ldr	r3, [pc, #24]	; (13b3c <PDS_Init+0x24>)
   13b22:	4798      	blx	r3
   13b24:	0003      	movs	r3, r0
   13b26:	7023      	strb	r3, [r4, #0]
	pdsUnInitFlag = false;
   13b28:	4b05      	ldr	r3, [pc, #20]	; (13b40 <PDS_Init+0x28>)
   13b2a:	2200      	movs	r2, #0
   13b2c:	701a      	strb	r2, [r3, #0]
	return status;
   13b2e:	1dfb      	adds	r3, r7, #7
   13b30:	781b      	ldrb	r3, [r3, #0]
#else
	return PDS_OK;
#endif
}
   13b32:	0018      	movs	r0, r3
   13b34:	46bd      	mov	sp, r7
   13b36:	b003      	add	sp, #12
   13b38:	bd90      	pop	{r4, r7, pc}
   13b3a:	46c0      	nop			; (mov r8, r8)
   13b3c:	00014905 	.word	0x00014905
   13b40:	20000fc4 	.word	0x20000fc4

00013b44 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
   13b44:	b580      	push	{r7, lr}
   13b46:	b084      	sub	sp, #16
   13b48:	af00      	add	r7, sp, #0
   13b4a:	0002      	movs	r2, r0
   13b4c:	1dfb      	adds	r3, r7, #7
   13b4e:	701a      	strb	r2, [r3, #0]
   13b50:	1dbb      	adds	r3, r7, #6
   13b52:	1c0a      	adds	r2, r1, #0
   13b54:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   13b56:	230f      	movs	r3, #15
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	2200      	movs	r2, #0
   13b5c:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   13b5e:	4b23      	ldr	r3, [pc, #140]	; (13bec <PDS_Store+0xa8>)
   13b60:	781b      	ldrb	r3, [r3, #0]
   13b62:	2201      	movs	r2, #1
   13b64:	4053      	eors	r3, r2
   13b66:	b2db      	uxtb	r3, r3
   13b68:	2b00      	cmp	r3, #0
   13b6a:	d038      	beq.n	13bde <PDS_Store+0x9a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
   13b6c:	1dfb      	adds	r3, r7, #7
   13b6e:	781b      	ldrb	r3, [r3, #0]
   13b70:	4a1f      	ldr	r2, [pc, #124]	; (13bf0 <PDS_Store+0xac>)
   13b72:	011b      	lsls	r3, r3, #4
   13b74:	18d3      	adds	r3, r2, r3
   13b76:	3304      	adds	r3, #4
   13b78:	781b      	ldrb	r3, [r3, #0]
   13b7a:	2b00      	cmp	r3, #0
   13b7c:	d02b      	beq.n	13bd6 <PDS_Store+0x92>
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13b7e:	1dfb      	adds	r3, r7, #7
   13b80:	781a      	ldrb	r2, [r3, #0]
   13b82:	4b1b      	ldr	r3, [pc, #108]	; (13bf0 <PDS_Store+0xac>)
   13b84:	0112      	lsls	r2, r2, #4
   13b86:	58d3      	ldr	r3, [r2, r3]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
   13b88:	2b00      	cmp	r3, #0
   13b8a:	d024      	beq.n	13bd6 <PDS_Store+0x92>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
   13b8c:	1dfb      	adds	r3, r7, #7
   13b8e:	781b      	ldrb	r3, [r3, #0]
   13b90:	4a17      	ldr	r2, [pc, #92]	; (13bf0 <PDS_Store+0xac>)
   13b92:	011b      	lsls	r3, r3, #4
   13b94:	18d3      	adds	r3, r2, r3
   13b96:	3308      	adds	r3, #8
   13b98:	681b      	ldr	r3, [r3, #0]
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13b9a:	2b00      	cmp	r3, #0
   13b9c:	d01b      	beq.n	13bd6 <PDS_Store+0x92>
			   )
		{
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
   13b9e:	1dfb      	adds	r3, r7, #7
   13ba0:	781b      	ldrb	r3, [r3, #0]
   13ba2:	2b0c      	cmp	r3, #12
   13ba4:	d812      	bhi.n	13bcc <PDS_Store+0x88>
			{
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
   13ba6:	1dfb      	adds	r3, r7, #7
   13ba8:	781a      	ldrb	r2, [r3, #0]
   13baa:	4b11      	ldr	r3, [pc, #68]	; (13bf0 <PDS_Store+0xac>)
   13bac:	0112      	lsls	r2, r2, #4
   13bae:	58d2      	ldr	r2, [r2, r3]
   13bb0:	1dbb      	adds	r3, r7, #6
   13bb2:	781b      	ldrb	r3, [r3, #0]
   13bb4:	18d3      	adds	r3, r2, r3
   13bb6:	2201      	movs	r2, #1
   13bb8:	701a      	strb	r2, [r3, #0]
				isFileSet[pdsFileItemIdx] = true;
   13bba:	1dfb      	adds	r3, r7, #7
   13bbc:	781b      	ldrb	r3, [r3, #0]
   13bbe:	4a0d      	ldr	r2, [pc, #52]	; (13bf4 <PDS_Store+0xb0>)
   13bc0:	2101      	movs	r1, #1
   13bc2:	54d1      	strb	r1, [r2, r3]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
   13bc4:	2001      	movs	r0, #1
   13bc6:	4b0c      	ldr	r3, [pc, #48]	; (13bf8 <PDS_Store+0xb4>)
   13bc8:	4798      	blx	r3
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
   13bca:	e008      	b.n	13bde <PDS_Store+0x9a>
			}
			else
			{
				status = PDS_INVLIAD_FILE_IDX;
   13bcc:	230f      	movs	r3, #15
   13bce:	18fb      	adds	r3, r7, r3
   13bd0:	2205      	movs	r2, #5
   13bd2:	701a      	strb	r2, [r3, #0]
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
   13bd4:	e003      	b.n	13bde <PDS_Store+0x9a>
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
   13bd6:	230f      	movs	r3, #15
   13bd8:	18fb      	adds	r3, r7, r3
   13bda:	2205      	movs	r2, #5
   13bdc:	701a      	strb	r2, [r3, #0]
		}
	}
#endif	
	return status; 
   13bde:	230f      	movs	r3, #15
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	781b      	ldrb	r3, [r3, #0]
}
   13be4:	0018      	movs	r0, r3
   13be6:	46bd      	mov	sp, r7
   13be8:	b004      	add	sp, #16
   13bea:	bd80      	pop	{r7, pc}
   13bec:	20000fc4 	.word	0x20000fc4
   13bf0:	200016e4 	.word	0x200016e4
   13bf4:	200016d4 	.word	0x200016d4
   13bf8:	000144cd 	.word	0x000144cd

00013bfc <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
   13bfc:	b580      	push	{r7, lr}
   13bfe:	b082      	sub	sp, #8
   13c00:	af00      	add	r7, sp, #0
	bool return_status = false;
   13c02:	1dbb      	adds	r3, r7, #6
   13c04:	2200      	movs	r2, #0
   13c06:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   13c08:	4b22      	ldr	r3, [pc, #136]	; (13c94 <PDS_IsRestorable+0x98>)
   13c0a:	781b      	ldrb	r3, [r3, #0]
   13c0c:	2201      	movs	r2, #1
   13c0e:	4053      	eors	r3, r2
   13c10:	b2db      	uxtb	r3, r3
   13c12:	2b00      	cmp	r3, #0
   13c14:	d034      	beq.n	13c80 <PDS_IsRestorable+0x84>
	{
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13c16:	1dfb      	adds	r3, r7, #7
   13c18:	2200      	movs	r2, #0
   13c1a:	701a      	strb	r2, [r3, #0]
   13c1c:	e02c      	b.n	13c78 <PDS_IsRestorable+0x7c>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13c1e:	1dfb      	adds	r3, r7, #7
   13c20:	781b      	ldrb	r3, [r3, #0]
   13c22:	4a1d      	ldr	r2, [pc, #116]	; (13c98 <PDS_IsRestorable+0x9c>)
   13c24:	011b      	lsls	r3, r3, #4
   13c26:	18d3      	adds	r3, r2, r3
   13c28:	3304      	adds	r3, #4
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d01e      	beq.n	13c6e <PDS_IsRestorable+0x72>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13c30:	1dfb      	adds	r3, r7, #7
   13c32:	781a      	ldrb	r2, [r3, #0]
   13c34:	4b18      	ldr	r3, [pc, #96]	; (13c98 <PDS_IsRestorable+0x9c>)
   13c36:	0112      	lsls	r2, r2, #4
   13c38:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13c3a:	2b00      	cmp	r3, #0
   13c3c:	d017      	beq.n	13c6e <PDS_IsRestorable+0x72>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
   13c3e:	1dfb      	adds	r3, r7, #7
   13c40:	781b      	ldrb	r3, [r3, #0]
   13c42:	4a15      	ldr	r2, [pc, #84]	; (13c98 <PDS_IsRestorable+0x9c>)
   13c44:	011b      	lsls	r3, r3, #4
   13c46:	18d3      	adds	r3, r2, r3
   13c48:	3308      	adds	r3, #8
   13c4a:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13c4c:	2b00      	cmp	r3, #0
   13c4e:	d00e      	beq.n	13c6e <PDS_IsRestorable+0x72>
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
   13c50:	1dfb      	adds	r3, r7, #7
   13c52:	781b      	ldrb	r3, [r3, #0]
   13c54:	0018      	movs	r0, r3
   13c56:	4b11      	ldr	r3, [pc, #68]	; (13c9c <PDS_IsRestorable+0xa0>)
   13c58:	4798      	blx	r3
   13c5a:	0003      	movs	r3, r0
   13c5c:	001a      	movs	r2, r3
   13c5e:	2301      	movs	r3, #1
   13c60:	4053      	eors	r3, r2
   13c62:	b2db      	uxtb	r3, r3
   13c64:	2b00      	cmp	r3, #0
   13c66:	d002      	beq.n	13c6e <PDS_IsRestorable+0x72>
				{
					return return_status;
   13c68:	1dbb      	adds	r3, r7, #6
   13c6a:	781b      	ldrb	r3, [r3, #0]
   13c6c:	e00d      	b.n	13c8a <PDS_IsRestorable+0x8e>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13c6e:	1dfb      	adds	r3, r7, #7
   13c70:	781a      	ldrb	r2, [r3, #0]
   13c72:	1dfb      	adds	r3, r7, #7
   13c74:	3201      	adds	r2, #1
   13c76:	701a      	strb	r2, [r3, #0]
   13c78:	1dfb      	adds	r3, r7, #7
   13c7a:	781b      	ldrb	r3, [r3, #0]
   13c7c:	2b0c      	cmp	r3, #12
   13c7e:	d9ce      	bls.n	13c1e <PDS_IsRestorable+0x22>
				}
			}
		}
	}
	return_status = true;
   13c80:	1dbb      	adds	r3, r7, #6
   13c82:	2201      	movs	r2, #1
   13c84:	701a      	strb	r2, [r3, #0]
#endif
	return return_status;
   13c86:	1dbb      	adds	r3, r7, #6
   13c88:	781b      	ldrb	r3, [r3, #0]
}
   13c8a:	0018      	movs	r0, r3
   13c8c:	46bd      	mov	sp, r7
   13c8e:	b002      	add	sp, #8
   13c90:	bd80      	pop	{r7, pc}
   13c92:	46c0      	nop			; (mov r8, r8)
   13c94:	20000fc4 	.word	0x20000fc4
   13c98:	200016e4 	.word	0x200016e4
   13c9c:	00015005 	.word	0x00015005

00013ca0 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
   13ca0:	b580      	push	{r7, lr}
   13ca2:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   13ca4:	4b06      	ldr	r3, [pc, #24]	; (13cc0 <PDS_DeleteAll+0x20>)
   13ca6:	781b      	ldrb	r3, [r3, #0]
   13ca8:	2201      	movs	r2, #1
   13caa:	4053      	eors	r3, r2
   13cac:	b2db      	uxtb	r3, r3
   13cae:	2b00      	cmp	r3, #0
   13cb0:	d001      	beq.n	13cb6 <PDS_DeleteAll+0x16>
	{
		pdsWlDeleteAll();
   13cb2:	4b04      	ldr	r3, [pc, #16]	; (13cc4 <PDS_DeleteAll+0x24>)
   13cb4:	4798      	blx	r3
	}
#endif
	return PDS_OK;
   13cb6:	2300      	movs	r3, #0
}
   13cb8:	0018      	movs	r0, r3
   13cba:	46bd      	mov	sp, r7
   13cbc:	bd80      	pop	{r7, pc}
   13cbe:	46c0      	nop			; (mov r8, r8)
   13cc0:	20000fc4 	.word	0x20000fc4
   13cc4:	00015045 	.word	0x00015045

00013cc8 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
   13cc8:	b590      	push	{r4, r7, lr}
   13cca:	b0c9      	sub	sp, #292	; 0x124
   13ccc:	af00      	add	r7, sp, #0
	PdsStatus_t status = PDS_OK;
   13cce:	2320      	movs	r3, #32
   13cd0:	33ff      	adds	r3, #255	; 0xff
   13cd2:	18fb      	adds	r3, r7, r3
   13cd4:	2200      	movs	r2, #0
   13cd6:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   13cd8:	4b91      	ldr	r3, [pc, #580]	; (13f20 <PDS_RestoreAll+0x258>)
   13cda:	781b      	ldrb	r3, [r3, #0]
   13cdc:	2201      	movs	r2, #1
   13cde:	4053      	eors	r3, r2
   13ce0:	b2db      	uxtb	r3, r3
   13ce2:	2b00      	cmp	r3, #0
   13ce4:	d100      	bne.n	13ce8 <PDS_RestoreAll+0x20>
   13ce6:	e112      	b.n	13f0e <PDS_RestoreAll+0x246>
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		PdsMem_t buffer;
		uint16_t size;
		
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13ce8:	238f      	movs	r3, #143	; 0x8f
   13cea:	005b      	lsls	r3, r3, #1
   13cec:	18fb      	adds	r3, r7, r3
   13cee:	2200      	movs	r2, #0
   13cf0:	701a      	strb	r2, [r3, #0]
   13cf2:	e105      	b.n	13f00 <PDS_RestoreAll+0x238>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13cf4:	238f      	movs	r3, #143	; 0x8f
   13cf6:	005b      	lsls	r3, r3, #1
   13cf8:	18fb      	adds	r3, r7, r3
   13cfa:	781b      	ldrb	r3, [r3, #0]
   13cfc:	4a89      	ldr	r2, [pc, #548]	; (13f24 <PDS_RestoreAll+0x25c>)
   13cfe:	011b      	lsls	r3, r3, #4
   13d00:	18d3      	adds	r3, r2, r3
   13d02:	3304      	adds	r3, #4
   13d04:	781b      	ldrb	r3, [r3, #0]
   13d06:	2b00      	cmp	r3, #0
   13d08:	d100      	bne.n	13d0c <PDS_RestoreAll+0x44>
   13d0a:	e0f0      	b.n	13eee <PDS_RestoreAll+0x226>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13d0c:	238f      	movs	r3, #143	; 0x8f
   13d0e:	005b      	lsls	r3, r3, #1
   13d10:	18fb      	adds	r3, r7, r3
   13d12:	781a      	ldrb	r2, [r3, #0]
   13d14:	4b83      	ldr	r3, [pc, #524]	; (13f24 <PDS_RestoreAll+0x25c>)
   13d16:	0112      	lsls	r2, r2, #4
   13d18:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	d100      	bne.n	13d20 <PDS_RestoreAll+0x58>
   13d1e:	e0e6      	b.n	13eee <PDS_RestoreAll+0x226>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
   13d20:	238f      	movs	r3, #143	; 0x8f
   13d22:	005b      	lsls	r3, r3, #1
   13d24:	18fb      	adds	r3, r7, r3
   13d26:	781b      	ldrb	r3, [r3, #0]
   13d28:	4a7e      	ldr	r2, [pc, #504]	; (13f24 <PDS_RestoreAll+0x25c>)
   13d2a:	011b      	lsls	r3, r3, #4
   13d2c:	18d3      	adds	r3, r2, r3
   13d2e:	3308      	adds	r3, #8
   13d30:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13d32:	2b00      	cmp	r3, #0
   13d34:	d100      	bne.n	13d38 <PDS_RestoreAll+0x70>
   13d36:	e0da      	b.n	13eee <PDS_RestoreAll+0x226>
			)
			{
				memset(&buffer, 0, sizeof(PdsMem_t));
   13d38:	2380      	movs	r3, #128	; 0x80
   13d3a:	005a      	lsls	r2, r3, #1
   13d3c:	1d3b      	adds	r3, r7, #4
   13d3e:	2100      	movs	r1, #0
   13d40:	0018      	movs	r0, r3
   13d42:	4b79      	ldr	r3, [pc, #484]	; (13f28 <PDS_RestoreAll+0x260>)
   13d44:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
   13d46:	238f      	movs	r3, #143	; 0x8f
   13d48:	005b      	lsls	r3, r3, #1
   13d4a:	18fb      	adds	r3, r7, r3
   13d4c:	781b      	ldrb	r3, [r3, #0]
   13d4e:	4a75      	ldr	r2, [pc, #468]	; (13f24 <PDS_RestoreAll+0x25c>)
   13d50:	011b      	lsls	r3, r3, #4
   13d52:	18d3      	adds	r3, r2, r3
   13d54:	3308      	adds	r3, #8
   13d56:	681a      	ldr	r2, [r3, #0]
   13d58:	238f      	movs	r3, #143	; 0x8f
   13d5a:	005b      	lsls	r3, r3, #1
   13d5c:	18fb      	adds	r3, r7, r3
   13d5e:	781b      	ldrb	r3, [r3, #0]
   13d60:	4970      	ldr	r1, [pc, #448]	; (13f24 <PDS_RestoreAll+0x25c>)
   13d62:	011b      	lsls	r3, r3, #4
   13d64:	18cb      	adds	r3, r1, r3
   13d66:	3304      	adds	r3, #4
   13d68:	781b      	ldrb	r3, [r3, #0]
   13d6a:	4970      	ldr	r1, [pc, #448]	; (13f2c <PDS_RestoreAll+0x264>)
   13d6c:	468c      	mov	ip, r1
   13d6e:	4463      	add	r3, ip
   13d70:	00db      	lsls	r3, r3, #3
   13d72:	18d1      	adds	r1, r2, r3
   13d74:	2386      	movs	r3, #134	; 0x86
   13d76:	005b      	lsls	r3, r3, #1
   13d78:	18fb      	adds	r3, r7, r3
   13d7a:	2208      	movs	r2, #8
   13d7c:	0018      	movs	r0, r3
   13d7e:	4b6c      	ldr	r3, [pc, #432]	; (13f30 <PDS_RestoreAll+0x268>)
   13d80:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
   13d82:	2386      	movs	r3, #134	; 0x86
   13d84:	005b      	lsls	r3, r3, #1
   13d86:	18fb      	adds	r3, r7, r3
   13d88:	79db      	ldrb	r3, [r3, #7]
   13d8a:	b29a      	uxth	r2, r3
   13d8c:	2386      	movs	r3, #134	; 0x86
   13d8e:	005b      	lsls	r3, r3, #1
   13d90:	18fb      	adds	r3, r7, r3
   13d92:	799b      	ldrb	r3, [r3, #6]
   13d94:	b29b      	uxth	r3, r3
   13d96:	18d3      	adds	r3, r2, r3
   13d98:	b29a      	uxth	r2, r3
   13d9a:	238d      	movs	r3, #141	; 0x8d
   13d9c:	005b      	lsls	r3, r3, #1
   13d9e:	18fb      	adds	r3, r7, r3
   13da0:	3205      	adds	r2, #5
   13da2:	801a      	strh	r2, [r3, #0]
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
   13da4:	2320      	movs	r3, #32
   13da6:	33ff      	adds	r3, #255	; 0xff
   13da8:	18fc      	adds	r4, r7, r3
   13daa:	238d      	movs	r3, #141	; 0x8d
   13dac:	005b      	lsls	r3, r3, #1
   13dae:	18fb      	adds	r3, r7, r3
   13db0:	881a      	ldrh	r2, [r3, #0]
   13db2:	1d39      	adds	r1, r7, #4
   13db4:	238f      	movs	r3, #143	; 0x8f
   13db6:	005b      	lsls	r3, r3, #1
   13db8:	18fb      	adds	r3, r7, r3
   13dba:	781b      	ldrb	r3, [r3, #0]
   13dbc:	0018      	movs	r0, r3
   13dbe:	4b5d      	ldr	r3, [pc, #372]	; (13f34 <PDS_RestoreAll+0x26c>)
   13dc0:	4798      	blx	r3
   13dc2:	0003      	movs	r3, r0
   13dc4:	7023      	strb	r3, [r4, #0]
				if (status != PDS_OK)
   13dc6:	2320      	movs	r3, #32
   13dc8:	33ff      	adds	r3, #255	; 0xff
   13dca:	18fb      	adds	r3, r7, r3
   13dcc:	781b      	ldrb	r3, [r3, #0]
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d004      	beq.n	13ddc <PDS_RestoreAll+0x114>
				{
					return status;
   13dd2:	2320      	movs	r3, #32
   13dd4:	33ff      	adds	r3, #255	; 0xff
   13dd6:	18fb      	adds	r3, r7, r3
   13dd8:	781b      	ldrb	r3, [r3, #0]
   13dda:	e09c      	b.n	13f16 <PDS_RestoreAll+0x24e>
				}
				
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   13ddc:	231e      	movs	r3, #30
   13dde:	33ff      	adds	r3, #255	; 0xff
   13de0:	18fb      	adds	r3, r7, r3
   13de2:	2200      	movs	r2, #0
   13de4:	701a      	strb	r2, [r3, #0]
   13de6:	e05e      	b.n	13ea6 <PDS_RestoreAll+0x1de>
				{
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
   13de8:	238f      	movs	r3, #143	; 0x8f
   13dea:	005b      	lsls	r3, r3, #1
   13dec:	18fb      	adds	r3, r7, r3
   13dee:	781b      	ldrb	r3, [r3, #0]
   13df0:	4a4c      	ldr	r2, [pc, #304]	; (13f24 <PDS_RestoreAll+0x25c>)
   13df2:	011b      	lsls	r3, r3, #4
   13df4:	18d3      	adds	r3, r2, r3
   13df6:	3308      	adds	r3, #8
   13df8:	681a      	ldr	r2, [r3, #0]
   13dfa:	231e      	movs	r3, #30
   13dfc:	33ff      	adds	r3, #255	; 0xff
   13dfe:	18fb      	adds	r3, r7, r3
   13e00:	781b      	ldrb	r3, [r3, #0]
   13e02:	00db      	lsls	r3, r3, #3
   13e04:	18d1      	adds	r1, r2, r3
   13e06:	2386      	movs	r3, #134	; 0x86
   13e08:	005b      	lsls	r3, r3, #1
   13e0a:	18fb      	adds	r3, r7, r3
   13e0c:	2208      	movs	r2, #8
   13e0e:	0018      	movs	r0, r3
   13e10:	4b47      	ldr	r3, [pc, #284]	; (13f30 <PDS_RestoreAll+0x268>)
   13e12:	4798      	blx	r3
					ptr = (uint8_t *)(&(buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
   13e14:	1d3b      	adds	r3, r7, #4
   13e16:	330d      	adds	r3, #13
   13e18:	228a      	movs	r2, #138	; 0x8a
   13e1a:	0052      	lsls	r2, r2, #1
   13e1c:	18ba      	adds	r2, r7, r2
   13e1e:	6013      	str	r3, [r2, #0]
					ptr += itemInfo.itemOffset;
   13e20:	2386      	movs	r3, #134	; 0x86
   13e22:	005b      	lsls	r3, r3, #1
   13e24:	18fb      	adds	r3, r7, r3
   13e26:	79db      	ldrb	r3, [r3, #7]
   13e28:	001a      	movs	r2, r3
   13e2a:	238a      	movs	r3, #138	; 0x8a
   13e2c:	005b      	lsls	r3, r3, #1
   13e2e:	18fb      	adds	r3, r7, r3
   13e30:	681b      	ldr	r3, [r3, #0]
   13e32:	189b      	adds	r3, r3, r2
   13e34:	228a      	movs	r2, #138	; 0x8a
   13e36:	0052      	lsls	r2, r2, #1
   13e38:	18ba      	adds	r2, r7, r2
   13e3a:	6013      	str	r3, [r2, #0]
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
   13e3c:	1d7a      	adds	r2, r7, #5
   13e3e:	32ff      	adds	r2, #255	; 0xff
   13e40:	238a      	movs	r3, #138	; 0x8a
   13e42:	005b      	lsls	r3, r3, #1
   13e44:	18fb      	adds	r3, r7, r3
   13e46:	681b      	ldr	r3, [r3, #0]
   13e48:	0010      	movs	r0, r2
   13e4a:	0019      	movs	r1, r3
   13e4c:	2305      	movs	r3, #5
   13e4e:	001a      	movs	r2, r3
   13e50:	4b37      	ldr	r3, [pc, #220]	; (13f30 <PDS_RestoreAll+0x268>)
   13e52:	4798      	blx	r3
					ptr += sizeof(ItemHeader_t);
   13e54:	238a      	movs	r3, #138	; 0x8a
   13e56:	005b      	lsls	r3, r3, #1
   13e58:	18fb      	adds	r3, r7, r3
   13e5a:	681b      	ldr	r3, [r3, #0]
   13e5c:	3305      	adds	r3, #5
   13e5e:	228a      	movs	r2, #138	; 0x8a
   13e60:	0052      	lsls	r2, r2, #1
   13e62:	18ba      	adds	r2, r7, r2
   13e64:	6013      	str	r3, [r2, #0]
					if (false == itemHeader.delete)
   13e66:	1d7b      	adds	r3, r7, #5
   13e68:	33ff      	adds	r3, #255	; 0xff
   13e6a:	791b      	ldrb	r3, [r3, #4]
   13e6c:	2201      	movs	r2, #1
   13e6e:	4053      	eors	r3, r2
   13e70:	b2db      	uxtb	r3, r3
   13e72:	2b00      	cmp	r3, #0
   13e74:	d00e      	beq.n	13e94 <PDS_RestoreAll+0x1cc>
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
   13e76:	2386      	movs	r3, #134	; 0x86
   13e78:	005b      	lsls	r3, r3, #1
   13e7a:	18fb      	adds	r3, r7, r3
   13e7c:	6818      	ldr	r0, [r3, #0]
   13e7e:	1d7b      	adds	r3, r7, #5
   13e80:	33ff      	adds	r3, #255	; 0xff
   13e82:	789b      	ldrb	r3, [r3, #2]
   13e84:	001a      	movs	r2, r3
   13e86:	238a      	movs	r3, #138	; 0x8a
   13e88:	005b      	lsls	r3, r3, #1
   13e8a:	18fb      	adds	r3, r7, r3
   13e8c:	681b      	ldr	r3, [r3, #0]
   13e8e:	0019      	movs	r1, r3
   13e90:	4b27      	ldr	r3, [pc, #156]	; (13f30 <PDS_RestoreAll+0x268>)
   13e92:	4798      	blx	r3
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   13e94:	231e      	movs	r3, #30
   13e96:	33ff      	adds	r3, #255	; 0xff
   13e98:	18fb      	adds	r3, r7, r3
   13e9a:	781a      	ldrb	r2, [r3, #0]
   13e9c:	231e      	movs	r3, #30
   13e9e:	33ff      	adds	r3, #255	; 0xff
   13ea0:	18fb      	adds	r3, r7, r3
   13ea2:	3201      	adds	r2, #1
   13ea4:	701a      	strb	r2, [r3, #0]
   13ea6:	238f      	movs	r3, #143	; 0x8f
   13ea8:	005b      	lsls	r3, r3, #1
   13eaa:	18fb      	adds	r3, r7, r3
   13eac:	781b      	ldrb	r3, [r3, #0]
   13eae:	4a1d      	ldr	r2, [pc, #116]	; (13f24 <PDS_RestoreAll+0x25c>)
   13eb0:	011b      	lsls	r3, r3, #4
   13eb2:	18d3      	adds	r3, r2, r3
   13eb4:	3304      	adds	r3, #4
   13eb6:	781b      	ldrb	r3, [r3, #0]
   13eb8:	221e      	movs	r2, #30
   13eba:	32ff      	adds	r2, #255	; 0xff
   13ebc:	18ba      	adds	r2, r7, r2
   13ebe:	7812      	ldrb	r2, [r2, #0]
   13ec0:	429a      	cmp	r2, r3
   13ec2:	d391      	bcc.n	13de8 <PDS_RestoreAll+0x120>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
   13ec4:	238f      	movs	r3, #143	; 0x8f
   13ec6:	005b      	lsls	r3, r3, #1
   13ec8:	18fb      	adds	r3, r7, r3
   13eca:	781b      	ldrb	r3, [r3, #0]
   13ecc:	4a15      	ldr	r2, [pc, #84]	; (13f24 <PDS_RestoreAll+0x25c>)
   13ece:	011b      	lsls	r3, r3, #4
   13ed0:	18d3      	adds	r3, r2, r3
   13ed2:	330c      	adds	r3, #12
   13ed4:	681b      	ldr	r3, [r3, #0]
   13ed6:	2b00      	cmp	r3, #0
   13ed8:	d009      	beq.n	13eee <PDS_RestoreAll+0x226>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
   13eda:	238f      	movs	r3, #143	; 0x8f
   13edc:	005b      	lsls	r3, r3, #1
   13ede:	18fb      	adds	r3, r7, r3
   13ee0:	781b      	ldrb	r3, [r3, #0]
   13ee2:	4a10      	ldr	r2, [pc, #64]	; (13f24 <PDS_RestoreAll+0x25c>)
   13ee4:	011b      	lsls	r3, r3, #4
   13ee6:	18d3      	adds	r3, r2, r3
   13ee8:	330c      	adds	r3, #12
   13eea:	681b      	ldr	r3, [r3, #0]
   13eec:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13eee:	238f      	movs	r3, #143	; 0x8f
   13ef0:	005b      	lsls	r3, r3, #1
   13ef2:	18fb      	adds	r3, r7, r3
   13ef4:	781a      	ldrb	r2, [r3, #0]
   13ef6:	238f      	movs	r3, #143	; 0x8f
   13ef8:	005b      	lsls	r3, r3, #1
   13efa:	18fb      	adds	r3, r7, r3
   13efc:	3201      	adds	r2, #1
   13efe:	701a      	strb	r2, [r3, #0]
   13f00:	238f      	movs	r3, #143	; 0x8f
   13f02:	005b      	lsls	r3, r3, #1
   13f04:	18fb      	adds	r3, r7, r3
   13f06:	781b      	ldrb	r3, [r3, #0]
   13f08:	2b0c      	cmp	r3, #12
   13f0a:	d800      	bhi.n	13f0e <PDS_RestoreAll+0x246>
   13f0c:	e6f2      	b.n	13cf4 <PDS_RestoreAll+0x2c>
				}
			}
		}
	}
#endif	
	return status;
   13f0e:	2320      	movs	r3, #32
   13f10:	33ff      	adds	r3, #255	; 0xff
   13f12:	18fb      	adds	r3, r7, r3
   13f14:	781b      	ldrb	r3, [r3, #0]
}
   13f16:	0018      	movs	r0, r3
   13f18:	46bd      	mov	sp, r7
   13f1a:	b049      	add	sp, #292	; 0x124
   13f1c:	bd90      	pop	{r4, r7, pc}
   13f1e:	46c0      	nop			; (mov r8, r8)
   13f20:	20000fc4 	.word	0x20000fc4
   13f24:	200016e4 	.word	0x200016e4
   13f28:	000241cd 	.word	0x000241cd
   13f2c:	1fffffff 	.word	0x1fffffff
   13f30:	00024149 	.word	0x00024149
   13f34:	00014c6d 	.word	0x00014c6d

00013f38 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
   13f38:	b580      	push	{r7, lr}
   13f3a:	b082      	sub	sp, #8
   13f3c:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   13f3e:	4b2c      	ldr	r3, [pc, #176]	; (13ff0 <PDS_StoreAll+0xb8>)
   13f40:	781b      	ldrb	r3, [r3, #0]
   13f42:	2201      	movs	r2, #1
   13f44:	4053      	eors	r3, r2
   13f46:	b2db      	uxtb	r3, r3
   13f48:	2b00      	cmp	r3, #0
   13f4a:	d04b      	beq.n	13fe4 <PDS_StoreAll+0xac>
	{
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13f4c:	1dfb      	adds	r3, r7, #7
   13f4e:	2200      	movs	r2, #0
   13f50:	701a      	strb	r2, [r3, #0]
   13f52:	e040      	b.n	13fd6 <PDS_StoreAll+0x9e>
		{
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13f54:	1dfb      	adds	r3, r7, #7
   13f56:	781b      	ldrb	r3, [r3, #0]
   13f58:	4a26      	ldr	r2, [pc, #152]	; (13ff4 <PDS_StoreAll+0xbc>)
   13f5a:	011b      	lsls	r3, r3, #4
   13f5c:	18d3      	adds	r3, r2, r3
   13f5e:	3304      	adds	r3, #4
   13f60:	781b      	ldrb	r3, [r3, #0]
   13f62:	2b00      	cmp	r3, #0
   13f64:	d032      	beq.n	13fcc <PDS_StoreAll+0x94>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13f66:	1dfb      	adds	r3, r7, #7
   13f68:	781a      	ldrb	r2, [r3, #0]
   13f6a:	4b22      	ldr	r3, [pc, #136]	; (13ff4 <PDS_StoreAll+0xbc>)
   13f6c:	0112      	lsls	r2, r2, #4
   13f6e:	58d3      	ldr	r3, [r2, r3]
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
   13f70:	2b00      	cmp	r3, #0
   13f72:	d02b      	beq.n	13fcc <PDS_StoreAll+0x94>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
   13f74:	1dfb      	adds	r3, r7, #7
   13f76:	781b      	ldrb	r3, [r3, #0]
   13f78:	4a1e      	ldr	r2, [pc, #120]	; (13ff4 <PDS_StoreAll+0xbc>)
   13f7a:	011b      	lsls	r3, r3, #4
   13f7c:	18d3      	adds	r3, r2, r3
   13f7e:	3308      	adds	r3, #8
   13f80:	681b      	ldr	r3, [r3, #0]
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
   13f82:	2b00      	cmp	r3, #0
   13f84:	d022      	beq.n	13fcc <PDS_StoreAll+0x94>
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   13f86:	1dbb      	adds	r3, r7, #6
   13f88:	2200      	movs	r2, #0
   13f8a:	701a      	strb	r2, [r3, #0]
   13f8c:	e00e      	b.n	13fac <PDS_StoreAll+0x74>
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
   13f8e:	1dfb      	adds	r3, r7, #7
   13f90:	781a      	ldrb	r2, [r3, #0]
   13f92:	4b18      	ldr	r3, [pc, #96]	; (13ff4 <PDS_StoreAll+0xbc>)
   13f94:	0112      	lsls	r2, r2, #4
   13f96:	58d2      	ldr	r2, [r2, r3]
   13f98:	1dbb      	adds	r3, r7, #6
   13f9a:	781b      	ldrb	r3, [r3, #0]
   13f9c:	18d3      	adds	r3, r2, r3
   13f9e:	2201      	movs	r2, #1
   13fa0:	701a      	strb	r2, [r3, #0]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   13fa2:	1dbb      	adds	r3, r7, #6
   13fa4:	781a      	ldrb	r2, [r3, #0]
   13fa6:	1dbb      	adds	r3, r7, #6
   13fa8:	3201      	adds	r2, #1
   13faa:	701a      	strb	r2, [r3, #0]
   13fac:	1dfb      	adds	r3, r7, #7
   13fae:	781b      	ldrb	r3, [r3, #0]
   13fb0:	4a10      	ldr	r2, [pc, #64]	; (13ff4 <PDS_StoreAll+0xbc>)
   13fb2:	011b      	lsls	r3, r3, #4
   13fb4:	18d3      	adds	r3, r2, r3
   13fb6:	3304      	adds	r3, #4
   13fb8:	781b      	ldrb	r3, [r3, #0]
   13fba:	1dba      	adds	r2, r7, #6
   13fbc:	7812      	ldrb	r2, [r2, #0]
   13fbe:	429a      	cmp	r2, r3
   13fc0:	d3e5      	bcc.n	13f8e <PDS_StoreAll+0x56>
				}
				isFileSet[pdsFileItemIdx] = true;
   13fc2:	1dfb      	adds	r3, r7, #7
   13fc4:	781b      	ldrb	r3, [r3, #0]
   13fc6:	4a0c      	ldr	r2, [pc, #48]	; (13ff8 <PDS_StoreAll+0xc0>)
   13fc8:	2101      	movs	r1, #1
   13fca:	54d1      	strb	r1, [r2, r3]
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
   13fcc:	1dfb      	adds	r3, r7, #7
   13fce:	781a      	ldrb	r2, [r3, #0]
   13fd0:	1dfb      	adds	r3, r7, #7
   13fd2:	3201      	adds	r2, #1
   13fd4:	701a      	strb	r2, [r3, #0]
   13fd6:	1dfb      	adds	r3, r7, #7
   13fd8:	781b      	ldrb	r3, [r3, #0]
   13fda:	2b0c      	cmp	r3, #12
   13fdc:	d9ba      	bls.n	13f54 <PDS_StoreAll+0x1c>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
   13fde:	2001      	movs	r0, #1
   13fe0:	4b06      	ldr	r3, [pc, #24]	; (13ffc <PDS_StoreAll+0xc4>)
   13fe2:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
   13fe4:	2300      	movs	r3, #0
}
   13fe6:	0018      	movs	r0, r3
   13fe8:	46bd      	mov	sp, r7
   13fea:	b002      	add	sp, #8
   13fec:	bd80      	pop	{r7, pc}
   13fee:	46c0      	nop			; (mov r8, r8)
   13ff0:	20000fc4 	.word	0x20000fc4
   13ff4:	200016e4 	.word	0x200016e4
   13ff8:	200016d4 	.word	0x200016d4
   13ffc:	000144cd 	.word	0x000144cd

00014000 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
   14000:	b084      	sub	sp, #16
   14002:	b5b0      	push	{r4, r5, r7, lr}
   14004:	b084      	sub	sp, #16
   14006:	af00      	add	r7, sp, #0
   14008:	0004      	movs	r4, r0
   1400a:	2004      	movs	r0, #4
   1400c:	2520      	movs	r5, #32
   1400e:	46ac      	mov	ip, r5
   14010:	44bc      	add	ip, r7
   14012:	4460      	add	r0, ip
   14014:	6001      	str	r1, [r0, #0]
   14016:	6042      	str	r2, [r0, #4]
   14018:	6083      	str	r3, [r0, #8]
   1401a:	1dfb      	adds	r3, r7, #7
   1401c:	1c22      	adds	r2, r4, #0
   1401e:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   14020:	230f      	movs	r3, #15
   14022:	18fb      	adds	r3, r7, r3
   14024:	2200      	movs	r2, #0
   14026:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   14028:	4b12      	ldr	r3, [pc, #72]	; (14074 <PDS_RegFile+0x74>)
   1402a:	781b      	ldrb	r3, [r3, #0]
   1402c:	2201      	movs	r2, #1
   1402e:	4053      	eors	r3, r2
   14030:	b2db      	uxtb	r3, r3
   14032:	2b00      	cmp	r3, #0
   14034:	d013      	beq.n	1405e <PDS_RegFile+0x5e>
	{
		if (PDS_MAX_FILE_IDX > argFileId)
   14036:	1dfb      	adds	r3, r7, #7
   14038:	781b      	ldrb	r3, [r3, #0]
   1403a:	2b0c      	cmp	r3, #12
   1403c:	d80b      	bhi.n	14056 <PDS_RegFile+0x56>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
   1403e:	1dfb      	adds	r3, r7, #7
   14040:	781b      	ldrb	r3, [r3, #0]
   14042:	011a      	lsls	r2, r3, #4
   14044:	4b0c      	ldr	r3, [pc, #48]	; (14078 <PDS_RegFile+0x78>)
   14046:	18d3      	adds	r3, r2, r3
   14048:	2224      	movs	r2, #36	; 0x24
   1404a:	18b9      	adds	r1, r7, r2
   1404c:	2210      	movs	r2, #16
   1404e:	0018      	movs	r0, r3
   14050:	4b0a      	ldr	r3, [pc, #40]	; (1407c <PDS_RegFile+0x7c>)
   14052:	4798      	blx	r3
   14054:	e003      	b.n	1405e <PDS_RegFile+0x5e>
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
   14056:	230f      	movs	r3, #15
   14058:	18fb      	adds	r3, r7, r3
   1405a:	2205      	movs	r2, #5
   1405c:	701a      	strb	r2, [r3, #0]
		}
	}
#endif	
	return status;
   1405e:	230f      	movs	r3, #15
   14060:	18fb      	adds	r3, r7, r3
   14062:	781b      	ldrb	r3, [r3, #0]
}
   14064:	0018      	movs	r0, r3
   14066:	46bd      	mov	sp, r7
   14068:	b004      	add	sp, #16
   1406a:	bcb0      	pop	{r4, r5, r7}
   1406c:	bc08      	pop	{r3}
   1406e:	b004      	add	sp, #16
   14070:	4718      	bx	r3
   14072:	46c0      	nop			; (mov r8, r8)
   14074:	20000fc4 	.word	0x20000fc4
   14078:	200016e4 	.word	0x200016e4
   1407c:	00024149 	.word	0x00024149

00014080 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
   14080:	b580      	push	{r7, lr}
   14082:	b084      	sub	sp, #16
   14084:	af00      	add	r7, sp, #0
   14086:	0002      	movs	r2, r0
   14088:	1dfb      	adds	r3, r7, #7
   1408a:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   1408c:	230f      	movs	r3, #15
   1408e:	18fb      	adds	r3, r7, r3
   14090:	2200      	movs	r2, #0
   14092:	701a      	strb	r2, [r3, #0]
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
   14094:	4b10      	ldr	r3, [pc, #64]	; (140d8 <PDS_UnRegFile+0x58>)
   14096:	781b      	ldrb	r3, [r3, #0]
   14098:	2201      	movs	r2, #1
   1409a:	4053      	eors	r3, r2
   1409c:	b2db      	uxtb	r3, r3
   1409e:	2b00      	cmp	r3, #0
   140a0:	d012      	beq.n	140c8 <PDS_UnRegFile+0x48>
	{
		if (PDS_MAX_FILE_IDX > argFileId)
   140a2:	1dfb      	adds	r3, r7, #7
   140a4:	781b      	ldrb	r3, [r3, #0]
   140a6:	2b0c      	cmp	r3, #12
   140a8:	d80a      	bhi.n	140c0 <PDS_UnRegFile+0x40>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
   140aa:	1dfb      	adds	r3, r7, #7
   140ac:	781b      	ldrb	r3, [r3, #0]
   140ae:	011a      	lsls	r2, r3, #4
   140b0:	4b0a      	ldr	r3, [pc, #40]	; (140dc <PDS_UnRegFile+0x5c>)
   140b2:	18d3      	adds	r3, r2, r3
   140b4:	2210      	movs	r2, #16
   140b6:	2100      	movs	r1, #0
   140b8:	0018      	movs	r0, r3
   140ba:	4b09      	ldr	r3, [pc, #36]	; (140e0 <PDS_UnRegFile+0x60>)
   140bc:	4798      	blx	r3
   140be:	e003      	b.n	140c8 <PDS_UnRegFile+0x48>
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
   140c0:	230f      	movs	r3, #15
   140c2:	18fb      	adds	r3, r7, r3
   140c4:	2205      	movs	r2, #5
   140c6:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
	return status;
   140c8:	230f      	movs	r3, #15
   140ca:	18fb      	adds	r3, r7, r3
   140cc:	781b      	ldrb	r3, [r3, #0]
}
   140ce:	0018      	movs	r0, r3
   140d0:	46bd      	mov	sp, r7
   140d2:	b004      	add	sp, #16
   140d4:	bd80      	pop	{r7, pc}
   140d6:	46c0      	nop			; (mov r8, r8)
   140d8:	20000fc4 	.word	0x20000fc4
   140dc:	200016e4 	.word	0x200016e4
   140e0:	000241cd 	.word	0x000241cd

000140e4 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
   140e4:	b590      	push	{r4, r7, lr}
   140e6:	b087      	sub	sp, #28
   140e8:	af00      	add	r7, sp, #0
	PdsStatus_t status = PDS_OK;
   140ea:	2317      	movs	r3, #23
   140ec:	18fb      	adds	r3, r7, r3
   140ee:	2200      	movs	r2, #0
   140f0:	701a      	strb	r2, [r3, #0]
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
   140f2:	1d3b      	adds	r3, r7, #4
   140f4:	0018      	movs	r0, r3
   140f6:	4b11      	ldr	r3, [pc, #68]	; (1413c <pdsNvmInit+0x58>)
   140f8:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
   140fa:	2316      	movs	r3, #22
   140fc:	18fc      	adds	r4, r7, r3
   140fe:	2000      	movs	r0, #0
   14100:	4b0f      	ldr	r3, [pc, #60]	; (14140 <pdsNvmInit+0x5c>)
   14102:	4798      	blx	r3
   14104:	0003      	movs	r3, r0
   14106:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != (status_code_genare_t) statusCode)
   14108:	2316      	movs	r3, #22
   1410a:	18fb      	adds	r3, r7, r3
   1410c:	781b      	ldrb	r3, [r3, #0]
   1410e:	b25b      	sxtb	r3, r3
   14110:	2b00      	cmp	r3, #0
   14112:	d001      	beq.n	14118 <pdsNvmInit+0x34>
	{
		return PDS_ERROR;
   14114:	2302      	movs	r3, #2
   14116:	e00c      	b.n	14132 <pdsNvmInit+0x4e>
	}

	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
   14118:	1d3b      	adds	r3, r7, #4
   1411a:	899b      	ldrh	r3, [r3, #12]
   1411c:	089b      	lsrs	r3, r3, #2
   1411e:	b29b      	uxth	r3, r3
   14120:	021b      	lsls	r3, r3, #8
   14122:	4a08      	ldr	r2, [pc, #32]	; (14144 <pdsNvmInit+0x60>)
   14124:	4293      	cmp	r3, r2
   14126:	dc01      	bgt.n	1412c <pdsNvmInit+0x48>
	{
		return PDS_NOT_ENOUGH_MEMORY;
   14128:	2304      	movs	r3, #4
   1412a:	e002      	b.n	14132 <pdsNvmInit+0x4e>
	}
	
	return status;
   1412c:	2317      	movs	r3, #23
   1412e:	18fb      	adds	r3, r7, r3
   14130:	781b      	ldrb	r3, [r3, #0]
}
   14132:	0018      	movs	r0, r3
   14134:	46bd      	mov	sp, r7
   14136:	b007      	add	sp, #28
   14138:	bd90      	pop	{r4, r7, pc}
   1413a:	46c0      	nop			; (mov r8, r8)
   1413c:	00002009 	.word	0x00002009
   14140:	000170d5 	.word	0x000170d5
   14144:	00001fff 	.word	0x00001fff

00014148 <pdsNvmWrite>:
\param[in] 	buffer - The buffer containing data to be written.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmWrite(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
   14148:	b5b0      	push	{r4, r5, r7, lr}
   1414a:	b086      	sub	sp, #24
   1414c:	af00      	add	r7, sp, #0
   1414e:	6039      	str	r1, [r7, #0]
   14150:	0011      	movs	r1, r2
   14152:	1dbb      	adds	r3, r7, #6
   14154:	1c02      	adds	r2, r0, #0
   14156:	801a      	strh	r2, [r3, #0]
   14158:	1d3b      	adds	r3, r7, #4
   1415a:	1c0a      	adds	r2, r1, #0
   1415c:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   1415e:	2317      	movs	r3, #23
   14160:	18fb      	adds	r3, r7, r3
   14162:	2200      	movs	r2, #0
   14164:	701a      	strb	r2, [r3, #0]
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
   14166:	683b      	ldr	r3, [r7, #0]
   14168:	2201      	movs	r2, #1
   1416a:	70da      	strb	r2, [r3, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
   1416c:	1d3b      	adds	r3, r7, #4
   1416e:	881b      	ldrh	r3, [r3, #0]
   14170:	b2da      	uxtb	r2, r3
   14172:	683b      	ldr	r3, [r7, #0]
   14174:	709a      	strb	r2, [r3, #2]
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
   14176:	683b      	ldr	r3, [r7, #0]
   14178:	789b      	ldrb	r3, [r3, #2]
   1417a:	b29a      	uxth	r2, r3
   1417c:	683b      	ldr	r3, [r7, #0]
   1417e:	3304      	adds	r3, #4
   14180:	0019      	movs	r1, r3
   14182:	0010      	movs	r0, r2
   14184:	4b24      	ldr	r3, [pc, #144]	; (14218 <pdsNvmWrite+0xd0>)
   14186:	4798      	blx	r3
   14188:	0003      	movs	r3, r0
   1418a:	001a      	movs	r2, r3
   1418c:	683b      	ldr	r3, [r7, #0]
   1418e:	21ff      	movs	r1, #255	; 0xff
   14190:	4011      	ands	r1, r2
   14192:	000c      	movs	r4, r1
   14194:	7819      	ldrb	r1, [r3, #0]
   14196:	2000      	movs	r0, #0
   14198:	4001      	ands	r1, r0
   1419a:	1c08      	adds	r0, r1, #0
   1419c:	1c21      	adds	r1, r4, #0
   1419e:	4301      	orrs	r1, r0
   141a0:	7019      	strb	r1, [r3, #0]
   141a2:	0a12      	lsrs	r2, r2, #8
   141a4:	b290      	uxth	r0, r2
   141a6:	785a      	ldrb	r2, [r3, #1]
   141a8:	2100      	movs	r1, #0
   141aa:	400a      	ands	r2, r1
   141ac:	1c11      	adds	r1, r2, #0
   141ae:	1c02      	adds	r2, r0, #0
   141b0:	430a      	orrs	r2, r1
   141b2:	705a      	strb	r2, [r3, #1]
	//buffer->NVM_Struct.pdsNvmHeader.size = size;
	size += sizeof(PdsNvmHeader_t);
   141b4:	1d3b      	adds	r3, r7, #4
   141b6:	1d3a      	adds	r2, r7, #4
   141b8:	8812      	ldrh	r2, [r2, #0]
   141ba:	3204      	adds	r2, #4
   141bc:	801a      	strh	r2, [r3, #0]
	uint32_t addr = nvmLogicalRowToPhysicalAddr(rowId);
   141be:	1dbb      	adds	r3, r7, #6
   141c0:	881b      	ldrh	r3, [r3, #0]
   141c2:	0018      	movs	r0, r3
   141c4:	4b15      	ldr	r3, [pc, #84]	; (1421c <pdsNvmWrite+0xd4>)
   141c6:	4798      	blx	r3
   141c8:	0003      	movs	r3, r0
   141ca:	613b      	str	r3, [r7, #16]
	status_code_t statusCode;

	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
   141cc:	1d3b      	adds	r3, r7, #4
   141ce:	881b      	ldrh	r3, [r3, #0]
   141d0:	220f      	movs	r2, #15
   141d2:	18bc      	adds	r4, r7, r2
   141d4:	683a      	ldr	r2, [r7, #0]
   141d6:	6939      	ldr	r1, [r7, #16]
   141d8:	2000      	movs	r0, #0
   141da:	4d11      	ldr	r5, [pc, #68]	; (14220 <pdsNvmWrite+0xd8>)
   141dc:	47a8      	blx	r5
   141de:	0003      	movs	r3, r0
   141e0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != (status_code_genare_t) statusCode)
   141e2:	230f      	movs	r3, #15
   141e4:	18fb      	adds	r3, r7, r3
   141e6:	781b      	ldrb	r3, [r3, #0]
   141e8:	b25b      	sxtb	r3, r3
   141ea:	2b00      	cmp	r3, #0
   141ec:	d001      	beq.n	141f2 <pdsNvmWrite+0xaa>
	{
		return PDS_ERROR;
   141ee:	2302      	movs	r3, #2
   141f0:	e00e      	b.n	14210 <pdsNvmWrite+0xc8>
	}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
   141f2:	2317      	movs	r3, #23
   141f4:	18fc      	adds	r4, r7, r3
   141f6:	1d3b      	adds	r3, r7, #4
   141f8:	881a      	ldrh	r2, [r3, #0]
   141fa:	6839      	ldr	r1, [r7, #0]
   141fc:	1dbb      	adds	r3, r7, #6
   141fe:	881b      	ldrh	r3, [r3, #0]
   14200:	0018      	movs	r0, r3
   14202:	4b08      	ldr	r3, [pc, #32]	; (14224 <pdsNvmWrite+0xdc>)
   14204:	4798      	blx	r3
   14206:	0003      	movs	r3, r0
   14208:	7023      	strb	r3, [r4, #0]
	
	return status;
   1420a:	2317      	movs	r3, #23
   1420c:	18fb      	adds	r3, r7, r3
   1420e:	781b      	ldrb	r3, [r3, #0]
}
   14210:	0018      	movs	r0, r3
   14212:	46bd      	mov	sp, r7
   14214:	b006      	add	sp, #24
   14216:	bdb0      	pop	{r4, r5, r7, pc}
   14218:	00014439 	.word	0x00014439
   1421c:	000144a9 	.word	0x000144a9
   14220:	00017089 	.word	0x00017089
   14224:	00014229 	.word	0x00014229

00014228 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
   14228:	b590      	push	{r4, r7, lr}
   1422a:	b087      	sub	sp, #28
   1422c:	af00      	add	r7, sp, #0
   1422e:	6039      	str	r1, [r7, #0]
   14230:	0011      	movs	r1, r2
   14232:	1dbb      	adds	r3, r7, #6
   14234:	1c02      	adds	r2, r0, #0
   14236:	801a      	strh	r2, [r3, #0]
   14238:	1d3b      	adds	r3, r7, #4
   1423a:	1c0a      	adds	r2, r1, #0
   1423c:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   1423e:	2316      	movs	r3, #22
   14240:	18fb      	adds	r3, r7, r3
   14242:	2200      	movs	r2, #0
   14244:	701a      	strb	r2, [r3, #0]
	status_code_genare_t statusCode;
	uint16_t crc;
	uint32_t addr = nvmLogicalRowToPhysicalAddr(rowId);
   14246:	1dbb      	adds	r3, r7, #6
   14248:	881b      	ldrh	r3, [r3, #0]
   1424a:	0018      	movs	r0, r3
   1424c:	4b2c      	ldr	r3, [pc, #176]	; (14300 <pdsNvmRead+0xd8>)
   1424e:	4798      	blx	r3
   14250:	0003      	movs	r3, r0
   14252:	613b      	str	r3, [r7, #16]
	if (EEPROM_ROW_SIZE == size)
   14254:	1d3b      	adds	r3, r7, #4
   14256:	881a      	ldrh	r2, [r3, #0]
   14258:	2380      	movs	r3, #128	; 0x80
   1425a:	005b      	lsls	r3, r3, #1
   1425c:	429a      	cmp	r2, r3
   1425e:	d111      	bne.n	14284 <pdsNvmRead+0x5c>
	{
		do 
		{
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
   14260:	1d3b      	adds	r3, r7, #4
   14262:	881b      	ldrh	r3, [r3, #0]
   14264:	683a      	ldr	r2, [r7, #0]
   14266:	6939      	ldr	r1, [r7, #16]
   14268:	2000      	movs	r0, #0
   1426a:	4c26      	ldr	r4, [pc, #152]	; (14304 <pdsNvmRead+0xdc>)
   1426c:	47a0      	blx	r4
   1426e:	0003      	movs	r3, r0
   14270:	001a      	movs	r2, r3
   14272:	2317      	movs	r3, #23
   14274:	18fb      	adds	r3, r7, r3
   14276:	701a      	strb	r2, [r3, #0]
		} while (statusCode == STATUS_BUSY);
   14278:	2317      	movs	r3, #23
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	781b      	ldrb	r3, [r3, #0]
   1427e:	2b05      	cmp	r3, #5
   14280:	d0ee      	beq.n	14260 <pdsNvmRead+0x38>
   14282:	e015      	b.n	142b0 <pdsNvmRead+0x88>
		
	}
	else
	{
		size += sizeof(PdsNvmHeader_t);
   14284:	1d3b      	adds	r3, r7, #4
   14286:	1d3a      	adds	r2, r7, #4
   14288:	8812      	ldrh	r2, [r2, #0]
   1428a:	3204      	adds	r2, #4
   1428c:	801a      	strh	r2, [r3, #0]
		do 
		{
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
   1428e:	1d3b      	adds	r3, r7, #4
   14290:	881b      	ldrh	r3, [r3, #0]
   14292:	683a      	ldr	r2, [r7, #0]
   14294:	6939      	ldr	r1, [r7, #16]
   14296:	2000      	movs	r0, #0
   14298:	4c1a      	ldr	r4, [pc, #104]	; (14304 <pdsNvmRead+0xdc>)
   1429a:	47a0      	blx	r4
   1429c:	0003      	movs	r3, r0
   1429e:	001a      	movs	r2, r3
   142a0:	2317      	movs	r3, #23
   142a2:	18fb      	adds	r3, r7, r3
   142a4:	701a      	strb	r2, [r3, #0]
		} while (statusCode == STATUS_BUSY);		
   142a6:	2317      	movs	r3, #23
   142a8:	18fb      	adds	r3, r7, r3
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	2b05      	cmp	r3, #5
   142ae:	d0ee      	beq.n	1428e <pdsNvmRead+0x66>
	}
	
	if (STATUS_OK != statusCode)
   142b0:	2317      	movs	r3, #23
   142b2:	18fb      	adds	r3, r7, r3
   142b4:	781b      	ldrb	r3, [r3, #0]
   142b6:	2b00      	cmp	r3, #0
   142b8:	d001      	beq.n	142be <pdsNvmRead+0x96>
	{
		return PDS_ERROR;
   142ba:	2302      	movs	r3, #2
   142bc:	e01c      	b.n	142f8 <pdsNvmRead+0xd0>
	}
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
   142be:	230e      	movs	r3, #14
   142c0:	18fa      	adds	r2, r7, r3
   142c2:	683b      	ldr	r3, [r7, #0]
   142c4:	7819      	ldrb	r1, [r3, #0]
   142c6:	785b      	ldrb	r3, [r3, #1]
   142c8:	021b      	lsls	r3, r3, #8
   142ca:	430b      	orrs	r3, r1
   142cc:	8013      	strh	r3, [r2, #0]
	
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
   142ce:	683b      	ldr	r3, [r7, #0]
   142d0:	789b      	ldrb	r3, [r3, #2]
   142d2:	b29a      	uxth	r2, r3
   142d4:	683b      	ldr	r3, [r7, #0]
   142d6:	3304      	adds	r3, #4
   142d8:	0019      	movs	r1, r3
   142da:	0010      	movs	r0, r2
   142dc:	4b0a      	ldr	r3, [pc, #40]	; (14308 <pdsNvmRead+0xe0>)
   142de:	4798      	blx	r3
   142e0:	0003      	movs	r3, r0
   142e2:	001a      	movs	r2, r3
   142e4:	230e      	movs	r3, #14
   142e6:	18fb      	adds	r3, r7, r3
   142e8:	881b      	ldrh	r3, [r3, #0]
   142ea:	4293      	cmp	r3, r2
   142ec:	d001      	beq.n	142f2 <pdsNvmRead+0xca>
	{
		return PDS_CRC_ERROR;
   142ee:	2301      	movs	r3, #1
   142f0:	e002      	b.n	142f8 <pdsNvmRead+0xd0>
	}
	return status;
   142f2:	2316      	movs	r3, #22
   142f4:	18fb      	adds	r3, r7, r3
   142f6:	781b      	ldrb	r3, [r3, #0]
}
   142f8:	0018      	movs	r0, r3
   142fa:	46bd      	mov	sp, r7
   142fc:	b007      	add	sp, #28
   142fe:	bd90      	pop	{r4, r7, pc}
   14300:	000144a9 	.word	0x000144a9
   14304:	00016ca1 	.word	0x00016ca1
   14308:	00014439 	.word	0x00014439

0001430c <pdsNvmErase>:

\param[in] 	rowId - The rowId to be erased.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmErase(uint16_t rowId)
{
   1430c:	b580      	push	{r7, lr}
   1430e:	b086      	sub	sp, #24
   14310:	af00      	add	r7, sp, #0
   14312:	0002      	movs	r2, r0
   14314:	1dbb      	adds	r3, r7, #6
   14316:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   14318:	2317      	movs	r3, #23
   1431a:	18fb      	adds	r3, r7, r3
   1431c:	2200      	movs	r2, #0
   1431e:	701a      	strb	r2, [r3, #0]
	uint32_t addr = nvmLogicalRowToPhysicalAddr(rowId);
   14320:	1dbb      	adds	r3, r7, #6
   14322:	881b      	ldrh	r3, [r3, #0]
   14324:	0018      	movs	r0, r3
   14326:	4b11      	ldr	r3, [pc, #68]	; (1436c <pdsNvmErase+0x60>)
   14328:	4798      	blx	r3
   1432a:	0003      	movs	r3, r0
   1432c:	613b      	str	r3, [r7, #16]
	status_code_t statusCode;
	do
	{
		statusCode = nvm_erase_row(addr);
   1432e:	693b      	ldr	r3, [r7, #16]
   14330:	0018      	movs	r0, r3
   14332:	4b0f      	ldr	r3, [pc, #60]	; (14370 <pdsNvmErase+0x64>)
   14334:	4798      	blx	r3
   14336:	0003      	movs	r3, r0
   14338:	001a      	movs	r2, r3
   1433a:	230f      	movs	r3, #15
   1433c:	18fb      	adds	r3, r7, r3
   1433e:	701a      	strb	r2, [r3, #0]
	} while (statusCode == ERR_BUSY);
   14340:	230f      	movs	r3, #15
   14342:	18fb      	adds	r3, r7, r3
   14344:	781b      	ldrb	r3, [r3, #0]
   14346:	b25b      	sxtb	r3, r3
   14348:	330a      	adds	r3, #10
   1434a:	d0f0      	beq.n	1432e <pdsNvmErase+0x22>
	
	if (STATUS_OK != (status_code_genare_t) statusCode)
   1434c:	230f      	movs	r3, #15
   1434e:	18fb      	adds	r3, r7, r3
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	b25b      	sxtb	r3, r3
   14354:	2b00      	cmp	r3, #0
   14356:	d001      	beq.n	1435c <pdsNvmErase+0x50>
	{
		return PDS_ERROR;
   14358:	2302      	movs	r3, #2
   1435a:	e002      	b.n	14362 <pdsNvmErase+0x56>
	}
	return status;
   1435c:	2317      	movs	r3, #23
   1435e:	18fb      	adds	r3, r7, r3
   14360:	781b      	ldrb	r3, [r3, #0]
}
   14362:	0018      	movs	r0, r3
   14364:	46bd      	mov	sp, r7
   14366:	b006      	add	sp, #24
   14368:	bd80      	pop	{r7, pc}
   1436a:	46c0      	nop			; (mov r8, r8)
   1436c:	000144a9 	.word	0x000144a9
   14370:	00001efd 	.word	0x00001efd

00014374 <pdsNvmEraseAll>:

\param[in] 	none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmEraseAll(void)
{
   14374:	b590      	push	{r4, r7, lr}
   14376:	b083      	sub	sp, #12
   14378:	af00      	add	r7, sp, #0
	PdsStatus_t statusCode;
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
   1437a:	1dfb      	adds	r3, r7, #7
   1437c:	2200      	movs	r2, #0
   1437e:	701a      	strb	r2, [r3, #0]
   14380:	e014      	b.n	143ac <pdsNvmEraseAll+0x38>
    {
		statusCode = pdsNvmErase(row_idx);
   14382:	1dfb      	adds	r3, r7, #7
   14384:	781b      	ldrb	r3, [r3, #0]
   14386:	b29b      	uxth	r3, r3
   14388:	1dbc      	adds	r4, r7, #6
   1438a:	0018      	movs	r0, r3
   1438c:	4b0c      	ldr	r3, [pc, #48]	; (143c0 <pdsNvmEraseAll+0x4c>)
   1438e:	4798      	blx	r3
   14390:	0003      	movs	r3, r0
   14392:	7023      	strb	r3, [r4, #0]
		if (PDS_OK != statusCode)
   14394:	1dbb      	adds	r3, r7, #6
   14396:	781b      	ldrb	r3, [r3, #0]
   14398:	2b00      	cmp	r3, #0
   1439a:	d002      	beq.n	143a2 <pdsNvmEraseAll+0x2e>
		{
			return statusCode;
   1439c:	1dbb      	adds	r3, r7, #6
   1439e:	781b      	ldrb	r3, [r3, #0]
   143a0:	e009      	b.n	143b6 <pdsNvmEraseAll+0x42>
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
   143a2:	1dfb      	adds	r3, r7, #7
   143a4:	781a      	ldrb	r2, [r3, #0]
   143a6:	1dfb      	adds	r3, r7, #7
   143a8:	3201      	adds	r2, #1
   143aa:	701a      	strb	r2, [r3, #0]
   143ac:	1dfb      	adds	r3, r7, #7
   143ae:	781b      	ldrb	r3, [r3, #0]
   143b0:	2b1f      	cmp	r3, #31
   143b2:	d9e6      	bls.n	14382 <pdsNvmEraseAll+0xe>
		}
	}
	
	return PDS_OK;
   143b4:	2300      	movs	r3, #0
}
   143b6:	0018      	movs	r0, r3
   143b8:	46bd      	mov	sp, r7
   143ba:	b003      	add	sp, #12
   143bc:	bd90      	pop	{r4, r7, pc}
   143be:	46c0      	nop			; (mov r8, r8)
   143c0:	0001430d 	.word	0x0001430d

000143c4 <Crc16Ccitt>:
\param[in] 	initValue - The rowId to be erased.
\param[in] 	byte - The rowId to be erased.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
uint16_t Crc16Ccitt(uint16_t initValue, uint8_t byte)
{
   143c4:	b580      	push	{r7, lr}
   143c6:	b082      	sub	sp, #8
   143c8:	af00      	add	r7, sp, #0
   143ca:	0002      	movs	r2, r0
   143cc:	1dbb      	adds	r3, r7, #6
   143ce:	801a      	strh	r2, [r3, #0]
   143d0:	1d7b      	adds	r3, r7, #5
   143d2:	1c0a      	adds	r2, r1, #0
   143d4:	701a      	strb	r2, [r3, #0]
  byte ^= initValue & 0xffU;
   143d6:	1dbb      	adds	r3, r7, #6
   143d8:	881b      	ldrh	r3, [r3, #0]
   143da:	b2d9      	uxtb	r1, r3
   143dc:	1d7b      	adds	r3, r7, #5
   143de:	1d7a      	adds	r2, r7, #5
   143e0:	7812      	ldrb	r2, [r2, #0]
   143e2:	404a      	eors	r2, r1
   143e4:	701a      	strb	r2, [r3, #0]
  byte ^= byte << 4U;
   143e6:	1d7b      	adds	r3, r7, #5
   143e8:	781b      	ldrb	r3, [r3, #0]
   143ea:	011b      	lsls	r3, r3, #4
   143ec:	b25a      	sxtb	r2, r3
   143ee:	1d7b      	adds	r3, r7, #5
   143f0:	781b      	ldrb	r3, [r3, #0]
   143f2:	b25b      	sxtb	r3, r3
   143f4:	4053      	eors	r3, r2
   143f6:	b25a      	sxtb	r2, r3
   143f8:	1d7b      	adds	r3, r7, #5
   143fa:	701a      	strb	r2, [r3, #0]

  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
   143fc:	1d7b      	adds	r3, r7, #5
   143fe:	781b      	ldrb	r3, [r3, #0]
   14400:	b29b      	uxth	r3, r3
   14402:	021b      	lsls	r3, r3, #8
   14404:	b29a      	uxth	r2, r3
   14406:	1dbb      	adds	r3, r7, #6
   14408:	881b      	ldrh	r3, [r3, #0]
   1440a:	0a1b      	lsrs	r3, r3, #8
   1440c:	b29b      	uxth	r3, r3
   1440e:	4313      	orrs	r3, r2
   14410:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
   14412:	1d7b      	adds	r3, r7, #5
   14414:	781b      	ldrb	r3, [r3, #0]
   14416:	091b      	lsrs	r3, r3, #4
   14418:	b2db      	uxtb	r3, r3
   1441a:	b29b      	uxth	r3, r3
   1441c:	4053      	eors	r3, r2
   1441e:	b29a      	uxth	r2, r3
   14420:	1d7b      	adds	r3, r7, #5
   14422:	781b      	ldrb	r3, [r3, #0]
   14424:	b29b      	uxth	r3, r3
   14426:	00db      	lsls	r3, r3, #3
   14428:	b29b      	uxth	r3, r3
   1442a:	4053      	eors	r3, r2
   1442c:	b29b      	uxth	r3, r3
}
   1442e:	0018      	movs	r0, r3
   14430:	46bd      	mov	sp, r7
   14432:	b002      	add	sp, #8
   14434:	bd80      	pop	{r7, pc}
	...

00014438 <calculate_crc>:
\param[in] 	length - The amount of data for which CRC is to be calculated.
\param[in] 	data - The data.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint16_t calculate_crc(uint16_t length, uint8_t *data)
{
   14438:	b590      	push	{r4, r7, lr}
   1443a:	b085      	sub	sp, #20
   1443c:	af00      	add	r7, sp, #0
   1443e:	0002      	movs	r2, r0
   14440:	6039      	str	r1, [r7, #0]
   14442:	1dbb      	adds	r3, r7, #6
   14444:	801a      	strh	r2, [r3, #0]
  uint16_t eeprom_crc = 0U;
   14446:	230e      	movs	r3, #14
   14448:	18fb      	adds	r3, r7, r3
   1444a:	2200      	movs	r2, #0
   1444c:	801a      	strh	r2, [r3, #0]
  for (uint16_t i = 0; i < length; i++)
   1444e:	230c      	movs	r3, #12
   14450:	18fb      	adds	r3, r7, r3
   14452:	2200      	movs	r2, #0
   14454:	801a      	strh	r2, [r3, #0]
   14456:	e017      	b.n	14488 <calculate_crc+0x50>
  {
    eeprom_crc = Crc16Ccitt(eeprom_crc, data[i]);
   14458:	230c      	movs	r3, #12
   1445a:	18fb      	adds	r3, r7, r3
   1445c:	881b      	ldrh	r3, [r3, #0]
   1445e:	683a      	ldr	r2, [r7, #0]
   14460:	18d3      	adds	r3, r2, r3
   14462:	781a      	ldrb	r2, [r3, #0]
   14464:	230e      	movs	r3, #14
   14466:	18fc      	adds	r4, r7, r3
   14468:	230e      	movs	r3, #14
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	881b      	ldrh	r3, [r3, #0]
   1446e:	0011      	movs	r1, r2
   14470:	0018      	movs	r0, r3
   14472:	4b0c      	ldr	r3, [pc, #48]	; (144a4 <calculate_crc+0x6c>)
   14474:	4798      	blx	r3
   14476:	0003      	movs	r3, r0
   14478:	8023      	strh	r3, [r4, #0]
  for (uint16_t i = 0; i < length; i++)
   1447a:	230c      	movs	r3, #12
   1447c:	18fb      	adds	r3, r7, r3
   1447e:	881a      	ldrh	r2, [r3, #0]
   14480:	230c      	movs	r3, #12
   14482:	18fb      	adds	r3, r7, r3
   14484:	3201      	adds	r2, #1
   14486:	801a      	strh	r2, [r3, #0]
   14488:	230c      	movs	r3, #12
   1448a:	18fa      	adds	r2, r7, r3
   1448c:	1dbb      	adds	r3, r7, #6
   1448e:	8812      	ldrh	r2, [r2, #0]
   14490:	881b      	ldrh	r3, [r3, #0]
   14492:	429a      	cmp	r2, r3
   14494:	d3e0      	bcc.n	14458 <calculate_crc+0x20>
  }
  return eeprom_crc;
   14496:	230e      	movs	r3, #14
   14498:	18fb      	adds	r3, r7, r3
   1449a:	881b      	ldrh	r3, [r3, #0]
}
   1449c:	0018      	movs	r0, r3
   1449e:	46bd      	mov	sp, r7
   144a0:	b005      	add	sp, #20
   144a2:	bd90      	pop	{r4, r7, pc}
   144a4:	000143c5 	.word	0x000143c5

000144a8 <nvmLogicalRowToPhysicalAddr>:

\param[in] 	logicalRow - The logical row.
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
   144a8:	b580      	push	{r7, lr}
   144aa:	b082      	sub	sp, #8
   144ac:	af00      	add	r7, sp, #0
   144ae:	0002      	movs	r2, r0
   144b0:	1dbb      	adds	r3, r7, #6
   144b2:	801a      	strh	r2, [r3, #0]
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
   144b4:	1dbb      	adds	r3, r7, #6
   144b6:	881b      	ldrh	r3, [r3, #0]
   144b8:	2280      	movs	r2, #128	; 0x80
   144ba:	01d2      	lsls	r2, r2, #7
   144bc:	4694      	mov	ip, r2
   144be:	4463      	add	r3, ip
   144c0:	021b      	lsls	r3, r3, #8
}
   144c2:	0018      	movs	r0, r3
   144c4:	46bd      	mov	sp, r7
   144c6:	b002      	add	sp, #8
   144c8:	bd80      	pop	{r7, pc}
	...

000144cc <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
   144cc:	b580      	push	{r7, lr}
   144ce:	b082      	sub	sp, #8
   144d0:	af00      	add	r7, sp, #0
   144d2:	0002      	movs	r2, r0
   144d4:	1dfb      	adds	r3, r7, #7
   144d6:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
   144d8:	4b09      	ldr	r3, [pc, #36]	; (14500 <pdsPostTask+0x34>)
   144da:	4798      	blx	r3
    pdsTaskFlags |= id;
   144dc:	4b09      	ldr	r3, [pc, #36]	; (14504 <pdsPostTask+0x38>)
   144de:	781b      	ldrb	r3, [r3, #0]
   144e0:	b2da      	uxtb	r2, r3
   144e2:	1dfb      	adds	r3, r7, #7
   144e4:	781b      	ldrb	r3, [r3, #0]
   144e6:	4313      	orrs	r3, r2
   144e8:	b2da      	uxtb	r2, r3
   144ea:	4b06      	ldr	r3, [pc, #24]	; (14504 <pdsPostTask+0x38>)
   144ec:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
   144ee:	4b06      	ldr	r3, [pc, #24]	; (14508 <pdsPostTask+0x3c>)
   144f0:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
   144f2:	2008      	movs	r0, #8
   144f4:	4b05      	ldr	r3, [pc, #20]	; (1450c <pdsPostTask+0x40>)
   144f6:	4798      	blx	r3
}
   144f8:	46c0      	nop			; (mov r8, r8)
   144fa:	46bd      	mov	sp, r7
   144fc:	b002      	add	sp, #8
   144fe:	bd80      	pop	{r7, pc}
   14500:	000076e1 	.word	0x000076e1
   14504:	20000fc5 	.word	0x20000fc5
   14508:	000076f5 	.word	0x000076f5
   1450c:	000162bd 	.word	0x000162bd

00014510 <PDS_TaskHandler>:

/**************************************************************************//**
\brief PDS task handler.
******************************************************************************/
SYSTEM_TaskStatus_t PDS_TaskHandler(void)
{
   14510:	b580      	push	{r7, lr}
   14512:	b082      	sub	sp, #8
   14514:	af00      	add	r7, sp, #0
#if (ENABLE_PDS == 1)	
#ifdef UT_D
    printf("\n Starting PDS_TaskHandler() \n");
#endif

    if (pdsTaskFlags)
   14516:	4b24      	ldr	r3, [pc, #144]	; (145a8 <PDS_TaskHandler+0x98>)
   14518:	781b      	ldrb	r3, [r3, #0]
   1451a:	b2db      	uxtb	r3, r3
   1451c:	2b00      	cmp	r3, #0
   1451e:	d03d      	beq.n	1459c <PDS_TaskHandler+0x8c>
    {
        for (uint16_t taskId = 0; taskId < PDS_TASKS_COUNT; taskId++)
   14520:	1dbb      	adds	r3, r7, #6
   14522:	2200      	movs	r2, #0
   14524:	801a      	strh	r2, [r3, #0]
   14526:	e033      	b.n	14590 <PDS_TaskHandler+0x80>
        {
            if ((1 << taskId) & (pdsTaskFlags))
   14528:	4b1f      	ldr	r3, [pc, #124]	; (145a8 <PDS_TaskHandler+0x98>)
   1452a:	781b      	ldrb	r3, [r3, #0]
   1452c:	b2db      	uxtb	r3, r3
   1452e:	001a      	movs	r2, r3
   14530:	1dbb      	adds	r3, r7, #6
   14532:	881b      	ldrh	r3, [r3, #0]
   14534:	411a      	asrs	r2, r3
   14536:	0013      	movs	r3, r2
   14538:	2201      	movs	r2, #1
   1453a:	4013      	ands	r3, r2
   1453c:	d023      	beq.n	14586 <PDS_TaskHandler+0x76>
            {
#ifdef UT_D
                printf("\n pdsTaskFlags : %d \n", pdsTaskFlags);
#endif

                ATOMIC_SECTION_ENTER
   1453e:	4b1b      	ldr	r3, [pc, #108]	; (145ac <PDS_TaskHandler+0x9c>)
   14540:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
   14542:	1dbb      	adds	r3, r7, #6
   14544:	881b      	ldrh	r3, [r3, #0]
   14546:	2201      	movs	r2, #1
   14548:	409a      	lsls	r2, r3
   1454a:	0013      	movs	r3, r2
   1454c:	b25b      	sxtb	r3, r3
   1454e:	43db      	mvns	r3, r3
   14550:	b25b      	sxtb	r3, r3
   14552:	4a15      	ldr	r2, [pc, #84]	; (145a8 <PDS_TaskHandler+0x98>)
   14554:	7812      	ldrb	r2, [r2, #0]
   14556:	b2d2      	uxtb	r2, r2
   14558:	b252      	sxtb	r2, r2
   1455a:	4013      	ands	r3, r2
   1455c:	b25b      	sxtb	r3, r3
   1455e:	b2da      	uxtb	r2, r3
   14560:	4b11      	ldr	r3, [pc, #68]	; (145a8 <PDS_TaskHandler+0x98>)
   14562:	701a      	strb	r2, [r3, #0]
                ATOMIC_SECTION_EXIT
   14564:	4b12      	ldr	r3, [pc, #72]	; (145b0 <PDS_TaskHandler+0xa0>)
   14566:	4798      	blx	r3

#ifdef UT_D
                printf("\n pdsTaskFlags : %d \n", pdsTaskFlags);
#endif

                pdsTaskHandlers[taskId]();
   14568:	1dbb      	adds	r3, r7, #6
   1456a:	881a      	ldrh	r2, [r3, #0]
   1456c:	4b11      	ldr	r3, [pc, #68]	; (145b4 <PDS_TaskHandler+0xa4>)
   1456e:	0092      	lsls	r2, r2, #2
   14570:	58d3      	ldr	r3, [r2, r3]
   14572:	4798      	blx	r3

				if (pdsTaskFlags)
   14574:	4b0c      	ldr	r3, [pc, #48]	; (145a8 <PDS_TaskHandler+0x98>)
   14576:	781b      	ldrb	r3, [r3, #0]
   14578:	b2db      	uxtb	r3, r3
   1457a:	2b00      	cmp	r3, #0
   1457c:	d00d      	beq.n	1459a <PDS_TaskHandler+0x8a>
                {
                    SYSTEM_PostTask(PDS_TASK_ID);
   1457e:	2008      	movs	r0, #8
   14580:	4b0d      	ldr	r3, [pc, #52]	; (145b8 <PDS_TaskHandler+0xa8>)
   14582:	4798      	blx	r3
                }
                
                break;
   14584:	e009      	b.n	1459a <PDS_TaskHandler+0x8a>
        for (uint16_t taskId = 0; taskId < PDS_TASKS_COUNT; taskId++)
   14586:	1dbb      	adds	r3, r7, #6
   14588:	881a      	ldrh	r2, [r3, #0]
   1458a:	1dbb      	adds	r3, r7, #6
   1458c:	3201      	adds	r2, #1
   1458e:	801a      	strh	r2, [r3, #0]
   14590:	1dbb      	adds	r3, r7, #6
   14592:	881b      	ldrh	r3, [r3, #0]
   14594:	2b00      	cmp	r3, #0
   14596:	d0c7      	beq.n	14528 <PDS_TaskHandler+0x18>
   14598:	e000      	b.n	1459c <PDS_TaskHandler+0x8c>
                break;
   1459a:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
#endif
    return SYSTEM_TASK_SUCCESS;
   1459c:	2300      	movs	r3, #0
}
   1459e:	0018      	movs	r0, r3
   145a0:	46bd      	mov	sp, r7
   145a2:	b002      	add	sp, #8
   145a4:	bd80      	pop	{r7, pc}
   145a6:	46c0      	nop			; (mov r8, r8)
   145a8:	20000fc5 	.word	0x20000fc5
   145ac:	000076e1 	.word	0x000076e1
   145b0:	000076f5 	.word	0x000076f5
   145b4:	2000000c 	.word	0x2000000c
   145b8:	000162bd 	.word	0x000162bd

000145bc <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
   145bc:	b590      	push	{r4, r7, lr}
   145be:	b0c3      	sub	sp, #268	; 0x10c
   145c0:	af00      	add	r7, sp, #0
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
   145c2:	2308      	movs	r3, #8
   145c4:	33ff      	adds	r3, #255	; 0xff
   145c6:	18fb      	adds	r3, r7, r3
   145c8:	2200      	movs	r2, #0
   145ca:	701a      	strb	r2, [r3, #0]

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
   145cc:	1dfb      	adds	r3, r7, #7
   145ce:	33ff      	adds	r3, #255	; 0xff
   145d0:	2200      	movs	r2, #0
   145d2:	701a      	strb	r2, [r3, #0]
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
   145d4:	2380      	movs	r3, #128	; 0x80
   145d6:	005a      	lsls	r2, r3, #1
   145d8:	1d3b      	adds	r3, r7, #4
   145da:	2100      	movs	r1, #0
   145dc:	0018      	movs	r0, r3
   145de:	4b28      	ldr	r3, [pc, #160]	; (14680 <pdsStoreDeleteHandler+0xc4>)
   145e0:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
   145e2:	e028      	b.n	14636 <pdsStoreDeleteHandler+0x7a>
	{
		if (true == isFileSet[fileId])
   145e4:	1dfb      	adds	r3, r7, #7
   145e6:	33ff      	adds	r3, #255	; 0xff
   145e8:	781b      	ldrb	r3, [r3, #0]
   145ea:	4a26      	ldr	r2, [pc, #152]	; (14684 <pdsStoreDeleteHandler+0xc8>)
   145ec:	5cd3      	ldrb	r3, [r2, r3]
   145ee:	2b00      	cmp	r3, #0
   145f0:	d01a      	beq.n	14628 <pdsStoreDeleteHandler+0x6c>
		{
			status = pdsStoreDelete(fileId, (uint8_t *)&(buffer));
   145f2:	2308      	movs	r3, #8
   145f4:	33ff      	adds	r3, #255	; 0xff
   145f6:	18fc      	adds	r4, r7, r3
   145f8:	1d3a      	adds	r2, r7, #4
   145fa:	1dfb      	adds	r3, r7, #7
   145fc:	33ff      	adds	r3, #255	; 0xff
   145fe:	781b      	ldrb	r3, [r3, #0]
   14600:	0011      	movs	r1, r2
   14602:	0018      	movs	r0, r3
   14604:	4b20      	ldr	r3, [pc, #128]	; (14688 <pdsStoreDeleteHandler+0xcc>)
   14606:	4798      	blx	r3
   14608:	0003      	movs	r3, r0
   1460a:	7023      	strb	r3, [r4, #0]
			if (status != PDS_OK)
			{
				// assert;
			}
			isFileSet[fileId] = false;
   1460c:	1dfb      	adds	r3, r7, #7
   1460e:	33ff      	adds	r3, #255	; 0xff
   14610:	781b      	ldrb	r3, [r3, #0]
   14612:	4a1c      	ldr	r2, [pc, #112]	; (14684 <pdsStoreDeleteHandler+0xc8>)
   14614:	2100      	movs	r1, #0
   14616:	54d1      	strb	r1, [r2, r3]
			fileId++;
   14618:	1dfb      	adds	r3, r7, #7
   1461a:	33ff      	adds	r3, #255	; 0xff
   1461c:	781a      	ldrb	r2, [r3, #0]
   1461e:	1dfb      	adds	r3, r7, #7
   14620:	33ff      	adds	r3, #255	; 0xff
   14622:	3201      	adds	r2, #1
   14624:	701a      	strb	r2, [r3, #0]
			break;
   14626:	e00b      	b.n	14640 <pdsStoreDeleteHandler+0x84>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
   14628:	1dfb      	adds	r3, r7, #7
   1462a:	33ff      	adds	r3, #255	; 0xff
   1462c:	781a      	ldrb	r2, [r3, #0]
   1462e:	1dfb      	adds	r3, r7, #7
   14630:	33ff      	adds	r3, #255	; 0xff
   14632:	3201      	adds	r2, #1
   14634:	701a      	strb	r2, [r3, #0]
   14636:	1dfb      	adds	r3, r7, #7
   14638:	33ff      	adds	r3, #255	; 0xff
   1463a:	781b      	ldrb	r3, [r3, #0]
   1463c:	2b0c      	cmp	r3, #12
   1463e:	d9d1      	bls.n	145e4 <pdsStoreDeleteHandler+0x28>
		}
	}
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
   14640:	e011      	b.n	14666 <pdsStoreDeleteHandler+0xaa>
	{
		if (isFileSet[fileId])
   14642:	1dfb      	adds	r3, r7, #7
   14644:	33ff      	adds	r3, #255	; 0xff
   14646:	781b      	ldrb	r3, [r3, #0]
   14648:	4a0e      	ldr	r2, [pc, #56]	; (14684 <pdsStoreDeleteHandler+0xc8>)
   1464a:	5cd3      	ldrb	r3, [r2, r3]
   1464c:	2b00      	cmp	r3, #0
   1464e:	d003      	beq.n	14658 <pdsStoreDeleteHandler+0x9c>
		{
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
   14650:	2001      	movs	r0, #1
   14652:	4b0e      	ldr	r3, [pc, #56]	; (1468c <pdsStoreDeleteHandler+0xd0>)
   14654:	4798      	blx	r3
			break;
   14656:	e00b      	b.n	14670 <pdsStoreDeleteHandler+0xb4>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
   14658:	1dfb      	adds	r3, r7, #7
   1465a:	33ff      	adds	r3, #255	; 0xff
   1465c:	781a      	ldrb	r2, [r3, #0]
   1465e:	1dfb      	adds	r3, r7, #7
   14660:	33ff      	adds	r3, #255	; 0xff
   14662:	3201      	adds	r2, #1
   14664:	701a      	strb	r2, [r3, #0]
   14666:	1dfb      	adds	r3, r7, #7
   14668:	33ff      	adds	r3, #255	; 0xff
   1466a:	781b      	ldrb	r3, [r3, #0]
   1466c:	2b0c      	cmp	r3, #12
   1466e:	d9e8      	bls.n	14642 <pdsStoreDeleteHandler+0x86>
		}
	}

	return status;
   14670:	2308      	movs	r3, #8
   14672:	33ff      	adds	r3, #255	; 0xff
   14674:	18fb      	adds	r3, r7, r3
   14676:	781b      	ldrb	r3, [r3, #0]
}
   14678:	0018      	movs	r0, r3
   1467a:	46bd      	mov	sp, r7
   1467c:	b043      	add	sp, #268	; 0x10c
   1467e:	bd90      	pop	{r4, r7, pc}
   14680:	000241cd 	.word	0x000241cd
   14684:	200016d4 	.word	0x200016d4
   14688:	00014691 	.word	0x00014691
   1468c:	000144cd 	.word	0x000144cd

00014690 <pdsStoreDelete>:
\param[in] pdsFileItemIdx - The file id to look for.
\param[in] buffer - The buffer to be used for reading and writing a file.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
static PdsStatus_t pdsStoreDelete(PdsFileItemIdx_t pdsFileItemIdx, uint8_t *buffer)
{
   14690:	b590      	push	{r4, r7, lr}
   14692:	b089      	sub	sp, #36	; 0x24
   14694:	af00      	add	r7, sp, #0
   14696:	0002      	movs	r2, r0
   14698:	6039      	str	r1, [r7, #0]
   1469a:	1dfb      	adds	r3, r7, #7
   1469c:	701a      	strb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   1469e:	231e      	movs	r3, #30
   146a0:	18fb      	adds	r3, r7, r3
   146a2:	2200      	movs	r2, #0
   146a4:	701a      	strb	r2, [r3, #0]
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
   146a6:	1dfb      	adds	r3, r7, #7
   146a8:	781b      	ldrb	r3, [r3, #0]
   146aa:	4a91      	ldr	r2, [pc, #580]	; (148f0 <pdsStoreDelete+0x260>)
   146ac:	011b      	lsls	r3, r3, #4
   146ae:	18d3      	adds	r3, r2, r3
   146b0:	3308      	adds	r3, #8
   146b2:	681a      	ldr	r2, [r3, #0]
   146b4:	1dfb      	adds	r3, r7, #7
   146b6:	781b      	ldrb	r3, [r3, #0]
   146b8:	498d      	ldr	r1, [pc, #564]	; (148f0 <pdsStoreDelete+0x260>)
   146ba:	011b      	lsls	r3, r3, #4
   146bc:	18cb      	adds	r3, r1, r3
   146be:	3304      	adds	r3, #4
   146c0:	781b      	ldrb	r3, [r3, #0]
   146c2:	498c      	ldr	r1, [pc, #560]	; (148f4 <pdsStoreDelete+0x264>)
   146c4:	468c      	mov	ip, r1
   146c6:	4463      	add	r3, ip
   146c8:	00db      	lsls	r3, r3, #3
   146ca:	18d1      	adds	r1, r2, r3
   146cc:	2310      	movs	r3, #16
   146ce:	18fb      	adds	r3, r7, r3
   146d0:	2208      	movs	r2, #8
   146d2:	0018      	movs	r0, r3
   146d4:	4b88      	ldr	r3, [pc, #544]	; (148f8 <pdsStoreDelete+0x268>)
   146d6:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
   146d8:	2310      	movs	r3, #16
   146da:	18fb      	adds	r3, r7, r3
   146dc:	79db      	ldrb	r3, [r3, #7]
   146de:	b29a      	uxth	r2, r3
   146e0:	2310      	movs	r3, #16
   146e2:	18fb      	adds	r3, r7, r3
   146e4:	799b      	ldrb	r3, [r3, #6]
   146e6:	b29b      	uxth	r3, r3
   146e8:	18d3      	adds	r3, r2, r3
   146ea:	b29a      	uxth	r2, r3
   146ec:	231c      	movs	r3, #28
   146ee:	18fb      	adds	r3, r7, r3
   146f0:	3205      	adds	r2, #5
   146f2:	801a      	strh	r2, [r3, #0]
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
   146f4:	231e      	movs	r3, #30
   146f6:	18fc      	adds	r4, r7, r3
   146f8:	231c      	movs	r3, #28
   146fa:	18fb      	adds	r3, r7, r3
   146fc:	881a      	ldrh	r2, [r3, #0]
   146fe:	6839      	ldr	r1, [r7, #0]
   14700:	1dfb      	adds	r3, r7, #7
   14702:	781b      	ldrb	r3, [r3, #0]
   14704:	0018      	movs	r0, r3
   14706:	4b7d      	ldr	r3, [pc, #500]	; (148fc <pdsStoreDelete+0x26c>)
   14708:	4798      	blx	r3
   1470a:	0003      	movs	r3, r0
   1470c:	7023      	strb	r3, [r4, #0]

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
   1470e:	231e      	movs	r3, #30
   14710:	18fb      	adds	r3, r7, r3
   14712:	781b      	ldrb	r3, [r3, #0]
   14714:	2b00      	cmp	r3, #0
   14716:	d008      	beq.n	1472a <pdsStoreDelete+0x9a>
   14718:	231e      	movs	r3, #30
   1471a:	18fb      	adds	r3, r7, r3
   1471c:	781b      	ldrb	r3, [r3, #0]
   1471e:	2b03      	cmp	r3, #3
   14720:	d003      	beq.n	1472a <pdsStoreDelete+0x9a>
	{
		return status;
   14722:	231e      	movs	r3, #30
   14724:	18fb      	adds	r3, r7, r3
   14726:	781b      	ldrb	r3, [r3, #0]
   14728:	e0dd      	b.n	148e6 <pdsStoreDelete+0x256>
	}

	itemHeader.magic = PDS_MAGIC;
   1472a:	2308      	movs	r3, #8
   1472c:	18fb      	adds	r3, r7, r3
   1472e:	22a5      	movs	r2, #165	; 0xa5
   14730:	701a      	strb	r2, [r3, #0]
	itemHeader.version = PDS_FILES_VERSION;
   14732:	2308      	movs	r3, #8
   14734:	18fb      	adds	r3, r7, r3
   14736:	2201      	movs	r2, #1
   14738:	705a      	strb	r2, [r3, #1]

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   1473a:	231f      	movs	r3, #31
   1473c:	18fb      	adds	r3, r7, r3
   1473e:	2200      	movs	r2, #0
   14740:	701a      	strb	r2, [r3, #0]
   14742:	e091      	b.n	14868 <pdsStoreDelete+0x1d8>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
   14744:	1dfb      	adds	r3, r7, #7
   14746:	781b      	ldrb	r3, [r3, #0]
   14748:	4a69      	ldr	r2, [pc, #420]	; (148f0 <pdsStoreDelete+0x260>)
   1474a:	011b      	lsls	r3, r3, #4
   1474c:	18d3      	adds	r3, r2, r3
   1474e:	3308      	adds	r3, #8
   14750:	681a      	ldr	r2, [r3, #0]
   14752:	231f      	movs	r3, #31
   14754:	18fb      	adds	r3, r7, r3
   14756:	781b      	ldrb	r3, [r3, #0]
   14758:	00db      	lsls	r3, r3, #3
   1475a:	18d1      	adds	r1, r2, r3
   1475c:	2310      	movs	r3, #16
   1475e:	18fb      	adds	r3, r7, r3
   14760:	2208      	movs	r2, #8
   14762:	0018      	movs	r0, r3
   14764:	4b64      	ldr	r3, [pc, #400]	; (148f8 <pdsStoreDelete+0x268>)
   14766:	4798      	blx	r3
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
   14768:	683b      	ldr	r3, [r7, #0]
   1476a:	330d      	adds	r3, #13
   1476c:	61bb      	str	r3, [r7, #24]
		ptr += itemInfo.itemOffset;
   1476e:	2310      	movs	r3, #16
   14770:	18fb      	adds	r3, r7, r3
   14772:	79db      	ldrb	r3, [r3, #7]
   14774:	001a      	movs	r2, r3
   14776:	69bb      	ldr	r3, [r7, #24]
   14778:	189b      	adds	r3, r3, r2
   1477a:	61bb      	str	r3, [r7, #24]

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
   1477c:	1dfb      	adds	r3, r7, #7
   1477e:	781a      	ldrb	r2, [r3, #0]
   14780:	4b5b      	ldr	r3, [pc, #364]	; (148f0 <pdsStoreDelete+0x260>)
   14782:	0112      	lsls	r2, r2, #4
   14784:	58d2      	ldr	r2, [r2, r3]
   14786:	231f      	movs	r3, #31
   14788:	18fb      	adds	r3, r7, r3
   1478a:	781b      	ldrb	r3, [r3, #0]
   1478c:	18d3      	adds	r3, r2, r3
   1478e:	781b      	ldrb	r3, [r3, #0]
   14790:	2b01      	cmp	r3, #1
   14792:	d132      	bne.n	147fa <pdsStoreDelete+0x16a>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
   14794:	1dfb      	adds	r3, r7, #7
   14796:	781a      	ldrb	r2, [r3, #0]
   14798:	4b55      	ldr	r3, [pc, #340]	; (148f0 <pdsStoreDelete+0x260>)
   1479a:	0112      	lsls	r2, r2, #4
   1479c:	58d2      	ldr	r2, [r2, r3]
   1479e:	231f      	movs	r3, #31
   147a0:	18fb      	adds	r3, r7, r3
   147a2:	781b      	ldrb	r3, [r3, #0]
   147a4:	18d3      	adds	r3, r2, r3
   147a6:	2200      	movs	r2, #0
   147a8:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
   147aa:	2310      	movs	r3, #16
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	799a      	ldrb	r2, [r3, #6]
   147b0:	2308      	movs	r3, #8
   147b2:	18fb      	adds	r3, r7, r3
   147b4:	709a      	strb	r2, [r3, #2]
			itemHeader.itemId = itemInfo.itemId;
   147b6:	2310      	movs	r3, #16
   147b8:	18fb      	adds	r3, r7, r3
   147ba:	795a      	ldrb	r2, [r3, #5]
   147bc:	2308      	movs	r3, #8
   147be:	18fb      	adds	r3, r7, r3
   147c0:	70da      	strb	r2, [r3, #3]
			itemHeader.delete = false;
   147c2:	2308      	movs	r3, #8
   147c4:	18fb      	adds	r3, r7, r3
   147c6:	2200      	movs	r2, #0
   147c8:	711a      	strb	r2, [r3, #4]
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
   147ca:	69ba      	ldr	r2, [r7, #24]
   147cc:	2308      	movs	r3, #8
   147ce:	18fb      	adds	r3, r7, r3
   147d0:	0010      	movs	r0, r2
   147d2:	0019      	movs	r1, r3
   147d4:	2305      	movs	r3, #5
   147d6:	001a      	movs	r2, r3
   147d8:	4b47      	ldr	r3, [pc, #284]	; (148f8 <pdsStoreDelete+0x268>)
   147da:	4798      	blx	r3
			ptr += sizeof(ItemHeader_t);
   147dc:	69bb      	ldr	r3, [r7, #24]
   147de:	3305      	adds	r3, #5
   147e0:	61bb      	str	r3, [r7, #24]
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
   147e2:	2310      	movs	r3, #16
   147e4:	18fb      	adds	r3, r7, r3
   147e6:	6819      	ldr	r1, [r3, #0]
   147e8:	2310      	movs	r3, #16
   147ea:	18fb      	adds	r3, r7, r3
   147ec:	799b      	ldrb	r3, [r3, #6]
   147ee:	001a      	movs	r2, r3
   147f0:	69bb      	ldr	r3, [r7, #24]
   147f2:	0018      	movs	r0, r3
   147f4:	4b40      	ldr	r3, [pc, #256]	; (148f8 <pdsStoreDelete+0x268>)
   147f6:	4798      	blx	r3
   147f8:	e02f      	b.n	1485a <pdsStoreDelete+0x1ca>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
   147fa:	1dfb      	adds	r3, r7, #7
   147fc:	781a      	ldrb	r2, [r3, #0]
   147fe:	4b3c      	ldr	r3, [pc, #240]	; (148f0 <pdsStoreDelete+0x260>)
   14800:	0112      	lsls	r2, r2, #4
   14802:	58d2      	ldr	r2, [r2, r3]
   14804:	231f      	movs	r3, #31
   14806:	18fb      	adds	r3, r7, r3
   14808:	781b      	ldrb	r3, [r3, #0]
   1480a:	18d3      	adds	r3, r2, r3
   1480c:	781b      	ldrb	r3, [r3, #0]
   1480e:	2b02      	cmp	r3, #2
   14810:	d123      	bne.n	1485a <pdsStoreDelete+0x1ca>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
   14812:	1dfb      	adds	r3, r7, #7
   14814:	781a      	ldrb	r2, [r3, #0]
   14816:	4b36      	ldr	r3, [pc, #216]	; (148f0 <pdsStoreDelete+0x260>)
   14818:	0112      	lsls	r2, r2, #4
   1481a:	58d2      	ldr	r2, [r2, r3]
   1481c:	231f      	movs	r3, #31
   1481e:	18fb      	adds	r3, r7, r3
   14820:	781b      	ldrb	r3, [r3, #0]
   14822:	18d3      	adds	r3, r2, r3
   14824:	2200      	movs	r2, #0
   14826:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
   14828:	2310      	movs	r3, #16
   1482a:	18fb      	adds	r3, r7, r3
   1482c:	799a      	ldrb	r2, [r3, #6]
   1482e:	2308      	movs	r3, #8
   14830:	18fb      	adds	r3, r7, r3
   14832:	709a      	strb	r2, [r3, #2]
			itemHeader.itemId = itemInfo.itemId;
   14834:	2310      	movs	r3, #16
   14836:	18fb      	adds	r3, r7, r3
   14838:	795a      	ldrb	r2, [r3, #5]
   1483a:	2308      	movs	r3, #8
   1483c:	18fb      	adds	r3, r7, r3
   1483e:	70da      	strb	r2, [r3, #3]
			itemHeader.delete = true;
   14840:	2308      	movs	r3, #8
   14842:	18fb      	adds	r3, r7, r3
   14844:	2201      	movs	r2, #1
   14846:	711a      	strb	r2, [r3, #4]
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
   14848:	69ba      	ldr	r2, [r7, #24]
   1484a:	2308      	movs	r3, #8
   1484c:	18fb      	adds	r3, r7, r3
   1484e:	0010      	movs	r0, r2
   14850:	0019      	movs	r1, r3
   14852:	2305      	movs	r3, #5
   14854:	001a      	movs	r2, r3
   14856:	4b28      	ldr	r3, [pc, #160]	; (148f8 <pdsStoreDelete+0x268>)
   14858:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
   1485a:	231f      	movs	r3, #31
   1485c:	18fb      	adds	r3, r7, r3
   1485e:	781a      	ldrb	r2, [r3, #0]
   14860:	231f      	movs	r3, #31
   14862:	18fb      	adds	r3, r7, r3
   14864:	3201      	adds	r2, #1
   14866:	701a      	strb	r2, [r3, #0]
   14868:	1dfb      	adds	r3, r7, #7
   1486a:	781b      	ldrb	r3, [r3, #0]
   1486c:	4a20      	ldr	r2, [pc, #128]	; (148f0 <pdsStoreDelete+0x260>)
   1486e:	011b      	lsls	r3, r3, #4
   14870:	18d3      	adds	r3, r2, r3
   14872:	3304      	adds	r3, #4
   14874:	781b      	ldrb	r3, [r3, #0]
   14876:	221f      	movs	r2, #31
   14878:	18ba      	adds	r2, r7, r2
   1487a:	7812      	ldrb	r2, [r2, #0]
   1487c:	429a      	cmp	r2, r3
   1487e:	d200      	bcs.n	14882 <pdsStoreDelete+0x1f2>
   14880:	e760      	b.n	14744 <pdsStoreDelete+0xb4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
   14882:	1dfb      	adds	r3, r7, #7
   14884:	781b      	ldrb	r3, [r3, #0]
   14886:	4a1a      	ldr	r2, [pc, #104]	; (148f0 <pdsStoreDelete+0x260>)
   14888:	011b      	lsls	r3, r3, #4
   1488a:	18d3      	adds	r3, r2, r3
   1488c:	3308      	adds	r3, #8
   1488e:	681a      	ldr	r2, [r3, #0]
   14890:	1dfb      	adds	r3, r7, #7
   14892:	781b      	ldrb	r3, [r3, #0]
   14894:	4916      	ldr	r1, [pc, #88]	; (148f0 <pdsStoreDelete+0x260>)
   14896:	011b      	lsls	r3, r3, #4
   14898:	18cb      	adds	r3, r1, r3
   1489a:	3304      	adds	r3, #4
   1489c:	781b      	ldrb	r3, [r3, #0]
   1489e:	00db      	lsls	r3, r3, #3
   148a0:	18d1      	adds	r1, r2, r3
   148a2:	2310      	movs	r3, #16
   148a4:	18fb      	adds	r3, r7, r3
   148a6:	2208      	movs	r2, #8
   148a8:	0018      	movs	r0, r3
   148aa:	4b13      	ldr	r3, [pc, #76]	; (148f8 <pdsStoreDelete+0x268>)
   148ac:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
   148ae:	2310      	movs	r3, #16
   148b0:	18fb      	adds	r3, r7, r3
   148b2:	79db      	ldrb	r3, [r3, #7]
   148b4:	b29a      	uxth	r2, r3
   148b6:	2310      	movs	r3, #16
   148b8:	18fb      	adds	r3, r7, r3
   148ba:	799b      	ldrb	r3, [r3, #6]
   148bc:	b29b      	uxth	r3, r3
   148be:	18d3      	adds	r3, r2, r3
   148c0:	b29a      	uxth	r2, r3
   148c2:	231c      	movs	r3, #28
   148c4:	18fb      	adds	r3, r7, r3
   148c6:	3205      	adds	r2, #5
   148c8:	801a      	strh	r2, [r3, #0]
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
   148ca:	231e      	movs	r3, #30
   148cc:	18fc      	adds	r4, r7, r3
   148ce:	6839      	ldr	r1, [r7, #0]
   148d0:	1dfb      	adds	r3, r7, #7
   148d2:	781b      	ldrb	r3, [r3, #0]
   148d4:	22f3      	movs	r2, #243	; 0xf3
   148d6:	0018      	movs	r0, r3
   148d8:	4b09      	ldr	r3, [pc, #36]	; (14900 <pdsStoreDelete+0x270>)
   148da:	4798      	blx	r3
   148dc:	0003      	movs	r3, r0
   148de:	7023      	strb	r3, [r4, #0]

	return status;
   148e0:	231e      	movs	r3, #30
   148e2:	18fb      	adds	r3, r7, r3
   148e4:	781b      	ldrb	r3, [r3, #0]
}
   148e6:	0018      	movs	r0, r3
   148e8:	46bd      	mov	sp, r7
   148ea:	b009      	add	sp, #36	; 0x24
   148ec:	bd90      	pop	{r4, r7, pc}
   148ee:	46c0      	nop			; (mov r8, r8)
   148f0:	200016e4 	.word	0x200016e4
   148f4:	1fffffff 	.word	0x1fffffff
   148f8:	00024149 	.word	0x00024149
   148fc:	00014c6d 	.word	0x00014c6d
   14900:	00014ab5 	.word	0x00014ab5

00014904 <pdsWlInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsWlInit(void)
{
   14904:	b590      	push	{r4, r7, lr}
   14906:	b0c5      	sub	sp, #276	; 0x114
   14908:	af00      	add	r7, sp, #0

	PdsStatus_t status = pdsNvmInit();
   1490a:	2387      	movs	r3, #135	; 0x87
   1490c:	005b      	lsls	r3, r3, #1
   1490e:	18fc      	adds	r4, r7, r3
   14910:	4b5f      	ldr	r3, [pc, #380]	; (14a90 <pdsWlInit+0x18c>)
   14912:	4798      	blx	r3
   14914:	0003      	movs	r3, r0
   14916:	7023      	strb	r3, [r4, #0]
	if (PDS_OK != status)
   14918:	2387      	movs	r3, #135	; 0x87
   1491a:	005b      	lsls	r3, r3, #1
   1491c:	18fb      	adds	r3, r7, r3
   1491e:	781b      	ldrb	r3, [r3, #0]
   14920:	2b00      	cmp	r3, #0
   14922:	d004      	beq.n	1492e <pdsWlInit+0x2a>
	{
		return status;
   14924:	2387      	movs	r3, #135	; 0x87
   14926:	005b      	lsls	r3, r3, #1
   14928:	18fb      	adds	r3, r7, r3
   1492a:	781b      	ldrb	r3, [r3, #0]
   1492c:	e0ac      	b.n	14a88 <pdsWlInit+0x184>
	}
	PdsMem_t buffer;
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
   1492e:	2380      	movs	r3, #128	; 0x80
   14930:	005a      	lsls	r2, r3, #1
   14932:	4b58      	ldr	r3, [pc, #352]	; (14a94 <pdsWlInit+0x190>)
   14934:	21ff      	movs	r1, #255	; 0xff
   14936:	0018      	movs	r0, r3
   14938:	4b57      	ldr	r3, [pc, #348]	; (14a98 <pdsWlInit+0x194>)
   1493a:	4798      	blx	r3
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
   1493c:	4b57      	ldr	r3, [pc, #348]	; (14a9c <pdsWlInit+0x198>)
   1493e:	221a      	movs	r2, #26
   14940:	21ff      	movs	r1, #255	; 0xff
   14942:	0018      	movs	r0, r3
   14944:	4b54      	ldr	r3, [pc, #336]	; (14a98 <pdsWlInit+0x194>)
   14946:	4798      	blx	r3
	memset(&buffer, 0, sizeof(PdsMem_t));
   14948:	2380      	movs	r3, #128	; 0x80
   1494a:	005a      	lsls	r2, r3, #1
   1494c:	230c      	movs	r3, #12
   1494e:	18fb      	adds	r3, r7, r3
   14950:	2100      	movs	r1, #0
   14952:	0018      	movs	r0, r3
   14954:	4b50      	ldr	r3, [pc, #320]	; (14a98 <pdsWlInit+0x194>)
   14956:	4798      	blx	r3
    UpdateFileMap_t updateFileMap;
	
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
   14958:	2310      	movs	r3, #16
   1495a:	33ff      	adds	r3, #255	; 0xff
   1495c:	18fb      	adds	r3, r7, r3
   1495e:	2200      	movs	r2, #0
   14960:	701a      	strb	r2, [r3, #0]
   14962:	e087      	b.n	14a74 <pdsWlInit+0x170>
    {
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
   14964:	2310      	movs	r3, #16
   14966:	33ff      	adds	r3, #255	; 0xff
   14968:	18fb      	adds	r3, r7, r3
   1496a:	781b      	ldrb	r3, [r3, #0]
   1496c:	b298      	uxth	r0, r3
   1496e:	2387      	movs	r3, #135	; 0x87
   14970:	005b      	lsls	r3, r3, #1
   14972:	18fc      	adds	r4, r7, r3
   14974:	2380      	movs	r3, #128	; 0x80
   14976:	005a      	lsls	r2, r3, #1
   14978:	230c      	movs	r3, #12
   1497a:	18fb      	adds	r3, r7, r3
   1497c:	0019      	movs	r1, r3
   1497e:	4b48      	ldr	r3, [pc, #288]	; (14aa0 <pdsWlInit+0x19c>)
   14980:	4798      	blx	r3
   14982:	0003      	movs	r3, r0
   14984:	7023      	strb	r3, [r4, #0]
		if (PDS_OK == status)
   14986:	2387      	movs	r3, #135	; 0x87
   14988:	005b      	lsls	r3, r3, #1
   1498a:	18fb      	adds	r3, r7, r3
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	2b00      	cmp	r3, #0
   14990:	d167      	bne.n	14a62 <pdsWlInit+0x15e>
		{
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
   14992:	2310      	movs	r3, #16
   14994:	33ff      	adds	r3, #255	; 0xff
   14996:	18fb      	adds	r3, r7, r3
   14998:	781a      	ldrb	r2, [r3, #0]
   1499a:	4b42      	ldr	r3, [pc, #264]	; (14aa4 <pdsWlInit+0x1a0>)
   1499c:	2188      	movs	r1, #136	; 0x88
   1499e:	0049      	lsls	r1, r1, #1
   149a0:	468c      	mov	ip, r1
   149a2:	44bc      	add	ip, r7
   149a4:	4463      	add	r3, ip
   149a6:	6899      	ldr	r1, [r3, #8]
   149a8:	0a09      	lsrs	r1, r1, #8
   149aa:	7b1b      	ldrb	r3, [r3, #12]
   149ac:	061b      	lsls	r3, r3, #24
   149ae:	430b      	orrs	r3, r1
   149b0:	0019      	movs	r1, r3
   149b2:	4b38      	ldr	r3, [pc, #224]	; (14a94 <pdsWlInit+0x190>)
   149b4:	00d2      	lsls	r2, r2, #3
   149b6:	50d1      	str	r1, [r2, r3]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
   149b8:	2310      	movs	r3, #16
   149ba:	33ff      	adds	r3, #255	; 0xff
   149bc:	18fb      	adds	r3, r7, r3
   149be:	7819      	ldrb	r1, [r3, #0]
   149c0:	4b38      	ldr	r3, [pc, #224]	; (14aa4 <pdsWlInit+0x1a0>)
   149c2:	2288      	movs	r2, #136	; 0x88
   149c4:	0052      	lsls	r2, r2, #1
   149c6:	4694      	mov	ip, r2
   149c8:	44bc      	add	ip, r7
   149ca:	4463      	add	r3, ip
   149cc:	79da      	ldrb	r2, [r3, #7]
   149ce:	7a1b      	ldrb	r3, [r3, #8]
   149d0:	021b      	lsls	r3, r3, #8
   149d2:	4313      	orrs	r3, r2
   149d4:	b298      	uxth	r0, r3
   149d6:	4a2f      	ldr	r2, [pc, #188]	; (14a94 <pdsWlInit+0x190>)
   149d8:	00cb      	lsls	r3, r1, #3
   149da:	18d3      	adds	r3, r2, r3
   149dc:	3304      	adds	r3, #4
   149de:	1c02      	adds	r2, r0, #0
   149e0:	801a      	strh	r2, [r3, #0]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
   149e2:	2310      	movs	r3, #16
   149e4:	33ff      	adds	r3, #255	; 0xff
   149e6:	18fb      	adds	r3, r7, r3
   149e8:	781b      	ldrb	r3, [r3, #0]
   149ea:	4a2a      	ldr	r2, [pc, #168]	; (14a94 <pdsWlInit+0x190>)
   149ec:	00db      	lsls	r3, r3, #3
   149ee:	18d3      	adds	r3, r2, r3
   149f0:	3306      	adds	r3, #6
   149f2:	2201      	movs	r2, #1
   149f4:	4252      	negs	r2, r2
   149f6:	801a      	strh	r2, [r3, #0]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
   149f8:	4b2a      	ldr	r3, [pc, #168]	; (14aa4 <pdsWlInit+0x1a0>)
   149fa:	2288      	movs	r2, #136	; 0x88
   149fc:	0052      	lsls	r2, r2, #1
   149fe:	4694      	mov	ip, r2
   14a00:	44bc      	add	ip, r7
   14a02:	4463      	add	r3, ip
   14a04:	689a      	ldr	r2, [r3, #8]
   14a06:	0a12      	lsrs	r2, r2, #8
   14a08:	7b1b      	ldrb	r3, [r3, #12]
   14a0a:	061b      	lsls	r3, r3, #24
   14a0c:	4313      	orrs	r3, r2
   14a0e:	001a      	movs	r2, r3
   14a10:	4b25      	ldr	r3, [pc, #148]	; (14aa8 <pdsWlInit+0x1a4>)
   14a12:	2188      	movs	r1, #136	; 0x88
   14a14:	0049      	lsls	r1, r1, #1
   14a16:	468c      	mov	ip, r1
   14a18:	44bc      	add	ip, r7
   14a1a:	4463      	add	r3, ip
   14a1c:	601a      	str	r2, [r3, #0]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
   14a1e:	4b21      	ldr	r3, [pc, #132]	; (14aa4 <pdsWlInit+0x1a0>)
   14a20:	2288      	movs	r2, #136	; 0x88
   14a22:	0052      	lsls	r2, r2, #1
   14a24:	4694      	mov	ip, r2
   14a26:	44bc      	add	ip, r7
   14a28:	4463      	add	r3, ip
   14a2a:	79da      	ldrb	r2, [r3, #7]
   14a2c:	7a1b      	ldrb	r3, [r3, #8]
   14a2e:	021b      	lsls	r3, r3, #8
   14a30:	4313      	orrs	r3, r2
   14a32:	b29a      	uxth	r2, r3
   14a34:	4b1c      	ldr	r3, [pc, #112]	; (14aa8 <pdsWlInit+0x1a4>)
   14a36:	2188      	movs	r1, #136	; 0x88
   14a38:	0049      	lsls	r1, r1, #1
   14a3a:	468c      	mov	ip, r1
   14a3c:	44bc      	add	ip, r7
   14a3e:	4463      	add	r3, ip
   14a40:	809a      	strh	r2, [r3, #4]
            updateFileMap.rowIdx = rowIdx;
   14a42:	2310      	movs	r3, #16
   14a44:	33ff      	adds	r3, #255	; 0xff
   14a46:	18fb      	adds	r3, r7, r3
   14a48:	781b      	ldrb	r3, [r3, #0]
   14a4a:	b29a      	uxth	r2, r3
   14a4c:	4b16      	ldr	r3, [pc, #88]	; (14aa8 <pdsWlInit+0x1a4>)
   14a4e:	2188      	movs	r1, #136	; 0x88
   14a50:	0049      	lsls	r1, r1, #1
   14a52:	468c      	mov	ip, r1
   14a54:	44bc      	add	ip, r7
   14a56:	4463      	add	r3, ip
   14a58:	80da      	strh	r2, [r3, #6]
            pdsUpdateFileMap(&updateFileMap);
   14a5a:	1d3b      	adds	r3, r7, #4
   14a5c:	0018      	movs	r0, r3
   14a5e:	4b13      	ldr	r3, [pc, #76]	; (14aac <pdsWlInit+0x1a8>)
   14a60:	4798      	blx	r3
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
   14a62:	2310      	movs	r3, #16
   14a64:	33ff      	adds	r3, #255	; 0xff
   14a66:	18fb      	adds	r3, r7, r3
   14a68:	781a      	ldrb	r2, [r3, #0]
   14a6a:	2310      	movs	r3, #16
   14a6c:	33ff      	adds	r3, #255	; 0xff
   14a6e:	18fb      	adds	r3, r7, r3
   14a70:	3201      	adds	r2, #1
   14a72:	701a      	strb	r2, [r3, #0]
   14a74:	2310      	movs	r3, #16
   14a76:	33ff      	adds	r3, #255	; 0xff
   14a78:	18fb      	adds	r3, r7, r3
   14a7a:	781b      	ldrb	r3, [r3, #0]
   14a7c:	2b1f      	cmp	r3, #31
   14a7e:	d800      	bhi.n	14a82 <pdsWlInit+0x17e>
   14a80:	e770      	b.n	14964 <pdsWlInit+0x60>
		}
    }
    pdsUpdateRowMap();
   14a82:	4b0b      	ldr	r3, [pc, #44]	; (14ab0 <pdsWlInit+0x1ac>)
   14a84:	4798      	blx	r3
	
	return PDS_OK;
   14a86:	2300      	movs	r3, #0
}
   14a88:	0018      	movs	r0, r3
   14a8a:	46bd      	mov	sp, r7
   14a8c:	b045      	add	sp, #276	; 0x114
   14a8e:	bd90      	pop	{r4, r7, pc}
   14a90:	000140e5 	.word	0x000140e5
   14a94:	20000fc8 	.word	0x20000fc8
   14a98:	000241cd 	.word	0x000241cd
   14a9c:	200010c8 	.word	0x200010c8
   14aa0:	00014229 	.word	0x00014229
   14aa4:	fffffefc 	.word	0xfffffefc
   14aa8:	fffffef4 	.word	0xfffffef4
   14aac:	00014dc5 	.word	0x00014dc5
   14ab0:	00014ce9 	.word	0x00014ce9

00014ab4 <pdsWlWrite>:
\param[in] 	buffer - The buffer containing data to be written.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsWlWrite(PdsFileItemIdx_t pdsFileItemIdx, PdsMem_t *buffer, uint16_t size)
{
   14ab4:	b590      	push	{r4, r7, lr}
   14ab6:	b087      	sub	sp, #28
   14ab8:	af00      	add	r7, sp, #0
   14aba:	6039      	str	r1, [r7, #0]
   14abc:	0011      	movs	r1, r2
   14abe:	1dfb      	adds	r3, r7, #7
   14ac0:	1c02      	adds	r2, r0, #0
   14ac2:	701a      	strb	r2, [r3, #0]
   14ac4:	1d3b      	adds	r3, r7, #4
   14ac6:	1c0a      	adds	r2, r1, #0
   14ac8:	801a      	strh	r2, [r3, #0]
	UpdateFileMap_t updateFileMap;
	PdsStatus_t status = PDS_OK;
   14aca:	2317      	movs	r3, #23
   14acc:	18fb      	adds	r3, r7, r3
   14ace:	2200      	movs	r2, #0
   14ad0:	701a      	strb	r2, [r3, #0]
	uint32_t counter;
    uint16_t rowIdx = pdsReturnFreeRowIdx();
   14ad2:	2314      	movs	r3, #20
   14ad4:	18fc      	adds	r4, r7, r3
   14ad6:	4b61      	ldr	r3, [pc, #388]	; (14c5c <pdsWlWrite+0x1a8>)
   14ad8:	4798      	blx	r3
   14ada:	0003      	movs	r3, r0
   14adc:	8023      	strh	r3, [r4, #0]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
   14ade:	683b      	ldr	r3, [r7, #0]
   14ae0:	7a5a      	ldrb	r2, [r3, #9]
   14ae2:	7a99      	ldrb	r1, [r3, #10]
   14ae4:	0209      	lsls	r1, r1, #8
   14ae6:	430a      	orrs	r2, r1
   14ae8:	7ad9      	ldrb	r1, [r3, #11]
   14aea:	0409      	lsls	r1, r1, #16
   14aec:	430a      	orrs	r2, r1
   14aee:	7b1b      	ldrb	r3, [r3, #12]
   14af0:	061b      	lsls	r3, r3, #24
   14af2:	4313      	orrs	r3, r2
   14af4:	1c5a      	adds	r2, r3, #1
   14af6:	683b      	ldr	r3, [r7, #0]
   14af8:	3309      	adds	r3, #9
   14afa:	21ff      	movs	r1, #255	; 0xff
   14afc:	4011      	ands	r1, r2
   14afe:	000c      	movs	r4, r1
   14b00:	7819      	ldrb	r1, [r3, #0]
   14b02:	2000      	movs	r0, #0
   14b04:	4001      	ands	r1, r0
   14b06:	1c08      	adds	r0, r1, #0
   14b08:	1c21      	adds	r1, r4, #0
   14b0a:	4301      	orrs	r1, r0
   14b0c:	7019      	strb	r1, [r3, #0]
   14b0e:	0a11      	lsrs	r1, r2, #8
   14b10:	20ff      	movs	r0, #255	; 0xff
   14b12:	4001      	ands	r1, r0
   14b14:	000c      	movs	r4, r1
   14b16:	7859      	ldrb	r1, [r3, #1]
   14b18:	2000      	movs	r0, #0
   14b1a:	4001      	ands	r1, r0
   14b1c:	1c08      	adds	r0, r1, #0
   14b1e:	1c21      	adds	r1, r4, #0
   14b20:	4301      	orrs	r1, r0
   14b22:	7059      	strb	r1, [r3, #1]
   14b24:	0c11      	lsrs	r1, r2, #16
   14b26:	20ff      	movs	r0, #255	; 0xff
   14b28:	4001      	ands	r1, r0
   14b2a:	000c      	movs	r4, r1
   14b2c:	7899      	ldrb	r1, [r3, #2]
   14b2e:	2000      	movs	r0, #0
   14b30:	4001      	ands	r1, r0
   14b32:	1c08      	adds	r0, r1, #0
   14b34:	1c21      	adds	r1, r4, #0
   14b36:	4301      	orrs	r1, r0
   14b38:	7099      	strb	r1, [r3, #2]
   14b3a:	0e10      	lsrs	r0, r2, #24
   14b3c:	78da      	ldrb	r2, [r3, #3]
   14b3e:	2100      	movs	r1, #0
   14b40:	400a      	ands	r2, r1
   14b42:	1c11      	adds	r1, r2, #0
   14b44:	1c02      	adds	r2, r0, #0
   14b46:	430a      	orrs	r2, r1
   14b48:	70da      	strb	r2, [r3, #3]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
   14b4a:	1dfb      	adds	r3, r7, #7
   14b4c:	781b      	ldrb	r3, [r3, #0]
   14b4e:	b29a      	uxth	r2, r3
   14b50:	683b      	ldr	r3, [r7, #0]
   14b52:	3307      	adds	r3, #7
   14b54:	21ff      	movs	r1, #255	; 0xff
   14b56:	4011      	ands	r1, r2
   14b58:	000c      	movs	r4, r1
   14b5a:	7819      	ldrb	r1, [r3, #0]
   14b5c:	2000      	movs	r0, #0
   14b5e:	4001      	ands	r1, r0
   14b60:	1c08      	adds	r0, r1, #0
   14b62:	1c21      	adds	r1, r4, #0
   14b64:	4301      	orrs	r1, r0
   14b66:	7019      	strb	r1, [r3, #0]
   14b68:	0a12      	lsrs	r2, r2, #8
   14b6a:	b290      	uxth	r0, r2
   14b6c:	785a      	ldrb	r2, [r3, #1]
   14b6e:	2100      	movs	r1, #0
   14b70:	400a      	ands	r2, r1
   14b72:	1c11      	adds	r1, r2, #0
   14b74:	1c02      	adds	r2, r0, #0
   14b76:	430a      	orrs	r2, r1
   14b78:	705a      	strb	r2, [r3, #1]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
   14b7a:	683b      	ldr	r3, [r7, #0]
   14b7c:	22a5      	movs	r2, #165	; 0xa5
   14b7e:	711a      	strb	r2, [r3, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
   14b80:	683b      	ldr	r3, [r7, #0]
   14b82:	2201      	movs	r2, #1
   14b84:	715a      	strb	r2, [r3, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
   14b86:	1d3b      	adds	r3, r7, #4
   14b88:	881b      	ldrh	r3, [r3, #0]
   14b8a:	b2da      	uxtb	r2, r3
   14b8c:	683b      	ldr	r3, [r7, #0]
   14b8e:	719a      	strb	r2, [r3, #6]
	counter = buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
   14b90:	683b      	ldr	r3, [r7, #0]
   14b92:	7a5a      	ldrb	r2, [r3, #9]
   14b94:	7a99      	ldrb	r1, [r3, #10]
   14b96:	0209      	lsls	r1, r1, #8
   14b98:	430a      	orrs	r2, r1
   14b9a:	7ad9      	ldrb	r1, [r3, #11]
   14b9c:	0409      	lsls	r1, r1, #16
   14b9e:	430a      	orrs	r2, r1
   14ba0:	7b1b      	ldrb	r3, [r3, #12]
   14ba2:	061b      	lsls	r3, r3, #24
   14ba4:	4313      	orrs	r3, r2
   14ba6:	613b      	str	r3, [r7, #16]
	size += sizeof(PdsWlHeader_t);
   14ba8:	1d3b      	adds	r3, r7, #4
   14baa:	1d3a      	adds	r2, r7, #4
   14bac:	8812      	ldrh	r2, [r2, #0]
   14bae:	3209      	adds	r2, #9
   14bb0:	801a      	strh	r2, [r3, #0]

	status = pdsNvmWrite(rowIdx, buffer, size);
   14bb2:	2317      	movs	r3, #23
   14bb4:	18fc      	adds	r4, r7, r3
   14bb6:	1d3b      	adds	r3, r7, #4
   14bb8:	881a      	ldrh	r2, [r3, #0]
   14bba:	6839      	ldr	r1, [r7, #0]
   14bbc:	2314      	movs	r3, #20
   14bbe:	18fb      	adds	r3, r7, r3
   14bc0:	881b      	ldrh	r3, [r3, #0]
   14bc2:	0018      	movs	r0, r3
   14bc4:	4b26      	ldr	r3, [pc, #152]	; (14c60 <pdsWlWrite+0x1ac>)
   14bc6:	4798      	blx	r3
   14bc8:	0003      	movs	r3, r0
   14bca:	7023      	strb	r3, [r4, #0]
	if (PDS_OK == status)
   14bcc:	2317      	movs	r3, #23
   14bce:	18fb      	adds	r3, r7, r3
   14bd0:	781b      	ldrb	r3, [r3, #0]
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d13b      	bne.n	14c4e <pdsWlWrite+0x19a>
	{
		rowMap[rowIdx].counter = counter;
   14bd6:	2314      	movs	r3, #20
   14bd8:	18fb      	adds	r3, r7, r3
   14bda:	881a      	ldrh	r2, [r3, #0]
   14bdc:	4b21      	ldr	r3, [pc, #132]	; (14c64 <pdsWlWrite+0x1b0>)
   14bde:	00d2      	lsls	r2, r2, #3
   14be0:	6939      	ldr	r1, [r7, #16]
   14be2:	50d1      	str	r1, [r2, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
   14be4:	2314      	movs	r3, #20
   14be6:	18fb      	adds	r3, r7, r3
   14be8:	881b      	ldrh	r3, [r3, #0]
   14bea:	1dfa      	adds	r2, r7, #7
   14bec:	7812      	ldrb	r2, [r2, #0]
   14bee:	b291      	uxth	r1, r2
   14bf0:	4a1c      	ldr	r2, [pc, #112]	; (14c64 <pdsWlWrite+0x1b0>)
   14bf2:	00db      	lsls	r3, r3, #3
   14bf4:	18d3      	adds	r3, r2, r3
   14bf6:	3304      	adds	r3, #4
   14bf8:	1c0a      	adds	r2, r1, #0
   14bfa:	801a      	strh	r2, [r3, #0]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
   14bfc:	2314      	movs	r3, #20
   14bfe:	18fb      	adds	r3, r7, r3
   14c00:	881b      	ldrh	r3, [r3, #0]
   14c02:	4a18      	ldr	r2, [pc, #96]	; (14c64 <pdsWlWrite+0x1b0>)
   14c04:	00db      	lsls	r3, r3, #3
   14c06:	18d3      	adds	r3, r2, r3
   14c08:	3306      	adds	r3, #6
   14c0a:	2201      	movs	r2, #1
   14c0c:	4252      	negs	r2, r2
   14c0e:	801a      	strh	r2, [r3, #0]
		updateFileMap.counter = rowMap[rowIdx].counter;
   14c10:	2314      	movs	r3, #20
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	881a      	ldrh	r2, [r3, #0]
   14c16:	4b13      	ldr	r3, [pc, #76]	; (14c64 <pdsWlWrite+0x1b0>)
   14c18:	00d2      	lsls	r2, r2, #3
   14c1a:	58d2      	ldr	r2, [r2, r3]
   14c1c:	2308      	movs	r3, #8
   14c1e:	18fb      	adds	r3, r7, r3
   14c20:	601a      	str	r2, [r3, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
   14c22:	2314      	movs	r3, #20
   14c24:	18fb      	adds	r3, r7, r3
   14c26:	881b      	ldrh	r3, [r3, #0]
   14c28:	4a0e      	ldr	r2, [pc, #56]	; (14c64 <pdsWlWrite+0x1b0>)
   14c2a:	00db      	lsls	r3, r3, #3
   14c2c:	18d3      	adds	r3, r2, r3
   14c2e:	3304      	adds	r3, #4
   14c30:	881a      	ldrh	r2, [r3, #0]
   14c32:	2308      	movs	r3, #8
   14c34:	18fb      	adds	r3, r7, r3
   14c36:	809a      	strh	r2, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
   14c38:	2308      	movs	r3, #8
   14c3a:	18fb      	adds	r3, r7, r3
   14c3c:	2214      	movs	r2, #20
   14c3e:	18ba      	adds	r2, r7, r2
   14c40:	8812      	ldrh	r2, [r2, #0]
   14c42:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
   14c44:	2308      	movs	r3, #8
   14c46:	18fb      	adds	r3, r7, r3
   14c48:	0018      	movs	r0, r3
   14c4a:	4b07      	ldr	r3, [pc, #28]	; (14c68 <pdsWlWrite+0x1b4>)
   14c4c:	4798      	blx	r3
	}
	
	return status;
   14c4e:	2317      	movs	r3, #23
   14c50:	18fb      	adds	r3, r7, r3
   14c52:	781b      	ldrb	r3, [r3, #0]
}
   14c54:	0018      	movs	r0, r3
   14c56:	46bd      	mov	sp, r7
   14c58:	b007      	add	sp, #28
   14c5a:	bd90      	pop	{r4, r7, pc}
   14c5c:	00014f21 	.word	0x00014f21
   14c60:	00014149 	.word	0x00014149
   14c64:	20000fc8 	.word	0x20000fc8
   14c68:	00014dc5 	.word	0x00014dc5

00014c6c <pdsWlRead>:
\param[in] 	buffer - The buffer containing data to be written.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsWlRead(PdsFileItemIdx_t pdsFileItemIdx, PdsMem_t *buffer, uint16_t size)
{
   14c6c:	b590      	push	{r4, r7, lr}
   14c6e:	b085      	sub	sp, #20
   14c70:	af00      	add	r7, sp, #0
   14c72:	6039      	str	r1, [r7, #0]
   14c74:	0011      	movs	r1, r2
   14c76:	1dfb      	adds	r3, r7, #7
   14c78:	1c02      	adds	r2, r0, #0
   14c7a:	701a      	strb	r2, [r3, #0]
   14c7c:	1d3b      	adds	r3, r7, #4
   14c7e:	1c0a      	adds	r2, r1, #0
   14c80:	801a      	strh	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
   14c82:	230f      	movs	r3, #15
   14c84:	18fb      	adds	r3, r7, r3
   14c86:	2200      	movs	r2, #0
   14c88:	701a      	strb	r2, [r3, #0]
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
   14c8a:	1dfb      	adds	r3, r7, #7
   14c8c:	7819      	ldrb	r1, [r3, #0]
   14c8e:	230c      	movs	r3, #12
   14c90:	18fb      	adds	r3, r7, r3
   14c92:	4a12      	ldr	r2, [pc, #72]	; (14cdc <pdsWlRead+0x70>)
   14c94:	0049      	lsls	r1, r1, #1
   14c96:	5a8a      	ldrh	r2, [r1, r2]
   14c98:	801a      	strh	r2, [r3, #0]
	if (USHRT_MAX == rowIdx)
   14c9a:	230c      	movs	r3, #12
   14c9c:	18fb      	adds	r3, r7, r3
   14c9e:	881b      	ldrh	r3, [r3, #0]
   14ca0:	4a0f      	ldr	r2, [pc, #60]	; (14ce0 <pdsWlRead+0x74>)
   14ca2:	4293      	cmp	r3, r2
   14ca4:	d101      	bne.n	14caa <pdsWlRead+0x3e>
	{
		return PDS_NOT_FOUND;
   14ca6:	2303      	movs	r3, #3
   14ca8:	e014      	b.n	14cd4 <pdsWlRead+0x68>
	}
	
	size += sizeof(PdsWlHeader_t);
   14caa:	1d3b      	adds	r3, r7, #4
   14cac:	1d3a      	adds	r2, r7, #4
   14cae:	8812      	ldrh	r2, [r2, #0]
   14cb0:	3209      	adds	r2, #9
   14cb2:	801a      	strh	r2, [r3, #0]
	status = pdsNvmRead(rowIdx, buffer, size);
   14cb4:	230f      	movs	r3, #15
   14cb6:	18fc      	adds	r4, r7, r3
   14cb8:	1d3b      	adds	r3, r7, #4
   14cba:	881a      	ldrh	r2, [r3, #0]
   14cbc:	6839      	ldr	r1, [r7, #0]
   14cbe:	230c      	movs	r3, #12
   14cc0:	18fb      	adds	r3, r7, r3
   14cc2:	881b      	ldrh	r3, [r3, #0]
   14cc4:	0018      	movs	r0, r3
   14cc6:	4b07      	ldr	r3, [pc, #28]	; (14ce4 <pdsWlRead+0x78>)
   14cc8:	4798      	blx	r3
   14cca:	0003      	movs	r3, r0
   14ccc:	7023      	strb	r3, [r4, #0]
	
	return status;
   14cce:	230f      	movs	r3, #15
   14cd0:	18fb      	adds	r3, r7, r3
   14cd2:	781b      	ldrb	r3, [r3, #0]
}
   14cd4:	0018      	movs	r0, r3
   14cd6:	46bd      	mov	sp, r7
   14cd8:	b005      	add	sp, #20
   14cda:	bd90      	pop	{r4, r7, pc}
   14cdc:	200010c8 	.word	0x200010c8
   14ce0:	0000ffff 	.word	0x0000ffff
   14ce4:	00014229 	.word	0x00014229

00014ce8 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
   14ce8:	b580      	push	{r7, lr}
   14cea:	b082      	sub	sp, #8
   14cec:	af00      	add	r7, sp, #0
	uint16_t rowIdx = USHRT_MAX;
   14cee:	1dbb      	adds	r3, r7, #6
   14cf0:	2201      	movs	r2, #1
   14cf2:	4252      	negs	r2, r2
   14cf4:	801a      	strh	r2, [r3, #0]
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
   14cf6:	1d3b      	adds	r3, r7, #4
   14cf8:	2200      	movs	r2, #0
   14cfa:	801a      	strh	r2, [r3, #0]
   14cfc:	1cbb      	adds	r3, r7, #2
   14cfe:	2200      	movs	r2, #0
   14d00:	801a      	strh	r2, [r3, #0]
   14d02:	e051      	b.n	14da8 <pdsUpdateRowMap+0xc0>
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
   14d04:	1d3b      	adds	r3, r7, #4
   14d06:	881a      	ldrh	r2, [r3, #0]
   14d08:	4b2b      	ldr	r3, [pc, #172]	; (14db8 <pdsUpdateRowMap+0xd0>)
   14d0a:	0052      	lsls	r2, r2, #1
   14d0c:	5ad3      	ldrh	r3, [r2, r3]
   14d0e:	4a2b      	ldr	r2, [pc, #172]	; (14dbc <pdsUpdateRowMap+0xd4>)
   14d10:	4293      	cmp	r3, r2
   14d12:	d044      	beq.n	14d9e <pdsUpdateRowMap+0xb6>
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
   14d14:	1d3b      	adds	r3, r7, #4
   14d16:	881a      	ldrh	r2, [r3, #0]
   14d18:	4b27      	ldr	r3, [pc, #156]	; (14db8 <pdsUpdateRowMap+0xd0>)
   14d1a:	0052      	lsls	r2, r2, #1
   14d1c:	5ad3      	ldrh	r3, [r2, r3]
   14d1e:	001a      	movs	r2, r3
   14d20:	1dbb      	adds	r3, r7, #6
   14d22:	4927      	ldr	r1, [pc, #156]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d24:	00d2      	lsls	r2, r2, #3
   14d26:	188a      	adds	r2, r1, r2
   14d28:	3206      	adds	r2, #6
   14d2a:	8812      	ldrh	r2, [r2, #0]
   14d2c:	801a      	strh	r2, [r3, #0]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
   14d2e:	1d3b      	adds	r3, r7, #4
   14d30:	881a      	ldrh	r2, [r3, #0]
   14d32:	4b21      	ldr	r3, [pc, #132]	; (14db8 <pdsUpdateRowMap+0xd0>)
   14d34:	0052      	lsls	r2, r2, #1
   14d36:	5ad3      	ldrh	r3, [r2, r3]
   14d38:	4a21      	ldr	r2, [pc, #132]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d3a:	00db      	lsls	r3, r3, #3
   14d3c:	18d3      	adds	r3, r2, r3
   14d3e:	3306      	adds	r3, #6
   14d40:	2201      	movs	r2, #1
   14d42:	4252      	negs	r2, r2
   14d44:	801a      	strh	r2, [r3, #0]
			while(rowIdx != USHRT_MAX)
   14d46:	e025      	b.n	14d94 <pdsUpdateRowMap+0xac>
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
   14d48:	1dbb      	adds	r3, r7, #6
   14d4a:	881a      	ldrh	r2, [r3, #0]
   14d4c:	1cbb      	adds	r3, r7, #2
   14d4e:	491c      	ldr	r1, [pc, #112]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d50:	00d2      	lsls	r2, r2, #3
   14d52:	188a      	adds	r2, r1, r2
   14d54:	3206      	adds	r2, #6
   14d56:	8812      	ldrh	r2, [r2, #0]
   14d58:	801a      	strh	r2, [r3, #0]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
   14d5a:	1dbb      	adds	r3, r7, #6
   14d5c:	881b      	ldrh	r3, [r3, #0]
   14d5e:	4a18      	ldr	r2, [pc, #96]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d60:	00db      	lsls	r3, r3, #3
   14d62:	18d3      	adds	r3, r2, r3
   14d64:	3306      	adds	r3, #6
   14d66:	2201      	movs	r2, #1
   14d68:	4252      	negs	r2, r2
   14d6a:	801a      	strh	r2, [r3, #0]
				rowMap[rowIdx].counter = UINT_MAX;
   14d6c:	1dbb      	adds	r3, r7, #6
   14d6e:	881a      	ldrh	r2, [r3, #0]
   14d70:	4b13      	ldr	r3, [pc, #76]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d72:	00d2      	lsls	r2, r2, #3
   14d74:	2101      	movs	r1, #1
   14d76:	4249      	negs	r1, r1
   14d78:	50d1      	str	r1, [r2, r3]
				rowMap[rowIdx].memId = USHRT_MAX;
   14d7a:	1dbb      	adds	r3, r7, #6
   14d7c:	881b      	ldrh	r3, [r3, #0]
   14d7e:	4a10      	ldr	r2, [pc, #64]	; (14dc0 <pdsUpdateRowMap+0xd8>)
   14d80:	00db      	lsls	r3, r3, #3
   14d82:	18d3      	adds	r3, r2, r3
   14d84:	3304      	adds	r3, #4
   14d86:	2201      	movs	r2, #1
   14d88:	4252      	negs	r2, r2
   14d8a:	801a      	strh	r2, [r3, #0]
				rowIdx = rowIdxLocal;
   14d8c:	1dbb      	adds	r3, r7, #6
   14d8e:	1cba      	adds	r2, r7, #2
   14d90:	8812      	ldrh	r2, [r2, #0]
   14d92:	801a      	strh	r2, [r3, #0]
			while(rowIdx != USHRT_MAX)
   14d94:	1dbb      	adds	r3, r7, #6
   14d96:	881b      	ldrh	r3, [r3, #0]
   14d98:	4a08      	ldr	r2, [pc, #32]	; (14dbc <pdsUpdateRowMap+0xd4>)
   14d9a:	4293      	cmp	r3, r2
   14d9c:	d1d4      	bne.n	14d48 <pdsUpdateRowMap+0x60>
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
   14d9e:	1d3b      	adds	r3, r7, #4
   14da0:	881a      	ldrh	r2, [r3, #0]
   14da2:	1d3b      	adds	r3, r7, #4
   14da4:	3201      	adds	r2, #1
   14da6:	801a      	strh	r2, [r3, #0]
   14da8:	1d3b      	adds	r3, r7, #4
   14daa:	881b      	ldrh	r3, [r3, #0]
   14dac:	2b0c      	cmp	r3, #12
   14dae:	d9a9      	bls.n	14d04 <pdsUpdateRowMap+0x1c>
			}
		}
    }
}
   14db0:	46c0      	nop			; (mov r8, r8)
   14db2:	46bd      	mov	sp, r7
   14db4:	b002      	add	sp, #8
   14db6:	bd80      	pop	{r7, pc}
   14db8:	200010c8 	.word	0x200010c8
   14dbc:	0000ffff 	.word	0x0000ffff
   14dc0:	20000fc8 	.word	0x20000fc8

00014dc4 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
   14dc4:	b580      	push	{r7, lr}
   14dc6:	b086      	sub	sp, #24
   14dc8:	af00      	add	r7, sp, #0
   14dca:	6078      	str	r0, [r7, #4]
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
   14dcc:	687b      	ldr	r3, [r7, #4]
   14dce:	889b      	ldrh	r3, [r3, #4]
   14dd0:	001a      	movs	r2, r3
   14dd2:	4b50      	ldr	r3, [pc, #320]	; (14f14 <pdsUpdateFileMap+0x150>)
   14dd4:	0052      	lsls	r2, r2, #1
   14dd6:	5ad3      	ldrh	r3, [r2, r3]
   14dd8:	4a4f      	ldr	r2, [pc, #316]	; (14f18 <pdsUpdateFileMap+0x154>)
   14dda:	4293      	cmp	r3, r2
   14ddc:	d108      	bne.n	14df0 <pdsUpdateFileMap+0x2c>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
   14dde:	687b      	ldr	r3, [r7, #4]
   14de0:	889b      	ldrh	r3, [r3, #4]
   14de2:	001a      	movs	r2, r3
   14de4:	687b      	ldr	r3, [r7, #4]
   14de6:	88d9      	ldrh	r1, [r3, #6]
   14de8:	4b4a      	ldr	r3, [pc, #296]	; (14f14 <pdsUpdateFileMap+0x150>)
   14dea:	0052      	lsls	r2, r2, #1
   14dec:	52d1      	strh	r1, [r2, r3]
   14dee:	e08d      	b.n	14f0c <pdsUpdateFileMap+0x148>

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
   14df0:	687b      	ldr	r3, [r7, #4]
   14df2:	889b      	ldrh	r3, [r3, #4]
   14df4:	001a      	movs	r2, r3
   14df6:	4b47      	ldr	r3, [pc, #284]	; (14f14 <pdsUpdateFileMap+0x150>)
   14df8:	0052      	lsls	r2, r2, #1
   14dfa:	5ad3      	ldrh	r3, [r2, r3]
   14dfc:	001a      	movs	r2, r3
   14dfe:	4b47      	ldr	r3, [pc, #284]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e00:	00d2      	lsls	r2, r2, #3
   14e02:	58d2      	ldr	r2, [r2, r3]
   14e04:	687b      	ldr	r3, [r7, #4]
   14e06:	88db      	ldrh	r3, [r3, #6]
   14e08:	0019      	movs	r1, r3
   14e0a:	4b44      	ldr	r3, [pc, #272]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e0c:	00c9      	lsls	r1, r1, #3
   14e0e:	58cb      	ldr	r3, [r1, r3]
   14e10:	429a      	cmp	r2, r3
   14e12:	d217      	bcs.n	14e44 <pdsUpdateFileMap+0x80>
    {
        /* If the entry in filemap is lesser than  current rowidx update current idx as maxcounteridx*/
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
   14e14:	687b      	ldr	r3, [r7, #4]
   14e16:	88db      	ldrh	r3, [r3, #6]
   14e18:	0018      	movs	r0, r3
   14e1a:	687b      	ldr	r3, [r7, #4]
   14e1c:	889b      	ldrh	r3, [r3, #4]
   14e1e:	001a      	movs	r2, r3
   14e20:	4b3c      	ldr	r3, [pc, #240]	; (14f14 <pdsUpdateFileMap+0x150>)
   14e22:	0052      	lsls	r2, r2, #1
   14e24:	5ad1      	ldrh	r1, [r2, r3]
   14e26:	4a3d      	ldr	r2, [pc, #244]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e28:	00c3      	lsls	r3, r0, #3
   14e2a:	18d3      	adds	r3, r2, r3
   14e2c:	3306      	adds	r3, #6
   14e2e:	1c0a      	adds	r2, r1, #0
   14e30:	801a      	strh	r2, [r3, #0]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
   14e32:	687b      	ldr	r3, [r7, #4]
   14e34:	889b      	ldrh	r3, [r3, #4]
   14e36:	001a      	movs	r2, r3
   14e38:	687b      	ldr	r3, [r7, #4]
   14e3a:	88d9      	ldrh	r1, [r3, #6]
   14e3c:	4b35      	ldr	r3, [pc, #212]	; (14f14 <pdsUpdateFileMap+0x150>)
   14e3e:	0052      	lsls	r2, r2, #1
   14e40:	52d1      	strh	r1, [r2, r3]
   14e42:	e063      	b.n	14f0c <pdsUpdateFileMap+0x148>

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
   14e44:	687b      	ldr	r3, [r7, #4]
   14e46:	889b      	ldrh	r3, [r3, #4]
   14e48:	001a      	movs	r2, r3
   14e4a:	4b32      	ldr	r3, [pc, #200]	; (14f14 <pdsUpdateFileMap+0x150>)
   14e4c:	0052      	lsls	r2, r2, #1
   14e4e:	5ad3      	ldrh	r3, [r2, r3]
   14e50:	001a      	movs	r2, r3
   14e52:	4b32      	ldr	r3, [pc, #200]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e54:	00d2      	lsls	r2, r2, #3
   14e56:	58d2      	ldr	r2, [r2, r3]
   14e58:	687b      	ldr	r3, [r7, #4]
   14e5a:	88db      	ldrh	r3, [r3, #6]
   14e5c:	0019      	movs	r1, r3
   14e5e:	4b2f      	ldr	r3, [pc, #188]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e60:	00c9      	lsls	r1, r1, #3
   14e62:	58cb      	ldr	r3, [r1, r3]
   14e64:	429a      	cmp	r2, r3
   14e66:	d050      	beq.n	14f0a <pdsUpdateFileMap+0x146>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
   14e68:	687b      	ldr	r3, [r7, #4]
   14e6a:	889b      	ldrh	r3, [r3, #4]
   14e6c:	001a      	movs	r2, r3
   14e6e:	4b29      	ldr	r3, [pc, #164]	; (14f14 <pdsUpdateFileMap+0x150>)
   14e70:	0052      	lsls	r2, r2, #1
   14e72:	5ad3      	ldrh	r3, [r2, r3]
   14e74:	00da      	lsls	r2, r3, #3
   14e76:	4b29      	ldr	r3, [pc, #164]	; (14f1c <pdsUpdateFileMap+0x158>)
   14e78:	18d3      	adds	r3, r2, r3
   14e7a:	3306      	adds	r3, #6
   14e7c:	617b      	str	r3, [r7, #20]
        presentRowIdx = &updateFileMap->rowIdx;
   14e7e:	687b      	ldr	r3, [r7, #4]
   14e80:	3306      	adds	r3, #6
   14e82:	60fb      	str	r3, [r7, #12]
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
   14e84:	687b      	ldr	r3, [r7, #4]
   14e86:	889b      	ldrh	r3, [r3, #4]
   14e88:	005a      	lsls	r2, r3, #1
   14e8a:	4b22      	ldr	r3, [pc, #136]	; (14f14 <pdsUpdateFileMap+0x150>)
   14e8c:	18d3      	adds	r3, r2, r3
   14e8e:	613b      	str	r3, [r7, #16]
		do
		{
			if (USHRT_MAX == *previousRowIdx)
   14e90:	697b      	ldr	r3, [r7, #20]
   14e92:	881b      	ldrh	r3, [r3, #0]
   14e94:	4a20      	ldr	r2, [pc, #128]	; (14f18 <pdsUpdateFileMap+0x154>)
   14e96:	4293      	cmp	r3, r2
   14e98:	d104      	bne.n	14ea4 <pdsUpdateFileMap+0xe0>
			{
				*previousRowIdx = *presentRowIdx;
   14e9a:	68fb      	ldr	r3, [r7, #12]
   14e9c:	881a      	ldrh	r2, [r3, #0]
   14e9e:	697b      	ldr	r3, [r7, #20]
   14ea0:	801a      	strh	r2, [r3, #0]
				break;
   14ea2:	e033      	b.n	14f0c <pdsUpdateFileMap+0x148>
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
   14ea4:	697b      	ldr	r3, [r7, #20]
   14ea6:	881b      	ldrh	r3, [r3, #0]
   14ea8:	001a      	movs	r2, r3
   14eaa:	4b1c      	ldr	r3, [pc, #112]	; (14f1c <pdsUpdateFileMap+0x158>)
   14eac:	00d2      	lsls	r2, r2, #3
   14eae:	58d2      	ldr	r2, [r2, r3]
   14eb0:	68fb      	ldr	r3, [r7, #12]
   14eb2:	881b      	ldrh	r3, [r3, #0]
   14eb4:	0019      	movs	r1, r3
   14eb6:	4b19      	ldr	r3, [pc, #100]	; (14f1c <pdsUpdateFileMap+0x158>)
   14eb8:	00c9      	lsls	r1, r1, #3
   14eba:	58cb      	ldr	r3, [r1, r3]
   14ebc:	429a      	cmp	r2, r3
   14ebe:	d909      	bls.n	14ed4 <pdsUpdateFileMap+0x110>
			{
				lastRowIdx = previousRowIdx;
   14ec0:	697b      	ldr	r3, [r7, #20]
   14ec2:	613b      	str	r3, [r7, #16]
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
   14ec4:	697b      	ldr	r3, [r7, #20]
   14ec6:	881b      	ldrh	r3, [r3, #0]
   14ec8:	00da      	lsls	r2, r3, #3
   14eca:	4b14      	ldr	r3, [pc, #80]	; (14f1c <pdsUpdateFileMap+0x158>)
   14ecc:	18d3      	adds	r3, r2, r3
   14ece:	3306      	adds	r3, #6
   14ed0:	617b      	str	r3, [r7, #20]
   14ed2:	e7dd      	b.n	14e90 <pdsUpdateFileMap+0xcc>
			}
			else
			{
			    prevTemp = *previousRowIdx;
   14ed4:	230a      	movs	r3, #10
   14ed6:	18fb      	adds	r3, r7, r3
   14ed8:	697a      	ldr	r2, [r7, #20]
   14eda:	8812      	ldrh	r2, [r2, #0]
   14edc:	801a      	strh	r2, [r3, #0]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
   14ede:	693b      	ldr	r3, [r7, #16]
   14ee0:	881b      	ldrh	r3, [r3, #0]
   14ee2:	0018      	movs	r0, r3
   14ee4:	68fb      	ldr	r3, [r7, #12]
   14ee6:	8819      	ldrh	r1, [r3, #0]
   14ee8:	4a0c      	ldr	r2, [pc, #48]	; (14f1c <pdsUpdateFileMap+0x158>)
   14eea:	00c3      	lsls	r3, r0, #3
   14eec:	18d3      	adds	r3, r2, r3
   14eee:	3306      	adds	r3, #6
   14ef0:	1c0a      	adds	r2, r1, #0
   14ef2:	801a      	strh	r2, [r3, #0]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
   14ef4:	68fb      	ldr	r3, [r7, #12]
   14ef6:	881b      	ldrh	r3, [r3, #0]
   14ef8:	4a08      	ldr	r2, [pc, #32]	; (14f1c <pdsUpdateFileMap+0x158>)
   14efa:	00db      	lsls	r3, r3, #3
   14efc:	18d3      	adds	r3, r2, r3
   14efe:	3306      	adds	r3, #6
   14f00:	220a      	movs	r2, #10
   14f02:	18ba      	adds	r2, r7, r2
   14f04:	8812      	ldrh	r2, [r2, #0]
   14f06:	801a      	strh	r2, [r3, #0]
				break;
   14f08:	e000      	b.n	14f0c <pdsUpdateFileMap+0x148>
		return;
   14f0a:	46c0      	nop			; (mov r8, r8)
			}
		} while(true);

    }
}
   14f0c:	46bd      	mov	sp, r7
   14f0e:	b006      	add	sp, #24
   14f10:	bd80      	pop	{r7, pc}
   14f12:	46c0      	nop			; (mov r8, r8)
   14f14:	200010c8 	.word	0x200010c8
   14f18:	0000ffff 	.word	0x0000ffff
   14f1c:	20000fc8 	.word	0x20000fc8

00014f20 <pdsReturnFreeRowIdx>:
\brief Finds free row index by scanning the row map.

\param[out] - returns free row index
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
   14f20:	b580      	push	{r7, lr}
   14f22:	b082      	sub	sp, #8
   14f24:	af00      	add	r7, sp, #0
    uint8_t rowIdx;
    bool found = 0;
   14f26:	1dbb      	adds	r3, r7, #6
   14f28:	2200      	movs	r2, #0
   14f2a:	701a      	strb	r2, [r3, #0]
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
   14f2c:	1dfb      	adds	r3, r7, #7
   14f2e:	2200      	movs	r2, #0
   14f30:	701a      	strb	r2, [r3, #0]
   14f32:	e023      	b.n	14f7c <pdsReturnFreeRowIdx+0x5c>
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
   14f34:	1dfb      	adds	r3, r7, #7
   14f36:	781a      	ldrb	r2, [r3, #0]
   14f38:	4b2f      	ldr	r3, [pc, #188]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14f3a:	00d2      	lsls	r2, r2, #3
   14f3c:	58d3      	ldr	r3, [r2, r3]
   14f3e:	3301      	adds	r3, #1
   14f40:	d117      	bne.n	14f72 <pdsReturnFreeRowIdx+0x52>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
   14f42:	1dfb      	adds	r3, r7, #7
   14f44:	781b      	ldrb	r3, [r3, #0]
   14f46:	4a2c      	ldr	r2, [pc, #176]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14f48:	00db      	lsls	r3, r3, #3
   14f4a:	18d3      	adds	r3, r2, r3
   14f4c:	3306      	adds	r3, #6
   14f4e:	881b      	ldrh	r3, [r3, #0]
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
   14f50:	4a2a      	ldr	r2, [pc, #168]	; (14ffc <pdsReturnFreeRowIdx+0xdc>)
   14f52:	4293      	cmp	r3, r2
   14f54:	d10d      	bne.n	14f72 <pdsReturnFreeRowIdx+0x52>
            (USHRT_MAX == rowMap[rowIdx].memId) )
   14f56:	1dfb      	adds	r3, r7, #7
   14f58:	781b      	ldrb	r3, [r3, #0]
   14f5a:	4a27      	ldr	r2, [pc, #156]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14f5c:	00db      	lsls	r3, r3, #3
   14f5e:	18d3      	adds	r3, r2, r3
   14f60:	3304      	adds	r3, #4
   14f62:	881b      	ldrh	r3, [r3, #0]
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
   14f64:	4a25      	ldr	r2, [pc, #148]	; (14ffc <pdsReturnFreeRowIdx+0xdc>)
   14f66:	4293      	cmp	r3, r2
   14f68:	d103      	bne.n	14f72 <pdsReturnFreeRowIdx+0x52>
        {
            found = 1;
   14f6a:	1dbb      	adds	r3, r7, #6
   14f6c:	2201      	movs	r2, #1
   14f6e:	701a      	strb	r2, [r3, #0]
            break;
   14f70:	e008      	b.n	14f84 <pdsReturnFreeRowIdx+0x64>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
   14f72:	1dfb      	adds	r3, r7, #7
   14f74:	781a      	ldrb	r2, [r3, #0]
   14f76:	1dfb      	adds	r3, r7, #7
   14f78:	3201      	adds	r2, #1
   14f7a:	701a      	strb	r2, [r3, #0]
   14f7c:	1dfb      	adds	r3, r7, #7
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	2b1f      	cmp	r3, #31
   14f82:	d9d7      	bls.n	14f34 <pdsReturnFreeRowIdx+0x14>
        }
    }

    if(!found)
   14f84:	1dbb      	adds	r3, r7, #6
   14f86:	781b      	ldrb	r3, [r3, #0]
   14f88:	2201      	movs	r2, #1
   14f8a:	4053      	eors	r3, r2
   14f8c:	b2db      	uxtb	r3, r3
   14f8e:	2b00      	cmp	r3, #0
   14f90:	d02b      	beq.n	14fea <pdsReturnFreeRowIdx+0xca>
    {
        pdsUpdateRowMap();
   14f92:	4b1b      	ldr	r3, [pc, #108]	; (15000 <pdsReturnFreeRowIdx+0xe0>)
   14f94:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
   14f96:	1dfb      	adds	r3, r7, #7
   14f98:	2200      	movs	r2, #0
   14f9a:	701a      	strb	r2, [r3, #0]
   14f9c:	e01f      	b.n	14fde <pdsReturnFreeRowIdx+0xbe>
        {
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
   14f9e:	1dfb      	adds	r3, r7, #7
   14fa0:	781a      	ldrb	r2, [r3, #0]
   14fa2:	4b15      	ldr	r3, [pc, #84]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14fa4:	00d2      	lsls	r2, r2, #3
   14fa6:	58d3      	ldr	r3, [r2, r3]
   14fa8:	3301      	adds	r3, #1
   14faa:	d113      	bne.n	14fd4 <pdsReturnFreeRowIdx+0xb4>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
   14fac:	1dfb      	adds	r3, r7, #7
   14fae:	781b      	ldrb	r3, [r3, #0]
   14fb0:	4a11      	ldr	r2, [pc, #68]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14fb2:	00db      	lsls	r3, r3, #3
   14fb4:	18d3      	adds	r3, r2, r3
   14fb6:	3306      	adds	r3, #6
   14fb8:	881b      	ldrh	r3, [r3, #0]
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
   14fba:	4a10      	ldr	r2, [pc, #64]	; (14ffc <pdsReturnFreeRowIdx+0xdc>)
   14fbc:	4293      	cmp	r3, r2
   14fbe:	d109      	bne.n	14fd4 <pdsReturnFreeRowIdx+0xb4>
                (USHRT_MAX == rowMap[rowIdx].memId))
   14fc0:	1dfb      	adds	r3, r7, #7
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	4a0c      	ldr	r2, [pc, #48]	; (14ff8 <pdsReturnFreeRowIdx+0xd8>)
   14fc6:	00db      	lsls	r3, r3, #3
   14fc8:	18d3      	adds	r3, r2, r3
   14fca:	3304      	adds	r3, #4
   14fcc:	881b      	ldrh	r3, [r3, #0]
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
   14fce:	4a0b      	ldr	r2, [pc, #44]	; (14ffc <pdsReturnFreeRowIdx+0xdc>)
   14fd0:	4293      	cmp	r3, r2
   14fd2:	d009      	beq.n	14fe8 <pdsReturnFreeRowIdx+0xc8>
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
   14fd4:	1dfb      	adds	r3, r7, #7
   14fd6:	781a      	ldrb	r2, [r3, #0]
   14fd8:	1dfb      	adds	r3, r7, #7
   14fda:	3201      	adds	r2, #1
   14fdc:	701a      	strb	r2, [r3, #0]
   14fde:	1dfb      	adds	r3, r7, #7
   14fe0:	781b      	ldrb	r3, [r3, #0]
   14fe2:	2b1f      	cmp	r3, #31
   14fe4:	d9db      	bls.n	14f9e <pdsReturnFreeRowIdx+0x7e>
   14fe6:	e000      	b.n	14fea <pdsReturnFreeRowIdx+0xca>
            {
                break;
   14fe8:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
	return rowIdx;
   14fea:	1dfb      	adds	r3, r7, #7
   14fec:	781b      	ldrb	r3, [r3, #0]
   14fee:	b29b      	uxth	r3, r3
}
   14ff0:	0018      	movs	r0, r3
   14ff2:	46bd      	mov	sp, r7
   14ff4:	b002      	add	sp, #8
   14ff6:	bd80      	pop	{r7, pc}
   14ff8:	20000fc8 	.word	0x20000fc8
   14ffc:	0000ffff 	.word	0x0000ffff
   15000:	00014ce9 	.word	0x00014ce9

00015004 <isFileFound>:
\brief This function checks if a file is found in the file map.

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
   15004:	b580      	push	{r7, lr}
   15006:	b084      	sub	sp, #16
   15008:	af00      	add	r7, sp, #0
   1500a:	0002      	movs	r2, r0
   1500c:	1dfb      	adds	r3, r7, #7
   1500e:	701a      	strb	r2, [r3, #0]
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
   15010:	1dfb      	adds	r3, r7, #7
   15012:	7819      	ldrb	r1, [r3, #0]
   15014:	230e      	movs	r3, #14
   15016:	18fb      	adds	r3, r7, r3
   15018:	4a08      	ldr	r2, [pc, #32]	; (1503c <isFileFound+0x38>)
   1501a:	0049      	lsls	r1, r1, #1
   1501c:	5a8a      	ldrh	r2, [r1, r2]
   1501e:	801a      	strh	r2, [r3, #0]
	if (USHRT_MAX == rowIdx)
   15020:	230e      	movs	r3, #14
   15022:	18fb      	adds	r3, r7, r3
   15024:	881b      	ldrh	r3, [r3, #0]
   15026:	4a06      	ldr	r2, [pc, #24]	; (15040 <isFileFound+0x3c>)
   15028:	4293      	cmp	r3, r2
   1502a:	d101      	bne.n	15030 <isFileFound+0x2c>
	{
		return false;
   1502c:	2300      	movs	r3, #0
   1502e:	e000      	b.n	15032 <isFileFound+0x2e>
	}
	else
	{
		return true;
   15030:	2301      	movs	r3, #1
	}
}
   15032:	0018      	movs	r0, r3
   15034:	46bd      	mov	sp, r7
   15036:	b004      	add	sp, #16
   15038:	bd80      	pop	{r7, pc}
   1503a:	46c0      	nop			; (mov r8, r8)
   1503c:	200010c8 	.word	0x200010c8
   15040:	0000ffff 	.word	0x0000ffff

00015044 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
   15044:	b580      	push	{r7, lr}
   15046:	af00      	add	r7, sp, #0
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
   15048:	2380      	movs	r3, #128	; 0x80
   1504a:	005a      	lsls	r2, r3, #1
   1504c:	4b07      	ldr	r3, [pc, #28]	; (1506c <pdsWlDeleteAll+0x28>)
   1504e:	21ff      	movs	r1, #255	; 0xff
   15050:	0018      	movs	r0, r3
   15052:	4b07      	ldr	r3, [pc, #28]	; (15070 <pdsWlDeleteAll+0x2c>)
   15054:	4798      	blx	r3
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
   15056:	4b07      	ldr	r3, [pc, #28]	; (15074 <pdsWlDeleteAll+0x30>)
   15058:	221a      	movs	r2, #26
   1505a:	21ff      	movs	r1, #255	; 0xff
   1505c:	0018      	movs	r0, r3
   1505e:	4b04      	ldr	r3, [pc, #16]	; (15070 <pdsWlDeleteAll+0x2c>)
   15060:	4798      	blx	r3
	/* Call NVM Erase All */
	pdsNvmEraseAll();
   15062:	4b05      	ldr	r3, [pc, #20]	; (15078 <pdsWlDeleteAll+0x34>)
   15064:	4798      	blx	r3
}
   15066:	46c0      	nop			; (mov r8, r8)
   15068:	46bd      	mov	sp, r7
   1506a:	bd80      	pop	{r7, pc}
   1506c:	20000fc8 	.word	0x20000fc8
   15070:	000241cd 	.word	0x000241cd
   15074:	200010c8 	.word	0x200010c8
   15078:	00014375 	.word	0x00014375

0001507c <system_pinmux_get_group_from_gpio_pin>:
{
   1507c:	b580      	push	{r7, lr}
   1507e:	b084      	sub	sp, #16
   15080:	af00      	add	r7, sp, #0
   15082:	0002      	movs	r2, r0
   15084:	1dfb      	adds	r3, r7, #7
   15086:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15088:	230f      	movs	r3, #15
   1508a:	18fb      	adds	r3, r7, r3
   1508c:	1dfa      	adds	r2, r7, #7
   1508e:	7812      	ldrb	r2, [r2, #0]
   15090:	09d2      	lsrs	r2, r2, #7
   15092:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15094:	230e      	movs	r3, #14
   15096:	18fb      	adds	r3, r7, r3
   15098:	1dfa      	adds	r2, r7, #7
   1509a:	7812      	ldrb	r2, [r2, #0]
   1509c:	0952      	lsrs	r2, r2, #5
   1509e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   150a0:	4b0d      	ldr	r3, [pc, #52]	; (150d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   150a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   150a4:	230f      	movs	r3, #15
   150a6:	18fb      	adds	r3, r7, r3
   150a8:	781b      	ldrb	r3, [r3, #0]
   150aa:	2b00      	cmp	r3, #0
   150ac:	d10f      	bne.n	150ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   150ae:	230f      	movs	r3, #15
   150b0:	18fb      	adds	r3, r7, r3
   150b2:	781b      	ldrb	r3, [r3, #0]
   150b4:	009b      	lsls	r3, r3, #2
   150b6:	2210      	movs	r2, #16
   150b8:	4694      	mov	ip, r2
   150ba:	44bc      	add	ip, r7
   150bc:	4463      	add	r3, ip
   150be:	3b08      	subs	r3, #8
   150c0:	681a      	ldr	r2, [r3, #0]
   150c2:	230e      	movs	r3, #14
   150c4:	18fb      	adds	r3, r7, r3
   150c6:	781b      	ldrb	r3, [r3, #0]
   150c8:	01db      	lsls	r3, r3, #7
   150ca:	18d3      	adds	r3, r2, r3
   150cc:	e000      	b.n	150d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   150ce:	2300      	movs	r3, #0
}
   150d0:	0018      	movs	r0, r3
   150d2:	46bd      	mov	sp, r7
   150d4:	b004      	add	sp, #16
   150d6:	bd80      	pop	{r7, pc}
   150d8:	40002800 	.word	0x40002800

000150dc <port_get_group_from_gpio_pin>:
{
   150dc:	b580      	push	{r7, lr}
   150de:	b082      	sub	sp, #8
   150e0:	af00      	add	r7, sp, #0
   150e2:	0002      	movs	r2, r0
   150e4:	1dfb      	adds	r3, r7, #7
   150e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   150e8:	1dfb      	adds	r3, r7, #7
   150ea:	781b      	ldrb	r3, [r3, #0]
   150ec:	0018      	movs	r0, r3
   150ee:	4b03      	ldr	r3, [pc, #12]	; (150fc <port_get_group_from_gpio_pin+0x20>)
   150f0:	4798      	blx	r3
   150f2:	0003      	movs	r3, r0
}
   150f4:	0018      	movs	r0, r3
   150f6:	46bd      	mov	sp, r7
   150f8:	b002      	add	sp, #8
   150fa:	bd80      	pop	{r7, pc}
   150fc:	0001507d 	.word	0x0001507d

00015100 <port_pin_set_output_level>:
{
   15100:	b580      	push	{r7, lr}
   15102:	b084      	sub	sp, #16
   15104:	af00      	add	r7, sp, #0
   15106:	0002      	movs	r2, r0
   15108:	1dfb      	adds	r3, r7, #7
   1510a:	701a      	strb	r2, [r3, #0]
   1510c:	1dbb      	adds	r3, r7, #6
   1510e:	1c0a      	adds	r2, r1, #0
   15110:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15112:	1dfb      	adds	r3, r7, #7
   15114:	781b      	ldrb	r3, [r3, #0]
   15116:	0018      	movs	r0, r3
   15118:	4b0d      	ldr	r3, [pc, #52]	; (15150 <port_pin_set_output_level+0x50>)
   1511a:	4798      	blx	r3
   1511c:	0003      	movs	r3, r0
   1511e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15120:	1dfb      	adds	r3, r7, #7
   15122:	781b      	ldrb	r3, [r3, #0]
   15124:	221f      	movs	r2, #31
   15126:	4013      	ands	r3, r2
   15128:	2201      	movs	r2, #1
   1512a:	409a      	lsls	r2, r3
   1512c:	0013      	movs	r3, r2
   1512e:	60bb      	str	r3, [r7, #8]
	if (level) {
   15130:	1dbb      	adds	r3, r7, #6
   15132:	781b      	ldrb	r3, [r3, #0]
   15134:	2b00      	cmp	r3, #0
   15136:	d003      	beq.n	15140 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15138:	68fb      	ldr	r3, [r7, #12]
   1513a:	68ba      	ldr	r2, [r7, #8]
   1513c:	619a      	str	r2, [r3, #24]
}
   1513e:	e002      	b.n	15146 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15140:	68fb      	ldr	r3, [r7, #12]
   15142:	68ba      	ldr	r2, [r7, #8]
   15144:	615a      	str	r2, [r3, #20]
}
   15146:	46c0      	nop			; (mov r8, r8)
   15148:	46bd      	mov	sp, r7
   1514a:	b004      	add	sp, #16
   1514c:	bd80      	pop	{r7, pc}
   1514e:	46c0      	nop			; (mov r8, r8)
   15150:	000150dd 	.word	0x000150dd

00015154 <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
   15154:	b580      	push	{r7, lr}
   15156:	b084      	sub	sp, #16
   15158:	af00      	add	r7, sp, #0
   1515a:	0002      	movs	r2, r0
   1515c:	1dfb      	adds	r3, r7, #7
   1515e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15160:	1dfb      	adds	r3, r7, #7
   15162:	781b      	ldrb	r3, [r3, #0]
   15164:	0018      	movs	r0, r3
   15166:	4b09      	ldr	r3, [pc, #36]	; (1518c <port_pin_toggle_output_level+0x38>)
   15168:	4798      	blx	r3
   1516a:	0003      	movs	r3, r0
   1516c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1516e:	1dfb      	adds	r3, r7, #7
   15170:	781b      	ldrb	r3, [r3, #0]
   15172:	221f      	movs	r2, #31
   15174:	4013      	ands	r3, r2
   15176:	2201      	movs	r2, #1
   15178:	409a      	lsls	r2, r3
   1517a:	0013      	movs	r3, r2
   1517c:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   1517e:	68fb      	ldr	r3, [r7, #12]
   15180:	68ba      	ldr	r2, [r7, #8]
   15182:	61da      	str	r2, [r3, #28]
}
   15184:	46c0      	nop			; (mov r8, r8)
   15186:	46bd      	mov	sp, r7
   15188:	b004      	add	sp, #16
   1518a:	bd80      	pop	{r7, pc}
   1518c:	000150dd 	.word	0x000150dd

00015190 <set_LED_data>:
 \param[in]  data  - could be LOFF, LON, LTOGGLE
             LED_0_PIN - Pin number of the LED0 in the board
 ************************************************************************/

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
   15190:	b580      	push	{r7, lr}
   15192:	b084      	sub	sp, #16
   15194:	af00      	add	r7, sp, #0
   15196:	0002      	movs	r2, r0
   15198:	6039      	str	r1, [r7, #0]
   1519a:	1dfb      	adds	r3, r7, #7
   1519c:	701a      	strb	r2, [r3, #0]
    int8_t status = 0;
   1519e:	230f      	movs	r3, #15
   151a0:	18fb      	adds	r3, r7, r3
   151a2:	2200      	movs	r2, #0
   151a4:	701a      	strb	r2, [r3, #0]
    int8_t ledPin = -1;
   151a6:	230e      	movs	r3, #14
   151a8:	18fb      	adds	r3, r7, r3
   151aa:	22ff      	movs	r2, #255	; 0xff
   151ac:	701a      	strb	r2, [r3, #0]
    uint8_t value = *data;
   151ae:	230d      	movs	r3, #13
   151b0:	18fb      	adds	r3, r7, r3
   151b2:	683a      	ldr	r2, [r7, #0]
   151b4:	7812      	ldrb	r2, [r2, #0]
   151b6:	701a      	strb	r2, [r3, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
   151b8:	1dfb      	adds	r3, r7, #7
   151ba:	781b      	ldrb	r3, [r3, #0]
   151bc:	2b02      	cmp	r3, #2
   151be:	d104      	bne.n	151ca <set_LED_data+0x3a>
    {
        ledPin = LED_0_PIN;
   151c0:	230e      	movs	r3, #14
   151c2:	18fb      	adds	r3, r7, r3
   151c4:	2213      	movs	r2, #19
   151c6:	701a      	strb	r2, [r3, #0]
   151c8:	e010      	b.n	151ec <set_LED_data+0x5c>
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
   151ca:	1dfb      	adds	r3, r7, #7
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	2b03      	cmp	r3, #3
   151d0:	d104      	bne.n	151dc <set_LED_data+0x4c>
    {
        ledPin = LED_1_PIN;
   151d2:	230e      	movs	r3, #14
   151d4:	18fb      	adds	r3, r7, r3
   151d6:	2212      	movs	r2, #18
   151d8:	701a      	strb	r2, [r3, #0]
   151da:	e007      	b.n	151ec <set_LED_data+0x5c>
    }
    else
#endif
    {
        ledPin = UNSUPPORTED_RESOURCE;
   151dc:	230e      	movs	r3, #14
   151de:	18fb      	adds	r3, r7, r3
   151e0:	22ff      	movs	r2, #255	; 0xff
   151e2:	701a      	strb	r2, [r3, #0]
        value = UNSUPPORTED_RESOURCE;
   151e4:	230d      	movs	r3, #13
   151e6:	18fb      	adds	r3, r7, r3
   151e8:	22ff      	movs	r2, #255	; 0xff
   151ea:	701a      	strb	r2, [r3, #0]
    }

    switch(value)
   151ec:	230d      	movs	r3, #13
   151ee:	18fb      	adds	r3, r7, r3
   151f0:	781b      	ldrb	r3, [r3, #0]
   151f2:	2b01      	cmp	r3, #1
   151f4:	d00b      	beq.n	1520e <set_LED_data+0x7e>
   151f6:	2b02      	cmp	r3, #2
   151f8:	d011      	beq.n	1521e <set_LED_data+0x8e>
   151fa:	2b00      	cmp	r3, #0
   151fc:	d116      	bne.n	1522c <set_LED_data+0x9c>
    {
        case LOFF:
        {
            LED_Off(ledPin);
   151fe:	230e      	movs	r3, #14
   15200:	18fb      	adds	r3, r7, r3
   15202:	781b      	ldrb	r3, [r3, #0]
   15204:	2101      	movs	r1, #1
   15206:	0018      	movs	r0, r3
   15208:	4b0f      	ldr	r3, [pc, #60]	; (15248 <set_LED_data+0xb8>)
   1520a:	4798      	blx	r3
            break;
   1520c:	e013      	b.n	15236 <set_LED_data+0xa6>
        }
        case LON:
        {
            LED_On(ledPin);
   1520e:	230e      	movs	r3, #14
   15210:	18fb      	adds	r3, r7, r3
   15212:	781b      	ldrb	r3, [r3, #0]
   15214:	2100      	movs	r1, #0
   15216:	0018      	movs	r0, r3
   15218:	4b0b      	ldr	r3, [pc, #44]	; (15248 <set_LED_data+0xb8>)
   1521a:	4798      	blx	r3
            break;
   1521c:	e00b      	b.n	15236 <set_LED_data+0xa6>
        }
        case LTOGGLE:
        {
            LED_Toggle(ledPin);
   1521e:	230e      	movs	r3, #14
   15220:	18fb      	adds	r3, r7, r3
   15222:	781b      	ldrb	r3, [r3, #0]
   15224:	0018      	movs	r0, r3
   15226:	4b09      	ldr	r3, [pc, #36]	; (1524c <set_LED_data+0xbc>)
   15228:	4798      	blx	r3
            break;
   1522a:	e004      	b.n	15236 <set_LED_data+0xa6>
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
   1522c:	230f      	movs	r3, #15
   1522e:	18fb      	adds	r3, r7, r3
   15230:	22ff      	movs	r2, #255	; 0xff
   15232:	701a      	strb	r2, [r3, #0]
            break;
   15234:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
   15236:	230f      	movs	r3, #15
   15238:	18fb      	adds	r3, r7, r3
   1523a:	781b      	ldrb	r3, [r3, #0]
   1523c:	b25b      	sxtb	r3, r3
}
   1523e:	0018      	movs	r0, r3
   15240:	46bd      	mov	sp, r7
   15242:	b004      	add	sp, #16
   15244:	bd80      	pop	{r7, pc}
   15246:	46c0      	nop			; (mov r8, r8)
   15248:	00015101 	.word	0x00015101
   1524c:	00015155 	.word	0x00015155

00015250 <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
   15250:	b580      	push	{r7, lr}
   15252:	af00      	add	r7, sp, #0
    //temp_sensor_init();
    //LED_init();
}
   15254:	46c0      	nop			; (mov r8, r8)
   15256:	46bd      	mov	sp, r7
   15258:	bd80      	pop	{r7, pc}
	...

0001525c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   1525c:	b580      	push	{r7, lr}
   1525e:	b082      	sub	sp, #8
   15260:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15262:	f3ef 8310 	mrs	r3, PRIMASK
   15266:	607b      	str	r3, [r7, #4]
  return(result);
   15268:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
   1526a:	425a      	negs	r2, r3
   1526c:	4153      	adcs	r3, r2
   1526e:	b2db      	uxtb	r3, r3
   15270:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   15272:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   15274:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   15278:	4b03      	ldr	r3, [pc, #12]	; (15288 <cpu_irq_save+0x2c>)
   1527a:	2200      	movs	r2, #0
   1527c:	701a      	strb	r2, [r3, #0]
	return flags;
   1527e:	683b      	ldr	r3, [r7, #0]
}
   15280:	0018      	movs	r0, r3
   15282:	46bd      	mov	sp, r7
   15284:	b002      	add	sp, #8
   15286:	bd80      	pop	{r7, pc}
   15288:	20000008 	.word	0x20000008

0001528c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   1528c:	b580      	push	{r7, lr}
   1528e:	b082      	sub	sp, #8
   15290:	af00      	add	r7, sp, #0
   15292:	6078      	str	r0, [r7, #4]
	return (flags);
   15294:	687b      	ldr	r3, [r7, #4]
   15296:	1e5a      	subs	r2, r3, #1
   15298:	4193      	sbcs	r3, r2
   1529a:	b2db      	uxtb	r3, r3
}
   1529c:	0018      	movs	r0, r3
   1529e:	46bd      	mov	sp, r7
   152a0:	b002      	add	sp, #8
   152a2:	bd80      	pop	{r7, pc}

000152a4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   152a4:	b580      	push	{r7, lr}
   152a6:	b082      	sub	sp, #8
   152a8:	af00      	add	r7, sp, #0
   152aa:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   152ac:	687b      	ldr	r3, [r7, #4]
   152ae:	0018      	movs	r0, r3
   152b0:	4b06      	ldr	r3, [pc, #24]	; (152cc <cpu_irq_restore+0x28>)
   152b2:	4798      	blx	r3
   152b4:	1e03      	subs	r3, r0, #0
   152b6:	d005      	beq.n	152c4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   152b8:	4b05      	ldr	r3, [pc, #20]	; (152d0 <cpu_irq_restore+0x2c>)
   152ba:	2201      	movs	r2, #1
   152bc:	701a      	strb	r2, [r3, #0]
   152be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   152c2:	b662      	cpsie	i
}
   152c4:	46c0      	nop			; (mov r8, r8)
   152c6:	46bd      	mov	sp, r7
   152c8:	b002      	add	sp, #8
   152ca:	bd80      	pop	{r7, pc}
   152cc:	0001528d 	.word	0x0001528d
   152d0:	20000008 	.word	0x20000008

000152d4 <hwTimerOverflowCallback>:
/******************************************************************************
                     Interrupt service routines
******************************************************************************/
/* ISR to handle OVF interrupt from TC0 */
static void hwTimerOverflowCallback(void)
{
   152d4:	b580      	push	{r7, lr}
   152d6:	b082      	sub	sp, #8
   152d8:	af00      	add	r7, sp, #0
    uint16_t temp = sysTime;
   152da:	1dbb      	adds	r3, r7, #6
   152dc:	4a0c      	ldr	r2, [pc, #48]	; (15310 <hwTimerOverflowCallback+0x3c>)
   152de:	8812      	ldrh	r2, [r2, #0]
   152e0:	801a      	strh	r2, [r3, #0]
    if (++sysTime < temp)
   152e2:	4b0b      	ldr	r3, [pc, #44]	; (15310 <hwTimerOverflowCallback+0x3c>)
   152e4:	881b      	ldrh	r3, [r3, #0]
   152e6:	b29b      	uxth	r3, r3
   152e8:	3301      	adds	r3, #1
   152ea:	b29b      	uxth	r3, r3
   152ec:	4a08      	ldr	r2, [pc, #32]	; (15310 <hwTimerOverflowCallback+0x3c>)
   152ee:	1c19      	adds	r1, r3, #0
   152f0:	8011      	strh	r1, [r2, #0]
   152f2:	1dba      	adds	r2, r7, #6
   152f4:	8812      	ldrh	r2, [r2, #0]
   152f6:	429a      	cmp	r2, r3
   152f8:	d904      	bls.n	15304 <hwTimerOverflowCallback+0x30>
    {
        sysTimeOvf++;
   152fa:	4b06      	ldr	r3, [pc, #24]	; (15314 <hwTimerOverflowCallback+0x40>)
   152fc:	681b      	ldr	r3, [r3, #0]
   152fe:	1c5a      	adds	r2, r3, #1
   15300:	4b04      	ldr	r3, [pc, #16]	; (15314 <hwTimerOverflowCallback+0x40>)
   15302:	601a      	str	r2, [r3, #0]
    }

    swtimerProcessOverflow();
   15304:	4b04      	ldr	r3, [pc, #16]	; (15318 <hwTimerOverflowCallback+0x44>)
   15306:	4798      	blx	r3
}
   15308:	46c0      	nop			; (mov r8, r8)
   1530a:	46bd      	mov	sp, r7
   1530c:	b002      	add	sp, #8
   1530e:	bd80      	pop	{r7, pc}
   15310:	20001978 	.word	0x20001978
   15314:	2000197c 	.word	0x2000197c
   15318:	000156dd 	.word	0x000156dd

0001531c <hwTimerExpiryCallback>:

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
   1531c:	b580      	push	{r7, lr}
   1531e:	af00      	add	r7, sp, #0
    if (0 < runningTimers)
   15320:	4b06      	ldr	r3, [pc, #24]	; (1533c <hwTimerExpiryCallback+0x20>)
   15322:	781b      	ldrb	r3, [r3, #0]
   15324:	b2db      	uxtb	r3, r3
   15326:	2b00      	cmp	r3, #0
   15328:	d005      	beq.n	15336 <hwTimerExpiryCallback+0x1a>
    {
        isTimerTriggered = true;
   1532a:	4b05      	ldr	r3, [pc, #20]	; (15340 <hwTimerExpiryCallback+0x24>)
   1532c:	2201      	movs	r2, #1
   1532e:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
   15330:	2001      	movs	r0, #1
   15332:	4b04      	ldr	r3, [pc, #16]	; (15344 <hwTimerExpiryCallback+0x28>)
   15334:	4798      	blx	r3
    }
}
   15336:	46c0      	nop			; (mov r8, r8)
   15338:	46bd      	mov	sp, r7
   1533a:	bd80      	pop	{r7, pc}
   1533c:	200010e2 	.word	0x200010e2
   15340:	2000197a 	.word	0x2000197a
   15344:	000162bd 	.word	0x000162bd

00015348 <swtimerStartAbsoluteTimer>:
/**************************************************************************//**
\brief Inserts the timer in running timers queue in sorted order
******************************************************************************/
static void swtimerStartAbsoluteTimer(uint8_t timerId, uint32_t pointInTime,
    void *handlerCb, void *parameter)
{
   15348:	b580      	push	{r7, lr}
   1534a:	b086      	sub	sp, #24
   1534c:	af00      	add	r7, sp, #0
   1534e:	60b9      	str	r1, [r7, #8]
   15350:	607a      	str	r2, [r7, #4]
   15352:	603b      	str	r3, [r7, #0]
   15354:	230f      	movs	r3, #15
   15356:	18fb      	adds	r3, r7, r3
   15358:	1c02      	adds	r2, r0, #0
   1535a:	701a      	strb	r2, [r3, #0]
    uint8_t flags = cpu_irq_save();
   1535c:	4b71      	ldr	r3, [pc, #452]	; (15524 <swtimerStartAbsoluteTimer+0x1dc>)
   1535e:	4798      	blx	r3
   15360:	0002      	movs	r2, r0
   15362:	2313      	movs	r3, #19
   15364:	18fb      	adds	r3, r7, r3
   15366:	701a      	strb	r2, [r3, #0]

    /* Check is done to see if any timer has expired */
    swtimerInternalHandler();
   15368:	4b6f      	ldr	r3, [pc, #444]	; (15528 <swtimerStartAbsoluteTimer+0x1e0>)
   1536a:	4798      	blx	r3

    swTimers[timerId].absoluteExpiryTime = pointInTime;
   1536c:	230f      	movs	r3, #15
   1536e:	18fb      	adds	r3, r7, r3
   15370:	781a      	ldrb	r2, [r3, #0]
   15372:	4b6e      	ldr	r3, [pc, #440]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15374:	0112      	lsls	r2, r2, #4
   15376:	68b9      	ldr	r1, [r7, #8]
   15378:	50d1      	str	r1, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
   1537a:	230f      	movs	r3, #15
   1537c:	18fb      	adds	r3, r7, r3
   1537e:	781b      	ldrb	r3, [r3, #0]
   15380:	687a      	ldr	r2, [r7, #4]
   15382:	496a      	ldr	r1, [pc, #424]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15384:	011b      	lsls	r3, r3, #4
   15386:	18cb      	adds	r3, r1, r3
   15388:	3304      	adds	r3, #4
   1538a:	601a      	str	r2, [r3, #0]
    swTimers[timerId].paramCb = parameter;
   1538c:	230f      	movs	r3, #15
   1538e:	18fb      	adds	r3, r7, r3
   15390:	781b      	ldrb	r3, [r3, #0]
   15392:	4a66      	ldr	r2, [pc, #408]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15394:	011b      	lsls	r3, r3, #4
   15396:	18d3      	adds	r3, r2, r3
   15398:	3308      	adds	r3, #8
   1539a:	683a      	ldr	r2, [r7, #0]
   1539c:	601a      	str	r2, [r3, #0]
    swTimers[timerId].loaded = false;
   1539e:	230f      	movs	r3, #15
   153a0:	18fb      	adds	r3, r7, r3
   153a2:	781b      	ldrb	r3, [r3, #0]
   153a4:	4a61      	ldr	r2, [pc, #388]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   153a6:	011b      	lsls	r3, r3, #4
   153a8:	18d3      	adds	r3, r2, r3
   153aa:	330d      	adds	r3, #13
   153ac:	2200      	movs	r2, #0
   153ae:	701a      	strb	r2, [r3, #0]
    runningTimers++;
   153b0:	4b5f      	ldr	r3, [pc, #380]	; (15530 <swtimerStartAbsoluteTimer+0x1e8>)
   153b2:	781b      	ldrb	r3, [r3, #0]
   153b4:	b2db      	uxtb	r3, r3
   153b6:	3301      	adds	r3, #1
   153b8:	b2da      	uxtb	r2, r3
   153ba:	4b5d      	ldr	r3, [pc, #372]	; (15530 <swtimerStartAbsoluteTimer+0x1e8>)
   153bc:	701a      	strb	r2, [r3, #0]

    if (SWTIMER_INVALID == runningTimerQueueHead)
   153be:	4b5d      	ldr	r3, [pc, #372]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   153c0:	681b      	ldr	r3, [r3, #0]
   153c2:	2bff      	cmp	r3, #255	; 0xff
   153c4:	d10b      	bne.n	153de <swtimerStartAbsoluteTimer+0x96>
    {
        runningTimerQueueHead = timerId;
   153c6:	230f      	movs	r3, #15
   153c8:	18fb      	adds	r3, r7, r3
   153ca:	781a      	ldrb	r2, [r3, #0]
   153cc:	4b59      	ldr	r3, [pc, #356]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   153ce:	601a      	str	r2, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
   153d0:	4b58      	ldr	r3, [pc, #352]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   153d2:	681b      	ldr	r3, [r3, #0]
   153d4:	b2db      	uxtb	r3, r3
   153d6:	0018      	movs	r0, r3
   153d8:	4b57      	ldr	r3, [pc, #348]	; (15538 <swtimerStartAbsoluteTimer+0x1f0>)
   153da:	4798      	blx	r3
   153dc:	e098      	b.n	15510 <swtimerStartAbsoluteTimer+0x1c8>
    }
    else
    {
        uint8_t index;
        bool isTimerInserted = false;
   153de:	2316      	movs	r3, #22
   153e0:	18fb      	adds	r3, r7, r3
   153e2:	2200      	movs	r2, #0
   153e4:	701a      	strb	r2, [r3, #0]
        uint8_t currIndex = runningTimerQueueHead;
   153e6:	4b53      	ldr	r3, [pc, #332]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   153e8:	681a      	ldr	r2, [r3, #0]
   153ea:	2315      	movs	r3, #21
   153ec:	18fb      	adds	r3, r7, r3
   153ee:	701a      	strb	r2, [r3, #0]
        uint8_t prevIndex = runningTimerQueueHead;
   153f0:	4b50      	ldr	r3, [pc, #320]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   153f2:	681a      	ldr	r2, [r3, #0]
   153f4:	2314      	movs	r3, #20
   153f6:	18fb      	adds	r3, r7, r3
   153f8:	701a      	strb	r2, [r3, #0]
        /*
        * Loop through the running timers in the array of swTimers.
        * Find the correct position for timer identified by 'timerId'
        * to be inserted in the runningTimersQueue.
        */
        for (index = 0; index < runningTimers; index++)
   153fa:	2317      	movs	r3, #23
   153fc:	18fb      	adds	r3, r7, r3
   153fe:	2200      	movs	r2, #0
   15400:	701a      	strb	r2, [r3, #0]
   15402:	e061      	b.n	154c8 <swtimerStartAbsoluteTimer+0x180>
        {
            if (SWTIMER_INVALID != currIndex)
   15404:	2315      	movs	r3, #21
   15406:	18fb      	adds	r3, r7, r3
   15408:	781b      	ldrb	r3, [r3, #0]
   1540a:	2bff      	cmp	r3, #255	; 0xff
   1540c:	d055      	beq.n	154ba <swtimerStartAbsoluteTimer+0x172>
            {
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
   1540e:	2315      	movs	r3, #21
   15410:	18fb      	adds	r3, r7, r3
   15412:	781a      	ldrb	r2, [r3, #0]
   15414:	4b45      	ldr	r3, [pc, #276]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15416:	0112      	lsls	r2, r2, #4
   15418:	58d3      	ldr	r3, [r2, r3]
   1541a:	68ba      	ldr	r2, [r7, #8]
   1541c:	0011      	movs	r1, r2
   1541e:	0018      	movs	r0, r3
   15420:	4b46      	ldr	r3, [pc, #280]	; (1553c <swtimerStartAbsoluteTimer+0x1f4>)
   15422:	4798      	blx	r3
   15424:	1e03      	subs	r3, r0, #0
   15426:	d011      	beq.n	1544c <swtimerStartAbsoluteTimer+0x104>
                {
                    /*
                    * Requested absolute time value is greater than the time
                    * value pointed by the curr_index in the timer array
                    */
                    prevIndex = currIndex;
   15428:	2314      	movs	r3, #20
   1542a:	18fb      	adds	r3, r7, r3
   1542c:	2215      	movs	r2, #21
   1542e:	18ba      	adds	r2, r7, r2
   15430:	7812      	ldrb	r2, [r2, #0]
   15432:	701a      	strb	r2, [r3, #0]
                    currIndex = swTimers[currIndex].nextTimer;
   15434:	2315      	movs	r3, #21
   15436:	18fb      	adds	r3, r7, r3
   15438:	781a      	ldrb	r2, [r3, #0]
   1543a:	2315      	movs	r3, #21
   1543c:	18fb      	adds	r3, r7, r3
   1543e:	493b      	ldr	r1, [pc, #236]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15440:	0112      	lsls	r2, r2, #4
   15442:	188a      	adds	r2, r1, r2
   15444:	320c      	adds	r2, #12
   15446:	7812      	ldrb	r2, [r2, #0]
   15448:	701a      	strb	r2, [r3, #0]
   1544a:	e036      	b.n	154ba <swtimerStartAbsoluteTimer+0x172>
                {
                /*
                * New timer 'timerId' to be inserted is having expiryDuration
                * that is lesser than the timer pointed by 'currentIndex'.
                */
                    swTimers[timerId].nextTimer = currIndex;
   1544c:	230f      	movs	r3, #15
   1544e:	18fb      	adds	r3, r7, r3
   15450:	781b      	ldrb	r3, [r3, #0]
   15452:	4a36      	ldr	r2, [pc, #216]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15454:	011b      	lsls	r3, r3, #4
   15456:	18d3      	adds	r3, r2, r3
   15458:	330c      	adds	r3, #12
   1545a:	2215      	movs	r2, #21
   1545c:	18ba      	adds	r2, r7, r2
   1545e:	7812      	ldrb	r2, [r2, #0]
   15460:	701a      	strb	r2, [r3, #0]
                    swTimers[currIndex].loaded = false;
   15462:	2315      	movs	r3, #21
   15464:	18fb      	adds	r3, r7, r3
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	4a30      	ldr	r2, [pc, #192]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   1546a:	011b      	lsls	r3, r3, #4
   1546c:	18d3      	adds	r3, r2, r3
   1546e:	330d      	adds	r3, #13
   15470:	2200      	movs	r2, #0
   15472:	701a      	strb	r2, [r3, #0]
                    if (runningTimerQueueHead == currIndex)
   15474:	2315      	movs	r3, #21
   15476:	18fb      	adds	r3, r7, r3
   15478:	781a      	ldrb	r2, [r3, #0]
   1547a:	4b2e      	ldr	r3, [pc, #184]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   1547c:	681b      	ldr	r3, [r3, #0]
   1547e:	429a      	cmp	r2, r3
   15480:	d10b      	bne.n	1549a <swtimerStartAbsoluteTimer+0x152>
                    {
                        /* Insertion at the head of the timer queue. */
                        runningTimerQueueHead = timerId;
   15482:	230f      	movs	r3, #15
   15484:	18fb      	adds	r3, r7, r3
   15486:	781a      	ldrb	r2, [r3, #0]
   15488:	4b2a      	ldr	r3, [pc, #168]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   1548a:	601a      	str	r2, [r3, #0]

                        loadHwTimer(runningTimerQueueHead);
   1548c:	4b29      	ldr	r3, [pc, #164]	; (15534 <swtimerStartAbsoluteTimer+0x1ec>)
   1548e:	681b      	ldr	r3, [r3, #0]
   15490:	b2db      	uxtb	r3, r3
   15492:	0018      	movs	r0, r3
   15494:	4b28      	ldr	r3, [pc, #160]	; (15538 <swtimerStartAbsoluteTimer+0x1f0>)
   15496:	4798      	blx	r3
   15498:	e00a      	b.n	154b0 <swtimerStartAbsoluteTimer+0x168>
                    }
                    else
                    {
                    /* Insertion at somewhere in the middle of timer queue. */
                        swTimers[prevIndex].nextTimer = timerId;
   1549a:	2314      	movs	r3, #20
   1549c:	18fb      	adds	r3, r7, r3
   1549e:	781b      	ldrb	r3, [r3, #0]
   154a0:	4a22      	ldr	r2, [pc, #136]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   154a2:	011b      	lsls	r3, r3, #4
   154a4:	18d3      	adds	r3, r2, r3
   154a6:	330c      	adds	r3, #12
   154a8:	220f      	movs	r2, #15
   154aa:	18ba      	adds	r2, r7, r2
   154ac:	7812      	ldrb	r2, [r2, #0]
   154ae:	701a      	strb	r2, [r3, #0]
                    }

                    isTimerInserted = true;
   154b0:	2316      	movs	r3, #22
   154b2:	18fb      	adds	r3, r7, r3
   154b4:	2201      	movs	r2, #1
   154b6:	701a      	strb	r2, [r3, #0]
                    break;
   154b8:	e00e      	b.n	154d8 <swtimerStartAbsoluteTimer+0x190>
        for (index = 0; index < runningTimers; index++)
   154ba:	2317      	movs	r3, #23
   154bc:	18fb      	adds	r3, r7, r3
   154be:	781a      	ldrb	r2, [r3, #0]
   154c0:	2317      	movs	r3, #23
   154c2:	18fb      	adds	r3, r7, r3
   154c4:	3201      	adds	r2, #1
   154c6:	701a      	strb	r2, [r3, #0]
   154c8:	4b19      	ldr	r3, [pc, #100]	; (15530 <swtimerStartAbsoluteTimer+0x1e8>)
   154ca:	781b      	ldrb	r3, [r3, #0]
   154cc:	b2db      	uxtb	r3, r3
   154ce:	2217      	movs	r2, #23
   154d0:	18ba      	adds	r2, r7, r2
   154d2:	7812      	ldrb	r2, [r2, #0]
   154d4:	429a      	cmp	r2, r3
   154d6:	d395      	bcc.n	15404 <swtimerStartAbsoluteTimer+0xbc>
                }
            }
        }

        if (!isTimerInserted)
   154d8:	2316      	movs	r3, #22
   154da:	18fb      	adds	r3, r7, r3
   154dc:	781b      	ldrb	r3, [r3, #0]
   154de:	2201      	movs	r2, #1
   154e0:	4053      	eors	r3, r2
   154e2:	b2db      	uxtb	r3, r3
   154e4:	2b00      	cmp	r3, #0
   154e6:	d013      	beq.n	15510 <swtimerStartAbsoluteTimer+0x1c8>
        {
            /* Insertion at the tail of the timer queue. */
            swTimers[prevIndex].nextTimer = timerId;
   154e8:	2314      	movs	r3, #20
   154ea:	18fb      	adds	r3, r7, r3
   154ec:	781b      	ldrb	r3, [r3, #0]
   154ee:	4a0f      	ldr	r2, [pc, #60]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   154f0:	011b      	lsls	r3, r3, #4
   154f2:	18d3      	adds	r3, r2, r3
   154f4:	330c      	adds	r3, #12
   154f6:	220f      	movs	r2, #15
   154f8:	18ba      	adds	r2, r7, r2
   154fa:	7812      	ldrb	r2, [r2, #0]
   154fc:	701a      	strb	r2, [r3, #0]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
   154fe:	230f      	movs	r3, #15
   15500:	18fb      	adds	r3, r7, r3
   15502:	781b      	ldrb	r3, [r3, #0]
   15504:	4a09      	ldr	r2, [pc, #36]	; (1552c <swtimerStartAbsoluteTimer+0x1e4>)
   15506:	011b      	lsls	r3, r3, #4
   15508:	18d3      	adds	r3, r2, r3
   1550a:	330c      	adds	r3, #12
   1550c:	22ff      	movs	r2, #255	; 0xff
   1550e:	701a      	strb	r2, [r3, #0]
        }
    }

    cpu_irq_restore(flags);
   15510:	2313      	movs	r3, #19
   15512:	18fb      	adds	r3, r7, r3
   15514:	781b      	ldrb	r3, [r3, #0]
   15516:	0018      	movs	r0, r3
   15518:	4b09      	ldr	r3, [pc, #36]	; (15540 <swtimerStartAbsoluteTimer+0x1f8>)
   1551a:	4798      	blx	r3
}
   1551c:	46c0      	nop			; (mov r8, r8)
   1551e:	46bd      	mov	sp, r7
   15520:	b006      	add	sp, #24
   15522:	bd80      	pop	{r7, pc}
   15524:	0001525d 	.word	0x0001525d
   15528:	0001579d 	.word	0x0001579d
   1552c:	200017e8 	.word	0x200017e8
   15530:	200010e2 	.word	0x200010e2
   15534:	200010e4 	.word	0x200010e4
   15538:	00015545 	.word	0x00015545
   1553c:	00015625 	.word	0x00015625
   15540:	000152a5 	.word	0x000152a5

00015544 <loadHwTimer>:
/**************************************************************************//**
\brief Sets the timer compare value for the given timer, if it is
       within the overflow limit, else it will not load compare
******************************************************************************/
static void loadHwTimer(uint8_t timerId)
{
   15544:	b590      	push	{r4, r7, lr}
   15546:	b087      	sub	sp, #28
   15548:	af00      	add	r7, sp, #0
   1554a:	0002      	movs	r2, r0
   1554c:	1dfb      	adds	r3, r7, #7
   1554e:	701a      	strb	r2, [r3, #0]
    if (SWTIMER_INVALID != timerId)
   15550:	1dfb      	adds	r3, r7, #7
   15552:	781b      	ldrb	r3, [r3, #0]
   15554:	2bff      	cmp	r3, #255	; 0xff
   15556:	d04e      	beq.n	155f6 <loadHwTimer+0xb2>
    {
        uint32_t now = gettime();
   15558:	4b2a      	ldr	r3, [pc, #168]	; (15604 <loadHwTimer+0xc0>)
   1555a:	4798      	blx	r3
   1555c:	0003      	movs	r3, r0
   1555e:	000c      	movs	r4, r1
   15560:	617b      	str	r3, [r7, #20]
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
   15562:	1dfb      	adds	r3, r7, #7
   15564:	781a      	ldrb	r2, [r3, #0]
   15566:	4b28      	ldr	r3, [pc, #160]	; (15608 <loadHwTimer+0xc4>)
   15568:	0112      	lsls	r2, r2, #4
   1556a:	58d3      	ldr	r3, [r2, r3]
   1556c:	613b      	str	r3, [r7, #16]
        if (swtimerCompareTime(now, expiryTime))
   1556e:	693a      	ldr	r2, [r7, #16]
   15570:	697b      	ldr	r3, [r7, #20]
   15572:	0011      	movs	r1, r2
   15574:	0018      	movs	r0, r3
   15576:	4b25      	ldr	r3, [pc, #148]	; (1560c <loadHwTimer+0xc8>)
   15578:	4798      	blx	r3
   1557a:	1e03      	subs	r3, r0, #0
   1557c:	d034      	beq.n	155e8 <loadHwTimer+0xa4>
        {
            if (!swTimers[timerId].loaded)
   1557e:	1dfb      	adds	r3, r7, #7
   15580:	781b      	ldrb	r3, [r3, #0]
   15582:	4a21      	ldr	r2, [pc, #132]	; (15608 <loadHwTimer+0xc4>)
   15584:	011b      	lsls	r3, r3, #4
   15586:	18d3      	adds	r3, r2, r3
   15588:	330d      	adds	r3, #13
   1558a:	781b      	ldrb	r3, [r3, #0]
   1558c:	2201      	movs	r2, #1
   1558e:	4053      	eors	r3, r2
   15590:	b2db      	uxtb	r3, r3
   15592:	2b00      	cmp	r3, #0
   15594:	d031      	beq.n	155fa <loadHwTimer+0xb6>
            {
                uint32_t timeDiff = expiryTime - now;
   15596:	693a      	ldr	r2, [r7, #16]
   15598:	697b      	ldr	r3, [r7, #20]
   1559a:	1ad3      	subs	r3, r2, r3
   1559c:	60fb      	str	r3, [r7, #12]

                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
   1559e:	68fb      	ldr	r3, [r7, #12]
   155a0:	2bff      	cmp	r3, #255	; 0xff
   155a2:	d806      	bhi.n	155b2 <loadHwTimer+0x6e>
                {
                    isTimerTriggered = true;
   155a4:	4b1a      	ldr	r3, [pc, #104]	; (15610 <loadHwTimer+0xcc>)
   155a6:	2201      	movs	r2, #1
   155a8:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
   155aa:	2001      	movs	r0, #1
   155ac:	4b19      	ldr	r3, [pc, #100]	; (15614 <loadHwTimer+0xd0>)
   155ae:	4798      	blx	r3
    }
    else
    {
        common_tc_compare_stop();
    }
}
   155b0:	e023      	b.n	155fa <loadHwTimer+0xb6>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
   155b2:	68fb      	ldr	r3, [r7, #12]
   155b4:	4a18      	ldr	r2, [pc, #96]	; (15618 <loadHwTimer+0xd4>)
   155b6:	4293      	cmp	r3, r2
   155b8:	d80d      	bhi.n	155d6 <loadHwTimer+0x92>
                    common_tc_delay((uint16_t)timeDiff);
   155ba:	68fb      	ldr	r3, [r7, #12]
   155bc:	b29b      	uxth	r3, r3
   155be:	0018      	movs	r0, r3
   155c0:	4b16      	ldr	r3, [pc, #88]	; (1561c <loadHwTimer+0xd8>)
   155c2:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
   155c4:	1dfb      	adds	r3, r7, #7
   155c6:	781b      	ldrb	r3, [r3, #0]
   155c8:	4a0f      	ldr	r2, [pc, #60]	; (15608 <loadHwTimer+0xc4>)
   155ca:	011b      	lsls	r3, r3, #4
   155cc:	18d3      	adds	r3, r2, r3
   155ce:	330d      	adds	r3, #13
   155d0:	2201      	movs	r2, #1
   155d2:	701a      	strb	r2, [r3, #0]
}
   155d4:	e011      	b.n	155fa <loadHwTimer+0xb6>
                    swTimers[timerId].loaded = false;
   155d6:	1dfb      	adds	r3, r7, #7
   155d8:	781b      	ldrb	r3, [r3, #0]
   155da:	4a0b      	ldr	r2, [pc, #44]	; (15608 <loadHwTimer+0xc4>)
   155dc:	011b      	lsls	r3, r3, #4
   155de:	18d3      	adds	r3, r2, r3
   155e0:	330d      	adds	r3, #13
   155e2:	2200      	movs	r2, #0
   155e4:	701a      	strb	r2, [r3, #0]
}
   155e6:	e008      	b.n	155fa <loadHwTimer+0xb6>
            isTimerTriggered = true;
   155e8:	4b09      	ldr	r3, [pc, #36]	; (15610 <loadHwTimer+0xcc>)
   155ea:	2201      	movs	r2, #1
   155ec:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
   155ee:	2001      	movs	r0, #1
   155f0:	4b08      	ldr	r3, [pc, #32]	; (15614 <loadHwTimer+0xd0>)
   155f2:	4798      	blx	r3
}
   155f4:	e001      	b.n	155fa <loadHwTimer+0xb6>
        common_tc_compare_stop();
   155f6:	4b0a      	ldr	r3, [pc, #40]	; (15620 <loadHwTimer+0xdc>)
   155f8:	4798      	blx	r3
}
   155fa:	46c0      	nop			; (mov r8, r8)
   155fc:	46bd      	mov	sp, r7
   155fe:	b007      	add	sp, #28
   15600:	bd90      	pop	{r4, r7, pc}
   15602:	46c0      	nop			; (mov r8, r8)
   15604:	0001564d 	.word	0x0001564d
   15608:	200017e8 	.word	0x200017e8
   1560c:	00015625 	.word	0x00015625
   15610:	2000197a 	.word	0x2000197a
   15614:	000162bd 	.word	0x000162bd
   15618:	0000ffff 	.word	0x0000ffff
   1561c:	0001a5a9 	.word	0x0001a5a9
   15620:	0001a54d 	.word	0x0001a54d

00015624 <swtimerCompareTime>:
\param[in] t2   Second timer's value in microseconds

\return True if "t1 is lesser than or equal to t2" else False
******************************************************************************/
static inline bool swtimerCompareTime(uint32_t t1, uint32_t t2)
{
   15624:	b580      	push	{r7, lr}
   15626:	b082      	sub	sp, #8
   15628:	af00      	add	r7, sp, #0
   1562a:	6078      	str	r0, [r7, #4]
   1562c:	6039      	str	r1, [r7, #0]
    return ((t2 - t1) < INT32_MAX);
   1562e:	683a      	ldr	r2, [r7, #0]
   15630:	687b      	ldr	r3, [r7, #4]
   15632:	1ad2      	subs	r2, r2, r3
   15634:	4904      	ldr	r1, [pc, #16]	; (15648 <swtimerCompareTime+0x24>)
   15636:	2300      	movs	r3, #0
   15638:	4291      	cmp	r1, r2
   1563a:	415b      	adcs	r3, r3
   1563c:	b2db      	uxtb	r3, r3
}
   1563e:	0018      	movs	r0, r3
   15640:	46bd      	mov	sp, r7
   15642:	b002      	add	sp, #8
   15644:	bd80      	pop	{r7, pc}
   15646:	46c0      	nop			; (mov r8, r8)
   15648:	7ffffffe 	.word	0x7ffffffe

0001564c <gettime>:
/**************************************************************************//**
\brief Returns the system time in microseconds
\return System time in us
******************************************************************************/
static inline uint64_t gettime(void)
{
   1564c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1564e:	b089      	sub	sp, #36	; 0x24
   15650:	af00      	add	r7, sp, #0
    uint64_t time = 0uL;
   15652:	2300      	movs	r3, #0
   15654:	2400      	movs	r4, #0
   15656:	61bb      	str	r3, [r7, #24]
   15658:	61fc      	str	r4, [r7, #28]
    time |= ((uint64_t) sysTimeOvf) << 32;
   1565a:	481d      	ldr	r0, [pc, #116]	; (156d0 <gettime+0x84>)
   1565c:	6800      	ldr	r0, [r0, #0]
   1565e:	6138      	str	r0, [r7, #16]
   15660:	2000      	movs	r0, #0
   15662:	6178      	str	r0, [r7, #20]
   15664:	693b      	ldr	r3, [r7, #16]
   15666:	001a      	movs	r2, r3
   15668:	2000      	movs	r0, #0
   1566a:	0001      	movs	r1, r0
   1566c:	69b8      	ldr	r0, [r7, #24]
   1566e:	4308      	orrs	r0, r1
   15670:	61b8      	str	r0, [r7, #24]
   15672:	69f8      	ldr	r0, [r7, #28]
   15674:	4302      	orrs	r2, r0
   15676:	61fa      	str	r2, [r7, #28]
    time |= ((uint64_t) sysTime) << 16;
   15678:	4a16      	ldr	r2, [pc, #88]	; (156d4 <gettime+0x88>)
   1567a:	8812      	ldrh	r2, [r2, #0]
   1567c:	b292      	uxth	r2, r2
   1567e:	60ba      	str	r2, [r7, #8]
   15680:	2200      	movs	r2, #0
   15682:	60fa      	str	r2, [r7, #12]
   15684:	68b9      	ldr	r1, [r7, #8]
   15686:	68fa      	ldr	r2, [r7, #12]
   15688:	000b      	movs	r3, r1
   1568a:	0c1b      	lsrs	r3, r3, #16
   1568c:	607b      	str	r3, [r7, #4]
   1568e:	000b      	movs	r3, r1
   15690:	041b      	lsls	r3, r3, #16
   15692:	603b      	str	r3, [r7, #0]
   15694:	69ba      	ldr	r2, [r7, #24]
   15696:	6838      	ldr	r0, [r7, #0]
   15698:	6879      	ldr	r1, [r7, #4]
   1569a:	0003      	movs	r3, r0
   1569c:	431a      	orrs	r2, r3
   1569e:	61ba      	str	r2, [r7, #24]
   156a0:	69fa      	ldr	r2, [r7, #28]
   156a2:	0013      	movs	r3, r2
   156a4:	000a      	movs	r2, r1
   156a6:	4313      	orrs	r3, r2
   156a8:	61fb      	str	r3, [r7, #28]
    time |= (uint64_t) common_tc_read_count();
   156aa:	4b0b      	ldr	r3, [pc, #44]	; (156d8 <gettime+0x8c>)
   156ac:	4798      	blx	r3
   156ae:	0003      	movs	r3, r0
   156b0:	001d      	movs	r5, r3
   156b2:	2300      	movs	r3, #0
   156b4:	001e      	movs	r6, r3
   156b6:	69bb      	ldr	r3, [r7, #24]
   156b8:	432b      	orrs	r3, r5
   156ba:	61bb      	str	r3, [r7, #24]
   156bc:	69fb      	ldr	r3, [r7, #28]
   156be:	4333      	orrs	r3, r6
   156c0:	61fb      	str	r3, [r7, #28]
    return time;
   156c2:	69bb      	ldr	r3, [r7, #24]
   156c4:	69fc      	ldr	r4, [r7, #28]
}
   156c6:	0018      	movs	r0, r3
   156c8:	0021      	movs	r1, r4
   156ca:	46bd      	mov	sp, r7
   156cc:	b009      	add	sp, #36	; 0x24
   156ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   156d0:	2000197c 	.word	0x2000197c
   156d4:	20001978 	.word	0x20001978
   156d8:	0001a501 	.word	0x0001a501

000156dc <swtimerProcessOverflow>:

/**************************************************************************//**
\brief Process the overflow interrupt of TC0
******************************************************************************/
static void swtimerProcessOverflow(void)
{
   156dc:	b580      	push	{r7, lr}
   156de:	b084      	sub	sp, #16
   156e0:	af00      	add	r7, sp, #0
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();
   156e2:	4b26      	ldr	r3, [pc, #152]	; (1577c <swtimerProcessOverflow+0xa0>)
   156e4:	4798      	blx	r3
   156e6:	0002      	movs	r2, r0
   156e8:	230f      	movs	r3, #15
   156ea:	18fb      	adds	r3, r7, r3
   156ec:	701a      	strb	r2, [r3, #0]

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
   156ee:	4b24      	ldr	r3, [pc, #144]	; (15780 <swtimerProcessOverflow+0xa4>)
   156f0:	681b      	ldr	r3, [r3, #0]
   156f2:	2bff      	cmp	r3, #255	; 0xff
   156f4:	d037      	beq.n	15766 <swtimerProcessOverflow+0x8a>
   156f6:	4b22      	ldr	r3, [pc, #136]	; (15780 <swtimerProcessOverflow+0xa4>)
   156f8:	681b      	ldr	r3, [r3, #0]
   156fa:	4a22      	ldr	r2, [pc, #136]	; (15784 <swtimerProcessOverflow+0xa8>)
   156fc:	011b      	lsls	r3, r3, #4
   156fe:	18d3      	adds	r3, r2, r3
   15700:	330d      	adds	r3, #13
   15702:	781b      	ldrb	r3, [r3, #0]
   15704:	2201      	movs	r2, #1
   15706:	4053      	eors	r3, r2
   15708:	b2db      	uxtb	r3, r3
   1570a:	2b00      	cmp	r3, #0
   1570c:	d02b      	beq.n	15766 <swtimerProcessOverflow+0x8a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
   1570e:	4b1c      	ldr	r3, [pc, #112]	; (15780 <swtimerProcessOverflow+0xa4>)
   15710:	681a      	ldr	r2, [r3, #0]
   15712:	4b1c      	ldr	r3, [pc, #112]	; (15784 <swtimerProcessOverflow+0xa8>)
   15714:	0112      	lsls	r2, r2, #4
   15716:	58d3      	ldr	r3, [r2, r3]
   15718:	60bb      	str	r3, [r7, #8]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);
   1571a:	68bb      	ldr	r3, [r7, #8]
   1571c:	0c1a      	lsrs	r2, r3, #16
   1571e:	1dbb      	adds	r3, r7, #6
   15720:	801a      	strh	r2, [r3, #0]

        if (tmoHigh16 == sysTime)
   15722:	4b19      	ldr	r3, [pc, #100]	; (15788 <swtimerProcessOverflow+0xac>)
   15724:	881b      	ldrh	r3, [r3, #0]
   15726:	b29b      	uxth	r3, r3
   15728:	1dba      	adds	r2, r7, #6
   1572a:	8812      	ldrh	r2, [r2, #0]
   1572c:	429a      	cmp	r2, r3
   1572e:	d11a      	bne.n	15766 <swtimerProcessOverflow+0x8a>
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
   15730:	1d3b      	adds	r3, r7, #4
   15732:	68ba      	ldr	r2, [r7, #8]
   15734:	801a      	strh	r2, [r3, #0]
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
   15736:	1d3b      	adds	r3, r7, #4
   15738:	881b      	ldrh	r3, [r3, #0]
   1573a:	2bff      	cmp	r3, #255	; 0xff
   1573c:	d90d      	bls.n	1575a <swtimerProcessOverflow+0x7e>
            {
                common_tc_delay(tmoLow16);
   1573e:	1d3b      	adds	r3, r7, #4
   15740:	881b      	ldrh	r3, [r3, #0]
   15742:	0018      	movs	r0, r3
   15744:	4b11      	ldr	r3, [pc, #68]	; (1578c <swtimerProcessOverflow+0xb0>)
   15746:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
   15748:	4b0d      	ldr	r3, [pc, #52]	; (15780 <swtimerProcessOverflow+0xa4>)
   1574a:	681b      	ldr	r3, [r3, #0]
   1574c:	4a0d      	ldr	r2, [pc, #52]	; (15784 <swtimerProcessOverflow+0xa8>)
   1574e:	011b      	lsls	r3, r3, #4
   15750:	18d3      	adds	r3, r2, r3
   15752:	330d      	adds	r3, #13
   15754:	2201      	movs	r2, #1
   15756:	701a      	strb	r2, [r3, #0]
   15758:	e005      	b.n	15766 <swtimerProcessOverflow+0x8a>
            }
            else
            {
                isTimerTriggered = true;
   1575a:	4b0d      	ldr	r3, [pc, #52]	; (15790 <swtimerProcessOverflow+0xb4>)
   1575c:	2201      	movs	r2, #1
   1575e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
   15760:	2001      	movs	r0, #1
   15762:	4b0c      	ldr	r3, [pc, #48]	; (15794 <swtimerProcessOverflow+0xb8>)
   15764:	4798      	blx	r3
            }
        }
    }

    cpu_irq_restore(flags);
   15766:	230f      	movs	r3, #15
   15768:	18fb      	adds	r3, r7, r3
   1576a:	781b      	ldrb	r3, [r3, #0]
   1576c:	0018      	movs	r0, r3
   1576e:	4b0a      	ldr	r3, [pc, #40]	; (15798 <swtimerProcessOverflow+0xbc>)
   15770:	4798      	blx	r3
}
   15772:	46c0      	nop			; (mov r8, r8)
   15774:	46bd      	mov	sp, r7
   15776:	b004      	add	sp, #16
   15778:	bd80      	pop	{r7, pc}
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	0001525d 	.word	0x0001525d
   15780:	200010e4 	.word	0x200010e4
   15784:	200017e8 	.word	0x200017e8
   15788:	20001978 	.word	0x20001978
   1578c:	0001a5a9 	.word	0x0001a5a9
   15790:	2000197a 	.word	0x2000197a
   15794:	000162bd 	.word	0x000162bd
   15798:	000152a5 	.word	0x000152a5

0001579c <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
   1579c:	b580      	push	{r7, lr}
   1579e:	af00      	add	r7, sp, #0
    if (isTimerTriggered)
   157a0:	4b28      	ldr	r3, [pc, #160]	; (15844 <swtimerInternalHandler+0xa8>)
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	b2db      	uxtb	r3, r3
   157a6:	2b00      	cmp	r3, #0
   157a8:	d049      	beq.n	1583e <swtimerInternalHandler+0xa2>
    {
        isTimerTriggered = false;
   157aa:	4b26      	ldr	r3, [pc, #152]	; (15844 <swtimerInternalHandler+0xa8>)
   157ac:	2200      	movs	r2, #0
   157ae:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
   157b0:	4b25      	ldr	r3, [pc, #148]	; (15848 <swtimerInternalHandler+0xac>)
   157b2:	781b      	ldrb	r3, [r3, #0]
   157b4:	b2db      	uxtb	r3, r3
   157b6:	2b00      	cmp	r3, #0
   157b8:	d041      	beq.n	1583e <swtimerInternalHandler+0xa2>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
   157ba:	4b24      	ldr	r3, [pc, #144]	; (1584c <swtimerInternalHandler+0xb0>)
   157bc:	681b      	ldr	r3, [r3, #0]
   157be:	2bff      	cmp	r3, #255	; 0xff
   157c0:	d10c      	bne.n	157dc <swtimerInternalHandler+0x40>
                (expiredTimerQueueTail == SWTIMER_INVALID))
   157c2:	4b23      	ldr	r3, [pc, #140]	; (15850 <swtimerInternalHandler+0xb4>)
   157c4:	681b      	ldr	r3, [r3, #0]
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
   157c6:	2bff      	cmp	r3, #255	; 0xff
   157c8:	d108      	bne.n	157dc <swtimerInternalHandler+0x40>
            { /* in case of this is the only timer that has expired so far */
                expiredTimerQueueHead = runningTimerQueueHead;
   157ca:	4b22      	ldr	r3, [pc, #136]	; (15854 <swtimerInternalHandler+0xb8>)
   157cc:	681a      	ldr	r2, [r3, #0]
   157ce:	4b1f      	ldr	r3, [pc, #124]	; (1584c <swtimerInternalHandler+0xb0>)
   157d0:	601a      	str	r2, [r3, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
   157d2:	4b20      	ldr	r3, [pc, #128]	; (15854 <swtimerInternalHandler+0xb8>)
   157d4:	681a      	ldr	r2, [r3, #0]
   157d6:	4b1e      	ldr	r3, [pc, #120]	; (15850 <swtimerInternalHandler+0xb4>)
   157d8:	601a      	str	r2, [r3, #0]
   157da:	e00e      	b.n	157fa <swtimerInternalHandler+0x5e>
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
   157dc:	4b1c      	ldr	r3, [pc, #112]	; (15850 <swtimerInternalHandler+0xb4>)
   157de:	6819      	ldr	r1, [r3, #0]
   157e0:	4b1c      	ldr	r3, [pc, #112]	; (15854 <swtimerInternalHandler+0xb8>)
   157e2:	681b      	ldr	r3, [r3, #0]
   157e4:	b2d8      	uxtb	r0, r3
   157e6:	4a1c      	ldr	r2, [pc, #112]	; (15858 <swtimerInternalHandler+0xbc>)
   157e8:	010b      	lsls	r3, r1, #4
   157ea:	18d3      	adds	r3, r2, r3
   157ec:	330c      	adds	r3, #12
   157ee:	1c02      	adds	r2, r0, #0
   157f0:	701a      	strb	r2, [r3, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
   157f2:	4b18      	ldr	r3, [pc, #96]	; (15854 <swtimerInternalHandler+0xb8>)
   157f4:	681a      	ldr	r2, [r3, #0]
   157f6:	4b16      	ldr	r3, [pc, #88]	; (15850 <swtimerInternalHandler+0xb4>)
   157f8:	601a      	str	r2, [r3, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
   157fa:	4b16      	ldr	r3, [pc, #88]	; (15854 <swtimerInternalHandler+0xb8>)
   157fc:	681b      	ldr	r3, [r3, #0]
   157fe:	4a16      	ldr	r2, [pc, #88]	; (15858 <swtimerInternalHandler+0xbc>)
   15800:	011b      	lsls	r3, r3, #4
   15802:	18d3      	adds	r3, r2, r3
   15804:	330c      	adds	r3, #12
   15806:	781b      	ldrb	r3, [r3, #0]
   15808:	001a      	movs	r2, r3
   1580a:	4b12      	ldr	r3, [pc, #72]	; (15854 <swtimerInternalHandler+0xb8>)
   1580c:	601a      	str	r2, [r3, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
   1580e:	4b10      	ldr	r3, [pc, #64]	; (15850 <swtimerInternalHandler+0xb4>)
   15810:	681b      	ldr	r3, [r3, #0]
   15812:	4a11      	ldr	r2, [pc, #68]	; (15858 <swtimerInternalHandler+0xbc>)
   15814:	011b      	lsls	r3, r3, #4
   15816:	18d3      	adds	r3, r2, r3
   15818:	330c      	adds	r3, #12
   1581a:	22ff      	movs	r2, #255	; 0xff
   1581c:	701a      	strb	r2, [r3, #0]

            if ((--runningTimers) > 0)
   1581e:	4b0a      	ldr	r3, [pc, #40]	; (15848 <swtimerInternalHandler+0xac>)
   15820:	781b      	ldrb	r3, [r3, #0]
   15822:	b2db      	uxtb	r3, r3
   15824:	3b01      	subs	r3, #1
   15826:	b2db      	uxtb	r3, r3
   15828:	4a07      	ldr	r2, [pc, #28]	; (15848 <swtimerInternalHandler+0xac>)
   1582a:	1c19      	adds	r1, r3, #0
   1582c:	7011      	strb	r1, [r2, #0]
   1582e:	2b00      	cmp	r3, #0
   15830:	d005      	beq.n	1583e <swtimerInternalHandler+0xa2>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
   15832:	4b08      	ldr	r3, [pc, #32]	; (15854 <swtimerInternalHandler+0xb8>)
   15834:	681b      	ldr	r3, [r3, #0]
   15836:	b2db      	uxtb	r3, r3
   15838:	0018      	movs	r0, r3
   1583a:	4b08      	ldr	r3, [pc, #32]	; (1585c <swtimerInternalHandler+0xc0>)
   1583c:	4798      	blx	r3
            }
        }
    }
}
   1583e:	46c0      	nop			; (mov r8, r8)
   15840:	46bd      	mov	sp, r7
   15842:	bd80      	pop	{r7, pc}
   15844:	2000197a 	.word	0x2000197a
   15848:	200010e2 	.word	0x200010e2
   1584c:	200010e8 	.word	0x200010e8
   15850:	200010ec 	.word	0x200010ec
   15854:	200010e4 	.word	0x200010e4
   15858:	200017e8 	.word	0x200017e8
   1585c:	00015545 	.word	0x00015545

00015860 <TIMER_TaskHandler>:
/**************************************************************************//**
\brief Handler for the timer tasks
\return SYSTEM_TASK_SUCCESS after servicing the timer triggers
******************************************************************************/
SYSTEM_TaskStatus_t TIMER_TaskHandler(void)
{
   15860:	b580      	push	{r7, lr}
   15862:	af00      	add	r7, sp, #0
    SwTimersExecute();
   15864:	4b02      	ldr	r3, [pc, #8]	; (15870 <TIMER_TaskHandler+0x10>)
   15866:	4798      	blx	r3
    return SYSTEM_TASK_SUCCESS;
   15868:	2300      	movs	r3, #0
}
   1586a:	0018      	movs	r0, r3
   1586c:	46bd      	mov	sp, r7
   1586e:	bd80      	pop	{r7, pc}
   15870:	00015bed 	.word	0x00015bed

00015874 <SwTimerReset>:

/**************************************************************************//**
\brief Resets the Software Timer module
******************************************************************************/
void SwTimerReset(void)
{
   15874:	b580      	push	{r7, lr}
   15876:	b082      	sub	sp, #8
   15878:	af00      	add	r7, sp, #0
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
   1587a:	4b19      	ldr	r3, [pc, #100]	; (158e0 <SwTimerReset+0x6c>)
   1587c:	2200      	movs	r2, #0
   1587e:	701a      	strb	r2, [r3, #0]
    isTimerTriggered = false;
   15880:	4b18      	ldr	r3, [pc, #96]	; (158e4 <SwTimerReset+0x70>)
   15882:	2200      	movs	r2, #0
   15884:	701a      	strb	r2, [r3, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
   15886:	4b18      	ldr	r3, [pc, #96]	; (158e8 <SwTimerReset+0x74>)
   15888:	22ff      	movs	r2, #255	; 0xff
   1588a:	601a      	str	r2, [r3, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
   1588c:	4b17      	ldr	r3, [pc, #92]	; (158ec <SwTimerReset+0x78>)
   1588e:	22ff      	movs	r2, #255	; 0xff
   15890:	601a      	str	r2, [r3, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
   15892:	4b17      	ldr	r3, [pc, #92]	; (158f0 <SwTimerReset+0x7c>)
   15894:	22ff      	movs	r2, #255	; 0xff
   15896:	601a      	str	r2, [r3, #0]

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
   15898:	1dfb      	adds	r3, r7, #7
   1589a:	2200      	movs	r2, #0
   1589c:	701a      	strb	r2, [r3, #0]
   1589e:	e014      	b.n	158ca <SwTimerReset+0x56>
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
   158a0:	1dfb      	adds	r3, r7, #7
   158a2:	781b      	ldrb	r3, [r3, #0]
   158a4:	4a13      	ldr	r2, [pc, #76]	; (158f4 <SwTimerReset+0x80>)
   158a6:	011b      	lsls	r3, r3, #4
   158a8:	18d3      	adds	r3, r2, r3
   158aa:	330c      	adds	r3, #12
   158ac:	22ff      	movs	r2, #255	; 0xff
   158ae:	701a      	strb	r2, [r3, #0]
        swTimers[index].timerCb = NULL;
   158b0:	1dfb      	adds	r3, r7, #7
   158b2:	781b      	ldrb	r3, [r3, #0]
   158b4:	4a0f      	ldr	r2, [pc, #60]	; (158f4 <SwTimerReset+0x80>)
   158b6:	011b      	lsls	r3, r3, #4
   158b8:	18d3      	adds	r3, r2, r3
   158ba:	3304      	adds	r3, #4
   158bc:	2200      	movs	r2, #0
   158be:	601a      	str	r2, [r3, #0]
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
   158c0:	1dfb      	adds	r3, r7, #7
   158c2:	781a      	ldrb	r2, [r3, #0]
   158c4:	1dfb      	adds	r3, r7, #7
   158c6:	3201      	adds	r2, #1
   158c8:	701a      	strb	r2, [r3, #0]
   158ca:	1dfb      	adds	r3, r7, #7
   158cc:	781b      	ldrb	r3, [r3, #0]
   158ce:	2b18      	cmp	r3, #24
   158d0:	d9e6      	bls.n	158a0 <SwTimerReset+0x2c>
    }

    allocatedTimerId = 0u;
   158d2:	4b09      	ldr	r3, [pc, #36]	; (158f8 <SwTimerReset+0x84>)
   158d4:	2200      	movs	r2, #0
   158d6:	701a      	strb	r2, [r3, #0]
}
   158d8:	46c0      	nop			; (mov r8, r8)
   158da:	46bd      	mov	sp, r7
   158dc:	b002      	add	sp, #8
   158de:	bd80      	pop	{r7, pc}
   158e0:	200010e2 	.word	0x200010e2
   158e4:	2000197a 	.word	0x2000197a
   158e8:	200010e4 	.word	0x200010e4
   158ec:	200010e8 	.word	0x200010e8
   158f0:	200010ec 	.word	0x200010ec
   158f4:	200017e8 	.word	0x200017e8
   158f8:	200010f0 	.word	0x200010f0

000158fc <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
   158fc:	b580      	push	{r7, lr}
   158fe:	af00      	add	r7, sp, #0
    SwTimerReset();
   15900:	4b0a      	ldr	r3, [pc, #40]	; (1592c <SystemTimerInit+0x30>)
   15902:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
   15904:	4b0a      	ldr	r3, [pc, #40]	; (15930 <SystemTimerInit+0x34>)
   15906:	2200      	movs	r2, #0
   15908:	601a      	str	r2, [r3, #0]
    sysTime = 0x0000;
   1590a:	4b0a      	ldr	r3, [pc, #40]	; (15934 <SystemTimerInit+0x38>)
   1590c:	2200      	movs	r2, #0
   1590e:	801a      	strh	r2, [r3, #0]

    common_tc_init();
   15910:	4b09      	ldr	r3, [pc, #36]	; (15938 <SystemTimerInit+0x3c>)
   15912:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
   15914:	4b09      	ldr	r3, [pc, #36]	; (1593c <SystemTimerInit+0x40>)
   15916:	0018      	movs	r0, r3
   15918:	4b09      	ldr	r3, [pc, #36]	; (15940 <SystemTimerInit+0x44>)
   1591a:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
   1591c:	4b09      	ldr	r3, [pc, #36]	; (15944 <SystemTimerInit+0x48>)
   1591e:	0018      	movs	r0, r3
   15920:	4b09      	ldr	r3, [pc, #36]	; (15948 <SystemTimerInit+0x4c>)
   15922:	4798      	blx	r3
}
   15924:	46c0      	nop			; (mov r8, r8)
   15926:	46bd      	mov	sp, r7
   15928:	bd80      	pop	{r7, pc}
   1592a:	46c0      	nop			; (mov r8, r8)
   1592c:	00015875 	.word	0x00015875
   15930:	2000197c 	.word	0x2000197c
   15934:	20001978 	.word	0x20001978
   15938:	0001a615 	.word	0x0001a615
   1593c:	000152d5 	.word	0x000152d5
   15940:	0001a699 	.word	0x0001a699
   15944:	0001531d 	.word	0x0001531d
   15948:	0001a6a5 	.word	0x0001a6a5

0001594c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
   1594c:	b5b0      	push	{r4, r5, r7, lr}
   1594e:	af00      	add	r7, sp, #0
    return gettime();
   15950:	4b03      	ldr	r3, [pc, #12]	; (15960 <SwTimerGetTime+0x14>)
   15952:	4798      	blx	r3
   15954:	0003      	movs	r3, r0
   15956:	000c      	movs	r4, r1
}
   15958:	0018      	movs	r0, r3
   1595a:	0021      	movs	r1, r4
   1595c:	46bd      	mov	sp, r7
   1595e:	bdb0      	pop	{r4, r5, r7, pc}
   15960:	0001564d 	.word	0x0001564d

00015964 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
   15964:	b580      	push	{r7, lr}
   15966:	b084      	sub	sp, #16
   15968:	af00      	add	r7, sp, #0
   1596a:	6078      	str	r0, [r7, #4]
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
   1596c:	230f      	movs	r3, #15
   1596e:	18fb      	adds	r3, r7, r3
   15970:	2208      	movs	r2, #8
   15972:	701a      	strb	r2, [r3, #0]

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
   15974:	4b0e      	ldr	r3, [pc, #56]	; (159b0 <SwTimerCreate+0x4c>)
   15976:	781b      	ldrb	r3, [r3, #0]
   15978:	2b18      	cmp	r3, #24
   1597a:	d80e      	bhi.n	1599a <SwTimerCreate+0x36>
    {
        ATOMIC_SECTION_ENTER
   1597c:	4b0d      	ldr	r3, [pc, #52]	; (159b4 <SwTimerCreate+0x50>)
   1597e:	4798      	blx	r3
        *timerId = allocatedTimerId;
   15980:	4b0b      	ldr	r3, [pc, #44]	; (159b0 <SwTimerCreate+0x4c>)
   15982:	781a      	ldrb	r2, [r3, #0]
   15984:	687b      	ldr	r3, [r7, #4]
   15986:	701a      	strb	r2, [r3, #0]
        allocatedTimerId++;
   15988:	4b09      	ldr	r3, [pc, #36]	; (159b0 <SwTimerCreate+0x4c>)
   1598a:	781b      	ldrb	r3, [r3, #0]
   1598c:	3301      	adds	r3, #1
   1598e:	b2da      	uxtb	r2, r3
   15990:	4b07      	ldr	r3, [pc, #28]	; (159b0 <SwTimerCreate+0x4c>)
   15992:	701a      	strb	r2, [r3, #0]
        ATOMIC_SECTION_EXIT
   15994:	4b08      	ldr	r3, [pc, #32]	; (159b8 <SwTimerCreate+0x54>)
   15996:	4798      	blx	r3
   15998:	e003      	b.n	159a2 <SwTimerCreate+0x3e>
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
   1599a:	230f      	movs	r3, #15
   1599c:	18fb      	adds	r3, r7, r3
   1599e:	2214      	movs	r2, #20
   159a0:	701a      	strb	r2, [r3, #0]
    }

    return retVal;
   159a2:	230f      	movs	r3, #15
   159a4:	18fb      	adds	r3, r7, r3
   159a6:	781b      	ldrb	r3, [r3, #0]
}
   159a8:	0018      	movs	r0, r3
   159aa:	46bd      	mov	sp, r7
   159ac:	b004      	add	sp, #16
   159ae:	bd80      	pop	{r7, pc}
   159b0:	200010f0 	.word	0x200010f0
   159b4:	000076e1 	.word	0x000076e1
   159b8:	000076f5 	.word	0x000076f5

000159bc <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
   159bc:	b590      	push	{r4, r7, lr}
   159be:	b089      	sub	sp, #36	; 0x24
   159c0:	af00      	add	r7, sp, #0
   159c2:	60b9      	str	r1, [r7, #8]
   159c4:	0011      	movs	r1, r2
   159c6:	607b      	str	r3, [r7, #4]
   159c8:	230f      	movs	r3, #15
   159ca:	18fb      	adds	r3, r7, r3
   159cc:	1c02      	adds	r2, r0, #0
   159ce:	701a      	strb	r2, [r3, #0]
   159d0:	230e      	movs	r3, #14
   159d2:	18fb      	adds	r3, r7, r3
   159d4:	1c0a      	adds	r2, r1, #0
   159d6:	701a      	strb	r2, [r3, #0]
    uint32_t now = 0;
   159d8:	2300      	movs	r3, #0
   159da:	61bb      	str	r3, [r7, #24]
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
   159dc:	230f      	movs	r3, #15
   159de:	18fb      	adds	r3, r7, r3
   159e0:	781b      	ldrb	r3, [r3, #0]
   159e2:	2b18      	cmp	r3, #24
   159e4:	d802      	bhi.n	159ec <SwTimerStart+0x30>
   159e6:	687b      	ldr	r3, [r7, #4]
   159e8:	2b00      	cmp	r3, #0
   159ea:	d101      	bne.n	159f0 <SwTimerStart+0x34>
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
   159ec:	230a      	movs	r3, #10
   159ee:	e040      	b.n	15a72 <SwTimerStart+0xb6>
    }

    if (NULL != swTimers[timerId].timerCb)
   159f0:	230f      	movs	r3, #15
   159f2:	18fb      	adds	r3, r7, r3
   159f4:	781b      	ldrb	r3, [r3, #0]
   159f6:	4a21      	ldr	r2, [pc, #132]	; (15a7c <SwTimerStart+0xc0>)
   159f8:	011b      	lsls	r3, r3, #4
   159fa:	18d3      	adds	r3, r2, r3
   159fc:	3304      	adds	r3, #4
   159fe:	681b      	ldr	r3, [r3, #0]
   15a00:	2b00      	cmp	r3, #0
   15a02:	d001      	beq.n	15a08 <SwTimerStart+0x4c>
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
   15a04:	2315      	movs	r3, #21
   15a06:	e034      	b.n	15a72 <SwTimerStart+0xb6>
    }

    now = (uint32_t) gettime();
   15a08:	4b1d      	ldr	r3, [pc, #116]	; (15a80 <SwTimerStart+0xc4>)
   15a0a:	4798      	blx	r3
   15a0c:	0003      	movs	r3, r0
   15a0e:	000c      	movs	r4, r1
   15a10:	61bb      	str	r3, [r7, #24]

    switch (timeoutType)
   15a12:	230e      	movs	r3, #14
   15a14:	18fb      	adds	r3, r7, r3
   15a16:	781b      	ldrb	r3, [r3, #0]
   15a18:	2b00      	cmp	r3, #0
   15a1a:	d002      	beq.n	15a22 <SwTimerStart+0x66>
   15a1c:	2b01      	cmp	r3, #1
   15a1e:	d00d      	beq.n	15a3c <SwTimerStart+0x80>
   15a20:	e01b      	b.n	15a5a <SwTimerStart+0x9e>
    {
        case SW_TIMEOUT_RELATIVE:
        {
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
   15a22:	68bb      	ldr	r3, [r7, #8]
   15a24:	2b00      	cmp	r3, #0
   15a26:	db02      	blt.n	15a2e <SwTimerStart+0x72>
   15a28:	68bb      	ldr	r3, [r7, #8]
   15a2a:	2bfe      	cmp	r3, #254	; 0xfe
   15a2c:	d801      	bhi.n	15a32 <SwTimerStart+0x76>
            (timerCount < SWTIMER_MIN_TIMEOUT))
            {
                SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
                return LORAWAN_INVALID_PARAMETER;
   15a2e:	230a      	movs	r3, #10
   15a30:	e01f      	b.n	15a72 <SwTimerStart+0xb6>
            }

            pointInTime = ADD_TIME(timerCount, now);
   15a32:	68ba      	ldr	r2, [r7, #8]
   15a34:	69bb      	ldr	r3, [r7, #24]
   15a36:	18d3      	adds	r3, r2, r3
   15a38:	61fb      	str	r3, [r7, #28]
        }
        break;
   15a3a:	e010      	b.n	15a5e <SwTimerStart+0xa2>

        case SW_TIMEOUT_ABSOLUTE:
        {
            uint32_t timeout;
            timeout = SUB_TIME(timerCount, now);
   15a3c:	68ba      	ldr	r2, [r7, #8]
   15a3e:	69bb      	ldr	r3, [r7, #24]
   15a40:	1ad3      	subs	r3, r2, r3
   15a42:	617b      	str	r3, [r7, #20]

            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
   15a44:	697b      	ldr	r3, [r7, #20]
   15a46:	2b00      	cmp	r3, #0
   15a48:	db02      	blt.n	15a50 <SwTimerStart+0x94>
   15a4a:	697b      	ldr	r3, [r7, #20]
   15a4c:	2bfe      	cmp	r3, #254	; 0xfe
   15a4e:	d801      	bhi.n	15a54 <SwTimerStart+0x98>
            (timeout < SWTIMER_MIN_TIMEOUT))
            {
                SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
                return LORAWAN_INVALID_PARAMETER;
   15a50:	230a      	movs	r3, #10
   15a52:	e00e      	b.n	15a72 <SwTimerStart+0xb6>
            }

            pointInTime = timerCount;
   15a54:	68bb      	ldr	r3, [r7, #8]
   15a56:	61fb      	str	r3, [r7, #28]
        }
        break;
   15a58:	e001      	b.n	15a5e <SwTimerStart+0xa2>

        default:
        {
            SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
            return LORAWAN_INVALID_PARAMETER;
   15a5a:	230a      	movs	r3, #10
   15a5c:	e009      	b.n	15a72 <SwTimerStart+0xb6>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
   15a5e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15a60:	687a      	ldr	r2, [r7, #4]
   15a62:	69f9      	ldr	r1, [r7, #28]
   15a64:	230f      	movs	r3, #15
   15a66:	18fb      	adds	r3, r7, r3
   15a68:	7818      	ldrb	r0, [r3, #0]
   15a6a:	0023      	movs	r3, r4
   15a6c:	4c05      	ldr	r4, [pc, #20]	; (15a84 <SwTimerStart+0xc8>)
   15a6e:	47a0      	blx	r4
    return LORAWAN_SUCCESS;
   15a70:	2308      	movs	r3, #8
}
   15a72:	0018      	movs	r0, r3
   15a74:	46bd      	mov	sp, r7
   15a76:	b009      	add	sp, #36	; 0x24
   15a78:	bd90      	pop	{r4, r7, pc}
   15a7a:	46c0      	nop			; (mov r8, r8)
   15a7c:	200017e8 	.word	0x200017e8
   15a80:	0001564d 	.word	0x0001564d
   15a84:	00015349 	.word	0x00015349

00015a88 <SwTimerIsRunning>:
\brief Checks whether a given timer is running or not
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
   15a88:	b580      	push	{r7, lr}
   15a8a:	b082      	sub	sp, #8
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	0002      	movs	r2, r0
   15a90:	1dfb      	adds	r3, r7, #7
   15a92:	701a      	strb	r2, [r3, #0]
    if (NULL == swTimers[timerId].timerCb)
   15a94:	1dfb      	adds	r3, r7, #7
   15a96:	781b      	ldrb	r3, [r3, #0]
   15a98:	4a06      	ldr	r2, [pc, #24]	; (15ab4 <SwTimerIsRunning+0x2c>)
   15a9a:	011b      	lsls	r3, r3, #4
   15a9c:	18d3      	adds	r3, r2, r3
   15a9e:	3304      	adds	r3, #4
   15aa0:	681b      	ldr	r3, [r3, #0]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d101      	bne.n	15aaa <SwTimerIsRunning+0x22>
    {
        return false;
   15aa6:	2300      	movs	r3, #0
   15aa8:	e000      	b.n	15aac <SwTimerIsRunning+0x24>
    }

    return true;
   15aaa:	2301      	movs	r3, #1
}
   15aac:	0018      	movs	r0, r3
   15aae:	46bd      	mov	sp, r7
   15ab0:	b002      	add	sp, #8
   15ab2:	bd80      	pop	{r7, pc}
   15ab4:	200017e8 	.word	0x200017e8

00015ab8 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
   15ab8:	b590      	push	{r4, r7, lr}
   15aba:	b087      	sub	sp, #28
   15abc:	af00      	add	r7, sp, #0
   15abe:	0002      	movs	r2, r0
   15ac0:	1dfb      	adds	r3, r7, #7
   15ac2:	701a      	strb	r2, [r3, #0]
    uint32_t remainingTime = 0u;
   15ac4:	2300      	movs	r3, #0
   15ac6:	617b      	str	r3, [r7, #20]
    uint32_t timerExpiryTime = 0u;
   15ac8:	2300      	movs	r3, #0
   15aca:	613b      	str	r3, [r7, #16]
    uint32_t currentSysTime = 0u;
   15acc:	2300      	movs	r3, #0
   15ace:	60fb      	str	r3, [r7, #12]
    if ( NULL != swTimers[timerId].timerCb )
   15ad0:	1dfb      	adds	r3, r7, #7
   15ad2:	781b      	ldrb	r3, [r3, #0]
   15ad4:	4a17      	ldr	r2, [pc, #92]	; (15b34 <SwTimerReadValue+0x7c>)
   15ad6:	011b      	lsls	r3, r3, #4
   15ad8:	18d3      	adds	r3, r2, r3
   15ada:	3304      	adds	r3, #4
   15adc:	681b      	ldr	r3, [r3, #0]
   15ade:	2b00      	cmp	r3, #0
   15ae0:	d022      	beq.n	15b28 <SwTimerReadValue+0x70>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
   15ae2:	1dfb      	adds	r3, r7, #7
   15ae4:	781a      	ldrb	r2, [r3, #0]
   15ae6:	4b13      	ldr	r3, [pc, #76]	; (15b34 <SwTimerReadValue+0x7c>)
   15ae8:	0112      	lsls	r2, r2, #4
   15aea:	58d3      	ldr	r3, [r2, r3]
   15aec:	613b      	str	r3, [r7, #16]
	    currentSysTime = (uint32_t) gettime();
   15aee:	4b12      	ldr	r3, [pc, #72]	; (15b38 <SwTimerReadValue+0x80>)
   15af0:	4798      	blx	r3
   15af2:	0003      	movs	r3, r0
   15af4:	000c      	movs	r4, r1
   15af6:	60fb      	str	r3, [r7, #12]
	    if ( currentSysTime <= timerExpiryTime )
   15af8:	68fa      	ldr	r2, [r7, #12]
   15afa:	693b      	ldr	r3, [r7, #16]
   15afc:	429a      	cmp	r2, r3
   15afe:	d804      	bhi.n	15b0a <SwTimerReadValue+0x52>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
   15b00:	693a      	ldr	r2, [r7, #16]
   15b02:	68fb      	ldr	r3, [r7, #12]
   15b04:	1ad3      	subs	r3, r2, r3
   15b06:	617b      	str	r3, [r7, #20]
   15b08:	e008      	b.n	15b1c <SwTimerReadValue+0x64>
	    }
	    else if ( currentSysTime > timerExpiryTime )
   15b0a:	68fa      	ldr	r2, [r7, #12]
   15b0c:	693b      	ldr	r3, [r7, #16]
   15b0e:	429a      	cmp	r2, r3
   15b10:	d904      	bls.n	15b1c <SwTimerReadValue+0x64>
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
   15b12:	693a      	ldr	r2, [r7, #16]
   15b14:	68fb      	ldr	r3, [r7, #12]
   15b16:	1ad3      	subs	r3, r2, r3
   15b18:	3b01      	subs	r3, #1
   15b1a:	617b      	str	r3, [r7, #20]
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
   15b1c:	697b      	ldr	r3, [r7, #20]
   15b1e:	4a07      	ldr	r2, [pc, #28]	; (15b3c <SwTimerReadValue+0x84>)
   15b20:	4293      	cmp	r3, r2
   15b22:	d901      	bls.n	15b28 <SwTimerReadValue+0x70>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
   15b24:	2300      	movs	r3, #0
   15b26:	617b      	str	r3, [r7, #20]
        }
    }
    return remainingTime;
   15b28:	697b      	ldr	r3, [r7, #20]
}
   15b2a:	0018      	movs	r0, r3
   15b2c:	46bd      	mov	sp, r7
   15b2e:	b007      	add	sp, #28
   15b30:	bd90      	pop	{r4, r7, pc}
   15b32:	46c0      	nop			; (mov r8, r8)
   15b34:	200017e8 	.word	0x200017e8
   15b38:	0001564d 	.word	0x0001564d
   15b3c:	7ffffffe 	.word	0x7ffffffe

00015b40 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
   15b40:	b580      	push	{r7, lr}
   15b42:	b082      	sub	sp, #8
   15b44:	af00      	add	r7, sp, #0
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
   15b46:	2301      	movs	r3, #1
   15b48:	425b      	negs	r3, r3
   15b4a:	607b      	str	r3, [r7, #4]

    if (SWTIMER_INVALID != runningTimerQueueHead)
   15b4c:	4b08      	ldr	r3, [pc, #32]	; (15b70 <SwTimerNextExpiryDuration+0x30>)
   15b4e:	681b      	ldr	r3, [r3, #0]
   15b50:	2bff      	cmp	r3, #255	; 0xff
   15b52:	d007      	beq.n	15b64 <SwTimerNextExpiryDuration+0x24>
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
   15b54:	4b06      	ldr	r3, [pc, #24]	; (15b70 <SwTimerNextExpiryDuration+0x30>)
   15b56:	681b      	ldr	r3, [r3, #0]
   15b58:	b2db      	uxtb	r3, r3
   15b5a:	0018      	movs	r0, r3
   15b5c:	4b05      	ldr	r3, [pc, #20]	; (15b74 <SwTimerNextExpiryDuration+0x34>)
   15b5e:	4798      	blx	r3
   15b60:	0003      	movs	r3, r0
   15b62:	607b      	str	r3, [r7, #4]
    }

    return duration;
   15b64:	687b      	ldr	r3, [r7, #4]
}
   15b66:	0018      	movs	r0, r3
   15b68:	46bd      	mov	sp, r7
   15b6a:	b002      	add	sp, #8
   15b6c:	bd80      	pop	{r7, pc}
   15b6e:	46c0      	nop			; (mov r8, r8)
   15b70:	200010e4 	.word	0x200010e4
   15b74:	00015ab9 	.word	0x00015ab9

00015b78 <SwTimerRunRemainingTime>:
/**************************************************************************//**
\brief Run the running timer for the given offset
\param[in] offset New time duration for the running timer
******************************************************************************/
void SwTimerRunRemainingTime(uint32_t offset)
{
   15b78:	b590      	push	{r4, r7, lr}
   15b7a:	b089      	sub	sp, #36	; 0x24
   15b7c:	af02      	add	r7, sp, #8
   15b7e:	6078      	str	r0, [r7, #4]
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
   15b80:	4b16      	ldr	r3, [pc, #88]	; (15bdc <SwTimerRunRemainingTime+0x64>)
   15b82:	681b      	ldr	r3, [r3, #0]
   15b84:	4a16      	ldr	r2, [pc, #88]	; (15be0 <SwTimerRunRemainingTime+0x68>)
   15b86:	011b      	lsls	r3, r3, #4
   15b88:	18d3      	adds	r3, r2, r3
   15b8a:	3304      	adds	r3, #4
   15b8c:	681b      	ldr	r3, [r3, #0]
   15b8e:	617b      	str	r3, [r7, #20]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
   15b90:	4b12      	ldr	r3, [pc, #72]	; (15bdc <SwTimerRunRemainingTime+0x64>)
   15b92:	681b      	ldr	r3, [r3, #0]
   15b94:	4a12      	ldr	r2, [pc, #72]	; (15be0 <SwTimerRunRemainingTime+0x68>)
   15b96:	011b      	lsls	r3, r3, #4
   15b98:	18d3      	adds	r3, r2, r3
   15b9a:	3308      	adds	r3, #8
   15b9c:	681b      	ldr	r3, [r3, #0]
   15b9e:	613b      	str	r3, [r7, #16]
    uint8_t timerId = runningTimerQueueHead;
   15ba0:	4b0e      	ldr	r3, [pc, #56]	; (15bdc <SwTimerRunRemainingTime+0x64>)
   15ba2:	681a      	ldr	r2, [r3, #0]
   15ba4:	230f      	movs	r3, #15
   15ba6:	18fb      	adds	r3, r7, r3
   15ba8:	701a      	strb	r2, [r3, #0]

    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
   15baa:	4b0c      	ldr	r3, [pc, #48]	; (15bdc <SwTimerRunRemainingTime+0x64>)
   15bac:	681b      	ldr	r3, [r3, #0]
   15bae:	b2db      	uxtb	r3, r3
   15bb0:	0018      	movs	r0, r3
   15bb2:	4b0c      	ldr	r3, [pc, #48]	; (15be4 <SwTimerRunRemainingTime+0x6c>)
   15bb4:	4798      	blx	r3
   15bb6:	0003      	movs	r3, r0
   15bb8:	2b08      	cmp	r3, #8
   15bba:	d10a      	bne.n	15bd2 <SwTimerRunRemainingTime+0x5a>
    {
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
   15bbc:	697a      	ldr	r2, [r7, #20]
   15bbe:	6879      	ldr	r1, [r7, #4]
   15bc0:	230f      	movs	r3, #15
   15bc2:	18fb      	adds	r3, r7, r3
   15bc4:	7818      	ldrb	r0, [r3, #0]
   15bc6:	693b      	ldr	r3, [r7, #16]
   15bc8:	9300      	str	r3, [sp, #0]
   15bca:	0013      	movs	r3, r2
   15bcc:	2200      	movs	r2, #0
   15bce:	4c06      	ldr	r4, [pc, #24]	; (15be8 <SwTimerRunRemainingTime+0x70>)
   15bd0:	47a0      	blx	r4
    }
}
   15bd2:	46c0      	nop			; (mov r8, r8)
   15bd4:	46bd      	mov	sp, r7
   15bd6:	b007      	add	sp, #28
   15bd8:	bd90      	pop	{r4, r7, pc}
   15bda:	46c0      	nop			; (mov r8, r8)
   15bdc:	200010e4 	.word	0x200010e4
   15be0:	200017e8 	.word	0x200017e8
   15be4:	00015cfd 	.word	0x00015cfd
   15be8:	000159bd 	.word	0x000159bd

00015bec <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
   15bec:	b590      	push	{r4, r7, lr}
   15bee:	b087      	sub	sp, #28
   15bf0:	af00      	add	r7, sp, #0
    uint64_t now = gettime();
   15bf2:	4b3b      	ldr	r3, [pc, #236]	; (15ce0 <SwTimersExecute+0xf4>)
   15bf4:	4798      	blx	r3
   15bf6:	0003      	movs	r3, r0
   15bf8:	000c      	movs	r4, r1
   15bfa:	613b      	str	r3, [r7, #16]
   15bfc:	617c      	str	r4, [r7, #20]

    uint8_t flags = cpu_irq_save();
   15bfe:	4b39      	ldr	r3, [pc, #228]	; (15ce4 <SwTimersExecute+0xf8>)
   15c00:	4798      	blx	r3
   15c02:	0002      	movs	r2, r0
   15c04:	230f      	movs	r3, #15
   15c06:	18fb      	adds	r3, r7, r3
   15c08:	701a      	strb	r2, [r3, #0]
    swtimerInternalHandler();
   15c0a:	4b37      	ldr	r3, [pc, #220]	; (15ce8 <SwTimersExecute+0xfc>)
   15c0c:	4798      	blx	r3
    cpu_irq_restore(flags);
   15c0e:	230f      	movs	r3, #15
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	781b      	ldrb	r3, [r3, #0]
   15c14:	0018      	movs	r0, r3
   15c16:	4b35      	ldr	r3, [pc, #212]	; (15cec <SwTimersExecute+0x100>)
   15c18:	4798      	blx	r3
        SwTimerCallbackFunc_t callback;
        void *cbParam;
        uint8_t nextExpiredTimer;

        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
   15c1a:	e058      	b.n	15cce <SwTimersExecute+0xe2>
        {
            flags = cpu_irq_save();
   15c1c:	4b31      	ldr	r3, [pc, #196]	; (15ce4 <SwTimersExecute+0xf8>)
   15c1e:	4798      	blx	r3
   15c20:	0002      	movs	r2, r0
   15c22:	230f      	movs	r3, #15
   15c24:	18fb      	adds	r3, r7, r3
   15c26:	701a      	strb	r2, [r3, #0]

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
   15c28:	4b31      	ldr	r3, [pc, #196]	; (15cf0 <SwTimersExecute+0x104>)
   15c2a:	681a      	ldr	r2, [r3, #0]
   15c2c:	230e      	movs	r3, #14
   15c2e:	18fb      	adds	r3, r7, r3
   15c30:	4930      	ldr	r1, [pc, #192]	; (15cf4 <SwTimersExecute+0x108>)
   15c32:	0112      	lsls	r2, r2, #4
   15c34:	188a      	adds	r2, r1, r2
   15c36:	320c      	adds	r2, #12
   15c38:	7812      	ldrb	r2, [r2, #0]
   15c3a:	701a      	strb	r2, [r3, #0]

            /* Callback is stored */
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
   15c3c:	4b2c      	ldr	r3, [pc, #176]	; (15cf0 <SwTimersExecute+0x104>)
   15c3e:	681b      	ldr	r3, [r3, #0]
   15c40:	4a2c      	ldr	r2, [pc, #176]	; (15cf4 <SwTimersExecute+0x108>)
   15c42:	011b      	lsls	r3, r3, #4
   15c44:	18d3      	adds	r3, r2, r3
   15c46:	3304      	adds	r3, #4
   15c48:	681b      	ldr	r3, [r3, #0]
   15c4a:	60bb      	str	r3, [r7, #8]

            /* Callback parameter is stored */
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
   15c4c:	4b28      	ldr	r3, [pc, #160]	; (15cf0 <SwTimersExecute+0x104>)
   15c4e:	681b      	ldr	r3, [r3, #0]
   15c50:	4a28      	ldr	r2, [pc, #160]	; (15cf4 <SwTimersExecute+0x108>)
   15c52:	011b      	lsls	r3, r3, #4
   15c54:	18d3      	adds	r3, r2, r3
   15c56:	3308      	adds	r3, #8
   15c58:	681b      	ldr	r3, [r3, #0]
   15c5a:	607b      	str	r3, [r7, #4]

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
   15c5c:	4b24      	ldr	r3, [pc, #144]	; (15cf0 <SwTimersExecute+0x104>)
   15c5e:	681b      	ldr	r3, [r3, #0]
   15c60:	4a24      	ldr	r2, [pc, #144]	; (15cf4 <SwTimersExecute+0x108>)
   15c62:	011b      	lsls	r3, r3, #4
   15c64:	18d3      	adds	r3, r2, r3
   15c66:	330c      	adds	r3, #12
   15c68:	22ff      	movs	r2, #255	; 0xff
   15c6a:	701a      	strb	r2, [r3, #0]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
   15c6c:	4b20      	ldr	r3, [pc, #128]	; (15cf0 <SwTimersExecute+0x104>)
   15c6e:	681b      	ldr	r3, [r3, #0]
   15c70:	4a20      	ldr	r2, [pc, #128]	; (15cf4 <SwTimersExecute+0x108>)
   15c72:	011b      	lsls	r3, r3, #4
   15c74:	18d3      	adds	r3, r2, r3
   15c76:	3304      	adds	r3, #4
   15c78:	2200      	movs	r2, #0
   15c7a:	601a      	str	r2, [r3, #0]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
   15c7c:	4b1c      	ldr	r3, [pc, #112]	; (15cf0 <SwTimersExecute+0x104>)
   15c7e:	681b      	ldr	r3, [r3, #0]
   15c80:	4a1c      	ldr	r2, [pc, #112]	; (15cf4 <SwTimersExecute+0x108>)
   15c82:	011b      	lsls	r3, r3, #4
   15c84:	18d3      	adds	r3, r2, r3
   15c86:	3308      	adds	r3, #8
   15c88:	2200      	movs	r2, #0
   15c8a:	601a      	str	r2, [r3, #0]
            swTimers[expiredTimerQueueHead].loaded = false;
   15c8c:	4b18      	ldr	r3, [pc, #96]	; (15cf0 <SwTimersExecute+0x104>)
   15c8e:	681b      	ldr	r3, [r3, #0]
   15c90:	4a18      	ldr	r2, [pc, #96]	; (15cf4 <SwTimersExecute+0x108>)
   15c92:	011b      	lsls	r3, r3, #4
   15c94:	18d3      	adds	r3, r2, r3
   15c96:	330d      	adds	r3, #13
   15c98:	2200      	movs	r2, #0
   15c9a:	701a      	strb	r2, [r3, #0]

            /*
            * The expired timer queue head is updated with the next
            * timer in the expired timer queue.
            */
            expiredTimerQueueHead = nextExpiredTimer;
   15c9c:	230e      	movs	r3, #14
   15c9e:	18fb      	adds	r3, r7, r3
   15ca0:	781a      	ldrb	r2, [r3, #0]
   15ca2:	4b13      	ldr	r3, [pc, #76]	; (15cf0 <SwTimersExecute+0x104>)
   15ca4:	601a      	str	r2, [r3, #0]

            if (SWTIMER_INVALID == expiredTimerQueueHead)
   15ca6:	4b12      	ldr	r3, [pc, #72]	; (15cf0 <SwTimersExecute+0x104>)
   15ca8:	681b      	ldr	r3, [r3, #0]
   15caa:	2bff      	cmp	r3, #255	; 0xff
   15cac:	d102      	bne.n	15cb4 <SwTimersExecute+0xc8>
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
   15cae:	4b12      	ldr	r3, [pc, #72]	; (15cf8 <SwTimersExecute+0x10c>)
   15cb0:	22ff      	movs	r2, #255	; 0xff
   15cb2:	601a      	str	r2, [r3, #0]
            }

            cpu_irq_restore(flags);
   15cb4:	230f      	movs	r3, #15
   15cb6:	18fb      	adds	r3, r7, r3
   15cb8:	781b      	ldrb	r3, [r3, #0]
   15cba:	0018      	movs	r0, r3
   15cbc:	4b0b      	ldr	r3, [pc, #44]	; (15cec <SwTimersExecute+0x100>)
   15cbe:	4798      	blx	r3

            if (NULL != callback)
   15cc0:	68bb      	ldr	r3, [r7, #8]
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	d003      	beq.n	15cce <SwTimersExecute+0xe2>
            {
                /* Callback function is called */
                callback(cbParam);
   15cc6:	687a      	ldr	r2, [r7, #4]
   15cc8:	68bb      	ldr	r3, [r7, #8]
   15cca:	0010      	movs	r0, r2
   15ccc:	4798      	blx	r3
        while (SWTIMER_INVALID != expiredTimerQueueHead)
   15cce:	4b08      	ldr	r3, [pc, #32]	; (15cf0 <SwTimersExecute+0x104>)
   15cd0:	681b      	ldr	r3, [r3, #0]
   15cd2:	2bff      	cmp	r3, #255	; 0xff
   15cd4:	d1a2      	bne.n	15c1c <SwTimersExecute+0x30>
                (void)now;
            }
        }
    }
}
   15cd6:	46c0      	nop			; (mov r8, r8)
   15cd8:	46bd      	mov	sp, r7
   15cda:	b007      	add	sp, #28
   15cdc:	bd90      	pop	{r4, r7, pc}
   15cde:	46c0      	nop			; (mov r8, r8)
   15ce0:	0001564d 	.word	0x0001564d
   15ce4:	0001525d 	.word	0x0001525d
   15ce8:	0001579d 	.word	0x0001579d
   15cec:	000152a5 	.word	0x000152a5
   15cf0:	200010e8 	.word	0x200010e8
   15cf4:	200017e8 	.word	0x200017e8
   15cf8:	200010ec 	.word	0x200010ec

00015cfc <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
   15cfc:	b580      	push	{r7, lr}
   15cfe:	b084      	sub	sp, #16
   15d00:	af00      	add	r7, sp, #0
   15d02:	0002      	movs	r2, r0
   15d04:	1dfb      	adds	r3, r7, #7
   15d06:	701a      	strb	r2, [r3, #0]
    bool timerStopReqStatus = false;
   15d08:	230f      	movs	r3, #15
   15d0a:	18fb      	adds	r3, r7, r3
   15d0c:	2200      	movs	r2, #0
   15d0e:	701a      	strb	r2, [r3, #0]
    uint8_t currIndex;
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
   15d10:	1dfb      	adds	r3, r7, #7
   15d12:	781b      	ldrb	r3, [r3, #0]
   15d14:	2b18      	cmp	r3, #24
   15d16:	d901      	bls.n	15d1c <SwTimerStop+0x20>
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
   15d18:	230a      	movs	r3, #10
   15d1a:	e11f      	b.n	15f5c <SwTimerStop+0x260>
    }

    uint8_t flags = cpu_irq_save();
   15d1c:	4b91      	ldr	r3, [pc, #580]	; (15f64 <SwTimerStop+0x268>)
   15d1e:	4798      	blx	r3
   15d20:	0002      	movs	r2, r0
   15d22:	230b      	movs	r3, #11
   15d24:	18fb      	adds	r3, r7, r3
   15d26:	701a      	strb	r2, [r3, #0]

    /* Check if any timer has expired. */
    swtimerInternalHandler();
   15d28:	4b8f      	ldr	r3, [pc, #572]	; (15f68 <SwTimerStop+0x26c>)
   15d2a:	4798      	blx	r3

    /* The requested timer is first searched in the running timer queue */
    if (runningTimers > 0)
   15d2c:	4b8f      	ldr	r3, [pc, #572]	; (15f6c <SwTimerStop+0x270>)
   15d2e:	781b      	ldrb	r3, [r3, #0]
   15d30:	b2db      	uxtb	r3, r3
   15d32:	2b00      	cmp	r3, #0
   15d34:	d100      	bne.n	15d38 <SwTimerStop+0x3c>
   15d36:	e076      	b.n	15e26 <SwTimerStop+0x12a>
    {
        uint8_t timer_count = runningTimers;
   15d38:	230c      	movs	r3, #12
   15d3a:	18fb      	adds	r3, r7, r3
   15d3c:	4a8b      	ldr	r2, [pc, #556]	; (15f6c <SwTimerStop+0x270>)
   15d3e:	7812      	ldrb	r2, [r2, #0]
   15d40:	701a      	strb	r2, [r3, #0]
        prevIndex = currIndex = runningTimerQueueHead;
   15d42:	4b8b      	ldr	r3, [pc, #556]	; (15f70 <SwTimerStop+0x274>)
   15d44:	681a      	ldr	r2, [r3, #0]
   15d46:	230e      	movs	r3, #14
   15d48:	18fb      	adds	r3, r7, r3
   15d4a:	701a      	strb	r2, [r3, #0]
   15d4c:	230d      	movs	r3, #13
   15d4e:	18fb      	adds	r3, r7, r3
   15d50:	220e      	movs	r2, #14
   15d52:	18ba      	adds	r2, r7, r2
   15d54:	7812      	ldrb	r2, [r2, #0]
   15d56:	701a      	strb	r2, [r3, #0]
        while (timer_count > 0)
   15d58:	e054      	b.n	15e04 <SwTimerStop+0x108>
        {
            if (timerId == currIndex)
   15d5a:	1dfa      	adds	r2, r7, #7
   15d5c:	230e      	movs	r3, #14
   15d5e:	18fb      	adds	r3, r7, r3
   15d60:	7812      	ldrb	r2, [r2, #0]
   15d62:	781b      	ldrb	r3, [r3, #0]
   15d64:	429a      	cmp	r2, r3
   15d66:	d135      	bne.n	15dd4 <SwTimerStop+0xd8>
            {
                timerStopReqStatus = true;
   15d68:	230f      	movs	r3, #15
   15d6a:	18fb      	adds	r3, r7, r3
   15d6c:	2201      	movs	r2, #1
   15d6e:	701a      	strb	r2, [r3, #0]
                if (timerId == runningTimerQueueHead)
   15d70:	1dfb      	adds	r3, r7, #7
   15d72:	781a      	ldrb	r2, [r3, #0]
   15d74:	4b7e      	ldr	r3, [pc, #504]	; (15f70 <SwTimerStop+0x274>)
   15d76:	681b      	ldr	r3, [r3, #0]
   15d78:	429a      	cmp	r2, r3
   15d7a:	d112      	bne.n	15da2 <SwTimerStop+0xa6>
                {
                    common_tc_compare_stop();
   15d7c:	4b7d      	ldr	r3, [pc, #500]	; (15f74 <SwTimerStop+0x278>)
   15d7e:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
   15d80:	1dfb      	adds	r3, r7, #7
   15d82:	781b      	ldrb	r3, [r3, #0]
   15d84:	4a7c      	ldr	r2, [pc, #496]	; (15f78 <SwTimerStop+0x27c>)
   15d86:	011b      	lsls	r3, r3, #4
   15d88:	18d3      	adds	r3, r2, r3
   15d8a:	330c      	adds	r3, #12
   15d8c:	781b      	ldrb	r3, [r3, #0]
   15d8e:	001a      	movs	r2, r3
   15d90:	4b77      	ldr	r3, [pc, #476]	; (15f70 <SwTimerStop+0x274>)
   15d92:	601a      	str	r2, [r3, #0]
                    * The value in OVF corresponds to the timeout pointed
                    * by the 'running_timer_queue_head'. As the head has
                    * changed here, OVF needs to be loaded by the new
                    * timeout value, if any.
                    */
                    loadHwTimer(runningTimerQueueHead);
   15d94:	4b76      	ldr	r3, [pc, #472]	; (15f70 <SwTimerStop+0x274>)
   15d96:	681b      	ldr	r3, [r3, #0]
   15d98:	b2db      	uxtb	r3, r3
   15d9a:	0018      	movs	r0, r3
   15d9c:	4b77      	ldr	r3, [pc, #476]	; (15f7c <SwTimerStop+0x280>)
   15d9e:	4798      	blx	r3
   15da0:	e00f      	b.n	15dc2 <SwTimerStop+0xc6>
                }
                else
                {
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
   15da2:	230d      	movs	r3, #13
   15da4:	18fb      	adds	r3, r7, r3
   15da6:	781b      	ldrb	r3, [r3, #0]
   15da8:	1dfa      	adds	r2, r7, #7
   15daa:	7812      	ldrb	r2, [r2, #0]
   15dac:	4972      	ldr	r1, [pc, #456]	; (15f78 <SwTimerStop+0x27c>)
   15dae:	0112      	lsls	r2, r2, #4
   15db0:	188a      	adds	r2, r1, r2
   15db2:	320c      	adds	r2, #12
   15db4:	7811      	ldrb	r1, [r2, #0]
   15db6:	4a70      	ldr	r2, [pc, #448]	; (15f78 <SwTimerStop+0x27c>)
   15db8:	011b      	lsls	r3, r3, #4
   15dba:	18d3      	adds	r3, r2, r3
   15dbc:	330c      	adds	r3, #12
   15dbe:	1c0a      	adds	r2, r1, #0
   15dc0:	701a      	strb	r2, [r3, #0]

                /*
                * The next timer element of the stopped timer is updated
                * to its default value.
                */
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
   15dc2:	1dfb      	adds	r3, r7, #7
   15dc4:	781b      	ldrb	r3, [r3, #0]
   15dc6:	4a6c      	ldr	r2, [pc, #432]	; (15f78 <SwTimerStop+0x27c>)
   15dc8:	011b      	lsls	r3, r3, #4
   15dca:	18d3      	adds	r3, r2, r3
   15dcc:	330c      	adds	r3, #12
   15dce:	22ff      	movs	r2, #255	; 0xff
   15dd0:	701a      	strb	r2, [r3, #0]
                break;
   15dd2:	e01c      	b.n	15e0e <SwTimerStop+0x112>
            }
            else
            {
                prevIndex = currIndex;
   15dd4:	230d      	movs	r3, #13
   15dd6:	18fb      	adds	r3, r7, r3
   15dd8:	220e      	movs	r2, #14
   15dda:	18ba      	adds	r2, r7, r2
   15ddc:	7812      	ldrb	r2, [r2, #0]
   15dde:	701a      	strb	r2, [r3, #0]
                currIndex = swTimers[currIndex].nextTimer;
   15de0:	230e      	movs	r3, #14
   15de2:	18fb      	adds	r3, r7, r3
   15de4:	781a      	ldrb	r2, [r3, #0]
   15de6:	230e      	movs	r3, #14
   15de8:	18fb      	adds	r3, r7, r3
   15dea:	4963      	ldr	r1, [pc, #396]	; (15f78 <SwTimerStop+0x27c>)
   15dec:	0112      	lsls	r2, r2, #4
   15dee:	188a      	adds	r2, r1, r2
   15df0:	320c      	adds	r2, #12
   15df2:	7812      	ldrb	r2, [r2, #0]
   15df4:	701a      	strb	r2, [r3, #0]
            }

            timer_count--;
   15df6:	230c      	movs	r3, #12
   15df8:	18fb      	adds	r3, r7, r3
   15dfa:	781a      	ldrb	r2, [r3, #0]
   15dfc:	230c      	movs	r3, #12
   15dfe:	18fb      	adds	r3, r7, r3
   15e00:	3a01      	subs	r2, #1
   15e02:	701a      	strb	r2, [r3, #0]
        while (timer_count > 0)
   15e04:	230c      	movs	r3, #12
   15e06:	18fb      	adds	r3, r7, r3
   15e08:	781b      	ldrb	r3, [r3, #0]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d1a5      	bne.n	15d5a <SwTimerStop+0x5e>
        }

        if (timerStopReqStatus)
   15e0e:	230f      	movs	r3, #15
   15e10:	18fb      	adds	r3, r7, r3
   15e12:	781b      	ldrb	r3, [r3, #0]
   15e14:	2b00      	cmp	r3, #0
   15e16:	d006      	beq.n	15e26 <SwTimerStop+0x12a>
        {
            runningTimers--;
   15e18:	4b54      	ldr	r3, [pc, #336]	; (15f6c <SwTimerStop+0x270>)
   15e1a:	781b      	ldrb	r3, [r3, #0]
   15e1c:	b2db      	uxtb	r3, r3
   15e1e:	3b01      	subs	r3, #1
   15e20:	b2da      	uxtb	r2, r3
   15e22:	4b52      	ldr	r3, [pc, #328]	; (15f6c <SwTimerStop+0x270>)
   15e24:	701a      	strb	r2, [r3, #0]

    /*
    * The requested timer is not present in the running timer queue.
    * It will be now searched in the expired timer queue
    */
    if (!timerStopReqStatus)
   15e26:	230f      	movs	r3, #15
   15e28:	18fb      	adds	r3, r7, r3
   15e2a:	781b      	ldrb	r3, [r3, #0]
   15e2c:	2201      	movs	r2, #1
   15e2e:	4053      	eors	r3, r2
   15e30:	b2db      	uxtb	r3, r3
   15e32:	2b00      	cmp	r3, #0
   15e34:	d067      	beq.n	15f06 <SwTimerStop+0x20a>
    {
        prevIndex = currIndex = expiredTimerQueueHead;
   15e36:	4b52      	ldr	r3, [pc, #328]	; (15f80 <SwTimerStop+0x284>)
   15e38:	681a      	ldr	r2, [r3, #0]
   15e3a:	230e      	movs	r3, #14
   15e3c:	18fb      	adds	r3, r7, r3
   15e3e:	701a      	strb	r2, [r3, #0]
   15e40:	230d      	movs	r3, #13
   15e42:	18fb      	adds	r3, r7, r3
   15e44:	220e      	movs	r2, #14
   15e46:	18ba      	adds	r2, r7, r2
   15e48:	7812      	ldrb	r2, [r2, #0]
   15e4a:	701a      	strb	r2, [r3, #0]
        while (SWTIMER_INVALID != currIndex)
   15e4c:	e056      	b.n	15efc <SwTimerStop+0x200>
        {
            if (timerId == currIndex)
   15e4e:	1dfa      	adds	r2, r7, #7
   15e50:	230e      	movs	r3, #14
   15e52:	18fb      	adds	r3, r7, r3
   15e54:	7812      	ldrb	r2, [r2, #0]
   15e56:	781b      	ldrb	r3, [r3, #0]
   15e58:	429a      	cmp	r2, r3
   15e5a:	d13e      	bne.n	15eda <SwTimerStop+0x1de>
            {
                if (timerId == expiredTimerQueueHead)
   15e5c:	1dfb      	adds	r3, r7, #7
   15e5e:	781a      	ldrb	r2, [r3, #0]
   15e60:	4b47      	ldr	r3, [pc, #284]	; (15f80 <SwTimerStop+0x284>)
   15e62:	681b      	ldr	r3, [r3, #0]
   15e64:	429a      	cmp	r2, r3
   15e66:	d118      	bne.n	15e9a <SwTimerStop+0x19e>
                {
                    /* The requested timer is the head of the expired timer queue */
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
   15e68:	4b45      	ldr	r3, [pc, #276]	; (15f80 <SwTimerStop+0x284>)
   15e6a:	681a      	ldr	r2, [r3, #0]
   15e6c:	4b45      	ldr	r3, [pc, #276]	; (15f84 <SwTimerStop+0x288>)
   15e6e:	681b      	ldr	r3, [r3, #0]
   15e70:	429a      	cmp	r2, r3
   15e72:	d107      	bne.n	15e84 <SwTimerStop+0x188>
                    {
                        /* Only one timer in expired timer queue */
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
   15e74:	4b43      	ldr	r3, [pc, #268]	; (15f84 <SwTimerStop+0x288>)
   15e76:	22ff      	movs	r2, #255	; 0xff
   15e78:	601a      	str	r2, [r3, #0]
   15e7a:	4b42      	ldr	r3, [pc, #264]	; (15f84 <SwTimerStop+0x288>)
   15e7c:	681a      	ldr	r2, [r3, #0]
   15e7e:	4b40      	ldr	r3, [pc, #256]	; (15f80 <SwTimerStop+0x284>)
   15e80:	601a      	str	r2, [r3, #0]
   15e82:	e025      	b.n	15ed0 <SwTimerStop+0x1d4>
                    {
                        /*
                        * The head of the expired timer queue is moved to next
                        * timer in the expired timer queue.
                        */
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
   15e84:	4b3e      	ldr	r3, [pc, #248]	; (15f80 <SwTimerStop+0x284>)
   15e86:	681b      	ldr	r3, [r3, #0]
   15e88:	4a3b      	ldr	r2, [pc, #236]	; (15f78 <SwTimerStop+0x27c>)
   15e8a:	011b      	lsls	r3, r3, #4
   15e8c:	18d3      	adds	r3, r2, r3
   15e8e:	330c      	adds	r3, #12
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	001a      	movs	r2, r3
   15e94:	4b3a      	ldr	r3, [pc, #232]	; (15f80 <SwTimerStop+0x284>)
   15e96:	601a      	str	r2, [r3, #0]
   15e98:	e01a      	b.n	15ed0 <SwTimerStop+0x1d4>
                {
                    /*
                    * The requested timer is present in the middle or at the
                    * end of the expired timer queue.
                    */
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
   15e9a:	230d      	movs	r3, #13
   15e9c:	18fb      	adds	r3, r7, r3
   15e9e:	781b      	ldrb	r3, [r3, #0]
   15ea0:	1dfa      	adds	r2, r7, #7
   15ea2:	7812      	ldrb	r2, [r2, #0]
   15ea4:	4934      	ldr	r1, [pc, #208]	; (15f78 <SwTimerStop+0x27c>)
   15ea6:	0112      	lsls	r2, r2, #4
   15ea8:	188a      	adds	r2, r1, r2
   15eaa:	320c      	adds	r2, #12
   15eac:	7811      	ldrb	r1, [r2, #0]
   15eae:	4a32      	ldr	r2, [pc, #200]	; (15f78 <SwTimerStop+0x27c>)
   15eb0:	011b      	lsls	r3, r3, #4
   15eb2:	18d3      	adds	r3, r2, r3
   15eb4:	330c      	adds	r3, #12
   15eb6:	1c0a      	adds	r2, r1, #0
   15eb8:	701a      	strb	r2, [r3, #0]

                    /*
                    * If the stopped timer is the one which is at the tail of
                    * the expired timer queue, then the tail is updated.
                    */
                    if (timerId == expiredTimerQueueTail)
   15eba:	1dfb      	adds	r3, r7, #7
   15ebc:	781a      	ldrb	r2, [r3, #0]
   15ebe:	4b31      	ldr	r3, [pc, #196]	; (15f84 <SwTimerStop+0x288>)
   15ec0:	681b      	ldr	r3, [r3, #0]
   15ec2:	429a      	cmp	r2, r3
   15ec4:	d104      	bne.n	15ed0 <SwTimerStop+0x1d4>
                    {
                        expiredTimerQueueTail = prevIndex;
   15ec6:	230d      	movs	r3, #13
   15ec8:	18fb      	adds	r3, r7, r3
   15eca:	781a      	ldrb	r2, [r3, #0]
   15ecc:	4b2d      	ldr	r3, [pc, #180]	; (15f84 <SwTimerStop+0x288>)
   15ece:	601a      	str	r2, [r3, #0]
                    }
                }

                timerStopReqStatus = true;
   15ed0:	230f      	movs	r3, #15
   15ed2:	18fb      	adds	r3, r7, r3
   15ed4:	2201      	movs	r2, #1
   15ed6:	701a      	strb	r2, [r3, #0]
                break;
   15ed8:	e015      	b.n	15f06 <SwTimerStop+0x20a>
            }
            else
            {
                prevIndex = currIndex;
   15eda:	230d      	movs	r3, #13
   15edc:	18fb      	adds	r3, r7, r3
   15ede:	220e      	movs	r2, #14
   15ee0:	18ba      	adds	r2, r7, r2
   15ee2:	7812      	ldrb	r2, [r2, #0]
   15ee4:	701a      	strb	r2, [r3, #0]
                currIndex = swTimers[currIndex].nextTimer;
   15ee6:	230e      	movs	r3, #14
   15ee8:	18fb      	adds	r3, r7, r3
   15eea:	781a      	ldrb	r2, [r3, #0]
   15eec:	230e      	movs	r3, #14
   15eee:	18fb      	adds	r3, r7, r3
   15ef0:	4921      	ldr	r1, [pc, #132]	; (15f78 <SwTimerStop+0x27c>)
   15ef2:	0112      	lsls	r2, r2, #4
   15ef4:	188a      	adds	r2, r1, r2
   15ef6:	320c      	adds	r2, #12
   15ef8:	7812      	ldrb	r2, [r2, #0]
   15efa:	701a      	strb	r2, [r3, #0]
        while (SWTIMER_INVALID != currIndex)
   15efc:	230e      	movs	r3, #14
   15efe:	18fb      	adds	r3, r7, r3
   15f00:	781b      	ldrb	r3, [r3, #0]
   15f02:	2bff      	cmp	r3, #255	; 0xff
   15f04:	d1a3      	bne.n	15e4e <SwTimerStop+0x152>
            }
        }
    }

    if (timerStopReqStatus)
   15f06:	230f      	movs	r3, #15
   15f08:	18fb      	adds	r3, r7, r3
   15f0a:	781b      	ldrb	r3, [r3, #0]
   15f0c:	2b00      	cmp	r3, #0
   15f0e:	d017      	beq.n	15f40 <SwTimerStop+0x244>
    {
        /*
        * The requested timer is stopped, hence the structure elements
        * of the timer are updated.
        */
        swTimers[timerId].timerCb = NULL;
   15f10:	1dfb      	adds	r3, r7, #7
   15f12:	781b      	ldrb	r3, [r3, #0]
   15f14:	4a18      	ldr	r2, [pc, #96]	; (15f78 <SwTimerStop+0x27c>)
   15f16:	011b      	lsls	r3, r3, #4
   15f18:	18d3      	adds	r3, r2, r3
   15f1a:	3304      	adds	r3, #4
   15f1c:	2200      	movs	r2, #0
   15f1e:	601a      	str	r2, [r3, #0]
        swTimers[timerId].paramCb = NULL;
   15f20:	1dfb      	adds	r3, r7, #7
   15f22:	781b      	ldrb	r3, [r3, #0]
   15f24:	4a14      	ldr	r2, [pc, #80]	; (15f78 <SwTimerStop+0x27c>)
   15f26:	011b      	lsls	r3, r3, #4
   15f28:	18d3      	adds	r3, r2, r3
   15f2a:	3308      	adds	r3, #8
   15f2c:	2200      	movs	r2, #0
   15f2e:	601a      	str	r2, [r3, #0]
        swTimers[timerId].loaded = false;
   15f30:	1dfb      	adds	r3, r7, #7
   15f32:	781b      	ldrb	r3, [r3, #0]
   15f34:	4a10      	ldr	r2, [pc, #64]	; (15f78 <SwTimerStop+0x27c>)
   15f36:	011b      	lsls	r3, r3, #4
   15f38:	18d3      	adds	r3, r2, r3
   15f3a:	330d      	adds	r3, #13
   15f3c:	2200      	movs	r2, #0
   15f3e:	701a      	strb	r2, [r3, #0]
    }

    cpu_irq_restore(flags);
   15f40:	230b      	movs	r3, #11
   15f42:	18fb      	adds	r3, r7, r3
   15f44:	781b      	ldrb	r3, [r3, #0]
   15f46:	0018      	movs	r0, r3
   15f48:	4b0f      	ldr	r3, [pc, #60]	; (15f88 <SwTimerStop+0x28c>)
   15f4a:	4798      	blx	r3

    if (timerStopReqStatus)
   15f4c:	230f      	movs	r3, #15
   15f4e:	18fb      	adds	r3, r7, r3
   15f50:	781b      	ldrb	r3, [r3, #0]
   15f52:	2b00      	cmp	r3, #0
   15f54:	d001      	beq.n	15f5a <SwTimerStop+0x25e>
    {
        return LORAWAN_SUCCESS;
   15f56:	2308      	movs	r3, #8
   15f58:	e000      	b.n	15f5c <SwTimerStop+0x260>
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
   15f5a:	2315      	movs	r3, #21
}
   15f5c:	0018      	movs	r0, r3
   15f5e:	46bd      	mov	sp, r7
   15f60:	b004      	add	sp, #16
   15f62:	bd80      	pop	{r7, pc}
   15f64:	0001525d 	.word	0x0001525d
   15f68:	0001579d 	.word	0x0001579d
   15f6c:	200010e2 	.word	0x200010e2
   15f70:	200010e4 	.word	0x200010e4
   15f74:	0001a54d 	.word	0x0001a54d
   15f78:	200017e8 	.word	0x200017e8
   15f7c:	00015545 	.word	0x00015545
   15f80:	200010e8 	.word	0x200010e8
   15f84:	200010ec 	.word	0x200010ec
   15f88:	000152a5 	.word	0x000152a5

00015f8c <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
   15f8c:	b5b0      	push	{r4, r5, r7, lr}
   15f8e:	af00      	add	r7, sp, #0
    sysTimeLastKnown = gettime();
   15f90:	4b05      	ldr	r3, [pc, #20]	; (15fa8 <SystemTimerSuspend+0x1c>)
   15f92:	4798      	blx	r3
   15f94:	0003      	movs	r3, r0
   15f96:	000c      	movs	r4, r1
   15f98:	4a04      	ldr	r2, [pc, #16]	; (15fac <SystemTimerSuspend+0x20>)
   15f9a:	6013      	str	r3, [r2, #0]
   15f9c:	6054      	str	r4, [r2, #4]
    common_tc_stop();
   15f9e:	4b04      	ldr	r3, [pc, #16]	; (15fb0 <SystemTimerSuspend+0x24>)
   15fa0:	4798      	blx	r3
}
   15fa2:	46c0      	nop			; (mov r8, r8)
   15fa4:	46bd      	mov	sp, r7
   15fa6:	bdb0      	pop	{r4, r5, r7, pc}
   15fa8:	0001564d 	.word	0x0001564d
   15fac:	200010f8 	.word	0x200010f8
   15fb0:	0001a58d 	.word	0x0001a58d

00015fb4 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
   15fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fb6:	b087      	sub	sp, #28
   15fb8:	af00      	add	r7, sp, #0
   15fba:	60b8      	str	r0, [r7, #8]
   15fbc:	60f9      	str	r1, [r7, #12]
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
   15fbe:	4b55      	ldr	r3, [pc, #340]	; (16114 <SystemTimerSync+0x160>)
   15fc0:	6819      	ldr	r1, [r3, #0]
   15fc2:	685a      	ldr	r2, [r3, #4]
   15fc4:	68bb      	ldr	r3, [r7, #8]
   15fc6:	68fc      	ldr	r4, [r7, #12]
   15fc8:	185b      	adds	r3, r3, r1
   15fca:	4154      	adcs	r4, r2
   15fcc:	4a51      	ldr	r2, [pc, #324]	; (16114 <SystemTimerSync+0x160>)
   15fce:	6013      	str	r3, [r2, #0]
   15fd0:	6054      	str	r4, [r2, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
   15fd2:	4b50      	ldr	r3, [pc, #320]	; (16114 <SystemTimerSync+0x160>)
   15fd4:	685c      	ldr	r4, [r3, #4]
   15fd6:	681b      	ldr	r3, [r3, #0]
   15fd8:	0023      	movs	r3, r4
   15fda:	603b      	str	r3, [r7, #0]
   15fdc:	2300      	movs	r3, #0
   15fde:	607b      	str	r3, [r7, #4]
   15fe0:	683a      	ldr	r2, [r7, #0]
   15fe2:	4b4d      	ldr	r3, [pc, #308]	; (16118 <SystemTimerSync+0x164>)
   15fe4:	601a      	str	r2, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
   15fe6:	4b4b      	ldr	r3, [pc, #300]	; (16114 <SystemTimerSync+0x160>)
   15fe8:	685c      	ldr	r4, [r3, #4]
   15fea:	681b      	ldr	r3, [r3, #0]
   15fec:	0422      	lsls	r2, r4, #16
   15fee:	0c1d      	lsrs	r5, r3, #16
   15ff0:	4315      	orrs	r5, r2
   15ff2:	0c26      	lsrs	r6, r4, #16
   15ff4:	b2aa      	uxth	r2, r5
   15ff6:	4b49      	ldr	r3, [pc, #292]	; (1611c <SystemTimerSync+0x168>)
   15ff8:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
   15ffa:	4b46      	ldr	r3, [pc, #280]	; (16114 <SystemTimerSync+0x160>)
   15ffc:	685c      	ldr	r4, [r3, #4]
   15ffe:	681b      	ldr	r3, [r3, #0]
   16000:	220c      	movs	r2, #12
   16002:	2108      	movs	r1, #8
   16004:	468c      	mov	ip, r1
   16006:	44bc      	add	ip, r7
   16008:	4462      	add	r2, ip
   1600a:	8013      	strh	r3, [r2, #0]
    timerId = runningTimerQueueHead;
   1600c:	4b44      	ldr	r3, [pc, #272]	; (16120 <SystemTimerSync+0x16c>)
   1600e:	681a      	ldr	r2, [r3, #0]
   16010:	230f      	movs	r3, #15
   16012:	2108      	movs	r1, #8
   16014:	468c      	mov	ip, r1
   16016:	44bc      	add	ip, r7
   16018:	4463      	add	r3, ip
   1601a:	701a      	strb	r2, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
   1601c:	230e      	movs	r3, #14
   1601e:	2208      	movs	r2, #8
   16020:	4694      	mov	ip, r2
   16022:	44bc      	add	ip, r7
   16024:	4463      	add	r3, ip
   16026:	2200      	movs	r2, #0
   16028:	701a      	strb	r2, [r3, #0]
   1602a:	e03e      	b.n	160aa <SystemTimerSync+0xf6>
    {
        if (SWTIMER_INVALID != timerId)
   1602c:	230f      	movs	r3, #15
   1602e:	2208      	movs	r2, #8
   16030:	4694      	mov	ip, r2
   16032:	44bc      	add	ip, r7
   16034:	4463      	add	r3, ip
   16036:	781b      	ldrb	r3, [r3, #0]
   16038:	2bff      	cmp	r3, #255	; 0xff
   1603a:	d029      	beq.n	16090 <SystemTimerSync+0xdc>
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
   1603c:	230f      	movs	r3, #15
   1603e:	2208      	movs	r2, #8
   16040:	4694      	mov	ip, r2
   16042:	44bc      	add	ip, r7
   16044:	4463      	add	r3, ip
   16046:	781a      	ldrb	r2, [r3, #0]
   16048:	230f      	movs	r3, #15
   1604a:	2108      	movs	r1, #8
   1604c:	468c      	mov	ip, r1
   1604e:	44bc      	add	ip, r7
   16050:	4463      	add	r3, ip
   16052:	7819      	ldrb	r1, [r3, #0]
   16054:	4b33      	ldr	r3, [pc, #204]	; (16124 <SystemTimerSync+0x170>)
   16056:	0109      	lsls	r1, r1, #4
   16058:	58c9      	ldr	r1, [r1, r3]
   1605a:	230c      	movs	r3, #12
   1605c:	2008      	movs	r0, #8
   1605e:	4684      	mov	ip, r0
   16060:	44bc      	add	ip, r7
   16062:	4463      	add	r3, ip
   16064:	881b      	ldrh	r3, [r3, #0]
   16066:	1ac9      	subs	r1, r1, r3
   16068:	4b2e      	ldr	r3, [pc, #184]	; (16124 <SystemTimerSync+0x170>)
   1606a:	0112      	lsls	r2, r2, #4
   1606c:	50d1      	str	r1, [r2, r3]
            timerId = swTimers[timerId].nextTimer;
   1606e:	230f      	movs	r3, #15
   16070:	2208      	movs	r2, #8
   16072:	4694      	mov	ip, r2
   16074:	44bc      	add	ip, r7
   16076:	4463      	add	r3, ip
   16078:	781a      	ldrb	r2, [r3, #0]
   1607a:	230f      	movs	r3, #15
   1607c:	2108      	movs	r1, #8
   1607e:	468c      	mov	ip, r1
   16080:	44bc      	add	ip, r7
   16082:	4463      	add	r3, ip
   16084:	4927      	ldr	r1, [pc, #156]	; (16124 <SystemTimerSync+0x170>)
   16086:	0112      	lsls	r2, r2, #4
   16088:	188a      	adds	r2, r1, r2
   1608a:	320c      	adds	r2, #12
   1608c:	7812      	ldrb	r2, [r2, #0]
   1608e:	701a      	strb	r2, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
   16090:	230e      	movs	r3, #14
   16092:	2208      	movs	r2, #8
   16094:	4694      	mov	ip, r2
   16096:	44bc      	add	ip, r7
   16098:	4463      	add	r3, ip
   1609a:	781a      	ldrb	r2, [r3, #0]
   1609c:	230e      	movs	r3, #14
   1609e:	2108      	movs	r1, #8
   160a0:	468c      	mov	ip, r1
   160a2:	44bc      	add	ip, r7
   160a4:	4463      	add	r3, ip
   160a6:	3201      	adds	r2, #1
   160a8:	701a      	strb	r2, [r3, #0]
   160aa:	4b1f      	ldr	r3, [pc, #124]	; (16128 <SystemTimerSync+0x174>)
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	b2db      	uxtb	r3, r3
   160b0:	220e      	movs	r2, #14
   160b2:	2108      	movs	r1, #8
   160b4:	468c      	mov	ip, r1
   160b6:	44bc      	add	ip, r7
   160b8:	4462      	add	r2, ip
   160ba:	7812      	ldrb	r2, [r2, #0]
   160bc:	429a      	cmp	r2, r3
   160be:	d3b5      	bcc.n	1602c <SystemTimerSync+0x78>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
   160c0:	4b1a      	ldr	r3, [pc, #104]	; (1612c <SystemTimerSync+0x178>)
   160c2:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
   160c4:	4b1a      	ldr	r3, [pc, #104]	; (16130 <SystemTimerSync+0x17c>)
   160c6:	0018      	movs	r0, r3
   160c8:	4b1a      	ldr	r3, [pc, #104]	; (16134 <SystemTimerSync+0x180>)
   160ca:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
   160cc:	4b1a      	ldr	r3, [pc, #104]	; (16138 <SystemTimerSync+0x184>)
   160ce:	0018      	movs	r0, r3
   160d0:	4b1a      	ldr	r3, [pc, #104]	; (1613c <SystemTimerSync+0x188>)
   160d2:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
   160d4:	4b14      	ldr	r3, [pc, #80]	; (16128 <SystemTimerSync+0x174>)
   160d6:	781b      	ldrb	r3, [r3, #0]
   160d8:	b2db      	uxtb	r3, r3
   160da:	2b00      	cmp	r3, #0
   160dc:	d015      	beq.n	1610a <SystemTimerSync+0x156>
   160de:	4b10      	ldr	r3, [pc, #64]	; (16120 <SystemTimerSync+0x16c>)
   160e0:	681b      	ldr	r3, [r3, #0]
   160e2:	2bff      	cmp	r3, #255	; 0xff
   160e4:	d011      	beq.n	1610a <SystemTimerSync+0x156>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
   160e6:	4b16      	ldr	r3, [pc, #88]	; (16140 <SystemTimerSync+0x18c>)
   160e8:	4798      	blx	r3
   160ea:	0003      	movs	r3, r0
   160ec:	613b      	str	r3, [r7, #16]

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
   160ee:	693b      	ldr	r3, [r7, #16]
   160f0:	2bfe      	cmp	r3, #254	; 0xfe
   160f2:	d806      	bhi.n	16102 <SystemTimerSync+0x14e>
        {
            /*
            * Since head timer has very less duration...
            * It cannot be restarted. So, expire head timer.
            */
            isTimerTriggered = true;
   160f4:	4b13      	ldr	r3, [pc, #76]	; (16144 <SystemTimerSync+0x190>)
   160f6:	2201      	movs	r2, #1
   160f8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
   160fa:	2001      	movs	r0, #1
   160fc:	4b12      	ldr	r3, [pc, #72]	; (16148 <SystemTimerSync+0x194>)
   160fe:	4798      	blx	r3
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
        }
    }
}
   16100:	e003      	b.n	1610a <SystemTimerSync+0x156>
            SwTimerRunRemainingTime(remainingTime);
   16102:	693b      	ldr	r3, [r7, #16]
   16104:	0018      	movs	r0, r3
   16106:	4b11      	ldr	r3, [pc, #68]	; (1614c <SystemTimerSync+0x198>)
   16108:	4798      	blx	r3
}
   1610a:	46c0      	nop			; (mov r8, r8)
   1610c:	46bd      	mov	sp, r7
   1610e:	b007      	add	sp, #28
   16110:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16112:	46c0      	nop			; (mov r8, r8)
   16114:	200010f8 	.word	0x200010f8
   16118:	2000197c 	.word	0x2000197c
   1611c:	20001978 	.word	0x20001978
   16120:	200010e4 	.word	0x200010e4
   16124:	200017e8 	.word	0x200017e8
   16128:	200010e2 	.word	0x200010e2
   1612c:	0001a615 	.word	0x0001a615
   16130:	000152d5 	.word	0x000152d5
   16134:	0001a699 	.word	0x0001a699
   16138:	0001531d 	.word	0x0001531d
   1613c:	0001a6a5 	.word	0x0001a6a5
   16140:	00015b41 	.word	0x00015b41
   16144:	2000197a 	.word	0x2000197a
   16148:	000162bd 	.word	0x000162bd
   1614c:	00015b79 	.word	0x00015b79

00016150 <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
   16150:	b580      	push	{r7, lr}
   16152:	b084      	sub	sp, #16
   16154:	af00      	add	r7, sp, #0
   16156:	6078      	str	r0, [r7, #4]
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
   16158:	230f      	movs	r3, #15
   1615a:	18fb      	adds	r3, r7, r3
   1615c:	2208      	movs	r2, #8
   1615e:	701a      	strb	r2, [r3, #0]

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
   16160:	4b0e      	ldr	r3, [pc, #56]	; (1619c <SwTimerTimestampCreate+0x4c>)
   16162:	781b      	ldrb	r3, [r3, #0]
   16164:	2b01      	cmp	r3, #1
   16166:	d80e      	bhi.n	16186 <SwTimerTimestampCreate+0x36>
    {
        ATOMIC_SECTION_ENTER
   16168:	4b0d      	ldr	r3, [pc, #52]	; (161a0 <SwTimerTimestampCreate+0x50>)
   1616a:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
   1616c:	4b0b      	ldr	r3, [pc, #44]	; (1619c <SwTimerTimestampCreate+0x4c>)
   1616e:	781a      	ldrb	r2, [r3, #0]
   16170:	687b      	ldr	r3, [r7, #4]
   16172:	701a      	strb	r2, [r3, #0]
        allocatedTimestampId++;
   16174:	4b09      	ldr	r3, [pc, #36]	; (1619c <SwTimerTimestampCreate+0x4c>)
   16176:	781b      	ldrb	r3, [r3, #0]
   16178:	3301      	adds	r3, #1
   1617a:	b2da      	uxtb	r2, r3
   1617c:	4b07      	ldr	r3, [pc, #28]	; (1619c <SwTimerTimestampCreate+0x4c>)
   1617e:	701a      	strb	r2, [r3, #0]
        ATOMIC_SECTION_EXIT
   16180:	4b08      	ldr	r3, [pc, #32]	; (161a4 <SwTimerTimestampCreate+0x54>)
   16182:	4798      	blx	r3
   16184:	e003      	b.n	1618e <SwTimerTimestampCreate+0x3e>
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
   16186:	230f      	movs	r3, #15
   16188:	18fb      	adds	r3, r7, r3
   1618a:	2214      	movs	r2, #20
   1618c:	701a      	strb	r2, [r3, #0]
    }

    return retVal;
   1618e:	230f      	movs	r3, #15
   16190:	18fb      	adds	r3, r7, r3
   16192:	781b      	ldrb	r3, [r3, #0]
}
   16194:	0018      	movs	r0, r3
   16196:	46bd      	mov	sp, r7
   16198:	b004      	add	sp, #16
   1619a:	bd80      	pop	{r7, pc}
   1619c:	200010f1 	.word	0x200010f1
   161a0:	000076e1 	.word	0x000076e1
   161a4:	000076f5 	.word	0x000076f5

000161a8 <SwTimerReadTimestamp>:
\brief Returns the timestamp stored in the given timestamp index
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
   161a8:	b590      	push	{r4, r7, lr}
   161aa:	b083      	sub	sp, #12
   161ac:	af00      	add	r7, sp, #0
   161ae:	0002      	movs	r2, r0
   161b0:	6039      	str	r1, [r7, #0]
   161b2:	1dfb      	adds	r3, r7, #7
   161b4:	701a      	strb	r2, [r3, #0]
	*timestamp = swTimestamp[index];
   161b6:	1dfb      	adds	r3, r7, #7
   161b8:	781b      	ldrb	r3, [r3, #0]
   161ba:	4a06      	ldr	r2, [pc, #24]	; (161d4 <SwTimerReadTimestamp+0x2c>)
   161bc:	00db      	lsls	r3, r3, #3
   161be:	18d3      	adds	r3, r2, r3
   161c0:	685c      	ldr	r4, [r3, #4]
   161c2:	681b      	ldr	r3, [r3, #0]
   161c4:	683a      	ldr	r2, [r7, #0]
   161c6:	6013      	str	r3, [r2, #0]
   161c8:	6054      	str	r4, [r2, #4]
}
   161ca:	46c0      	nop			; (mov r8, r8)
   161cc:	46bd      	mov	sp, r7
   161ce:	b003      	add	sp, #12
   161d0:	bd90      	pop	{r4, r7, pc}
   161d2:	46c0      	nop			; (mov r8, r8)
   161d4:	200017d8 	.word	0x200017d8

000161d8 <SwTimerWriteTimestamp>:
\brief Stores the timestamp in the given timestamp index
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
   161d8:	b590      	push	{r4, r7, lr}
   161da:	b083      	sub	sp, #12
   161dc:	af00      	add	r7, sp, #0
   161de:	0002      	movs	r2, r0
   161e0:	6039      	str	r1, [r7, #0]
   161e2:	1dfb      	adds	r3, r7, #7
   161e4:	701a      	strb	r2, [r3, #0]
    swTimestamp[index] = *timestamp;
   161e6:	1dfb      	adds	r3, r7, #7
   161e8:	781a      	ldrb	r2, [r3, #0]
   161ea:	683b      	ldr	r3, [r7, #0]
   161ec:	685c      	ldr	r4, [r3, #4]
   161ee:	681b      	ldr	r3, [r3, #0]
   161f0:	4904      	ldr	r1, [pc, #16]	; (16204 <SwTimerWriteTimestamp+0x2c>)
   161f2:	00d2      	lsls	r2, r2, #3
   161f4:	188a      	adds	r2, r1, r2
   161f6:	6013      	str	r3, [r2, #0]
   161f8:	6054      	str	r4, [r2, #4]
}
   161fa:	46c0      	nop			; (mov r8, r8)
   161fc:	46bd      	mov	sp, r7
   161fe:	b003      	add	sp, #12
   16200:	bd90      	pop	{r4, r7, pc}
   16202:	46c0      	nop			; (mov r8, r8)
   16204:	200017d8 	.word	0x200017d8

00016208 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
   16208:	b580      	push	{r7, lr}
   1620a:	af00      	add	r7, sp, #0
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
   1620c:	2010      	movs	r0, #16
   1620e:	4b02      	ldr	r3, [pc, #8]	; (16218 <Stack_Init+0x10>)
   16210:	4798      	blx	r3
}
   16212:	46c0      	nop			; (mov r8, r8)
   16214:	46bd      	mov	sp, r7
   16216:	bd80      	pop	{r7, pc}
   16218:	000162bd 	.word	0x000162bd

0001621c <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
   1621c:	b580      	push	{r7, lr}
   1621e:	b082      	sub	sp, #8
   16220:	af00      	add	r7, sp, #0
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
   16222:	4b22      	ldr	r3, [pc, #136]	; (162ac <SYSTEM_RunTasks+0x90>)
   16224:	881b      	ldrh	r3, [r3, #0]
   16226:	b29b      	uxth	r3, r3
   16228:	2b1f      	cmp	r3, #31
   1622a:	d83a      	bhi.n	162a2 <SYSTEM_RunTasks+0x86>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
   1622c:	e033      	b.n	16296 <SYSTEM_RunTasks+0x7a>
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
   1622e:	1dbb      	adds	r3, r7, #6
   16230:	2200      	movs	r2, #0
   16232:	801a      	strh	r2, [r3, #0]
   16234:	e02b      	b.n	1628e <SYSTEM_RunTasks+0x72>
            {
                if ((1 << taskId) & sysTaskFlag)
   16236:	4b1d      	ldr	r3, [pc, #116]	; (162ac <SYSTEM_RunTasks+0x90>)
   16238:	881b      	ldrh	r3, [r3, #0]
   1623a:	b29b      	uxth	r3, r3
   1623c:	001a      	movs	r2, r3
   1623e:	1dbb      	adds	r3, r7, #6
   16240:	881b      	ldrh	r3, [r3, #0]
   16242:	411a      	asrs	r2, r3
   16244:	0013      	movs	r3, r2
   16246:	2201      	movs	r2, #1
   16248:	4013      	ands	r3, r2
   1624a:	d01b      	beq.n	16284 <SYSTEM_RunTasks+0x68>
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
   1624c:	4b18      	ldr	r3, [pc, #96]	; (162b0 <SYSTEM_RunTasks+0x94>)
   1624e:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
   16250:	1dbb      	adds	r3, r7, #6
   16252:	881b      	ldrh	r3, [r3, #0]
   16254:	2201      	movs	r2, #1
   16256:	409a      	lsls	r2, r3
   16258:	0013      	movs	r3, r2
   1625a:	b21b      	sxth	r3, r3
   1625c:	43db      	mvns	r3, r3
   1625e:	b21b      	sxth	r3, r3
   16260:	4a12      	ldr	r2, [pc, #72]	; (162ac <SYSTEM_RunTasks+0x90>)
   16262:	8812      	ldrh	r2, [r2, #0]
   16264:	b292      	uxth	r2, r2
   16266:	b212      	sxth	r2, r2
   16268:	4013      	ands	r3, r2
   1626a:	b21b      	sxth	r3, r3
   1626c:	b29a      	uxth	r2, r3
   1626e:	4b0f      	ldr	r3, [pc, #60]	; (162ac <SYSTEM_RunTasks+0x90>)
   16270:	801a      	strh	r2, [r3, #0]
                    ATOMIC_SECTION_EXIT
   16272:	4b10      	ldr	r3, [pc, #64]	; (162b4 <SYSTEM_RunTasks+0x98>)
   16274:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
   16276:	1dbb      	adds	r3, r7, #6
   16278:	881a      	ldrh	r2, [r3, #0]
   1627a:	4b0f      	ldr	r3, [pc, #60]	; (162b8 <SYSTEM_RunTasks+0x9c>)
   1627c:	0092      	lsls	r2, r2, #2
   1627e:	58d3      	ldr	r3, [r2, r3]
   16280:	4798      	blx	r3

                    /* Break here so that higher priority task executes next, if any */
                    break;
   16282:	e008      	b.n	16296 <SYSTEM_RunTasks+0x7a>
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
   16284:	1dbb      	adds	r3, r7, #6
   16286:	881a      	ldrh	r2, [r3, #0]
   16288:	1dbb      	adds	r3, r7, #6
   1628a:	3201      	adds	r2, #1
   1628c:	801a      	strh	r2, [r3, #0]
   1628e:	1dbb      	adds	r3, r7, #6
   16290:	881b      	ldrh	r3, [r3, #0]
   16292:	2b04      	cmp	r3, #4
   16294:	d9cf      	bls.n	16236 <SYSTEM_RunTasks+0x1a>
        while (sysTaskFlag)
   16296:	4b05      	ldr	r3, [pc, #20]	; (162ac <SYSTEM_RunTasks+0x90>)
   16298:	881b      	ldrh	r3, [r3, #0]
   1629a:	b29b      	uxth	r3, r3
   1629c:	2b00      	cmp	r3, #0
   1629e:	d1c6      	bne.n	1622e <SYSTEM_RunTasks+0x12>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
   162a0:	e000      	b.n	162a4 <SYSTEM_RunTasks+0x88>
        while(1);
   162a2:	e7fe      	b.n	162a2 <SYSTEM_RunTasks+0x86>
}
   162a4:	46bd      	mov	sp, r7
   162a6:	b002      	add	sp, #8
   162a8:	bd80      	pop	{r7, pc}
   162aa:	46c0      	nop			; (mov r8, r8)
   162ac:	20001100 	.word	0x20001100
   162b0:	000076e1 	.word	0x000076e1
   162b4:	000076f5 	.word	0x000076f5
   162b8:	20000010 	.word	0x20000010

000162bc <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
   162bc:	b580      	push	{r7, lr}
   162be:	b082      	sub	sp, #8
   162c0:	af00      	add	r7, sp, #0
   162c2:	0002      	movs	r2, r0
   162c4:	1dfb      	adds	r3, r7, #7
   162c6:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
   162c8:	4b08      	ldr	r3, [pc, #32]	; (162ec <SYSTEM_PostTask+0x30>)
   162ca:	4798      	blx	r3
    sysTaskFlag |= task;
   162cc:	1dfb      	adds	r3, r7, #7
   162ce:	781b      	ldrb	r3, [r3, #0]
   162d0:	b29a      	uxth	r2, r3
   162d2:	4b07      	ldr	r3, [pc, #28]	; (162f0 <SYSTEM_PostTask+0x34>)
   162d4:	881b      	ldrh	r3, [r3, #0]
   162d6:	b29b      	uxth	r3, r3
   162d8:	4313      	orrs	r3, r2
   162da:	b29a      	uxth	r2, r3
   162dc:	4b04      	ldr	r3, [pc, #16]	; (162f0 <SYSTEM_PostTask+0x34>)
   162de:	801a      	strh	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
   162e0:	4b04      	ldr	r3, [pc, #16]	; (162f4 <SYSTEM_PostTask+0x38>)
   162e2:	4798      	blx	r3
}
   162e4:	46c0      	nop			; (mov r8, r8)
   162e6:	46bd      	mov	sp, r7
   162e8:	b002      	add	sp, #8
   162ea:	bd80      	pop	{r7, pc}
   162ec:	000076e1 	.word	0x000076e1
   162f0:	20001100 	.word	0x20001100
   162f4:	000076f5 	.word	0x000076f5

000162f8 <SYSTEM_ReadyToSleep>:
\brief Returns the readiness of the system for sleep

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
   162f8:	b580      	push	{r7, lr}
   162fa:	af00      	add	r7, sp, #0
    return !(sysTaskFlag & 0xffff);
   162fc:	4b04      	ldr	r3, [pc, #16]	; (16310 <SYSTEM_ReadyToSleep+0x18>)
   162fe:	881b      	ldrh	r3, [r3, #0]
   16300:	b29b      	uxth	r3, r3
   16302:	425a      	negs	r2, r3
   16304:	4153      	adcs	r3, r2
   16306:	b2db      	uxtb	r3, r3
}
   16308:	0018      	movs	r0, r3
   1630a:	46bd      	mov	sp, r7
   1630c:	bd80      	pop	{r7, pc}
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	20001100 	.word	0x20001100

00016314 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
   16314:	b590      	push	{r4, r7, lr}
   16316:	b085      	sub	sp, #20
   16318:	af00      	add	r7, sp, #0
   1631a:	0004      	movs	r4, r0
   1631c:	0008      	movs	r0, r1
   1631e:	0011      	movs	r1, r2
   16320:	1dfb      	adds	r3, r7, #7
   16322:	1c22      	adds	r2, r4, #0
   16324:	701a      	strb	r2, [r3, #0]
   16326:	1dbb      	adds	r3, r7, #6
   16328:	1c02      	adds	r2, r0, #0
   1632a:	701a      	strb	r2, [r3, #0]
   1632c:	1d7b      	adds	r3, r7, #5
   1632e:	1c0a      	adds	r2, r1, #0
   16330:	701a      	strb	r2, [r3, #0]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
   16332:	1dbb      	adds	r3, r7, #6
   16334:	781b      	ldrb	r3, [r3, #0]
   16336:	2b00      	cmp	r3, #0
   16338:	d109      	bne.n	1634e <Radio_WriteMode+0x3a>
   1633a:	1dfb      	adds	r3, r7, #7
   1633c:	781b      	ldrb	r3, [r3, #0]
   1633e:	2b06      	cmp	r3, #6
   16340:	d100      	bne.n	16344 <Radio_WriteMode+0x30>
   16342:	e0c4      	b.n	164ce <Radio_WriteMode+0x1ba>
        ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
   16344:	1dfb      	adds	r3, r7, #7
   16346:	781b      	ldrb	r3, [r3, #0]
   16348:	2b07      	cmp	r3, #7
   1634a:	d100      	bne.n	1634e <Radio_WriteMode+0x3a>
   1634c:	e0bf      	b.n	164ce <Radio_WriteMode+0x1ba>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
   1634e:	1dfb      	adds	r3, r7, #7
   16350:	1dfa      	adds	r2, r7, #7
   16352:	7812      	ldrb	r2, [r2, #0]
   16354:	2107      	movs	r1, #7
   16356:	400a      	ands	r2, r1
   16358:	701a      	strb	r2, [r3, #0]
    newModulation &= 0x01;
   1635a:	1dbb      	adds	r3, r7, #6
   1635c:	1dba      	adds	r2, r7, #6
   1635e:	7812      	ldrb	r2, [r2, #0]
   16360:	2101      	movs	r1, #1
   16362:	400a      	ands	r2, r1
   16364:	701a      	strb	r2, [r3, #0]

    opMode = RADIO_RegisterRead(REG_OPMODE);
   16366:	230f      	movs	r3, #15
   16368:	18fc      	adds	r4, r7, r3
   1636a:	2001      	movs	r0, #1
   1636c:	4b5a      	ldr	r3, [pc, #360]	; (164d8 <Radio_WriteMode+0x1c4>)
   1636e:	4798      	blx	r3
   16370:	0003      	movs	r3, r0
   16372:	7023      	strb	r3, [r4, #0]

    if ((opMode & 0x80) != 0)
   16374:	230f      	movs	r3, #15
   16376:	18fb      	adds	r3, r7, r3
   16378:	781b      	ldrb	r3, [r3, #0]
   1637a:	b25b      	sxtb	r3, r3
   1637c:	2b00      	cmp	r3, #0
   1637e:	da04      	bge.n	1638a <Radio_WriteMode+0x76>
    {
        currentModulation = MODULATION_LORA;
   16380:	230d      	movs	r3, #13
   16382:	18fb      	adds	r3, r7, r3
   16384:	2201      	movs	r2, #1
   16386:	701a      	strb	r2, [r3, #0]
   16388:	e003      	b.n	16392 <Radio_WriteMode+0x7e>
    }
    else
    {
        currentModulation = MODULATION_FSK;
   1638a:	230d      	movs	r3, #13
   1638c:	18fb      	adds	r3, r7, r3
   1638e:	2200      	movs	r2, #0
   16390:	701a      	strb	r2, [r3, #0]
    }

    currentMode = opMode & 0x07;
   16392:	230c      	movs	r3, #12
   16394:	18fb      	adds	r3, r7, r3
   16396:	220f      	movs	r2, #15
   16398:	18ba      	adds	r2, r7, r2
   1639a:	7812      	ldrb	r2, [r2, #0]
   1639c:	2107      	movs	r1, #7
   1639e:	400a      	ands	r2, r1
   163a0:	701a      	strb	r2, [r3, #0]

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
   163a2:	1dba      	adds	r2, r7, #6
   163a4:	230d      	movs	r3, #13
   163a6:	18fb      	adds	r3, r7, r3
   163a8:	7812      	ldrb	r2, [r2, #0]
   163aa:	781b      	ldrb	r3, [r3, #0]
   163ac:	429a      	cmp	r2, r3
   163ae:	d034      	beq.n	1641a <Radio_WriteMode+0x106>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
   163b0:	230c      	movs	r3, #12
   163b2:	18fb      	adds	r3, r7, r3
   163b4:	781b      	ldrb	r3, [r3, #0]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d00d      	beq.n	163d6 <Radio_WriteMode+0xc2>
        {
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
   163ba:	230f      	movs	r3, #15
   163bc:	18fb      	adds	r3, r7, r3
   163be:	781b      	ldrb	r3, [r3, #0]
   163c0:	2207      	movs	r2, #7
   163c2:	4393      	bics	r3, r2
   163c4:	b2db      	uxtb	r3, r3
   163c6:	0019      	movs	r1, r3
   163c8:	2001      	movs	r0, #1
   163ca:	4b44      	ldr	r3, [pc, #272]	; (164dc <Radio_WriteMode+0x1c8>)
   163cc:	4798      	blx	r3
            currentMode = MODE_SLEEP;
   163ce:	230c      	movs	r3, #12
   163d0:	18fb      	adds	r3, r7, r3
   163d2:	2200      	movs	r2, #0
   163d4:	701a      	strb	r2, [r3, #0]
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
   163d6:	1dbb      	adds	r3, r7, #6
   163d8:	781b      	ldrb	r3, [r3, #0]
   163da:	2b00      	cmp	r3, #0
   163dc:	d108      	bne.n	163f0 <Radio_WriteMode+0xdc>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
   163de:	230f      	movs	r3, #15
   163e0:	18fb      	adds	r3, r7, r3
   163e2:	220f      	movs	r2, #15
   163e4:	18ba      	adds	r2, r7, r2
   163e6:	7812      	ldrb	r2, [r2, #0]
   163e8:	2178      	movs	r1, #120	; 0x78
   163ea:	400a      	ands	r2, r1
   163ec:	701a      	strb	r2, [r3, #0]
   163ee:	e00d      	b.n	1640c <Radio_WriteMode+0xf8>
        }
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
   163f0:	230f      	movs	r3, #15
   163f2:	18fb      	adds	r3, r7, r3
   163f4:	781b      	ldrb	r3, [r3, #0]
   163f6:	b25b      	sxtb	r3, r3
   163f8:	2278      	movs	r2, #120	; 0x78
   163fa:	4013      	ands	r3, r2
   163fc:	b25b      	sxtb	r3, r3
   163fe:	2280      	movs	r2, #128	; 0x80
   16400:	4252      	negs	r2, r2
   16402:	4313      	orrs	r3, r2
   16404:	b25a      	sxtb	r2, r3
   16406:	230f      	movs	r3, #15
   16408:	18fb      	adds	r3, r7, r3
   1640a:	701a      	strb	r2, [r3, #0]
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   1640c:	230f      	movs	r3, #15
   1640e:	18fb      	adds	r3, r7, r3
   16410:	781b      	ldrb	r3, [r3, #0]
   16412:	0019      	movs	r1, r3
   16414:	2001      	movs	r0, #1
   16416:	4b31      	ldr	r3, [pc, #196]	; (164dc <Radio_WriteMode+0x1c8>)
   16418:	4798      	blx	r3

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
   1641a:	1dfa      	adds	r2, r7, #7
   1641c:	230c      	movs	r3, #12
   1641e:	18fb      	adds	r3, r7, r3
   16420:	7812      	ldrb	r2, [r2, #0]
   16422:	781b      	ldrb	r3, [r3, #0]
   16424:	429a      	cmp	r2, r3
   16426:	d053      	beq.n	164d0 <Radio_WriteMode+0x1bc>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
   16428:	1dfb      	adds	r3, r7, #7
   1642a:	781b      	ldrb	r3, [r3, #0]
   1642c:	2b00      	cmp	r3, #0
   1642e:	d026      	beq.n	1647e <Radio_WriteMode+0x16a>
   16430:	1d7b      	adds	r3, r7, #5
   16432:	781b      	ldrb	r3, [r3, #0]
   16434:	2b01      	cmp	r3, #1
   16436:	d122      	bne.n	1647e <Radio_WriteMode+0x16a>
        {
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
   16438:	230e      	movs	r3, #14
   1643a:	18fc      	adds	r4, r7, r3
   1643c:	2041      	movs	r0, #65	; 0x41
   1643e:	4b26      	ldr	r3, [pc, #152]	; (164d8 <Radio_WriteMode+0x1c4>)
   16440:	4798      	blx	r3
   16442:	0003      	movs	r3, r0
   16444:	7023      	strb	r3, [r4, #0]
            if (MODULATION_FSK == newModulation)
   16446:	1dbb      	adds	r3, r7, #6
   16448:	781b      	ldrb	r3, [r3, #0]
   1644a:	2b00      	cmp	r3, #0
   1644c:	d108      	bne.n	16460 <Radio_WriteMode+0x14c>
            {
                // FSK mode
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
   1644e:	230e      	movs	r3, #14
   16450:	18fb      	adds	r3, r7, r3
   16452:	220e      	movs	r2, #14
   16454:	18ba      	adds	r2, r7, r2
   16456:	7812      	ldrb	r2, [r2, #0]
   16458:	2130      	movs	r1, #48	; 0x30
   1645a:	430a      	orrs	r2, r1
   1645c:	701a      	strb	r2, [r3, #0]
   1645e:	e007      	b.n	16470 <Radio_WriteMode+0x15c>
            }
            else
            {
                // LoRa mode
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
   16460:	230e      	movs	r3, #14
   16462:	18fb      	adds	r3, r7, r3
   16464:	220e      	movs	r2, #14
   16466:	18ba      	adds	r2, r7, r2
   16468:	7812      	ldrb	r2, [r2, #0]
   1646a:	2130      	movs	r1, #48	; 0x30
   1646c:	438a      	bics	r2, r1
   1646e:	701a      	strb	r2, [r3, #0]
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
   16470:	230e      	movs	r3, #14
   16472:	18fb      	adds	r3, r7, r3
   16474:	781b      	ldrb	r3, [r3, #0]
   16476:	0019      	movs	r1, r3
   16478:	2041      	movs	r0, #65	; 0x41
   1647a:	4b18      	ldr	r3, [pc, #96]	; (164dc <Radio_WriteMode+0x1c8>)
   1647c:	4798      	blx	r3
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
   1647e:	230f      	movs	r3, #15
   16480:	18fb      	adds	r3, r7, r3
   16482:	220f      	movs	r2, #15
   16484:	18ba      	adds	r2, r7, r2
   16486:	7812      	ldrb	r2, [r2, #0]
   16488:	2107      	movs	r1, #7
   1648a:	438a      	bics	r2, r1
   1648c:	701a      	strb	r2, [r3, #0]
        opMode |= newMode;              // Set new mode bits
   1648e:	230f      	movs	r3, #15
   16490:	18fb      	adds	r3, r7, r3
   16492:	220f      	movs	r2, #15
   16494:	18b9      	adds	r1, r7, r2
   16496:	1dfa      	adds	r2, r7, #7
   16498:	7809      	ldrb	r1, [r1, #0]
   1649a:	7812      	ldrb	r2, [r2, #0]
   1649c:	430a      	orrs	r2, r1
   1649e:	701a      	strb	r2, [r3, #0]
        RADIO_RegisterWrite(REG_OPMODE, opMode);
   164a0:	230f      	movs	r3, #15
   164a2:	18fb      	adds	r3, r7, r3
   164a4:	781b      	ldrb	r3, [r3, #0]
   164a6:	0019      	movs	r1, r3
   164a8:	2001      	movs	r0, #1
   164aa:	4b0c      	ldr	r3, [pc, #48]	; (164dc <Radio_WriteMode+0x1c8>)
   164ac:	4798      	blx	r3

        // If required and possible, wait for switch to complete
        if (1 == blocking)
   164ae:	1d7b      	adds	r3, r7, #5
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	2b01      	cmp	r3, #1
   164b4:	d10c      	bne.n	164d0 <Radio_WriteMode+0x1bc>
        {
            if (MODE_SLEEP != newMode)
   164b6:	1dfb      	adds	r3, r7, #7
   164b8:	781b      	ldrb	r3, [r3, #0]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d003      	beq.n	164c6 <Radio_WriteMode+0x1b2>
            {
               // while (HAL_DIO5PinValue() == 0);
			   /* Wait for Mode change to happen */
			   delay_ms(1);
   164be:	2001      	movs	r0, #1
   164c0:	4b07      	ldr	r3, [pc, #28]	; (164e0 <Radio_WriteMode+0x1cc>)
   164c2:	4798      	blx	r3
   164c4:	e004      	b.n	164d0 <Radio_WriteMode+0x1bc>
            }
            else
            {
                SystemBlockingWaitMs(1);
   164c6:	2001      	movs	r0, #1
   164c8:	4b06      	ldr	r3, [pc, #24]	; (164e4 <Radio_WriteMode+0x1d0>)
   164ca:	4798      	blx	r3
   164cc:	e000      	b.n	164d0 <Radio_WriteMode+0x1bc>
        return;
   164ce:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
#endif
}
   164d0:	46bd      	mov	sp, r7
   164d2:	b005      	add	sp, #20
   164d4:	bd90      	pop	{r4, r7, pc}
   164d6:	46c0      	nop			; (mov r8, r8)
   164d8:	00006e6d 	.word	0x00006e6d
   164dc:	00006e21 	.word	0x00006e21
   164e0:	000001d1 	.word	0x000001d1
   164e4:	000076b1 	.word	0x000076b1

000164e8 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
   164e8:	b580      	push	{r7, lr}
   164ea:	b082      	sub	sp, #8
   164ec:	af00      	add	r7, sp, #0
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
   164ee:	2012      	movs	r0, #18
   164f0:	4b11      	ldr	r3, [pc, #68]	; (16538 <RADIO_FHSSChangeChannel+0x50>)
   164f2:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
   164f4:	4b11      	ldr	r3, [pc, #68]	; (1653c <RADIO_FHSSChangeChannel+0x54>)
   164f6:	8adb      	ldrh	r3, [r3, #22]
   164f8:	2b00      	cmp	r3, #0
   164fa:	d014      	beq.n	16526 <RADIO_FHSSChangeChannel+0x3e>
    {
        if ((radioConfiguration.radioCallback) &&
   164fc:	4b0f      	ldr	r3, [pc, #60]	; (1653c <RADIO_FHSSChangeChannel+0x54>)
   164fe:	691b      	ldr	r3, [r3, #16]
   16500:	2b00      	cmp	r3, #0
   16502:	d010      	beq.n	16526 <RADIO_FHSSChangeChannel+0x3e>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
   16504:	4b0e      	ldr	r3, [pc, #56]	; (16540 <RADIO_FHSSChangeChannel+0x58>)
   16506:	781b      	ldrb	r3, [r3, #0]
   16508:	069b      	lsls	r3, r3, #26
   1650a:	0fdb      	lsrs	r3, r3, #31
   1650c:	b2db      	uxtb	r3, r3
        if ((radioConfiguration.radioCallback) &&
   1650e:	2b01      	cmp	r3, #1
   16510:	d109      	bne.n	16526 <RADIO_FHSSChangeChannel+0x3e>
        {
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
   16512:	4b0a      	ldr	r3, [pc, #40]	; (1653c <RADIO_FHSSChangeChannel+0x54>)
   16514:	691b      	ldr	r3, [r3, #16]
   16516:	1d3a      	adds	r2, r7, #4
   16518:	0011      	movs	r1, r2
   1651a:	2020      	movs	r0, #32
   1651c:	4798      	blx	r3
            Radio_WriteFrequency(freq);
   1651e:	687b      	ldr	r3, [r7, #4]
   16520:	0018      	movs	r0, r3
   16522:	4b08      	ldr	r3, [pc, #32]	; (16544 <RADIO_FHSSChangeChannel+0x5c>)
   16524:	4798      	blx	r3
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
   16526:	2102      	movs	r1, #2
   16528:	2012      	movs	r0, #18
   1652a:	4b07      	ldr	r3, [pc, #28]	; (16548 <RADIO_FHSSChangeChannel+0x60>)
   1652c:	4798      	blx	r3
}
   1652e:	46c0      	nop			; (mov r8, r8)
   16530:	46bd      	mov	sp, r7
   16532:	b002      	add	sp, #8
   16534:	bd80      	pop	{r7, pc}
   16536:	46c0      	nop			; (mov r8, r8)
   16538:	00006e6d 	.word	0x00006e6d
   1653c:	20001980 	.word	0x20001980
   16540:	20002046 	.word	0x20002046
   16544:	0001f835 	.word	0x0001f835
   16548:	00006e21 	.word	0x00006e21

0001654c <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
   1654c:	b580      	push	{r7, lr}
   1654e:	b082      	sub	sp, #8
   16550:	af00      	add	r7, sp, #0
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
   16552:	1d3b      	adds	r3, r7, #4
   16554:	2200      	movs	r2, #0
   16556:	801a      	strh	r2, [r3, #0]
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
   16558:	2000      	movs	r0, #0
   1655a:	4b27      	ldr	r3, [pc, #156]	; (165f8 <RADIO_ReadRandom+0xac>)
   1655c:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
   1655e:	4b27      	ldr	r3, [pc, #156]	; (165fc <RADIO_ReadRandom+0xb0>)
   16560:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
   16562:	2201      	movs	r2, #1
   16564:	2101      	movs	r1, #1
   16566:	2000      	movs	r0, #0
   16568:	4b25      	ldr	r3, [pc, #148]	; (16600 <RADIO_ReadRandom+0xb4>)
   1656a:	4798      	blx	r3
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
   1656c:	21ff      	movs	r1, #255	; 0xff
   1656e:	2011      	movs	r0, #17
   16570:	4b24      	ldr	r3, [pc, #144]	; (16604 <RADIO_ReadRandom+0xb8>)
   16572:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
   16574:	2201      	movs	r2, #1
   16576:	2101      	movs	r1, #1
   16578:	2005      	movs	r0, #5
   1657a:	4b21      	ldr	r3, [pc, #132]	; (16600 <RADIO_ReadRandom+0xb4>)
   1657c:	4798      	blx	r3
    for (i = 0; i < 16; i++)
   1657e:	1dfb      	adds	r3, r7, #7
   16580:	2200      	movs	r2, #0
   16582:	701a      	strb	r2, [r3, #0]
   16584:	e01b      	b.n	165be <RADIO_ReadRandom+0x72>
    {
        SystemBlockingWaitMs(1);
   16586:	2001      	movs	r0, #1
   16588:	4b1f      	ldr	r3, [pc, #124]	; (16608 <RADIO_ReadRandom+0xbc>)
   1658a:	4798      	blx	r3
        retVal <<= SHIFT1;
   1658c:	1d3a      	adds	r2, r7, #4
   1658e:	1d3b      	adds	r3, r7, #4
   16590:	881b      	ldrh	r3, [r3, #0]
   16592:	18db      	adds	r3, r3, r3
   16594:	8013      	strh	r3, [r2, #0]
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
   16596:	202c      	movs	r0, #44	; 0x2c
   16598:	4b1c      	ldr	r3, [pc, #112]	; (1660c <RADIO_ReadRandom+0xc0>)
   1659a:	4798      	blx	r3
   1659c:	0003      	movs	r3, r0
   1659e:	001a      	movs	r2, r3
   165a0:	2301      	movs	r3, #1
   165a2:	4013      	ands	r3, r2
   165a4:	b21a      	sxth	r2, r3
   165a6:	1d3b      	adds	r3, r7, #4
   165a8:	2100      	movs	r1, #0
   165aa:	5e5b      	ldrsh	r3, [r3, r1]
   165ac:	4313      	orrs	r3, r2
   165ae:	b21a      	sxth	r2, r3
   165b0:	1d3b      	adds	r3, r7, #4
   165b2:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < 16; i++)
   165b4:	1dfb      	adds	r3, r7, #7
   165b6:	781a      	ldrb	r2, [r3, #0]
   165b8:	1dfb      	adds	r3, r7, #7
   165ba:	3201      	adds	r2, #1
   165bc:	701a      	strb	r2, [r3, #0]
   165be:	1dfb      	adds	r3, r7, #7
   165c0:	781b      	ldrb	r3, [r3, #0]
   165c2:	2b0f      	cmp	r3, #15
   165c4:	d9df      	bls.n	16586 <RADIO_ReadRandom+0x3a>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
   165c6:	2000      	movs	r0, #0
   165c8:	4b11      	ldr	r3, [pc, #68]	; (16610 <RADIO_ReadRandom+0xc4>)
   165ca:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
   165cc:	2201      	movs	r2, #1
   165ce:	2101      	movs	r1, #1
   165d0:	2000      	movs	r0, #0
   165d2:	4b0b      	ldr	r3, [pc, #44]	; (16600 <RADIO_ReadRandom+0xb4>)
   165d4:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
   165d6:	21ff      	movs	r1, #255	; 0xff
   165d8:	2012      	movs	r0, #18
   165da:	4b0a      	ldr	r3, [pc, #40]	; (16604 <RADIO_ReadRandom+0xb8>)
   165dc:	4798      	blx	r3
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
   165de:	2100      	movs	r1, #0
   165e0:	2011      	movs	r0, #17
   165e2:	4b08      	ldr	r3, [pc, #32]	; (16604 <RADIO_ReadRandom+0xb8>)
   165e4:	4798      	blx	r3
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
   165e6:	4b0b      	ldr	r3, [pc, #44]	; (16614 <RADIO_ReadRandom+0xc8>)
   165e8:	4798      	blx	r3
	
    return retVal;
   165ea:	1d3b      	adds	r3, r7, #4
   165ec:	881b      	ldrh	r3, [r3, #0]
}
   165ee:	0018      	movs	r0, r3
   165f0:	46bd      	mov	sp, r7
   165f2:	b002      	add	sp, #8
   165f4:	bd80      	pop	{r7, pc}
   165f6:	46c0      	nop			; (mov r8, r8)
   165f8:	000200f1 	.word	0x000200f1
   165fc:	000205a1 	.word	0x000205a1
   16600:	00016315 	.word	0x00016315
   16604:	00006e21 	.word	0x00006e21
   16608:	000076b1 	.word	0x000076b1
   1660c:	00006e6d 	.word	0x00006e6d
   16610:	00020219 	.word	0x00020219
   16614:	00020631 	.word	0x00020631

00016618 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
   16618:	b580      	push	{r7, lr}
   1661a:	b082      	sub	sp, #8
   1661c:	af00      	add	r7, sp, #0
   1661e:	6078      	str	r0, [r7, #4]
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
   16620:	2011      	movs	r0, #17
   16622:	4b08      	ldr	r3, [pc, #32]	; (16644 <Radio_ReadFSKRssi+0x2c>)
   16624:	4798      	blx	r3
   16626:	0003      	movs	r3, r0
   16628:	085b      	lsrs	r3, r3, #1
   1662a:	b2db      	uxtb	r3, r3
   1662c:	b29b      	uxth	r3, r3
   1662e:	425b      	negs	r3, r3
   16630:	b29b      	uxth	r3, r3
   16632:	b21a      	sxth	r2, r3
   16634:	687b      	ldr	r3, [r7, #4]
   16636:	801a      	strh	r2, [r3, #0]
#endif // UT
	
	return ERR_NONE;
   16638:	2300      	movs	r3, #0
}
   1663a:	0018      	movs	r0, r3
   1663c:	46bd      	mov	sp, r7
   1663e:	b002      	add	sp, #8
   16640:	bd80      	pop	{r7, pc}
   16642:	46c0      	nop			; (mov r8, r8)
   16644:	00006e6d 	.word	0x00006e6d

00016648 <cpu_irq_save>:
{
   16648:	b580      	push	{r7, lr}
   1664a:	b082      	sub	sp, #8
   1664c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1664e:	f3ef 8310 	mrs	r3, PRIMASK
   16652:	607b      	str	r3, [r7, #4]
  return(result);
   16654:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
   16656:	425a      	negs	r2, r3
   16658:	4153      	adcs	r3, r2
   1665a:	b2db      	uxtb	r3, r3
   1665c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   1665e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   16660:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   16664:	4b03      	ldr	r3, [pc, #12]	; (16674 <cpu_irq_save+0x2c>)
   16666:	2200      	movs	r2, #0
   16668:	701a      	strb	r2, [r3, #0]
	return flags;
   1666a:	683b      	ldr	r3, [r7, #0]
}
   1666c:	0018      	movs	r0, r3
   1666e:	46bd      	mov	sp, r7
   16670:	b002      	add	sp, #8
   16672:	bd80      	pop	{r7, pc}
   16674:	20000008 	.word	0x20000008

00016678 <cpu_irq_is_enabled_flags>:
{
   16678:	b580      	push	{r7, lr}
   1667a:	b082      	sub	sp, #8
   1667c:	af00      	add	r7, sp, #0
   1667e:	6078      	str	r0, [r7, #4]
	return (flags);
   16680:	687b      	ldr	r3, [r7, #4]
   16682:	1e5a      	subs	r2, r3, #1
   16684:	4193      	sbcs	r3, r2
   16686:	b2db      	uxtb	r3, r3
}
   16688:	0018      	movs	r0, r3
   1668a:	46bd      	mov	sp, r7
   1668c:	b002      	add	sp, #8
   1668e:	bd80      	pop	{r7, pc}

00016690 <cpu_irq_restore>:
{
   16690:	b580      	push	{r7, lr}
   16692:	b082      	sub	sp, #8
   16694:	af00      	add	r7, sp, #0
   16696:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   16698:	687b      	ldr	r3, [r7, #4]
   1669a:	0018      	movs	r0, r3
   1669c:	4b06      	ldr	r3, [pc, #24]	; (166b8 <cpu_irq_restore+0x28>)
   1669e:	4798      	blx	r3
   166a0:	1e03      	subs	r3, r0, #0
   166a2:	d005      	beq.n	166b0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
   166a4:	4b05      	ldr	r3, [pc, #20]	; (166bc <cpu_irq_restore+0x2c>)
   166a6:	2201      	movs	r2, #1
   166a8:	701a      	strb	r2, [r3, #0]
   166aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   166ae:	b662      	cpsie	i
}
   166b0:	46c0      	nop			; (mov r8, r8)
   166b2:	46bd      	mov	sp, r7
   166b4:	b002      	add	sp, #8
   166b6:	bd80      	pop	{r7, pc}
   166b8:	00016679 	.word	0x00016679
   166bc:	20000008 	.word	0x20000008

000166c0 <system_interrupt_enable>:
{
   166c0:	b580      	push	{r7, lr}
   166c2:	b082      	sub	sp, #8
   166c4:	af00      	add	r7, sp, #0
   166c6:	0002      	movs	r2, r0
   166c8:	1dfb      	adds	r3, r7, #7
   166ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   166cc:	4b06      	ldr	r3, [pc, #24]	; (166e8 <system_interrupt_enable+0x28>)
   166ce:	1dfa      	adds	r2, r7, #7
   166d0:	7812      	ldrb	r2, [r2, #0]
   166d2:	0011      	movs	r1, r2
   166d4:	221f      	movs	r2, #31
   166d6:	400a      	ands	r2, r1
   166d8:	2101      	movs	r1, #1
   166da:	4091      	lsls	r1, r2
   166dc:	000a      	movs	r2, r1
   166de:	601a      	str	r2, [r3, #0]
}
   166e0:	46c0      	nop			; (mov r8, r8)
   166e2:	46bd      	mov	sp, r7
   166e4:	b002      	add	sp, #8
   166e6:	bd80      	pop	{r7, pc}
   166e8:	e000e100 	.word	0xe000e100

000166ec <tc_is_syncing>:
{
   166ec:	b580      	push	{r7, lr}
   166ee:	b084      	sub	sp, #16
   166f0:	af00      	add	r7, sp, #0
   166f2:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   166f4:	687b      	ldr	r3, [r7, #4]
   166f6:	681b      	ldr	r3, [r3, #0]
   166f8:	60fb      	str	r3, [r7, #12]
	return (tc_module->SYNCBUSY.reg);
   166fa:	68fb      	ldr	r3, [r7, #12]
   166fc:	691b      	ldr	r3, [r3, #16]
   166fe:	1e5a      	subs	r2, r3, #1
   16700:	4193      	sbcs	r3, r2
   16702:	b2db      	uxtb	r3, r3
}
   16704:	0018      	movs	r0, r3
   16706:	46bd      	mov	sp, r7
   16708:	b004      	add	sp, #16
   1670a:	bd80      	pop	{r7, pc}

0001670c <tc_get_config_defaults>:
{
   1670c:	b580      	push	{r7, lr}
   1670e:	b082      	sub	sp, #8
   16710:	af00      	add	r7, sp, #0
   16712:	6078      	str	r0, [r7, #4]
	config->clock_source               = GCLK_GENERATOR_0;
   16714:	687b      	ldr	r3, [r7, #4]
   16716:	2200      	movs	r2, #0
   16718:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   1671a:	687b      	ldr	r3, [r7, #4]
   1671c:	2200      	movs	r2, #0
   1671e:	70da      	strb	r2, [r3, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   16720:	687b      	ldr	r3, [r7, #4]
   16722:	2200      	movs	r2, #0
   16724:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   16726:	687b      	ldr	r3, [r7, #4]
   16728:	2200      	movs	r2, #0
   1672a:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   1672c:	687b      	ldr	r3, [r7, #4]
   1672e:	2200      	movs	r2, #0
   16730:	71da      	strb	r2, [r3, #7]
	config->run_in_standby             = false;
   16732:	687b      	ldr	r3, [r7, #4]
   16734:	2200      	movs	r2, #0
   16736:	705a      	strb	r2, [r3, #1]
	config->on_demand                  = false;
   16738:	687b      	ldr	r3, [r7, #4]
   1673a:	2200      	movs	r2, #0
   1673c:	709a      	strb	r2, [r3, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   1673e:	687b      	ldr	r3, [r7, #4]
   16740:	2200      	movs	r2, #0
   16742:	721a      	strb	r2, [r3, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16744:	687b      	ldr	r3, [r7, #4]
   16746:	2200      	movs	r2, #0
   16748:	725a      	strb	r2, [r3, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   1674a:	687b      	ldr	r3, [r7, #4]
   1674c:	2200      	movs	r2, #0
   1674e:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   16750:	687b      	ldr	r3, [r7, #4]
   16752:	2200      	movs	r2, #0
   16754:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   16756:	687b      	ldr	r3, [r7, #4]
   16758:	2200      	movs	r2, #0
   1675a:	731a      	strb	r2, [r3, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
   1675c:	687b      	ldr	r3, [r7, #4]
   1675e:	2200      	movs	r2, #0
   16760:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
   16762:	687b      	ldr	r3, [r7, #4]
   16764:	2200      	movs	r2, #0
   16766:	735a      	strb	r2, [r3, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   16768:	687b      	ldr	r3, [r7, #4]
   1676a:	2200      	movs	r2, #0
   1676c:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   1676e:	687b      	ldr	r3, [r7, #4]
   16770:	2200      	movs	r2, #0
   16772:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   16774:	687b      	ldr	r3, [r7, #4]
   16776:	2200      	movs	r2, #0
   16778:	619a      	str	r2, [r3, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   1677a:	687b      	ldr	r3, [r7, #4]
   1677c:	2200      	movs	r2, #0
   1677e:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16780:	687b      	ldr	r3, [r7, #4]
   16782:	2200      	movs	r2, #0
   16784:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   16786:	687b      	ldr	r3, [r7, #4]
   16788:	2200      	movs	r2, #0
   1678a:	625a      	str	r2, [r3, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
   1678c:	687b      	ldr	r3, [r7, #4]
   1678e:	2200      	movs	r2, #0
   16790:	851a      	strh	r2, [r3, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16792:	687b      	ldr	r3, [r7, #4]
   16794:	2200      	movs	r2, #0
   16796:	855a      	strh	r2, [r3, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   16798:	687b      	ldr	r3, [r7, #4]
   1679a:	2200      	movs	r2, #0
   1679c:	859a      	strh	r2, [r3, #44]	; 0x2c
	config->double_buffering_enabled = false;
   1679e:	687b      	ldr	r3, [r7, #4]
   167a0:	2234      	movs	r2, #52	; 0x34
   167a2:	2100      	movs	r1, #0
   167a4:	5499      	strb	r1, [r3, r2]
}
   167a6:	46c0      	nop			; (mov r8, r8)
   167a8:	46bd      	mov	sp, r7
   167aa:	b002      	add	sp, #8
   167ac:	bd80      	pop	{r7, pc}
	...

000167b0 <tc_enable>:
{
   167b0:	b580      	push	{r7, lr}
   167b2:	b084      	sub	sp, #16
   167b4:	af00      	add	r7, sp, #0
   167b6:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   167b8:	687b      	ldr	r3, [r7, #4]
   167ba:	681b      	ldr	r3, [r3, #0]
   167bc:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   167be:	46c0      	nop			; (mov r8, r8)
   167c0:	687b      	ldr	r3, [r7, #4]
   167c2:	0018      	movs	r0, r3
   167c4:	4b06      	ldr	r3, [pc, #24]	; (167e0 <tc_enable+0x30>)
   167c6:	4798      	blx	r3
   167c8:	1e03      	subs	r3, r0, #0
   167ca:	d1f9      	bne.n	167c0 <tc_enable+0x10>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   167cc:	68fb      	ldr	r3, [r7, #12]
   167ce:	681b      	ldr	r3, [r3, #0]
   167d0:	2202      	movs	r2, #2
   167d2:	431a      	orrs	r2, r3
   167d4:	68fb      	ldr	r3, [r7, #12]
   167d6:	601a      	str	r2, [r3, #0]
}
   167d8:	46c0      	nop			; (mov r8, r8)
   167da:	46bd      	mov	sp, r7
   167dc:	b004      	add	sp, #16
   167de:	bd80      	pop	{r7, pc}
   167e0:	000166ed 	.word	0x000166ed

000167e4 <tc_disable>:
{
   167e4:	b580      	push	{r7, lr}
   167e6:	b084      	sub	sp, #16
   167e8:	af00      	add	r7, sp, #0
   167ea:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   167ec:	687b      	ldr	r3, [r7, #4]
   167ee:	681b      	ldr	r3, [r3, #0]
   167f0:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
   167f2:	46c0      	nop			; (mov r8, r8)
   167f4:	687b      	ldr	r3, [r7, #4]
   167f6:	0018      	movs	r0, r3
   167f8:	4b0a      	ldr	r3, [pc, #40]	; (16824 <tc_disable+0x40>)
   167fa:	4798      	blx	r3
   167fc:	1e03      	subs	r3, r0, #0
   167fe:	d1f9      	bne.n	167f4 <tc_disable+0x10>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
   16800:	68fb      	ldr	r3, [r7, #12]
   16802:	2233      	movs	r2, #51	; 0x33
   16804:	721a      	strb	r2, [r3, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
   16806:	68fb      	ldr	r3, [r7, #12]
   16808:	2233      	movs	r2, #51	; 0x33
   1680a:	729a      	strb	r2, [r3, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
   1680c:	68fb      	ldr	r3, [r7, #12]
   1680e:	681b      	ldr	r3, [r3, #0]
   16810:	2202      	movs	r2, #2
   16812:	4393      	bics	r3, r2
   16814:	001a      	movs	r2, r3
   16816:	68fb      	ldr	r3, [r7, #12]
   16818:	601a      	str	r2, [r3, #0]
}
   1681a:	46c0      	nop			; (mov r8, r8)
   1681c:	46bd      	mov	sp, r7
   1681e:	b004      	add	sp, #16
   16820:	bd80      	pop	{r7, pc}
   16822:	46c0      	nop			; (mov r8, r8)
   16824:	000166ed 	.word	0x000166ed

00016828 <tc_clear_status>:
 * \param[in] status_flags  Bitmask of \c TC_STATUS_* flags to clear
 */
static inline void tc_clear_status(
		struct tc_module *const module_inst,
		const uint32_t status_flags)
{
   16828:	b580      	push	{r7, lr}
   1682a:	b084      	sub	sp, #16
   1682c:	af00      	add	r7, sp, #0
   1682e:	6078      	str	r0, [r7, #4]
   16830:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16832:	687b      	ldr	r3, [r7, #4]
   16834:	681b      	ldr	r3, [r3, #0]
   16836:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
   16838:	2300      	movs	r3, #0
   1683a:	60fb      	str	r3, [r7, #12]

	/* Check for TC channel 0 match */
	if (status_flags & TC_STATUS_CHANNEL_0_MATCH) {
   1683c:	683b      	ldr	r3, [r7, #0]
   1683e:	2201      	movs	r2, #1
   16840:	4013      	ands	r3, r2
   16842:	d003      	beq.n	1684c <tc_clear_status+0x24>
		int_flags |= TC_INTFLAG_MC(1);
   16844:	68fb      	ldr	r3, [r7, #12]
   16846:	2210      	movs	r2, #16
   16848:	4313      	orrs	r3, r2
   1684a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC channel 1 match */
	if (status_flags & TC_STATUS_CHANNEL_1_MATCH) {
   1684c:	683b      	ldr	r3, [r7, #0]
   1684e:	2202      	movs	r2, #2
   16850:	4013      	ands	r3, r2
   16852:	d003      	beq.n	1685c <tc_clear_status+0x34>
		int_flags |= TC_INTFLAG_MC(2);
   16854:	68fb      	ldr	r3, [r7, #12]
   16856:	2220      	movs	r2, #32
   16858:	4313      	orrs	r3, r2
   1685a:	60fb      	str	r3, [r7, #12]
		int_flags |= TC_INTFLAG_SYNCRDY;
	}
#endif

	/* Check for TC capture overflow */
	if (status_flags & TC_STATUS_CAPTURE_OVERFLOW) {
   1685c:	683b      	ldr	r3, [r7, #0]
   1685e:	2208      	movs	r2, #8
   16860:	4013      	ands	r3, r2
   16862:	d003      	beq.n	1686c <tc_clear_status+0x44>
		int_flags |= TC_INTFLAG_ERR;
   16864:	68fb      	ldr	r3, [r7, #12]
   16866:	2202      	movs	r2, #2
   16868:	4313      	orrs	r3, r2
   1686a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for TC count overflow */
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
   1686c:	683b      	ldr	r3, [r7, #0]
   1686e:	2210      	movs	r2, #16
   16870:	4013      	ands	r3, r2
   16872:	d003      	beq.n	1687c <tc_clear_status+0x54>
		int_flags |= TC_INTFLAG_OVF;
   16874:	68fb      	ldr	r3, [r7, #12]
   16876:	2201      	movs	r2, #1
   16878:	4313      	orrs	r3, r2
   1687a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
   1687c:	68fb      	ldr	r3, [r7, #12]
   1687e:	b2da      	uxtb	r2, r3
   16880:	68bb      	ldr	r3, [r7, #8]
   16882:	729a      	strb	r2, [r3, #10]
}
   16884:	46c0      	nop			; (mov r8, r8)
   16886:	46bd      	mov	sp, r7
   16888:	b004      	add	sp, #16
   1688a:	bd80      	pop	{r7, pc}

0001688c <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   1688c:	b580      	push	{r7, lr}
   1688e:	b082      	sub	sp, #8
   16890:	af00      	add	r7, sp, #0
   16892:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16894:	4a04      	ldr	r2, [pc, #16]	; (168a8 <_tc_interrupt_get_interrupt_vector+0x1c>)
   16896:	687b      	ldr	r3, [r7, #4]
   16898:	18d3      	adds	r3, r2, r3
   1689a:	781b      	ldrb	r3, [r3, #0]
   1689c:	b25b      	sxtb	r3, r3
}
   1689e:	0018      	movs	r0, r3
   168a0:	46bd      	mov	sp, r7
   168a2:	b002      	add	sp, #8
   168a4:	bd80      	pop	{r7, pc}
   168a6:	46c0      	nop			; (mov r8, r8)
   168a8:	20000024 	.word	0x20000024

000168ac <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
   168ac:	b580      	push	{r7, lr}
   168ae:	b082      	sub	sp, #8
   168b0:	af00      	add	r7, sp, #0
   168b2:	6078      	str	r0, [r7, #4]
   168b4:	000a      	movs	r2, r1
   168b6:	1cfb      	adds	r3, r7, #3
   168b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   168ba:	687b      	ldr	r3, [r7, #4]
   168bc:	681b      	ldr	r3, [r3, #0]
   168be:	0018      	movs	r0, r3
   168c0:	4b22      	ldr	r3, [pc, #136]	; (1694c <tc_enable_callback+0xa0>)
   168c2:	4798      	blx	r3
   168c4:	0003      	movs	r3, r0
   168c6:	0018      	movs	r0, r3
   168c8:	4b21      	ldr	r3, [pc, #132]	; (16950 <tc_enable_callback+0xa4>)
   168ca:	4798      	blx	r3
   168cc:	0003      	movs	r3, r0
   168ce:	0018      	movs	r0, r3
   168d0:	4b20      	ldr	r3, [pc, #128]	; (16954 <tc_enable_callback+0xa8>)
   168d2:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   168d4:	1cfb      	adds	r3, r7, #3
   168d6:	781b      	ldrb	r3, [r3, #0]
   168d8:	2b02      	cmp	r3, #2
   168da:	d10b      	bne.n	168f4 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
   168dc:	687b      	ldr	r3, [r7, #4]
   168de:	7e5b      	ldrb	r3, [r3, #25]
   168e0:	2210      	movs	r2, #16
   168e2:	4313      	orrs	r3, r2
   168e4:	b2da      	uxtb	r2, r3
   168e6:	687b      	ldr	r3, [r7, #4]
   168e8:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
   168ea:	687b      	ldr	r3, [r7, #4]
   168ec:	681b      	ldr	r3, [r3, #0]
   168ee:	2210      	movs	r2, #16
   168f0:	725a      	strb	r2, [r3, #9]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
   168f2:	e026      	b.n	16942 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   168f4:	1cfb      	adds	r3, r7, #3
   168f6:	781b      	ldrb	r3, [r3, #0]
   168f8:	2b03      	cmp	r3, #3
   168fa:	d10b      	bne.n	16914 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
   168fc:	687b      	ldr	r3, [r7, #4]
   168fe:	7e5b      	ldrb	r3, [r3, #25]
   16900:	2220      	movs	r2, #32
   16902:	4313      	orrs	r3, r2
   16904:	b2da      	uxtb	r2, r3
   16906:	687b      	ldr	r3, [r7, #4]
   16908:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
   1690a:	687b      	ldr	r3, [r7, #4]
   1690c:	681b      	ldr	r3, [r3, #0]
   1690e:	2220      	movs	r2, #32
   16910:	725a      	strb	r2, [r3, #9]
}
   16912:	e016      	b.n	16942 <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
   16914:	687b      	ldr	r3, [r7, #4]
   16916:	7e5b      	ldrb	r3, [r3, #25]
   16918:	b25a      	sxtb	r2, r3
   1691a:	1cfb      	adds	r3, r7, #3
   1691c:	781b      	ldrb	r3, [r3, #0]
   1691e:	2101      	movs	r1, #1
   16920:	4099      	lsls	r1, r3
   16922:	000b      	movs	r3, r1
   16924:	b25b      	sxtb	r3, r3
   16926:	4313      	orrs	r3, r2
   16928:	b25b      	sxtb	r3, r3
   1692a:	b2da      	uxtb	r2, r3
   1692c:	687b      	ldr	r3, [r7, #4]
   1692e:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16930:	687b      	ldr	r3, [r7, #4]
   16932:	681b      	ldr	r3, [r3, #0]
   16934:	1cfa      	adds	r2, r7, #3
   16936:	7812      	ldrb	r2, [r2, #0]
   16938:	2101      	movs	r1, #1
   1693a:	4091      	lsls	r1, r2
   1693c:	000a      	movs	r2, r1
   1693e:	b2d2      	uxtb	r2, r2
   16940:	725a      	strb	r2, [r3, #9]
}
   16942:	46c0      	nop			; (mov r8, r8)
   16944:	46bd      	mov	sp, r7
   16946:	b002      	add	sp, #8
   16948:	bd80      	pop	{r7, pc}
   1694a:	46c0      	nop			; (mov r8, r8)
   1694c:	00005a99 	.word	0x00005a99
   16950:	0001688d 	.word	0x0001688d
   16954:	000166c1 	.word	0x000166c1

00016958 <tc_disable_callback>:
 * \param[in]     module        Pointer to TC software instance struct
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_disable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type){
   16958:	b580      	push	{r7, lr}
   1695a:	b082      	sub	sp, #8
   1695c:	af00      	add	r7, sp, #0
   1695e:	6078      	str	r0, [r7, #4]
   16960:	000a      	movs	r2, r1
   16962:	1cfb      	adds	r3, r7, #3
   16964:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   16966:	1cfb      	adds	r3, r7, #3
   16968:	781b      	ldrb	r3, [r3, #0]
   1696a:	2b02      	cmp	r3, #2
   1696c:	d10b      	bne.n	16986 <tc_disable_callback+0x2e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
   1696e:	687b      	ldr	r3, [r7, #4]
   16970:	681b      	ldr	r3, [r3, #0]
   16972:	2210      	movs	r2, #16
   16974:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
   16976:	687b      	ldr	r3, [r7, #4]
   16978:	7e5b      	ldrb	r3, [r3, #25]
   1697a:	2210      	movs	r2, #16
   1697c:	4393      	bics	r3, r2
   1697e:	b2da      	uxtb	r2, r3
   16980:	687b      	ldr	r3, [r7, #4]
   16982:	765a      	strb	r2, [r3, #25]
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
		module->enable_callback_mask &= ~(1 << callback_type);
	}
}
   16984:	e028      	b.n	169d8 <tc_disable_callback+0x80>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   16986:	1cfb      	adds	r3, r7, #3
   16988:	781b      	ldrb	r3, [r3, #0]
   1698a:	2b03      	cmp	r3, #3
   1698c:	d10b      	bne.n	169a6 <tc_disable_callback+0x4e>
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
   1698e:	687b      	ldr	r3, [r7, #4]
   16990:	681b      	ldr	r3, [r3, #0]
   16992:	2220      	movs	r2, #32
   16994:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	7e5b      	ldrb	r3, [r3, #25]
   1699a:	2220      	movs	r2, #32
   1699c:	4393      	bics	r3, r2
   1699e:	b2da      	uxtb	r2, r3
   169a0:	687b      	ldr	r3, [r7, #4]
   169a2:	765a      	strb	r2, [r3, #25]
}
   169a4:	e018      	b.n	169d8 <tc_disable_callback+0x80>
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
   169a6:	687b      	ldr	r3, [r7, #4]
   169a8:	681b      	ldr	r3, [r3, #0]
   169aa:	1cfa      	adds	r2, r7, #3
   169ac:	7812      	ldrb	r2, [r2, #0]
   169ae:	2101      	movs	r1, #1
   169b0:	4091      	lsls	r1, r2
   169b2:	000a      	movs	r2, r1
   169b4:	b2d2      	uxtb	r2, r2
   169b6:	721a      	strb	r2, [r3, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
   169b8:	687b      	ldr	r3, [r7, #4]
   169ba:	7e5b      	ldrb	r3, [r3, #25]
   169bc:	b25b      	sxtb	r3, r3
   169be:	1cfa      	adds	r2, r7, #3
   169c0:	7812      	ldrb	r2, [r2, #0]
   169c2:	2101      	movs	r1, #1
   169c4:	4091      	lsls	r1, r2
   169c6:	000a      	movs	r2, r1
   169c8:	b252      	sxtb	r2, r2
   169ca:	43d2      	mvns	r2, r2
   169cc:	b252      	sxtb	r2, r2
   169ce:	4013      	ands	r3, r2
   169d0:	b25b      	sxtb	r3, r3
   169d2:	b2da      	uxtb	r2, r3
   169d4:	687b      	ldr	r3, [r7, #4]
   169d6:	765a      	strb	r2, [r3, #25]
}
   169d8:	46c0      	nop			; (mov r8, r8)
   169da:	46bd      	mov	sp, r7
   169dc:	b002      	add	sp, #8
   169de:	bd80      	pop	{r7, pc}

000169e0 <tmr_read_count>:
#endif

/*! \brief  read the actual timer count from register
 */
uint16_t tmr_read_count(void)
{
   169e0:	b580      	push	{r7, lr}
   169e2:	af00      	add	r7, sp, #0
	return ((uint16_t)tc_get_count_value(&module_inst));
   169e4:	4b04      	ldr	r3, [pc, #16]	; (169f8 <tmr_read_count+0x18>)
   169e6:	0018      	movs	r0, r3
   169e8:	4b04      	ldr	r3, [pc, #16]	; (169fc <tmr_read_count+0x1c>)
   169ea:	4798      	blx	r3
   169ec:	0003      	movs	r3, r0
   169ee:	b29b      	uxth	r3, r3
}
   169f0:	0018      	movs	r0, r3
   169f2:	46bd      	mov	sp, r7
   169f4:	bd80      	pop	{r7, pc}
   169f6:	46c0      	nop			; (mov r8, r8)
   169f8:	20001a14 	.word	0x20001a14
   169fc:	00005f8d 	.word	0x00005f8d

00016a00 <tmr_disable_cc_interrupt>:

/*! \brief  to disable compare interrupt
 */
void tmr_disable_cc_interrupt(void)
{
   16a00:	b580      	push	{r7, lr}
   16a02:	af00      	add	r7, sp, #0
	tc_disable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
   16a04:	4b03      	ldr	r3, [pc, #12]	; (16a14 <tmr_disable_cc_interrupt+0x14>)
   16a06:	2102      	movs	r1, #2
   16a08:	0018      	movs	r0, r3
   16a0a:	4b03      	ldr	r3, [pc, #12]	; (16a18 <tmr_disable_cc_interrupt+0x18>)
   16a0c:	4798      	blx	r3
}
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	46bd      	mov	sp, r7
   16a12:	bd80      	pop	{r7, pc}
   16a14:	20001a14 	.word	0x20001a14
   16a18:	00016959 	.word	0x00016959

00016a1c <tmr_enable_cc_interrupt>:

/*! \brief  to enable compare interrupt
 */
void tmr_enable_cc_interrupt(void)
{
   16a1c:	b580      	push	{r7, lr}
   16a1e:	af00      	add	r7, sp, #0
	tc_clear_status(&module_inst, TC_STATUS_CHANNEL_0_MATCH);
   16a20:	4b06      	ldr	r3, [pc, #24]	; (16a3c <tmr_enable_cc_interrupt+0x20>)
   16a22:	2101      	movs	r1, #1
   16a24:	0018      	movs	r0, r3
   16a26:	4b06      	ldr	r3, [pc, #24]	; (16a40 <tmr_enable_cc_interrupt+0x24>)
   16a28:	4798      	blx	r3
	tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);
   16a2a:	4b04      	ldr	r3, [pc, #16]	; (16a3c <tmr_enable_cc_interrupt+0x20>)
   16a2c:	2102      	movs	r1, #2
   16a2e:	0018      	movs	r0, r3
   16a30:	4b04      	ldr	r3, [pc, #16]	; (16a44 <tmr_enable_cc_interrupt+0x28>)
   16a32:	4798      	blx	r3
}
   16a34:	46c0      	nop			; (mov r8, r8)
   16a36:	46bd      	mov	sp, r7
   16a38:	bd80      	pop	{r7, pc}
   16a3a:	46c0      	nop			; (mov r8, r8)
   16a3c:	20001a14 	.word	0x20001a14
   16a40:	00016829 	.word	0x00016829
   16a44:	000168ad 	.word	0x000168ad

00016a48 <tmr_disable_ovf_interrupt>:

/*! \brief  to disable overflow interrupt
 */
void tmr_disable_ovf_interrupt(void)
{
   16a48:	b580      	push	{r7, lr}
   16a4a:	af00      	add	r7, sp, #0
	tc_disable_callback(&module_inst, TC_CALLBACK_OVERFLOW);
   16a4c:	4b03      	ldr	r3, [pc, #12]	; (16a5c <tmr_disable_ovf_interrupt+0x14>)
   16a4e:	2100      	movs	r1, #0
   16a50:	0018      	movs	r0, r3
   16a52:	4b03      	ldr	r3, [pc, #12]	; (16a60 <tmr_disable_ovf_interrupt+0x18>)
   16a54:	4798      	blx	r3
}
   16a56:	46c0      	nop			; (mov r8, r8)
   16a58:	46bd      	mov	sp, r7
   16a5a:	bd80      	pop	{r7, pc}
   16a5c:	20001a14 	.word	0x20001a14
   16a60:	00016959 	.word	0x00016959

00016a64 <tmr_stop>:
}

/*! \brief  to stop the running timer
 */
void tmr_stop(void)
{
   16a64:	b580      	push	{r7, lr}
   16a66:	af00      	add	r7, sp, #0
	tc_disable(&module_inst);
   16a68:	4b03      	ldr	r3, [pc, #12]	; (16a78 <tmr_stop+0x14>)
   16a6a:	0018      	movs	r0, r3
   16a6c:	4b03      	ldr	r3, [pc, #12]	; (16a7c <tmr_stop+0x18>)
   16a6e:	4798      	blx	r3
}
   16a70:	46c0      	nop			; (mov r8, r8)
   16a72:	46bd      	mov	sp, r7
   16a74:	bd80      	pop	{r7, pc}
   16a76:	46c0      	nop			; (mov r8, r8)
   16a78:	20001a14 	.word	0x20001a14
   16a7c:	000167e5 	.word	0x000167e5

00016a80 <tmr_write_cmpreg>:

/*! \brief  to load compare value in channel compare register
 */
void tmr_write_cmpreg(uint16_t compare_value)
{
   16a80:	b580      	push	{r7, lr}
   16a82:	b082      	sub	sp, #8
   16a84:	af00      	add	r7, sp, #0
   16a86:	0002      	movs	r2, r0
   16a88:	1dbb      	adds	r3, r7, #6
   16a8a:	801a      	strh	r2, [r3, #0]
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
   16a8c:	1dbb      	adds	r3, r7, #6
   16a8e:	881a      	ldrh	r2, [r3, #0]
   16a90:	4b04      	ldr	r3, [pc, #16]	; (16aa4 <tmr_write_cmpreg+0x24>)
   16a92:	2100      	movs	r1, #0
   16a94:	0018      	movs	r0, r3
   16a96:	4b04      	ldr	r3, [pc, #16]	; (16aa8 <tmr_write_cmpreg+0x28>)
   16a98:	4798      	blx	r3
			(uint32_t)compare_value);
}
   16a9a:	46c0      	nop			; (mov r8, r8)
   16a9c:	46bd      	mov	sp, r7
   16a9e:	b002      	add	sp, #8
   16aa0:	bd80      	pop	{r7, pc}
   16aa2:	46c0      	nop			; (mov r8, r8)
   16aa4:	20001a14 	.word	0x20001a14
   16aa8:	00005fed 	.word	0x00005fed

00016aac <save_cpu_interrupt>:

/*! \brief  to save current interrupts status
 */
uint8_t save_cpu_interrupt(void)
{
   16aac:	b580      	push	{r7, lr}
   16aae:	af00      	add	r7, sp, #0
	return cpu_irq_save();
   16ab0:	4b03      	ldr	r3, [pc, #12]	; (16ac0 <save_cpu_interrupt+0x14>)
   16ab2:	4798      	blx	r3
   16ab4:	0003      	movs	r3, r0
   16ab6:	b2db      	uxtb	r3, r3
}
   16ab8:	0018      	movs	r0, r3
   16aba:	46bd      	mov	sp, r7
   16abc:	bd80      	pop	{r7, pc}
   16abe:	46c0      	nop			; (mov r8, r8)
   16ac0:	00016649 	.word	0x00016649

00016ac4 <restore_cpu_interrupt>:

/*! \brief  to restore saved interrupts status
 *  \param  saved interrupt status
 */
void restore_cpu_interrupt(uint8_t flags)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	b082      	sub	sp, #8
   16ac8:	af00      	add	r7, sp, #0
   16aca:	0002      	movs	r2, r0
   16acc:	1dfb      	adds	r3, r7, #7
   16ace:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore((uint32_t)flags);
   16ad0:	1dfb      	adds	r3, r7, #7
   16ad2:	781b      	ldrb	r3, [r3, #0]
   16ad4:	0018      	movs	r0, r3
   16ad6:	4b03      	ldr	r3, [pc, #12]	; (16ae4 <restore_cpu_interrupt+0x20>)
   16ad8:	4798      	blx	r3
}
   16ada:	46c0      	nop			; (mov r8, r8)
   16adc:	46bd      	mov	sp, r7
   16ade:	b002      	add	sp, #8
   16ae0:	bd80      	pop	{r7, pc}
   16ae2:	46c0      	nop			; (mov r8, r8)
   16ae4:	00016691 	.word	0x00016691

00016ae8 <tc_ovf_callback>:

static void tc_ovf_callback(struct tc_module *const module_instance)
{
   16ae8:	b580      	push	{r7, lr}
   16aea:	b082      	sub	sp, #8
   16aec:	af00      	add	r7, sp, #0
   16aee:	6078      	str	r0, [r7, #4]
	tmr_ovf_callback();
   16af0:	4b02      	ldr	r3, [pc, #8]	; (16afc <tc_ovf_callback+0x14>)
   16af2:	4798      	blx	r3
}
   16af4:	46c0      	nop			; (mov r8, r8)
   16af6:	46bd      	mov	sp, r7
   16af8:	b002      	add	sp, #8
   16afa:	bd80      	pop	{r7, pc}
   16afc:	0001a635 	.word	0x0001a635

00016b00 <tc_cca_callback>:

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
   16b00:	b580      	push	{r7, lr}
   16b02:	b082      	sub	sp, #8
   16b04:	af00      	add	r7, sp, #0
   16b06:	6078      	str	r0, [r7, #4]
	tmr_cca_callback();
   16b08:	4b02      	ldr	r3, [pc, #8]	; (16b14 <tc_cca_callback+0x14>)
   16b0a:	4798      	blx	r3
}
   16b0c:	46c0      	nop			; (mov r8, r8)
   16b0e:	46bd      	mov	sp, r7
   16b10:	b002      	add	sp, #8
   16b12:	bd80      	pop	{r7, pc}
   16b14:	0001a67d 	.word	0x0001a67d

00016b18 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
   16b18:	b580      	push	{r7, lr}
   16b1a:	b082      	sub	sp, #8
   16b1c:	af00      	add	r7, sp, #0
	float timer_multiplier;
	tc_get_config_defaults(&timer_config);
   16b1e:	4b2b      	ldr	r3, [pc, #172]	; (16bcc <tmr_init+0xb4>)
   16b20:	0018      	movs	r0, r3
   16b22:	4b2b      	ldr	r3, [pc, #172]	; (16bd0 <tmr_init+0xb8>)
   16b24:	4798      	blx	r3
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
   16b26:	4b29      	ldr	r3, [pc, #164]	; (16bcc <tmr_init+0xb4>)
   16b28:	2201      	movs	r2, #1
   16b2a:	4252      	negs	r2, r2
   16b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
   16b2e:	4a27      	ldr	r2, [pc, #156]	; (16bcc <tmr_init+0xb4>)
   16b30:	4928      	ldr	r1, [pc, #160]	; (16bd4 <tmr_init+0xbc>)
   16b32:	4b29      	ldr	r3, [pc, #164]	; (16bd8 <tmr_init+0xc0>)
   16b34:	0018      	movs	r0, r3
   16b36:	4b29      	ldr	r3, [pc, #164]	; (16bdc <tmr_init+0xc4>)
   16b38:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
   16b3a:	4929      	ldr	r1, [pc, #164]	; (16be0 <tmr_init+0xc8>)
   16b3c:	4b26      	ldr	r3, [pc, #152]	; (16bd8 <tmr_init+0xc0>)
   16b3e:	2200      	movs	r2, #0
   16b40:	0018      	movs	r0, r3
   16b42:	4b28      	ldr	r3, [pc, #160]	; (16be4 <tmr_init+0xcc>)
   16b44:	4798      	blx	r3
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
   16b46:	4928      	ldr	r1, [pc, #160]	; (16be8 <tmr_init+0xd0>)
   16b48:	4b23      	ldr	r3, [pc, #140]	; (16bd8 <tmr_init+0xc0>)
   16b4a:	2202      	movs	r2, #2
   16b4c:	0018      	movs	r0, r3
   16b4e:	4b25      	ldr	r3, [pc, #148]	; (16be4 <tmr_init+0xcc>)
   16b50:	4798      	blx	r3
			TC_CALLBACK_CC_CHANNEL0);
	tc_enable_callback(&module_inst, TC_CALLBACK_OVERFLOW);
   16b52:	4b21      	ldr	r3, [pc, #132]	; (16bd8 <tmr_init+0xc0>)
   16b54:	2100      	movs	r1, #0
   16b56:	0018      	movs	r0, r3
   16b58:	4b24      	ldr	r3, [pc, #144]	; (16bec <tmr_init+0xd4>)
   16b5a:	4798      	blx	r3
	/*tc_enable_callback(&module_inst, TC_CALLBACK_CC_CHANNEL0);*/

	tc_enable(&module_inst);
   16b5c:	4b1e      	ldr	r3, [pc, #120]	; (16bd8 <tmr_init+0xc0>)
   16b5e:	0018      	movs	r0, r3
   16b60:	4b23      	ldr	r3, [pc, #140]	; (16bf0 <tmr_init+0xd8>)
   16b62:	4798      	blx	r3
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
   16b64:	2000      	movs	r0, #0
   16b66:	4b23      	ldr	r3, [pc, #140]	; (16bf4 <tmr_init+0xdc>)
   16b68:	4798      	blx	r3
   16b6a:	0002      	movs	r2, r0
   16b6c:	4b22      	ldr	r3, [pc, #136]	; (16bf8 <tmr_init+0xe0>)
   16b6e:	0010      	movs	r0, r2
   16b70:	4798      	blx	r3
   16b72:	1c02      	adds	r2, r0, #0
   16b74:	4b21      	ldr	r3, [pc, #132]	; (16bfc <tmr_init+0xe4>)
   16b76:	4922      	ldr	r1, [pc, #136]	; (16c00 <tmr_init+0xe8>)
   16b78:	1c10      	adds	r0, r2, #0
   16b7a:	4798      	blx	r3
   16b7c:	1c03      	adds	r3, r0, #0
   16b7e:	607b      	str	r3, [r7, #4]
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
   16b80:	4b20      	ldr	r3, [pc, #128]	; (16c04 <tmr_init+0xec>)
   16b82:	6878      	ldr	r0, [r7, #4]
   16b84:	4798      	blx	r3
   16b86:	0002      	movs	r2, r0
   16b88:	4b1b      	ldr	r3, [pc, #108]	; (16bf8 <tmr_init+0xe0>)
   16b8a:	0010      	movs	r0, r2
   16b8c:	4798      	blx	r3
   16b8e:	1c02      	adds	r2, r0, #0
   16b90:	4b1d      	ldr	r3, [pc, #116]	; (16c08 <tmr_init+0xf0>)
   16b92:	1c11      	adds	r1, r2, #0
   16b94:	6878      	ldr	r0, [r7, #4]
   16b96:	4798      	blx	r3
   16b98:	1c03      	adds	r3, r0, #0
   16b9a:	1c1a      	adds	r2, r3, #0
   16b9c:	4b1b      	ldr	r3, [pc, #108]	; (16c0c <tmr_init+0xf4>)
   16b9e:	21fc      	movs	r1, #252	; 0xfc
   16ba0:	0589      	lsls	r1, r1, #22
   16ba2:	1c10      	adds	r0, r2, #0
   16ba4:	4798      	blx	r3
   16ba6:	1e03      	subs	r3, r0, #0
   16ba8:	d006      	beq.n	16bb8 <tmr_init+0xa0>
	{
		timer_multiplier += 1.0f;
   16baa:	4b19      	ldr	r3, [pc, #100]	; (16c10 <tmr_init+0xf8>)
   16bac:	21fe      	movs	r1, #254	; 0xfe
   16bae:	0589      	lsls	r1, r1, #22
   16bb0:	6878      	ldr	r0, [r7, #4]
   16bb2:	4798      	blx	r3
   16bb4:	1c03      	adds	r3, r0, #0
   16bb6:	607b      	str	r3, [r7, #4]
	}
	
	return (uint8_t) timer_multiplier;
   16bb8:	4b12      	ldr	r3, [pc, #72]	; (16c04 <tmr_init+0xec>)
   16bba:	6878      	ldr	r0, [r7, #4]
   16bbc:	4798      	blx	r3
   16bbe:	0003      	movs	r3, r0
   16bc0:	b2db      	uxtb	r3, r3
}
   16bc2:	0018      	movs	r0, r3
   16bc4:	46bd      	mov	sp, r7
   16bc6:	b002      	add	sp, #8
   16bc8:	bd80      	pop	{r7, pc}
   16bca:	46c0      	nop			; (mov r8, r8)
   16bcc:	200019dc 	.word	0x200019dc
   16bd0:	0001670d 	.word	0x0001670d
   16bd4:	42002000 	.word	0x42002000
   16bd8:	20001a14 	.word	0x20001a14
   16bdc:	00005ae5 	.word	0x00005ae5
   16be0:	00016ae9 	.word	0x00016ae9
   16be4:	000057e9 	.word	0x000057e9
   16be8:	00016b01 	.word	0x00016b01
   16bec:	000168ad 	.word	0x000168ad
   16bf0:	000167b1 	.word	0x000167b1
   16bf4:	000053ed 	.word	0x000053ed
   16bf8:	00022461 	.word	0x00022461
   16bfc:	00021a29 	.word	0x00021a29
   16c00:	49742400 	.word	0x49742400
   16c04:	000214d9 	.word	0x000214d9
   16c08:	00022049 	.word	0x00022049
   16c0c:	00021431 	.word	0x00021431
   16c10:	00021705 	.word	0x00021705

00016c14 <nvm_get_config_defaults>:
{
   16c14:	b580      	push	{r7, lr}
   16c16:	b082      	sub	sp, #8
   16c18:	af00      	add	r7, sp, #0
   16c1a:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   16c1c:	687b      	ldr	r3, [r7, #4]
   16c1e:	2200      	movs	r2, #0
   16c20:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   16c22:	687b      	ldr	r3, [r7, #4]
   16c24:	2201      	movs	r2, #1
   16c26:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   16c28:	4b08      	ldr	r3, [pc, #32]	; (16c4c <nvm_get_config_defaults+0x38>)
   16c2a:	685b      	ldr	r3, [r3, #4]
   16c2c:	06db      	lsls	r3, r3, #27
   16c2e:	0f1b      	lsrs	r3, r3, #28
   16c30:	b2db      	uxtb	r3, r3
   16c32:	001a      	movs	r2, r3
   16c34:	687b      	ldr	r3, [r7, #4]
   16c36:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   16c38:	687b      	ldr	r3, [r7, #4]
   16c3a:	2200      	movs	r2, #0
   16c3c:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   16c3e:	687b      	ldr	r3, [r7, #4]
   16c40:	2200      	movs	r2, #0
   16c42:	711a      	strb	r2, [r3, #4]
}
   16c44:	46c0      	nop			; (mov r8, r8)
   16c46:	46bd      	mov	sp, r7
   16c48:	b002      	add	sp, #8
   16c4a:	bd80      	pop	{r7, pc}
   16c4c:	41004000 	.word	0x41004000

00016c50 <nvm_is_ready>:
{
   16c50:	b580      	push	{r7, lr}
   16c52:	b082      	sub	sp, #8
   16c54:	af00      	add	r7, sp, #0
	Nvmctrl *const nvm_module = NVMCTRL;
   16c56:	4b07      	ldr	r3, [pc, #28]	; (16c74 <nvm_is_ready+0x24>)
   16c58:	607b      	str	r3, [r7, #4]
	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   16c5a:	687b      	ldr	r3, [r7, #4]
   16c5c:	7d1b      	ldrb	r3, [r3, #20]
   16c5e:	b2db      	uxtb	r3, r3
   16c60:	001a      	movs	r2, r3
   16c62:	2301      	movs	r3, #1
   16c64:	4013      	ands	r3, r2
   16c66:	1e5a      	subs	r2, r3, #1
   16c68:	4193      	sbcs	r3, r2
   16c6a:	b2db      	uxtb	r3, r3
}
   16c6c:	0018      	movs	r0, r3
   16c6e:	46bd      	mov	sp, r7
   16c70:	b002      	add	sp, #8
   16c72:	bd80      	pop	{r7, pc}
   16c74:	41004000 	.word	0x41004000

00016c78 <system_interrupt_enter_critical_section>:
{
   16c78:	b580      	push	{r7, lr}
   16c7a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16c7c:	4b02      	ldr	r3, [pc, #8]	; (16c88 <system_interrupt_enter_critical_section+0x10>)
   16c7e:	4798      	blx	r3
}
   16c80:	46c0      	nop			; (mov r8, r8)
   16c82:	46bd      	mov	sp, r7
   16c84:	bd80      	pop	{r7, pc}
   16c86:	46c0      	nop			; (mov r8, r8)
   16c88:	00000201 	.word	0x00000201

00016c8c <system_interrupt_leave_critical_section>:
{
   16c8c:	b580      	push	{r7, lr}
   16c8e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   16c90:	4b02      	ldr	r3, [pc, #8]	; (16c9c <system_interrupt_leave_critical_section+0x10>)
   16c92:	4798      	blx	r3
}
   16c94:	46c0      	nop			; (mov r8, r8)
   16c96:	46bd      	mov	sp, r7
   16c98:	bd80      	pop	{r7, pc}
   16c9a:	46c0      	nop			; (mov r8, r8)
   16c9c:	00000255 	.word	0x00000255

00016ca0 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
   16ca0:	b5b0      	push	{r4, r5, r7, lr}
   16ca2:	b086      	sub	sp, #24
   16ca4:	af00      	add	r7, sp, #0
   16ca6:	60b9      	str	r1, [r7, #8]
   16ca8:	607a      	str	r2, [r7, #4]
   16caa:	603b      	str	r3, [r7, #0]
   16cac:	230f      	movs	r3, #15
   16cae:	18fb      	adds	r3, r7, r3
   16cb0:	1c02      	adds	r2, r0, #0
   16cb2:	701a      	strb	r2, [r3, #0]
	status_code_t status = nvm_sam0_read(mem, address, buffer, len);
   16cb4:	2317      	movs	r3, #23
   16cb6:	18fc      	adds	r4, r7, r3
   16cb8:	683d      	ldr	r5, [r7, #0]
   16cba:	687a      	ldr	r2, [r7, #4]
   16cbc:	68b9      	ldr	r1, [r7, #8]
   16cbe:	230f      	movs	r3, #15
   16cc0:	18fb      	adds	r3, r7, r3
   16cc2:	7818      	ldrb	r0, [r3, #0]
   16cc4:	002b      	movs	r3, r5
   16cc6:	4d06      	ldr	r5, [pc, #24]	; (16ce0 <nvm_read+0x40>)
   16cc8:	47a8      	blx	r5
   16cca:	0003      	movs	r3, r0
   16ccc:	7023      	strb	r3, [r4, #0]
	return status;//STATUS_OK;
   16cce:	2317      	movs	r3, #23
   16cd0:	18fb      	adds	r3, r7, r3
   16cd2:	781b      	ldrb	r3, [r3, #0]
   16cd4:	b25b      	sxtb	r3, r3
}
   16cd6:	0018      	movs	r0, r3
   16cd8:	46bd      	mov	sp, r7
   16cda:	b006      	add	sp, #24
   16cdc:	bdb0      	pop	{r4, r5, r7, pc}
   16cde:	46c0      	nop			; (mov r8, r8)
   16ce0:	00016ce5 	.word	0x00016ce5

00016ce4 <nvm_sam0_read>:

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
   16ce4:	b580      	push	{r7, lr}
   16ce6:	b088      	sub	sp, #32
   16ce8:	af00      	add	r7, sp, #0
   16cea:	60b9      	str	r1, [r7, #8]
   16cec:	607a      	str	r2, [r7, #4]
   16cee:	603b      	str	r3, [r7, #0]
   16cf0:	230f      	movs	r3, #15
   16cf2:	18fb      	adds	r3, r7, r3
   16cf4:	1c02      	adds	r2, r0, #0
   16cf6:	701a      	strb	r2, [r3, #0]
	switch (mem) {
   16cf8:	230f      	movs	r3, #15
   16cfa:	18fb      	adds	r3, r7, r3
   16cfc:	781b      	ldrb	r3, [r3, #0]
   16cfe:	2b00      	cmp	r3, #0
   16d00:	d14d      	bne.n	16d9e <nvm_sam0_read+0xba>
		

	case INT_FLASH:
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
   16d02:	4b2b      	ldr	r3, [pc, #172]	; (16db0 <nvm_sam0_read+0xcc>)
   16d04:	617b      	str	r3, [r7, #20]
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
   16d06:	4b2b      	ldr	r3, [pc, #172]	; (16db4 <nvm_sam0_read+0xd0>)
   16d08:	4798      	blx	r3
   16d0a:	0003      	movs	r3, r0
   16d0c:	001a      	movs	r2, r3
   16d0e:	2301      	movs	r3, #1
   16d10:	4053      	eors	r3, r2
   16d12:	b2db      	uxtb	r3, r3
   16d14:	2b00      	cmp	r3, #0
   16d16:	d001      	beq.n	16d1c <nvm_sam0_read+0x38>
			return STATUS_BUSY;
   16d18:	2305      	movs	r3, #5
   16d1a:	e044      	b.n	16da6 <nvm_sam0_read+0xc2>
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   16d1c:	697b      	ldr	r3, [r7, #20]
   16d1e:	2220      	movs	r2, #32
   16d20:	32ff      	adds	r2, #255	; 0xff
   16d22:	831a      	strh	r2, [r3, #24]

		uint32_t page_address = address / 2;
   16d24:	68bb      	ldr	r3, [r7, #8]
   16d26:	085b      	lsrs	r3, r3, #1
   16d28:	61fb      	str	r3, [r7, #28]

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
   16d2a:	231a      	movs	r3, #26
   16d2c:	18fb      	adds	r3, r7, r3
   16d2e:	2200      	movs	r2, #0
   16d30:	801a      	strh	r2, [r3, #0]
   16d32:	e02d      	b.n	16d90 <nvm_sam0_read+0xac>
			/* Fetch next 16-bit chunk from the NVM memory space */
			uint16_t data = NVM_MEMORY[page_address++];
   16d34:	69fb      	ldr	r3, [r7, #28]
   16d36:	1c5a      	adds	r2, r3, #1
   16d38:	61fa      	str	r2, [r7, #28]
   16d3a:	005b      	lsls	r3, r3, #1
   16d3c:	001a      	movs	r2, r3
   16d3e:	2312      	movs	r3, #18
   16d40:	18fb      	adds	r3, r7, r3
   16d42:	8812      	ldrh	r2, [r2, #0]
   16d44:	801a      	strh	r2, [r3, #0]

			/* Copy first byte of the 16-bit chunk to the
			 *destination buffer */
			buffer[i] = (data & 0xFF);
   16d46:	231a      	movs	r3, #26
   16d48:	18fb      	adds	r3, r7, r3
   16d4a:	881b      	ldrh	r3, [r3, #0]
   16d4c:	687a      	ldr	r2, [r7, #4]
   16d4e:	18d3      	adds	r3, r2, r3
   16d50:	2212      	movs	r2, #18
   16d52:	18ba      	adds	r2, r7, r2
   16d54:	8812      	ldrh	r2, [r2, #0]
   16d56:	b2d2      	uxtb	r2, r2
   16d58:	701a      	strb	r2, [r3, #0]

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
   16d5a:	231a      	movs	r3, #26
   16d5c:	18fb      	adds	r3, r7, r3
   16d5e:	881a      	ldrh	r2, [r3, #0]
   16d60:	683b      	ldr	r3, [r7, #0]
   16d62:	3b01      	subs	r3, #1
   16d64:	429a      	cmp	r2, r3
   16d66:	d20c      	bcs.n	16d82 <nvm_sam0_read+0x9e>
				buffer[i + 1] = (data >> 8);
   16d68:	231a      	movs	r3, #26
   16d6a:	18fb      	adds	r3, r7, r3
   16d6c:	881b      	ldrh	r3, [r3, #0]
   16d6e:	3301      	adds	r3, #1
   16d70:	687a      	ldr	r2, [r7, #4]
   16d72:	18d3      	adds	r3, r2, r3
   16d74:	2212      	movs	r2, #18
   16d76:	18ba      	adds	r2, r7, r2
   16d78:	8812      	ldrh	r2, [r2, #0]
   16d7a:	0a12      	lsrs	r2, r2, #8
   16d7c:	b292      	uxth	r2, r2
   16d7e:	b2d2      	uxtb	r2, r2
   16d80:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < len; i += 2) {
   16d82:	231a      	movs	r3, #26
   16d84:	18fb      	adds	r3, r7, r3
   16d86:	221a      	movs	r2, #26
   16d88:	18ba      	adds	r2, r7, r2
   16d8a:	8812      	ldrh	r2, [r2, #0]
   16d8c:	3202      	adds	r2, #2
   16d8e:	801a      	strh	r2, [r3, #0]
   16d90:	231a      	movs	r3, #26
   16d92:	18fb      	adds	r3, r7, r3
   16d94:	881a      	ldrh	r2, [r3, #0]
   16d96:	683b      	ldr	r3, [r7, #0]
   16d98:	429a      	cmp	r2, r3
   16d9a:	d3cb      	bcc.n	16d34 <nvm_sam0_read+0x50>
			}
		}
     }

		break;
   16d9c:	e002      	b.n	16da4 <nvm_sam0_read+0xc0>

	default:
		return ERR_INVALID_ARG;
   16d9e:	2308      	movs	r3, #8
   16da0:	425b      	negs	r3, r3
   16da2:	e000      	b.n	16da6 <nvm_sam0_read+0xc2>
	}

	return STATUS_OK;
   16da4:	2300      	movs	r3, #0
}
   16da6:	0018      	movs	r0, r3
   16da8:	46bd      	mov	sp, r7
   16daa:	b008      	add	sp, #32
   16dac:	bd80      	pop	{r7, pc}
   16dae:	46c0      	nop			; (mov r8, r8)
   16db0:	41004000 	.word	0x41004000
   16db4:	00016c51 	.word	0x00016c51

00016db8 <nvm_memcpy>:
enum status_code nvm_memcpy(
		const uint32_t destination_address,
		uint8_t *const buffer,
		uint16_t length,
		bool erase_flag)
{
   16db8:	b590      	push	{r4, r7, lr}
   16dba:	b0cb      	sub	sp, #300	; 0x12c
   16dbc:	af00      	add	r7, sp, #0
   16dbe:	60f8      	str	r0, [r7, #12]
   16dc0:	60b9      	str	r1, [r7, #8]
   16dc2:	0019      	movs	r1, r3
   16dc4:	4ba8      	ldr	r3, [pc, #672]	; (17068 <nvm_memcpy+0x2b0>)
   16dc6:	2094      	movs	r0, #148	; 0x94
   16dc8:	0040      	lsls	r0, r0, #1
   16dca:	4684      	mov	ip, r0
   16dcc:	44bc      	add	ip, r7
   16dce:	4463      	add	r3, ip
   16dd0:	801a      	strh	r2, [r3, #0]
   16dd2:	4ba6      	ldr	r3, [pc, #664]	; (1706c <nvm_memcpy+0x2b4>)
   16dd4:	2294      	movs	r2, #148	; 0x94
   16dd6:	0052      	lsls	r2, r2, #1
   16dd8:	4694      	mov	ip, r2
   16dda:	44bc      	add	ip, r7
   16ddc:	4463      	add	r3, ip
   16dde:	1c0a      	adds	r2, r1, #0
   16de0:	701a      	strb	r2, [r3, #0]
	enum status_code error_code = STATUS_OK;
   16de2:	2328      	movs	r3, #40	; 0x28
   16de4:	33ff      	adds	r3, #255	; 0xff
   16de6:	18fb      	adds	r3, r7, r3
   16de8:	2200      	movs	r2, #0
   16dea:	701a      	strb	r2, [r3, #0]
	uint8_t row_buffer[NVMCTRL_ROW_PAGES * FLASH_PAGE_SIZE];
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
   16dec:	68fb      	ldr	r3, [r7, #12]
   16dee:	2290      	movs	r2, #144	; 0x90
   16df0:	0052      	lsls	r2, r2, #1
   16df2:	18ba      	adds	r2, r7, r2
   16df4:	6013      	str	r3, [r2, #0]
	const uint8_t *src_buf = buffer;
   16df6:	68bb      	ldr	r3, [r7, #8]
   16df8:	228e      	movs	r2, #142	; 0x8e
   16dfa:	0052      	lsls	r2, r2, #1
   16dfc:	18ba      	adds	r2, r7, r2
   16dfe:	6013      	str	r3, [r2, #0]
	uint32_t i;

	/* Calculate the starting row address of the page to update */
	uint32_t row_start_address
   16e00:	68fb      	ldr	r3, [r7, #12]
   16e02:	22ff      	movs	r2, #255	; 0xff
   16e04:	4393      	bics	r3, r2
   16e06:	228a      	movs	r2, #138	; 0x8a
   16e08:	0052      	lsls	r2, r2, #1
   16e0a:	18ba      	adds	r2, r7, r2
   16e0c:	6013      	str	r3, [r2, #0]
		= destination_address &
			~((FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES) - 1);

	while (length) {
   16e0e:	e118      	b.n	17042 <nvm_memcpy+0x28a>
		/* Backup the contents of a row */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
   16e10:	2300      	movs	r3, #0
   16e12:	228c      	movs	r2, #140	; 0x8c
   16e14:	0052      	lsls	r2, r2, #1
   16e16:	18ba      	adds	r2, r7, r2
   16e18:	6013      	str	r3, [r2, #0]
   16e1a:	e034      	b.n	16e86 <nvm_memcpy+0xce>
			do {
				error_code = nvm_read_buffer(
						row_start_address +
						(i * FLASH_PAGE_SIZE),
   16e1c:	238c      	movs	r3, #140	; 0x8c
   16e1e:	005b      	lsls	r3, r3, #1
   16e20:	18fb      	adds	r3, r7, r3
   16e22:	681b      	ldr	r3, [r3, #0]
   16e24:	019a      	lsls	r2, r3, #6
				error_code = nvm_read_buffer(
   16e26:	238a      	movs	r3, #138	; 0x8a
   16e28:	005b      	lsls	r3, r3, #1
   16e2a:	18fb      	adds	r3, r7, r3
   16e2c:	681b      	ldr	r3, [r3, #0]
   16e2e:	18d0      	adds	r0, r2, r3
						(row_buffer +
						(i * FLASH_PAGE_SIZE)),
   16e30:	238c      	movs	r3, #140	; 0x8c
   16e32:	005b      	lsls	r3, r3, #1
   16e34:	18fb      	adds	r3, r7, r3
   16e36:	681b      	ldr	r3, [r3, #0]
   16e38:	019b      	lsls	r3, r3, #6
				error_code = nvm_read_buffer(
   16e3a:	2214      	movs	r2, #20
   16e3c:	18ba      	adds	r2, r7, r2
   16e3e:	18d3      	adds	r3, r2, r3
   16e40:	2228      	movs	r2, #40	; 0x28
   16e42:	32ff      	adds	r2, #255	; 0xff
   16e44:	18bc      	adds	r4, r7, r2
   16e46:	2240      	movs	r2, #64	; 0x40
   16e48:	0019      	movs	r1, r3
   16e4a:	4b89      	ldr	r3, [pc, #548]	; (17070 <nvm_memcpy+0x2b8>)
   16e4c:	4798      	blx	r3
   16e4e:	0003      	movs	r3, r0
   16e50:	7023      	strb	r3, [r4, #0]
						FLASH_PAGE_SIZE);
			} while (error_code == STATUS_BUSY);
   16e52:	2328      	movs	r3, #40	; 0x28
   16e54:	33ff      	adds	r3, #255	; 0xff
   16e56:	18fb      	adds	r3, r7, r3
   16e58:	781b      	ldrb	r3, [r3, #0]
   16e5a:	2b05      	cmp	r3, #5
   16e5c:	d0de      	beq.n	16e1c <nvm_memcpy+0x64>

			if (error_code != STATUS_OK) {
   16e5e:	2328      	movs	r3, #40	; 0x28
   16e60:	33ff      	adds	r3, #255	; 0xff
   16e62:	18fb      	adds	r3, r7, r3
   16e64:	781b      	ldrb	r3, [r3, #0]
   16e66:	2b00      	cmp	r3, #0
   16e68:	d004      	beq.n	16e74 <nvm_memcpy+0xbc>
				return error_code;
   16e6a:	2328      	movs	r3, #40	; 0x28
   16e6c:	33ff      	adds	r3, #255	; 0xff
   16e6e:	18fb      	adds	r3, r7, r3
   16e70:	781b      	ldrb	r3, [r3, #0]
   16e72:	e0f4      	b.n	1705e <nvm_memcpy+0x2a6>
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
   16e74:	238c      	movs	r3, #140	; 0x8c
   16e76:	005b      	lsls	r3, r3, #1
   16e78:	18fb      	adds	r3, r7, r3
   16e7a:	681b      	ldr	r3, [r3, #0]
   16e7c:	3301      	adds	r3, #1
   16e7e:	228c      	movs	r2, #140	; 0x8c
   16e80:	0052      	lsls	r2, r2, #1
   16e82:	18ba      	adds	r2, r7, r2
   16e84:	6013      	str	r3, [r2, #0]
   16e86:	238c      	movs	r3, #140	; 0x8c
   16e88:	005b      	lsls	r3, r3, #1
   16e8a:	18fb      	adds	r3, r7, r3
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	2b03      	cmp	r3, #3
   16e90:	d9c4      	bls.n	16e1c <nvm_memcpy+0x64>
			}
		}

		/* Update the buffer if necessary */
		for (i = row_start_address;
   16e92:	238a      	movs	r3, #138	; 0x8a
   16e94:	005b      	lsls	r3, r3, #1
   16e96:	18fb      	adds	r3, r7, r3
   16e98:	681b      	ldr	r3, [r3, #0]
   16e9a:	228c      	movs	r2, #140	; 0x8c
   16e9c:	0052      	lsls	r2, r2, #1
   16e9e:	18ba      	adds	r2, r7, r2
   16ea0:	6013      	str	r3, [r2, #0]
   16ea2:	e04d      	b.n	16f40 <nvm_memcpy+0x188>
				i < row_start_address +
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
			if (length && ((uint8_t *)i == dest_add)) {
   16ea4:	4b70      	ldr	r3, [pc, #448]	; (17068 <nvm_memcpy+0x2b0>)
   16ea6:	2294      	movs	r2, #148	; 0x94
   16ea8:	0052      	lsls	r2, r2, #1
   16eaa:	4694      	mov	ip, r2
   16eac:	44bc      	add	ip, r7
   16eae:	4463      	add	r3, ip
   16eb0:	881b      	ldrh	r3, [r3, #0]
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	d03b      	beq.n	16f2e <nvm_memcpy+0x176>
   16eb6:	238c      	movs	r3, #140	; 0x8c
   16eb8:	005b      	lsls	r3, r3, #1
   16eba:	18fb      	adds	r3, r7, r3
   16ebc:	681a      	ldr	r2, [r3, #0]
   16ebe:	2390      	movs	r3, #144	; 0x90
   16ec0:	005b      	lsls	r3, r3, #1
   16ec2:	18fb      	adds	r3, r7, r3
   16ec4:	681b      	ldr	r3, [r3, #0]
   16ec6:	429a      	cmp	r2, r3
   16ec8:	d131      	bne.n	16f2e <nvm_memcpy+0x176>
				row_buffer[i - row_start_address] = *src_buf++;
   16eca:	238c      	movs	r3, #140	; 0x8c
   16ecc:	005b      	lsls	r3, r3, #1
   16ece:	18fb      	adds	r3, r7, r3
   16ed0:	681a      	ldr	r2, [r3, #0]
   16ed2:	238a      	movs	r3, #138	; 0x8a
   16ed4:	005b      	lsls	r3, r3, #1
   16ed6:	18fb      	adds	r3, r7, r3
   16ed8:	681b      	ldr	r3, [r3, #0]
   16eda:	1ad2      	subs	r2, r2, r3
   16edc:	238e      	movs	r3, #142	; 0x8e
   16ede:	005b      	lsls	r3, r3, #1
   16ee0:	18fb      	adds	r3, r7, r3
   16ee2:	681b      	ldr	r3, [r3, #0]
   16ee4:	1c59      	adds	r1, r3, #1
   16ee6:	208e      	movs	r0, #142	; 0x8e
   16ee8:	0040      	lsls	r0, r0, #1
   16eea:	1838      	adds	r0, r7, r0
   16eec:	6001      	str	r1, [r0, #0]
   16eee:	7819      	ldrb	r1, [r3, #0]
   16ef0:	4b60      	ldr	r3, [pc, #384]	; (17074 <nvm_memcpy+0x2bc>)
   16ef2:	2094      	movs	r0, #148	; 0x94
   16ef4:	0040      	lsls	r0, r0, #1
   16ef6:	4684      	mov	ip, r0
   16ef8:	44bc      	add	ip, r7
   16efa:	4463      	add	r3, ip
   16efc:	5499      	strb	r1, [r3, r2]
				dest_add++;
   16efe:	2390      	movs	r3, #144	; 0x90
   16f00:	005b      	lsls	r3, r3, #1
   16f02:	18fb      	adds	r3, r7, r3
   16f04:	681b      	ldr	r3, [r3, #0]
   16f06:	3301      	adds	r3, #1
   16f08:	2290      	movs	r2, #144	; 0x90
   16f0a:	0052      	lsls	r2, r2, #1
   16f0c:	18ba      	adds	r2, r7, r2
   16f0e:	6013      	str	r3, [r2, #0]
				length--;
   16f10:	4b55      	ldr	r3, [pc, #340]	; (17068 <nvm_memcpy+0x2b0>)
   16f12:	2294      	movs	r2, #148	; 0x94
   16f14:	0052      	lsls	r2, r2, #1
   16f16:	4694      	mov	ip, r2
   16f18:	44bc      	add	ip, r7
   16f1a:	4463      	add	r3, ip
   16f1c:	881a      	ldrh	r2, [r3, #0]
   16f1e:	4b52      	ldr	r3, [pc, #328]	; (17068 <nvm_memcpy+0x2b0>)
   16f20:	2194      	movs	r1, #148	; 0x94
   16f22:	0049      	lsls	r1, r1, #1
   16f24:	468c      	mov	ip, r1
   16f26:	44bc      	add	ip, r7
   16f28:	4463      	add	r3, ip
   16f2a:	3a01      	subs	r2, #1
   16f2c:	801a      	strh	r2, [r3, #0]
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
   16f2e:	238c      	movs	r3, #140	; 0x8c
   16f30:	005b      	lsls	r3, r3, #1
   16f32:	18fb      	adds	r3, r7, r3
   16f34:	681b      	ldr	r3, [r3, #0]
   16f36:	3301      	adds	r3, #1
   16f38:	228c      	movs	r2, #140	; 0x8c
   16f3a:	0052      	lsls	r2, r2, #1
   16f3c:	18ba      	adds	r2, r7, r2
   16f3e:	6013      	str	r3, [r2, #0]
				i < row_start_address +
   16f40:	238a      	movs	r3, #138	; 0x8a
   16f42:	005b      	lsls	r3, r3, #1
   16f44:	18fb      	adds	r3, r7, r3
   16f46:	681b      	ldr	r3, [r3, #0]
   16f48:	1c5a      	adds	r2, r3, #1
   16f4a:	32ff      	adds	r2, #255	; 0xff
		for (i = row_start_address;
   16f4c:	238c      	movs	r3, #140	; 0x8c
   16f4e:	005b      	lsls	r3, r3, #1
   16f50:	18fb      	adds	r3, r7, r3
   16f52:	681b      	ldr	r3, [r3, #0]
   16f54:	429a      	cmp	r2, r3
   16f56:	d8a5      	bhi.n	16ea4 <nvm_memcpy+0xec>
			}
		}

		system_interrupt_enter_critical_section();
   16f58:	4b47      	ldr	r3, [pc, #284]	; (17078 <nvm_memcpy+0x2c0>)
   16f5a:	4798      	blx	r3

		if (erase_flag) {
   16f5c:	4b43      	ldr	r3, [pc, #268]	; (1706c <nvm_memcpy+0x2b4>)
   16f5e:	2294      	movs	r2, #148	; 0x94
   16f60:	0052      	lsls	r2, r2, #1
   16f62:	4694      	mov	ip, r2
   16f64:	44bc      	add	ip, r7
   16f66:	4463      	add	r3, ip
   16f68:	781b      	ldrb	r3, [r3, #0]
   16f6a:	2b00      	cmp	r3, #0
   16f6c:	d01c      	beq.n	16fa8 <nvm_memcpy+0x1f0>
			/* Erase the row */
			do {
				error_code = nvm_erase_row(row_start_address);
   16f6e:	2328      	movs	r3, #40	; 0x28
   16f70:	33ff      	adds	r3, #255	; 0xff
   16f72:	18fc      	adds	r4, r7, r3
   16f74:	238a      	movs	r3, #138	; 0x8a
   16f76:	005b      	lsls	r3, r3, #1
   16f78:	18fb      	adds	r3, r7, r3
   16f7a:	681b      	ldr	r3, [r3, #0]
   16f7c:	0018      	movs	r0, r3
   16f7e:	4b3f      	ldr	r3, [pc, #252]	; (1707c <nvm_memcpy+0x2c4>)
   16f80:	4798      	blx	r3
   16f82:	0003      	movs	r3, r0
   16f84:	7023      	strb	r3, [r4, #0]
			} while (error_code == STATUS_BUSY);
   16f86:	2328      	movs	r3, #40	; 0x28
   16f88:	33ff      	adds	r3, #255	; 0xff
   16f8a:	18fb      	adds	r3, r7, r3
   16f8c:	781b      	ldrb	r3, [r3, #0]
   16f8e:	2b05      	cmp	r3, #5
   16f90:	d0ed      	beq.n	16f6e <nvm_memcpy+0x1b6>

			if (error_code != STATUS_OK) {
   16f92:	2328      	movs	r3, #40	; 0x28
   16f94:	33ff      	adds	r3, #255	; 0xff
   16f96:	18fb      	adds	r3, r7, r3
   16f98:	781b      	ldrb	r3, [r3, #0]
   16f9a:	2b00      	cmp	r3, #0
   16f9c:	d004      	beq.n	16fa8 <nvm_memcpy+0x1f0>
				return error_code;
   16f9e:	2328      	movs	r3, #40	; 0x28
   16fa0:	33ff      	adds	r3, #255	; 0xff
   16fa2:	18fb      	adds	r3, r7, r3
   16fa4:	781b      	ldrb	r3, [r3, #0]
   16fa6:	e05a      	b.n	1705e <nvm_memcpy+0x2a6>
			}
		}

		/* Write the updated row contents to the erased row */
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
   16fa8:	2300      	movs	r3, #0
   16faa:	228c      	movs	r2, #140	; 0x8c
   16fac:	0052      	lsls	r2, r2, #1
   16fae:	18ba      	adds	r2, r7, r2
   16fb0:	6013      	str	r3, [r2, #0]
   16fb2:	e034      	b.n	1701e <nvm_memcpy+0x266>
			do {
				error_code = nvm_write_buffer(
						row_start_address +
						(i * FLASH_PAGE_SIZE),
   16fb4:	238c      	movs	r3, #140	; 0x8c
   16fb6:	005b      	lsls	r3, r3, #1
   16fb8:	18fb      	adds	r3, r7, r3
   16fba:	681b      	ldr	r3, [r3, #0]
   16fbc:	019a      	lsls	r2, r3, #6
				error_code = nvm_write_buffer(
   16fbe:	238a      	movs	r3, #138	; 0x8a
   16fc0:	005b      	lsls	r3, r3, #1
   16fc2:	18fb      	adds	r3, r7, r3
   16fc4:	681b      	ldr	r3, [r3, #0]
   16fc6:	18d0      	adds	r0, r2, r3
						(row_buffer +
						(i * FLASH_PAGE_SIZE)),
   16fc8:	238c      	movs	r3, #140	; 0x8c
   16fca:	005b      	lsls	r3, r3, #1
   16fcc:	18fb      	adds	r3, r7, r3
   16fce:	681b      	ldr	r3, [r3, #0]
   16fd0:	019b      	lsls	r3, r3, #6
				error_code = nvm_write_buffer(
   16fd2:	2214      	movs	r2, #20
   16fd4:	18ba      	adds	r2, r7, r2
   16fd6:	18d3      	adds	r3, r2, r3
   16fd8:	2228      	movs	r2, #40	; 0x28
   16fda:	32ff      	adds	r2, #255	; 0xff
   16fdc:	18bc      	adds	r4, r7, r2
   16fde:	2240      	movs	r2, #64	; 0x40
   16fe0:	0019      	movs	r1, r3
   16fe2:	4b27      	ldr	r3, [pc, #156]	; (17080 <nvm_memcpy+0x2c8>)
   16fe4:	4798      	blx	r3
   16fe6:	0003      	movs	r3, r0
   16fe8:	7023      	strb	r3, [r4, #0]
						FLASH_PAGE_SIZE);
			} while (error_code == STATUS_BUSY);
   16fea:	2328      	movs	r3, #40	; 0x28
   16fec:	33ff      	adds	r3, #255	; 0xff
   16fee:	18fb      	adds	r3, r7, r3
   16ff0:	781b      	ldrb	r3, [r3, #0]
   16ff2:	2b05      	cmp	r3, #5
   16ff4:	d0de      	beq.n	16fb4 <nvm_memcpy+0x1fc>

			if (error_code != STATUS_OK) {
   16ff6:	2328      	movs	r3, #40	; 0x28
   16ff8:	33ff      	adds	r3, #255	; 0xff
   16ffa:	18fb      	adds	r3, r7, r3
   16ffc:	781b      	ldrb	r3, [r3, #0]
   16ffe:	2b00      	cmp	r3, #0
   17000:	d004      	beq.n	1700c <nvm_memcpy+0x254>
				return error_code;
   17002:	2328      	movs	r3, #40	; 0x28
   17004:	33ff      	adds	r3, #255	; 0xff
   17006:	18fb      	adds	r3, r7, r3
   17008:	781b      	ldrb	r3, [r3, #0]
   1700a:	e028      	b.n	1705e <nvm_memcpy+0x2a6>
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
   1700c:	238c      	movs	r3, #140	; 0x8c
   1700e:	005b      	lsls	r3, r3, #1
   17010:	18fb      	adds	r3, r7, r3
   17012:	681b      	ldr	r3, [r3, #0]
   17014:	3301      	adds	r3, #1
   17016:	228c      	movs	r2, #140	; 0x8c
   17018:	0052      	lsls	r2, r2, #1
   1701a:	18ba      	adds	r2, r7, r2
   1701c:	6013      	str	r3, [r2, #0]
   1701e:	238c      	movs	r3, #140	; 0x8c
   17020:	005b      	lsls	r3, r3, #1
   17022:	18fb      	adds	r3, r7, r3
   17024:	681b      	ldr	r3, [r3, #0]
   17026:	2b03      	cmp	r3, #3
   17028:	d9c4      	bls.n	16fb4 <nvm_memcpy+0x1fc>
			}
		}

		system_interrupt_leave_critical_section();
   1702a:	4b16      	ldr	r3, [pc, #88]	; (17084 <nvm_memcpy+0x2cc>)
   1702c:	4798      	blx	r3

		row_start_address += NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE;
   1702e:	238a      	movs	r3, #138	; 0x8a
   17030:	005b      	lsls	r3, r3, #1
   17032:	18fb      	adds	r3, r7, r3
   17034:	681b      	ldr	r3, [r3, #0]
   17036:	3301      	adds	r3, #1
   17038:	33ff      	adds	r3, #255	; 0xff
   1703a:	228a      	movs	r2, #138	; 0x8a
   1703c:	0052      	lsls	r2, r2, #1
   1703e:	18ba      	adds	r2, r7, r2
   17040:	6013      	str	r3, [r2, #0]
	while (length) {
   17042:	4b09      	ldr	r3, [pc, #36]	; (17068 <nvm_memcpy+0x2b0>)
   17044:	2294      	movs	r2, #148	; 0x94
   17046:	0052      	lsls	r2, r2, #1
   17048:	4694      	mov	ip, r2
   1704a:	44bc      	add	ip, r7
   1704c:	4463      	add	r3, ip
   1704e:	881b      	ldrh	r3, [r3, #0]
   17050:	2b00      	cmp	r3, #0
   17052:	d000      	beq.n	17056 <nvm_memcpy+0x29e>
   17054:	e6dc      	b.n	16e10 <nvm_memcpy+0x58>
	}

	return error_code;
   17056:	2328      	movs	r3, #40	; 0x28
   17058:	33ff      	adds	r3, #255	; 0xff
   1705a:	18fb      	adds	r3, r7, r3
   1705c:	781b      	ldrb	r3, [r3, #0]
}
   1705e:	0018      	movs	r0, r3
   17060:	46bd      	mov	sp, r7
   17062:	b04b      	add	sp, #300	; 0x12c
   17064:	bd90      	pop	{r4, r7, pc}
   17066:	46c0      	nop			; (mov r8, r8)
   17068:	fffffede 	.word	0xfffffede
   1706c:	fffffedd 	.word	0xfffffedd
   17070:	00001de9 	.word	0x00001de9
   17074:	fffffeec 	.word	0xfffffeec
   17078:	00016c79 	.word	0x00016c79
   1707c:	00001efd 	.word	0x00001efd
   17080:	00001c5d 	.word	0x00001c5d
   17084:	00016c8d 	.word	0x00016c8d

00017088 <nvm_write>:

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
   17088:	b590      	push	{r4, r7, lr}
   1708a:	b085      	sub	sp, #20
   1708c:	af00      	add	r7, sp, #0
   1708e:	60b9      	str	r1, [r7, #8]
   17090:	607a      	str	r2, [r7, #4]
   17092:	603b      	str	r3, [r7, #0]
   17094:	230f      	movs	r3, #15
   17096:	18fb      	adds	r3, r7, r3
   17098:	1c02      	adds	r2, r0, #0
   1709a:	701a      	strb	r2, [r3, #0]
	switch (mem) {
   1709c:	230f      	movs	r3, #15
   1709e:	18fb      	adds	r3, r7, r3
   170a0:	781b      	ldrb	r3, [r3, #0]
   170a2:	2b00      	cmp	r3, #0
   170a4:	d10b      	bne.n	170be <nvm_write+0x36>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
   170a6:	683b      	ldr	r3, [r7, #0]
   170a8:	b29a      	uxth	r2, r3
   170aa:	6879      	ldr	r1, [r7, #4]
   170ac:	68b8      	ldr	r0, [r7, #8]
   170ae:	2301      	movs	r3, #1
   170b0:	4c07      	ldr	r4, [pc, #28]	; (170d0 <nvm_write+0x48>)
   170b2:	47a0      	blx	r4
   170b4:	1e03      	subs	r3, r0, #0
   170b6:	d005      	beq.n	170c4 <nvm_write+0x3c>
		{
			return ERR_INVALID_ARG;
   170b8:	2308      	movs	r3, #8
   170ba:	425b      	negs	r3, r3
   170bc:	e004      	b.n	170c8 <nvm_write+0x40>
		}
		break;

	default:
		return ERR_INVALID_ARG;
   170be:	2308      	movs	r3, #8
   170c0:	425b      	negs	r3, r3
   170c2:	e001      	b.n	170c8 <nvm_write+0x40>
		break;
   170c4:	46c0      	nop			; (mov r8, r8)
	}

	return STATUS_OK;
   170c6:	2300      	movs	r3, #0
}
   170c8:	0018      	movs	r0, r3
   170ca:	46bd      	mov	sp, r7
   170cc:	b005      	add	sp, #20
   170ce:	bd90      	pop	{r4, r7, pc}
   170d0:	00016db9 	.word	0x00016db9

000170d4 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
   170d4:	b580      	push	{r7, lr}
   170d6:	b084      	sub	sp, #16
   170d8:	af00      	add	r7, sp, #0
   170da:	0002      	movs	r2, r0
   170dc:	1dfb      	adds	r3, r7, #7
   170de:	701a      	strb	r2, [r3, #0]
	if (INT_FLASH == mem) {
   170e0:	1dfb      	adds	r3, r7, #7
   170e2:	781b      	ldrb	r3, [r3, #0]
   170e4:	2b00      	cmp	r3, #0
   170e6:	d113      	bne.n	17110 <nvm_init+0x3c>
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);
   170e8:	2308      	movs	r3, #8
   170ea:	18fb      	adds	r3, r7, r3
   170ec:	0018      	movs	r0, r3
   170ee:	4b0b      	ldr	r3, [pc, #44]	; (1711c <nvm_init+0x48>)
   170f0:	4798      	blx	r3

		/* Enable automatic page write mode */
		config.manual_page_write = false;
   170f2:	2308      	movs	r3, #8
   170f4:	18fb      	adds	r3, r7, r3
   170f6:	2200      	movs	r2, #0
   170f8:	705a      	strb	r2, [r3, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
   170fa:	2308      	movs	r3, #8
   170fc:	18fb      	adds	r3, r7, r3
   170fe:	2202      	movs	r2, #2
   17100:	709a      	strb	r2, [r3, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
   17102:	2308      	movs	r3, #8
   17104:	18fb      	adds	r3, r7, r3
   17106:	0018      	movs	r0, r3
   17108:	4b05      	ldr	r3, [pc, #20]	; (17120 <nvm_init+0x4c>)
   1710a:	4798      	blx	r3

		return STATUS_OK;
   1710c:	2300      	movs	r3, #0
   1710e:	e001      	b.n	17114 <nvm_init+0x40>
	}

	return ERR_INVALID_ARG;
   17110:	2308      	movs	r3, #8
   17112:	425b      	negs	r3, r3
}
   17114:	0018      	movs	r0, r3
   17116:	46bd      	mov	sp, r7
   17118:	b004      	add	sp, #16
   1711a:	bd80      	pop	{r7, pc}
   1711c:	00016c15 	.word	0x00016c15
   17120:	00001a11 	.word	0x00001a11

00017124 <cert_app_init>:

/*********************************************************************//**
\brief    Initialization the Demo application
*************************************************************************/
void cert_app_init(void)
{
   17124:	b590      	push	{r4, r7, lr}
   17126:	b083      	sub	sp, #12
   17128:	af00      	add	r7, sp, #0
    StackRetStatus_t status;

#if (ENABLE_PDS == 1)
    PDS_RestoreAll();
   1712a:	4b3a      	ldr	r3, [pc, #232]	; (17214 <cert_app_init+0xf0>)
   1712c:	4798      	blx	r3
#endif

    status = SwTimerCreate(&certAppTimerId);
   1712e:	1dfc      	adds	r4, r7, #7
   17130:	4b39      	ldr	r3, [pc, #228]	; (17218 <cert_app_init+0xf4>)
   17132:	0018      	movs	r0, r3
   17134:	4b39      	ldr	r3, [pc, #228]	; (1721c <cert_app_init+0xf8>)
   17136:	4798      	blx	r3
   17138:	0003      	movs	r3, r0
   1713a:	7023      	strb	r3, [r4, #0]

    if(status!=LORAWAN_SUCCESS)
   1713c:	1dfb      	adds	r3, r7, #7
   1713e:	781b      	ldrb	r3, [r3, #0]
   17140:	2b08      	cmp	r3, #8
   17142:	d004      	beq.n	1714e <cert_app_init+0x2a>
    {
        printf("\r\nUnable to start certification timer. Pls check");
   17144:	4b36      	ldr	r3, [pc, #216]	; (17220 <cert_app_init+0xfc>)
   17146:	0018      	movs	r0, r3
   17148:	4b36      	ldr	r3, [pc, #216]	; (17224 <cert_app_init+0x100>)
   1714a:	4798      	blx	r3
        while(1);
   1714c:	e7fe      	b.n	1714c <cert_app_init+0x28>
    }
    
    status = SwTimerCreate(&tx_cw_timer);
   1714e:	1dfc      	adds	r4, r7, #7
   17150:	4b35      	ldr	r3, [pc, #212]	; (17228 <cert_app_init+0x104>)
   17152:	0018      	movs	r0, r3
   17154:	4b31      	ldr	r3, [pc, #196]	; (1721c <cert_app_init+0xf8>)
   17156:	4798      	blx	r3
   17158:	0003      	movs	r3, r0
   1715a:	7023      	strb	r3, [r4, #0]
    if(status!=LORAWAN_SUCCESS)
   1715c:	1dfb      	adds	r3, r7, #7
   1715e:	781b      	ldrb	r3, [r3, #0]
   17160:	2b08      	cmp	r3, #8
   17162:	d004      	beq.n	1716e <cert_app_init+0x4a>
    {
        printf("\r\nUnable to create CW TX timer. Pls check");
   17164:	4b31      	ldr	r3, [pc, #196]	; (1722c <cert_app_init+0x108>)
   17166:	0018      	movs	r0, r3
   17168:	4b2e      	ldr	r3, [pc, #184]	; (17224 <cert_app_init+0x100>)
   1716a:	4798      	blx	r3
        while(1);
   1716c:	e7fe      	b.n	1716c <cert_app_init+0x48>
    }

    /* Initialize the LORAWAN Stack */
    LORAWAN_Init(cert_appdata_callback, cert_joindata_callback);
   1716e:	4a30      	ldr	r2, [pc, #192]	; (17230 <cert_app_init+0x10c>)
   17170:	4b30      	ldr	r3, [pc, #192]	; (17234 <cert_app_init+0x110>)
   17172:	0011      	movs	r1, r2
   17174:	0018      	movs	r0, r3
   17176:	4b30      	ldr	r3, [pc, #192]	; (17238 <cert_app_init+0x114>)
   17178:	4798      	blx	r3
    {
        printf("\nCertification cannot be run for the current regional band configuration\n\r");
        while(1);
    }
*/
    while(!cert_select_band());
   1717a:	46c0      	nop			; (mov r8, r8)
   1717c:	4b2f      	ldr	r3, [pc, #188]	; (1723c <cert_app_init+0x118>)
   1717e:	4798      	blx	r3
   17180:	0003      	movs	r3, r0
   17182:	001a      	movs	r2, r3
   17184:	2301      	movs	r3, #1
   17186:	4053      	eors	r3, r2
   17188:	b2db      	uxtb	r3, r3
   1718a:	2b00      	cmp	r3, #0
   1718c:	d1f6      	bne.n	1717c <cert_app_init+0x58>

    status = cert_set_mac_parameters();
   1718e:	1dfc      	adds	r4, r7, #7
   17190:	4b2b      	ldr	r3, [pc, #172]	; (17240 <cert_app_init+0x11c>)
   17192:	4798      	blx	r3
   17194:	0003      	movs	r3, r0
   17196:	7023      	strb	r3, [r4, #0]

    if (LORAWAN_SUCCESS != status)
   17198:	1dfb      	adds	r3, r7, #7
   1719a:	781b      	ldrb	r3, [r3, #0]
   1719c:	2b08      	cmp	r3, #8
   1719e:	d003      	beq.n	171a8 <cert_app_init+0x84>
    {
        printf("\nMAC parameters initialization failed\n\r");
   171a0:	4b28      	ldr	r3, [pc, #160]	; (17244 <cert_app_init+0x120>)
   171a2:	0018      	movs	r0, r3
   171a4:	4b1f      	ldr	r3, [pc, #124]	; (17224 <cert_app_init+0x100>)
   171a6:	4798      	blx	r3
    }
    /* Initialize the join parameters */
    status = cert_set_join_parameters(LORAWAN_ABP);
   171a8:	1dfc      	adds	r4, r7, #7
   171aa:	2001      	movs	r0, #1
   171ac:	4b26      	ldr	r3, [pc, #152]	; (17248 <cert_app_init+0x124>)
   171ae:	4798      	blx	r3
   171b0:	0003      	movs	r3, r0
   171b2:	7023      	strb	r3, [r4, #0]
    if (LORAWAN_SUCCESS != status)
   171b4:	1dfb      	adds	r3, r7, #7
   171b6:	781b      	ldrb	r3, [r3, #0]
   171b8:	2b08      	cmp	r3, #8
   171ba:	d003      	beq.n	171c4 <cert_app_init+0xa0>
    {
        printf("\nJoin parameters initialization failed\n\r");
   171bc:	4b23      	ldr	r3, [pc, #140]	; (1724c <cert_app_init+0x128>)
   171be:	0018      	movs	r0, r3
   171c0:	4b18      	ldr	r3, [pc, #96]	; (17224 <cert_app_init+0x100>)
   171c2:	4798      	blx	r3
    }

    status = cert_set_join_parameters(LORAWAN_OTAA);
   171c4:	1dfc      	adds	r4, r7, #7
   171c6:	2000      	movs	r0, #0
   171c8:	4b1f      	ldr	r3, [pc, #124]	; (17248 <cert_app_init+0x124>)
   171ca:	4798      	blx	r3
   171cc:	0003      	movs	r3, r0
   171ce:	7023      	strb	r3, [r4, #0]
    if (LORAWAN_SUCCESS != status)
   171d0:	1dfb      	adds	r3, r7, #7
   171d2:	781b      	ldrb	r3, [r3, #0]
   171d4:	2b08      	cmp	r3, #8
   171d6:	d003      	beq.n	171e0 <cert_app_init+0xbc>
    {
        printf("\nOTAA Join parameters initialization failed\n\r");
   171d8:	4b1d      	ldr	r3, [pc, #116]	; (17250 <cert_app_init+0x12c>)
   171da:	0018      	movs	r0, r3
   171dc:	4b11      	ldr	r3, [pc, #68]	; (17224 <cert_app_init+0x100>)
   171de:	4798      	blx	r3
    }
    /* Send Join request */
    status = LORAWAN_Join(CERT_APP_ACTIVATION_TYPE);
   171e0:	1dfc      	adds	r4, r7, #7
   171e2:	2000      	movs	r0, #0
   171e4:	4b1b      	ldr	r3, [pc, #108]	; (17254 <cert_app_init+0x130>)
   171e6:	4798      	blx	r3
   171e8:	0003      	movs	r3, r0
   171ea:	7023      	strb	r3, [r4, #0]
    if (status == LORAWAN_SUCCESS)
   171ec:	1dfb      	adds	r3, r7, #7
   171ee:	781b      	ldrb	r3, [r3, #0]
   171f0:	2b08      	cmp	r3, #8
   171f2:	d106      	bne.n	17202 <cert_app_init+0xde>
    {
        printf("\n%s Join Request Sent\n\r", (LORAWAN_OTAA == CERT_APP_ACTIVATION_TYPE) ? "OTAA" : "ABP");
   171f4:	4a18      	ldr	r2, [pc, #96]	; (17258 <cert_app_init+0x134>)
   171f6:	4b19      	ldr	r3, [pc, #100]	; (1725c <cert_app_init+0x138>)
   171f8:	0011      	movs	r1, r2
   171fa:	0018      	movs	r0, r3
   171fc:	4b09      	ldr	r3, [pc, #36]	; (17224 <cert_app_init+0x100>)
   171fe:	4798      	blx	r3
    }
    else
    {
        print_stack_status(status);
    }
}
   17200:	e004      	b.n	1720c <cert_app_init+0xe8>
        print_stack_status(status);
   17202:	1dfb      	adds	r3, r7, #7
   17204:	781b      	ldrb	r3, [r3, #0]
   17206:	0018      	movs	r0, r3
   17208:	4b15      	ldr	r3, [pc, #84]	; (17260 <cert_app_init+0x13c>)
   1720a:	4798      	blx	r3
}
   1720c:	46c0      	nop			; (mov r8, r8)
   1720e:	46bd      	mov	sp, r7
   17210:	b003      	add	sp, #12
   17212:	bd90      	pop	{r4, r7, pc}
   17214:	00013cc9 	.word	0x00013cc9
   17218:	20001aa4 	.word	0x20001aa4
   1721c:	00015965 	.word	0x00015965
   17220:	0002b568 	.word	0x0002b568
   17224:	00024261 	.word	0x00024261
   17228:	20001a3e 	.word	0x20001a3e
   1722c:	0002b59c 	.word	0x0002b59c
   17230:	000175e5 	.word	0x000175e5
   17234:	000173ad 	.word	0x000173ad
   17238:	0001ac91 	.word	0x0001ac91
   1723c:	00017265 	.word	0x00017265
   17240:	00017b0d 	.word	0x00017b0d
   17244:	0002b5c8 	.word	0x0002b5c8
   17248:	000176bd 	.word	0x000176bd
   1724c:	0002b5f0 	.word	0x0002b5f0
   17250:	0002b61c 	.word	0x0002b61c
   17254:	0001bb9d 	.word	0x0001bb9d
   17258:	0002b64c 	.word	0x0002b64c
   1725c:	0002b654 	.word	0x0002b654
   17260:	00017379 	.word	0x00017379

00017264 <cert_select_band>:
 \brief      Select Band to reset LORAWAN Stack
 \return     true, if a valid band is selected
             false, otherwise
 ************************************************************************/
static bool cert_select_band(void)
{
   17264:	b580      	push	{r7, lr}
   17266:	b084      	sub	sp, #16
   17268:	af00      	add	r7, sp, #0
    printf("\r\nPlease select one of the band given below\r\n");
   1726a:	4b32      	ldr	r3, [pc, #200]	; (17334 <cert_select_band+0xd0>)
   1726c:	0018      	movs	r0, r3
   1726e:	4b32      	ldr	r3, [pc, #200]	; (17338 <cert_select_band+0xd4>)
   17270:	4798      	blx	r3
    for(uint8_t i = 1;i < sizeof(bandTable); i++)
   17272:	230f      	movs	r3, #15
   17274:	18fb      	adds	r3, r7, r3
   17276:	2201      	movs	r2, #1
   17278:	701a      	strb	r2, [r3, #0]
   1727a:	e013      	b.n	172a4 <cert_select_band+0x40>
    {
        printf("%d. %s\r\n",i,bandStrings[i]);
   1727c:	230f      	movs	r3, #15
   1727e:	18fb      	adds	r3, r7, r3
   17280:	7819      	ldrb	r1, [r3, #0]
   17282:	230f      	movs	r3, #15
   17284:	18fb      	adds	r3, r7, r3
   17286:	781a      	ldrb	r2, [r3, #0]
   17288:	4b2c      	ldr	r3, [pc, #176]	; (1733c <cert_select_band+0xd8>)
   1728a:	0092      	lsls	r2, r2, #2
   1728c:	58d2      	ldr	r2, [r2, r3]
   1728e:	4b2c      	ldr	r3, [pc, #176]	; (17340 <cert_select_band+0xdc>)
   17290:	0018      	movs	r0, r3
   17292:	4b2c      	ldr	r3, [pc, #176]	; (17344 <cert_select_band+0xe0>)
   17294:	4798      	blx	r3
    for(uint8_t i = 1;i < sizeof(bandTable); i++)
   17296:	230f      	movs	r3, #15
   17298:	18fb      	adds	r3, r7, r3
   1729a:	781a      	ldrb	r2, [r3, #0]
   1729c:	230f      	movs	r3, #15
   1729e:	18fb      	adds	r3, r7, r3
   172a0:	3201      	adds	r2, #1
   172a2:	701a      	strb	r2, [r3, #0]
   172a4:	230f      	movs	r3, #15
   172a6:	18fb      	adds	r3, r7, r3
   172a8:	781b      	ldrb	r3, [r3, #0]
   172aa:	2b07      	cmp	r3, #7
   172ac:	d9e6      	bls.n	1727c <cert_select_band+0x18>
    }
    printf("Select Regional Band : ");
   172ae:	4b26      	ldr	r3, [pc, #152]	; (17348 <cert_select_band+0xe4>)
   172b0:	0018      	movs	r0, r3
   172b2:	4b24      	ldr	r3, [pc, #144]	; (17344 <cert_select_band+0xe0>)
   172b4:	4798      	blx	r3

    char rxChar;
    rxChar = sio2host_getchar();
   172b6:	4b25      	ldr	r3, [pc, #148]	; (1734c <cert_select_band+0xe8>)
   172b8:	4798      	blx	r3
   172ba:	0003      	movs	r3, r0
   172bc:	001a      	movs	r2, r3
   172be:	1dfb      	adds	r3, r7, #7
   172c0:	701a      	strb	r2, [r3, #0]
    const char *charPtr = &rxChar;
   172c2:	1dfb      	adds	r3, r7, #7
   172c4:	60bb      	str	r3, [r7, #8]
    current_band = atoi(charPtr);
   172c6:	68bb      	ldr	r3, [r7, #8]
   172c8:	0018      	movs	r0, r3
   172ca:	4b21      	ldr	r3, [pc, #132]	; (17350 <cert_select_band+0xec>)
   172cc:	4798      	blx	r3
   172ce:	0003      	movs	r3, r0
   172d0:	b2da      	uxtb	r2, r3
   172d2:	4b20      	ldr	r3, [pc, #128]	; (17354 <cert_select_band+0xf0>)
   172d4:	701a      	strb	r2, [r3, #0]
    if ( (current_band >= sizeof(bandTable)) || (current_band == 0) )
   172d6:	4b1f      	ldr	r3, [pc, #124]	; (17354 <cert_select_band+0xf0>)
   172d8:	781b      	ldrb	r3, [r3, #0]
   172da:	2b07      	cmp	r3, #7
   172dc:	d803      	bhi.n	172e6 <cert_select_band+0x82>
   172de:	4b1d      	ldr	r3, [pc, #116]	; (17354 <cert_select_band+0xf0>)
   172e0:	781b      	ldrb	r3, [r3, #0]
   172e2:	2b00      	cmp	r3, #0
   172e4:	d101      	bne.n	172ea <cert_select_band+0x86>
    {
        return false;
   172e6:	2300      	movs	r3, #0
   172e8:	e020      	b.n	1732c <cert_select_band+0xc8>
    }
    else
    {
      LORAWAN_Reset(bandTable[current_band]);
   172ea:	4b1a      	ldr	r3, [pc, #104]	; (17354 <cert_select_band+0xf0>)
   172ec:	781b      	ldrb	r3, [r3, #0]
   172ee:	001a      	movs	r2, r3
   172f0:	4b19      	ldr	r3, [pc, #100]	; (17358 <cert_select_band+0xf4>)
   172f2:	5c9b      	ldrb	r3, [r3, r2]
   172f4:	0018      	movs	r0, r3
   172f6:	4b19      	ldr	r3, [pc, #100]	; (1735c <cert_select_band+0xf8>)
   172f8:	4798      	blx	r3
	  #if (NA_BAND == 1 || AU_BAND == 1)
	  if ((bandTable[current_band] == ISM_NA915) || (bandTable[current_band] == ISM_AU915))
   172fa:	4b16      	ldr	r3, [pc, #88]	; (17354 <cert_select_band+0xf0>)
   172fc:	781b      	ldrb	r3, [r3, #0]
   172fe:	001a      	movs	r2, r3
   17300:	4b15      	ldr	r3, [pc, #84]	; (17358 <cert_select_band+0xf4>)
   17302:	5c9b      	ldrb	r3, [r3, r2]
   17304:	2b02      	cmp	r3, #2
   17306:	d006      	beq.n	17316 <cert_select_band+0xb2>
   17308:	4b12      	ldr	r3, [pc, #72]	; (17354 <cert_select_band+0xf0>)
   1730a:	781b      	ldrb	r3, [r3, #0]
   1730c:	001a      	movs	r2, r3
   1730e:	4b12      	ldr	r3, [pc, #72]	; (17358 <cert_select_band+0xf4>)
   17310:	5c9b      	ldrb	r3, [r3, r2]
   17312:	2b03      	cmp	r3, #3
   17314:	d101      	bne.n	1731a <cert_select_band+0xb6>
	  {
		  cert_enable_channels();
   17316:	4b12      	ldr	r3, [pc, #72]	; (17360 <cert_select_band+0xfc>)
   17318:	4798      	blx	r3
	  }
	 #endif
    }

    printf("\n\n\r........................................\n\r");
   1731a:	4b12      	ldr	r3, [pc, #72]	; (17364 <cert_select_band+0x100>)
   1731c:	0018      	movs	r0, r3
   1731e:	4b09      	ldr	r3, [pc, #36]	; (17344 <cert_select_band+0xe0>)
   17320:	4798      	blx	r3
//    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    printf("\r\nInit - Successful\r\n");
   17322:	4b11      	ldr	r3, [pc, #68]	; (17368 <cert_select_band+0x104>)
   17324:	0018      	movs	r0, r3
   17326:	4b04      	ldr	r3, [pc, #16]	; (17338 <cert_select_band+0xd4>)
   17328:	4798      	blx	r3
    return true;
   1732a:	2301      	movs	r3, #1
}
   1732c:	0018      	movs	r0, r3
   1732e:	46bd      	mov	sp, r7
   17330:	b004      	add	sp, #16
   17332:	bd80      	pop	{r7, pc}
   17334:	0002b66c 	.word	0x0002b66c
   17338:	00024325 	.word	0x00024325
   1733c:	20000078 	.word	0x20000078
   17340:	0002b69c 	.word	0x0002b69c
   17344:	00024261 	.word	0x00024261
   17348:	0002b6a8 	.word	0x0002b6a8
   1734c:	000068c9 	.word	0x000068c9
   17350:	000240f5 	.word	0x000240f5
   17354:	20001a3f 	.word	0x20001a3f
   17358:	20000098 	.word	0x20000098
   1735c:	0001e4cd 	.word	0x0001e4cd
   17360:	0001736d 	.word	0x0001736d
   17364:	0002b6c0 	.word	0x0002b6c0
   17368:	0002b6f0 	.word	0x0002b6f0

0001736c <cert_enable_channels>:
/*********************************************************************//*
 \brief      Enable channels if NA or AU band is selected
 \return     None
 ************************************************************************/
static void cert_enable_channels(void)
{
   1736c:	b580      	push	{r7, lr}
   1736e:	af00      	add	r7, sp, #0
			}

			LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
		}
	#endif	
}
   17370:	46c0      	nop			; (mov r8, r8)
   17372:	46bd      	mov	sp, r7
   17374:	bd80      	pop	{r7, pc}
	...

00017378 <print_stack_status>:
/*********************************************************************//*
 \brief      Function to Print stack return status
 \param[in]  status - Status from the stack
 ************************************************************************/
static void print_stack_status(StackRetStatus_t status)
{
   17378:	b580      	push	{r7, lr}
   1737a:	b082      	sub	sp, #8
   1737c:	af00      	add	r7, sp, #0
   1737e:	0002      	movs	r2, r0
   17380:	1dfb      	adds	r3, r7, #7
   17382:	701a      	strb	r2, [r3, #0]
    printf("\n>> %s\n\r", status_message[status]);
   17384:	1dfb      	adds	r3, r7, #7
   17386:	781a      	ldrb	r2, [r3, #0]
   17388:	4b05      	ldr	r3, [pc, #20]	; (173a0 <print_stack_status+0x28>)
   1738a:	0092      	lsls	r2, r2, #2
   1738c:	58d2      	ldr	r2, [r2, r3]
   1738e:	4b05      	ldr	r3, [pc, #20]	; (173a4 <print_stack_status+0x2c>)
   17390:	0011      	movs	r1, r2
   17392:	0018      	movs	r0, r3
   17394:	4b04      	ldr	r3, [pc, #16]	; (173a8 <print_stack_status+0x30>)
   17396:	4798      	blx	r3

}
   17398:	46c0      	nop			; (mov r8, r8)
   1739a:	46bd      	mov	sp, r7
   1739c:	b002      	add	sp, #8
   1739e:	bd80      	pop	{r7, pc}
   173a0:	200000a0 	.word	0x200000a0
   173a4:	0002b708 	.word	0x0002b708
   173a8:	00024261 	.word	0x00024261

000173ac <cert_appdata_callback>:
/*********************************************************************//**
\brief Callback function for the ending of Bidirectional communication of
       Application data
 *************************************************************************/
static void cert_appdata_callback(void *appHandle, appCbParams_t *appdata)
{
   173ac:	b580      	push	{r7, lr}
   173ae:	b088      	sub	sp, #32
   173b0:	af00      	add	r7, sp, #0
   173b2:	6078      	str	r0, [r7, #4]
   173b4:	6039      	str	r1, [r7, #0]
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
   173b6:	683b      	ldr	r3, [r7, #0]
   173b8:	781b      	ldrb	r3, [r3, #0]
   173ba:	2b02      	cmp	r3, #2
   173bc:	d000      	beq.n	173c0 <cert_appdata_callback+0x14>
   173be:	e082      	b.n	174c6 <cert_appdata_callback+0x11a>
    {
        uint8_t *pData = appdata->param.rxData.pData;
   173c0:	683b      	ldr	r3, [r7, #0]
   173c2:	689b      	ldr	r3, [r3, #8]
   173c4:	61bb      	str	r3, [r7, #24]
        uint8_t dataLength = appdata->param.rxData.dataLength;
   173c6:	2317      	movs	r3, #23
   173c8:	18fb      	adds	r3, r7, r3
   173ca:	683a      	ldr	r2, [r7, #0]
   173cc:	7b12      	ldrb	r2, [r2, #12]
   173ce:	701a      	strb	r2, [r3, #0]
        StackRetStatus_t status = appdata->param.rxData.status;
   173d0:	2316      	movs	r3, #22
   173d2:	18fb      	adds	r3, r7, r3
   173d4:	683a      	ldr	r2, [r7, #0]
   173d6:	7b52      	ldrb	r2, [r2, #13]
   173d8:	701a      	strb	r2, [r3, #0]
        uint32_t downcounter;
        LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &downcounter);
   173da:	2310      	movs	r3, #16
   173dc:	18fb      	adds	r3, r7, r3
   173de:	001a      	movs	r2, r3
   173e0:	2100      	movs	r1, #0
   173e2:	200b      	movs	r0, #11
   173e4:	4b6b      	ldr	r3, [pc, #428]	; (17594 <cert_appdata_callback+0x1e8>)
   173e6:	4798      	blx	r3

        switch(status)
   173e8:	2316      	movs	r3, #22
   173ea:	18fb      	adds	r3, r7, r3
   173ec:	781b      	ldrb	r3, [r3, #0]
   173ee:	2b08      	cmp	r3, #8
   173f0:	d000      	beq.n	173f4 <cert_appdata_callback+0x48>
            break;


            default:
                ;
            break;
   173f2:	e061      	b.n	174b8 <cert_appdata_callback+0x10c>
                 pktRxd = true;
   173f4:	4b68      	ldr	r3, [pc, #416]	; (17598 <cert_appdata_callback+0x1ec>)
   173f6:	2201      	movs	r2, #1
   173f8:	701a      	strb	r2, [r3, #0]
                 cnfTxInProgress = false;
   173fa:	4b68      	ldr	r3, [pc, #416]	; (1759c <cert_appdata_callback+0x1f0>)
   173fc:	2200      	movs	r2, #0
   173fe:	701a      	strb	r2, [r3, #0]
                 if((dataLength > 0U) && (NULL != pData))
   17400:	2317      	movs	r3, #23
   17402:	18fb      	adds	r3, r7, r3
   17404:	781b      	ldrb	r3, [r3, #0]
   17406:	2b00      	cmp	r3, #0
   17408:	d048      	beq.n	1749c <cert_appdata_callback+0xf0>
   1740a:	69bb      	ldr	r3, [r7, #24]
   1740c:	2b00      	cmp	r3, #0
   1740e:	d045      	beq.n	1749c <cert_appdata_callback+0xf0>
                     printf("\n--------------- Downlink ---------------\n\r");
   17410:	4b63      	ldr	r3, [pc, #396]	; (175a0 <cert_appdata_callback+0x1f4>)
   17412:	0018      	movs	r0, r3
   17414:	4b63      	ldr	r3, [pc, #396]	; (175a4 <cert_appdata_callback+0x1f8>)
   17416:	4798      	blx	r3
                     printf("\n  Fport : %d", pData[0]);
   17418:	69bb      	ldr	r3, [r7, #24]
   1741a:	781b      	ldrb	r3, [r3, #0]
   1741c:	001a      	movs	r2, r3
   1741e:	4b62      	ldr	r3, [pc, #392]	; (175a8 <cert_appdata_callback+0x1fc>)
   17420:	0011      	movs	r1, r2
   17422:	0018      	movs	r0, r3
   17424:	4b5f      	ldr	r3, [pc, #380]	; (175a4 <cert_appdata_callback+0x1f8>)
   17426:	4798      	blx	r3
                     printf("\nPayload : ");
   17428:	4b60      	ldr	r3, [pc, #384]	; (175ac <cert_appdata_callback+0x200>)
   1742a:	0018      	movs	r0, r3
   1742c:	4b5d      	ldr	r3, [pc, #372]	; (175a4 <cert_appdata_callback+0x1f8>)
   1742e:	4798      	blx	r3
                     for (uint8_t i = 0; i < dataLength - 1; i++)
   17430:	231f      	movs	r3, #31
   17432:	18fb      	adds	r3, r7, r3
   17434:	2200      	movs	r2, #0
   17436:	701a      	strb	r2, [r3, #0]
   17438:	e013      	b.n	17462 <cert_appdata_callback+0xb6>
                         printf("%02X", pData[i+1]);
   1743a:	231f      	movs	r3, #31
   1743c:	18fb      	adds	r3, r7, r3
   1743e:	781b      	ldrb	r3, [r3, #0]
   17440:	3301      	adds	r3, #1
   17442:	69ba      	ldr	r2, [r7, #24]
   17444:	18d3      	adds	r3, r2, r3
   17446:	781b      	ldrb	r3, [r3, #0]
   17448:	001a      	movs	r2, r3
   1744a:	4b59      	ldr	r3, [pc, #356]	; (175b0 <cert_appdata_callback+0x204>)
   1744c:	0011      	movs	r1, r2
   1744e:	0018      	movs	r0, r3
   17450:	4b54      	ldr	r3, [pc, #336]	; (175a4 <cert_appdata_callback+0x1f8>)
   17452:	4798      	blx	r3
                     for (uint8_t i = 0; i < dataLength - 1; i++)
   17454:	231f      	movs	r3, #31
   17456:	18fb      	adds	r3, r7, r3
   17458:	781a      	ldrb	r2, [r3, #0]
   1745a:	231f      	movs	r3, #31
   1745c:	18fb      	adds	r3, r7, r3
   1745e:	3201      	adds	r2, #1
   17460:	701a      	strb	r2, [r3, #0]
   17462:	231f      	movs	r3, #31
   17464:	18fb      	adds	r3, r7, r3
   17466:	781a      	ldrb	r2, [r3, #0]
   17468:	2317      	movs	r3, #23
   1746a:	18fb      	adds	r3, r7, r3
   1746c:	781b      	ldrb	r3, [r3, #0]
   1746e:	3b01      	subs	r3, #1
   17470:	429a      	cmp	r2, r3
   17472:	dbe2      	blt.n	1743a <cert_appdata_callback+0x8e>
                     printf("\n\r");
   17474:	4b4f      	ldr	r3, [pc, #316]	; (175b4 <cert_appdata_callback+0x208>)
   17476:	0018      	movs	r0, r3
   17478:	4b4a      	ldr	r3, [pc, #296]	; (175a4 <cert_appdata_callback+0x1f8>)
   1747a:	4798      	blx	r3
                     if(pData[0] == TEST_PORT_NB)
   1747c:	69bb      	ldr	r3, [r7, #24]
   1747e:	781b      	ldrb	r3, [r3, #0]
   17480:	2be0      	cmp	r3, #224	; 0xe0
   17482:	d115      	bne.n	174b0 <cert_appdata_callback+0x104>
                        cert_handle_cert_rx_data(pData+1,dataLength-1);
   17484:	69bb      	ldr	r3, [r7, #24]
   17486:	1c5a      	adds	r2, r3, #1
   17488:	2317      	movs	r3, #23
   1748a:	18fb      	adds	r3, r7, r3
   1748c:	781b      	ldrb	r3, [r3, #0]
   1748e:	3b01      	subs	r3, #1
   17490:	b2db      	uxtb	r3, r3
   17492:	0019      	movs	r1, r3
   17494:	0010      	movs	r0, r2
   17496:	4b48      	ldr	r3, [pc, #288]	; (175b8 <cert_appdata_callback+0x20c>)
   17498:	4798      	blx	r3
                     if(pData[0] == TEST_PORT_NB)
   1749a:	e009      	b.n	174b0 <cert_appdata_callback+0x104>
                     uplinkTestNoResp++;
   1749c:	4b47      	ldr	r3, [pc, #284]	; (175bc <cert_appdata_callback+0x210>)
   1749e:	781b      	ldrb	r3, [r3, #0]
   174a0:	3301      	adds	r3, #1
   174a2:	b2da      	uxtb	r2, r3
   174a4:	4b45      	ldr	r3, [pc, #276]	; (175bc <cert_appdata_callback+0x210>)
   174a6:	701a      	strb	r2, [r3, #0]
                     printf("\nReceived ACK for Confirmed data\r\n");
   174a8:	4b45      	ldr	r3, [pc, #276]	; (175c0 <cert_appdata_callback+0x214>)
   174aa:	0018      	movs	r0, r3
   174ac:	4b45      	ldr	r3, [pc, #276]	; (175c4 <cert_appdata_callback+0x218>)
   174ae:	4798      	blx	r3
                 uplinkTestNoResp = 0;
   174b0:	4b42      	ldr	r3, [pc, #264]	; (175bc <cert_appdata_callback+0x210>)
   174b2:	2200      	movs	r2, #0
   174b4:	701a      	strb	r2, [r3, #0]
            break;
   174b6:	46c0      	nop			; (mov r8, r8)
        }
        print_stack_status(status);
   174b8:	2316      	movs	r3, #22
   174ba:	18fb      	adds	r3, r7, r3
   174bc:	781b      	ldrb	r3, [r3, #0]
   174be:	0018      	movs	r0, r3
   174c0:	4b41      	ldr	r3, [pc, #260]	; (175c8 <cert_appdata_callback+0x21c>)
   174c2:	4798      	blx	r3
            break;
        }
        print_stack_status(appdata->param.transCmpl.status);
        printf("\n========================================\n\r");
    }
}
   174c4:	e061      	b.n	1758a <cert_appdata_callback+0x1de>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
   174c6:	683b      	ldr	r3, [r7, #0]
   174c8:	781b      	ldrb	r3, [r3, #0]
   174ca:	2b04      	cmp	r3, #4
   174cc:	d15d      	bne.n	1758a <cert_appdata_callback+0x1de>
        LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &upcounter);
   174ce:	2308      	movs	r3, #8
   174d0:	18fb      	adds	r3, r7, r3
   174d2:	001a      	movs	r2, r3
   174d4:	2100      	movs	r1, #0
   174d6:	200a      	movs	r0, #10
   174d8:	4b2e      	ldr	r3, [pc, #184]	; (17594 <cert_appdata_callback+0x1e8>)
   174da:	4798      	blx	r3
        LORAWAN_GetAttr(LAST_CH_ID, NULL, &lastchid);
   174dc:	230f      	movs	r3, #15
   174de:	18fb      	adds	r3, r7, r3
   174e0:	001a      	movs	r2, r3
   174e2:	2100      	movs	r1, #0
   174e4:	2039      	movs	r0, #57	; 0x39
   174e6:	4b2b      	ldr	r3, [pc, #172]	; (17594 <cert_appdata_callback+0x1e8>)
   174e8:	4798      	blx	r3
        printf("\n--------- Transaction Complete ---------\n\r");
   174ea:	4b38      	ldr	r3, [pc, #224]	; (175cc <cert_appdata_callback+0x220>)
   174ec:	0018      	movs	r0, r3
   174ee:	4b2d      	ldr	r3, [pc, #180]	; (175a4 <cert_appdata_callback+0x1f8>)
   174f0:	4798      	blx	r3
        printf("\nLast uplink channel: %d, fcntup: %04X\n\r", lastchid, (uint16_t)((upcounter-1) & 0x0000FFFF));
   174f2:	230f      	movs	r3, #15
   174f4:	18fb      	adds	r3, r7, r3
   174f6:	781b      	ldrb	r3, [r3, #0]
   174f8:	0019      	movs	r1, r3
   174fa:	68bb      	ldr	r3, [r7, #8]
   174fc:	b29b      	uxth	r3, r3
   174fe:	3b01      	subs	r3, #1
   17500:	b29b      	uxth	r3, r3
   17502:	001a      	movs	r2, r3
   17504:	4b32      	ldr	r3, [pc, #200]	; (175d0 <cert_appdata_callback+0x224>)
   17506:	0018      	movs	r0, r3
   17508:	4b26      	ldr	r3, [pc, #152]	; (175a4 <cert_appdata_callback+0x1f8>)
   1750a:	4798      	blx	r3
        switch(appdata->param.transCmpl.status)
   1750c:	683b      	ldr	r3, [r7, #0]
   1750e:	791b      	ldrb	r3, [r3, #4]
   17510:	2b08      	cmp	r3, #8
   17512:	d000      	beq.n	17516 <cert_appdata_callback+0x16a>
            break;
   17514:	e030      	b.n	17578 <cert_appdata_callback+0x1cc>
                if (cnfTxInProgress)
   17516:	4b21      	ldr	r3, [pc, #132]	; (1759c <cert_appdata_callback+0x1f0>)
   17518:	781b      	ldrb	r3, [r3, #0]
   1751a:	2b00      	cmp	r3, #0
   1751c:	d00f      	beq.n	1753e <cert_appdata_callback+0x192>
                    if (false == pktRxd)
   1751e:	4b1e      	ldr	r3, [pc, #120]	; (17598 <cert_appdata_callback+0x1ec>)
   17520:	781b      	ldrb	r3, [r3, #0]
   17522:	2201      	movs	r2, #1
   17524:	4053      	eors	r3, r2
   17526:	b2db      	uxtb	r3, r3
   17528:	2b00      	cmp	r3, #0
   1752a:	d005      	beq.n	17538 <cert_appdata_callback+0x18c>
                        downlinkCtr++;
   1752c:	4b29      	ldr	r3, [pc, #164]	; (175d4 <cert_appdata_callback+0x228>)
   1752e:	881b      	ldrh	r3, [r3, #0]
   17530:	3301      	adds	r3, #1
   17532:	b29a      	uxth	r2, r3
   17534:	4b27      	ldr	r3, [pc, #156]	; (175d4 <cert_appdata_callback+0x228>)
   17536:	801a      	strh	r2, [r3, #0]
                    cnfTxInProgress = false;
   17538:	4b18      	ldr	r3, [pc, #96]	; (1759c <cert_appdata_callback+0x1f0>)
   1753a:	2200      	movs	r2, #0
   1753c:	701a      	strb	r2, [r3, #0]
                if(pktRxd == false)
   1753e:	4b16      	ldr	r3, [pc, #88]	; (17598 <cert_appdata_callback+0x1ec>)
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	2201      	movs	r2, #1
   17544:	4053      	eors	r3, r2
   17546:	b2db      	uxtb	r3, r3
   17548:	2b00      	cmp	r3, #0
   1754a:	d014      	beq.n	17576 <cert_appdata_callback+0x1ca>
                    uplinkTestNoResp++;
   1754c:	4b1b      	ldr	r3, [pc, #108]	; (175bc <cert_appdata_callback+0x210>)
   1754e:	781b      	ldrb	r3, [r3, #0]
   17550:	3301      	adds	r3, #1
   17552:	b2da      	uxtb	r2, r3
   17554:	4b19      	ldr	r3, [pc, #100]	; (175bc <cert_appdata_callback+0x210>)
   17556:	701a      	strb	r2, [r3, #0]
                    sendData[0] = (uint8_t) (downlinkCtr >> 8);
   17558:	4b1e      	ldr	r3, [pc, #120]	; (175d4 <cert_appdata_callback+0x228>)
   1755a:	881b      	ldrh	r3, [r3, #0]
   1755c:	0a1b      	lsrs	r3, r3, #8
   1755e:	b29b      	uxth	r3, r3
   17560:	b2da      	uxtb	r2, r3
   17562:	4b1d      	ldr	r3, [pc, #116]	; (175d8 <cert_appdata_callback+0x22c>)
   17564:	701a      	strb	r2, [r3, #0]
                    sendData[1] = (uint8_t) (downlinkCtr);
   17566:	4b1b      	ldr	r3, [pc, #108]	; (175d4 <cert_appdata_callback+0x228>)
   17568:	881b      	ldrh	r3, [r3, #0]
   1756a:	b2da      	uxtb	r2, r3
   1756c:	4b1a      	ldr	r3, [pc, #104]	; (175d8 <cert_appdata_callback+0x22c>)
   1756e:	705a      	strb	r2, [r3, #1]
                    sendDataLen = 2;
   17570:	4b1a      	ldr	r3, [pc, #104]	; (175dc <cert_appdata_callback+0x230>)
   17572:	2202      	movs	r2, #2
   17574:	801a      	strh	r2, [r3, #0]
            break;
   17576:	46c0      	nop			; (mov r8, r8)
        print_stack_status(appdata->param.transCmpl.status);
   17578:	683b      	ldr	r3, [r7, #0]
   1757a:	791b      	ldrb	r3, [r3, #4]
   1757c:	0018      	movs	r0, r3
   1757e:	4b12      	ldr	r3, [pc, #72]	; (175c8 <cert_appdata_callback+0x21c>)
   17580:	4798      	blx	r3
        printf("\n========================================\n\r");
   17582:	4b17      	ldr	r3, [pc, #92]	; (175e0 <cert_appdata_callback+0x234>)
   17584:	0018      	movs	r0, r3
   17586:	4b07      	ldr	r3, [pc, #28]	; (175a4 <cert_appdata_callback+0x1f8>)
   17588:	4798      	blx	r3
}
   1758a:	46c0      	nop			; (mov r8, r8)
   1758c:	46bd      	mov	sp, r7
   1758e:	b008      	add	sp, #32
   17590:	bd80      	pop	{r7, pc}
   17592:	46c0      	nop			; (mov r8, r8)
   17594:	0001bfa1 	.word	0x0001bfa1
   17598:	20001108 	.word	0x20001108
   1759c:	2000110a 	.word	0x2000110a
   175a0:	0002b714 	.word	0x0002b714
   175a4:	00024261 	.word	0x00024261
   175a8:	0002b740 	.word	0x0002b740
   175ac:	0002b750 	.word	0x0002b750
   175b0:	0002b75c 	.word	0x0002b75c
   175b4:	0002b764 	.word	0x0002b764
   175b8:	00017b5d 	.word	0x00017b5d
   175bc:	20001107 	.word	0x20001107
   175c0:	0002b768 	.word	0x0002b768
   175c4:	00024325 	.word	0x00024325
   175c8:	00017379 	.word	0x00017379
   175cc:	0002b78c 	.word	0x0002b78c
   175d0:	0002b7b8 	.word	0x0002b7b8
   175d4:	20001104 	.word	0x20001104
   175d8:	20001a40 	.word	0x20001a40
   175dc:	20001a3c 	.word	0x20001a3c
   175e0:	0002b7e4 	.word	0x0002b7e4

000175e4 <cert_joindata_callback>:

/*********************************************************************//*
\brief Callback function for the ending of Activation procedure
 ************************************************************************/
static void cert_joindata_callback(StackRetStatus_t status)
{
   175e4:	b5b0      	push	{r4, r5, r7, lr}
   175e6:	b086      	sub	sp, #24
   175e8:	af02      	add	r7, sp, #8
   175ea:	0002      	movs	r2, r0
   175ec:	1dfb      	adds	r3, r7, #7
   175ee:	701a      	strb	r2, [r3, #0]
    uint32_t devaddr;
    StackRetStatus_t stackRetStatus;
    /* This is called every time the join process is finished */
    if(LORAWAN_SUCCESS == status)
   175f0:	1dfb      	adds	r3, r7, #7
   175f2:	781b      	ldrb	r3, [r3, #0]
   175f4:	2b08      	cmp	r3, #8
   175f6:	d128      	bne.n	1764a <cert_joindata_callback+0x66>
    {
        printf("\nJoin Successful\n\r");
   175f8:	4b23      	ldr	r3, [pc, #140]	; (17688 <cert_joindata_callback+0xa4>)
   175fa:	0018      	movs	r0, r3
   175fc:	4b23      	ldr	r3, [pc, #140]	; (1768c <cert_joindata_callback+0xa8>)
   175fe:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devaddr);
   17600:	2308      	movs	r3, #8
   17602:	18fb      	adds	r3, r7, r3
   17604:	001a      	movs	r2, r3
   17606:	2100      	movs	r1, #0
   17608:	2002      	movs	r0, #2
   1760a:	4b21      	ldr	r3, [pc, #132]	; (17690 <cert_joindata_callback+0xac>)
   1760c:	4798      	blx	r3
        printf("\nNew DeviceAddr: %08X\n\r", (unsigned int)devaddr);
   1760e:	68ba      	ldr	r2, [r7, #8]
   17610:	4b20      	ldr	r3, [pc, #128]	; (17694 <cert_joindata_callback+0xb0>)
   17612:	0011      	movs	r1, r2
   17614:	0018      	movs	r0, r3
   17616:	4b1d      	ldr	r3, [pc, #116]	; (1768c <cert_joindata_callback+0xa8>)
   17618:	4798      	blx	r3
        /*Start the Timer to send data periodically*/
        stackRetStatus = SwTimerStart(certAppTimerId, MS_TO_US(certAppTimeout), SW_TIMEOUT_RELATIVE, (void*)cert_app_timer_callback, NULL);
   1761a:	4b1f      	ldr	r3, [pc, #124]	; (17698 <cert_joindata_callback+0xb4>)
   1761c:	7818      	ldrb	r0, [r3, #0]
   1761e:	4b1f      	ldr	r3, [pc, #124]	; (1769c <cert_joindata_callback+0xb8>)
   17620:	681b      	ldr	r3, [r3, #0]
   17622:	22fa      	movs	r2, #250	; 0xfa
   17624:	0092      	lsls	r2, r2, #2
   17626:	435a      	muls	r2, r3
   17628:	0011      	movs	r1, r2
   1762a:	230f      	movs	r3, #15
   1762c:	18fc      	adds	r4, r7, r3
   1762e:	4a1c      	ldr	r2, [pc, #112]	; (176a0 <cert_joindata_callback+0xbc>)
   17630:	2300      	movs	r3, #0
   17632:	9300      	str	r3, [sp, #0]
   17634:	0013      	movs	r3, r2
   17636:	2200      	movs	r2, #0
   17638:	4d1a      	ldr	r5, [pc, #104]	; (176a4 <cert_joindata_callback+0xc0>)
   1763a:	47a8      	blx	r5
   1763c:	0003      	movs	r3, r0
   1763e:	7023      	strb	r3, [r4, #0]
        printf("\nStart certAppTimerId\n\r");
   17640:	4b19      	ldr	r3, [pc, #100]	; (176a8 <cert_joindata_callback+0xc4>)
   17642:	0018      	movs	r0, r3
   17644:	4b11      	ldr	r3, [pc, #68]	; (1768c <cert_joindata_callback+0xa8>)
   17646:	4798      	blx	r3
        print_stack_status(status);
        stackRetStatus = LORAWAN_Join(LORAWAN_OTAA);
        printf("\nOTAA Join Request Sent\n\r");
        print_stack_status(stackRetStatus);
    }
}
   17648:	e019      	b.n	1767e <cert_joindata_callback+0x9a>
        printf("\nJoin Denied\n\r");
   1764a:	4b18      	ldr	r3, [pc, #96]	; (176ac <cert_joindata_callback+0xc8>)
   1764c:	0018      	movs	r0, r3
   1764e:	4b0f      	ldr	r3, [pc, #60]	; (1768c <cert_joindata_callback+0xa8>)
   17650:	4798      	blx	r3
        print_stack_status(status);
   17652:	1dfb      	adds	r3, r7, #7
   17654:	781b      	ldrb	r3, [r3, #0]
   17656:	0018      	movs	r0, r3
   17658:	4b15      	ldr	r3, [pc, #84]	; (176b0 <cert_joindata_callback+0xcc>)
   1765a:	4798      	blx	r3
        stackRetStatus = LORAWAN_Join(LORAWAN_OTAA);
   1765c:	230f      	movs	r3, #15
   1765e:	18fc      	adds	r4, r7, r3
   17660:	2000      	movs	r0, #0
   17662:	4b14      	ldr	r3, [pc, #80]	; (176b4 <cert_joindata_callback+0xd0>)
   17664:	4798      	blx	r3
   17666:	0003      	movs	r3, r0
   17668:	7023      	strb	r3, [r4, #0]
        printf("\nOTAA Join Request Sent\n\r");
   1766a:	4b13      	ldr	r3, [pc, #76]	; (176b8 <cert_joindata_callback+0xd4>)
   1766c:	0018      	movs	r0, r3
   1766e:	4b07      	ldr	r3, [pc, #28]	; (1768c <cert_joindata_callback+0xa8>)
   17670:	4798      	blx	r3
        print_stack_status(stackRetStatus);
   17672:	230f      	movs	r3, #15
   17674:	18fb      	adds	r3, r7, r3
   17676:	781b      	ldrb	r3, [r3, #0]
   17678:	0018      	movs	r0, r3
   1767a:	4b0d      	ldr	r3, [pc, #52]	; (176b0 <cert_joindata_callback+0xcc>)
   1767c:	4798      	blx	r3
}
   1767e:	46c0      	nop			; (mov r8, r8)
   17680:	46bd      	mov	sp, r7
   17682:	b004      	add	sp, #16
   17684:	bdb0      	pop	{r4, r5, r7, pc}
   17686:	46c0      	nop			; (mov r8, r8)
   17688:	0002b810 	.word	0x0002b810
   1768c:	00024261 	.word	0x00024261
   17690:	0001bfa1 	.word	0x0001bfa1
   17694:	0002b824 	.word	0x0002b824
   17698:	20001aa4 	.word	0x20001aa4
   1769c:	2000002c 	.word	0x2000002c
   176a0:	0001790d 	.word	0x0001790d
   176a4:	000159bd 	.word	0x000159bd
   176a8:	0002b83c 	.word	0x0002b83c
   176ac:	0002b854 	.word	0x0002b854
   176b0:	00017379 	.word	0x00017379
   176b4:	0001bb9d 	.word	0x0001bb9d
   176b8:	0002b864 	.word	0x0002b864

000176bc <cert_set_join_parameters>:
 \param[in]  activation type - notifies the activation type (OTAA/ABP)
 \return     LORAWAN_SUCCESS, if successfully set the join parameters
             LORAWAN_INVALID_PARAMETER, otherwise
 ************************************************************************/
StackRetStatus_t cert_set_join_parameters(ActivationType_t activation_type)
{
   176bc:	b590      	push	{r4, r7, lr}
   176be:	b085      	sub	sp, #20
   176c0:	af00      	add	r7, sp, #0
   176c2:	0002      	movs	r2, r0
   176c4:	1dfb      	adds	r3, r7, #7
   176c6:	701a      	strb	r2, [r3, #0]
	bool cryptoDevEnabled = true;
	LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &cryptoDevEnabled );
#endif /* #ifdef CRYPTO_DEV_ENABLED */
	uint8_t dataRate;
	
	if(bandTable[current_band] == ISM_THAI923 || bandTable[current_band] == ISM_JPN923)
   176c8:	4b63      	ldr	r3, [pc, #396]	; (17858 <cert_set_join_parameters+0x19c>)
   176ca:	781b      	ldrb	r3, [r3, #0]
   176cc:	001a      	movs	r2, r3
   176ce:	4b63      	ldr	r3, [pc, #396]	; (1785c <cert_set_join_parameters+0x1a0>)
   176d0:	5c9b      	ldrb	r3, [r3, r2]
   176d2:	2b0d      	cmp	r3, #13
   176d4:	d006      	beq.n	176e4 <cert_set_join_parameters+0x28>
   176d6:	4b60      	ldr	r3, [pc, #384]	; (17858 <cert_set_join_parameters+0x19c>)
   176d8:	781b      	ldrb	r3, [r3, #0]
   176da:	001a      	movs	r2, r3
   176dc:	4b5f      	ldr	r3, [pc, #380]	; (1785c <cert_set_join_parameters+0x1a0>)
   176de:	5c9b      	ldrb	r3, [r3, r2]
   176e0:	2b05      	cmp	r3, #5
   176e2:	d104      	bne.n	176ee <cert_set_join_parameters+0x32>
	dataRate = DR2;
   176e4:	230e      	movs	r3, #14
   176e6:	18fb      	adds	r3, r7, r3
   176e8:	2202      	movs	r2, #2
   176ea:	701a      	strb	r2, [r3, #0]
   176ec:	e003      	b.n	176f6 <cert_set_join_parameters+0x3a>
	else
	dataRate = DR0;
   176ee:	230e      	movs	r3, #14
   176f0:	18fb      	adds	r3, r7, r3
   176f2:	2200      	movs	r2, #0
   176f4:	701a      	strb	r2, [r3, #0]
	
	status = LORAWAN_SetAttr (CURRENT_DATARATE, &dataRate);
   176f6:	230f      	movs	r3, #15
   176f8:	18fc      	adds	r4, r7, r3
   176fa:	230e      	movs	r3, #14
   176fc:	18fb      	adds	r3, r7, r3
   176fe:	0019      	movs	r1, r3
   17700:	2007      	movs	r0, #7
   17702:	4b57      	ldr	r3, [pc, #348]	; (17860 <cert_set_join_parameters+0x1a4>)
   17704:	4798      	blx	r3
   17706:	0003      	movs	r3, r0
   17708:	7023      	strb	r3, [r4, #0]

    printf("\n----------- Join Parameters ------------\n\r");
   1770a:	4b56      	ldr	r3, [pc, #344]	; (17864 <cert_set_join_parameters+0x1a8>)
   1770c:	0018      	movs	r0, r3
   1770e:	4b56      	ldr	r3, [pc, #344]	; (17868 <cert_set_join_parameters+0x1ac>)
   17710:	4798      	blx	r3

    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
   17712:	1dfb      	adds	r3, r7, #7
   17714:	781b      	ldrb	r3, [r3, #0]
   17716:	2b01      	cmp	r3, #1
   17718:	d14c      	bne.n	177b4 <cert_set_join_parameters+0xf8>
    {
		if (LORAWAN_SUCCESS == status)
   1771a:	230f      	movs	r3, #15
   1771c:	18fb      	adds	r3, r7, r3
   1771e:	781b      	ldrb	r3, [r3, #0]
   17720:	2b08      	cmp	r3, #8
   17722:	d108      	bne.n	17736 <cert_set_join_parameters+0x7a>
		{
			status = LORAWAN_SetAttr (DEV_ADDR, &devAddr);
   17724:	230f      	movs	r3, #15
   17726:	18fc      	adds	r4, r7, r3
   17728:	4b50      	ldr	r3, [pc, #320]	; (1786c <cert_set_join_parameters+0x1b0>)
   1772a:	0019      	movs	r1, r3
   1772c:	2002      	movs	r0, #2
   1772e:	4b4c      	ldr	r3, [pc, #304]	; (17860 <cert_set_join_parameters+0x1a4>)
   17730:	4798      	blx	r3
   17732:	0003      	movs	r3, r0
   17734:	7023      	strb	r3, [r4, #0]
		}
		
        if (LORAWAN_SUCCESS == status)
   17736:	230f      	movs	r3, #15
   17738:	18fb      	adds	r3, r7, r3
   1773a:	781b      	ldrb	r3, [r3, #0]
   1773c:	2b08      	cmp	r3, #8
   1773e:	d113      	bne.n	17768 <cert_set_join_parameters+0xac>
        {
            printf("\nDevice Addr - ");
   17740:	4b4b      	ldr	r3, [pc, #300]	; (17870 <cert_set_join_parameters+0x1b4>)
   17742:	0018      	movs	r0, r3
   17744:	4b48      	ldr	r3, [pc, #288]	; (17868 <cert_set_join_parameters+0x1ac>)
   17746:	4798      	blx	r3
            printf("0x%lx \n\r", devAddr);
   17748:	4b48      	ldr	r3, [pc, #288]	; (1786c <cert_set_join_parameters+0x1b0>)
   1774a:	681a      	ldr	r2, [r3, #0]
   1774c:	4b49      	ldr	r3, [pc, #292]	; (17874 <cert_set_join_parameters+0x1b8>)
   1774e:	0011      	movs	r1, r2
   17750:	0018      	movs	r0, r3
   17752:	4b45      	ldr	r3, [pc, #276]	; (17868 <cert_set_join_parameters+0x1ac>)
   17754:	4798      	blx	r3
            status = LORAWAN_SetAttr (APPS_KEY, appsKey);
   17756:	230f      	movs	r3, #15
   17758:	18fc      	adds	r4, r7, r3
   1775a:	4b47      	ldr	r3, [pc, #284]	; (17878 <cert_set_join_parameters+0x1bc>)
   1775c:	0019      	movs	r1, r3
   1775e:	2005      	movs	r0, #5
   17760:	4b3f      	ldr	r3, [pc, #252]	; (17860 <cert_set_join_parameters+0x1a4>)
   17762:	4798      	blx	r3
   17764:	0003      	movs	r3, r0
   17766:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   17768:	230f      	movs	r3, #15
   1776a:	18fb      	adds	r3, r7, r3
   1776c:	781b      	ldrb	r3, [r3, #0]
   1776e:	2b08      	cmp	r3, #8
   17770:	d111      	bne.n	17796 <cert_set_join_parameters+0xda>
        {
            printf("\nApplication Session Key - ");
   17772:	4b42      	ldr	r3, [pc, #264]	; (1787c <cert_set_join_parameters+0x1c0>)
   17774:	0018      	movs	r0, r3
   17776:	4b3c      	ldr	r3, [pc, #240]	; (17868 <cert_set_join_parameters+0x1ac>)
   17778:	4798      	blx	r3
            print_array((uint8_t *)&appsKey, sizeof(appsKey));
   1777a:	4b3f      	ldr	r3, [pc, #252]	; (17878 <cert_set_join_parameters+0x1bc>)
   1777c:	2110      	movs	r1, #16
   1777e:	0018      	movs	r0, r3
   17780:	4b3f      	ldr	r3, [pc, #252]	; (17880 <cert_set_join_parameters+0x1c4>)
   17782:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, nwksKey);
   17784:	230f      	movs	r3, #15
   17786:	18fc      	adds	r4, r7, r3
   17788:	4b3e      	ldr	r3, [pc, #248]	; (17884 <cert_set_join_parameters+0x1c8>)
   1778a:	0019      	movs	r1, r3
   1778c:	2004      	movs	r0, #4
   1778e:	4b34      	ldr	r3, [pc, #208]	; (17860 <cert_set_join_parameters+0x1a4>)
   17790:	4798      	blx	r3
   17792:	0003      	movs	r3, r0
   17794:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   17796:	230f      	movs	r3, #15
   17798:	18fb      	adds	r3, r7, r3
   1779a:	781b      	ldrb	r3, [r3, #0]
   1779c:	2b08      	cmp	r3, #8
   1779e:	d153      	bne.n	17848 <cert_set_join_parameters+0x18c>
        {
            printf("\nNetwork Session Key - ");
   177a0:	4b39      	ldr	r3, [pc, #228]	; (17888 <cert_set_join_parameters+0x1cc>)
   177a2:	0018      	movs	r0, r3
   177a4:	4b30      	ldr	r3, [pc, #192]	; (17868 <cert_set_join_parameters+0x1ac>)
   177a6:	4798      	blx	r3
            print_array((uint8_t *)&nwksKey, sizeof(nwksKey));
   177a8:	4b36      	ldr	r3, [pc, #216]	; (17884 <cert_set_join_parameters+0x1c8>)
   177aa:	2110      	movs	r1, #16
   177ac:	0018      	movs	r0, r3
   177ae:	4b34      	ldr	r3, [pc, #208]	; (17880 <cert_set_join_parameters+0x1c4>)
   177b0:	4798      	blx	r3
   177b2:	e049      	b.n	17848 <cert_set_join_parameters+0x18c>
        }

    }
    else
    {
		if (LORAWAN_SUCCESS == status)
   177b4:	230f      	movs	r3, #15
   177b6:	18fb      	adds	r3, r7, r3
   177b8:	781b      	ldrb	r3, [r3, #0]
   177ba:	2b08      	cmp	r3, #8
   177bc:	d108      	bne.n	177d0 <cert_set_join_parameters+0x114>
		{
			status = LORAWAN_SetAttr (DEV_EUI, devEui);
   177be:	230f      	movs	r3, #15
   177c0:	18fc      	adds	r4, r7, r3
   177c2:	4b32      	ldr	r3, [pc, #200]	; (1788c <cert_set_join_parameters+0x1d0>)
   177c4:	0019      	movs	r1, r3
   177c6:	2000      	movs	r0, #0
   177c8:	4b25      	ldr	r3, [pc, #148]	; (17860 <cert_set_join_parameters+0x1a4>)
   177ca:	4798      	blx	r3
   177cc:	0003      	movs	r3, r0
   177ce:	7023      	strb	r3, [r4, #0]
		}
		
        if (LORAWAN_SUCCESS == status)
   177d0:	230f      	movs	r3, #15
   177d2:	18fb      	adds	r3, r7, r3
   177d4:	781b      	ldrb	r3, [r3, #0]
   177d6:	2b08      	cmp	r3, #8
   177d8:	d111      	bne.n	177fe <cert_set_join_parameters+0x142>
        {
            printf("\nDevice EUI - ");
   177da:	4b2d      	ldr	r3, [pc, #180]	; (17890 <cert_set_join_parameters+0x1d4>)
   177dc:	0018      	movs	r0, r3
   177de:	4b22      	ldr	r3, [pc, #136]	; (17868 <cert_set_join_parameters+0x1ac>)
   177e0:	4798      	blx	r3
            print_array((uint8_t *)&devEui, sizeof(devEui));
   177e2:	4b2a      	ldr	r3, [pc, #168]	; (1788c <cert_set_join_parameters+0x1d0>)
   177e4:	2108      	movs	r1, #8
   177e6:	0018      	movs	r0, r3
   177e8:	4b25      	ldr	r3, [pc, #148]	; (17880 <cert_set_join_parameters+0x1c4>)
   177ea:	4798      	blx	r3
            status = LORAWAN_SetAttr (JOIN_EUI, joinEui);
   177ec:	230f      	movs	r3, #15
   177ee:	18fc      	adds	r4, r7, r3
   177f0:	4b28      	ldr	r3, [pc, #160]	; (17894 <cert_set_join_parameters+0x1d8>)
   177f2:	0019      	movs	r1, r3
   177f4:	2001      	movs	r0, #1
   177f6:	4b1a      	ldr	r3, [pc, #104]	; (17860 <cert_set_join_parameters+0x1a4>)
   177f8:	4798      	blx	r3
   177fa:	0003      	movs	r3, r0
   177fc:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   177fe:	230f      	movs	r3, #15
   17800:	18fb      	adds	r3, r7, r3
   17802:	781b      	ldrb	r3, [r3, #0]
   17804:	2b08      	cmp	r3, #8
   17806:	d111      	bne.n	1782c <cert_set_join_parameters+0x170>
        {
            printf("\nApplication EUI - ");
   17808:	4b23      	ldr	r3, [pc, #140]	; (17898 <cert_set_join_parameters+0x1dc>)
   1780a:	0018      	movs	r0, r3
   1780c:	4b16      	ldr	r3, [pc, #88]	; (17868 <cert_set_join_parameters+0x1ac>)
   1780e:	4798      	blx	r3
            print_array((uint8_t *)&joinEui, sizeof(joinEui));
   17810:	4b20      	ldr	r3, [pc, #128]	; (17894 <cert_set_join_parameters+0x1d8>)
   17812:	2108      	movs	r1, #8
   17814:	0018      	movs	r0, r3
   17816:	4b1a      	ldr	r3, [pc, #104]	; (17880 <cert_set_join_parameters+0x1c4>)
   17818:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, appKey);
   1781a:	230f      	movs	r3, #15
   1781c:	18fc      	adds	r4, r7, r3
   1781e:	4b1f      	ldr	r3, [pc, #124]	; (1789c <cert_set_join_parameters+0x1e0>)
   17820:	0019      	movs	r1, r3
   17822:	2003      	movs	r0, #3
   17824:	4b0e      	ldr	r3, [pc, #56]	; (17860 <cert_set_join_parameters+0x1a4>)
   17826:	4798      	blx	r3
   17828:	0003      	movs	r3, r0
   1782a:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   1782c:	230f      	movs	r3, #15
   1782e:	18fb      	adds	r3, r7, r3
   17830:	781b      	ldrb	r3, [r3, #0]
   17832:	2b08      	cmp	r3, #8
   17834:	d108      	bne.n	17848 <cert_set_join_parameters+0x18c>
        {
            printf("\nApplication Key - ");
   17836:	4b1a      	ldr	r3, [pc, #104]	; (178a0 <cert_set_join_parameters+0x1e4>)
   17838:	0018      	movs	r0, r3
   1783a:	4b0b      	ldr	r3, [pc, #44]	; (17868 <cert_set_join_parameters+0x1ac>)
   1783c:	4798      	blx	r3
            print_array((uint8_t *)&appKey, sizeof(appKey));
   1783e:	4b17      	ldr	r3, [pc, #92]	; (1789c <cert_set_join_parameters+0x1e0>)
   17840:	2110      	movs	r1, #16
   17842:	0018      	movs	r0, r3
   17844:	4b0e      	ldr	r3, [pc, #56]	; (17880 <cert_set_join_parameters+0x1c4>)
   17846:	4798      	blx	r3
        }
    }
    return status;
   17848:	230f      	movs	r3, #15
   1784a:	18fb      	adds	r3, r7, r3
   1784c:	781b      	ldrb	r3, [r3, #0]
}
   1784e:	0018      	movs	r0, r3
   17850:	46bd      	mov	sp, r7
   17852:	b005      	add	sp, #20
   17854:	bd90      	pop	{r4, r7, pc}
   17856:	46c0      	nop			; (mov r8, r8)
   17858:	20001a3f 	.word	0x20001a3f
   1785c:	20000098 	.word	0x20000098
   17860:	0001df51 	.word	0x0001df51
   17864:	0002b880 	.word	0x0002b880
   17868:	00024261 	.word	0x00024261
   1786c:	20000034 	.word	0x20000034
   17870:	0002b8ac 	.word	0x0002b8ac
   17874:	0002b8bc 	.word	0x0002b8bc
   17878:	20000048 	.word	0x20000048
   1787c:	0002b8c8 	.word	0x0002b8c8
   17880:	000178a5 	.word	0x000178a5
   17884:	20000038 	.word	0x20000038
   17888:	0002b8e4 	.word	0x0002b8e4
   1788c:	20000058 	.word	0x20000058
   17890:	0002b8fc 	.word	0x0002b8fc
   17894:	20000060 	.word	0x20000060
   17898:	0002b90c 	.word	0x0002b90c
   1789c:	20000068 	.word	0x20000068
   178a0:	0002b920 	.word	0x0002b920

000178a4 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
static void print_array (uint8_t *array, uint8_t length)
{     
   178a4:	b580      	push	{r7, lr}
   178a6:	b084      	sub	sp, #16
   178a8:	af00      	add	r7, sp, #0
   178aa:	6078      	str	r0, [r7, #4]
   178ac:	000a      	movs	r2, r1
   178ae:	1cfb      	adds	r3, r7, #3
   178b0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i =0; i < length; i++)
   178b2:	230f      	movs	r3, #15
   178b4:	18fb      	adds	r3, r7, r3
   178b6:	2200      	movs	r2, #0
   178b8:	701a      	strb	r2, [r3, #0]
   178ba:	e011      	b.n	178e0 <print_array+0x3c>
    {
        printf("%02X", *array);
   178bc:	687b      	ldr	r3, [r7, #4]
   178be:	781b      	ldrb	r3, [r3, #0]
   178c0:	001a      	movs	r2, r3
   178c2:	4b0f      	ldr	r3, [pc, #60]	; (17900 <print_array+0x5c>)
   178c4:	0011      	movs	r1, r2
   178c6:	0018      	movs	r0, r3
   178c8:	4b0e      	ldr	r3, [pc, #56]	; (17904 <print_array+0x60>)
   178ca:	4798      	blx	r3
        array++;
   178cc:	687b      	ldr	r3, [r7, #4]
   178ce:	3301      	adds	r3, #1
   178d0:	607b      	str	r3, [r7, #4]
    for (uint8_t i =0; i < length; i++)
   178d2:	230f      	movs	r3, #15
   178d4:	18fb      	adds	r3, r7, r3
   178d6:	781a      	ldrb	r2, [r3, #0]
   178d8:	230f      	movs	r3, #15
   178da:	18fb      	adds	r3, r7, r3
   178dc:	3201      	adds	r2, #1
   178de:	701a      	strb	r2, [r3, #0]
   178e0:	230f      	movs	r3, #15
   178e2:	18fa      	adds	r2, r7, r3
   178e4:	1cfb      	adds	r3, r7, #3
   178e6:	7812      	ldrb	r2, [r2, #0]
   178e8:	781b      	ldrb	r3, [r3, #0]
   178ea:	429a      	cmp	r2, r3
   178ec:	d3e6      	bcc.n	178bc <print_array+0x18>
    }
    printf("\n\r");
   178ee:	4b06      	ldr	r3, [pc, #24]	; (17908 <print_array+0x64>)
   178f0:	0018      	movs	r0, r3
   178f2:	4b04      	ldr	r3, [pc, #16]	; (17904 <print_array+0x60>)
   178f4:	4798      	blx	r3
}
   178f6:	46c0      	nop			; (mov r8, r8)
   178f8:	46bd      	mov	sp, r7
   178fa:	b004      	add	sp, #16
   178fc:	bd80      	pop	{r7, pc}
   178fe:	46c0      	nop			; (mov r8, r8)
   17900:	0002b75c 	.word	0x0002b75c
   17904:	00024261 	.word	0x00024261
   17908:	0002b764 	.word	0x0002b764

0001790c <cert_app_timer_callback>:

/*********************************************************************//*
 \brief    Certification Timer Callback
 ************************************************************************/
void cert_app_timer_callback(uint8_t param)
{
   1790c:	b590      	push	{r4, r7, lr}
   1790e:	b089      	sub	sp, #36	; 0x24
   17910:	af02      	add	r7, sp, #8
   17912:	0002      	movs	r2, r0
   17914:	1dfb      	adds	r3, r7, #7
   17916:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t status;
    uint32_t upcounter;
    uint8_t datarate;
    SwTimerStart(certAppTimerId, MS_TO_US(certAppTimeout), SW_TIMEOUT_RELATIVE, (void *)cert_app_timer_callback, NULL);
   17918:	4b4a      	ldr	r3, [pc, #296]	; (17a44 <cert_app_timer_callback+0x138>)
   1791a:	7818      	ldrb	r0, [r3, #0]
   1791c:	4b4a      	ldr	r3, [pc, #296]	; (17a48 <cert_app_timer_callback+0x13c>)
   1791e:	681b      	ldr	r3, [r3, #0]
   17920:	22fa      	movs	r2, #250	; 0xfa
   17922:	0092      	lsls	r2, r2, #2
   17924:	435a      	muls	r2, r3
   17926:	0011      	movs	r1, r2
   17928:	4a48      	ldr	r2, [pc, #288]	; (17a4c <cert_app_timer_callback+0x140>)
   1792a:	2300      	movs	r3, #0
   1792c:	9300      	str	r3, [sp, #0]
   1792e:	0013      	movs	r3, r2
   17930:	2200      	movs	r2, #0
   17932:	4c47      	ldr	r4, [pc, #284]	; (17a50 <cert_app_timer_callback+0x144>)
   17934:	47a0      	blx	r4
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &upcounter);
   17936:	2310      	movs	r3, #16
   17938:	18fb      	adds	r3, r7, r3
   1793a:	001a      	movs	r2, r3
   1793c:	2100      	movs	r1, #0
   1793e:	200a      	movs	r0, #10
   17940:	4b44      	ldr	r3, [pc, #272]	; (17a54 <cert_app_timer_callback+0x148>)
   17942:	4798      	blx	r3
    LORAWAN_GetAttr(CURRENT_DATARATE, NULL, &datarate);
   17944:	230f      	movs	r3, #15
   17946:	18fb      	adds	r3, r7, r3
   17948:	001a      	movs	r2, r3
   1794a:	2100      	movs	r1, #0
   1794c:	2007      	movs	r0, #7
   1794e:	4b41      	ldr	r3, [pc, #260]	; (17a54 <cert_app_timer_callback+0x148>)
   17950:	4798      	blx	r3
    
    if (clear_linkcheck)
   17952:	4b41      	ldr	r3, [pc, #260]	; (17a58 <cert_app_timer_callback+0x14c>)
   17954:	781b      	ldrb	r3, [r3, #0]
   17956:	2b00      	cmp	r3, #0
   17958:	d00c      	beq.n	17974 <cert_app_timer_callback+0x68>
    {
      uint16_t lcp = 0;
   1795a:	230c      	movs	r3, #12
   1795c:	18fb      	adds	r3, r7, r3
   1795e:	2200      	movs	r2, #0
   17960:	801a      	strh	r2, [r3, #0]
      clear_linkcheck = false;
   17962:	4b3d      	ldr	r3, [pc, #244]	; (17a58 <cert_app_timer_callback+0x14c>)
   17964:	2200      	movs	r2, #0
   17966:	701a      	strb	r2, [r3, #0]
      LORAWAN_SetAttr(LINK_CHECK_PERIOD, &lcp);
   17968:	230c      	movs	r3, #12
   1796a:	18fb      	adds	r3, r7, r3
   1796c:	0019      	movs	r1, r3
   1796e:	2019      	movs	r0, #25
   17970:	4b3a      	ldr	r3, [pc, #232]	; (17a5c <cert_app_timer_callback+0x150>)
   17972:	4798      	blx	r3
    }

    lorawanSendReq.buffer = sendData;
   17974:	4b3a      	ldr	r3, [pc, #232]	; (17a60 <cert_app_timer_callback+0x154>)
   17976:	4a3b      	ldr	r2, [pc, #236]	; (17a64 <cert_app_timer_callback+0x158>)
   17978:	605a      	str	r2, [r3, #4]
    lorawanSendReq.bufferLength = sendDataLen;
   1797a:	4b3b      	ldr	r3, [pc, #236]	; (17a68 <cert_app_timer_callback+0x15c>)
   1797c:	881b      	ldrh	r3, [r3, #0]
   1797e:	b2da      	uxtb	r2, r3
   17980:	4b37      	ldr	r3, [pc, #220]	; (17a60 <cert_app_timer_callback+0x154>)
   17982:	721a      	strb	r2, [r3, #8]
    lorawanSendReq.confirmed = bTxCnf;
   17984:	4b39      	ldr	r3, [pc, #228]	; (17a6c <cert_app_timer_callback+0x160>)
   17986:	781b      	ldrb	r3, [r3, #0]
   17988:	001a      	movs	r2, r3
   1798a:	4b35      	ldr	r3, [pc, #212]	; (17a60 <cert_app_timer_callback+0x154>)
   1798c:	701a      	strb	r2, [r3, #0]
    lorawanSendReq.port = sendFport;
   1798e:	4b38      	ldr	r3, [pc, #224]	; (17a70 <cert_app_timer_callback+0x164>)
   17990:	781a      	ldrb	r2, [r3, #0]
   17992:	4b33      	ldr	r3, [pc, #204]	; (17a60 <cert_app_timer_callback+0x154>)
   17994:	705a      	strb	r2, [r3, #1]
    status = LORAWAN_Send(&lorawanSendReq);
   17996:	2317      	movs	r3, #23
   17998:	18fc      	adds	r4, r7, r3
   1799a:	4b31      	ldr	r3, [pc, #196]	; (17a60 <cert_app_timer_callback+0x154>)
   1799c:	0018      	movs	r0, r3
   1799e:	4b35      	ldr	r3, [pc, #212]	; (17a74 <cert_app_timer_callback+0x168>)
   179a0:	4798      	blx	r3
   179a2:	0003      	movs	r3, r0
   179a4:	7023      	strb	r3, [r4, #0]
    sendFport = CERT_APP_FPORT;
   179a6:	4b32      	ldr	r3, [pc, #200]	; (17a70 <cert_app_timer_callback+0x164>)
   179a8:	2201      	movs	r2, #1
   179aa:	701a      	strb	r2, [r3, #0]
    
    printf("\n---------------- Uplink ----------------\n\r");
   179ac:	4b32      	ldr	r3, [pc, #200]	; (17a78 <cert_app_timer_callback+0x16c>)
   179ae:	0018      	movs	r0, r3
   179b0:	4b32      	ldr	r3, [pc, #200]	; (17a7c <cert_app_timer_callback+0x170>)
   179b2:	4798      	blx	r3
    printf("\n     DR : %d", datarate);
   179b4:	230f      	movs	r3, #15
   179b6:	18fb      	adds	r3, r7, r3
   179b8:	781b      	ldrb	r3, [r3, #0]
   179ba:	001a      	movs	r2, r3
   179bc:	4b30      	ldr	r3, [pc, #192]	; (17a80 <cert_app_timer_callback+0x174>)
   179be:	0011      	movs	r1, r2
   179c0:	0018      	movs	r0, r3
   179c2:	4b2e      	ldr	r3, [pc, #184]	; (17a7c <cert_app_timer_callback+0x170>)
   179c4:	4798      	blx	r3
    printf("\n   Type : %s", lorawanSendReq.confirmed ? "Cnf" : "UnCnf");
   179c6:	4b26      	ldr	r3, [pc, #152]	; (17a60 <cert_app_timer_callback+0x154>)
   179c8:	781b      	ldrb	r3, [r3, #0]
   179ca:	2b00      	cmp	r3, #0
   179cc:	d001      	beq.n	179d2 <cert_app_timer_callback+0xc6>
   179ce:	4b2d      	ldr	r3, [pc, #180]	; (17a84 <cert_app_timer_callback+0x178>)
   179d0:	e000      	b.n	179d4 <cert_app_timer_callback+0xc8>
   179d2:	4b2d      	ldr	r3, [pc, #180]	; (17a88 <cert_app_timer_callback+0x17c>)
   179d4:	4a2d      	ldr	r2, [pc, #180]	; (17a8c <cert_app_timer_callback+0x180>)
   179d6:	0019      	movs	r1, r3
   179d8:	0010      	movs	r0, r2
   179da:	4b28      	ldr	r3, [pc, #160]	; (17a7c <cert_app_timer_callback+0x170>)
   179dc:	4798      	blx	r3
    printf("\n  Fport : %d", lorawanSendReq.port);
   179de:	4b20      	ldr	r3, [pc, #128]	; (17a60 <cert_app_timer_callback+0x154>)
   179e0:	785b      	ldrb	r3, [r3, #1]
   179e2:	001a      	movs	r2, r3
   179e4:	4b2a      	ldr	r3, [pc, #168]	; (17a90 <cert_app_timer_callback+0x184>)
   179e6:	0011      	movs	r1, r2
   179e8:	0018      	movs	r0, r3
   179ea:	4b24      	ldr	r3, [pc, #144]	; (17a7c <cert_app_timer_callback+0x170>)
   179ec:	4798      	blx	r3
    printf("\n FCntUp : %ld (%08X)", upcounter, (unsigned int)upcounter);
   179ee:	6939      	ldr	r1, [r7, #16]
   179f0:	693a      	ldr	r2, [r7, #16]
   179f2:	4b28      	ldr	r3, [pc, #160]	; (17a94 <cert_app_timer_callback+0x188>)
   179f4:	0018      	movs	r0, r3
   179f6:	4b21      	ldr	r3, [pc, #132]	; (17a7c <cert_app_timer_callback+0x170>)
   179f8:	4798      	blx	r3
    printf("\nPayload : ");
   179fa:	4b27      	ldr	r3, [pc, #156]	; (17a98 <cert_app_timer_callback+0x18c>)
   179fc:	0018      	movs	r0, r3
   179fe:	4b1f      	ldr	r3, [pc, #124]	; (17a7c <cert_app_timer_callback+0x170>)
   17a00:	4798      	blx	r3
    print_array(lorawanSendReq.buffer,lorawanSendReq.bufferLength);
   17a02:	4b17      	ldr	r3, [pc, #92]	; (17a60 <cert_app_timer_callback+0x154>)
   17a04:	685a      	ldr	r2, [r3, #4]
   17a06:	4b16      	ldr	r3, [pc, #88]	; (17a60 <cert_app_timer_callback+0x154>)
   17a08:	7a1b      	ldrb	r3, [r3, #8]
   17a0a:	0019      	movs	r1, r3
   17a0c:	0010      	movs	r0, r2
   17a0e:	4b23      	ldr	r3, [pc, #140]	; (17a9c <cert_app_timer_callback+0x190>)
   17a10:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
   17a12:	2317      	movs	r3, #23
   17a14:	18fb      	adds	r3, r7, r3
   17a16:	781b      	ldrb	r3, [r3, #0]
   17a18:	2b08      	cmp	r3, #8
   17a1a:	d109      	bne.n	17a30 <cert_app_timer_callback+0x124>
    {
        pktRxd = false;
   17a1c:	4b20      	ldr	r3, [pc, #128]	; (17aa0 <cert_app_timer_callback+0x194>)
   17a1e:	2200      	movs	r2, #0
   17a20:	701a      	strb	r2, [r3, #0]
        if (lorawanSendReq.confirmed)
   17a22:	4b0f      	ldr	r3, [pc, #60]	; (17a60 <cert_app_timer_callback+0x154>)
   17a24:	781b      	ldrb	r3, [r3, #0]
   17a26:	2b00      	cmp	r3, #0
   17a28:	d002      	beq.n	17a30 <cert_app_timer_callback+0x124>
        {
            cnfTxInProgress = true;
   17a2a:	4b1e      	ldr	r3, [pc, #120]	; (17aa4 <cert_app_timer_callback+0x198>)
   17a2c:	2201      	movs	r2, #1
   17a2e:	701a      	strb	r2, [r3, #0]
        }
    }
    print_stack_status(status);
   17a30:	2317      	movs	r3, #23
   17a32:	18fb      	adds	r3, r7, r3
   17a34:	781b      	ldrb	r3, [r3, #0]
   17a36:	0018      	movs	r0, r3
   17a38:	4b1b      	ldr	r3, [pc, #108]	; (17aa8 <cert_app_timer_callback+0x19c>)
   17a3a:	4798      	blx	r3
}
   17a3c:	46c0      	nop			; (mov r8, r8)
   17a3e:	46bd      	mov	sp, r7
   17a40:	b007      	add	sp, #28
   17a42:	bd90      	pop	{r4, r7, pc}
   17a44:	20001aa4 	.word	0x20001aa4
   17a48:	2000002c 	.word	0x2000002c
   17a4c:	0001790d 	.word	0x0001790d
   17a50:	000159bd 	.word	0x000159bd
   17a54:	0001bfa1 	.word	0x0001bfa1
   17a58:	20001109 	.word	0x20001109
   17a5c:	0001df51 	.word	0x0001df51
   17a60:	20001a30 	.word	0x20001a30
   17a64:	20001a40 	.word	0x20001a40
   17a68:	20001a3c 	.word	0x20001a3c
   17a6c:	20001106 	.word	0x20001106
   17a70:	20000030 	.word	0x20000030
   17a74:	0001ae69 	.word	0x0001ae69
   17a78:	0002b934 	.word	0x0002b934
   17a7c:	00024261 	.word	0x00024261
   17a80:	0002b960 	.word	0x0002b960
   17a84:	0002b970 	.word	0x0002b970
   17a88:	0002b974 	.word	0x0002b974
   17a8c:	0002b97c 	.word	0x0002b97c
   17a90:	0002b740 	.word	0x0002b740
   17a94:	0002b98c 	.word	0x0002b98c
   17a98:	0002b750 	.word	0x0002b750
   17a9c:	000178a5 	.word	0x000178a5
   17aa0:	20001108 	.word	0x20001108
   17aa4:	2000110a 	.word	0x2000110a
   17aa8:	00017379 	.word	0x00017379

00017aac <cert_enter_test_mode>:

/*********************************************************************//*
 \brief    Activates Test Mode
 ************************************************************************/
static void cert_enter_test_mode(void)
{
   17aac:	b580      	push	{r7, lr}
   17aae:	af00      	add	r7, sp, #0
    testMode = ON;
   17ab0:	4b0f      	ldr	r3, [pc, #60]	; (17af0 <cert_enter_test_mode+0x44>)
   17ab2:	2201      	movs	r2, #1
   17ab4:	701a      	strb	r2, [r3, #0]
    downlinkCtr = 0;
   17ab6:	4b0f      	ldr	r3, [pc, #60]	; (17af4 <cert_enter_test_mode+0x48>)
   17ab8:	2200      	movs	r2, #0
   17aba:	801a      	strh	r2, [r3, #0]
    uplinkTestNoResp = 0;
   17abc:	4b0e      	ldr	r3, [pc, #56]	; (17af8 <cert_enter_test_mode+0x4c>)
   17abe:	2200      	movs	r2, #0
   17ac0:	701a      	strb	r2, [r3, #0]

    //prepare the first data
    sendData[0] = (uint8_t) (downlinkCtr >> 8);
   17ac2:	4b0c      	ldr	r3, [pc, #48]	; (17af4 <cert_enter_test_mode+0x48>)
   17ac4:	881b      	ldrh	r3, [r3, #0]
   17ac6:	0a1b      	lsrs	r3, r3, #8
   17ac8:	b29b      	uxth	r3, r3
   17aca:	b2da      	uxtb	r2, r3
   17acc:	4b0b      	ldr	r3, [pc, #44]	; (17afc <cert_enter_test_mode+0x50>)
   17ace:	701a      	strb	r2, [r3, #0]
    sendData[1] = (uint8_t) (downlinkCtr);
   17ad0:	4b08      	ldr	r3, [pc, #32]	; (17af4 <cert_enter_test_mode+0x48>)
   17ad2:	881b      	ldrh	r3, [r3, #0]
   17ad4:	b2da      	uxtb	r2, r3
   17ad6:	4b09      	ldr	r3, [pc, #36]	; (17afc <cert_enter_test_mode+0x50>)
   17ad8:	705a      	strb	r2, [r3, #1]
    sendDataLen = 2;
   17ada:	4b09      	ldr	r3, [pc, #36]	; (17b00 <cert_enter_test_mode+0x54>)
   17adc:	2202      	movs	r2, #2
   17ade:	801a      	strh	r2, [r3, #0]
    printf("\r\nTest Mode Activated\r\n");
   17ae0:	4b08      	ldr	r3, [pc, #32]	; (17b04 <cert_enter_test_mode+0x58>)
   17ae2:	0018      	movs	r0, r3
   17ae4:	4b08      	ldr	r3, [pc, #32]	; (17b08 <cert_enter_test_mode+0x5c>)
   17ae6:	4798      	blx	r3
}
   17ae8:	46c0      	nop			; (mov r8, r8)
   17aea:	46bd      	mov	sp, r7
   17aec:	bd80      	pop	{r7, pc}
   17aee:	46c0      	nop			; (mov r8, r8)
   17af0:	20001102 	.word	0x20001102
   17af4:	20001104 	.word	0x20001104
   17af8:	20001107 	.word	0x20001107
   17afc:	20001a40 	.word	0x20001a40
   17b00:	20001a3c 	.word	0x20001a3c
   17b04:	0002b9a4 	.word	0x0002b9a4
   17b08:	00024325 	.word	0x00024325

00017b0c <cert_set_mac_parameters>:
 \brief      Set MAC  parameters function
 \return     LORAWAN_SUCCESS, if successfully set the join parameters
             LORAWAN_INVALID_PARAMETER, otherwise
 ************************************************************************/
static StackRetStatus_t cert_set_mac_parameters(void)
{
   17b0c:	b590      	push	{r4, r7, lr}
   17b0e:	b083      	sub	sp, #12
   17b10:	af00      	add	r7, sp, #0
    StackRetStatus_t status = LORAWAN_SUCCESS;
   17b12:	1dfb      	adds	r3, r7, #7
   17b14:	2208      	movs	r2, #8
   17b16:	701a      	strb	r2, [r3, #0]
    bool adrValue = true ;
   17b18:	1dbb      	adds	r3, r7, #6
   17b1a:	2201      	movs	r2, #1
   17b1c:	701a      	strb	r2, [r3, #0]
    bool testModeEnable = true;
   17b1e:	1d7b      	adds	r3, r7, #5
   17b20:	2201      	movs	r2, #1
   17b22:	701a      	strb	r2, [r3, #0]
    status = LORAWAN_SetAttr(TEST_MODE_ENABLE,&testModeEnable);
   17b24:	1dfc      	adds	r4, r7, #7
   17b26:	1d7b      	adds	r3, r7, #5
   17b28:	0019      	movs	r1, r3
   17b2a:	2033      	movs	r0, #51	; 0x33
   17b2c:	4b0a      	ldr	r3, [pc, #40]	; (17b58 <cert_set_mac_parameters+0x4c>)
   17b2e:	4798      	blx	r3
   17b30:	0003      	movs	r3, r0
   17b32:	7023      	strb	r3, [r4, #0]

    if(status == LORAWAN_SUCCESS)
   17b34:	1dfb      	adds	r3, r7, #7
   17b36:	781b      	ldrb	r3, [r3, #0]
   17b38:	2b08      	cmp	r3, #8
   17b3a:	d107      	bne.n	17b4c <cert_set_mac_parameters+0x40>
    {
        status = LORAWAN_SetAttr(ADR,&adrValue);
   17b3c:	1dfc      	adds	r4, r7, #7
   17b3e:	1dbb      	adds	r3, r7, #6
   17b40:	0019      	movs	r1, r3
   17b42:	2006      	movs	r0, #6
   17b44:	4b04      	ldr	r3, [pc, #16]	; (17b58 <cert_set_mac_parameters+0x4c>)
   17b46:	4798      	blx	r3
   17b48:	0003      	movs	r3, r0
   17b4a:	7023      	strb	r3, [r4, #0]
    }

    return status;
   17b4c:	1dfb      	adds	r3, r7, #7
   17b4e:	781b      	ldrb	r3, [r3, #0]
}
   17b50:	0018      	movs	r0, r3
   17b52:	46bd      	mov	sp, r7
   17b54:	b003      	add	sp, #12
   17b56:	bd90      	pop	{r4, r7, pc}
   17b58:	0001df51 	.word	0x0001df51

00017b5c <cert_handle_cert_rx_data>:
 \brief      Function that processes the Rx data
 \param[in]  data - Rx data payload
 \param[in]  dataLen - The number of Rx bytes
 ************************************************************************/
static void cert_handle_cert_rx_data(uint8_t* data,uint8_t dataLen)
{
   17b5c:	b590      	push	{r4, r7, lr}
   17b5e:	b085      	sub	sp, #20
   17b60:	af00      	add	r7, sp, #0
   17b62:	6078      	str	r0, [r7, #4]
   17b64:	000a      	movs	r2, r1
   17b66:	1cfb      	adds	r3, r7, #3
   17b68:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t status;

    if (dataLen > 0)
   17b6a:	1cfb      	adds	r3, r7, #3
   17b6c:	781b      	ldrb	r3, [r3, #0]
   17b6e:	2b00      	cmp	r3, #0
   17b70:	d100      	bne.n	17b74 <cert_handle_cert_rx_data+0x18>
   17b72:	e0de      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
    {
        downlinkCtr++;
   17b74:	4b71      	ldr	r3, [pc, #452]	; (17d3c <cert_handle_cert_rx_data+0x1e0>)
   17b76:	881b      	ldrh	r3, [r3, #0]
   17b78:	3301      	adds	r3, #1
   17b7a:	b29a      	uxth	r2, r3
   17b7c:	4b6f      	ldr	r3, [pc, #444]	; (17d3c <cert_handle_cert_rx_data+0x1e0>)
   17b7e:	801a      	strh	r2, [r3, #0]
        uplinkTestNoResp = 0;
   17b80:	4b6f      	ldr	r3, [pc, #444]	; (17d40 <cert_handle_cert_rx_data+0x1e4>)
   17b82:	2200      	movs	r2, #0
   17b84:	701a      	strb	r2, [r3, #0]

        //prepare the next data
        sendData[0] = (uint8_t) (downlinkCtr >> 8);
   17b86:	4b6d      	ldr	r3, [pc, #436]	; (17d3c <cert_handle_cert_rx_data+0x1e0>)
   17b88:	881b      	ldrh	r3, [r3, #0]
   17b8a:	0a1b      	lsrs	r3, r3, #8
   17b8c:	b29b      	uxth	r3, r3
   17b8e:	b2da      	uxtb	r2, r3
   17b90:	4b6c      	ldr	r3, [pc, #432]	; (17d44 <cert_handle_cert_rx_data+0x1e8>)
   17b92:	701a      	strb	r2, [r3, #0]
        sendData[1] = (uint8_t) (downlinkCtr);
   17b94:	4b69      	ldr	r3, [pc, #420]	; (17d3c <cert_handle_cert_rx_data+0x1e0>)
   17b96:	881b      	ldrh	r3, [r3, #0]
   17b98:	b2da      	uxtb	r2, r3
   17b9a:	4b6a      	ldr	r3, [pc, #424]	; (17d44 <cert_handle_cert_rx_data+0x1e8>)
   17b9c:	705a      	strb	r2, [r3, #1]
        sendDataLen = 2;
   17b9e:	4b6a      	ldr	r3, [pc, #424]	; (17d48 <cert_handle_cert_rx_data+0x1ec>)
   17ba0:	2202      	movs	r2, #2
   17ba2:	801a      	strh	r2, [r3, #0]
        
        if (enddevice_cpc_is_payload_valid(data, dataLen))
   17ba4:	1cfb      	adds	r3, r7, #3
   17ba6:	781a      	ldrb	r2, [r3, #0]
   17ba8:	687b      	ldr	r3, [r7, #4]
   17baa:	0011      	movs	r1, r2
   17bac:	0018      	movs	r0, r3
   17bae:	4b67      	ldr	r3, [pc, #412]	; (17d4c <cert_handle_cert_rx_data+0x1f0>)
   17bb0:	4798      	blx	r3
   17bb2:	1e03      	subs	r3, r0, #0
   17bb4:	d007      	beq.n	17bc6 <cert_handle_cert_rx_data+0x6a>
        {
            enddevice_cpc_execute_command(data, dataLen);
   17bb6:	1cfb      	adds	r3, r7, #3
   17bb8:	781a      	ldrb	r2, [r3, #0]
   17bba:	687b      	ldr	r3, [r7, #4]
   17bbc:	0011      	movs	r1, r2
   17bbe:	0018      	movs	r0, r3
   17bc0:	4b63      	ldr	r3, [pc, #396]	; (17d50 <cert_handle_cert_rx_data+0x1f4>)
   17bc2:	4798      	blx	r3
                default:
                break;
            }
        }        
    }
}
   17bc4:	e0b5      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
            switch (data[0])
   17bc6:	687b      	ldr	r3, [r7, #4]
   17bc8:	781b      	ldrb	r3, [r3, #0]
   17bca:	2b06      	cmp	r3, #6
   17bcc:	d900      	bls.n	17bd0 <cert_handle_cert_rx_data+0x74>
   17bce:	e0a5      	b.n	17d1c <cert_handle_cert_rx_data+0x1c0>
   17bd0:	009a      	lsls	r2, r3, #2
   17bd2:	4b60      	ldr	r3, [pc, #384]	; (17d54 <cert_handle_cert_rx_data+0x1f8>)
   17bd4:	18d3      	adds	r3, r2, r3
   17bd6:	681b      	ldr	r3, [r3, #0]
   17bd8:	469f      	mov	pc, r3
                    if (dataLen == 1) {
   17bda:	1cfb      	adds	r3, r7, #3
   17bdc:	781b      	ldrb	r3, [r3, #0]
   17bde:	2b01      	cmp	r3, #1
   17be0:	d000      	beq.n	17be4 <cert_handle_cert_rx_data+0x88>
   17be2:	e09d      	b.n	17d20 <cert_handle_cert_rx_data+0x1c4>
                        testMode = OFF;
   17be4:	4b5c      	ldr	r3, [pc, #368]	; (17d58 <cert_handle_cert_rx_data+0x1fc>)
   17be6:	2200      	movs	r2, #0
   17be8:	701a      	strb	r2, [r3, #0]
                break;
   17bea:	e099      	b.n	17d20 <cert_handle_cert_rx_data+0x1c4>
                    bool bPayloadValid = false;
   17bec:	230f      	movs	r3, #15
   17bee:	18fb      	adds	r3, r7, r3
   17bf0:	2200      	movs	r2, #0
   17bf2:	701a      	strb	r2, [r3, #0]
                    if (dataLen == 4)
   17bf4:	1cfb      	adds	r3, r7, #3
   17bf6:	781b      	ldrb	r3, [r3, #0]
   17bf8:	2b04      	cmp	r3, #4
   17bfa:	d122      	bne.n	17c42 <cert_handle_cert_rx_data+0xe6>
                        for (uint8_t i = 0; i < 4; i++)
   17bfc:	230e      	movs	r3, #14
   17bfe:	18fb      	adds	r3, r7, r3
   17c00:	2200      	movs	r2, #0
   17c02:	701a      	strb	r2, [r3, #0]
   17c04:	e018      	b.n	17c38 <cert_handle_cert_rx_data+0xdc>
                            if (data[i] == 1)
   17c06:	230e      	movs	r3, #14
   17c08:	18fb      	adds	r3, r7, r3
   17c0a:	781b      	ldrb	r3, [r3, #0]
   17c0c:	687a      	ldr	r2, [r7, #4]
   17c0e:	18d3      	adds	r3, r2, r3
   17c10:	781b      	ldrb	r3, [r3, #0]
   17c12:	2b01      	cmp	r3, #1
   17c14:	d104      	bne.n	17c20 <cert_handle_cert_rx_data+0xc4>
                                bPayloadValid = true;
   17c16:	230f      	movs	r3, #15
   17c18:	18fb      	adds	r3, r7, r3
   17c1a:	2201      	movs	r2, #1
   17c1c:	701a      	strb	r2, [r3, #0]
   17c1e:	e004      	b.n	17c2a <cert_handle_cert_rx_data+0xce>
                                bPayloadValid = false;
   17c20:	230f      	movs	r3, #15
   17c22:	18fb      	adds	r3, r7, r3
   17c24:	2200      	movs	r2, #0
   17c26:	701a      	strb	r2, [r3, #0]
                                break;
   17c28:	e00b      	b.n	17c42 <cert_handle_cert_rx_data+0xe6>
                        for (uint8_t i = 0; i < 4; i++)
   17c2a:	230e      	movs	r3, #14
   17c2c:	18fb      	adds	r3, r7, r3
   17c2e:	781a      	ldrb	r2, [r3, #0]
   17c30:	230e      	movs	r3, #14
   17c32:	18fb      	adds	r3, r7, r3
   17c34:	3201      	adds	r2, #1
   17c36:	701a      	strb	r2, [r3, #0]
   17c38:	230e      	movs	r3, #14
   17c3a:	18fb      	adds	r3, r7, r3
   17c3c:	781b      	ldrb	r3, [r3, #0]
   17c3e:	2b03      	cmp	r3, #3
   17c40:	d9e1      	bls.n	17c06 <cert_handle_cert_rx_data+0xaa>
                    if (bPayloadValid)
   17c42:	230f      	movs	r3, #15
   17c44:	18fb      	adds	r3, r7, r3
   17c46:	781b      	ldrb	r3, [r3, #0]
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d100      	bne.n	17c4e <cert_handle_cert_rx_data+0xf2>
   17c4c:	e06a      	b.n	17d24 <cert_handle_cert_rx_data+0x1c8>
                        cert_enter_test_mode();
   17c4e:	4b43      	ldr	r3, [pc, #268]	; (17d5c <cert_handle_cert_rx_data+0x200>)
   17c50:	4798      	blx	r3
                break;
   17c52:	e067      	b.n	17d24 <cert_handle_cert_rx_data+0x1c8>
                    if (dataLen == 1)
   17c54:	1cfb      	adds	r3, r7, #3
   17c56:	781b      	ldrb	r3, [r3, #0]
   17c58:	2b01      	cmp	r3, #1
   17c5a:	d165      	bne.n	17d28 <cert_handle_cert_rx_data+0x1cc>
                        bTxCnf = true;
   17c5c:	4b40      	ldr	r3, [pc, #256]	; (17d60 <cert_handle_cert_rx_data+0x204>)
   17c5e:	2201      	movs	r2, #1
   17c60:	701a      	strb	r2, [r3, #0]
                break;
   17c62:	e061      	b.n	17d28 <cert_handle_cert_rx_data+0x1cc>
                    if (dataLen == 1)
   17c64:	1cfb      	adds	r3, r7, #3
   17c66:	781b      	ldrb	r3, [r3, #0]
   17c68:	2b01      	cmp	r3, #1
   17c6a:	d15f      	bne.n	17d2c <cert_handle_cert_rx_data+0x1d0>
                        bTxCnf = false;
   17c6c:	4b3c      	ldr	r3, [pc, #240]	; (17d60 <cert_handle_cert_rx_data+0x204>)
   17c6e:	2200      	movs	r2, #0
   17c70:	701a      	strb	r2, [r3, #0]
                break;
   17c72:	e05b      	b.n	17d2c <cert_handle_cert_rx_data+0x1d0>
                    if (dataLen <= 33) {
   17c74:	1cfb      	adds	r3, r7, #3
   17c76:	781b      	ldrb	r3, [r3, #0]
   17c78:	2b21      	cmp	r3, #33	; 0x21
   17c7a:	d859      	bhi.n	17d30 <cert_handle_cert_rx_data+0x1d4>
                        sendData[0] = 0x04;
   17c7c:	4b31      	ldr	r3, [pc, #196]	; (17d44 <cert_handle_cert_rx_data+0x1e8>)
   17c7e:	2204      	movs	r2, #4
   17c80:	701a      	strb	r2, [r3, #0]
                        for (uint8_t i = 1; i < dataLen; i++)
   17c82:	230d      	movs	r3, #13
   17c84:	18fb      	adds	r3, r7, r3
   17c86:	2201      	movs	r2, #1
   17c88:	701a      	strb	r2, [r3, #0]
   17c8a:	e01a      	b.n	17cc2 <cert_handle_cert_rx_data+0x166>
                            sendData[i] = (((uint16_t) data[i]) + 1) % 256;
   17c8c:	230d      	movs	r3, #13
   17c8e:	18fb      	adds	r3, r7, r3
   17c90:	781a      	ldrb	r2, [r3, #0]
   17c92:	230d      	movs	r3, #13
   17c94:	18fb      	adds	r3, r7, r3
   17c96:	781b      	ldrb	r3, [r3, #0]
   17c98:	6879      	ldr	r1, [r7, #4]
   17c9a:	18cb      	adds	r3, r1, r3
   17c9c:	781b      	ldrb	r3, [r3, #0]
   17c9e:	3301      	adds	r3, #1
   17ca0:	4930      	ldr	r1, [pc, #192]	; (17d64 <cert_handle_cert_rx_data+0x208>)
   17ca2:	400b      	ands	r3, r1
   17ca4:	d503      	bpl.n	17cae <cert_handle_cert_rx_data+0x152>
   17ca6:	3b01      	subs	r3, #1
   17ca8:	492f      	ldr	r1, [pc, #188]	; (17d68 <cert_handle_cert_rx_data+0x20c>)
   17caa:	430b      	orrs	r3, r1
   17cac:	3301      	adds	r3, #1
   17cae:	b2d9      	uxtb	r1, r3
   17cb0:	4b24      	ldr	r3, [pc, #144]	; (17d44 <cert_handle_cert_rx_data+0x1e8>)
   17cb2:	5499      	strb	r1, [r3, r2]
                        for (uint8_t i = 1; i < dataLen; i++)
   17cb4:	230d      	movs	r3, #13
   17cb6:	18fb      	adds	r3, r7, r3
   17cb8:	781a      	ldrb	r2, [r3, #0]
   17cba:	230d      	movs	r3, #13
   17cbc:	18fb      	adds	r3, r7, r3
   17cbe:	3201      	adds	r2, #1
   17cc0:	701a      	strb	r2, [r3, #0]
   17cc2:	230d      	movs	r3, #13
   17cc4:	18fa      	adds	r2, r7, r3
   17cc6:	1cfb      	adds	r3, r7, #3
   17cc8:	7812      	ldrb	r2, [r2, #0]
   17cca:	781b      	ldrb	r3, [r3, #0]
   17ccc:	429a      	cmp	r2, r3
   17cce:	d3dd      	bcc.n	17c8c <cert_handle_cert_rx_data+0x130>
                        sendDataLen = dataLen;
   17cd0:	1cfb      	adds	r3, r7, #3
   17cd2:	781b      	ldrb	r3, [r3, #0]
   17cd4:	b29a      	uxth	r2, r3
   17cd6:	4b1c      	ldr	r3, [pc, #112]	; (17d48 <cert_handle_cert_rx_data+0x1ec>)
   17cd8:	801a      	strh	r2, [r3, #0]
                break;
   17cda:	e029      	b.n	17d30 <cert_handle_cert_rx_data+0x1d4>
                    status = LORAWAN_Join(LORAWAN_OTAA);
   17cdc:	230c      	movs	r3, #12
   17cde:	18fc      	adds	r4, r7, r3
   17ce0:	2000      	movs	r0, #0
   17ce2:	4b22      	ldr	r3, [pc, #136]	; (17d6c <cert_handle_cert_rx_data+0x210>)
   17ce4:	4798      	blx	r3
   17ce6:	0003      	movs	r3, r0
   17ce8:	7023      	strb	r3, [r4, #0]
                    if (status == LORAWAN_SUCCESS)
   17cea:	230c      	movs	r3, #12
   17cec:	18fb      	adds	r3, r7, r3
   17cee:	781b      	ldrb	r3, [r3, #0]
   17cf0:	2b08      	cmp	r3, #8
   17cf2:	d10c      	bne.n	17d0e <cert_handle_cert_rx_data+0x1b2>
                        testMode = OFF;
   17cf4:	4b18      	ldr	r3, [pc, #96]	; (17d58 <cert_handle_cert_rx_data+0x1fc>)
   17cf6:	2200      	movs	r2, #0
   17cf8:	701a      	strb	r2, [r3, #0]
                        SwTimerStop(certAppTimerId);
   17cfa:	4b1d      	ldr	r3, [pc, #116]	; (17d70 <cert_handle_cert_rx_data+0x214>)
   17cfc:	781b      	ldrb	r3, [r3, #0]
   17cfe:	0018      	movs	r0, r3
   17d00:	4b1c      	ldr	r3, [pc, #112]	; (17d74 <cert_handle_cert_rx_data+0x218>)
   17d02:	4798      	blx	r3
                        printf("\nOTAA Join Request Sent\n\r");
   17d04:	4b1c      	ldr	r3, [pc, #112]	; (17d78 <cert_handle_cert_rx_data+0x21c>)
   17d06:	0018      	movs	r0, r3
   17d08:	4b1c      	ldr	r3, [pc, #112]	; (17d7c <cert_handle_cert_rx_data+0x220>)
   17d0a:	4798      	blx	r3
                break;
   17d0c:	e011      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                        print_stack_status(status);
   17d0e:	230c      	movs	r3, #12
   17d10:	18fb      	adds	r3, r7, r3
   17d12:	781b      	ldrb	r3, [r3, #0]
   17d14:	0018      	movs	r0, r3
   17d16:	4b1a      	ldr	r3, [pc, #104]	; (17d80 <cert_handle_cert_rx_data+0x224>)
   17d18:	4798      	blx	r3
                break;
   17d1a:	e00a      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d1c:	46c0      	nop			; (mov r8, r8)
   17d1e:	e008      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d20:	46c0      	nop			; (mov r8, r8)
   17d22:	e006      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d24:	46c0      	nop			; (mov r8, r8)
   17d26:	e004      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d28:	46c0      	nop			; (mov r8, r8)
   17d2a:	e002      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d2c:	46c0      	nop			; (mov r8, r8)
   17d2e:	e000      	b.n	17d32 <cert_handle_cert_rx_data+0x1d6>
                break;
   17d30:	46c0      	nop			; (mov r8, r8)
}
   17d32:	46c0      	nop			; (mov r8, r8)
   17d34:	46bd      	mov	sp, r7
   17d36:	b005      	add	sp, #20
   17d38:	bd90      	pop	{r4, r7, pc}
   17d3a:	46c0      	nop			; (mov r8, r8)
   17d3c:	20001104 	.word	0x20001104
   17d40:	20001107 	.word	0x20001107
   17d44:	20001a40 	.word	0x20001a40
   17d48:	20001a3c 	.word	0x20001a3c
   17d4c:	000181b1 	.word	0x000181b1
   17d50:	00017da5 	.word	0x00017da5
   17d54:	0002b9bc 	.word	0x0002b9bc
   17d58:	20001102 	.word	0x20001102
   17d5c:	00017aad 	.word	0x00017aad
   17d60:	20001106 	.word	0x20001106
   17d64:	800000ff 	.word	0x800000ff
   17d68:	ffffff00 	.word	0xffffff00
   17d6c:	0001bb9d 	.word	0x0001bb9d
   17d70:	20001aa4 	.word	0x20001aa4
   17d74:	00015cfd 	.word	0x00015cfd
   17d78:	0002b864 	.word	0x0002b864
   17d7c:	00024261 	.word	0x00024261
   17d80:	00017379 	.word	0x00017379

00017d84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
   17d84:	b580      	push	{r7, lr}
   17d86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
   17d88:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   17d8c:	4b03      	ldr	r3, [pc, #12]	; (17d9c <__NVIC_SystemReset+0x18>)
   17d8e:	4a04      	ldr	r2, [pc, #16]	; (17da0 <__NVIC_SystemReset+0x1c>)
   17d90:	60da      	str	r2, [r3, #12]
   17d92:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17d96:	46c0      	nop			; (mov r8, r8)
   17d98:	e7fd      	b.n	17d96 <__NVIC_SystemReset+0x12>
   17d9a:	46c0      	nop			; (mov r8, r8)
   17d9c:	e000ed00 	.word	0xe000ed00
   17da0:	05fa0004 	.word	0x05fa0004

00017da4 <enddevice_cpc_execute_command>:

/************************************************************************/
/* FUNCTION DEFINITIONS                                                 */
/************************************************************************/
void enddevice_cpc_execute_command(uint8_t *buffer, uint8_t buflen)
{
   17da4:	b590      	push	{r4, r7, lr}
   17da6:	b091      	sub	sp, #68	; 0x44
   17da8:	af02      	add	r7, sp, #8
   17daa:	6078      	str	r0, [r7, #4]
   17dac:	000a      	movs	r2, r1
   17dae:	1cfb      	adds	r3, r7, #3
   17db0:	701a      	strb	r2, [r3, #0]
  StackRetStatus_t status;
  //printf("\r\n<-- "); 
  switch (buffer[0])
   17db2:	687b      	ldr	r3, [r7, #4]
   17db4:	781b      	ldrb	r3, [r3, #0]
   17db6:	2b7f      	cmp	r3, #127	; 0x7f
   17db8:	d900      	bls.n	17dbc <enddevice_cpc_execute_command+0x18>
   17dba:	e1f4      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
   17dbc:	009a      	lsls	r2, r3, #2
   17dbe:	4bdc      	ldr	r3, [pc, #880]	; (18130 <enddevice_cpc_execute_command+0x38c>)
   17dc0:	18d3      	adds	r3, r2, r3
   17dc2:	681b      	ldr	r3, [r3, #0]
   17dc4:	469f      	mov	pc, r3
  {
    case CPC_PACKAGE_VERSION_REQ:
    {
      //printf("PackageVersionReq");
      sendData[0] = CPC_PACKAGE_VERSION_ANS;
   17dc6:	4bdb      	ldr	r3, [pc, #876]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17dc8:	2200      	movs	r2, #0
   17dca:	701a      	strb	r2, [r3, #0]
      sendData[1] = CERT_PROTOCOL_PACKAGE_IDENTIFIER;
   17dcc:	4bd9      	ldr	r3, [pc, #868]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17dce:	2206      	movs	r2, #6
   17dd0:	705a      	strb	r2, [r3, #1]
      sendData[2] = CERT_PROTOCOL_PACKAGE_VERSION;
   17dd2:	4bd8      	ldr	r3, [pc, #864]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17dd4:	2201      	movs	r2, #1
   17dd6:	709a      	strb	r2, [r3, #2]
      sendDataLen = 3;
   17dd8:	4bd7      	ldr	r3, [pc, #860]	; (18138 <enddevice_cpc_execute_command+0x394>)
   17dda:	2203      	movs	r2, #3
   17ddc:	801a      	strh	r2, [r3, #0]
      sendFport = TEST_PORT_NB;
   17dde:	4bd7      	ldr	r3, [pc, #860]	; (1813c <enddevice_cpc_execute_command+0x398>)
   17de0:	22e0      	movs	r2, #224	; 0xe0
   17de2:	701a      	strb	r2, [r3, #0]
    }
    break;
   17de4:	e1df      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_DUT_RESET_REQ:
    {
      //printf("DutResetReq");
      NVIC_SystemReset();
   17de6:	4bd6      	ldr	r3, [pc, #856]	; (18140 <enddevice_cpc_execute_command+0x39c>)
   17de8:	4798      	blx	r3
    break;
    
    case CPC_DUT_JOIN_REQ:
    {
      //printf("DutJoinReq");
      enddevice_cpc_fresh_join();
   17dea:	4bd6      	ldr	r3, [pc, #856]	; (18144 <enddevice_cpc_execute_command+0x3a0>)
   17dec:	4798      	blx	r3
    }
    break;
   17dee:	e1da      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_SWITCH_CLASS_REQ:
    {
      EdClass_t target_class = (1 << buffer[1]);
   17df0:	687b      	ldr	r3, [r7, #4]
   17df2:	3301      	adds	r3, #1
   17df4:	781b      	ldrb	r3, [r3, #0]
   17df6:	001a      	movs	r2, r3
   17df8:	2301      	movs	r3, #1
   17dfa:	4093      	lsls	r3, r2
   17dfc:	b2da      	uxtb	r2, r3
   17dfe:	2333      	movs	r3, #51	; 0x33
   17e00:	18fb      	adds	r3, r7, r3
   17e02:	701a      	strb	r2, [r3, #0]
      //printf("SwitchClassReq");
      printf("\nSwitch to class %c:%sOK\n\r",
        (1 == target_class) ? 'A' : (2 == target_class) ? 'B' : 'C',
   17e04:	2333      	movs	r3, #51	; 0x33
   17e06:	18fb      	adds	r3, r7, r3
   17e08:	781b      	ldrb	r3, [r3, #0]
      printf("\nSwitch to class %c:%sOK\n\r",
   17e0a:	2b01      	cmp	r3, #1
   17e0c:	d008      	beq.n	17e20 <enddevice_cpc_execute_command+0x7c>
        (1 == target_class) ? 'A' : (2 == target_class) ? 'B' : 'C',
   17e0e:	2333      	movs	r3, #51	; 0x33
   17e10:	18fb      	adds	r3, r7, r3
   17e12:	781b      	ldrb	r3, [r3, #0]
   17e14:	2b02      	cmp	r3, #2
   17e16:	d101      	bne.n	17e1c <enddevice_cpc_execute_command+0x78>
   17e18:	2442      	movs	r4, #66	; 0x42
   17e1a:	e002      	b.n	17e22 <enddevice_cpc_execute_command+0x7e>
   17e1c:	2443      	movs	r4, #67	; 0x43
   17e1e:	e000      	b.n	17e22 <enddevice_cpc_execute_command+0x7e>
      printf("\nSwitch to class %c:%sOK\n\r",
   17e20:	2441      	movs	r4, #65	; 0x41
        (LORAWAN_SUCCESS == LORAWAN_SetAttr(EDCLASS, &target_class)) ? 
   17e22:	2333      	movs	r3, #51	; 0x33
   17e24:	18fb      	adds	r3, r7, r3
   17e26:	0019      	movs	r1, r3
   17e28:	201a      	movs	r0, #26
   17e2a:	4bc7      	ldr	r3, [pc, #796]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   17e2c:	4798      	blx	r3
   17e2e:	0003      	movs	r3, r0
      printf("\nSwitch to class %c:%sOK\n\r",
   17e30:	2b08      	cmp	r3, #8
   17e32:	d101      	bne.n	17e38 <enddevice_cpc_execute_command+0x94>
   17e34:	4bc5      	ldr	r3, [pc, #788]	; (1814c <enddevice_cpc_execute_command+0x3a8>)
   17e36:	e000      	b.n	17e3a <enddevice_cpc_execute_command+0x96>
   17e38:	4bc5      	ldr	r3, [pc, #788]	; (18150 <enddevice_cpc_execute_command+0x3ac>)
   17e3a:	48c6      	ldr	r0, [pc, #792]	; (18154 <enddevice_cpc_execute_command+0x3b0>)
   17e3c:	001a      	movs	r2, r3
   17e3e:	0021      	movs	r1, r4
   17e40:	4bc5      	ldr	r3, [pc, #788]	; (18158 <enddevice_cpc_execute_command+0x3b4>)
   17e42:	4798      	blx	r3
            " " : "NOT");
    }
    break;
   17e44:	e1af      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_ADR_BIT_CHANGE_REQ:
    {
      bool new_adr;
      //printf("AdrBitChangeReq");
      LORAWAN_SetAttr(ADR, &buffer[1]);
   17e46:	687b      	ldr	r3, [r7, #4]
   17e48:	3301      	adds	r3, #1
   17e4a:	0019      	movs	r1, r3
   17e4c:	2006      	movs	r0, #6
   17e4e:	4bbe      	ldr	r3, [pc, #760]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   17e50:	4798      	blx	r3
      LORAWAN_GetAttr(ADR, NULL, &new_adr);
   17e52:	2332      	movs	r3, #50	; 0x32
   17e54:	18fb      	adds	r3, r7, r3
   17e56:	001a      	movs	r2, r3
   17e58:	2100      	movs	r1, #0
   17e5a:	2006      	movs	r0, #6
   17e5c:	4bbf      	ldr	r3, [pc, #764]	; (1815c <enddevice_cpc_execute_command+0x3b8>)
   17e5e:	4798      	blx	r3
      //printf("\r\nADR bit: %d", (uint8_t)new_adr);
    }
    break;
   17e60:	e1a1      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_REGIONAL_DUTYCYCLE_CTRL_REQ:
    {
      bool new_regdcycle;
      //printf("RegionalDutyCycleCtrlReq");
      LORAWAN_SetAttr(REGIONAL_DUTY_CYCLE, &buffer[1]);
   17e62:	687b      	ldr	r3, [r7, #4]
   17e64:	3301      	adds	r3, #1
   17e66:	0019      	movs	r1, r3
   17e68:	2045      	movs	r0, #69	; 0x45
   17e6a:	4bb7      	ldr	r3, [pc, #732]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   17e6c:	4798      	blx	r3
      LORAWAN_GetAttr(REGIONAL_DUTY_CYCLE, NULL, &new_regdcycle);
   17e6e:	2331      	movs	r3, #49	; 0x31
   17e70:	18fb      	adds	r3, r7, r3
   17e72:	001a      	movs	r2, r3
   17e74:	2100      	movs	r1, #0
   17e76:	2045      	movs	r0, #69	; 0x45
   17e78:	4bb8      	ldr	r3, [pc, #736]	; (1815c <enddevice_cpc_execute_command+0x3b8>)
   17e7a:	4798      	blx	r3
      //printf("\r\nRegional DutyCycle status: %d", (uint8_t)new_regdcycle);
    }
    break;
   17e7c:	e193      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_TX_PERIODICITY_CHANGE_REQ:
    {
      uint16_t periodicity[11] = {CERT_APP_TIMEOUT, 5, 10, 20, 30,
   17e7e:	2318      	movs	r3, #24
   17e80:	18fb      	adds	r3, r7, r3
   17e82:	4ab7      	ldr	r2, [pc, #732]	; (18160 <enddevice_cpc_execute_command+0x3bc>)
   17e84:	ca13      	ldmia	r2!, {r0, r1, r4}
   17e86:	c313      	stmia	r3!, {r0, r1, r4}
   17e88:	ca03      	ldmia	r2!, {r0, r1}
   17e8a:	c303      	stmia	r3!, {r0, r1}
   17e8c:	8812      	ldrh	r2, [r2, #0]
   17e8e:	801a      	strh	r2, [r3, #0]
                                    40, 50, 60, 120, 240, 480};
      //printf("TxPeriodicityChangeReq");
      if (10 >= buffer[1])
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	3301      	adds	r3, #1
   17e94:	781b      	ldrb	r3, [r3, #0]
   17e96:	2b0a      	cmp	r3, #10
   17e98:	d900      	bls.n	17e9c <enddevice_cpc_execute_command+0xf8>
   17e9a:	e147      	b.n	1812c <enddevice_cpc_execute_command+0x388>
      {
        certAppTimeout = 1000 * periodicity[buffer[1]];
   17e9c:	687b      	ldr	r3, [r7, #4]
   17e9e:	3301      	adds	r3, #1
   17ea0:	781b      	ldrb	r3, [r3, #0]
   17ea2:	001a      	movs	r2, r3
   17ea4:	2318      	movs	r3, #24
   17ea6:	18fb      	adds	r3, r7, r3
   17ea8:	0052      	lsls	r2, r2, #1
   17eaa:	5ad3      	ldrh	r3, [r2, r3]
   17eac:	001a      	movs	r2, r3
   17eae:	23fa      	movs	r3, #250	; 0xfa
   17eb0:	009b      	lsls	r3, r3, #2
   17eb2:	4353      	muls	r3, r2
   17eb4:	001a      	movs	r2, r3
   17eb6:	4bab      	ldr	r3, [pc, #684]	; (18164 <enddevice_cpc_execute_command+0x3c0>)
   17eb8:	601a      	str	r2, [r3, #0]
        if (SwTimerIsRunning(certAppTimerId))
   17eba:	4bab      	ldr	r3, [pc, #684]	; (18168 <enddevice_cpc_execute_command+0x3c4>)
   17ebc:	781b      	ldrb	r3, [r3, #0]
   17ebe:	0018      	movs	r0, r3
   17ec0:	4baa      	ldr	r3, [pc, #680]	; (1816c <enddevice_cpc_execute_command+0x3c8>)
   17ec2:	4798      	blx	r3
   17ec4:	1e03      	subs	r3, r0, #0
   17ec6:	d004      	beq.n	17ed2 <enddevice_cpc_execute_command+0x12e>
        {
          SwTimerStop(certAppTimerId);
   17ec8:	4ba7      	ldr	r3, [pc, #668]	; (18168 <enddevice_cpc_execute_command+0x3c4>)
   17eca:	781b      	ldrb	r3, [r3, #0]
   17ecc:	0018      	movs	r0, r3
   17ece:	4ba8      	ldr	r3, [pc, #672]	; (18170 <enddevice_cpc_execute_command+0x3cc>)
   17ed0:	4798      	blx	r3
        }
        SwTimerStart(certAppTimerId, MS_TO_US(certAppTimeout),
   17ed2:	4ba5      	ldr	r3, [pc, #660]	; (18168 <enddevice_cpc_execute_command+0x3c4>)
   17ed4:	7818      	ldrb	r0, [r3, #0]
   17ed6:	4ba3      	ldr	r3, [pc, #652]	; (18164 <enddevice_cpc_execute_command+0x3c0>)
   17ed8:	681b      	ldr	r3, [r3, #0]
   17eda:	22fa      	movs	r2, #250	; 0xfa
   17edc:	0092      	lsls	r2, r2, #2
   17ede:	435a      	muls	r2, r3
   17ee0:	0011      	movs	r1, r2
   17ee2:	4aa4      	ldr	r2, [pc, #656]	; (18174 <enddevice_cpc_execute_command+0x3d0>)
   17ee4:	2300      	movs	r3, #0
   17ee6:	9300      	str	r3, [sp, #0]
   17ee8:	0013      	movs	r3, r2
   17eea:	2200      	movs	r2, #0
   17eec:	4ca2      	ldr	r4, [pc, #648]	; (18178 <enddevice_cpc_execute_command+0x3d4>)
   17eee:	47a0      	blx	r4
            SW_TIMEOUT_RELATIVE, cert_app_timer_callback, NULL);
        //printf("\r\nNew periodicity: %ds", periodicity[buffer[1]]);
      }
    }
    break;
   17ef0:	e11c      	b.n	1812c <enddevice_cpc_execute_command+0x388>
    
    case CPC_TX_FRAMES_CTRL_REQ:
    {
      //printf("TxFramesCtrlReq");
      switch (buffer[1])
   17ef2:	687b      	ldr	r3, [r7, #4]
   17ef4:	3301      	adds	r3, #1
   17ef6:	781b      	ldrb	r3, [r3, #0]
   17ef8:	2b01      	cmp	r3, #1
   17efa:	d009      	beq.n	17f10 <enddevice_cpc_execute_command+0x16c>
   17efc:	2b02      	cmp	r3, #2
   17efe:	d00b      	beq.n	17f18 <enddevice_cpc_execute_command+0x174>
   17f00:	2b00      	cmp	r3, #0
   17f02:	d000      	beq.n	17f06 <enddevice_cpc_execute_command+0x162>
        default:
        {
          // keep compiler happy
          //printf("\r\nError: RFU values in FrameType field");
        }
        break;
   17f04:	e00c      	b.n	17f20 <enddevice_cpc_execute_command+0x17c>
          bTxCnf = bTxCnf;
   17f06:	4b9d      	ldr	r3, [pc, #628]	; (1817c <enddevice_cpc_execute_command+0x3d8>)
   17f08:	781a      	ldrb	r2, [r3, #0]
   17f0a:	4b9c      	ldr	r3, [pc, #624]	; (1817c <enddevice_cpc_execute_command+0x3d8>)
   17f0c:	701a      	strb	r2, [r3, #0]
        break;
   17f0e:	e007      	b.n	17f20 <enddevice_cpc_execute_command+0x17c>
          bTxCnf = false;
   17f10:	4b9a      	ldr	r3, [pc, #616]	; (1817c <enddevice_cpc_execute_command+0x3d8>)
   17f12:	2200      	movs	r2, #0
   17f14:	701a      	strb	r2, [r3, #0]
        break;
   17f16:	e003      	b.n	17f20 <enddevice_cpc_execute_command+0x17c>
          bTxCnf = true;
   17f18:	4b98      	ldr	r3, [pc, #608]	; (1817c <enddevice_cpc_execute_command+0x3d8>)
   17f1a:	2201      	movs	r2, #1
   17f1c:	701a      	strb	r2, [r3, #0]
        break;
   17f1e:	46c0      	nop			; (mov r8, r8)
      }
    }
    break;
   17f20:	e141      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
      //for (uint8_t i = 1; i < buflen; i++)
      //{
      //    printf("%02X", buffer[i]);
      //}
      
      LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &tx_size);
   17f22:	2317      	movs	r3, #23
   17f24:	18fb      	adds	r3, r7, r3
   17f26:	001a      	movs	r2, r3
   17f28:	2100      	movs	r1, #0
   17f2a:	203d      	movs	r0, #61	; 0x3d
   17f2c:	4b8b      	ldr	r3, [pc, #556]	; (1815c <enddevice_cpc_execute_command+0x3b8>)
   17f2e:	4798      	blx	r3
      tx_size = (tx_size <= (buflen - 1)) ? tx_size : (buflen - 1);
   17f30:	2317      	movs	r3, #23
   17f32:	18fb      	adds	r3, r7, r3
   17f34:	781b      	ldrb	r3, [r3, #0]
   17f36:	001a      	movs	r2, r3
   17f38:	1cfb      	adds	r3, r7, #3
   17f3a:	781b      	ldrb	r3, [r3, #0]
   17f3c:	3b01      	subs	r3, #1
   17f3e:	429a      	cmp	r2, r3
   17f40:	dd00      	ble.n	17f44 <enddevice_cpc_execute_command+0x1a0>
   17f42:	001a      	movs	r2, r3
   17f44:	b2d2      	uxtb	r2, r2
   17f46:	2317      	movs	r3, #23
   17f48:	18fb      	adds	r3, r7, r3
   17f4a:	701a      	strb	r2, [r3, #0]
      sendData[0] = CPC_ECHO_INC_PAYLOAD_ANS;
   17f4c:	4b79      	ldr	r3, [pc, #484]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17f4e:	2208      	movs	r2, #8
   17f50:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = 0; i < tx_size; i++)
   17f52:	2337      	movs	r3, #55	; 0x37
   17f54:	18fb      	adds	r3, r7, r3
   17f56:	2200      	movs	r2, #0
   17f58:	701a      	strb	r2, [r3, #0]
   17f5a:	e01a      	b.n	17f92 <enddevice_cpc_execute_command+0x1ee>
      {
          sendData[i+1] = (1 + buffer[i+1]) % UINT8_MAX;
   17f5c:	2337      	movs	r3, #55	; 0x37
   17f5e:	18fb      	adds	r3, r7, r3
   17f60:	781b      	ldrb	r3, [r3, #0]
   17f62:	1c5c      	adds	r4, r3, #1
   17f64:	2337      	movs	r3, #55	; 0x37
   17f66:	18fb      	adds	r3, r7, r3
   17f68:	781b      	ldrb	r3, [r3, #0]
   17f6a:	3301      	adds	r3, #1
   17f6c:	687a      	ldr	r2, [r7, #4]
   17f6e:	18d3      	adds	r3, r2, r3
   17f70:	781b      	ldrb	r3, [r3, #0]
   17f72:	1c5a      	adds	r2, r3, #1
   17f74:	4b82      	ldr	r3, [pc, #520]	; (18180 <enddevice_cpc_execute_command+0x3dc>)
   17f76:	21ff      	movs	r1, #255	; 0xff
   17f78:	0010      	movs	r0, r2
   17f7a:	4798      	blx	r3
   17f7c:	000b      	movs	r3, r1
   17f7e:	b2da      	uxtb	r2, r3
   17f80:	4b6c      	ldr	r3, [pc, #432]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17f82:	551a      	strb	r2, [r3, r4]
      for (uint8_t i = 0; i < tx_size; i++)
   17f84:	2337      	movs	r3, #55	; 0x37
   17f86:	18fb      	adds	r3, r7, r3
   17f88:	781a      	ldrb	r2, [r3, #0]
   17f8a:	2337      	movs	r3, #55	; 0x37
   17f8c:	18fb      	adds	r3, r7, r3
   17f8e:	3201      	adds	r2, #1
   17f90:	701a      	strb	r2, [r3, #0]
   17f92:	2317      	movs	r3, #23
   17f94:	18fb      	adds	r3, r7, r3
   17f96:	781b      	ldrb	r3, [r3, #0]
   17f98:	2237      	movs	r2, #55	; 0x37
   17f9a:	18ba      	adds	r2, r7, r2
   17f9c:	7812      	ldrb	r2, [r2, #0]
   17f9e:	429a      	cmp	r2, r3
   17fa0:	d3dc      	bcc.n	17f5c <enddevice_cpc_execute_command+0x1b8>
      }
      sendDataLen = tx_size + 1;
   17fa2:	2317      	movs	r3, #23
   17fa4:	18fb      	adds	r3, r7, r3
   17fa6:	781b      	ldrb	r3, [r3, #0]
   17fa8:	b29b      	uxth	r3, r3
   17faa:	3301      	adds	r3, #1
   17fac:	b29a      	uxth	r2, r3
   17fae:	4b62      	ldr	r3, [pc, #392]	; (18138 <enddevice_cpc_execute_command+0x394>)
   17fb0:	801a      	strh	r2, [r3, #0]
      //printf("\r\n--> EchoIncPayloadAns\r\nTxPayload: ");
      //for (uint8_t i = 0; i < sendDataLen; i++)
      //{
      //    printf("%02X", sendData[i]);
      //}
      sendFport = TEST_PORT_NB;
   17fb2:	4b62      	ldr	r3, [pc, #392]	; (1813c <enddevice_cpc_execute_command+0x398>)
   17fb4:	22e0      	movs	r2, #224	; 0xe0
   17fb6:	701a      	strb	r2, [r3, #0]
  }
  break;
   17fb8:	e0f5      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
  
  case CPC_RX_APP_CNT_REQ:
  {
      //printf("RxAppCntReq");
      sendData[0] = CPC_RX_APP_CNT_ANS;
   17fba:	4b5e      	ldr	r3, [pc, #376]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17fbc:	2209      	movs	r2, #9
   17fbe:	701a      	strb	r2, [r3, #0]
      sendData[1] = (uint8_t) (downlinkCtr >> 8);
   17fc0:	4b70      	ldr	r3, [pc, #448]	; (18184 <enddevice_cpc_execute_command+0x3e0>)
   17fc2:	881b      	ldrh	r3, [r3, #0]
   17fc4:	0a1b      	lsrs	r3, r3, #8
   17fc6:	b29b      	uxth	r3, r3
   17fc8:	b2da      	uxtb	r2, r3
   17fca:	4b5a      	ldr	r3, [pc, #360]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17fcc:	705a      	strb	r2, [r3, #1]
      sendData[2] = (uint8_t) (downlinkCtr);
   17fce:	4b6d      	ldr	r3, [pc, #436]	; (18184 <enddevice_cpc_execute_command+0x3e0>)
   17fd0:	881b      	ldrh	r3, [r3, #0]
   17fd2:	b2da      	uxtb	r2, r3
   17fd4:	4b57      	ldr	r3, [pc, #348]	; (18134 <enddevice_cpc_execute_command+0x390>)
   17fd6:	709a      	strb	r2, [r3, #2]
      sendDataLen = 3;
   17fd8:	4b57      	ldr	r3, [pc, #348]	; (18138 <enddevice_cpc_execute_command+0x394>)
   17fda:	2203      	movs	r2, #3
   17fdc:	801a      	strh	r2, [r3, #0]
      //printf("\r\n--> RxAppCntAns\r\nTxPayload: ");
      //for (uint8_t i = 0; i < sendDataLen; i++)
      //{
      //    printf("%02X", sendData[i]);
      //}
      sendFport = TEST_PORT_NB;
   17fde:	4b57      	ldr	r3, [pc, #348]	; (1813c <enddevice_cpc_execute_command+0x398>)
   17fe0:	22e0      	movs	r2, #224	; 0xe0
   17fe2:	701a      	strb	r2, [r3, #0]
    }
    break;
   17fe4:	e0df      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_RX_APP_CNT_RESET_REQ:
    {
      //printf("RxAppCntRstReq");
      downlinkCtr = 0;
   17fe6:	4b67      	ldr	r3, [pc, #412]	; (18184 <enddevice_cpc_execute_command+0x3e0>)
   17fe8:	2200      	movs	r2, #0
   17fea:	801a      	strh	r2, [r3, #0]
    }
    break;
   17fec:	e0db      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_LINK_CHECK_REQ:
    {
      //printf("CpcLinkCheckReq");
      LORAWAN_SetAttr(SEND_LINK_CHECK_CMD, NULL);
   17fee:	2100      	movs	r1, #0
   17ff0:	2046      	movs	r0, #70	; 0x46
   17ff2:	4b55      	ldr	r3, [pc, #340]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   17ff4:	4798      	blx	r3
    }
    break;
   17ff6:	e0d6      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    
    case CPC_DEVICE_TIME_REQ:
    {
      //printf("CpcDeviceTimeReq");
      LORAWAN_SetAttr(SEND_DEVICE_TIME_CMD, NULL);
   17ff8:	2100      	movs	r1, #0
   17ffa:	2041      	movs	r0, #65	; 0x41
   17ffc:	4b52      	ldr	r3, [pc, #328]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   17ffe:	4798      	blx	r3
    }
    break;
   18000:	e0d1      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    }
    break;
    
    case CPC_TX_CW_REQ:
    {
      uint8_t txpower = 0;
   18002:	2316      	movs	r3, #22
   18004:	18fb      	adds	r3, r7, r3
   18006:	2200      	movs	r2, #0
   18008:	701a      	strb	r2, [r3, #0]
      uint16_t timeout = 0;
   1800a:	2334      	movs	r3, #52	; 0x34
   1800c:	18fb      	adds	r3, r7, r3
   1800e:	2200      	movs	r2, #0
   18010:	801a      	strh	r2, [r3, #0]
      uint32_t freq = 0;
   18012:	2300      	movs	r3, #0
   18014:	613b      	str	r3, [r7, #16]
      
      //printf("TxCwReq");
      
      timeout = buffer[2];
   18016:	687b      	ldr	r3, [r7, #4]
   18018:	3302      	adds	r3, #2
   1801a:	781a      	ldrb	r2, [r3, #0]
   1801c:	2334      	movs	r3, #52	; 0x34
   1801e:	18fb      	adds	r3, r7, r3
   18020:	801a      	strh	r2, [r3, #0]
      timeout |= ((uint16_t)buffer[1]) << 8;
   18022:	687b      	ldr	r3, [r7, #4]
   18024:	3301      	adds	r3, #1
   18026:	781b      	ldrb	r3, [r3, #0]
   18028:	021b      	lsls	r3, r3, #8
   1802a:	b21a      	sxth	r2, r3
   1802c:	2334      	movs	r3, #52	; 0x34
   1802e:	18fb      	adds	r3, r7, r3
   18030:	2100      	movs	r1, #0
   18032:	5e5b      	ldrsh	r3, [r3, r1]
   18034:	4313      	orrs	r3, r2
   18036:	b21a      	sxth	r2, r3
   18038:	2334      	movs	r3, #52	; 0x34
   1803a:	18fb      	adds	r3, r7, r3
   1803c:	801a      	strh	r2, [r3, #0]
      
      freq = buffer[5];
   1803e:	687b      	ldr	r3, [r7, #4]
   18040:	3305      	adds	r3, #5
   18042:	781b      	ldrb	r3, [r3, #0]
   18044:	613b      	str	r3, [r7, #16]
      freq |= ((uint32_t)buffer[4]) << 8;
   18046:	687b      	ldr	r3, [r7, #4]
   18048:	3304      	adds	r3, #4
   1804a:	781b      	ldrb	r3, [r3, #0]
   1804c:	021a      	lsls	r2, r3, #8
   1804e:	693b      	ldr	r3, [r7, #16]
   18050:	4313      	orrs	r3, r2
   18052:	613b      	str	r3, [r7, #16]
      freq |= ((uint32_t)buffer[3]) << 16;
   18054:	687b      	ldr	r3, [r7, #4]
   18056:	3303      	adds	r3, #3
   18058:	781b      	ldrb	r3, [r3, #0]
   1805a:	041a      	lsls	r2, r3, #16
   1805c:	693b      	ldr	r3, [r7, #16]
   1805e:	4313      	orrs	r3, r2
   18060:	613b      	str	r3, [r7, #16]
      freq *= 100U;
   18062:	693b      	ldr	r3, [r7, #16]
   18064:	2264      	movs	r2, #100	; 0x64
   18066:	4353      	muls	r3, r2
   18068:	613b      	str	r3, [r7, #16]
      
      txpower = buffer[6];
   1806a:	687b      	ldr	r3, [r7, #4]
   1806c:	799a      	ldrb	r2, [r3, #6]
   1806e:	2316      	movs	r3, #22
   18070:	18fb      	adds	r3, r7, r3
   18072:	701a      	strb	r2, [r3, #0]
      
      RADIO_SetAttr(CHANNEL_FREQUENCY, (void *)&freq);
   18074:	2310      	movs	r3, #16
   18076:	18fb      	adds	r3, r7, r3
   18078:	0019      	movs	r1, r3
   1807a:	2001      	movs	r0, #1
   1807c:	4b42      	ldr	r3, [pc, #264]	; (18188 <enddevice_cpc_execute_command+0x3e4>)
   1807e:	4798      	blx	r3
      RADIO_SetAttr(OUTPUT_POWER, (void *)&txpower);
   18080:	2316      	movs	r3, #22
   18082:	18fb      	adds	r3, r7, r3
   18084:	0019      	movs	r1, r3
   18086:	2004      	movs	r0, #4
   18088:	4b3f      	ldr	r3, [pc, #252]	; (18188 <enddevice_cpc_execute_command+0x3e4>)
   1808a:	4798      	blx	r3
      
      if (LORAWAN_SUCCESS == SwTimerStart(tx_cw_timer, MS_TO_US(timeout * 1000U),
   1808c:	4b3f      	ldr	r3, [pc, #252]	; (1818c <enddevice_cpc_execute_command+0x3e8>)
   1808e:	7818      	ldrb	r0, [r3, #0]
   18090:	2334      	movs	r3, #52	; 0x34
   18092:	18fb      	adds	r3, r7, r3
   18094:	881b      	ldrh	r3, [r3, #0]
   18096:	4a3e      	ldr	r2, [pc, #248]	; (18190 <enddevice_cpc_execute_command+0x3ec>)
   18098:	435a      	muls	r2, r3
   1809a:	0011      	movs	r1, r2
   1809c:	4a3d      	ldr	r2, [pc, #244]	; (18194 <enddevice_cpc_execute_command+0x3f0>)
   1809e:	2300      	movs	r3, #0
   180a0:	9300      	str	r3, [sp, #0]
   180a2:	0013      	movs	r3, r2
   180a4:	2200      	movs	r2, #0
   180a6:	4c34      	ldr	r4, [pc, #208]	; (18178 <enddevice_cpc_execute_command+0x3d4>)
   180a8:	47a0      	blx	r4
   180aa:	0003      	movs	r3, r0
   180ac:	2b08      	cmp	r3, #8
   180ae:	d000      	beq.n	180b2 <enddevice_cpc_execute_command+0x30e>
   180b0:	e078      	b.n	181a4 <enddevice_cpc_execute_command+0x400>
        SW_TIMEOUT_RELATIVE, enddevice_txcw_callback, NULL))
      {
          if (ERR_NONE == RADIO_TransmitCW())
   180b2:	4b39      	ldr	r3, [pc, #228]	; (18198 <enddevice_cpc_execute_command+0x3f4>)
   180b4:	4798      	blx	r3
      else
      {
          //printf("\r\nError: Unable to start CW TX timer");
      }
    }
    break;
   180b6:	e075      	b.n	181a4 <enddevice_cpc_execute_command+0x400>
    
    case CPC_DUT_FPORT224_DISABLE_REQ:
    {
      bool enable = false;
   180b8:	230f      	movs	r3, #15
   180ba:	18fb      	adds	r3, r7, r3
   180bc:	2200      	movs	r2, #0
   180be:	701a      	strb	r2, [r3, #0]
      //printf("DutFport224DisableReq\r\n");
      LORAWAN_SetAttr(TEST_MODE_ENABLE, &enable);
   180c0:	230f      	movs	r3, #15
   180c2:	18fb      	adds	r3, r7, r3
   180c4:	0019      	movs	r1, r3
   180c6:	2033      	movs	r0, #51	; 0x33
   180c8:	4b1f      	ldr	r3, [pc, #124]	; (18148 <enddevice_cpc_execute_command+0x3a4>)
   180ca:	4798      	blx	r3
#if (ENABLE_PDS == 1)
      PDS_DeleteAll();
   180cc:	4b33      	ldr	r3, [pc, #204]	; (1819c <enddevice_cpc_execute_command+0x3f8>)
   180ce:	4798      	blx	r3
#endif
      delay_ms(1000);
   180d0:	23fa      	movs	r3, #250	; 0xfa
   180d2:	009b      	lsls	r3, r3, #2
   180d4:	0018      	movs	r0, r3
   180d6:	4b32      	ldr	r3, [pc, #200]	; (181a0 <enddevice_cpc_execute_command+0x3fc>)
   180d8:	4798      	blx	r3
      NVIC_SystemReset();
   180da:	4b19      	ldr	r3, [pc, #100]	; (18140 <enddevice_cpc_execute_command+0x39c>)
   180dc:	4798      	blx	r3
    break;
    
    case CPC_DUT_VERSIONS_REQ:
    {
      //printf("DutVersionsReq");
      sendData[0] = CPC_DUT_VERSIONS_ANS;
   180de:	4b15      	ldr	r3, [pc, #84]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180e0:	227f      	movs	r2, #127	; 0x7f
   180e2:	701a      	strb	r2, [r3, #0]
      // FwVersion
      sendData[1] = 1; // 1
   180e4:	4b13      	ldr	r3, [pc, #76]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180e6:	2201      	movs	r2, #1
   180e8:	705a      	strb	r2, [r3, #1]
      sendData[2] = 0; // 0
   180ea:	4b12      	ldr	r3, [pc, #72]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180ec:	2200      	movs	r2, #0
   180ee:	709a      	strb	r2, [r3, #2]
      sendData[3] = 4; // P_4
   180f0:	4b10      	ldr	r3, [pc, #64]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180f2:	2204      	movs	r2, #4
   180f4:	70da      	strb	r2, [r3, #3]
      // LrwanVersion
      sendData[4] = 1;
   180f6:	4b0f      	ldr	r3, [pc, #60]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180f8:	2201      	movs	r2, #1
   180fa:	711a      	strb	r2, [r3, #4]
      sendData[5] = 0;
   180fc:	4b0d      	ldr	r3, [pc, #52]	; (18134 <enddevice_cpc_execute_command+0x390>)
   180fe:	2200      	movs	r2, #0
   18100:	715a      	strb	r2, [r3, #5]
      sendData[6] = 4;
   18102:	4b0c      	ldr	r3, [pc, #48]	; (18134 <enddevice_cpc_execute_command+0x390>)
   18104:	2204      	movs	r2, #4
   18106:	719a      	strb	r2, [r3, #6]
      // LrwanRpVersion
      sendData[7] = 1;
   18108:	4b0a      	ldr	r3, [pc, #40]	; (18134 <enddevice_cpc_execute_command+0x390>)
   1810a:	2201      	movs	r2, #1
   1810c:	71da      	strb	r2, [r3, #7]
      sendData[8] = 0;
   1810e:	4b09      	ldr	r3, [pc, #36]	; (18134 <enddevice_cpc_execute_command+0x390>)
   18110:	2200      	movs	r2, #0
   18112:	721a      	strb	r2, [r3, #8]
      sendData[9] = 4;
   18114:	4b07      	ldr	r3, [pc, #28]	; (18134 <enddevice_cpc_execute_command+0x390>)
   18116:	2204      	movs	r2, #4
   18118:	725a      	strb	r2, [r3, #9]
      
      sendDataLen = 10;
   1811a:	4b07      	ldr	r3, [pc, #28]	; (18138 <enddevice_cpc_execute_command+0x394>)
   1811c:	220a      	movs	r2, #10
   1811e:	801a      	strh	r2, [r3, #0]
      sendFport = TEST_PORT_NB;
   18120:	4b06      	ldr	r3, [pc, #24]	; (1813c <enddevice_cpc_execute_command+0x398>)
   18122:	22e0      	movs	r2, #224	; 0xe0
   18124:	701a      	strb	r2, [r3, #0]
    }
    break;
   18126:	e03e      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    break;
   18128:	46c0      	nop			; (mov r8, r8)
   1812a:	e03c      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
    break;
   1812c:	46c0      	nop			; (mov r8, r8)
   1812e:	e03a      	b.n	181a6 <enddevice_cpc_execute_command+0x402>
   18130:	0002ba30 	.word	0x0002ba30
   18134:	20001a40 	.word	0x20001a40
   18138:	20001a3c 	.word	0x20001a3c
   1813c:	20000030 	.word	0x20000030
   18140:	00017d85 	.word	0x00017d85
   18144:	00018245 	.word	0x00018245
   18148:	0001df51 	.word	0x0001df51
   1814c:	0002b9d8 	.word	0x0002b9d8
   18150:	0002b9dc 	.word	0x0002b9dc
   18154:	0002b9e0 	.word	0x0002b9e0
   18158:	00024261 	.word	0x00024261
   1815c:	0001bfa1 	.word	0x0001bfa1
   18160:	0002b9fc 	.word	0x0002b9fc
   18164:	2000002c 	.word	0x2000002c
   18168:	20001aa4 	.word	0x20001aa4
   1816c:	00015a89 	.word	0x00015a89
   18170:	00015cfd 	.word	0x00015cfd
   18174:	0001790d 	.word	0x0001790d
   18178:	000159bd 	.word	0x000159bd
   1817c:	20001106 	.word	0x20001106
   18180:	00021349 	.word	0x00021349
   18184:	20001104 	.word	0x20001104
   18188:	0001f5e1 	.word	0x0001f5e1
   1818c:	20001a3e 	.word	0x20001a3e
   18190:	000f4240 	.word	0x000f4240
   18194:	00018231 	.word	0x00018231
   18198:	000205d5 	.word	0x000205d5
   1819c:	00013ca1 	.word	0x00013ca1
   181a0:	000001d1 	.word	0x000001d1
    break;
   181a4:	46c0      	nop			; (mov r8, r8)
  }
  (void)status;
}
   181a6:	46c0      	nop			; (mov r8, r8)
   181a8:	46bd      	mov	sp, r7
   181aa:	b00f      	add	sp, #60	; 0x3c
   181ac:	bd90      	pop	{r4, r7, pc}
   181ae:	46c0      	nop			; (mov r8, r8)

000181b0 <enddevice_cpc_is_payload_valid>:

bool enddevice_cpc_is_payload_valid(uint8_t *buffer, uint8_t len)
{
   181b0:	b580      	push	{r7, lr}
   181b2:	b084      	sub	sp, #16
   181b4:	af00      	add	r7, sp, #0
   181b6:	6078      	str	r0, [r7, #4]
   181b8:	000a      	movs	r2, r1
   181ba:	1cfb      	adds	r3, r7, #3
   181bc:	701a      	strb	r2, [r3, #0]
  bool valid = false;
   181be:	230f      	movs	r3, #15
   181c0:	18fb      	adds	r3, r7, r3
   181c2:	2200      	movs	r2, #0
   181c4:	701a      	strb	r2, [r3, #0]
  switch (*buffer)
   181c6:	687b      	ldr	r3, [r7, #4]
   181c8:	781b      	ldrb	r3, [r3, #0]
   181ca:	2b7f      	cmp	r3, #127	; 0x7f
   181cc:	d827      	bhi.n	1821e <enddevice_cpc_is_payload_valid+0x6e>
   181ce:	009a      	lsls	r2, r3, #2
   181d0:	4b16      	ldr	r3, [pc, #88]	; (1822c <enddevice_cpc_is_payload_valid+0x7c>)
   181d2:	18d3      	adds	r3, r2, r3
   181d4:	681b      	ldr	r3, [r3, #0]
   181d6:	469f      	mov	pc, r3
  {
    case CPC_TX_FRAMES_CTRL_REQ:
    case CPC_ECHO_INC_PAYLOAD_REQ:
    {
      valid = (len >= 1);
   181d8:	230f      	movs	r3, #15
   181da:	18fb      	adds	r3, r7, r3
   181dc:	1cfa      	adds	r2, r7, #3
   181de:	7812      	ldrb	r2, [r2, #0]
   181e0:	1e51      	subs	r1, r2, #1
   181e2:	418a      	sbcs	r2, r1
   181e4:	701a      	strb	r2, [r3, #0]
    }
    break;
   181e6:	e01a      	b.n	1821e <enddevice_cpc_is_payload_valid+0x6e>
    case CPC_LINK_CHECK_REQ:
    case CPC_DEVICE_TIME_REQ:
    case CPC_DUT_FPORT224_DISABLE_REQ:
    case CPC_DUT_VERSIONS_REQ:
    {
      valid = (1 == len); 
   181e8:	230f      	movs	r3, #15
   181ea:	18fb      	adds	r3, r7, r3
   181ec:	1cfa      	adds	r2, r7, #3
   181ee:	7812      	ldrb	r2, [r2, #0]
   181f0:	3a01      	subs	r2, #1
   181f2:	4251      	negs	r1, r2
   181f4:	414a      	adcs	r2, r1
   181f6:	701a      	strb	r2, [r3, #0]
    }
    break;
   181f8:	e011      	b.n	1821e <enddevice_cpc_is_payload_valid+0x6e>
    case CPC_ADR_BIT_CHANGE_REQ:
    case CPC_REGIONAL_DUTYCYCLE_CTRL_REQ:
    case CPC_TX_PERIODICITY_CHANGE_REQ:
    case CPC_PING_SLOT_INFO_REQ:
    {
      valid = (2 == len);
   181fa:	230f      	movs	r3, #15
   181fc:	18fb      	adds	r3, r7, r3
   181fe:	1cfa      	adds	r2, r7, #3
   18200:	7812      	ldrb	r2, [r2, #0]
   18202:	3a02      	subs	r2, #2
   18204:	4251      	negs	r1, r2
   18206:	414a      	adcs	r2, r1
   18208:	701a      	strb	r2, [r3, #0]
    }
    break;
   1820a:	e008      	b.n	1821e <enddevice_cpc_is_payload_valid+0x6e>
    
    case CPC_TX_CW_REQ:
    {
      valid = (7 == len);
   1820c:	230f      	movs	r3, #15
   1820e:	18fb      	adds	r3, r7, r3
   18210:	1cfa      	adds	r2, r7, #3
   18212:	7812      	ldrb	r2, [r2, #0]
   18214:	3a07      	subs	r2, #7
   18216:	4251      	negs	r1, r2
   18218:	414a      	adcs	r2, r1
   1821a:	701a      	strb	r2, [r3, #0]
    }
    break;
   1821c:	46c0      	nop			; (mov r8, r8)
  }
  
  return valid;
   1821e:	230f      	movs	r3, #15
   18220:	18fb      	adds	r3, r7, r3
   18222:	781b      	ldrb	r3, [r3, #0]
}
   18224:	0018      	movs	r0, r3
   18226:	46bd      	mov	sp, r7
   18228:	b004      	add	sp, #16
   1822a:	bd80      	pop	{r7, pc}
   1822c:	0002bc30 	.word	0x0002bc30

00018230 <enddevice_txcw_callback>:

static void enddevice_txcw_callback(void)
{
   18230:	b580      	push	{r7, lr}
   18232:	af00      	add	r7, sp, #0
    if (ERR_NONE == RADIO_StopCW())
   18234:	4b02      	ldr	r3, [pc, #8]	; (18240 <enddevice_txcw_callback+0x10>)
   18236:	4798      	blx	r3
    }
    else
    {
        //printf("\r\nError in stopping CW, pls check");
    }
}
   18238:	46c0      	nop			; (mov r8, r8)
   1823a:	46bd      	mov	sp, r7
   1823c:	bd80      	pop	{r7, pc}
   1823e:	46c0      	nop			; (mov r8, r8)
   18240:	0002064d 	.word	0x0002064d

00018244 <enddevice_cpc_fresh_join>:

static void enddevice_cpc_fresh_join(void)
{
   18244:	b590      	push	{r4, r7, lr}
   18246:	b083      	sub	sp, #12
   18248:	af00      	add	r7, sp, #0
    StackRetStatus_t status;
    bool trueval = true;
   1824a:	1dbb      	adds	r3, r7, #6
   1824c:	2201      	movs	r2, #1
   1824e:	701a      	strb	r2, [r3, #0]
#ifdef CRYPTO_DEV_ENABLED
    LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &trueval );
#endif /* #ifdef CRYPTO_DEV_ENABLED */
    SwTimerStop(certAppTimerId);
   18250:	4b1a      	ldr	r3, [pc, #104]	; (182bc <enddevice_cpc_fresh_join+0x78>)
   18252:	781b      	ldrb	r3, [r3, #0]
   18254:	0018      	movs	r0, r3
   18256:	4b1a      	ldr	r3, [pc, #104]	; (182c0 <enddevice_cpc_fresh_join+0x7c>)
   18258:	4798      	blx	r3
    LORAWAN_Reset(bandTable[current_band]);
   1825a:	4b1a      	ldr	r3, [pc, #104]	; (182c4 <enddevice_cpc_fresh_join+0x80>)
   1825c:	781b      	ldrb	r3, [r3, #0]
   1825e:	001a      	movs	r2, r3
   18260:	4b19      	ldr	r3, [pc, #100]	; (182c8 <enddevice_cpc_fresh_join+0x84>)
   18262:	5c9b      	ldrb	r3, [r3, r2]
   18264:	0018      	movs	r0, r3
   18266:	4b19      	ldr	r3, [pc, #100]	; (182cc <enddevice_cpc_fresh_join+0x88>)
   18268:	4798      	blx	r3
#if (ENABLE_PDS == 1)
    PDS_RestoreAll();
   1826a:	4b19      	ldr	r3, [pc, #100]	; (182d0 <enddevice_cpc_fresh_join+0x8c>)
   1826c:	4798      	blx	r3
#endif
    LORAWAN_SetAttr(TEST_MODE_ENABLE, &trueval);
   1826e:	1dbb      	adds	r3, r7, #6
   18270:	0019      	movs	r1, r3
   18272:	2033      	movs	r0, #51	; 0x33
   18274:	4b17      	ldr	r3, [pc, #92]	; (182d4 <enddevice_cpc_fresh_join+0x90>)
   18276:	4798      	blx	r3
    LORAWAN_SetAttr(DEV_EUI, devEui);
   18278:	4b17      	ldr	r3, [pc, #92]	; (182d8 <enddevice_cpc_fresh_join+0x94>)
   1827a:	0019      	movs	r1, r3
   1827c:	2000      	movs	r0, #0
   1827e:	4b15      	ldr	r3, [pc, #84]	; (182d4 <enddevice_cpc_fresh_join+0x90>)
   18280:	4798      	blx	r3
    LORAWAN_SetAttr(JOIN_EUI, joinEui);
   18282:	4b16      	ldr	r3, [pc, #88]	; (182dc <enddevice_cpc_fresh_join+0x98>)
   18284:	0019      	movs	r1, r3
   18286:	2001      	movs	r0, #1
   18288:	4b12      	ldr	r3, [pc, #72]	; (182d4 <enddevice_cpc_fresh_join+0x90>)
   1828a:	4798      	blx	r3
    LORAWAN_SetAttr(APP_KEY, appKey);
   1828c:	4b14      	ldr	r3, [pc, #80]	; (182e0 <enddevice_cpc_fresh_join+0x9c>)
   1828e:	0019      	movs	r1, r3
   18290:	2003      	movs	r0, #3
   18292:	4b10      	ldr	r3, [pc, #64]	; (182d4 <enddevice_cpc_fresh_join+0x90>)
   18294:	4798      	blx	r3
    LORAWAN_SetAttr(ADR, &trueval);
   18296:	1dbb      	adds	r3, r7, #6
   18298:	0019      	movs	r1, r3
   1829a:	2006      	movs	r0, #6
   1829c:	4b0d      	ldr	r3, [pc, #52]	; (182d4 <enddevice_cpc_fresh_join+0x90>)
   1829e:	4798      	blx	r3
    status = LORAWAN_Join(LORAWAN_OTAA);
   182a0:	1dfc      	adds	r4, r7, #7
   182a2:	2000      	movs	r0, #0
   182a4:	4b0f      	ldr	r3, [pc, #60]	; (182e4 <enddevice_cpc_fresh_join+0xa0>)
   182a6:	4798      	blx	r3
   182a8:	0003      	movs	r3, r0
   182aa:	7023      	strb	r3, [r4, #0]
    printf("\nOTAA Join Request Sent\n\r");
   182ac:	4b0e      	ldr	r3, [pc, #56]	; (182e8 <enddevice_cpc_fresh_join+0xa4>)
   182ae:	0018      	movs	r0, r3
   182b0:	4b0e      	ldr	r3, [pc, #56]	; (182ec <enddevice_cpc_fresh_join+0xa8>)
   182b2:	4798      	blx	r3
    (void)status;
}
   182b4:	46c0      	nop			; (mov r8, r8)
   182b6:	46bd      	mov	sp, r7
   182b8:	b003      	add	sp, #12
   182ba:	bd90      	pop	{r4, r7, pc}
   182bc:	20001aa4 	.word	0x20001aa4
   182c0:	00015cfd 	.word	0x00015cfd
   182c4:	20001a3f 	.word	0x20001a3f
   182c8:	20000164 	.word	0x20000164
   182cc:	0001e4cd 	.word	0x0001e4cd
   182d0:	00013cc9 	.word	0x00013cc9
   182d4:	0001df51 	.word	0x0001df51
   182d8:	20000058 	.word	0x20000058
   182dc:	20000060 	.word	0x20000060
   182e0:	20000068 	.word	0x20000068
   182e4:	0001bb9d 	.word	0x0001bb9d
   182e8:	0002ba14 	.word	0x0002ba14
   182ec:	00024261 	.word	0x00024261

000182f0 <__NVIC_SystemReset>:
{
   182f0:	b580      	push	{r7, lr}
   182f2:	af00      	add	r7, sp, #0
   182f4:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   182f8:	4b03      	ldr	r3, [pc, #12]	; (18308 <__NVIC_SystemReset+0x18>)
   182fa:	4a04      	ldr	r2, [pc, #16]	; (1830c <__NVIC_SystemReset+0x1c>)
   182fc:	60da      	str	r2, [r3, #12]
   182fe:	f3bf 8f4f 	dsb	sy
    __NOP();
   18302:	46c0      	nop			; (mov r8, r8)
   18304:	e7fd      	b.n	18302 <__NVIC_SystemReset+0x12>
   18306:	46c0      	nop			; (mov r8, r8)
   18308:	e000ed00 	.word	0xe000ed00
   1830c:	05fa0004 	.word	0x05fa0004

00018310 <system_pinmux_get_group_from_gpio_pin>:
{
   18310:	b580      	push	{r7, lr}
   18312:	b084      	sub	sp, #16
   18314:	af00      	add	r7, sp, #0
   18316:	0002      	movs	r2, r0
   18318:	1dfb      	adds	r3, r7, #7
   1831a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1831c:	230f      	movs	r3, #15
   1831e:	18fb      	adds	r3, r7, r3
   18320:	1dfa      	adds	r2, r7, #7
   18322:	7812      	ldrb	r2, [r2, #0]
   18324:	09d2      	lsrs	r2, r2, #7
   18326:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18328:	230e      	movs	r3, #14
   1832a:	18fb      	adds	r3, r7, r3
   1832c:	1dfa      	adds	r2, r7, #7
   1832e:	7812      	ldrb	r2, [r2, #0]
   18330:	0952      	lsrs	r2, r2, #5
   18332:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18334:	4b0d      	ldr	r3, [pc, #52]	; (1836c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18336:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18338:	230f      	movs	r3, #15
   1833a:	18fb      	adds	r3, r7, r3
   1833c:	781b      	ldrb	r3, [r3, #0]
   1833e:	2b00      	cmp	r3, #0
   18340:	d10f      	bne.n	18362 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18342:	230f      	movs	r3, #15
   18344:	18fb      	adds	r3, r7, r3
   18346:	781b      	ldrb	r3, [r3, #0]
   18348:	009b      	lsls	r3, r3, #2
   1834a:	2210      	movs	r2, #16
   1834c:	4694      	mov	ip, r2
   1834e:	44bc      	add	ip, r7
   18350:	4463      	add	r3, ip
   18352:	3b08      	subs	r3, #8
   18354:	681a      	ldr	r2, [r3, #0]
   18356:	230e      	movs	r3, #14
   18358:	18fb      	adds	r3, r7, r3
   1835a:	781b      	ldrb	r3, [r3, #0]
   1835c:	01db      	lsls	r3, r3, #7
   1835e:	18d3      	adds	r3, r2, r3
   18360:	e000      	b.n	18364 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18362:	2300      	movs	r3, #0
}
   18364:	0018      	movs	r0, r3
   18366:	46bd      	mov	sp, r7
   18368:	b004      	add	sp, #16
   1836a:	bd80      	pop	{r7, pc}
   1836c:	40002800 	.word	0x40002800

00018370 <port_get_group_from_gpio_pin>:
{
   18370:	b580      	push	{r7, lr}
   18372:	b082      	sub	sp, #8
   18374:	af00      	add	r7, sp, #0
   18376:	0002      	movs	r2, r0
   18378:	1dfb      	adds	r3, r7, #7
   1837a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1837c:	1dfb      	adds	r3, r7, #7
   1837e:	781b      	ldrb	r3, [r3, #0]
   18380:	0018      	movs	r0, r3
   18382:	4b03      	ldr	r3, [pc, #12]	; (18390 <port_get_group_from_gpio_pin+0x20>)
   18384:	4798      	blx	r3
   18386:	0003      	movs	r3, r0
}
   18388:	0018      	movs	r0, r3
   1838a:	46bd      	mov	sp, r7
   1838c:	b002      	add	sp, #8
   1838e:	bd80      	pop	{r7, pc}
   18390:	00018311 	.word	0x00018311

00018394 <port_get_config_defaults>:
{
   18394:	b580      	push	{r7, lr}
   18396:	b082      	sub	sp, #8
   18398:	af00      	add	r7, sp, #0
   1839a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1839c:	687b      	ldr	r3, [r7, #4]
   1839e:	2200      	movs	r2, #0
   183a0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   183a2:	687b      	ldr	r3, [r7, #4]
   183a4:	2201      	movs	r2, #1
   183a6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   183a8:	687b      	ldr	r3, [r7, #4]
   183aa:	2200      	movs	r2, #0
   183ac:	709a      	strb	r2, [r3, #2]
}
   183ae:	46c0      	nop			; (mov r8, r8)
   183b0:	46bd      	mov	sp, r7
   183b2:	b002      	add	sp, #8
   183b4:	bd80      	pop	{r7, pc}
	...

000183b8 <port_pin_set_output_level>:
{
   183b8:	b580      	push	{r7, lr}
   183ba:	b084      	sub	sp, #16
   183bc:	af00      	add	r7, sp, #0
   183be:	0002      	movs	r2, r0
   183c0:	1dfb      	adds	r3, r7, #7
   183c2:	701a      	strb	r2, [r3, #0]
   183c4:	1dbb      	adds	r3, r7, #6
   183c6:	1c0a      	adds	r2, r1, #0
   183c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   183ca:	1dfb      	adds	r3, r7, #7
   183cc:	781b      	ldrb	r3, [r3, #0]
   183ce:	0018      	movs	r0, r3
   183d0:	4b0d      	ldr	r3, [pc, #52]	; (18408 <port_pin_set_output_level+0x50>)
   183d2:	4798      	blx	r3
   183d4:	0003      	movs	r3, r0
   183d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   183d8:	1dfb      	adds	r3, r7, #7
   183da:	781b      	ldrb	r3, [r3, #0]
   183dc:	221f      	movs	r2, #31
   183de:	4013      	ands	r3, r2
   183e0:	2201      	movs	r2, #1
   183e2:	409a      	lsls	r2, r3
   183e4:	0013      	movs	r3, r2
   183e6:	60bb      	str	r3, [r7, #8]
	if (level) {
   183e8:	1dbb      	adds	r3, r7, #6
   183ea:	781b      	ldrb	r3, [r3, #0]
   183ec:	2b00      	cmp	r3, #0
   183ee:	d003      	beq.n	183f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   183f0:	68fb      	ldr	r3, [r7, #12]
   183f2:	68ba      	ldr	r2, [r7, #8]
   183f4:	619a      	str	r2, [r3, #24]
}
   183f6:	e002      	b.n	183fe <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   183f8:	68fb      	ldr	r3, [r7, #12]
   183fa:	68ba      	ldr	r2, [r7, #8]
   183fc:	615a      	str	r2, [r3, #20]
}
   183fe:	46c0      	nop			; (mov r8, r8)
   18400:	46bd      	mov	sp, r7
   18402:	b004      	add	sp, #16
   18404:	bd80      	pop	{r7, pc}
   18406:	46c0      	nop			; (mov r8, r8)
   18408:	00018371 	.word	0x00018371

0001840c <displayTask>:

/*********************************************************************//**
\brief    Calls appropriate functions based on state variables
*************************************************************************/
static SYSTEM_TaskStatus_t displayTask(void)
{
   1840c:	b580      	push	{r7, lr}
   1840e:	af00      	add	r7, sp, #0
	switch(appTaskState)
   18410:	4b10      	ldr	r3, [pc, #64]	; (18454 <displayTask+0x48>)
   18412:	781b      	ldrb	r3, [r3, #0]
   18414:	2b01      	cmp	r3, #1
   18416:	d00b      	beq.n	18430 <displayTask+0x24>
   18418:	dc02      	bgt.n	18420 <displayTask+0x14>
   1841a:	2b00      	cmp	r3, #0
   1841c:	d005      	beq.n	1842a <displayTask+0x1e>
   1841e:	e010      	b.n	18442 <displayTask+0x36>
   18420:	2b02      	cmp	r3, #2
   18422:	d008      	beq.n	18436 <displayTask+0x2a>
   18424:	2b03      	cmp	r3, #3
   18426:	d009      	beq.n	1843c <displayTask+0x30>
   18428:	e00b      	b.n	18442 <displayTask+0x36>
	{
		case RESTORE_BAND_STATE:
			displayRunRestoreBand();
   1842a:	4b0b      	ldr	r3, [pc, #44]	; (18458 <displayTask+0x4c>)
   1842c:	4798      	blx	r3
			break;
   1842e:	e00d      	b.n	1844c <displayTask+0x40>
		case DEMO_CERT_APP_STATE:
			displayRunDemoCertApp();
   18430:	4b0a      	ldr	r3, [pc, #40]	; (1845c <displayTask+0x50>)
   18432:	4798      	blx	r3
			break;
   18434:	e00a      	b.n	1844c <displayTask+0x40>
		case DEMO_APP_STATE:
			displayRunDemoApp();
   18436:	4b0a      	ldr	r3, [pc, #40]	; (18460 <displayTask+0x54>)
   18438:	4798      	blx	r3
			break;
   1843a:	e007      	b.n	1844c <displayTask+0x40>
		case JOIN_SEND_STATE:
			displayJoinAndSend();
   1843c:	4b09      	ldr	r3, [pc, #36]	; (18464 <displayTask+0x58>)
   1843e:	4798      	blx	r3
			break;
   18440:	e004      	b.n	1844c <displayTask+0x40>
		default:
			printf("Error STATE Entered\r\n");
   18442:	4b09      	ldr	r3, [pc, #36]	; (18468 <displayTask+0x5c>)
   18444:	0018      	movs	r0, r3
   18446:	4b09      	ldr	r3, [pc, #36]	; (1846c <displayTask+0x60>)
   18448:	4798      	blx	r3
			break;
   1844a:	46c0      	nop			; (mov r8, r8)
	}
	
	return SYSTEM_TASK_SUCCESS;
   1844c:	2300      	movs	r3, #0
}
   1844e:	0018      	movs	r0, r3
   18450:	46bd      	mov	sp, r7
   18452:	bd80      	pop	{r7, pc}
   18454:	20001138 	.word	0x20001138
   18458:	00018a39 	.word	0x00018a39
   1845c:	000189c1 	.word	0x000189c1
   18460:	00018b51 	.word	0x00018b51
   18464:	00018a69 	.word	0x00018a69
   18468:	0002be94 	.word	0x0002be94
   1846c:	00024325 	.word	0x00024325

00018470 <serial_data_handler>:

/*********************************************************************//**
\brief    Pulls the data from UART when activated
*************************************************************************/
void serial_data_handler(void)
{
   18470:	b580      	push	{r7, lr}
   18472:	b082      	sub	sp, #8
   18474:	af00      	add	r7, sp, #0
	int rxChar;
	char serialData;
	/* verify if there was any character received*/
	if (startReceiving == true)
   18476:	4b16      	ldr	r3, [pc, #88]	; (184d0 <serial_data_handler+0x60>)
   18478:	781b      	ldrb	r3, [r3, #0]
   1847a:	2b00      	cmp	r3, #0
   1847c:	d023      	beq.n	184c6 <serial_data_handler+0x56>
	{
		if((-1) != (rxChar = sio2host_getchar_nowait()))
   1847e:	4b15      	ldr	r3, [pc, #84]	; (184d4 <serial_data_handler+0x64>)
   18480:	4798      	blx	r3
   18482:	0003      	movs	r3, r0
   18484:	607b      	str	r3, [r7, #4]
   18486:	687b      	ldr	r3, [r7, #4]
   18488:	3301      	adds	r3, #1
   1848a:	d01c      	beq.n	184c6 <serial_data_handler+0x56>
		{
			serialData = (char)rxChar;
   1848c:	1cfb      	adds	r3, r7, #3
   1848e:	687a      	ldr	r2, [r7, #4]
   18490:	701a      	strb	r2, [r3, #0]
			if((serialData != '\r') && (serialData != '\n') && (serialData != '\b'))
   18492:	1cfb      	adds	r3, r7, #3
   18494:	781b      	ldrb	r3, [r3, #0]
   18496:	2b0d      	cmp	r3, #13
   18498:	d015      	beq.n	184c6 <serial_data_handler+0x56>
   1849a:	1cfb      	adds	r3, r7, #3
   1849c:	781b      	ldrb	r3, [r3, #0]
   1849e:	2b0a      	cmp	r3, #10
   184a0:	d011      	beq.n	184c6 <serial_data_handler+0x56>
   184a2:	1cfb      	adds	r3, r7, #3
   184a4:	781b      	ldrb	r3, [r3, #0]
   184a6:	2b08      	cmp	r3, #8
   184a8:	d00d      	beq.n	184c6 <serial_data_handler+0x56>
			{
				startReceiving = false;
   184aa:	4b09      	ldr	r3, [pc, #36]	; (184d0 <serial_data_handler+0x60>)
   184ac:	2200      	movs	r2, #0
   184ae:	701a      	strb	r2, [r3, #0]
  			    serialBuffer = rxChar;
   184b0:	687b      	ldr	r3, [r7, #4]
   184b2:	b2da      	uxtb	r2, r3
   184b4:	4b08      	ldr	r3, [pc, #32]	; (184d8 <serial_data_handler+0x68>)
   184b6:	701a      	strb	r2, [r3, #0]
			    appPostTask(PROCESS_TASK_HANDLER);
   184b8:	2001      	movs	r0, #1
   184ba:	4b08      	ldr	r3, [pc, #32]	; (184dc <serial_data_handler+0x6c>)
   184bc:	4798      	blx	r3
				printf("\r\n");			
   184be:	4b08      	ldr	r3, [pc, #32]	; (184e0 <serial_data_handler+0x70>)
   184c0:	0018      	movs	r0, r3
   184c2:	4b08      	ldr	r3, [pc, #32]	; (184e4 <serial_data_handler+0x74>)
   184c4:	4798      	blx	r3
			}
		}
	}
}
   184c6:	46c0      	nop			; (mov r8, r8)
   184c8:	46bd      	mov	sp, r7
   184ca:	b002      	add	sp, #8
   184cc:	bd80      	pop	{r7, pc}
   184ce:	46c0      	nop			; (mov r8, r8)
   184d0:	20001137 	.word	0x20001137
   184d4:	000068f1 	.word	0x000068f1
   184d8:	20001148 	.word	0x20001148
   184dc:	00019795 	.word	0x00019795
   184e0:	0002beac 	.word	0x0002beac
   184e4:	00024325 	.word	0x00024325

000184e8 <processTask>:

/*********************************************************************//**
\brief    Calls appropriate functions based on state variables
*************************************************************************/
static SYSTEM_TaskStatus_t processTask(void)
{
   184e8:	b580      	push	{r7, lr}
   184ea:	af00      	add	r7, sp, #0
	switch(appTaskState)
   184ec:	4b10      	ldr	r3, [pc, #64]	; (18530 <processTask+0x48>)
   184ee:	781b      	ldrb	r3, [r3, #0]
   184f0:	2b01      	cmp	r3, #1
   184f2:	d00b      	beq.n	1850c <processTask+0x24>
   184f4:	dc02      	bgt.n	184fc <processTask+0x14>
   184f6:	2b00      	cmp	r3, #0
   184f8:	d005      	beq.n	18506 <processTask+0x1e>
   184fa:	e010      	b.n	1851e <processTask+0x36>
   184fc:	2b02      	cmp	r3, #2
   184fe:	d008      	beq.n	18512 <processTask+0x2a>
   18500:	2b03      	cmp	r3, #3
   18502:	d009      	beq.n	18518 <processTask+0x30>
   18504:	e00b      	b.n	1851e <processTask+0x36>
	{
		case RESTORE_BAND_STATE:
			processRunRestoreBand();
   18506:	4b0b      	ldr	r3, [pc, #44]	; (18534 <processTask+0x4c>)
   18508:	4798      	blx	r3
			break;
   1850a:	e00d      	b.n	18528 <processTask+0x40>
		case DEMO_CERT_APP_STATE:
			processRunDemoCertApp();
   1850c:	4b0a      	ldr	r3, [pc, #40]	; (18538 <processTask+0x50>)
   1850e:	4798      	blx	r3
			break;
   18510:	e00a      	b.n	18528 <processTask+0x40>
		case DEMO_APP_STATE:
			processRunDemoApp();
   18512:	4b0a      	ldr	r3, [pc, #40]	; (1853c <processTask+0x54>)
   18514:	4798      	blx	r3
			break;
   18516:	e007      	b.n	18528 <processTask+0x40>
		case JOIN_SEND_STATE:
			processJoinAndSend();
   18518:	4b09      	ldr	r3, [pc, #36]	; (18540 <processTask+0x58>)
   1851a:	4798      	blx	r3
			break;
   1851c:	e004      	b.n	18528 <processTask+0x40>
		default:
			printf("Error STATE Entered\r\n");
   1851e:	4b09      	ldr	r3, [pc, #36]	; (18544 <processTask+0x5c>)
   18520:	0018      	movs	r0, r3
   18522:	4b09      	ldr	r3, [pc, #36]	; (18548 <processTask+0x60>)
   18524:	4798      	blx	r3
			break;
   18526:	46c0      	nop			; (mov r8, r8)
	}
	
	return SYSTEM_TASK_SUCCESS;
   18528:	2300      	movs	r3, #0
}
   1852a:	0018      	movs	r0, r3
   1852c:	46bd      	mov	sp, r7
   1852e:	bd80      	pop	{r7, pc}
   18530:	20001138 	.word	0x20001138
   18534:	000185ad 	.word	0x000185ad
   18538:	0001854d 	.word	0x0001854d
   1853c:	000188fd 	.word	0x000188fd
   18540:	0001873d 	.word	0x0001873d
   18544:	0002be94 	.word	0x0002be94
   18548:	00024325 	.word	0x00024325

0001854c <processRunDemoCertApp>:

/*********************************************************************//**
\brief    Activates demo application or certification application
*************************************************************************/
static void processRunDemoCertApp(void)
{
   1854c:	b580      	push	{r7, lr}
   1854e:	af00      	add	r7, sp, #0
	serialBuffer = '1';  //zygurt.  Always Demo App
   18550:	4b10      	ldr	r3, [pc, #64]	; (18594 <processRunDemoCertApp+0x48>)
   18552:	2231      	movs	r2, #49	; 0x31
   18554:	701a      	strb	r2, [r3, #0]
	if(serialBuffer == '1')
   18556:	4b0f      	ldr	r3, [pc, #60]	; (18594 <processRunDemoCertApp+0x48>)
   18558:	781b      	ldrb	r3, [r3, #0]
   1855a:	2b31      	cmp	r3, #49	; 0x31
   1855c:	d106      	bne.n	1856c <processRunDemoCertApp+0x20>
	{
		appTaskState = DEMO_APP_STATE;
   1855e:	4b0e      	ldr	r3, [pc, #56]	; (18598 <processRunDemoCertApp+0x4c>)
   18560:	2202      	movs	r2, #2
   18562:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   18564:	2000      	movs	r0, #0
   18566:	4b0d      	ldr	r3, [pc, #52]	; (1859c <processRunDemoCertApp+0x50>)
   18568:	4798      	blx	r3
	{
		printf("Please enter a valid choice\r\n");
		appTaskState = DEMO_CERT_APP_STATE;
		appPostTask(DISPLAY_TASK_HANDLER);
	}
}
   1856a:	e010      	b.n	1858e <processRunDemoCertApp+0x42>
	else if(serialBuffer == '2')
   1856c:	4b09      	ldr	r3, [pc, #36]	; (18594 <processRunDemoCertApp+0x48>)
   1856e:	781b      	ldrb	r3, [r3, #0]
   18570:	2b32      	cmp	r3, #50	; 0x32
   18572:	d102      	bne.n	1857a <processRunDemoCertApp+0x2e>
		runCertApp();
   18574:	4b0a      	ldr	r3, [pc, #40]	; (185a0 <processRunDemoCertApp+0x54>)
   18576:	4798      	blx	r3
}
   18578:	e009      	b.n	1858e <processRunDemoCertApp+0x42>
		printf("Please enter a valid choice\r\n");
   1857a:	4b0a      	ldr	r3, [pc, #40]	; (185a4 <processRunDemoCertApp+0x58>)
   1857c:	0018      	movs	r0, r3
   1857e:	4b0a      	ldr	r3, [pc, #40]	; (185a8 <processRunDemoCertApp+0x5c>)
   18580:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
   18582:	4b05      	ldr	r3, [pc, #20]	; (18598 <processRunDemoCertApp+0x4c>)
   18584:	2201      	movs	r2, #1
   18586:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   18588:	2000      	movs	r0, #0
   1858a:	4b04      	ldr	r3, [pc, #16]	; (1859c <processRunDemoCertApp+0x50>)
   1858c:	4798      	blx	r3
}
   1858e:	46c0      	nop			; (mov r8, r8)
   18590:	46bd      	mov	sp, r7
   18592:	bd80      	pop	{r7, pc}
   18594:	20001148 	.word	0x20001148
   18598:	20001138 	.word	0x20001138
   1859c:	00019795 	.word	0x00019795
   185a0:	0001961d 	.word	0x0001961d
   185a4:	0002beb0 	.word	0x0002beb0
   185a8:	00024325 	.word	0x00024325

000185ac <processRunRestoreBand>:

/*********************************************************************//**
\brief    Restores the previous band and runs
*************************************************************************/
static void processRunRestoreBand(void)
{
   185ac:	b590      	push	{r4, r7, lr}
   185ae:	b085      	sub	sp, #20
   185b0:	af00      	add	r7, sp, #0
	StackRetStatus_t status = LORAWAN_SUCCESS;
   185b2:	230f      	movs	r3, #15
   185b4:	18fb      	adds	r3, r7, r3
   185b6:	2208      	movs	r2, #8
   185b8:	701a      	strb	r2, [r3, #0]
	uint8_t prevBand = 0xff;
   185ba:	1dfb      	adds	r3, r7, #7
   185bc:	22ff      	movs	r2, #255	; 0xff
   185be:	701a      	strb	r2, [r3, #0]
	uint8_t choice = 0xff;
   185c0:	230e      	movs	r3, #14
   185c2:	18fb      	adds	r3, r7, r3
   185c4:	22ff      	movs	r2, #255	; 0xff
   185c6:	701a      	strb	r2, [r3, #0]
	bool joinBackoffEnable = false;
   185c8:	1dbb      	adds	r3, r7, #6
   185ca:	2200      	movs	r2, #0
   185cc:	701a      	strb	r2, [r3, #0]
	
	PDS_RestoreAll();
   185ce:	4b47      	ldr	r3, [pc, #284]	; (186ec <processRunRestoreBand+0x140>)
   185d0:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
   185d2:	1dfb      	adds	r3, r7, #7
   185d4:	001a      	movs	r2, r3
   185d6:	2100      	movs	r1, #0
   185d8:	2024      	movs	r0, #36	; 0x24
   185da:	4b45      	ldr	r3, [pc, #276]	; (186f0 <processRunRestoreBand+0x144>)
   185dc:	4798      	blx	r3
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
   185de:	2300      	movs	r3, #0
   185e0:	60bb      	str	r3, [r7, #8]
   185e2:	e00f      	b.n	18604 <processRunRestoreBand+0x58>
	{
		if(bandTable[i] == prevBand)
   185e4:	4a43      	ldr	r2, [pc, #268]	; (186f4 <processRunRestoreBand+0x148>)
   185e6:	68bb      	ldr	r3, [r7, #8]
   185e8:	18d3      	adds	r3, r2, r3
   185ea:	781a      	ldrb	r2, [r3, #0]
   185ec:	1dfb      	adds	r3, r7, #7
   185ee:	781b      	ldrb	r3, [r3, #0]
   185f0:	429a      	cmp	r2, r3
   185f2:	d104      	bne.n	185fe <processRunRestoreBand+0x52>
		{
			choice = i;
   185f4:	230e      	movs	r3, #14
   185f6:	18fb      	adds	r3, r7, r3
   185f8:	68ba      	ldr	r2, [r7, #8]
   185fa:	701a      	strb	r2, [r3, #0]
			break;
   185fc:	e005      	b.n	1860a <processRunRestoreBand+0x5e>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
   185fe:	68bb      	ldr	r3, [r7, #8]
   18600:	3301      	adds	r3, #1
   18602:	60bb      	str	r3, [r7, #8]
   18604:	68bb      	ldr	r3, [r7, #8]
   18606:	2b08      	cmp	r3, #8
   18608:	d9ec      	bls.n	185e4 <processRunRestoreBand+0x38>
		}
	}
	if(choice >0 && choice < sizeof(bandTable)-1)
   1860a:	230e      	movs	r3, #14
   1860c:	18fb      	adds	r3, r7, r3
   1860e:	781b      	ldrb	r3, [r3, #0]
   18610:	2b00      	cmp	r3, #0
   18612:	d010      	beq.n	18636 <processRunRestoreBand+0x8a>
   18614:	230e      	movs	r3, #14
   18616:	18fb      	adds	r3, r7, r3
   18618:	781b      	ldrb	r3, [r3, #0]
   1861a:	2b08      	cmp	r3, #8
   1861c:	d80b      	bhi.n	18636 <processRunRestoreBand+0x8a>
	{
		status = LORAWAN_Reset(bandTable[choice]);
   1861e:	230e      	movs	r3, #14
   18620:	18fb      	adds	r3, r7, r3
   18622:	781b      	ldrb	r3, [r3, #0]
   18624:	4a33      	ldr	r2, [pc, #204]	; (186f4 <processRunRestoreBand+0x148>)
   18626:	5cd3      	ldrb	r3, [r2, r3]
   18628:	220f      	movs	r2, #15
   1862a:	18bc      	adds	r4, r7, r2
   1862c:	0018      	movs	r0, r3
   1862e:	4b32      	ldr	r3, [pc, #200]	; (186f8 <processRunRestoreBand+0x14c>)
   18630:	4798      	blx	r3
   18632:	0003      	movs	r3, r0
   18634:	7023      	strb	r3, [r4, #0]
	}
	
	 /*Disabled Join backoff in Demo application
	Needs to be enabled in Production Environment Ref Section */
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
   18636:	1dbb      	adds	r3, r7, #6
   18638:	0019      	movs	r1, r3
   1863a:	2034      	movs	r0, #52	; 0x34
   1863c:	4b2f      	ldr	r3, [pc, #188]	; (186fc <processRunRestoreBand+0x150>)
   1863e:	4798      	blx	r3
	
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
   18640:	230f      	movs	r3, #15
   18642:	18fb      	adds	r3, r7, r3
   18644:	781b      	ldrb	r3, [r3, #0]
   18646:	2b08      	cmp	r3, #8
   18648:	d141      	bne.n	186ce <processRunRestoreBand+0x122>
   1864a:	230e      	movs	r3, #14
   1864c:	18fb      	adds	r3, r7, r3
   1864e:	781b      	ldrb	r3, [r3, #0]
   18650:	2b08      	cmp	r3, #8
   18652:	d83c      	bhi.n	186ce <processRunRestoreBand+0x122>
	{
		uint32_t joinStatus = 0;
   18654:	2300      	movs	r3, #0
   18656:	603b      	str	r3, [r7, #0]
		PDS_RestoreAll();
   18658:	4b24      	ldr	r3, [pc, #144]	; (186ec <processRunRestoreBand+0x140>)
   1865a:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
   1865c:	003b      	movs	r3, r7
   1865e:	001a      	movs	r2, r3
   18660:	2100      	movs	r1, #0
   18662:	2021      	movs	r0, #33	; 0x21
   18664:	4b22      	ldr	r3, [pc, #136]	; (186f0 <processRunRestoreBand+0x144>)
   18666:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
   18668:	4b25      	ldr	r3, [pc, #148]	; (18700 <processRunRestoreBand+0x154>)
   1866a:	0018      	movs	r0, r3
   1866c:	4b25      	ldr	r3, [pc, #148]	; (18704 <processRunRestoreBand+0x158>)
   1866e:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
   18670:	683b      	ldr	r3, [r7, #0]
   18672:	2201      	movs	r2, #1
   18674:	4013      	ands	r3, r2
   18676:	d007      	beq.n	18688 <processRunRestoreBand+0xdc>
		{
			joined = true;
   18678:	4b23      	ldr	r3, [pc, #140]	; (18708 <processRunRestoreBand+0x15c>)
   1867a:	2201      	movs	r2, #1
   1867c:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
   1867e:	4b23      	ldr	r3, [pc, #140]	; (1870c <processRunRestoreBand+0x160>)
   18680:	0018      	movs	r0, r3
   18682:	4b20      	ldr	r3, [pc, #128]	; (18704 <processRunRestoreBand+0x158>)
   18684:	4798      	blx	r3
   18686:	e00e      	b.n	186a6 <processRunRestoreBand+0xfa>
		}
		else
		{
			joined = false;
   18688:	4b1f      	ldr	r3, [pc, #124]	; (18708 <processRunRestoreBand+0x15c>)
   1868a:	2200      	movs	r2, #0
   1868c:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
   1868e:	4b20      	ldr	r3, [pc, #128]	; (18710 <processRunRestoreBand+0x164>)
   18690:	0018      	movs	r0, r3
   18692:	4b1c      	ldr	r3, [pc, #112]	; (18704 <processRunRestoreBand+0x158>)
   18694:	4798      	blx	r3
			//set_LED_data(LED_AMBER,&on);
			set_LED_data(LED_AMBER,&off);
   18696:	4b1f      	ldr	r3, [pc, #124]	; (18714 <processRunRestoreBand+0x168>)
   18698:	0019      	movs	r1, r3
   1869a:	2002      	movs	r0, #2
   1869c:	4b1e      	ldr	r3, [pc, #120]	; (18718 <processRunRestoreBand+0x16c>)
   1869e:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
   186a0:	2010      	movs	r0, #16
   186a2:	4b1e      	ldr	r3, [pc, #120]	; (1871c <processRunRestoreBand+0x170>)
   186a4:	4798      	blx	r3
		}
		printf("Band: %s\r\n",bandStrings[choice]);
   186a6:	230e      	movs	r3, #14
   186a8:	18fb      	adds	r3, r7, r3
   186aa:	781a      	ldrb	r2, [r3, #0]
   186ac:	4b1c      	ldr	r3, [pc, #112]	; (18720 <processRunRestoreBand+0x174>)
   186ae:	0092      	lsls	r2, r2, #2
   186b0:	58d2      	ldr	r2, [r2, r3]
   186b2:	4b1c      	ldr	r3, [pc, #112]	; (18724 <processRunRestoreBand+0x178>)
   186b4:	0011      	movs	r1, r2
   186b6:	0018      	movs	r0, r3
   186b8:	4b1b      	ldr	r3, [pc, #108]	; (18728 <processRunRestoreBand+0x17c>)
   186ba:	4798      	blx	r3

		print_application_config();
   186bc:	4b1b      	ldr	r3, [pc, #108]	; (1872c <processRunRestoreBand+0x180>)
   186be:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
   186c0:	4b1b      	ldr	r3, [pc, #108]	; (18730 <processRunRestoreBand+0x184>)
   186c2:	2203      	movs	r2, #3
   186c4:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   186c6:	2000      	movs	r0, #0
   186c8:	4b1a      	ldr	r3, [pc, #104]	; (18734 <processRunRestoreBand+0x188>)
   186ca:	4798      	blx	r3
	{
   186cc:	e009      	b.n	186e2 <processRunRestoreBand+0x136>
	}
	else
	{
		printf("Restoration failed\r\n");
   186ce:	4b1a      	ldr	r3, [pc, #104]	; (18738 <processRunRestoreBand+0x18c>)
   186d0:	0018      	movs	r0, r3
   186d2:	4b0c      	ldr	r3, [pc, #48]	; (18704 <processRunRestoreBand+0x158>)
   186d4:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
   186d6:	4b16      	ldr	r3, [pc, #88]	; (18730 <processRunRestoreBand+0x184>)
   186d8:	2202      	movs	r2, #2
   186da:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   186dc:	2000      	movs	r0, #0
   186de:	4b15      	ldr	r3, [pc, #84]	; (18734 <processRunRestoreBand+0x188>)
   186e0:	4798      	blx	r3
	}
}
   186e2:	46c0      	nop			; (mov r8, r8)
   186e4:	46bd      	mov	sp, r7
   186e6:	b005      	add	sp, #20
   186e8:	bd90      	pop	{r4, r7, pc}
   186ea:	46c0      	nop			; (mov r8, r8)
   186ec:	00013cc9 	.word	0x00013cc9
   186f0:	0001bfa1 	.word	0x0001bfa1
   186f4:	20000164 	.word	0x20000164
   186f8:	0001e4cd 	.word	0x0001e4cd
   186fc:	0001df51 	.word	0x0001df51
   18700:	0002bed0 	.word	0x0002bed0
   18704:	00024325 	.word	0x00024325
   18708:	2000110b 	.word	0x2000110b
   1870c:	0002bef4 	.word	0x0002bef4
   18710:	0002bf08 	.word	0x0002bf08
   18714:	20001127 	.word	0x20001127
   18718:	00015191 	.word	0x00015191
   1871c:	000162bd 	.word	0x000162bd
   18720:	2000013c 	.word	0x2000013c
   18724:	0002bf20 	.word	0x0002bf20
   18728:	00024261 	.word	0x00024261
   1872c:	00019ded 	.word	0x00019ded
   18730:	20001138 	.word	0x20001138
   18734:	00019795 	.word	0x00019795
   18738:	0002bf2c 	.word	0x0002bf2c

0001873c <processJoinAndSend>:

/*********************************************************************//**
\brief    Sends Join request or Data to the network
*************************************************************************/
static void processJoinAndSend(void)
{
   1873c:	b590      	push	{r4, r7, lr}
   1873e:	b085      	sub	sp, #20
   18740:	af00      	add	r7, sp, #0
	StackRetStatus_t status = LORAWAN_SUCCESS;
   18742:	230f      	movs	r3, #15
   18744:	18fb      	adds	r3, r7, r3
   18746:	2208      	movs	r2, #8
   18748:	701a      	strb	r2, [r3, #0]
	if(serialBuffer == '1')
   1874a:	4b55      	ldr	r3, [pc, #340]	; (188a0 <processJoinAndSend+0x164>)
   1874c:	781b      	ldrb	r3, [r3, #0]
   1874e:	2b31      	cmp	r3, #49	; 0x31
   18750:	d127      	bne.n	187a2 <processJoinAndSend+0x66>
	{
		status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
   18752:	230f      	movs	r3, #15
   18754:	18fc      	adds	r4, r7, r3
   18756:	2000      	movs	r0, #0
   18758:	4b52      	ldr	r3, [pc, #328]	; (188a4 <processJoinAndSend+0x168>)
   1875a:	4798      	blx	r3
   1875c:	0003      	movs	r3, r0
   1875e:	7023      	strb	r3, [r4, #0]
		if (LORAWAN_SUCCESS == (StackRetStatus_t)status)
   18760:	230f      	movs	r3, #15
   18762:	18fb      	adds	r3, r7, r3
   18764:	781b      	ldrb	r3, [r3, #0]
   18766:	2b08      	cmp	r3, #8
   18768:	d109      	bne.n	1877e <processJoinAndSend+0x42>
		{
			//set_LED_data(LED_GREEN,&on);
			set_LED_data(LED_GREEN,&off);
   1876a:	4b4f      	ldr	r3, [pc, #316]	; (188a8 <processJoinAndSend+0x16c>)
   1876c:	0019      	movs	r1, r3
   1876e:	2003      	movs	r0, #3
   18770:	4b4e      	ldr	r3, [pc, #312]	; (188ac <processJoinAndSend+0x170>)
   18772:	4798      	blx	r3
			printf("\nJoin Request Sent\n\r");
   18774:	4b4e      	ldr	r3, [pc, #312]	; (188b0 <processJoinAndSend+0x174>)
   18776:	0018      	movs	r0, r3
   18778:	4b4e      	ldr	r3, [pc, #312]	; (188b4 <processJoinAndSend+0x178>)
   1877a:	4798      	blx	r3
		set_LED_data(LED_AMBER,&off);
		printf("Invalid choice entered\r\n");
		appTaskState = JOIN_SEND_STATE;
		appPostTask(DISPLAY_TASK_HANDLER);
	}
}
   1877c:	e08b      	b.n	18896 <processJoinAndSend+0x15a>
			set_LED_data(LED_AMBER,&off);
   1877e:	4b4a      	ldr	r3, [pc, #296]	; (188a8 <processJoinAndSend+0x16c>)
   18780:	0019      	movs	r1, r3
   18782:	2002      	movs	r0, #2
   18784:	4b49      	ldr	r3, [pc, #292]	; (188ac <processJoinAndSend+0x170>)
   18786:	4798      	blx	r3
			print_stack_status(status);
   18788:	230f      	movs	r3, #15
   1878a:	18fb      	adds	r3, r7, r3
   1878c:	781b      	ldrb	r3, [r3, #0]
   1878e:	0018      	movs	r0, r3
   18790:	4b49      	ldr	r3, [pc, #292]	; (188b8 <processJoinAndSend+0x17c>)
   18792:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
   18794:	4b49      	ldr	r3, [pc, #292]	; (188bc <processJoinAndSend+0x180>)
   18796:	2203      	movs	r2, #3
   18798:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
   1879a:	2000      	movs	r0, #0
   1879c:	4b48      	ldr	r3, [pc, #288]	; (188c0 <processJoinAndSend+0x184>)
   1879e:	4798      	blx	r3
}
   187a0:	e079      	b.n	18896 <processJoinAndSend+0x15a>
	else if(serialBuffer == '2' && joined == true)
   187a2:	4b3f      	ldr	r3, [pc, #252]	; (188a0 <processJoinAndSend+0x164>)
   187a4:	781b      	ldrb	r3, [r3, #0]
   187a6:	2b32      	cmp	r3, #50	; 0x32
   187a8:	d106      	bne.n	187b8 <processJoinAndSend+0x7c>
   187aa:	4b46      	ldr	r3, [pc, #280]	; (188c4 <processJoinAndSend+0x188>)
   187ac:	781b      	ldrb	r3, [r3, #0]
   187ae:	2b00      	cmp	r3, #0
   187b0:	d002      	beq.n	187b8 <processJoinAndSend+0x7c>
		sendData();
   187b2:	4b45      	ldr	r3, [pc, #276]	; (188c8 <processJoinAndSend+0x18c>)
   187b4:	4798      	blx	r3
   187b6:	e06e      	b.n	18896 <processJoinAndSend+0x15a>
	else if(serialBuffer == '2' && !joined)
   187b8:	4b39      	ldr	r3, [pc, #228]	; (188a0 <processJoinAndSend+0x164>)
   187ba:	781b      	ldrb	r3, [r3, #0]
   187bc:	2b32      	cmp	r3, #50	; 0x32
   187be:	d116      	bne.n	187ee <processJoinAndSend+0xb2>
   187c0:	4b40      	ldr	r3, [pc, #256]	; (188c4 <processJoinAndSend+0x188>)
   187c2:	781b      	ldrb	r3, [r3, #0]
   187c4:	2201      	movs	r2, #1
   187c6:	4053      	eors	r3, r2
   187c8:	b2db      	uxtb	r3, r3
   187ca:	2b00      	cmp	r3, #0
   187cc:	d00f      	beq.n	187ee <processJoinAndSend+0xb2>
		set_LED_data(LED_AMBER,&off);
   187ce:	4b36      	ldr	r3, [pc, #216]	; (188a8 <processJoinAndSend+0x16c>)
   187d0:	0019      	movs	r1, r3
   187d2:	2002      	movs	r0, #2
   187d4:	4b35      	ldr	r3, [pc, #212]	; (188ac <processJoinAndSend+0x170>)
   187d6:	4798      	blx	r3
		printf("Device not joined to the network\r\n");
   187d8:	4b3c      	ldr	r3, [pc, #240]	; (188cc <processJoinAndSend+0x190>)
   187da:	0018      	movs	r0, r3
   187dc:	4b3c      	ldr	r3, [pc, #240]	; (188d0 <processJoinAndSend+0x194>)
   187de:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
   187e0:	4b36      	ldr	r3, [pc, #216]	; (188bc <processJoinAndSend+0x180>)
   187e2:	2203      	movs	r2, #3
   187e4:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   187e6:	2000      	movs	r0, #0
   187e8:	4b35      	ldr	r3, [pc, #212]	; (188c0 <processJoinAndSend+0x184>)
   187ea:	4798      	blx	r3
   187ec:	e053      	b.n	18896 <processJoinAndSend+0x15a>
	else if(serialBuffer == '3')
   187ee:	4b2c      	ldr	r3, [pc, #176]	; (188a0 <processJoinAndSend+0x164>)
   187f0:	781b      	ldrb	r3, [r3, #0]
   187f2:	2b33      	cmp	r3, #51	; 0x33
   187f4:	d134      	bne.n	18860 <processJoinAndSend+0x124>
		sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
   187f6:	003b      	movs	r3, r7
   187f8:	4a36      	ldr	r2, [pc, #216]	; (188d4 <processJoinAndSend+0x198>)
   187fa:	601a      	str	r2, [r3, #0]
		sleepReq.pmmWakeupCallback = appWakeup;
   187fc:	003b      	movs	r3, r7
   187fe:	4a36      	ldr	r2, [pc, #216]	; (188d8 <processJoinAndSend+0x19c>)
   18800:	609a      	str	r2, [r3, #8]
		sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
   18802:	003b      	movs	r3, r7
   18804:	2201      	movs	r2, #1
   18806:	711a      	strb	r2, [r3, #4]
			deviceResetsForWakeup = false;
   18808:	4b34      	ldr	r3, [pc, #208]	; (188dc <processJoinAndSend+0x1a0>)
   1880a:	2200      	movs	r2, #0
   1880c:	701a      	strb	r2, [r3, #0]
		if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
   1880e:	4b33      	ldr	r3, [pc, #204]	; (188dc <processJoinAndSend+0x1a0>)
   18810:	781b      	ldrb	r3, [r3, #0]
   18812:	0018      	movs	r0, r3
   18814:	4b32      	ldr	r3, [pc, #200]	; (188e0 <processJoinAndSend+0x1a4>)
   18816:	4798      	blx	r3
   18818:	1e03      	subs	r3, r0, #0
   1881a:	d016      	beq.n	1884a <processJoinAndSend+0x10e>
			app_resources_uninit();
   1881c:	4b31      	ldr	r3, [pc, #196]	; (188e4 <processJoinAndSend+0x1a8>)
   1881e:	4798      	blx	r3
			if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
   18820:	003b      	movs	r3, r7
   18822:	0018      	movs	r0, r3
   18824:	4b30      	ldr	r3, [pc, #192]	; (188e8 <processJoinAndSend+0x1ac>)
   18826:	4798      	blx	r3
   18828:	1e03      	subs	r3, r0, #0
   1882a:	d134      	bne.n	18896 <processJoinAndSend+0x15a>
				HAL_Radio_resources_init();
   1882c:	4b2f      	ldr	r3, [pc, #188]	; (188ec <processJoinAndSend+0x1b0>)
   1882e:	4798      	blx	r3
				sio2host_init();
   18830:	4b2f      	ldr	r3, [pc, #188]	; (188f0 <processJoinAndSend+0x1b4>)
   18832:	4798      	blx	r3
				appTaskState = JOIN_SEND_STATE;
   18834:	4b21      	ldr	r3, [pc, #132]	; (188bc <processJoinAndSend+0x180>)
   18836:	2203      	movs	r2, #3
   18838:	701a      	strb	r2, [r3, #0]
				appPostTask(DISPLAY_TASK_HANDLER);
   1883a:	2000      	movs	r0, #0
   1883c:	4b20      	ldr	r3, [pc, #128]	; (188c0 <processJoinAndSend+0x184>)
   1883e:	4798      	blx	r3
				printf("\r\nsleep_not_ok\r\n");	
   18840:	4b2c      	ldr	r3, [pc, #176]	; (188f4 <processJoinAndSend+0x1b8>)
   18842:	0018      	movs	r0, r3
   18844:	4b22      	ldr	r3, [pc, #136]	; (188d0 <processJoinAndSend+0x194>)
   18846:	4798      	blx	r3
}
   18848:	e025      	b.n	18896 <processJoinAndSend+0x15a>
			printf("\r\nsleep_not_ok\r\n");
   1884a:	4b2a      	ldr	r3, [pc, #168]	; (188f4 <processJoinAndSend+0x1b8>)
   1884c:	0018      	movs	r0, r3
   1884e:	4b20      	ldr	r3, [pc, #128]	; (188d0 <processJoinAndSend+0x194>)
   18850:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
   18852:	4b1a      	ldr	r3, [pc, #104]	; (188bc <processJoinAndSend+0x180>)
   18854:	2203      	movs	r2, #3
   18856:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
   18858:	2000      	movs	r0, #0
   1885a:	4b19      	ldr	r3, [pc, #100]	; (188c0 <processJoinAndSend+0x184>)
   1885c:	4798      	blx	r3
}
   1885e:	e01a      	b.n	18896 <processJoinAndSend+0x15a>
	else if(serialBuffer == '4')
   18860:	4b0f      	ldr	r3, [pc, #60]	; (188a0 <processJoinAndSend+0x164>)
   18862:	781b      	ldrb	r3, [r3, #0]
   18864:	2b34      	cmp	r3, #52	; 0x34
   18866:	d106      	bne.n	18876 <processJoinAndSend+0x13a>
		appTaskState = DEMO_APP_STATE;
   18868:	4b14      	ldr	r3, [pc, #80]	; (188bc <processJoinAndSend+0x180>)
   1886a:	2202      	movs	r2, #2
   1886c:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   1886e:	2000      	movs	r0, #0
   18870:	4b13      	ldr	r3, [pc, #76]	; (188c0 <processJoinAndSend+0x184>)
   18872:	4798      	blx	r3
}
   18874:	e00f      	b.n	18896 <processJoinAndSend+0x15a>
		set_LED_data(LED_AMBER,&off);
   18876:	4b0c      	ldr	r3, [pc, #48]	; (188a8 <processJoinAndSend+0x16c>)
   18878:	0019      	movs	r1, r3
   1887a:	2002      	movs	r0, #2
   1887c:	4b0b      	ldr	r3, [pc, #44]	; (188ac <processJoinAndSend+0x170>)
   1887e:	4798      	blx	r3
		printf("Invalid choice entered\r\n");
   18880:	4b1d      	ldr	r3, [pc, #116]	; (188f8 <processJoinAndSend+0x1bc>)
   18882:	0018      	movs	r0, r3
   18884:	4b12      	ldr	r3, [pc, #72]	; (188d0 <processJoinAndSend+0x194>)
   18886:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
   18888:	4b0c      	ldr	r3, [pc, #48]	; (188bc <processJoinAndSend+0x180>)
   1888a:	2203      	movs	r2, #3
   1888c:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   1888e:	2000      	movs	r0, #0
   18890:	4b0b      	ldr	r3, [pc, #44]	; (188c0 <processJoinAndSend+0x184>)
   18892:	4798      	blx	r3
}
   18894:	e7ff      	b.n	18896 <processJoinAndSend+0x15a>
   18896:	46c0      	nop			; (mov r8, r8)
   18898:	46bd      	mov	sp, r7
   1889a:	b005      	add	sp, #20
   1889c:	bd90      	pop	{r4, r7, pc}
   1889e:	46c0      	nop			; (mov r8, r8)
   188a0:	20001148 	.word	0x20001148
   188a4:	0001bb9d 	.word	0x0001bb9d
   188a8:	20001127 	.word	0x20001127
   188ac:	00015191 	.word	0x00015191
   188b0:	0002bf40 	.word	0x0002bf40
   188b4:	00024261 	.word	0x00024261
   188b8:	00019e9d 	.word	0x00019e9d
   188bc:	20001138 	.word	0x20001138
   188c0:	00019795 	.word	0x00019795
   188c4:	2000110b 	.word	0x2000110b
   188c8:	00019391 	.word	0x00019391
   188cc:	0002bf58 	.word	0x0002bf58
   188d0:	00024325 	.word	0x00024325
   188d4:	00007530 	.word	0x00007530
   188d8:	0001958d 	.word	0x0001958d
   188dc:	2000114a 	.word	0x2000114a
   188e0:	0001eb39 	.word	0x0001eb39
   188e4:	000195d5 	.word	0x000195d5
   188e8:	00007745 	.word	0x00007745
   188ec:	00006da1 	.word	0x00006da1
   188f0:	000066e9 	.word	0x000066e9
   188f4:	0002bf7c 	.word	0x0002bf7c
   188f8:	0002bf8c 	.word	0x0002bf8c

000188fc <processRunDemoApp>:

/*********************************************************************//**
\brief    Runs the Demo application
*************************************************************************/
static void processRunDemoApp(void)
{
   188fc:	b580      	push	{r7, lr}
   188fe:	b082      	sub	sp, #8
   18900:	af00      	add	r7, sp, #0
	uint8_t num = serialBuffer - '0';
   18902:	4b23      	ldr	r3, [pc, #140]	; (18990 <processRunDemoApp+0x94>)
   18904:	781a      	ldrb	r2, [r3, #0]
   18906:	1dfb      	adds	r3, r7, #7
   18908:	3a30      	subs	r2, #48	; 0x30
   1890a:	701a      	strb	r2, [r3, #0]
	if(num == sizeof(bandTable)-1)
   1890c:	1dfb      	adds	r3, r7, #7
   1890e:	781b      	ldrb	r3, [r3, #0]
   18910:	2b09      	cmp	r3, #9
   18912:	d101      	bne.n	18918 <processRunDemoApp+0x1c>
	{
		NVIC_SystemReset();
   18914:	4b1f      	ldr	r3, [pc, #124]	; (18994 <processRunDemoApp+0x98>)
   18916:	4798      	blx	r3
	}
	else if(num == sizeof(bandTable)-2)
   18918:	1dfb      	adds	r3, r7, #7
   1891a:	781b      	ldrb	r3, [r3, #0]
   1891c:	2b08      	cmp	r3, #8
   1891e:	d108      	bne.n	18932 <processRunDemoApp+0x36>
	{
		PDS_DeleteAll();
   18920:	4b1d      	ldr	r3, [pc, #116]	; (18998 <processRunDemoApp+0x9c>)
   18922:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
   18924:	4b1d      	ldr	r3, [pc, #116]	; (1899c <processRunDemoApp+0xa0>)
   18926:	2202      	movs	r2, #2
   18928:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   1892a:	2000      	movs	r0, #0
   1892c:	4b1c      	ldr	r3, [pc, #112]	; (189a0 <processRunDemoApp+0xa4>)
   1892e:	4798      	blx	r3
	{
		printf("Not a valid regional band choice\r\n");
		appTaskState = DEMO_APP_STATE;
		appPostTask(DISPLAY_TASK_HANDLER);
	}
}
   18930:	e029      	b.n	18986 <processRunDemoApp+0x8a>
	else if(num >0 && num < sizeof(bandTable) -2)
   18932:	1dfb      	adds	r3, r7, #7
   18934:	781b      	ldrb	r3, [r3, #0]
   18936:	2b00      	cmp	r3, #0
   18938:	d01b      	beq.n	18972 <processRunDemoApp+0x76>
   1893a:	1dfb      	adds	r3, r7, #7
   1893c:	781b      	ldrb	r3, [r3, #0]
   1893e:	2b07      	cmp	r3, #7
   18940:	d817      	bhi.n	18972 <processRunDemoApp+0x76>
		LORAWAN_Reset(bandTable[num]);
   18942:	1dfb      	adds	r3, r7, #7
   18944:	781b      	ldrb	r3, [r3, #0]
   18946:	4a17      	ldr	r2, [pc, #92]	; (189a4 <processRunDemoApp+0xa8>)
   18948:	5cd3      	ldrb	r3, [r2, r3]
   1894a:	0018      	movs	r0, r3
   1894c:	4b16      	ldr	r3, [pc, #88]	; (189a8 <processRunDemoApp+0xac>)
   1894e:	4798      	blx	r3
		mote_set_parameters(bandTable[num],num);
   18950:	1dfb      	adds	r3, r7, #7
   18952:	781b      	ldrb	r3, [r3, #0]
   18954:	4a13      	ldr	r2, [pc, #76]	; (189a4 <processRunDemoApp+0xa8>)
   18956:	5cd2      	ldrb	r2, [r2, r3]
   18958:	1dfb      	adds	r3, r7, #7
   1895a:	781b      	ldrb	r3, [r3, #0]
   1895c:	b29b      	uxth	r3, r3
   1895e:	0019      	movs	r1, r3
   18960:	0010      	movs	r0, r2
   18962:	4b12      	ldr	r3, [pc, #72]	; (189ac <processRunDemoApp+0xb0>)
   18964:	4798      	blx	r3
		set_LED_data(LED_GREEN,&off);
   18966:	4b12      	ldr	r3, [pc, #72]	; (189b0 <processRunDemoApp+0xb4>)
   18968:	0019      	movs	r1, r3
   1896a:	2003      	movs	r0, #3
   1896c:	4b11      	ldr	r3, [pc, #68]	; (189b4 <processRunDemoApp+0xb8>)
   1896e:	4798      	blx	r3
}
   18970:	e009      	b.n	18986 <processRunDemoApp+0x8a>
		printf("Not a valid regional band choice\r\n");
   18972:	4b11      	ldr	r3, [pc, #68]	; (189b8 <processRunDemoApp+0xbc>)
   18974:	0018      	movs	r0, r3
   18976:	4b11      	ldr	r3, [pc, #68]	; (189bc <processRunDemoApp+0xc0>)
   18978:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
   1897a:	4b08      	ldr	r3, [pc, #32]	; (1899c <processRunDemoApp+0xa0>)
   1897c:	2202      	movs	r2, #2
   1897e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   18980:	2000      	movs	r0, #0
   18982:	4b07      	ldr	r3, [pc, #28]	; (189a0 <processRunDemoApp+0xa4>)
   18984:	4798      	blx	r3
}
   18986:	46c0      	nop			; (mov r8, r8)
   18988:	46bd      	mov	sp, r7
   1898a:	b002      	add	sp, #8
   1898c:	bd80      	pop	{r7, pc}
   1898e:	46c0      	nop			; (mov r8, r8)
   18990:	20001148 	.word	0x20001148
   18994:	000182f1 	.word	0x000182f1
   18998:	00013ca1 	.word	0x00013ca1
   1899c:	20001138 	.word	0x20001138
   189a0:	00019795 	.word	0x00019795
   189a4:	20000164 	.word	0x20000164
   189a8:	0001e4cd 	.word	0x0001e4cd
   189ac:	00019c69 	.word	0x00019c69
   189b0:	20001127 	.word	0x20001127
   189b4:	00015191 	.word	0x00015191
   189b8:	0002bfa4 	.word	0x0002bfa4
   189bc:	00024325 	.word	0x00024325

000189c0 <displayRunDemoCertApp>:
/*********************************************************************//**
\brief    Displays and activates LED's to choose between Demo
		  and Certification application
*************************************************************************/
static void displayRunDemoCertApp(void)
{
   189c0:	b580      	push	{r7, lr}
   189c2:	af00      	add	r7, sp, #0
	//sio2host_rx(rxchar,10);
	set_LED_data(LED_AMBER,&off);
   189c4:	4b12      	ldr	r3, [pc, #72]	; (18a10 <displayRunDemoCertApp+0x50>)
   189c6:	0019      	movs	r1, r3
   189c8:	2002      	movs	r0, #2
   189ca:	4b12      	ldr	r3, [pc, #72]	; (18a14 <displayRunDemoCertApp+0x54>)
   189cc:	4798      	blx	r3
	set_LED_data(LED_GREEN,&off);
   189ce:	4b10      	ldr	r3, [pc, #64]	; (18a10 <displayRunDemoCertApp+0x50>)
   189d0:	0019      	movs	r1, r3
   189d2:	2003      	movs	r0, #3
   189d4:	4b0f      	ldr	r3, [pc, #60]	; (18a14 <displayRunDemoCertApp+0x54>)
   189d6:	4798      	blx	r3
	printf("1. Demo application\r\n");
   189d8:	4b0f      	ldr	r3, [pc, #60]	; (18a18 <displayRunDemoCertApp+0x58>)
   189da:	0018      	movs	r0, r3
   189dc:	4b0f      	ldr	r3, [pc, #60]	; (18a1c <displayRunDemoCertApp+0x5c>)
   189de:	4798      	blx	r3
	#if (CERT_APP == 1)
	printf("2. Certification application\r\n");
   189e0:	4b0f      	ldr	r3, [pc, #60]	; (18a20 <displayRunDemoCertApp+0x60>)
   189e2:	0018      	movs	r0, r3
   189e4:	4b0d      	ldr	r3, [pc, #52]	; (18a1c <displayRunDemoCertApp+0x5c>)
   189e6:	4798      	blx	r3
	#endif
	printf("\r\n Select Application : ");
   189e8:	4b0e      	ldr	r3, [pc, #56]	; (18a24 <displayRunDemoCertApp+0x64>)
   189ea:	0018      	movs	r0, r3
   189ec:	4b0e      	ldr	r3, [pc, #56]	; (18a28 <displayRunDemoCertApp+0x68>)
   189ee:	4798      	blx	r3
	startReceiving = true;
   189f0:	4b0e      	ldr	r3, [pc, #56]	; (18a2c <displayRunDemoCertApp+0x6c>)
   189f2:	2201      	movs	r2, #1
   189f4:	701a      	strb	r2, [r3, #0]
	
	////Zygurt bypass UART selection
	startReceiving = false;
   189f6:	4b0d      	ldr	r3, [pc, #52]	; (18a2c <displayRunDemoCertApp+0x6c>)
   189f8:	2200      	movs	r2, #0
   189fa:	701a      	strb	r2, [r3, #0]
	serialBuffer = '1';
   189fc:	4b0c      	ldr	r3, [pc, #48]	; (18a30 <displayRunDemoCertApp+0x70>)
   189fe:	2231      	movs	r2, #49	; 0x31
   18a00:	701a      	strb	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
   18a02:	2001      	movs	r0, #1
   18a04:	4b0b      	ldr	r3, [pc, #44]	; (18a34 <displayRunDemoCertApp+0x74>)
   18a06:	4798      	blx	r3
	
}
   18a08:	46c0      	nop			; (mov r8, r8)
   18a0a:	46bd      	mov	sp, r7
   18a0c:	bd80      	pop	{r7, pc}
   18a0e:	46c0      	nop			; (mov r8, r8)
   18a10:	20001127 	.word	0x20001127
   18a14:	00015191 	.word	0x00015191
   18a18:	0002bfc8 	.word	0x0002bfc8
   18a1c:	00024325 	.word	0x00024325
   18a20:	0002bfe0 	.word	0x0002bfe0
   18a24:	0002c000 	.word	0x0002c000
   18a28:	00024261 	.word	0x00024261
   18a2c:	20001137 	.word	0x20001137
   18a30:	20001148 	.word	0x20001148
   18a34:	00019795 	.word	0x00019795

00018a38 <displayRunRestoreBand>:

/*********************************************************************//**
\brief    Activates LED's to indicate restoring of band
*************************************************************************/
static void displayRunRestoreBand(void)
{
   18a38:	b580      	push	{r7, lr}
   18a3a:	af00      	add	r7, sp, #0
	//sio2host_rx(rxchar,10);
	set_LED_data(LED_AMBER,&off);
   18a3c:	4b07      	ldr	r3, [pc, #28]	; (18a5c <displayRunRestoreBand+0x24>)
   18a3e:	0019      	movs	r1, r3
   18a40:	2002      	movs	r0, #2
   18a42:	4b07      	ldr	r3, [pc, #28]	; (18a60 <displayRunRestoreBand+0x28>)
   18a44:	4798      	blx	r3
	set_LED_data(LED_GREEN,&off);
   18a46:	4b05      	ldr	r3, [pc, #20]	; (18a5c <displayRunRestoreBand+0x24>)
   18a48:	0019      	movs	r1, r3
   18a4a:	2003      	movs	r0, #3
   18a4c:	4b04      	ldr	r3, [pc, #16]	; (18a60 <displayRunRestoreBand+0x28>)
   18a4e:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
   18a50:	2001      	movs	r0, #1
   18a52:	4b04      	ldr	r3, [pc, #16]	; (18a64 <displayRunRestoreBand+0x2c>)
   18a54:	4798      	blx	r3
}
   18a56:	46c0      	nop			; (mov r8, r8)
   18a58:	46bd      	mov	sp, r7
   18a5a:	bd80      	pop	{r7, pc}
   18a5c:	20001127 	.word	0x20001127
   18a60:	00015191 	.word	0x00015191
   18a64:	00019795 	.word	0x00019795

00018a68 <displayJoinAndSend>:
/*********************************************************************//**
\brief    Displays and activates LED's for joining to a network
		  and sending data to a network
*************************************************************************/
static void displayJoinAndSend(void)
{
   18a68:	b580      	push	{r7, lr}
   18a6a:	af00      	add	r7, sp, #0
    printf("\r\n1. Send Join Request\r\n");
   18a6c:	4b2a      	ldr	r3, [pc, #168]	; (18b18 <displayJoinAndSend+0xb0>)
   18a6e:	0018      	movs	r0, r3
   18a70:	4b2a      	ldr	r3, [pc, #168]	; (18b1c <displayJoinAndSend+0xb4>)
   18a72:	4798      	blx	r3
    printf("2. Send Data\r\n");
   18a74:	4b2a      	ldr	r3, [pc, #168]	; (18b20 <displayJoinAndSend+0xb8>)
   18a76:	0018      	movs	r0, r3
   18a78:	4b28      	ldr	r3, [pc, #160]	; (18b1c <displayJoinAndSend+0xb4>)
   18a7a:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    printf("3. Sleep\r\n");
   18a7c:	4b29      	ldr	r3, [pc, #164]	; (18b24 <displayJoinAndSend+0xbc>)
   18a7e:	0018      	movs	r0, r3
   18a80:	4b26      	ldr	r3, [pc, #152]	; (18b1c <displayJoinAndSend+0xb4>)
   18a82:	4798      	blx	r3
    printf("4. Main Menu\r\n");
   18a84:	4b28      	ldr	r3, [pc, #160]	; (18b28 <displayJoinAndSend+0xc0>)
   18a86:	0018      	movs	r0, r3
   18a88:	4b24      	ldr	r3, [pc, #144]	; (18b1c <displayJoinAndSend+0xb4>)
   18a8a:	4798      	blx	r3
#else
    printf("3. Main Menu\r\n");
#endif /* CONF_PMM_ENABLE */
    printf("\r\nEnter your choice: ");
   18a8c:	4b27      	ldr	r3, [pc, #156]	; (18b2c <displayJoinAndSend+0xc4>)
   18a8e:	0018      	movs	r0, r3
   18a90:	4b27      	ldr	r3, [pc, #156]	; (18b30 <displayJoinAndSend+0xc8>)
   18a92:	4798      	blx	r3
    set_LED_data(LED_AMBER,&off);
   18a94:	4b27      	ldr	r3, [pc, #156]	; (18b34 <displayJoinAndSend+0xcc>)
   18a96:	0019      	movs	r1, r3
   18a98:	2002      	movs	r0, #2
   18a9a:	4b27      	ldr	r3, [pc, #156]	; (18b38 <displayJoinAndSend+0xd0>)
   18a9c:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);	
   18a9e:	4b25      	ldr	r3, [pc, #148]	; (18b34 <displayJoinAndSend+0xcc>)
   18aa0:	0019      	movs	r1, r3
   18aa2:	2003      	movs	r0, #3
   18aa4:	4b24      	ldr	r3, [pc, #144]	; (18b38 <displayJoinAndSend+0xd0>)
   18aa6:	4798      	blx	r3
	startReceiving = true;
   18aa8:	4b24      	ldr	r3, [pc, #144]	; (18b3c <displayJoinAndSend+0xd4>)
   18aaa:	2201      	movs	r2, #1
   18aac:	701a      	strb	r2, [r3, #0]
	
	if(joined == false){
   18aae:	4b24      	ldr	r3, [pc, #144]	; (18b40 <displayJoinAndSend+0xd8>)
   18ab0:	781b      	ldrb	r3, [r3, #0]
   18ab2:	2201      	movs	r2, #1
   18ab4:	4053      	eors	r3, r2
   18ab6:	b2db      	uxtb	r3, r3
   18ab8:	2b00      	cmp	r3, #0
   18aba:	d00c      	beq.n	18ad6 <displayJoinAndSend+0x6e>
		//Zygurt Join Request selection
		startReceiving = false;
   18abc:	4b1f      	ldr	r3, [pc, #124]	; (18b3c <displayJoinAndSend+0xd4>)
   18abe:	2200      	movs	r2, #0
   18ac0:	701a      	strb	r2, [r3, #0]
  		serialBuffer = '1';
   18ac2:	4b20      	ldr	r3, [pc, #128]	; (18b44 <displayJoinAndSend+0xdc>)
   18ac4:	2231      	movs	r2, #49	; 0x31
   18ac6:	701a      	strb	r2, [r3, #0]
		appPostTask(PROCESS_TASK_HANDLER);
   18ac8:	2001      	movs	r0, #1
   18aca:	4b1f      	ldr	r3, [pc, #124]	; (18b48 <displayJoinAndSend+0xe0>)
   18acc:	4798      	blx	r3
		last_choice = 1;
   18ace:	4b1f      	ldr	r3, [pc, #124]	; (18b4c <displayJoinAndSend+0xe4>)
   18ad0:	2201      	movs	r2, #1
   18ad2:	601a      	str	r2, [r3, #0]
			appPostTask(PROCESS_TASK_HANDLER);
			last_choice = 2;
		}
	}
	//SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
}
   18ad4:	e01c      	b.n	18b10 <displayJoinAndSend+0xa8>
		if(last_choice == 2){
   18ad6:	4b1d      	ldr	r3, [pc, #116]	; (18b4c <displayJoinAndSend+0xe4>)
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	2b02      	cmp	r3, #2
   18adc:	d10c      	bne.n	18af8 <displayJoinAndSend+0x90>
			startReceiving = false;
   18ade:	4b17      	ldr	r3, [pc, #92]	; (18b3c <displayJoinAndSend+0xd4>)
   18ae0:	2200      	movs	r2, #0
   18ae2:	701a      	strb	r2, [r3, #0]
  			serialBuffer = '3';
   18ae4:	4b17      	ldr	r3, [pc, #92]	; (18b44 <displayJoinAndSend+0xdc>)
   18ae6:	2233      	movs	r2, #51	; 0x33
   18ae8:	701a      	strb	r2, [r3, #0]
			appPostTask(PROCESS_TASK_HANDLER);
   18aea:	2001      	movs	r0, #1
   18aec:	4b16      	ldr	r3, [pc, #88]	; (18b48 <displayJoinAndSend+0xe0>)
   18aee:	4798      	blx	r3
			last_choice = 3;
   18af0:	4b16      	ldr	r3, [pc, #88]	; (18b4c <displayJoinAndSend+0xe4>)
   18af2:	2203      	movs	r2, #3
   18af4:	601a      	str	r2, [r3, #0]
}
   18af6:	e00b      	b.n	18b10 <displayJoinAndSend+0xa8>
			startReceiving = false;
   18af8:	4b10      	ldr	r3, [pc, #64]	; (18b3c <displayJoinAndSend+0xd4>)
   18afa:	2200      	movs	r2, #0
   18afc:	701a      	strb	r2, [r3, #0]
  			serialBuffer = '2';
   18afe:	4b11      	ldr	r3, [pc, #68]	; (18b44 <displayJoinAndSend+0xdc>)
   18b00:	2232      	movs	r2, #50	; 0x32
   18b02:	701a      	strb	r2, [r3, #0]
			appPostTask(PROCESS_TASK_HANDLER);
   18b04:	2001      	movs	r0, #1
   18b06:	4b10      	ldr	r3, [pc, #64]	; (18b48 <displayJoinAndSend+0xe0>)
   18b08:	4798      	blx	r3
			last_choice = 2;
   18b0a:	4b10      	ldr	r3, [pc, #64]	; (18b4c <displayJoinAndSend+0xe4>)
   18b0c:	2202      	movs	r2, #2
   18b0e:	601a      	str	r2, [r3, #0]
}
   18b10:	46c0      	nop			; (mov r8, r8)
   18b12:	46bd      	mov	sp, r7
   18b14:	bd80      	pop	{r7, pc}
   18b16:	46c0      	nop			; (mov r8, r8)
   18b18:	0002c01c 	.word	0x0002c01c
   18b1c:	00024325 	.word	0x00024325
   18b20:	0002c034 	.word	0x0002c034
   18b24:	0002c044 	.word	0x0002c044
   18b28:	0002c050 	.word	0x0002c050
   18b2c:	0002c060 	.word	0x0002c060
   18b30:	00024261 	.word	0x00024261
   18b34:	20001127 	.word	0x20001127
   18b38:	00015191 	.word	0x00015191
   18b3c:	20001137 	.word	0x20001137
   18b40:	2000110b 	.word	0x2000110b
   18b44:	20001148 	.word	0x20001148
   18b48:	00019795 	.word	0x00019795
   18b4c:	20000138 	.word	0x20000138

00018b50 <displayRunDemoApp>:

/*********************************************************************//**
\brief    Displays and activates LED's for selecting Demo application
*************************************************************************/
static void displayRunDemoApp(void)
{
   18b50:	b580      	push	{r7, lr}
   18b52:	b082      	sub	sp, #8
   18b54:	af00      	add	r7, sp, #0
	uint8_t i = 0;
   18b56:	1dfb      	adds	r3, r7, #7
   18b58:	2200      	movs	r2, #0
   18b5a:	701a      	strb	r2, [r3, #0]
	
    set_LED_data(LED_AMBER,&off);
   18b5c:	4b1e      	ldr	r3, [pc, #120]	; (18bd8 <displayRunDemoApp+0x88>)
   18b5e:	0019      	movs	r1, r3
   18b60:	2002      	movs	r0, #2
   18b62:	4b1e      	ldr	r3, [pc, #120]	; (18bdc <displayRunDemoApp+0x8c>)
   18b64:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
   18b66:	4b1c      	ldr	r3, [pc, #112]	; (18bd8 <displayRunDemoApp+0x88>)
   18b68:	0019      	movs	r1, r3
   18b6a:	2003      	movs	r0, #3
   18b6c:	4b1b      	ldr	r3, [pc, #108]	; (18bdc <displayRunDemoApp+0x8c>)
   18b6e:	4798      	blx	r3

    printf("\r\nPlease select one of the band given below\r\n");
   18b70:	4b1b      	ldr	r3, [pc, #108]	; (18be0 <displayRunDemoApp+0x90>)
   18b72:	0018      	movs	r0, r3
   18b74:	4b1b      	ldr	r3, [pc, #108]	; (18be4 <displayRunDemoApp+0x94>)
   18b76:	4798      	blx	r3
    for(i = 1;i < sizeof(bandTable); i++)
   18b78:	1dfb      	adds	r3, r7, #7
   18b7a:	2201      	movs	r2, #1
   18b7c:	701a      	strb	r2, [r3, #0]
   18b7e:	e00f      	b.n	18ba0 <displayRunDemoApp+0x50>
    {
	    printf("%d. %s\r\n",i,bandStrings[i]);
   18b80:	1dfb      	adds	r3, r7, #7
   18b82:	7819      	ldrb	r1, [r3, #0]
   18b84:	1dfb      	adds	r3, r7, #7
   18b86:	781a      	ldrb	r2, [r3, #0]
   18b88:	4b17      	ldr	r3, [pc, #92]	; (18be8 <displayRunDemoApp+0x98>)
   18b8a:	0092      	lsls	r2, r2, #2
   18b8c:	58d2      	ldr	r2, [r2, r3]
   18b8e:	4b17      	ldr	r3, [pc, #92]	; (18bec <displayRunDemoApp+0x9c>)
   18b90:	0018      	movs	r0, r3
   18b92:	4b17      	ldr	r3, [pc, #92]	; (18bf0 <displayRunDemoApp+0xa0>)
   18b94:	4798      	blx	r3
    for(i = 1;i < sizeof(bandTable); i++)
   18b96:	1dfb      	adds	r3, r7, #7
   18b98:	781a      	ldrb	r2, [r3, #0]
   18b9a:	1dfb      	adds	r3, r7, #7
   18b9c:	3201      	adds	r2, #1
   18b9e:	701a      	strb	r2, [r3, #0]
   18ba0:	1dfb      	adds	r3, r7, #7
   18ba2:	781b      	ldrb	r3, [r3, #0]
   18ba4:	2b09      	cmp	r3, #9
   18ba6:	d9eb      	bls.n	18b80 <displayRunDemoApp+0x30>
    }

    printf("Select Regional Band : ");
   18ba8:	4b12      	ldr	r3, [pc, #72]	; (18bf4 <displayRunDemoApp+0xa4>)
   18baa:	0018      	movs	r0, r3
   18bac:	4b10      	ldr	r3, [pc, #64]	; (18bf0 <displayRunDemoApp+0xa0>)
   18bae:	4798      	blx	r3
	startReceiving = true;
   18bb0:	4b11      	ldr	r3, [pc, #68]	; (18bf8 <displayRunDemoApp+0xa8>)
   18bb2:	2201      	movs	r2, #1
   18bb4:	701a      	strb	r2, [r3, #0]
	
	//Zygurt bypass Band selection
	startReceiving = false;
   18bb6:	4b10      	ldr	r3, [pc, #64]	; (18bf8 <displayRunDemoApp+0xa8>)
   18bb8:	2200      	movs	r2, #0
   18bba:	701a      	strb	r2, [r3, #0]
  	serialBuffer = '3';
   18bbc:	4b0f      	ldr	r3, [pc, #60]	; (18bfc <displayRunDemoApp+0xac>)
   18bbe:	2233      	movs	r2, #51	; 0x33
   18bc0:	701a      	strb	r2, [r3, #0]
	last_choice = 1;
   18bc2:	4b0f      	ldr	r3, [pc, #60]	; (18c00 <displayRunDemoApp+0xb0>)
   18bc4:	2201      	movs	r2, #1
   18bc6:	601a      	str	r2, [r3, #0]
	appPostTask(PROCESS_TASK_HANDLER);
   18bc8:	2001      	movs	r0, #1
   18bca:	4b0e      	ldr	r3, [pc, #56]	; (18c04 <displayRunDemoApp+0xb4>)
   18bcc:	4798      	blx	r3
}
   18bce:	46c0      	nop			; (mov r8, r8)
   18bd0:	46bd      	mov	sp, r7
   18bd2:	b002      	add	sp, #8
   18bd4:	bd80      	pop	{r7, pc}
   18bd6:	46c0      	nop			; (mov r8, r8)
   18bd8:	20001127 	.word	0x20001127
   18bdc:	00015191 	.word	0x00015191
   18be0:	0002c078 	.word	0x0002c078
   18be4:	00024325 	.word	0x00024325
   18be8:	2000013c 	.word	0x2000013c
   18bec:	0002c0a8 	.word	0x0002c0a8
   18bf0:	00024261 	.word	0x00024261
   18bf4:	0002c0b4 	.word	0x0002c0b4
   18bf8:	20001137 	.word	0x20001137
   18bfc:	20001148 	.word	0x20001148
   18c00:	20000138 	.word	0x20000138
   18c04:	00019795 	.word	0x00019795

00018c08 <mote_demo_init>:

/*********************************************************************//**
\brief    Initialization the Demo application
*************************************************************************/
void mote_demo_init(void)
{
   18c08:	b590      	push	{r4, r7, lr}
   18c0a:	b087      	sub	sp, #28
   18c0c:	af02      	add	r7, sp, #8
    bool status = false;
   18c0e:	1dfb      	adds	r3, r7, #7
   18c10:	2200      	movs	r2, #0
   18c12:	701a      	strb	r2, [r3, #0]
    /* Initialize the resources */
    resource_init();
   18c14:	4b3c      	ldr	r3, [pc, #240]	; (18d08 <mote_demo_init+0x100>)
   18c16:	4798      	blx	r3

	startReceiving = false;
   18c18:	4b3c      	ldr	r3, [pc, #240]	; (18d0c <mote_demo_init+0x104>)
   18c1a:	2200      	movs	r2, #0
   18c1c:	701a      	strb	r2, [r3, #0]
    /* Initialize the LORAWAN Stack */
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
   18c1e:	4a3c      	ldr	r2, [pc, #240]	; (18d10 <mote_demo_init+0x108>)
   18c20:	4b3c      	ldr	r3, [pc, #240]	; (18d14 <mote_demo_init+0x10c>)
   18c22:	0011      	movs	r1, r2
   18c24:	0018      	movs	r0, r3
   18c26:	4b3c      	ldr	r3, [pc, #240]	; (18d18 <mote_demo_init+0x110>)
   18c28:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
   18c2a:	4b3c      	ldr	r3, [pc, #240]	; (18d1c <mote_demo_init+0x114>)
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b3c      	ldr	r3, [pc, #240]	; (18d20 <mote_demo_init+0x118>)
   18c30:	4798      	blx	r3
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
   18c32:	4a3c      	ldr	r2, [pc, #240]	; (18d24 <mote_demo_init+0x11c>)
   18c34:	4b3c      	ldr	r3, [pc, #240]	; (18d28 <mote_demo_init+0x120>)
   18c36:	0011      	movs	r1, r2
   18c38:	0018      	movs	r0, r3
   18c3a:	4b39      	ldr	r3, [pc, #228]	; (18d20 <mote_demo_init+0x118>)
   18c3c:	4798      	blx	r3
    printf("\r\nInit - Successful\r\n");
   18c3e:	4b3b      	ldr	r3, [pc, #236]	; (18d2c <mote_demo_init+0x124>)
   18c40:	0018      	movs	r0, r3
   18c42:	4b3b      	ldr	r3, [pc, #236]	; (18d30 <mote_demo_init+0x128>)
   18c44:	4798      	blx	r3

    status = PDS_IsRestorable();
   18c46:	1dfc      	adds	r4, r7, #7
   18c48:	4b3a      	ldr	r3, [pc, #232]	; (18d34 <mote_demo_init+0x12c>)
   18c4a:	4798      	blx	r3
   18c4c:	0003      	movs	r3, r0
   18c4e:	7023      	strb	r3, [r4, #0]
    if(status)
   18c50:	1dfb      	adds	r3, r7, #7
   18c52:	781b      	ldrb	r3, [r3, #0]
   18c54:	2b00      	cmp	r3, #0
   18c56:	d04d      	beq.n	18cf4 <mote_demo_init+0xec>
    {
        static uint8_t prevBand = 0xFF;
        uint8_t prevChoice = 0xFF;
   18c58:	230f      	movs	r3, #15
   18c5a:	18fb      	adds	r3, r7, r3
   18c5c:	22ff      	movs	r2, #255	; 0xff
   18c5e:	701a      	strb	r2, [r3, #0]
        PDS_RestoreAll();
   18c60:	4b35      	ldr	r3, [pc, #212]	; (18d38 <mote_demo_init+0x130>)
   18c62:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
   18c64:	4b35      	ldr	r3, [pc, #212]	; (18d3c <mote_demo_init+0x134>)
   18c66:	001a      	movs	r2, r3
   18c68:	2100      	movs	r1, #0
   18c6a:	2024      	movs	r0, #36	; 0x24
   18c6c:	4b34      	ldr	r3, [pc, #208]	; (18d40 <mote_demo_init+0x138>)
   18c6e:	4798      	blx	r3
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
   18c70:	2300      	movs	r3, #0
   18c72:	60bb      	str	r3, [r7, #8]
   18c74:	e00f      	b.n	18c96 <mote_demo_init+0x8e>
        {
            if(bandTable[i] == prevBand)
   18c76:	4a33      	ldr	r2, [pc, #204]	; (18d44 <mote_demo_init+0x13c>)
   18c78:	68bb      	ldr	r3, [r7, #8]
   18c7a:	18d3      	adds	r3, r2, r3
   18c7c:	781a      	ldrb	r2, [r3, #0]
   18c7e:	4b2f      	ldr	r3, [pc, #188]	; (18d3c <mote_demo_init+0x134>)
   18c80:	781b      	ldrb	r3, [r3, #0]
   18c82:	429a      	cmp	r2, r3
   18c84:	d104      	bne.n	18c90 <mote_demo_init+0x88>
            {
                prevChoice = i;
   18c86:	230f      	movs	r3, #15
   18c88:	18fb      	adds	r3, r7, r3
   18c8a:	68ba      	ldr	r2, [r7, #8]
   18c8c:	701a      	strb	r2, [r3, #0]
                break;
   18c8e:	e005      	b.n	18c9c <mote_demo_init+0x94>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
   18c90:	68bb      	ldr	r3, [r7, #8]
   18c92:	3301      	adds	r3, #1
   18c94:	60bb      	str	r3, [r7, #8]
   18c96:	68bb      	ldr	r3, [r7, #8]
   18c98:	2b08      	cmp	r3, #8
   18c9a:	d9ec      	bls.n	18c76 <mote_demo_init+0x6e>
            }
        }
        memset(rxchar,0,sizeof(rxchar));
   18c9c:	4b2a      	ldr	r3, [pc, #168]	; (18d48 <mote_demo_init+0x140>)
   18c9e:	220b      	movs	r2, #11
   18ca0:	2100      	movs	r1, #0
   18ca2:	0018      	movs	r0, r3
   18ca4:	4b29      	ldr	r3, [pc, #164]	; (18d4c <mote_demo_init+0x144>)
   18ca6:	4798      	blx	r3
        sio2host_rx(rxchar,10);
   18ca8:	4b27      	ldr	r3, [pc, #156]	; (18d48 <mote_demo_init+0x140>)
   18caa:	210a      	movs	r1, #10
   18cac:	0018      	movs	r0, r3
   18cae:	4b28      	ldr	r3, [pc, #160]	; (18d50 <mote_demo_init+0x148>)
   18cb0:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
   18cb2:	230f      	movs	r3, #15
   18cb4:	18fb      	adds	r3, r7, r3
   18cb6:	781a      	ldrb	r2, [r3, #0]
   18cb8:	4b26      	ldr	r3, [pc, #152]	; (18d54 <mote_demo_init+0x14c>)
   18cba:	0092      	lsls	r2, r2, #2
   18cbc:	58d2      	ldr	r2, [r2, r3]
   18cbe:	4b26      	ldr	r3, [pc, #152]	; (18d58 <mote_demo_init+0x150>)
   18cc0:	0011      	movs	r1, r2
   18cc2:	0018      	movs	r0, r3
   18cc4:	4b16      	ldr	r3, [pc, #88]	; (18d20 <mote_demo_init+0x118>)
   18cc6:	4798      	blx	r3
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
   18cc8:	230f      	movs	r3, #15
   18cca:	18fb      	adds	r3, r7, r3
   18ccc:	781a      	ldrb	r2, [r3, #0]
   18cce:	4b21      	ldr	r3, [pc, #132]	; (18d54 <mote_demo_init+0x14c>)
   18cd0:	0092      	lsls	r2, r2, #2
   18cd2:	58d2      	ldr	r2, [r2, r3]
   18cd4:	4b21      	ldr	r3, [pc, #132]	; (18d5c <mote_demo_init+0x154>)
   18cd6:	0011      	movs	r1, r2
   18cd8:	0018      	movs	r0, r3
   18cda:	4b11      	ldr	r3, [pc, #68]	; (18d20 <mote_demo_init+0x118>)
   18cdc:	4798      	blx	r3

        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
   18cde:	4b20      	ldr	r3, [pc, #128]	; (18d60 <mote_demo_init+0x158>)
   18ce0:	7818      	ldrb	r0, [r3, #0]
   18ce2:	4a20      	ldr	r2, [pc, #128]	; (18d64 <mote_demo_init+0x15c>)
   18ce4:	4920      	ldr	r1, [pc, #128]	; (18d68 <mote_demo_init+0x160>)
   18ce6:	2300      	movs	r3, #0
   18ce8:	9300      	str	r3, [sp, #0]
   18cea:	0013      	movs	r3, r2
   18cec:	2200      	movs	r2, #0
   18cee:	4c1f      	ldr	r4, [pc, #124]	; (18d6c <mote_demo_init+0x164>)
   18cf0:	47a0      	blx	r4
    else
    {
		appTaskState = DEMO_CERT_APP_STATE;
        appPostTask(DISPLAY_TASK_HANDLER);
    }
}
   18cf2:	e005      	b.n	18d00 <mote_demo_init+0xf8>
		appTaskState = DEMO_CERT_APP_STATE;
   18cf4:	4b1e      	ldr	r3, [pc, #120]	; (18d70 <mote_demo_init+0x168>)
   18cf6:	2201      	movs	r2, #1
   18cf8:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
   18cfa:	2000      	movs	r0, #0
   18cfc:	4b1d      	ldr	r3, [pc, #116]	; (18d74 <mote_demo_init+0x16c>)
   18cfe:	4798      	blx	r3
}
   18d00:	46c0      	nop			; (mov r8, r8)
   18d02:	46bd      	mov	sp, r7
   18d04:	b005      	add	sp, #20
   18d06:	bd90      	pop	{r4, r7, pc}
   18d08:	00015251 	.word	0x00015251
   18d0c:	20001137 	.word	0x20001137
   18d10:	000191e5 	.word	0x000191e5
   18d14:	00018e6d 	.word	0x00018e6d
   18d18:	0001ac91 	.word	0x0001ac91
   18d1c:	0002c0cc 	.word	0x0002c0cc
   18d20:	00024261 	.word	0x00024261
   18d24:	0002c10c 	.word	0x0002c10c
   18d28:	0002c11c 	.word	0x0002c11c
   18d2c:	0002c13c 	.word	0x0002c13c
   18d30:	00024325 	.word	0x00024325
   18d34:	00013bfd 	.word	0x00013bfd
   18d38:	00013cc9 	.word	0x00013cc9
   18d3c:	200001e4 	.word	0x200001e4
   18d40:	0001bfa1 	.word	0x0001bfa1
   18d44:	20000164 	.word	0x20000164
   18d48:	2000112c 	.word	0x2000112c
   18d4c:	000241cd 	.word	0x000241cd
   18d50:	000067c9 	.word	0x000067c9
   18d54:	2000013c 	.word	0x2000013c
   18d58:	0002c154 	.word	0x0002c154
   18d5c:	0002c178 	.word	0x0002c178
   18d60:	200001e5 	.word	0x200001e5
   18d64:	00019639 	.word	0x00019639
   18d68:	000f4240 	.word	0x000f4240
   18d6c:	000159bd 	.word	0x000159bd
   18d70:	20001138 	.word	0x20001138
   18d74:	00019795 	.word	0x00019795

00018d78 <demo_handle_evt_rx_data>:
 \brief      Function that processes the Rx data
 \param[in]  data - Rx data payload
 \param[in]  dataLen - The number of Rx bytes
 ************************************************************************/
static void demo_handle_evt_rx_data(void *appHandle, appCbParams_t *appdata)
{
   18d78:	b580      	push	{r7, lr}
   18d7a:	b086      	sub	sp, #24
   18d7c:	af00      	add	r7, sp, #0
   18d7e:	6078      	str	r0, [r7, #4]
   18d80:	6039      	str	r1, [r7, #0]
    uint8_t *pData = appdata->param.rxData.pData;
   18d82:	683b      	ldr	r3, [r7, #0]
   18d84:	689b      	ldr	r3, [r3, #8]
   18d86:	613b      	str	r3, [r7, #16]
    uint8_t dataLength = appdata->param.rxData.dataLength;
   18d88:	230f      	movs	r3, #15
   18d8a:	18fb      	adds	r3, r7, r3
   18d8c:	683a      	ldr	r2, [r7, #0]
   18d8e:	7b12      	ldrb	r2, [r2, #12]
   18d90:	701a      	strb	r2, [r3, #0]
    uint32_t devAddress = appdata->param.rxData.devAddr;
   18d92:	683b      	ldr	r3, [r7, #0]
   18d94:	685b      	ldr	r3, [r3, #4]
   18d96:	60bb      	str	r3, [r7, #8]

    //Successful transmission
    if((dataLength > 0U) && (NULL != pData))
   18d98:	230f      	movs	r3, #15
   18d9a:	18fb      	adds	r3, r7, r3
   18d9c:	781b      	ldrb	r3, [r3, #0]
   18d9e:	2b00      	cmp	r3, #0
   18da0:	d047      	beq.n	18e32 <demo_handle_evt_rx_data+0xba>
   18da2:	693b      	ldr	r3, [r7, #16]
   18da4:	2b00      	cmp	r3, #0
   18da6:	d044      	beq.n	18e32 <demo_handle_evt_rx_data+0xba>
    {
        printf("*** Received DL Data ***\n\r");
   18da8:	4b26      	ldr	r3, [pc, #152]	; (18e44 <demo_handle_evt_rx_data+0xcc>)
   18daa:	0018      	movs	r0, r3
   18dac:	4b26      	ldr	r3, [pc, #152]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18dae:	4798      	blx	r3
        printf("\nFrame Received at port %d\n\r",pData[0]);
   18db0:	693b      	ldr	r3, [r7, #16]
   18db2:	781b      	ldrb	r3, [r3, #0]
   18db4:	001a      	movs	r2, r3
   18db6:	4b25      	ldr	r3, [pc, #148]	; (18e4c <demo_handle_evt_rx_data+0xd4>)
   18db8:	0011      	movs	r1, r2
   18dba:	0018      	movs	r0, r3
   18dbc:	4b22      	ldr	r3, [pc, #136]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18dbe:	4798      	blx	r3
        printf("\nFrame Length - %d\n\r",dataLength);
   18dc0:	230f      	movs	r3, #15
   18dc2:	18fb      	adds	r3, r7, r3
   18dc4:	781a      	ldrb	r2, [r3, #0]
   18dc6:	4b22      	ldr	r3, [pc, #136]	; (18e50 <demo_handle_evt_rx_data+0xd8>)
   18dc8:	0011      	movs	r1, r2
   18dca:	0018      	movs	r0, r3
   18dcc:	4b1e      	ldr	r3, [pc, #120]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18dce:	4798      	blx	r3
        printf("\nAddress - 0x%lx\n\r", devAddress);
   18dd0:	68ba      	ldr	r2, [r7, #8]
   18dd2:	4b20      	ldr	r3, [pc, #128]	; (18e54 <demo_handle_evt_rx_data+0xdc>)
   18dd4:	0011      	movs	r1, r2
   18dd6:	0018      	movs	r0, r3
   18dd8:	4b1b      	ldr	r3, [pc, #108]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18dda:	4798      	blx	r3
        printf ("\nPayload: ");
   18ddc:	4b1e      	ldr	r3, [pc, #120]	; (18e58 <demo_handle_evt_rx_data+0xe0>)
   18dde:	0018      	movs	r0, r3
   18de0:	4b19      	ldr	r3, [pc, #100]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18de2:	4798      	blx	r3
        for (uint8_t i =0; i<dataLength - 1; i++)
   18de4:	2317      	movs	r3, #23
   18de6:	18fb      	adds	r3, r7, r3
   18de8:	2200      	movs	r2, #0
   18dea:	701a      	strb	r2, [r3, #0]
   18dec:	e013      	b.n	18e16 <demo_handle_evt_rx_data+0x9e>
        {
            printf("%x",pData[i+1]);
   18dee:	2317      	movs	r3, #23
   18df0:	18fb      	adds	r3, r7, r3
   18df2:	781b      	ldrb	r3, [r3, #0]
   18df4:	3301      	adds	r3, #1
   18df6:	693a      	ldr	r2, [r7, #16]
   18df8:	18d3      	adds	r3, r2, r3
   18dfa:	781b      	ldrb	r3, [r3, #0]
   18dfc:	001a      	movs	r2, r3
   18dfe:	4b17      	ldr	r3, [pc, #92]	; (18e5c <demo_handle_evt_rx_data+0xe4>)
   18e00:	0011      	movs	r1, r2
   18e02:	0018      	movs	r0, r3
   18e04:	4b10      	ldr	r3, [pc, #64]	; (18e48 <demo_handle_evt_rx_data+0xd0>)
   18e06:	4798      	blx	r3
        for (uint8_t i =0; i<dataLength - 1; i++)
   18e08:	2317      	movs	r3, #23
   18e0a:	18fb      	adds	r3, r7, r3
   18e0c:	781a      	ldrb	r2, [r3, #0]
   18e0e:	2317      	movs	r3, #23
   18e10:	18fb      	adds	r3, r7, r3
   18e12:	3201      	adds	r2, #1
   18e14:	701a      	strb	r2, [r3, #0]
   18e16:	2317      	movs	r3, #23
   18e18:	18fb      	adds	r3, r7, r3
   18e1a:	781a      	ldrb	r2, [r3, #0]
   18e1c:	230f      	movs	r3, #15
   18e1e:	18fb      	adds	r3, r7, r3
   18e20:	781b      	ldrb	r3, [r3, #0]
   18e22:	3b01      	subs	r3, #1
   18e24:	429a      	cmp	r2, r3
   18e26:	dbe2      	blt.n	18dee <demo_handle_evt_rx_data+0x76>
        }
        printf("\r\n*************************\r\n");
   18e28:	4b0d      	ldr	r3, [pc, #52]	; (18e60 <demo_handle_evt_rx_data+0xe8>)
   18e2a:	0018      	movs	r0, r3
   18e2c:	4b0d      	ldr	r3, [pc, #52]	; (18e64 <demo_handle_evt_rx_data+0xec>)
   18e2e:	4798      	blx	r3
   18e30:	e003      	b.n	18e3a <demo_handle_evt_rx_data+0xc2>
    }
    else
    {
        printf("Received ACK for Confirmed data\r\n");
   18e32:	4b0d      	ldr	r3, [pc, #52]	; (18e68 <demo_handle_evt_rx_data+0xf0>)
   18e34:	0018      	movs	r0, r3
   18e36:	4b0b      	ldr	r3, [pc, #44]	; (18e64 <demo_handle_evt_rx_data+0xec>)
   18e38:	4798      	blx	r3
    }
}
   18e3a:	46c0      	nop			; (mov r8, r8)
   18e3c:	46bd      	mov	sp, r7
   18e3e:	b006      	add	sp, #24
   18e40:	bd80      	pop	{r7, pc}
   18e42:	46c0      	nop			; (mov r8, r8)
   18e44:	0002c1ac 	.word	0x0002c1ac
   18e48:	00024261 	.word	0x00024261
   18e4c:	0002c1c8 	.word	0x0002c1c8
   18e50:	0002c1e8 	.word	0x0002c1e8
   18e54:	0002c200 	.word	0x0002c200
   18e58:	0002c214 	.word	0x0002c214
   18e5c:	0002c220 	.word	0x0002c220
   18e60:	0002c224 	.word	0x0002c224
   18e64:	00024325 	.word	0x00024325
   18e68:	0002c244 	.word	0x0002c244

00018e6c <demo_appdata_callback>:
/*********************************************************************//**
\brief Callback function for the ending of Bidirectional communication of
       Application data
 *************************************************************************/
void demo_appdata_callback(void *appHandle, appCbParams_t *appdata)
{
   18e6c:	b580      	push	{r7, lr}
   18e6e:	b084      	sub	sp, #16
   18e70:	af00      	add	r7, sp, #0
   18e72:	6078      	str	r0, [r7, #4]
   18e74:	6039      	str	r1, [r7, #0]
    StackRetStatus_t status = LORAWAN_INVALID_REQUEST;
   18e76:	230f      	movs	r3, #15
   18e78:	18fb      	adds	r3, r7, r3
   18e7a:	2215      	movs	r2, #21
   18e7c:	701a      	strb	r2, [r3, #0]

    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
   18e7e:	683b      	ldr	r3, [r7, #0]
   18e80:	781b      	ldrb	r3, [r3, #0]
   18e82:	2b02      	cmp	r3, #2
   18e84:	d000      	beq.n	18e88 <demo_appdata_callback+0x1c>
   18e86:	e099      	b.n	18fbc <demo_appdata_callback+0x150>
    {
        status = appdata->param.rxData.status;
   18e88:	230f      	movs	r3, #15
   18e8a:	18fb      	adds	r3, r7, r3
   18e8c:	683a      	ldr	r2, [r7, #0]
   18e8e:	7b52      	ldrb	r2, [r2, #13]
   18e90:	701a      	strb	r2, [r3, #0]
        switch(status)
   18e92:	230f      	movs	r3, #15
   18e94:	18fb      	adds	r3, r7, r3
   18e96:	781b      	ldrb	r3, [r3, #0]
   18e98:	2b1e      	cmp	r3, #30
   18e9a:	d900      	bls.n	18e9e <demo_appdata_callback+0x32>
   18e9c:	e088      	b.n	18fb0 <demo_appdata_callback+0x144>
   18e9e:	009a      	lsls	r2, r3, #2
   18ea0:	4ba8      	ldr	r3, [pc, #672]	; (19144 <demo_appdata_callback+0x2d8>)
   18ea2:	18d3      	adds	r3, r2, r3
   18ea4:	681b      	ldr	r3, [r3, #0]
   18ea6:	469f      	mov	pc, r3
        {
            case LORAWAN_SUCCESS:
            {
                demo_handle_evt_rx_data(appHandle, appdata);
   18ea8:	683a      	ldr	r2, [r7, #0]
   18eaa:	687b      	ldr	r3, [r7, #4]
   18eac:	0011      	movs	r1, r2
   18eae:	0018      	movs	r0, r3
   18eb0:	4ba5      	ldr	r3, [pc, #660]	; (19148 <demo_appdata_callback+0x2dc>)
   18eb2:	4798      	blx	r3
            }
            break;
   18eb4:	e128      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_NO_DATA:
            {
                printf("\n\rRADIO_NO_DATA \n\r");
   18eb6:	4ba5      	ldr	r3, [pc, #660]	; (1914c <demo_appdata_callback+0x2e0>)
   18eb8:	0018      	movs	r0, r3
   18eba:	4ba5      	ldr	r3, [pc, #660]	; (19150 <demo_appdata_callback+0x2e4>)
   18ebc:	4798      	blx	r3
            }
            break;
   18ebe:	e123      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_DATA_SIZE:
                printf("\n\rRADIO_DATA_SIZE \n\r");
   18ec0:	4ba4      	ldr	r3, [pc, #656]	; (19154 <demo_appdata_callback+0x2e8>)
   18ec2:	0018      	movs	r0, r3
   18ec4:	4ba2      	ldr	r3, [pc, #648]	; (19150 <demo_appdata_callback+0x2e4>)
   18ec6:	4798      	blx	r3
            break;
   18ec8:	e11e      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_INVALID_REQ:
                printf("\n\rRADIO_INVALID_REQ \n\r");
   18eca:	4ba3      	ldr	r3, [pc, #652]	; (19158 <demo_appdata_callback+0x2ec>)
   18ecc:	0018      	movs	r0, r3
   18ece:	4ba0      	ldr	r3, [pc, #640]	; (19150 <demo_appdata_callback+0x2e4>)
   18ed0:	4798      	blx	r3
            break;
   18ed2:	e119      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_BUSY:
                printf("\n\rRADIO_BUSY \n\r");
   18ed4:	4ba1      	ldr	r3, [pc, #644]	; (1915c <demo_appdata_callback+0x2f0>)
   18ed6:	0018      	movs	r0, r3
   18ed8:	4b9d      	ldr	r3, [pc, #628]	; (19150 <demo_appdata_callback+0x2e4>)
   18eda:	4798      	blx	r3
            break;
   18edc:	e114      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_OUT_OF_RANGE:
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
   18ede:	4ba0      	ldr	r3, [pc, #640]	; (19160 <demo_appdata_callback+0x2f4>)
   18ee0:	0018      	movs	r0, r3
   18ee2:	4b9b      	ldr	r3, [pc, #620]	; (19150 <demo_appdata_callback+0x2e4>)
   18ee4:	4798      	blx	r3
            break;
   18ee6:	e10f      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_UNSUPPORTED_ATTR:
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
   18ee8:	4b9e      	ldr	r3, [pc, #632]	; (19164 <demo_appdata_callback+0x2f8>)
   18eea:	0018      	movs	r0, r3
   18eec:	4b98      	ldr	r3, [pc, #608]	; (19150 <demo_appdata_callback+0x2e4>)
   18eee:	4798      	blx	r3
            break;
   18ef0:	e10a      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_CHANNEL_BUSY:
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
   18ef2:	4b9d      	ldr	r3, [pc, #628]	; (19168 <demo_appdata_callback+0x2fc>)
   18ef4:	0018      	movs	r0, r3
   18ef6:	4b96      	ldr	r3, [pc, #600]	; (19150 <demo_appdata_callback+0x2e4>)
   18ef8:	4798      	blx	r3
            break;
   18efa:	e105      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_NOT_JOINED:
                printf("\n\rNWK_NOT_JOINED \n\r");
   18efc:	4b9b      	ldr	r3, [pc, #620]	; (1916c <demo_appdata_callback+0x300>)
   18efe:	0018      	movs	r0, r3
   18f00:	4b93      	ldr	r3, [pc, #588]	; (19150 <demo_appdata_callback+0x2e4>)
   18f02:	4798      	blx	r3
            break;
   18f04:	e100      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_PARAMETER:
                printf("\n\rINVALID_PARAMETER \n\r");
   18f06:	4b9a      	ldr	r3, [pc, #616]	; (19170 <demo_appdata_callback+0x304>)
   18f08:	0018      	movs	r0, r3
   18f0a:	4b91      	ldr	r3, [pc, #580]	; (19150 <demo_appdata_callback+0x2e4>)
   18f0c:	4798      	blx	r3
            break;
   18f0e:	e0fb      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_KEYS_NOT_INITIALIZED:
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
   18f10:	4b98      	ldr	r3, [pc, #608]	; (19174 <demo_appdata_callback+0x308>)
   18f12:	0018      	movs	r0, r3
   18f14:	4b8e      	ldr	r3, [pc, #568]	; (19150 <demo_appdata_callback+0x2e4>)
   18f16:	4798      	blx	r3
            break;
   18f18:	e0f6      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_SILENT_IMMEDIATELY_ACTIVE:
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
   18f1a:	4b97      	ldr	r3, [pc, #604]	; (19178 <demo_appdata_callback+0x30c>)
   18f1c:	0018      	movs	r0, r3
   18f1e:	4b8c      	ldr	r3, [pc, #560]	; (19150 <demo_appdata_callback+0x2e4>)
   18f20:	4798      	blx	r3
            break;
   18f22:	e0f1      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR_REJOIN_NEEDED:
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
   18f24:	4b95      	ldr	r3, [pc, #596]	; (1917c <demo_appdata_callback+0x310>)
   18f26:	0018      	movs	r0, r3
   18f28:	4b89      	ldr	r3, [pc, #548]	; (19150 <demo_appdata_callback+0x2e4>)
   18f2a:	4798      	blx	r3
            break;
   18f2c:	e0ec      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_BUFFER_LENGTH:
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
   18f2e:	4b94      	ldr	r3, [pc, #592]	; (19180 <demo_appdata_callback+0x314>)
   18f30:	0018      	movs	r0, r3
   18f32:	4b87      	ldr	r3, [pc, #540]	; (19150 <demo_appdata_callback+0x2e4>)
   18f34:	4798      	blx	r3
            break;
   18f36:	e0e7      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MAC_PAUSED :
                printf("\n\rMAC_PAUSED  \n\r");
   18f38:	4b92      	ldr	r3, [pc, #584]	; (19184 <demo_appdata_callback+0x318>)
   18f3a:	0018      	movs	r0, r3
   18f3c:	4b84      	ldr	r3, [pc, #528]	; (19150 <demo_appdata_callback+0x2e4>)
   18f3e:	4798      	blx	r3
            break;
   18f40:	e0e2      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_CHANNELS_FOUND:
                printf("\n\rNO_CHANNELS_FOUND \n\r");
   18f42:	4b91      	ldr	r3, [pc, #580]	; (19188 <demo_appdata_callback+0x31c>)
   18f44:	0018      	movs	r0, r3
   18f46:	4b82      	ldr	r3, [pc, #520]	; (19150 <demo_appdata_callback+0x2e4>)
   18f48:	4798      	blx	r3
            break;
   18f4a:	e0dd      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_BUSY:
                printf("\n\rBUSY\n\r");
   18f4c:	4b8f      	ldr	r3, [pc, #572]	; (1918c <demo_appdata_callback+0x320>)
   18f4e:	0018      	movs	r0, r3
   18f50:	4b7f      	ldr	r3, [pc, #508]	; (19150 <demo_appdata_callback+0x2e4>)
   18f52:	4798      	blx	r3
            break;
   18f54:	e0d8      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_ACK:
                printf("\n\rNO_ACK \n\r");
   18f56:	4b8e      	ldr	r3, [pc, #568]	; (19190 <demo_appdata_callback+0x324>)
   18f58:	0018      	movs	r0, r3
   18f5a:	4b7d      	ldr	r3, [pc, #500]	; (19150 <demo_appdata_callback+0x2e4>)
   18f5c:	4798      	blx	r3
            break;
   18f5e:	e0d3      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_JOIN_IN_PROGRESS:
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
   18f60:	4b8c      	ldr	r3, [pc, #560]	; (19194 <demo_appdata_callback+0x328>)
   18f62:	0018      	movs	r0, r3
   18f64:	4b7a      	ldr	r3, [pc, #488]	; (19150 <demo_appdata_callback+0x2e4>)
   18f66:	4798      	blx	r3
            break;
   18f68:	e0ce      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RESOURCE_UNAVAILABLE:
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
   18f6a:	4b8b      	ldr	r3, [pc, #556]	; (19198 <demo_appdata_callback+0x32c>)
   18f6c:	0018      	movs	r0, r3
   18f6e:	4b78      	ldr	r3, [pc, #480]	; (19150 <demo_appdata_callback+0x2e4>)
   18f70:	4798      	blx	r3
            break;
   18f72:	e0c9      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_REQUEST:
                printf("\n\rINVALID_REQUEST \n\r");
   18f74:	4b89      	ldr	r3, [pc, #548]	; (1919c <demo_appdata_callback+0x330>)
   18f76:	0018      	movs	r0, r3
   18f78:	4b75      	ldr	r3, [pc, #468]	; (19150 <demo_appdata_callback+0x2e4>)
   18f7a:	4798      	blx	r3
            break;
   18f7c:	e0c4      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR:
                printf("\n\rFCNTR_ERROR \n\r");
   18f7e:	4b88      	ldr	r3, [pc, #544]	; (191a0 <demo_appdata_callback+0x334>)
   18f80:	0018      	movs	r0, r3
   18f82:	4b73      	ldr	r3, [pc, #460]	; (19150 <demo_appdata_callback+0x2e4>)
   18f84:	4798      	blx	r3
            break;
   18f86:	e0bf      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MIC_ERROR:
                printf("\n\rMIC_ERROR \n\r");
   18f88:	4b86      	ldr	r3, [pc, #536]	; (191a4 <demo_appdata_callback+0x338>)
   18f8a:	0018      	movs	r0, r3
   18f8c:	4b70      	ldr	r3, [pc, #448]	; (19150 <demo_appdata_callback+0x2e4>)
   18f8e:	4798      	blx	r3
            break;
   18f90:	e0ba      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_MTYPE:
                printf("\n\rINVALID_MTYPE \n\r");
   18f92:	4b85      	ldr	r3, [pc, #532]	; (191a8 <demo_appdata_callback+0x33c>)
   18f94:	0018      	movs	r0, r3
   18f96:	4b6e      	ldr	r3, [pc, #440]	; (19150 <demo_appdata_callback+0x2e4>)
   18f98:	4798      	blx	r3
            break;
   18f9a:	e0b5      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MCAST_HDR_INVALID:
                printf("\n\rMCAST_HDR_INVALID \n\r");
   18f9c:	4b83      	ldr	r3, [pc, #524]	; (191ac <demo_appdata_callback+0x340>)
   18f9e:	0018      	movs	r0, r3
   18fa0:	4b6b      	ldr	r3, [pc, #428]	; (19150 <demo_appdata_callback+0x2e4>)
   18fa2:	4798      	blx	r3
            break;
   18fa4:	e0b0      	b.n	19108 <demo_appdata_callback+0x29c>
			case LORAWAN_INVALID_PACKET:
				printf("\n\rINVALID_PACKET \n\r");
   18fa6:	4b82      	ldr	r3, [pc, #520]	; (191b0 <demo_appdata_callback+0x344>)
   18fa8:	0018      	movs	r0, r3
   18faa:	4b69      	ldr	r3, [pc, #420]	; (19150 <demo_appdata_callback+0x2e4>)
   18fac:	4798      	blx	r3
			break;
   18fae:	e0ab      	b.n	19108 <demo_appdata_callback+0x29c>
            default:
                printf("UNKNOWN ERROR\n\r");
   18fb0:	4b80      	ldr	r3, [pc, #512]	; (191b4 <demo_appdata_callback+0x348>)
   18fb2:	0018      	movs	r0, r3
   18fb4:	4b66      	ldr	r3, [pc, #408]	; (19150 <demo_appdata_callback+0x2e4>)
   18fb6:	4798      	blx	r3
            break;
   18fb8:	46c0      	nop			; (mov r8, r8)
   18fba:	e0a5      	b.n	19108 <demo_appdata_callback+0x29c>
        }
    }
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
   18fbc:	683b      	ldr	r3, [r7, #0]
   18fbe:	781b      	ldrb	r3, [r3, #0]
   18fc0:	2b04      	cmp	r3, #4
   18fc2:	d000      	beq.n	18fc6 <demo_appdata_callback+0x15a>
   18fc4:	e0a0      	b.n	19108 <demo_appdata_callback+0x29c>
    {
        switch(status = appdata->param.transCmpl.status)
   18fc6:	230f      	movs	r3, #15
   18fc8:	18fb      	adds	r3, r7, r3
   18fca:	683a      	ldr	r2, [r7, #0]
   18fcc:	7912      	ldrb	r2, [r2, #4]
   18fce:	701a      	strb	r2, [r3, #0]
   18fd0:	230f      	movs	r3, #15
   18fd2:	18fb      	adds	r3, r7, r3
   18fd4:	781b      	ldrb	r3, [r3, #0]
   18fd6:	2b1e      	cmp	r3, #30
   18fd8:	d900      	bls.n	18fdc <demo_appdata_callback+0x170>
   18fda:	e090      	b.n	190fe <demo_appdata_callback+0x292>
   18fdc:	009a      	lsls	r2, r3, #2
   18fde:	4b76      	ldr	r3, [pc, #472]	; (191b8 <demo_appdata_callback+0x34c>)
   18fe0:	18d3      	adds	r3, r2, r3
   18fe2:	681b      	ldr	r3, [r3, #0]
   18fe4:	469f      	mov	pc, r3
        {
            case LORAWAN_SUCCESS:
            {
                printf("Transmission Success\r\n");
   18fe6:	4b75      	ldr	r3, [pc, #468]	; (191bc <demo_appdata_callback+0x350>)
   18fe8:	0018      	movs	r0, r3
   18fea:	4b75      	ldr	r3, [pc, #468]	; (191c0 <demo_appdata_callback+0x354>)
   18fec:	4798      	blx	r3
            }
            break;
   18fee:	e08b      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_SUCCESS:
            {
                printf("Transmission Success\r\n");
   18ff0:	4b72      	ldr	r3, [pc, #456]	; (191bc <demo_appdata_callback+0x350>)
   18ff2:	0018      	movs	r0, r3
   18ff4:	4b72      	ldr	r3, [pc, #456]	; (191c0 <demo_appdata_callback+0x354>)
   18ff6:	4798      	blx	r3
            }
            break;
   18ff8:	e086      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_NO_DATA:
            {
                printf("\n\rRADIO_NO_DATA \n\r");
   18ffa:	4b54      	ldr	r3, [pc, #336]	; (1914c <demo_appdata_callback+0x2e0>)
   18ffc:	0018      	movs	r0, r3
   18ffe:	4b54      	ldr	r3, [pc, #336]	; (19150 <demo_appdata_callback+0x2e4>)
   19000:	4798      	blx	r3
            }
            break;
   19002:	e081      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_DATA_SIZE:
                printf("\n\rRADIO_DATA_SIZE \n\r");
   19004:	4b53      	ldr	r3, [pc, #332]	; (19154 <demo_appdata_callback+0x2e8>)
   19006:	0018      	movs	r0, r3
   19008:	4b51      	ldr	r3, [pc, #324]	; (19150 <demo_appdata_callback+0x2e4>)
   1900a:	4798      	blx	r3
            break;
   1900c:	e07c      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_INVALID_REQ:
                printf("\n\rRADIO_INVALID_REQ \n\r");
   1900e:	4b52      	ldr	r3, [pc, #328]	; (19158 <demo_appdata_callback+0x2ec>)
   19010:	0018      	movs	r0, r3
   19012:	4b4f      	ldr	r3, [pc, #316]	; (19150 <demo_appdata_callback+0x2e4>)
   19014:	4798      	blx	r3
            break;
   19016:	e077      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_BUSY:
                printf("\n\rRADIO_BUSY \n\r");
   19018:	4b50      	ldr	r3, [pc, #320]	; (1915c <demo_appdata_callback+0x2f0>)
   1901a:	0018      	movs	r0, r3
   1901c:	4b4c      	ldr	r3, [pc, #304]	; (19150 <demo_appdata_callback+0x2e4>)
   1901e:	4798      	blx	r3
            break;
   19020:	e072      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_TX_TIMEOUT:
                printf("\nTx Timeout\n\r");
   19022:	4b68      	ldr	r3, [pc, #416]	; (191c4 <demo_appdata_callback+0x358>)
   19024:	0018      	movs	r0, r3
   19026:	4b4a      	ldr	r3, [pc, #296]	; (19150 <demo_appdata_callback+0x2e4>)
   19028:	4798      	blx	r3
            break;
   1902a:	e06d      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_OUT_OF_RANGE:
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
   1902c:	4b4c      	ldr	r3, [pc, #304]	; (19160 <demo_appdata_callback+0x2f4>)
   1902e:	0018      	movs	r0, r3
   19030:	4b47      	ldr	r3, [pc, #284]	; (19150 <demo_appdata_callback+0x2e4>)
   19032:	4798      	blx	r3
            break;
   19034:	e068      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_UNSUPPORTED_ATTR:
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
   19036:	4b4b      	ldr	r3, [pc, #300]	; (19164 <demo_appdata_callback+0x2f8>)
   19038:	0018      	movs	r0, r3
   1903a:	4b45      	ldr	r3, [pc, #276]	; (19150 <demo_appdata_callback+0x2e4>)
   1903c:	4798      	blx	r3
            break;
   1903e:	e063      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RADIO_CHANNEL_BUSY:
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
   19040:	4b49      	ldr	r3, [pc, #292]	; (19168 <demo_appdata_callback+0x2fc>)
   19042:	0018      	movs	r0, r3
   19044:	4b42      	ldr	r3, [pc, #264]	; (19150 <demo_appdata_callback+0x2e4>)
   19046:	4798      	blx	r3
            break;
   19048:	e05e      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_NOT_JOINED:
                printf("\n\rNWK_NOT_JOINED \n\r");
   1904a:	4b48      	ldr	r3, [pc, #288]	; (1916c <demo_appdata_callback+0x300>)
   1904c:	0018      	movs	r0, r3
   1904e:	4b40      	ldr	r3, [pc, #256]	; (19150 <demo_appdata_callback+0x2e4>)
   19050:	4798      	blx	r3
            break;
   19052:	e059      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_PARAMETER:
                printf("\n\rINVALID_PARAMETER \n\r");
   19054:	4b46      	ldr	r3, [pc, #280]	; (19170 <demo_appdata_callback+0x304>)
   19056:	0018      	movs	r0, r3
   19058:	4b3d      	ldr	r3, [pc, #244]	; (19150 <demo_appdata_callback+0x2e4>)
   1905a:	4798      	blx	r3
            break;
   1905c:	e054      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_KEYS_NOT_INITIALIZED:
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
   1905e:	4b45      	ldr	r3, [pc, #276]	; (19174 <demo_appdata_callback+0x308>)
   19060:	0018      	movs	r0, r3
   19062:	4b3b      	ldr	r3, [pc, #236]	; (19150 <demo_appdata_callback+0x2e4>)
   19064:	4798      	blx	r3
            break;
   19066:	e04f      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_SILENT_IMMEDIATELY_ACTIVE:
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
   19068:	4b43      	ldr	r3, [pc, #268]	; (19178 <demo_appdata_callback+0x30c>)
   1906a:	0018      	movs	r0, r3
   1906c:	4b38      	ldr	r3, [pc, #224]	; (19150 <demo_appdata_callback+0x2e4>)
   1906e:	4798      	blx	r3
            break;
   19070:	e04a      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR_REJOIN_NEEDED:
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
   19072:	4b42      	ldr	r3, [pc, #264]	; (1917c <demo_appdata_callback+0x310>)
   19074:	0018      	movs	r0, r3
   19076:	4b36      	ldr	r3, [pc, #216]	; (19150 <demo_appdata_callback+0x2e4>)
   19078:	4798      	blx	r3
            break;
   1907a:	e045      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_BUFFER_LENGTH:
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
   1907c:	4b40      	ldr	r3, [pc, #256]	; (19180 <demo_appdata_callback+0x314>)
   1907e:	0018      	movs	r0, r3
   19080:	4b33      	ldr	r3, [pc, #204]	; (19150 <demo_appdata_callback+0x2e4>)
   19082:	4798      	blx	r3
            break;
   19084:	e040      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MAC_PAUSED :
                printf("\n\rMAC_PAUSED  \n\r");
   19086:	4b3f      	ldr	r3, [pc, #252]	; (19184 <demo_appdata_callback+0x318>)
   19088:	0018      	movs	r0, r3
   1908a:	4b31      	ldr	r3, [pc, #196]	; (19150 <demo_appdata_callback+0x2e4>)
   1908c:	4798      	blx	r3
            break;
   1908e:	e03b      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_CHANNELS_FOUND:
                printf("\n\rNO_CHANNELS_FOUND \n\r");
   19090:	4b3d      	ldr	r3, [pc, #244]	; (19188 <demo_appdata_callback+0x31c>)
   19092:	0018      	movs	r0, r3
   19094:	4b2e      	ldr	r3, [pc, #184]	; (19150 <demo_appdata_callback+0x2e4>)
   19096:	4798      	blx	r3
            break;
   19098:	e036      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_BUSY:
                printf("\n\rBUSY\n\r");
   1909a:	4b3c      	ldr	r3, [pc, #240]	; (1918c <demo_appdata_callback+0x320>)
   1909c:	0018      	movs	r0, r3
   1909e:	4b2c      	ldr	r3, [pc, #176]	; (19150 <demo_appdata_callback+0x2e4>)
   190a0:	4798      	blx	r3
            break;
   190a2:	e031      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NO_ACK:
                printf("\n\rNO_ACK \n\r");
   190a4:	4b3a      	ldr	r3, [pc, #232]	; (19190 <demo_appdata_callback+0x324>)
   190a6:	0018      	movs	r0, r3
   190a8:	4b29      	ldr	r3, [pc, #164]	; (19150 <demo_appdata_callback+0x2e4>)
   190aa:	4798      	blx	r3
            break;
   190ac:	e02c      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_NWK_JOIN_IN_PROGRESS:
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
   190ae:	4b39      	ldr	r3, [pc, #228]	; (19194 <demo_appdata_callback+0x328>)
   190b0:	0018      	movs	r0, r3
   190b2:	4b27      	ldr	r3, [pc, #156]	; (19150 <demo_appdata_callback+0x2e4>)
   190b4:	4798      	blx	r3
            break;
   190b6:	e027      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_RESOURCE_UNAVAILABLE:
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
   190b8:	4b37      	ldr	r3, [pc, #220]	; (19198 <demo_appdata_callback+0x32c>)
   190ba:	0018      	movs	r0, r3
   190bc:	4b24      	ldr	r3, [pc, #144]	; (19150 <demo_appdata_callback+0x2e4>)
   190be:	4798      	blx	r3
            break;
   190c0:	e022      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_REQUEST:
                printf("\n\rINVALID_REQUEST \n\r");
   190c2:	4b36      	ldr	r3, [pc, #216]	; (1919c <demo_appdata_callback+0x330>)
   190c4:	0018      	movs	r0, r3
   190c6:	4b22      	ldr	r3, [pc, #136]	; (19150 <demo_appdata_callback+0x2e4>)
   190c8:	4798      	blx	r3
            break;
   190ca:	e01d      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_FCNTR_ERROR:
                printf("\n\rFCNTR_ERROR \n\r");
   190cc:	4b34      	ldr	r3, [pc, #208]	; (191a0 <demo_appdata_callback+0x334>)
   190ce:	0018      	movs	r0, r3
   190d0:	4b1f      	ldr	r3, [pc, #124]	; (19150 <demo_appdata_callback+0x2e4>)
   190d2:	4798      	blx	r3
            break;
   190d4:	e018      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MIC_ERROR:
                printf("\n\rMIC_ERROR \n\r");
   190d6:	4b33      	ldr	r3, [pc, #204]	; (191a4 <demo_appdata_callback+0x338>)
   190d8:	0018      	movs	r0, r3
   190da:	4b1d      	ldr	r3, [pc, #116]	; (19150 <demo_appdata_callback+0x2e4>)
   190dc:	4798      	blx	r3
            break;
   190de:	e013      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_INVALID_MTYPE:
                printf("\n\rINVALID_MTYPE \n\r");
   190e0:	4b31      	ldr	r3, [pc, #196]	; (191a8 <demo_appdata_callback+0x33c>)
   190e2:	0018      	movs	r0, r3
   190e4:	4b1a      	ldr	r3, [pc, #104]	; (19150 <demo_appdata_callback+0x2e4>)
   190e6:	4798      	blx	r3
            break;
   190e8:	e00e      	b.n	19108 <demo_appdata_callback+0x29c>
            case LORAWAN_MCAST_HDR_INVALID:
                printf("\n\rMCAST_HDR_INVALID \n\r");
   190ea:	4b30      	ldr	r3, [pc, #192]	; (191ac <demo_appdata_callback+0x340>)
   190ec:	0018      	movs	r0, r3
   190ee:	4b18      	ldr	r3, [pc, #96]	; (19150 <demo_appdata_callback+0x2e4>)
   190f0:	4798      	blx	r3
            break;
   190f2:	e009      	b.n	19108 <demo_appdata_callback+0x29c>
			case LORAWAN_INVALID_PACKET:
				printf("\n\rINVALID_PACKET \n\r");
   190f4:	4b2e      	ldr	r3, [pc, #184]	; (191b0 <demo_appdata_callback+0x344>)
   190f6:	0018      	movs	r0, r3
   190f8:	4b15      	ldr	r3, [pc, #84]	; (19150 <demo_appdata_callback+0x2e4>)
   190fa:	4798      	blx	r3
			break;
   190fc:	e004      	b.n	19108 <demo_appdata_callback+0x29c>
            default:
                printf("\n\rUNKNOWN ERROR\n\r");
   190fe:	4b32      	ldr	r3, [pc, #200]	; (191c8 <demo_appdata_callback+0x35c>)
   19100:	0018      	movs	r0, r3
   19102:	4b13      	ldr	r3, [pc, #76]	; (19150 <demo_appdata_callback+0x2e4>)
   19104:	4798      	blx	r3
            break;
   19106:	46c0      	nop			; (mov r8, r8)

                    }
        //printf("\n\r*************************************************\n\r");
    }

    SwTimerStop(lTimerId);
   19108:	4b30      	ldr	r3, [pc, #192]	; (191cc <demo_appdata_callback+0x360>)
   1910a:	781b      	ldrb	r3, [r3, #0]
   1910c:	0018      	movs	r0, r3
   1910e:	4b30      	ldr	r3, [pc, #192]	; (191d0 <demo_appdata_callback+0x364>)
   19110:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
   19112:	4b30      	ldr	r3, [pc, #192]	; (191d4 <demo_appdata_callback+0x368>)
   19114:	0019      	movs	r1, r3
   19116:	2003      	movs	r0, #3
   19118:	4b2f      	ldr	r3, [pc, #188]	; (191d8 <demo_appdata_callback+0x36c>)
   1911a:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
   1911c:	230f      	movs	r3, #15
   1911e:	18fb      	adds	r3, r7, r3
   19120:	781b      	ldrb	r3, [r3, #0]
   19122:	2b08      	cmp	r3, #8
   19124:	d004      	beq.n	19130 <demo_appdata_callback+0x2c4>
    {
        //set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
   19126:	4b2b      	ldr	r3, [pc, #172]	; (191d4 <demo_appdata_callback+0x368>)
   19128:	0019      	movs	r1, r3
   1912a:	2002      	movs	r0, #2
   1912c:	4b2a      	ldr	r3, [pc, #168]	; (191d8 <demo_appdata_callback+0x36c>)
   1912e:	4798      	blx	r3
    }
	appTaskState = JOIN_SEND_STATE;
   19130:	4b2a      	ldr	r3, [pc, #168]	; (191dc <demo_appdata_callback+0x370>)
   19132:	2203      	movs	r2, #3
   19134:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
   19136:	2000      	movs	r0, #0
   19138:	4b29      	ldr	r3, [pc, #164]	; (191e0 <demo_appdata_callback+0x374>)
   1913a:	4798      	blx	r3
}
   1913c:	46c0      	nop			; (mov r8, r8)
   1913e:	46bd      	mov	sp, r7
   19140:	b004      	add	sp, #16
   19142:	bd80      	pop	{r7, pc}
   19144:	0002ca68 	.word	0x0002ca68
   19148:	00018d79 	.word	0x00018d79
   1914c:	0002c268 	.word	0x0002c268
   19150:	00024261 	.word	0x00024261
   19154:	0002c27c 	.word	0x0002c27c
   19158:	0002c294 	.word	0x0002c294
   1915c:	0002c2ac 	.word	0x0002c2ac
   19160:	0002c2bc 	.word	0x0002c2bc
   19164:	0002c2d4 	.word	0x0002c2d4
   19168:	0002c2f0 	.word	0x0002c2f0
   1916c:	0002c308 	.word	0x0002c308
   19170:	0002c31c 	.word	0x0002c31c
   19174:	0002c334 	.word	0x0002c334
   19178:	0002c350 	.word	0x0002c350
   1917c:	0002c370 	.word	0x0002c370
   19180:	0002c390 	.word	0x0002c390
   19184:	0002c3ac 	.word	0x0002c3ac
   19188:	0002c3c0 	.word	0x0002c3c0
   1918c:	0002c3d8 	.word	0x0002c3d8
   19190:	0002c3e4 	.word	0x0002c3e4
   19194:	0002c3f0 	.word	0x0002c3f0
   19198:	0002c414 	.word	0x0002c414
   1919c:	0002c430 	.word	0x0002c430
   191a0:	0002c448 	.word	0x0002c448
   191a4:	0002c45c 	.word	0x0002c45c
   191a8:	0002c46c 	.word	0x0002c46c
   191ac:	0002c480 	.word	0x0002c480
   191b0:	0002c498 	.word	0x0002c498
   191b4:	0002c4ac 	.word	0x0002c4ac
   191b8:	0002cae4 	.word	0x0002cae4
   191bc:	0002c4bc 	.word	0x0002c4bc
   191c0:	00024325 	.word	0x00024325
   191c4:	0002c4d4 	.word	0x0002c4d4
   191c8:	0002c4e4 	.word	0x0002c4e4
   191cc:	200001e6 	.word	0x200001e6
   191d0:	00015cfd 	.word	0x00015cfd
   191d4:	20001127 	.word	0x20001127
   191d8:	00015191 	.word	0x00015191
   191dc:	20001138 	.word	0x20001138
   191e0:	00019795 	.word	0x00019795

000191e4 <demo_joindata_callback>:

/*********************************************************************//*
\brief Callback function for the ending of Activation procedure
 ************************************************************************/
void demo_joindata_callback(StackRetStatus_t status)
{
   191e4:	b580      	push	{r7, lr}
   191e6:	b084      	sub	sp, #16
   191e8:	af00      	add	r7, sp, #0
   191ea:	0002      	movs	r2, r0
   191ec:	1dfb      	adds	r3, r7, #7
   191ee:	701a      	strb	r2, [r3, #0]
    /* This is called every time the join process is finished */
    set_LED_data(LED_GREEN,&off);
   191f0:	4b44      	ldr	r3, [pc, #272]	; (19304 <demo_joindata_callback+0x120>)
   191f2:	0019      	movs	r1, r3
   191f4:	2003      	movs	r0, #3
   191f6:	4b44      	ldr	r3, [pc, #272]	; (19308 <demo_joindata_callback+0x124>)
   191f8:	4798      	blx	r3
    if(LORAWAN_SUCCESS == status)
   191fa:	1dfb      	adds	r3, r7, #7
   191fc:	781b      	ldrb	r3, [r3, #0]
   191fe:	2b08      	cmp	r3, #8
   19200:	d134      	bne.n	1926c <demo_joindata_callback+0x88>
    {
        uint32_t devAddress;
        bool mcastEnabled;

        joined = true;
   19202:	4b42      	ldr	r3, [pc, #264]	; (1930c <demo_joindata_callback+0x128>)
   19204:	2201      	movs	r2, #1
   19206:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
   19208:	4b41      	ldr	r3, [pc, #260]	; (19310 <demo_joindata_callback+0x12c>)
   1920a:	0018      	movs	r0, r3
   1920c:	4b41      	ldr	r3, [pc, #260]	; (19314 <demo_joindata_callback+0x130>)
   1920e:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
   19210:	230c      	movs	r3, #12
   19212:	18fb      	adds	r3, r7, r3
   19214:	001a      	movs	r2, r3
   19216:	2100      	movs	r1, #0
   19218:	2002      	movs	r0, #2
   1921a:	4b3f      	ldr	r3, [pc, #252]	; (19318 <demo_joindata_callback+0x134>)
   1921c:	4798      	blx	r3
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
   1921e:	230b      	movs	r3, #11
   19220:	18fb      	adds	r3, r7, r3
   19222:	001a      	movs	r2, r3
   19224:	2100      	movs	r1, #0
   19226:	2029      	movs	r0, #41	; 0x29
   19228:	4b3b      	ldr	r3, [pc, #236]	; (19318 <demo_joindata_callback+0x134>)
   1922a:	4798      	blx	r3

        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
   1922c:	68fb      	ldr	r3, [r7, #12]
   1922e:	4a3b      	ldr	r2, [pc, #236]	; (1931c <demo_joindata_callback+0x138>)
   19230:	4293      	cmp	r3, r2
   19232:	d006      	beq.n	19242 <demo_joindata_callback+0x5e>
        {
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
   19234:	68fa      	ldr	r2, [r7, #12]
   19236:	4b3a      	ldr	r3, [pc, #232]	; (19320 <demo_joindata_callback+0x13c>)
   19238:	0011      	movs	r1, r2
   1923a:	0018      	movs	r0, r3
   1923c:	4b35      	ldr	r3, [pc, #212]	; (19314 <demo_joindata_callback+0x130>)
   1923e:	4798      	blx	r3
   19240:	e00c      	b.n	1925c <demo_joindata_callback+0x78>
        }
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
   19242:	68fb      	ldr	r3, [r7, #12]
   19244:	4a35      	ldr	r2, [pc, #212]	; (1931c <demo_joindata_callback+0x138>)
   19246:	4293      	cmp	r3, r2
   19248:	d108      	bne.n	1925c <demo_joindata_callback+0x78>
   1924a:	230b      	movs	r3, #11
   1924c:	18fb      	adds	r3, r7, r3
   1924e:	781b      	ldrb	r3, [r3, #0]
   19250:	2b00      	cmp	r3, #0
   19252:	d003      	beq.n	1925c <demo_joindata_callback+0x78>
        {
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
   19254:	4b33      	ldr	r3, [pc, #204]	; (19324 <demo_joindata_callback+0x140>)
   19256:	0018      	movs	r0, r3
   19258:	4b2e      	ldr	r3, [pc, #184]	; (19314 <demo_joindata_callback+0x130>)
   1925a:	4798      	blx	r3
        }
        print_application_config();
   1925c:	4b32      	ldr	r3, [pc, #200]	; (19328 <demo_joindata_callback+0x144>)
   1925e:	4798      	blx	r3
        //set_LED_data(LED_GREEN,&on);
		set_LED_data(LED_GREEN,&off);
   19260:	4b28      	ldr	r3, [pc, #160]	; (19304 <demo_joindata_callback+0x120>)
   19262:	0019      	movs	r1, r3
   19264:	2003      	movs	r0, #3
   19266:	4b28      	ldr	r3, [pc, #160]	; (19308 <demo_joindata_callback+0x124>)
   19268:	4798      	blx	r3
   1926a:	e03e      	b.n	192ea <demo_joindata_callback+0x106>
    }
	else if(LORAWAN_NO_CHANNELS_FOUND == status)
   1926c:	1dfb      	adds	r3, r7, #7
   1926e:	781b      	ldrb	r3, [r3, #0]
   19270:	2b10      	cmp	r3, #16
   19272:	d10c      	bne.n	1928e <demo_joindata_callback+0xaa>
	{
		joined = false;
   19274:	4b25      	ldr	r3, [pc, #148]	; (1930c <demo_joindata_callback+0x128>)
   19276:	2200      	movs	r2, #0
   19278:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
   1927a:	4b22      	ldr	r3, [pc, #136]	; (19304 <demo_joindata_callback+0x120>)
   1927c:	0019      	movs	r1, r3
   1927e:	2002      	movs	r0, #2
   19280:	4b21      	ldr	r3, [pc, #132]	; (19308 <demo_joindata_callback+0x124>)
   19282:	4798      	blx	r3
		printf("\n No Free Channel found");
   19284:	4b29      	ldr	r3, [pc, #164]	; (1932c <demo_joindata_callback+0x148>)
   19286:	0018      	movs	r0, r3
   19288:	4b22      	ldr	r3, [pc, #136]	; (19314 <demo_joindata_callback+0x130>)
   1928a:	4798      	blx	r3
   1928c:	e02d      	b.n	192ea <demo_joindata_callback+0x106>
	}
	else if (LORAWAN_MIC_ERROR == status)
   1928e:	1dfb      	adds	r3, r7, #7
   19290:	781b      	ldrb	r3, [r3, #0]
   19292:	2b18      	cmp	r3, #24
   19294:	d10c      	bne.n	192b0 <demo_joindata_callback+0xcc>
	{
		joined = false;
   19296:	4b1d      	ldr	r3, [pc, #116]	; (1930c <demo_joindata_callback+0x128>)
   19298:	2200      	movs	r2, #0
   1929a:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
   1929c:	4b19      	ldr	r3, [pc, #100]	; (19304 <demo_joindata_callback+0x120>)
   1929e:	0019      	movs	r1, r3
   192a0:	2002      	movs	r0, #2
   192a2:	4b19      	ldr	r3, [pc, #100]	; (19308 <demo_joindata_callback+0x124>)
   192a4:	4798      	blx	r3
		printf("\n MIC Error");
   192a6:	4b22      	ldr	r3, [pc, #136]	; (19330 <demo_joindata_callback+0x14c>)
   192a8:	0018      	movs	r0, r3
   192aa:	4b1a      	ldr	r3, [pc, #104]	; (19314 <demo_joindata_callback+0x130>)
   192ac:	4798      	blx	r3
   192ae:	e01c      	b.n	192ea <demo_joindata_callback+0x106>
	}
	else if (LORAWAN_TX_TIMEOUT == status)
   192b0:	1dfb      	adds	r3, r7, #7
   192b2:	781b      	ldrb	r3, [r3, #0]
   192b4:	2b1b      	cmp	r3, #27
   192b6:	d10c      	bne.n	192d2 <demo_joindata_callback+0xee>
	{
		joined = false;
   192b8:	4b14      	ldr	r3, [pc, #80]	; (1930c <demo_joindata_callback+0x128>)
   192ba:	2200      	movs	r2, #0
   192bc:	701a      	strb	r2, [r3, #0]
		//set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
   192be:	4b11      	ldr	r3, [pc, #68]	; (19304 <demo_joindata_callback+0x120>)
   192c0:	0019      	movs	r1, r3
   192c2:	2002      	movs	r0, #2
   192c4:	4b10      	ldr	r3, [pc, #64]	; (19308 <demo_joindata_callback+0x124>)
   192c6:	4798      	blx	r3
		printf("\n Transmission Timeout");
   192c8:	4b1a      	ldr	r3, [pc, #104]	; (19334 <demo_joindata_callback+0x150>)
   192ca:	0018      	movs	r0, r3
   192cc:	4b11      	ldr	r3, [pc, #68]	; (19314 <demo_joindata_callback+0x130>)
   192ce:	4798      	blx	r3
   192d0:	e00b      	b.n	192ea <demo_joindata_callback+0x106>
	}
    else
    {
        joined = false;
   192d2:	4b0e      	ldr	r3, [pc, #56]	; (1930c <demo_joindata_callback+0x128>)
   192d4:	2200      	movs	r2, #0
   192d6:	701a      	strb	r2, [r3, #0]
        //set_LED_data(LED_AMBER,&on);
		set_LED_data(LED_AMBER,&off);
   192d8:	4b0a      	ldr	r3, [pc, #40]	; (19304 <demo_joindata_callback+0x120>)
   192da:	0019      	movs	r1, r3
   192dc:	2002      	movs	r0, #2
   192de:	4b0a      	ldr	r3, [pc, #40]	; (19308 <demo_joindata_callback+0x124>)
   192e0:	4798      	blx	r3
        printf("\nJoining Denied\n\r");
   192e2:	4b15      	ldr	r3, [pc, #84]	; (19338 <demo_joindata_callback+0x154>)
   192e4:	0018      	movs	r0, r3
   192e6:	4b0b      	ldr	r3, [pc, #44]	; (19314 <demo_joindata_callback+0x130>)
   192e8:	4798      	blx	r3
    }
    //printf("\n\r*******************************************************\n\r");
    PDS_StoreAll();
   192ea:	4b14      	ldr	r3, [pc, #80]	; (1933c <demo_joindata_callback+0x158>)
   192ec:	4798      	blx	r3
	
	appTaskState = JOIN_SEND_STATE;
   192ee:	4b14      	ldr	r3, [pc, #80]	; (19340 <demo_joindata_callback+0x15c>)
   192f0:	2203      	movs	r2, #3
   192f2:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
   192f4:	2000      	movs	r0, #0
   192f6:	4b13      	ldr	r3, [pc, #76]	; (19344 <demo_joindata_callback+0x160>)
   192f8:	4798      	blx	r3
}
   192fa:	46c0      	nop			; (mov r8, r8)
   192fc:	46bd      	mov	sp, r7
   192fe:	b004      	add	sp, #16
   19300:	bd80      	pop	{r7, pc}
   19302:	46c0      	nop			; (mov r8, r8)
   19304:	20001127 	.word	0x20001127
   19308:	00015191 	.word	0x00015191
   1930c:	2000110b 	.word	0x2000110b
   19310:	0002c4f8 	.word	0x0002c4f8
   19314:	00024261 	.word	0x00024261
   19318:	0001bfa1 	.word	0x0001bfa1
   1931c:	0037cc56 	.word	0x0037cc56
   19320:	0002c510 	.word	0x0002c510
   19324:	0002c524 	.word	0x0002c524
   19328:	00019ded 	.word	0x00019ded
   1932c:	0002c56c 	.word	0x0002c56c
   19330:	0002c584 	.word	0x0002c584
   19334:	0002c590 	.word	0x0002c590
   19338:	0002c5a8 	.word	0x0002c5a8
   1933c:	00013f39 	.word	0x00013f39
   19340:	20001138 	.word	0x20001138
   19344:	00019795 	.word	0x00019795

00019348 <lTimerCb>:

void lTimerCb(void *data)
{
   19348:	b590      	push	{r4, r7, lr}
   1934a:	b085      	sub	sp, #20
   1934c:	af02      	add	r7, sp, #8
   1934e:	6078      	str	r0, [r7, #4]
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
   19350:	4b09      	ldr	r3, [pc, #36]	; (19378 <lTimerCb+0x30>)
   19352:	7818      	ldrb	r0, [r3, #0]
   19354:	4a09      	ldr	r2, [pc, #36]	; (1937c <lTimerCb+0x34>)
   19356:	490a      	ldr	r1, [pc, #40]	; (19380 <lTimerCb+0x38>)
   19358:	2300      	movs	r3, #0
   1935a:	9300      	str	r3, [sp, #0]
   1935c:	0013      	movs	r3, r2
   1935e:	2200      	movs	r2, #0
   19360:	4c08      	ldr	r4, [pc, #32]	; (19384 <lTimerCb+0x3c>)
   19362:	47a0      	blx	r4
    //set_LED_data(LED_GREEN,&toggle);
	set_LED_data(LED_GREEN,&off);
   19364:	4b08      	ldr	r3, [pc, #32]	; (19388 <lTimerCb+0x40>)
   19366:	0019      	movs	r1, r3
   19368:	2003      	movs	r0, #3
   1936a:	4b08      	ldr	r3, [pc, #32]	; (1938c <lTimerCb+0x44>)
   1936c:	4798      	blx	r3
}
   1936e:	46c0      	nop			; (mov r8, r8)
   19370:	46bd      	mov	sp, r7
   19372:	b003      	add	sp, #12
   19374:	bd90      	pop	{r4, r7, pc}
   19376:	46c0      	nop			; (mov r8, r8)
   19378:	200001e6 	.word	0x200001e6
   1937c:	00019349 	.word	0x00019349
   19380:	000186a0 	.word	0x000186a0
   19384:	000159bd 	.word	0x000159bd
   19388:	20001127 	.word	0x20001127
   1938c:	00015191 	.word	0x00015191

00019390 <sendData>:

/*********************************************************************//*
 \brief      Function to send data from end device to application server
  ************************************************************************/
void sendData(void)
{
   19390:	b5f0      	push	{r4, r5, r6, r7, lr}
   19392:	b08d      	sub	sp, #52	; 0x34
   19394:	af06      	add	r7, sp, #24
    int status = -1;
   19396:	2301      	movs	r3, #1
   19398:	425b      	negs	r3, r3
   1939a:	613b      	str	r3, [r7, #16]
    /* Read temperature sensor value */
	
	uint16_t adc_buffer[ADC_SAMPLES];
	unsigned char temp_upper_byte = 0;  //PA06
   1939c:	230f      	movs	r3, #15
   1939e:	18fb      	adds	r3, r7, r3
   193a0:	2200      	movs	r2, #0
   193a2:	701a      	strb	r2, [r3, #0]
	unsigned char temp_lower_byte = 0;  //PA06
   193a4:	230e      	movs	r3, #14
   193a6:	18fb      	adds	r3, r7, r3
   193a8:	2200      	movs	r2, #0
   193aa:	701a      	strb	r2, [r3, #0]
	unsigned char vBatt_upper_byte = 0;  //PA07
   193ac:	230d      	movs	r3, #13
   193ae:	18fb      	adds	r3, r7, r3
   193b0:	2200      	movs	r2, #0
   193b2:	701a      	strb	r2, [r3, #0]
	unsigned char vBatt_lower_byte = 0;  //PA07
   193b4:	230c      	movs	r3, #12
   193b6:	18fb      	adds	r3, r7, r3
   193b8:	2200      	movs	r2, #0
   193ba:	701a      	strb	r2, [r3, #0]
	unsigned char PA08_upper_byte = 0;  //PA08
   193bc:	230b      	movs	r3, #11
   193be:	18fb      	adds	r3, r7, r3
   193c0:	2200      	movs	r2, #0
   193c2:	701a      	strb	r2, [r3, #0]
	unsigned char PA08_lower_byte = 0;  //PA08
   193c4:	230a      	movs	r3, #10
   193c6:	18fb      	adds	r3, r7, r3
   193c8:	2200      	movs	r2, #0
   193ca:	701a      	strb	r2, [r3, #0]
	
	//Prepare the buffer arrays
	for (int n=0;n<ADC_SAMPLES;n++){
   193cc:	2300      	movs	r3, #0
   193ce:	617b      	str	r3, [r7, #20]
   193d0:	e007      	b.n	193e2 <sendData+0x52>
		adc_buffer[n] = 0;
   193d2:	1d3b      	adds	r3, r7, #4
   193d4:	697a      	ldr	r2, [r7, #20]
   193d6:	0052      	lsls	r2, r2, #1
   193d8:	2100      	movs	r1, #0
   193da:	52d1      	strh	r1, [r2, r3]
	for (int n=0;n<ADC_SAMPLES;n++){
   193dc:	697b      	ldr	r3, [r7, #20]
   193de:	3301      	adds	r3, #1
   193e0:	617b      	str	r3, [r7, #20]
   193e2:	697b      	ldr	r3, [r7, #20]
   193e4:	2b02      	cmp	r3, #2
   193e6:	ddf4      	ble.n	193d2 <sendData+0x42>
	
	//Get ADC voltages
		
	//Set Battery Voltage measurement sink
	//port_pin_set_output_level(PIN_PB03, false);  //v0,6 will be PB03
	port_pin_set_output_level(PIN_PA15, false);  
   193e8:	2100      	movs	r1, #0
   193ea:	200f      	movs	r0, #15
   193ec:	4b51      	ldr	r3, [pc, #324]	; (19534 <sendData+0x1a4>)
   193ee:	4798      	blx	r3
	//Set VSen on
	port_pin_set_output_level(PIN_PA27, true);  
   193f0:	2101      	movs	r1, #1
   193f2:	201b      	movs	r0, #27
   193f4:	4b4f      	ldr	r3, [pc, #316]	; (19534 <sendData+0x1a4>)
   193f6:	4798      	blx	r3
	
	//Does there need to be a delay here to allow VSEN to settle and sensors to turn on?
	
	//adc_start_conversion(&adc_instance); //Not needed as it happens in adc_read_buffer_job()
	adc_read_buffer_job(&adc_instance, adc_buffer, ADC_SAMPLES);
   193f8:	1d39      	adds	r1, r7, #4
   193fa:	4b4f      	ldr	r3, [pc, #316]	; (19538 <sendData+0x1a8>)
   193fc:	2203      	movs	r2, #3
   193fe:	0018      	movs	r0, r3
   19400:	4b4e      	ldr	r3, [pc, #312]	; (1953c <sendData+0x1ac>)
   19402:	4798      	blx	r3
	//Make sure the job is finished.
	while(adc_get_job_status(&adc_instance, ADC_JOB_READ_BUFFER ) == STATUS_BUSY){
   19404:	46c0      	nop			; (mov r8, r8)
   19406:	4b4c      	ldr	r3, [pc, #304]	; (19538 <sendData+0x1a8>)
   19408:	2100      	movs	r1, #0
   1940a:	0018      	movs	r0, r3
   1940c:	4b4c      	ldr	r3, [pc, #304]	; (19540 <sendData+0x1b0>)
   1940e:	4798      	blx	r3
   19410:	0003      	movs	r3, r0
   19412:	2b05      	cmp	r3, #5
   19414:	d0f7      	beq.n	19406 <sendData+0x76>
	}
	
	//Remove Battery Voltage measurement sink
	//port_pin_set_output_level(PIN_PB03, true);//v0,5 will be PB03
	port_pin_set_output_level(PIN_PA15, true); 
   19416:	2101      	movs	r1, #1
   19418:	200f      	movs	r0, #15
   1941a:	4b46      	ldr	r3, [pc, #280]	; (19534 <sendData+0x1a4>)
   1941c:	4798      	blx	r3
	//Set VSen off
	port_pin_set_output_level(PIN_PA27, false);  
   1941e:	2100      	movs	r1, #0
   19420:	201b      	movs	r0, #27
   19422:	4b44      	ldr	r3, [pc, #272]	; (19534 <sendData+0x1a4>)
   19424:	4798      	blx	r3
	//Setup data for LoRaWAN transmission
	//Conversion from 16bit ADC to float done in payload decoder, or Node-Red.		
	temp_lower_byte = adc_buffer[0] & 0xFF;
   19426:	1d3b      	adds	r3, r7, #4
   19428:	881a      	ldrh	r2, [r3, #0]
   1942a:	230e      	movs	r3, #14
   1942c:	18fb      	adds	r3, r7, r3
   1942e:	701a      	strb	r2, [r3, #0]
	temp_upper_byte = (adc_buffer[0] & 0xFF00)>>8;
   19430:	1d3b      	adds	r3, r7, #4
   19432:	881b      	ldrh	r3, [r3, #0]
   19434:	0a1b      	lsrs	r3, r3, #8
   19436:	b29a      	uxth	r2, r3
   19438:	230f      	movs	r3, #15
   1943a:	18fb      	adds	r3, r7, r3
   1943c:	701a      	strb	r2, [r3, #0]
		
	vBatt_lower_byte = adc_buffer[1] & 0xFF;
   1943e:	1d3b      	adds	r3, r7, #4
   19440:	885a      	ldrh	r2, [r3, #2]
   19442:	230c      	movs	r3, #12
   19444:	18fb      	adds	r3, r7, r3
   19446:	701a      	strb	r2, [r3, #0]
	vBatt_upper_byte = (adc_buffer[1] & 0xFF00)>>8;
   19448:	1d3b      	adds	r3, r7, #4
   1944a:	885b      	ldrh	r3, [r3, #2]
   1944c:	0a1b      	lsrs	r3, r3, #8
   1944e:	b29a      	uxth	r2, r3
   19450:	230d      	movs	r3, #13
   19452:	18fb      	adds	r3, r7, r3
   19454:	701a      	strb	r2, [r3, #0]

	//v0.5 moves vbatt reading to PA08, leaving PA07 free.	
	PA08_lower_byte = adc_buffer[2] & 0xFF;
   19456:	1d3b      	adds	r3, r7, #4
   19458:	889a      	ldrh	r2, [r3, #4]
   1945a:	230a      	movs	r3, #10
   1945c:	18fb      	adds	r3, r7, r3
   1945e:	701a      	strb	r2, [r3, #0]
	PA08_upper_byte = (adc_buffer[2] & 0xFF00)>>8;
   19460:	1d3b      	adds	r3, r7, #4
   19462:	889b      	ldrh	r3, [r3, #4]
   19464:	0a1b      	lsrs	r3, r3, #8
   19466:	b29a      	uxth	r2, r3
   19468:	230b      	movs	r3, #11
   1946a:	18fb      	adds	r3, r7, r3
   1946c:	701a      	strb	r2, [r3, #0]
	//Ideal message
	snprintf(temp_sen_str,sizeof(temp_sen_str),"%c%c%c%c%c%c\n", temp_lower_byte, temp_upper_byte, vBatt_lower_byte, vBatt_upper_byte, PA08_lower_byte, PA08_upper_byte);
   1946e:	230e      	movs	r3, #14
   19470:	18fb      	adds	r3, r7, r3
   19472:	781b      	ldrb	r3, [r3, #0]
   19474:	469c      	mov	ip, r3
   19476:	230f      	movs	r3, #15
   19478:	18fb      	adds	r3, r7, r3
   1947a:	781b      	ldrb	r3, [r3, #0]
   1947c:	220c      	movs	r2, #12
   1947e:	18ba      	adds	r2, r7, r2
   19480:	7812      	ldrb	r2, [r2, #0]
   19482:	210d      	movs	r1, #13
   19484:	1879      	adds	r1, r7, r1
   19486:	7809      	ldrb	r1, [r1, #0]
   19488:	200a      	movs	r0, #10
   1948a:	1838      	adds	r0, r7, r0
   1948c:	7800      	ldrb	r0, [r0, #0]
   1948e:	240b      	movs	r4, #11
   19490:	193c      	adds	r4, r7, r4
   19492:	7824      	ldrb	r4, [r4, #0]
   19494:	4e2b      	ldr	r6, [pc, #172]	; (19544 <sendData+0x1b4>)
   19496:	4d2c      	ldr	r5, [pc, #176]	; (19548 <sendData+0x1b8>)
   19498:	9404      	str	r4, [sp, #16]
   1949a:	9003      	str	r0, [sp, #12]
   1949c:	9102      	str	r1, [sp, #8]
   1949e:	9201      	str	r2, [sp, #4]
   194a0:	9300      	str	r3, [sp, #0]
   194a2:	4663      	mov	r3, ip
   194a4:	0032      	movs	r2, r6
   194a6:	2119      	movs	r1, #25
   194a8:	0028      	movs	r0, r5
   194aa:	4c28      	ldr	r4, [pc, #160]	; (1954c <sendData+0x1bc>)
   194ac:	47a0      	blx	r4
	//temp_lower_byte = temperature & 0xFF;
	//temp_upper_byte = (temperature & 0xFF00)>>8;
	////snprintf(temp_sen_str,sizeof(temp_sen_str),"%c%c\n", temp_lower_byte,temp_upper_byte);
	//snprintf(temp_sen_str,sizeof(temp_sen_str),"%c%c%c%c\n", temp_lower_byte,temp_upper_byte, vBatt_lower_byte, vBatt_upper_byte);

    data_len = strlen(temp_sen_str);
   194ae:	4b26      	ldr	r3, [pc, #152]	; (19548 <sendData+0x1b8>)
   194b0:	0018      	movs	r0, r3
   194b2:	4b27      	ldr	r3, [pc, #156]	; (19550 <sendData+0x1c0>)
   194b4:	4798      	blx	r3
   194b6:	0003      	movs	r3, r0
   194b8:	b2da      	uxtb	r2, r3
   194ba:	4b26      	ldr	r3, [pc, #152]	; (19554 <sendData+0x1c4>)
   194bc:	701a      	strb	r2, [r3, #0]
    lorawanSendReq.buffer = &temp_sen_str;
   194be:	4b26      	ldr	r3, [pc, #152]	; (19558 <sendData+0x1c8>)
   194c0:	4a21      	ldr	r2, [pc, #132]	; (19548 <sendData+0x1b8>)
   194c2:	605a      	str	r2, [r3, #4]
    lorawanSendReq.bufferLength = data_len - 1;
   194c4:	4b23      	ldr	r3, [pc, #140]	; (19554 <sendData+0x1c4>)
   194c6:	781b      	ldrb	r3, [r3, #0]
   194c8:	3b01      	subs	r3, #1
   194ca:	b2da      	uxtb	r2, r3
   194cc:	4b22      	ldr	r3, [pc, #136]	; (19558 <sendData+0x1c8>)
   194ce:	721a      	strb	r2, [r3, #8]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE;
   194d0:	4b21      	ldr	r3, [pc, #132]	; (19558 <sendData+0x1c8>)
   194d2:	2200      	movs	r2, #0
   194d4:	701a      	strb	r2, [r3, #0]
    lorawanSendReq.port = DEMO_APP_FPORT;
   194d6:	4b20      	ldr	r3, [pc, #128]	; (19558 <sendData+0x1c8>)
   194d8:	2201      	movs	r2, #1
   194da:	705a      	strb	r2, [r3, #1]
    status = LORAWAN_Send(&lorawanSendReq);
   194dc:	4b1e      	ldr	r3, [pc, #120]	; (19558 <sendData+0x1c8>)
   194de:	0018      	movs	r0, r3
   194e0:	4b1e      	ldr	r3, [pc, #120]	; (1955c <sendData+0x1cc>)
   194e2:	4798      	blx	r3
   194e4:	0003      	movs	r3, r0
   194e6:	613b      	str	r3, [r7, #16]
    if (LORAWAN_SUCCESS == status)
   194e8:	693b      	ldr	r3, [r7, #16]
   194ea:	2b08      	cmp	r3, #8
   194ec:	d113      	bne.n	19516 <sendData+0x186>
    {
        printf("\nTx Data Sent \r\n");
   194ee:	4b1c      	ldr	r3, [pc, #112]	; (19560 <sendData+0x1d0>)
   194f0:	0018      	movs	r0, r3
   194f2:	4b1c      	ldr	r3, [pc, #112]	; (19564 <sendData+0x1d4>)
   194f4:	4798      	blx	r3
        //set_LED_data(LED_GREEN,&on);
		set_LED_data(LED_GREEN,&off);
   194f6:	4b1c      	ldr	r3, [pc, #112]	; (19568 <sendData+0x1d8>)
   194f8:	0019      	movs	r1, r3
   194fa:	2003      	movs	r0, #3
   194fc:	4b1b      	ldr	r3, [pc, #108]	; (1956c <sendData+0x1dc>)
   194fe:	4798      	blx	r3
        SwTimerStart(lTimerId,MS_TO_US(MESSAGE_DELAY),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
   19500:	4b1b      	ldr	r3, [pc, #108]	; (19570 <sendData+0x1e0>)
   19502:	7818      	ldrb	r0, [r3, #0]
   19504:	4a1b      	ldr	r2, [pc, #108]	; (19574 <sendData+0x1e4>)
   19506:	491c      	ldr	r1, [pc, #112]	; (19578 <sendData+0x1e8>)
   19508:	2300      	movs	r3, #0
   1950a:	9300      	str	r3, [sp, #0]
   1950c:	0013      	movs	r3, r2
   1950e:	2200      	movs	r2, #0
   19510:	4c1a      	ldr	r4, [pc, #104]	; (1957c <sendData+0x1ec>)
   19512:	47a0      	blx	r4
    {
        print_stack_status(status);
		appTaskState = JOIN_SEND_STATE;
		appPostTask(DISPLAY_TASK_HANDLER);
    }
}
   19514:	e00a      	b.n	1952c <sendData+0x19c>
        print_stack_status(status);
   19516:	693b      	ldr	r3, [r7, #16]
   19518:	b2db      	uxtb	r3, r3
   1951a:	0018      	movs	r0, r3
   1951c:	4b18      	ldr	r3, [pc, #96]	; (19580 <sendData+0x1f0>)
   1951e:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
   19520:	4b18      	ldr	r3, [pc, #96]	; (19584 <sendData+0x1f4>)
   19522:	2203      	movs	r2, #3
   19524:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   19526:	2000      	movs	r0, #0
   19528:	4b17      	ldr	r3, [pc, #92]	; (19588 <sendData+0x1f8>)
   1952a:	4798      	blx	r3
}
   1952c:	46c0      	nop			; (mov r8, r8)
   1952e:	46bd      	mov	sp, r7
   19530:	b007      	add	sp, #28
   19532:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19534:	000183b9 	.word	0x000183b9
   19538:	200017b4 	.word	0x200017b4
   1953c:	00000ef9 	.word	0x00000ef9
   19540:	00000f61 	.word	0x00000f61
   19544:	0002c5bc 	.word	0x0002c5bc
   19548:	2000110c 	.word	0x2000110c
   1954c:	00024535 	.word	0x00024535
   19550:	000245b9 	.word	0x000245b9
   19554:	20001125 	.word	0x20001125
   19558:	2000113c 	.word	0x2000113c
   1955c:	0001ae69 	.word	0x0001ae69
   19560:	0002c5cc 	.word	0x0002c5cc
   19564:	00024325 	.word	0x00024325
   19568:	20001127 	.word	0x20001127
   1956c:	00015191 	.word	0x00015191
   19570:	200001e6 	.word	0x200001e6
   19574:	00019349 	.word	0x00019349
   19578:	00989680 	.word	0x00989680
   1957c:	000159bd 	.word	0x000159bd
   19580:	00019e9d 	.word	0x00019e9d
   19584:	20001138 	.word	0x20001138
   19588:	00019795 	.word	0x00019795

0001958c <appWakeup>:

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
   1958c:	b580      	push	{r7, lr}
   1958e:	b082      	sub	sp, #8
   19590:	af00      	add	r7, sp, #0
   19592:	6078      	str	r0, [r7, #4]
    HAL_Radio_resources_init();
   19594:	4b09      	ldr	r3, [pc, #36]	; (195bc <appWakeup+0x30>)
   19596:	4798      	blx	r3
    sio2host_init();
   19598:	4b09      	ldr	r3, [pc, #36]	; (195c0 <appWakeup+0x34>)
   1959a:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
   1959c:	4b09      	ldr	r3, [pc, #36]	; (195c4 <appWakeup+0x38>)
   1959e:	2203      	movs	r2, #3
   195a0:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
   195a2:	2000      	movs	r0, #0
   195a4:	4b08      	ldr	r3, [pc, #32]	; (195c8 <appWakeup+0x3c>)
   195a6:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
   195a8:	687a      	ldr	r2, [r7, #4]
   195aa:	4b08      	ldr	r3, [pc, #32]	; (195cc <appWakeup+0x40>)
   195ac:	0011      	movs	r1, r2
   195ae:	0018      	movs	r0, r3
   195b0:	4b07      	ldr	r3, [pc, #28]	; (195d0 <appWakeup+0x44>)
   195b2:	4798      	blx	r3
}
   195b4:	46c0      	nop			; (mov r8, r8)
   195b6:	46bd      	mov	sp, r7
   195b8:	b002      	add	sp, #8
   195ba:	bd80      	pop	{r7, pc}
   195bc:	00006da1 	.word	0x00006da1
   195c0:	000066e9 	.word	0x000066e9
   195c4:	20001138 	.word	0x20001138
   195c8:	00019795 	.word	0x00019795
   195cc:	0002c5dc 	.word	0x0002c5dc
   195d0:	00024261 	.word	0x00024261

000195d4 <app_resources_uninit>:
#endif

#ifdef CONF_PMM_ENABLE
static void app_resources_uninit(void)
{
   195d4:	b580      	push	{r7, lr}
   195d6:	b082      	sub	sp, #8
   195d8:	af00      	add	r7, sp, #0
    /* Disable USART TX and RX Pins */
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
   195da:	1d3b      	adds	r3, r7, #4
   195dc:	0018      	movs	r0, r3
   195de:	4b0b      	ldr	r3, [pc, #44]	; (1960c <app_resources_uninit+0x38>)
   195e0:	4798      	blx	r3
    pin_conf.powersave  = true;
   195e2:	1d3b      	adds	r3, r7, #4
   195e4:	2201      	movs	r2, #1
   195e6:	709a      	strb	r2, [r3, #2]
#ifdef HOST_SERCOM_PAD0_PIN
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
   195e8:	1d3b      	adds	r3, r7, #4
   195ea:	0019      	movs	r1, r3
   195ec:	2004      	movs	r0, #4
   195ee:	4b08      	ldr	r3, [pc, #32]	; (19610 <app_resources_uninit+0x3c>)
   195f0:	4798      	blx	r3
#endif
#ifdef HOST_SERCOM_PAD1_PIN
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
   195f2:	1d3b      	adds	r3, r7, #4
   195f4:	0019      	movs	r1, r3
   195f6:	2005      	movs	r0, #5
   195f8:	4b05      	ldr	r3, [pc, #20]	; (19610 <app_resources_uninit+0x3c>)
   195fa:	4798      	blx	r3
#endif
    /* Disable UART module */
    sio2host_deinit();
   195fc:	4b05      	ldr	r3, [pc, #20]	; (19614 <app_resources_uninit+0x40>)
   195fe:	4798      	blx	r3
    /* Disable Transceiver SPI Module */
    HAL_RadioDeInit();
   19600:	4b05      	ldr	r3, [pc, #20]	; (19618 <app_resources_uninit+0x44>)
   19602:	4798      	blx	r3
}
   19604:	46c0      	nop			; (mov r8, r8)
   19606:	46bd      	mov	sp, r7
   19608:	b002      	add	sp, #8
   1960a:	bd80      	pop	{r7, pc}
   1960c:	00018395 	.word	0x00018395
   19610:	000020f5 	.word	0x000020f5
   19614:	00006795 	.word	0x00006795
   19618:	00006dcd 	.word	0x00006dcd

0001961c <runCertApp>:
#if (CERT_APP == 1)
/*********************************************************************//*
 \brief      Function to runs certification application.
 ************************************************************************/
static void  runCertApp(void)
{
   1961c:	b580      	push	{r7, lr}
   1961e:	af00      	add	r7, sp, #0
    certAppEnabled = true;
   19620:	4b03      	ldr	r3, [pc, #12]	; (19630 <runCertApp+0x14>)
   19622:	2201      	movs	r2, #1
   19624:	701a      	strb	r2, [r3, #0]
    cert_app_init();
   19626:	4b03      	ldr	r3, [pc, #12]	; (19634 <runCertApp+0x18>)
   19628:	4798      	blx	r3
}
   1962a:	46c0      	nop			; (mov r8, r8)
   1962c:	46bd      	mov	sp, r7
   1962e:	bd80      	pop	{r7, pc}
   19630:	20001126 	.word	0x20001126
   19634:	00017125 	.word	0x00017125

00019638 <demoTimerCb>:
 \brief      Timer callback for demo application.
             Used during the initial 5 sec wait period.
 \param[in]  cnt - not used
 ************************************************************************/
void demoTimerCb(void * cnt)
{
   19638:	b590      	push	{r4, r7, lr}
   1963a:	b087      	sub	sp, #28
   1963c:	af02      	add	r7, sp, #8
   1963e:	6078      	str	r0, [r7, #4]
    uint8_t i = 10;
   19640:	230f      	movs	r3, #15
   19642:	18fb      	adds	r3, r7, r3
   19644:	220a      	movs	r2, #10
   19646:	701a      	strb	r2, [r3, #0]
    int8_t rxdata = 0;
   19648:	230e      	movs	r3, #14
   1964a:	18fb      	adds	r3, r7, r3
   1964c:	2200      	movs	r2, #0
   1964e:	701a      	strb	r2, [r3, #0]
    printf("%d..",count);
   19650:	4b42      	ldr	r3, [pc, #264]	; (1975c <demoTimerCb+0x124>)
   19652:	781b      	ldrb	r3, [r3, #0]
   19654:	b2db      	uxtb	r3, r3
   19656:	001a      	movs	r2, r3
   19658:	4b41      	ldr	r3, [pc, #260]	; (19760 <demoTimerCb+0x128>)
   1965a:	0011      	movs	r1, r2
   1965c:	0018      	movs	r0, r3
   1965e:	4b41      	ldr	r3, [pc, #260]	; (19764 <demoTimerCb+0x12c>)
   19660:	4798      	blx	r3
    count--;
   19662:	4b3e      	ldr	r3, [pc, #248]	; (1975c <demoTimerCb+0x124>)
   19664:	781b      	ldrb	r3, [r3, #0]
   19666:	b2db      	uxtb	r3, r3
   19668:	3b01      	subs	r3, #1
   1966a:	b2da      	uxtb	r2, r3
   1966c:	4b3b      	ldr	r3, [pc, #236]	; (1975c <demoTimerCb+0x124>)
   1966e:	701a      	strb	r2, [r3, #0]
	startReceiving = false;
   19670:	4b3d      	ldr	r3, [pc, #244]	; (19768 <demoTimerCb+0x130>)
   19672:	2200      	movs	r2, #0
   19674:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
   19676:	4b3d      	ldr	r3, [pc, #244]	; (1976c <demoTimerCb+0x134>)
   19678:	210a      	movs	r1, #10
   1967a:	0018      	movs	r0, r3
   1967c:	4b3c      	ldr	r3, [pc, #240]	; (19770 <demoTimerCb+0x138>)
   1967e:	4798      	blx	r3
    for(i = 0;i<=10;i++)
   19680:	230f      	movs	r3, #15
   19682:	18fb      	adds	r3, r7, r3
   19684:	2200      	movs	r2, #0
   19686:	701a      	strb	r2, [r3, #0]
   19688:	e01d      	b.n	196c6 <demoTimerCb+0x8e>
    {
        if(rxchar[i] != 13 && rxchar[i] != 10)
   1968a:	230f      	movs	r3, #15
   1968c:	18fb      	adds	r3, r7, r3
   1968e:	781b      	ldrb	r3, [r3, #0]
   19690:	4a36      	ldr	r2, [pc, #216]	; (1976c <demoTimerCb+0x134>)
   19692:	5cd3      	ldrb	r3, [r2, r3]
   19694:	2b0d      	cmp	r3, #13
   19696:	d00f      	beq.n	196b8 <demoTimerCb+0x80>
   19698:	230f      	movs	r3, #15
   1969a:	18fb      	adds	r3, r7, r3
   1969c:	781b      	ldrb	r3, [r3, #0]
   1969e:	4a33      	ldr	r2, [pc, #204]	; (1976c <demoTimerCb+0x134>)
   196a0:	5cd3      	ldrb	r3, [r2, r3]
   196a2:	2b0a      	cmp	r3, #10
   196a4:	d008      	beq.n	196b8 <demoTimerCb+0x80>
        {
            rxdata = rxchar[i];
   196a6:	230f      	movs	r3, #15
   196a8:	18fb      	adds	r3, r7, r3
   196aa:	781b      	ldrb	r3, [r3, #0]
   196ac:	4a2f      	ldr	r2, [pc, #188]	; (1976c <demoTimerCb+0x134>)
   196ae:	5cd2      	ldrb	r2, [r2, r3]
   196b0:	230e      	movs	r3, #14
   196b2:	18fb      	adds	r3, r7, r3
   196b4:	701a      	strb	r2, [r3, #0]
            break;
   196b6:	e00b      	b.n	196d0 <demoTimerCb+0x98>
    for(i = 0;i<=10;i++)
   196b8:	230f      	movs	r3, #15
   196ba:	18fb      	adds	r3, r7, r3
   196bc:	781a      	ldrb	r2, [r3, #0]
   196be:	230f      	movs	r3, #15
   196c0:	18fb      	adds	r3, r7, r3
   196c2:	3201      	adds	r2, #1
   196c4:	701a      	strb	r2, [r3, #0]
   196c6:	230f      	movs	r3, #15
   196c8:	18fb      	adds	r3, r7, r3
   196ca:	781b      	ldrb	r3, [r3, #0]
   196cc:	2b0a      	cmp	r3, #10
   196ce:	d9dc      	bls.n	1968a <demoTimerCb+0x52>
        }
    }
    if(!count)
   196d0:	4b22      	ldr	r3, [pc, #136]	; (1975c <demoTimerCb+0x124>)
   196d2:	781b      	ldrb	r3, [r3, #0]
   196d4:	b2db      	uxtb	r3, r3
   196d6:	2b00      	cmp	r3, #0
   196d8:	d103      	bne.n	196e2 <demoTimerCb+0xaa>
    {
        printf("\r\n");
   196da:	4b26      	ldr	r3, [pc, #152]	; (19774 <demoTimerCb+0x13c>)
   196dc:	0018      	movs	r0, r3
   196de:	4b26      	ldr	r3, [pc, #152]	; (19778 <demoTimerCb+0x140>)
   196e0:	4798      	blx	r3
    }
    /* No input so far. start timer till expiry */
    if(count > 0 && (!rxdata))
   196e2:	4b1e      	ldr	r3, [pc, #120]	; (1975c <demoTimerCb+0x124>)
   196e4:	781b      	ldrb	r3, [r3, #0]
   196e6:	b2db      	uxtb	r3, r3
   196e8:	2b00      	cmp	r3, #0
   196ea:	d010      	beq.n	1970e <demoTimerCb+0xd6>
   196ec:	230e      	movs	r3, #14
   196ee:	18fb      	adds	r3, r7, r3
   196f0:	781b      	ldrb	r3, [r3, #0]
   196f2:	b25b      	sxtb	r3, r3
   196f4:	2b00      	cmp	r3, #0
   196f6:	d10a      	bne.n	1970e <demoTimerCb+0xd6>
    {
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
   196f8:	4b20      	ldr	r3, [pc, #128]	; (1977c <demoTimerCb+0x144>)
   196fa:	7818      	ldrb	r0, [r3, #0]
   196fc:	4a20      	ldr	r2, [pc, #128]	; (19780 <demoTimerCb+0x148>)
   196fe:	4921      	ldr	r1, [pc, #132]	; (19784 <demoTimerCb+0x14c>)
   19700:	2300      	movs	r3, #0
   19702:	9300      	str	r3, [sp, #0]
   19704:	0013      	movs	r3, r2
   19706:	2200      	movs	r2, #0
   19708:	4c1f      	ldr	r4, [pc, #124]	; (19788 <demoTimerCb+0x150>)
   1970a:	47a0      	blx	r4
   1970c:	e022      	b.n	19754 <demoTimerCb+0x11c>
    }
    /* user did not press any input */
    else if(count == 0 && (!rxdata))
   1970e:	4b13      	ldr	r3, [pc, #76]	; (1975c <demoTimerCb+0x124>)
   19710:	781b      	ldrb	r3, [r3, #0]
   19712:	b2db      	uxtb	r3, r3
   19714:	2b00      	cmp	r3, #0
   19716:	d10c      	bne.n	19732 <demoTimerCb+0xfa>
   19718:	230e      	movs	r3, #14
   1971a:	18fb      	adds	r3, r7, r3
   1971c:	781b      	ldrb	r3, [r3, #0]
   1971e:	b25b      	sxtb	r3, r3
   19720:	2b00      	cmp	r3, #0
   19722:	d106      	bne.n	19732 <demoTimerCb+0xfa>
    {
		appTaskState = RESTORE_BAND_STATE;
   19724:	4b19      	ldr	r3, [pc, #100]	; (1978c <demoTimerCb+0x154>)
   19726:	2200      	movs	r2, #0
   19728:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
   1972a:	2000      	movs	r0, #0
   1972c:	4b18      	ldr	r3, [pc, #96]	; (19790 <demoTimerCb+0x158>)
   1972e:	4798      	blx	r3
   19730:	e010      	b.n	19754 <demoTimerCb+0x11c>
    }
    /* User pressed a key */
    else if(rxdata)
   19732:	230e      	movs	r3, #14
   19734:	18fb      	adds	r3, r7, r3
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	b25b      	sxtb	r3, r3
   1973a:	2b00      	cmp	r3, #0
   1973c:	d00a      	beq.n	19754 <demoTimerCb+0x11c>
    {
        printf("\r\n");
   1973e:	4b0d      	ldr	r3, [pc, #52]	; (19774 <demoTimerCb+0x13c>)
   19740:	0018      	movs	r0, r3
   19742:	4b0d      	ldr	r3, [pc, #52]	; (19778 <demoTimerCb+0x140>)
   19744:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
   19746:	4b11      	ldr	r3, [pc, #68]	; (1978c <demoTimerCb+0x154>)
   19748:	2201      	movs	r2, #1
   1974a:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
   1974c:	2000      	movs	r0, #0
   1974e:	4b10      	ldr	r3, [pc, #64]	; (19790 <demoTimerCb+0x158>)
   19750:	4798      	blx	r3
    }

}
   19752:	e7ff      	b.n	19754 <demoTimerCb+0x11c>
   19754:	46c0      	nop			; (mov r8, r8)
   19756:	46bd      	mov	sp, r7
   19758:	b005      	add	sp, #20
   1975a:	bd90      	pop	{r4, r7, pc}
   1975c:	20000134 	.word	0x20000134
   19760:	0002c5f0 	.word	0x0002c5f0
   19764:	00024261 	.word	0x00024261
   19768:	20001137 	.word	0x20001137
   1976c:	2000112c 	.word	0x2000112c
   19770:	000067c9 	.word	0x000067c9
   19774:	0002beac 	.word	0x0002beac
   19778:	00024325 	.word	0x00024325
   1977c:	200001e5 	.word	0x200001e5
   19780:	00019639 	.word	0x00019639
   19784:	000f4240 	.word	0x000f4240
   19788:	000159bd 	.word	0x000159bd
   1978c:	20001138 	.word	0x20001138
   19790:	00019795 	.word	0x00019795

00019794 <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
   19794:	b580      	push	{r7, lr}
   19796:	b082      	sub	sp, #8
   19798:	af00      	add	r7, sp, #0
   1979a:	0002      	movs	r2, r0
   1979c:	1dfb      	adds	r3, r7, #7
   1979e:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_ENTER
   197a0:	4b0c      	ldr	r3, [pc, #48]	; (197d4 <appPostTask+0x40>)
   197a2:	4798      	blx	r3
    appTaskFlags |= (1 << id);
   197a4:	1dfb      	adds	r3, r7, #7
   197a6:	781b      	ldrb	r3, [r3, #0]
   197a8:	2201      	movs	r2, #1
   197aa:	409a      	lsls	r2, r3
   197ac:	0013      	movs	r3, r2
   197ae:	b25a      	sxtb	r2, r3
   197b0:	4b09      	ldr	r3, [pc, #36]	; (197d8 <appPostTask+0x44>)
   197b2:	781b      	ldrb	r3, [r3, #0]
   197b4:	b2db      	uxtb	r3, r3
   197b6:	b25b      	sxtb	r3, r3
   197b8:	4313      	orrs	r3, r2
   197ba:	b25b      	sxtb	r3, r3
   197bc:	b2da      	uxtb	r2, r3
   197be:	4b06      	ldr	r3, [pc, #24]	; (197d8 <appPostTask+0x44>)
   197c0:	701a      	strb	r2, [r3, #0]
    ATOMIC_SECTION_EXIT
   197c2:	4b06      	ldr	r3, [pc, #24]	; (197dc <appPostTask+0x48>)
   197c4:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
   197c6:	2010      	movs	r0, #16
   197c8:	4b05      	ldr	r3, [pc, #20]	; (197e0 <appPostTask+0x4c>)
   197ca:	4798      	blx	r3
}
   197cc:	46c0      	nop			; (mov r8, r8)
   197ce:	46bd      	mov	sp, r7
   197d0:	b002      	add	sp, #8
   197d2:	bd80      	pop	{r7, pc}
   197d4:	000076e1 	.word	0x000076e1
   197d8:	20001128 	.word	0x20001128
   197dc:	000076f5 	.word	0x000076f5
   197e0:	000162bd 	.word	0x000162bd

000197e4 <APP_TaskHandler>:
/*********************************************************************//*
 \brief      Application Task Handler
 ************************************************************************/

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
   197e4:	b580      	push	{r7, lr}
   197e6:	b082      	sub	sp, #8
   197e8:	af00      	add	r7, sp, #0

    if (appTaskFlags)
   197ea:	4b24      	ldr	r3, [pc, #144]	; (1987c <APP_TaskHandler+0x98>)
   197ec:	781b      	ldrb	r3, [r3, #0]
   197ee:	b2db      	uxtb	r3, r3
   197f0:	2b00      	cmp	r3, #0
   197f2:	d03d      	beq.n	19870 <APP_TaskHandler+0x8c>
    {
        for (uint16_t taskId = 0; taskId < APP_TASKS_COUNT; taskId++)
   197f4:	1dbb      	adds	r3, r7, #6
   197f6:	2200      	movs	r2, #0
   197f8:	801a      	strh	r2, [r3, #0]
   197fa:	e033      	b.n	19864 <APP_TaskHandler+0x80>
        {
            if ((1 << taskId) & (appTaskFlags))
   197fc:	4b1f      	ldr	r3, [pc, #124]	; (1987c <APP_TaskHandler+0x98>)
   197fe:	781b      	ldrb	r3, [r3, #0]
   19800:	b2db      	uxtb	r3, r3
   19802:	001a      	movs	r2, r3
   19804:	1dbb      	adds	r3, r7, #6
   19806:	881b      	ldrh	r3, [r3, #0]
   19808:	411a      	asrs	r2, r3
   1980a:	0013      	movs	r3, r2
   1980c:	2201      	movs	r2, #1
   1980e:	4013      	ands	r3, r2
   19810:	d023      	beq.n	1985a <APP_TaskHandler+0x76>
            {
                ATOMIC_SECTION_ENTER
   19812:	4b1b      	ldr	r3, [pc, #108]	; (19880 <APP_TaskHandler+0x9c>)
   19814:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
   19816:	1dbb      	adds	r3, r7, #6
   19818:	881b      	ldrh	r3, [r3, #0]
   1981a:	2201      	movs	r2, #1
   1981c:	409a      	lsls	r2, r3
   1981e:	0013      	movs	r3, r2
   19820:	b25b      	sxtb	r3, r3
   19822:	43db      	mvns	r3, r3
   19824:	b25b      	sxtb	r3, r3
   19826:	4a15      	ldr	r2, [pc, #84]	; (1987c <APP_TaskHandler+0x98>)
   19828:	7812      	ldrb	r2, [r2, #0]
   1982a:	b2d2      	uxtb	r2, r2
   1982c:	b252      	sxtb	r2, r2
   1982e:	4013      	ands	r3, r2
   19830:	b25b      	sxtb	r3, r3
   19832:	b2da      	uxtb	r2, r3
   19834:	4b11      	ldr	r3, [pc, #68]	; (1987c <APP_TaskHandler+0x98>)
   19836:	701a      	strb	r2, [r3, #0]
                ATOMIC_SECTION_EXIT
   19838:	4b12      	ldr	r3, [pc, #72]	; (19884 <APP_TaskHandler+0xa0>)
   1983a:	4798      	blx	r3

                appTaskHandlers[taskId]();
   1983c:	1dbb      	adds	r3, r7, #6
   1983e:	881a      	ldrh	r2, [r3, #0]
   19840:	4b11      	ldr	r3, [pc, #68]	; (19888 <APP_TaskHandler+0xa4>)
   19842:	0092      	lsls	r2, r2, #2
   19844:	58d3      	ldr	r3, [r2, r3]
   19846:	4798      	blx	r3

                if (appTaskFlags)
   19848:	4b0c      	ldr	r3, [pc, #48]	; (1987c <APP_TaskHandler+0x98>)
   1984a:	781b      	ldrb	r3, [r3, #0]
   1984c:	b2db      	uxtb	r3, r3
   1984e:	2b00      	cmp	r3, #0
   19850:	d00d      	beq.n	1986e <APP_TaskHandler+0x8a>
                {
                    SYSTEM_PostTask(APP_TASK_ID);
   19852:	2010      	movs	r0, #16
   19854:	4b0d      	ldr	r3, [pc, #52]	; (1988c <APP_TaskHandler+0xa8>)
   19856:	4798      	blx	r3
                }

                break;
   19858:	e009      	b.n	1986e <APP_TaskHandler+0x8a>
        for (uint16_t taskId = 0; taskId < APP_TASKS_COUNT; taskId++)
   1985a:	1dbb      	adds	r3, r7, #6
   1985c:	881a      	ldrh	r2, [r3, #0]
   1985e:	1dbb      	adds	r3, r7, #6
   19860:	3201      	adds	r2, #1
   19862:	801a      	strh	r2, [r3, #0]
   19864:	1dbb      	adds	r3, r7, #6
   19866:	881b      	ldrh	r3, [r3, #0]
   19868:	2b01      	cmp	r3, #1
   1986a:	d9c7      	bls.n	197fc <APP_TaskHandler+0x18>
   1986c:	e000      	b.n	19870 <APP_TaskHandler+0x8c>
                break;
   1986e:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return SYSTEM_TASK_SUCCESS;
   19870:	2300      	movs	r3, #0
}
   19872:	0018      	movs	r0, r3
   19874:	46bd      	mov	sp, r7
   19876:	b002      	add	sp, #8
   19878:	bd80      	pop	{r7, pc}
   1987a:	46c0      	nop			; (mov r8, r8)
   1987c:	20001128 	.word	0x20001128
   19880:	000076e1 	.word	0x000076e1
   19884:	000076f5 	.word	0x000076f5
   19888:	200001dc 	.word	0x200001dc
   1988c:	000162bd 	.word	0x000162bd

00019890 <set_join_parameters>:
 \param[in]  activation type - notifies the activation type (OTAA/ABP)
 \return     LORAWAN_SUCCESS, if successfully set the join parameters
             LORAWAN_INVALID_PARAMETER, otherwise
 ************************************************************************/
StackRetStatus_t set_join_parameters(ActivationType_t activation_type)
{
   19890:	b590      	push	{r4, r7, lr}
   19892:	b085      	sub	sp, #20
   19894:	af00      	add	r7, sp, #0
   19896:	0002      	movs	r2, r0
   19898:	1dfb      	adds	r3, r7, #7
   1989a:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_SUCCESS;
   1989c:	230f      	movs	r3, #15
   1989e:	18fb      	adds	r3, r7, r3
   198a0:	2208      	movs	r2, #8
   198a2:	701a      	strb	r2, [r3, #0]
	
    printf("\n********************Join Parameters********************\n\r");
   198a4:	4b48      	ldr	r3, [pc, #288]	; (199c8 <set_join_parameters+0x138>)
   198a6:	0018      	movs	r0, r3
   198a8:	4b48      	ldr	r3, [pc, #288]	; (199cc <set_join_parameters+0x13c>)
   198aa:	4798      	blx	r3

    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
   198ac:	1dfb      	adds	r3, r7, #7
   198ae:	781b      	ldrb	r3, [r3, #0]
   198b0:	2b01      	cmp	r3, #1
   198b2:	d13c      	bne.n	1992e <set_join_parameters+0x9e>
    {
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
   198b4:	230f      	movs	r3, #15
   198b6:	18fc      	adds	r4, r7, r3
   198b8:	4b45      	ldr	r3, [pc, #276]	; (199d0 <set_join_parameters+0x140>)
   198ba:	0019      	movs	r1, r3
   198bc:	2002      	movs	r0, #2
   198be:	4b45      	ldr	r3, [pc, #276]	; (199d4 <set_join_parameters+0x144>)
   198c0:	4798      	blx	r3
   198c2:	0003      	movs	r3, r0
   198c4:	7023      	strb	r3, [r4, #0]
        if (LORAWAN_SUCCESS == status)
   198c6:	230f      	movs	r3, #15
   198c8:	18fb      	adds	r3, r7, r3
   198ca:	781b      	ldrb	r3, [r3, #0]
   198cc:	2b08      	cmp	r3, #8
   198ce:	d108      	bne.n	198e2 <set_join_parameters+0x52>
        {
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
   198d0:	230f      	movs	r3, #15
   198d2:	18fc      	adds	r4, r7, r3
   198d4:	4b40      	ldr	r3, [pc, #256]	; (199d8 <set_join_parameters+0x148>)
   198d6:	0019      	movs	r1, r3
   198d8:	2005      	movs	r0, #5
   198da:	4b3e      	ldr	r3, [pc, #248]	; (199d4 <set_join_parameters+0x144>)
   198dc:	4798      	blx	r3
   198de:	0003      	movs	r3, r0
   198e0:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   198e2:	230f      	movs	r3, #15
   198e4:	18fb      	adds	r3, r7, r3
   198e6:	781b      	ldrb	r3, [r3, #0]
   198e8:	2b08      	cmp	r3, #8
   198ea:	d111      	bne.n	19910 <set_join_parameters+0x80>
        {
            printf("\nAppSessionKey : ");
   198ec:	4b3b      	ldr	r3, [pc, #236]	; (199dc <set_join_parameters+0x14c>)
   198ee:	0018      	movs	r0, r3
   198f0:	4b36      	ldr	r3, [pc, #216]	; (199cc <set_join_parameters+0x13c>)
   198f2:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
   198f4:	4b38      	ldr	r3, [pc, #224]	; (199d8 <set_join_parameters+0x148>)
   198f6:	2110      	movs	r1, #16
   198f8:	0018      	movs	r0, r3
   198fa:	4b39      	ldr	r3, [pc, #228]	; (199e0 <set_join_parameters+0x150>)
   198fc:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
   198fe:	230f      	movs	r3, #15
   19900:	18fc      	adds	r4, r7, r3
   19902:	4b38      	ldr	r3, [pc, #224]	; (199e4 <set_join_parameters+0x154>)
   19904:	0019      	movs	r1, r3
   19906:	2004      	movs	r0, #4
   19908:	4b32      	ldr	r3, [pc, #200]	; (199d4 <set_join_parameters+0x144>)
   1990a:	4798      	blx	r3
   1990c:	0003      	movs	r3, r0
   1990e:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   19910:	230f      	movs	r3, #15
   19912:	18fb      	adds	r3, r7, r3
   19914:	781b      	ldrb	r3, [r3, #0]
   19916:	2b08      	cmp	r3, #8
   19918:	d14e      	bne.n	199b8 <set_join_parameters+0x128>
        {
            printf("\nNwkSessionKey : ");
   1991a:	4b33      	ldr	r3, [pc, #204]	; (199e8 <set_join_parameters+0x158>)
   1991c:	0018      	movs	r0, r3
   1991e:	4b2b      	ldr	r3, [pc, #172]	; (199cc <set_join_parameters+0x13c>)
   19920:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
   19922:	4b30      	ldr	r3, [pc, #192]	; (199e4 <set_join_parameters+0x154>)
   19924:	2110      	movs	r1, #16
   19926:	0018      	movs	r0, r3
   19928:	4b2d      	ldr	r3, [pc, #180]	; (199e0 <set_join_parameters+0x150>)
   1992a:	4798      	blx	r3
   1992c:	e044      	b.n	199b8 <set_join_parameters+0x128>

    }
    else
    {
#ifndef CRYPTO_DEV_ENABLED
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
   1992e:	230f      	movs	r3, #15
   19930:	18fc      	adds	r4, r7, r3
   19932:	4b2e      	ldr	r3, [pc, #184]	; (199ec <set_join_parameters+0x15c>)
   19934:	0019      	movs	r1, r3
   19936:	2000      	movs	r0, #0
   19938:	4b26      	ldr	r3, [pc, #152]	; (199d4 <set_join_parameters+0x144>)
   1993a:	4798      	blx	r3
   1993c:	0003      	movs	r3, r0
   1993e:	7023      	strb	r3, [r4, #0]
        if (LORAWAN_SUCCESS == status)
   19940:	230f      	movs	r3, #15
   19942:	18fb      	adds	r3, r7, r3
   19944:	781b      	ldrb	r3, [r3, #0]
   19946:	2b08      	cmp	r3, #8
   19948:	d111      	bne.n	1996e <set_join_parameters+0xde>
        {
            printf("\nDevEUI : ");
   1994a:	4b29      	ldr	r3, [pc, #164]	; (199f0 <set_join_parameters+0x160>)
   1994c:	0018      	movs	r0, r3
   1994e:	4b1f      	ldr	r3, [pc, #124]	; (199cc <set_join_parameters+0x13c>)
   19950:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
   19952:	4b26      	ldr	r3, [pc, #152]	; (199ec <set_join_parameters+0x15c>)
   19954:	2108      	movs	r1, #8
   19956:	0018      	movs	r0, r3
   19958:	4b21      	ldr	r3, [pc, #132]	; (199e0 <set_join_parameters+0x150>)
   1995a:	4798      	blx	r3
            status = LORAWAN_SetAttr (JOIN_EUI, demoJoinEui);
   1995c:	230f      	movs	r3, #15
   1995e:	18fc      	adds	r4, r7, r3
   19960:	4b24      	ldr	r3, [pc, #144]	; (199f4 <set_join_parameters+0x164>)
   19962:	0019      	movs	r1, r3
   19964:	2001      	movs	r0, #1
   19966:	4b1b      	ldr	r3, [pc, #108]	; (199d4 <set_join_parameters+0x144>)
   19968:	4798      	blx	r3
   1996a:	0003      	movs	r3, r0
   1996c:	7023      	strb	r3, [r4, #0]
        }

        if (LORAWAN_SUCCESS == status)
   1996e:	230f      	movs	r3, #15
   19970:	18fb      	adds	r3, r7, r3
   19972:	781b      	ldrb	r3, [r3, #0]
   19974:	2b08      	cmp	r3, #8
   19976:	d111      	bne.n	1999c <set_join_parameters+0x10c>
        {
            printf("\nJoinEUI : ");
   19978:	4b1f      	ldr	r3, [pc, #124]	; (199f8 <set_join_parameters+0x168>)
   1997a:	0018      	movs	r0, r3
   1997c:	4b13      	ldr	r3, [pc, #76]	; (199cc <set_join_parameters+0x13c>)
   1997e:	4798      	blx	r3
            print_array((uint8_t *)&demoJoinEui, sizeof(demoJoinEui));
   19980:	4b1c      	ldr	r3, [pc, #112]	; (199f4 <set_join_parameters+0x164>)
   19982:	2108      	movs	r1, #8
   19984:	0018      	movs	r0, r3
   19986:	4b16      	ldr	r3, [pc, #88]	; (199e0 <set_join_parameters+0x150>)
   19988:	4798      	blx	r3
			status = LORAWAN_SetAttr (APP_KEY, demoAppKey);          
   1998a:	230f      	movs	r3, #15
   1998c:	18fc      	adds	r4, r7, r3
   1998e:	4b1b      	ldr	r3, [pc, #108]	; (199fc <set_join_parameters+0x16c>)
   19990:	0019      	movs	r1, r3
   19992:	2003      	movs	r0, #3
   19994:	4b0f      	ldr	r3, [pc, #60]	; (199d4 <set_join_parameters+0x144>)
   19996:	4798      	blx	r3
   19998:	0003      	movs	r3, r0
   1999a:	7023      	strb	r3, [r4, #0]
        }
        if (LORAWAN_SUCCESS == status)
   1999c:	230f      	movs	r3, #15
   1999e:	18fb      	adds	r3, r7, r3
   199a0:	781b      	ldrb	r3, [r3, #0]
   199a2:	2b08      	cmp	r3, #8
   199a4:	d108      	bne.n	199b8 <set_join_parameters+0x128>
        {
            printf("\nAppKey : ");
   199a6:	4b16      	ldr	r3, [pc, #88]	; (19a00 <set_join_parameters+0x170>)
   199a8:	0018      	movs	r0, r3
   199aa:	4b08      	ldr	r3, [pc, #32]	; (199cc <set_join_parameters+0x13c>)
   199ac:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
   199ae:	4b13      	ldr	r3, [pc, #76]	; (199fc <set_join_parameters+0x16c>)
   199b0:	2110      	movs	r1, #16
   199b2:	0018      	movs	r0, r3
   199b4:	4b0a      	ldr	r3, [pc, #40]	; (199e0 <set_join_parameters+0x150>)
   199b6:	4798      	blx	r3
        }
#endif
    }

    return status;
   199b8:	230f      	movs	r3, #15
   199ba:	18fb      	adds	r3, r7, r3
   199bc:	781b      	ldrb	r3, [r3, #0]
}
   199be:	0018      	movs	r0, r3
   199c0:	46bd      	mov	sp, r7
   199c2:	b005      	add	sp, #20
   199c4:	bd90      	pop	{r4, r7, pc}
   199c6:	46c0      	nop			; (mov r8, r8)
   199c8:	0002c5f8 	.word	0x0002c5f8
   199cc:	00024261 	.word	0x00024261
   199d0:	20000170 	.word	0x20000170
   199d4:	0001df51 	.word	0x0001df51
   199d8:	20000184 	.word	0x20000184
   199dc:	0002c634 	.word	0x0002c634
   199e0:	00019d79 	.word	0x00019d79
   199e4:	20000174 	.word	0x20000174
   199e8:	0002c648 	.word	0x0002c648
   199ec:	20000194 	.word	0x20000194
   199f0:	0002c65c 	.word	0x0002c65c
   199f4:	2000019c 	.word	0x2000019c
   199f8:	0002c668 	.word	0x0002c668
   199fc:	200001a4 	.word	0x200001a4
   19a00:	0002c674 	.word	0x0002c674

00019a04 <set_device_type>:
 \param[in]  ed_class - notifies the device class (CLASS_A/CLASS_B/CLASS_C)
 \return     LORAWAN_SUCCESS, if successfully set the device class
             LORAWAN_INVALID_PARAMETER, otherwise
 ************************************************************************/
StackRetStatus_t set_device_type(EdClass_t ed_class)
{
   19a04:	b590      	push	{r4, r7, lr}
   19a06:	b085      	sub	sp, #20
   19a08:	af00      	add	r7, sp, #0
   19a0a:	0002      	movs	r2, r0
   19a0c:	1dfb      	adds	r3, r7, #7
   19a0e:	701a      	strb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_SUCCESS;
   19a10:	230f      	movs	r3, #15
   19a12:	18fb      	adds	r3, r7, r3
   19a14:	2208      	movs	r2, #8
   19a16:	701a      	strb	r2, [r3, #0]

    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
   19a18:	230f      	movs	r3, #15
   19a1a:	18fc      	adds	r4, r7, r3
   19a1c:	1dfb      	adds	r3, r7, #7
   19a1e:	0019      	movs	r1, r3
   19a20:	201a      	movs	r0, #26
   19a22:	4b0c      	ldr	r3, [pc, #48]	; (19a54 <set_device_type+0x50>)
   19a24:	4798      	blx	r3
   19a26:	0003      	movs	r3, r0
   19a28:	7023      	strb	r3, [r4, #0]

    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
   19a2a:	230f      	movs	r3, #15
   19a2c:	18fb      	adds	r3, r7, r3
   19a2e:	781b      	ldrb	r3, [r3, #0]
   19a30:	2b08      	cmp	r3, #8
   19a32:	d108      	bne.n	19a46 <set_device_type+0x42>
   19a34:	1dfb      	adds	r3, r7, #7
   19a36:	781b      	ldrb	r3, [r3, #0]
   19a38:	2206      	movs	r2, #6
   19a3a:	4013      	ands	r3, r2
   19a3c:	b2db      	uxtb	r3, r3
   19a3e:	2b00      	cmp	r3, #0
   19a40:	d001      	beq.n	19a46 <set_device_type+0x42>
    {
        set_multicast_params();
   19a42:	4b05      	ldr	r3, [pc, #20]	; (19a58 <set_device_type+0x54>)
   19a44:	4798      	blx	r3
    }

    return status;
   19a46:	230f      	movs	r3, #15
   19a48:	18fb      	adds	r3, r7, r3
   19a4a:	781b      	ldrb	r3, [r3, #0]
}
   19a4c:	0018      	movs	r0, r3
   19a4e:	46bd      	mov	sp, r7
   19a50:	b005      	add	sp, #20
   19a52:	bd90      	pop	{r4, r7, pc}
   19a54:	0001df51 	.word	0x0001df51
   19a58:	00019a5d 	.word	0x00019a5d

00019a5c <set_multicast_params>:

/*********************************************************************//*
 \brief      Function to Initialize the Multicast parameters
 ************************************************************************/
void set_multicast_params (void)
{
   19a5c:	b590      	push	{r4, r7, lr}
   19a5e:	b095      	sub	sp, #84	; 0x54
   19a60:	af00      	add	r7, sp, #0
	LorawanMcastDlFreqeuncy_t mcastDlFreq;
	LorawanMcastDatarate_t mcastDatarate;
    LorawanMcastStatus_t  mcastStatus;
	ReceiveWindow2Params_t receivewindow2param;
	
    printf("\n***************Multicast Parameters********************\n\r");
   19a62:	4b6e      	ldr	r3, [pc, #440]	; (19c1c <set_multicast_params+0x1c0>)
   19a64:	0018      	movs	r0, r3
   19a66:	4b6e      	ldr	r3, [pc, #440]	; (19c20 <set_multicast_params+0x1c4>)
   19a68:	4798      	blx	r3
    
    dMcastDevAddr.groupId = demoMcastGroupId;
   19a6a:	4b6e      	ldr	r3, [pc, #440]	; (19c24 <set_multicast_params+0x1c8>)
   19a6c:	781a      	ldrb	r2, [r3, #0]
   19a6e:	2344      	movs	r3, #68	; 0x44
   19a70:	18fb      	adds	r3, r7, r3
   19a72:	701a      	strb	r2, [r3, #0]
    mcastAppSKey.groupId  = demoMcastGroupId;
   19a74:	4b6b      	ldr	r3, [pc, #428]	; (19c24 <set_multicast_params+0x1c8>)
   19a76:	781a      	ldrb	r2, [r3, #0]
   19a78:	2330      	movs	r3, #48	; 0x30
   19a7a:	18fb      	adds	r3, r7, r3
   19a7c:	701a      	strb	r2, [r3, #0]
    mcastNwkSKey.groupId  = demoMcastGroupId;
   19a7e:	4b69      	ldr	r3, [pc, #420]	; (19c24 <set_multicast_params+0x1c8>)
   19a80:	781a      	ldrb	r2, [r3, #0]
   19a82:	231c      	movs	r3, #28
   19a84:	18fb      	adds	r3, r7, r3
   19a86:	701a      	strb	r2, [r3, #0]
	mcastDlFreq.groupId   = demoMcastGroupId;
   19a88:	4b66      	ldr	r3, [pc, #408]	; (19c24 <set_multicast_params+0x1c8>)
   19a8a:	781a      	ldrb	r2, [r3, #0]
   19a8c:	2314      	movs	r3, #20
   19a8e:	18fb      	adds	r3, r7, r3
   19a90:	701a      	strb	r2, [r3, #0]
	mcastDatarate.groupId = demoMcastGroupId;
   19a92:	4b64      	ldr	r3, [pc, #400]	; (19c24 <set_multicast_params+0x1c8>)
   19a94:	781a      	ldrb	r2, [r3, #0]
   19a96:	2310      	movs	r3, #16
   19a98:	18fb      	adds	r3, r7, r3
   19a9a:	701a      	strb	r2, [r3, #0]
    mcastStatus.groupId   = demoMcastGroupId;
   19a9c:	4b61      	ldr	r3, [pc, #388]	; (19c24 <set_multicast_params+0x1c8>)
   19a9e:	781a      	ldrb	r2, [r3, #0]
   19aa0:	230c      	movs	r3, #12
   19aa2:	18fb      	adds	r3, r7, r3
   19aa4:	701a      	strb	r2, [r3, #0]
	
    memcpy(&(mcastAppSKey.mcastAppSKey), &demoMcastAppsKey,LORAWAN_SESSIONKEY_LENGTH);
   19aa6:	2330      	movs	r3, #48	; 0x30
   19aa8:	18fb      	adds	r3, r7, r3
   19aaa:	2201      	movs	r2, #1
   19aac:	495e      	ldr	r1, [pc, #376]	; (19c28 <set_multicast_params+0x1cc>)
   19aae:	189b      	adds	r3, r3, r2
   19ab0:	2210      	movs	r2, #16
   19ab2:	0018      	movs	r0, r3
   19ab4:	4b5d      	ldr	r3, [pc, #372]	; (19c2c <set_multicast_params+0x1d0>)
   19ab6:	4798      	blx	r3
    dMcastDevAddr.mcast_dev_addr = demoMcastDevAddr;
   19ab8:	4b5d      	ldr	r3, [pc, #372]	; (19c30 <set_multicast_params+0x1d4>)
   19aba:	681a      	ldr	r2, [r3, #0]
   19abc:	2344      	movs	r3, #68	; 0x44
   19abe:	18fb      	adds	r3, r7, r3
   19ac0:	605a      	str	r2, [r3, #4]
    memcpy(&(mcastNwkSKey.mcastNwkSKey), &demoMcastNwksKey,LORAWAN_SESSIONKEY_LENGTH);
   19ac2:	231c      	movs	r3, #28
   19ac4:	18fb      	adds	r3, r7, r3
   19ac6:	2201      	movs	r2, #1
   19ac8:	495a      	ldr	r1, [pc, #360]	; (19c34 <set_multicast_params+0x1d8>)
   19aca:	189b      	adds	r3, r3, r2
   19acc:	2210      	movs	r2, #16
   19ace:	0018      	movs	r0, r3
   19ad0:	4b56      	ldr	r3, [pc, #344]	; (19c2c <set_multicast_params+0x1d0>)
   19ad2:	4798      	blx	r3
    memcpy(&(mcastStatus.status),&demoMcastEnable,sizeof(demoMcastEnable));
   19ad4:	4b58      	ldr	r3, [pc, #352]	; (19c38 <set_multicast_params+0x1dc>)
   19ad6:	781a      	ldrb	r2, [r3, #0]
   19ad8:	230c      	movs	r3, #12
   19ada:	18fb      	adds	r3, r7, r3
   19adc:	705a      	strb	r2, [r3, #1]
	LORAWAN_GetAttr(RX2_WINDOW_PARAMS ,NULL, &receivewindow2param);
   19ade:	1d3b      	adds	r3, r7, #4
   19ae0:	001a      	movs	r2, r3
   19ae2:	2100      	movs	r1, #0
   19ae4:	2015      	movs	r0, #21
   19ae6:	4b55      	ldr	r3, [pc, #340]	; (19c3c <set_multicast_params+0x1e0>)
   19ae8:	4798      	blx	r3
	mcastDatarate.datarate = receivewindow2param.dataRate;
   19aea:	1d3b      	adds	r3, r7, #4
   19aec:	791a      	ldrb	r2, [r3, #4]
   19aee:	2310      	movs	r3, #16
   19af0:	18fb      	adds	r3, r7, r3
   19af2:	705a      	strb	r2, [r3, #1]
	mcastDlFreq.dlFrequency = receivewindow2param.frequency;
   19af4:	1d3b      	adds	r3, r7, #4
   19af6:	681a      	ldr	r2, [r3, #0]
   19af8:	2314      	movs	r3, #20
   19afa:	18fb      	adds	r3, r7, r3
   19afc:	605a      	str	r2, [r3, #4]
	
    
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &mcastAppSKey);
   19afe:	234f      	movs	r3, #79	; 0x4f
   19b00:	18fc      	adds	r4, r7, r3
   19b02:	2330      	movs	r3, #48	; 0x30
   19b04:	18fb      	adds	r3, r7, r3
   19b06:	0019      	movs	r1, r3
   19b08:	202c      	movs	r0, #44	; 0x2c
   19b0a:	4b4d      	ldr	r3, [pc, #308]	; (19c40 <set_multicast_params+0x1e4>)
   19b0c:	4798      	blx	r3
   19b0e:	0003      	movs	r3, r0
   19b10:	7023      	strb	r3, [r4, #0]
    if (status == LORAWAN_SUCCESS)
   19b12:	234f      	movs	r3, #79	; 0x4f
   19b14:	18fb      	adds	r3, r7, r3
   19b16:	781b      	ldrb	r3, [r3, #0]
   19b18:	2b08      	cmp	r3, #8
   19b1a:	d114      	bne.n	19b46 <set_multicast_params+0xea>
    {
	    printf("\nMcastAppSessionKey : ");
   19b1c:	4b49      	ldr	r3, [pc, #292]	; (19c44 <set_multicast_params+0x1e8>)
   19b1e:	0018      	movs	r0, r3
   19b20:	4b3f      	ldr	r3, [pc, #252]	; (19c20 <set_multicast_params+0x1c4>)
   19b22:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastAppSKey.mcastAppSKey), LORAWAN_SESSIONKEY_LENGTH);
   19b24:	2330      	movs	r3, #48	; 0x30
   19b26:	18fb      	adds	r3, r7, r3
   19b28:	3301      	adds	r3, #1
   19b2a:	2110      	movs	r1, #16
   19b2c:	0018      	movs	r0, r3
   19b2e:	4b46      	ldr	r3, [pc, #280]	; (19c48 <set_multicast_params+0x1ec>)
   19b30:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &mcastNwkSKey);
   19b32:	234f      	movs	r3, #79	; 0x4f
   19b34:	18fc      	adds	r4, r7, r3
   19b36:	231c      	movs	r3, #28
   19b38:	18fb      	adds	r3, r7, r3
   19b3a:	0019      	movs	r1, r3
   19b3c:	202b      	movs	r0, #43	; 0x2b
   19b3e:	4b40      	ldr	r3, [pc, #256]	; (19c40 <set_multicast_params+0x1e4>)
   19b40:	4798      	blx	r3
   19b42:	0003      	movs	r3, r0
   19b44:	7023      	strb	r3, [r4, #0]
    }

    if(status == LORAWAN_SUCCESS)
   19b46:	234f      	movs	r3, #79	; 0x4f
   19b48:	18fb      	adds	r3, r7, r3
   19b4a:	781b      	ldrb	r3, [r3, #0]
   19b4c:	2b08      	cmp	r3, #8
   19b4e:	d114      	bne.n	19b7a <set_multicast_params+0x11e>
    {
	    printf("\nMcastNwkSessionKey : ");
   19b50:	4b3e      	ldr	r3, [pc, #248]	; (19c4c <set_multicast_params+0x1f0>)
   19b52:	0018      	movs	r0, r3
   19b54:	4b32      	ldr	r3, [pc, #200]	; (19c20 <set_multicast_params+0x1c4>)
   19b56:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastNwkSKey.mcastNwkSKey), LORAWAN_SESSIONKEY_LENGTH);
   19b58:	231c      	movs	r3, #28
   19b5a:	18fb      	adds	r3, r7, r3
   19b5c:	3301      	adds	r3, #1
   19b5e:	2110      	movs	r1, #16
   19b60:	0018      	movs	r0, r3
   19b62:	4b39      	ldr	r3, [pc, #228]	; (19c48 <set_multicast_params+0x1ec>)
   19b64:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &dMcastDevAddr);
   19b66:	234f      	movs	r3, #79	; 0x4f
   19b68:	18fc      	adds	r4, r7, r3
   19b6a:	2344      	movs	r3, #68	; 0x44
   19b6c:	18fb      	adds	r3, r7, r3
   19b6e:	0019      	movs	r1, r3
   19b70:	202a      	movs	r0, #42	; 0x2a
   19b72:	4b33      	ldr	r3, [pc, #204]	; (19c40 <set_multicast_params+0x1e4>)
   19b74:	4798      	blx	r3
   19b76:	0003      	movs	r3, r0
   19b78:	7023      	strb	r3, [r4, #0]
    }
    if (status == LORAWAN_SUCCESS)
   19b7a:	234f      	movs	r3, #79	; 0x4f
   19b7c:	18fb      	adds	r3, r7, r3
   19b7e:	781b      	ldrb	r3, [r3, #0]
   19b80:	2b08      	cmp	r3, #8
   19b82:	d111      	bne.n	19ba8 <set_multicast_params+0x14c>
    {
	    printf("\nMcastGroupAddr : 0x%lx\n\r", dMcastDevAddr.mcast_dev_addr);
   19b84:	2344      	movs	r3, #68	; 0x44
   19b86:	18fb      	adds	r3, r7, r3
   19b88:	685a      	ldr	r2, [r3, #4]
   19b8a:	4b31      	ldr	r3, [pc, #196]	; (19c50 <set_multicast_params+0x1f4>)
   19b8c:	0011      	movs	r1, r2
   19b8e:	0018      	movs	r0, r3
   19b90:	4b23      	ldr	r3, [pc, #140]	; (19c20 <set_multicast_params+0x1c4>)
   19b92:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_ENABLE, &mcastStatus);
   19b94:	234f      	movs	r3, #79	; 0x4f
   19b96:	18fc      	adds	r4, r7, r3
   19b98:	230c      	movs	r3, #12
   19b9a:	18fb      	adds	r3, r7, r3
   19b9c:	0019      	movs	r1, r3
   19b9e:	2029      	movs	r0, #41	; 0x29
   19ba0:	4b27      	ldr	r3, [pc, #156]	; (19c40 <set_multicast_params+0x1e4>)
   19ba2:	4798      	blx	r3
   19ba4:	0003      	movs	r3, r0
   19ba6:	7023      	strb	r3, [r4, #0]
    }
	if (status == LORAWAN_SUCCESS)
   19ba8:	234f      	movs	r3, #79	; 0x4f
   19baa:	18fb      	adds	r3, r7, r3
   19bac:	781b      	ldrb	r3, [r3, #0]
   19bae:	2b08      	cmp	r3, #8
   19bb0:	d109      	bne.n	19bc6 <set_multicast_params+0x16a>
	{
	  status = LORAWAN_SetMulticastParam(MCAST_DATARATE , &mcastDatarate);
   19bb2:	234f      	movs	r3, #79	; 0x4f
   19bb4:	18fc      	adds	r4, r7, r3
   19bb6:	2310      	movs	r3, #16
   19bb8:	18fb      	adds	r3, r7, r3
   19bba:	0019      	movs	r1, r3
   19bbc:	2031      	movs	r0, #49	; 0x31
   19bbe:	4b25      	ldr	r3, [pc, #148]	; (19c54 <set_multicast_params+0x1f8>)
   19bc0:	4798      	blx	r3
   19bc2:	0003      	movs	r3, r0
   19bc4:	7023      	strb	r3, [r4, #0]
	}
	if (status == LORAWAN_SUCCESS)
   19bc6:	234f      	movs	r3, #79	; 0x4f
   19bc8:	18fb      	adds	r3, r7, r3
   19bca:	781b      	ldrb	r3, [r3, #0]
   19bcc:	2b08      	cmp	r3, #8
   19bce:	d10a      	bne.n	19be6 <set_multicast_params+0x18a>
	{
	   status = LORAWAN_SetMulticastParam(MCAST_FREQUENCY , &mcastDlFreq);
   19bd0:	234f      	movs	r3, #79	; 0x4f
   19bd2:	18fc      	adds	r4, r7, r3
   19bd4:	2314      	movs	r3, #20
   19bd6:	18fb      	adds	r3, r7, r3
   19bd8:	0019      	movs	r1, r3
   19bda:	2030      	movs	r0, #48	; 0x30
   19bdc:	4b1d      	ldr	r3, [pc, #116]	; (19c54 <set_multicast_params+0x1f8>)
   19bde:	4798      	blx	r3
   19be0:	0003      	movs	r3, r0
   19be2:	7023      	strb	r3, [r4, #0]
   19be4:	e003      	b.n	19bee <set_multicast_params+0x192>
	}
    else
    {
	    printf("\nMcastGroupAddrStatus : Failed\n\r");
   19be6:	4b1c      	ldr	r3, [pc, #112]	; (19c58 <set_multicast_params+0x1fc>)
   19be8:	0018      	movs	r0, r3
   19bea:	4b0d      	ldr	r3, [pc, #52]	; (19c20 <set_multicast_params+0x1c4>)
   19bec:	4798      	blx	r3
    }
	
    if (status == LORAWAN_SUCCESS)
   19bee:	234f      	movs	r3, #79	; 0x4f
   19bf0:	18fb      	adds	r3, r7, r3
   19bf2:	781b      	ldrb	r3, [r3, #0]
   19bf4:	2b08      	cmp	r3, #8
   19bf6:	d104      	bne.n	19c02 <set_multicast_params+0x1a6>
    {
	    printf("\nMulticastStatus : Enabled\n\r");
   19bf8:	4b18      	ldr	r3, [pc, #96]	; (19c5c <set_multicast_params+0x200>)
   19bfa:	0018      	movs	r0, r3
   19bfc:	4b08      	ldr	r3, [pc, #32]	; (19c20 <set_multicast_params+0x1c4>)
   19bfe:	4798      	blx	r3
   19c00:	e003      	b.n	19c0a <set_multicast_params+0x1ae>
    }
    else
    {
	    printf("\nMulticastStatus : Failed\n\r");
   19c02:	4b17      	ldr	r3, [pc, #92]	; (19c60 <set_multicast_params+0x204>)
   19c04:	0018      	movs	r0, r3
   19c06:	4b06      	ldr	r3, [pc, #24]	; (19c20 <set_multicast_params+0x1c4>)
   19c08:	4798      	blx	r3
    }
	
	 printf("\n********************************************************\n\r");
   19c0a:	4b16      	ldr	r3, [pc, #88]	; (19c64 <set_multicast_params+0x208>)
   19c0c:	0018      	movs	r0, r3
   19c0e:	4b04      	ldr	r3, [pc, #16]	; (19c20 <set_multicast_params+0x1c4>)
   19c10:	4798      	blx	r3

}
   19c12:	46c0      	nop			; (mov r8, r8)
   19c14:	46bd      	mov	sp, r7
   19c16:	b015      	add	sp, #84	; 0x54
   19c18:	bd90      	pop	{r4, r7, pc}
   19c1a:	46c0      	nop			; (mov r8, r8)
   19c1c:	0002c680 	.word	0x0002c680
   19c20:	00024261 	.word	0x00024261
   19c24:	20001149 	.word	0x20001149
   19c28:	200001cc 	.word	0x200001cc
   19c2c:	00024149 	.word	0x00024149
   19c30:	200001b8 	.word	0x200001b8
   19c34:	200001bc 	.word	0x200001bc
   19c38:	200001b4 	.word	0x200001b4
   19c3c:	0001bfa1 	.word	0x0001bfa1
   19c40:	0001df51 	.word	0x0001df51
   19c44:	0002c6bc 	.word	0x0002c6bc
   19c48:	00019d79 	.word	0x00019d79
   19c4c:	0002c6d4 	.word	0x0002c6d4
   19c50:	0002c6ec 	.word	0x0002c6ec
   19c54:	0001eb2d 	.word	0x0001eb2d
   19c58:	0002c708 	.word	0x0002c708
   19c5c:	0002c72c 	.word	0x0002c72c
   19c60:	0002c74c 	.word	0x0002c74c
   19c64:	0002c768 	.word	0x0002c768

00019c68 <mote_set_parameters>:
 \param[in]  void
 \return     LORAWAN_SUCCESS, if successfully set all the parameters
             LORAWAN_INVALID_PARAMETER, otherwise
 ************************************************************************/
StackRetStatus_t mote_set_parameters(IsmBand_t ismBand, const uint16_t index)
{
   19c68:	b590      	push	{r4, r7, lr}
   19c6a:	b085      	sub	sp, #20
   19c6c:	af00      	add	r7, sp, #0
   19c6e:	0002      	movs	r2, r0
   19c70:	1dfb      	adds	r3, r7, #7
   19c72:	701a      	strb	r2, [r3, #0]
   19c74:	1d3b      	adds	r3, r7, #4
   19c76:	1c0a      	adds	r2, r1, #0
   19c78:	801a      	strh	r2, [r3, #0]
    StackRetStatus_t status;
    bool joinBackoffEnable = false;
   19c7a:	230e      	movs	r3, #14
   19c7c:	18fb      	adds	r3, r7, r3
   19c7e:	2200      	movs	r2, #0
   19c80:	701a      	strb	r2, [r3, #0]
    LORAWAN_Reset(ismBand);
   19c82:	1dfb      	adds	r3, r7, #7
   19c84:	781b      	ldrb	r3, [r3, #0]
   19c86:	0018      	movs	r0, r3
   19c88:	4b2e      	ldr	r3, [pc, #184]	; (19d44 <mote_set_parameters+0xdc>)
   19c8a:	4798      	blx	r3
    }
#endif
#endif
    /*Disabled Join backoff in Demo application
	Needs to be enabled in Production Environment Ref Section */
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
   19c8c:	230e      	movs	r3, #14
   19c8e:	18fb      	adds	r3, r7, r3
   19c90:	0019      	movs	r1, r3
   19c92:	2034      	movs	r0, #52	; 0x34
   19c94:	4b2c      	ldr	r3, [pc, #176]	; (19d48 <mote_set_parameters+0xe0>)
   19c96:	4798      	blx	r3
	bool cryptoDevEnabled = true;
	LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &cryptoDevEnabled);
#endif

    /* Initialize the join parameters for Demo application */
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
   19c98:	230f      	movs	r3, #15
   19c9a:	18fc      	adds	r4, r7, r3
   19c9c:	2000      	movs	r0, #0
   19c9e:	4b2b      	ldr	r3, [pc, #172]	; (19d4c <mote_set_parameters+0xe4>)
   19ca0:	4798      	blx	r3
   19ca2:	0003      	movs	r3, r0
   19ca4:	7023      	strb	r3, [r4, #0]

    if (LORAWAN_SUCCESS != status)
   19ca6:	230f      	movs	r3, #15
   19ca8:	18fb      	adds	r3, r7, r3
   19caa:	781b      	ldrb	r3, [r3, #0]
   19cac:	2b08      	cmp	r3, #8
   19cae:	d007      	beq.n	19cc0 <mote_set_parameters+0x58>
    {
        printf("\nJoin parameters initialization failed\n\r");
   19cb0:	4b27      	ldr	r3, [pc, #156]	; (19d50 <mote_set_parameters+0xe8>)
   19cb2:	0018      	movs	r0, r3
   19cb4:	4b27      	ldr	r3, [pc, #156]	; (19d54 <mote_set_parameters+0xec>)
   19cb6:	4798      	blx	r3
        return status;
   19cb8:	230f      	movs	r3, #15
   19cba:	18fb      	adds	r3, r7, r3
   19cbc:	781b      	ldrb	r3, [r3, #0]
   19cbe:	e03d      	b.n	19d3c <mote_set_parameters+0xd4>
    }

    /* Set the device type */
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
   19cc0:	230f      	movs	r3, #15
   19cc2:	18fc      	adds	r4, r7, r3
   19cc4:	2001      	movs	r0, #1
   19cc6:	4b24      	ldr	r3, [pc, #144]	; (19d58 <mote_set_parameters+0xf0>)
   19cc8:	4798      	blx	r3
   19cca:	0003      	movs	r3, r0
   19ccc:	7023      	strb	r3, [r4, #0]

    if (LORAWAN_SUCCESS != status)
   19cce:	230f      	movs	r3, #15
   19cd0:	18fb      	adds	r3, r7, r3
   19cd2:	781b      	ldrb	r3, [r3, #0]
   19cd4:	2b08      	cmp	r3, #8
   19cd6:	d007      	beq.n	19ce8 <mote_set_parameters+0x80>
    {
        printf("\nUnsupported Device Type\n\r");
   19cd8:	4b20      	ldr	r3, [pc, #128]	; (19d5c <mote_set_parameters+0xf4>)
   19cda:	0018      	movs	r0, r3
   19cdc:	4b1d      	ldr	r3, [pc, #116]	; (19d54 <mote_set_parameters+0xec>)
   19cde:	4798      	blx	r3
        return status;
   19ce0:	230f      	movs	r3, #15
   19ce2:	18fb      	adds	r3, r7, r3
   19ce4:	781b      	ldrb	r3, [r3, #0]
   19ce6:	e029      	b.n	19d3c <mote_set_parameters+0xd4>
    }


    /* Send Join request for Demo application */
    status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
   19ce8:	230f      	movs	r3, #15
   19cea:	18fc      	adds	r4, r7, r3
   19cec:	2000      	movs	r0, #0
   19cee:	4b1c      	ldr	r3, [pc, #112]	; (19d60 <mote_set_parameters+0xf8>)
   19cf0:	4798      	blx	r3
   19cf2:	0003      	movs	r3, r0
   19cf4:	7023      	strb	r3, [r4, #0]

    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
   19cf6:	230f      	movs	r3, #15
   19cf8:	18fb      	adds	r3, r7, r3
   19cfa:	781b      	ldrb	r3, [r3, #0]
   19cfc:	2b08      	cmp	r3, #8
   19cfe:	d10e      	bne.n	19d1e <mote_set_parameters+0xb6>
   19d00:	1d3b      	adds	r3, r7, #4
   19d02:	881b      	ldrh	r3, [r3, #0]
   19d04:	2b09      	cmp	r3, #9
   19d06:	d80a      	bhi.n	19d1e <mote_set_parameters+0xb6>
    {
        printf("\nJoin Request Sent for %s\n\r",bandStrings[index]);
   19d08:	1d3b      	adds	r3, r7, #4
   19d0a:	881a      	ldrh	r2, [r3, #0]
   19d0c:	4b15      	ldr	r3, [pc, #84]	; (19d64 <mote_set_parameters+0xfc>)
   19d0e:	0092      	lsls	r2, r2, #2
   19d10:	58d2      	ldr	r2, [r2, r3]
   19d12:	4b15      	ldr	r3, [pc, #84]	; (19d68 <mote_set_parameters+0x100>)
   19d14:	0011      	movs	r1, r2
   19d16:	0018      	movs	r0, r3
   19d18:	4b0e      	ldr	r3, [pc, #56]	; (19d54 <mote_set_parameters+0xec>)
   19d1a:	4798      	blx	r3
   19d1c:	e00b      	b.n	19d36 <mote_set_parameters+0xce>
    }
    else
    {
        print_stack_status(status);
   19d1e:	230f      	movs	r3, #15
   19d20:	18fb      	adds	r3, r7, r3
   19d22:	781b      	ldrb	r3, [r3, #0]
   19d24:	0018      	movs	r0, r3
   19d26:	4b11      	ldr	r3, [pc, #68]	; (19d6c <mote_set_parameters+0x104>)
   19d28:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
   19d2a:	4b11      	ldr	r3, [pc, #68]	; (19d70 <mote_set_parameters+0x108>)
   19d2c:	2203      	movs	r2, #3
   19d2e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
   19d30:	2000      	movs	r0, #0
   19d32:	4b10      	ldr	r3, [pc, #64]	; (19d74 <mote_set_parameters+0x10c>)
   19d34:	4798      	blx	r3
    }

    return status;
   19d36:	230f      	movs	r3, #15
   19d38:	18fb      	adds	r3, r7, r3
   19d3a:	781b      	ldrb	r3, [r3, #0]
}
   19d3c:	0018      	movs	r0, r3
   19d3e:	46bd      	mov	sp, r7
   19d40:	b005      	add	sp, #20
   19d42:	bd90      	pop	{r4, r7, pc}
   19d44:	0001e4cd 	.word	0x0001e4cd
   19d48:	0001df51 	.word	0x0001df51
   19d4c:	00019891 	.word	0x00019891
   19d50:	0002c7a4 	.word	0x0002c7a4
   19d54:	00024261 	.word	0x00024261
   19d58:	00019a05 	.word	0x00019a05
   19d5c:	0002c7d0 	.word	0x0002c7d0
   19d60:	0001bb9d 	.word	0x0001bb9d
   19d64:	2000013c 	.word	0x2000013c
   19d68:	0002c7ec 	.word	0x0002c7ec
   19d6c:	00019e9d 	.word	0x00019e9d
   19d70:	20001138 	.word	0x20001138
   19d74:	00019795 	.word	0x00019795

00019d78 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
void print_array (uint8_t *array, uint8_t length)
{
   19d78:	b580      	push	{r7, lr}
   19d7a:	b084      	sub	sp, #16
   19d7c:	af00      	add	r7, sp, #0
   19d7e:	6078      	str	r0, [r7, #4]
   19d80:	000a      	movs	r2, r1
   19d82:	1cfb      	adds	r3, r7, #3
   19d84:	701a      	strb	r2, [r3, #0]
    printf("0x");
   19d86:	4b15      	ldr	r3, [pc, #84]	; (19ddc <print_array+0x64>)
   19d88:	0018      	movs	r0, r3
   19d8a:	4b15      	ldr	r3, [pc, #84]	; (19de0 <print_array+0x68>)
   19d8c:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
   19d8e:	230f      	movs	r3, #15
   19d90:	18fb      	adds	r3, r7, r3
   19d92:	2200      	movs	r2, #0
   19d94:	701a      	strb	r2, [r3, #0]
   19d96:	e011      	b.n	19dbc <print_array+0x44>
    {
        printf("%02x", *array);
   19d98:	687b      	ldr	r3, [r7, #4]
   19d9a:	781b      	ldrb	r3, [r3, #0]
   19d9c:	001a      	movs	r2, r3
   19d9e:	4b11      	ldr	r3, [pc, #68]	; (19de4 <print_array+0x6c>)
   19da0:	0011      	movs	r1, r2
   19da2:	0018      	movs	r0, r3
   19da4:	4b0e      	ldr	r3, [pc, #56]	; (19de0 <print_array+0x68>)
   19da6:	4798      	blx	r3
        array++;
   19da8:	687b      	ldr	r3, [r7, #4]
   19daa:	3301      	adds	r3, #1
   19dac:	607b      	str	r3, [r7, #4]
    for (uint8_t i =0; i < length; i++)
   19dae:	230f      	movs	r3, #15
   19db0:	18fb      	adds	r3, r7, r3
   19db2:	781a      	ldrb	r2, [r3, #0]
   19db4:	230f      	movs	r3, #15
   19db6:	18fb      	adds	r3, r7, r3
   19db8:	3201      	adds	r2, #1
   19dba:	701a      	strb	r2, [r3, #0]
   19dbc:	230f      	movs	r3, #15
   19dbe:	18fa      	adds	r2, r7, r3
   19dc0:	1cfb      	adds	r3, r7, #3
   19dc2:	7812      	ldrb	r2, [r2, #0]
   19dc4:	781b      	ldrb	r3, [r3, #0]
   19dc6:	429a      	cmp	r2, r3
   19dc8:	d3e6      	bcc.n	19d98 <print_array+0x20>
    }
    printf("\n\r");
   19dca:	4b07      	ldr	r3, [pc, #28]	; (19de8 <print_array+0x70>)
   19dcc:	0018      	movs	r0, r3
   19dce:	4b04      	ldr	r3, [pc, #16]	; (19de0 <print_array+0x68>)
   19dd0:	4798      	blx	r3
}
   19dd2:	46c0      	nop			; (mov r8, r8)
   19dd4:	46bd      	mov	sp, r7
   19dd6:	b004      	add	sp, #16
   19dd8:	bd80      	pop	{r7, pc}
   19dda:	46c0      	nop			; (mov r8, r8)
   19ddc:	0002c808 	.word	0x0002c808
   19de0:	00024261 	.word	0x00024261
   19de4:	0002c80c 	.word	0x0002c80c
   19de8:	0002c814 	.word	0x0002c814

00019dec <print_application_config>:

/*********************************************************************//*
 \brief      Function to Print application configuration
 ************************************************************************/
void  print_application_config (void)
{
   19dec:	b580      	push	{r7, lr}
   19dee:	b082      	sub	sp, #8
   19df0:	af00      	add	r7, sp, #0
    EdClass_t edClass;
    printf("\n***************Application Configuration***************\n\r");
   19df2:	4b1e      	ldr	r3, [pc, #120]	; (19e6c <print_application_config+0x80>)
   19df4:	0018      	movs	r0, r3
   19df6:	4b1e      	ldr	r3, [pc, #120]	; (19e70 <print_application_config+0x84>)
   19df8:	4798      	blx	r3
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
   19dfa:	1dfb      	adds	r3, r7, #7
   19dfc:	001a      	movs	r2, r3
   19dfe:	2100      	movs	r1, #0
   19e00:	201a      	movs	r0, #26
   19e02:	4b1c      	ldr	r3, [pc, #112]	; (19e74 <print_application_config+0x88>)
   19e04:	4798      	blx	r3
    printf("\nDevType : ");
   19e06:	4b1c      	ldr	r3, [pc, #112]	; (19e78 <print_application_config+0x8c>)
   19e08:	0018      	movs	r0, r3
   19e0a:	4b19      	ldr	r3, [pc, #100]	; (19e70 <print_application_config+0x84>)
   19e0c:	4798      	blx	r3

    if(edClass == CLASS_A)
   19e0e:	1dfb      	adds	r3, r7, #7
   19e10:	781b      	ldrb	r3, [r3, #0]
   19e12:	2b01      	cmp	r3, #1
   19e14:	d104      	bne.n	19e20 <print_application_config+0x34>
    {
        printf("CLASS A\n\r");
   19e16:	4b19      	ldr	r3, [pc, #100]	; (19e7c <print_application_config+0x90>)
   19e18:	0018      	movs	r0, r3
   19e1a:	4b15      	ldr	r3, [pc, #84]	; (19e70 <print_application_config+0x84>)
   19e1c:	4798      	blx	r3
   19e1e:	e007      	b.n	19e30 <print_application_config+0x44>
    }
    else if(edClass == CLASS_C)
   19e20:	1dfb      	adds	r3, r7, #7
   19e22:	781b      	ldrb	r3, [r3, #0]
   19e24:	2b04      	cmp	r3, #4
   19e26:	d103      	bne.n	19e30 <print_application_config+0x44>
    {
        printf("CLASS C\n\r");
   19e28:	4b15      	ldr	r3, [pc, #84]	; (19e80 <print_application_config+0x94>)
   19e2a:	0018      	movs	r0, r3
   19e2c:	4b10      	ldr	r3, [pc, #64]	; (19e70 <print_application_config+0x84>)
   19e2e:	4798      	blx	r3
    }

    printf("\nActivationType : ");
   19e30:	4b14      	ldr	r3, [pc, #80]	; (19e84 <print_application_config+0x98>)
   19e32:	0018      	movs	r0, r3
   19e34:	4b0e      	ldr	r3, [pc, #56]	; (19e70 <print_application_config+0x84>)
   19e36:	4798      	blx	r3

    if(DEMO_APP_ACTIVATION_TYPE == OVER_THE_AIR_ACTIVATION)
    {
        printf("OTAA\n\r");
   19e38:	4b13      	ldr	r3, [pc, #76]	; (19e88 <print_application_config+0x9c>)
   19e3a:	0018      	movs	r0, r3
   19e3c:	4b0c      	ldr	r3, [pc, #48]	; (19e70 <print_application_config+0x84>)
   19e3e:	4798      	blx	r3
    else if(DEMO_APP_ACTIVATION_TYPE == ACTIVATION_BY_PERSONALIZATION)
    {
        printf("ABP\n\r");
    }

    printf("\nTransmission Type - ");
   19e40:	4b12      	ldr	r3, [pc, #72]	; (19e8c <print_application_config+0xa0>)
   19e42:	0018      	movs	r0, r3
   19e44:	4b0a      	ldr	r3, [pc, #40]	; (19e70 <print_application_config+0x84>)
   19e46:	4798      	blx	r3
    {
        printf("CONFIRMED\n\r");
    }
    else if(DEMO_APP_TRANSMISSION_TYPE == UNCONFIRMED)
    {
        printf("UNCONFIRMED\n\r");
   19e48:	4b11      	ldr	r3, [pc, #68]	; (19e90 <print_application_config+0xa4>)
   19e4a:	0018      	movs	r0, r3
   19e4c:	4b08      	ldr	r3, [pc, #32]	; (19e70 <print_application_config+0x84>)
   19e4e:	4798      	blx	r3
    }

    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
   19e50:	4b10      	ldr	r3, [pc, #64]	; (19e94 <print_application_config+0xa8>)
   19e52:	2101      	movs	r1, #1
   19e54:	0018      	movs	r0, r3
   19e56:	4b06      	ldr	r3, [pc, #24]	; (19e70 <print_application_config+0x84>)
   19e58:	4798      	blx	r3

    printf("\n*******************************************************\n\r");
   19e5a:	4b0f      	ldr	r3, [pc, #60]	; (19e98 <print_application_config+0xac>)
   19e5c:	0018      	movs	r0, r3
   19e5e:	4b04      	ldr	r3, [pc, #16]	; (19e70 <print_application_config+0x84>)
   19e60:	4798      	blx	r3
}
   19e62:	46c0      	nop			; (mov r8, r8)
   19e64:	46bd      	mov	sp, r7
   19e66:	b002      	add	sp, #8
   19e68:	bd80      	pop	{r7, pc}
   19e6a:	46c0      	nop			; (mov r8, r8)
   19e6c:	0002c818 	.word	0x0002c818
   19e70:	00024261 	.word	0x00024261
   19e74:	0001bfa1 	.word	0x0001bfa1
   19e78:	0002c854 	.word	0x0002c854
   19e7c:	0002c860 	.word	0x0002c860
   19e80:	0002c86c 	.word	0x0002c86c
   19e84:	0002c878 	.word	0x0002c878
   19e88:	0002c88c 	.word	0x0002c88c
   19e8c:	0002c894 	.word	0x0002c894
   19e90:	0002c8ac 	.word	0x0002c8ac
   19e94:	0002c8bc 	.word	0x0002c8bc
   19e98:	0002c8cc 	.word	0x0002c8cc

00019e9c <print_stack_status>:
/*********************************************************************//*
 \brief      Function to Print stack return status
 \param[in]  status - Status from the stack
 ************************************************************************/
void print_stack_status(StackRetStatus_t status)
{
   19e9c:	b580      	push	{r7, lr}
   19e9e:	b082      	sub	sp, #8
   19ea0:	af00      	add	r7, sp, #0
   19ea2:	0002      	movs	r2, r0
   19ea4:	1dfb      	adds	r3, r7, #7
   19ea6:	701a      	strb	r2, [r3, #0]
    switch(status)
   19ea8:	1dfb      	adds	r3, r7, #7
   19eaa:	781b      	ldrb	r3, [r3, #0]
   19eac:	3b08      	subs	r3, #8
   19eae:	2b0d      	cmp	r3, #13
   19eb0:	d840      	bhi.n	19f34 <print_stack_status+0x98>
   19eb2:	009a      	lsls	r2, r3, #2
   19eb4:	4b25      	ldr	r3, [pc, #148]	; (19f4c <print_stack_status+0xb0>)
   19eb6:	18d3      	adds	r3, r2, r3
   19eb8:	681b      	ldr	r3, [r3, #0]
   19eba:	469f      	mov	pc, r3
    {
        case LORAWAN_SUCCESS:
             printf("\nlorawan_success\n\r");
   19ebc:	4b24      	ldr	r3, [pc, #144]	; (19f50 <print_stack_status+0xb4>)
   19ebe:	0018      	movs	r0, r3
   19ec0:	4b24      	ldr	r3, [pc, #144]	; (19f54 <print_stack_status+0xb8>)
   19ec2:	4798      	blx	r3
        break;
   19ec4:	e03e      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_BUSY:
             printf("\nlorawan_state : stack_Busy\n\r");
   19ec6:	4b24      	ldr	r3, [pc, #144]	; (19f58 <print_stack_status+0xbc>)
   19ec8:	0018      	movs	r0, r3
   19eca:	4b22      	ldr	r3, [pc, #136]	; (19f54 <print_stack_status+0xb8>)
   19ecc:	4798      	blx	r3
        break;
   19ece:	e039      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_NWK_NOT_JOINED:
            printf("\ndevice_not_joined_to_network\n\r");
   19ed0:	4b22      	ldr	r3, [pc, #136]	; (19f5c <print_stack_status+0xc0>)
   19ed2:	0018      	movs	r0, r3
   19ed4:	4b1f      	ldr	r3, [pc, #124]	; (19f54 <print_stack_status+0xb8>)
   19ed6:	4798      	blx	r3
        break;
   19ed8:	e034      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_INVALID_PARAMETER:
            printf("\ninvalid_parameter\n\r");
   19eda:	4b21      	ldr	r3, [pc, #132]	; (19f60 <print_stack_status+0xc4>)
   19edc:	0018      	movs	r0, r3
   19ede:	4b1d      	ldr	r3, [pc, #116]	; (19f54 <print_stack_status+0xb8>)
   19ee0:	4798      	blx	r3
        break;
   19ee2:	e02f      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_KEYS_NOT_INITIALIZED:
            printf("\nkeys_not_initialized\n\r");
   19ee4:	4b1f      	ldr	r3, [pc, #124]	; (19f64 <print_stack_status+0xc8>)
   19ee6:	0018      	movs	r0, r3
   19ee8:	4b1a      	ldr	r3, [pc, #104]	; (19f54 <print_stack_status+0xb8>)
   19eea:	4798      	blx	r3
        break;
   19eec:	e02a      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_SILENT_IMMEDIATELY_ACTIVE:
            printf("\nsilent_immediately_active\n\r");
   19eee:	4b1e      	ldr	r3, [pc, #120]	; (19f68 <print_stack_status+0xcc>)
   19ef0:	0018      	movs	r0, r3
   19ef2:	4b18      	ldr	r3, [pc, #96]	; (19f54 <print_stack_status+0xb8>)
   19ef4:	4798      	blx	r3
        break;
   19ef6:	e025      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_FCNTR_ERROR_REJOIN_NEEDED:
            printf("\nframecounter_error_rejoin_needed\n\r");
   19ef8:	4b1c      	ldr	r3, [pc, #112]	; (19f6c <print_stack_status+0xd0>)
   19efa:	0018      	movs	r0, r3
   19efc:	4b15      	ldr	r3, [pc, #84]	; (19f54 <print_stack_status+0xb8>)
   19efe:	4798      	blx	r3
        break;
   19f00:	e020      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_INVALID_BUFFER_LENGTH:
            printf("\ninvalid_buffer_length\n\r");
   19f02:	4b1b      	ldr	r3, [pc, #108]	; (19f70 <print_stack_status+0xd4>)
   19f04:	0018      	movs	r0, r3
   19f06:	4b13      	ldr	r3, [pc, #76]	; (19f54 <print_stack_status+0xb8>)
   19f08:	4798      	blx	r3
        break;
   19f0a:	e01b      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_MAC_PAUSED:
            printf("\nMAC_paused\n\r");
   19f0c:	4b19      	ldr	r3, [pc, #100]	; (19f74 <print_stack_status+0xd8>)
   19f0e:	0018      	movs	r0, r3
   19f10:	4b10      	ldr	r3, [pc, #64]	; (19f54 <print_stack_status+0xb8>)
   19f12:	4798      	blx	r3
        break;
   19f14:	e016      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_NO_CHANNELS_FOUND:
            printf("\nno_free_channels_found\n\r");
   19f16:	4b18      	ldr	r3, [pc, #96]	; (19f78 <print_stack_status+0xdc>)
   19f18:	0018      	movs	r0, r3
   19f1a:	4b0e      	ldr	r3, [pc, #56]	; (19f54 <print_stack_status+0xb8>)
   19f1c:	4798      	blx	r3
        break;
   19f1e:	e011      	b.n	19f44 <print_stack_status+0xa8>

        case LORAWAN_INVALID_REQUEST:
            printf("\nrequest_invalid\n\r");
   19f20:	4b16      	ldr	r3, [pc, #88]	; (19f7c <print_stack_status+0xe0>)
   19f22:	0018      	movs	r0, r3
   19f24:	4b0b      	ldr	r3, [pc, #44]	; (19f54 <print_stack_status+0xb8>)
   19f26:	4798      	blx	r3
        break;
   19f28:	e00c      	b.n	19f44 <print_stack_status+0xa8>
        case LORAWAN_NWK_JOIN_IN_PROGRESS:
            printf("\nprev_join_request_in_progress\n\r");
   19f2a:	4b15      	ldr	r3, [pc, #84]	; (19f80 <print_stack_status+0xe4>)
   19f2c:	0018      	movs	r0, r3
   19f2e:	4b09      	ldr	r3, [pc, #36]	; (19f54 <print_stack_status+0xb8>)
   19f30:	4798      	blx	r3
        break;
   19f32:	e007      	b.n	19f44 <print_stack_status+0xa8>
        default:
           printf("\nrequest_failed %d\n\r",status);
   19f34:	1dfb      	adds	r3, r7, #7
   19f36:	781a      	ldrb	r2, [r3, #0]
   19f38:	4b12      	ldr	r3, [pc, #72]	; (19f84 <print_stack_status+0xe8>)
   19f3a:	0011      	movs	r1, r2
   19f3c:	0018      	movs	r0, r3
   19f3e:	4b05      	ldr	r3, [pc, #20]	; (19f54 <print_stack_status+0xb8>)
   19f40:	4798      	blx	r3
        break;
   19f42:	46c0      	nop			; (mov r8, r8)
    }
}
   19f44:	46c0      	nop			; (mov r8, r8)
   19f46:	46bd      	mov	sp, r7
   19f48:	b002      	add	sp, #8
   19f4a:	bd80      	pop	{r7, pc}
   19f4c:	0002cb60 	.word	0x0002cb60
   19f50:	0002c908 	.word	0x0002c908
   19f54:	00024261 	.word	0x00024261
   19f58:	0002c91c 	.word	0x0002c91c
   19f5c:	0002c93c 	.word	0x0002c93c
   19f60:	0002c95c 	.word	0x0002c95c
   19f64:	0002c974 	.word	0x0002c974
   19f68:	0002c98c 	.word	0x0002c98c
   19f6c:	0002c9ac 	.word	0x0002c9ac
   19f70:	0002c9d0 	.word	0x0002c9d0
   19f74:	0002c9ec 	.word	0x0002c9ec
   19f78:	0002c9fc 	.word	0x0002c9fc
   19f7c:	0002ca18 	.word	0x0002ca18
   19f80:	0002ca2c 	.word	0x0002ca2c
   19f84:	0002ca50 	.word	0x0002ca50

00019f88 <dev_eui_read>:

/*************************************************************************************************//*
 \brief      Reads the DEV EUI if it is flashed in EDBG MCU(SAMR34 Xplained Pro)/ Module(WLR089) 
 **************************************************************************************************/
void dev_eui_read(void)
{
   19f88:	b580      	push	{r7, lr}
   19f8a:	af00      	add	r7, sp, #0
				/* Set EUI addr in Module if there */
				memcpy(demoDevEui, moduleDevEUI, sizeof(demoDevEui));
			}
		#endif
	#endif
}
   19f8c:	46c0      	nop			; (mov r8, r8)
   19f8e:	46bd      	mov	sp, r7
   19f90:	bd80      	pop	{r7, pc}
	...

00019f94 <system_pinmux_get_group_from_gpio_pin>:
{
   19f94:	b580      	push	{r7, lr}
   19f96:	b084      	sub	sp, #16
   19f98:	af00      	add	r7, sp, #0
   19f9a:	0002      	movs	r2, r0
   19f9c:	1dfb      	adds	r3, r7, #7
   19f9e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   19fa0:	230f      	movs	r3, #15
   19fa2:	18fb      	adds	r3, r7, r3
   19fa4:	1dfa      	adds	r2, r7, #7
   19fa6:	7812      	ldrb	r2, [r2, #0]
   19fa8:	09d2      	lsrs	r2, r2, #7
   19faa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   19fac:	230e      	movs	r3, #14
   19fae:	18fb      	adds	r3, r7, r3
   19fb0:	1dfa      	adds	r2, r7, #7
   19fb2:	7812      	ldrb	r2, [r2, #0]
   19fb4:	0952      	lsrs	r2, r2, #5
   19fb6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   19fb8:	4b0d      	ldr	r3, [pc, #52]	; (19ff0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   19fba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   19fbc:	230f      	movs	r3, #15
   19fbe:	18fb      	adds	r3, r7, r3
   19fc0:	781b      	ldrb	r3, [r3, #0]
   19fc2:	2b00      	cmp	r3, #0
   19fc4:	d10f      	bne.n	19fe6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   19fc6:	230f      	movs	r3, #15
   19fc8:	18fb      	adds	r3, r7, r3
   19fca:	781b      	ldrb	r3, [r3, #0]
   19fcc:	009b      	lsls	r3, r3, #2
   19fce:	2210      	movs	r2, #16
   19fd0:	4694      	mov	ip, r2
   19fd2:	44bc      	add	ip, r7
   19fd4:	4463      	add	r3, ip
   19fd6:	3b08      	subs	r3, #8
   19fd8:	681a      	ldr	r2, [r3, #0]
   19fda:	230e      	movs	r3, #14
   19fdc:	18fb      	adds	r3, r7, r3
   19fde:	781b      	ldrb	r3, [r3, #0]
   19fe0:	01db      	lsls	r3, r3, #7
   19fe2:	18d3      	adds	r3, r2, r3
   19fe4:	e000      	b.n	19fe8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19fe6:	2300      	movs	r3, #0
}
   19fe8:	0018      	movs	r0, r3
   19fea:	46bd      	mov	sp, r7
   19fec:	b004      	add	sp, #16
   19fee:	bd80      	pop	{r7, pc}
   19ff0:	40002800 	.word	0x40002800

00019ff4 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
   19ff4:	b580      	push	{r7, lr}
   19ff6:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
   19ff8:	4b02      	ldr	r3, [pc, #8]	; (1a004 <system_get_reset_cause+0x10>)
   19ffa:	781b      	ldrb	r3, [r3, #0]
   19ffc:	b2db      	uxtb	r3, r3
}
   19ffe:	0018      	movs	r0, r3
   1a000:	46bd      	mov	sp, r7
   1a002:	bd80      	pop	{r7, pc}
   1a004:	40000800 	.word	0x40000800

0001a008 <system_interrupt_enable>:
{
   1a008:	b580      	push	{r7, lr}
   1a00a:	b082      	sub	sp, #8
   1a00c:	af00      	add	r7, sp, #0
   1a00e:	0002      	movs	r2, r0
   1a010:	1dfb      	adds	r3, r7, #7
   1a012:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a014:	4b06      	ldr	r3, [pc, #24]	; (1a030 <system_interrupt_enable+0x28>)
   1a016:	1dfa      	adds	r2, r7, #7
   1a018:	7812      	ldrb	r2, [r2, #0]
   1a01a:	0011      	movs	r1, r2
   1a01c:	221f      	movs	r2, #31
   1a01e:	400a      	ands	r2, r1
   1a020:	2101      	movs	r1, #1
   1a022:	4091      	lsls	r1, r2
   1a024:	000a      	movs	r2, r1
   1a026:	601a      	str	r2, [r3, #0]
}
   1a028:	46c0      	nop			; (mov r8, r8)
   1a02a:	46bd      	mov	sp, r7
   1a02c:	b002      	add	sp, #8
   1a02e:	bd80      	pop	{r7, pc}
   1a030:	e000e100 	.word	0xe000e100

0001a034 <adc_is_syncing>:
{
   1a034:	b580      	push	{r7, lr}
   1a036:	b084      	sub	sp, #16
   1a038:	af00      	add	r7, sp, #0
   1a03a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1a03c:	687b      	ldr	r3, [r7, #4]
   1a03e:	681b      	ldr	r3, [r3, #0]
   1a040:	60fb      	str	r3, [r7, #12]
	if (adc_module->SYNCBUSY.reg) {
   1a042:	68fb      	ldr	r3, [r7, #12]
   1a044:	8c1b      	ldrh	r3, [r3, #32]
   1a046:	b29b      	uxth	r3, r3
   1a048:	2b00      	cmp	r3, #0
   1a04a:	d001      	beq.n	1a050 <adc_is_syncing+0x1c>
		return true;
   1a04c:	2301      	movs	r3, #1
   1a04e:	e000      	b.n	1a052 <adc_is_syncing+0x1e>
	return false;
   1a050:	2300      	movs	r3, #0
}
   1a052:	0018      	movs	r0, r3
   1a054:	46bd      	mov	sp, r7
   1a056:	b004      	add	sp, #16
   1a058:	bd80      	pop	{r7, pc}
	...

0001a05c <adc_enable>:
{
   1a05c:	b580      	push	{r7, lr}
   1a05e:	b084      	sub	sp, #16
   1a060:	af00      	add	r7, sp, #0
   1a062:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1a064:	687b      	ldr	r3, [r7, #4]
   1a066:	681b      	ldr	r3, [r3, #0]
   1a068:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   1a06a:	46c0      	nop			; (mov r8, r8)
   1a06c:	687b      	ldr	r3, [r7, #4]
   1a06e:	0018      	movs	r0, r3
   1a070:	4b10      	ldr	r3, [pc, #64]	; (1a0b4 <adc_enable+0x58>)
   1a072:	4798      	blx	r3
   1a074:	1e03      	subs	r3, r0, #0
   1a076:	d1f9      	bne.n	1a06c <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   1a078:	2016      	movs	r0, #22
   1a07a:	4b0f      	ldr	r3, [pc, #60]	; (1a0b8 <adc_enable+0x5c>)
   1a07c:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   1a07e:	68fb      	ldr	r3, [r7, #12]
   1a080:	2207      	movs	r2, #7
   1a082:	711a      	strb	r2, [r3, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   1a084:	68fb      	ldr	r3, [r7, #12]
   1a086:	2207      	movs	r2, #7
   1a088:	719a      	strb	r2, [r3, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   1a08a:	68fb      	ldr	r3, [r7, #12]
   1a08c:	781b      	ldrb	r3, [r3, #0]
   1a08e:	b2db      	uxtb	r3, r3
   1a090:	2202      	movs	r2, #2
   1a092:	4313      	orrs	r3, r2
   1a094:	b2da      	uxtb	r2, r3
   1a096:	68fb      	ldr	r3, [r7, #12]
   1a098:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
   1a09a:	46c0      	nop			; (mov r8, r8)
   1a09c:	687b      	ldr	r3, [r7, #4]
   1a09e:	0018      	movs	r0, r3
   1a0a0:	4b04      	ldr	r3, [pc, #16]	; (1a0b4 <adc_enable+0x58>)
   1a0a2:	4798      	blx	r3
   1a0a4:	1e03      	subs	r3, r0, #0
   1a0a6:	d1f9      	bne.n	1a09c <adc_enable+0x40>
	return STATUS_OK;
   1a0a8:	2300      	movs	r3, #0
}
   1a0aa:	0018      	movs	r0, r3
   1a0ac:	46bd      	mov	sp, r7
   1a0ae:	b004      	add	sp, #16
   1a0b0:	bd80      	pop	{r7, pc}
   1a0b2:	46c0      	nop			; (mov r8, r8)
   1a0b4:	0001a035 	.word	0x0001a035
   1a0b8:	0001a009 	.word	0x0001a009

0001a0bc <port_get_group_from_gpio_pin>:
{
   1a0bc:	b580      	push	{r7, lr}
   1a0be:	b082      	sub	sp, #8
   1a0c0:	af00      	add	r7, sp, #0
   1a0c2:	0002      	movs	r2, r0
   1a0c4:	1dfb      	adds	r3, r7, #7
   1a0c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1a0c8:	1dfb      	adds	r3, r7, #7
   1a0ca:	781b      	ldrb	r3, [r3, #0]
   1a0cc:	0018      	movs	r0, r3
   1a0ce:	4b03      	ldr	r3, [pc, #12]	; (1a0dc <port_get_group_from_gpio_pin+0x20>)
   1a0d0:	4798      	blx	r3
   1a0d2:	0003      	movs	r3, r0
}
   1a0d4:	0018      	movs	r0, r3
   1a0d6:	46bd      	mov	sp, r7
   1a0d8:	b002      	add	sp, #8
   1a0da:	bd80      	pop	{r7, pc}
   1a0dc:	00019f95 	.word	0x00019f95

0001a0e0 <port_get_config_defaults>:
{
   1a0e0:	b580      	push	{r7, lr}
   1a0e2:	b082      	sub	sp, #8
   1a0e4:	af00      	add	r7, sp, #0
   1a0e6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1a0e8:	687b      	ldr	r3, [r7, #4]
   1a0ea:	2200      	movs	r2, #0
   1a0ec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1a0ee:	687b      	ldr	r3, [r7, #4]
   1a0f0:	2201      	movs	r2, #1
   1a0f2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1a0f4:	687b      	ldr	r3, [r7, #4]
   1a0f6:	2200      	movs	r2, #0
   1a0f8:	709a      	strb	r2, [r3, #2]
}
   1a0fa:	46c0      	nop			; (mov r8, r8)
   1a0fc:	46bd      	mov	sp, r7
   1a0fe:	b002      	add	sp, #8
   1a100:	bd80      	pop	{r7, pc}
	...

0001a104 <port_pin_set_output_level>:
{
   1a104:	b580      	push	{r7, lr}
   1a106:	b084      	sub	sp, #16
   1a108:	af00      	add	r7, sp, #0
   1a10a:	0002      	movs	r2, r0
   1a10c:	1dfb      	adds	r3, r7, #7
   1a10e:	701a      	strb	r2, [r3, #0]
   1a110:	1dbb      	adds	r3, r7, #6
   1a112:	1c0a      	adds	r2, r1, #0
   1a114:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1a116:	1dfb      	adds	r3, r7, #7
   1a118:	781b      	ldrb	r3, [r3, #0]
   1a11a:	0018      	movs	r0, r3
   1a11c:	4b0d      	ldr	r3, [pc, #52]	; (1a154 <port_pin_set_output_level+0x50>)
   1a11e:	4798      	blx	r3
   1a120:	0003      	movs	r3, r0
   1a122:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1a124:	1dfb      	adds	r3, r7, #7
   1a126:	781b      	ldrb	r3, [r3, #0]
   1a128:	221f      	movs	r2, #31
   1a12a:	4013      	ands	r3, r2
   1a12c:	2201      	movs	r2, #1
   1a12e:	409a      	lsls	r2, r3
   1a130:	0013      	movs	r3, r2
   1a132:	60bb      	str	r3, [r7, #8]
	if (level) {
   1a134:	1dbb      	adds	r3, r7, #6
   1a136:	781b      	ldrb	r3, [r3, #0]
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d003      	beq.n	1a144 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1a13c:	68fb      	ldr	r3, [r7, #12]
   1a13e:	68ba      	ldr	r2, [r7, #8]
   1a140:	619a      	str	r2, [r3, #24]
}
   1a142:	e002      	b.n	1a14a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1a144:	68fb      	ldr	r3, [r7, #12]
   1a146:	68ba      	ldr	r2, [r7, #8]
   1a148:	615a      	str	r2, [r3, #20]
}
   1a14a:	46c0      	nop			; (mov r8, r8)
   1a14c:	46bd      	mov	sp, r7
   1a14e:	b004      	add	sp, #16
   1a150:	bd80      	pop	{r7, pc}
   1a152:	46c0      	nop			; (mov r8, r8)
   1a154:	0001a0bd 	.word	0x0001a0bd

0001a158 <print_reset_causes>:
#endif

/****************************** FUNCTIONS **************************************/

static void print_reset_causes(void)
{
   1a158:	b590      	push	{r4, r7, lr}
   1a15a:	b083      	sub	sp, #12
   1a15c:	af00      	add	r7, sp, #0
    enum system_reset_cause rcause = system_get_reset_cause();
   1a15e:	1dfc      	adds	r4, r7, #7
   1a160:	4b20      	ldr	r3, [pc, #128]	; (1a1e4 <print_reset_causes+0x8c>)
   1a162:	4798      	blx	r3
   1a164:	0003      	movs	r3, r0
   1a166:	7023      	strb	r3, [r4, #0]
    printf("Last reset cause: ");
   1a168:	4b1f      	ldr	r3, [pc, #124]	; (1a1e8 <print_reset_causes+0x90>)
   1a16a:	0018      	movs	r0, r3
   1a16c:	4b1f      	ldr	r3, [pc, #124]	; (1a1ec <print_reset_causes+0x94>)
   1a16e:	4798      	blx	r3
    if(rcause & (1 << 6)) {
   1a170:	1dfb      	adds	r3, r7, #7
   1a172:	781b      	ldrb	r3, [r3, #0]
   1a174:	2240      	movs	r2, #64	; 0x40
   1a176:	4013      	ands	r3, r2
   1a178:	d003      	beq.n	1a182 <print_reset_causes+0x2a>
        printf("System Reset Request\r\n");
   1a17a:	4b1d      	ldr	r3, [pc, #116]	; (1a1f0 <print_reset_causes+0x98>)
   1a17c:	0018      	movs	r0, r3
   1a17e:	4b1d      	ldr	r3, [pc, #116]	; (1a1f4 <print_reset_causes+0x9c>)
   1a180:	4798      	blx	r3
    }
    if(rcause & (1 << 5)) {
   1a182:	1dfb      	adds	r3, r7, #7
   1a184:	781b      	ldrb	r3, [r3, #0]
   1a186:	2220      	movs	r2, #32
   1a188:	4013      	ands	r3, r2
   1a18a:	d003      	beq.n	1a194 <print_reset_causes+0x3c>
        printf("Watchdog Reset\r\n");
   1a18c:	4b1a      	ldr	r3, [pc, #104]	; (1a1f8 <print_reset_causes+0xa0>)
   1a18e:	0018      	movs	r0, r3
   1a190:	4b18      	ldr	r3, [pc, #96]	; (1a1f4 <print_reset_causes+0x9c>)
   1a192:	4798      	blx	r3
    }
    if(rcause & (1 << 4)) {
   1a194:	1dfb      	adds	r3, r7, #7
   1a196:	781b      	ldrb	r3, [r3, #0]
   1a198:	2210      	movs	r2, #16
   1a19a:	4013      	ands	r3, r2
   1a19c:	d003      	beq.n	1a1a6 <print_reset_causes+0x4e>
        printf("External Reset\r\n");
   1a19e:	4b17      	ldr	r3, [pc, #92]	; (1a1fc <print_reset_causes+0xa4>)
   1a1a0:	0018      	movs	r0, r3
   1a1a2:	4b14      	ldr	r3, [pc, #80]	; (1a1f4 <print_reset_causes+0x9c>)
   1a1a4:	4798      	blx	r3
    }
    if(rcause & (1 << 2)) {
   1a1a6:	1dfb      	adds	r3, r7, #7
   1a1a8:	781b      	ldrb	r3, [r3, #0]
   1a1aa:	2204      	movs	r2, #4
   1a1ac:	4013      	ands	r3, r2
   1a1ae:	d003      	beq.n	1a1b8 <print_reset_causes+0x60>
        printf("Brown Out 33 Detector Reset\r\n");
   1a1b0:	4b13      	ldr	r3, [pc, #76]	; (1a200 <print_reset_causes+0xa8>)
   1a1b2:	0018      	movs	r0, r3
   1a1b4:	4b0f      	ldr	r3, [pc, #60]	; (1a1f4 <print_reset_causes+0x9c>)
   1a1b6:	4798      	blx	r3
    }
    if(rcause & (1 << 1)) {
   1a1b8:	1dfb      	adds	r3, r7, #7
   1a1ba:	781b      	ldrb	r3, [r3, #0]
   1a1bc:	2202      	movs	r2, #2
   1a1be:	4013      	ands	r3, r2
   1a1c0:	d003      	beq.n	1a1ca <print_reset_causes+0x72>
        printf("Brown Out 12 Detector Reset\r\n");
   1a1c2:	4b10      	ldr	r3, [pc, #64]	; (1a204 <print_reset_causes+0xac>)
   1a1c4:	0018      	movs	r0, r3
   1a1c6:	4b0b      	ldr	r3, [pc, #44]	; (1a1f4 <print_reset_causes+0x9c>)
   1a1c8:	4798      	blx	r3
    }
    if(rcause & (1 << 0)) {
   1a1ca:	1dfb      	adds	r3, r7, #7
   1a1cc:	781b      	ldrb	r3, [r3, #0]
   1a1ce:	2201      	movs	r2, #1
   1a1d0:	4013      	ands	r3, r2
   1a1d2:	d003      	beq.n	1a1dc <print_reset_causes+0x84>
        printf("Power-On Reset\r\n");
   1a1d4:	4b0c      	ldr	r3, [pc, #48]	; (1a208 <print_reset_causes+0xb0>)
   1a1d6:	0018      	movs	r0, r3
   1a1d8:	4b06      	ldr	r3, [pc, #24]	; (1a1f4 <print_reset_causes+0x9c>)
   1a1da:	4798      	blx	r3
    }
}
   1a1dc:	46c0      	nop			; (mov r8, r8)
   1a1de:	46bd      	mov	sp, r7
   1a1e0:	b003      	add	sp, #12
   1a1e2:	bd90      	pop	{r4, r7, pc}
   1a1e4:	00019ff5 	.word	0x00019ff5
   1a1e8:	0002cb98 	.word	0x0002cb98
   1a1ec:	00024261 	.word	0x00024261
   1a1f0:	0002cbac 	.word	0x0002cbac
   1a1f4:	00024325 	.word	0x00024325
   1a1f8:	0002cbc4 	.word	0x0002cbc4
   1a1fc:	0002cbd4 	.word	0x0002cbd4
   1a200:	0002cbe4 	.word	0x0002cbe4
   1a204:	0002cc04 	.word	0x0002cc04
   1a208:	0002cc24 	.word	0x0002cc24

0001a20c <appWakeup>:

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
   1a20c:	b580      	push	{r7, lr}
   1a20e:	b082      	sub	sp, #8
   1a210:	af00      	add	r7, sp, #0
   1a212:	6078      	str	r0, [r7, #4]
    HAL_Radio_resources_init();
   1a214:	4b06      	ldr	r3, [pc, #24]	; (1a230 <appWakeup+0x24>)
   1a216:	4798      	blx	r3
    sio2host_init();
   1a218:	4b06      	ldr	r3, [pc, #24]	; (1a234 <appWakeup+0x28>)
   1a21a:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
   1a21c:	687a      	ldr	r2, [r7, #4]
   1a21e:	4b06      	ldr	r3, [pc, #24]	; (1a238 <appWakeup+0x2c>)
   1a220:	0011      	movs	r1, r2
   1a222:	0018      	movs	r0, r3
   1a224:	4b05      	ldr	r3, [pc, #20]	; (1a23c <appWakeup+0x30>)
   1a226:	4798      	blx	r3

}
   1a228:	46c0      	nop			; (mov r8, r8)
   1a22a:	46bd      	mov	sp, r7
   1a22c:	b002      	add	sp, #8
   1a22e:	bd80      	pop	{r7, pc}
   1a230:	00006da1 	.word	0x00006da1
   1a234:	000066e9 	.word	0x000066e9
   1a238:	0002cc34 	.word	0x0002cc34
   1a23c:	00024261 	.word	0x00024261

0001a240 <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
   1a240:	b580      	push	{r7, lr}
   1a242:	b084      	sub	sp, #16
   1a244:	af00      	add	r7, sp, #0
	
    /* System Initialization */
    system_init();
   1a246:	4b2b      	ldr	r3, [pc, #172]	; (1a2f4 <main+0xb4>)
   1a248:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
   1a24a:	4b2b      	ldr	r3, [pc, #172]	; (1a2f8 <main+0xb8>)
   1a24c:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
   1a24e:	4b2b      	ldr	r3, [pc, #172]	; (1a2fc <main+0xbc>)
   1a250:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
   1a252:	4b2b      	ldr	r3, [pc, #172]	; (1a300 <main+0xc0>)
   1a254:	2201      	movs	r2, #1
   1a256:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1a258:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1a25c:	b662      	cpsie	i
	/* Initialize the Serial Interface */
	sio2host_init();
   1a25e:	4b29      	ldr	r3, [pc, #164]	; (1a304 <main+0xc4>)
   1a260:	4798      	blx	r3
#ifndef CRYPTO_DEV_ENABLED
 	/* Read DEV EUI from EDBG */
    dev_eui_read();
   1a262:	4b29      	ldr	r3, [pc, #164]	; (1a308 <main+0xc8>)
   1a264:	4798      	blx	r3
#endif
    /* Initialize Hardware and Software Modules */
	driver_init();
   1a266:	4b29      	ldr	r3, [pc, #164]	; (1a30c <main+0xcc>)
   1a268:	4798      	blx	r3
	
    delay_ms(5);
   1a26a:	2005      	movs	r0, #5
   1a26c:	4b28      	ldr	r3, [pc, #160]	; (1a310 <main+0xd0>)
   1a26e:	4798      	blx	r3
    print_reset_causes();
   1a270:	4b28      	ldr	r3, [pc, #160]	; (1a314 <main+0xd4>)
   1a272:	4798      	blx	r3
#if (_DEBUG_ == 1)
    SYSTEM_AssertSubscribe(assertHandler);
#endif
    /* Initialize demo application */
    Stack_Init();
   1a274:	4b28      	ldr	r3, [pc, #160]	; (1a318 <main+0xd8>)
   1a276:	4798      	blx	r3

    SwTimerCreate(&demoTimerId);
   1a278:	4b28      	ldr	r3, [pc, #160]	; (1a31c <main+0xdc>)
   1a27a:	0018      	movs	r0, r3
   1a27c:	4b28      	ldr	r3, [pc, #160]	; (1a320 <main+0xe0>)
   1a27e:	4798      	blx	r3
    SwTimerCreate(&lTimerId);
   1a280:	4b28      	ldr	r3, [pc, #160]	; (1a324 <main+0xe4>)
   1a282:	0018      	movs	r0, r3
   1a284:	4b26      	ldr	r3, [pc, #152]	; (1a320 <main+0xe0>)
   1a286:	4798      	blx	r3

    mote_demo_init();
   1a288:	4b27      	ldr	r3, [pc, #156]	; (1a328 <main+0xe8>)
   1a28a:	4798      	blx	r3
	setup_ADC();   //Temperature
   1a28c:	4b27      	ldr	r3, [pc, #156]	; (1a32c <main+0xec>)
   1a28e:	4798      	blx	r3
	config_board();
   1a290:	4b27      	ldr	r3, [pc, #156]	; (1a330 <main+0xf0>)
   1a292:	4798      	blx	r3
	
	
	
    while (1)
    {
		serial_data_handler();
   1a294:	4b27      	ldr	r3, [pc, #156]	; (1a334 <main+0xf4>)
   1a296:	4798      	blx	r3
        SYSTEM_RunTasks();
   1a298:	4b27      	ldr	r3, [pc, #156]	; (1a338 <main+0xf8>)
   1a29a:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
        if (false == certAppEnabled)
   1a29c:	4b27      	ldr	r3, [pc, #156]	; (1a33c <main+0xfc>)
   1a29e:	781b      	ldrb	r3, [r3, #0]
   1a2a0:	2201      	movs	r2, #1
   1a2a2:	4053      	eors	r3, r2
   1a2a4:	b2db      	uxtb	r3, r3
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d0f4      	beq.n	1a294 <main+0x54>
        {
            if(bandSelected == true)
   1a2aa:	4b25      	ldr	r3, [pc, #148]	; (1a340 <main+0x100>)
   1a2ac:	781b      	ldrb	r3, [r3, #0]
   1a2ae:	2b00      	cmp	r3, #0
   1a2b0:	d0f0      	beq.n	1a294 <main+0x54>
            {
                PMM_SleepReq_t sleepReq;
                /* Put the application to sleep */
                sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
   1a2b2:	1d3b      	adds	r3, r7, #4
   1a2b4:	4a23      	ldr	r2, [pc, #140]	; (1a344 <main+0x104>)
   1a2b6:	601a      	str	r2, [r3, #0]
                sleepReq.pmmWakeupCallback = appWakeup;
   1a2b8:	1d3b      	adds	r3, r7, #4
   1a2ba:	4a23      	ldr	r2, [pc, #140]	; (1a348 <main+0x108>)
   1a2bc:	609a      	str	r2, [r3, #8]
                sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
   1a2be:	1d3b      	adds	r3, r7, #4
   1a2c0:	2201      	movs	r2, #1
   1a2c2:	711a      	strb	r2, [r3, #4]
                if (CONF_PMM_SLEEPMODE_WHEN_IDLE == SLEEP_MODE_STANDBY)
                {
                    deviceResetsForWakeup = false;
   1a2c4:	4b21      	ldr	r3, [pc, #132]	; (1a34c <main+0x10c>)
   1a2c6:	2200      	movs	r2, #0
   1a2c8:	701a      	strb	r2, [r3, #0]
                }
                if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
   1a2ca:	4b20      	ldr	r3, [pc, #128]	; (1a34c <main+0x10c>)
   1a2cc:	781b      	ldrb	r3, [r3, #0]
   1a2ce:	0018      	movs	r0, r3
   1a2d0:	4b1f      	ldr	r3, [pc, #124]	; (1a350 <main+0x110>)
   1a2d2:	4798      	blx	r3
   1a2d4:	1e03      	subs	r3, r0, #0
   1a2d6:	d0dd      	beq.n	1a294 <main+0x54>
                {
                    app_resources_uninit();
   1a2d8:	4b1e      	ldr	r3, [pc, #120]	; (1a354 <main+0x114>)
   1a2da:	4798      	blx	r3
                    if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
   1a2dc:	1d3b      	adds	r3, r7, #4
   1a2de:	0018      	movs	r0, r3
   1a2e0:	4b1d      	ldr	r3, [pc, #116]	; (1a358 <main+0x118>)
   1a2e2:	4798      	blx	r3
   1a2e4:	1e03      	subs	r3, r0, #0
   1a2e6:	d1d5      	bne.n	1a294 <main+0x54>
                    {
                        HAL_Radio_resources_init();
   1a2e8:	4b1c      	ldr	r3, [pc, #112]	; (1a35c <main+0x11c>)
   1a2ea:	4798      	blx	r3
                        sio2host_init();
   1a2ec:	4b05      	ldr	r3, [pc, #20]	; (1a304 <main+0xc4>)
   1a2ee:	4798      	blx	r3
		serial_data_handler();
   1a2f0:	e7d0      	b.n	1a294 <main+0x54>
   1a2f2:	46c0      	nop			; (mov r8, r8)
   1a2f4:	000057b5 	.word	0x000057b5
   1a2f8:	00000149 	.word	0x00000149
   1a2fc:	00000391 	.word	0x00000391
   1a300:	20000008 	.word	0x20000008
   1a304:	000066e9 	.word	0x000066e9
   1a308:	00019f89 	.word	0x00019f89
   1a30c:	0001a361 	.word	0x0001a361
   1a310:	000001d1 	.word	0x000001d1
   1a314:	0001a159 	.word	0x0001a159
   1a318:	00016209 	.word	0x00016209
   1a31c:	200001e5 	.word	0x200001e5
   1a320:	00015965 	.word	0x00015965
   1a324:	200001e6 	.word	0x200001e6
   1a328:	00018c09 	.word	0x00018c09
   1a32c:	0001a3bd 	.word	0x0001a3bd
   1a330:	0001a45d 	.word	0x0001a45d
   1a334:	00018471 	.word	0x00018471
   1a338:	0001621d 	.word	0x0001621d
   1a33c:	20001126 	.word	0x20001126
   1a340:	2000114b 	.word	0x2000114b
   1a344:	00007530 	.word	0x00007530
   1a348:	0001a20d 	.word	0x0001a20d
   1a34c:	2000114c 	.word	0x2000114c
   1a350:	0001eb39 	.word	0x0001eb39
   1a354:	0001a4b9 	.word	0x0001a4b9
   1a358:	00007745 	.word	0x00007745
   1a35c:	00006da1 	.word	0x00006da1

0001a360 <driver_init>:
    }
}

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
   1a360:	b590      	push	{r4, r7, lr}
   1a362:	b083      	sub	sp, #12
   1a364:	af00      	add	r7, sp, #0
	SalStatus_t sal_status = SAL_SUCCESS;
   1a366:	1dfb      	adds	r3, r7, #7
   1a368:	2200      	movs	r2, #0
   1a36a:	701a      	strb	r2, [r3, #0]
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
   1a36c:	4b0c      	ldr	r3, [pc, #48]	; (1a3a0 <driver_init+0x40>)
   1a36e:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
   1a370:	4b0c      	ldr	r3, [pc, #48]	; (1a3a4 <driver_init+0x44>)
   1a372:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
   1a374:	4b0c      	ldr	r3, [pc, #48]	; (1a3a8 <driver_init+0x48>)
   1a376:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
   1a378:	4b0c      	ldr	r3, [pc, #48]	; (1a3ac <driver_init+0x4c>)
   1a37a:	4798      	blx	r3
#endif
	/* Initializes the Security modules */
	sal_status = SAL_Init();
   1a37c:	1dfc      	adds	r4, r7, #7
   1a37e:	4b0c      	ldr	r3, [pc, #48]	; (1a3b0 <driver_init+0x50>)
   1a380:	4798      	blx	r3
   1a382:	0003      	movs	r3, r0
   1a384:	7023      	strb	r3, [r4, #0]
	
	if (SAL_SUCCESS != sal_status)
   1a386:	1dfb      	adds	r3, r7, #7
   1a388:	781b      	ldrb	r3, [r3, #0]
   1a38a:	2b00      	cmp	r3, #0
   1a38c:	d004      	beq.n	1a398 <driver_init+0x38>
	{
		printf("Initialization of Security module is failed\r\n");
   1a38e:	4b09      	ldr	r3, [pc, #36]	; (1a3b4 <driver_init+0x54>)
   1a390:	0018      	movs	r0, r3
   1a392:	4b09      	ldr	r3, [pc, #36]	; (1a3b8 <driver_init+0x58>)
   1a394:	4798      	blx	r3
		/* Stop Further execution */
		while (1) {
   1a396:	e7fe      	b.n	1a396 <driver_init+0x36>
		}
	}
}
   1a398:	46c0      	nop			; (mov r8, r8)
   1a39a:	46bd      	mov	sp, r7
   1a39c:	b003      	add	sp, #12
   1a39e:	bd90      	pop	{r4, r7, pc}
   1a3a0:	00006d85 	.word	0x00006d85
   1a3a4:	000158fd 	.word	0x000158fd
   1a3a8:	000075a1 	.word	0x000075a1
   1a3ac:	00013b19 	.word	0x00013b19
   1a3b0:	000132bd 	.word	0x000132bd
   1a3b4:	0002cc48 	.word	0x0002cc48
   1a3b8:	00024325 	.word	0x00024325

0001a3bc <setup_ADC>:

static void setup_ADC(void){
   1a3bc:	b580      	push	{r7, lr}
   1a3be:	b08c      	sub	sp, #48	; 0x30
   1a3c0:	af00      	add	r7, sp, #0
	//Get the default ADC config settings
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   1a3c2:	1d3b      	adds	r3, r7, #4
   1a3c4:	0018      	movs	r0, r3
   1a3c6:	4b1b      	ldr	r3, [pc, #108]	; (1a434 <setup_ADC+0x78>)
   1a3c8:	4798      	blx	r3
		No reference compensation
		No gain/offset correction
		No added sampling time
	*/
	//Set the first pin to be read by the ADC
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN6;  //PA06 ADC+   //Only need the first positive channel in the sequence
   1a3ca:	1d3b      	adds	r3, r7, #4
   1a3cc:	2206      	movs	r2, #6
   1a3ce:	711a      	strb	r2, [r3, #4]
	//Set the absolute pins that will be used for ADC.
	//This should set the SEQCTRL register, but it doesn't.
	config_adc.positive_input_sequence_mask_enable = 0x100C0;  //Pins PA06,PA07,PA08 are Ain 6,7,16  1 0000 0000 1100 0000b
   1a3d0:	1d3b      	adds	r3, r7, #4
   1a3d2:	4a19      	ldr	r2, [pc, #100]	; (1a438 <setup_ADC+0x7c>)
   1a3d4:	611a      	str	r2, [r3, #16]
	//Instead, manually set the SEQCTRL register.  Doing in 3 calls because I couldn't think to do it properly.
	//Set the Sequence control
	memset((uint8_t *)0x43000C28U, 0xC0U, sizeof(uint8_t));  //ADC SEQCTRL base address.
   1a3d6:	4b19      	ldr	r3, [pc, #100]	; (1a43c <setup_ADC+0x80>)
   1a3d8:	2201      	movs	r2, #1
   1a3da:	21c0      	movs	r1, #192	; 0xc0
   1a3dc:	0018      	movs	r0, r3
   1a3de:	4b18      	ldr	r3, [pc, #96]	; (1a440 <setup_ADC+0x84>)
   1a3e0:	4798      	blx	r3
	memset((uint8_t *)0x43000C29U, 0x00U, sizeof(uint8_t));  //
   1a3e2:	4b18      	ldr	r3, [pc, #96]	; (1a444 <setup_ADC+0x88>)
   1a3e4:	2201      	movs	r2, #1
   1a3e6:	2100      	movs	r1, #0
   1a3e8:	0018      	movs	r0, r3
   1a3ea:	4b15      	ldr	r3, [pc, #84]	; (1a440 <setup_ADC+0x84>)
   1a3ec:	4798      	blx	r3
	memset((uint8_t *)0x43000C2AU, 0x01U, sizeof(uint8_t));  //
   1a3ee:	4b16      	ldr	r3, [pc, #88]	; (1a448 <setup_ADC+0x8c>)
   1a3f0:	2201      	movs	r2, #1
   1a3f2:	2101      	movs	r1, #1
   1a3f4:	0018      	movs	r0, r3
   1a3f6:	4b12      	ldr	r3, [pc, #72]	; (1a440 <setup_ADC+0x84>)
   1a3f8:	4798      	blx	r3
	
	//Set the analogue reference and differential mode.
	config_adc.reference = ADC_REFERENCE_INTVCC2; //VDD_ANA  (Should be 3.3V, default gives 0-1V)
   1a3fa:	1d3b      	adds	r3, r7, #4
   1a3fc:	2205      	movs	r2, #5
   1a3fe:	705a      	strb	r2, [r3, #1]
	config_adc.differential_mode = false;
   1a400:	1d3b      	adds	r3, r7, #4
   1a402:	2200      	movs	r2, #0
   1a404:	72da      	strb	r2, [r3, #11]

	//Make ADC 16 bit.  Resolution will depend on sensor range.
	config_adc.resolution = ADC_RESOLUTION_16BIT;
   1a406:	1d3b      	adds	r3, r7, #4
   1a408:	2210      	movs	r2, #16
   1a40a:	70da      	strb	r2, [r3, #3]
	config_adc.accumulate_samples = ADC_ACCUMULATE_SAMPLES_16;
   1a40c:	1d3b      	adds	r3, r7, #4
   1a40e:	2204      	movs	r2, #4
   1a410:	721a      	strb	r2, [r3, #8]
	config_adc.divide_result = ADC_DIVIDE_RESULT_DISABLE;
   1a412:	1d3b      	adds	r3, r7, #4
   1a414:	2200      	movs	r2, #0
   1a416:	725a      	strb	r2, [r3, #9]
	
	//initialize ADC
	adc_init(&adc_instance, ADC, &config_adc);
   1a418:	1d3a      	adds	r2, r7, #4
   1a41a:	490c      	ldr	r1, [pc, #48]	; (1a44c <setup_ADC+0x90>)
   1a41c:	4b0c      	ldr	r3, [pc, #48]	; (1a450 <setup_ADC+0x94>)
   1a41e:	0018      	movs	r0, r3
   1a420:	4b0c      	ldr	r3, [pc, #48]	; (1a454 <setup_ADC+0x98>)
   1a422:	4798      	blx	r3

	//Enables ADC
	adc_enable(&adc_instance);
   1a424:	4b0a      	ldr	r3, [pc, #40]	; (1a450 <setup_ADC+0x94>)
   1a426:	0018      	movs	r0, r3
   1a428:	4b0b      	ldr	r3, [pc, #44]	; (1a458 <setup_ADC+0x9c>)
   1a42a:	4798      	blx	r3
}
   1a42c:	46c0      	nop			; (mov r8, r8)
   1a42e:	46bd      	mov	sp, r7
   1a430:	b00c      	add	sp, #48	; 0x30
   1a432:	bd80      	pop	{r7, pc}
   1a434:	00000595 	.word	0x00000595
   1a438:	000100c0 	.word	0x000100c0
   1a43c:	43000c28 	.word	0x43000c28
   1a440:	000241cd 	.word	0x000241cd
   1a444:	43000c29 	.word	0x43000c29
   1a448:	43000c2a 	.word	0x43000c2a
   1a44c:	43000c00 	.word	0x43000c00
   1a450:	200017b4 	.word	0x200017b4
   1a454:	00000bcd 	.word	0x00000bcd
   1a458:	0001a05d 	.word	0x0001a05d

0001a45c <config_board>:


static void config_board(void)
{
   1a45c:	b580      	push	{r7, lr}
   1a45e:	b082      	sub	sp, #8
   1a460:	af00      	add	r7, sp, #0
	//port_pin_set_config(PIN_PA14, &pin_conf);
	//port_pin_set_output_level(PIN_PA14, false);
	
	//BATTERY TEST CHANGE
	//PIN_PA15 is being used for battery measurement sink.
	port_get_config_defaults(&pin_conf);
   1a462:	1d3b      	adds	r3, r7, #4
   1a464:	0018      	movs	r0, r3
   1a466:	4b11      	ldr	r3, [pc, #68]	; (1a4ac <config_board+0x50>)
   1a468:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a46a:	1d3b      	adds	r3, r7, #4
   1a46c:	2201      	movs	r2, #1
   1a46e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA15, &pin_conf);
   1a470:	1d3b      	adds	r3, r7, #4
   1a472:	0019      	movs	r1, r3
   1a474:	200f      	movs	r0, #15
   1a476:	4b0e      	ldr	r3, [pc, #56]	; (1a4b0 <config_board+0x54>)
   1a478:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA15, true);  // Set high to reduce current sink with resistor divider
   1a47a:	2101      	movs	r1, #1
   1a47c:	200f      	movs	r0, #15
   1a47e:	4b0d      	ldr	r3, [pc, #52]	; (1a4b4 <config_board+0x58>)
   1a480:	4798      	blx	r3
	//port_get_config_defaults(&pin_conf);
	//pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PA19, &pin_conf);
	//port_pin_set_output_level(PIN_PA19, false);
	//VSen Power
	port_get_config_defaults(&pin_conf);
   1a482:	1d3b      	adds	r3, r7, #4
   1a484:	0018      	movs	r0, r3
   1a486:	4b09      	ldr	r3, [pc, #36]	; (1a4ac <config_board+0x50>)
   1a488:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1a48a:	1d3b      	adds	r3, r7, #4
   1a48c:	2201      	movs	r2, #1
   1a48e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA27, &pin_conf);
   1a490:	1d3b      	adds	r3, r7, #4
   1a492:	0019      	movs	r1, r3
   1a494:	201b      	movs	r0, #27
   1a496:	4b06      	ldr	r3, [pc, #24]	; (1a4b0 <config_board+0x54>)
   1a498:	4798      	blx	r3
	port_pin_set_output_level(PIN_PA27, false);
   1a49a:	2100      	movs	r1, #0
   1a49c:	201b      	movs	r0, #27
   1a49e:	4b05      	ldr	r3, [pc, #20]	; (1a4b4 <config_board+0x58>)
   1a4a0:	4798      	blx	r3
	//port_get_config_defaults(&pin_conf);
	//pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(PIN_PB03, &pin_conf);
	//port_pin_set_output_level(PIN_PB03, true);
	
}
   1a4a2:	46c0      	nop			; (mov r8, r8)
   1a4a4:	46bd      	mov	sp, r7
   1a4a6:	b002      	add	sp, #8
   1a4a8:	bd80      	pop	{r7, pc}
   1a4aa:	46c0      	nop			; (mov r8, r8)
   1a4ac:	0001a0e1 	.word	0x0001a0e1
   1a4b0:	000020f5 	.word	0x000020f5
   1a4b4:	0001a105 	.word	0x0001a105

0001a4b8 <app_resources_uninit>:


#ifdef CONF_PMM_ENABLE
static void app_resources_uninit(void)
{
   1a4b8:	b580      	push	{r7, lr}
   1a4ba:	b082      	sub	sp, #8
   1a4bc:	af00      	add	r7, sp, #0
    /* Disable USART TX and RX Pins */
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
   1a4be:	1d3b      	adds	r3, r7, #4
   1a4c0:	0018      	movs	r0, r3
   1a4c2:	4b0b      	ldr	r3, [pc, #44]	; (1a4f0 <app_resources_uninit+0x38>)
   1a4c4:	4798      	blx	r3
    pin_conf.powersave  = true;
   1a4c6:	1d3b      	adds	r3, r7, #4
   1a4c8:	2201      	movs	r2, #1
   1a4ca:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
   1a4cc:	1d3b      	adds	r3, r7, #4
   1a4ce:	0019      	movs	r1, r3
   1a4d0:	2004      	movs	r0, #4
   1a4d2:	4b08      	ldr	r3, [pc, #32]	; (1a4f4 <app_resources_uninit+0x3c>)
   1a4d4:	4798      	blx	r3
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
   1a4d6:	1d3b      	adds	r3, r7, #4
   1a4d8:	0019      	movs	r1, r3
   1a4da:	2005      	movs	r0, #5
   1a4dc:	4b05      	ldr	r3, [pc, #20]	; (1a4f4 <app_resources_uninit+0x3c>)
   1a4de:	4798      	blx	r3
    /* Disable UART module */
    sio2host_deinit();
   1a4e0:	4b05      	ldr	r3, [pc, #20]	; (1a4f8 <app_resources_uninit+0x40>)
   1a4e2:	4798      	blx	r3
    /* Disable Transceiver SPI Module */
    HAL_RadioDeInit();
   1a4e4:	4b05      	ldr	r3, [pc, #20]	; (1a4fc <app_resources_uninit+0x44>)
   1a4e6:	4798      	blx	r3
}
   1a4e8:	46c0      	nop			; (mov r8, r8)
   1a4ea:	46bd      	mov	sp, r7
   1a4ec:	b002      	add	sp, #8
   1a4ee:	bd80      	pop	{r7, pc}
   1a4f0:	0001a0e1 	.word	0x0001a0e1
   1a4f4:	000020f5 	.word	0x000020f5
   1a4f8:	00006795 	.word	0x00006795
   1a4fc:	00006dcd 	.word	0x00006dcd

0001a500 <common_tc_read_count>:
   1a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a502:	4b0d      	ldr	r3, [pc, #52]	; (1a538 <common_tc_read_count+0x38>)
   1a504:	4798      	blx	r3
   1a506:	4b0d      	ldr	r3, [pc, #52]	; (1a53c <common_tc_read_count+0x3c>)
   1a508:	781b      	ldrb	r3, [r3, #0]
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	d00e      	beq.n	1a52c <common_tc_read_count+0x2c>
   1a50e:	4b0c      	ldr	r3, [pc, #48]	; (1a540 <common_tc_read_count+0x40>)
   1a510:	781d      	ldrb	r5, [r3, #0]
   1a512:	4b0a      	ldr	r3, [pc, #40]	; (1a53c <common_tc_read_count+0x3c>)
   1a514:	781f      	ldrb	r7, [r3, #0]
   1a516:	4c0b      	ldr	r4, [pc, #44]	; (1a544 <common_tc_read_count+0x44>)
   1a518:	1c29      	adds	r1, r5, #0
   1a51a:	47a0      	blx	r4
   1a51c:	1c06      	adds	r6, r0, #0
   1a51e:	480a      	ldr	r0, [pc, #40]	; (1a548 <common_tc_read_count+0x48>)
   1a520:	1c29      	adds	r1, r5, #0
   1a522:	47a0      	blx	r4
   1a524:	4378      	muls	r0, r7
   1a526:	1830      	adds	r0, r6, r0
   1a528:	b280      	uxth	r0, r0
   1a52a:	e004      	b.n	1a536 <common_tc_read_count+0x36>
   1a52c:	4b04      	ldr	r3, [pc, #16]	; (1a540 <common_tc_read_count+0x40>)
   1a52e:	7819      	ldrb	r1, [r3, #0]
   1a530:	4b04      	ldr	r3, [pc, #16]	; (1a544 <common_tc_read_count+0x44>)
   1a532:	4798      	blx	r3
   1a534:	b280      	uxth	r0, r0
   1a536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a538:	000169e1 	.word	0x000169e1
   1a53c:	20001150 	.word	0x20001150
   1a540:	20001aa5 	.word	0x20001aa5
   1a544:	0002117d 	.word	0x0002117d
   1a548:	0000ffff 	.word	0x0000ffff

0001a54c <common_tc_compare_stop>:
   1a54c:	b508      	push	{r3, lr}
   1a54e:	4b05      	ldr	r3, [pc, #20]	; (1a564 <common_tc_compare_stop+0x18>)
   1a550:	4798      	blx	r3
   1a552:	4b05      	ldr	r3, [pc, #20]	; (1a568 <common_tc_compare_stop+0x1c>)
   1a554:	4798      	blx	r3
   1a556:	4b05      	ldr	r3, [pc, #20]	; (1a56c <common_tc_compare_stop+0x20>)
   1a558:	2200      	movs	r2, #0
   1a55a:	605a      	str	r2, [r3, #4]
   1a55c:	811a      	strh	r2, [r3, #8]
   1a55e:	4b04      	ldr	r3, [pc, #16]	; (1a570 <common_tc_compare_stop+0x24>)
   1a560:	4798      	blx	r3
   1a562:	bd08      	pop	{r3, pc}
   1a564:	00016a01 	.word	0x00016a01
   1a568:	00016aad 	.word	0x00016aad
   1a56c:	20001150 	.word	0x20001150
   1a570:	00016ac5 	.word	0x00016ac5

0001a574 <common_tc_overflow_stop>:
   1a574:	b508      	push	{r3, lr}
   1a576:	4b03      	ldr	r3, [pc, #12]	; (1a584 <common_tc_overflow_stop+0x10>)
   1a578:	4798      	blx	r3
   1a57a:	2200      	movs	r2, #0
   1a57c:	4b02      	ldr	r3, [pc, #8]	; (1a588 <common_tc_overflow_stop+0x14>)
   1a57e:	701a      	strb	r2, [r3, #0]
   1a580:	bd08      	pop	{r3, pc}
   1a582:	46c0      	nop			; (mov r8, r8)
   1a584:	00016a49 	.word	0x00016a49
   1a588:	20001150 	.word	0x20001150

0001a58c <common_tc_stop>:
   1a58c:	b508      	push	{r3, lr}
   1a58e:	4b03      	ldr	r3, [pc, #12]	; (1a59c <common_tc_stop+0x10>)
   1a590:	4798      	blx	r3
   1a592:	4b03      	ldr	r3, [pc, #12]	; (1a5a0 <common_tc_stop+0x14>)
   1a594:	4798      	blx	r3
   1a596:	4b03      	ldr	r3, [pc, #12]	; (1a5a4 <common_tc_stop+0x18>)
   1a598:	4798      	blx	r3
   1a59a:	bd08      	pop	{r3, pc}
   1a59c:	0001a54d 	.word	0x0001a54d
   1a5a0:	0001a575 	.word	0x0001a575
   1a5a4:	00016a65 	.word	0x00016a65

0001a5a8 <common_tc_delay>:
   1a5a8:	b510      	push	{r4, lr}
   1a5aa:	1c04      	adds	r4, r0, #0
   1a5ac:	4b13      	ldr	r3, [pc, #76]	; (1a5fc <common_tc_delay+0x54>)
   1a5ae:	4798      	blx	r3
   1a5b0:	4b13      	ldr	r3, [pc, #76]	; (1a600 <common_tc_delay+0x58>)
   1a5b2:	781a      	ldrb	r2, [r3, #0]
   1a5b4:	4362      	muls	r2, r4
   1a5b6:	1881      	adds	r1, r0, r2
   1a5b8:	4b12      	ldr	r3, [pc, #72]	; (1a604 <common_tc_delay+0x5c>)
   1a5ba:	6059      	str	r1, [r3, #4]
   1a5bc:	6859      	ldr	r1, [r3, #4]
   1a5be:	0c09      	lsrs	r1, r1, #16
   1a5c0:	6059      	str	r1, [r3, #4]
   1a5c2:	685b      	ldr	r3, [r3, #4]
   1a5c4:	2b00      	cmp	r3, #0
   1a5c6:	d007      	beq.n	1a5d8 <common_tc_delay+0x30>
   1a5c8:	4b0e      	ldr	r3, [pc, #56]	; (1a604 <common_tc_delay+0x5c>)
   1a5ca:	6859      	ldr	r1, [r3, #4]
   1a5cc:	3201      	adds	r2, #1
   1a5ce:	1880      	adds	r0, r0, r2
   1a5d0:	8118      	strh	r0, [r3, #8]
   1a5d2:	4b0d      	ldr	r3, [pc, #52]	; (1a608 <common_tc_delay+0x60>)
   1a5d4:	4798      	blx	r3
   1a5d6:	e004      	b.n	1a5e2 <common_tc_delay+0x3a>
   1a5d8:	1882      	adds	r2, r0, r2
   1a5da:	4b0a      	ldr	r3, [pc, #40]	; (1a604 <common_tc_delay+0x5c>)
   1a5dc:	811a      	strh	r2, [r3, #8]
   1a5de:	4b0b      	ldr	r3, [pc, #44]	; (1a60c <common_tc_delay+0x64>)
   1a5e0:	4798      	blx	r3
   1a5e2:	4b08      	ldr	r3, [pc, #32]	; (1a604 <common_tc_delay+0x5c>)
   1a5e4:	891b      	ldrh	r3, [r3, #8]
   1a5e6:	2b63      	cmp	r3, #99	; 0x63
   1a5e8:	d802      	bhi.n	1a5f0 <common_tc_delay+0x48>
   1a5ea:	3364      	adds	r3, #100	; 0x64
   1a5ec:	4a05      	ldr	r2, [pc, #20]	; (1a604 <common_tc_delay+0x5c>)
   1a5ee:	8113      	strh	r3, [r2, #8]
   1a5f0:	4b04      	ldr	r3, [pc, #16]	; (1a604 <common_tc_delay+0x5c>)
   1a5f2:	8918      	ldrh	r0, [r3, #8]
   1a5f4:	4b06      	ldr	r3, [pc, #24]	; (1a610 <common_tc_delay+0x68>)
   1a5f6:	4798      	blx	r3
   1a5f8:	bd10      	pop	{r4, pc}
   1a5fa:	46c0      	nop			; (mov r8, r8)
   1a5fc:	000169e1 	.word	0x000169e1
   1a600:	20001aa5 	.word	0x20001aa5
   1a604:	20001150 	.word	0x20001150
   1a608:	00016a01 	.word	0x00016a01
   1a60c:	00016a1d 	.word	0x00016a1d
   1a610:	00016a81 	.word	0x00016a81

0001a614 <common_tc_init>:
   1a614:	b508      	push	{r3, lr}
   1a616:	2200      	movs	r2, #0
   1a618:	4b03      	ldr	r3, [pc, #12]	; (1a628 <common_tc_init+0x14>)
   1a61a:	701a      	strb	r2, [r3, #0]
   1a61c:	4b03      	ldr	r3, [pc, #12]	; (1a62c <common_tc_init+0x18>)
   1a61e:	4798      	blx	r3
   1a620:	4b03      	ldr	r3, [pc, #12]	; (1a630 <common_tc_init+0x1c>)
   1a622:	7018      	strb	r0, [r3, #0]
   1a624:	bd08      	pop	{r3, pc}
   1a626:	46c0      	nop			; (mov r8, r8)
   1a628:	20001150 	.word	0x20001150
   1a62c:	00016b19 	.word	0x00016b19
   1a630:	20001aa5 	.word	0x20001aa5

0001a634 <tmr_ovf_callback>:
   1a634:	b508      	push	{r3, lr}
   1a636:	4b0e      	ldr	r3, [pc, #56]	; (1a670 <tmr_ovf_callback+0x3c>)
   1a638:	685b      	ldr	r3, [r3, #4]
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	d007      	beq.n	1a64e <tmr_ovf_callback+0x1a>
   1a63e:	4a0c      	ldr	r2, [pc, #48]	; (1a670 <tmr_ovf_callback+0x3c>)
   1a640:	6853      	ldr	r3, [r2, #4]
   1a642:	3b01      	subs	r3, #1
   1a644:	6053      	str	r3, [r2, #4]
   1a646:	2b00      	cmp	r3, #0
   1a648:	d101      	bne.n	1a64e <tmr_ovf_callback+0x1a>
   1a64a:	4b0a      	ldr	r3, [pc, #40]	; (1a674 <tmr_ovf_callback+0x40>)
   1a64c:	4798      	blx	r3
   1a64e:	4a08      	ldr	r2, [pc, #32]	; (1a670 <tmr_ovf_callback+0x3c>)
   1a650:	7813      	ldrb	r3, [r2, #0]
   1a652:	3301      	adds	r3, #1
   1a654:	b2db      	uxtb	r3, r3
   1a656:	7013      	strb	r3, [r2, #0]
   1a658:	4a07      	ldr	r2, [pc, #28]	; (1a678 <tmr_ovf_callback+0x44>)
   1a65a:	7812      	ldrb	r2, [r2, #0]
   1a65c:	429a      	cmp	r2, r3
   1a65e:	d806      	bhi.n	1a66e <tmr_ovf_callback+0x3a>
   1a660:	4b03      	ldr	r3, [pc, #12]	; (1a670 <tmr_ovf_callback+0x3c>)
   1a662:	2200      	movs	r2, #0
   1a664:	701a      	strb	r2, [r3, #0]
   1a666:	68db      	ldr	r3, [r3, #12]
   1a668:	2b00      	cmp	r3, #0
   1a66a:	d000      	beq.n	1a66e <tmr_ovf_callback+0x3a>
   1a66c:	4798      	blx	r3
   1a66e:	bd08      	pop	{r3, pc}
   1a670:	20001150 	.word	0x20001150
   1a674:	00016a1d 	.word	0x00016a1d
   1a678:	20001aa5 	.word	0x20001aa5

0001a67c <tmr_cca_callback>:
   1a67c:	b508      	push	{r3, lr}
   1a67e:	4b04      	ldr	r3, [pc, #16]	; (1a690 <tmr_cca_callback+0x14>)
   1a680:	4798      	blx	r3
   1a682:	4b04      	ldr	r3, [pc, #16]	; (1a694 <tmr_cca_callback+0x18>)
   1a684:	691b      	ldr	r3, [r3, #16]
   1a686:	2b00      	cmp	r3, #0
   1a688:	d000      	beq.n	1a68c <tmr_cca_callback+0x10>
   1a68a:	4798      	blx	r3
   1a68c:	bd08      	pop	{r3, pc}
   1a68e:	46c0      	nop			; (mov r8, r8)
   1a690:	00016a01 	.word	0x00016a01
   1a694:	20001150 	.word	0x20001150

0001a698 <set_common_tc_overflow_callback>:
   1a698:	4b01      	ldr	r3, [pc, #4]	; (1a6a0 <set_common_tc_overflow_callback+0x8>)
   1a69a:	60d8      	str	r0, [r3, #12]
   1a69c:	4770      	bx	lr
   1a69e:	46c0      	nop			; (mov r8, r8)
   1a6a0:	20001150 	.word	0x20001150

0001a6a4 <set_common_tc_expiry_callback>:
   1a6a4:	4b01      	ldr	r3, [pc, #4]	; (1a6ac <set_common_tc_expiry_callback+0x8>)
   1a6a6:	6118      	str	r0, [r3, #16]
   1a6a8:	4770      	bx	lr
   1a6aa:	46c0      	nop			; (mov r8, r8)
   1a6ac:	20001150 	.word	0x20001150

0001a6b0 <MacClearCommands>:
   1a6b0:	490e      	ldr	r1, [pc, #56]	; (1a6ec <MacClearCommands+0x3c>)
   1a6b2:	b570      	push	{r4, r5, r6, lr}
   1a6b4:	000b      	movs	r3, r1
   1a6b6:	33e0      	adds	r3, #224	; 0xe0
   1a6b8:	7818      	ldrb	r0, [r3, #0]
   1a6ba:	2303      	movs	r3, #3
   1a6bc:	25a4      	movs	r5, #164	; 0xa4
   1a6be:	4343      	muls	r3, r0
   1a6c0:	2401      	movs	r4, #1
   1a6c2:	20ff      	movs	r0, #255	; 0xff
   1a6c4:	3399      	adds	r3, #153	; 0x99
   1a6c6:	4a0a      	ldr	r2, [pc, #40]	; (1a6f0 <MacClearCommands+0x40>)
   1a6c8:	185b      	adds	r3, r3, r1
   1a6ca:	00ed      	lsls	r5, r5, #3
   1a6cc:	429a      	cmp	r2, r3
   1a6ce:	d100      	bne.n	1a6d2 <MacClearCommands+0x22>
   1a6d0:	bd70      	pop	{r4, r5, r6, pc}
   1a6d2:	7811      	ldrb	r1, [r2, #0]
   1a6d4:	29ff      	cmp	r1, #255	; 0xff
   1a6d6:	d006      	beq.n	1a6e6 <MacClearCommands+0x36>
   1a6d8:	290a      	cmp	r1, #10
   1a6da:	d803      	bhi.n	1a6e4 <MacClearCommands+0x34>
   1a6dc:	0026      	movs	r6, r4
   1a6de:	408e      	lsls	r6, r1
   1a6e0:	422e      	tst	r6, r5
   1a6e2:	d100      	bne.n	1a6e6 <MacClearCommands+0x36>
   1a6e4:	7010      	strb	r0, [r2, #0]
   1a6e6:	3203      	adds	r2, #3
   1a6e8:	e7f0      	b.n	1a6cc <MacClearCommands+0x1c>
   1a6ea:	46c0      	nop			; (mov r8, r8)
   1a6ec:	20001bd0 	.word	0x20001bd0
   1a6f0:	20001c69 	.word	0x20001c69

0001a6f4 <CountfOptsLength>:
   1a6f4:	2200      	movs	r2, #0
   1a6f6:	490d      	ldr	r1, [pc, #52]	; (1a72c <CountfOptsLength+0x38>)
   1a6f8:	b570      	push	{r4, r5, r6, lr}
   1a6fa:	000b      	movs	r3, r1
   1a6fc:	0010      	movs	r0, r2
   1a6fe:	2503      	movs	r5, #3
   1a700:	33e0      	adds	r3, #224	; 0xe0
   1a702:	781c      	ldrb	r4, [r3, #0]
   1a704:	4e0a      	ldr	r6, [pc, #40]	; (1a730 <CountfOptsLength+0x3c>)
   1a706:	b2d3      	uxtb	r3, r2
   1a708:	429c      	cmp	r4, r3
   1a70a:	d800      	bhi.n	1a70e <CountfOptsLength+0x1a>
   1a70c:	bd70      	pop	{r4, r5, r6, pc}
   1a70e:	002b      	movs	r3, r5
   1a710:	4353      	muls	r3, r2
   1a712:	3399      	adds	r3, #153	; 0x99
   1a714:	5ccb      	ldrb	r3, [r1, r3]
   1a716:	2bff      	cmp	r3, #255	; 0xff
   1a718:	d006      	beq.n	1a728 <CountfOptsLength+0x34>
   1a71a:	18f3      	adds	r3, r6, r3
   1a71c:	3b02      	subs	r3, #2
   1a71e:	781b      	ldrb	r3, [r3, #0]
   1a720:	18c3      	adds	r3, r0, r3
   1a722:	2b0f      	cmp	r3, #15
   1a724:	dcf2      	bgt.n	1a70c <CountfOptsLength+0x18>
   1a726:	b2d8      	uxtb	r0, r3
   1a728:	3201      	adds	r2, #1
   1a72a:	e7ec      	b.n	1a706 <CountfOptsLength+0x12>
   1a72c:	20001bd0 	.word	0x20001bd0
   1a730:	0002cc9f 	.word	0x0002cc9f

0001a734 <StopAllSoftwareTimers>:
   1a734:	b570      	push	{r4, r5, r6, lr}
   1a736:	4d17      	ldr	r5, [pc, #92]	; (1a794 <StopAllSoftwareTimers+0x60>)
   1a738:	4c17      	ldr	r4, [pc, #92]	; (1a798 <StopAllSoftwareTimers+0x64>)
   1a73a:	002b      	movs	r3, r5
   1a73c:	33eb      	adds	r3, #235	; 0xeb
   1a73e:	7818      	ldrb	r0, [r3, #0]
   1a740:	47a0      	blx	r4
   1a742:	002b      	movs	r3, r5
   1a744:	33ec      	adds	r3, #236	; 0xec
   1a746:	7818      	ldrb	r0, [r3, #0]
   1a748:	47a0      	blx	r4
   1a74a:	002b      	movs	r3, r5
   1a74c:	33f0      	adds	r3, #240	; 0xf0
   1a74e:	7818      	ldrb	r0, [r3, #0]
   1a750:	47a0      	blx	r4
   1a752:	002b      	movs	r3, r5
   1a754:	33ed      	adds	r3, #237	; 0xed
   1a756:	7818      	ldrb	r0, [r3, #0]
   1a758:	47a0      	blx	r4
   1a75a:	002b      	movs	r3, r5
   1a75c:	33ee      	adds	r3, #238	; 0xee
   1a75e:	7818      	ldrb	r0, [r3, #0]
   1a760:	47a0      	blx	r4
   1a762:	002b      	movs	r3, r5
   1a764:	33f1      	adds	r3, #241	; 0xf1
   1a766:	7818      	ldrb	r0, [r3, #0]
   1a768:	47a0      	blx	r4
   1a76a:	002b      	movs	r3, r5
   1a76c:	33ef      	adds	r3, #239	; 0xef
   1a76e:	7818      	ldrb	r0, [r3, #0]
   1a770:	47a0      	blx	r4
   1a772:	002b      	movs	r3, r5
   1a774:	33f2      	adds	r3, #242	; 0xf2
   1a776:	7818      	ldrb	r0, [r3, #0]
   1a778:	47a0      	blx	r4
   1a77a:	002b      	movs	r3, r5
   1a77c:	33fb      	adds	r3, #251	; 0xfb
   1a77e:	7818      	ldrb	r0, [r3, #0]
   1a780:	47a0      	blx	r4
   1a782:	002b      	movs	r3, r5
   1a784:	33fc      	adds	r3, #252	; 0xfc
   1a786:	7818      	ldrb	r0, [r3, #0]
   1a788:	47a0      	blx	r4
   1a78a:	2394      	movs	r3, #148	; 0x94
   1a78c:	005b      	lsls	r3, r3, #1
   1a78e:	5ce8      	ldrb	r0, [r5, r3]
   1a790:	47a0      	blx	r4
   1a792:	bd70      	pop	{r4, r5, r6, pc}
   1a794:	20001bd0 	.word	0x20001bd0
   1a798:	00015cfd 	.word	0x00015cfd

0001a79c <LorawanGetMaxPayloadSize>:
   1a79c:	b513      	push	{r0, r1, r4, lr}
   1a79e:	466b      	mov	r3, sp
   1a7a0:	1ddc      	adds	r4, r3, #7
   1a7a2:	2300      	movs	r3, #0
   1a7a4:	0022      	movs	r2, r4
   1a7a6:	7023      	strb	r3, [r4, #0]
   1a7a8:	4903      	ldr	r1, [pc, #12]	; (1a7b8 <LorawanGetMaxPayloadSize+0x1c>)
   1a7aa:	4b04      	ldr	r3, [pc, #16]	; (1a7bc <LorawanGetMaxPayloadSize+0x20>)
   1a7ac:	2005      	movs	r0, #5
   1a7ae:	4798      	blx	r3
   1a7b0:	7820      	ldrb	r0, [r4, #0]
   1a7b2:	3808      	subs	r0, #8
   1a7b4:	b2c0      	uxtb	r0, r0
   1a7b6:	bd16      	pop	{r1, r2, r4, pc}
   1a7b8:	20001cb7 	.word	0x20001cb7
   1a7bc:	0000d595 	.word	0x0000d595

0001a7c0 <UpdateReceiveDelays>:
   1a7c0:	23fa      	movs	r3, #250	; 0xfa
   1a7c2:	b570      	push	{r4, r5, r6, lr}
   1a7c4:	009b      	lsls	r3, r3, #2
   1a7c6:	4c0b      	ldr	r4, [pc, #44]	; (1a7f4 <UpdateReceiveDelays+0x34>)
   1a7c8:	2800      	cmp	r0, #0
   1a7ca:	d000      	beq.n	1a7ce <UpdateReceiveDelays+0xe>
   1a7cc:	4343      	muls	r3, r0
   1a7ce:	0022      	movs	r2, r4
   1a7d0:	4d09      	ldr	r5, [pc, #36]	; (1a7f8 <UpdateReceiveDelays+0x38>)
   1a7d2:	32d0      	adds	r2, #208	; 0xd0
   1a7d4:	210c      	movs	r1, #12
   1a7d6:	2000      	movs	r0, #0
   1a7d8:	8013      	strh	r3, [r2, #0]
   1a7da:	47a8      	blx	r5
   1a7dc:	0023      	movs	r3, r4
   1a7de:	22fa      	movs	r2, #250	; 0xfa
   1a7e0:	33d0      	adds	r3, #208	; 0xd0
   1a7e2:	881b      	ldrh	r3, [r3, #0]
   1a7e4:	0092      	lsls	r2, r2, #2
   1a7e6:	189b      	adds	r3, r3, r2
   1a7e8:	34d2      	adds	r4, #210	; 0xd2
   1a7ea:	210d      	movs	r1, #13
   1a7ec:	2000      	movs	r0, #0
   1a7ee:	8023      	strh	r3, [r4, #0]
   1a7f0:	47a8      	blx	r5
   1a7f2:	bd70      	pop	{r4, r5, r6, pc}
   1a7f4:	20001bd0 	.word	0x20001bd0
   1a7f8:	00013b45 	.word	0x00013b45

0001a7fc <IncludeMacCommandsResponse>:
   1a7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a7fe:	0005      	movs	r5, r0
   1a800:	2600      	movs	r6, #0
   1a802:	b087      	sub	sp, #28
   1a804:	880c      	ldrh	r4, [r1, #0]
   1a806:	9101      	str	r1, [sp, #4]
   1a808:	9203      	str	r2, [sp, #12]
   1a80a:	4f77      	ldr	r7, [pc, #476]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a80c:	003b      	movs	r3, r7
   1a80e:	33e0      	adds	r3, #224	; 0xe0
   1a810:	781b      	ldrb	r3, [r3, #0]
   1a812:	42b3      	cmp	r3, r6
   1a814:	d913      	bls.n	1a83e <IncludeMacCommandsResponse+0x42>
   1a816:	9b03      	ldr	r3, [sp, #12]
   1a818:	2b00      	cmp	r3, #0
   1a81a:	d019      	beq.n	1a850 <IncludeMacCommandsResponse+0x54>
   1a81c:	2303      	movs	r3, #3
   1a81e:	4373      	muls	r3, r6
   1a820:	18fb      	adds	r3, r7, r3
   1a822:	3399      	adds	r3, #153	; 0x99
   1a824:	7819      	ldrb	r1, [r3, #0]
   1a826:	29ff      	cmp	r1, #255	; 0xff
   1a828:	d012      	beq.n	1a850 <IncludeMacCommandsResponse+0x54>
   1a82a:	9b01      	ldr	r3, [sp, #4]
   1a82c:	881a      	ldrh	r2, [r3, #0]
   1a82e:	4b6f      	ldr	r3, [pc, #444]	; (1a9ec <IncludeMacCommandsResponse+0x1f0>)
   1a830:	1aa2      	subs	r2, r4, r2
   1a832:	185b      	adds	r3, r3, r1
   1a834:	3b02      	subs	r3, #2
   1a836:	781b      	ldrb	r3, [r3, #0]
   1a838:	18d3      	adds	r3, r2, r3
   1a83a:	2b0f      	cmp	r3, #15
   1a83c:	dd08      	ble.n	1a850 <IncludeMacCommandsResponse+0x54>
   1a83e:	2207      	movs	r2, #7
   1a840:	2100      	movs	r1, #0
   1a842:	4b6b      	ldr	r3, [pc, #428]	; (1a9f0 <IncludeMacCommandsResponse+0x1f4>)
   1a844:	486b      	ldr	r0, [pc, #428]	; (1a9f4 <IncludeMacCommandsResponse+0x1f8>)
   1a846:	4798      	blx	r3
   1a848:	9b01      	ldr	r3, [sp, #4]
   1a84a:	801c      	strh	r4, [r3, #0]
   1a84c:	b007      	add	sp, #28
   1a84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a850:	2303      	movs	r3, #3
   1a852:	4373      	muls	r3, r6
   1a854:	18fb      	adds	r3, r7, r3
   1a856:	3399      	adds	r3, #153	; 0x99
   1a858:	781b      	ldrb	r3, [r3, #0]
   1a85a:	1e98      	subs	r0, r3, #2
   1a85c:	280b      	cmp	r0, #11
   1a85e:	d862      	bhi.n	1a926 <IncludeMacCommandsResponse+0x12a>
   1a860:	f006 fbe4 	bl	2102c <__gnu_thumb1_case_uqi>
   1a864:	27a20698 	.word	0x27a20698
   1a868:	7da26748 	.word	0x7da26748
   1a86c:	a6616182 	.word	0xa6616182
   1a870:	2303      	movs	r3, #3
   1a872:	2200      	movs	r2, #0
   1a874:	552b      	strb	r3, [r5, r4]
   1a876:	1c63      	adds	r3, r4, #1
   1a878:	b29b      	uxth	r3, r3
   1a87a:	18eb      	adds	r3, r5, r3
   1a87c:	4f5a      	ldr	r7, [pc, #360]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a87e:	485e      	ldr	r0, [pc, #376]	; (1a9f8 <IncludeMacCommandsResponse+0x1fc>)
   1a880:	701a      	strb	r2, [r3, #0]
   1a882:	5c39      	ldrb	r1, [r7, r0]
   1a884:	3201      	adds	r2, #1
   1a886:	4011      	ands	r1, r2
   1a888:	466a      	mov	r2, sp
   1a88a:	9102      	str	r1, [sp, #8]
   1a88c:	7a12      	ldrb	r2, [r2, #8]
   1a88e:	701a      	strb	r2, [r3, #0]
   1a890:	5c3a      	ldrb	r2, [r7, r0]
   1a892:	4694      	mov	ip, r2
   1a894:	2202      	movs	r2, #2
   1a896:	4661      	mov	r1, ip
   1a898:	4211      	tst	r1, r2
   1a89a:	d002      	beq.n	1a8a2 <IncludeMacCommandsResponse+0xa6>
   1a89c:	9902      	ldr	r1, [sp, #8]
   1a89e:	430a      	orrs	r2, r1
   1a8a0:	701a      	strb	r2, [r3, #0]
   1a8a2:	2204      	movs	r2, #4
   1a8a4:	5c39      	ldrb	r1, [r7, r0]
   1a8a6:	4211      	tst	r1, r2
   1a8a8:	d071      	beq.n	1a98e <IncludeMacCommandsResponse+0x192>
   1a8aa:	7819      	ldrb	r1, [r3, #0]
   1a8ac:	430a      	orrs	r2, r1
   1a8ae:	701a      	strb	r2, [r3, #0]
   1a8b0:	e06d      	b.n	1a98e <IncludeMacCommandsResponse+0x192>
   1a8b2:	2305      	movs	r3, #5
   1a8b4:	2103      	movs	r1, #3
   1a8b6:	2200      	movs	r2, #0
   1a8b8:	552b      	strb	r3, [r5, r4]
   1a8ba:	1c63      	adds	r3, r4, #1
   1a8bc:	b29b      	uxth	r3, r3
   1a8be:	4371      	muls	r1, r6
   1a8c0:	18eb      	adds	r3, r5, r3
   1a8c2:	701a      	strb	r2, [r3, #0]
   1a8c4:	4a48      	ldr	r2, [pc, #288]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a8c6:	1851      	adds	r1, r2, r1
   1a8c8:	3198      	adds	r1, #152	; 0x98
   1a8ca:	7888      	ldrb	r0, [r1, #2]
   1a8cc:	0700      	lsls	r0, r0, #28
   1a8ce:	0fc0      	lsrs	r0, r0, #31
   1a8d0:	7018      	strb	r0, [r3, #0]
   1a8d2:	7889      	ldrb	r1, [r1, #2]
   1a8d4:	b2c7      	uxtb	r7, r0
   1a8d6:	06c9      	lsls	r1, r1, #27
   1a8d8:	d502      	bpl.n	1a8e0 <IncludeMacCommandsResponse+0xe4>
   1a8da:	2102      	movs	r1, #2
   1a8dc:	4339      	orrs	r1, r7
   1a8de:	7019      	strb	r1, [r3, #0]
   1a8e0:	2103      	movs	r1, #3
   1a8e2:	4371      	muls	r1, r6
   1a8e4:	1852      	adds	r2, r2, r1
   1a8e6:	3298      	adds	r2, #152	; 0x98
   1a8e8:	7892      	ldrb	r2, [r2, #2]
   1a8ea:	0692      	lsls	r2, r2, #26
   1a8ec:	d54f      	bpl.n	1a98e <IncludeMacCommandsResponse+0x192>
   1a8ee:	7819      	ldrb	r1, [r3, #0]
   1a8f0:	2204      	movs	r2, #4
   1a8f2:	e7db      	b.n	1a8ac <IncludeMacCommandsResponse+0xb0>
   1a8f4:	a904      	add	r1, sp, #16
   1a8f6:	4b41      	ldr	r3, [pc, #260]	; (1a9fc <IncludeMacCommandsResponse+0x200>)
   1a8f8:	200e      	movs	r0, #14
   1a8fa:	4798      	blx	r3
   1a8fc:	2306      	movs	r3, #6
   1a8fe:	4a3a      	ldr	r2, [pc, #232]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a900:	552b      	strb	r3, [r5, r4]
   1a902:	32e8      	adds	r2, #232	; 0xe8
   1a904:	7811      	ldrb	r1, [r2, #0]
   1a906:	1c62      	adds	r2, r4, #1
   1a908:	b292      	uxth	r2, r2
   1a90a:	54a9      	strb	r1, [r5, r2]
   1a90c:	aa04      	add	r2, sp, #16
   1a90e:	7812      	ldrb	r2, [r2, #0]
   1a910:	1ca3      	adds	r3, r4, #2
   1a912:	0011      	movs	r1, r2
   1a914:	3120      	adds	r1, #32
   1a916:	3403      	adds	r4, #3
   1a918:	b2c9      	uxtb	r1, r1
   1a91a:	b29b      	uxth	r3, r3
   1a91c:	b2a4      	uxth	r4, r4
   1a91e:	293f      	cmp	r1, #63	; 0x3f
   1a920:	d904      	bls.n	1a92c <IncludeMacCommandsResponse+0x130>
   1a922:	2220      	movs	r2, #32
   1a924:	54ea      	strb	r2, [r5, r3]
   1a926:	3601      	adds	r6, #1
   1a928:	b2f6      	uxtb	r6, r6
   1a92a:	e76e      	b.n	1a80a <IncludeMacCommandsResponse+0xe>
   1a92c:	213f      	movs	r1, #63	; 0x3f
   1a92e:	400a      	ands	r2, r1
   1a930:	e7f8      	b.n	1a924 <IncludeMacCommandsResponse+0x128>
   1a932:	2307      	movs	r3, #7
   1a934:	2103      	movs	r1, #3
   1a936:	2200      	movs	r2, #0
   1a938:	552b      	strb	r3, [r5, r4]
   1a93a:	1c63      	adds	r3, r4, #1
   1a93c:	4371      	muls	r1, r6
   1a93e:	b29b      	uxth	r3, r3
   1a940:	18eb      	adds	r3, r5, r3
   1a942:	701a      	strb	r2, [r3, #0]
   1a944:	4a28      	ldr	r2, [pc, #160]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a946:	1852      	adds	r2, r2, r1
   1a948:	3298      	adds	r2, #152	; 0x98
   1a94a:	7891      	ldrb	r1, [r2, #2]
   1a94c:	09c9      	lsrs	r1, r1, #7
   1a94e:	7019      	strb	r1, [r3, #0]
   1a950:	7892      	ldrb	r2, [r2, #2]
   1a952:	b2c8      	uxtb	r0, r1
   1a954:	0652      	lsls	r2, r2, #25
   1a956:	d51a      	bpl.n	1a98e <IncludeMacCommandsResponse+0x192>
   1a958:	2202      	movs	r2, #2
   1a95a:	4302      	orrs	r2, r0
   1a95c:	e7a7      	b.n	1a8ae <IncludeMacCommandsResponse+0xb2>
   1a95e:	2209      	movs	r2, #9
   1a960:	1c63      	adds	r3, r4, #1
   1a962:	552a      	strb	r2, [r5, r4]
   1a964:	b29c      	uxth	r4, r3
   1a966:	e7de      	b.n	1a926 <IncludeMacCommandsResponse+0x12a>
   1a968:	230a      	movs	r3, #10
   1a96a:	2103      	movs	r1, #3
   1a96c:	2200      	movs	r2, #0
   1a96e:	552b      	strb	r3, [r5, r4]
   1a970:	1c63      	adds	r3, r4, #1
   1a972:	4371      	muls	r1, r6
   1a974:	b29b      	uxth	r3, r3
   1a976:	18eb      	adds	r3, r5, r3
   1a978:	701a      	strb	r2, [r3, #0]
   1a97a:	4a1b      	ldr	r2, [pc, #108]	; (1a9e8 <IncludeMacCommandsResponse+0x1ec>)
   1a97c:	1852      	adds	r2, r2, r1
   1a97e:	3298      	adds	r2, #152	; 0x98
   1a980:	7891      	ldrb	r1, [r2, #2]
   1a982:	09c9      	lsrs	r1, r1, #7
   1a984:	7019      	strb	r1, [r3, #0]
   1a986:	78d2      	ldrb	r2, [r2, #3]
   1a988:	b2c8      	uxtb	r0, r1
   1a98a:	07d2      	lsls	r2, r2, #31
   1a98c:	d4e4      	bmi.n	1a958 <IncludeMacCommandsResponse+0x15c>
   1a98e:	3402      	adds	r4, #2
   1a990:	b2a4      	uxth	r4, r4
   1a992:	e7c8      	b.n	1a926 <IncludeMacCommandsResponse+0x12a>
   1a994:	003b      	movs	r3, r7
   1a996:	22ff      	movs	r2, #255	; 0xff
   1a998:	33e5      	adds	r3, #229	; 0xe5
   1a99a:	701a      	strb	r2, [r3, #0]
   1a99c:	2300      	movs	r3, #0
   1a99e:	37e6      	adds	r7, #230	; 0xe6
   1a9a0:	703b      	strb	r3, [r7, #0]
   1a9a2:	3afd      	subs	r2, #253	; 0xfd
   1a9a4:	1c63      	adds	r3, r4, #1
   1a9a6:	e7dc      	b.n	1a962 <IncludeMacCommandsResponse+0x166>
   1a9a8:	1c62      	adds	r2, r4, #1
   1a9aa:	552b      	strb	r3, [r5, r4]
   1a9ac:	b294      	uxth	r4, r2
   1a9ae:	e7ba      	b.n	1a926 <IncludeMacCommandsResponse+0x12a>
   1a9b0:	2201      	movs	r2, #1
   1a9b2:	4252      	negs	r2, r2
   1a9b4:	17d3      	asrs	r3, r2, #31
   1a9b6:	9204      	str	r2, [sp, #16]
   1a9b8:	9305      	str	r3, [sp, #20]
   1a9ba:	4b11      	ldr	r3, [pc, #68]	; (1aa00 <IncludeMacCommandsResponse+0x204>)
   1a9bc:	a904      	add	r1, sp, #16
   1a9be:	5cf8      	ldrb	r0, [r7, r3]
   1a9c0:	4b10      	ldr	r3, [pc, #64]	; (1aa04 <IncludeMacCommandsResponse+0x208>)
   1a9c2:	4798      	blx	r3
   1a9c4:	2301      	movs	r3, #1
   1a9c6:	228d      	movs	r2, #141	; 0x8d
   1a9c8:	425b      	negs	r3, r3
   1a9ca:	0092      	lsls	r2, r2, #2
   1a9cc:	50bb      	str	r3, [r7, r2]
   1a9ce:	3204      	adds	r2, #4
   1a9d0:	54bb      	strb	r3, [r7, r2]
   1a9d2:	238c      	movs	r3, #140	; 0x8c
   1a9d4:	2201      	movs	r2, #1
   1a9d6:	009b      	lsls	r3, r3, #2
   1a9d8:	54fa      	strb	r2, [r7, r3]
   1a9da:	2303      	movs	r3, #3
   1a9dc:	4373      	muls	r3, r6
   1a9de:	18ff      	adds	r7, r7, r3
   1a9e0:	3799      	adds	r7, #153	; 0x99
   1a9e2:	18a2      	adds	r2, r4, r2
   1a9e4:	783b      	ldrb	r3, [r7, #0]
   1a9e6:	e7e0      	b.n	1a9aa <IncludeMacCommandsResponse+0x1ae>
   1a9e8:	20001bd0 	.word	0x20001bd0
   1a9ec:	0002cc9f 	.word	0x0002cc9f
   1a9f0:	000241cd 	.word	0x000241cd
   1a9f4:	20001df3 	.word	0x20001df3
   1a9f8:	00000223 	.word	0x00000223
   1a9fc:	0001f4f1 	.word	0x0001f4f1
   1aa00:	00000231 	.word	0x00000231
   1aa04:	000161d9 	.word	0x000161d9

0001aa08 <UpdateJoinSuccessState>:
   1aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa0a:	4c32      	ldr	r4, [pc, #200]	; (1aad4 <UpdateJoinSuccessState+0xcc>)
   1aa0c:	2104      	movs	r1, #4
   1aa0e:	0022      	movs	r2, r4
   1aa10:	3294      	adds	r2, #148	; 0x94
   1aa12:	7813      	ldrb	r3, [r2, #0]
   1aa14:	2001      	movs	r0, #1
   1aa16:	438b      	bics	r3, r1
   1aa18:	7013      	strb	r3, [r2, #0]
   1aa1a:	0022      	movs	r2, r4
   1aa1c:	3284      	adds	r2, #132	; 0x84
   1aa1e:	7813      	ldrb	r3, [r2, #0]
   1aa20:	b087      	sub	sp, #28
   1aa22:	4303      	orrs	r3, r0
   1aa24:	3107      	adds	r1, #7
   1aa26:	4f2c      	ldr	r7, [pc, #176]	; (1aad8 <UpdateJoinSuccessState+0xd0>)
   1aa28:	7013      	strb	r3, [r2, #0]
   1aa2a:	2500      	movs	r5, #0
   1aa2c:	47b8      	blx	r7
   1aa2e:	0023      	movs	r3, r4
   1aa30:	2115      	movs	r1, #21
   1aa32:	3388      	adds	r3, #136	; 0x88
   1aa34:	0028      	movs	r0, r5
   1aa36:	601d      	str	r5, [r3, #0]
   1aa38:	47b8      	blx	r7
   1aa3a:	0023      	movs	r3, r4
   1aa3c:	2020      	movs	r0, #32
   1aa3e:	33ff      	adds	r3, #255	; 0xff
   1aa40:	7f5b      	ldrb	r3, [r3, #29]
   1aa42:	4e26      	ldr	r6, [pc, #152]	; (1aadc <UpdateJoinSuccessState+0xd4>)
   1aa44:	4203      	tst	r3, r0
   1aa46:	d00c      	beq.n	1aa62 <UpdateJoinSuccessState+0x5a>
   1aa48:	0023      	movs	r3, r4
   1aa4a:	a904      	add	r1, sp, #16
   1aa4c:	3380      	adds	r3, #128	; 0x80
   1aa4e:	710d      	strb	r5, [r1, #4]
   1aa50:	701d      	strb	r5, [r3, #0]
   1aa52:	6765      	str	r5, [r4, #116]	; 0x74
   1aa54:	67a5      	str	r5, [r4, #120]	; 0x78
   1aa56:	47b0      	blx	r6
   1aa58:	210f      	movs	r1, #15
   1aa5a:	2021      	movs	r0, #33	; 0x21
   1aa5c:	4469      	add	r1, sp
   1aa5e:	700d      	strb	r5, [r1, #0]
   1aa60:	47b0      	blx	r6
   1aa62:	0023      	movs	r3, r4
   1aa64:	2500      	movs	r5, #0
   1aa66:	338c      	adds	r3, #140	; 0x8c
   1aa68:	210a      	movs	r1, #10
   1aa6a:	2001      	movs	r0, #1
   1aa6c:	601d      	str	r5, [r3, #0]
   1aa6e:	47b8      	blx	r7
   1aa70:	0023      	movs	r3, r4
   1aa72:	33ca      	adds	r3, #202	; 0xca
   1aa74:	801d      	strh	r5, [r3, #0]
   1aa76:	0022      	movs	r2, r4
   1aa78:	0023      	movs	r3, r4
   1aa7a:	210e      	movs	r1, #14
   1aa7c:	3284      	adds	r2, #132	; 0x84
   1aa7e:	33f6      	adds	r3, #246	; 0xf6
   1aa80:	701d      	strb	r5, [r3, #0]
   1aa82:	7813      	ldrb	r3, [r2, #0]
   1aa84:	2039      	movs	r0, #57	; 0x39
   1aa86:	438b      	bics	r3, r1
   1aa88:	0029      	movs	r1, r5
   1aa8a:	7013      	strb	r3, [r2, #0]
   1aa8c:	47b0      	blx	r6
   1aa8e:	0023      	movs	r3, r4
   1aa90:	3385      	adds	r3, #133	; 0x85
   1aa92:	781b      	ldrb	r3, [r3, #0]
   1aa94:	079b      	lsls	r3, r3, #30
   1aa96:	d50c      	bpl.n	1aab2 <UpdateJoinSuccessState+0xaa>
   1aa98:	0023      	movs	r3, r4
   1aa9a:	21fa      	movs	r1, #250	; 0xfa
   1aa9c:	3390      	adds	r3, #144	; 0x90
   1aa9e:	681b      	ldr	r3, [r3, #0]
   1aaa0:	34f0      	adds	r4, #240	; 0xf0
   1aaa2:	0089      	lsls	r1, r1, #2
   1aaa4:	7820      	ldrb	r0, [r4, #0]
   1aaa6:	4359      	muls	r1, r3
   1aaa8:	9500      	str	r5, [sp, #0]
   1aaaa:	4b0d      	ldr	r3, [pc, #52]	; (1aae0 <UpdateJoinSuccessState+0xd8>)
   1aaac:	002a      	movs	r2, r5
   1aaae:	4c0d      	ldr	r4, [pc, #52]	; (1aae4 <UpdateJoinSuccessState+0xdc>)
   1aab0:	47a0      	blx	r4
   1aab2:	490d      	ldr	r1, [pc, #52]	; (1aae8 <UpdateJoinSuccessState+0xe0>)
   1aab4:	794a      	ldrb	r2, [r1, #5]
   1aab6:	790b      	ldrb	r3, [r1, #4]
   1aab8:	0212      	lsls	r2, r2, #8
   1aaba:	431a      	orrs	r2, r3
   1aabc:	798b      	ldrb	r3, [r1, #6]
   1aabe:	041b      	lsls	r3, r3, #16
   1aac0:	431a      	orrs	r2, r3
   1aac2:	79cb      	ldrb	r3, [r1, #7]
   1aac4:	061b      	lsls	r3, r3, #24
   1aac6:	4313      	orrs	r3, r2
   1aac8:	d001      	beq.n	1aace <UpdateJoinSuccessState+0xc6>
   1aaca:	2008      	movs	r0, #8
   1aacc:	4798      	blx	r3
   1aace:	b007      	add	sp, #28
   1aad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aad2:	46c0      	nop			; (mov r8, r8)
   1aad4:	20001bd0 	.word	0x20001bd0
   1aad8:	00013b45 	.word	0x00013b45
   1aadc:	0000d639 	.word	0x0000d639
   1aae0:	0001ac29 	.word	0x0001ac29
   1aae4:	000159bd 	.word	0x000159bd
   1aae8:	20001f2c 	.word	0x20001f2c

0001aaec <PrepareSessionKeys>:
   1aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aaee:	0004      	movs	r4, r0
   1aaf0:	2603      	movs	r6, #3
   1aaf2:	000d      	movs	r5, r1
   1aaf4:	0017      	movs	r7, r2
   1aaf6:	4b09      	ldr	r3, [pc, #36]	; (1ab1c <PrepareSessionKeys+0x30>)
   1aaf8:	2210      	movs	r2, #16
   1aafa:	2100      	movs	r1, #0
   1aafc:	4798      	blx	r3
   1aafe:	0032      	movs	r2, r6
   1ab00:	0029      	movs	r1, r5
   1ab02:	1c60      	adds	r0, r4, #1
   1ab04:	4d06      	ldr	r5, [pc, #24]	; (1ab20 <PrepareSessionKeys+0x34>)
   1ab06:	47a8      	blx	r5
   1ab08:	0032      	movs	r2, r6
   1ab0a:	0039      	movs	r1, r7
   1ab0c:	1d20      	adds	r0, r4, #4
   1ab0e:	47a8      	blx	r5
   1ab10:	1de0      	adds	r0, r4, #7
   1ab12:	2202      	movs	r2, #2
   1ab14:	4903      	ldr	r1, [pc, #12]	; (1ab24 <PrepareSessionKeys+0x38>)
   1ab16:	47a8      	blx	r5
   1ab18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab1a:	46c0      	nop			; (mov r8, r8)
   1ab1c:	000241cd 	.word	0x000241cd
   1ab20:	00024149 	.word	0x00024149
   1ab24:	20001c9c 	.word	0x20001c9c

0001ab28 <AssembleEncryptionBlock>:
   1ab28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab2a:	001e      	movs	r6, r3
   1ab2c:	4c0b      	ldr	r4, [pc, #44]	; (1ab5c <AssembleEncryptionBlock+0x34>)
   1ab2e:	0017      	movs	r7, r2
   1ab30:	4b0b      	ldr	r3, [pc, #44]	; (1ab60 <AssembleEncryptionBlock+0x38>)
   1ab32:	0005      	movs	r5, r0
   1ab34:	9101      	str	r1, [sp, #4]
   1ab36:	2210      	movs	r2, #16
   1ab38:	2100      	movs	r1, #0
   1ab3a:	0020      	movs	r0, r4
   1ab3c:	4798      	blx	r3
   1ab3e:	7026      	strb	r6, [r4, #0]
   1ab40:	2604      	movs	r6, #4
   1ab42:	7165      	strb	r5, [r4, #5]
   1ab44:	0032      	movs	r2, r6
   1ab46:	4d07      	ldr	r5, [pc, #28]	; (1ab64 <AssembleEncryptionBlock+0x3c>)
   1ab48:	a908      	add	r1, sp, #32
   1ab4a:	1da0      	adds	r0, r4, #6
   1ab4c:	47a8      	blx	r5
   1ab4e:	0020      	movs	r0, r4
   1ab50:	0032      	movs	r2, r6
   1ab52:	a901      	add	r1, sp, #4
   1ab54:	300a      	adds	r0, #10
   1ab56:	47a8      	blx	r5
   1ab58:	73e7      	strb	r7, [r4, #15]
   1ab5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1ab5c:	20001164 	.word	0x20001164
   1ab60:	000241cd 	.word	0x000241cd
   1ab64:	00024149 	.word	0x00024149

0001ab68 <ConfigureRadio>:
   1ab68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ab6a:	0001      	movs	r1, r0
   1ab6c:	0005      	movs	r5, r0
   1ab6e:	4c11      	ldr	r4, [pc, #68]	; (1abb4 <ConfigureRadio+0x4c>)
   1ab70:	3109      	adds	r1, #9
   1ab72:	2009      	movs	r0, #9
   1ab74:	47a0      	blx	r4
   1ab76:	0029      	movs	r1, r5
   1ab78:	2001      	movs	r0, #1
   1ab7a:	47a0      	blx	r4
   1ab7c:	1d29      	adds	r1, r5, #4
   1ab7e:	200a      	movs	r0, #10
   1ab80:	47a0      	blx	r4
   1ab82:	7a6b      	ldrb	r3, [r5, #9]
   1ab84:	2b01      	cmp	r3, #1
   1ab86:	d10b      	bne.n	1aba0 <ConfigureRadio+0x38>
   1ab88:	0029      	movs	r1, r5
   1ab8a:	2016      	movs	r0, #22
   1ab8c:	310b      	adds	r1, #11
   1ab8e:	47a0      	blx	r4
   1ab90:	0029      	movs	r1, r5
   1ab92:	2007      	movs	r0, #7
   1ab94:	310a      	adds	r1, #10
   1ab96:	47a0      	blx	r4
   1ab98:	2000      	movs	r0, #0
   1ab9a:	4907      	ldr	r1, [pc, #28]	; (1abb8 <ConfigureRadio+0x50>)
   1ab9c:	47a0      	blx	r4
   1ab9e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1aba0:	466b      	mov	r3, sp
   1aba2:	1dd9      	adds	r1, r3, #7
   1aba4:	2303      	movs	r3, #3
   1aba6:	2013      	movs	r0, #19
   1aba8:	700b      	strb	r3, [r1, #0]
   1abaa:	47a0      	blx	r4
   1abac:	4903      	ldr	r1, [pc, #12]	; (1abbc <ConfigureRadio+0x54>)
   1abae:	2012      	movs	r0, #18
   1abb0:	e7f4      	b.n	1ab9c <ConfigureRadio+0x34>
   1abb2:	46c0      	nop			; (mov r8, r8)
   1abb4:	0001f5e1 	.word	0x0001f5e1
   1abb8:	20001cd0 	.word	0x20001cd0
   1abbc:	0002cc90 	.word	0x0002cc90

0001abc0 <StopReceiveWindow2Timer>:
   1abc0:	b510      	push	{r4, lr}
   1abc2:	4c0b      	ldr	r4, [pc, #44]	; (1abf0 <StopReceiveWindow2Timer+0x30>)
   1abc4:	0022      	movs	r2, r4
   1abc6:	32fd      	adds	r2, #253	; 0xfd
   1abc8:	7812      	ldrb	r2, [r2, #0]
   1abca:	2a01      	cmp	r2, #1
   1abcc:	d10e      	bne.n	1abec <StopReceiveWindow2Timer+0x2c>
   1abce:	0021      	movs	r1, r4
   1abd0:	200e      	movs	r0, #14
   1abd2:	3184      	adds	r1, #132	; 0x84
   1abd4:	780a      	ldrb	r2, [r1, #0]
   1abd6:	34ee      	adds	r4, #238	; 0xee
   1abd8:	4382      	bics	r2, r0
   1abda:	700a      	strb	r2, [r1, #0]
   1abdc:	7820      	ldrb	r0, [r4, #0]
   1abde:	4b05      	ldr	r3, [pc, #20]	; (1abf4 <StopReceiveWindow2Timer+0x34>)
   1abe0:	4798      	blx	r3
   1abe2:	2800      	cmp	r0, #0
   1abe4:	d002      	beq.n	1abec <StopReceiveWindow2Timer+0x2c>
   1abe6:	7820      	ldrb	r0, [r4, #0]
   1abe8:	4b03      	ldr	r3, [pc, #12]	; (1abf8 <StopReceiveWindow2Timer+0x38>)
   1abea:	4798      	blx	r3
   1abec:	bd10      	pop	{r4, pc}
   1abee:	46c0      	nop			; (mov r8, r8)
   1abf0:	20001bd0 	.word	0x20001bd0
   1abf4:	00015a89 	.word	0x00015a89
   1abf8:	00015cfd 	.word	0x00015cfd

0001abfc <LorawanLinkCheckCallback.part.1>:
   1abfc:	4b07      	ldr	r3, [pc, #28]	; (1ac1c <LorawanLinkCheckCallback.part.1+0x20>)
   1abfe:	b513      	push	{r0, r1, r4, lr}
   1ac00:	001a      	movs	r2, r3
   1ac02:	21fa      	movs	r1, #250	; 0xfa
   1ac04:	3290      	adds	r2, #144	; 0x90
   1ac06:	6812      	ldr	r2, [r2, #0]
   1ac08:	0089      	lsls	r1, r1, #2
   1ac0a:	4351      	muls	r1, r2
   1ac0c:	2200      	movs	r2, #0
   1ac0e:	33f0      	adds	r3, #240	; 0xf0
   1ac10:	7818      	ldrb	r0, [r3, #0]
   1ac12:	4c03      	ldr	r4, [pc, #12]	; (1ac20 <LorawanLinkCheckCallback.part.1+0x24>)
   1ac14:	9200      	str	r2, [sp, #0]
   1ac16:	4b03      	ldr	r3, [pc, #12]	; (1ac24 <LorawanLinkCheckCallback.part.1+0x28>)
   1ac18:	47a0      	blx	r4
   1ac1a:	bd13      	pop	{r0, r1, r4, pc}
   1ac1c:	20001bd0 	.word	0x20001bd0
   1ac20:	000159bd 	.word	0x000159bd
   1ac24:	0001ac29 	.word	0x0001ac29

0001ac28 <LorawanLinkCheckCallback>:
   1ac28:	4b17      	ldr	r3, [pc, #92]	; (1ac88 <LorawanLinkCheckCallback+0x60>)
   1ac2a:	20a0      	movs	r0, #160	; 0xa0
   1ac2c:	001a      	movs	r2, r3
   1ac2e:	2180      	movs	r1, #128	; 0x80
   1ac30:	b510      	push	{r4, lr}
   1ac32:	3284      	adds	r2, #132	; 0x84
   1ac34:	8812      	ldrh	r2, [r2, #0]
   1ac36:	0080      	lsls	r0, r0, #2
   1ac38:	0089      	lsls	r1, r1, #2
   1ac3a:	4002      	ands	r2, r0
   1ac3c:	428a      	cmp	r2, r1
   1ac3e:	d11c      	bne.n	1ac7a <LorawanLinkCheckCallback+0x52>
   1ac40:	001a      	movs	r2, r3
   1ac42:	32e0      	adds	r2, #224	; 0xe0
   1ac44:	7810      	ldrb	r0, [r2, #0]
   1ac46:	2403      	movs	r4, #3
   1ac48:	2200      	movs	r2, #0
   1ac4a:	b2d1      	uxtb	r1, r2
   1ac4c:	4281      	cmp	r1, r0
   1ac4e:	d30d      	bcc.n	1ac6c <LorawanLinkCheckCallback+0x44>
   1ac50:	d113      	bne.n	1ac7a <LorawanLinkCheckCallback+0x52>
   1ac52:	2203      	movs	r2, #3
   1ac54:	434a      	muls	r2, r1
   1ac56:	2102      	movs	r1, #2
   1ac58:	189a      	adds	r2, r3, r2
   1ac5a:	3299      	adds	r2, #153	; 0x99
   1ac5c:	7011      	strb	r1, [r2, #0]
   1ac5e:	280f      	cmp	r0, #15
   1ac60:	d80b      	bhi.n	1ac7a <LorawanLinkCheckCallback+0x52>
   1ac62:	001a      	movs	r2, r3
   1ac64:	3001      	adds	r0, #1
   1ac66:	32e0      	adds	r2, #224	; 0xe0
   1ac68:	7010      	strb	r0, [r2, #0]
   1ac6a:	e006      	b.n	1ac7a <LorawanLinkCheckCallback+0x52>
   1ac6c:	0021      	movs	r1, r4
   1ac6e:	3201      	adds	r2, #1
   1ac70:	4351      	muls	r1, r2
   1ac72:	3196      	adds	r1, #150	; 0x96
   1ac74:	5c59      	ldrb	r1, [r3, r1]
   1ac76:	2902      	cmp	r1, #2
   1ac78:	d1e7      	bne.n	1ac4a <LorawanLinkCheckCallback+0x22>
   1ac7a:	3385      	adds	r3, #133	; 0x85
   1ac7c:	781b      	ldrb	r3, [r3, #0]
   1ac7e:	079b      	lsls	r3, r3, #30
   1ac80:	d501      	bpl.n	1ac86 <LorawanLinkCheckCallback+0x5e>
   1ac82:	4b02      	ldr	r3, [pc, #8]	; (1ac8c <LorawanLinkCheckCallback+0x64>)
   1ac84:	4798      	blx	r3
   1ac86:	bd10      	pop	{r4, pc}
   1ac88:	20001bd0 	.word	0x20001bd0
   1ac8c:	0001abfd 	.word	0x0001abfd

0001ac90 <LORAWAN_Init>:
   1ac90:	2270      	movs	r2, #112	; 0x70
   1ac92:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac94:	4b52      	ldr	r3, [pc, #328]	; (1ade0 <LORAWAN_Init+0x150>)
   1ac96:	b087      	sub	sp, #28
   1ac98:	781b      	ldrb	r3, [r3, #0]
   1ac9a:	0006      	movs	r6, r0
   1ac9c:	011b      	lsls	r3, r3, #4
   1ac9e:	4013      	ands	r3, r2
   1aca0:	4a50      	ldr	r2, [pc, #320]	; (1ade4 <LORAWAN_Init+0x154>)
   1aca2:	000f      	movs	r7, r1
   1aca4:	7812      	ldrb	r2, [r2, #0]
   1aca6:	0912      	lsrs	r2, r2, #4
   1aca8:	4313      	orrs	r3, r2
   1acaa:	2b1f      	cmp	r3, #31
   1acac:	d000      	beq.n	1acb0 <LORAWAN_Init+0x20>
   1acae:	e7fe      	b.n	1acae <LORAWAN_Init+0x1e>
   1acb0:	4d4d      	ldr	r5, [pc, #308]	; (1ade8 <LORAWAN_Init+0x158>)
   1acb2:	002b      	movs	r3, r5
   1acb4:	33f8      	adds	r3, #248	; 0xf8
   1acb6:	781b      	ldrb	r3, [r3, #0]
   1acb8:	2b00      	cmp	r3, #0
   1acba:	d000      	beq.n	1acbe <LORAWAN_Init+0x2e>
   1acbc:	e08c      	b.n	1add8 <LORAWAN_Init+0x148>
   1acbe:	484b      	ldr	r0, [pc, #300]	; (1adec <LORAWAN_Init+0x15c>)
   1acc0:	4c4b      	ldr	r4, [pc, #300]	; (1adf0 <LORAWAN_Init+0x160>)
   1acc2:	47a0      	blx	r4
   1acc4:	2808      	cmp	r0, #8
   1acc6:	d050      	beq.n	1ad6a <LORAWAN_Init+0xda>
   1acc8:	4b4a      	ldr	r3, [pc, #296]	; (1adf4 <LORAWAN_Init+0x164>)
   1acca:	4798      	blx	r3
   1accc:	002b      	movs	r3, r5
   1acce:	33f8      	adds	r3, #248	; 0xf8
   1acd0:	781b      	ldrb	r3, [r3, #0]
   1acd2:	2b00      	cmp	r3, #0
   1acd4:	d018      	beq.n	1ad08 <LORAWAN_Init+0x78>
   1acd6:	4b48      	ldr	r3, [pc, #288]	; (1adf8 <LORAWAN_Init+0x168>)
   1acd8:	0a32      	lsrs	r2, r6, #8
   1acda:	705a      	strb	r2, [r3, #1]
   1acdc:	0c32      	lsrs	r2, r6, #16
   1acde:	709a      	strb	r2, [r3, #2]
   1ace0:	0a3a      	lsrs	r2, r7, #8
   1ace2:	701e      	strb	r6, [r3, #0]
   1ace4:	711f      	strb	r7, [r3, #4]
   1ace6:	715a      	strb	r2, [r3, #5]
   1ace8:	0e36      	lsrs	r6, r6, #24
   1acea:	0c3a      	lsrs	r2, r7, #16
   1acec:	0e3f      	lsrs	r7, r7, #24
   1acee:	719a      	strb	r2, [r3, #6]
   1acf0:	70de      	strb	r6, [r3, #3]
   1acf2:	71df      	strb	r7, [r3, #7]
   1acf4:	4b41      	ldr	r3, [pc, #260]	; (1adfc <LORAWAN_Init+0x16c>)
   1acf6:	4798      	blx	r3
   1acf8:	4941      	ldr	r1, [pc, #260]	; (1ae00 <LORAWAN_Init+0x170>)
   1acfa:	4b42      	ldr	r3, [pc, #264]	; (1ae04 <LORAWAN_Init+0x174>)
   1acfc:	201a      	movs	r0, #26
   1acfe:	4798      	blx	r3
   1ad00:	4b41      	ldr	r3, [pc, #260]	; (1ae08 <LORAWAN_Init+0x178>)
   1ad02:	4798      	blx	r3
   1ad04:	4b41      	ldr	r3, [pc, #260]	; (1ae0c <LORAWAN_Init+0x17c>)
   1ad06:	4798      	blx	r3
   1ad08:	2317      	movs	r3, #23
   1ad0a:	ac02      	add	r4, sp, #8
   1ad0c:	4a40      	ldr	r2, [pc, #256]	; (1ae10 <LORAWAN_Init+0x180>)
   1ad0e:	7123      	strb	r3, [r4, #4]
   1ad10:	4940      	ldr	r1, [pc, #256]	; (1ae14 <LORAWAN_Init+0x184>)
   1ad12:	4b41      	ldr	r3, [pc, #260]	; (1ae18 <LORAWAN_Init+0x188>)
   1ad14:	9205      	str	r2, [sp, #20]
   1ad16:	9200      	str	r2, [sp, #0]
   1ad18:	4e40      	ldr	r6, [pc, #256]	; (1ae1c <LORAWAN_Init+0x18c>)
   1ad1a:	9a03      	ldr	r2, [sp, #12]
   1ad1c:	2000      	movs	r0, #0
   1ad1e:	9102      	str	r1, [sp, #8]
   1ad20:	9304      	str	r3, [sp, #16]
   1ad22:	47b0      	blx	r6
   1ad24:	2310      	movs	r3, #16
   1ad26:	4a3e      	ldr	r2, [pc, #248]	; (1ae20 <LORAWAN_Init+0x190>)
   1ad28:	7123      	strb	r3, [r4, #4]
   1ad2a:	4b3e      	ldr	r3, [pc, #248]	; (1ae24 <LORAWAN_Init+0x194>)
   1ad2c:	60e2      	str	r2, [r4, #12]
   1ad2e:	60a3      	str	r3, [r4, #8]
   1ad30:	493d      	ldr	r1, [pc, #244]	; (1ae28 <LORAWAN_Init+0x198>)
   1ad32:	9200      	str	r2, [sp, #0]
   1ad34:	6862      	ldr	r2, [r4, #4]
   1ad36:	2001      	movs	r0, #1
   1ad38:	9102      	str	r1, [sp, #8]
   1ad3a:	47b0      	blx	r6
   1ad3c:	2201      	movs	r2, #1
   1ad3e:	4252      	negs	r2, r2
   1ad40:	17d3      	asrs	r3, r2, #31
   1ad42:	9202      	str	r2, [sp, #8]
   1ad44:	9303      	str	r3, [sp, #12]
   1ad46:	4b39      	ldr	r3, [pc, #228]	; (1ae2c <LORAWAN_Init+0x19c>)
   1ad48:	0021      	movs	r1, r4
   1ad4a:	5ce8      	ldrb	r0, [r5, r3]
   1ad4c:	4b38      	ldr	r3, [pc, #224]	; (1ae30 <LORAWAN_Init+0x1a0>)
   1ad4e:	4798      	blx	r3
   1ad50:	238e      	movs	r3, #142	; 0x8e
   1ad52:	22ff      	movs	r2, #255	; 0xff
   1ad54:	009b      	lsls	r3, r3, #2
   1ad56:	54ea      	strb	r2, [r5, r3]
   1ad58:	3a01      	subs	r2, #1
   1ad5a:	3aff      	subs	r2, #255	; 0xff
   1ad5c:	3b04      	subs	r3, #4
   1ad5e:	50ea      	str	r2, [r5, r3]
   1ad60:	2200      	movs	r2, #0
   1ad62:	3b04      	subs	r3, #4
   1ad64:	54ea      	strb	r2, [r5, r3]
   1ad66:	b007      	add	sp, #28
   1ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad6a:	4832      	ldr	r0, [pc, #200]	; (1ae34 <LORAWAN_Init+0x1a4>)
   1ad6c:	47a0      	blx	r4
   1ad6e:	2808      	cmp	r0, #8
   1ad70:	d1aa      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad72:	4831      	ldr	r0, [pc, #196]	; (1ae38 <LORAWAN_Init+0x1a8>)
   1ad74:	47a0      	blx	r4
   1ad76:	2808      	cmp	r0, #8
   1ad78:	d1a6      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad7a:	4830      	ldr	r0, [pc, #192]	; (1ae3c <LORAWAN_Init+0x1ac>)
   1ad7c:	47a0      	blx	r4
   1ad7e:	2808      	cmp	r0, #8
   1ad80:	d1a2      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad82:	482f      	ldr	r0, [pc, #188]	; (1ae40 <LORAWAN_Init+0x1b0>)
   1ad84:	47a0      	blx	r4
   1ad86:	2808      	cmp	r0, #8
   1ad88:	d19e      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad8a:	482e      	ldr	r0, [pc, #184]	; (1ae44 <LORAWAN_Init+0x1b4>)
   1ad8c:	47a0      	blx	r4
   1ad8e:	2808      	cmp	r0, #8
   1ad90:	d19a      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad92:	482d      	ldr	r0, [pc, #180]	; (1ae48 <LORAWAN_Init+0x1b8>)
   1ad94:	47a0      	blx	r4
   1ad96:	2808      	cmp	r0, #8
   1ad98:	d196      	bne.n	1acc8 <LORAWAN_Init+0x38>
   1ad9a:	482c      	ldr	r0, [pc, #176]	; (1ae4c <LORAWAN_Init+0x1bc>)
   1ad9c:	47a0      	blx	r4
   1ad9e:	2808      	cmp	r0, #8
   1ada0:	d000      	beq.n	1ada4 <LORAWAN_Init+0x114>
   1ada2:	e791      	b.n	1acc8 <LORAWAN_Init+0x38>
   1ada4:	482a      	ldr	r0, [pc, #168]	; (1ae50 <LORAWAN_Init+0x1c0>)
   1ada6:	47a0      	blx	r4
   1ada8:	2808      	cmp	r0, #8
   1adaa:	d000      	beq.n	1adae <LORAWAN_Init+0x11e>
   1adac:	e78c      	b.n	1acc8 <LORAWAN_Init+0x38>
   1adae:	4829      	ldr	r0, [pc, #164]	; (1ae54 <LORAWAN_Init+0x1c4>)
   1adb0:	47a0      	blx	r4
   1adb2:	2808      	cmp	r0, #8
   1adb4:	d000      	beq.n	1adb8 <LORAWAN_Init+0x128>
   1adb6:	e787      	b.n	1acc8 <LORAWAN_Init+0x38>
   1adb8:	4827      	ldr	r0, [pc, #156]	; (1ae58 <LORAWAN_Init+0x1c8>)
   1adba:	47a0      	blx	r4
   1adbc:	2808      	cmp	r0, #8
   1adbe:	d000      	beq.n	1adc2 <LORAWAN_Init+0x132>
   1adc0:	e782      	b.n	1acc8 <LORAWAN_Init+0x38>
   1adc2:	4826      	ldr	r0, [pc, #152]	; (1ae5c <LORAWAN_Init+0x1cc>)
   1adc4:	4b26      	ldr	r3, [pc, #152]	; (1ae60 <LORAWAN_Init+0x1d0>)
   1adc6:	4798      	blx	r3
   1adc8:	2808      	cmp	r0, #8
   1adca:	d000      	beq.n	1adce <LORAWAN_Init+0x13e>
   1adcc:	e77c      	b.n	1acc8 <LORAWAN_Init+0x38>
   1adce:	002b      	movs	r3, r5
   1add0:	2201      	movs	r2, #1
   1add2:	33f8      	adds	r3, #248	; 0xf8
   1add4:	701a      	strb	r2, [r3, #0]
   1add6:	e779      	b.n	1accc <LORAWAN_Init+0x3c>
   1add8:	4b22      	ldr	r3, [pc, #136]	; (1ae64 <LORAWAN_Init+0x1d4>)
   1adda:	4798      	blx	r3
   1addc:	e776      	b.n	1accc <LORAWAN_Init+0x3c>
   1adde:	46c0      	nop			; (mov r8, r8)
   1ade0:	41003fe8 	.word	0x41003fe8
   1ade4:	41003fe4 	.word	0x41003fe4
   1ade8:	20001bd0 	.word	0x20001bd0
   1adec:	20001cbb 	.word	0x20001cbb
   1adf0:	00015965 	.word	0x00015965
   1adf4:	00015875 	.word	0x00015875
   1adf8:	20001f2c 	.word	0x20001f2c
   1adfc:	0001f7dd 	.word	0x0001f7dd
   1ae00:	0001ca95 	.word	0x0001ca95
   1ae04:	0001f5e1 	.word	0x0001f5e1
   1ae08:	0001654d 	.word	0x0001654d
   1ae0c:	00024339 	.word	0x00024339
   1ae10:	0001f1ed 	.word	0x0001f1ed
   1ae14:	20001bb8 	.word	0x20001bb8
   1ae18:	0002ccc4 	.word	0x0002ccc4
   1ae1c:	00014001 	.word	0x00014001
   1ae20:	0001f1f1 	.word	0x0001f1f1
   1ae24:	0002cd7c 	.word	0x0002cd7c
   1ae28:	20001aa8 	.word	0x20001aa8
   1ae2c:	00000231 	.word	0x00000231
   1ae30:	000161d9 	.word	0x000161d9
   1ae34:	20001cbc 	.word	0x20001cbc
   1ae38:	20001cbd 	.word	0x20001cbd
   1ae3c:	20001cbe 	.word	0x20001cbe
   1ae40:	20001cc0 	.word	0x20001cc0
   1ae44:	20001cc1 	.word	0x20001cc1
   1ae48:	20001cbf 	.word	0x20001cbf
   1ae4c:	20001cc2 	.word	0x20001cc2
   1ae50:	20001ccb 	.word	0x20001ccb
   1ae54:	20001ccc 	.word	0x20001ccc
   1ae58:	20001cf8 	.word	0x20001cf8
   1ae5c:	20001e01 	.word	0x20001e01
   1ae60:	00016151 	.word	0x00016151
   1ae64:	0001a735 	.word	0x0001a735

0001ae68 <LORAWAN_Send>:
   1ae68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ae6a:	4c37      	ldr	r4, [pc, #220]	; (1af48 <LORAWAN_Send+0xe0>)
   1ae6c:	0006      	movs	r6, r0
   1ae6e:	0023      	movs	r3, r4
   1ae70:	3384      	adds	r3, #132	; 0x84
   1ae72:	781b      	ldrb	r3, [r3, #0]
   1ae74:	250f      	movs	r5, #15
   1ae76:	b25a      	sxtb	r2, r3
   1ae78:	2a00      	cmp	r2, #0
   1ae7a:	db0b      	blt.n	1ae94 <LORAWAN_Send+0x2c>
   1ae7c:	3d03      	subs	r5, #3
   1ae7e:	065a      	lsls	r2, r3, #25
   1ae80:	d408      	bmi.n	1ae94 <LORAWAN_Send+0x2c>
   1ae82:	3d03      	subs	r5, #3
   1ae84:	07db      	lsls	r3, r3, #31
   1ae86:	d505      	bpl.n	1ae94 <LORAWAN_Send+0x2c>
   1ae88:	2388      	movs	r3, #136	; 0x88
   1ae8a:	009b      	lsls	r3, r3, #2
   1ae8c:	5ce7      	ldrb	r7, [r4, r3]
   1ae8e:	2f00      	cmp	r7, #0
   1ae90:	d102      	bne.n	1ae98 <LORAWAN_Send+0x30>
   1ae92:	2511      	movs	r5, #17
   1ae94:	0028      	movs	r0, r5
   1ae96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ae98:	2800      	cmp	r0, #0
   1ae9a:	d10f      	bne.n	1aebc <LORAWAN_Send+0x54>
   1ae9c:	2700      	movs	r7, #0
   1ae9e:	0023      	movs	r3, r4
   1aea0:	3388      	adds	r3, #136	; 0x88
   1aea2:	681b      	ldr	r3, [r3, #0]
   1aea4:	3301      	adds	r3, #1
   1aea6:	d123      	bne.n	1aef0 <LORAWAN_Send+0x88>
   1aea8:	2001      	movs	r0, #1
   1aeaa:	3484      	adds	r4, #132	; 0x84
   1aeac:	78a3      	ldrb	r3, [r4, #2]
   1aeae:	210b      	movs	r1, #11
   1aeb0:	4303      	orrs	r3, r0
   1aeb2:	70a3      	strb	r3, [r4, #2]
   1aeb4:	4b25      	ldr	r3, [pc, #148]	; (1af4c <LORAWAN_Send+0xe4>)
   1aeb6:	4798      	blx	r3
   1aeb8:	250d      	movs	r5, #13
   1aeba:	e7eb      	b.n	1ae94 <LORAWAN_Send+0x2c>
   1aebc:	7843      	ldrb	r3, [r0, #1]
   1aebe:	7a02      	ldrb	r2, [r0, #8]
   1aec0:	3b01      	subs	r3, #1
   1aec2:	b2db      	uxtb	r3, r3
   1aec4:	9201      	str	r2, [sp, #4]
   1aec6:	2bdf      	cmp	r3, #223	; 0xdf
   1aec8:	d902      	bls.n	1aed0 <LORAWAN_Send+0x68>
   1aeca:	250a      	movs	r5, #10
   1aecc:	2a00      	cmp	r2, #0
   1aece:	d1e1      	bne.n	1ae94 <LORAWAN_Send+0x2c>
   1aed0:	4b1f      	ldr	r3, [pc, #124]	; (1af50 <LORAWAN_Send+0xe8>)
   1aed2:	4798      	blx	r3
   1aed4:	4684      	mov	ip, r0
   1aed6:	9b01      	ldr	r3, [sp, #4]
   1aed8:	9000      	str	r0, [sp, #0]
   1aeda:	4463      	add	r3, ip
   1aedc:	001d      	movs	r5, r3
   1aede:	4b1d      	ldr	r3, [pc, #116]	; (1af54 <LORAWAN_Send+0xec>)
   1aee0:	4798      	blx	r3
   1aee2:	4285      	cmp	r5, r0
   1aee4:	ddda      	ble.n	1ae9c <LORAWAN_Send+0x34>
   1aee6:	9b00      	ldr	r3, [sp, #0]
   1aee8:	250e      	movs	r5, #14
   1aeea:	2b00      	cmp	r3, #0
   1aeec:	d0d2      	beq.n	1ae94 <LORAWAN_Send+0x2c>
   1aeee:	e7d6      	b.n	1ae9e <LORAWAN_Send+0x36>
   1aef0:	0023      	movs	r3, r4
   1aef2:	33fd      	adds	r3, #253	; 0xfd
   1aef4:	781b      	ldrb	r3, [r3, #0]
   1aef6:	2b04      	cmp	r3, #4
   1aef8:	d01d      	beq.n	1af36 <LORAWAN_Send+0xce>
   1aefa:	0023      	movs	r3, r4
   1aefc:	33fd      	adds	r3, #253	; 0xfd
   1aefe:	781b      	ldrb	r3, [r3, #0]
   1af00:	2b01      	cmp	r3, #1
   1af02:	d105      	bne.n	1af10 <LORAWAN_Send+0xa8>
   1af04:	0023      	movs	r3, r4
   1af06:	3384      	adds	r3, #132	; 0x84
   1af08:	781a      	ldrb	r2, [r3, #0]
   1af0a:	230e      	movs	r3, #14
   1af0c:	421a      	tst	r2, r3
   1af0e:	d1c0      	bne.n	1ae92 <LORAWAN_Send+0x2a>
   1af10:	0023      	movs	r3, r4
   1af12:	33fc      	adds	r3, #252	; 0xfc
   1af14:	2f00      	cmp	r7, #0
   1af16:	d113      	bne.n	1af40 <LORAWAN_Send+0xd8>
   1af18:	2508      	movs	r5, #8
   1af1a:	60de      	str	r6, [r3, #12]
   1af1c:	2388      	movs	r3, #136	; 0x88
   1af1e:	2200      	movs	r2, #0
   1af20:	009b      	lsls	r3, r3, #2
   1af22:	54e2      	strb	r2, [r4, r3]
   1af24:	2001      	movs	r0, #1
   1af26:	4b0c      	ldr	r3, [pc, #48]	; (1af58 <LORAWAN_Send+0xf0>)
   1af28:	4798      	blx	r3
   1af2a:	2320      	movs	r3, #32
   1af2c:	3494      	adds	r4, #148	; 0x94
   1af2e:	7822      	ldrb	r2, [r4, #0]
   1af30:	4313      	orrs	r3, r2
   1af32:	7023      	strb	r3, [r4, #0]
   1af34:	e7ae      	b.n	1ae94 <LORAWAN_Send+0x2c>
   1af36:	4b09      	ldr	r3, [pc, #36]	; (1af5c <LORAWAN_Send+0xf4>)
   1af38:	4798      	blx	r3
   1af3a:	2808      	cmp	r0, #8
   1af3c:	d1a9      	bne.n	1ae92 <LORAWAN_Send+0x2a>
   1af3e:	e7dc      	b.n	1aefa <LORAWAN_Send+0x92>
   1af40:	2200      	movs	r2, #0
   1af42:	2511      	movs	r5, #17
   1af44:	60da      	str	r2, [r3, #12]
   1af46:	e7e9      	b.n	1af1c <LORAWAN_Send+0xb4>
   1af48:	20001bd0 	.word	0x20001bd0
   1af4c:	00013b45 	.word	0x00013b45
   1af50:	0001a6f5 	.word	0x0001a6f5
   1af54:	0001a79d 	.word	0x0001a79d
   1af58:	0001f46d 	.word	0x0001f46d
   1af5c:	0001eb75 	.word	0x0001eb75

0001af60 <AutomaticReplyCallback>:
   1af60:	b510      	push	{r4, lr}
   1af62:	4c0d      	ldr	r4, [pc, #52]	; (1af98 <AutomaticReplyCallback+0x38>)
   1af64:	0023      	movs	r3, r4
   1af66:	33fd      	adds	r3, #253	; 0xfd
   1af68:	781b      	ldrb	r3, [r3, #0]
   1af6a:	2b01      	cmp	r3, #1
   1af6c:	d10e      	bne.n	1af8c <AutomaticReplyCallback+0x2c>
   1af6e:	0022      	movs	r2, r4
   1af70:	210e      	movs	r1, #14
   1af72:	3284      	adds	r2, #132	; 0x84
   1af74:	7813      	ldrb	r3, [r2, #0]
   1af76:	438b      	bics	r3, r1
   1af78:	7013      	strb	r3, [r2, #0]
   1af7a:	4b08      	ldr	r3, [pc, #32]	; (1af9c <AutomaticReplyCallback+0x3c>)
   1af7c:	2000      	movs	r0, #0
   1af7e:	4798      	blx	r3
   1af80:	2208      	movs	r2, #8
   1af82:	3494      	adds	r4, #148	; 0x94
   1af84:	7823      	ldrb	r3, [r4, #0]
   1af86:	4393      	bics	r3, r2
   1af88:	7023      	strb	r3, [r4, #0]
   1af8a:	bd10      	pop	{r4, pc}
   1af8c:	2b04      	cmp	r3, #4
   1af8e:	d1f4      	bne.n	1af7a <AutomaticReplyCallback+0x1a>
   1af90:	4b03      	ldr	r3, [pc, #12]	; (1afa0 <AutomaticReplyCallback+0x40>)
   1af92:	4798      	blx	r3
   1af94:	e7f1      	b.n	1af7a <AutomaticReplyCallback+0x1a>
   1af96:	46c0      	nop			; (mov r8, r8)
   1af98:	20001bd0 	.word	0x20001bd0
   1af9c:	0001ae69 	.word	0x0001ae69
   1afa0:	0001fef5 	.word	0x0001fef5

0001afa4 <LorawanLinkCheckConfigure>:
   1afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afa6:	23fa      	movs	r3, #250	; 0xfa
   1afa8:	4c21      	ldr	r4, [pc, #132]	; (1b030 <LorawanLinkCheckConfigure+0x8c>)
   1afaa:	009b      	lsls	r3, r3, #2
   1afac:	0022      	movs	r2, r4
   1afae:	0025      	movs	r5, r4
   1afb0:	4343      	muls	r3, r0
   1afb2:	3290      	adds	r2, #144	; 0x90
   1afb4:	0006      	movs	r6, r0
   1afb6:	2102      	movs	r1, #2
   1afb8:	2000      	movs	r0, #0
   1afba:	4f1e      	ldr	r7, [pc, #120]	; (1b034 <LorawanLinkCheckConfigure+0x90>)
   1afbc:	6013      	str	r3, [r2, #0]
   1afbe:	3584      	adds	r5, #132	; 0x84
   1afc0:	47b8      	blx	r7
   1afc2:	2e00      	cmp	r6, #0
   1afc4:	d127      	bne.n	1b016 <LorawanLinkCheckConfigure+0x72>
   1afc6:	0023      	movs	r3, r4
   1afc8:	33f0      	adds	r3, #240	; 0xf0
   1afca:	7818      	ldrb	r0, [r3, #0]
   1afcc:	4b1a      	ldr	r3, [pc, #104]	; (1b038 <LorawanLinkCheckConfigure+0x94>)
   1afce:	4798      	blx	r3
   1afd0:	2202      	movs	r2, #2
   1afd2:	786b      	ldrb	r3, [r5, #1]
   1afd4:	210b      	movs	r1, #11
   1afd6:	4393      	bics	r3, r2
   1afd8:	706b      	strb	r3, [r5, #1]
   1afda:	2001      	movs	r0, #1
   1afdc:	47b8      	blx	r7
   1afde:	0023      	movs	r3, r4
   1afe0:	2701      	movs	r7, #1
   1afe2:	33e0      	adds	r3, #224	; 0xe0
   1afe4:	781b      	ldrb	r3, [r3, #0]
   1afe6:	0030      	movs	r0, r6
   1afe8:	0032      	movs	r2, r6
   1afea:	36ff      	adds	r6, #255	; 0xff
   1afec:	429a      	cmp	r2, r3
   1afee:	d304      	bcc.n	1affa <LorawanLinkCheckConfigure+0x56>
   1aff0:	2800      	cmp	r0, #0
   1aff2:	d001      	beq.n	1aff8 <LorawanLinkCheckConfigure+0x54>
   1aff4:	34e0      	adds	r4, #224	; 0xe0
   1aff6:	7023      	strb	r3, [r4, #0]
   1aff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1affa:	2103      	movs	r1, #3
   1affc:	4351      	muls	r1, r2
   1affe:	1861      	adds	r1, r4, r1
   1b000:	3199      	adds	r1, #153	; 0x99
   1b002:	780d      	ldrb	r5, [r1, #0]
   1b004:	2d02      	cmp	r5, #2
   1b006:	d103      	bne.n	1b010 <LorawanLinkCheckConfigure+0x6c>
   1b008:	0038      	movs	r0, r7
   1b00a:	3b01      	subs	r3, #1
   1b00c:	700e      	strb	r6, [r1, #0]
   1b00e:	b2db      	uxtb	r3, r3
   1b010:	3201      	adds	r2, #1
   1b012:	b2d2      	uxtb	r2, r2
   1b014:	e7ea      	b.n	1afec <LorawanLinkCheckConfigure+0x48>
   1b016:	2302      	movs	r3, #2
   1b018:	786a      	ldrb	r2, [r5, #1]
   1b01a:	210b      	movs	r1, #11
   1b01c:	4313      	orrs	r3, r2
   1b01e:	706b      	strb	r3, [r5, #1]
   1b020:	2001      	movs	r0, #1
   1b022:	47b8      	blx	r7
   1b024:	782b      	ldrb	r3, [r5, #0]
   1b026:	07db      	lsls	r3, r3, #31
   1b028:	d5e6      	bpl.n	1aff8 <LorawanLinkCheckConfigure+0x54>
   1b02a:	4b04      	ldr	r3, [pc, #16]	; (1b03c <LorawanLinkCheckConfigure+0x98>)
   1b02c:	4798      	blx	r3
   1b02e:	e7e3      	b.n	1aff8 <LorawanLinkCheckConfigure+0x54>
   1b030:	20001bd0 	.word	0x20001bd0
   1b034:	00013b45 	.word	0x00013b45
   1b038:	00015cfd 	.word	0x00015cfd
   1b03c:	0001abfd 	.word	0x0001abfd

0001b040 <EncodeDeviceTimeReq>:
   1b040:	4b08      	ldr	r3, [pc, #32]	; (1b064 <EncodeDeviceTimeReq+0x24>)
   1b042:	b510      	push	{r4, lr}
   1b044:	001c      	movs	r4, r3
   1b046:	34e0      	adds	r4, #224	; 0xe0
   1b048:	7822      	ldrb	r2, [r4, #0]
   1b04a:	2015      	movs	r0, #21
   1b04c:	2a0f      	cmp	r2, #15
   1b04e:	d808      	bhi.n	1b062 <EncodeDeviceTimeReq+0x22>
   1b050:	2103      	movs	r1, #3
   1b052:	4351      	muls	r1, r2
   1b054:	185b      	adds	r3, r3, r1
   1b056:	210d      	movs	r1, #13
   1b058:	3399      	adds	r3, #153	; 0x99
   1b05a:	3201      	adds	r2, #1
   1b05c:	7019      	strb	r1, [r3, #0]
   1b05e:	7022      	strb	r2, [r4, #0]
   1b060:	380d      	subs	r0, #13
   1b062:	bd10      	pop	{r4, pc}
   1b064:	20001bd0 	.word	0x20001bd0

0001b068 <EncodeLinkCheckReq>:
   1b068:	4b08      	ldr	r3, [pc, #32]	; (1b08c <EncodeLinkCheckReq+0x24>)
   1b06a:	b510      	push	{r4, lr}
   1b06c:	001c      	movs	r4, r3
   1b06e:	34e0      	adds	r4, #224	; 0xe0
   1b070:	7822      	ldrb	r2, [r4, #0]
   1b072:	2015      	movs	r0, #21
   1b074:	2a0f      	cmp	r2, #15
   1b076:	d808      	bhi.n	1b08a <EncodeLinkCheckReq+0x22>
   1b078:	2103      	movs	r1, #3
   1b07a:	4351      	muls	r1, r2
   1b07c:	185b      	adds	r3, r3, r1
   1b07e:	2102      	movs	r1, #2
   1b080:	3399      	adds	r3, #153	; 0x99
   1b082:	3201      	adds	r2, #1
   1b084:	7019      	strb	r1, [r3, #0]
   1b086:	7022      	strb	r2, [r4, #0]
   1b088:	380d      	subs	r0, #13
   1b08a:	bd10      	pop	{r4, pc}
   1b08c:	20001bd0 	.word	0x20001bd0

0001b090 <UpdateCurrentDataRate>:
   1b090:	b510      	push	{r4, lr}
   1b092:	4b04      	ldr	r3, [pc, #16]	; (1b0a4 <UpdateCurrentDataRate+0x14>)
   1b094:	210c      	movs	r1, #12
   1b096:	33e7      	adds	r3, #231	; 0xe7
   1b098:	7018      	strb	r0, [r3, #0]
   1b09a:	2001      	movs	r0, #1
   1b09c:	4b02      	ldr	r3, [pc, #8]	; (1b0a8 <UpdateCurrentDataRate+0x18>)
   1b09e:	4798      	blx	r3
   1b0a0:	bd10      	pop	{r4, pc}
   1b0a2:	46c0      	nop			; (mov r8, r8)
   1b0a4:	20001bd0 	.word	0x20001bd0
   1b0a8:	00013b45 	.word	0x00013b45

0001b0ac <UpdateDLSettings>:
   1b0ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b0ae:	466b      	mov	r3, sp
   1b0b0:	1dde      	adds	r6, r3, #7
   1b0b2:	1d9c      	adds	r4, r3, #6
   1b0b4:	71d8      	strb	r0, [r3, #7]
   1b0b6:	7021      	strb	r1, [r4, #0]
   1b0b8:	2017      	movs	r0, #23
   1b0ba:	0031      	movs	r1, r6
   1b0bc:	4d0c      	ldr	r5, [pc, #48]	; (1b0f0 <UpdateDLSettings+0x44>)
   1b0be:	47a8      	blx	r5
   1b0c0:	2808      	cmp	r0, #8
   1b0c2:	d107      	bne.n	1b0d4 <UpdateDLSettings+0x28>
   1b0c4:	4b0b      	ldr	r3, [pc, #44]	; (1b0f4 <UpdateDLSettings+0x48>)
   1b0c6:	7832      	ldrb	r2, [r6, #0]
   1b0c8:	336e      	adds	r3, #110	; 0x6e
   1b0ca:	701a      	strb	r2, [r3, #0]
   1b0cc:	2100      	movs	r1, #0
   1b0ce:	3807      	subs	r0, #7
   1b0d0:	4b09      	ldr	r3, [pc, #36]	; (1b0f8 <UpdateDLSettings+0x4c>)
   1b0d2:	4798      	blx	r3
   1b0d4:	0021      	movs	r1, r4
   1b0d6:	2018      	movs	r0, #24
   1b0d8:	47a8      	blx	r5
   1b0da:	2808      	cmp	r0, #8
   1b0dc:	d107      	bne.n	1b0ee <UpdateDLSettings+0x42>
   1b0de:	2101      	movs	r1, #1
   1b0e0:	4b04      	ldr	r3, [pc, #16]	; (1b0f4 <UpdateDLSettings+0x48>)
   1b0e2:	7822      	ldrb	r2, [r4, #0]
   1b0e4:	33f7      	adds	r3, #247	; 0xf7
   1b0e6:	701a      	strb	r2, [r3, #0]
   1b0e8:	0008      	movs	r0, r1
   1b0ea:	4b03      	ldr	r3, [pc, #12]	; (1b0f8 <UpdateDLSettings+0x4c>)
   1b0ec:	4798      	blx	r3
   1b0ee:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1b0f0:	0000d5ed 	.word	0x0000d5ed
   1b0f4:	20001bd0 	.word	0x20001bd0
   1b0f8:	00013b45 	.word	0x00013b45

0001b0fc <UpdateTxPower>:
   1b0fc:	b510      	push	{r4, lr}
   1b0fe:	4b04      	ldr	r3, [pc, #16]	; (1b110 <UpdateTxPower+0x14>)
   1b100:	210a      	movs	r1, #10
   1b102:	33e9      	adds	r3, #233	; 0xe9
   1b104:	7018      	strb	r0, [r3, #0]
   1b106:	2000      	movs	r0, #0
   1b108:	4b02      	ldr	r3, [pc, #8]	; (1b114 <UpdateTxPower+0x18>)
   1b10a:	4798      	blx	r3
   1b10c:	bd10      	pop	{r4, pc}
   1b10e:	46c0      	nop			; (mov r8, r8)
   1b110:	20001bd0 	.word	0x20001bd0
   1b114:	00013b45 	.word	0x00013b45

0001b118 <UpdateRetransmissionAckTimeoutState>:
   1b118:	4b10      	ldr	r3, [pc, #64]	; (1b15c <UpdateRetransmissionAckTimeoutState+0x44>)
   1b11a:	b513      	push	{r0, r1, r4, lr}
   1b11c:	001a      	movs	r2, r3
   1b11e:	32fd      	adds	r2, #253	; 0xfd
   1b120:	7812      	ldrb	r2, [r2, #0]
   1b122:	2a01      	cmp	r2, #1
   1b124:	d108      	bne.n	1b138 <UpdateRetransmissionAckTimeoutState+0x20>
   1b126:	0018      	movs	r0, r3
   1b128:	210e      	movs	r1, #14
   1b12a:	3084      	adds	r0, #132	; 0x84
   1b12c:	7802      	ldrb	r2, [r0, #0]
   1b12e:	438a      	bics	r2, r1
   1b130:	0011      	movs	r1, r2
   1b132:	220c      	movs	r2, #12
   1b134:	430a      	orrs	r2, r1
   1b136:	7002      	strb	r2, [r0, #0]
   1b138:	001a      	movs	r2, r3
   1b13a:	32da      	adds	r2, #218	; 0xda
   1b13c:	8811      	ldrh	r1, [r2, #0]
   1b13e:	4a08      	ldr	r2, [pc, #32]	; (1b160 <UpdateRetransmissionAckTimeoutState+0x48>)
   1b140:	4c08      	ldr	r4, [pc, #32]	; (1b164 <UpdateRetransmissionAckTimeoutState+0x4c>)
   1b142:	5c9a      	ldrb	r2, [r3, r2]
   1b144:	33f1      	adds	r3, #241	; 0xf1
   1b146:	1a8a      	subs	r2, r1, r2
   1b148:	21fa      	movs	r1, #250	; 0xfa
   1b14a:	0089      	lsls	r1, r1, #2
   1b14c:	4351      	muls	r1, r2
   1b14e:	2200      	movs	r2, #0
   1b150:	7818      	ldrb	r0, [r3, #0]
   1b152:	9200      	str	r2, [sp, #0]
   1b154:	4b04      	ldr	r3, [pc, #16]	; (1b168 <UpdateRetransmissionAckTimeoutState+0x50>)
   1b156:	47a0      	blx	r4
   1b158:	bd13      	pop	{r0, r1, r4, pc}
   1b15a:	46c0      	nop			; (mov r8, r8)
   1b15c:	20001bd0 	.word	0x20001bd0
   1b160:	0000022b 	.word	0x0000022b
   1b164:	000159bd 	.word	0x000159bd
   1b168:	0001cbed 	.word	0x0001cbed

0001b16c <UpdateReceiveWindow2Parameters>:
   1b16c:	4b0f      	ldr	r3, [pc, #60]	; (1b1ac <UpdateReceiveWindow2Parameters+0x40>)
   1b16e:	b570      	push	{r4, r5, r6, lr}
   1b170:	001a      	movs	r2, r3
   1b172:	326e      	adds	r2, #110	; 0x6e
   1b174:	7011      	strb	r1, [r2, #0]
   1b176:	001a      	movs	r2, r3
   1b178:	0c04      	lsrs	r4, r0, #16
   1b17a:	326a      	adds	r2, #106	; 0x6a
   1b17c:	8010      	strh	r0, [r2, #0]
   1b17e:	8054      	strh	r4, [r2, #2]
   1b180:	001a      	movs	r2, r3
   1b182:	25fd      	movs	r5, #253	; 0xfd
   1b184:	32fd      	adds	r2, #253	; 0xfd
   1b186:	7812      	ldrb	r2, [r2, #0]
   1b188:	3a02      	subs	r2, #2
   1b18a:	422a      	tst	r2, r5
   1b18c:	d109      	bne.n	1b1a2 <UpdateReceiveWindow2Parameters+0x36>
   1b18e:	001a      	movs	r2, r3
   1b190:	336f      	adds	r3, #111	; 0x6f
   1b192:	3273      	adds	r2, #115	; 0x73
   1b194:	7011      	strb	r1, [r2, #0]
   1b196:	7018      	strb	r0, [r3, #0]
   1b198:	0a02      	lsrs	r2, r0, #8
   1b19a:	0e00      	lsrs	r0, r0, #24
   1b19c:	705a      	strb	r2, [r3, #1]
   1b19e:	709c      	strb	r4, [r3, #2]
   1b1a0:	70d8      	strb	r0, [r3, #3]
   1b1a2:	2100      	movs	r1, #0
   1b1a4:	4b02      	ldr	r3, [pc, #8]	; (1b1b0 <UpdateReceiveWindow2Parameters+0x44>)
   1b1a6:	2001      	movs	r0, #1
   1b1a8:	4798      	blx	r3
   1b1aa:	bd70      	pop	{r4, r5, r6, pc}
   1b1ac:	20001bd0 	.word	0x20001bd0
   1b1b0:	00013b45 	.word	0x00013b45

0001b1b4 <ResetParametersForConfirmedTransmission>:
   1b1b4:	4b0a      	ldr	r3, [pc, #40]	; (1b1e0 <ResetParametersForConfirmedTransmission+0x2c>)
   1b1b6:	001a      	movs	r2, r3
   1b1b8:	32fd      	adds	r2, #253	; 0xfd
   1b1ba:	7812      	ldrb	r2, [r2, #0]
   1b1bc:	2a01      	cmp	r2, #1
   1b1be:	d105      	bne.n	1b1cc <ResetParametersForConfirmedTransmission+0x18>
   1b1c0:	0019      	movs	r1, r3
   1b1c2:	200e      	movs	r0, #14
   1b1c4:	3184      	adds	r1, #132	; 0x84
   1b1c6:	780a      	ldrb	r2, [r1, #0]
   1b1c8:	4382      	bics	r2, r0
   1b1ca:	700a      	strb	r2, [r1, #0]
   1b1cc:	001a      	movs	r2, r3
   1b1ce:	2100      	movs	r1, #0
   1b1d0:	3394      	adds	r3, #148	; 0x94
   1b1d2:	32e4      	adds	r2, #228	; 0xe4
   1b1d4:	7011      	strb	r1, [r2, #0]
   1b1d6:	781a      	ldrb	r2, [r3, #0]
   1b1d8:	3101      	adds	r1, #1
   1b1da:	438a      	bics	r2, r1
   1b1dc:	701a      	strb	r2, [r3, #0]
   1b1de:	4770      	bx	lr
   1b1e0:	20001bd0 	.word	0x20001bd0

0001b1e4 <ResetParametersForUnconfirmedTransmission>:
   1b1e4:	4b07      	ldr	r3, [pc, #28]	; (1b204 <ResetParametersForUnconfirmedTransmission+0x20>)
   1b1e6:	001a      	movs	r2, r3
   1b1e8:	32fd      	adds	r2, #253	; 0xfd
   1b1ea:	7812      	ldrb	r2, [r2, #0]
   1b1ec:	2a01      	cmp	r2, #1
   1b1ee:	d105      	bne.n	1b1fc <ResetParametersForUnconfirmedTransmission+0x18>
   1b1f0:	0019      	movs	r1, r3
   1b1f2:	200e      	movs	r0, #14
   1b1f4:	3184      	adds	r1, #132	; 0x84
   1b1f6:	780a      	ldrb	r2, [r1, #0]
   1b1f8:	4382      	bics	r2, r0
   1b1fa:	700a      	strb	r2, [r1, #0]
   1b1fc:	2200      	movs	r2, #0
   1b1fe:	33e3      	adds	r3, #227	; 0xe3
   1b200:	701a      	strb	r2, [r3, #0]
   1b202:	4770      	bx	lr
   1b204:	20001bd0 	.word	0x20001bd0

0001b208 <SetJoinFailState>:
   1b208:	b570      	push	{r4, r5, r6, lr}
   1b20a:	4c15      	ldr	r4, [pc, #84]	; (1b260 <SetJoinFailState+0x58>)
   1b20c:	2604      	movs	r6, #4
   1b20e:	0025      	movs	r5, r4
   1b210:	3594      	adds	r5, #148	; 0x94
   1b212:	782a      	ldrb	r2, [r5, #0]
   1b214:	0021      	movs	r1, r4
   1b216:	43b2      	bics	r2, r6
   1b218:	702a      	strb	r2, [r5, #0]
   1b21a:	22f0      	movs	r2, #240	; 0xf0
   1b21c:	3184      	adds	r1, #132	; 0x84
   1b21e:	780b      	ldrb	r3, [r1, #0]
   1b220:	4013      	ands	r3, r2
   1b222:	700b      	strb	r3, [r1, #0]
   1b224:	0023      	movs	r3, r4
   1b226:	33ff      	adds	r3, #255	; 0xff
   1b228:	7f5b      	ldrb	r3, [r3, #29]
   1b22a:	069b      	lsls	r3, r3, #26
   1b22c:	d503      	bpl.n	1b236 <SetJoinFailState+0x2e>
   1b22e:	0023      	movs	r3, r4
   1b230:	2200      	movs	r2, #0
   1b232:	3380      	adds	r3, #128	; 0x80
   1b234:	701a      	strb	r2, [r3, #0]
   1b236:	490b      	ldr	r1, [pc, #44]	; (1b264 <SetJoinFailState+0x5c>)
   1b238:	794a      	ldrb	r2, [r1, #5]
   1b23a:	790b      	ldrb	r3, [r1, #4]
   1b23c:	0212      	lsls	r2, r2, #8
   1b23e:	431a      	orrs	r2, r3
   1b240:	798b      	ldrb	r3, [r1, #6]
   1b242:	041b      	lsls	r3, r3, #16
   1b244:	431a      	orrs	r2, r3
   1b246:	79cb      	ldrb	r3, [r1, #7]
   1b248:	061b      	lsls	r3, r3, #24
   1b24a:	4313      	orrs	r3, r2
   1b24c:	d000      	beq.n	1b250 <SetJoinFailState+0x48>
   1b24e:	4798      	blx	r3
   1b250:	2300      	movs	r3, #0
   1b252:	34f9      	adds	r4, #249	; 0xf9
   1b254:	7023      	strb	r3, [r4, #0]
   1b256:	210b      	movs	r1, #11
   1b258:	4b03      	ldr	r3, [pc, #12]	; (1b268 <SetJoinFailState+0x60>)
   1b25a:	2001      	movs	r0, #1
   1b25c:	4798      	blx	r3
   1b25e:	bd70      	pop	{r4, r5, r6, pc}
   1b260:	20001bd0 	.word	0x20001bd0
   1b264:	20001f2c 	.word	0x20001f2c
   1b268:	00013b45 	.word	0x00013b45

0001b26c <ExecuteRxParamSetupReq>:
   1b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b26e:	b085      	sub	sp, #20
   1b270:	7805      	ldrb	r5, [r0, #0]
   1b272:	0004      	movs	r4, r0
   1b274:	1c41      	adds	r1, r0, #1
   1b276:	2204      	movs	r2, #4
   1b278:	4b36      	ldr	r3, [pc, #216]	; (1b354 <ExecuteRxParamSetupReq+0xe8>)
   1b27a:	a803      	add	r0, sp, #12
   1b27c:	4798      	blx	r3
   1b27e:	2264      	movs	r2, #100	; 0x64
   1b280:	9b03      	ldr	r3, [sp, #12]
   1b282:	a903      	add	r1, sp, #12
   1b284:	021b      	lsls	r3, r3, #8
   1b286:	0a1b      	lsrs	r3, r3, #8
   1b288:	4353      	muls	r3, r2
   1b28a:	9303      	str	r3, [sp, #12]
   1b28c:	1d23      	adds	r3, r4, #4
   1b28e:	9301      	str	r3, [sp, #4]
   1b290:	072b      	lsls	r3, r5, #28
   1b292:	0f1b      	lsrs	r3, r3, #28
   1b294:	b2da      	uxtb	r2, r3
   1b296:	9200      	str	r2, [sp, #0]
   1b298:	aa02      	add	r2, sp, #8
   1b29a:	1c96      	adds	r6, r2, #2
   1b29c:	066d      	lsls	r5, r5, #25
   1b29e:	7033      	strb	r3, [r6, #0]
   1b2a0:	1cd7      	adds	r7, r2, #3
   1b2a2:	0f6d      	lsrs	r5, r5, #29
   1b2a4:	2001      	movs	r0, #1
   1b2a6:	4b2c      	ldr	r3, [pc, #176]	; (1b358 <ExecuteRxParamSetupReq+0xec>)
   1b2a8:	703d      	strb	r5, [r7, #0]
   1b2aa:	4798      	blx	r3
   1b2ac:	4c2b      	ldr	r4, [pc, #172]	; (1b35c <ExecuteRxParamSetupReq+0xf0>)
   1b2ae:	2808      	cmp	r0, #8
   1b2b0:	d109      	bne.n	1b2c6 <ExecuteRxParamSetupReq+0x5a>
   1b2b2:	0023      	movs	r3, r4
   1b2b4:	33e0      	adds	r3, #224	; 0xe0
   1b2b6:	781a      	ldrb	r2, [r3, #0]
   1b2b8:	2303      	movs	r3, #3
   1b2ba:	4353      	muls	r3, r2
   1b2bc:	18e3      	adds	r3, r4, r3
   1b2be:	3398      	adds	r3, #152	; 0x98
   1b2c0:	789a      	ldrb	r2, [r3, #2]
   1b2c2:	4310      	orrs	r0, r2
   1b2c4:	7098      	strb	r0, [r3, #2]
   1b2c6:	0031      	movs	r1, r6
   1b2c8:	200f      	movs	r0, #15
   1b2ca:	4e23      	ldr	r6, [pc, #140]	; (1b358 <ExecuteRxParamSetupReq+0xec>)
   1b2cc:	47b0      	blx	r6
   1b2ce:	2808      	cmp	r0, #8
   1b2d0:	d10a      	bne.n	1b2e8 <ExecuteRxParamSetupReq+0x7c>
   1b2d2:	0023      	movs	r3, r4
   1b2d4:	33e0      	adds	r3, #224	; 0xe0
   1b2d6:	781a      	ldrb	r2, [r3, #0]
   1b2d8:	2303      	movs	r3, #3
   1b2da:	4353      	muls	r3, r2
   1b2dc:	2210      	movs	r2, #16
   1b2de:	18e3      	adds	r3, r4, r3
   1b2e0:	3398      	adds	r3, #152	; 0x98
   1b2e2:	7899      	ldrb	r1, [r3, #2]
   1b2e4:	430a      	orrs	r2, r1
   1b2e6:	709a      	strb	r2, [r3, #2]
   1b2e8:	0039      	movs	r1, r7
   1b2ea:	2018      	movs	r0, #24
   1b2ec:	47b0      	blx	r6
   1b2ee:	2808      	cmp	r0, #8
   1b2f0:	d10a      	bne.n	1b308 <ExecuteRxParamSetupReq+0x9c>
   1b2f2:	0023      	movs	r3, r4
   1b2f4:	33e0      	adds	r3, #224	; 0xe0
   1b2f6:	781a      	ldrb	r2, [r3, #0]
   1b2f8:	2303      	movs	r3, #3
   1b2fa:	4353      	muls	r3, r2
   1b2fc:	2220      	movs	r2, #32
   1b2fe:	18e3      	adds	r3, r4, r3
   1b300:	3398      	adds	r3, #152	; 0x98
   1b302:	7899      	ldrb	r1, [r3, #2]
   1b304:	430a      	orrs	r2, r1
   1b306:	709a      	strb	r2, [r3, #2]
   1b308:	0023      	movs	r3, r4
   1b30a:	33e0      	adds	r3, #224	; 0xe0
   1b30c:	781a      	ldrb	r2, [r3, #0]
   1b30e:	2303      	movs	r3, #3
   1b310:	4353      	muls	r3, r2
   1b312:	18e3      	adds	r3, r4, r3
   1b314:	3398      	adds	r3, #152	; 0x98
   1b316:	789e      	ldrb	r6, [r3, #2]
   1b318:	06f3      	lsls	r3, r6, #27
   1b31a:	d518      	bpl.n	1b34e <ExecuteRxParamSetupReq+0xe2>
   1b31c:	0733      	lsls	r3, r6, #28
   1b31e:	d516      	bpl.n	1b34e <ExecuteRxParamSetupReq+0xe2>
   1b320:	06b6      	lsls	r6, r6, #26
   1b322:	0ff6      	lsrs	r6, r6, #31
   1b324:	2e01      	cmp	r6, #1
   1b326:	d112      	bne.n	1b34e <ExecuteRxParamSetupReq+0xe2>
   1b328:	0023      	movs	r3, r4
   1b32a:	33f7      	adds	r3, #247	; 0xf7
   1b32c:	701d      	strb	r5, [r3, #0]
   1b32e:	0031      	movs	r1, r6
   1b330:	0030      	movs	r0, r6
   1b332:	4d0b      	ldr	r5, [pc, #44]	; (1b360 <ExecuteRxParamSetupReq+0xf4>)
   1b334:	47a8      	blx	r5
   1b336:	9900      	ldr	r1, [sp, #0]
   1b338:	9803      	ldr	r0, [sp, #12]
   1b33a:	4b0a      	ldr	r3, [pc, #40]	; (1b364 <ExecuteRxParamSetupReq+0xf8>)
   1b33c:	4798      	blx	r3
   1b33e:	2340      	movs	r3, #64	; 0x40
   1b340:	3484      	adds	r4, #132	; 0x84
   1b342:	7862      	ldrb	r2, [r4, #1]
   1b344:	210b      	movs	r1, #11
   1b346:	4313      	orrs	r3, r2
   1b348:	7063      	strb	r3, [r4, #1]
   1b34a:	0030      	movs	r0, r6
   1b34c:	47a8      	blx	r5
   1b34e:	9801      	ldr	r0, [sp, #4]
   1b350:	b005      	add	sp, #20
   1b352:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b354:	00024149 	.word	0x00024149
   1b358:	0000d5ed 	.word	0x0000d5ed
   1b35c:	20001bd0 	.word	0x20001bd0
   1b360:	00013b45 	.word	0x00013b45
   1b364:	0001b16d 	.word	0x0001b16d

0001b368 <ExecuteDutyCycle>:
   1b368:	b570      	push	{r4, r5, r6, lr}
   1b36a:	7803      	ldrb	r3, [r0, #0]
   1b36c:	1c46      	adds	r6, r0, #1
   1b36e:	2b0f      	cmp	r3, #15
   1b370:	d80f      	bhi.n	1b392 <ExecuteDutyCycle+0x2a>
   1b372:	4c09      	ldr	r4, [pc, #36]	; (1b398 <ExecuteDutyCycle+0x30>)
   1b374:	210b      	movs	r1, #11
   1b376:	0022      	movs	r2, r4
   1b378:	2000      	movs	r0, #0
   1b37a:	3298      	adds	r2, #152	; 0x98
   1b37c:	4d07      	ldr	r5, [pc, #28]	; (1b39c <ExecuteDutyCycle+0x34>)
   1b37e:	7013      	strb	r3, [r2, #0]
   1b380:	47a8      	blx	r5
   1b382:	2320      	movs	r3, #32
   1b384:	3484      	adds	r4, #132	; 0x84
   1b386:	7862      	ldrb	r2, [r4, #1]
   1b388:	210b      	movs	r1, #11
   1b38a:	4313      	orrs	r3, r2
   1b38c:	7063      	strb	r3, [r4, #1]
   1b38e:	2001      	movs	r0, #1
   1b390:	47a8      	blx	r5
   1b392:	0030      	movs	r0, r6
   1b394:	bd70      	pop	{r4, r5, r6, pc}
   1b396:	46c0      	nop			; (mov r8, r8)
   1b398:	20001bd0 	.word	0x20001bd0
   1b39c:	00013b45 	.word	0x00013b45

0001b3a0 <ExecuteDlChannel>:
   1b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3a2:	b089      	sub	sp, #36	; 0x24
   1b3a4:	7805      	ldrb	r5, [r0, #0]
   1b3a6:	ab02      	add	r3, sp, #8
   1b3a8:	1c41      	adds	r1, r0, #1
   1b3aa:	0007      	movs	r7, r0
   1b3ac:	719d      	strb	r5, [r3, #6]
   1b3ae:	1d9e      	adds	r6, r3, #6
   1b3b0:	2204      	movs	r2, #4
   1b3b2:	4b23      	ldr	r3, [pc, #140]	; (1b440 <ExecuteDlChannel+0xa0>)
   1b3b4:	a805      	add	r0, sp, #20
   1b3b6:	4798      	blx	r3
   1b3b8:	9b05      	ldr	r3, [sp, #20]
   1b3ba:	a904      	add	r1, sp, #16
   1b3bc:	021c      	lsls	r4, r3, #8
   1b3be:	2364      	movs	r3, #100	; 0x64
   1b3c0:	0a24      	lsrs	r4, r4, #8
   1b3c2:	435c      	muls	r4, r3
   1b3c4:	1d3b      	adds	r3, r7, #4
   1b3c6:	9301      	str	r3, [sp, #4]
   1b3c8:	2301      	movs	r3, #1
   1b3ca:	2015      	movs	r0, #21
   1b3cc:	704b      	strb	r3, [r1, #1]
   1b3ce:	4b1d      	ldr	r3, [pc, #116]	; (1b444 <ExecuteDlChannel+0xa4>)
   1b3d0:	9405      	str	r4, [sp, #20]
   1b3d2:	700d      	strb	r5, [r1, #0]
   1b3d4:	4798      	blx	r3
   1b3d6:	2808      	cmp	r0, #8
   1b3d8:	d12f      	bne.n	1b43a <ExecuteDlChannel+0x9a>
   1b3da:	ab02      	add	r3, sp, #8
   1b3dc:	1ddd      	adds	r5, r3, #7
   1b3de:	2300      	movs	r3, #0
   1b3e0:	702b      	strb	r3, [r5, #0]
   1b3e2:	7833      	ldrb	r3, [r6, #0]
   1b3e4:	af06      	add	r7, sp, #24
   1b3e6:	713b      	strb	r3, [r7, #4]
   1b3e8:	002a      	movs	r2, r5
   1b3ea:	0031      	movs	r1, r6
   1b3ec:	300e      	adds	r0, #14
   1b3ee:	4b16      	ldr	r3, [pc, #88]	; (1b448 <ExecuteDlChannel+0xa8>)
   1b3f0:	9406      	str	r4, [sp, #24]
   1b3f2:	4798      	blx	r3
   1b3f4:	280a      	cmp	r0, #10
   1b3f6:	d00d      	beq.n	1b414 <ExecuteDlChannel+0x74>
   1b3f8:	782a      	ldrb	r2, [r5, #0]
   1b3fa:	2a01      	cmp	r2, #1
   1b3fc:	d10a      	bne.n	1b414 <ExecuteDlChannel+0x74>
   1b3fe:	4b13      	ldr	r3, [pc, #76]	; (1b44c <ExecuteDlChannel+0xac>)
   1b400:	0019      	movs	r1, r3
   1b402:	31e0      	adds	r1, #224	; 0xe0
   1b404:	7808      	ldrb	r0, [r1, #0]
   1b406:	2103      	movs	r1, #3
   1b408:	4341      	muls	r1, r0
   1b40a:	185b      	adds	r3, r3, r1
   1b40c:	3398      	adds	r3, #152	; 0x98
   1b40e:	78d9      	ldrb	r1, [r3, #3]
   1b410:	430a      	orrs	r2, r1
   1b412:	70da      	strb	r2, [r3, #3]
   1b414:	0039      	movs	r1, r7
   1b416:	2033      	movs	r0, #51	; 0x33
   1b418:	4b0d      	ldr	r3, [pc, #52]	; (1b450 <ExecuteDlChannel+0xb0>)
   1b41a:	4798      	blx	r3
   1b41c:	2808      	cmp	r0, #8
   1b41e:	d10c      	bne.n	1b43a <ExecuteDlChannel+0x9a>
   1b420:	4b0a      	ldr	r3, [pc, #40]	; (1b44c <ExecuteDlChannel+0xac>)
   1b422:	001a      	movs	r2, r3
   1b424:	32e0      	adds	r2, #224	; 0xe0
   1b426:	7811      	ldrb	r1, [r2, #0]
   1b428:	2203      	movs	r2, #3
   1b42a:	434a      	muls	r2, r1
   1b42c:	189b      	adds	r3, r3, r2
   1b42e:	2280      	movs	r2, #128	; 0x80
   1b430:	3398      	adds	r3, #152	; 0x98
   1b432:	7899      	ldrb	r1, [r3, #2]
   1b434:	4252      	negs	r2, r2
   1b436:	430a      	orrs	r2, r1
   1b438:	709a      	strb	r2, [r3, #2]
   1b43a:	9801      	ldr	r0, [sp, #4]
   1b43c:	b009      	add	sp, #36	; 0x24
   1b43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b440:	00024149 	.word	0x00024149
   1b444:	0000d5ed 	.word	0x0000d5ed
   1b448:	0000d595 	.word	0x0000d595
   1b44c:	20001bd0 	.word	0x20001bd0
   1b450:	0000d639 	.word	0x0000d639

0001b454 <ExecuteTxParamSetup>:
   1b454:	220f      	movs	r2, #15
   1b456:	b513      	push	{r0, r1, r4, lr}
   1b458:	7803      	ldrb	r3, [r0, #0]
   1b45a:	4c0f      	ldr	r4, [pc, #60]	; (1b498 <ExecuteTxParamSetup+0x44>)
   1b45c:	401a      	ands	r2, r3
   1b45e:	5ca2      	ldrb	r2, [r4, r2]
   1b460:	2401      	movs	r4, #1
   1b462:	a901      	add	r1, sp, #4
   1b464:	700a      	strb	r2, [r1, #0]
   1b466:	111a      	asrs	r2, r3, #4
   1b468:	115b      	asrs	r3, r3, #5
   1b46a:	4023      	ands	r3, r4
   1b46c:	40a3      	lsls	r3, r4
   1b46e:	4022      	ands	r2, r4
   1b470:	4313      	orrs	r3, r2
   1b472:	704b      	strb	r3, [r1, #1]
   1b474:	1904      	adds	r4, r0, r4
   1b476:	4b09      	ldr	r3, [pc, #36]	; (1b49c <ExecuteTxParamSetup+0x48>)
   1b478:	2034      	movs	r0, #52	; 0x34
   1b47a:	4798      	blx	r3
   1b47c:	2808      	cmp	r0, #8
   1b47e:	d009      	beq.n	1b494 <ExecuteTxParamSetup+0x40>
   1b480:	4b07      	ldr	r3, [pc, #28]	; (1b4a0 <ExecuteTxParamSetup+0x4c>)
   1b482:	001a      	movs	r2, r3
   1b484:	32e0      	adds	r2, #224	; 0xe0
   1b486:	7811      	ldrb	r1, [r2, #0]
   1b488:	2203      	movs	r2, #3
   1b48a:	434a      	muls	r2, r1
   1b48c:	189b      	adds	r3, r3, r2
   1b48e:	22ff      	movs	r2, #255	; 0xff
   1b490:	3399      	adds	r3, #153	; 0x99
   1b492:	701a      	strb	r2, [r3, #0]
   1b494:	0020      	movs	r0, r4
   1b496:	bd16      	pop	{r1, r2, r4, pc}
   1b498:	0002ccb1 	.word	0x0002ccb1
   1b49c:	0000d639 	.word	0x0000d639
   1b4a0:	20001bd0 	.word	0x20001bd0

0001b4a4 <ExecuteLinkAdr>:
   1b4a4:	220f      	movs	r2, #15
   1b4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4a8:	0006      	movs	r6, r0
   1b4aa:	7803      	ldrb	r3, [r0, #0]
   1b4ac:	b089      	sub	sp, #36	; 0x24
   1b4ae:	401a      	ands	r2, r3
   1b4b0:	a905      	add	r1, sp, #20
   1b4b2:	700a      	strb	r2, [r1, #0]
   1b4b4:	aa04      	add	r2, sp, #16
   1b4b6:	1d97      	adds	r7, r2, #6
   1b4b8:	091b      	lsrs	r3, r3, #4
   1b4ba:	7153      	strb	r3, [r2, #5]
   1b4bc:	1c41      	adds	r1, r0, #1
   1b4be:	2202      	movs	r2, #2
   1b4c0:	0038      	movs	r0, r7
   1b4c2:	4b3d      	ldr	r3, [pc, #244]	; (1b5b8 <ExecuteLinkAdr+0x114>)
   1b4c4:	4798      	blx	r3
   1b4c6:	2201      	movs	r2, #1
   1b4c8:	1d33      	adds	r3, r6, #4
   1b4ca:	9303      	str	r3, [sp, #12]
   1b4cc:	78f3      	ldrb	r3, [r6, #3]
   1b4ce:	4c3b      	ldr	r4, [pc, #236]	; (1b5bc <ExecuteLinkAdr+0x118>)
   1b4d0:	4d3b      	ldr	r5, [pc, #236]	; (1b5c0 <ExecuteLinkAdr+0x11c>)
   1b4d2:	065b      	lsls	r3, r3, #25
   1b4d4:	0f5b      	lsrs	r3, r3, #29
   1b4d6:	9300      	str	r3, [sp, #0]
   1b4d8:	5d63      	ldrb	r3, [r4, r5]
   1b4da:	a906      	add	r1, sp, #24
   1b4dc:	4393      	bics	r3, r2
   1b4de:	1892      	adds	r2, r2, r2
   1b4e0:	4393      	bics	r3, r2
   1b4e2:	3202      	adds	r2, #2
   1b4e4:	4393      	bics	r3, r2
   1b4e6:	5563      	strb	r3, [r4, r5]
   1b4e8:	883b      	ldrh	r3, [r7, #0]
   1b4ea:	2037      	movs	r0, #55	; 0x37
   1b4ec:	9302      	str	r3, [sp, #8]
   1b4ee:	466b      	mov	r3, sp
   1b4f0:	891b      	ldrh	r3, [r3, #8]
   1b4f2:	4f34      	ldr	r7, [pc, #208]	; (1b5c4 <ExecuteLinkAdr+0x120>)
   1b4f4:	804b      	strh	r3, [r1, #2]
   1b4f6:	466b      	mov	r3, sp
   1b4f8:	781b      	ldrb	r3, [r3, #0]
   1b4fa:	700b      	strb	r3, [r1, #0]
   1b4fc:	47b8      	blx	r7
   1b4fe:	2808      	cmp	r0, #8
   1b500:	d117      	bne.n	1b532 <ExecuteLinkAdr+0x8e>
   1b502:	466b      	mov	r3, sp
   1b504:	891b      	ldrh	r3, [r3, #8]
   1b506:	a907      	add	r1, sp, #28
   1b508:	800b      	strh	r3, [r1, #0]
   1b50a:	466b      	mov	r3, sp
   1b50c:	781b      	ldrb	r3, [r3, #0]
   1b50e:	3014      	adds	r0, #20
   1b510:	708b      	strb	r3, [r1, #2]
   1b512:	4b2d      	ldr	r3, [pc, #180]	; (1b5c8 <ExecuteLinkAdr+0x124>)
   1b514:	4798      	blx	r3
   1b516:	2201      	movs	r2, #1
   1b518:	5d63      	ldrb	r3, [r4, r5]
   1b51a:	2010      	movs	r0, #16
   1b51c:	4313      	orrs	r3, r2
   1b51e:	5563      	strb	r3, [r4, r5]
   1b520:	ab04      	add	r3, sp, #16
   1b522:	1d59      	adds	r1, r3, #5
   1b524:	47b8      	blx	r7
   1b526:	2808      	cmp	r0, #8
   1b528:	d103      	bne.n	1b532 <ExecuteLinkAdr+0x8e>
   1b52a:	2202      	movs	r2, #2
   1b52c:	5d63      	ldrb	r3, [r4, r5]
   1b52e:	4313      	orrs	r3, r2
   1b530:	5563      	strb	r3, [r4, r5]
   1b532:	af05      	add	r7, sp, #20
   1b534:	4b23      	ldr	r3, [pc, #140]	; (1b5c4 <ExecuteLinkAdr+0x120>)
   1b536:	0039      	movs	r1, r7
   1b538:	201d      	movs	r0, #29
   1b53a:	4798      	blx	r3
   1b53c:	4b1f      	ldr	r3, [pc, #124]	; (1b5bc <ExecuteLinkAdr+0x118>)
   1b53e:	2808      	cmp	r0, #8
   1b540:	d103      	bne.n	1b54a <ExecuteLinkAdr+0xa6>
   1b542:	2204      	movs	r2, #4
   1b544:	5d59      	ldrb	r1, [r3, r5]
   1b546:	430a      	orrs	r2, r1
   1b548:	555a      	strb	r2, [r3, r5]
   1b54a:	5d5a      	ldrb	r2, [r3, r5]
   1b54c:	43d2      	mvns	r2, r2
   1b54e:	0752      	lsls	r2, r2, #29
   1b550:	d12a      	bne.n	1b5a8 <ExecuteLinkAdr+0x104>
   1b552:	4669      	mov	r1, sp
   1b554:	4a1d      	ldr	r2, [pc, #116]	; (1b5cc <ExecuteLinkAdr+0x128>)
   1b556:	7a09      	ldrb	r1, [r1, #8]
   1b558:	5499      	strb	r1, [r3, r2]
   1b55a:	9a02      	ldr	r2, [sp, #8]
   1b55c:	491b      	ldr	r1, [pc, #108]	; (1b5cc <ExecuteLinkAdr+0x128>)
   1b55e:	0a12      	lsrs	r2, r2, #8
   1b560:	1859      	adds	r1, r3, r1
   1b562:	704a      	strb	r2, [r1, #1]
   1b564:	aa04      	add	r2, sp, #16
   1b566:	3205      	adds	r2, #5
   1b568:	7812      	ldrb	r2, [r2, #0]
   1b56a:	2a0f      	cmp	r2, #15
   1b56c:	d101      	bne.n	1b572 <ExecuteLinkAdr+0xce>
   1b56e:	33e7      	adds	r3, #231	; 0xe7
   1b570:	781a      	ldrb	r2, [r3, #0]
   1b572:	2389      	movs	r3, #137	; 0x89
   1b574:	2170      	movs	r1, #112	; 0x70
   1b576:	2070      	movs	r0, #112	; 0x70
   1b578:	009b      	lsls	r3, r3, #2
   1b57a:	54e2      	strb	r2, [r4, r3]
   1b57c:	78f3      	ldrb	r3, [r6, #3]
   1b57e:	4a14      	ldr	r2, [pc, #80]	; (1b5d0 <ExecuteLinkAdr+0x12c>)
   1b580:	4019      	ands	r1, r3
   1b582:	5ca3      	ldrb	r3, [r4, r2]
   1b584:	4383      	bics	r3, r0
   1b586:	430b      	orrs	r3, r1
   1b588:	54a3      	strb	r3, [r4, r2]
   1b58a:	78f1      	ldrb	r1, [r6, #3]
   1b58c:	3861      	subs	r0, #97	; 0x61
   1b58e:	b2db      	uxtb	r3, r3
   1b590:	4001      	ands	r1, r0
   1b592:	4383      	bics	r3, r0
   1b594:	430b      	orrs	r3, r1
   1b596:	54a3      	strb	r3, [r4, r2]
   1b598:	783b      	ldrb	r3, [r7, #0]
   1b59a:	4283      	cmp	r3, r0
   1b59c:	d101      	bne.n	1b5a2 <ExecuteLinkAdr+0xfe>
   1b59e:	34e9      	adds	r4, #233	; 0xe9
   1b5a0:	7823      	ldrb	r3, [r4, #0]
   1b5a2:	4a0c      	ldr	r2, [pc, #48]	; (1b5d4 <ExecuteLinkAdr+0x130>)
   1b5a4:	4905      	ldr	r1, [pc, #20]	; (1b5bc <ExecuteLinkAdr+0x118>)
   1b5a6:	548b      	strb	r3, [r1, r2]
   1b5a8:	4904      	ldr	r1, [pc, #16]	; (1b5bc <ExecuteLinkAdr+0x118>)
   1b5aa:	4a0b      	ldr	r2, [pc, #44]	; (1b5d8 <ExecuteLinkAdr+0x134>)
   1b5ac:	9803      	ldr	r0, [sp, #12]
   1b5ae:	5c8b      	ldrb	r3, [r1, r2]
   1b5b0:	3301      	adds	r3, #1
   1b5b2:	548b      	strb	r3, [r1, r2]
   1b5b4:	b009      	add	sp, #36	; 0x24
   1b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b5b8:	00024149 	.word	0x00024149
   1b5bc:	20001bd0 	.word	0x20001bd0
   1b5c0:	00000223 	.word	0x00000223
   1b5c4:	0000d5ed 	.word	0x0000d5ed
   1b5c8:	0000d639 	.word	0x0000d639
   1b5cc:	00000227 	.word	0x00000227
   1b5d0:	00000229 	.word	0x00000229
   1b5d4:	00000225 	.word	0x00000225
   1b5d8:	00000226 	.word	0x00000226

0001b5dc <ExecuteDevTimeAns>:
   1b5dc:	b510      	push	{r4, lr}
   1b5de:	0001      	movs	r1, r0
   1b5e0:	0004      	movs	r4, r0
   1b5e2:	2204      	movs	r2, #4
   1b5e4:	4b04      	ldr	r3, [pc, #16]	; (1b5f8 <ExecuteDevTimeAns+0x1c>)
   1b5e6:	4805      	ldr	r0, [pc, #20]	; (1b5fc <ExecuteDevTimeAns+0x20>)
   1b5e8:	4798      	blx	r3
   1b5ea:	238e      	movs	r3, #142	; 0x8e
   1b5ec:	7921      	ldrb	r1, [r4, #4]
   1b5ee:	4a04      	ldr	r2, [pc, #16]	; (1b600 <ExecuteDevTimeAns+0x24>)
   1b5f0:	009b      	lsls	r3, r3, #2
   1b5f2:	1d60      	adds	r0, r4, #5
   1b5f4:	54d1      	strb	r1, [r2, r3]
   1b5f6:	bd10      	pop	{r4, pc}
   1b5f8:	00024149 	.word	0x00024149
   1b5fc:	20001e04 	.word	0x20001e04
   1b600:	20001bd0 	.word	0x20001bd0

0001b604 <PrepareJoinRequestFrame>:
   1b604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1b606:	2210      	movs	r2, #16
   1b608:	4d23      	ldr	r5, [pc, #140]	; (1b698 <PrepareJoinRequestFrame+0x94>)
   1b60a:	4b24      	ldr	r3, [pc, #144]	; (1b69c <PrepareJoinRequestFrame+0x98>)
   1b60c:	32ff      	adds	r2, #255	; 0xff
   1b60e:	2100      	movs	r1, #0
   1b610:	0028      	movs	r0, r5
   1b612:	4798      	blx	r3
   1b614:	2300      	movs	r3, #0
   1b616:	4c22      	ldr	r4, [pc, #136]	; (1b6a0 <PrepareJoinRequestFrame+0x9c>)
   1b618:	702b      	strb	r3, [r5, #0]
   1b61a:	4b22      	ldr	r3, [pc, #136]	; (1b6a4 <PrepareJoinRequestFrame+0xa0>)
   1b61c:	5ce3      	ldrb	r3, [r4, r3]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d006      	beq.n	1b630 <PrepareJoinRequestFrame+0x2c>
   1b622:	4921      	ldr	r1, [pc, #132]	; (1b6a8 <PrepareJoinRequestFrame+0xa4>)
   1b624:	2006      	movs	r0, #6
   1b626:	4e21      	ldr	r6, [pc, #132]	; (1b6ac <PrepareJoinRequestFrame+0xa8>)
   1b628:	47b0      	blx	r6
   1b62a:	4921      	ldr	r1, [pc, #132]	; (1b6b0 <PrepareJoinRequestFrame+0xac>)
   1b62c:	2007      	movs	r0, #7
   1b62e:	47b0      	blx	r6
   1b630:	2300      	movs	r3, #0
   1b632:	205c      	movs	r0, #92	; 0x5c
   1b634:	1ac1      	subs	r1, r0, r3
   1b636:	5c61      	ldrb	r1, [r4, r1]
   1b638:	18ea      	adds	r2, r5, r3
   1b63a:	3301      	adds	r3, #1
   1b63c:	7051      	strb	r1, [r2, #1]
   1b63e:	2b08      	cmp	r3, #8
   1b640:	d1f8      	bne.n	1b634 <PrepareJoinRequestFrame+0x30>
   1b642:	2300      	movs	r3, #0
   1b644:	2064      	movs	r0, #100	; 0x64
   1b646:	1ac1      	subs	r1, r0, r3
   1b648:	5c61      	ldrb	r1, [r4, r1]
   1b64a:	18ea      	adds	r2, r5, r3
   1b64c:	3301      	adds	r3, #1
   1b64e:	7251      	strb	r1, [r2, #9]
   1b650:	2b08      	cmp	r3, #8
   1b652:	d1f8      	bne.n	1b646 <PrepareJoinRequestFrame+0x42>
   1b654:	34cc      	adds	r4, #204	; 0xcc
   1b656:	8823      	ldrh	r3, [r4, #0]
   1b658:	2116      	movs	r1, #22
   1b65a:	3301      	adds	r3, #1
   1b65c:	8023      	strh	r3, [r4, #0]
   1b65e:	2000      	movs	r0, #0
   1b660:	4b14      	ldr	r3, [pc, #80]	; (1b6b4 <PrepareJoinRequestFrame+0xb0>)
   1b662:	4798      	blx	r3
   1b664:	0021      	movs	r1, r4
   1b666:	2202      	movs	r2, #2
   1b668:	4c13      	ldr	r4, [pc, #76]	; (1b6b8 <PrepareJoinRequestFrame+0xb4>)
   1b66a:	4814      	ldr	r0, [pc, #80]	; (1b6bc <PrepareJoinRequestFrame+0xb8>)
   1b66c:	47a0      	blx	r4
   1b66e:	2313      	movs	r3, #19
   1b670:	4e13      	ldr	r6, [pc, #76]	; (1b6c0 <PrepareJoinRequestFrame+0xbc>)
   1b672:	9300      	str	r3, [sp, #0]
   1b674:	0032      	movs	r2, r6
   1b676:	002b      	movs	r3, r5
   1b678:	2100      	movs	r1, #0
   1b67a:	4d12      	ldr	r5, [pc, #72]	; (1b6c4 <PrepareJoinRequestFrame+0xc0>)
   1b67c:	4812      	ldr	r0, [pc, #72]	; (1b6c8 <PrepareJoinRequestFrame+0xc4>)
   1b67e:	47a8      	blx	r5
   1b680:	0031      	movs	r1, r6
   1b682:	2204      	movs	r2, #4
   1b684:	a803      	add	r0, sp, #12
   1b686:	47a0      	blx	r4
   1b688:	2204      	movs	r2, #4
   1b68a:	a903      	add	r1, sp, #12
   1b68c:	480f      	ldr	r0, [pc, #60]	; (1b6cc <PrepareJoinRequestFrame+0xc8>)
   1b68e:	47a0      	blx	r4
   1b690:	2017      	movs	r0, #23
   1b692:	b004      	add	sp, #16
   1b694:	bd70      	pop	{r4, r5, r6, pc}
   1b696:	46c0      	nop			; (mov r8, r8)
   1b698:	20001e19 	.word	0x20001e19
   1b69c:	000241cd 	.word	0x000241cd
   1b6a0:	20001bd0 	.word	0x20001bd0
   1b6a4:	0000022d 	.word	0x0000022d
   1b6a8:	20001c25 	.word	0x20001c25
   1b6ac:	00013389 	.word	0x00013389
   1b6b0:	20001c2d 	.word	0x20001c2d
   1b6b4:	00013b45 	.word	0x00013b45
   1b6b8:	00024149 	.word	0x00024149
   1b6bc:	20001e2a 	.word	0x20001e2a
   1b6c0:	20001164 	.word	0x20001164
   1b6c4:	000133b5 	.word	0x000133b5
   1b6c8:	20001c15 	.word	0x20001c15
   1b6cc:	20001e2c 	.word	0x20001e2c

0001b6d0 <ConfigureRadioRx>:
   1b6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b6d2:	b087      	sub	sp, #28
   1b6d4:	466b      	mov	r3, sp
   1b6d6:	2600      	movs	r6, #0
   1b6d8:	1ddc      	adds	r4, r3, #7
   1b6da:	71d8      	strb	r0, [r3, #7]
   1b6dc:	729e      	strb	r6, [r3, #10]
   1b6de:	466a      	mov	r2, sp
   1b6e0:	2301      	movs	r3, #1
   1b6e2:	72d3      	strb	r3, [r2, #11]
   1b6e4:	2215      	movs	r2, #21
   1b6e6:	ad03      	add	r5, sp, #12
   1b6e8:	4f11      	ldr	r7, [pc, #68]	; (1b730 <ConfigureRadioRx+0x60>)
   1b6ea:	9100      	str	r1, [sp, #0]
   1b6ec:	446a      	add	r2, sp
   1b6ee:	0021      	movs	r1, r4
   1b6f0:	2023      	movs	r0, #35	; 0x23
   1b6f2:	80ae      	strh	r6, [r5, #4]
   1b6f4:	47b8      	blx	r7
   1b6f6:	2216      	movs	r2, #22
   1b6f8:	0021      	movs	r1, r4
   1b6fa:	446a      	add	r2, sp
   1b6fc:	2024      	movs	r0, #36	; 0x24
   1b6fe:	47b8      	blx	r7
   1b700:	2217      	movs	r2, #23
   1b702:	0021      	movs	r1, r4
   1b704:	446a      	add	r2, sp
   1b706:	2025      	movs	r0, #37	; 0x25
   1b708:	47b8      	blx	r7
   1b70a:	9b00      	ldr	r3, [sp, #0]
   1b70c:	0028      	movs	r0, r5
   1b70e:	9303      	str	r3, [sp, #12]
   1b710:	4b08      	ldr	r3, [pc, #32]	; (1b734 <ConfigureRadioRx+0x64>)
   1b712:	80ae      	strh	r6, [r5, #4]
   1b714:	4798      	blx	r3
   1b716:	230a      	movs	r3, #10
   1b718:	446b      	add	r3, sp
   1b71a:	0019      	movs	r1, r3
   1b71c:	4c06      	ldr	r4, [pc, #24]	; (1b738 <ConfigureRadioRx+0x68>)
   1b71e:	2014      	movs	r0, #20
   1b720:	47a0      	blx	r4
   1b722:	230b      	movs	r3, #11
   1b724:	446b      	add	r3, sp
   1b726:	0019      	movs	r1, r3
   1b728:	2006      	movs	r0, #6
   1b72a:	47a0      	blx	r4
   1b72c:	b007      	add	sp, #28
   1b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b730:	0000d595 	.word	0x0000d595
   1b734:	0001ab69 	.word	0x0001ab69
   1b738:	0001f5e1 	.word	0x0001f5e1

0001b73c <LorawanReceiveWindow1Callback>:
   1b73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b73e:	4c1a      	ldr	r4, [pc, #104]	; (1b7a8 <LorawanReceiveWindow1Callback+0x6c>)
   1b740:	0023      	movs	r3, r4
   1b742:	3384      	adds	r3, #132	; 0x84
   1b744:	781b      	ldrb	r3, [r3, #0]
   1b746:	b25a      	sxtb	r2, r3
   1b748:	2a00      	cmp	r2, #0
   1b74a:	db2c      	blt.n	1b7a6 <LorawanReceiveWindow1Callback+0x6a>
   1b74c:	0022      	movs	r2, r4
   1b74e:	32fd      	adds	r2, #253	; 0xfd
   1b750:	7812      	ldrb	r2, [r2, #0]
   1b752:	2a04      	cmp	r2, #4
   1b754:	d107      	bne.n	1b766 <LorawanReceiveWindow1Callback+0x2a>
   1b756:	07db      	lsls	r3, r3, #31
   1b758:	d505      	bpl.n	1b766 <LorawanReceiveWindow1Callback+0x2a>
   1b75a:	2390      	movs	r3, #144	; 0x90
   1b75c:	2200      	movs	r2, #0
   1b75e:	009b      	lsls	r3, r3, #2
   1b760:	54e2      	strb	r2, [r4, r3]
   1b762:	4b12      	ldr	r3, [pc, #72]	; (1b7ac <LorawanReceiveWindow1Callback+0x70>)
   1b764:	4798      	blx	r3
   1b766:	0021      	movs	r1, r4
   1b768:	220e      	movs	r2, #14
   1b76a:	3184      	adds	r1, #132	; 0x84
   1b76c:	780b      	ldrb	r3, [r1, #0]
   1b76e:	ad01      	add	r5, sp, #4
   1b770:	4393      	bics	r3, r2
   1b772:	001a      	movs	r2, r3
   1b774:	2306      	movs	r3, #6
   1b776:	4313      	orrs	r3, r2
   1b778:	0022      	movs	r2, r4
   1b77a:	700b      	strb	r3, [r1, #0]
   1b77c:	3268      	adds	r2, #104	; 0x68
   1b77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1b780:	7811      	ldrb	r1, [r2, #0]
   1b782:	0a1b      	lsrs	r3, r3, #8
   1b784:	3469      	adds	r4, #105	; 0x69
   1b786:	0609      	lsls	r1, r1, #24
   1b788:	4319      	orrs	r1, r3
   1b78a:	7820      	ldrb	r0, [r4, #0]
   1b78c:	4b08      	ldr	r3, [pc, #32]	; (1b7b0 <LorawanReceiveWindow1Callback+0x74>)
   1b78e:	4798      	blx	r3
   1b790:	2300      	movs	r3, #0
   1b792:	702b      	strb	r3, [r5, #0]
   1b794:	466b      	mov	r3, sp
   1b796:	0021      	movs	r1, r4
   1b798:	1d9a      	adds	r2, r3, #6
   1b79a:	2003      	movs	r0, #3
   1b79c:	4b05      	ldr	r3, [pc, #20]	; (1b7b4 <LorawanReceiveWindow1Callback+0x78>)
   1b79e:	4798      	blx	r3
   1b7a0:	0028      	movs	r0, r5
   1b7a2:	4b05      	ldr	r3, [pc, #20]	; (1b7b8 <LorawanReceiveWindow1Callback+0x7c>)
   1b7a4:	4798      	blx	r3
   1b7a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1b7a8:	20001bd0 	.word	0x20001bd0
   1b7ac:	0001ebad 	.word	0x0001ebad
   1b7b0:	0001b6d1 	.word	0x0001b6d1
   1b7b4:	0000d595 	.word	0x0000d595
   1b7b8:	00020895 	.word	0x00020895

0001b7bc <ConfigureRadioTx>:
   1b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7be:	2517      	movs	r5, #23
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	2616      	movs	r6, #22
   1b7c4:	2701      	movs	r7, #1
   1b7c6:	b087      	sub	sp, #28
   1b7c8:	ac01      	add	r4, sp, #4
   1b7ca:	446d      	add	r5, sp
   1b7cc:	9001      	str	r0, [sp, #4]
   1b7ce:	702b      	strb	r3, [r5, #0]
   1b7d0:	0020      	movs	r0, r4
   1b7d2:	4b10      	ldr	r3, [pc, #64]	; (1b814 <ConfigureRadioTx+0x58>)
   1b7d4:	446e      	add	r6, sp
   1b7d6:	9102      	str	r1, [sp, #8]
   1b7d8:	9203      	str	r2, [sp, #12]
   1b7da:	7037      	strb	r7, [r6, #0]
   1b7dc:	4798      	blx	r3
   1b7de:	79e3      	ldrb	r3, [r4, #7]
   1b7e0:	4c0d      	ldr	r4, [pc, #52]	; (1b818 <ConfigureRadioTx+0x5c>)
   1b7e2:	2b00      	cmp	r3, #0
   1b7e4:	d00a      	beq.n	1b7fc <ConfigureRadioTx+0x40>
   1b7e6:	4b0d      	ldr	r3, [pc, #52]	; (1b81c <ConfigureRadioTx+0x60>)
   1b7e8:	4a0d      	ldr	r2, [pc, #52]	; (1b820 <ConfigureRadioTx+0x64>)
   1b7ea:	490e      	ldr	r1, [pc, #56]	; (1b824 <ConfigureRadioTx+0x68>)
   1b7ec:	54d7      	strb	r7, [r2, r3]
   1b7ee:	200b      	movs	r0, #11
   1b7f0:	4b0d      	ldr	r3, [pc, #52]	; (1b828 <ConfigureRadioTx+0x6c>)
   1b7f2:	4798      	blx	r3
   1b7f4:	210a      	movs	r1, #10
   1b7f6:	200b      	movs	r0, #11
   1b7f8:	4469      	add	r1, sp
   1b7fa:	47a0      	blx	r4
   1b7fc:	a903      	add	r1, sp, #12
   1b7fe:	2004      	movs	r0, #4
   1b800:	47a0      	blx	r4
   1b802:	0031      	movs	r1, r6
   1b804:	2014      	movs	r0, #20
   1b806:	47a0      	blx	r4
   1b808:	0029      	movs	r1, r5
   1b80a:	2006      	movs	r0, #6
   1b80c:	47a0      	blx	r4
   1b80e:	b007      	add	sp, #28
   1b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b812:	46c0      	nop			; (mov r8, r8)
   1b814:	0001ab69 	.word	0x0001ab69
   1b818:	0001f5e1 	.word	0x0001f5e1
   1b81c:	00000222 	.word	0x00000222
   1b820:	20001bd0 	.word	0x20001bd0
   1b824:	20001df1 	.word	0x20001df1
   1b828:	0001f4f1 	.word	0x0001f4f1

0001b82c <LorawanGetChAndInitiateRadioTransmit>:
   1b82c:	2301      	movs	r3, #1
   1b82e:	b530      	push	{r4, r5, lr}
   1b830:	4c46      	ldr	r4, [pc, #280]	; (1b94c <LorawanGetChAndInitiateRadioTransmit+0x120>)
   1b832:	b089      	sub	sp, #36	; 0x24
   1b834:	a902      	add	r1, sp, #8
   1b836:	700b      	strb	r3, [r1, #0]
   1b838:	0023      	movs	r3, r4
   1b83a:	33e9      	adds	r3, #233	; 0xe9
   1b83c:	781b      	ldrb	r3, [r3, #0]
   1b83e:	704b      	strb	r3, [r1, #1]
   1b840:	0023      	movs	r3, r4
   1b842:	33e7      	adds	r3, #231	; 0xe7
   1b844:	781b      	ldrb	r3, [r3, #0]
   1b846:	708b      	strb	r3, [r1, #2]
   1b848:	0023      	movs	r3, r4
   1b84a:	33fd      	adds	r3, #253	; 0xfd
   1b84c:	781b      	ldrb	r3, [r3, #0]
   1b84e:	2b01      	cmp	r3, #1
   1b850:	d108      	bne.n	1b864 <LorawanGetChAndInitiateRadioTransmit+0x38>
   1b852:	0020      	movs	r0, r4
   1b854:	220e      	movs	r2, #14
   1b856:	3084      	adds	r0, #132	; 0x84
   1b858:	7803      	ldrb	r3, [r0, #0]
   1b85a:	4393      	bics	r3, r2
   1b85c:	001a      	movs	r2, r3
   1b85e:	230c      	movs	r3, #12
   1b860:	4313      	orrs	r3, r2
   1b862:	7003      	strb	r3, [r0, #0]
   1b864:	aa05      	add	r2, sp, #20
   1b866:	202e      	movs	r0, #46	; 0x2e
   1b868:	4d39      	ldr	r5, [pc, #228]	; (1b950 <LorawanGetChAndInitiateRadioTransmit+0x124>)
   1b86a:	47a8      	blx	r5
   1b86c:	0023      	movs	r3, r4
   1b86e:	2808      	cmp	r0, #8
   1b870:	d135      	bne.n	1b8de <LorawanGetChAndInitiateRadioTransmit+0xb2>
   1b872:	33fd      	adds	r3, #253	; 0xfd
   1b874:	781b      	ldrb	r3, [r3, #0]
   1b876:	ad03      	add	r5, sp, #12
   1b878:	2b04      	cmp	r3, #4
   1b87a:	d108      	bne.n	1b88e <LorawanGetChAndInitiateRadioTransmit+0x62>
   1b87c:	2390      	movs	r3, #144	; 0x90
   1b87e:	2200      	movs	r2, #0
   1b880:	009b      	lsls	r3, r3, #2
   1b882:	54e2      	strb	r2, [r4, r3]
   1b884:	2301      	movs	r3, #1
   1b886:	0028      	movs	r0, r5
   1b888:	702b      	strb	r3, [r5, #0]
   1b88a:	4b32      	ldr	r3, [pc, #200]	; (1b954 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   1b88c:	4798      	blx	r3
   1b88e:	9805      	ldr	r0, [sp, #20]
   1b890:	4b31      	ldr	r3, [pc, #196]	; (1b958 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   1b892:	9906      	ldr	r1, [sp, #24]
   1b894:	9a07      	ldr	r2, [sp, #28]
   1b896:	4798      	blx	r3
   1b898:	0023      	movs	r3, r4
   1b89a:	33ce      	adds	r3, #206	; 0xce
   1b89c:	881b      	ldrh	r3, [r3, #0]
   1b89e:	0028      	movs	r0, r5
   1b8a0:	702b      	strb	r3, [r5, #0]
   1b8a2:	4b2e      	ldr	r3, [pc, #184]	; (1b95c <LorawanGetChAndInitiateRadioTransmit+0x130>)
   1b8a4:	606b      	str	r3, [r5, #4]
   1b8a6:	4b2e      	ldr	r3, [pc, #184]	; (1b960 <LorawanGetChAndInitiateRadioTransmit+0x134>)
   1b8a8:	4798      	blx	r3
   1b8aa:	2800      	cmp	r0, #0
   1b8ac:	d109      	bne.n	1b8c2 <LorawanGetChAndInitiateRadioTransmit+0x96>
   1b8ae:	220e      	movs	r2, #14
   1b8b0:	3484      	adds	r4, #132	; 0x84
   1b8b2:	7823      	ldrb	r3, [r4, #0]
   1b8b4:	4393      	bics	r3, r2
   1b8b6:	001a      	movs	r2, r3
   1b8b8:	2302      	movs	r3, #2
   1b8ba:	4313      	orrs	r3, r2
   1b8bc:	7023      	strb	r3, [r4, #0]
   1b8be:	b009      	add	sp, #36	; 0x24
   1b8c0:	bd30      	pop	{r4, r5, pc}
   1b8c2:	2200      	movs	r2, #0
   1b8c4:	4b27      	ldr	r3, [pc, #156]	; (1b964 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1b8c6:	4928      	ldr	r1, [pc, #160]	; (1b968 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   1b8c8:	5ce3      	ldrb	r3, [r4, r3]
   1b8ca:	34fc      	adds	r4, #252	; 0xfc
   1b8cc:	4359      	muls	r1, r3
   1b8ce:	4b27      	ldr	r3, [pc, #156]	; (1b96c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   1b8d0:	7820      	ldrb	r0, [r4, #0]
   1b8d2:	18c9      	adds	r1, r1, r3
   1b8d4:	4b26      	ldr	r3, [pc, #152]	; (1b970 <LorawanGetChAndInitiateRadioTransmit+0x144>)
   1b8d6:	9200      	str	r2, [sp, #0]
   1b8d8:	4c26      	ldr	r4, [pc, #152]	; (1b974 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   1b8da:	47a0      	blx	r4
   1b8dc:	e7ef      	b.n	1b8be <LorawanGetChAndInitiateRadioTransmit+0x92>
   1b8de:	33ff      	adds	r3, #255	; 0xff
   1b8e0:	7f5b      	ldrb	r3, [r3, #29]
   1b8e2:	079a      	lsls	r2, r3, #30
   1b8e4:	d515      	bpl.n	1b912 <LorawanGetChAndInitiateRadioTransmit+0xe6>
   1b8e6:	aa03      	add	r2, sp, #12
   1b8e8:	4923      	ldr	r1, [pc, #140]	; (1b978 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1b8ea:	2026      	movs	r0, #38	; 0x26
   1b8ec:	47a8      	blx	r5
   1b8ee:	9b03      	ldr	r3, [sp, #12]
   1b8f0:	1c5a      	adds	r2, r3, #1
   1b8f2:	d001      	beq.n	1b8f8 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   1b8f4:	3314      	adds	r3, #20
   1b8f6:	9303      	str	r3, [sp, #12]
   1b8f8:	21fa      	movs	r1, #250	; 0xfa
   1b8fa:	4b1a      	ldr	r3, [pc, #104]	; (1b964 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1b8fc:	9a03      	ldr	r2, [sp, #12]
   1b8fe:	5ce3      	ldrb	r3, [r4, r3]
   1b900:	0089      	lsls	r1, r1, #2
   1b902:	1ad3      	subs	r3, r2, r3
   1b904:	2200      	movs	r2, #0
   1b906:	4359      	muls	r1, r3
   1b908:	34f2      	adds	r4, #242	; 0xf2
   1b90a:	7820      	ldrb	r0, [r4, #0]
   1b90c:	9200      	str	r2, [sp, #0]
   1b90e:	4b1b      	ldr	r3, [pc, #108]	; (1b97c <LorawanGetChAndInitiateRadioTransmit+0x150>)
   1b910:	e7e2      	b.n	1b8d8 <LorawanGetChAndInitiateRadioTransmit+0xac>
   1b912:	075b      	lsls	r3, r3, #29
   1b914:	d508      	bpl.n	1b928 <LorawanGetChAndInitiateRadioTransmit+0xfc>
   1b916:	aa03      	add	r2, sp, #12
   1b918:	4917      	ldr	r1, [pc, #92]	; (1b978 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1b91a:	2032      	movs	r0, #50	; 0x32
   1b91c:	47a8      	blx	r5
   1b91e:	9b03      	ldr	r3, [sp, #12]
   1b920:	1c5a      	adds	r2, r3, #1
   1b922:	d0e9      	beq.n	1b8f8 <LorawanGetChAndInitiateRadioTransmit+0xcc>
   1b924:	3301      	adds	r3, #1
   1b926:	e7e6      	b.n	1b8f6 <LorawanGetChAndInitiateRadioTransmit+0xca>
   1b928:	0023      	movs	r3, r4
   1b92a:	2201      	movs	r2, #1
   1b92c:	3394      	adds	r3, #148	; 0x94
   1b92e:	781b      	ldrb	r3, [r3, #0]
   1b930:	401a      	ands	r2, r3
   1b932:	d108      	bne.n	1b946 <LorawanGetChAndInitiateRadioTransmit+0x11a>
   1b934:	4b0b      	ldr	r3, [pc, #44]	; (1b964 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   1b936:	490c      	ldr	r1, [pc, #48]	; (1b968 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   1b938:	5ce3      	ldrb	r3, [r4, r3]
   1b93a:	34f2      	adds	r4, #242	; 0xf2
   1b93c:	4359      	muls	r1, r3
   1b93e:	4b0b      	ldr	r3, [pc, #44]	; (1b96c <LorawanGetChAndInitiateRadioTransmit+0x140>)
   1b940:	7820      	ldrb	r0, [r4, #0]
   1b942:	18c9      	adds	r1, r1, r3
   1b944:	e7e2      	b.n	1b90c <LorawanGetChAndInitiateRadioTransmit+0xe0>
   1b946:	4b0e      	ldr	r3, [pc, #56]	; (1b980 <LorawanGetChAndInitiateRadioTransmit+0x154>)
   1b948:	4798      	blx	r3
   1b94a:	e7b8      	b.n	1b8be <LorawanGetChAndInitiateRadioTransmit+0x92>
   1b94c:	20001bd0 	.word	0x20001bd0
   1b950:	0000d595 	.word	0x0000d595
   1b954:	00020895 	.word	0x00020895
   1b958:	0001b7bd 	.word	0x0001b7bd
   1b95c:	20001e29 	.word	0x20001e29
   1b960:	0001ff11 	.word	0x0001ff11
   1b964:	0000022b 	.word	0x0000022b
   1b968:	fffffc18 	.word	0xfffffc18
   1b96c:	001e8480 	.word	0x001e8480
   1b970:	0001b985 	.word	0x0001b985
   1b974:	000159bd 	.word	0x000159bd
   1b978:	20001cb7 	.word	0x20001cb7
   1b97c:	0001ba3d 	.word	0x0001ba3d
   1b980:	0001b119 	.word	0x0001b119

0001b984 <TransmissionErrorCallback>:
   1b984:	b530      	push	{r4, r5, lr}
   1b986:	4c22      	ldr	r4, [pc, #136]	; (1ba10 <TransmissionErrorCallback+0x8c>)
   1b988:	2501      	movs	r5, #1
   1b98a:	0023      	movs	r3, r4
   1b98c:	b08b      	sub	sp, #44	; 0x2c
   1b98e:	a903      	add	r1, sp, #12
   1b990:	700d      	strb	r5, [r1, #0]
   1b992:	33e9      	adds	r3, #233	; 0xe9
   1b994:	781b      	ldrb	r3, [r3, #0]
   1b996:	aa07      	add	r2, sp, #28
   1b998:	704b      	strb	r3, [r1, #1]
   1b99a:	0023      	movs	r3, r4
   1b99c:	33e7      	adds	r3, #231	; 0xe7
   1b99e:	781b      	ldrb	r3, [r3, #0]
   1b9a0:	202e      	movs	r0, #46	; 0x2e
   1b9a2:	708b      	strb	r3, [r1, #2]
   1b9a4:	4b1b      	ldr	r3, [pc, #108]	; (1ba14 <TransmissionErrorCallback+0x90>)
   1b9a6:	4798      	blx	r3
   1b9a8:	2808      	cmp	r0, #8
   1b9aa:	d121      	bne.n	1b9f0 <TransmissionErrorCallback+0x6c>
   1b9ac:	a804      	add	r0, sp, #16
   1b9ae:	4b1a      	ldr	r3, [pc, #104]	; (1ba18 <TransmissionErrorCallback+0x94>)
   1b9b0:	7005      	strb	r5, [r0, #0]
   1b9b2:	4798      	blx	r3
   1b9b4:	9807      	ldr	r0, [sp, #28]
   1b9b6:	4b19      	ldr	r3, [pc, #100]	; (1ba1c <TransmissionErrorCallback+0x98>)
   1b9b8:	9908      	ldr	r1, [sp, #32]
   1b9ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b9bc:	4798      	blx	r3
   1b9be:	0023      	movs	r3, r4
   1b9c0:	33ce      	adds	r3, #206	; 0xce
   1b9c2:	881b      	ldrh	r3, [r3, #0]
   1b9c4:	a805      	add	r0, sp, #20
   1b9c6:	7003      	strb	r3, [r0, #0]
   1b9c8:	4b15      	ldr	r3, [pc, #84]	; (1ba20 <TransmissionErrorCallback+0x9c>)
   1b9ca:	6043      	str	r3, [r0, #4]
   1b9cc:	4b15      	ldr	r3, [pc, #84]	; (1ba24 <TransmissionErrorCallback+0xa0>)
   1b9ce:	4798      	blx	r3
   1b9d0:	2800      	cmp	r0, #0
   1b9d2:	d01a      	beq.n	1ba0a <TransmissionErrorCallback+0x86>
   1b9d4:	0023      	movs	r3, r4
   1b9d6:	33fd      	adds	r3, #253	; 0xfd
   1b9d8:	781b      	ldrb	r3, [r3, #0]
   1b9da:	42ab      	cmp	r3, r5
   1b9dc:	d108      	bne.n	1b9f0 <TransmissionErrorCallback+0x6c>
   1b9de:	0021      	movs	r1, r4
   1b9e0:	220e      	movs	r2, #14
   1b9e2:	3184      	adds	r1, #132	; 0x84
   1b9e4:	780b      	ldrb	r3, [r1, #0]
   1b9e6:	4393      	bics	r3, r2
   1b9e8:	001a      	movs	r2, r3
   1b9ea:	230c      	movs	r3, #12
   1b9ec:	4313      	orrs	r3, r2
   1b9ee:	700b      	strb	r3, [r1, #0]
   1b9f0:	2200      	movs	r2, #0
   1b9f2:	4b0d      	ldr	r3, [pc, #52]	; (1ba28 <TransmissionErrorCallback+0xa4>)
   1b9f4:	490d      	ldr	r1, [pc, #52]	; (1ba2c <TransmissionErrorCallback+0xa8>)
   1b9f6:	5ce3      	ldrb	r3, [r4, r3]
   1b9f8:	34fc      	adds	r4, #252	; 0xfc
   1b9fa:	4359      	muls	r1, r3
   1b9fc:	4b0c      	ldr	r3, [pc, #48]	; (1ba30 <TransmissionErrorCallback+0xac>)
   1b9fe:	7820      	ldrb	r0, [r4, #0]
   1ba00:	18c9      	adds	r1, r1, r3
   1ba02:	9200      	str	r2, [sp, #0]
   1ba04:	4b0b      	ldr	r3, [pc, #44]	; (1ba34 <TransmissionErrorCallback+0xb0>)
   1ba06:	4c0c      	ldr	r4, [pc, #48]	; (1ba38 <TransmissionErrorCallback+0xb4>)
   1ba08:	47a0      	blx	r4
   1ba0a:	b00b      	add	sp, #44	; 0x2c
   1ba0c:	bd30      	pop	{r4, r5, pc}
   1ba0e:	46c0      	nop			; (mov r8, r8)
   1ba10:	20001bd0 	.word	0x20001bd0
   1ba14:	0000d595 	.word	0x0000d595
   1ba18:	00020895 	.word	0x00020895
   1ba1c:	0001b7bd 	.word	0x0001b7bd
   1ba20:	20001e29 	.word	0x20001e29
   1ba24:	0001ff11 	.word	0x0001ff11
   1ba28:	0000022b 	.word	0x0000022b
   1ba2c:	fffffc18 	.word	0xfffffc18
   1ba30:	001e8480 	.word	0x001e8480
   1ba34:	0001b985 	.word	0x0001b985
   1ba38:	000159bd 	.word	0x000159bd

0001ba3c <UnconfirmedTransmissionCallback>:
   1ba3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba3e:	4c3a      	ldr	r4, [pc, #232]	; (1bb28 <UnconfirmedTransmissionCallback+0xec>)
   1ba40:	b08b      	sub	sp, #44	; 0x2c
   1ba42:	0023      	movs	r3, r4
   1ba44:	33ce      	adds	r3, #206	; 0xce
   1ba46:	881b      	ldrh	r3, [r3, #0]
   1ba48:	af05      	add	r7, sp, #20
   1ba4a:	703b      	strb	r3, [r7, #0]
   1ba4c:	4b37      	ldr	r3, [pc, #220]	; (1bb2c <UnconfirmedTransmissionCallback+0xf0>)
   1ba4e:	a903      	add	r1, sp, #12
   1ba50:	9306      	str	r3, [sp, #24]
   1ba52:	2301      	movs	r3, #1
   1ba54:	700b      	strb	r3, [r1, #0]
   1ba56:	0023      	movs	r3, r4
   1ba58:	0026      	movs	r6, r4
   1ba5a:	33e9      	adds	r3, #233	; 0xe9
   1ba5c:	781b      	ldrb	r3, [r3, #0]
   1ba5e:	36e7      	adds	r6, #231	; 0xe7
   1ba60:	704b      	strb	r3, [r1, #1]
   1ba62:	7833      	ldrb	r3, [r6, #0]
   1ba64:	aa07      	add	r2, sp, #28
   1ba66:	202e      	movs	r0, #46	; 0x2e
   1ba68:	4d31      	ldr	r5, [pc, #196]	; (1bb30 <UnconfirmedTransmissionCallback+0xf4>)
   1ba6a:	708b      	strb	r3, [r1, #2]
   1ba6c:	47a8      	blx	r5
   1ba6e:	2808      	cmp	r0, #8
   1ba70:	d12b      	bne.n	1baca <UnconfirmedTransmissionCallback+0x8e>
   1ba72:	2301      	movs	r3, #1
   1ba74:	a804      	add	r0, sp, #16
   1ba76:	7003      	strb	r3, [r0, #0]
   1ba78:	4b2e      	ldr	r3, [pc, #184]	; (1bb34 <UnconfirmedTransmissionCallback+0xf8>)
   1ba7a:	4798      	blx	r3
   1ba7c:	9807      	ldr	r0, [sp, #28]
   1ba7e:	4b2e      	ldr	r3, [pc, #184]	; (1bb38 <UnconfirmedTransmissionCallback+0xfc>)
   1ba80:	9908      	ldr	r1, [sp, #32]
   1ba82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ba84:	4798      	blx	r3
   1ba86:	0038      	movs	r0, r7
   1ba88:	4b2c      	ldr	r3, [pc, #176]	; (1bb3c <UnconfirmedTransmissionCallback+0x100>)
   1ba8a:	4798      	blx	r3
   1ba8c:	2800      	cmp	r0, #0
   1ba8e:	d01a      	beq.n	1bac6 <UnconfirmedTransmissionCallback+0x8a>
   1ba90:	0023      	movs	r3, r4
   1ba92:	33fd      	adds	r3, #253	; 0xfd
   1ba94:	781b      	ldrb	r3, [r3, #0]
   1ba96:	2b01      	cmp	r3, #1
   1ba98:	d108      	bne.n	1baac <UnconfirmedTransmissionCallback+0x70>
   1ba9a:	0021      	movs	r1, r4
   1ba9c:	220e      	movs	r2, #14
   1ba9e:	3184      	adds	r1, #132	; 0x84
   1baa0:	780b      	ldrb	r3, [r1, #0]
   1baa2:	4393      	bics	r3, r2
   1baa4:	001a      	movs	r2, r3
   1baa6:	230c      	movs	r3, #12
   1baa8:	4313      	orrs	r3, r2
   1baaa:	700b      	strb	r3, [r1, #0]
   1baac:	2200      	movs	r2, #0
   1baae:	4b24      	ldr	r3, [pc, #144]	; (1bb40 <UnconfirmedTransmissionCallback+0x104>)
   1bab0:	4924      	ldr	r1, [pc, #144]	; (1bb44 <UnconfirmedTransmissionCallback+0x108>)
   1bab2:	5ce3      	ldrb	r3, [r4, r3]
   1bab4:	34fc      	adds	r4, #252	; 0xfc
   1bab6:	4359      	muls	r1, r3
   1bab8:	4b23      	ldr	r3, [pc, #140]	; (1bb48 <UnconfirmedTransmissionCallback+0x10c>)
   1baba:	7820      	ldrb	r0, [r4, #0]
   1babc:	18c9      	adds	r1, r1, r3
   1babe:	4b23      	ldr	r3, [pc, #140]	; (1bb4c <UnconfirmedTransmissionCallback+0x110>)
   1bac0:	9200      	str	r2, [sp, #0]
   1bac2:	4c23      	ldr	r4, [pc, #140]	; (1bb50 <UnconfirmedTransmissionCallback+0x114>)
   1bac4:	47a0      	blx	r4
   1bac6:	b00b      	add	sp, #44	; 0x2c
   1bac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1baca:	4b22      	ldr	r3, [pc, #136]	; (1bb54 <UnconfirmedTransmissionCallback+0x118>)
   1bacc:	4798      	blx	r3
   1bace:	4b22      	ldr	r3, [pc, #136]	; (1bb58 <UnconfirmedTransmissionCallback+0x11c>)
   1bad0:	4922      	ldr	r1, [pc, #136]	; (1bb5c <UnconfirmedTransmissionCallback+0x120>)
   1bad2:	4798      	blx	r3
   1bad4:	23fa      	movs	r3, #250	; 0xfa
   1bad6:	009b      	lsls	r3, r3, #2
   1bad8:	18c9      	adds	r1, r1, r3
   1bada:	0023      	movs	r3, r4
   1badc:	9104      	str	r1, [sp, #16]
   1bade:	33ff      	adds	r3, #255	; 0xff
   1bae0:	7f5b      	ldrb	r3, [r3, #29]
   1bae2:	079a      	lsls	r2, r3, #30
   1bae4:	d515      	bpl.n	1bb12 <UnconfirmedTransmissionCallback+0xd6>
   1bae6:	aa04      	add	r2, sp, #16
   1bae8:	0031      	movs	r1, r6
   1baea:	2026      	movs	r0, #38	; 0x26
   1baec:	47a8      	blx	r5
   1baee:	9b04      	ldr	r3, [sp, #16]
   1baf0:	1c5a      	adds	r2, r3, #1
   1baf2:	d001      	beq.n	1baf8 <UnconfirmedTransmissionCallback+0xbc>
   1baf4:	3314      	adds	r3, #20
   1baf6:	9304      	str	r3, [sp, #16]
   1baf8:	4b11      	ldr	r3, [pc, #68]	; (1bb40 <UnconfirmedTransmissionCallback+0x104>)
   1bafa:	9a04      	ldr	r2, [sp, #16]
   1bafc:	5ce3      	ldrb	r3, [r4, r3]
   1bafe:	21fa      	movs	r1, #250	; 0xfa
   1bb00:	1ad3      	subs	r3, r2, r3
   1bb02:	2200      	movs	r2, #0
   1bb04:	0089      	lsls	r1, r1, #2
   1bb06:	34f2      	adds	r4, #242	; 0xf2
   1bb08:	4359      	muls	r1, r3
   1bb0a:	7820      	ldrb	r0, [r4, #0]
   1bb0c:	4b14      	ldr	r3, [pc, #80]	; (1bb60 <UnconfirmedTransmissionCallback+0x124>)
   1bb0e:	9200      	str	r2, [sp, #0]
   1bb10:	e7d7      	b.n	1bac2 <UnconfirmedTransmissionCallback+0x86>
   1bb12:	075b      	lsls	r3, r3, #29
   1bb14:	d5f0      	bpl.n	1baf8 <UnconfirmedTransmissionCallback+0xbc>
   1bb16:	aa04      	add	r2, sp, #16
   1bb18:	0031      	movs	r1, r6
   1bb1a:	2032      	movs	r0, #50	; 0x32
   1bb1c:	47a8      	blx	r5
   1bb1e:	9b04      	ldr	r3, [sp, #16]
   1bb20:	1c5a      	adds	r2, r3, #1
   1bb22:	d0e9      	beq.n	1baf8 <UnconfirmedTransmissionCallback+0xbc>
   1bb24:	3301      	adds	r3, #1
   1bb26:	e7e6      	b.n	1baf6 <UnconfirmedTransmissionCallback+0xba>
   1bb28:	20001bd0 	.word	0x20001bd0
   1bb2c:	20001e29 	.word	0x20001e29
   1bb30:	0000d595 	.word	0x0000d595
   1bb34:	00020895 	.word	0x00020895
   1bb38:	0001b7bd 	.word	0x0001b7bd
   1bb3c:	0001ff11 	.word	0x0001ff11
   1bb40:	0000022b 	.word	0x0000022b
   1bb44:	fffffc18 	.word	0xfffffc18
   1bb48:	001e8480 	.word	0x001e8480
   1bb4c:	0001b985 	.word	0x0001b985
   1bb50:	000159bd 	.word	0x000159bd
   1bb54:	0002434d 	.word	0x0002434d
   1bb58:	00021349 	.word	0x00021349
   1bb5c:	000007d1 	.word	0x000007d1
   1bb60:	0001ba3d 	.word	0x0001ba3d

0001bb64 <UpdateJoinInProgress>:
   1bb64:	b570      	push	{r4, r5, r6, lr}
   1bb66:	2504      	movs	r5, #4
   1bb68:	4c0a      	ldr	r4, [pc, #40]	; (1bb94 <UpdateJoinInProgress+0x30>)
   1bb6a:	0002      	movs	r2, r0
   1bb6c:	0021      	movs	r1, r4
   1bb6e:	3494      	adds	r4, #148	; 0x94
   1bb70:	7826      	ldrb	r6, [r4, #0]
   1bb72:	2001      	movs	r0, #1
   1bb74:	4335      	orrs	r5, r6
   1bb76:	7025      	strb	r5, [r4, #0]
   1bb78:	2407      	movs	r4, #7
   1bb7a:	4022      	ands	r2, r4
   1bb7c:	4082      	lsls	r2, r0
   1bb7e:	3184      	adds	r1, #132	; 0x84
   1bb80:	780b      	ldrb	r3, [r1, #0]
   1bb82:	1924      	adds	r4, r4, r4
   1bb84:	4383      	bics	r3, r0
   1bb86:	43a3      	bics	r3, r4
   1bb88:	4313      	orrs	r3, r2
   1bb8a:	700b      	strb	r3, [r1, #0]
   1bb8c:	210b      	movs	r1, #11
   1bb8e:	4b02      	ldr	r3, [pc, #8]	; (1bb98 <UpdateJoinInProgress+0x34>)
   1bb90:	4798      	blx	r3
   1bb92:	bd70      	pop	{r4, r5, r6, pc}
   1bb94:	20001bd0 	.word	0x20001bd0
   1bb98:	00013b45 	.word	0x00013b45

0001bb9c <LORAWAN_Join>:
   1bb9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1bb9e:	4c33      	ldr	r4, [pc, #204]	; (1bc6c <LORAWAN_Join+0xd0>)
   1bba0:	0006      	movs	r6, r0
   1bba2:	0023      	movs	r3, r4
   1bba4:	3384      	adds	r3, #132	; 0x84
   1bba6:	781b      	ldrb	r3, [r3, #0]
   1bba8:	200f      	movs	r0, #15
   1bbaa:	b25a      	sxtb	r2, r3
   1bbac:	2a00      	cmp	r2, #0
   1bbae:	db4a      	blt.n	1bc46 <LORAWAN_Join+0xaa>
   1bbb0:	3803      	subs	r0, #3
   1bbb2:	065b      	lsls	r3, r3, #25
   1bbb4:	d447      	bmi.n	1bc46 <LORAWAN_Join+0xaa>
   1bbb6:	0023      	movs	r3, r4
   1bbb8:	3394      	adds	r3, #148	; 0x94
   1bbba:	781b      	ldrb	r3, [r3, #0]
   1bbbc:	3007      	adds	r0, #7
   1bbbe:	075b      	lsls	r3, r3, #29
   1bbc0:	d441      	bmi.n	1bc46 <LORAWAN_Join+0xaa>
   1bbc2:	0023      	movs	r3, r4
   1bbc4:	33fd      	adds	r3, #253	; 0xfd
   1bbc6:	781b      	ldrb	r3, [r3, #0]
   1bbc8:	2b04      	cmp	r3, #4
   1bbca:	d037      	beq.n	1bc3c <LORAWAN_Join+0xa0>
   1bbcc:	0023      	movs	r3, r4
   1bbce:	33fd      	adds	r3, #253	; 0xfd
   1bbd0:	781b      	ldrb	r3, [r3, #0]
   1bbd2:	2b01      	cmp	r3, #1
   1bbd4:	d105      	bne.n	1bbe2 <LORAWAN_Join+0x46>
   1bbd6:	0023      	movs	r3, r4
   1bbd8:	3384      	adds	r3, #132	; 0x84
   1bbda:	781a      	ldrb	r2, [r3, #0]
   1bbdc:	230e      	movs	r3, #14
   1bbde:	421a      	tst	r2, r3
   1bbe0:	d130      	bne.n	1bc44 <LORAWAN_Join+0xa8>
   1bbe2:	2102      	movs	r1, #2
   1bbe4:	2001      	movs	r0, #1
   1bbe6:	4d22      	ldr	r5, [pc, #136]	; (1bc70 <LORAWAN_Join+0xd4>)
   1bbe8:	7026      	strb	r6, [r4, #0]
   1bbea:	47a8      	blx	r5
   1bbec:	0023      	movs	r3, r4
   1bbee:	33de      	adds	r3, #222	; 0xde
   1bbf0:	781b      	ldrb	r3, [r3, #0]
   1bbf2:	2e00      	cmp	r6, #0
   1bbf4:	d128      	bne.n	1bc48 <LORAWAN_Join+0xac>
   1bbf6:	200b      	movs	r0, #11
   1bbf8:	4003      	ands	r3, r0
   1bbfa:	4283      	cmp	r3, r0
   1bbfc:	d003      	beq.n	1bc06 <LORAWAN_Join+0x6a>
   1bbfe:	4b1d      	ldr	r3, [pc, #116]	; (1bc74 <LORAWAN_Join+0xd8>)
   1bc00:	5ce3      	ldrb	r3, [r4, r3]
   1bc02:	2b00      	cmp	r3, #0
   1bc04:	d01f      	beq.n	1bc46 <LORAWAN_Join+0xaa>
   1bc06:	0023      	movs	r3, r4
   1bc08:	3384      	adds	r3, #132	; 0x84
   1bc0a:	781b      	ldrb	r3, [r3, #0]
   1bc0c:	07db      	lsls	r3, r3, #31
   1bc0e:	d503      	bpl.n	1bc18 <LORAWAN_Join+0x7c>
   1bc10:	2100      	movs	r1, #0
   1bc12:	203a      	movs	r0, #58	; 0x3a
   1bc14:	4b18      	ldr	r3, [pc, #96]	; (1bc78 <LORAWAN_Join+0xdc>)
   1bc16:	4798      	blx	r3
   1bc18:	0022      	movs	r2, r4
   1bc1a:	2001      	movs	r0, #1
   1bc1c:	3284      	adds	r2, #132	; 0x84
   1bc1e:	7813      	ldrb	r3, [r2, #0]
   1bc20:	3494      	adds	r4, #148	; 0x94
   1bc22:	4383      	bics	r3, r0
   1bc24:	7013      	strb	r3, [r2, #0]
   1bc26:	2304      	movs	r3, #4
   1bc28:	7822      	ldrb	r2, [r4, #0]
   1bc2a:	210b      	movs	r1, #11
   1bc2c:	4313      	orrs	r3, r2
   1bc2e:	7023      	strb	r3, [r4, #0]
   1bc30:	47a8      	blx	r5
   1bc32:	2000      	movs	r0, #0
   1bc34:	4b11      	ldr	r3, [pc, #68]	; (1bc7c <LORAWAN_Join+0xe0>)
   1bc36:	4798      	blx	r3
   1bc38:	2008      	movs	r0, #8
   1bc3a:	e004      	b.n	1bc46 <LORAWAN_Join+0xaa>
   1bc3c:	4b10      	ldr	r3, [pc, #64]	; (1bc80 <LORAWAN_Join+0xe4>)
   1bc3e:	4798      	blx	r3
   1bc40:	2808      	cmp	r0, #8
   1bc42:	d0c3      	beq.n	1bbcc <LORAWAN_Join+0x30>
   1bc44:	2011      	movs	r0, #17
   1bc46:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1bc48:	2234      	movs	r2, #52	; 0x34
   1bc4a:	200b      	movs	r0, #11
   1bc4c:	4013      	ands	r3, r2
   1bc4e:	4293      	cmp	r3, r2
   1bc50:	d1f9      	bne.n	1bc46 <LORAWAN_Join+0xaa>
   1bc52:	3804      	subs	r0, #4
   1bc54:	4b0b      	ldr	r3, [pc, #44]	; (1bc84 <LORAWAN_Join+0xe8>)
   1bc56:	4798      	blx	r3
   1bc58:	2200      	movs	r2, #0
   1bc5a:	34fb      	adds	r4, #251	; 0xfb
   1bc5c:	7820      	ldrb	r0, [r4, #0]
   1bc5e:	4b0a      	ldr	r3, [pc, #40]	; (1bc88 <LORAWAN_Join+0xec>)
   1bc60:	9200      	str	r2, [sp, #0]
   1bc62:	490a      	ldr	r1, [pc, #40]	; (1bc8c <LORAWAN_Join+0xf0>)
   1bc64:	4c0a      	ldr	r4, [pc, #40]	; (1bc90 <LORAWAN_Join+0xf4>)
   1bc66:	47a0      	blx	r4
   1bc68:	e7e6      	b.n	1bc38 <LORAWAN_Join+0x9c>
   1bc6a:	46c0      	nop			; (mov r8, r8)
   1bc6c:	20001bd0 	.word	0x20001bd0
   1bc70:	00013b45 	.word	0x00013b45
   1bc74:	0000022d 	.word	0x0000022d
   1bc78:	0000d639 	.word	0x0000d639
   1bc7c:	0001f46d 	.word	0x0001f46d
   1bc80:	0001eb75 	.word	0x0001eb75
   1bc84:	0001bb65 	.word	0x0001bb65
   1bc88:	0001aa09 	.word	0x0001aa09
   1bc8c:	0000c350 	.word	0x0000c350
   1bc90:	000159bd 	.word	0x000159bd

0001bc94 <EncryptFRMPayload>:
   1bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc96:	0007      	movs	r7, r0
   1bc98:	2401      	movs	r4, #1
   1bc9a:	b089      	sub	sp, #36	; 0x24
   1bc9c:	9306      	str	r3, [sp, #24]
   1bc9e:	ab10      	add	r3, sp, #64	; 0x40
   1bca0:	881d      	ldrh	r5, [r3, #0]
   1bca2:	090b      	lsrs	r3, r1, #4
   1bca4:	9104      	str	r1, [sp, #16]
   1bca6:	9205      	str	r2, [sp, #20]
   1bca8:	9303      	str	r3, [sp, #12]
   1bcaa:	9b03      	ldr	r3, [sp, #12]
   1bcac:	429c      	cmp	r4, r3
   1bcae:	d907      	bls.n	1bcc0 <EncryptFRMPayload+0x2c>
   1bcb0:	260f      	movs	r6, #15
   1bcb2:	9b04      	ldr	r3, [sp, #16]
   1bcb4:	4033      	ands	r3, r6
   1bcb6:	1e1e      	subs	r6, r3, #0
   1bcb8:	d126      	bne.n	1bd08 <EncryptFRMPayload+0x74>
   1bcba:	2000      	movs	r0, #0
   1bcbc:	b009      	add	sp, #36	; 0x24
   1bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bcc2:	0022      	movs	r2, r4
   1bcc4:	9300      	str	r3, [sp, #0]
   1bcc6:	9906      	ldr	r1, [sp, #24]
   1bcc8:	2301      	movs	r3, #1
   1bcca:	9805      	ldr	r0, [sp, #20]
   1bccc:	4e1e      	ldr	r6, [pc, #120]	; (1bd48 <EncryptFRMPayload+0xb4>)
   1bcce:	47b0      	blx	r6
   1bcd0:	4e1e      	ldr	r6, [pc, #120]	; (1bd4c <EncryptFRMPayload+0xb8>)
   1bcd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bcd4:	2101      	movs	r1, #1
   1bcd6:	0030      	movs	r0, r6
   1bcd8:	4b1d      	ldr	r3, [pc, #116]	; (1bd50 <EncryptFRMPayload+0xbc>)
   1bcda:	4798      	blx	r3
   1bcdc:	2800      	cmp	r0, #0
   1bcde:	d1ed      	bne.n	1bcbc <EncryptFRMPayload+0x28>
   1bce0:	1e63      	subs	r3, r4, #1
   1bce2:	011b      	lsls	r3, r3, #4
   1bce4:	18fb      	adds	r3, r7, r3
   1bce6:	9307      	str	r3, [sp, #28]
   1bce8:	9b07      	ldr	r3, [sp, #28]
   1bcea:	182a      	adds	r2, r5, r0
   1bcec:	5c19      	ldrb	r1, [r3, r0]
   1bcee:	5d83      	ldrb	r3, [r0, r6]
   1bcf0:	b292      	uxth	r2, r2
   1bcf2:	4059      	eors	r1, r3
   1bcf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bcf6:	3001      	adds	r0, #1
   1bcf8:	5499      	strb	r1, [r3, r2]
   1bcfa:	2810      	cmp	r0, #16
   1bcfc:	d1f4      	bne.n	1bce8 <EncryptFRMPayload+0x54>
   1bcfe:	3510      	adds	r5, #16
   1bd00:	3401      	adds	r4, #1
   1bd02:	b2ad      	uxth	r5, r5
   1bd04:	b2e4      	uxtb	r4, r4
   1bd06:	e7d0      	b.n	1bcaa <EncryptFRMPayload+0x16>
   1bd08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bd0a:	0022      	movs	r2, r4
   1bd0c:	9300      	str	r3, [sp, #0]
   1bd0e:	9906      	ldr	r1, [sp, #24]
   1bd10:	2301      	movs	r3, #1
   1bd12:	9805      	ldr	r0, [sp, #20]
   1bd14:	4c0c      	ldr	r4, [pc, #48]	; (1bd48 <EncryptFRMPayload+0xb4>)
   1bd16:	47a0      	blx	r4
   1bd18:	4c0c      	ldr	r4, [pc, #48]	; (1bd4c <EncryptFRMPayload+0xb8>)
   1bd1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bd1c:	2101      	movs	r1, #1
   1bd1e:	0020      	movs	r0, r4
   1bd20:	4b0b      	ldr	r3, [pc, #44]	; (1bd50 <EncryptFRMPayload+0xbc>)
   1bd22:	4798      	blx	r3
   1bd24:	2800      	cmp	r0, #0
   1bd26:	d1c9      	bne.n	1bcbc <EncryptFRMPayload+0x28>
   1bd28:	9b03      	ldr	r3, [sp, #12]
   1bd2a:	011b      	lsls	r3, r3, #4
   1bd2c:	18fb      	adds	r3, r7, r3
   1bd2e:	5d07      	ldrb	r7, [r0, r4]
   1bd30:	5c19      	ldrb	r1, [r3, r0]
   1bd32:	182a      	adds	r2, r5, r0
   1bd34:	4079      	eors	r1, r7
   1bd36:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1bd38:	b292      	uxth	r2, r2
   1bd3a:	3001      	adds	r0, #1
   1bd3c:	54b9      	strb	r1, [r7, r2]
   1bd3e:	b2c2      	uxtb	r2, r0
   1bd40:	4296      	cmp	r6, r2
   1bd42:	d8f4      	bhi.n	1bd2e <EncryptFRMPayload+0x9a>
   1bd44:	e7b9      	b.n	1bcba <EncryptFRMPayload+0x26>
   1bd46:	46c0      	nop			; (mov r8, r8)
   1bd48:	0001ab29 	.word	0x0001ab29
   1bd4c:	20001164 	.word	0x20001164
   1bd50:	000132dd 	.word	0x000132dd

0001bd54 <UpdateTransactionCompleteCbParams>:
   1bd54:	2388      	movs	r3, #136	; 0x88
   1bd56:	2201      	movs	r2, #1
   1bd58:	b570      	push	{r4, r5, r6, lr}
   1bd5a:	0001      	movs	r1, r0
   1bd5c:	4c13      	ldr	r4, [pc, #76]	; (1bdac <UpdateTransactionCompleteCbParams+0x58>)
   1bd5e:	4814      	ldr	r0, [pc, #80]	; (1bdb0 <UpdateTransactionCompleteCbParams+0x5c>)
   1bd60:	009b      	lsls	r3, r3, #2
   1bd62:	54e2      	strb	r2, [r4, r3]
   1bd64:	7842      	ldrb	r2, [r0, #1]
   1bd66:	7803      	ldrb	r3, [r0, #0]
   1bd68:	0212      	lsls	r2, r2, #8
   1bd6a:	431a      	orrs	r2, r3
   1bd6c:	7883      	ldrb	r3, [r0, #2]
   1bd6e:	041b      	lsls	r3, r3, #16
   1bd70:	431a      	orrs	r2, r3
   1bd72:	78c3      	ldrb	r3, [r0, #3]
   1bd74:	061b      	lsls	r3, r3, #24
   1bd76:	4313      	orrs	r3, r2
   1bd78:	d00e      	beq.n	1bd98 <UpdateTransactionCompleteCbParams+0x44>
   1bd7a:	0022      	movs	r2, r4
   1bd7c:	2504      	movs	r5, #4
   1bd7e:	32fc      	adds	r2, #252	; 0xfc
   1bd80:	6890      	ldr	r0, [r2, #8]
   1bd82:	4228      	tst	r0, r5
   1bd84:	d008      	beq.n	1bd98 <UpdateTransactionCompleteCbParams+0x44>
   1bd86:	68d0      	ldr	r0, [r2, #12]
   1bd88:	2800      	cmp	r0, #0
   1bd8a:	d005      	beq.n	1bd98 <UpdateTransactionCompleteCbParams+0x44>
   1bd8c:	0022      	movs	r2, r4
   1bd8e:	32ff      	adds	r2, #255	; 0xff
   1bd90:	7451      	strb	r1, [r2, #17]
   1bd92:	7355      	strb	r5, [r2, #13]
   1bd94:	4907      	ldr	r1, [pc, #28]	; (1bdb4 <UpdateTransactionCompleteCbParams+0x60>)
   1bd96:	4798      	blx	r3
   1bd98:	2388      	movs	r3, #136	; 0x88
   1bd9a:	009b      	lsls	r3, r3, #2
   1bd9c:	5ce3      	ldrb	r3, [r4, r3]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d002      	beq.n	1bda8 <UpdateTransactionCompleteCbParams+0x54>
   1bda2:	2300      	movs	r3, #0
   1bda4:	34fc      	adds	r4, #252	; 0xfc
   1bda6:	60e3      	str	r3, [r4, #12]
   1bda8:	bd70      	pop	{r4, r5, r6, pc}
   1bdaa:	46c0      	nop			; (mov r8, r8)
   1bdac:	20001bd0 	.word	0x20001bd0
   1bdb0:	20001f2c 	.word	0x20001f2c
   1bdb4:	20001cdc 	.word	0x20001cdc

0001bdb8 <UpdateRxDataAvailableCbParams>:
   1bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdba:	4e0f      	ldr	r6, [pc, #60]	; (1bdf8 <UpdateRxDataAvailableCbParams+0x40>)
   1bdbc:	469c      	mov	ip, r3
   1bdbe:	7875      	ldrb	r5, [r6, #1]
   1bdc0:	7834      	ldrb	r4, [r6, #0]
   1bdc2:	022d      	lsls	r5, r5, #8
   1bdc4:	4325      	orrs	r5, r4
   1bdc6:	78b4      	ldrb	r4, [r6, #2]
   1bdc8:	0424      	lsls	r4, r4, #16
   1bdca:	4325      	orrs	r5, r4
   1bdcc:	78f4      	ldrb	r4, [r6, #3]
   1bdce:	0624      	lsls	r4, r4, #24
   1bdd0:	432c      	orrs	r4, r5
   1bdd2:	d010      	beq.n	1bdf6 <UpdateRxDataAvailableCbParams+0x3e>
   1bdd4:	4d09      	ldr	r5, [pc, #36]	; (1bdfc <UpdateRxDataAvailableCbParams+0x44>)
   1bdd6:	2702      	movs	r7, #2
   1bdd8:	002e      	movs	r6, r5
   1bdda:	36fc      	adds	r6, #252	; 0xfc
   1bddc:	68b3      	ldr	r3, [r6, #8]
   1bdde:	423b      	tst	r3, r7
   1bde0:	d009      	beq.n	1bdf6 <UpdateRxDataAvailableCbParams+0x3e>
   1bde2:	4663      	mov	r3, ip
   1bde4:	35ff      	adds	r5, #255	; 0xff
   1bde6:	6170      	str	r0, [r6, #20]
   1bde8:	61b1      	str	r1, [r6, #24]
   1bdea:	736f      	strb	r7, [r5, #13]
   1bdec:	766a      	strb	r2, [r5, #25]
   1bdee:	76ab      	strb	r3, [r5, #26]
   1bdf0:	4903      	ldr	r1, [pc, #12]	; (1be00 <UpdateRxDataAvailableCbParams+0x48>)
   1bdf2:	68f0      	ldr	r0, [r6, #12]
   1bdf4:	47a0      	blx	r4
   1bdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdf8:	20001f2c 	.word	0x20001f2c
   1bdfc:	20001bd0 	.word	0x20001bd0
   1be00:	20001cdc 	.word	0x20001cdc

0001be04 <LorawanNotifyAppOnRxdone>:
   1be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be06:	4c25      	ldr	r4, [pc, #148]	; (1be9c <LorawanNotifyAppOnRxdone+0x98>)
   1be08:	0007      	movs	r7, r0
   1be0a:	0023      	movs	r3, r4
   1be0c:	33fd      	adds	r3, #253	; 0xfd
   1be0e:	781b      	ldrb	r3, [r3, #0]
   1be10:	000d      	movs	r5, r1
   1be12:	0016      	movs	r6, r2
   1be14:	2b01      	cmp	r3, #1
   1be16:	d136      	bne.n	1be86 <LorawanNotifyAppOnRxdone+0x82>
   1be18:	0022      	movs	r2, r4
   1be1a:	210e      	movs	r1, #14
   1be1c:	3284      	adds	r2, #132	; 0x84
   1be1e:	7813      	ldrb	r3, [r2, #0]
   1be20:	438b      	bics	r3, r1
   1be22:	7013      	strb	r3, [r2, #0]
   1be24:	491e      	ldr	r1, [pc, #120]	; (1bea0 <LorawanNotifyAppOnRxdone+0x9c>)
   1be26:	784a      	ldrb	r2, [r1, #1]
   1be28:	780b      	ldrb	r3, [r1, #0]
   1be2a:	0212      	lsls	r2, r2, #8
   1be2c:	431a      	orrs	r2, r3
   1be2e:	788b      	ldrb	r3, [r1, #2]
   1be30:	041b      	lsls	r3, r3, #16
   1be32:	431a      	orrs	r2, r3
   1be34:	78cb      	ldrb	r3, [r1, #3]
   1be36:	061b      	lsls	r3, r3, #24
   1be38:	4313      	orrs	r3, r2
   1be3a:	d023      	beq.n	1be84 <LorawanNotifyAppOnRxdone+0x80>
   1be3c:	0022      	movs	r2, r4
   1be3e:	2120      	movs	r1, #32
   1be40:	3294      	adds	r2, #148	; 0x94
   1be42:	7813      	ldrb	r3, [r2, #0]
   1be44:	438b      	bics	r3, r1
   1be46:	7013      	strb	r3, [r2, #0]
   1be48:	0023      	movs	r3, r4
   1be4a:	33fd      	adds	r3, #253	; 0xfd
   1be4c:	781b      	ldrb	r3, [r3, #0]
   1be4e:	7878      	ldrb	r0, [r7, #1]
   1be50:	469c      	mov	ip, r3
   1be52:	78fa      	ldrb	r2, [r7, #3]
   1be54:	78b9      	ldrb	r1, [r7, #2]
   1be56:	793b      	ldrb	r3, [r7, #4]
   1be58:	4667      	mov	r7, ip
   1be5a:	0209      	lsls	r1, r1, #8
   1be5c:	4301      	orrs	r1, r0
   1be5e:	0410      	lsls	r0, r2, #16
   1be60:	4308      	orrs	r0, r1
   1be62:	061b      	lsls	r3, r3, #24
   1be64:	4318      	orrs	r0, r3
   1be66:	0032      	movs	r2, r6
   1be68:	2308      	movs	r3, #8
   1be6a:	0029      	movs	r1, r5
   1be6c:	2f04      	cmp	r7, #4
   1be6e:	d112      	bne.n	1be96 <LorawanNotifyAppOnRxdone+0x92>
   1be70:	4d0c      	ldr	r5, [pc, #48]	; (1bea4 <LorawanNotifyAppOnRxdone+0xa0>)
   1be72:	47a8      	blx	r5
   1be74:	2388      	movs	r3, #136	; 0x88
   1be76:	009b      	lsls	r3, r3, #2
   1be78:	5ce3      	ldrb	r3, [r4, r3]
   1be7a:	2b00      	cmp	r3, #0
   1be7c:	d102      	bne.n	1be84 <LorawanNotifyAppOnRxdone+0x80>
   1be7e:	2008      	movs	r0, #8
   1be80:	4b09      	ldr	r3, [pc, #36]	; (1bea8 <LorawanNotifyAppOnRxdone+0xa4>)
   1be82:	4798      	blx	r3
   1be84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be86:	2b04      	cmp	r3, #4
   1be88:	d1cc      	bne.n	1be24 <LorawanNotifyAppOnRxdone+0x20>
   1be8a:	0023      	movs	r3, r4
   1be8c:	33f1      	adds	r3, #241	; 0xf1
   1be8e:	7818      	ldrb	r0, [r3, #0]
   1be90:	4b06      	ldr	r3, [pc, #24]	; (1beac <LorawanNotifyAppOnRxdone+0xa8>)
   1be92:	4798      	blx	r3
   1be94:	e7c6      	b.n	1be24 <LorawanNotifyAppOnRxdone+0x20>
   1be96:	4d06      	ldr	r5, [pc, #24]	; (1beb0 <LorawanNotifyAppOnRxdone+0xac>)
   1be98:	47a8      	blx	r5
   1be9a:	e7eb      	b.n	1be74 <LorawanNotifyAppOnRxdone+0x70>
   1be9c:	20001bd0 	.word	0x20001bd0
   1bea0:	20001f2c 	.word	0x20001f2c
   1bea4:	0001ed59 	.word	0x0001ed59
   1bea8:	0001bd55 	.word	0x0001bd55
   1beac:	00015cfd 	.word	0x00015cfd
   1beb0:	0001bdb9 	.word	0x0001bdb9

0001beb4 <LorawanSetReceiveWindow2Parameters>:
   1beb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1beb6:	466b      	mov	r3, sp
   1beb8:	1cdd      	adds	r5, r3, #3
   1beba:	9001      	str	r0, [sp, #4]
   1bebc:	7029      	strb	r1, [r5, #0]
   1bebe:	2001      	movs	r0, #1
   1bec0:	a901      	add	r1, sp, #4
   1bec2:	4c09      	ldr	r4, [pc, #36]	; (1bee8 <LorawanSetReceiveWindow2Parameters+0x34>)
   1bec4:	47a0      	blx	r4
   1bec6:	2808      	cmp	r0, #8
   1bec8:	d002      	beq.n	1bed0 <LorawanSetReceiveWindow2Parameters+0x1c>
   1beca:	240a      	movs	r4, #10
   1becc:	0020      	movs	r0, r4
   1bece:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bed0:	0029      	movs	r1, r5
   1bed2:	200f      	movs	r0, #15
   1bed4:	47a0      	blx	r4
   1bed6:	0004      	movs	r4, r0
   1bed8:	2808      	cmp	r0, #8
   1beda:	d1f6      	bne.n	1beca <LorawanSetReceiveWindow2Parameters+0x16>
   1bedc:	7829      	ldrb	r1, [r5, #0]
   1bede:	9801      	ldr	r0, [sp, #4]
   1bee0:	4b02      	ldr	r3, [pc, #8]	; (1beec <LorawanSetReceiveWindow2Parameters+0x38>)
   1bee2:	4798      	blx	r3
   1bee4:	e7f2      	b.n	1becc <LorawanSetReceiveWindow2Parameters+0x18>
   1bee6:	46c0      	nop			; (mov r8, r8)
   1bee8:	0000d5ed 	.word	0x0000d5ed
   1beec:	0001b16d 	.word	0x0001b16d

0001bef0 <LorawanSetReceiveWindowCParameters>:
   1bef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bef2:	466b      	mov	r3, sp
   1bef4:	1cdc      	adds	r4, r3, #3
   1bef6:	9001      	str	r0, [sp, #4]
   1bef8:	7021      	strb	r1, [r4, #0]
   1befa:	2001      	movs	r0, #1
   1befc:	a901      	add	r1, sp, #4
   1befe:	4d0d      	ldr	r5, [pc, #52]	; (1bf34 <LorawanSetReceiveWindowCParameters+0x44>)
   1bf00:	47a8      	blx	r5
   1bf02:	2808      	cmp	r0, #8
   1bf04:	d001      	beq.n	1bf0a <LorawanSetReceiveWindowCParameters+0x1a>
   1bf06:	200a      	movs	r0, #10
   1bf08:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1bf0a:	0021      	movs	r1, r4
   1bf0c:	200f      	movs	r0, #15
   1bf0e:	47a8      	blx	r5
   1bf10:	2808      	cmp	r0, #8
   1bf12:	d1f8      	bne.n	1bf06 <LorawanSetReceiveWindowCParameters+0x16>
   1bf14:	4b08      	ldr	r3, [pc, #32]	; (1bf38 <LorawanSetReceiveWindowCParameters+0x48>)
   1bf16:	9a01      	ldr	r2, [sp, #4]
   1bf18:	0019      	movs	r1, r3
   1bf1a:	7824      	ldrb	r4, [r4, #0]
   1bf1c:	3173      	adds	r1, #115	; 0x73
   1bf1e:	336f      	adds	r3, #111	; 0x6f
   1bf20:	700c      	strb	r4, [r1, #0]
   1bf22:	0a11      	lsrs	r1, r2, #8
   1bf24:	701a      	strb	r2, [r3, #0]
   1bf26:	7059      	strb	r1, [r3, #1]
   1bf28:	0c11      	lsrs	r1, r2, #16
   1bf2a:	0e12      	lsrs	r2, r2, #24
   1bf2c:	7099      	strb	r1, [r3, #2]
   1bf2e:	70da      	strb	r2, [r3, #3]
   1bf30:	e7ea      	b.n	1bf08 <LorawanSetReceiveWindowCParameters+0x18>
   1bf32:	46c0      	nop			; (mov r8, r8)
   1bf34:	0000d5ed 	.word	0x0000d5ed
   1bf38:	20001bd0 	.word	0x20001bd0

0001bf3c <LorawanSetFrequency>:
   1bf3c:	b507      	push	{r0, r1, r2, lr}
   1bf3e:	466b      	mov	r3, sp
   1bf40:	9100      	str	r1, [sp, #0]
   1bf42:	7118      	strb	r0, [r3, #4]
   1bf44:	4669      	mov	r1, sp
   1bf46:	2000      	movs	r0, #0
   1bf48:	4b01      	ldr	r3, [pc, #4]	; (1bf50 <LorawanSetFrequency+0x14>)
   1bf4a:	4798      	blx	r3
   1bf4c:	bd0e      	pop	{r1, r2, r3, pc}
   1bf4e:	46c0      	nop			; (mov r8, r8)
   1bf50:	0000d639 	.word	0x0000d639

0001bf54 <LorawanGetReceiveWindow2Parameters>:
   1bf54:	4a06      	ldr	r2, [pc, #24]	; (1bf70 <LorawanGetReceiveWindow2Parameters+0x1c>)
   1bf56:	0013      	movs	r3, r2
   1bf58:	336e      	adds	r3, #110	; 0x6e
   1bf5a:	781b      	ldrb	r3, [r3, #0]
   1bf5c:	7103      	strb	r3, [r0, #4]
   1bf5e:	0013      	movs	r3, r2
   1bf60:	326c      	adds	r2, #108	; 0x6c
   1bf62:	336a      	adds	r3, #106	; 0x6a
   1bf64:	8819      	ldrh	r1, [r3, #0]
   1bf66:	8813      	ldrh	r3, [r2, #0]
   1bf68:	041b      	lsls	r3, r3, #16
   1bf6a:	430b      	orrs	r3, r1
   1bf6c:	6003      	str	r3, [r0, #0]
   1bf6e:	4770      	bx	lr
   1bf70:	20001bd0 	.word	0x20001bd0

0001bf74 <LorawanGetReceiveWindowCParameters>:
   1bf74:	4a09      	ldr	r2, [pc, #36]	; (1bf9c <LorawanGetReceiveWindowCParameters+0x28>)
   1bf76:	0013      	movs	r3, r2
   1bf78:	3373      	adds	r3, #115	; 0x73
   1bf7a:	781b      	ldrb	r3, [r3, #0]
   1bf7c:	7103      	strb	r3, [r0, #4]
   1bf7e:	0013      	movs	r3, r2
   1bf80:	336f      	adds	r3, #111	; 0x6f
   1bf82:	7819      	ldrb	r1, [r3, #0]
   1bf84:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1bf86:	021b      	lsls	r3, r3, #8
   1bf88:	430b      	orrs	r3, r1
   1bf8a:	0a1a      	lsrs	r2, r3, #8
   1bf8c:	7003      	strb	r3, [r0, #0]
   1bf8e:	7042      	strb	r2, [r0, #1]
   1bf90:	0c1a      	lsrs	r2, r3, #16
   1bf92:	0e1b      	lsrs	r3, r3, #24
   1bf94:	7082      	strb	r2, [r0, #2]
   1bf96:	70c3      	strb	r3, [r0, #3]
   1bf98:	4770      	bx	lr
   1bf9a:	46c0      	nop			; (mov r8, r8)
   1bf9c:	20001bd0 	.word	0x20001bd0

0001bfa0 <LORAWAN_GetAttr>:
   1bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfa2:	000b      	movs	r3, r1
   1bfa4:	b093      	sub	sp, #76	; 0x4c
   1bfa6:	0016      	movs	r6, r2
   1bfa8:	2845      	cmp	r0, #69	; 0x45
   1bfaa:	d847      	bhi.n	1c03c <LORAWAN_GetAttr+0x9c>
   1bfac:	f005 f852 	bl	21054 <__gnu_thumb1_case_uhi>
   1bfb0:	00650049 	.word	0x00650049
   1bfb4:	00790069 	.word	0x00790069
   1bfb8:	00750071 	.word	0x00750071
   1bfbc:	0082007d 	.word	0x0082007d
   1bfc0:	00890086 	.word	0x00890086
   1bfc4:	0092008e 	.word	0x0092008e
   1bfc8:	009d0095 	.word	0x009d0095
   1bfcc:	00a300a0 	.word	0x00a300a0
   1bfd0:	00aa00a7 	.word	0x00aa00a7
   1bfd4:	00b000ad 	.word	0x00b000ad
   1bfd8:	00de00b3 	.word	0x00de00b3
   1bfdc:	00b900e2 	.word	0x00b900e2
   1bfe0:	00ee00b6 	.word	0x00ee00b6
   1bfe4:	00d900e8 	.word	0x00d900e8
   1bfe8:	00cd00d4 	.word	0x00cd00d4
   1bfec:	009a0046 	.word	0x009a0046
   1bff0:	00c900c5 	.word	0x00c900c5
   1bff4:	00bf00c2 	.word	0x00bf00c2
   1bff8:	00eb00e5 	.word	0x00eb00e5
   1bffc:	004f004f 	.word	0x004f004f
   1c000:	00f70051 	.word	0x00f70051
   1c004:	0115011e 	.word	0x0115011e
   1c008:	012b0108 	.word	0x012b0108
   1c00c:	01450139 	.word	0x01450139
   1c010:	015d0151 	.word	0x015d0151
   1c014:	0046016a 	.word	0x0046016a
   1c018:	017501a0 	.word	0x017501a0
   1c01c:	017e0179 	.word	0x017e0179
   1c020:	01880183 	.word	0x01880183
   1c024:	018f018c 	.word	0x018f018c
   1c028:	01950192 	.word	0x01950192
   1c02c:	0046019d 	.word	0x0046019d
   1c030:	00460046 	.word	0x00460046
   1c034:	01a901a4 	.word	0x01a901a4
   1c038:	02c601fc 	.word	0x02c601fc
   1c03c:	200a      	movs	r0, #10
   1c03e:	b013      	add	sp, #76	; 0x4c
   1c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c042:	2208      	movs	r2, #8
   1c044:	49c8      	ldr	r1, [pc, #800]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c046:	315d      	adds	r1, #93	; 0x5d
   1c048:	0030      	movs	r0, r6
   1c04a:	4bc8      	ldr	r3, [pc, #800]	; (1c36c <LORAWAN_GetAttr+0x3cc>)
   1c04c:	4798      	blx	r3
   1c04e:	2008      	movs	r0, #8
   1c050:	e7f5      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c052:	ac0e      	add	r4, sp, #56	; 0x38
   1c054:	0021      	movs	r1, r4
   1c056:	4bc6      	ldr	r3, [pc, #792]	; (1c370 <LORAWAN_GetAttr+0x3d0>)
   1c058:	201d      	movs	r0, #29
   1c05a:	4798      	blx	r3
   1c05c:	4bc2      	ldr	r3, [pc, #776]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c05e:	a910      	add	r1, sp, #64	; 0x40
   1c060:	33fe      	adds	r3, #254	; 0xfe
   1c062:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   1c064:	2208      	movs	r2, #8
   1c066:	808b      	strh	r3, [r1, #4]
   1c068:	7923      	ldrb	r3, [r4, #4]
   1c06a:	718b      	strb	r3, [r1, #6]
   1c06c:	8823      	ldrh	r3, [r4, #0]
   1c06e:	800b      	strh	r3, [r1, #0]
   1c070:	8863      	ldrh	r3, [r4, #2]
   1c072:	804b      	strh	r3, [r1, #2]
   1c074:	7963      	ldrb	r3, [r4, #5]
   1c076:	71cb      	strb	r3, [r1, #7]
   1c078:	e7e6      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c07a:	49bb      	ldr	r1, [pc, #748]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c07c:	2208      	movs	r2, #8
   1c07e:	3155      	adds	r1, #85	; 0x55
   1c080:	e7e2      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c082:	4bb9      	ldr	r3, [pc, #740]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c084:	681a      	ldr	r2, [r3, #0]
   1c086:	791b      	ldrb	r3, [r3, #4]
   1c088:	0a12      	lsrs	r2, r2, #8
   1c08a:	061b      	lsls	r3, r3, #24
   1c08c:	4313      	orrs	r3, r2
   1c08e:	6033      	str	r3, [r6, #0]
   1c090:	e7dd      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c092:	49b5      	ldr	r1, [pc, #724]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c094:	2210      	movs	r2, #16
   1c096:	3105      	adds	r1, #5
   1c098:	e7d6      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c09a:	49b3      	ldr	r1, [pc, #716]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c09c:	2210      	movs	r2, #16
   1c09e:	3115      	adds	r1, #21
   1c0a0:	e7d2      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c0a2:	49b1      	ldr	r1, [pc, #708]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0a4:	2210      	movs	r2, #16
   1c0a6:	3145      	adds	r1, #69	; 0x45
   1c0a8:	e7ce      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c0aa:	4baf      	ldr	r3, [pc, #700]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0ac:	3384      	adds	r3, #132	; 0x84
   1c0ae:	781b      	ldrb	r3, [r3, #0]
   1c0b0:	069b      	lsls	r3, r3, #26
   1c0b2:	e03a      	b.n	1c12a <LORAWAN_GetAttr+0x18a>
   1c0b4:	4bac      	ldr	r3, [pc, #688]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0b6:	33e7      	adds	r3, #231	; 0xe7
   1c0b8:	781b      	ldrb	r3, [r3, #0]
   1c0ba:	e005      	b.n	1c0c8 <LORAWAN_GetAttr+0x128>
   1c0bc:	4baa      	ldr	r3, [pc, #680]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0be:	33e9      	adds	r3, #233	; 0xe9
   1c0c0:	e7fa      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c0c2:	4ba9      	ldr	r3, [pc, #676]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0c4:	33ff      	adds	r3, #255	; 0xff
   1c0c6:	785b      	ldrb	r3, [r3, #1]
   1c0c8:	7033      	strb	r3, [r6, #0]
   1c0ca:	e7c0      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c0cc:	4ba6      	ldr	r3, [pc, #664]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0ce:	3388      	adds	r3, #136	; 0x88
   1c0d0:	681b      	ldr	r3, [r3, #0]
   1c0d2:	e7dc      	b.n	1c08e <LORAWAN_GetAttr+0xee>
   1c0d4:	4ba4      	ldr	r3, [pc, #656]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0d6:	338c      	adds	r3, #140	; 0x8c
   1c0d8:	e7fa      	b.n	1c0d0 <LORAWAN_GetAttr+0x130>
   1c0da:	4ba3      	ldr	r3, [pc, #652]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0dc:	33d0      	adds	r3, #208	; 0xd0
   1c0de:	881b      	ldrh	r3, [r3, #0]
   1c0e0:	8033      	strh	r3, [r6, #0]
   1c0e2:	e7b4      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c0e4:	4ba0      	ldr	r3, [pc, #640]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0e6:	33d2      	adds	r3, #210	; 0xd2
   1c0e8:	e7f9      	b.n	1c0de <LORAWAN_GetAttr+0x13e>
   1c0ea:	4b9f      	ldr	r3, [pc, #636]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0ec:	33d4      	adds	r3, #212	; 0xd4
   1c0ee:	e7f6      	b.n	1c0de <LORAWAN_GetAttr+0x13e>
   1c0f0:	4b9d      	ldr	r3, [pc, #628]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0f2:	33d6      	adds	r3, #214	; 0xd6
   1c0f4:	e7f3      	b.n	1c0de <LORAWAN_GetAttr+0x13e>
   1c0f6:	4b9c      	ldr	r3, [pc, #624]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c0f8:	33d8      	adds	r3, #216	; 0xd8
   1c0fa:	881b      	ldrh	r3, [r3, #0]
   1c0fc:	e7e4      	b.n	1c0c8 <LORAWAN_GetAttr+0x128>
   1c0fe:	4b9a      	ldr	r3, [pc, #616]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c100:	33dc      	adds	r3, #220	; 0xdc
   1c102:	e7d9      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c104:	4b98      	ldr	r3, [pc, #608]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c106:	33dd      	adds	r3, #221	; 0xdd
   1c108:	e7d6      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c10a:	4b97      	ldr	r3, [pc, #604]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c10c:	33da      	adds	r3, #218	; 0xda
   1c10e:	e7e6      	b.n	1c0de <LORAWAN_GetAttr+0x13e>
   1c110:	4b95      	ldr	r3, [pc, #596]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c112:	33e2      	adds	r3, #226	; 0xe2
   1c114:	e7d0      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c116:	4b94      	ldr	r3, [pc, #592]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c118:	33e1      	adds	r3, #225	; 0xe1
   1c11a:	e7cd      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c11c:	4b92      	ldr	r3, [pc, #584]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c11e:	33e8      	adds	r3, #232	; 0xe8
   1c120:	e7ca      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c122:	4b91      	ldr	r3, [pc, #580]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c124:	3384      	adds	r3, #132	; 0x84
   1c126:	781b      	ldrb	r3, [r3, #0]
   1c128:	06db      	lsls	r3, r3, #27
   1c12a:	0fdb      	lsrs	r3, r3, #31
   1c12c:	e7cc      	b.n	1c0c8 <LORAWAN_GetAttr+0x128>
   1c12e:	4b8e      	ldr	r3, [pc, #568]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c130:	33e6      	adds	r3, #230	; 0xe6
   1c132:	e7c1      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c134:	4b8c      	ldr	r3, [pc, #560]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c136:	33e5      	adds	r3, #229	; 0xe5
   1c138:	e7be      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c13a:	4b8b      	ldr	r3, [pc, #556]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c13c:	3398      	adds	r3, #152	; 0x98
   1c13e:	781b      	ldrb	r3, [r3, #0]
   1c140:	e7ce      	b.n	1c0e0 <LORAWAN_GetAttr+0x140>
   1c142:	4b89      	ldr	r3, [pc, #548]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c144:	3308      	adds	r3, #8
   1c146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1c148:	e7a1      	b.n	1c08e <LORAWAN_GetAttr+0xee>
   1c14a:	2016      	movs	r0, #22
   1c14c:	781b      	ldrb	r3, [r3, #0]
   1c14e:	a910      	add	r1, sp, #64	; 0x40
   1c150:	700b      	strb	r3, [r1, #0]
   1c152:	4b88      	ldr	r3, [pc, #544]	; (1c374 <LORAWAN_GetAttr+0x3d4>)
   1c154:	4798      	blx	r3
   1c156:	e77a      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c158:	781b      	ldrb	r3, [r3, #0]
   1c15a:	a910      	add	r1, sp, #64	; 0x40
   1c15c:	700b      	strb	r3, [r1, #0]
   1c15e:	2012      	movs	r0, #18
   1c160:	e7f7      	b.n	1c152 <LORAWAN_GetAttr+0x1b2>
   1c162:	781b      	ldrb	r3, [r3, #0]
   1c164:	a910      	add	r1, sp, #64	; 0x40
   1c166:	700b      	strb	r3, [r1, #0]
   1c168:	2000      	movs	r0, #0
   1c16a:	e7f2      	b.n	1c152 <LORAWAN_GetAttr+0x1b2>
   1c16c:	0010      	movs	r0, r2
   1c16e:	4b82      	ldr	r3, [pc, #520]	; (1c378 <LORAWAN_GetAttr+0x3d8>)
   1c170:	4798      	blx	r3
   1c172:	e76c      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c174:	0010      	movs	r0, r2
   1c176:	4b81      	ldr	r3, [pc, #516]	; (1c37c <LORAWAN_GetAttr+0x3dc>)
   1c178:	e7fa      	b.n	1c170 <LORAWAN_GetAttr+0x1d0>
   1c17a:	4b7b      	ldr	r3, [pc, #492]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c17c:	33ff      	adds	r3, #255	; 0xff
   1c17e:	e79b      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c180:	4b79      	ldr	r3, [pc, #484]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c182:	33fd      	adds	r3, #253	; 0xfd
   1c184:	e798      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c186:	4b78      	ldr	r3, [pc, #480]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c188:	33fe      	adds	r3, #254	; 0xfe
   1c18a:	e795      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c18c:	21fa      	movs	r1, #250	; 0xfa
   1c18e:	4b76      	ldr	r3, [pc, #472]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c190:	0089      	lsls	r1, r1, #2
   1c192:	3390      	adds	r3, #144	; 0x90
   1c194:	6818      	ldr	r0, [r3, #0]
   1c196:	4b7a      	ldr	r3, [pc, #488]	; (1c380 <LORAWAN_GetAttr+0x3e0>)
   1c198:	4798      	blx	r3
   1c19a:	8030      	strh	r0, [r6, #0]
   1c19c:	e757      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c19e:	780a      	ldrb	r2, [r1, #0]
   1c1a0:	200a      	movs	r0, #10
   1c1a2:	2a03      	cmp	r2, #3
   1c1a4:	d900      	bls.n	1c1a8 <LORAWAN_GetAttr+0x208>
   1c1a6:	e74a      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c1a8:	232e      	movs	r3, #46	; 0x2e
   1c1aa:	496f      	ldr	r1, [pc, #444]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c1ac:	33ff      	adds	r3, #255	; 0xff
   1c1ae:	5cc9      	ldrb	r1, [r1, r3]
   1c1b0:	3b2d      	subs	r3, #45	; 0x2d
   1c1b2:	3bff      	subs	r3, #255	; 0xff
   1c1b4:	4093      	lsls	r3, r2
   1c1b6:	400b      	ands	r3, r1
   1c1b8:	1e5a      	subs	r2, r3, #1
   1c1ba:	4193      	sbcs	r3, r2
   1c1bc:	7033      	strb	r3, [r6, #0]
   1c1be:	e02e      	b.n	1c21e <LORAWAN_GetAttr+0x27e>
   1c1c0:	780b      	ldrb	r3, [r1, #0]
   1c1c2:	200a      	movs	r0, #10
   1c1c4:	2b03      	cmp	r3, #3
   1c1c6:	d900      	bls.n	1c1ca <LORAWAN_GetAttr+0x22a>
   1c1c8:	e739      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c1ca:	213c      	movs	r1, #60	; 0x3c
   1c1cc:	4359      	muls	r1, r3
   1c1ce:	3145      	adds	r1, #69	; 0x45
   1c1d0:	4b65      	ldr	r3, [pc, #404]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c1d2:	31ff      	adds	r1, #255	; 0xff
   1c1d4:	18c9      	adds	r1, r1, r3
   1c1d6:	2210      	movs	r2, #16
   1c1d8:	e736      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c1da:	780b      	ldrb	r3, [r1, #0]
   1c1dc:	200a      	movs	r0, #10
   1c1de:	2b03      	cmp	r3, #3
   1c1e0:	d900      	bls.n	1c1e4 <LORAWAN_GetAttr+0x244>
   1c1e2:	e72c      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c1e4:	213c      	movs	r1, #60	; 0x3c
   1c1e6:	4359      	muls	r1, r3
   1c1e8:	3135      	adds	r1, #53	; 0x35
   1c1ea:	e7f1      	b.n	1c1d0 <LORAWAN_GetAttr+0x230>
   1c1ec:	780b      	ldrb	r3, [r1, #0]
   1c1ee:	200a      	movs	r0, #10
   1c1f0:	2b03      	cmp	r3, #3
   1c1f2:	d900      	bls.n	1c1f6 <LORAWAN_GetAttr+0x256>
   1c1f4:	e723      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c1f6:	213c      	movs	r1, #60	; 0x3c
   1c1f8:	4359      	muls	r1, r3
   1c1fa:	4b5b      	ldr	r3, [pc, #364]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c1fc:	3131      	adds	r1, #49	; 0x31
   1c1fe:	31ff      	adds	r1, #255	; 0xff
   1c200:	18c9      	adds	r1, r1, r3
   1c202:	2204      	movs	r2, #4
   1c204:	e720      	b.n	1c048 <LORAWAN_GetAttr+0xa8>
   1c206:	780a      	ldrb	r2, [r1, #0]
   1c208:	200a      	movs	r0, #10
   1c20a:	2a03      	cmp	r2, #3
   1c20c:	d900      	bls.n	1c210 <LORAWAN_GetAttr+0x270>
   1c20e:	e716      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c210:	233c      	movs	r3, #60	; 0x3c
   1c212:	435a      	muls	r2, r3
   1c214:	4b54      	ldr	r3, [pc, #336]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c216:	189b      	adds	r3, r3, r2
   1c218:	33fc      	adds	r3, #252	; 0xfc
   1c21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1c21c:	6033      	str	r3, [r6, #0]
   1c21e:	3802      	subs	r0, #2
   1c220:	e70d      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c222:	780a      	ldrb	r2, [r1, #0]
   1c224:	200a      	movs	r0, #10
   1c226:	2a03      	cmp	r2, #3
   1c228:	d900      	bls.n	1c22c <LORAWAN_GetAttr+0x28c>
   1c22a:	e708      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c22c:	233c      	movs	r3, #60	; 0x3c
   1c22e:	435a      	muls	r2, r3
   1c230:	4b4d      	ldr	r3, [pc, #308]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c232:	189b      	adds	r3, r3, r2
   1c234:	33fc      	adds	r3, #252	; 0xfc
   1c236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1c238:	e7f0      	b.n	1c21c <LORAWAN_GetAttr+0x27c>
   1c23a:	780a      	ldrb	r2, [r1, #0]
   1c23c:	200a      	movs	r0, #10
   1c23e:	2a03      	cmp	r2, #3
   1c240:	d900      	bls.n	1c244 <LORAWAN_GetAttr+0x2a4>
   1c242:	e6fc      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c244:	233c      	movs	r3, #60	; 0x3c
   1c246:	435a      	muls	r2, r3
   1c248:	4b47      	ldr	r3, [pc, #284]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c24a:	189b      	adds	r3, r3, r2
   1c24c:	33fc      	adds	r3, #252	; 0xfc
   1c24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1c250:	e7e4      	b.n	1c21c <LORAWAN_GetAttr+0x27c>
   1c252:	780a      	ldrb	r2, [r1, #0]
   1c254:	200a      	movs	r0, #10
   1c256:	2a03      	cmp	r2, #3
   1c258:	d900      	bls.n	1c25c <LORAWAN_GetAttr+0x2bc>
   1c25a:	e6f0      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c25c:	233c      	movs	r3, #60	; 0x3c
   1c25e:	435a      	muls	r2, r3
   1c260:	4b41      	ldr	r3, [pc, #260]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c262:	189b      	adds	r3, r3, r2
   1c264:	33fc      	adds	r3, #252	; 0xfc
   1c266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c268:	e7d8      	b.n	1c21c <LORAWAN_GetAttr+0x27c>
   1c26a:	780a      	ldrb	r2, [r1, #0]
   1c26c:	200a      	movs	r0, #10
   1c26e:	2a03      	cmp	r2, #3
   1c270:	d900      	bls.n	1c274 <LORAWAN_GetAttr+0x2d4>
   1c272:	e6e4      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c274:	233c      	movs	r3, #60	; 0x3c
   1c276:	435a      	muls	r2, r3
   1c278:	4b3b      	ldr	r3, [pc, #236]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c27a:	189b      	adds	r3, r3, r2
   1c27c:	3369      	adds	r3, #105	; 0x69
   1c27e:	33ff      	adds	r3, #255	; 0xff
   1c280:	781b      	ldrb	r3, [r3, #0]
   1c282:	e79b      	b.n	1c1bc <LORAWAN_GetAttr+0x21c>
   1c284:	780a      	ldrb	r2, [r1, #0]
   1c286:	200a      	movs	r0, #10
   1c288:	2a03      	cmp	r2, #3
   1c28a:	d900      	bls.n	1c28e <LORAWAN_GetAttr+0x2ee>
   1c28c:	e6d7      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c28e:	233c      	movs	r3, #60	; 0x3c
   1c290:	435a      	muls	r2, r3
   1c292:	4b35      	ldr	r3, [pc, #212]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c294:	189b      	adds	r3, r3, r2
   1c296:	336a      	adds	r3, #106	; 0x6a
   1c298:	e7f1      	b.n	1c27e <LORAWAN_GetAttr+0x2de>
   1c29a:	0010      	movs	r0, r2
   1c29c:	4b39      	ldr	r3, [pc, #228]	; (1c384 <LORAWAN_GetAttr+0x3e4>)
   1c29e:	4798      	blx	r3
   1c2a0:	e6cd      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c2a2:	0011      	movs	r1, r2
   1c2a4:	4b32      	ldr	r3, [pc, #200]	; (1c370 <LORAWAN_GetAttr+0x3d0>)
   1c2a6:	201f      	movs	r0, #31
   1c2a8:	4798      	blx	r3
   1c2aa:	e6d0      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c2ac:	4b2e      	ldr	r3, [pc, #184]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2ae:	3394      	adds	r3, #148	; 0x94
   1c2b0:	781b      	ldrb	r3, [r3, #0]
   1c2b2:	071b      	lsls	r3, r3, #28
   1c2b4:	e739      	b.n	1c12a <LORAWAN_GetAttr+0x18a>
   1c2b6:	4b2c      	ldr	r3, [pc, #176]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2b8:	3394      	adds	r3, #148	; 0x94
   1c2ba:	781b      	ldrb	r3, [r3, #0]
   1c2bc:	07db      	lsls	r3, r3, #31
   1c2be:	e734      	b.n	1c12a <LORAWAN_GetAttr+0x18a>
   1c2c0:	2030      	movs	r0, #48	; 0x30
   1c2c2:	4b2c      	ldr	r3, [pc, #176]	; (1c374 <LORAWAN_GetAttr+0x3d4>)
   1c2c4:	4798      	blx	r3
   1c2c6:	e6ba      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c2c8:	492f      	ldr	r1, [pc, #188]	; (1c388 <LORAWAN_GetAttr+0x3e8>)
   1c2ca:	2026      	movs	r0, #38	; 0x26
   1c2cc:	e7f9      	b.n	1c2c2 <LORAWAN_GetAttr+0x322>
   1c2ce:	4b26      	ldr	r3, [pc, #152]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2d0:	33e4      	adds	r3, #228	; 0xe4
   1c2d2:	e6f1      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c2d4:	4b24      	ldr	r3, [pc, #144]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2d6:	33e3      	adds	r3, #227	; 0xe3
   1c2d8:	e6ee      	b.n	1c0b8 <LORAWAN_GetAttr+0x118>
   1c2da:	4b2c      	ldr	r3, [pc, #176]	; (1c38c <LORAWAN_GetAttr+0x3ec>)
   1c2dc:	4798      	blx	r3
   1c2de:	4b2c      	ldr	r3, [pc, #176]	; (1c390 <LORAWAN_GetAttr+0x3f0>)
   1c2e0:	0004      	movs	r4, r0
   1c2e2:	4798      	blx	r3
   1c2e4:	1b00      	subs	r0, r0, r4
   1c2e6:	7030      	strb	r0, [r6, #0]
   1c2e8:	e6b1      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c2ea:	2100      	movs	r1, #0
   1c2ec:	2020      	movs	r0, #32
   1c2ee:	e7e8      	b.n	1c2c2 <LORAWAN_GetAttr+0x322>
   1c2f0:	4b1d      	ldr	r3, [pc, #116]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2f2:	33ff      	adds	r3, #255	; 0xff
   1c2f4:	7f5b      	ldrb	r3, [r3, #29]
   1c2f6:	e6db      	b.n	1c0b0 <LORAWAN_GetAttr+0x110>
   1c2f8:	238f      	movs	r3, #143	; 0x8f
   1c2fa:	4a1b      	ldr	r2, [pc, #108]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c2fc:	009b      	lsls	r3, r3, #2
   1c2fe:	58d3      	ldr	r3, [r2, r3]
   1c300:	e6c5      	b.n	1c08e <LORAWAN_GetAttr+0xee>
   1c302:	258d      	movs	r5, #141	; 0x8d
   1c304:	4c18      	ldr	r4, [pc, #96]	; (1c368 <LORAWAN_GetAttr+0x3c8>)
   1c306:	00ad      	lsls	r5, r5, #2
   1c308:	5963      	ldr	r3, [r4, r5]
   1c30a:	2015      	movs	r0, #21
   1c30c:	3301      	adds	r3, #1
   1c30e:	d100      	bne.n	1c312 <LORAWAN_GetAttr+0x372>
   1c310:	e695      	b.n	1c03e <LORAWAN_GetAttr+0x9e>
   1c312:	4b20      	ldr	r3, [pc, #128]	; (1c394 <LORAWAN_GetAttr+0x3f4>)
   1c314:	a910      	add	r1, sp, #64	; 0x40
   1c316:	5ce0      	ldrb	r0, [r4, r3]
   1c318:	4b1f      	ldr	r3, [pc, #124]	; (1c398 <LORAWAN_GetAttr+0x3f8>)
   1c31a:	4798      	blx	r3
   1c31c:	4b1f      	ldr	r3, [pc, #124]	; (1c39c <LORAWAN_GetAttr+0x3fc>)
   1c31e:	4798      	blx	r3
   1c320:	22fa      	movs	r2, #250	; 0xfa
   1c322:	9000      	str	r0, [sp, #0]
   1c324:	9101      	str	r1, [sp, #4]
   1c326:	0092      	lsls	r2, r2, #2
   1c328:	5960      	ldr	r0, [r4, r5]
   1c32a:	2300      	movs	r3, #0
   1c32c:	4d1c      	ldr	r5, [pc, #112]	; (1c3a0 <LORAWAN_GetAttr+0x400>)
   1c32e:	2100      	movs	r1, #0
   1c330:	47a8      	blx	r5
   1c332:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c334:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c336:	9002      	str	r0, [sp, #8]
   1c338:	9103      	str	r1, [sp, #12]
   1c33a:	9800      	ldr	r0, [sp, #0]
   1c33c:	9901      	ldr	r1, [sp, #4]
   1c33e:	1a80      	subs	r0, r0, r2
   1c340:	4199      	sbcs	r1, r3
   1c342:	22fa      	movs	r2, #250	; 0xfa
   1c344:	2300      	movs	r3, #0
   1c346:	0092      	lsls	r2, r2, #2
   1c348:	4d16      	ldr	r5, [pc, #88]	; (1c3a4 <LORAWAN_GetAttr+0x404>)
   1c34a:	47a8      	blx	r5
   1c34c:	238e      	movs	r3, #142	; 0x8e
   1c34e:	009b      	lsls	r3, r3, #2
   1c350:	5ce4      	ldrb	r4, [r4, r3]
   1c352:	2300      	movs	r3, #0
   1c354:	00a2      	lsls	r2, r4, #2
   1c356:	9c02      	ldr	r4, [sp, #8]
   1c358:	9d03      	ldr	r5, [sp, #12]
   1c35a:	1912      	adds	r2, r2, r4
   1c35c:	416b      	adcs	r3, r5
   1c35e:	1812      	adds	r2, r2, r0
   1c360:	414b      	adcs	r3, r1
   1c362:	6032      	str	r2, [r6, #0]
   1c364:	6073      	str	r3, [r6, #4]
   1c366:	e672      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c368:	20001bd0 	.word	0x20001bd0
   1c36c:	00024149 	.word	0x00024149
   1c370:	0001f4f1 	.word	0x0001f4f1
   1c374:	0000d595 	.word	0x0000d595
   1c378:	0001bf55 	.word	0x0001bf55
   1c37c:	0001bf75 	.word	0x0001bf75
   1c380:	00021069 	.word	0x00021069
   1c384:	00012db9 	.word	0x00012db9
   1c388:	20001cb7 	.word	0x20001cb7
   1c38c:	0001a6f5 	.word	0x0001a6f5
   1c390:	0001a79d 	.word	0x0001a79d
   1c394:	00000231 	.word	0x00000231
   1c398:	000161a9 	.word	0x000161a9
   1c39c:	0001594d 	.word	0x0001594d
   1c3a0:	00021485 	.word	0x00021485
   1c3a4:	00021445 	.word	0x00021445
   1c3a8:	88ca      	ldrh	r2, [r1, #6]
   1c3aa:	780b      	ldrb	r3, [r1, #0]
   1c3ac:	9206      	str	r2, [sp, #24]
   1c3ae:	784a      	ldrb	r2, [r1, #1]
   1c3b0:	af0e      	add	r7, sp, #56	; 0x38
   1c3b2:	9209      	str	r2, [sp, #36]	; 0x24
   1c3b4:	788a      	ldrb	r2, [r1, #2]
   1c3b6:	2025      	movs	r0, #37	; 0x25
   1c3b8:	920a      	str	r2, [sp, #40]	; 0x28
   1c3ba:	78ca      	ldrb	r2, [r1, #3]
   1c3bc:	920b      	str	r2, [sp, #44]	; 0x2c
   1c3be:	790a      	ldrb	r2, [r1, #4]
   1c3c0:	9208      	str	r2, [sp, #32]
   1c3c2:	aa0c      	add	r2, sp, #48	; 0x30
   1c3c4:	1d94      	adds	r4, r2, #6
   1c3c6:	7193      	strb	r3, [r2, #6]
   1c3c8:	0021      	movs	r1, r4
   1c3ca:	003a      	movs	r2, r7
   1c3cc:	4b5e      	ldr	r3, [pc, #376]	; (1c548 <LORAWAN_GetAttr+0x5a8>)
   1c3ce:	4798      	blx	r3
   1c3d0:	ab0c      	add	r3, sp, #48	; 0x30
   1c3d2:	1ddd      	adds	r5, r3, #7
   1c3d4:	002a      	movs	r2, r5
   1c3d6:	0021      	movs	r1, r4
   1c3d8:	2023      	movs	r0, #35	; 0x23
   1c3da:	4b5b      	ldr	r3, [pc, #364]	; (1c548 <LORAWAN_GetAttr+0x5a8>)
   1c3dc:	4798      	blx	r3
   1c3de:	782d      	ldrb	r5, [r5, #0]
   1c3e0:	2d01      	cmp	r5, #1
   1c3e2:	d000      	beq.n	1c3e6 <LORAWAN_GetAttr+0x446>
   1c3e4:	e0a1      	b.n	1c52a <LORAWAN_GetAttr+0x58a>
   1c3e6:	ac10      	add	r4, sp, #64	; 0x40
   1c3e8:	4b58      	ldr	r3, [pc, #352]	; (1c54c <LORAWAN_GetAttr+0x5ac>)
   1c3ea:	0021      	movs	r1, r4
   1c3ec:	2007      	movs	r0, #7
   1c3ee:	4798      	blx	r3
   1c3f0:	783b      	ldrb	r3, [r7, #0]
   1c3f2:	2b0c      	cmp	r3, #12
   1c3f4:	d000      	beq.n	1c3f8 <LORAWAN_GetAttr+0x458>
   1c3f6:	e08a      	b.n	1c50e <LORAWAN_GetAttr+0x56e>
   1c3f8:	2700      	movs	r7, #0
   1c3fa:	7823      	ldrb	r3, [r4, #0]
   1c3fc:	3b07      	subs	r3, #7
   1c3fe:	b2db      	uxtb	r3, r3
   1c400:	429d      	cmp	r5, r3
   1c402:	417f      	adcs	r7, r7
   1c404:	b2fb      	uxtb	r3, r7
   1c406:	9302      	str	r3, [sp, #8]
   1c408:	ac10      	add	r4, sp, #64	; 0x40
   1c40a:	ab0c      	add	r3, sp, #48	; 0x30
   1c40c:	1d99      	adds	r1, r3, #6
   1c40e:	0022      	movs	r2, r4
   1c410:	4b4d      	ldr	r3, [pc, #308]	; (1c548 <LORAWAN_GetAttr+0x5a8>)
   1c412:	2024      	movs	r0, #36	; 0x24
   1c414:	4798      	blx	r3
   1c416:	7823      	ldrb	r3, [r4, #0]
   1c418:	3b07      	subs	r3, #7
   1c41a:	b2db      	uxtb	r3, r3
   1c41c:	2b02      	cmp	r3, #2
   1c41e:	d900      	bls.n	1c422 <LORAWAN_GetAttr+0x482>
   1c420:	e080      	b.n	1c524 <LORAWAN_GetAttr+0x584>
   1c422:	4a4b      	ldr	r2, [pc, #300]	; (1c550 <LORAWAN_GetAttr+0x5b0>)
   1c424:	00db      	lsls	r3, r3, #3
   1c426:	18d3      	adds	r3, r2, r3
   1c428:	681c      	ldr	r4, [r3, #0]
   1c42a:	685d      	ldr	r5, [r3, #4]
   1c42c:	2001      	movs	r0, #1
   1c42e:	ab0e      	add	r3, sp, #56	; 0x38
   1c430:	781b      	ldrb	r3, [r3, #0]
   1c432:	4f48      	ldr	r7, [pc, #288]	; (1c554 <LORAWAN_GetAttr+0x5b4>)
   1c434:	9300      	str	r3, [sp, #0]
   1c436:	4098      	lsls	r0, r3
   1c438:	47b8      	blx	r7
   1c43a:	0002      	movs	r2, r0
   1c43c:	000b      	movs	r3, r1
   1c43e:	0020      	movs	r0, r4
   1c440:	0029      	movs	r1, r5
   1c442:	4c45      	ldr	r4, [pc, #276]	; (1c558 <LORAWAN_GetAttr+0x5b8>)
   1c444:	47a0      	blx	r4
   1c446:	0002      	movs	r2, r0
   1c448:	000b      	movs	r3, r1
   1c44a:	2000      	movs	r0, #0
   1c44c:	4943      	ldr	r1, [pc, #268]	; (1c55c <LORAWAN_GetAttr+0x5bc>)
   1c44e:	47a0      	blx	r4
   1c450:	466b      	mov	r3, sp
   1c452:	9004      	str	r0, [sp, #16]
   1c454:	9105      	str	r1, [sp, #20]
   1c456:	7e18      	ldrb	r0, [r3, #24]
   1c458:	47b8      	blx	r7
   1c45a:	4c41      	ldr	r4, [pc, #260]	; (1c560 <LORAWAN_GetAttr+0x5c0>)
   1c45c:	2200      	movs	r2, #0
   1c45e:	4b41      	ldr	r3, [pc, #260]	; (1c564 <LORAWAN_GetAttr+0x5c4>)
   1c460:	47a0      	blx	r4
   1c462:	9a04      	ldr	r2, [sp, #16]
   1c464:	9b05      	ldr	r3, [sp, #20]
   1c466:	4c40      	ldr	r4, [pc, #256]	; (1c568 <LORAWAN_GetAttr+0x5c8>)
   1c468:	47a0      	blx	r4
   1c46a:	9b08      	ldr	r3, [sp, #32]
   1c46c:	9006      	str	r0, [sp, #24]
   1c46e:	9107      	str	r1, [sp, #28]
   1c470:	0058      	lsls	r0, r3, #1
   1c472:	9b00      	ldr	r3, [sp, #0]
   1c474:	2214      	movs	r2, #20
   1c476:	1ac0      	subs	r0, r0, r3
   1c478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c47a:	3007      	adds	r0, #7
   1c47c:	009b      	lsls	r3, r3, #2
   1c47e:	18c0      	adds	r0, r0, r3
   1c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c482:	0080      	lsls	r0, r0, #2
   1c484:	1e59      	subs	r1, r3, #1
   1c486:	418b      	sbcs	r3, r1
   1c488:	425b      	negs	r3, r3
   1c48a:	401a      	ands	r2, r3
   1c48c:	1a80      	subs	r0, r0, r2
   1c48e:	47b8      	blx	r7
   1c490:	0004      	movs	r4, r0
   1c492:	9802      	ldr	r0, [sp, #8]
   1c494:	000d      	movs	r5, r1
   1c496:	1e43      	subs	r3, r0, #1
   1c498:	4198      	sbcs	r0, r3
   1c49a:	9b00      	ldr	r3, [sp, #0]
   1c49c:	0040      	lsls	r0, r0, #1
   1c49e:	1a18      	subs	r0, r3, r0
   1c4a0:	0080      	lsls	r0, r0, #2
   1c4a2:	47b8      	blx	r7
   1c4a4:	0002      	movs	r2, r0
   1c4a6:	000b      	movs	r3, r1
   1c4a8:	0020      	movs	r0, r4
   1c4aa:	0029      	movs	r1, r5
   1c4ac:	4c2a      	ldr	r4, [pc, #168]	; (1c558 <LORAWAN_GetAttr+0x5b8>)
   1c4ae:	47a0      	blx	r4
   1c4b0:	4b2e      	ldr	r3, [pc, #184]	; (1c56c <LORAWAN_GetAttr+0x5cc>)
   1c4b2:	0004      	movs	r4, r0
   1c4b4:	000d      	movs	r5, r1
   1c4b6:	4798      	blx	r3
   1c4b8:	4b2d      	ldr	r3, [pc, #180]	; (1c570 <LORAWAN_GetAttr+0x5d0>)
   1c4ba:	0007      	movs	r7, r0
   1c4bc:	4798      	blx	r3
   1c4be:	0002      	movs	r2, r0
   1c4c0:	000b      	movs	r3, r1
   1c4c2:	0020      	movs	r0, r4
   1c4c4:	0029      	movs	r1, r5
   1c4c6:	4c2b      	ldr	r4, [pc, #172]	; (1c574 <LORAWAN_GetAttr+0x5d4>)
   1c4c8:	47a0      	blx	r4
   1c4ca:	2200      	movs	r2, #0
   1c4cc:	2300      	movs	r3, #0
   1c4ce:	4c2a      	ldr	r4, [pc, #168]	; (1c578 <LORAWAN_GetAttr+0x5d8>)
   1c4d0:	47a0      	blx	r4
   1c4d2:	1e43      	subs	r3, r0, #1
   1c4d4:	4198      	sbcs	r0, r3
   1c4d6:	183f      	adds	r7, r7, r0
   1c4d8:	003b      	movs	r3, r7
   1c4da:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c4dc:	3004      	adds	r0, #4
   1c4de:	4343      	muls	r3, r0
   1c4e0:	3308      	adds	r3, #8
   1c4e2:	0018      	movs	r0, r3
   1c4e4:	4b22      	ldr	r3, [pc, #136]	; (1c570 <LORAWAN_GetAttr+0x5d0>)
   1c4e6:	4798      	blx	r3
   1c4e8:	9a04      	ldr	r2, [sp, #16]
   1c4ea:	9b05      	ldr	r3, [sp, #20]
   1c4ec:	4c1e      	ldr	r4, [pc, #120]	; (1c568 <LORAWAN_GetAttr+0x5c8>)
   1c4ee:	47a0      	blx	r4
   1c4f0:	9a06      	ldr	r2, [sp, #24]
   1c4f2:	9b07      	ldr	r3, [sp, #28]
   1c4f4:	4c1a      	ldr	r4, [pc, #104]	; (1c560 <LORAWAN_GetAttr+0x5c0>)
   1c4f6:	47a0      	blx	r4
   1c4f8:	2200      	movs	r2, #0
   1c4fa:	4b20      	ldr	r3, [pc, #128]	; (1c57c <LORAWAN_GetAttr+0x5dc>)
   1c4fc:	4c1a      	ldr	r4, [pc, #104]	; (1c568 <LORAWAN_GetAttr+0x5c8>)
   1c4fe:	47a0      	blx	r4
   1c500:	2200      	movs	r2, #0
   1c502:	4b1e      	ldr	r3, [pc, #120]	; (1c57c <LORAWAN_GetAttr+0x5dc>)
   1c504:	47a0      	blx	r4
   1c506:	4b19      	ldr	r3, [pc, #100]	; (1c56c <LORAWAN_GetAttr+0x5cc>)
   1c508:	4798      	blx	r3
   1c50a:	6030      	str	r0, [r6, #0]
   1c50c:	e59f      	b.n	1c04e <LORAWAN_GetAttr+0xae>
   1c50e:	2200      	movs	r2, #0
   1c510:	9202      	str	r2, [sp, #8]
   1c512:	2b0b      	cmp	r3, #11
   1c514:	d000      	beq.n	1c518 <LORAWAN_GetAttr+0x578>
   1c516:	e777      	b.n	1c408 <LORAWAN_GetAttr+0x468>
   1c518:	7827      	ldrb	r7, [r4, #0]
   1c51a:	3f07      	subs	r7, #7
   1c51c:	427a      	negs	r2, r7
   1c51e:	417a      	adcs	r2, r7
   1c520:	b2d3      	uxtb	r3, r2
   1c522:	e770      	b.n	1c406 <LORAWAN_GetAttr+0x466>
   1c524:	2400      	movs	r4, #0
   1c526:	2500      	movs	r5, #0
   1c528:	e780      	b.n	1c42c <LORAWAN_GetAttr+0x48c>
   1c52a:	20a0      	movs	r0, #160	; 0xa0
   1c52c:	9b08      	ldr	r3, [sp, #32]
   1c52e:	4358      	muls	r0, r3
   1c530:	23c8      	movs	r3, #200	; 0xc8
   1c532:	009b      	lsls	r3, r3, #2
   1c534:	18c0      	adds	r0, r0, r3
   1c536:	4b0e      	ldr	r3, [pc, #56]	; (1c570 <LORAWAN_GetAttr+0x5d0>)
   1c538:	4798      	blx	r3
   1c53a:	e7e4      	b.n	1c506 <LORAWAN_GetAttr+0x566>
   1c53c:	4b10      	ldr	r3, [pc, #64]	; (1c580 <LORAWAN_GetAttr+0x5e0>)
   1c53e:	33ff      	adds	r3, #255	; 0xff
   1c540:	7f5b      	ldrb	r3, [r3, #29]
   1c542:	079b      	lsls	r3, r3, #30
   1c544:	e5f1      	b.n	1c12a <LORAWAN_GetAttr+0x18a>
   1c546:	46c0      	nop			; (mov r8, r8)
   1c548:	0000d595 	.word	0x0000d595
   1c54c:	0001f4f1 	.word	0x0001f4f1
   1c550:	0002cc78 	.word	0x0002cc78
   1c554:	00023f09 	.word	0x00023f09
   1c558:	00022b0d 	.word	0x00022b0d
   1c55c:	3ff00000 	.word	0x3ff00000
   1c560:	000224ed 	.word	0x000224ed
   1c564:	40110000 	.word	0x40110000
   1c568:	00023375 	.word	0x00023375
   1c56c:	00021509 	.word	0x00021509
   1c570:	00023f8d 	.word	0x00023f8d
   1c574:	00023875 	.word	0x00023875
   1c578:	000213a9 	.word	0x000213a9
   1c57c:	408f4000 	.word	0x408f4000
   1c580:	20001bd0 	.word	0x20001bd0

0001c584 <LORAWAN_TxDone>:
   1c584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c586:	6843      	ldr	r3, [r0, #4]
   1c588:	b091      	sub	sp, #68	; 0x44
   1c58a:	ae08      	add	r6, sp, #32
   1c58c:	7804      	ldrb	r4, [r0, #0]
   1c58e:	9302      	str	r3, [sp, #8]
   1c590:	2100      	movs	r1, #0
   1c592:	4b84      	ldr	r3, [pc, #528]	; (1c7a4 <LORAWAN_TxDone+0x220>)
   1c594:	0032      	movs	r2, r6
   1c596:	2028      	movs	r0, #40	; 0x28
   1c598:	4798      	blx	r3
   1c59a:	4d83      	ldr	r5, [pc, #524]	; (1c7a8 <LORAWAN_TxDone+0x224>)
   1c59c:	0029      	movs	r1, r5
   1c59e:	3184      	adds	r1, #132	; 0x84
   1c5a0:	780b      	ldrb	r3, [r1, #0]
   1c5a2:	2b7f      	cmp	r3, #127	; 0x7f
   1c5a4:	d900      	bls.n	1c5a8 <LORAWAN_TxDone+0x24>
   1c5a6:	e236      	b.n	1ca16 <LORAWAN_TxDone+0x492>
   1c5a8:	4a80      	ldr	r2, [pc, #512]	; (1c7ac <LORAWAN_TxDone+0x228>)
   1c5aa:	7810      	ldrb	r0, [r2, #0]
   1c5ac:	2804      	cmp	r0, #4
   1c5ae:	d10b      	bne.n	1c5c8 <LORAWAN_TxDone+0x44>
   1c5b0:	220e      	movs	r2, #14
   1c5b2:	4393      	bics	r3, r2
   1c5b4:	700b      	strb	r3, [r1, #0]
   1c5b6:	3017      	adds	r0, #23
   1c5b8:	07db      	lsls	r3, r3, #31
   1c5ba:	d500      	bpl.n	1c5be <LORAWAN_TxDone+0x3a>
   1c5bc:	e0b0      	b.n	1c720 <LORAWAN_TxDone+0x19c>
   1c5be:	201b      	movs	r0, #27
   1c5c0:	4b7b      	ldr	r3, [pc, #492]	; (1c7b0 <LORAWAN_TxDone+0x22c>)
   1c5c2:	4798      	blx	r3
   1c5c4:	b011      	add	sp, #68	; 0x44
   1c5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c5c8:	7813      	ldrb	r3, [r2, #0]
   1c5ca:	2b02      	cmp	r3, #2
   1c5cc:	d1fa      	bne.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c5ce:	4b79      	ldr	r3, [pc, #484]	; (1c7b4 <LORAWAN_TxDone+0x230>)
   1c5d0:	5cea      	ldrb	r2, [r5, r3]
   1c5d2:	2a00      	cmp	r2, #0
   1c5d4:	d005      	beq.n	1c5e2 <LORAWAN_TxDone+0x5e>
   1c5d6:	2200      	movs	r2, #0
   1c5d8:	4977      	ldr	r1, [pc, #476]	; (1c7b8 <LORAWAN_TxDone+0x234>)
   1c5da:	54ea      	strb	r2, [r5, r3]
   1c5dc:	200b      	movs	r0, #11
   1c5de:	4b77      	ldr	r3, [pc, #476]	; (1c7bc <LORAWAN_TxDone+0x238>)
   1c5e0:	4798      	blx	r3
   1c5e2:	2c07      	cmp	r4, #7
   1c5e4:	d000      	beq.n	1c5e8 <LORAWAN_TxDone+0x64>
   1c5e6:	e09f      	b.n	1c728 <LORAWAN_TxDone+0x1a4>
   1c5e8:	79f3      	ldrb	r3, [r6, #7]
   1c5ea:	2b00      	cmp	r3, #0
   1c5ec:	d0ea      	beq.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c5ee:	002b      	movs	r3, r5
   1c5f0:	3394      	adds	r3, #148	; 0x94
   1c5f2:	7818      	ldrb	r0, [r3, #0]
   1c5f4:	002f      	movs	r7, r5
   1c5f6:	2304      	movs	r3, #4
   1c5f8:	37fe      	adds	r7, #254	; 0xfe
   1c5fa:	4018      	ands	r0, r3
   1c5fc:	4e70      	ldr	r6, [pc, #448]	; (1c7c0 <LORAWAN_TxDone+0x23c>)
   1c5fe:	d005      	beq.n	1c60c <LORAWAN_TxDone+0x88>
   1c600:	2000      	movs	r0, #0
   1c602:	2109      	movs	r1, #9
   1c604:	8438      	strh	r0, [r7, #32]
   1c606:	47b0      	blx	r6
   1c608:	0020      	movs	r0, r4
   1c60a:	e7d9      	b.n	1c5c0 <LORAWAN_TxDone+0x3c>
   1c60c:	8c3b      	ldrh	r3, [r7, #32]
   1c60e:	2109      	movs	r1, #9
   1c610:	3301      	adds	r3, #1
   1c612:	843b      	strh	r3, [r7, #32]
   1c614:	47b0      	blx	r6
   1c616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   1c618:	4a6a      	ldr	r2, [pc, #424]	; (1c7c4 <LORAWAN_TxDone+0x240>)
   1c61a:	4293      	cmp	r3, r2
   1c61c:	d002      	beq.n	1c624 <LORAWAN_TxDone+0xa0>
   1c61e:	8c3a      	ldrh	r2, [r7, #32]
   1c620:	429a      	cmp	r2, r3
   1c622:	d265      	bcs.n	1c6f0 <LORAWAN_TxDone+0x16c>
   1c624:	4b68      	ldr	r3, [pc, #416]	; (1c7c8 <LORAWAN_TxDone+0x244>)
   1c626:	5ceb      	ldrb	r3, [r5, r3]
   1c628:	2b00      	cmp	r3, #0
   1c62a:	d061      	beq.n	1c6f0 <LORAWAN_TxDone+0x16c>
   1c62c:	2701      	movs	r7, #1
   1c62e:	002b      	movs	r3, r5
   1c630:	a906      	add	r1, sp, #24
   1c632:	700f      	strb	r7, [r1, #0]
   1c634:	33e9      	adds	r3, #233	; 0xe9
   1c636:	781b      	ldrb	r3, [r3, #0]
   1c638:	aa0c      	add	r2, sp, #48	; 0x30
   1c63a:	704b      	strb	r3, [r1, #1]
   1c63c:	002b      	movs	r3, r5
   1c63e:	33e7      	adds	r3, #231	; 0xe7
   1c640:	781b      	ldrb	r3, [r3, #0]
   1c642:	202e      	movs	r0, #46	; 0x2e
   1c644:	708b      	strb	r3, [r1, #2]
   1c646:	4b61      	ldr	r3, [pc, #388]	; (1c7cc <LORAWAN_TxDone+0x248>)
   1c648:	4798      	blx	r3
   1c64a:	2808      	cmp	r0, #8
   1c64c:	d135      	bne.n	1c6ba <LORAWAN_TxDone+0x136>
   1c64e:	a807      	add	r0, sp, #28
   1c650:	4b5f      	ldr	r3, [pc, #380]	; (1c7d0 <LORAWAN_TxDone+0x24c>)
   1c652:	7007      	strb	r7, [r0, #0]
   1c654:	4798      	blx	r3
   1c656:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c658:	990d      	ldr	r1, [sp, #52]	; 0x34
   1c65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c65c:	4b5d      	ldr	r3, [pc, #372]	; (1c7d4 <LORAWAN_TxDone+0x250>)
   1c65e:	4798      	blx	r3
   1c660:	002b      	movs	r3, r5
   1c662:	33ce      	adds	r3, #206	; 0xce
   1c664:	881b      	ldrh	r3, [r3, #0]
   1c666:	a80a      	add	r0, sp, #40	; 0x28
   1c668:	7003      	strb	r3, [r0, #0]
   1c66a:	4b5b      	ldr	r3, [pc, #364]	; (1c7d8 <LORAWAN_TxDone+0x254>)
   1c66c:	6043      	str	r3, [r0, #4]
   1c66e:	4b5b      	ldr	r3, [pc, #364]	; (1c7dc <LORAWAN_TxDone+0x258>)
   1c670:	4798      	blx	r3
   1c672:	1e04      	subs	r4, r0, #0
   1c674:	d108      	bne.n	1c688 <LORAWAN_TxDone+0x104>
   1c676:	220e      	movs	r2, #14
   1c678:	3584      	adds	r5, #132	; 0x84
   1c67a:	782b      	ldrb	r3, [r5, #0]
   1c67c:	4393      	bics	r3, r2
   1c67e:	001a      	movs	r2, r3
   1c680:	2302      	movs	r3, #2
   1c682:	4313      	orrs	r3, r2
   1c684:	702b      	strb	r3, [r5, #0]
   1c686:	e79d      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c688:	002b      	movs	r3, r5
   1c68a:	3394      	adds	r3, #148	; 0x94
   1c68c:	7818      	ldrb	r0, [r3, #0]
   1c68e:	002b      	movs	r3, r5
   1c690:	4038      	ands	r0, r7
   1c692:	33fe      	adds	r3, #254	; 0xfe
   1c694:	4f52      	ldr	r7, [pc, #328]	; (1c7e0 <LORAWAN_TxDone+0x25c>)
   1c696:	4d53      	ldr	r5, [pc, #332]	; (1c7e4 <LORAWAN_TxDone+0x260>)
   1c698:	2800      	cmp	r0, #0
   1c69a:	d009      	beq.n	1c6b0 <LORAWAN_TxDone+0x12c>
   1c69c:	2000      	movs	r0, #0
   1c69e:	2109      	movs	r1, #9
   1c6a0:	8418      	strh	r0, [r3, #32]
   1c6a2:	47b0      	blx	r6
   1c6a4:	4b50      	ldr	r3, [pc, #320]	; (1c7e8 <LORAWAN_TxDone+0x264>)
   1c6a6:	4798      	blx	r3
   1c6a8:	47a8      	blx	r5
   1c6aa:	0020      	movs	r0, r4
   1c6ac:	47b8      	blx	r7
   1c6ae:	e789      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c6b0:	2109      	movs	r1, #9
   1c6b2:	8418      	strh	r0, [r3, #32]
   1c6b4:	47b0      	blx	r6
   1c6b6:	4b4d      	ldr	r3, [pc, #308]	; (1c7ec <LORAWAN_TxDone+0x268>)
   1c6b8:	e7f5      	b.n	1c6a6 <LORAWAN_TxDone+0x122>
   1c6ba:	002b      	movs	r3, r5
   1c6bc:	3394      	adds	r3, #148	; 0x94
   1c6be:	7818      	ldrb	r0, [r3, #0]
   1c6c0:	002b      	movs	r3, r5
   1c6c2:	4007      	ands	r7, r0
   1c6c4:	4c46      	ldr	r4, [pc, #280]	; (1c7e0 <LORAWAN_TxDone+0x25c>)
   1c6c6:	33fe      	adds	r3, #254	; 0xfe
   1c6c8:	4d46      	ldr	r5, [pc, #280]	; (1c7e4 <LORAWAN_TxDone+0x260>)
   1c6ca:	2f00      	cmp	r7, #0
   1c6cc:	d00a      	beq.n	1c6e4 <LORAWAN_TxDone+0x160>
   1c6ce:	2700      	movs	r7, #0
   1c6d0:	2109      	movs	r1, #9
   1c6d2:	0038      	movs	r0, r7
   1c6d4:	841f      	strh	r7, [r3, #32]
   1c6d6:	47b0      	blx	r6
   1c6d8:	4b43      	ldr	r3, [pc, #268]	; (1c7e8 <LORAWAN_TxDone+0x264>)
   1c6da:	4798      	blx	r3
   1c6dc:	47a8      	blx	r5
   1c6de:	0038      	movs	r0, r7
   1c6e0:	47a0      	blx	r4
   1c6e2:	e76f      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c6e4:	2109      	movs	r1, #9
   1c6e6:	0038      	movs	r0, r7
   1c6e8:	841f      	strh	r7, [r3, #32]
   1c6ea:	47b0      	blx	r6
   1c6ec:	4b3f      	ldr	r3, [pc, #252]	; (1c7ec <LORAWAN_TxDone+0x268>)
   1c6ee:	e7f4      	b.n	1c6da <LORAWAN_TxDone+0x156>
   1c6f0:	002b      	movs	r3, r5
   1c6f2:	2000      	movs	r0, #0
   1c6f4:	33fe      	adds	r3, #254	; 0xfe
   1c6f6:	2109      	movs	r1, #9
   1c6f8:	8418      	strh	r0, [r3, #32]
   1c6fa:	47b0      	blx	r6
   1c6fc:	002a      	movs	r2, r5
   1c6fe:	210e      	movs	r1, #14
   1c700:	3284      	adds	r2, #132	; 0x84
   1c702:	7813      	ldrb	r3, [r2, #0]
   1c704:	3594      	adds	r5, #148	; 0x94
   1c706:	438b      	bics	r3, r1
   1c708:	7013      	strb	r3, [r2, #0]
   1c70a:	2220      	movs	r2, #32
   1c70c:	782b      	ldrb	r3, [r5, #0]
   1c70e:	4c35      	ldr	r4, [pc, #212]	; (1c7e4 <LORAWAN_TxDone+0x260>)
   1c710:	4393      	bics	r3, r2
   1c712:	702b      	strb	r3, [r5, #0]
   1c714:	07db      	lsls	r3, r3, #31
   1c716:	d505      	bpl.n	1c724 <LORAWAN_TxDone+0x1a0>
   1c718:	4b33      	ldr	r3, [pc, #204]	; (1c7e8 <LORAWAN_TxDone+0x264>)
   1c71a:	4798      	blx	r3
   1c71c:	47a0      	blx	r4
   1c71e:	2007      	movs	r0, #7
   1c720:	4b2f      	ldr	r3, [pc, #188]	; (1c7e0 <LORAWAN_TxDone+0x25c>)
   1c722:	e74e      	b.n	1c5c2 <LORAWAN_TxDone+0x3e>
   1c724:	4b31      	ldr	r3, [pc, #196]	; (1c7ec <LORAWAN_TxDone+0x268>)
   1c726:	e7f8      	b.n	1c71a <LORAWAN_TxDone+0x196>
   1c728:	2c00      	cmp	r4, #0
   1c72a:	d000      	beq.n	1c72e <LORAWAN_TxDone+0x1aa>
   1c72c:	e74a      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c72e:	002b      	movs	r3, r5
   1c730:	33fc      	adds	r3, #252	; 0xfc
   1c732:	68de      	ldr	r6, [r3, #12]
   1c734:	002b      	movs	r3, r5
   1c736:	33fe      	adds	r3, #254	; 0xfe
   1c738:	841c      	strh	r4, [r3, #32]
   1c73a:	0020      	movs	r0, r4
   1c73c:	2109      	movs	r1, #9
   1c73e:	4c20      	ldr	r4, [pc, #128]	; (1c7c0 <LORAWAN_TxDone+0x23c>)
   1c740:	47a0      	blx	r4
   1c742:	002b      	movs	r3, r5
   1c744:	33e3      	adds	r3, #227	; 0xe3
   1c746:	781b      	ldrb	r3, [r3, #0]
   1c748:	2b00      	cmp	r3, #0
   1c74a:	d151      	bne.n	1c7f0 <LORAWAN_TxDone+0x26c>
   1c74c:	002a      	movs	r2, r5
   1c74e:	32e4      	adds	r2, #228	; 0xe4
   1c750:	7812      	ldrb	r2, [r2, #0]
   1c752:	2a00      	cmp	r2, #0
   1c754:	d14c      	bne.n	1c7f0 <LORAWAN_TxDone+0x26c>
   1c756:	002b      	movs	r3, r5
   1c758:	3384      	adds	r3, #132	; 0x84
   1c75a:	781a      	ldrb	r2, [r3, #0]
   1c75c:	2301      	movs	r3, #1
   1c75e:	421a      	tst	r2, r3
   1c760:	d055      	beq.n	1c80e <LORAWAN_TxDone+0x28a>
   1c762:	0029      	movs	r1, r5
   1c764:	3188      	adds	r1, #136	; 0x88
   1c766:	680a      	ldr	r2, [r1, #0]
   1c768:	18d2      	adds	r2, r2, r3
   1c76a:	600a      	str	r2, [r1, #0]
   1c76c:	218b      	movs	r1, #139	; 0x8b
   1c76e:	0089      	lsls	r1, r1, #2
   1c770:	5c69      	ldrb	r1, [r5, r1]
   1c772:	2900      	cmp	r1, #0
   1c774:	d003      	beq.n	1c77e <LORAWAN_TxDone+0x1fa>
   1c776:	408b      	lsls	r3, r1
   1c778:	3b01      	subs	r3, #1
   1c77a:	421a      	tst	r2, r3
   1c77c:	d102      	bne.n	1c784 <LORAWAN_TxDone+0x200>
   1c77e:	2115      	movs	r1, #21
   1c780:	2000      	movs	r0, #0
   1c782:	47a0      	blx	r4
   1c784:	7833      	ldrb	r3, [r6, #0]
   1c786:	002a      	movs	r2, r5
   1c788:	2b01      	cmp	r3, #1
   1c78a:	d106      	bne.n	1c79a <LORAWAN_TxDone+0x216>
   1c78c:	3294      	adds	r2, #148	; 0x94
   1c78e:	7811      	ldrb	r1, [r2, #0]
   1c790:	430b      	orrs	r3, r1
   1c792:	7013      	strb	r3, [r2, #0]
   1c794:	002a      	movs	r2, r5
   1c796:	32e4      	adds	r2, #228	; 0xe4
   1c798:	e000      	b.n	1c79c <LORAWAN_TxDone+0x218>
   1c79a:	32e3      	adds	r2, #227	; 0xe3
   1c79c:	7813      	ldrb	r3, [r2, #0]
   1c79e:	3301      	adds	r3, #1
   1c7a0:	e034      	b.n	1c80c <LORAWAN_TxDone+0x288>
   1c7a2:	46c0      	nop			; (mov r8, r8)
   1c7a4:	0001bfa1 	.word	0x0001bfa1
   1c7a8:	20001bd0 	.word	0x20001bd0
   1c7ac:	20001e18 	.word	0x20001e18
   1c7b0:	0001b209 	.word	0x0001b209
   1c7b4:	00000222 	.word	0x00000222
   1c7b8:	20001df1 	.word	0x20001df1
   1c7bc:	0001f5e1 	.word	0x0001f5e1
   1c7c0:	00013b45 	.word	0x00013b45
   1c7c4:	0000ffff 	.word	0x0000ffff
   1c7c8:	0000022a 	.word	0x0000022a
   1c7cc:	0000d595 	.word	0x0000d595
   1c7d0:	00020895 	.word	0x00020895
   1c7d4:	0001b7bd 	.word	0x0001b7bd
   1c7d8:	20001e29 	.word	0x20001e29
   1c7dc:	0001ff11 	.word	0x0001ff11
   1c7e0:	0001bd55 	.word	0x0001bd55
   1c7e4:	0001a6b1 	.word	0x0001a6b1
   1c7e8:	0001b1b5 	.word	0x0001b1b5
   1c7ec:	0001b1e5 	.word	0x0001b1e5
   1c7f0:	002a      	movs	r2, r5
   1c7f2:	3284      	adds	r2, #132	; 0x84
   1c7f4:	7811      	ldrb	r1, [r2, #0]
   1c7f6:	2201      	movs	r2, #1
   1c7f8:	4211      	tst	r1, r2
   1c7fa:	d008      	beq.n	1c80e <LORAWAN_TxDone+0x28a>
   1c7fc:	0029      	movs	r1, r5
   1c7fe:	3194      	adds	r1, #148	; 0x94
   1c800:	7809      	ldrb	r1, [r1, #0]
   1c802:	4211      	tst	r1, r2
   1c804:	d1c6      	bne.n	1c794 <LORAWAN_TxDone+0x210>
   1c806:	189b      	adds	r3, r3, r2
   1c808:	002a      	movs	r2, r5
   1c80a:	32e3      	adds	r2, #227	; 0xe3
   1c80c:	7013      	strb	r3, [r2, #0]
   1c80e:	002b      	movs	r3, r5
   1c810:	2200      	movs	r2, #0
   1c812:	33f9      	adds	r3, #249	; 0xf9
   1c814:	701a      	strb	r2, [r3, #0]
   1c816:	002a      	movs	r2, r5
   1c818:	210e      	movs	r1, #14
   1c81a:	2604      	movs	r6, #4
   1c81c:	3284      	adds	r2, #132	; 0x84
   1c81e:	7813      	ldrb	r3, [r2, #0]
   1c820:	002f      	movs	r7, r5
   1c822:	438b      	bics	r3, r1
   1c824:	4333      	orrs	r3, r6
   1c826:	7013      	strb	r3, [r2, #0]
   1c828:	002b      	movs	r3, r5
   1c82a:	33e7      	adds	r3, #231	; 0xe7
   1c82c:	781b      	ldrb	r3, [r3, #0]
   1c82e:	a907      	add	r1, sp, #28
   1c830:	708b      	strb	r3, [r1, #2]
   1c832:	002b      	movs	r3, r5
   1c834:	33f7      	adds	r3, #247	; 0xf7
   1c836:	781b      	ldrb	r3, [r3, #0]
   1c838:	3794      	adds	r7, #148	; 0x94
   1c83a:	704b      	strb	r3, [r1, #1]
   1c83c:	783b      	ldrb	r3, [r7, #0]
   1c83e:	ac0a      	add	r4, sp, #40	; 0x28
   1c840:	075b      	lsls	r3, r3, #29
   1c842:	0fdb      	lsrs	r3, r3, #31
   1c844:	700b      	strb	r3, [r1, #0]
   1c846:	0022      	movs	r2, r4
   1c848:	4b83      	ldr	r3, [pc, #524]	; (1ca58 <LORAWAN_TxDone+0x4d4>)
   1c84a:	2019      	movs	r0, #25
   1c84c:	4798      	blx	r3
   1c84e:	783b      	ldrb	r3, [r7, #0]
   1c850:	4233      	tst	r3, r6
   1c852:	d100      	bne.n	1c856 <LORAWAN_TxDone+0x2d2>
   1c854:	e0a4      	b.n	1c9a0 <LORAWAN_TxDone+0x41c>
   1c856:	2300      	movs	r3, #0
   1c858:	af0c      	add	r7, sp, #48	; 0x30
   1c85a:	703b      	strb	r3, [r7, #0]
   1c85c:	003a      	movs	r2, r7
   1c85e:	2100      	movs	r1, #0
   1c860:	2009      	movs	r0, #9
   1c862:	4b7d      	ldr	r3, [pc, #500]	; (1ca58 <LORAWAN_TxDone+0x4d4>)
   1c864:	4798      	blx	r3
   1c866:	0039      	movs	r1, r7
   1c868:	aa06      	add	r2, sp, #24
   1c86a:	0030      	movs	r0, r6
   1c86c:	4b7a      	ldr	r3, [pc, #488]	; (1ca58 <LORAWAN_TxDone+0x4d4>)
   1c86e:	4798      	blx	r3
   1c870:	0029      	movs	r1, r5
   1c872:	7923      	ldrb	r3, [r4, #4]
   1c874:	3169      	adds	r1, #105	; 0x69
   1c876:	700b      	strb	r3, [r1, #0]
   1c878:	002b      	movs	r3, r5
   1c87a:	270f      	movs	r7, #15
   1c87c:	7822      	ldrb	r2, [r4, #0]
   1c87e:	3365      	adds	r3, #101	; 0x65
   1c880:	701a      	strb	r2, [r3, #0]
   1c882:	7862      	ldrb	r2, [r4, #1]
   1c884:	2004      	movs	r0, #4
   1c886:	705a      	strb	r2, [r3, #1]
   1c888:	78a2      	ldrb	r2, [r4, #2]
   1c88a:	2600      	movs	r6, #0
   1c88c:	709a      	strb	r2, [r3, #2]
   1c88e:	78e2      	ldrb	r2, [r4, #3]
   1c890:	2404      	movs	r4, #4
   1c892:	70da      	strb	r2, [r3, #3]
   1c894:	ab02      	add	r3, sp, #8
   1c896:	18ff      	adds	r7, r7, r3
   1c898:	003a      	movs	r2, r7
   1c89a:	4b6f      	ldr	r3, [pc, #444]	; (1ca58 <LORAWAN_TxDone+0x4d4>)
   1c89c:	4798      	blx	r3
   1c89e:	002b      	movs	r3, r5
   1c8a0:	3394      	adds	r3, #148	; 0x94
   1c8a2:	781a      	ldrb	r2, [r3, #0]
   1c8a4:	2300      	movs	r3, #0
   1c8a6:	4014      	ands	r4, r2
   1c8a8:	56fb      	ldrsb	r3, [r7, r3]
   1c8aa:	002a      	movs	r2, r5
   1c8ac:	42b4      	cmp	r4, r6
   1c8ae:	d07a      	beq.n	1c9a6 <LORAWAN_TxDone+0x422>
   1c8b0:	a902      	add	r1, sp, #8
   1c8b2:	7c09      	ldrb	r1, [r1, #16]
   1c8b4:	32d6      	adds	r2, #214	; 0xd6
   1c8b6:	8812      	ldrh	r2, [r2, #0]
   1c8b8:	b249      	sxtb	r1, r1
   1c8ba:	1852      	adds	r2, r2, r1
   1c8bc:	9203      	str	r2, [sp, #12]
   1c8be:	002a      	movs	r2, r5
   1c8c0:	32d4      	adds	r2, #212	; 0xd4
   1c8c2:	8811      	ldrh	r1, [r2, #0]
   1c8c4:	24fa      	movs	r4, #250	; 0xfa
   1c8c6:	18c9      	adds	r1, r1, r3
   1c8c8:	4b64      	ldr	r3, [pc, #400]	; (1ca5c <LORAWAN_TxDone+0x4d8>)
   1c8ca:	00a4      	lsls	r4, r4, #2
   1c8cc:	5ceb      	ldrb	r3, [r5, r3]
   1c8ce:	0032      	movs	r2, r6
   1c8d0:	1ac9      	subs	r1, r1, r3
   1c8d2:	002b      	movs	r3, r5
   1c8d4:	33eb      	adds	r3, #235	; 0xeb
   1c8d6:	7818      	ldrb	r0, [r3, #0]
   1c8d8:	4361      	muls	r1, r4
   1c8da:	4b61      	ldr	r3, [pc, #388]	; (1ca60 <LORAWAN_TxDone+0x4dc>)
   1c8dc:	4f61      	ldr	r7, [pc, #388]	; (1ca64 <LORAWAN_TxDone+0x4e0>)
   1c8de:	9600      	str	r6, [sp, #0]
   1c8e0:	47b8      	blx	r7
   1c8e2:	4b5e      	ldr	r3, [pc, #376]	; (1ca5c <LORAWAN_TxDone+0x4d8>)
   1c8e4:	0032      	movs	r2, r6
   1c8e6:	5ce9      	ldrb	r1, [r5, r3]
   1c8e8:	9b03      	ldr	r3, [sp, #12]
   1c8ea:	1a59      	subs	r1, r3, r1
   1c8ec:	002b      	movs	r3, r5
   1c8ee:	33ec      	adds	r3, #236	; 0xec
   1c8f0:	7818      	ldrb	r0, [r3, #0]
   1c8f2:	4361      	muls	r1, r4
   1c8f4:	4b5c      	ldr	r3, [pc, #368]	; (1ca68 <LORAWAN_TxDone+0x4e4>)
   1c8f6:	9600      	str	r6, [sp, #0]
   1c8f8:	47b8      	blx	r7
   1c8fa:	002b      	movs	r3, r5
   1c8fc:	33ff      	adds	r3, #255	; 0xff
   1c8fe:	7f5b      	ldrb	r3, [r3, #29]
   1c900:	069b      	lsls	r3, r3, #26
   1c902:	d521      	bpl.n	1c948 <LORAWAN_TxDone+0x3c4>
   1c904:	9b02      	ldr	r3, [sp, #8]
   1c906:	ac0c      	add	r4, sp, #48	; 0x30
   1c908:	67eb      	str	r3, [r5, #124]	; 0x7c
   1c90a:	002b      	movs	r3, r5
   1c90c:	3380      	adds	r3, #128	; 0x80
   1c90e:	781b      	ldrb	r3, [r3, #0]
   1c910:	4f56      	ldr	r7, [pc, #344]	; (1ca6c <LORAWAN_TxDone+0x4e8>)
   1c912:	42b3      	cmp	r3, r6
   1c914:	d010      	beq.n	1c938 <LORAWAN_TxDone+0x3b4>
   1c916:	6f6e      	ldr	r6, [r5, #116]	; 0x74
   1c918:	6fab      	ldr	r3, [r5, #120]	; 0x78
   1c91a:	431e      	orrs	r6, r3
   1c91c:	d10c      	bne.n	1c938 <LORAWAN_TxDone+0x3b4>
   1c91e:	2301      	movs	r3, #1
   1c920:	0021      	movs	r1, r4
   1c922:	2021      	movs	r0, #33	; 0x21
   1c924:	7023      	strb	r3, [r4, #0]
   1c926:	47b8      	blx	r7
   1c928:	4b51      	ldr	r3, [pc, #324]	; (1ca70 <LORAWAN_TxDone+0x4ec>)
   1c92a:	4798      	blx	r3
   1c92c:	0033      	movs	r3, r6
   1c92e:	9a02      	ldr	r2, [sp, #8]
   1c930:	1a80      	subs	r0, r0, r2
   1c932:	4199      	sbcs	r1, r3
   1c934:	6768      	str	r0, [r5, #116]	; 0x74
   1c936:	67a9      	str	r1, [r5, #120]	; 0x78
   1c938:	4b4e      	ldr	r3, [pc, #312]	; (1ca74 <LORAWAN_TxDone+0x4f0>)
   1c93a:	0021      	movs	r1, r4
   1c93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   1c93e:	2020      	movs	r0, #32
   1c940:	930c      	str	r3, [sp, #48]	; 0x30
   1c942:	2301      	movs	r3, #1
   1c944:	7123      	strb	r3, [r4, #4]
   1c946:	47b8      	blx	r7
   1c948:	4c4a      	ldr	r4, [pc, #296]	; (1ca74 <LORAWAN_TxDone+0x4f0>)
   1c94a:	2102      	movs	r1, #2
   1c94c:	0023      	movs	r3, r4
   1c94e:	33ff      	adds	r3, #255	; 0xff
   1c950:	7f5b      	ldrb	r3, [r3, #29]
   1c952:	4019      	ands	r1, r3
   1c954:	d05b      	beq.n	1ca0e <LORAWAN_TxDone+0x48a>
   1c956:	466b      	mov	r3, sp
   1c958:	891b      	ldrh	r3, [r3, #8]
   1c95a:	a90c      	add	r1, sp, #48	; 0x30
   1c95c:	800b      	strh	r3, [r1, #0]
   1c95e:	0023      	movs	r3, r4
   1c960:	3394      	adds	r3, #148	; 0x94
   1c962:	781b      	ldrb	r3, [r3, #0]
   1c964:	201f      	movs	r0, #31
   1c966:	075b      	lsls	r3, r3, #29
   1c968:	0fdb      	lsrs	r3, r3, #31
   1c96a:	710b      	strb	r3, [r1, #4]
   1c96c:	0023      	movs	r3, r4
   1c96e:	3398      	adds	r3, #152	; 0x98
   1c970:	781a      	ldrb	r2, [r3, #0]
   1c972:	2301      	movs	r3, #1
   1c974:	4093      	lsls	r3, r2
   1c976:	804b      	strh	r3, [r1, #2]
   1c978:	4b3c      	ldr	r3, [pc, #240]	; (1ca6c <LORAWAN_TxDone+0x4e8>)
   1c97a:	4798      	blx	r3
   1c97c:	258c      	movs	r5, #140	; 0x8c
   1c97e:	00ad      	lsls	r5, r5, #2
   1c980:	5d63      	ldrb	r3, [r4, r5]
   1c982:	2b00      	cmp	r3, #0
   1c984:	d100      	bne.n	1c988 <LORAWAN_TxDone+0x404>
   1c986:	e61d      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c988:	4b39      	ldr	r3, [pc, #228]	; (1ca70 <LORAWAN_TxDone+0x4ec>)
   1c98a:	4798      	blx	r3
   1c98c:	2300      	movs	r3, #0
   1c98e:	900c      	str	r0, [sp, #48]	; 0x30
   1c990:	910d      	str	r1, [sp, #52]	; 0x34
   1c992:	5563      	strb	r3, [r4, r5]
   1c994:	4b38      	ldr	r3, [pc, #224]	; (1ca78 <LORAWAN_TxDone+0x4f4>)
   1c996:	a90c      	add	r1, sp, #48	; 0x30
   1c998:	5ce0      	ldrb	r0, [r4, r3]
   1c99a:	4b38      	ldr	r3, [pc, #224]	; (1ca7c <LORAWAN_TxDone+0x4f8>)
   1c99c:	4798      	blx	r3
   1c99e:	e611      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1c9a0:	aa06      	add	r2, sp, #24
   1c9a2:	4937      	ldr	r1, [pc, #220]	; (1ca80 <LORAWAN_TxDone+0x4fc>)
   1c9a4:	e761      	b.n	1c86a <LORAWAN_TxDone+0x2e6>
   1c9a6:	2110      	movs	r1, #16
   1c9a8:	32d2      	adds	r2, #210	; 0xd2
   1c9aa:	8817      	ldrh	r7, [r2, #0]
   1c9ac:	aa02      	add	r2, sp, #8
   1c9ae:	5651      	ldrsb	r1, [r2, r1]
   1c9b0:	4e2c      	ldr	r6, [pc, #176]	; (1ca64 <LORAWAN_TxDone+0x4e0>)
   1c9b2:	187a      	adds	r2, r7, r1
   1c9b4:	9203      	str	r2, [sp, #12]
   1c9b6:	002a      	movs	r2, r5
   1c9b8:	32d0      	adds	r2, #208	; 0xd0
   1c9ba:	8811      	ldrh	r1, [r2, #0]
   1c9bc:	27fa      	movs	r7, #250	; 0xfa
   1c9be:	18c9      	adds	r1, r1, r3
   1c9c0:	4b26      	ldr	r3, [pc, #152]	; (1ca5c <LORAWAN_TxDone+0x4d8>)
   1c9c2:	00bf      	lsls	r7, r7, #2
   1c9c4:	5ceb      	ldrb	r3, [r5, r3]
   1c9c6:	0022      	movs	r2, r4
   1c9c8:	1ac9      	subs	r1, r1, r3
   1c9ca:	002b      	movs	r3, r5
   1c9cc:	33ed      	adds	r3, #237	; 0xed
   1c9ce:	7818      	ldrb	r0, [r3, #0]
   1c9d0:	4379      	muls	r1, r7
   1c9d2:	4b23      	ldr	r3, [pc, #140]	; (1ca60 <LORAWAN_TxDone+0x4dc>)
   1c9d4:	9400      	str	r4, [sp, #0]
   1c9d6:	47b0      	blx	r6
   1c9d8:	4b20      	ldr	r3, [pc, #128]	; (1ca5c <LORAWAN_TxDone+0x4d8>)
   1c9da:	0022      	movs	r2, r4
   1c9dc:	5ce9      	ldrb	r1, [r5, r3]
   1c9de:	9b03      	ldr	r3, [sp, #12]
   1c9e0:	1a59      	subs	r1, r3, r1
   1c9e2:	002b      	movs	r3, r5
   1c9e4:	33ee      	adds	r3, #238	; 0xee
   1c9e6:	7818      	ldrb	r0, [r3, #0]
   1c9e8:	4379      	muls	r1, r7
   1c9ea:	4b1f      	ldr	r3, [pc, #124]	; (1ca68 <LORAWAN_TxDone+0x4e4>)
   1c9ec:	9400      	str	r4, [sp, #0]
   1c9ee:	47b0      	blx	r6
   1c9f0:	002b      	movs	r3, r5
   1c9f2:	33fd      	adds	r3, #253	; 0xfd
   1c9f4:	781b      	ldrb	r3, [r3, #0]
   1c9f6:	2b04      	cmp	r3, #4
   1c9f8:	d1a6      	bne.n	1c948 <LORAWAN_TxDone+0x3c4>
   1c9fa:	2390      	movs	r3, #144	; 0x90
   1c9fc:	2201      	movs	r2, #1
   1c9fe:	2010      	movs	r0, #16
   1ca00:	009b      	lsls	r3, r3, #2
   1ca02:	54ea      	strb	r2, [r5, r3]
   1ca04:	ab02      	add	r3, sp, #8
   1ca06:	5618      	ldrsb	r0, [r3, r0]
   1ca08:	4b1e      	ldr	r3, [pc, #120]	; (1ca84 <LORAWAN_TxDone+0x500>)
   1ca0a:	4798      	blx	r3
   1ca0c:	e79c      	b.n	1c948 <LORAWAN_TxDone+0x3c4>
   1ca0e:	075b      	lsls	r3, r3, #29
   1ca10:	d5b4      	bpl.n	1c97c <LORAWAN_TxDone+0x3f8>
   1ca12:	2022      	movs	r0, #34	; 0x22
   1ca14:	e7b0      	b.n	1c978 <LORAWAN_TxDone+0x3f4>
   1ca16:	491c      	ldr	r1, [pc, #112]	; (1ca88 <LORAWAN_TxDone+0x504>)
   1ca18:	784a      	ldrb	r2, [r1, #1]
   1ca1a:	780b      	ldrb	r3, [r1, #0]
   1ca1c:	0212      	lsls	r2, r2, #8
   1ca1e:	431a      	orrs	r2, r3
   1ca20:	788b      	ldrb	r3, [r1, #2]
   1ca22:	041b      	lsls	r3, r3, #16
   1ca24:	431a      	orrs	r2, r3
   1ca26:	78cb      	ldrb	r3, [r1, #3]
   1ca28:	061b      	lsls	r3, r3, #24
   1ca2a:	4313      	orrs	r3, r2
   1ca2c:	d100      	bne.n	1ca30 <LORAWAN_TxDone+0x4ac>
   1ca2e:	e5c9      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1ca30:	4a16      	ldr	r2, [pc, #88]	; (1ca8c <LORAWAN_TxDone+0x508>)
   1ca32:	7811      	ldrb	r1, [r2, #0]
   1ca34:	221c      	movs	r2, #28
   1ca36:	2904      	cmp	r1, #4
   1ca38:	d003      	beq.n	1ca42 <LORAWAN_TxDone+0x4be>
   1ca3a:	2200      	movs	r2, #0
   1ca3c:	2c07      	cmp	r4, #7
   1ca3e:	d100      	bne.n	1ca42 <LORAWAN_TxDone+0x4be>
   1ca40:	0022      	movs	r2, r4
   1ca42:	0029      	movs	r1, r5
   1ca44:	2004      	movs	r0, #4
   1ca46:	31ff      	adds	r1, #255	; 0xff
   1ca48:	35fc      	adds	r5, #252	; 0xfc
   1ca4a:	7348      	strb	r0, [r1, #13]
   1ca4c:	744a      	strb	r2, [r1, #17]
   1ca4e:	68e8      	ldr	r0, [r5, #12]
   1ca50:	490f      	ldr	r1, [pc, #60]	; (1ca90 <LORAWAN_TxDone+0x50c>)
   1ca52:	4798      	blx	r3
   1ca54:	e5b6      	b.n	1c5c4 <LORAWAN_TxDone+0x40>
   1ca56:	46c0      	nop			; (mov r8, r8)
   1ca58:	0000d595 	.word	0x0000d595
   1ca5c:	0000022b 	.word	0x0000022b
   1ca60:	0001b73d 	.word	0x0001b73d
   1ca64:	000159bd 	.word	0x000159bd
   1ca68:	0001ce01 	.word	0x0001ce01
   1ca6c:	0000d639 	.word	0x0000d639
   1ca70:	0001594d 	.word	0x0001594d
   1ca74:	20001bd0 	.word	0x20001bd0
   1ca78:	00000231 	.word	0x00000231
   1ca7c:	000161d9 	.word	0x000161d9
   1ca80:	20001c3e 	.word	0x20001c3e
   1ca84:	0001ec59 	.word	0x0001ec59
   1ca88:	20001f2c 	.word	0x20001f2c
   1ca8c:	20001e18 	.word	0x20001e18
   1ca90:	20001cdc 	.word	0x20001cdc

0001ca94 <radioCallback>:
   1ca94:	4b10      	ldr	r3, [pc, #64]	; (1cad8 <radioCallback+0x44>)
   1ca96:	b510      	push	{r4, lr}
   1ca98:	7018      	strb	r0, [r3, #0]
   1ca9a:	3801      	subs	r0, #1
   1ca9c:	b2c0      	uxtb	r0, r0
   1ca9e:	000c      	movs	r4, r1
   1caa0:	281f      	cmp	r0, #31
   1caa2:	d809      	bhi.n	1cab8 <radioCallback+0x24>
   1caa4:	2301      	movs	r3, #1
   1caa6:	4083      	lsls	r3, r0
   1caa8:	4a0c      	ldr	r2, [pc, #48]	; (1cadc <radioCallback+0x48>)
   1caaa:	4213      	tst	r3, r2
   1caac:	d109      	bne.n	1cac2 <radioCallback+0x2e>
   1caae:	220a      	movs	r2, #10
   1cab0:	4213      	tst	r3, r2
   1cab2:	d102      	bne.n	1caba <radioCallback+0x26>
   1cab4:	2b00      	cmp	r3, #0
   1cab6:	db08      	blt.n	1caca <radioCallback+0x36>
   1cab8:	bd10      	pop	{r4, pc}
   1caba:	0008      	movs	r0, r1
   1cabc:	4b08      	ldr	r3, [pc, #32]	; (1cae0 <radioCallback+0x4c>)
   1cabe:	4798      	blx	r3
   1cac0:	e7fa      	b.n	1cab8 <radioCallback+0x24>
   1cac2:	2002      	movs	r0, #2
   1cac4:	4b07      	ldr	r3, [pc, #28]	; (1cae4 <radioCallback+0x50>)
   1cac6:	4798      	blx	r3
   1cac8:	e7f6      	b.n	1cab8 <radioCallback+0x24>
   1caca:	4b07      	ldr	r3, [pc, #28]	; (1cae8 <radioCallback+0x54>)
   1cacc:	681b      	ldr	r3, [r3, #0]
   1cace:	2b00      	cmp	r3, #0
   1cad0:	d0f2      	beq.n	1cab8 <radioCallback+0x24>
   1cad2:	4798      	blx	r3
   1cad4:	6020      	str	r0, [r4, #0]
   1cad6:	e7ef      	b.n	1cab8 <radioCallback+0x24>
   1cad8:	20001e18 	.word	0x20001e18
   1cadc:	00008081 	.word	0x00008081
   1cae0:	0001c585 	.word	0x0001c585
   1cae4:	0001f46d 	.word	0x0001f46d
   1cae8:	20001f28 	.word	0x20001f28

0001caec <LorawanCheckAndDoRetryOnTimeout>:
   1caec:	b513      	push	{r0, r1, r4, lr}
   1caee:	4c33      	ldr	r4, [pc, #204]	; (1cbbc <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   1caf0:	0023      	movs	r3, r4
   1caf2:	3394      	adds	r3, #148	; 0x94
   1caf4:	781b      	ldrb	r3, [r3, #0]
   1caf6:	0022      	movs	r2, r4
   1caf8:	07db      	lsls	r3, r3, #31
   1cafa:	d54b      	bpl.n	1cb94 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   1cafc:	0023      	movs	r3, r4
   1cafe:	32e4      	adds	r2, #228	; 0xe4
   1cb00:	33e2      	adds	r3, #226	; 0xe2
   1cb02:	7812      	ldrb	r2, [r2, #0]
   1cb04:	781b      	ldrb	r3, [r3, #0]
   1cb06:	429a      	cmp	r2, r3
   1cb08:	d836      	bhi.n	1cb78 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1cb0a:	4b2d      	ldr	r3, [pc, #180]	; (1cbc0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   1cb0c:	5ce3      	ldrb	r3, [r4, r3]
   1cb0e:	2b00      	cmp	r3, #0
   1cb10:	d032      	beq.n	1cb78 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   1cb12:	0023      	movs	r3, r4
   1cb14:	33fd      	adds	r3, #253	; 0xfd
   1cb16:	781b      	ldrb	r3, [r3, #0]
   1cb18:	2b01      	cmp	r3, #1
   1cb1a:	d119      	bne.n	1cb50 <LorawanCheckAndDoRetryOnTimeout+0x64>
   1cb1c:	0021      	movs	r1, r4
   1cb1e:	220e      	movs	r2, #14
   1cb20:	3184      	adds	r1, #132	; 0x84
   1cb22:	780b      	ldrb	r3, [r1, #0]
   1cb24:	4393      	bics	r3, r2
   1cb26:	001a      	movs	r2, r3
   1cb28:	230c      	movs	r3, #12
   1cb2a:	4313      	orrs	r3, r2
   1cb2c:	700b      	strb	r3, [r1, #0]
   1cb2e:	0023      	movs	r3, r4
   1cb30:	33da      	adds	r3, #218	; 0xda
   1cb32:	8819      	ldrh	r1, [r3, #0]
   1cb34:	4b23      	ldr	r3, [pc, #140]	; (1cbc4 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   1cb36:	2200      	movs	r2, #0
   1cb38:	5ce3      	ldrb	r3, [r4, r3]
   1cb3a:	34f1      	adds	r4, #241	; 0xf1
   1cb3c:	1acb      	subs	r3, r1, r3
   1cb3e:	21fa      	movs	r1, #250	; 0xfa
   1cb40:	0089      	lsls	r1, r1, #2
   1cb42:	7820      	ldrb	r0, [r4, #0]
   1cb44:	4359      	muls	r1, r3
   1cb46:	9200      	str	r2, [sp, #0]
   1cb48:	4b1f      	ldr	r3, [pc, #124]	; (1cbc8 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   1cb4a:	4c20      	ldr	r4, [pc, #128]	; (1cbcc <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   1cb4c:	47a0      	blx	r4
   1cb4e:	bd13      	pop	{r0, r1, r4, pc}
   1cb50:	2b04      	cmp	r3, #4
   1cb52:	d1fc      	bne.n	1cb4e <LorawanCheckAndDoRetryOnTimeout+0x62>
   1cb54:	4b1e      	ldr	r3, [pc, #120]	; (1cbd0 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   1cb56:	4798      	blx	r3
   1cb58:	34ce      	adds	r4, #206	; 0xce
   1cb5a:	300d      	adds	r0, #13
   1cb5c:	8823      	ldrh	r3, [r4, #0]
   1cb5e:	b280      	uxth	r0, r0
   1cb60:	4283      	cmp	r3, r0
   1cb62:	d802      	bhi.n	1cb6a <LorawanCheckAndDoRetryOnTimeout+0x7e>
   1cb64:	4b1b      	ldr	r3, [pc, #108]	; (1cbd4 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   1cb66:	4798      	blx	r3
   1cb68:	e7f1      	b.n	1cb4e <LorawanCheckAndDoRetryOnTimeout+0x62>
   1cb6a:	200e      	movs	r0, #14
   1cb6c:	4b1a      	ldr	r3, [pc, #104]	; (1cbd8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1cb6e:	4798      	blx	r3
   1cb70:	4b1a      	ldr	r3, [pc, #104]	; (1cbdc <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1cb72:	4798      	blx	r3
   1cb74:	4b1a      	ldr	r3, [pc, #104]	; (1cbe0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1cb76:	e7f6      	b.n	1cb66 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   1cb78:	2012      	movs	r0, #18
   1cb7a:	4b17      	ldr	r3, [pc, #92]	; (1cbd8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1cb7c:	4798      	blx	r3
   1cb7e:	4b17      	ldr	r3, [pc, #92]	; (1cbdc <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1cb80:	4798      	blx	r3
   1cb82:	34fd      	adds	r4, #253	; 0xfd
   1cb84:	4b16      	ldr	r3, [pc, #88]	; (1cbe0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1cb86:	4798      	blx	r3
   1cb88:	7823      	ldrb	r3, [r4, #0]
   1cb8a:	2b04      	cmp	r3, #4
   1cb8c:	d1df      	bne.n	1cb4e <LorawanCheckAndDoRetryOnTimeout+0x62>
   1cb8e:	4b15      	ldr	r3, [pc, #84]	; (1cbe4 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   1cb90:	4798      	blx	r3
   1cb92:	e7dc      	b.n	1cb4e <LorawanCheckAndDoRetryOnTimeout+0x62>
   1cb94:	0023      	movs	r3, r4
   1cb96:	32e3      	adds	r2, #227	; 0xe3
   1cb98:	33e1      	adds	r3, #225	; 0xe1
   1cb9a:	7812      	ldrb	r2, [r2, #0]
   1cb9c:	781b      	ldrb	r3, [r3, #0]
   1cb9e:	429a      	cmp	r2, r3
   1cba0:	d803      	bhi.n	1cbaa <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1cba2:	4b07      	ldr	r3, [pc, #28]	; (1cbc0 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   1cba4:	5ce3      	ldrb	r3, [r4, r3]
   1cba6:	2b00      	cmp	r3, #0
   1cba8:	d1dc      	bne.n	1cb64 <LorawanCheckAndDoRetryOnTimeout+0x78>
   1cbaa:	4b0f      	ldr	r3, [pc, #60]	; (1cbe8 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   1cbac:	4798      	blx	r3
   1cbae:	4b0c      	ldr	r3, [pc, #48]	; (1cbe0 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1cbb0:	4798      	blx	r3
   1cbb2:	2008      	movs	r0, #8
   1cbb4:	4b08      	ldr	r3, [pc, #32]	; (1cbd8 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1cbb6:	4798      	blx	r3
   1cbb8:	e7c9      	b.n	1cb4e <LorawanCheckAndDoRetryOnTimeout+0x62>
   1cbba:	46c0      	nop			; (mov r8, r8)
   1cbbc:	20001bd0 	.word	0x20001bd0
   1cbc0:	0000022a 	.word	0x0000022a
   1cbc4:	0000022b 	.word	0x0000022b
   1cbc8:	0001cbed 	.word	0x0001cbed
   1cbcc:	000159bd 	.word	0x000159bd
   1cbd0:	0001a79d 	.word	0x0001a79d
   1cbd4:	0001b82d 	.word	0x0001b82d
   1cbd8:	0001bd55 	.word	0x0001bd55
   1cbdc:	0001b1b5 	.word	0x0001b1b5
   1cbe0:	0001a6b1 	.word	0x0001a6b1
   1cbe4:	0001fef5 	.word	0x0001fef5
   1cbe8:	0001b1e5 	.word	0x0001b1e5

0001cbec <AckRetransmissionCallback>:
   1cbec:	b510      	push	{r4, lr}
   1cbee:	4c1c      	ldr	r4, [pc, #112]	; (1cc60 <AckRetransmissionCallback+0x74>)
   1cbf0:	0023      	movs	r3, r4
   1cbf2:	3384      	adds	r3, #132	; 0x84
   1cbf4:	781b      	ldrb	r3, [r3, #0]
   1cbf6:	2b7f      	cmp	r3, #127	; 0x7f
   1cbf8:	d82d      	bhi.n	1cc56 <AckRetransmissionCallback+0x6a>
   1cbfa:	0023      	movs	r3, r4
   1cbfc:	33fd      	adds	r3, #253	; 0xfd
   1cbfe:	781b      	ldrb	r3, [r3, #0]
   1cc00:	2b04      	cmp	r3, #4
   1cc02:	d102      	bne.n	1cc0a <AckRetransmissionCallback+0x1e>
   1cc04:	4b17      	ldr	r3, [pc, #92]	; (1cc64 <AckRetransmissionCallback+0x78>)
   1cc06:	4798      	blx	r3
   1cc08:	e01e      	b.n	1cc48 <AckRetransmissionCallback+0x5c>
   1cc0a:	2b01      	cmp	r3, #1
   1cc0c:	d11c      	bne.n	1cc48 <AckRetransmissionCallback+0x5c>
   1cc0e:	0022      	movs	r2, r4
   1cc10:	0023      	movs	r3, r4
   1cc12:	32e4      	adds	r2, #228	; 0xe4
   1cc14:	33e2      	adds	r3, #226	; 0xe2
   1cc16:	7812      	ldrb	r2, [r2, #0]
   1cc18:	781b      	ldrb	r3, [r3, #0]
   1cc1a:	429a      	cmp	r2, r3
   1cc1c:	d815      	bhi.n	1cc4a <AckRetransmissionCallback+0x5e>
   1cc1e:	4b12      	ldr	r3, [pc, #72]	; (1cc68 <AckRetransmissionCallback+0x7c>)
   1cc20:	5ce3      	ldrb	r3, [r4, r3]
   1cc22:	2b00      	cmp	r3, #0
   1cc24:	d011      	beq.n	1cc4a <AckRetransmissionCallback+0x5e>
   1cc26:	4b11      	ldr	r3, [pc, #68]	; (1cc6c <AckRetransmissionCallback+0x80>)
   1cc28:	4798      	blx	r3
   1cc2a:	34ce      	adds	r4, #206	; 0xce
   1cc2c:	300d      	adds	r0, #13
   1cc2e:	8823      	ldrh	r3, [r4, #0]
   1cc30:	b280      	uxth	r0, r0
   1cc32:	4283      	cmp	r3, r0
   1cc34:	d801      	bhi.n	1cc3a <AckRetransmissionCallback+0x4e>
   1cc36:	4b0e      	ldr	r3, [pc, #56]	; (1cc70 <AckRetransmissionCallback+0x84>)
   1cc38:	e7e5      	b.n	1cc06 <AckRetransmissionCallback+0x1a>
   1cc3a:	4b0e      	ldr	r3, [pc, #56]	; (1cc74 <AckRetransmissionCallback+0x88>)
   1cc3c:	4798      	blx	r3
   1cc3e:	4b0e      	ldr	r3, [pc, #56]	; (1cc78 <AckRetransmissionCallback+0x8c>)
   1cc40:	4798      	blx	r3
   1cc42:	200e      	movs	r0, #14
   1cc44:	4b0d      	ldr	r3, [pc, #52]	; (1cc7c <AckRetransmissionCallback+0x90>)
   1cc46:	4798      	blx	r3
   1cc48:	bd10      	pop	{r4, pc}
   1cc4a:	4b0a      	ldr	r3, [pc, #40]	; (1cc74 <AckRetransmissionCallback+0x88>)
   1cc4c:	4798      	blx	r3
   1cc4e:	4b0a      	ldr	r3, [pc, #40]	; (1cc78 <AckRetransmissionCallback+0x8c>)
   1cc50:	4798      	blx	r3
   1cc52:	2012      	movs	r0, #18
   1cc54:	e7f6      	b.n	1cc44 <AckRetransmissionCallback+0x58>
   1cc56:	4b07      	ldr	r3, [pc, #28]	; (1cc74 <AckRetransmissionCallback+0x88>)
   1cc58:	4798      	blx	r3
   1cc5a:	4b07      	ldr	r3, [pc, #28]	; (1cc78 <AckRetransmissionCallback+0x8c>)
   1cc5c:	e7d3      	b.n	1cc06 <AckRetransmissionCallback+0x1a>
   1cc5e:	46c0      	nop			; (mov r8, r8)
   1cc60:	20001bd0 	.word	0x20001bd0
   1cc64:	0001caed 	.word	0x0001caed
   1cc68:	0000022a 	.word	0x0000022a
   1cc6c:	0001a79d 	.word	0x0001a79d
   1cc70:	0001b82d 	.word	0x0001b82d
   1cc74:	0001b1b5 	.word	0x0001b1b5
   1cc78:	0001a6b1 	.word	0x0001a6b1
   1cc7c:	0001bd55 	.word	0x0001bd55

0001cc80 <LORAWAN_RxTimeout>:
   1cc80:	4b24      	ldr	r3, [pc, #144]	; (1cd14 <LORAWAN_RxTimeout+0x94>)
   1cc82:	b510      	push	{r4, lr}
   1cc84:	001a      	movs	r2, r3
   1cc86:	3284      	adds	r2, #132	; 0x84
   1cc88:	7812      	ldrb	r2, [r2, #0]
   1cc8a:	b251      	sxtb	r1, r2
   1cc8c:	2900      	cmp	r1, #0
   1cc8e:	db27      	blt.n	1cce0 <LORAWAN_RxTimeout+0x60>
   1cc90:	0019      	movs	r1, r3
   1cc92:	31fd      	adds	r1, #253	; 0xfd
   1cc94:	7809      	ldrb	r1, [r1, #0]
   1cc96:	2904      	cmp	r1, #4
   1cc98:	d108      	bne.n	1ccac <LORAWAN_RxTimeout+0x2c>
   1cc9a:	3903      	subs	r1, #3
   1cc9c:	420a      	tst	r2, r1
   1cc9e:	d005      	beq.n	1ccac <LORAWAN_RxTimeout+0x2c>
   1cca0:	2290      	movs	r2, #144	; 0x90
   1cca2:	0092      	lsls	r2, r2, #2
   1cca4:	5499      	strb	r1, [r3, r2]
   1cca6:	4b1c      	ldr	r3, [pc, #112]	; (1cd18 <LORAWAN_RxTimeout+0x98>)
   1cca8:	4798      	blx	r3
   1ccaa:	bd10      	pop	{r4, pc}
   1ccac:	210e      	movs	r1, #14
   1ccae:	0010      	movs	r0, r2
   1ccb0:	4008      	ands	r0, r1
   1ccb2:	2806      	cmp	r0, #6
   1ccb4:	d107      	bne.n	1ccc6 <LORAWAN_RxTimeout+0x46>
   1ccb6:	3384      	adds	r3, #132	; 0x84
   1ccb8:	781a      	ldrb	r2, [r3, #0]
   1ccba:	438a      	bics	r2, r1
   1ccbc:	0011      	movs	r1, r2
   1ccbe:	2208      	movs	r2, #8
   1ccc0:	430a      	orrs	r2, r1
   1ccc2:	701a      	strb	r2, [r3, #0]
   1ccc4:	e7f1      	b.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1ccc6:	2004      	movs	r0, #4
   1ccc8:	3394      	adds	r3, #148	; 0x94
   1ccca:	781b      	ldrb	r3, [r3, #0]
   1cccc:	4203      	tst	r3, r0
   1ccce:	d002      	beq.n	1ccd6 <LORAWAN_RxTimeout+0x56>
   1ccd0:	4b12      	ldr	r3, [pc, #72]	; (1cd1c <LORAWAN_RxTimeout+0x9c>)
   1ccd2:	4798      	blx	r3
   1ccd4:	e7e9      	b.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1ccd6:	07d3      	lsls	r3, r2, #31
   1ccd8:	d5e7      	bpl.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1ccda:	4b11      	ldr	r3, [pc, #68]	; (1cd20 <LORAWAN_RxTimeout+0xa0>)
   1ccdc:	4798      	blx	r3
   1ccde:	e7e4      	b.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1cce0:	4810      	ldr	r0, [pc, #64]	; (1cd24 <LORAWAN_RxTimeout+0xa4>)
   1cce2:	7841      	ldrb	r1, [r0, #1]
   1cce4:	7802      	ldrb	r2, [r0, #0]
   1cce6:	0209      	lsls	r1, r1, #8
   1cce8:	4311      	orrs	r1, r2
   1ccea:	7882      	ldrb	r2, [r0, #2]
   1ccec:	0412      	lsls	r2, r2, #16
   1ccee:	4311      	orrs	r1, r2
   1ccf0:	78c2      	ldrb	r2, [r0, #3]
   1ccf2:	0612      	lsls	r2, r2, #24
   1ccf4:	430a      	orrs	r2, r1
   1ccf6:	d0d8      	beq.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1ccf8:	2188      	movs	r1, #136	; 0x88
   1ccfa:	2001      	movs	r0, #1
   1ccfc:	0089      	lsls	r1, r1, #2
   1ccfe:	5458      	strb	r0, [r3, r1]
   1cd00:	0019      	movs	r1, r3
   1cd02:	2404      	movs	r4, #4
   1cd04:	31ff      	adds	r1, #255	; 0xff
   1cd06:	33fc      	adds	r3, #252	; 0xfc
   1cd08:	734c      	strb	r4, [r1, #13]
   1cd0a:	7448      	strb	r0, [r1, #17]
   1cd0c:	4906      	ldr	r1, [pc, #24]	; (1cd28 <LORAWAN_RxTimeout+0xa8>)
   1cd0e:	68d8      	ldr	r0, [r3, #12]
   1cd10:	4790      	blx	r2
   1cd12:	e7ca      	b.n	1ccaa <LORAWAN_RxTimeout+0x2a>
   1cd14:	20001bd0 	.word	0x20001bd0
   1cd18:	0001ed1d 	.word	0x0001ed1d
   1cd1c:	0001b209 	.word	0x0001b209
   1cd20:	0001caed 	.word	0x0001caed
   1cd24:	20001f2c 	.word	0x20001f2c
   1cd28:	20001cdc 	.word	0x20001cdc

0001cd2c <LorawanConfigureRadioForRX2>:
   1cd2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd2e:	466b      	mov	r3, sp
   1cd30:	1cdd      	adds	r5, r3, #3
   1cd32:	2300      	movs	r3, #0
   1cd34:	702b      	strb	r3, [r5, #0]
   1cd36:	2390      	movs	r3, #144	; 0x90
   1cd38:	4c29      	ldr	r4, [pc, #164]	; (1cde0 <LorawanConfigureRadioForRX2+0xb4>)
   1cd3a:	009b      	lsls	r3, r3, #2
   1cd3c:	5ce1      	ldrb	r1, [r4, r3]
   1cd3e:	0006      	movs	r6, r0
   1cd40:	0023      	movs	r3, r4
   1cd42:	2900      	cmp	r1, #0
   1cd44:	d02f      	beq.n	1cda6 <LorawanConfigureRadioForRX2+0x7a>
   1cd46:	3373      	adds	r3, #115	; 0x73
   1cd48:	781b      	ldrb	r3, [r3, #0]
   1cd4a:	702b      	strb	r3, [r5, #0]
   1cd4c:	0023      	movs	r3, r4
   1cd4e:	6f22      	ldr	r2, [r4, #112]	; 0x70
   1cd50:	336f      	adds	r3, #111	; 0x6f
   1cd52:	781b      	ldrb	r3, [r3, #0]
   1cd54:	0211      	lsls	r1, r2, #8
   1cd56:	4319      	orrs	r1, r3
   1cd58:	7828      	ldrb	r0, [r5, #0]
   1cd5a:	4b22      	ldr	r3, [pc, #136]	; (1cde4 <LorawanConfigureRadioForRX2+0xb8>)
   1cd5c:	4798      	blx	r3
   1cd5e:	2300      	movs	r3, #0
   1cd60:	0022      	movs	r2, r4
   1cd62:	af01      	add	r7, sp, #4
   1cd64:	703b      	strb	r3, [r7, #0]
   1cd66:	32fd      	adds	r2, #253	; 0xfd
   1cd68:	7812      	ldrb	r2, [r2, #0]
   1cd6a:	2a04      	cmp	r2, #4
   1cd6c:	d130      	bne.n	1cdd0 <LorawanConfigureRadioForRX2+0xa4>
   1cd6e:	0022      	movs	r2, r4
   1cd70:	3284      	adds	r2, #132	; 0x84
   1cd72:	7812      	ldrb	r2, [r2, #0]
   1cd74:	07d2      	lsls	r2, r2, #31
   1cd76:	d52b      	bpl.n	1cdd0 <LorawanConfigureRadioForRX2+0xa4>
   1cd78:	2290      	movs	r2, #144	; 0x90
   1cd7a:	0092      	lsls	r2, r2, #2
   1cd7c:	5ca2      	ldrb	r2, [r4, r2]
   1cd7e:	429a      	cmp	r2, r3
   1cd80:	d026      	beq.n	1cdd0 <LorawanConfigureRadioForRX2+0xa4>
   1cd82:	807b      	strh	r3, [r7, #2]
   1cd84:	0038      	movs	r0, r7
   1cd86:	4b18      	ldr	r3, [pc, #96]	; (1cde8 <LorawanConfigureRadioForRX2+0xbc>)
   1cd88:	4798      	blx	r3
   1cd8a:	1e04      	subs	r4, r0, #0
   1cd8c:	d00a      	beq.n	1cda4 <LorawanConfigureRadioForRX2+0x78>
   1cd8e:	4b17      	ldr	r3, [pc, #92]	; (1cdec <LorawanConfigureRadioForRX2+0xc0>)
   1cd90:	4798      	blx	r3
   1cd92:	4b17      	ldr	r3, [pc, #92]	; (1cdf0 <LorawanConfigureRadioForRX2+0xc4>)
   1cd94:	4798      	blx	r3
   1cd96:	4b17      	ldr	r3, [pc, #92]	; (1cdf4 <LorawanConfigureRadioForRX2+0xc8>)
   1cd98:	4798      	blx	r3
   1cd9a:	2e00      	cmp	r6, #0
   1cd9c:	d002      	beq.n	1cda4 <LorawanConfigureRadioForRX2+0x78>
   1cd9e:	0020      	movs	r0, r4
   1cda0:	4b15      	ldr	r3, [pc, #84]	; (1cdf8 <LorawanConfigureRadioForRX2+0xcc>)
   1cda2:	4798      	blx	r3
   1cda4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1cda6:	3394      	adds	r3, #148	; 0x94
   1cda8:	781b      	ldrb	r3, [r3, #0]
   1cdaa:	075b      	lsls	r3, r3, #29
   1cdac:	d50b      	bpl.n	1cdc6 <LorawanConfigureRadioForRX2+0x9a>
   1cdae:	002a      	movs	r2, r5
   1cdb0:	2009      	movs	r0, #9
   1cdb2:	4b12      	ldr	r3, [pc, #72]	; (1cdfc <LorawanConfigureRadioForRX2+0xd0>)
   1cdb4:	4798      	blx	r3
   1cdb6:	0022      	movs	r2, r4
   1cdb8:	0023      	movs	r3, r4
   1cdba:	326c      	adds	r2, #108	; 0x6c
   1cdbc:	8811      	ldrh	r1, [r2, #0]
   1cdbe:	336a      	adds	r3, #106	; 0x6a
   1cdc0:	881b      	ldrh	r3, [r3, #0]
   1cdc2:	0409      	lsls	r1, r1, #16
   1cdc4:	e7c7      	b.n	1cd56 <LorawanConfigureRadioForRX2+0x2a>
   1cdc6:	0023      	movs	r3, r4
   1cdc8:	336e      	adds	r3, #110	; 0x6e
   1cdca:	781b      	ldrb	r3, [r3, #0]
   1cdcc:	702b      	strb	r3, [r5, #0]
   1cdce:	e7f2      	b.n	1cdb6 <LorawanConfigureRadioForRX2+0x8a>
   1cdd0:	466b      	mov	r3, sp
   1cdd2:	0029      	movs	r1, r5
   1cdd4:	1d9a      	adds	r2, r3, #6
   1cdd6:	2003      	movs	r0, #3
   1cdd8:	4b08      	ldr	r3, [pc, #32]	; (1cdfc <LorawanConfigureRadioForRX2+0xd0>)
   1cdda:	4798      	blx	r3
   1cddc:	e7d2      	b.n	1cd84 <LorawanConfigureRadioForRX2+0x58>
   1cdde:	46c0      	nop			; (mov r8, r8)
   1cde0:	20001bd0 	.word	0x20001bd0
   1cde4:	0001b6d1 	.word	0x0001b6d1
   1cde8:	00020895 	.word	0x00020895
   1cdec:	0001b1b5 	.word	0x0001b1b5
   1cdf0:	0001b1e5 	.word	0x0001b1e5
   1cdf4:	0001a6b1 	.word	0x0001a6b1
   1cdf8:	0001bd55 	.word	0x0001bd55
   1cdfc:	0000d595 	.word	0x0000d595

0001ce00 <LorawanReceiveWindow2Callback>:
   1ce00:	b510      	push	{r4, lr}
   1ce02:	4c1d      	ldr	r4, [pc, #116]	; (1ce78 <LorawanReceiveWindow2Callback+0x78>)
   1ce04:	0021      	movs	r1, r4
   1ce06:	3184      	adds	r1, #132	; 0x84
   1ce08:	780b      	ldrb	r3, [r1, #0]
   1ce0a:	b25a      	sxtb	r2, r3
   1ce0c:	2a00      	cmp	r2, #0
   1ce0e:	db1f      	blt.n	1ce50 <LorawanReceiveWindow2Callback+0x50>
   1ce10:	0022      	movs	r2, r4
   1ce12:	32fd      	adds	r2, #253	; 0xfd
   1ce14:	7812      	ldrb	r2, [r2, #0]
   1ce16:	2a04      	cmp	r2, #4
   1ce18:	d107      	bne.n	1ce2a <LorawanReceiveWindow2Callback+0x2a>
   1ce1a:	07db      	lsls	r3, r3, #31
   1ce1c:	d505      	bpl.n	1ce2a <LorawanReceiveWindow2Callback+0x2a>
   1ce1e:	2390      	movs	r3, #144	; 0x90
   1ce20:	2200      	movs	r2, #0
   1ce22:	009b      	lsls	r3, r3, #2
   1ce24:	54e2      	strb	r2, [r4, r3]
   1ce26:	4b15      	ldr	r3, [pc, #84]	; (1ce7c <LorawanReceiveWindow2Callback+0x7c>)
   1ce28:	4798      	blx	r3
   1ce2a:	4b15      	ldr	r3, [pc, #84]	; (1ce80 <LorawanReceiveWindow2Callback+0x80>)
   1ce2c:	4798      	blx	r3
   1ce2e:	2801      	cmp	r0, #1
   1ce30:	d10a      	bne.n	1ce48 <LorawanReceiveWindow2Callback+0x48>
   1ce32:	220e      	movs	r2, #14
   1ce34:	3484      	adds	r4, #132	; 0x84
   1ce36:	7823      	ldrb	r3, [r4, #0]
   1ce38:	4393      	bics	r3, r2
   1ce3a:	001a      	movs	r2, r3
   1ce3c:	230a      	movs	r3, #10
   1ce3e:	4313      	orrs	r3, r2
   1ce40:	7023      	strb	r3, [r4, #0]
   1ce42:	4b10      	ldr	r3, [pc, #64]	; (1ce84 <LorawanReceiveWindow2Callback+0x84>)
   1ce44:	4798      	blx	r3
   1ce46:	bd10      	pop	{r4, pc}
   1ce48:	2301      	movs	r3, #1
   1ce4a:	34f9      	adds	r4, #249	; 0xf9
   1ce4c:	7023      	strb	r3, [r4, #0]
   1ce4e:	e7fa      	b.n	1ce46 <LorawanReceiveWindow2Callback+0x46>
   1ce50:	2004      	movs	r0, #4
   1ce52:	3494      	adds	r4, #148	; 0x94
   1ce54:	7822      	ldrb	r2, [r4, #0]
   1ce56:	4202      	tst	r2, r0
   1ce58:	d007      	beq.n	1ce6a <LorawanReceiveWindow2Callback+0x6a>
   1ce5a:	4382      	bics	r2, r0
   1ce5c:	3803      	subs	r0, #3
   1ce5e:	4383      	bics	r3, r0
   1ce60:	700b      	strb	r3, [r1, #0]
   1ce62:	210b      	movs	r1, #11
   1ce64:	4b08      	ldr	r3, [pc, #32]	; (1ce88 <LorawanReceiveWindow2Callback+0x88>)
   1ce66:	7022      	strb	r2, [r4, #0]
   1ce68:	4798      	blx	r3
   1ce6a:	4b08      	ldr	r3, [pc, #32]	; (1ce8c <LorawanReceiveWindow2Callback+0x8c>)
   1ce6c:	4798      	blx	r3
   1ce6e:	4b08      	ldr	r3, [pc, #32]	; (1ce90 <LorawanReceiveWindow2Callback+0x90>)
   1ce70:	4798      	blx	r3
   1ce72:	4b08      	ldr	r3, [pc, #32]	; (1ce94 <LorawanReceiveWindow2Callback+0x94>)
   1ce74:	4798      	blx	r3
   1ce76:	e7e6      	b.n	1ce46 <LorawanReceiveWindow2Callback+0x46>
   1ce78:	20001bd0 	.word	0x20001bd0
   1ce7c:	0001ebad 	.word	0x0001ebad
   1ce80:	0001fef5 	.word	0x0001fef5
   1ce84:	0001cd2d 	.word	0x0001cd2d
   1ce88:	00013b45 	.word	0x00013b45
   1ce8c:	0001b1e5 	.word	0x0001b1e5
   1ce90:	0001b1b5 	.word	0x0001b1b5
   1ce94:	0001a6b1 	.word	0x0001a6b1

0001ce98 <SetReceptionNotOkState>:
   1ce98:	4a0c      	ldr	r2, [pc, #48]	; (1cecc <SetReceptionNotOkState+0x34>)
   1ce9a:	b510      	push	{r4, lr}
   1ce9c:	0013      	movs	r3, r2
   1ce9e:	33fd      	adds	r3, #253	; 0xfd
   1cea0:	7819      	ldrb	r1, [r3, #0]
   1cea2:	0013      	movs	r3, r2
   1cea4:	4c0a      	ldr	r4, [pc, #40]	; (1ced0 <SetReceptionNotOkState+0x38>)
   1cea6:	3384      	adds	r3, #132	; 0x84
   1cea8:	2904      	cmp	r1, #4
   1ceaa:	d105      	bne.n	1ceb8 <SetReceptionNotOkState+0x20>
   1ceac:	2088      	movs	r0, #136	; 0x88
   1ceae:	3903      	subs	r1, #3
   1ceb0:	0080      	lsls	r0, r0, #2
   1ceb2:	5411      	strb	r1, [r2, r0]
   1ceb4:	3020      	adds	r0, #32
   1ceb6:	5411      	strb	r1, [r2, r0]
   1ceb8:	210e      	movs	r1, #14
   1ceba:	781a      	ldrb	r2, [r3, #0]
   1cebc:	2000      	movs	r0, #0
   1cebe:	438a      	bics	r2, r1
   1cec0:	0011      	movs	r1, r2
   1cec2:	220a      	movs	r2, #10
   1cec4:	430a      	orrs	r2, r1
   1cec6:	701a      	strb	r2, [r3, #0]
   1cec8:	47a0      	blx	r4
   1ceca:	bd10      	pop	{r4, pc}
   1cecc:	20001bd0 	.word	0x20001bd0
   1ced0:	0001cd2d 	.word	0x0001cd2d

0001ced4 <LorawanProcessFcntDown>:
   1ced4:	b570      	push	{r4, r5, r6, lr}
   1ced6:	79c3      	ldrb	r3, [r0, #7]
   1ced8:	7982      	ldrb	r2, [r0, #6]
   1ceda:	4c1f      	ldr	r4, [pc, #124]	; (1cf58 <LorawanProcessFcntDown+0x84>)
   1cedc:	021b      	lsls	r3, r3, #8
   1cede:	4313      	orrs	r3, r2
   1cee0:	0022      	movs	r2, r4
   1cee2:	218b      	movs	r1, #139	; 0x8b
   1cee4:	328c      	adds	r2, #140	; 0x8c
   1cee6:	8810      	ldrh	r0, [r2, #0]
   1cee8:	0089      	lsls	r1, r1, #2
   1ceea:	8013      	strh	r3, [r2, #0]
   1ceec:	4298      	cmp	r0, r3
   1ceee:	d80f      	bhi.n	1cf10 <LorawanProcessFcntDown+0x3c>
   1cef0:	5c61      	ldrb	r1, [r4, r1]
   1cef2:	2900      	cmp	r1, #0
   1cef4:	d007      	beq.n	1cf06 <LorawanProcessFcntDown+0x32>
   1cef6:	2301      	movs	r3, #1
   1cef8:	408b      	lsls	r3, r1
   1cefa:	6812      	ldr	r2, [r2, #0]
   1cefc:	3b01      	subs	r3, #1
   1cefe:	421a      	tst	r2, r3
   1cf00:	d001      	beq.n	1cf06 <LorawanProcessFcntDown+0x32>
   1cf02:	2008      	movs	r0, #8
   1cf04:	bd70      	pop	{r4, r5, r6, pc}
   1cf06:	210a      	movs	r1, #10
   1cf08:	4b14      	ldr	r3, [pc, #80]	; (1cf5c <LorawanProcessFcntDown+0x88>)
   1cf0a:	2001      	movs	r0, #1
   1cf0c:	4798      	blx	r3
   1cf0e:	e7f8      	b.n	1cf02 <LorawanProcessFcntDown+0x2e>
   1cf10:	0020      	movs	r0, r4
   1cf12:	308e      	adds	r0, #142	; 0x8e
   1cf14:	8803      	ldrh	r3, [r0, #0]
   1cf16:	3301      	adds	r3, #1
   1cf18:	8003      	strh	r3, [r0, #0]
   1cf1a:	5c61      	ldrb	r1, [r4, r1]
   1cf1c:	2900      	cmp	r1, #0
   1cf1e:	d005      	beq.n	1cf2c <LorawanProcessFcntDown+0x58>
   1cf20:	2301      	movs	r3, #1
   1cf22:	408b      	lsls	r3, r1
   1cf24:	6812      	ldr	r2, [r2, #0]
   1cf26:	3b01      	subs	r3, #1
   1cf28:	421a      	tst	r2, r3
   1cf2a:	d103      	bne.n	1cf34 <LorawanProcessFcntDown+0x60>
   1cf2c:	210a      	movs	r1, #10
   1cf2e:	2001      	movs	r0, #1
   1cf30:	4b0a      	ldr	r3, [pc, #40]	; (1cf5c <LorawanProcessFcntDown+0x88>)
   1cf32:	4798      	blx	r3
   1cf34:	0023      	movs	r3, r4
   1cf36:	338c      	adds	r3, #140	; 0x8c
   1cf38:	681b      	ldr	r3, [r3, #0]
   1cf3a:	3301      	adds	r3, #1
   1cf3c:	d1e1      	bne.n	1cf02 <LorawanProcessFcntDown+0x2e>
   1cf3e:	2501      	movs	r5, #1
   1cf40:	3484      	adds	r4, #132	; 0x84
   1cf42:	78a3      	ldrb	r3, [r4, #2]
   1cf44:	432b      	orrs	r3, r5
   1cf46:	70a3      	strb	r3, [r4, #2]
   1cf48:	4b05      	ldr	r3, [pc, #20]	; (1cf60 <LorawanProcessFcntDown+0x8c>)
   1cf4a:	4798      	blx	r3
   1cf4c:	210b      	movs	r1, #11
   1cf4e:	0028      	movs	r0, r5
   1cf50:	4b02      	ldr	r3, [pc, #8]	; (1cf5c <LorawanProcessFcntDown+0x88>)
   1cf52:	4798      	blx	r3
   1cf54:	200d      	movs	r0, #13
   1cf56:	e7d5      	b.n	1cf04 <LorawanProcessFcntDown+0x30>
   1cf58:	20001bd0 	.word	0x20001bd0
   1cf5c:	00013b45 	.word	0x00013b45
   1cf60:	0001ce99 	.word	0x0001ce99

0001cf64 <UpdateCurrentDataRateAfterDataRangeChanges>:
   1cf64:	4b09      	ldr	r3, [pc, #36]	; (1cf8c <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   1cf66:	001a      	movs	r2, r3
   1cf68:	32f4      	adds	r2, #244	; 0xf4
   1cf6a:	7811      	ldrb	r1, [r2, #0]
   1cf6c:	001a      	movs	r2, r3
   1cf6e:	32e7      	adds	r2, #231	; 0xe7
   1cf70:	7810      	ldrb	r0, [r2, #0]
   1cf72:	4288      	cmp	r0, r1
   1cf74:	d900      	bls.n	1cf78 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   1cf76:	7011      	strb	r1, [r2, #0]
   1cf78:	001a      	movs	r2, r3
   1cf7a:	33e7      	adds	r3, #231	; 0xe7
   1cf7c:	32f3      	adds	r2, #243	; 0xf3
   1cf7e:	7812      	ldrb	r2, [r2, #0]
   1cf80:	7819      	ldrb	r1, [r3, #0]
   1cf82:	4291      	cmp	r1, r2
   1cf84:	d200      	bcs.n	1cf88 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   1cf86:	701a      	strb	r2, [r3, #0]
   1cf88:	4770      	bx	lr
   1cf8a:	46c0      	nop			; (mov r8, r8)
   1cf8c:	20001bd0 	.word	0x20001bd0

0001cf90 <ExecuteNewChannel>:
   1cf90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf92:	b08d      	sub	sp, #52	; 0x34
   1cf94:	7807      	ldrb	r7, [r0, #0]
   1cf96:	ab02      	add	r3, sp, #8
   1cf98:	0006      	movs	r6, r0
   1cf9a:	71df      	strb	r7, [r3, #7]
   1cf9c:	1c41      	adds	r1, r0, #1
   1cf9e:	4b59      	ldr	r3, [pc, #356]	; (1d104 <ExecuteNewChannel+0x174>)
   1cfa0:	2204      	movs	r2, #4
   1cfa2:	a808      	add	r0, sp, #32
   1cfa4:	4798      	blx	r3
   1cfa6:	9b08      	ldr	r3, [sp, #32]
   1cfa8:	4c57      	ldr	r4, [pc, #348]	; (1d108 <ExecuteNewChannel+0x178>)
   1cfaa:	021d      	lsls	r5, r3, #8
   1cfac:	2364      	movs	r3, #100	; 0x64
   1cfae:	0a2d      	lsrs	r5, r5, #8
   1cfb0:	435d      	muls	r5, r3
   1cfb2:	1d73      	adds	r3, r6, #5
   1cfb4:	9301      	str	r3, [sp, #4]
   1cfb6:	0023      	movs	r3, r4
   1cfb8:	9508      	str	r5, [sp, #32]
   1cfba:	33ff      	adds	r3, #255	; 0xff
   1cfbc:	781b      	ldrb	r3, [r3, #0]
   1cfbe:	3b02      	subs	r3, #2
   1cfc0:	2b01      	cmp	r3, #1
   1cfc2:	d800      	bhi.n	1cfc6 <ExecuteNewChannel+0x36>
   1cfc4:	e092      	b.n	1d0ec <ExecuteNewChannel+0x15c>
   1cfc6:	7933      	ldrb	r3, [r6, #4]
   1cfc8:	a904      	add	r1, sp, #16
   1cfca:	9300      	str	r3, [sp, #0]
   1cfcc:	2300      	movs	r3, #0
   1cfce:	2015      	movs	r0, #21
   1cfd0:	4e4e      	ldr	r6, [pc, #312]	; (1d10c <ExecuteNewChannel+0x17c>)
   1cfd2:	700f      	strb	r7, [r1, #0]
   1cfd4:	704b      	strb	r3, [r1, #1]
   1cfd6:	47b0      	blx	r6
   1cfd8:	2808      	cmp	r0, #8
   1cfda:	d12b      	bne.n	1d034 <ExecuteNewChannel+0xa4>
   1cfdc:	466a      	mov	r2, sp
   1cfde:	ab02      	add	r3, sp, #8
   1cfe0:	79db      	ldrb	r3, [r3, #7]
   1cfe2:	7812      	ldrb	r2, [r2, #0]
   1cfe4:	af06      	add	r7, sp, #24
   1cfe6:	a90a      	add	r1, sp, #40	; 0x28
   1cfe8:	3806      	subs	r0, #6
   1cfea:	703b      	strb	r3, [r7, #0]
   1cfec:	707a      	strb	r2, [r7, #1]
   1cfee:	710b      	strb	r3, [r1, #4]
   1cff0:	950a      	str	r5, [sp, #40]	; 0x28
   1cff2:	47b0      	blx	r6
   1cff4:	2808      	cmp	r0, #8
   1cff6:	d001      	beq.n	1cffc <ExecuteNewChannel+0x6c>
   1cff8:	2d00      	cmp	r5, #0
   1cffa:	d10b      	bne.n	1d014 <ExecuteNewChannel+0x84>
   1cffc:	0023      	movs	r3, r4
   1cffe:	33e0      	adds	r3, #224	; 0xe0
   1d000:	781a      	ldrb	r2, [r3, #0]
   1d002:	2303      	movs	r3, #3
   1d004:	4353      	muls	r3, r2
   1d006:	2280      	movs	r2, #128	; 0x80
   1d008:	18e3      	adds	r3, r4, r3
   1d00a:	3398      	adds	r3, #152	; 0x98
   1d00c:	7899      	ldrb	r1, [r3, #2]
   1d00e:	4252      	negs	r2, r2
   1d010:	430a      	orrs	r2, r1
   1d012:	709a      	strb	r2, [r3, #2]
   1d014:	0039      	movs	r1, r7
   1d016:	2012      	movs	r0, #18
   1d018:	47b0      	blx	r6
   1d01a:	2808      	cmp	r0, #8
   1d01c:	d10a      	bne.n	1d034 <ExecuteNewChannel+0xa4>
   1d01e:	0023      	movs	r3, r4
   1d020:	33e0      	adds	r3, #224	; 0xe0
   1d022:	781a      	ldrb	r2, [r3, #0]
   1d024:	2303      	movs	r3, #3
   1d026:	4353      	muls	r3, r2
   1d028:	2240      	movs	r2, #64	; 0x40
   1d02a:	18e3      	adds	r3, r4, r3
   1d02c:	3398      	adds	r3, #152	; 0x98
   1d02e:	7899      	ldrb	r1, [r3, #2]
   1d030:	430a      	orrs	r2, r1
   1d032:	709a      	strb	r2, [r3, #2]
   1d034:	0023      	movs	r3, r4
   1d036:	33e0      	adds	r3, #224	; 0xe0
   1d038:	781a      	ldrb	r2, [r3, #0]
   1d03a:	2303      	movs	r3, #3
   1d03c:	4353      	muls	r3, r2
   1d03e:	18e3      	adds	r3, r4, r3
   1d040:	3398      	adds	r3, #152	; 0x98
   1d042:	789b      	ldrb	r3, [r3, #2]
   1d044:	09da      	lsrs	r2, r3, #7
   1d046:	2a01      	cmp	r2, #1
   1d048:	d150      	bne.n	1d0ec <ExecuteNewChannel+0x15c>
   1d04a:	065b      	lsls	r3, r3, #25
   1d04c:	d54e      	bpl.n	1d0ec <ExecuteNewChannel+0x15c>
   1d04e:	4e30      	ldr	r6, [pc, #192]	; (1d110 <ExecuteNewChannel+0x180>)
   1d050:	2d00      	cmp	r5, #0
   1d052:	d04e      	beq.n	1d0f2 <ExecuteNewChannel+0x162>
   1d054:	a906      	add	r1, sp, #24
   1d056:	2012      	movs	r0, #18
   1d058:	47b0      	blx	r6
   1d05a:	ad07      	add	r5, sp, #28
   1d05c:	a90a      	add	r1, sp, #40	; 0x28
   1d05e:	2000      	movs	r0, #0
   1d060:	47b0      	blx	r6
   1d062:	002a      	movs	r2, r5
   1d064:	2100      	movs	r1, #0
   1d066:	2014      	movs	r0, #20
   1d068:	4f2a      	ldr	r7, [pc, #168]	; (1d114 <ExecuteNewChannel+0x184>)
   1d06a:	47b8      	blx	r7
   1d06c:	0023      	movs	r3, r4
   1d06e:	782a      	ldrb	r2, [r5, #0]
   1d070:	33f3      	adds	r3, #243	; 0xf3
   1d072:	701a      	strb	r2, [r3, #0]
   1d074:	0023      	movs	r3, r4
   1d076:	786a      	ldrb	r2, [r5, #1]
   1d078:	33f4      	adds	r3, #244	; 0xf4
   1d07a:	701a      	strb	r2, [r3, #0]
   1d07c:	34ff      	adds	r4, #255	; 0xff
   1d07e:	4b26      	ldr	r3, [pc, #152]	; (1d118 <ExecuteNewChannel+0x188>)
   1d080:	4798      	blx	r3
   1d082:	7f63      	ldrb	r3, [r4, #29]
   1d084:	079b      	lsls	r3, r3, #30
   1d086:	d50e      	bpl.n	1d0a6 <ExecuteNewChannel+0x116>
   1d088:	2416      	movs	r4, #22
   1d08a:	ab02      	add	r3, sp, #8
   1d08c:	18e4      	adds	r4, r4, r3
   1d08e:	1dd9      	adds	r1, r3, #7
   1d090:	0022      	movs	r2, r4
   1d092:	201e      	movs	r0, #30
   1d094:	47b8      	blx	r7
   1d096:	ab02      	add	r3, sp, #8
   1d098:	79db      	ldrb	r3, [r3, #7]
   1d09a:	a909      	add	r1, sp, #36	; 0x24
   1d09c:	708b      	strb	r3, [r1, #2]
   1d09e:	8823      	ldrh	r3, [r4, #0]
   1d0a0:	201e      	movs	r0, #30
   1d0a2:	800b      	strh	r3, [r1, #0]
   1d0a4:	47b0      	blx	r6
   1d0a6:	ab02      	add	r3, sp, #8
   1d0a8:	79db      	ldrb	r3, [r3, #7]
   1d0aa:	a905      	add	r1, sp, #20
   1d0ac:	700b      	strb	r3, [r1, #0]
   1d0ae:	2301      	movs	r3, #1
   1d0b0:	2016      	movs	r0, #22
   1d0b2:	704b      	strb	r3, [r1, #1]
   1d0b4:	4b16      	ldr	r3, [pc, #88]	; (1d110 <ExecuteNewChannel+0x180>)
   1d0b6:	4798      	blx	r3
   1d0b8:	ad09      	add	r5, sp, #36	; 0x24
   1d0ba:	2100      	movs	r1, #0
   1d0bc:	002a      	movs	r2, r5
   1d0be:	4b15      	ldr	r3, [pc, #84]	; (1d114 <ExecuteNewChannel+0x184>)
   1d0c0:	2014      	movs	r0, #20
   1d0c2:	4798      	blx	r3
   1d0c4:	4c10      	ldr	r4, [pc, #64]	; (1d108 <ExecuteNewChannel+0x178>)
   1d0c6:	782a      	ldrb	r2, [r5, #0]
   1d0c8:	0023      	movs	r3, r4
   1d0ca:	33f3      	adds	r3, #243	; 0xf3
   1d0cc:	701a      	strb	r2, [r3, #0]
   1d0ce:	0023      	movs	r3, r4
   1d0d0:	786a      	ldrb	r2, [r5, #1]
   1d0d2:	33f4      	adds	r3, #244	; 0xf4
   1d0d4:	701a      	strb	r2, [r3, #0]
   1d0d6:	4b10      	ldr	r3, [pc, #64]	; (1d118 <ExecuteNewChannel+0x188>)
   1d0d8:	4798      	blx	r3
   1d0da:	2304      	movs	r3, #4
   1d0dc:	3484      	adds	r4, #132	; 0x84
   1d0de:	7862      	ldrb	r2, [r4, #1]
   1d0e0:	210b      	movs	r1, #11
   1d0e2:	4313      	orrs	r3, r2
   1d0e4:	7063      	strb	r3, [r4, #1]
   1d0e6:	2001      	movs	r0, #1
   1d0e8:	4b0c      	ldr	r3, [pc, #48]	; (1d11c <ExecuteNewChannel+0x18c>)
   1d0ea:	4798      	blx	r3
   1d0ec:	9801      	ldr	r0, [sp, #4]
   1d0ee:	b00d      	add	sp, #52	; 0x34
   1d0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d0f2:	ab02      	add	r3, sp, #8
   1d0f4:	79db      	ldrb	r3, [r3, #7]
   1d0f6:	a905      	add	r1, sp, #20
   1d0f8:	2016      	movs	r0, #22
   1d0fa:	700b      	strb	r3, [r1, #0]
   1d0fc:	704d      	strb	r5, [r1, #1]
   1d0fe:	47b0      	blx	r6
   1d100:	e7da      	b.n	1d0b8 <ExecuteNewChannel+0x128>
   1d102:	46c0      	nop			; (mov r8, r8)
   1d104:	00024149 	.word	0x00024149
   1d108:	20001bd0 	.word	0x20001bd0
   1d10c:	0000d5ed 	.word	0x0000d5ed
   1d110:	0000d639 	.word	0x0000d639
   1d114:	0000d595 	.word	0x0000d595
   1d118:	0001cf65 	.word	0x0001cf65
   1d11c:	00013b45 	.word	0x00013b45

0001d120 <MacExecuteCommands>:
   1d120:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d122:	1843      	adds	r3, r0, r1
   1d124:	b087      	sub	sp, #28
   1d126:	9301      	str	r3, [sp, #4]
   1d128:	2300      	movs	r3, #0
   1d12a:	0007      	movs	r7, r0
   1d12c:	2501      	movs	r5, #1
   1d12e:	9302      	str	r3, [sp, #8]
   1d130:	9b01      	ldr	r3, [sp, #4]
   1d132:	4e71      	ldr	r6, [pc, #452]	; (1d2f8 <MacExecuteCommands+0x1d8>)
   1d134:	429f      	cmp	r7, r3
   1d136:	d362      	bcc.n	1d1fe <MacExecuteCommands+0xde>
   1d138:	4b70      	ldr	r3, [pc, #448]	; (1d2fc <MacExecuteCommands+0x1dc>)
   1d13a:	5cf3      	ldrb	r3, [r6, r3]
   1d13c:	2b00      	cmp	r3, #0
   1d13e:	d000      	beq.n	1d142 <MacExecuteCommands+0x22>
   1d140:	e08f      	b.n	1d262 <MacExecuteCommands+0x142>
   1d142:	0038      	movs	r0, r7
   1d144:	b007      	add	sp, #28
   1d146:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d148:	0032      	movs	r2, r6
   1d14a:	7879      	ldrb	r1, [r7, #1]
   1d14c:	32e5      	adds	r2, #229	; 0xe5
   1d14e:	7011      	strb	r1, [r2, #0]
   1d150:	0032      	movs	r2, r6
   1d152:	78b9      	ldrb	r1, [r7, #2]
   1d154:	32e6      	adds	r2, #230	; 0xe6
   1d156:	1cfc      	adds	r4, r7, #3
   1d158:	7011      	strb	r1, [r2, #0]
   1d15a:	2203      	movs	r2, #3
   1d15c:	4353      	muls	r3, r2
   1d15e:	18f3      	adds	r3, r6, r3
   1d160:	3399      	adds	r3, #153	; 0x99
   1d162:	32fc      	adds	r2, #252	; 0xfc
   1d164:	701a      	strb	r2, [r3, #0]
   1d166:	e020      	b.n	1d1aa <MacExecuteCommands+0x8a>
   1d168:	0020      	movs	r0, r4
   1d16a:	4b65      	ldr	r3, [pc, #404]	; (1d300 <MacExecuteCommands+0x1e0>)
   1d16c:	4798      	blx	r3
   1d16e:	0004      	movs	r4, r0
   1d170:	e01b      	b.n	1d1aa <MacExecuteCommands+0x8a>
   1d172:	0020      	movs	r0, r4
   1d174:	4b63      	ldr	r3, [pc, #396]	; (1d304 <MacExecuteCommands+0x1e4>)
   1d176:	e7f9      	b.n	1d16c <MacExecuteCommands+0x4c>
   1d178:	0020      	movs	r0, r4
   1d17a:	4b63      	ldr	r3, [pc, #396]	; (1d308 <MacExecuteCommands+0x1e8>)
   1d17c:	e7f6      	b.n	1d16c <MacExecuteCommands+0x4c>
   1d17e:	0020      	movs	r0, r4
   1d180:	4b62      	ldr	r3, [pc, #392]	; (1d30c <MacExecuteCommands+0x1ec>)
   1d182:	e7f3      	b.n	1d16c <MacExecuteCommands+0x4c>
   1d184:	7878      	ldrb	r0, [r7, #1]
   1d186:	230f      	movs	r3, #15
   1d188:	0002      	movs	r2, r0
   1d18a:	1cbc      	adds	r4, r7, #2
   1d18c:	439a      	bics	r2, r3
   1d18e:	d10c      	bne.n	1d1aa <MacExecuteCommands+0x8a>
   1d190:	4b5f      	ldr	r3, [pc, #380]	; (1d310 <MacExecuteCommands+0x1f0>)
   1d192:	4798      	blx	r3
   1d194:	0032      	movs	r2, r6
   1d196:	2380      	movs	r3, #128	; 0x80
   1d198:	3284      	adds	r2, #132	; 0x84
   1d19a:	7851      	ldrb	r1, [r2, #1]
   1d19c:	425b      	negs	r3, r3
   1d19e:	430b      	orrs	r3, r1
   1d1a0:	7053      	strb	r3, [r2, #1]
   1d1a2:	210b      	movs	r1, #11
   1d1a4:	0028      	movs	r0, r5
   1d1a6:	4b5b      	ldr	r3, [pc, #364]	; (1d314 <MacExecuteCommands+0x1f4>)
   1d1a8:	4798      	blx	r3
   1d1aa:	0032      	movs	r2, r6
   1d1ac:	2103      	movs	r1, #3
   1d1ae:	32e0      	adds	r2, #224	; 0xe0
   1d1b0:	7813      	ldrb	r3, [r2, #0]
   1d1b2:	4359      	muls	r1, r3
   1d1b4:	1876      	adds	r6, r6, r1
   1d1b6:	3699      	adds	r6, #153	; 0x99
   1d1b8:	7831      	ldrb	r1, [r6, #0]
   1d1ba:	29ff      	cmp	r1, #255	; 0xff
   1d1bc:	d003      	beq.n	1d1c6 <MacExecuteCommands+0xa6>
   1d1be:	2b0f      	cmp	r3, #15
   1d1c0:	d801      	bhi.n	1d1c6 <MacExecuteCommands+0xa6>
   1d1c2:	3301      	adds	r3, #1
   1d1c4:	7013      	strb	r3, [r2, #0]
   1d1c6:	0027      	movs	r7, r4
   1d1c8:	e7b2      	b.n	1d130 <MacExecuteCommands+0x10>
   1d1ca:	0020      	movs	r0, r4
   1d1cc:	4b52      	ldr	r3, [pc, #328]	; (1d318 <MacExecuteCommands+0x1f8>)
   1d1ce:	e7cd      	b.n	1d16c <MacExecuteCommands+0x4c>
   1d1d0:	0020      	movs	r0, r4
   1d1d2:	4b52      	ldr	r3, [pc, #328]	; (1d31c <MacExecuteCommands+0x1fc>)
   1d1d4:	e7ca      	b.n	1d16c <MacExecuteCommands+0x4c>
   1d1d6:	0020      	movs	r0, r4
   1d1d8:	4b51      	ldr	r3, [pc, #324]	; (1d320 <MacExecuteCommands+0x200>)
   1d1da:	4798      	blx	r3
   1d1dc:	0033      	movs	r3, r6
   1d1de:	33e0      	adds	r3, #224	; 0xe0
   1d1e0:	0004      	movs	r4, r0
   1d1e2:	781b      	ldrb	r3, [r3, #0]
   1d1e4:	e7b9      	b.n	1d15a <MacExecuteCommands+0x3a>
   1d1e6:	2203      	movs	r2, #3
   1d1e8:	4353      	muls	r3, r2
   1d1ea:	18f3      	adds	r3, r6, r3
   1d1ec:	3399      	adds	r3, #153	; 0x99
   1d1ee:	32fc      	adds	r2, #252	; 0xfc
   1d1f0:	701a      	strb	r2, [r3, #0]
   1d1f2:	9c01      	ldr	r4, [sp, #4]
   1d1f4:	9502      	str	r5, [sp, #8]
   1d1f6:	e7d8      	b.n	1d1aa <MacExecuteCommands+0x8a>
   1d1f8:	23ff      	movs	r3, #255	; 0xff
   1d1fa:	7013      	strb	r3, [r2, #0]
   1d1fc:	e7f9      	b.n	1d1f2 <MacExecuteCommands+0xd2>
   1d1fe:	9b02      	ldr	r3, [sp, #8]
   1d200:	2b00      	cmp	r3, #0
   1d202:	d199      	bne.n	1d138 <MacExecuteCommands+0x18>
   1d204:	0033      	movs	r3, r6
   1d206:	2203      	movs	r2, #3
   1d208:	33e0      	adds	r3, #224	; 0xe0
   1d20a:	781b      	ldrb	r3, [r3, #0]
   1d20c:	2401      	movs	r4, #1
   1d20e:	435a      	muls	r2, r3
   1d210:	18b2      	adds	r2, r6, r2
   1d212:	0010      	movs	r0, r2
   1d214:	3098      	adds	r0, #152	; 0x98
   1d216:	7881      	ldrb	r1, [r0, #2]
   1d218:	3299      	adds	r2, #153	; 0x99
   1d21a:	43a9      	bics	r1, r5
   1d21c:	4021      	ands	r1, r4
   1d21e:	7081      	strb	r1, [r0, #2]
   1d220:	78c1      	ldrb	r1, [r0, #3]
   1d222:	193c      	adds	r4, r7, r4
   1d224:	43a9      	bics	r1, r5
   1d226:	70c1      	strb	r1, [r0, #3]
   1d228:	7839      	ldrb	r1, [r7, #0]
   1d22a:	7011      	strb	r1, [r2, #0]
   1d22c:	7838      	ldrb	r0, [r7, #0]
   1d22e:	493d      	ldr	r1, [pc, #244]	; (1d324 <MacExecuteCommands+0x204>)
   1d230:	1809      	adds	r1, r1, r0
   1d232:	3902      	subs	r1, #2
   1d234:	7809      	ldrb	r1, [r1, #0]
   1d236:	1861      	adds	r1, r4, r1
   1d238:	468c      	mov	ip, r1
   1d23a:	9901      	ldr	r1, [sp, #4]
   1d23c:	4561      	cmp	r1, ip
   1d23e:	d3db      	bcc.n	1d1f8 <MacExecuteCommands+0xd8>
   1d240:	3802      	subs	r0, #2
   1d242:	280b      	cmp	r0, #11
   1d244:	d8cf      	bhi.n	1d1e6 <MacExecuteCommands+0xc6>
   1d246:	f003 fefb 	bl	21040 <__gnu_thumb1_case_shi>
   1d24a:	ff7f      	.short	0xff7f
   1d24c:	ff94ff8f 	.word	0xff94ff8f
   1d250:	ffb0ff97 	.word	0xffb0ff97
   1d254:	ff9dff9a 	.word	0xff9dff9a
   1d258:	ffc3ffc0 	.word	0xffc3ffc0
   1d25c:	ffceffce 	.word	0xffceffce
   1d260:	ffc6      	.short	0xffc6
   1d262:	4b31      	ldr	r3, [pc, #196]	; (1d328 <MacExecuteCommands+0x208>)
   1d264:	5cf3      	ldrb	r3, [r6, r3]
   1d266:	43db      	mvns	r3, r3
   1d268:	075b      	lsls	r3, r3, #29
   1d26a:	d000      	beq.n	1d26e <MacExecuteCommands+0x14e>
   1d26c:	e769      	b.n	1d142 <MacExecuteCommands+0x22>
   1d26e:	4b2f      	ldr	r3, [pc, #188]	; (1d32c <MacExecuteCommands+0x20c>)
   1d270:	ad05      	add	r5, sp, #20
   1d272:	5cf4      	ldrb	r4, [r6, r3]
   1d274:	2100      	movs	r1, #0
   1d276:	0724      	lsls	r4, r4, #28
   1d278:	0f24      	lsrs	r4, r4, #28
   1d27a:	b2e3      	uxtb	r3, r4
   1d27c:	9301      	str	r3, [sp, #4]
   1d27e:	4b2c      	ldr	r3, [pc, #176]	; (1d330 <MacExecuteCommands+0x210>)
   1d280:	002a      	movs	r2, r5
   1d282:	5cf3      	ldrb	r3, [r6, r3]
   1d284:	2014      	movs	r0, #20
   1d286:	9302      	str	r3, [sp, #8]
   1d288:	2389      	movs	r3, #137	; 0x89
   1d28a:	009b      	lsls	r3, r3, #2
   1d28c:	5cf3      	ldrb	r3, [r6, r3]
   1d28e:	9303      	str	r3, [sp, #12]
   1d290:	4b28      	ldr	r3, [pc, #160]	; (1d334 <MacExecuteCommands+0x214>)
   1d292:	4798      	blx	r3
   1d294:	0033      	movs	r3, r6
   1d296:	782a      	ldrb	r2, [r5, #0]
   1d298:	33f3      	adds	r3, #243	; 0xf3
   1d29a:	701a      	strb	r2, [r3, #0]
   1d29c:	0033      	movs	r3, r6
   1d29e:	786a      	ldrb	r2, [r5, #1]
   1d2a0:	33f4      	adds	r3, #244	; 0xf4
   1d2a2:	701a      	strb	r2, [r3, #0]
   1d2a4:	4b24      	ldr	r3, [pc, #144]	; (1d338 <MacExecuteCommands+0x218>)
   1d2a6:	4798      	blx	r3
   1d2a8:	9802      	ldr	r0, [sp, #8]
   1d2aa:	4b24      	ldr	r3, [pc, #144]	; (1d33c <MacExecuteCommands+0x21c>)
   1d2ac:	4798      	blx	r3
   1d2ae:	0032      	movs	r2, r6
   1d2b0:	2308      	movs	r3, #8
   1d2b2:	3284      	adds	r2, #132	; 0x84
   1d2b4:	7851      	ldrb	r1, [r2, #1]
   1d2b6:	430b      	orrs	r3, r1
   1d2b8:	7053      	strb	r3, [r2, #1]
   1d2ba:	9803      	ldr	r0, [sp, #12]
   1d2bc:	4b20      	ldr	r3, [pc, #128]	; (1d340 <MacExecuteCommands+0x220>)
   1d2be:	4798      	blx	r3
   1d2c0:	0033      	movs	r3, r6
   1d2c2:	b2e2      	uxtb	r2, r4
   1d2c4:	33e1      	adds	r3, #225	; 0xe1
   1d2c6:	2a00      	cmp	r2, #0
   1d2c8:	d10e      	bne.n	1d2e8 <MacExecuteCommands+0x1c8>
   1d2ca:	701c      	strb	r4, [r3, #0]
   1d2cc:	2113      	movs	r1, #19
   1d2ce:	4c11      	ldr	r4, [pc, #68]	; (1d314 <MacExecuteCommands+0x1f4>)
   1d2d0:	2000      	movs	r0, #0
   1d2d2:	47a0      	blx	r4
   1d2d4:	2210      	movs	r2, #16
   1d2d6:	4b08      	ldr	r3, [pc, #32]	; (1d2f8 <MacExecuteCommands+0x1d8>)
   1d2d8:	2001      	movs	r0, #1
   1d2da:	3384      	adds	r3, #132	; 0x84
   1d2dc:	7859      	ldrb	r1, [r3, #1]
   1d2de:	430a      	orrs	r2, r1
   1d2e0:	705a      	strb	r2, [r3, #1]
   1d2e2:	210b      	movs	r1, #11
   1d2e4:	47a0      	blx	r4
   1d2e6:	e72c      	b.n	1d142 <MacExecuteCommands+0x22>
   1d2e8:	9a01      	ldr	r2, [sp, #4]
   1d2ea:	3a01      	subs	r2, #1
   1d2ec:	b2d2      	uxtb	r2, r2
   1d2ee:	701a      	strb	r2, [r3, #0]
   1d2f0:	0033      	movs	r3, r6
   1d2f2:	33e2      	adds	r3, #226	; 0xe2
   1d2f4:	701a      	strb	r2, [r3, #0]
   1d2f6:	e7e9      	b.n	1d2cc <MacExecuteCommands+0x1ac>
   1d2f8:	20001bd0 	.word	0x20001bd0
   1d2fc:	00000226 	.word	0x00000226
   1d300:	0001b4a5 	.word	0x0001b4a5
   1d304:	0001b369 	.word	0x0001b369
   1d308:	0001b26d 	.word	0x0001b26d
   1d30c:	0001cf91 	.word	0x0001cf91
   1d310:	0001a7c1 	.word	0x0001a7c1
   1d314:	00013b45 	.word	0x00013b45
   1d318:	0001b455 	.word	0x0001b455
   1d31c:	0001b3a1 	.word	0x0001b3a1
   1d320:	0001b5dd 	.word	0x0001b5dd
   1d324:	0002cc93 	.word	0x0002cc93
   1d328:	00000223 	.word	0x00000223
   1d32c:	00000229 	.word	0x00000229
   1d330:	00000225 	.word	0x00000225
   1d334:	0000d595 	.word	0x0000d595
   1d338:	0001cf65 	.word	0x0001cf65
   1d33c:	0001b0fd 	.word	0x0001b0fd
   1d340:	0001b091 	.word	0x0001b091

0001d344 <LorawanSetDataRange>:
   1d344:	2201      	movs	r2, #1
   1d346:	b530      	push	{r4, r5, lr}
   1d348:	b085      	sub	sp, #20
   1d34a:	ab01      	add	r3, sp, #4
   1d34c:	ac02      	add	r4, sp, #8
   1d34e:	7018      	strb	r0, [r3, #0]
   1d350:	7020      	strb	r0, [r4, #0]
   1d352:	7061      	strb	r1, [r4, #1]
   1d354:	2015      	movs	r0, #21
   1d356:	0019      	movs	r1, r3
   1d358:	4d11      	ldr	r5, [pc, #68]	; (1d3a0 <LorawanSetDataRange+0x5c>)
   1d35a:	705a      	strb	r2, [r3, #1]
   1d35c:	47a8      	blx	r5
   1d35e:	2808      	cmp	r0, #8
   1d360:	d003      	beq.n	1d36a <LorawanSetDataRange+0x26>
   1d362:	250a      	movs	r5, #10
   1d364:	0028      	movs	r0, r5
   1d366:	b005      	add	sp, #20
   1d368:	bd30      	pop	{r4, r5, pc}
   1d36a:	0021      	movs	r1, r4
   1d36c:	2012      	movs	r0, #18
   1d36e:	47a8      	blx	r5
   1d370:	0005      	movs	r5, r0
   1d372:	2808      	cmp	r0, #8
   1d374:	d1f5      	bne.n	1d362 <LorawanSetDataRange+0x1e>
   1d376:	0021      	movs	r1, r4
   1d378:	4b0a      	ldr	r3, [pc, #40]	; (1d3a4 <LorawanSetDataRange+0x60>)
   1d37a:	ac03      	add	r4, sp, #12
   1d37c:	2012      	movs	r0, #18
   1d37e:	4798      	blx	r3
   1d380:	0022      	movs	r2, r4
   1d382:	2100      	movs	r1, #0
   1d384:	4b08      	ldr	r3, [pc, #32]	; (1d3a8 <LorawanSetDataRange+0x64>)
   1d386:	2014      	movs	r0, #20
   1d388:	4798      	blx	r3
   1d38a:	4b08      	ldr	r3, [pc, #32]	; (1d3ac <LorawanSetDataRange+0x68>)
   1d38c:	7821      	ldrb	r1, [r4, #0]
   1d38e:	001a      	movs	r2, r3
   1d390:	32f3      	adds	r2, #243	; 0xf3
   1d392:	7011      	strb	r1, [r2, #0]
   1d394:	7862      	ldrb	r2, [r4, #1]
   1d396:	33f4      	adds	r3, #244	; 0xf4
   1d398:	701a      	strb	r2, [r3, #0]
   1d39a:	4b05      	ldr	r3, [pc, #20]	; (1d3b0 <LorawanSetDataRange+0x6c>)
   1d39c:	4798      	blx	r3
   1d39e:	e7e1      	b.n	1d364 <LorawanSetDataRange+0x20>
   1d3a0:	0000d5ed 	.word	0x0000d5ed
   1d3a4:	0000d639 	.word	0x0000d639
   1d3a8:	0000d595 	.word	0x0000d595
   1d3ac:	20001bd0 	.word	0x20001bd0
   1d3b0:	0001cf65 	.word	0x0001cf65

0001d3b4 <LorawanSetChannelIdStatus>:
   1d3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d3b6:	466b      	mov	r3, sp
   1d3b8:	7018      	strb	r0, [r3, #0]
   1d3ba:	7059      	strb	r1, [r3, #1]
   1d3bc:	2016      	movs	r0, #22
   1d3be:	4669      	mov	r1, sp
   1d3c0:	4b0c      	ldr	r3, [pc, #48]	; (1d3f4 <LorawanSetChannelIdStatus+0x40>)
   1d3c2:	4798      	blx	r3
   1d3c4:	0004      	movs	r4, r0
   1d3c6:	2808      	cmp	r0, #8
   1d3c8:	d111      	bne.n	1d3ee <LorawanSetChannelIdStatus+0x3a>
   1d3ca:	ad01      	add	r5, sp, #4
   1d3cc:	002a      	movs	r2, r5
   1d3ce:	2100      	movs	r1, #0
   1d3d0:	4b09      	ldr	r3, [pc, #36]	; (1d3f8 <LorawanSetChannelIdStatus+0x44>)
   1d3d2:	2014      	movs	r0, #20
   1d3d4:	4798      	blx	r3
   1d3d6:	4b09      	ldr	r3, [pc, #36]	; (1d3fc <LorawanSetChannelIdStatus+0x48>)
   1d3d8:	7829      	ldrb	r1, [r5, #0]
   1d3da:	001a      	movs	r2, r3
   1d3dc:	32f3      	adds	r2, #243	; 0xf3
   1d3de:	7011      	strb	r1, [r2, #0]
   1d3e0:	786a      	ldrb	r2, [r5, #1]
   1d3e2:	33f4      	adds	r3, #244	; 0xf4
   1d3e4:	701a      	strb	r2, [r3, #0]
   1d3e6:	4b06      	ldr	r3, [pc, #24]	; (1d400 <LorawanSetChannelIdStatus+0x4c>)
   1d3e8:	4798      	blx	r3
   1d3ea:	0020      	movs	r0, r4
   1d3ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1d3ee:	240a      	movs	r4, #10
   1d3f0:	e7fb      	b.n	1d3ea <LorawanSetChannelIdStatus+0x36>
   1d3f2:	46c0      	nop			; (mov r8, r8)
   1d3f4:	0000d639 	.word	0x0000d639
   1d3f8:	0000d595 	.word	0x0000d595
   1d3fc:	20001bd0 	.word	0x20001bd0
   1d400:	0001cf65 	.word	0x0001cf65

0001d404 <LORAWAN_RxDone>:
   1d404:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d406:	4bce      	ldr	r3, [pc, #824]	; (1d740 <LORAWAN_RxDone+0x33c>)
   1d408:	b093      	sub	sp, #76	; 0x4c
   1d40a:	781b      	ldrb	r3, [r3, #0]
   1d40c:	0007      	movs	r7, r0
   1d40e:	b25a      	sxtb	r2, r3
   1d410:	000c      	movs	r4, r1
   1d412:	4ecc      	ldr	r6, [pc, #816]	; (1d744 <LORAWAN_RxDone+0x340>)
   1d414:	2a00      	cmp	r2, #0
   1d416:	da01      	bge.n	1d41c <LORAWAN_RxDone+0x18>
   1d418:	f000 fc9a 	bl	1dd50 <LORAWAN_RxDone+0x94c>
   1d41c:	7801      	ldrb	r1, [r0, #0]
   1d41e:	221f      	movs	r2, #31
   1d420:	0008      	movs	r0, r1
   1d422:	4390      	bics	r0, r2
   1d424:	0002      	movs	r2, r0
   1d426:	2820      	cmp	r0, #32
   1d428:	d000      	beq.n	1d42c <LORAWAN_RxDone+0x28>
   1d42a:	e1c1      	b.n	1d7b0 <LORAWAN_RxDone+0x3ac>
   1d42c:	7832      	ldrb	r2, [r6, #0]
   1d42e:	2a00      	cmp	r2, #0
   1d430:	d001      	beq.n	1d436 <LORAWAN_RxDone+0x32>
   1d432:	f000 fc79 	bl	1dd28 <LORAWAN_RxDone+0x924>
   1d436:	0032      	movs	r2, r6
   1d438:	3294      	adds	r2, #148	; 0x94
   1d43a:	7812      	ldrb	r2, [r2, #0]
   1d43c:	0752      	lsls	r2, r2, #29
   1d43e:	d401      	bmi.n	1d444 <LORAWAN_RxDone+0x40>
   1d440:	f000 fc72 	bl	1dd28 <LORAWAN_RxDone+0x924>
   1d444:	1e63      	subs	r3, r4, #1
   1d446:	b2db      	uxtb	r3, r3
   1d448:	9306      	str	r3, [sp, #24]
   1d44a:	4bbf      	ldr	r3, [pc, #764]	; (1d748 <LORAWAN_RxDone+0x344>)
   1d44c:	469c      	mov	ip, r3
   1d44e:	9b06      	ldr	r3, [sp, #24]
   1d450:	2b00      	cmp	r3, #0
   1d452:	d12b      	bne.n	1d4ac <LORAWAN_RxDone+0xa8>
   1d454:	1f25      	subs	r5, r4, #4
   1d456:	b2eb      	uxtb	r3, r5
   1d458:	4660      	mov	r0, ip
   1d45a:	9300      	str	r3, [sp, #0]
   1d45c:	4abb      	ldr	r2, [pc, #748]	; (1d74c <LORAWAN_RxDone+0x348>)
   1d45e:	003b      	movs	r3, r7
   1d460:	9906      	ldr	r1, [sp, #24]
   1d462:	4ebb      	ldr	r6, [pc, #748]	; (1d750 <LORAWAN_RxDone+0x34c>)
   1d464:	47b0      	blx	r6
   1d466:	2204      	movs	r2, #4
   1d468:	49b8      	ldr	r1, [pc, #736]	; (1d74c <LORAWAN_RxDone+0x348>)
   1d46a:	4bba      	ldr	r3, [pc, #744]	; (1d754 <LORAWAN_RxDone+0x350>)
   1d46c:	a810      	add	r0, sp, #64	; 0x40
   1d46e:	4798      	blx	r3
   1d470:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1d472:	1979      	adds	r1, r7, r5
   1d474:	2204      	movs	r2, #4
   1d476:	4bb7      	ldr	r3, [pc, #732]	; (1d754 <LORAWAN_RxDone+0x350>)
   1d478:	a810      	add	r0, sp, #64	; 0x40
   1d47a:	960d      	str	r6, [sp, #52]	; 0x34
   1d47c:	4798      	blx	r3
   1d47e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d480:	4db0      	ldr	r5, [pc, #704]	; (1d744 <LORAWAN_RxDone+0x340>)
   1d482:	220e      	movs	r2, #14
   1d484:	42b3      	cmp	r3, r6
   1d486:	d028      	beq.n	1d4da <LORAWAN_RxDone+0xd6>
   1d488:	002b      	movs	r3, r5
   1d48a:	3384      	adds	r3, #132	; 0x84
   1d48c:	781b      	ldrb	r3, [r3, #0]
   1d48e:	4013      	ands	r3, r2
   1d490:	2b0a      	cmp	r3, #10
   1d492:	d005      	beq.n	1d4a0 <LORAWAN_RxDone+0x9c>
   1d494:	2b06      	cmp	r3, #6
   1d496:	d106      	bne.n	1d4a6 <LORAWAN_RxDone+0xa2>
   1d498:	35f9      	adds	r5, #249	; 0xf9
   1d49a:	782b      	ldrb	r3, [r5, #0]
   1d49c:	2b00      	cmp	r3, #0
   1d49e:	d002      	beq.n	1d4a6 <LORAWAN_RxDone+0xa2>
   1d4a0:	2018      	movs	r0, #24
   1d4a2:	4bad      	ldr	r3, [pc, #692]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d4a4:	4798      	blx	r3
   1d4a6:	4bad      	ldr	r3, [pc, #692]	; (1d75c <LORAWAN_RxDone+0x358>)
   1d4a8:	4798      	blx	r3
   1d4aa:	e1ed      	b.n	1d888 <LORAWAN_RxDone+0x484>
   1d4ac:	9b06      	ldr	r3, [sp, #24]
   1d4ae:	4662      	mov	r2, ip
   1d4b0:	1ae0      	subs	r0, r4, r3
   1d4b2:	1838      	adds	r0, r7, r0
   1d4b4:	2100      	movs	r1, #0
   1d4b6:	4baa      	ldr	r3, [pc, #680]	; (1d760 <LORAWAN_RxDone+0x35c>)
   1d4b8:	4798      	blx	r3
   1d4ba:	2800      	cmp	r0, #0
   1d4bc:	d006      	beq.n	1d4cc <LORAWAN_RxDone+0xc8>
   1d4be:	4ba6      	ldr	r3, [pc, #664]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d4c0:	4798      	blx	r3
   1d4c2:	4ba6      	ldr	r3, [pc, #664]	; (1d75c <LORAWAN_RxDone+0x358>)
   1d4c4:	4798      	blx	r3
   1d4c6:	201f      	movs	r0, #31
   1d4c8:	b013      	add	sp, #76	; 0x4c
   1d4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d4cc:	9b06      	ldr	r3, [sp, #24]
   1d4ce:	2b10      	cmp	r3, #16
   1d4d0:	d901      	bls.n	1d4d6 <LORAWAN_RxDone+0xd2>
   1d4d2:	3b10      	subs	r3, #16
   1d4d4:	e7b7      	b.n	1d446 <LORAWAN_RxDone+0x42>
   1d4d6:	9006      	str	r0, [sp, #24]
   1d4d8:	e7b7      	b.n	1d44a <LORAWAN_RxDone+0x46>
   1d4da:	002b      	movs	r3, r5
   1d4dc:	3384      	adds	r3, #132	; 0x84
   1d4de:	781b      	ldrb	r3, [r3, #0]
   1d4e0:	4013      	ands	r3, r2
   1d4e2:	2b06      	cmp	r3, #6
   1d4e4:	d104      	bne.n	1d4f0 <LORAWAN_RxDone+0xec>
   1d4e6:	002b      	movs	r3, r5
   1d4e8:	33ec      	adds	r3, #236	; 0xec
   1d4ea:	7818      	ldrb	r0, [r3, #0]
   1d4ec:	4b9d      	ldr	r3, [pc, #628]	; (1d764 <LORAWAN_RxDone+0x360>)
   1d4ee:	4798      	blx	r3
   1d4f0:	78bb      	ldrb	r3, [r7, #2]
   1d4f2:	78fa      	ldrb	r2, [r7, #3]
   1d4f4:	021b      	lsls	r3, r3, #8
   1d4f6:	0412      	lsls	r2, r2, #16
   1d4f8:	4313      	orrs	r3, r2
   1d4fa:	2291      	movs	r2, #145	; 0x91
   1d4fc:	7879      	ldrb	r1, [r7, #1]
   1d4fe:	0092      	lsls	r2, r2, #2
   1d500:	430b      	orrs	r3, r1
   1d502:	58a9      	ldr	r1, [r5, r2]
   1d504:	1c48      	adds	r0, r1, #1
   1d506:	d006      	beq.n	1d516 <LORAWAN_RxDone+0x112>
   1d508:	428b      	cmp	r3, r1
   1d50a:	d804      	bhi.n	1d516 <LORAWAN_RxDone+0x112>
   1d50c:	2024      	movs	r0, #36	; 0x24
   1d50e:	4b92      	ldr	r3, [pc, #584]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d510:	4798      	blx	r3
   1d512:	2024      	movs	r0, #36	; 0x24
   1d514:	e7d8      	b.n	1d4c8 <LORAWAN_RxDone+0xc4>
   1d516:	210f      	movs	r1, #15
   1d518:	4e93      	ldr	r6, [pc, #588]	; (1d768 <LORAWAN_RxDone+0x364>)
   1d51a:	2001      	movs	r0, #1
   1d51c:	50ab      	str	r3, [r5, r2]
   1d51e:	47b0      	blx	r6
   1d520:	7a3a      	ldrb	r2, [r7, #8]
   1d522:	79fb      	ldrb	r3, [r7, #7]
   1d524:	0212      	lsls	r2, r2, #8
   1d526:	431a      	orrs	r2, r3
   1d528:	7a7b      	ldrb	r3, [r7, #9]
   1d52a:	2001      	movs	r0, #1
   1d52c:	041b      	lsls	r3, r3, #16
   1d52e:	431a      	orrs	r2, r3
   1d530:	7abb      	ldrb	r3, [r7, #10]
   1d532:	061b      	lsls	r3, r3, #24
   1d534:	4313      	orrs	r3, r2
   1d536:	0a19      	lsrs	r1, r3, #8
   1d538:	706b      	strb	r3, [r5, #1]
   1d53a:	70a9      	strb	r1, [r5, #2]
   1d53c:	0c19      	lsrs	r1, r3, #16
   1d53e:	0e1b      	lsrs	r3, r3, #24
   1d540:	70e9      	strb	r1, [r5, #3]
   1d542:	712b      	strb	r3, [r5, #4]
   1d544:	250f      	movs	r5, #15
   1d546:	2103      	movs	r1, #3
   1d548:	47b0      	blx	r6
   1d54a:	7b38      	ldrb	r0, [r7, #12]
   1d54c:	4b87      	ldr	r3, [pc, #540]	; (1d76c <LORAWAN_RxDone+0x368>)
   1d54e:	4028      	ands	r0, r5
   1d550:	4798      	blx	r3
   1d552:	7af8      	ldrb	r0, [r7, #11]
   1d554:	4b86      	ldr	r3, [pc, #536]	; (1d770 <LORAWAN_RxDone+0x36c>)
   1d556:	0641      	lsls	r1, r0, #25
   1d558:	0700      	lsls	r0, r0, #28
   1d55a:	0f49      	lsrs	r1, r1, #29
   1d55c:	0f00      	lsrs	r0, r0, #28
   1d55e:	4798      	blx	r3
   1d560:	2100      	movs	r1, #0
   1d562:	203b      	movs	r0, #59	; 0x3b
   1d564:	4b83      	ldr	r3, [pc, #524]	; (1d774 <LORAWAN_RxDone+0x370>)
   1d566:	4798      	blx	r3
   1d568:	2c21      	cmp	r4, #33	; 0x21
   1d56a:	d000      	beq.n	1d56e <LORAWAN_RxDone+0x16a>
   1d56c:	e08c      	b.n	1d688 <LORAWAN_RxDone+0x284>
   1d56e:	ab04      	add	r3, sp, #16
   1d570:	3c07      	subs	r4, #7
   1d572:	18e4      	adds	r4, r4, r3
   1d574:	0022      	movs	r2, r4
   1d576:	4b80      	ldr	r3, [pc, #512]	; (1d778 <LORAWAN_RxDone+0x374>)
   1d578:	4980      	ldr	r1, [pc, #512]	; (1d77c <LORAWAN_RxDone+0x378>)
   1d57a:	2007      	movs	r0, #7
   1d57c:	4798      	blx	r3
   1d57e:	7823      	ldrb	r3, [r4, #0]
   1d580:	2bff      	cmp	r3, #255	; 0xff
   1d582:	d100      	bne.n	1d586 <LORAWAN_RxDone+0x182>
   1d584:	e080      	b.n	1d688 <LORAWAN_RxDone+0x284>
   1d586:	2350      	movs	r3, #80	; 0x50
   1d588:	43ab      	bics	r3, r5
   1d58a:	9308      	str	r3, [sp, #32]
   1d58c:	003b      	movs	r3, r7
   1d58e:	330d      	adds	r3, #13
   1d590:	9307      	str	r3, [sp, #28]
   1d592:	2600      	movs	r6, #0
   1d594:	2203      	movs	r2, #3
   1d596:	9907      	ldr	r1, [sp, #28]
   1d598:	4b6e      	ldr	r3, [pc, #440]	; (1d754 <LORAWAN_RxDone+0x350>)
   1d59a:	a80e      	add	r0, sp, #56	; 0x38
   1d59c:	960e      	str	r6, [sp, #56]	; 0x38
   1d59e:	4798      	blx	r3
   1d5a0:	2364      	movs	r3, #100	; 0x64
   1d5a2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d5a4:	aa04      	add	r2, sp, #16
   1d5a6:	4359      	muls	r1, r3
   1d5a8:	3b4a      	subs	r3, #74	; 0x4a
   1d5aa:	189b      	adds	r3, r3, r2
   1d5ac:	7818      	ldrb	r0, [r3, #0]
   1d5ae:	9b06      	ldr	r3, [sp, #24]
   1d5b0:	910e      	str	r1, [sp, #56]	; 0x38
   1d5b2:	1818      	adds	r0, r3, r0
   1d5b4:	b2c0      	uxtb	r0, r0
   1d5b6:	76d0      	strb	r0, [r2, #27]
   1d5b8:	42b1      	cmp	r1, r6
   1d5ba:	d100      	bne.n	1d5be <LORAWAN_RxDone+0x1ba>
   1d5bc:	e0a7      	b.n	1d70e <LORAWAN_RxDone+0x30a>
   1d5be:	466b      	mov	r3, sp
   1d5c0:	2220      	movs	r2, #32
   1d5c2:	189b      	adds	r3, r3, r2
   1d5c4:	781b      	ldrb	r3, [r3, #0]
   1d5c6:	ad10      	add	r5, sp, #64	; 0x40
   1d5c8:	ac0b      	add	r4, sp, #44	; 0x2c
   1d5ca:	7128      	strb	r0, [r5, #4]
   1d5cc:	9110      	str	r1, [sp, #64]	; 0x40
   1d5ce:	7020      	strb	r0, [r4, #0]
   1d5d0:	7063      	strb	r3, [r4, #1]
   1d5d2:	0029      	movs	r1, r5
   1d5d4:	2002      	movs	r0, #2
   1d5d6:	4b6a      	ldr	r3, [pc, #424]	; (1d780 <LORAWAN_RxDone+0x37c>)
   1d5d8:	4798      	blx	r3
   1d5da:	2808      	cmp	r0, #8
   1d5dc:	d140      	bne.n	1d660 <LORAWAN_RxDone+0x25c>
   1d5de:	0029      	movs	r1, r5
   1d5e0:	0030      	movs	r0, r6
   1d5e2:	4b64      	ldr	r3, [pc, #400]	; (1d774 <LORAWAN_RxDone+0x370>)
   1d5e4:	4798      	blx	r3
   1d5e6:	ad0c      	add	r5, sp, #48	; 0x30
   1d5e8:	0021      	movs	r1, r4
   1d5ea:	4b62      	ldr	r3, [pc, #392]	; (1d774 <LORAWAN_RxDone+0x370>)
   1d5ec:	2012      	movs	r0, #18
   1d5ee:	4798      	blx	r3
   1d5f0:	0031      	movs	r1, r6
   1d5f2:	002a      	movs	r2, r5
   1d5f4:	4e60      	ldr	r6, [pc, #384]	; (1d778 <LORAWAN_RxDone+0x374>)
   1d5f6:	2014      	movs	r0, #20
   1d5f8:	47b0      	blx	r6
   1d5fa:	4c52      	ldr	r4, [pc, #328]	; (1d744 <LORAWAN_RxDone+0x340>)
   1d5fc:	782a      	ldrb	r2, [r5, #0]
   1d5fe:	0023      	movs	r3, r4
   1d600:	33f3      	adds	r3, #243	; 0xf3
   1d602:	701a      	strb	r2, [r3, #0]
   1d604:	0023      	movs	r3, r4
   1d606:	786a      	ldrb	r2, [r5, #1]
   1d608:	2522      	movs	r5, #34	; 0x22
   1d60a:	33f4      	adds	r3, #244	; 0xf4
   1d60c:	701a      	strb	r2, [r3, #0]
   1d60e:	4b5d      	ldr	r3, [pc, #372]	; (1d784 <LORAWAN_RxDone+0x380>)
   1d610:	4798      	blx	r3
   1d612:	ab04      	add	r3, sp, #16
   1d614:	18ed      	adds	r5, r5, r3
   1d616:	231b      	movs	r3, #27
   1d618:	a904      	add	r1, sp, #16
   1d61a:	185b      	adds	r3, r3, r1
   1d61c:	0019      	movs	r1, r3
   1d61e:	002a      	movs	r2, r5
   1d620:	201e      	movs	r0, #30
   1d622:	47b0      	blx	r6
   1d624:	0023      	movs	r3, r4
   1d626:	33ff      	adds	r3, #255	; 0xff
   1d628:	7f5b      	ldrb	r3, [r3, #29]
   1d62a:	079b      	lsls	r3, r3, #30
   1d62c:	d508      	bpl.n	1d640 <LORAWAN_RxDone+0x23c>
   1d62e:	ab04      	add	r3, sp, #16
   1d630:	7edb      	ldrb	r3, [r3, #27]
   1d632:	a90f      	add	r1, sp, #60	; 0x3c
   1d634:	708b      	strb	r3, [r1, #2]
   1d636:	882b      	ldrh	r3, [r5, #0]
   1d638:	201e      	movs	r0, #30
   1d63a:	800b      	strh	r3, [r1, #0]
   1d63c:	4b4d      	ldr	r3, [pc, #308]	; (1d774 <LORAWAN_RxDone+0x370>)
   1d63e:	4798      	blx	r3
   1d640:	231b      	movs	r3, #27
   1d642:	aa04      	add	r2, sp, #16
   1d644:	189b      	adds	r3, r3, r2
   1d646:	7818      	ldrb	r0, [r3, #0]
   1d648:	2101      	movs	r1, #1
   1d64a:	4b4f      	ldr	r3, [pc, #316]	; (1d788 <LORAWAN_RxDone+0x384>)
   1d64c:	4798      	blx	r3
   1d64e:	2204      	movs	r2, #4
   1d650:	3484      	adds	r4, #132	; 0x84
   1d652:	7863      	ldrb	r3, [r4, #1]
   1d654:	210b      	movs	r1, #11
   1d656:	4313      	orrs	r3, r2
   1d658:	7063      	strb	r3, [r4, #1]
   1d65a:	2001      	movs	r0, #1
   1d65c:	4b42      	ldr	r3, [pc, #264]	; (1d768 <LORAWAN_RxDone+0x364>)
   1d65e:	4798      	blx	r3
   1d660:	9b06      	ldr	r3, [sp, #24]
   1d662:	3301      	adds	r3, #1
   1d664:	b2db      	uxtb	r3, r3
   1d666:	9306      	str	r3, [sp, #24]
   1d668:	9b07      	ldr	r3, [sp, #28]
   1d66a:	3303      	adds	r3, #3
   1d66c:	9307      	str	r3, [sp, #28]
   1d66e:	9b06      	ldr	r3, [sp, #24]
   1d670:	2b05      	cmp	r3, #5
   1d672:	d18e      	bne.n	1d592 <LORAWAN_RxDone+0x18e>
   1d674:	2204      	movs	r2, #4
   1d676:	4b33      	ldr	r3, [pc, #204]	; (1d744 <LORAWAN_RxDone+0x340>)
   1d678:	2001      	movs	r0, #1
   1d67a:	3384      	adds	r3, #132	; 0x84
   1d67c:	7859      	ldrb	r1, [r3, #1]
   1d67e:	430a      	orrs	r2, r1
   1d680:	705a      	strb	r2, [r3, #1]
   1d682:	210b      	movs	r1, #11
   1d684:	4b38      	ldr	r3, [pc, #224]	; (1d768 <LORAWAN_RxDone+0x364>)
   1d686:	4798      	blx	r3
   1d688:	4d40      	ldr	r5, [pc, #256]	; (1d78c <LORAWAN_RxDone+0x388>)
   1d68a:	1c7e      	adds	r6, r7, #1
   1d68c:	3704      	adds	r7, #4
   1d68e:	0028      	movs	r0, r5
   1d690:	003a      	movs	r2, r7
   1d692:	0031      	movs	r1, r6
   1d694:	4b3e      	ldr	r3, [pc, #248]	; (1d790 <LORAWAN_RxDone+0x38c>)
   1d696:	4798      	blx	r3
   1d698:	2302      	movs	r3, #2
   1d69a:	4c2a      	ldr	r4, [pc, #168]	; (1d744 <LORAWAN_RxDone+0x340>)
   1d69c:	0028      	movs	r0, r5
   1d69e:	7563      	strb	r3, [r4, #21]
   1d6a0:	4a29      	ldr	r2, [pc, #164]	; (1d748 <LORAWAN_RxDone+0x344>)
   1d6a2:	3b01      	subs	r3, #1
   1d6a4:	2100      	movs	r1, #0
   1d6a6:	4d3b      	ldr	r5, [pc, #236]	; (1d794 <LORAWAN_RxDone+0x390>)
   1d6a8:	47a8      	blx	r5
   1d6aa:	2800      	cmp	r0, #0
   1d6ac:	d003      	beq.n	1d6b6 <LORAWAN_RxDone+0x2b2>
   1d6ae:	4b2a      	ldr	r3, [pc, #168]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d6b0:	4798      	blx	r3
   1d6b2:	4b2a      	ldr	r3, [pc, #168]	; (1d75c <LORAWAN_RxDone+0x358>)
   1d6b4:	4798      	blx	r3
   1d6b6:	2105      	movs	r1, #5
   1d6b8:	4b2b      	ldr	r3, [pc, #172]	; (1d768 <LORAWAN_RxDone+0x364>)
   1d6ba:	2001      	movs	r0, #1
   1d6bc:	4798      	blx	r3
   1d6be:	4d36      	ldr	r5, [pc, #216]	; (1d798 <LORAWAN_RxDone+0x394>)
   1d6c0:	003a      	movs	r2, r7
   1d6c2:	0028      	movs	r0, r5
   1d6c4:	0031      	movs	r1, r6
   1d6c6:	4b32      	ldr	r3, [pc, #200]	; (1d790 <LORAWAN_RxDone+0x38c>)
   1d6c8:	4798      	blx	r3
   1d6ca:	2301      	movs	r3, #1
   1d6cc:	0028      	movs	r0, r5
   1d6ce:	7163      	strb	r3, [r4, #5]
   1d6d0:	4a1d      	ldr	r2, [pc, #116]	; (1d748 <LORAWAN_RxDone+0x344>)
   1d6d2:	18db      	adds	r3, r3, r3
   1d6d4:	2100      	movs	r1, #0
   1d6d6:	4d2f      	ldr	r5, [pc, #188]	; (1d794 <LORAWAN_RxDone+0x390>)
   1d6d8:	47a8      	blx	r5
   1d6da:	2800      	cmp	r0, #0
   1d6dc:	d003      	beq.n	1d6e6 <LORAWAN_RxDone+0x2e2>
   1d6de:	4b1e      	ldr	r3, [pc, #120]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d6e0:	4798      	blx	r3
   1d6e2:	4b1e      	ldr	r3, [pc, #120]	; (1d75c <LORAWAN_RxDone+0x358>)
   1d6e4:	4798      	blx	r3
   1d6e6:	4b20      	ldr	r3, [pc, #128]	; (1d768 <LORAWAN_RxDone+0x364>)
   1d6e8:	2104      	movs	r1, #4
   1d6ea:	2001      	movs	r0, #1
   1d6ec:	4798      	blx	r3
   1d6ee:	4b2b      	ldr	r3, [pc, #172]	; (1d79c <LORAWAN_RxDone+0x398>)
   1d6f0:	5ce3      	ldrb	r3, [r4, r3]
   1d6f2:	2b00      	cmp	r3, #0
   1d6f4:	d017      	beq.n	1d726 <LORAWAN_RxDone+0x322>
   1d6f6:	492a      	ldr	r1, [pc, #168]	; (1d7a0 <LORAWAN_RxDone+0x39c>)
   1d6f8:	2002      	movs	r0, #2
   1d6fa:	4c2a      	ldr	r4, [pc, #168]	; (1d7a4 <LORAWAN_RxDone+0x3a0>)
   1d6fc:	47a0      	blx	r4
   1d6fe:	2800      	cmp	r0, #0
   1d700:	d008      	beq.n	1d714 <LORAWAN_RxDone+0x310>
   1d702:	4b15      	ldr	r3, [pc, #84]	; (1d758 <LORAWAN_RxDone+0x354>)
   1d704:	4798      	blx	r3
   1d706:	4b15      	ldr	r3, [pc, #84]	; (1d75c <LORAWAN_RxDone+0x358>)
   1d708:	4798      	blx	r3
   1d70a:	2023      	movs	r0, #35	; 0x23
   1d70c:	e6dc      	b.n	1d4c8 <LORAWAN_RxDone+0xc4>
   1d70e:	4b1e      	ldr	r3, [pc, #120]	; (1d788 <LORAWAN_RxDone+0x384>)
   1d710:	4798      	blx	r3
   1d712:	e7a5      	b.n	1d660 <LORAWAN_RxDone+0x25c>
   1d714:	4924      	ldr	r1, [pc, #144]	; (1d7a8 <LORAWAN_RxDone+0x3a4>)
   1d716:	2001      	movs	r0, #1
   1d718:	47a0      	blx	r4
   1d71a:	2800      	cmp	r0, #0
   1d71c:	d1f1      	bne.n	1d702 <LORAWAN_RxDone+0x2fe>
   1d71e:	4b23      	ldr	r3, [pc, #140]	; (1d7ac <LORAWAN_RxDone+0x3a8>)
   1d720:	4798      	blx	r3
   1d722:	2008      	movs	r0, #8
   1d724:	e6d0      	b.n	1d4c8 <LORAWAN_RxDone+0xc4>
   1d726:	0020      	movs	r0, r4
   1d728:	0021      	movs	r1, r4
   1d72a:	2210      	movs	r2, #16
   1d72c:	3115      	adds	r1, #21
   1d72e:	4d09      	ldr	r5, [pc, #36]	; (1d754 <LORAWAN_RxDone+0x350>)
   1d730:	3035      	adds	r0, #53	; 0x35
   1d732:	47a8      	blx	r5
   1d734:	0020      	movs	r0, r4
   1d736:	1d61      	adds	r1, r4, #5
   1d738:	2210      	movs	r2, #16
   1d73a:	3025      	adds	r0, #37	; 0x25
   1d73c:	47a8      	blx	r5
   1d73e:	e7ee      	b.n	1d71e <LORAWAN_RxDone+0x31a>
   1d740:	20001c54 	.word	0x20001c54
   1d744:	20001bd0 	.word	0x20001bd0
   1d748:	20001c15 	.word	0x20001c15
   1d74c:	20001164 	.word	0x20001164
   1d750:	000133b5 	.word	0x000133b5
   1d754:	00024149 	.word	0x00024149
   1d758:	0001b209 	.word	0x0001b209
   1d75c:	0001ce99 	.word	0x0001ce99
   1d760:	000132dd 	.word	0x000132dd
   1d764:	00015cfd 	.word	0x00015cfd
   1d768:	00013b45 	.word	0x00013b45
   1d76c:	0001a7c1 	.word	0x0001a7c1
   1d770:	0001b0ad 	.word	0x0001b0ad
   1d774:	0000d639 	.word	0x0000d639
   1d778:	0000d595 	.word	0x0000d595
   1d77c:	20001cb7 	.word	0x20001cb7
   1d780:	0000d5ed 	.word	0x0000d5ed
   1d784:	0001cf65 	.word	0x0001cf65
   1d788:	0001d3b5 	.word	0x0001d3b5
   1d78c:	20001be5 	.word	0x20001be5
   1d790:	0001aaed 	.word	0x0001aaed
   1d794:	00013339 	.word	0x00013339
   1d798:	20001bd5 	.word	0x20001bd5
   1d79c:	0000022d 	.word	0x0000022d
   1d7a0:	20001bf5 	.word	0x20001bf5
   1d7a4:	00013389 	.word	0x00013389
   1d7a8:	20001c05 	.word	0x20001c05
   1d7ac:	0001aa09 	.word	0x0001aa09
   1d7b0:	3a60      	subs	r2, #96	; 0x60
   1d7b2:	0010      	movs	r0, r2
   1d7b4:	22bf      	movs	r2, #191	; 0xbf
   1d7b6:	4010      	ands	r0, r2
   1d7b8:	9006      	str	r0, [sp, #24]
   1d7ba:	d000      	beq.n	1d7be <LORAWAN_RxDone+0x3ba>
   1d7bc:	e2b4      	b.n	1dd28 <LORAWAN_RxDone+0x924>
   1d7be:	2501      	movs	r5, #1
   1d7c0:	422b      	tst	r3, r5
   1d7c2:	d100      	bne.n	1d7c6 <LORAWAN_RxDone+0x3c2>
   1d7c4:	e2b0      	b.n	1dd28 <LORAWAN_RxDone+0x924>
   1d7c6:	7932      	ldrb	r2, [r6, #4]
   1d7c8:	6833      	ldr	r3, [r6, #0]
   1d7ca:	0612      	lsls	r2, r2, #24
   1d7cc:	0a1b      	lsrs	r3, r3, #8
   1d7ce:	431a      	orrs	r2, r3
   1d7d0:	9208      	str	r2, [sp, #32]
   1d7d2:	466a      	mov	r2, sp
   1d7d4:	0033      	movs	r3, r6
   1d7d6:	7e12      	ldrb	r2, [r2, #24]
   1d7d8:	33e0      	adds	r3, #224	; 0xe0
   1d7da:	701a      	strb	r2, [r3, #0]
   1d7dc:	78ba      	ldrb	r2, [r7, #2]
   1d7de:	787b      	ldrb	r3, [r7, #1]
   1d7e0:	0212      	lsls	r2, r2, #8
   1d7e2:	431a      	orrs	r2, r3
   1d7e4:	78fb      	ldrb	r3, [r7, #3]
   1d7e6:	041b      	lsls	r3, r3, #16
   1d7e8:	431a      	orrs	r2, r3
   1d7ea:	793b      	ldrb	r3, [r7, #4]
   1d7ec:	061b      	lsls	r3, r3, #24
   1d7ee:	4313      	orrs	r3, r2
   1d7f0:	9a08      	ldr	r2, [sp, #32]
   1d7f2:	429a      	cmp	r2, r3
   1d7f4:	d100      	bne.n	1d7f8 <LORAWAN_RxDone+0x3f4>
   1d7f6:	e2c8      	b.n	1dd8a <LORAWAN_RxDone+0x986>
   1d7f8:	ab04      	add	r3, sp, #16
   1d7fa:	3521      	adds	r5, #33	; 0x21
   1d7fc:	18ed      	adds	r5, r5, r3
   1d7fe:	9506      	str	r5, [sp, #24]
   1d800:	002b      	movs	r3, r5
   1d802:	7a3a      	ldrb	r2, [r7, #8]
   1d804:	0949      	lsrs	r1, r1, #5
   1d806:	0038      	movs	r0, r7
   1d808:	4ddb      	ldr	r5, [pc, #876]	; (1db78 <LORAWAN_RxDone+0x774>)
   1d80a:	47a8      	blx	r5
   1d80c:	2808      	cmp	r0, #8
   1d80e:	d133      	bne.n	1d878 <LORAWAN_RxDone+0x474>
   1d810:	9b06      	ldr	r3, [sp, #24]
   1d812:	7819      	ldrb	r1, [r3, #0]
   1d814:	233c      	movs	r3, #60	; 0x3c
   1d816:	434b      	muls	r3, r1
   1d818:	001d      	movs	r5, r3
   1d81a:	3535      	adds	r5, #53	; 0x35
   1d81c:	35ff      	adds	r5, #255	; 0xff
   1d81e:	19ad      	adds	r5, r5, r6
   1d820:	18f6      	adds	r6, r6, r3
   1d822:	0033      	movs	r3, r6
   1d824:	33fc      	adds	r3, #252	; 0xfc
   1d826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1d828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1d82a:	9206      	str	r2, [sp, #24]
   1d82c:	9307      	str	r3, [sp, #28]
   1d82e:	79fb      	ldrb	r3, [r7, #7]
   1d830:	79ba      	ldrb	r2, [r7, #6]
   1d832:	021b      	lsls	r3, r3, #8
   1d834:	4313      	orrs	r3, r2
   1d836:	0032      	movs	r2, r6
   1d838:	3255      	adds	r2, #85	; 0x55
   1d83a:	32ff      	adds	r2, #255	; 0xff
   1d83c:	8810      	ldrh	r0, [r2, #0]
   1d83e:	4298      	cmp	r0, r3
   1d840:	d908      	bls.n	1d854 <LORAWAN_RxDone+0x450>
   1d842:	3657      	adds	r6, #87	; 0x57
   1d844:	36ff      	adds	r6, #255	; 0xff
   1d846:	8833      	ldrh	r3, [r6, #0]
   1d848:	3301      	adds	r3, #1
   1d84a:	8033      	strh	r3, [r6, #0]
   1d84c:	79fb      	ldrb	r3, [r7, #7]
   1d84e:	79be      	ldrb	r6, [r7, #6]
   1d850:	021b      	lsls	r3, r3, #8
   1d852:	4333      	orrs	r3, r6
   1d854:	8013      	strh	r3, [r2, #0]
   1d856:	233c      	movs	r3, #60	; 0x3c
   1d858:	434b      	muls	r3, r1
   1d85a:	49c8      	ldr	r1, [pc, #800]	; (1db7c <LORAWAN_RxDone+0x778>)
   1d85c:	1f22      	subs	r2, r4, #4
   1d85e:	18c9      	adds	r1, r1, r3
   1d860:	9b06      	ldr	r3, [sp, #24]
   1d862:	31fc      	adds	r1, #252	; 0xfc
   1d864:	9300      	str	r3, [sp, #0]
   1d866:	b2d2      	uxtb	r2, r2
   1d868:	2349      	movs	r3, #73	; 0x49
   1d86a:	6d89      	ldr	r1, [r1, #88]	; 0x58
   1d86c:	2001      	movs	r0, #1
   1d86e:	4ec4      	ldr	r6, [pc, #784]	; (1db80 <LORAWAN_RxDone+0x77c>)
   1d870:	47b0      	blx	r6
   1d872:	2301      	movs	r3, #1
   1d874:	9306      	str	r3, [sp, #24]
   1d876:	e29d      	b.n	1ddb4 <LORAWAN_RxDone+0x9b0>
   1d878:	220e      	movs	r2, #14
   1d87a:	4bc2      	ldr	r3, [pc, #776]	; (1db84 <LORAWAN_RxDone+0x780>)
   1d87c:	781b      	ldrb	r3, [r3, #0]
   1d87e:	4013      	ands	r3, r2
   1d880:	2b0a      	cmp	r3, #10
   1d882:	d008      	beq.n	1d896 <LORAWAN_RxDone+0x492>
   1d884:	2b06      	cmp	r3, #6
   1d886:	d001      	beq.n	1d88c <LORAWAN_RxDone+0x488>
   1d888:	200a      	movs	r0, #10
   1d88a:	e61d      	b.n	1d4c8 <LORAWAN_RxDone+0xc4>
   1d88c:	0033      	movs	r3, r6
   1d88e:	33f9      	adds	r3, #249	; 0xf9
   1d890:	781b      	ldrb	r3, [r3, #0]
   1d892:	2b00      	cmp	r3, #0
   1d894:	d0f8      	beq.n	1d888 <LORAWAN_RxDone+0x484>
   1d896:	2220      	movs	r2, #32
   1d898:	201e      	movs	r0, #30
   1d89a:	3694      	adds	r6, #148	; 0x94
   1d89c:	7833      	ldrb	r3, [r6, #0]
   1d89e:	4393      	bics	r3, r2
   1d8a0:	7033      	strb	r3, [r6, #0]
   1d8a2:	4bb9      	ldr	r3, [pc, #740]	; (1db88 <LORAWAN_RxDone+0x784>)
   1d8a4:	e5fe      	b.n	1d4a4 <LORAWAN_RxDone+0xa0>
   1d8a6:	0032      	movs	r2, r6
   1d8a8:	2102      	movs	r1, #2
   1d8aa:	e29b      	b.n	1dde4 <LORAWAN_RxDone+0x9e0>
   1d8ac:	9b07      	ldr	r3, [sp, #28]
   1d8ae:	328c      	adds	r2, #140	; 0x8c
   1d8b0:	6013      	str	r3, [r2, #0]
   1d8b2:	e2d8      	b.n	1de66 <LORAWAN_RxDone+0xa62>
   1d8b4:	9b06      	ldr	r3, [sp, #24]
   1d8b6:	4db1      	ldr	r5, [pc, #708]	; (1db7c <LORAWAN_RxDone+0x778>)
   1d8b8:	2b00      	cmp	r3, #0
   1d8ba:	d000      	beq.n	1d8be <LORAWAN_RxDone+0x4ba>
   1d8bc:	e21c      	b.n	1dcf8 <LORAWAN_RxDone+0x8f4>
   1d8be:	466a      	mov	r2, sp
   1d8c0:	002b      	movs	r3, r5
   1d8c2:	7e12      	ldrb	r2, [r2, #24]
   1d8c4:	33e3      	adds	r3, #227	; 0xe3
   1d8c6:	701a      	strb	r2, [r3, #0]
   1d8c8:	797b      	ldrb	r3, [r7, #5]
   1d8ca:	2b7f      	cmp	r3, #127	; 0x7f
   1d8cc:	d909      	bls.n	1d8e2 <LORAWAN_RxDone+0x4de>
   1d8ce:	002a      	movs	r2, r5
   1d8d0:	2320      	movs	r3, #32
   1d8d2:	3284      	adds	r2, #132	; 0x84
   1d8d4:	7811      	ldrb	r1, [r2, #0]
   1d8d6:	2001      	movs	r0, #1
   1d8d8:	430b      	orrs	r3, r1
   1d8da:	7013      	strb	r3, [r2, #0]
   1d8dc:	210b      	movs	r1, #11
   1d8de:	4bab      	ldr	r3, [pc, #684]	; (1db8c <LORAWAN_RxDone+0x788>)
   1d8e0:	4798      	blx	r3
   1d8e2:	797b      	ldrb	r3, [r7, #5]
   1d8e4:	06db      	lsls	r3, r3, #27
   1d8e6:	d505      	bpl.n	1d8f4 <LORAWAN_RxDone+0x4f0>
   1d8e8:	002a      	movs	r2, r5
   1d8ea:	2308      	movs	r3, #8
   1d8ec:	3294      	adds	r2, #148	; 0x94
   1d8ee:	7811      	ldrb	r1, [r2, #0]
   1d8f0:	430b      	orrs	r3, r1
   1d8f2:	7013      	strb	r3, [r2, #0]
   1d8f4:	797b      	ldrb	r3, [r7, #5]
   1d8f6:	065b      	lsls	r3, r3, #25
   1d8f8:	d505      	bpl.n	1d906 <LORAWAN_RxDone+0x502>
   1d8fa:	002a      	movs	r2, r5
   1d8fc:	2310      	movs	r3, #16
   1d8fe:	3294      	adds	r2, #148	; 0x94
   1d900:	7811      	ldrb	r1, [r2, #0]
   1d902:	430b      	orrs	r3, r1
   1d904:	7013      	strb	r3, [r2, #0]
   1d906:	221f      	movs	r2, #31
   1d908:	783b      	ldrb	r3, [r7, #0]
   1d90a:	4393      	bics	r3, r2
   1d90c:	2ba0      	cmp	r3, #160	; 0xa0
   1d90e:	d105      	bne.n	1d91c <LORAWAN_RxDone+0x518>
   1d910:	002a      	movs	r2, r5
   1d912:	3294      	adds	r2, #148	; 0x94
   1d914:	7811      	ldrb	r1, [r2, #0]
   1d916:	3b9e      	subs	r3, #158	; 0x9e
   1d918:	430b      	orrs	r3, r1
   1d91a:	7013      	strb	r3, [r2, #0]
   1d91c:	7979      	ldrb	r1, [r7, #5]
   1d91e:	070b      	lsls	r3, r1, #28
   1d920:	d100      	bne.n	1d924 <LORAWAN_RxDone+0x520>
   1d922:	e0d0      	b.n	1dac6 <LORAWAN_RxDone+0x6c2>
   1d924:	0709      	lsls	r1, r1, #28
   1d926:	0f09      	lsrs	r1, r1, #28
   1d928:	187b      	adds	r3, r7, r1
   1d92a:	7a1b      	ldrb	r3, [r3, #8]
   1d92c:	2b00      	cmp	r3, #0
   1d92e:	d100      	bne.n	1d932 <LORAWAN_RxDone+0x52e>
   1d930:	e0a5      	b.n	1da7e <LORAWAN_RxDone+0x67a>
   1d932:	0038      	movs	r0, r7
   1d934:	4b96      	ldr	r3, [pc, #600]	; (1db90 <LORAWAN_RxDone+0x78c>)
   1d936:	3008      	adds	r0, #8
   1d938:	4798      	blx	r3
   1d93a:	2301      	movs	r3, #1
   1d93c:	0006      	movs	r6, r0
   1d93e:	9306      	str	r3, [sp, #24]
   1d940:	7978      	ldrb	r0, [r7, #5]
   1d942:	0703      	lsls	r3, r0, #28
   1d944:	0f1b      	lsrs	r3, r3, #28
   1d946:	001a      	movs	r2, r3
   1d948:	320c      	adds	r2, #12
   1d94a:	4294      	cmp	r4, r2
   1d94c:	d100      	bne.n	1d950 <LORAWAN_RxDone+0x54c>
   1d94e:	e0eb      	b.n	1db28 <LORAWAN_RxDone+0x724>
   1d950:	1c72      	adds	r2, r6, #1
   1d952:	1ae4      	subs	r4, r4, r3
   1d954:	9209      	str	r2, [sp, #36]	; 0x24
   1d956:	7832      	ldrb	r2, [r6, #0]
   1d958:	b2e4      	uxtb	r4, r4
   1d95a:	9208      	str	r2, [sp, #32]
   1d95c:	0022      	movs	r2, r4
   1d95e:	9908      	ldr	r1, [sp, #32]
   1d960:	3a0c      	subs	r2, #12
   1d962:	b2d2      	uxtb	r2, r2
   1d964:	9207      	str	r2, [sp, #28]
   1d966:	3319      	adds	r3, #25
   1d968:	4a84      	ldr	r2, [pc, #528]	; (1db7c <LORAWAN_RxDone+0x778>)
   1d96a:	2900      	cmp	r1, #0
   1d96c:	d100      	bne.n	1d970 <LORAWAN_RxDone+0x56c>
   1d96e:	e0ad      	b.n	1dacc <LORAWAN_RxDone+0x6c8>
   1d970:	3c0d      	subs	r4, #13
   1d972:	0010      	movs	r0, r2
   1d974:	b2e1      	uxtb	r1, r4
   1d976:	6814      	ldr	r4, [r2, #0]
   1d978:	7912      	ldrb	r2, [r2, #4]
   1d97a:	0a24      	lsrs	r4, r4, #8
   1d97c:	0612      	lsls	r2, r2, #24
   1d97e:	4322      	orrs	r2, r4
   1d980:	9204      	str	r2, [sp, #16]
   1d982:	4a84      	ldr	r2, [pc, #528]	; (1db94 <LORAWAN_RxDone+0x790>)
   1d984:	b29b      	uxth	r3, r3
   1d986:	9203      	str	r2, [sp, #12]
   1d988:	2201      	movs	r2, #1
   1d98a:	9302      	str	r3, [sp, #8]
   1d98c:	4b82      	ldr	r3, [pc, #520]	; (1db98 <LORAWAN_RxDone+0x794>)
   1d98e:	308c      	adds	r0, #140	; 0x8c
   1d990:	9201      	str	r2, [sp, #4]
   1d992:	9300      	str	r3, [sp, #0]
   1d994:	6803      	ldr	r3, [r0, #0]
   1d996:	4c81      	ldr	r4, [pc, #516]	; (1db9c <LORAWAN_RxDone+0x798>)
   1d998:	18b0      	adds	r0, r6, r2
   1d99a:	47a0      	blx	r4
   1d99c:	2800      	cmp	r0, #0
   1d99e:	d004      	beq.n	1d9aa <LORAWAN_RxDone+0x5a6>
   1d9a0:	4b7f      	ldr	r3, [pc, #508]	; (1dba0 <LORAWAN_RxDone+0x79c>)
   1d9a2:	4798      	blx	r3
   1d9a4:	201f      	movs	r0, #31
   1d9a6:	4b78      	ldr	r3, [pc, #480]	; (1db88 <LORAWAN_RxDone+0x784>)
   1d9a8:	4798      	blx	r3
   1d9aa:	4c74      	ldr	r4, [pc, #464]	; (1db7c <LORAWAN_RxDone+0x778>)
   1d9ac:	2300      	movs	r3, #0
   1d9ae:	0022      	movs	r2, r4
   1d9b0:	32ca      	adds	r2, #202	; 0xca
   1d9b2:	8013      	strh	r3, [r2, #0]
   1d9b4:	0022      	movs	r2, r4
   1d9b6:	32f6      	adds	r2, #246	; 0xf6
   1d9b8:	7013      	strb	r3, [r2, #0]
   1d9ba:	0022      	movs	r2, r4
   1d9bc:	2110      	movs	r1, #16
   1d9be:	3294      	adds	r2, #148	; 0x94
   1d9c0:	7813      	ldrb	r3, [r2, #0]
   1d9c2:	438b      	bics	r3, r1
   1d9c4:	7013      	strb	r3, [r2, #0]
   1d9c6:	0023      	movs	r3, r4
   1d9c8:	2201      	movs	r2, #1
   1d9ca:	3384      	adds	r3, #132	; 0x84
   1d9cc:	7859      	ldrb	r1, [r3, #1]
   1d9ce:	430a      	orrs	r2, r1
   1d9d0:	705a      	strb	r2, [r3, #1]
   1d9d2:	220e      	movs	r2, #14
   1d9d4:	781b      	ldrb	r3, [r3, #0]
   1d9d6:	4013      	ands	r3, r2
   1d9d8:	2b06      	cmp	r3, #6
   1d9da:	d104      	bne.n	1d9e6 <LORAWAN_RxDone+0x5e2>
   1d9dc:	0023      	movs	r3, r4
   1d9de:	33ee      	adds	r3, #238	; 0xee
   1d9e0:	7818      	ldrb	r0, [r3, #0]
   1d9e2:	4b70      	ldr	r3, [pc, #448]	; (1dba4 <LORAWAN_RxDone+0x7a0>)
   1d9e4:	4798      	blx	r3
   1d9e6:	0025      	movs	r5, r4
   1d9e8:	2201      	movs	r2, #1
   1d9ea:	3594      	adds	r5, #148	; 0x94
   1d9ec:	782b      	ldrb	r3, [r5, #0]
   1d9ee:	4213      	tst	r3, r2
   1d9f0:	d100      	bne.n	1d9f4 <LORAWAN_RxDone+0x5f0>
   1d9f2:	e103      	b.n	1dbfc <LORAWAN_RxDone+0x7f8>
   1d9f4:	797b      	ldrb	r3, [r7, #5]
   1d9f6:	321f      	adds	r2, #31
   1d9f8:	4213      	tst	r3, r2
   1d9fa:	d100      	bne.n	1d9fe <LORAWAN_RxDone+0x5fa>
   1d9fc:	e0e4      	b.n	1dbc8 <LORAWAN_RxDone+0x7c4>
   1d9fe:	4b6a      	ldr	r3, [pc, #424]	; (1dba8 <LORAWAN_RxDone+0x7a4>)
   1da00:	4798      	blx	r3
   1da02:	0023      	movs	r3, r4
   1da04:	2101      	movs	r1, #1
   1da06:	3384      	adds	r3, #132	; 0x84
   1da08:	785a      	ldrb	r2, [r3, #1]
   1da0a:	438a      	bics	r2, r1
   1da0c:	705a      	strb	r2, [r3, #1]
   1da0e:	9a08      	ldr	r2, [sp, #32]
   1da10:	2a00      	cmp	r2, #0
   1da12:	d100      	bne.n	1da16 <LORAWAN_RxDone+0x612>
   1da14:	e090      	b.n	1db38 <LORAWAN_RxDone+0x734>
   1da16:	9a07      	ldr	r2, [sp, #28]
   1da18:	0031      	movs	r1, r6
   1da1a:	0038      	movs	r0, r7
   1da1c:	4b63      	ldr	r3, [pc, #396]	; (1dbac <LORAWAN_RxDone+0x7a8>)
   1da1e:	4798      	blx	r3
   1da20:	4b58      	ldr	r3, [pc, #352]	; (1db84 <LORAWAN_RxDone+0x780>)
   1da22:	4d56      	ldr	r5, [pc, #344]	; (1db7c <LORAWAN_RxDone+0x778>)
   1da24:	781b      	ldrb	r3, [r3, #0]
   1da26:	06db      	lsls	r3, r3, #27
   1da28:	d400      	bmi.n	1da2c <LORAWAN_RxDone+0x628>
   1da2a:	e15c      	b.n	1dce6 <LORAWAN_RxDone+0x8e2>
   1da2c:	2220      	movs	r2, #32
   1da2e:	4b60      	ldr	r3, [pc, #384]	; (1dbb0 <LORAWAN_RxDone+0x7ac>)
   1da30:	781b      	ldrb	r3, [r3, #0]
   1da32:	401a      	ands	r2, r3
   1da34:	9206      	str	r2, [sp, #24]
   1da36:	d000      	beq.n	1da3a <LORAWAN_RxDone+0x636>
   1da38:	e155      	b.n	1dce6 <LORAWAN_RxDone+0x8e2>
   1da3a:	320a      	adds	r2, #10
   1da3c:	4213      	tst	r3, r2
   1da3e:	d100      	bne.n	1da42 <LORAWAN_RxDone+0x63e>
   1da40:	e151      	b.n	1dce6 <LORAWAN_RxDone+0x8e2>
   1da42:	002b      	movs	r3, r5
   1da44:	33f5      	adds	r3, #245	; 0xf5
   1da46:	781b      	ldrb	r3, [r3, #0]
   1da48:	a90f      	add	r1, sp, #60	; 0x3c
   1da4a:	704b      	strb	r3, [r1, #1]
   1da4c:	002e      	movs	r6, r5
   1da4e:	2301      	movs	r3, #1
   1da50:	36e7      	adds	r6, #231	; 0xe7
   1da52:	700b      	strb	r3, [r1, #0]
   1da54:	7833      	ldrb	r3, [r6, #0]
   1da56:	aa0e      	add	r2, sp, #56	; 0x38
   1da58:	202f      	movs	r0, #47	; 0x2f
   1da5a:	4f56      	ldr	r7, [pc, #344]	; (1dbb4 <LORAWAN_RxDone+0x7b0>)
   1da5c:	708b      	strb	r3, [r1, #2]
   1da5e:	47b8      	blx	r7
   1da60:	9007      	str	r0, [sp, #28]
   1da62:	2808      	cmp	r0, #8
   1da64:	d000      	beq.n	1da68 <LORAWAN_RxDone+0x664>
   1da66:	e0f7      	b.n	1dc58 <LORAWAN_RxDone+0x854>
   1da68:	4b53      	ldr	r3, [pc, #332]	; (1dbb8 <LORAWAN_RxDone+0x7b4>)
   1da6a:	9806      	ldr	r0, [sp, #24]
   1da6c:	4798      	blx	r3
   1da6e:	4b50      	ldr	r3, [pc, #320]	; (1dbb0 <LORAWAN_RxDone+0x7ac>)
   1da70:	9a07      	ldr	r2, [sp, #28]
   1da72:	781b      	ldrb	r3, [r3, #0]
   1da74:	4393      	bics	r3, r2
   1da76:	4a4e      	ldr	r2, [pc, #312]	; (1dbb0 <LORAWAN_RxDone+0x7ac>)
   1da78:	7013      	strb	r3, [r2, #0]
   1da7a:	2001      	movs	r0, #1
   1da7c:	e524      	b.n	1d4c8 <LORAWAN_RxDone+0xc4>
   1da7e:	002b      	movs	r3, r5
   1da80:	220e      	movs	r2, #14
   1da82:	3384      	adds	r3, #132	; 0x84
   1da84:	781b      	ldrb	r3, [r3, #0]
   1da86:	4013      	ands	r3, r2
   1da88:	2b06      	cmp	r3, #6
   1da8a:	d101      	bne.n	1da90 <LORAWAN_RxDone+0x68c>
   1da8c:	4b4b      	ldr	r3, [pc, #300]	; (1dbbc <LORAWAN_RxDone+0x7b8>)
   1da8e:	4798      	blx	r3
   1da90:	494b      	ldr	r1, [pc, #300]	; (1dbc0 <LORAWAN_RxDone+0x7bc>)
   1da92:	784a      	ldrb	r2, [r1, #1]
   1da94:	780b      	ldrb	r3, [r1, #0]
   1da96:	0212      	lsls	r2, r2, #8
   1da98:	431a      	orrs	r2, r3
   1da9a:	788b      	ldrb	r3, [r1, #2]
   1da9c:	041b      	lsls	r3, r3, #16
   1da9e:	431a      	orrs	r2, r3
   1daa0:	78cb      	ldrb	r3, [r1, #3]
   1daa2:	061b      	lsls	r3, r3, #24
   1daa4:	4313      	orrs	r3, r2
   1daa6:	d008      	beq.n	1daba <LORAWAN_RxDone+0x6b6>
   1daa8:	002a      	movs	r2, r5
   1daaa:	2120      	movs	r1, #32
   1daac:	3294      	adds	r2, #148	; 0x94
   1daae:	7813      	ldrb	r3, [r2, #0]
   1dab0:	201e      	movs	r0, #30
   1dab2:	438b      	bics	r3, r1
   1dab4:	7013      	strb	r3, [r2, #0]
   1dab6:	4b34      	ldr	r3, [pc, #208]	; (1db88 <LORAWAN_RxDone+0x784>)
   1dab8:	4798      	blx	r3
   1daba:	2300      	movs	r3, #0
   1dabc:	35e0      	adds	r5, #224	; 0xe0
   1dabe:	702b      	strb	r3, [r5, #0]
   1dac0:	4b37      	ldr	r3, [pc, #220]	; (1dba0 <LORAWAN_RxDone+0x79c>)
   1dac2:	4798      	blx	r3
   1dac4:	e7d9      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dac6:	003e      	movs	r6, r7
   1dac8:	3608      	adds	r6, #8
   1daca:	e739      	b.n	1d940 <LORAWAN_RxDone+0x53c>
   1dacc:	9907      	ldr	r1, [sp, #28]
   1dace:	2900      	cmp	r1, #0
   1dad0:	d02e      	beq.n	1db30 <LORAWAN_RxDone+0x72c>
   1dad2:	0701      	lsls	r1, r0, #28
   1dad4:	d1d3      	bne.n	1da7e <LORAWAN_RxDone+0x67a>
   1dad6:	b29b      	uxth	r3, r3
   1dad8:	6810      	ldr	r0, [r2, #0]
   1dada:	0011      	movs	r1, r2
   1dadc:	7912      	ldrb	r2, [r2, #4]
   1dade:	9302      	str	r3, [sp, #8]
   1dae0:	2302      	movs	r3, #2
   1dae2:	0a00      	lsrs	r0, r0, #8
   1dae4:	0612      	lsls	r2, r2, #24
   1dae6:	4302      	orrs	r2, r0
   1dae8:	9204      	str	r2, [sp, #16]
   1daea:	9301      	str	r3, [sp, #4]
   1daec:	4a29      	ldr	r2, [pc, #164]	; (1db94 <LORAWAN_RxDone+0x790>)
   1daee:	4b35      	ldr	r3, [pc, #212]	; (1dbc4 <LORAWAN_RxDone+0x7c0>)
   1daf0:	3c0d      	subs	r4, #13
   1daf2:	318c      	adds	r1, #140	; 0x8c
   1daf4:	9203      	str	r2, [sp, #12]
   1daf6:	b2e4      	uxtb	r4, r4
   1daf8:	9300      	str	r3, [sp, #0]
   1dafa:	680b      	ldr	r3, [r1, #0]
   1dafc:	2201      	movs	r2, #1
   1dafe:	0021      	movs	r1, r4
   1db00:	9809      	ldr	r0, [sp, #36]	; 0x24
   1db02:	4d26      	ldr	r5, [pc, #152]	; (1db9c <LORAWAN_RxDone+0x798>)
   1db04:	47a8      	blx	r5
   1db06:	2800      	cmp	r0, #0
   1db08:	d004      	beq.n	1db14 <LORAWAN_RxDone+0x710>
   1db0a:	4b25      	ldr	r3, [pc, #148]	; (1dba0 <LORAWAN_RxDone+0x79c>)
   1db0c:	4798      	blx	r3
   1db0e:	201f      	movs	r0, #31
   1db10:	4b1d      	ldr	r3, [pc, #116]	; (1db88 <LORAWAN_RxDone+0x784>)
   1db12:	4798      	blx	r3
   1db14:	4b1e      	ldr	r3, [pc, #120]	; (1db90 <LORAWAN_RxDone+0x78c>)
   1db16:	0021      	movs	r1, r4
   1db18:	9809      	ldr	r0, [sp, #36]	; 0x24
   1db1a:	4798      	blx	r3
   1db1c:	2300      	movs	r3, #0
   1db1e:	9307      	str	r3, [sp, #28]
   1db20:	3301      	adds	r3, #1
   1db22:	9306      	str	r3, [sp, #24]
   1db24:	2600      	movs	r6, #0
   1db26:	e740      	b.n	1d9aa <LORAWAN_RxDone+0x5a6>
   1db28:	2600      	movs	r6, #0
   1db2a:	9608      	str	r6, [sp, #32]
   1db2c:	9607      	str	r6, [sp, #28]
   1db2e:	e73c      	b.n	1d9aa <LORAWAN_RxDone+0x5a6>
   1db30:	9b07      	ldr	r3, [sp, #28]
   1db32:	9308      	str	r3, [sp, #32]
   1db34:	001e      	movs	r6, r3
   1db36:	e738      	b.n	1d9aa <LORAWAN_RxDone+0x5a6>
   1db38:	2120      	movs	r1, #32
   1db3a:	782a      	ldrb	r2, [r5, #0]
   1db3c:	438a      	bics	r2, r1
   1db3e:	702a      	strb	r2, [r5, #0]
   1db40:	0022      	movs	r2, r4
   1db42:	32fd      	adds	r2, #253	; 0xfd
   1db44:	7812      	ldrb	r2, [r2, #0]
   1db46:	2a01      	cmp	r2, #1
   1db48:	d10e      	bne.n	1db68 <LORAWAN_RxDone+0x764>
   1db4a:	781a      	ldrb	r2, [r3, #0]
   1db4c:	3912      	subs	r1, #18
   1db4e:	438a      	bics	r2, r1
   1db50:	701a      	strb	r2, [r3, #0]
   1db52:	2388      	movs	r3, #136	; 0x88
   1db54:	4a09      	ldr	r2, [pc, #36]	; (1db7c <LORAWAN_RxDone+0x778>)
   1db56:	009b      	lsls	r3, r3, #2
   1db58:	5cd3      	ldrb	r3, [r2, r3]
   1db5a:	2b00      	cmp	r3, #0
   1db5c:	d000      	beq.n	1db60 <LORAWAN_RxDone+0x75c>
   1db5e:	e75f      	b.n	1da20 <LORAWAN_RxDone+0x61c>
   1db60:	2008      	movs	r0, #8
   1db62:	4b09      	ldr	r3, [pc, #36]	; (1db88 <LORAWAN_RxDone+0x784>)
   1db64:	4798      	blx	r3
   1db66:	e75b      	b.n	1da20 <LORAWAN_RxDone+0x61c>
   1db68:	2a04      	cmp	r2, #4
   1db6a:	d1f2      	bne.n	1db52 <LORAWAN_RxDone+0x74e>
   1db6c:	0023      	movs	r3, r4
   1db6e:	33f1      	adds	r3, #241	; 0xf1
   1db70:	7818      	ldrb	r0, [r3, #0]
   1db72:	4b0c      	ldr	r3, [pc, #48]	; (1dba4 <LORAWAN_RxDone+0x7a0>)
   1db74:	4798      	blx	r3
   1db76:	e7ec      	b.n	1db52 <LORAWAN_RxDone+0x74e>
   1db78:	0001ee8d 	.word	0x0001ee8d
   1db7c:	20001bd0 	.word	0x20001bd0
   1db80:	0001ab29 	.word	0x0001ab29
   1db84:	20001c54 	.word	0x20001c54
   1db88:	0001bd55 	.word	0x0001bd55
   1db8c:	00013b45 	.word	0x00013b45
   1db90:	0001d121 	.word	0x0001d121
   1db94:	20001f34 	.word	0x20001f34
   1db98:	20001c05 	.word	0x20001c05
   1db9c:	0001bc95 	.word	0x0001bc95
   1dba0:	0001ce99 	.word	0x0001ce99
   1dba4:	00015cfd 	.word	0x00015cfd
   1dba8:	0001b1b5 	.word	0x0001b1b5
   1dbac:	0001be05 	.word	0x0001be05
   1dbb0:	20001c64 	.word	0x20001c64
   1dbb4:	0000d595 	.word	0x0000d595
   1dbb8:	0001ae69 	.word	0x0001ae69
   1dbbc:	0001abc1 	.word	0x0001abc1
   1dbc0:	20001f2c 	.word	0x20001f2c
   1dbc4:	20001bf5 	.word	0x20001bf5
   1dbc8:	9b06      	ldr	r3, [sp, #24]
   1dbca:	2b00      	cmp	r3, #0
   1dbcc:	d013      	beq.n	1dbf6 <LORAWAN_RxDone+0x7f2>
   1dbce:	0023      	movs	r3, r4
   1dbd0:	33fd      	adds	r3, #253	; 0xfd
   1dbd2:	781e      	ldrb	r6, [r3, #0]
   1dbd4:	2e01      	cmp	r6, #1
   1dbd6:	d10e      	bne.n	1dbf6 <LORAWAN_RxDone+0x7f2>
   1dbd8:	4ba4      	ldr	r3, [pc, #656]	; (1de6c <LORAWAN_RxDone+0xa68>)
   1dbda:	4798      	blx	r3
   1dbdc:	0022      	movs	r2, r4
   1dbde:	3284      	adds	r2, #132	; 0x84
   1dbe0:	7853      	ldrb	r3, [r2, #1]
   1dbe2:	43b3      	bics	r3, r6
   1dbe4:	7053      	strb	r3, [r2, #1]
   1dbe6:	2220      	movs	r2, #32
   1dbe8:	782b      	ldrb	r3, [r5, #0]
   1dbea:	4393      	bics	r3, r2
   1dbec:	702b      	strb	r3, [r5, #0]
   1dbee:	2388      	movs	r3, #136	; 0x88
   1dbf0:	009b      	lsls	r3, r3, #2
   1dbf2:	5ce3      	ldrb	r3, [r4, r3]
   1dbf4:	e7b1      	b.n	1db5a <LORAWAN_RxDone+0x756>
   1dbf6:	4b9e      	ldr	r3, [pc, #632]	; (1de70 <LORAWAN_RxDone+0xa6c>)
   1dbf8:	4798      	blx	r3
   1dbfa:	e711      	b.n	1da20 <LORAWAN_RxDone+0x61c>
   1dbfc:	9a08      	ldr	r2, [sp, #32]
   1dbfe:	2a00      	cmp	r2, #0
   1dc00:	d00b      	beq.n	1dc1a <LORAWAN_RxDone+0x816>
   1dc02:	9a07      	ldr	r2, [sp, #28]
   1dc04:	0031      	movs	r1, r6
   1dc06:	0038      	movs	r0, r7
   1dc08:	4b9a      	ldr	r3, [pc, #616]	; (1de74 <LORAWAN_RxDone+0xa70>)
   1dc0a:	4798      	blx	r3
   1dc0c:	0022      	movs	r2, r4
   1dc0e:	2101      	movs	r1, #1
   1dc10:	3284      	adds	r2, #132	; 0x84
   1dc12:	7853      	ldrb	r3, [r2, #1]
   1dc14:	438b      	bics	r3, r1
   1dc16:	7053      	strb	r3, [r2, #1]
   1dc18:	e702      	b.n	1da20 <LORAWAN_RxDone+0x61c>
   1dc1a:	2220      	movs	r2, #32
   1dc1c:	4393      	bics	r3, r2
   1dc1e:	702b      	strb	r3, [r5, #0]
   1dc20:	0023      	movs	r3, r4
   1dc22:	33fd      	adds	r3, #253	; 0xfd
   1dc24:	781b      	ldrb	r3, [r3, #0]
   1dc26:	2b01      	cmp	r3, #1
   1dc28:	d10e      	bne.n	1dc48 <LORAWAN_RxDone+0x844>
   1dc2a:	0022      	movs	r2, r4
   1dc2c:	210e      	movs	r1, #14
   1dc2e:	3284      	adds	r2, #132	; 0x84
   1dc30:	7813      	ldrb	r3, [r2, #0]
   1dc32:	438b      	bics	r3, r1
   1dc34:	7013      	strb	r3, [r2, #0]
   1dc36:	2388      	movs	r3, #136	; 0x88
   1dc38:	009b      	lsls	r3, r3, #2
   1dc3a:	5ce3      	ldrb	r3, [r4, r3]
   1dc3c:	2b00      	cmp	r3, #0
   1dc3e:	d1e5      	bne.n	1dc0c <LORAWAN_RxDone+0x808>
   1dc40:	2008      	movs	r0, #8
   1dc42:	4b8d      	ldr	r3, [pc, #564]	; (1de78 <LORAWAN_RxDone+0xa74>)
   1dc44:	4798      	blx	r3
   1dc46:	e7e1      	b.n	1dc0c <LORAWAN_RxDone+0x808>
   1dc48:	2b04      	cmp	r3, #4
   1dc4a:	d1f4      	bne.n	1dc36 <LORAWAN_RxDone+0x832>
   1dc4c:	0023      	movs	r3, r4
   1dc4e:	33f1      	adds	r3, #241	; 0xf1
   1dc50:	7818      	ldrb	r0, [r3, #0]
   1dc52:	4b8a      	ldr	r3, [pc, #552]	; (1de7c <LORAWAN_RxDone+0xa78>)
   1dc54:	4798      	blx	r3
   1dc56:	e7ee      	b.n	1dc36 <LORAWAN_RxDone+0x832>
   1dc58:	35ff      	adds	r5, #255	; 0xff
   1dc5a:	7f6b      	ldrb	r3, [r5, #29]
   1dc5c:	079a      	lsls	r2, r3, #30
   1dc5e:	d520      	bpl.n	1dca2 <LORAWAN_RxDone+0x89e>
   1dc60:	aa10      	add	r2, sp, #64	; 0x40
   1dc62:	0031      	movs	r1, r6
   1dc64:	2026      	movs	r0, #38	; 0x26
   1dc66:	47b8      	blx	r7
   1dc68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dc6a:	1c5a      	adds	r2, r3, #1
   1dc6c:	d001      	beq.n	1dc72 <LORAWAN_RxDone+0x86e>
   1dc6e:	3314      	adds	r3, #20
   1dc70:	9310      	str	r3, [sp, #64]	; 0x40
   1dc72:	0021      	movs	r1, r4
   1dc74:	220e      	movs	r2, #14
   1dc76:	3184      	adds	r1, #132	; 0x84
   1dc78:	780b      	ldrb	r3, [r1, #0]
   1dc7a:	4393      	bics	r3, r2
   1dc7c:	001a      	movs	r2, r3
   1dc7e:	230c      	movs	r3, #12
   1dc80:	4313      	orrs	r3, r2
   1dc82:	700b      	strb	r3, [r1, #0]
   1dc84:	4b7e      	ldr	r3, [pc, #504]	; (1de80 <LORAWAN_RxDone+0xa7c>)
   1dc86:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1dc88:	5ce3      	ldrb	r3, [r4, r3]
   1dc8a:	21fa      	movs	r1, #250	; 0xfa
   1dc8c:	1ad3      	subs	r3, r2, r3
   1dc8e:	2200      	movs	r2, #0
   1dc90:	0089      	lsls	r1, r1, #2
   1dc92:	4359      	muls	r1, r3
   1dc94:	34ef      	adds	r4, #239	; 0xef
   1dc96:	4b7b      	ldr	r3, [pc, #492]	; (1de84 <LORAWAN_RxDone+0xa80>)
   1dc98:	7820      	ldrb	r0, [r4, #0]
   1dc9a:	9200      	str	r2, [sp, #0]
   1dc9c:	4c7a      	ldr	r4, [pc, #488]	; (1de88 <LORAWAN_RxDone+0xa84>)
   1dc9e:	47a0      	blx	r4
   1dca0:	e6eb      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dca2:	075b      	lsls	r3, r3, #29
   1dca4:	d400      	bmi.n	1dca8 <LORAWAN_RxDone+0x8a4>
   1dca6:	e6e8      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dca8:	aa10      	add	r2, sp, #64	; 0x40
   1dcaa:	0031      	movs	r1, r6
   1dcac:	2032      	movs	r0, #50	; 0x32
   1dcae:	47b8      	blx	r7
   1dcb0:	220e      	movs	r2, #14
   1dcb2:	4b76      	ldr	r3, [pc, #472]	; (1de8c <LORAWAN_RxDone+0xa88>)
   1dcb4:	781b      	ldrb	r3, [r3, #0]
   1dcb6:	4393      	bics	r3, r2
   1dcb8:	001a      	movs	r2, r3
   1dcba:	230c      	movs	r3, #12
   1dcbc:	4313      	orrs	r3, r2
   1dcbe:	4a73      	ldr	r2, [pc, #460]	; (1de8c <LORAWAN_RxDone+0xa88>)
   1dcc0:	7013      	strb	r3, [r2, #0]
   1dcc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dcc4:	1c5a      	adds	r2, r3, #1
   1dcc6:	d001      	beq.n	1dccc <LORAWAN_RxDone+0x8c8>
   1dcc8:	3301      	adds	r3, #1
   1dcca:	9310      	str	r3, [sp, #64]	; 0x40
   1dccc:	4b6c      	ldr	r3, [pc, #432]	; (1de80 <LORAWAN_RxDone+0xa7c>)
   1dcce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1dcd0:	5ce3      	ldrb	r3, [r4, r3]
   1dcd2:	21fa      	movs	r1, #250	; 0xfa
   1dcd4:	1ad3      	subs	r3, r2, r3
   1dcd6:	2200      	movs	r2, #0
   1dcd8:	0089      	lsls	r1, r1, #2
   1dcda:	34f2      	adds	r4, #242	; 0xf2
   1dcdc:	4359      	muls	r1, r3
   1dcde:	7820      	ldrb	r0, [r4, #0]
   1dce0:	4b6b      	ldr	r3, [pc, #428]	; (1de90 <LORAWAN_RxDone+0xa8c>)
   1dce2:	9200      	str	r2, [sp, #0]
   1dce4:	e7da      	b.n	1dc9c <LORAWAN_RxDone+0x898>
   1dce6:	35fd      	adds	r5, #253	; 0xfd
   1dce8:	782b      	ldrb	r3, [r5, #0]
   1dcea:	2b04      	cmp	r3, #4
   1dcec:	d000      	beq.n	1dcf0 <LORAWAN_RxDone+0x8ec>
   1dcee:	e6c4      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dcf0:	0038      	movs	r0, r7
   1dcf2:	4b68      	ldr	r3, [pc, #416]	; (1de94 <LORAWAN_RxDone+0xa90>)
   1dcf4:	4798      	blx	r3
   1dcf6:	e6c0      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dcf8:	2390      	movs	r3, #144	; 0x90
   1dcfa:	009b      	lsls	r3, r3, #2
   1dcfc:	5ceb      	ldrb	r3, [r5, r3]
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d009      	beq.n	1dd16 <LORAWAN_RxDone+0x912>
   1dd02:	2322      	movs	r3, #34	; 0x22
   1dd04:	aa04      	add	r2, sp, #16
   1dd06:	189b      	adds	r3, r3, r2
   1dd08:	0021      	movs	r1, r4
   1dd0a:	781b      	ldrb	r3, [r3, #0]
   1dd0c:	003a      	movs	r2, r7
   1dd0e:	0038      	movs	r0, r7
   1dd10:	4c61      	ldr	r4, [pc, #388]	; (1de98 <LORAWAN_RxDone+0xa94>)
   1dd12:	47a0      	blx	r4
   1dd14:	e6b1      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dd16:	2220      	movs	r2, #32
   1dd18:	3594      	adds	r5, #148	; 0x94
   1dd1a:	782b      	ldrb	r3, [r5, #0]
   1dd1c:	201e      	movs	r0, #30
   1dd1e:	4393      	bics	r3, r2
   1dd20:	702b      	strb	r3, [r5, #0]
   1dd22:	4b55      	ldr	r3, [pc, #340]	; (1de78 <LORAWAN_RxDone+0xa74>)
   1dd24:	4798      	blx	r3
   1dd26:	e6cb      	b.n	1dac0 <LORAWAN_RxDone+0x6bc>
   1dd28:	220e      	movs	r2, #14
   1dd2a:	4013      	ands	r3, r2
   1dd2c:	2b0a      	cmp	r3, #10
   1dd2e:	d008      	beq.n	1dd42 <LORAWAN_RxDone+0x93e>
   1dd30:	2b06      	cmp	r3, #6
   1dd32:	d000      	beq.n	1dd36 <LORAWAN_RxDone+0x932>
   1dd34:	e5a8      	b.n	1d888 <LORAWAN_RxDone+0x484>
   1dd36:	0033      	movs	r3, r6
   1dd38:	33f9      	adds	r3, #249	; 0xf9
   1dd3a:	781b      	ldrb	r3, [r3, #0]
   1dd3c:	2b00      	cmp	r3, #0
   1dd3e:	d100      	bne.n	1dd42 <LORAWAN_RxDone+0x93e>
   1dd40:	e5a2      	b.n	1d888 <LORAWAN_RxDone+0x484>
   1dd42:	2220      	movs	r2, #32
   1dd44:	3694      	adds	r6, #148	; 0x94
   1dd46:	7833      	ldrb	r3, [r6, #0]
   1dd48:	2019      	movs	r0, #25
   1dd4a:	4393      	bics	r3, r2
   1dd4c:	7033      	strb	r3, [r6, #0]
   1dd4e:	e5a8      	b.n	1d8a2 <LORAWAN_RxDone+0x49e>
   1dd50:	4952      	ldr	r1, [pc, #328]	; (1de9c <LORAWAN_RxDone+0xa98>)
   1dd52:	784a      	ldrb	r2, [r1, #1]
   1dd54:	780b      	ldrb	r3, [r1, #0]
   1dd56:	0212      	lsls	r2, r2, #8
   1dd58:	431a      	orrs	r2, r3
   1dd5a:	788b      	ldrb	r3, [r1, #2]
   1dd5c:	041b      	lsls	r3, r3, #16
   1dd5e:	431a      	orrs	r2, r3
   1dd60:	78cb      	ldrb	r3, [r1, #3]
   1dd62:	061b      	lsls	r3, r3, #24
   1dd64:	4313      	orrs	r3, r2
   1dd66:	d100      	bne.n	1dd6a <LORAWAN_RxDone+0x966>
   1dd68:	e687      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dd6a:	4b4d      	ldr	r3, [pc, #308]	; (1dea0 <LORAWAN_RxDone+0xa9c>)
   1dd6c:	4d4d      	ldr	r5, [pc, #308]	; (1dea4 <LORAWAN_RxDone+0xaa0>)
   1dd6e:	781b      	ldrb	r3, [r3, #0]
   1dd70:	2b10      	cmp	r3, #16
   1dd72:	d105      	bne.n	1dd80 <LORAWAN_RxDone+0x97c>
   1dd74:	0001      	movs	r1, r0
   1dd76:	0022      	movs	r2, r4
   1dd78:	2000      	movs	r0, #0
   1dd7a:	3b0c      	subs	r3, #12
   1dd7c:	47a8      	blx	r5
   1dd7e:	e67c      	b.n	1da7a <LORAWAN_RxDone+0x676>
   1dd80:	2300      	movs	r3, #0
   1dd82:	0001      	movs	r1, r0
   1dd84:	0022      	movs	r2, r4
   1dd86:	0018      	movs	r0, r3
   1dd88:	e7f8      	b.n	1dd7c <LORAWAN_RxDone+0x978>
   1dd8a:	368c      	adds	r6, #140	; 0x8c
   1dd8c:	6833      	ldr	r3, [r6, #0]
   1dd8e:	9906      	ldr	r1, [sp, #24]
   1dd90:	9307      	str	r3, [sp, #28]
   1dd92:	0038      	movs	r0, r7
   1dd94:	4b44      	ldr	r3, [pc, #272]	; (1dea8 <LORAWAN_RxDone+0xaa4>)
   1dd96:	4798      	blx	r3
   1dd98:	2808      	cmp	r0, #8
   1dd9a:	d001      	beq.n	1dda0 <LORAWAN_RxDone+0x99c>
   1dd9c:	f7ff fb94 	bl	1d4c8 <LORAWAN_RxDone+0xc4>
   1dda0:	9b08      	ldr	r3, [sp, #32]
   1dda2:	1f22      	subs	r2, r4, #4
   1dda4:	9300      	str	r3, [sp, #0]
   1dda6:	0028      	movs	r0, r5
   1dda8:	b2d2      	uxtb	r2, r2
   1ddaa:	4d40      	ldr	r5, [pc, #256]	; (1deac <LORAWAN_RxDone+0xaa8>)
   1ddac:	2349      	movs	r3, #73	; 0x49
   1ddae:	6831      	ldr	r1, [r6, #0]
   1ddb0:	47a8      	blx	r5
   1ddb2:	4d3f      	ldr	r5, [pc, #252]	; (1deb0 <LORAWAN_RxDone+0xaac>)
   1ddb4:	4e3f      	ldr	r6, [pc, #252]	; (1deb4 <LORAWAN_RxDone+0xab0>)
   1ddb6:	2210      	movs	r2, #16
   1ddb8:	0031      	movs	r1, r6
   1ddba:	4b3f      	ldr	r3, [pc, #252]	; (1deb8 <LORAWAN_RxDone+0xab4>)
   1ddbc:	483f      	ldr	r0, [pc, #252]	; (1debc <LORAWAN_RxDone+0xab8>)
   1ddbe:	4798      	blx	r3
   1ddc0:	1f23      	subs	r3, r4, #4
   1ddc2:	001a      	movs	r2, r3
   1ddc4:	9308      	str	r3, [sp, #32]
   1ddc6:	0039      	movs	r1, r7
   1ddc8:	4b3b      	ldr	r3, [pc, #236]	; (1deb8 <LORAWAN_RxDone+0xab4>)
   1ddca:	483d      	ldr	r0, [pc, #244]	; (1dec0 <LORAWAN_RxDone+0xabc>)
   1ddcc:	4798      	blx	r3
   1ddce:	0023      	movs	r3, r4
   1ddd0:	9a06      	ldr	r2, [sp, #24]
   1ddd2:	330c      	adds	r3, #12
   1ddd4:	b29b      	uxth	r3, r3
   1ddd6:	9300      	str	r3, [sp, #0]
   1ddd8:	4b38      	ldr	r3, [pc, #224]	; (1debc <LORAWAN_RxDone+0xab8>)
   1ddda:	2a00      	cmp	r2, #0
   1dddc:	d100      	bne.n	1dde0 <LORAWAN_RxDone+0x9dc>
   1ddde:	e562      	b.n	1d8a6 <LORAWAN_RxDone+0x4a2>
   1dde0:	0032      	movs	r2, r6
   1dde2:	2104      	movs	r1, #4
   1dde4:	0028      	movs	r0, r5
   1dde6:	4d37      	ldr	r5, [pc, #220]	; (1dec4 <LORAWAN_RxDone+0xac0>)
   1dde8:	47a8      	blx	r5
   1ddea:	2204      	movs	r2, #4
   1ddec:	4931      	ldr	r1, [pc, #196]	; (1deb4 <LORAWAN_RxDone+0xab0>)
   1ddee:	4d32      	ldr	r5, [pc, #200]	; (1deb8 <LORAWAN_RxDone+0xab4>)
   1ddf0:	a80d      	add	r0, sp, #52	; 0x34
   1ddf2:	47a8      	blx	r5
   1ddf4:	1f23      	subs	r3, r4, #4
   1ddf6:	18f9      	adds	r1, r7, r3
   1ddf8:	2204      	movs	r2, #4
   1ddfa:	a810      	add	r0, sp, #64	; 0x40
   1ddfc:	47a8      	blx	r5
   1ddfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1de00:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1de02:	4293      	cmp	r3, r2
   1de04:	d100      	bne.n	1de08 <LORAWAN_RxDone+0xa04>
   1de06:	e555      	b.n	1d8b4 <LORAWAN_RxDone+0x4b0>
   1de08:	9b06      	ldr	r3, [sp, #24]
   1de0a:	2b00      	cmp	r3, #0
   1de0c:	d108      	bne.n	1de20 <LORAWAN_RxDone+0xa1c>
   1de0e:	220e      	movs	r2, #14
   1de10:	4b2d      	ldr	r3, [pc, #180]	; (1dec8 <LORAWAN_RxDone+0xac4>)
   1de12:	3384      	adds	r3, #132	; 0x84
   1de14:	781b      	ldrb	r3, [r3, #0]
   1de16:	4013      	ands	r3, r2
   1de18:	2b06      	cmp	r3, #6
   1de1a:	d101      	bne.n	1de20 <LORAWAN_RxDone+0xa1c>
   1de1c:	4b2b      	ldr	r3, [pc, #172]	; (1decc <LORAWAN_RxDone+0xac8>)
   1de1e:	4798      	blx	r3
   1de20:	491e      	ldr	r1, [pc, #120]	; (1de9c <LORAWAN_RxDone+0xa98>)
   1de22:	784a      	ldrb	r2, [r1, #1]
   1de24:	780b      	ldrb	r3, [r1, #0]
   1de26:	0212      	lsls	r2, r2, #8
   1de28:	431a      	orrs	r2, r3
   1de2a:	788b      	ldrb	r3, [r1, #2]
   1de2c:	041b      	lsls	r3, r3, #16
   1de2e:	431a      	orrs	r2, r3
   1de30:	78cb      	ldrb	r3, [r1, #3]
   1de32:	061b      	lsls	r3, r3, #24
   1de34:	4313      	orrs	r3, r2
   1de36:	d101      	bne.n	1de3c <LORAWAN_RxDone+0xa38>
   1de38:	f7ff fb35 	bl	1d4a6 <LORAWAN_RxDone+0xa2>
   1de3c:	4a22      	ldr	r2, [pc, #136]	; (1dec8 <LORAWAN_RxDone+0xac4>)
   1de3e:	2020      	movs	r0, #32
   1de40:	0011      	movs	r1, r2
   1de42:	3194      	adds	r1, #148	; 0x94
   1de44:	780b      	ldrb	r3, [r1, #0]
   1de46:	4383      	bics	r3, r0
   1de48:	700b      	strb	r3, [r1, #0]
   1de4a:	9b06      	ldr	r3, [sp, #24]
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	d100      	bne.n	1de52 <LORAWAN_RxDone+0xa4e>
   1de50:	e52c      	b.n	1d8ac <LORAWAN_RxDone+0x4a8>
   1de52:	2322      	movs	r3, #34	; 0x22
   1de54:	a904      	add	r1, sp, #16
   1de56:	185b      	adds	r3, r3, r1
   1de58:	7819      	ldrb	r1, [r3, #0]
   1de5a:	233c      	movs	r3, #60	; 0x3c
   1de5c:	434b      	muls	r3, r1
   1de5e:	18d3      	adds	r3, r2, r3
   1de60:	9a07      	ldr	r2, [sp, #28]
   1de62:	33fc      	adds	r3, #252	; 0xfc
   1de64:	659a      	str	r2, [r3, #88]	; 0x58
   1de66:	2018      	movs	r0, #24
   1de68:	e51b      	b.n	1d8a2 <LORAWAN_RxDone+0x49e>
   1de6a:	46c0      	nop			; (mov r8, r8)
   1de6c:	0001b1b5 	.word	0x0001b1b5
   1de70:	0001b119 	.word	0x0001b119
   1de74:	0001be05 	.word	0x0001be05
   1de78:	0001bd55 	.word	0x0001bd55
   1de7c:	00015cfd 	.word	0x00015cfd
   1de80:	0000022b 	.word	0x0000022b
   1de84:	0001af61 	.word	0x0001af61
   1de88:	000159bd 	.word	0x000159bd
   1de8c:	20001c54 	.word	0x20001c54
   1de90:	0001ba3d 	.word	0x0001ba3d
   1de94:	0001ebc1 	.word	0x0001ebc1
   1de98:	0001ef01 	.word	0x0001ef01
   1de9c:	20001f2c 	.word	0x20001f2c
   1dea0:	20001e18 	.word	0x20001e18
   1dea4:	0001bdb9 	.word	0x0001bdb9
   1dea8:	0001ced5 	.word	0x0001ced5
   1deac:	0001ab29 	.word	0x0001ab29
   1deb0:	20001bf5 	.word	0x20001bf5
   1deb4:	20001164 	.word	0x20001164
   1deb8:	00024149 	.word	0x00024149
   1debc:	20001f34 	.word	0x20001f34
   1dec0:	20001f44 	.word	0x20001f44
   1dec4:	000133b5 	.word	0x000133b5
   1dec8:	20001bd0 	.word	0x20001bd0
   1decc:	0001abc1 	.word	0x0001abc1

0001ded0 <LorawanSetEdClass>:
   1ded0:	2388      	movs	r3, #136	; 0x88
   1ded2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ded4:	4d1a      	ldr	r5, [pc, #104]	; (1df40 <LorawanSetEdClass+0x70>)
   1ded6:	009b      	lsls	r3, r3, #2
   1ded8:	5ceb      	ldrb	r3, [r5, r3]
   1deda:	0004      	movs	r4, r0
   1dedc:	2011      	movs	r0, #17
   1dede:	2b00      	cmp	r3, #0
   1dee0:	d013      	beq.n	1df0a <LorawanSetEdClass+0x3a>
   1dee2:	002b      	movs	r3, r5
   1dee4:	33fe      	adds	r3, #254	; 0xfe
   1dee6:	781b      	ldrb	r3, [r3, #0]
   1dee8:	3807      	subs	r0, #7
   1deea:	4223      	tst	r3, r4
   1deec:	d00d      	beq.n	1df0a <LorawanSetEdClass+0x3a>
   1deee:	002b      	movs	r3, r5
   1def0:	33fd      	adds	r3, #253	; 0xfd
   1def2:	7819      	ldrb	r1, [r3, #0]
   1def4:	428c      	cmp	r4, r1
   1def6:	d007      	beq.n	1df08 <LorawanSetEdClass+0x38>
   1def8:	2901      	cmp	r1, #1
   1defa:	d107      	bne.n	1df0c <LorawanSetEdClass+0x3c>
   1defc:	2c04      	cmp	r4, #4
   1defe:	d104      	bne.n	1df0a <LorawanSetEdClass+0x3a>
   1df00:	701c      	strb	r4, [r3, #0]
   1df02:	2000      	movs	r0, #0
   1df04:	4b0f      	ldr	r3, [pc, #60]	; (1df44 <LorawanSetEdClass+0x74>)
   1df06:	4798      	blx	r3
   1df08:	2008      	movs	r0, #8
   1df0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1df0c:	2904      	cmp	r1, #4
   1df0e:	d1fc      	bne.n	1df0a <LorawanSetEdClass+0x3a>
   1df10:	2c01      	cmp	r4, #1
   1df12:	d1fa      	bne.n	1df0a <LorawanSetEdClass+0x3a>
   1df14:	701c      	strb	r4, [r3, #0]
   1df16:	0021      	movs	r1, r4
   1df18:	4b0a      	ldr	r3, [pc, #40]	; (1df44 <LorawanSetEdClass+0x74>)
   1df1a:	2000      	movs	r0, #0
   1df1c:	4798      	blx	r3
   1df1e:	002a      	movs	r2, r5
   1df20:	210e      	movs	r1, #14
   1df22:	3284      	adds	r2, #132	; 0x84
   1df24:	7813      	ldrb	r3, [r2, #0]
   1df26:	a801      	add	r0, sp, #4
   1df28:	438b      	bics	r3, r1
   1df2a:	7013      	strb	r3, [r2, #0]
   1df2c:	4b06      	ldr	r3, [pc, #24]	; (1df48 <LorawanSetEdClass+0x78>)
   1df2e:	7004      	strb	r4, [r0, #0]
   1df30:	4798      	blx	r3
   1df32:	2394      	movs	r3, #148	; 0x94
   1df34:	005b      	lsls	r3, r3, #1
   1df36:	5ce8      	ldrb	r0, [r5, r3]
   1df38:	4b04      	ldr	r3, [pc, #16]	; (1df4c <LorawanSetEdClass+0x7c>)
   1df3a:	4798      	blx	r3
   1df3c:	e7e4      	b.n	1df08 <LorawanSetEdClass+0x38>
   1df3e:	46c0      	nop			; (mov r8, r8)
   1df40:	20001bd0 	.word	0x20001bd0
   1df44:	00013b45 	.word	0x00013b45
   1df48:	00020895 	.word	0x00020895
   1df4c:	00015cfd 	.word	0x00015cfd

0001df50 <LORAWAN_SetAttr>:
   1df50:	2388      	movs	r3, #136	; 0x88
   1df52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1df54:	4cbb      	ldr	r4, [pc, #748]	; (1e244 <LORAWAN_SetAttr+0x2f4>)
   1df56:	009b      	lsls	r3, r3, #2
   1df58:	5ce3      	ldrb	r3, [r4, r3]
   1df5a:	000d      	movs	r5, r1
   1df5c:	2611      	movs	r6, #17
   1df5e:	2b00      	cmp	r3, #0
   1df60:	d100      	bne.n	1df64 <LORAWAN_SetAttr+0x14>
   1df62:	e11f      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1df64:	2846      	cmp	r0, #70	; 0x46
   1df66:	d878      	bhi.n	1e05a <LORAWAN_SetAttr+0x10a>
   1df68:	f003 f874 	bl	21054 <__gnu_thumb1_case_uhi>
   1df6c:	00930047 	.word	0x00930047
   1df70:	00fc00b2 	.word	0x00fc00b2
   1df74:	00e600c5 	.word	0x00e600c5
   1df78:	0134011e 	.word	0x0134011e
   1df7c:	01660154 	.word	0x01660154
   1df80:	01830178 	.word	0x01830178
   1df84:	01a6018d 	.word	0x01a6018d
   1df88:	007701ab 	.word	0x007701ab
   1df8c:	01b501b0 	.word	0x01b501b0
   1df90:	01bf01ba 	.word	0x01bf01ba
   1df94:	01e601c4 	.word	0x01e601c4
   1df98:	01cb01eb 	.word	0x01cb01eb
   1df9c:	01fc01c8 	.word	0x01fc01c8
   1dfa0:	01e101f8 	.word	0x01e101f8
   1dfa4:	01d701dd 	.word	0x01d701dd
   1dfa8:	00770077 	.word	0x00770077
   1dfac:	0077019e 	.word	0x0077019e
   1dfb0:	00770077 	.word	0x00770077
   1dfb4:	00770077 	.word	0x00770077
   1dfb8:	02000077 	.word	0x02000077
   1dfbc:	02030066 	.word	0x02030066
   1dfc0:	020d0211 	.word	0x020d0211
   1dfc4:	00770208 	.word	0x00770208
   1dfc8:	02190215 	.word	0x02190215
   1dfcc:	0221021d 	.word	0x0221021d
   1dfd0:	02290225 	.word	0x02290225
   1dfd4:	00770249 	.word	0x00770249
   1dfd8:	00770077 	.word	0x00770077
   1dfdc:	00770077 	.word	0x00770077
   1dfe0:	00770077 	.word	0x00770077
   1dfe4:	00770077 	.word	0x00770077
   1dfe8:	02600077 	.word	0x02600077
   1dfec:	026e026a 	.word	0x026e026a
   1dff0:	00770077 	.word	0x00770077
   1dff4:	02730077 	.word	0x02730077
   1dff8:	0271      	.short	0x0271
   1dffa:	260a      	movs	r6, #10
   1dffc:	2900      	cmp	r1, #0
   1dffe:	d100      	bne.n	1e002 <LORAWAN_SetAttr+0xb2>
   1e000:	e0d0      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e002:	0020      	movs	r0, r4
   1e004:	2208      	movs	r2, #8
   1e006:	4b90      	ldr	r3, [pc, #576]	; (1e248 <LORAWAN_SetAttr+0x2f8>)
   1e008:	305d      	adds	r0, #93	; 0x5d
   1e00a:	4798      	blx	r3
   1e00c:	2108      	movs	r1, #8
   1e00e:	4e8f      	ldr	r6, [pc, #572]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e010:	2001      	movs	r0, #1
   1e012:	47b0      	blx	r6
   1e014:	0022      	movs	r2, r4
   1e016:	2501      	movs	r5, #1
   1e018:	32de      	adds	r2, #222	; 0xde
   1e01a:	7813      	ldrb	r3, [r2, #0]
   1e01c:	2109      	movs	r1, #9
   1e01e:	432b      	orrs	r3, r5
   1e020:	3484      	adds	r4, #132	; 0x84
   1e022:	0028      	movs	r0, r5
   1e024:	7013      	strb	r3, [r2, #0]
   1e026:	47b0      	blx	r6
   1e028:	7823      	ldrb	r3, [r4, #0]
   1e02a:	210b      	movs	r1, #11
   1e02c:	43ab      	bics	r3, r5
   1e02e:	0028      	movs	r0, r5
   1e030:	7023      	strb	r3, [r4, #0]
   1e032:	47b0      	blx	r6
   1e034:	2608      	movs	r6, #8
   1e036:	e0b5      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e038:	0023      	movs	r3, r4
   1e03a:	33ff      	adds	r3, #255	; 0xff
   1e03c:	7f5b      	ldrb	r3, [r3, #29]
   1e03e:	260a      	movs	r6, #10
   1e040:	075b      	lsls	r3, r3, #29
   1e042:	d400      	bmi.n	1e046 <LORAWAN_SetAttr+0xf6>
   1e044:	e0ae      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e046:	79ca      	ldrb	r2, [r1, #7]
   1e048:	4b81      	ldr	r3, [pc, #516]	; (1e250 <LORAWAN_SetAttr+0x300>)
   1e04a:	2a00      	cmp	r2, #0
   1e04c:	d10e      	bne.n	1e06c <LORAWAN_SetAttr+0x11c>
   1e04e:	4669      	mov	r1, sp
   1e050:	201d      	movs	r0, #29
   1e052:	714a      	strb	r2, [r1, #5]
   1e054:	4798      	blx	r3
   1e056:	2800      	cmp	r0, #0
   1e058:	d001      	beq.n	1e05e <LORAWAN_SetAttr+0x10e>
   1e05a:	260a      	movs	r6, #10
   1e05c:	e0a2      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e05e:	2109      	movs	r1, #9
   1e060:	34fe      	adds	r4, #254	; 0xfe
   1e062:	8460      	strh	r0, [r4, #34]	; 0x22
   1e064:	8420      	strh	r0, [r4, #32]
   1e066:	4b79      	ldr	r3, [pc, #484]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e068:	4798      	blx	r3
   1e06a:	e7e3      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e06c:	2002      	movs	r0, #2
   1e06e:	5e2a      	ldrsh	r2, [r5, r0]
   1e070:	88ae      	ldrh	r6, [r5, #4]
   1e072:	79a8      	ldrb	r0, [r5, #6]
   1e074:	466d      	mov	r5, sp
   1e076:	806a      	strh	r2, [r5, #2]
   1e078:	2201      	movs	r2, #1
   1e07a:	8809      	ldrh	r1, [r1, #0]
   1e07c:	7128      	strb	r0, [r5, #4]
   1e07e:	8029      	strh	r1, [r5, #0]
   1e080:	201d      	movs	r0, #29
   1e082:	4669      	mov	r1, sp
   1e084:	716a      	strb	r2, [r5, #5]
   1e086:	4798      	blx	r3
   1e088:	2800      	cmp	r0, #0
   1e08a:	d1e6      	bne.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e08c:	34fe      	adds	r4, #254	; 0xfe
   1e08e:	8466      	strh	r6, [r4, #34]	; 0x22
   1e090:	e7d0      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e092:	260a      	movs	r6, #10
   1e094:	2900      	cmp	r1, #0
   1e096:	d100      	bne.n	1e09a <LORAWAN_SetAttr+0x14a>
   1e098:	e084      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e09a:	0020      	movs	r0, r4
   1e09c:	2208      	movs	r2, #8
   1e09e:	4b6a      	ldr	r3, [pc, #424]	; (1e248 <LORAWAN_SetAttr+0x2f8>)
   1e0a0:	3055      	adds	r0, #85	; 0x55
   1e0a2:	4798      	blx	r3
   1e0a4:	2107      	movs	r1, #7
   1e0a6:	4d69      	ldr	r5, [pc, #420]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e0a8:	2001      	movs	r0, #1
   1e0aa:	47a8      	blx	r5
   1e0ac:	0022      	movs	r2, r4
   1e0ae:	2302      	movs	r3, #2
   1e0b0:	32de      	adds	r2, #222	; 0xde
   1e0b2:	7811      	ldrb	r1, [r2, #0]
   1e0b4:	2001      	movs	r0, #1
   1e0b6:	430b      	orrs	r3, r1
   1e0b8:	2109      	movs	r1, #9
   1e0ba:	7013      	strb	r3, [r2, #0]
   1e0bc:	47a8      	blx	r5
   1e0be:	2001      	movs	r0, #1
   1e0c0:	3484      	adds	r4, #132	; 0x84
   1e0c2:	7823      	ldrb	r3, [r4, #0]
   1e0c4:	210b      	movs	r1, #11
   1e0c6:	4383      	bics	r3, r0
   1e0c8:	7023      	strb	r3, [r4, #0]
   1e0ca:	47a8      	blx	r5
   1e0cc:	3e02      	subs	r6, #2
   1e0ce:	e069      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e0d0:	680b      	ldr	r3, [r1, #0]
   1e0d2:	2001      	movs	r0, #1
   1e0d4:	0a19      	lsrs	r1, r3, #8
   1e0d6:	70a1      	strb	r1, [r4, #2]
   1e0d8:	0c19      	lsrs	r1, r3, #16
   1e0da:	7063      	strb	r3, [r4, #1]
   1e0dc:	70e1      	strb	r1, [r4, #3]
   1e0de:	0e1b      	lsrs	r3, r3, #24
   1e0e0:	2103      	movs	r1, #3
   1e0e2:	4d5a      	ldr	r5, [pc, #360]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e0e4:	7123      	strb	r3, [r4, #4]
   1e0e6:	47a8      	blx	r5
   1e0e8:	0022      	movs	r2, r4
   1e0ea:	2304      	movs	r3, #4
   1e0ec:	32de      	adds	r2, #222	; 0xde
   1e0ee:	7811      	ldrb	r1, [r2, #0]
   1e0f0:	430b      	orrs	r3, r1
   1e0f2:	7013      	strb	r3, [r2, #0]
   1e0f4:	e015      	b.n	1e122 <LORAWAN_SetAttr+0x1d2>
   1e0f6:	260a      	movs	r6, #10
   1e0f8:	2900      	cmp	r1, #0
   1e0fa:	d053      	beq.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e0fc:	3606      	adds	r6, #6
   1e0fe:	0032      	movs	r2, r6
   1e100:	4f51      	ldr	r7, [pc, #324]	; (1e248 <LORAWAN_SetAttr+0x2f8>)
   1e102:	1d60      	adds	r0, r4, #5
   1e104:	47b8      	blx	r7
   1e106:	0020      	movs	r0, r4
   1e108:	0032      	movs	r2, r6
   1e10a:	0029      	movs	r1, r5
   1e10c:	3025      	adds	r0, #37	; 0x25
   1e10e:	47b8      	blx	r7
   1e110:	2104      	movs	r1, #4
   1e112:	2001      	movs	r0, #1
   1e114:	4d4d      	ldr	r5, [pc, #308]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e116:	47a8      	blx	r5
   1e118:	0023      	movs	r3, r4
   1e11a:	33de      	adds	r3, #222	; 0xde
   1e11c:	781a      	ldrb	r2, [r3, #0]
   1e11e:	4316      	orrs	r6, r2
   1e120:	701e      	strb	r6, [r3, #0]
   1e122:	2109      	movs	r1, #9
   1e124:	2001      	movs	r0, #1
   1e126:	47a8      	blx	r5
   1e128:	2001      	movs	r0, #1
   1e12a:	210b      	movs	r1, #11
   1e12c:	3484      	adds	r4, #132	; 0x84
   1e12e:	7823      	ldrb	r3, [r4, #0]
   1e130:	4383      	bics	r3, r0
   1e132:	7023      	strb	r3, [r4, #0]
   1e134:	47a8      	blx	r5
   1e136:	e77d      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e138:	260a      	movs	r6, #10
   1e13a:	2900      	cmp	r1, #0
   1e13c:	d032      	beq.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e13e:	0020      	movs	r0, r4
   1e140:	2210      	movs	r2, #16
   1e142:	4e41      	ldr	r6, [pc, #260]	; (1e248 <LORAWAN_SetAttr+0x2f8>)
   1e144:	3015      	adds	r0, #21
   1e146:	47b0      	blx	r6
   1e148:	0020      	movs	r0, r4
   1e14a:	2210      	movs	r2, #16
   1e14c:	0029      	movs	r1, r5
   1e14e:	3035      	adds	r0, #53	; 0x35
   1e150:	47b0      	blx	r6
   1e152:	2105      	movs	r1, #5
   1e154:	2001      	movs	r0, #1
   1e156:	4d3d      	ldr	r5, [pc, #244]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e158:	47a8      	blx	r5
   1e15a:	0022      	movs	r2, r4
   1e15c:	32de      	adds	r2, #222	; 0xde
   1e15e:	7811      	ldrb	r1, [r2, #0]
   1e160:	2320      	movs	r3, #32
   1e162:	e7c5      	b.n	1e0f0 <LORAWAN_SetAttr+0x1a0>
   1e164:	260a      	movs	r6, #10
   1e166:	2900      	cmp	r1, #0
   1e168:	d01c      	beq.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e16a:	4b3a      	ldr	r3, [pc, #232]	; (1e254 <LORAWAN_SetAttr+0x304>)
   1e16c:	3e02      	subs	r6, #2
   1e16e:	5ce3      	ldrb	r3, [r4, r3]
   1e170:	2b00      	cmp	r3, #0
   1e172:	d117      	bne.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e174:	0020      	movs	r0, r4
   1e176:	2210      	movs	r2, #16
   1e178:	4b33      	ldr	r3, [pc, #204]	; (1e248 <LORAWAN_SetAttr+0x2f8>)
   1e17a:	3045      	adds	r0, #69	; 0x45
   1e17c:	4798      	blx	r3
   1e17e:	2106      	movs	r1, #6
   1e180:	4d32      	ldr	r5, [pc, #200]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e182:	2001      	movs	r0, #1
   1e184:	47a8      	blx	r5
   1e186:	0022      	movs	r2, r4
   1e188:	32de      	adds	r2, #222	; 0xde
   1e18a:	7813      	ldrb	r3, [r2, #0]
   1e18c:	2109      	movs	r1, #9
   1e18e:	4333      	orrs	r3, r6
   1e190:	2001      	movs	r0, #1
   1e192:	7013      	strb	r3, [r2, #0]
   1e194:	47a8      	blx	r5
   1e196:	2001      	movs	r0, #1
   1e198:	3484      	adds	r4, #132	; 0x84
   1e19a:	7823      	ldrb	r3, [r4, #0]
   1e19c:	210b      	movs	r1, #11
   1e19e:	4383      	bics	r3, r0
   1e1a0:	7023      	strb	r3, [r4, #0]
   1e1a2:	47a8      	blx	r5
   1e1a4:	0030      	movs	r0, r6
   1e1a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1e1a8:	780b      	ldrb	r3, [r1, #0]
   1e1aa:	2001      	movs	r0, #1
   1e1ac:	0021      	movs	r1, r4
   1e1ae:	2520      	movs	r5, #32
   1e1b0:	3184      	adds	r1, #132	; 0x84
   1e1b2:	4003      	ands	r3, r0
   1e1b4:	015a      	lsls	r2, r3, #5
   1e1b6:	780b      	ldrb	r3, [r1, #0]
   1e1b8:	43ab      	bics	r3, r5
   1e1ba:	4313      	orrs	r3, r2
   1e1bc:	700b      	strb	r3, [r1, #0]
   1e1be:	0023      	movs	r3, r4
   1e1c0:	2200      	movs	r2, #0
   1e1c2:	33ca      	adds	r3, #202	; 0xca
   1e1c4:	3494      	adds	r4, #148	; 0x94
   1e1c6:	801a      	strh	r2, [r3, #0]
   1e1c8:	7823      	ldrb	r3, [r4, #0]
   1e1ca:	3210      	adds	r2, #16
   1e1cc:	4393      	bics	r3, r2
   1e1ce:	7023      	strb	r3, [r4, #0]
   1e1d0:	210b      	movs	r1, #11
   1e1d2:	e748      	b.n	1e066 <LORAWAN_SetAttr+0x116>
   1e1d4:	466a      	mov	r2, sp
   1e1d6:	780b      	ldrb	r3, [r1, #0]
   1e1d8:	7013      	strb	r3, [r2, #0]
   1e1da:	0022      	movs	r2, r4
   1e1dc:	32f3      	adds	r2, #243	; 0xf3
   1e1de:	7812      	ldrb	r2, [r2, #0]
   1e1e0:	429a      	cmp	r2, r3
   1e1e2:	d900      	bls.n	1e1e6 <LORAWAN_SetAttr+0x296>
   1e1e4:	e739      	b.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e1e6:	0022      	movs	r2, r4
   1e1e8:	32f4      	adds	r2, #244	; 0xf4
   1e1ea:	7812      	ldrb	r2, [r2, #0]
   1e1ec:	429a      	cmp	r2, r3
   1e1ee:	d200      	bcs.n	1e1f2 <LORAWAN_SetAttr+0x2a2>
   1e1f0:	e733      	b.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e1f2:	4669      	mov	r1, sp
   1e1f4:	2010      	movs	r0, #16
   1e1f6:	4b18      	ldr	r3, [pc, #96]	; (1e258 <LORAWAN_SetAttr+0x308>)
   1e1f8:	4798      	blx	r3
   1e1fa:	0006      	movs	r6, r0
   1e1fc:	2808      	cmp	r0, #8
   1e1fe:	d000      	beq.n	1e202 <LORAWAN_SetAttr+0x2b2>
   1e200:	e72b      	b.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e202:	466b      	mov	r3, sp
   1e204:	210c      	movs	r1, #12
   1e206:	2001      	movs	r0, #1
   1e208:	781b      	ldrb	r3, [r3, #0]
   1e20a:	34e7      	adds	r4, #231	; 0xe7
   1e20c:	7023      	strb	r3, [r4, #0]
   1e20e:	4b0f      	ldr	r3, [pc, #60]	; (1e24c <LORAWAN_SetAttr+0x2fc>)
   1e210:	4798      	blx	r3
   1e212:	e7c7      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e214:	466a      	mov	r2, sp
   1e216:	780b      	ldrb	r3, [r1, #0]
   1e218:	201d      	movs	r0, #29
   1e21a:	7013      	strb	r3, [r2, #0]
   1e21c:	4669      	mov	r1, sp
   1e21e:	4b0e      	ldr	r3, [pc, #56]	; (1e258 <LORAWAN_SetAttr+0x308>)
   1e220:	4798      	blx	r3
   1e222:	0006      	movs	r6, r0
   1e224:	2808      	cmp	r0, #8
   1e226:	d000      	beq.n	1e22a <LORAWAN_SetAttr+0x2da>
   1e228:	e717      	b.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e22a:	466b      	mov	r3, sp
   1e22c:	781b      	ldrb	r3, [r3, #0]
   1e22e:	34e9      	adds	r4, #233	; 0xe9
   1e230:	7023      	strb	r3, [r4, #0]
   1e232:	210a      	movs	r1, #10
   1e234:	2000      	movs	r0, #0
   1e236:	e7ea      	b.n	1e20e <LORAWAN_SetAttr+0x2be>
   1e238:	780b      	ldrb	r3, [r1, #0]
   1e23a:	2103      	movs	r1, #3
   1e23c:	34ff      	adds	r4, #255	; 0xff
   1e23e:	7063      	strb	r3, [r4, #1]
   1e240:	2000      	movs	r0, #0
   1e242:	e710      	b.n	1e066 <LORAWAN_SetAttr+0x116>
   1e244:	20001bd0 	.word	0x20001bd0
   1e248:	00024149 	.word	0x00024149
   1e24c:	00013b45 	.word	0x00013b45
   1e250:	0001f5e1 	.word	0x0001f5e1
   1e254:	0000022d 	.word	0x0000022d
   1e258:	0000d5ed 	.word	0x0000d5ed
   1e25c:	680b      	ldr	r3, [r1, #0]
   1e25e:	260a      	movs	r6, #10
   1e260:	1c5a      	adds	r2, r3, #1
   1e262:	d09f      	beq.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e264:	2115      	movs	r1, #21
   1e266:	2000      	movs	r0, #0
   1e268:	3488      	adds	r4, #136	; 0x88
   1e26a:	6023      	str	r3, [r4, #0]
   1e26c:	4b7f      	ldr	r3, [pc, #508]	; (1e46c <LORAWAN_SetAttr+0x51c>)
   1e26e:	4798      	blx	r3
   1e270:	e72c      	b.n	1e0cc <LORAWAN_SetAttr+0x17c>
   1e272:	680b      	ldr	r3, [r1, #0]
   1e274:	260a      	movs	r6, #10
   1e276:	1c5a      	adds	r2, r3, #1
   1e278:	d100      	bne.n	1e27c <LORAWAN_SetAttr+0x32c>
   1e27a:	e793      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e27c:	0031      	movs	r1, r6
   1e27e:	348c      	adds	r4, #140	; 0x8c
   1e280:	6023      	str	r3, [r4, #0]
   1e282:	2001      	movs	r0, #1
   1e284:	e7f2      	b.n	1e26c <LORAWAN_SetAttr+0x31c>
   1e286:	0026      	movs	r6, r4
   1e288:	880b      	ldrh	r3, [r1, #0]
   1e28a:	36d0      	adds	r6, #208	; 0xd0
   1e28c:	210c      	movs	r1, #12
   1e28e:	2000      	movs	r0, #0
   1e290:	4d76      	ldr	r5, [pc, #472]	; (1e46c <LORAWAN_SetAttr+0x51c>)
   1e292:	8033      	strh	r3, [r6, #0]
   1e294:	47a8      	blx	r5
   1e296:	22fa      	movs	r2, #250	; 0xfa
   1e298:	8833      	ldrh	r3, [r6, #0]
   1e29a:	0092      	lsls	r2, r2, #2
   1e29c:	189b      	adds	r3, r3, r2
   1e29e:	34d2      	adds	r4, #210	; 0xd2
   1e2a0:	8023      	strh	r3, [r4, #0]
   1e2a2:	210d      	movs	r1, #13
   1e2a4:	2000      	movs	r0, #0
   1e2a6:	e745      	b.n	1e134 <LORAWAN_SetAttr+0x1e4>
   1e2a8:	780b      	ldrb	r3, [r1, #0]
   1e2aa:	260a      	movs	r6, #10
   1e2ac:	2b0f      	cmp	r3, #15
   1e2ae:	d900      	bls.n	1e2b2 <LORAWAN_SetAttr+0x362>
   1e2b0:	e778      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e2b2:	3498      	adds	r4, #152	; 0x98
   1e2b4:	7023      	strb	r3, [r4, #0]
   1e2b6:	e709      	b.n	1e0cc <LORAWAN_SetAttr+0x17c>
   1e2b8:	880b      	ldrh	r3, [r1, #0]
   1e2ba:	34d4      	adds	r4, #212	; 0xd4
   1e2bc:	8023      	strh	r3, [r4, #0]
   1e2be:	210e      	movs	r1, #14
   1e2c0:	e7be      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2c2:	880b      	ldrh	r3, [r1, #0]
   1e2c4:	34d6      	adds	r4, #214	; 0xd6
   1e2c6:	8023      	strh	r3, [r4, #0]
   1e2c8:	210f      	movs	r1, #15
   1e2ca:	e7b9      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2cc:	780b      	ldrb	r3, [r1, #0]
   1e2ce:	34dc      	adds	r4, #220	; 0xdc
   1e2d0:	7023      	strb	r3, [r4, #0]
   1e2d2:	2111      	movs	r1, #17
   1e2d4:	e7b4      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2d6:	780b      	ldrb	r3, [r1, #0]
   1e2d8:	34dd      	adds	r4, #221	; 0xdd
   1e2da:	7023      	strb	r3, [r4, #0]
   1e2dc:	2112      	movs	r1, #18
   1e2de:	e7af      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2e0:	880b      	ldrh	r3, [r1, #0]
   1e2e2:	34da      	adds	r4, #218	; 0xda
   1e2e4:	8023      	strh	r3, [r4, #0]
   1e2e6:	2110      	movs	r1, #16
   1e2e8:	e7aa      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2ea:	780b      	ldrb	r3, [r1, #0]
   1e2ec:	34e2      	adds	r4, #226	; 0xe2
   1e2ee:	7023      	strb	r3, [r4, #0]
   1e2f0:	2114      	movs	r1, #20
   1e2f2:	e7a5      	b.n	1e240 <LORAWAN_SetAttr+0x2f0>
   1e2f4:	780b      	ldrb	r3, [r1, #0]
   1e2f6:	34e1      	adds	r4, #225	; 0xe1
   1e2f8:	7023      	strb	r3, [r4, #0]
   1e2fa:	e69b      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e2fc:	780b      	ldrb	r3, [r1, #0]
   1e2fe:	34e8      	adds	r4, #232	; 0xe8
   1e300:	e7fa      	b.n	1e2f8 <LORAWAN_SetAttr+0x3a8>
   1e302:	2001      	movs	r0, #1
   1e304:	780b      	ldrb	r3, [r1, #0]
   1e306:	2110      	movs	r1, #16
   1e308:	3484      	adds	r4, #132	; 0x84
   1e30a:	4003      	ands	r3, r0
   1e30c:	011a      	lsls	r2, r3, #4
   1e30e:	7823      	ldrb	r3, [r4, #0]
   1e310:	438b      	bics	r3, r1
   1e312:	4313      	orrs	r3, r2
   1e314:	7023      	strb	r3, [r4, #0]
   1e316:	3905      	subs	r1, #5
   1e318:	e6a5      	b.n	1e066 <LORAWAN_SetAttr+0x116>
   1e31a:	7909      	ldrb	r1, [r1, #4]
   1e31c:	7828      	ldrb	r0, [r5, #0]
   1e31e:	4b54      	ldr	r3, [pc, #336]	; (1e470 <LORAWAN_SetAttr+0x520>)
   1e320:	4798      	blx	r3
   1e322:	0006      	movs	r6, r0
   1e324:	e73e      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e326:	7909      	ldrb	r1, [r1, #4]
   1e328:	7828      	ldrb	r0, [r5, #0]
   1e32a:	4b52      	ldr	r3, [pc, #328]	; (1e474 <LORAWAN_SetAttr+0x524>)
   1e32c:	e7f8      	b.n	1e320 <LORAWAN_SetAttr+0x3d0>
   1e32e:	7808      	ldrb	r0, [r1, #0]
   1e330:	4b51      	ldr	r3, [pc, #324]	; (1e478 <LORAWAN_SetAttr+0x528>)
   1e332:	6849      	ldr	r1, [r1, #4]
   1e334:	4798      	blx	r3
   1e336:	e7f4      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e338:	7909      	ldrb	r1, [r1, #4]
   1e33a:	6828      	ldr	r0, [r5, #0]
   1e33c:	4b4f      	ldr	r3, [pc, #316]	; (1e47c <LORAWAN_SetAttr+0x52c>)
   1e33e:	4798      	blx	r3
   1e340:	e7ef      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e342:	786b      	ldrb	r3, [r5, #1]
   1e344:	7828      	ldrb	r0, [r5, #0]
   1e346:	021b      	lsls	r3, r3, #8
   1e348:	4303      	orrs	r3, r0
   1e34a:	78a8      	ldrb	r0, [r5, #2]
   1e34c:	7909      	ldrb	r1, [r1, #4]
   1e34e:	0400      	lsls	r0, r0, #16
   1e350:	4303      	orrs	r3, r0
   1e352:	78e8      	ldrb	r0, [r5, #3]
   1e354:	0600      	lsls	r0, r0, #24
   1e356:	4318      	orrs	r0, r3
   1e358:	4b49      	ldr	r3, [pc, #292]	; (1e480 <LORAWAN_SetAttr+0x530>)
   1e35a:	e7f0      	b.n	1e33e <LORAWAN_SetAttr+0x3ee>
   1e35c:	7808      	ldrb	r0, [r1, #0]
   1e35e:	4b49      	ldr	r3, [pc, #292]	; (1e484 <LORAWAN_SetAttr+0x534>)
   1e360:	4798      	blx	r3
   1e362:	e7de      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e364:	8808      	ldrh	r0, [r1, #0]
   1e366:	4b48      	ldr	r3, [pc, #288]	; (1e488 <LORAWAN_SetAttr+0x538>)
   1e368:	4798      	blx	r3
   1e36a:	e663      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e36c:	4b47      	ldr	r3, [pc, #284]	; (1e48c <LORAWAN_SetAttr+0x53c>)
   1e36e:	6019      	str	r1, [r3, #0]
   1e370:	e673      	b.n	1e05a <LORAWAN_SetAttr+0x10a>
   1e372:	7809      	ldrb	r1, [r1, #0]
   1e374:	7868      	ldrb	r0, [r5, #1]
   1e376:	4b46      	ldr	r3, [pc, #280]	; (1e490 <LORAWAN_SetAttr+0x540>)
   1e378:	4798      	blx	r3
   1e37a:	e7d2      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e37c:	7809      	ldrb	r1, [r1, #0]
   1e37e:	4b45      	ldr	r3, [pc, #276]	; (1e494 <LORAWAN_SetAttr+0x544>)
   1e380:	1c68      	adds	r0, r5, #1
   1e382:	4798      	blx	r3
   1e384:	e7cd      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e386:	7809      	ldrb	r1, [r1, #0]
   1e388:	1c68      	adds	r0, r5, #1
   1e38a:	4b43      	ldr	r3, [pc, #268]	; (1e498 <LORAWAN_SetAttr+0x548>)
   1e38c:	e7f9      	b.n	1e382 <LORAWAN_SetAttr+0x432>
   1e38e:	7809      	ldrb	r1, [r1, #0]
   1e390:	6868      	ldr	r0, [r5, #4]
   1e392:	4b42      	ldr	r3, [pc, #264]	; (1e49c <LORAWAN_SetAttr+0x54c>)
   1e394:	e7f5      	b.n	1e382 <LORAWAN_SetAttr+0x432>
   1e396:	7809      	ldrb	r1, [r1, #0]
   1e398:	6868      	ldr	r0, [r5, #4]
   1e39a:	4b41      	ldr	r3, [pc, #260]	; (1e4a0 <LORAWAN_SetAttr+0x550>)
   1e39c:	e7f1      	b.n	1e382 <LORAWAN_SetAttr+0x432>
   1e39e:	7809      	ldrb	r1, [r1, #0]
   1e3a0:	6868      	ldr	r0, [r5, #4]
   1e3a2:	4b40      	ldr	r3, [pc, #256]	; (1e4a4 <LORAWAN_SetAttr+0x554>)
   1e3a4:	e7ed      	b.n	1e382 <LORAWAN_SetAttr+0x432>
   1e3a6:	7809      	ldrb	r1, [r1, #0]
   1e3a8:	6868      	ldr	r0, [r5, #4]
   1e3aa:	4b3f      	ldr	r3, [pc, #252]	; (1e4a8 <LORAWAN_SetAttr+0x558>)
   1e3ac:	e7e9      	b.n	1e382 <LORAWAN_SetAttr+0x432>
   1e3ae:	7809      	ldrb	r1, [r1, #0]
   1e3b0:	7868      	ldrb	r0, [r5, #1]
   1e3b2:	4b3e      	ldr	r3, [pc, #248]	; (1e4ac <LORAWAN_SetAttr+0x55c>)
   1e3b4:	e7e0      	b.n	1e378 <LORAWAN_SetAttr+0x428>
   1e3b6:	7809      	ldrb	r1, [r1, #0]
   1e3b8:	7868      	ldrb	r0, [r5, #1]
   1e3ba:	4b3d      	ldr	r3, [pc, #244]	; (1e4b0 <LORAWAN_SetAttr+0x560>)
   1e3bc:	e7dc      	b.n	1e378 <LORAWAN_SetAttr+0x428>
   1e3be:	2300      	movs	r3, #0
   1e3c0:	466a      	mov	r2, sp
   1e3c2:	7809      	ldrb	r1, [r1, #0]
   1e3c4:	7013      	strb	r3, [r2, #0]
   1e3c6:	4299      	cmp	r1, r3
   1e3c8:	d014      	beq.n	1e3f4 <LORAWAN_SetAttr+0x4a4>
   1e3ca:	0022      	movs	r2, r4
   1e3cc:	2102      	movs	r1, #2
   1e3ce:	32ff      	adds	r2, #255	; 0xff
   1e3d0:	7f53      	ldrb	r3, [r2, #29]
   1e3d2:	420b      	tst	r3, r1
   1e3d4:	d001      	beq.n	1e3da <LORAWAN_SetAttr+0x48a>
   1e3d6:	438b      	bics	r3, r1
   1e3d8:	7753      	strb	r3, [r2, #29]
   1e3da:	2220      	movs	r2, #32
   1e3dc:	34ff      	adds	r4, #255	; 0xff
   1e3de:	7f63      	ldrb	r3, [r4, #29]
   1e3e0:	4213      	tst	r3, r2
   1e3e2:	d100      	bne.n	1e3e6 <LORAWAN_SetAttr+0x496>
   1e3e4:	e626      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e3e6:	4393      	bics	r3, r2
   1e3e8:	7763      	strb	r3, [r4, #29]
   1e3ea:	4669      	mov	r1, sp
   1e3ec:	4b31      	ldr	r3, [pc, #196]	; (1e4b4 <LORAWAN_SetAttr+0x564>)
   1e3ee:	2038      	movs	r0, #56	; 0x38
   1e3f0:	4798      	blx	r3
   1e3f2:	e61f      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e3f4:	4a30      	ldr	r2, [pc, #192]	; (1e4b8 <LORAWAN_SetAttr+0x568>)
   1e3f6:	4b31      	ldr	r3, [pc, #196]	; (1e4bc <LORAWAN_SetAttr+0x56c>)
   1e3f8:	200e      	movs	r0, #14
   1e3fa:	4798      	blx	r3
   1e3fc:	e61a      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e3fe:	466b      	mov	r3, sp
   1e400:	780a      	ldrb	r2, [r1, #0]
   1e402:	34ff      	adds	r4, #255	; 0xff
   1e404:	701a      	strb	r2, [r3, #0]
   1e406:	2320      	movs	r3, #32
   1e408:	2a00      	cmp	r2, #0
   1e40a:	d007      	beq.n	1e41c <LORAWAN_SetAttr+0x4cc>
   1e40c:	7f62      	ldrb	r2, [r4, #29]
   1e40e:	4313      	orrs	r3, r2
   1e410:	7763      	strb	r3, [r4, #29]
   1e412:	4669      	mov	r1, sp
   1e414:	4b27      	ldr	r3, [pc, #156]	; (1e4b4 <LORAWAN_SetAttr+0x564>)
   1e416:	2038      	movs	r0, #56	; 0x38
   1e418:	4798      	blx	r3
   1e41a:	e782      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e41c:	7f62      	ldrb	r2, [r4, #29]
   1e41e:	260a      	movs	r6, #10
   1e420:	421a      	tst	r2, r3
   1e422:	d100      	bne.n	1e426 <LORAWAN_SetAttr+0x4d6>
   1e424:	e6be      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e426:	439a      	bics	r2, r3
   1e428:	7762      	strb	r2, [r4, #29]
   1e42a:	e7f2      	b.n	1e412 <LORAWAN_SetAttr+0x4c2>
   1e42c:	780b      	ldrb	r3, [r1, #0]
   1e42e:	260a      	movs	r6, #10
   1e430:	2b08      	cmp	r3, #8
   1e432:	d900      	bls.n	1e436 <LORAWAN_SetAttr+0x4e6>
   1e434:	e6b6      	b.n	1e1a4 <LORAWAN_SetAttr+0x254>
   1e436:	228b      	movs	r2, #139	; 0x8b
   1e438:	0092      	lsls	r2, r2, #2
   1e43a:	54a3      	strb	r3, [r4, r2]
   1e43c:	210d      	movs	r1, #13
   1e43e:	e720      	b.n	1e282 <LORAWAN_SetAttr+0x332>
   1e440:	780a      	ldrb	r2, [r1, #0]
   1e442:	4b1f      	ldr	r3, [pc, #124]	; (1e4c0 <LORAWAN_SetAttr+0x570>)
   1e444:	54e2      	strb	r2, [r4, r3]
   1e446:	e5f5      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e448:	4b1e      	ldr	r3, [pc, #120]	; (1e4c4 <LORAWAN_SetAttr+0x574>)
   1e44a:	4798      	blx	r3
   1e44c:	e769      	b.n	1e322 <LORAWAN_SetAttr+0x3d2>
   1e44e:	4b1e      	ldr	r3, [pc, #120]	; (1e4c8 <LORAWAN_SetAttr+0x578>)
   1e450:	e7fb      	b.n	1e44a <LORAWAN_SetAttr+0x4fa>
   1e452:	780a      	ldrb	r2, [r1, #0]
   1e454:	2302      	movs	r3, #2
   1e456:	34ff      	adds	r4, #255	; 0xff
   1e458:	2a00      	cmp	r2, #0
   1e45a:	d003      	beq.n	1e464 <LORAWAN_SetAttr+0x514>
   1e45c:	7f62      	ldrb	r2, [r4, #29]
   1e45e:	4313      	orrs	r3, r2
   1e460:	7763      	strb	r3, [r4, #29]
   1e462:	e5e7      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e464:	7f62      	ldrb	r2, [r4, #29]
   1e466:	439a      	bics	r2, r3
   1e468:	7762      	strb	r2, [r4, #29]
   1e46a:	e5e3      	b.n	1e034 <LORAWAN_SetAttr+0xe4>
   1e46c:	00013b45 	.word	0x00013b45
   1e470:	0001d3b5 	.word	0x0001d3b5
   1e474:	0001d345 	.word	0x0001d345
   1e478:	0001bf3d 	.word	0x0001bf3d
   1e47c:	0001beb5 	.word	0x0001beb5
   1e480:	0001bef1 	.word	0x0001bef1
   1e484:	0001ded1 	.word	0x0001ded1
   1e488:	0001afa5 	.word	0x0001afa5
   1e48c:	20001f28 	.word	0x20001f28
   1e490:	0001ee15 	.word	0x0001ee15
   1e494:	0001f075 	.word	0x0001f075
   1e498:	0001f0c1 	.word	0x0001f0c1
   1e49c:	0001f02d 	.word	0x0001f02d
   1e4a0:	0001f10d 	.word	0x0001f10d
   1e4a4:	0001f12d 	.word	0x0001f12d
   1e4a8:	0001f149 	.word	0x0001f149
   1e4ac:	0001f18d 	.word	0x0001f18d
   1e4b0:	0001f1c9 	.word	0x0001f1c9
   1e4b4:	0000d639 	.word	0x0000d639
   1e4b8:	20001cec 	.word	0x20001cec
   1e4bc:	0000d595 	.word	0x0000d595
   1e4c0:	0000022d 	.word	0x0000022d
   1e4c4:	0001b041 	.word	0x0001b041
   1e4c8:	0001b069 	.word	0x0001b069

0001e4cc <LORAWAN_Reset>:
   1e4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4ce:	b087      	sub	sp, #28
   1e4d0:	ab02      	add	r3, sp, #8
   1e4d2:	1ddd      	adds	r5, r3, #7
   1e4d4:	23ff      	movs	r3, #255	; 0xff
   1e4d6:	4c84      	ldr	r4, [pc, #528]	; (1e6e8 <LORAWAN_Reset+0x21c>)
   1e4d8:	702b      	strb	r3, [r5, #0]
   1e4da:	0023      	movs	r3, r4
   1e4dc:	9001      	str	r0, [sp, #4]
   1e4de:	33f8      	adds	r3, #248	; 0xf8
   1e4e0:	781b      	ldrb	r3, [r3, #0]
   1e4e2:	2b00      	cmp	r3, #0
   1e4e4:	d001      	beq.n	1e4ea <LORAWAN_Reset+0x1e>
   1e4e6:	4b81      	ldr	r3, [pc, #516]	; (1e6ec <LORAWAN_Reset+0x220>)
   1e4e8:	4798      	blx	r3
   1e4ea:	002a      	movs	r2, r5
   1e4ec:	4b80      	ldr	r3, [pc, #512]	; (1e6f0 <LORAWAN_Reset+0x224>)
   1e4ee:	2100      	movs	r1, #0
   1e4f0:	2024      	movs	r0, #36	; 0x24
   1e4f2:	4798      	blx	r3
   1e4f4:	782b      	ldrb	r3, [r5, #0]
   1e4f6:	9a01      	ldr	r2, [sp, #4]
   1e4f8:	4293      	cmp	r3, r2
   1e4fa:	d001      	beq.n	1e500 <LORAWAN_Reset+0x34>
   1e4fc:	4b7d      	ldr	r3, [pc, #500]	; (1e6f4 <LORAWAN_Reset+0x228>)
   1e4fe:	4798      	blx	r3
   1e500:	238f      	movs	r3, #143	; 0x8f
   1e502:	4a7d      	ldr	r2, [pc, #500]	; (1e6f8 <LORAWAN_Reset+0x22c>)
   1e504:	009b      	lsls	r3, r3, #2
   1e506:	50e2      	str	r2, [r4, r3]
   1e508:	2334      	movs	r3, #52	; 0x34
   1e50a:	4a7c      	ldr	r2, [pc, #496]	; (1e6fc <LORAWAN_Reset+0x230>)
   1e50c:	497c      	ldr	r1, [pc, #496]	; (1e700 <LORAWAN_Reset+0x234>)
   1e50e:	7053      	strb	r3, [r2, #1]
   1e510:	2000      	movs	r0, #0
   1e512:	4b7c      	ldr	r3, [pc, #496]	; (1e704 <LORAWAN_Reset+0x238>)
   1e514:	4798      	blx	r3
   1e516:	0023      	movs	r3, r4
   1e518:	2201      	movs	r2, #1
   1e51a:	33fd      	adds	r3, #253	; 0xfd
   1e51c:	701a      	strb	r2, [r3, #0]
   1e51e:	0023      	movs	r3, r4
   1e520:	2205      	movs	r2, #5
   1e522:	33fe      	adds	r3, #254	; 0xfe
   1e524:	701a      	strb	r2, [r3, #0]
   1e526:	0022      	movs	r2, r4
   1e528:	21ff      	movs	r1, #255	; 0xff
   1e52a:	32e5      	adds	r2, #229	; 0xe5
   1e52c:	7011      	strb	r1, [r2, #0]
   1e52e:	0022      	movs	r2, r4
   1e530:	2500      	movs	r5, #0
   1e532:	32e6      	adds	r2, #230	; 0xe6
   1e534:	7015      	strb	r5, [r2, #0]
   1e536:	0022      	movs	r2, r4
   1e538:	32ce      	adds	r2, #206	; 0xce
   1e53a:	8015      	strh	r5, [r2, #0]
   1e53c:	0022      	movs	r2, r4
   1e53e:	328c      	adds	r2, #140	; 0x8c
   1e540:	6015      	str	r5, [r2, #0]
   1e542:	0022      	movs	r2, r4
   1e544:	3288      	adds	r2, #136	; 0x88
   1e546:	6015      	str	r5, [r2, #0]
   1e548:	0022      	movs	r2, r4
   1e54a:	32cc      	adds	r2, #204	; 0xcc
   1e54c:	8015      	strh	r5, [r2, #0]
   1e54e:	2291      	movs	r2, #145	; 0x91
   1e550:	3901      	subs	r1, #1
   1e552:	39ff      	subs	r1, #255	; 0xff
   1e554:	0092      	lsls	r2, r2, #2
   1e556:	50a1      	str	r1, [r4, r2]
   1e558:	0022      	movs	r2, r4
   1e55a:	3298      	adds	r2, #152	; 0x98
   1e55c:	7015      	strb	r5, [r2, #0]
   1e55e:	0022      	movs	r2, r4
   1e560:	32ca      	adds	r2, #202	; 0xca
   1e562:	8015      	strh	r5, [r2, #0]
   1e564:	0022      	movs	r2, r4
   1e566:	32f6      	adds	r2, #246	; 0xf6
   1e568:	7015      	strb	r5, [r2, #0]
   1e56a:	0022      	movs	r2, r4
   1e56c:	32f7      	adds	r2, #247	; 0xf7
   1e56e:	7015      	strb	r5, [r2, #0]
   1e570:	0022      	movs	r2, r4
   1e572:	3107      	adds	r1, #7
   1e574:	32fc      	adds	r2, #252	; 0xfc
   1e576:	6091      	str	r1, [r2, #8]
   1e578:	60d5      	str	r5, [r2, #12]
   1e57a:	841d      	strh	r5, [r3, #32]
   1e57c:	845d      	strh	r5, [r3, #34]	; 0x22
   1e57e:	2210      	movs	r2, #16
   1e580:	0029      	movs	r1, r5
   1e582:	4b61      	ldr	r3, [pc, #388]	; (1e708 <LORAWAN_Reset+0x23c>)
   1e584:	4861      	ldr	r0, [pc, #388]	; (1e70c <LORAWAN_Reset+0x240>)
   1e586:	4798      	blx	r3
   1e588:	2388      	movs	r3, #136	; 0x88
   1e58a:	2201      	movs	r2, #1
   1e58c:	2607      	movs	r6, #7
   1e58e:	009b      	lsls	r3, r3, #2
   1e590:	54e2      	strb	r2, [r4, r3]
   1e592:	0029      	movs	r1, r5
   1e594:	0032      	movs	r2, r6
   1e596:	4b5c      	ldr	r3, [pc, #368]	; (1e708 <LORAWAN_Reset+0x23c>)
   1e598:	485d      	ldr	r0, [pc, #372]	; (1e710 <LORAWAN_Reset+0x244>)
   1e59a:	4798      	blx	r3
   1e59c:	238b      	movs	r3, #139	; 0x8b
   1e59e:	009b      	lsls	r3, r3, #2
   1e5a0:	54e5      	strb	r5, [r4, r3]
   1e5a2:	0023      	movs	r3, r4
   1e5a4:	3394      	adds	r3, #148	; 0x94
   1e5a6:	801d      	strh	r5, [r3, #0]
   1e5a8:	0023      	movs	r3, r4
   1e5aa:	33e2      	adds	r3, #226	; 0xe2
   1e5ac:	701e      	strb	r6, [r3, #0]
   1e5ae:	0023      	movs	r3, r4
   1e5b0:	33e1      	adds	r3, #225	; 0xe1
   1e5b2:	701d      	strb	r5, [r3, #0]
   1e5b4:	0023      	movs	r3, r4
   1e5b6:	33e4      	adds	r3, #228	; 0xe4
   1e5b8:	701d      	strb	r5, [r3, #0]
   1e5ba:	0023      	movs	r3, r4
   1e5bc:	0027      	movs	r7, r4
   1e5be:	33e3      	adds	r3, #227	; 0xe3
   1e5c0:	3708      	adds	r7, #8
   1e5c2:	701d      	strb	r5, [r3, #0]
   1e5c4:	9801      	ldr	r0, [sp, #4]
   1e5c6:	4b53      	ldr	r3, [pc, #332]	; (1e714 <LORAWAN_Reset+0x248>)
   1e5c8:	67fd      	str	r5, [r7, #124]	; 0x7c
   1e5ca:	4798      	blx	r3
   1e5cc:	0007      	movs	r7, r0
   1e5ce:	2808      	cmp	r0, #8
   1e5d0:	d000      	beq.n	1e5d4 <LORAWAN_Reset+0x108>
   1e5d2:	e087      	b.n	1e6e4 <LORAWAN_Reset+0x218>
   1e5d4:	4e50      	ldr	r6, [pc, #320]	; (1e718 <LORAWAN_Reset+0x24c>)
   1e5d6:	4a51      	ldr	r2, [pc, #324]	; (1e71c <LORAWAN_Reset+0x250>)
   1e5d8:	0029      	movs	r1, r5
   1e5da:	47b0      	blx	r6
   1e5dc:	4a50      	ldr	r2, [pc, #320]	; (1e720 <LORAWAN_Reset+0x254>)
   1e5de:	0029      	movs	r1, r5
   1e5e0:	200e      	movs	r0, #14
   1e5e2:	47b0      	blx	r6
   1e5e4:	34e8      	adds	r4, #232	; 0xe8
   1e5e6:	4a4f      	ldr	r2, [pc, #316]	; (1e724 <LORAWAN_Reset+0x258>)
   1e5e8:	0029      	movs	r1, r5
   1e5ea:	2006      	movs	r0, #6
   1e5ec:	7025      	strb	r5, [r4, #0]
   1e5ee:	47b0      	blx	r6
   1e5f0:	4b4d      	ldr	r3, [pc, #308]	; (1e728 <LORAWAN_Reset+0x25c>)
   1e5f2:	4798      	blx	r3
   1e5f4:	466a      	mov	r2, sp
   1e5f6:	4b41      	ldr	r3, [pc, #260]	; (1e6fc <LORAWAN_Reset+0x230>)
   1e5f8:	7912      	ldrb	r2, [r2, #4]
   1e5fa:	0029      	movs	r1, r5
   1e5fc:	701a      	strb	r2, [r3, #0]
   1e5fe:	0028      	movs	r0, r5
   1e600:	4b4a      	ldr	r3, [pc, #296]	; (1e72c <LORAWAN_Reset+0x260>)
   1e602:	4798      	blx	r3
   1e604:	2210      	movs	r2, #16
   1e606:	4b3d      	ldr	r3, [pc, #244]	; (1e6fc <LORAWAN_Reset+0x230>)
   1e608:	7f5b      	ldrb	r3, [r3, #29]
   1e60a:	4213      	tst	r3, r2
   1e60c:	d006      	beq.n	1e61c <LORAWAN_Reset+0x150>
   1e60e:	ab02      	add	r3, sp, #8
   1e610:	1d99      	adds	r1, r3, #6
   1e612:	2301      	movs	r3, #1
   1e614:	0038      	movs	r0, r7
   1e616:	700b      	strb	r3, [r1, #0]
   1e618:	4b3a      	ldr	r3, [pc, #232]	; (1e704 <LORAWAN_Reset+0x238>)
   1e61a:	4798      	blx	r3
   1e61c:	4b44      	ldr	r3, [pc, #272]	; (1e730 <LORAWAN_Reset+0x264>)
   1e61e:	4945      	ldr	r1, [pc, #276]	; (1e734 <LORAWAN_Reset+0x268>)
   1e620:	201e      	movs	r0, #30
   1e622:	4798      	blx	r3
   1e624:	4c30      	ldr	r4, [pc, #192]	; (1e6e8 <LORAWAN_Reset+0x21c>)
   1e626:	0023      	movs	r3, r4
   1e628:	33ff      	adds	r3, #255	; 0xff
   1e62a:	7f5b      	ldrb	r3, [r3, #29]
   1e62c:	075b      	lsls	r3, r3, #29
   1e62e:	d507      	bpl.n	1e640 <LORAWAN_Reset+0x174>
   1e630:	2100      	movs	r1, #0
   1e632:	aa04      	add	r2, sp, #16
   1e634:	2031      	movs	r0, #49	; 0x31
   1e636:	47b0      	blx	r6
   1e638:	a904      	add	r1, sp, #16
   1e63a:	2028      	movs	r0, #40	; 0x28
   1e63c:	4b3e      	ldr	r3, [pc, #248]	; (1e738 <LORAWAN_Reset+0x26c>)
   1e63e:	4798      	blx	r3
   1e640:	4a3e      	ldr	r2, [pc, #248]	; (1e73c <LORAWAN_Reset+0x270>)
   1e642:	2100      	movs	r1, #0
   1e644:	2009      	movs	r0, #9
   1e646:	47b0      	blx	r6
   1e648:	4a3d      	ldr	r2, [pc, #244]	; (1e740 <LORAWAN_Reset+0x274>)
   1e64a:	2100      	movs	r1, #0
   1e64c:	200a      	movs	r0, #10
   1e64e:	47b0      	blx	r6
   1e650:	4a3c      	ldr	r2, [pc, #240]	; (1e744 <LORAWAN_Reset+0x278>)
   1e652:	2100      	movs	r1, #0
   1e654:	2035      	movs	r0, #53	; 0x35
   1e656:	47b0      	blx	r6
   1e658:	ad04      	add	r5, sp, #16
   1e65a:	4a3b      	ldr	r2, [pc, #236]	; (1e748 <LORAWAN_Reset+0x27c>)
   1e65c:	2100      	movs	r1, #0
   1e65e:	2036      	movs	r0, #54	; 0x36
   1e660:	47b0      	blx	r6
   1e662:	002a      	movs	r2, r5
   1e664:	2100      	movs	r1, #0
   1e666:	2014      	movs	r0, #20
   1e668:	47b0      	blx	r6
   1e66a:	0023      	movs	r3, r4
   1e66c:	782a      	ldrb	r2, [r5, #0]
   1e66e:	33f3      	adds	r3, #243	; 0xf3
   1e670:	701a      	strb	r2, [r3, #0]
   1e672:	0023      	movs	r3, r4
   1e674:	786a      	ldrb	r2, [r5, #1]
   1e676:	33f4      	adds	r3, #244	; 0xf4
   1e678:	701a      	strb	r2, [r3, #0]
   1e67a:	0023      	movs	r3, r4
   1e67c:	2500      	movs	r5, #0
   1e67e:	33de      	adds	r3, #222	; 0xde
   1e680:	0029      	movs	r1, r5
   1e682:	801d      	strh	r5, [r3, #0]
   1e684:	2265      	movs	r2, #101	; 0x65
   1e686:	0020      	movs	r0, r4
   1e688:	4b1f      	ldr	r3, [pc, #124]	; (1e708 <LORAWAN_Reset+0x23c>)
   1e68a:	4798      	blx	r3
   1e68c:	0023      	movs	r3, r4
   1e68e:	22fa      	movs	r2, #250	; 0xfa
   1e690:	33d0      	adds	r3, #208	; 0xd0
   1e692:	0092      	lsls	r2, r2, #2
   1e694:	801a      	strh	r2, [r3, #0]
   1e696:	0023      	movs	r3, r4
   1e698:	22fa      	movs	r2, #250	; 0xfa
   1e69a:	33d2      	adds	r3, #210	; 0xd2
   1e69c:	00d2      	lsls	r2, r2, #3
   1e69e:	801a      	strh	r2, [r3, #0]
   1e6a0:	0023      	movs	r3, r4
   1e6a2:	4a2a      	ldr	r2, [pc, #168]	; (1e74c <LORAWAN_Reset+0x280>)
   1e6a4:	33d4      	adds	r3, #212	; 0xd4
   1e6a6:	801a      	strh	r2, [r3, #0]
   1e6a8:	0023      	movs	r3, r4
   1e6aa:	4a29      	ldr	r2, [pc, #164]	; (1e750 <LORAWAN_Reset+0x284>)
   1e6ac:	33d6      	adds	r3, #214	; 0xd6
   1e6ae:	801a      	strh	r2, [r3, #0]
   1e6b0:	4b28      	ldr	r3, [pc, #160]	; (1e754 <LORAWAN_Reset+0x288>)
   1e6b2:	4798      	blx	r3
   1e6b4:	4b28      	ldr	r3, [pc, #160]	; (1e758 <LORAWAN_Reset+0x28c>)
   1e6b6:	4929      	ldr	r1, [pc, #164]	; (1e75c <LORAWAN_Reset+0x290>)
   1e6b8:	4798      	blx	r3
   1e6ba:	23fa      	movs	r3, #250	; 0xfa
   1e6bc:	009b      	lsls	r3, r3, #2
   1e6be:	18c9      	adds	r1, r1, r3
   1e6c0:	0023      	movs	r3, r4
   1e6c2:	33da      	adds	r3, #218	; 0xda
   1e6c4:	8019      	strh	r1, [r3, #0]
   1e6c6:	0023      	movs	r3, r4
   1e6c8:	2220      	movs	r2, #32
   1e6ca:	33dd      	adds	r3, #221	; 0xdd
   1e6cc:	701a      	strb	r2, [r3, #0]
   1e6ce:	2340      	movs	r3, #64	; 0x40
   1e6d0:	34dc      	adds	r4, #220	; 0xdc
   1e6d2:	7023      	strb	r3, [r4, #0]
   1e6d4:	0028      	movs	r0, r5
   1e6d6:	4b22      	ldr	r3, [pc, #136]	; (1e760 <LORAWAN_Reset+0x294>)
   1e6d8:	4798      	blx	r3
   1e6da:	4b22      	ldr	r3, [pc, #136]	; (1e764 <LORAWAN_Reset+0x298>)
   1e6dc:	4798      	blx	r3
   1e6de:	0038      	movs	r0, r7
   1e6e0:	b007      	add	sp, #28
   1e6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e6e4:	270a      	movs	r7, #10
   1e6e6:	e7fa      	b.n	1e6de <LORAWAN_Reset+0x212>
   1e6e8:	20001bd0 	.word	0x20001bd0
   1e6ec:	0001a735 	.word	0x0001a735
   1e6f0:	0001bfa1 	.word	0x0001bfa1
   1e6f4:	00012df5 	.word	0x00012df5
   1e6f8:	01054000 	.word	0x01054000
   1e6fc:	20001ccf 	.word	0x20001ccf
   1e700:	20001cd0 	.word	0x20001cd0
   1e704:	0001f5e1 	.word	0x0001f5e1
   1e708:	000241cd 	.word	0x000241cd
   1e70c:	20001cdc 	.word	0x20001cdc
   1e710:	20001df3 	.word	0x20001df3
   1e714:	0000d405 	.word	0x0000d405
   1e718:	0000d595 	.word	0x0000d595
   1e71c:	20001c39 	.word	0x20001c39
   1e720:	20001cec 	.word	0x20001cec
   1e724:	20001cc5 	.word	0x20001cc5
   1e728:	0001f7dd 	.word	0x0001f7dd
   1e72c:	00013b45 	.word	0x00013b45
   1e730:	0001f4f1 	.word	0x0001f4f1
   1e734:	20001dfb 	.word	0x20001dfb
   1e738:	0001df51 	.word	0x0001df51
   1e73c:	20001c3e 	.word	0x20001c3e
   1e740:	20001c3a 	.word	0x20001c3a
   1e744:	20001cb9 	.word	0x20001cb9
   1e748:	20001cb7 	.word	0x20001cb7
   1e74c:	00001388 	.word	0x00001388
   1e750:	00001770 	.word	0x00001770
   1e754:	0002434d 	.word	0x0002434d
   1e758:	00021349 	.word	0x00021349
   1e75c:	000007d1 	.word	0x000007d1
   1e760:	0001afa5 	.word	0x0001afa5
   1e764:	0001ed8d 	.word	0x0001ed8d

0001e768 <AssemblePacket>:
   1e768:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e76a:	2710      	movs	r7, #16
   1e76c:	b08f      	sub	sp, #60	; 0x3c
   1e76e:	9308      	str	r3, [sp, #32]
   1e770:	ab0d      	add	r3, sp, #52	; 0x34
   1e772:	801f      	strh	r7, [r3, #0]
   1e774:	231e      	movs	r3, #30
   1e776:	920a      	str	r2, [sp, #40]	; 0x28
   1e778:	aa06      	add	r2, sp, #24
   1e77a:	189b      	adds	r3, r3, r2
   1e77c:	2500      	movs	r5, #0
   1e77e:	2210      	movs	r2, #16
   1e780:	ac0c      	add	r4, sp, #48	; 0x30
   1e782:	9006      	str	r0, [sp, #24]
   1e784:	910b      	str	r1, [sp, #44]	; 0x2c
   1e786:	32ff      	adds	r2, #255	; 0xff
   1e788:	0029      	movs	r1, r5
   1e78a:	4ed1      	ldr	r6, [pc, #836]	; (1ead0 <AssemblePacket+0x368>)
   1e78c:	7025      	strb	r5, [r4, #0]
   1e78e:	48d1      	ldr	r0, [pc, #836]	; (1ead4 <AssemblePacket+0x36c>)
   1e790:	801d      	strh	r5, [r3, #0]
   1e792:	47b0      	blx	r6
   1e794:	003a      	movs	r2, r7
   1e796:	0029      	movs	r1, r5
   1e798:	48cf      	ldr	r0, [pc, #828]	; (1ead8 <AssemblePacket+0x370>)
   1e79a:	47b0      	blx	r6
   1e79c:	221f      	movs	r2, #31
   1e79e:	7823      	ldrb	r3, [r4, #0]
   1e7a0:	9906      	ldr	r1, [sp, #24]
   1e7a2:	4013      	ands	r3, r2
   1e7a4:	42a9      	cmp	r1, r5
   1e7a6:	d100      	bne.n	1e7aa <AssemblePacket+0x42>
   1e7a8:	e0dc      	b.n	1e964 <AssemblePacket+0x1fc>
   1e7aa:	3a9f      	subs	r2, #159	; 0x9f
   1e7ac:	4313      	orrs	r3, r2
   1e7ae:	7023      	strb	r3, [r4, #0]
   1e7b0:	4bca      	ldr	r3, [pc, #808]	; (1eadc <AssemblePacket+0x374>)
   1e7b2:	3281      	adds	r2, #129	; 0x81
   1e7b4:	3394      	adds	r3, #148	; 0x94
   1e7b6:	7819      	ldrb	r1, [r3, #0]
   1e7b8:	430a      	orrs	r2, r1
   1e7ba:	701a      	strb	r2, [r3, #0]
   1e7bc:	22e0      	movs	r2, #224	; 0xe0
   1e7be:	7823      	ldrb	r3, [r4, #0]
   1e7c0:	48c4      	ldr	r0, [pc, #784]	; (1ead4 <AssemblePacket+0x36c>)
   1e7c2:	4013      	ands	r3, r2
   1e7c4:	7023      	strb	r3, [r4, #0]
   1e7c6:	4cc5      	ldr	r4, [pc, #788]	; (1eadc <AssemblePacket+0x374>)
   1e7c8:	7403      	strb	r3, [r0, #16]
   1e7ca:	3adc      	subs	r2, #220	; 0xdc
   1e7cc:	4bc4      	ldr	r3, [pc, #784]	; (1eae0 <AssemblePacket+0x378>)
   1e7ce:	3011      	adds	r0, #17
   1e7d0:	1c61      	adds	r1, r4, #1
   1e7d2:	4798      	blx	r3
   1e7d4:	2215      	movs	r2, #21
   1e7d6:	ab0d      	add	r3, sp, #52	; 0x34
   1e7d8:	0025      	movs	r5, r4
   1e7da:	801a      	strh	r2, [r3, #0]
   1e7dc:	2600      	movs	r6, #0
   1e7de:	466b      	mov	r3, sp
   1e7e0:	3584      	adds	r5, #132	; 0x84
   1e7e2:	761e      	strb	r6, [r3, #24]
   1e7e4:	782b      	ldrb	r3, [r5, #0]
   1e7e6:	069b      	lsls	r3, r3, #26
   1e7e8:	d400      	bmi.n	1e7ec <AssemblePacket+0x84>
   1e7ea:	e130      	b.n	1ea4e <AssemblePacket+0x2e6>
   1e7ec:	0027      	movs	r7, r4
   1e7ee:	4bbd      	ldr	r3, [pc, #756]	; (1eae4 <AssemblePacket+0x37c>)
   1e7f0:	37f3      	adds	r7, #243	; 0xf3
   1e7f2:	781a      	ldrb	r2, [r3, #0]
   1e7f4:	783b      	ldrb	r3, [r7, #0]
   1e7f6:	429a      	cmp	r2, r3
   1e7f8:	d31e      	bcc.n	1e838 <AssemblePacket+0xd0>
   1e7fa:	2180      	movs	r1, #128	; 0x80
   1e7fc:	466b      	mov	r3, sp
   1e7fe:	0022      	movs	r2, r4
   1e800:	4249      	negs	r1, r1
   1e802:	32ca      	adds	r2, #202	; 0xca
   1e804:	7619      	strb	r1, [r3, #24]
   1e806:	8813      	ldrh	r3, [r2, #0]
   1e808:	3301      	adds	r3, #1
   1e80a:	b29b      	uxth	r3, r3
   1e80c:	8013      	strh	r3, [r2, #0]
   1e80e:	0022      	movs	r2, r4
   1e810:	32dc      	adds	r2, #220	; 0xdc
   1e812:	7812      	ldrb	r2, [r2, #0]
   1e814:	4293      	cmp	r3, r2
   1e816:	d30f      	bcc.n	1e838 <AssemblePacket+0xd0>
   1e818:	2040      	movs	r0, #64	; 0x40
   1e81a:	4308      	orrs	r0, r1
   1e81c:	9006      	str	r0, [sp, #24]
   1e81e:	0020      	movs	r0, r4
   1e820:	3094      	adds	r0, #148	; 0x94
   1e822:	7801      	ldrb	r1, [r0, #0]
   1e824:	4684      	mov	ip, r0
   1e826:	2010      	movs	r0, #16
   1e828:	4301      	orrs	r1, r0
   1e82a:	4660      	mov	r0, ip
   1e82c:	7001      	strb	r1, [r0, #0]
   1e82e:	4293      	cmp	r3, r2
   1e830:	d000      	beq.n	1e834 <AssemblePacket+0xcc>
   1e832:	e09b      	b.n	1e96c <AssemblePacket+0x204>
   1e834:	34f6      	adds	r4, #246	; 0xf6
   1e836:	7026      	strb	r6, [r4, #0]
   1e838:	4da8      	ldr	r5, [pc, #672]	; (1eadc <AssemblePacket+0x374>)
   1e83a:	2102      	movs	r1, #2
   1e83c:	002a      	movs	r2, r5
   1e83e:	3294      	adds	r2, #148	; 0x94
   1e840:	7813      	ldrb	r3, [r2, #0]
   1e842:	420b      	tst	r3, r1
   1e844:	d005      	beq.n	1e852 <AssemblePacket+0xea>
   1e846:	2020      	movs	r0, #32
   1e848:	9c06      	ldr	r4, [sp, #24]
   1e84a:	438b      	bics	r3, r1
   1e84c:	4304      	orrs	r4, r0
   1e84e:	9406      	str	r4, [sp, #24]
   1e850:	7013      	strb	r3, [r2, #0]
   1e852:	2310      	movs	r3, #16
   1e854:	9c06      	ldr	r4, [sp, #24]
   1e856:	439c      	bics	r4, r3
   1e858:	002b      	movs	r3, r5
   1e85a:	33e0      	adds	r3, #224	; 0xe0
   1e85c:	781b      	ldrb	r3, [r3, #0]
   1e85e:	9309      	str	r3, [sp, #36]	; 0x24
   1e860:	2b00      	cmp	r3, #0
   1e862:	d003      	beq.n	1e86c <AssemblePacket+0x104>
   1e864:	9b08      	ldr	r3, [sp, #32]
   1e866:	2b00      	cmp	r3, #0
   1e868:	d000      	beq.n	1e86c <AssemblePacket+0x104>
   1e86a:	e0f6      	b.n	1ea5a <AssemblePacket+0x2f2>
   1e86c:	230f      	movs	r3, #15
   1e86e:	439c      	bics	r4, r3
   1e870:	466b      	mov	r3, sp
   1e872:	9406      	str	r4, [sp, #24]
   1e874:	ac0d      	add	r4, sp, #52	; 0x34
   1e876:	8826      	ldrh	r6, [r4, #0]
   1e878:	4f96      	ldr	r7, [pc, #600]	; (1ead4 <AssemblePacket+0x36c>)
   1e87a:	7e1b      	ldrb	r3, [r3, #24]
   1e87c:	1c70      	adds	r0, r6, #1
   1e87e:	b280      	uxth	r0, r0
   1e880:	55bb      	strb	r3, [r7, r6]
   1e882:	19c0      	adds	r0, r0, r7
   1e884:	4b96      	ldr	r3, [pc, #600]	; (1eae0 <AssemblePacket+0x378>)
   1e886:	2202      	movs	r2, #2
   1e888:	4997      	ldr	r1, [pc, #604]	; (1eae8 <AssemblePacket+0x380>)
   1e88a:	4798      	blx	r3
   1e88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e88e:	3603      	adds	r6, #3
   1e890:	8026      	strh	r6, [r4, #0]
   1e892:	2b00      	cmp	r3, #0
   1e894:	d100      	bne.n	1e898 <AssemblePacket+0x130>
   1e896:	e0e7      	b.n	1ea68 <AssemblePacket+0x300>
   1e898:	9b08      	ldr	r3, [sp, #32]
   1e89a:	2b00      	cmp	r3, #0
   1e89c:	d004      	beq.n	1e8a8 <AssemblePacket+0x140>
   1e89e:	2201      	movs	r2, #1
   1e8a0:	0021      	movs	r1, r4
   1e8a2:	0038      	movs	r0, r7
   1e8a4:	4b91      	ldr	r3, [pc, #580]	; (1eaec <AssemblePacket+0x384>)
   1e8a6:	4798      	blx	r3
   1e8a8:	466a      	mov	r2, sp
   1e8aa:	212c      	movs	r1, #44	; 0x2c
   1e8ac:	1852      	adds	r2, r2, r1
   1e8ae:	8823      	ldrh	r3, [r4, #0]
   1e8b0:	7812      	ldrb	r2, [r2, #0]
   1e8b2:	1c5e      	adds	r6, r3, #1
   1e8b4:	54fa      	strb	r2, [r7, r3]
   1e8b6:	9b08      	ldr	r3, [sp, #32]
   1e8b8:	b2b6      	uxth	r6, r6
   1e8ba:	8026      	strh	r6, [r4, #0]
   1e8bc:	2b00      	cmp	r3, #0
   1e8be:	d100      	bne.n	1e8c2 <AssemblePacket+0x15a>
   1e8c0:	e0d6      	b.n	1ea70 <AssemblePacket+0x308>
   1e8c2:	001a      	movs	r2, r3
   1e8c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e8c6:	4b86      	ldr	r3, [pc, #536]	; (1eae0 <AssemblePacket+0x378>)
   1e8c8:	19b8      	adds	r0, r7, r6
   1e8ca:	4798      	blx	r3
   1e8cc:	2120      	movs	r1, #32
   1e8ce:	466b      	mov	r3, sp
   1e8d0:	185b      	adds	r3, r3, r1
   1e8d2:	7819      	ldrb	r1, [r3, #0]
   1e8d4:	682b      	ldr	r3, [r5, #0]
   1e8d6:	002a      	movs	r2, r5
   1e8d8:	0a18      	lsrs	r0, r3, #8
   1e8da:	792b      	ldrb	r3, [r5, #4]
   1e8dc:	3288      	adds	r2, #136	; 0x88
   1e8de:	061b      	lsls	r3, r3, #24
   1e8e0:	4303      	orrs	r3, r0
   1e8e2:	9304      	str	r3, [sp, #16]
   1e8e4:	2301      	movs	r3, #1
   1e8e6:	9301      	str	r3, [sp, #4]
   1e8e8:	4b81      	ldr	r3, [pc, #516]	; (1eaf0 <AssemblePacket+0x388>)
   1e8ea:	9703      	str	r7, [sp, #12]
   1e8ec:	9602      	str	r6, [sp, #8]
   1e8ee:	9300      	str	r3, [sp, #0]
   1e8f0:	6813      	ldr	r3, [r2, #0]
   1e8f2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e8f4:	2200      	movs	r2, #0
   1e8f6:	4c7f      	ldr	r4, [pc, #508]	; (1eaf4 <AssemblePacket+0x38c>)
   1e8f8:	47a0      	blx	r4
   1e8fa:	2800      	cmp	r0, #0
   1e8fc:	d002      	beq.n	1e904 <AssemblePacket+0x19c>
   1e8fe:	2020      	movs	r0, #32
   1e900:	4b7d      	ldr	r3, [pc, #500]	; (1eaf8 <AssemblePacket+0x390>)
   1e902:	4798      	blx	r3
   1e904:	aa0d      	add	r2, sp, #52	; 0x34
   1e906:	8813      	ldrh	r3, [r2, #0]
   1e908:	9908      	ldr	r1, [sp, #32]
   1e90a:	18cb      	adds	r3, r1, r3
   1e90c:	8013      	strh	r3, [r2, #0]
   1e90e:	4c73      	ldr	r4, [pc, #460]	; (1eadc <AssemblePacket+0x374>)
   1e910:	ae0d      	add	r6, sp, #52	; 0x34
   1e912:	0021      	movs	r1, r4
   1e914:	6823      	ldr	r3, [r4, #0]
   1e916:	8832      	ldrh	r2, [r6, #0]
   1e918:	0a18      	lsrs	r0, r3, #8
   1e91a:	7923      	ldrb	r3, [r4, #4]
   1e91c:	3a10      	subs	r2, #16
   1e91e:	061b      	lsls	r3, r3, #24
   1e920:	4303      	orrs	r3, r0
   1e922:	9300      	str	r3, [sp, #0]
   1e924:	3188      	adds	r1, #136	; 0x88
   1e926:	b2d2      	uxtb	r2, r2
   1e928:	2349      	movs	r3, #73	; 0x49
   1e92a:	6809      	ldr	r1, [r1, #0]
   1e92c:	2000      	movs	r0, #0
   1e92e:	4d73      	ldr	r5, [pc, #460]	; (1eafc <AssemblePacket+0x394>)
   1e930:	47a8      	blx	r5
   1e932:	4f68      	ldr	r7, [pc, #416]	; (1ead4 <AssemblePacket+0x36c>)
   1e934:	2210      	movs	r2, #16
   1e936:	4968      	ldr	r1, [pc, #416]	; (1ead8 <AssemblePacket+0x370>)
   1e938:	0038      	movs	r0, r7
   1e93a:	4b69      	ldr	r3, [pc, #420]	; (1eae0 <AssemblePacket+0x378>)
   1e93c:	4798      	blx	r3
   1e93e:	8833      	ldrh	r3, [r6, #0]
   1e940:	4a65      	ldr	r2, [pc, #404]	; (1ead8 <AssemblePacket+0x370>)
   1e942:	9300      	str	r3, [sp, #0]
   1e944:	2102      	movs	r1, #2
   1e946:	003b      	movs	r3, r7
   1e948:	4d6d      	ldr	r5, [pc, #436]	; (1eb00 <AssemblePacket+0x398>)
   1e94a:	486e      	ldr	r0, [pc, #440]	; (1eb04 <AssemblePacket+0x39c>)
   1e94c:	47a8      	blx	r5
   1e94e:	8836      	ldrh	r6, [r6, #0]
   1e950:	2204      	movs	r2, #4
   1e952:	19f0      	adds	r0, r6, r7
   1e954:	4960      	ldr	r1, [pc, #384]	; (1ead8 <AssemblePacket+0x370>)
   1e956:	4b62      	ldr	r3, [pc, #392]	; (1eae0 <AssemblePacket+0x378>)
   1e958:	4798      	blx	r3
   1e95a:	3e0c      	subs	r6, #12
   1e95c:	34ce      	adds	r4, #206	; 0xce
   1e95e:	8026      	strh	r6, [r4, #0]
   1e960:	b00f      	add	sp, #60	; 0x3c
   1e962:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e964:	2240      	movs	r2, #64	; 0x40
   1e966:	4313      	orrs	r3, r2
   1e968:	7023      	strb	r3, [r4, #0]
   1e96a:	e727      	b.n	1e7bc <AssemblePacket+0x54>
   1e96c:	4293      	cmp	r3, r2
   1e96e:	d800      	bhi.n	1e972 <AssemblePacket+0x20a>
   1e970:	e762      	b.n	1e838 <AssemblePacket+0xd0>
   1e972:	0022      	movs	r2, r4
   1e974:	0021      	movs	r1, r4
   1e976:	32f6      	adds	r2, #246	; 0xf6
   1e978:	7813      	ldrb	r3, [r2, #0]
   1e97a:	31dd      	adds	r1, #221	; 0xdd
   1e97c:	3301      	adds	r3, #1
   1e97e:	b2db      	uxtb	r3, r3
   1e980:	7013      	strb	r3, [r2, #0]
   1e982:	7809      	ldrb	r1, [r1, #0]
   1e984:	4299      	cmp	r1, r3
   1e986:	d900      	bls.n	1e98a <AssemblePacket+0x222>
   1e988:	e756      	b.n	1e838 <AssemblePacket+0xd0>
   1e98a:	231a      	movs	r3, #26
   1e98c:	7016      	strb	r6, [r2, #0]
   1e98e:	aa06      	add	r2, sp, #24
   1e990:	189b      	adds	r3, r3, r2
   1e992:	001a      	movs	r2, r3
   1e994:	0031      	movs	r1, r6
   1e996:	4b5c      	ldr	r3, [pc, #368]	; (1eb08 <AssemblePacket+0x3a0>)
   1e998:	203c      	movs	r0, #60	; 0x3c
   1e99a:	4798      	blx	r3
   1e99c:	4b5b      	ldr	r3, [pc, #364]	; (1eb0c <AssemblePacket+0x3a4>)
   1e99e:	781a      	ldrb	r2, [r3, #0]
   1e9a0:	ab06      	add	r3, sp, #24
   1e9a2:	7e9b      	ldrb	r3, [r3, #26]
   1e9a4:	429a      	cmp	r2, r3
   1e9a6:	d00d      	beq.n	1e9c4 <AssemblePacket+0x25c>
   1e9a8:	34ff      	adds	r4, #255	; 0xff
   1e9aa:	7820      	ldrb	r0, [r4, #0]
   1e9ac:	4b58      	ldr	r3, [pc, #352]	; (1eb10 <AssemblePacket+0x3a8>)
   1e9ae:	4798      	blx	r3
   1e9b0:	0031      	movs	r1, r6
   1e9b2:	4a56      	ldr	r2, [pc, #344]	; (1eb0c <AssemblePacket+0x3a4>)
   1e9b4:	4b54      	ldr	r3, [pc, #336]	; (1eb08 <AssemblePacket+0x3a0>)
   1e9b6:	2035      	movs	r0, #53	; 0x35
   1e9b8:	4798      	blx	r3
   1e9ba:	210a      	movs	r1, #10
   1e9bc:	0030      	movs	r0, r6
   1e9be:	4b55      	ldr	r3, [pc, #340]	; (1eb14 <AssemblePacket+0x3ac>)
   1e9c0:	4798      	blx	r3
   1e9c2:	e739      	b.n	1e838 <AssemblePacket+0xd0>
   1e9c4:	4b47      	ldr	r3, [pc, #284]	; (1eae4 <AssemblePacket+0x37c>)
   1e9c6:	783a      	ldrb	r2, [r7, #0]
   1e9c8:	781b      	ldrb	r3, [r3, #0]
   1e9ca:	4293      	cmp	r3, r2
   1e9cc:	d022      	beq.n	1ea14 <AssemblePacket+0x2ac>
   1e9ce:	d800      	bhi.n	1e9d2 <AssemblePacket+0x26a>
   1e9d0:	e732      	b.n	1e838 <AssemblePacket+0xd0>
   1e9d2:	221b      	movs	r2, #27
   1e9d4:	003d      	movs	r5, r7
   1e9d6:	a906      	add	r1, sp, #24
   1e9d8:	3b01      	subs	r3, #1
   1e9da:	1852      	adds	r2, r2, r1
   1e9dc:	7013      	strb	r3, [r2, #0]
   1e9de:	261b      	movs	r6, #27
   1e9e0:	ab06      	add	r3, sp, #24
   1e9e2:	18f6      	adds	r6, r6, r3
   1e9e4:	782a      	ldrb	r2, [r5, #0]
   1e9e6:	7833      	ldrb	r3, [r6, #0]
   1e9e8:	429a      	cmp	r2, r3
   1e9ea:	d900      	bls.n	1e9ee <AssemblePacket+0x286>
   1e9ec:	e724      	b.n	1e838 <AssemblePacket+0xd0>
   1e9ee:	0031      	movs	r1, r6
   1e9f0:	2010      	movs	r0, #16
   1e9f2:	4f49      	ldr	r7, [pc, #292]	; (1eb18 <AssemblePacket+0x3b0>)
   1e9f4:	47b8      	blx	r7
   1e9f6:	2808      	cmp	r0, #8
   1e9f8:	d000      	beq.n	1e9fc <AssemblePacket+0x294>
   1e9fa:	e71d      	b.n	1e838 <AssemblePacket+0xd0>
   1e9fc:	0031      	movs	r1, r6
   1e9fe:	3009      	adds	r0, #9
   1ea00:	47b8      	blx	r7
   1ea02:	7833      	ldrb	r3, [r6, #0]
   1ea04:	2808      	cmp	r0, #8
   1ea06:	d061      	beq.n	1eacc <AssemblePacket+0x364>
   1ea08:	782a      	ldrb	r2, [r5, #0]
   1ea0a:	429a      	cmp	r2, r3
   1ea0c:	d2e7      	bcs.n	1e9de <AssemblePacket+0x276>
   1ea0e:	3b01      	subs	r3, #1
   1ea10:	7033      	strb	r3, [r6, #0]
   1ea12:	e7e4      	b.n	1e9de <AssemblePacket+0x276>
   1ea14:	34ff      	adds	r4, #255	; 0xff
   1ea16:	7820      	ldrb	r0, [r4, #0]
   1ea18:	4b40      	ldr	r3, [pc, #256]	; (1eb1c <AssemblePacket+0x3b4>)
   1ea1a:	4798      	blx	r3
   1ea1c:	231b      	movs	r3, #27
   1ea1e:	aa06      	add	r2, sp, #24
   1ea20:	189b      	adds	r3, r3, r2
   1ea22:	0019      	movs	r1, r3
   1ea24:	4c3e      	ldr	r4, [pc, #248]	; (1eb20 <AssemblePacket+0x3b8>)
   1ea26:	2013      	movs	r0, #19
   1ea28:	47a0      	blx	r4
   1ea2a:	231b      	movs	r3, #27
   1ea2c:	aa06      	add	r2, sp, #24
   1ea2e:	189b      	adds	r3, r3, r2
   1ea30:	0019      	movs	r1, r3
   1ea32:	2014      	movs	r0, #20
   1ea34:	47a0      	blx	r4
   1ea36:	2113      	movs	r1, #19
   1ea38:	0030      	movs	r0, r6
   1ea3a:	4c36      	ldr	r4, [pc, #216]	; (1eb14 <AssemblePacket+0x3ac>)
   1ea3c:	47a0      	blx	r4
   1ea3e:	2210      	movs	r2, #16
   1ea40:	786b      	ldrb	r3, [r5, #1]
   1ea42:	210b      	movs	r1, #11
   1ea44:	4313      	orrs	r3, r2
   1ea46:	706b      	strb	r3, [r5, #1]
   1ea48:	2001      	movs	r0, #1
   1ea4a:	47a0      	blx	r4
   1ea4c:	e6f4      	b.n	1e838 <AssemblePacket+0xd0>
   1ea4e:	2210      	movs	r2, #16
   1ea50:	3494      	adds	r4, #148	; 0x94
   1ea52:	7823      	ldrb	r3, [r4, #0]
   1ea54:	4393      	bics	r3, r2
   1ea56:	7023      	strb	r3, [r4, #0]
   1ea58:	e6ee      	b.n	1e838 <AssemblePacket+0xd0>
   1ea5a:	4b32      	ldr	r3, [pc, #200]	; (1eb24 <AssemblePacket+0x3bc>)
   1ea5c:	4798      	blx	r3
   1ea5e:	230f      	movs	r3, #15
   1ea60:	4018      	ands	r0, r3
   1ea62:	439c      	bics	r4, r3
   1ea64:	4304      	orrs	r4, r0
   1ea66:	e703      	b.n	1e870 <AssemblePacket+0x108>
   1ea68:	9b08      	ldr	r3, [sp, #32]
   1ea6a:	2b00      	cmp	r3, #0
   1ea6c:	d000      	beq.n	1ea70 <AssemblePacket+0x308>
   1ea6e:	e71b      	b.n	1e8a8 <AssemblePacket+0x140>
   1ea70:	4d1a      	ldr	r5, [pc, #104]	; (1eadc <AssemblePacket+0x374>)
   1ea72:	002b      	movs	r3, r5
   1ea74:	33e0      	adds	r3, #224	; 0xe0
   1ea76:	781b      	ldrb	r3, [r3, #0]
   1ea78:	2b00      	cmp	r3, #0
   1ea7a:	d100      	bne.n	1ea7e <AssemblePacket+0x316>
   1ea7c:	e747      	b.n	1e90e <AssemblePacket+0x1a6>
   1ea7e:	261e      	movs	r6, #30
   1ea80:	ab06      	add	r3, sp, #24
   1ea82:	18f6      	adds	r6, r6, r3
   1ea84:	2200      	movs	r2, #0
   1ea86:	0031      	movs	r1, r6
   1ea88:	4827      	ldr	r0, [pc, #156]	; (1eb28 <AssemblePacket+0x3c0>)
   1ea8a:	4b18      	ldr	r3, [pc, #96]	; (1eaec <AssemblePacket+0x384>)
   1ea8c:	4798      	blx	r3
   1ea8e:	682b      	ldr	r3, [r5, #0]
   1ea90:	7831      	ldrb	r1, [r6, #0]
   1ea92:	0a18      	lsrs	r0, r3, #8
   1ea94:	792b      	ldrb	r3, [r5, #4]
   1ea96:	9703      	str	r7, [sp, #12]
   1ea98:	061b      	lsls	r3, r3, #24
   1ea9a:	4303      	orrs	r3, r0
   1ea9c:	9304      	str	r3, [sp, #16]
   1ea9e:	8823      	ldrh	r3, [r4, #0]
   1eaa0:	002a      	movs	r2, r5
   1eaa2:	9302      	str	r3, [sp, #8]
   1eaa4:	2302      	movs	r3, #2
   1eaa6:	9301      	str	r3, [sp, #4]
   1eaa8:	4b16      	ldr	r3, [pc, #88]	; (1eb04 <AssemblePacket+0x39c>)
   1eaaa:	3288      	adds	r2, #136	; 0x88
   1eaac:	9300      	str	r3, [sp, #0]
   1eaae:	6813      	ldr	r3, [r2, #0]
   1eab0:	481d      	ldr	r0, [pc, #116]	; (1eb28 <AssemblePacket+0x3c0>)
   1eab2:	2200      	movs	r2, #0
   1eab4:	4d0f      	ldr	r5, [pc, #60]	; (1eaf4 <AssemblePacket+0x38c>)
   1eab6:	47a8      	blx	r5
   1eab8:	2800      	cmp	r0, #0
   1eaba:	d002      	beq.n	1eac2 <AssemblePacket+0x35a>
   1eabc:	2020      	movs	r0, #32
   1eabe:	4b0e      	ldr	r3, [pc, #56]	; (1eaf8 <AssemblePacket+0x390>)
   1eac0:	4798      	blx	r3
   1eac2:	8823      	ldrh	r3, [r4, #0]
   1eac4:	8832      	ldrh	r2, [r6, #0]
   1eac6:	189b      	adds	r3, r3, r2
   1eac8:	8023      	strh	r3, [r4, #0]
   1eaca:	e720      	b.n	1e90e <AssemblePacket+0x1a6>
   1eacc:	34e7      	adds	r4, #231	; 0xe7
   1eace:	e7c2      	b.n	1ea56 <AssemblePacket+0x2ee>
   1ead0:	000241cd 	.word	0x000241cd
   1ead4:	20001e19 	.word	0x20001e19
   1ead8:	20001164 	.word	0x20001164
   1eadc:	20001bd0 	.word	0x20001bd0
   1eae0:	00024149 	.word	0x00024149
   1eae4:	20001cb7 	.word	0x20001cb7
   1eae8:	20001c58 	.word	0x20001c58
   1eaec:	0001a7fd 	.word	0x0001a7fd
   1eaf0:	20001c05 	.word	0x20001c05
   1eaf4:	0001bc95 	.word	0x0001bc95
   1eaf8:	0001bd55 	.word	0x0001bd55
   1eafc:	0001ab29 	.word	0x0001ab29
   1eb00:	000133b5 	.word	0x000133b5
   1eb04:	20001bf5 	.word	0x20001bf5
   1eb08:	0000d595 	.word	0x0000d595
   1eb0c:	20001cb9 	.word	0x20001cb9
   1eb10:	000103cd 	.word	0x000103cd
   1eb14:	00013b45 	.word	0x00013b45
   1eb18:	0000d5ed 	.word	0x0000d5ed
   1eb1c:	00013239 	.word	0x00013239
   1eb20:	0001df51 	.word	0x0001df51
   1eb24:	0001a6f5 	.word	0x0001a6f5
   1eb28:	20001f34 	.word	0x20001f34

0001eb2c <LORAWAN_SetMulticastParam>:
   1eb2c:	b510      	push	{r4, lr}
   1eb2e:	4b01      	ldr	r3, [pc, #4]	; (1eb34 <LORAWAN_SetMulticastParam+0x8>)
   1eb30:	4798      	blx	r3
   1eb32:	bd10      	pop	{r4, pc}
   1eb34:	0001df51 	.word	0x0001df51

0001eb38 <LORAWAN_ReadyToSleep>:
   1eb38:	4b08      	ldr	r3, [pc, #32]	; (1eb5c <LORAWAN_ReadyToSleep+0x24>)
   1eb3a:	001a      	movs	r2, r3
   1eb3c:	32fd      	adds	r2, #253	; 0xfd
   1eb3e:	7812      	ldrb	r2, [r2, #0]
   1eb40:	2a01      	cmp	r2, #1
   1eb42:	d002      	beq.n	1eb4a <LORAWAN_ReadyToSleep+0x12>
   1eb44:	2000      	movs	r0, #0
   1eb46:	2a04      	cmp	r2, #4
   1eb48:	d106      	bne.n	1eb58 <LORAWAN_ReadyToSleep+0x20>
   1eb4a:	3384      	adds	r3, #132	; 0x84
   1eb4c:	7818      	ldrb	r0, [r3, #0]
   1eb4e:	230e      	movs	r3, #14
   1eb50:	4018      	ands	r0, r3
   1eb52:	4243      	negs	r3, r0
   1eb54:	4158      	adcs	r0, r3
   1eb56:	b2c0      	uxtb	r0, r0
   1eb58:	4770      	bx	lr
   1eb5a:	46c0      	nop			; (mov r8, r8)
   1eb5c:	20001bd0 	.word	0x20001bd0

0001eb60 <LorawanClasscUlAckTimerCallback>:
   1eb60:	2102      	movs	r1, #2
   1eb62:	4b03      	ldr	r3, [pc, #12]	; (1eb70 <LorawanClasscUlAckTimerCallback+0x10>)
   1eb64:	3394      	adds	r3, #148	; 0x94
   1eb66:	781a      	ldrb	r2, [r3, #0]
   1eb68:	438a      	bics	r2, r1
   1eb6a:	701a      	strb	r2, [r3, #0]
   1eb6c:	4770      	bx	lr
   1eb6e:	46c0      	nop			; (mov r8, r8)
   1eb70:	20001bd0 	.word	0x20001bd0

0001eb74 <LorawanClasscValidateSend>:
   1eb74:	2388      	movs	r3, #136	; 0x88
   1eb76:	b510      	push	{r4, lr}
   1eb78:	4c0a      	ldr	r4, [pc, #40]	; (1eba4 <LorawanClasscValidateSend+0x30>)
   1eb7a:	009b      	lsls	r3, r3, #2
   1eb7c:	5ce3      	ldrb	r3, [r4, r3]
   1eb7e:	2b00      	cmp	r3, #0
   1eb80:	d008      	beq.n	1eb94 <LorawanClasscValidateSend+0x20>
   1eb82:	220e      	movs	r2, #14
   1eb84:	3484      	adds	r4, #132	; 0x84
   1eb86:	7823      	ldrb	r3, [r4, #0]
   1eb88:	2008      	movs	r0, #8
   1eb8a:	4013      	ands	r3, r2
   1eb8c:	2b02      	cmp	r3, #2
   1eb8e:	d100      	bne.n	1eb92 <LorawanClasscValidateSend+0x1e>
   1eb90:	2011      	movs	r0, #17
   1eb92:	bd10      	pop	{r4, pc}
   1eb94:	2394      	movs	r3, #148	; 0x94
   1eb96:	005b      	lsls	r3, r3, #1
   1eb98:	5ce0      	ldrb	r0, [r4, r3]
   1eb9a:	4b03      	ldr	r3, [pc, #12]	; (1eba8 <LorawanClasscValidateSend+0x34>)
   1eb9c:	4798      	blx	r3
   1eb9e:	2800      	cmp	r0, #0
   1eba0:	d1ef      	bne.n	1eb82 <LorawanClasscValidateSend+0xe>
   1eba2:	e7f5      	b.n	1eb90 <LorawanClasscValidateSend+0x1c>
   1eba4:	20001bd0 	.word	0x20001bd0
   1eba8:	00015a89 	.word	0x00015a89

0001ebac <LorawanClasscReceiveWindowCallback>:
   1ebac:	2301      	movs	r3, #1
   1ebae:	b507      	push	{r0, r1, r2, lr}
   1ebb0:	a801      	add	r0, sp, #4
   1ebb2:	7003      	strb	r3, [r0, #0]
   1ebb4:	4b01      	ldr	r3, [pc, #4]	; (1ebbc <LorawanClasscReceiveWindowCallback+0x10>)
   1ebb6:	4798      	blx	r3
   1ebb8:	bd07      	pop	{r0, r1, r2, pc}
   1ebba:	46c0      	nop			; (mov r8, r8)
   1ebbc:	00020895 	.word	0x00020895

0001ebc0 <LorawanClasscRxDone>:
   1ebc0:	221f      	movs	r2, #31
   1ebc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1ebc4:	7803      	ldrb	r3, [r0, #0]
   1ebc6:	4c1c      	ldr	r4, [pc, #112]	; (1ec38 <LorawanClasscRxDone+0x78>)
   1ebc8:	4393      	bics	r3, r2
   1ebca:	2ba0      	cmp	r3, #160	; 0xa0
   1ebcc:	d10c      	bne.n	1ebe8 <LorawanClasscRxDone+0x28>
   1ebce:	2694      	movs	r6, #148	; 0x94
   1ebd0:	0076      	lsls	r6, r6, #1
   1ebd2:	5da0      	ldrb	r0, [r4, r6]
   1ebd4:	4b19      	ldr	r3, [pc, #100]	; (1ec3c <LorawanClasscRxDone+0x7c>)
   1ebd6:	4798      	blx	r3
   1ebd8:	1e05      	subs	r5, r0, #0
   1ebda:	d019      	beq.n	1ec10 <LorawanClasscRxDone+0x50>
   1ebdc:	0022      	movs	r2, r4
   1ebde:	2102      	movs	r1, #2
   1ebe0:	3294      	adds	r2, #148	; 0x94
   1ebe2:	7813      	ldrb	r3, [r2, #0]
   1ebe4:	438b      	bics	r3, r1
   1ebe6:	7013      	strb	r3, [r2, #0]
   1ebe8:	0021      	movs	r1, r4
   1ebea:	3184      	adds	r1, #132	; 0x84
   1ebec:	780b      	ldrb	r3, [r1, #0]
   1ebee:	220e      	movs	r2, #14
   1ebf0:	0018      	movs	r0, r3
   1ebf2:	4010      	ands	r0, r2
   1ebf4:	2806      	cmp	r0, #6
   1ebf6:	d103      	bne.n	1ec00 <LorawanClasscRxDone+0x40>
   1ebf8:	4393      	bics	r3, r2
   1ebfa:	3a04      	subs	r2, #4
   1ebfc:	4313      	orrs	r3, r2
   1ebfe:	700b      	strb	r3, [r1, #0]
   1ec00:	2390      	movs	r3, #144	; 0x90
   1ec02:	2201      	movs	r2, #1
   1ec04:	009b      	lsls	r3, r3, #2
   1ec06:	54e2      	strb	r2, [r4, r3]
   1ec08:	2000      	movs	r0, #0
   1ec0a:	4b0d      	ldr	r3, [pc, #52]	; (1ec40 <LorawanClasscRxDone+0x80>)
   1ec0c:	4798      	blx	r3
   1ec0e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1ec10:	4b0c      	ldr	r3, [pc, #48]	; (1ec44 <LorawanClasscRxDone+0x84>)
   1ec12:	5da6      	ldrb	r6, [r4, r6]
   1ec14:	4798      	blx	r3
   1ec16:	4b0c      	ldr	r3, [pc, #48]	; (1ec48 <LorawanClasscRxDone+0x88>)
   1ec18:	490c      	ldr	r1, [pc, #48]	; (1ec4c <LorawanClasscRxDone+0x8c>)
   1ec1a:	4798      	blx	r3
   1ec1c:	23fa      	movs	r3, #250	; 0xfa
   1ec1e:	009b      	lsls	r3, r3, #2
   1ec20:	18cb      	adds	r3, r1, r3
   1ec22:	21fa      	movs	r1, #250	; 0xfa
   1ec24:	0089      	lsls	r1, r1, #2
   1ec26:	4359      	muls	r1, r3
   1ec28:	9500      	str	r5, [sp, #0]
   1ec2a:	002a      	movs	r2, r5
   1ec2c:	4b08      	ldr	r3, [pc, #32]	; (1ec50 <LorawanClasscRxDone+0x90>)
   1ec2e:	0030      	movs	r0, r6
   1ec30:	4d08      	ldr	r5, [pc, #32]	; (1ec54 <LorawanClasscRxDone+0x94>)
   1ec32:	47a8      	blx	r5
   1ec34:	e7d8      	b.n	1ebe8 <LorawanClasscRxDone+0x28>
   1ec36:	46c0      	nop			; (mov r8, r8)
   1ec38:	20001bd0 	.word	0x20001bd0
   1ec3c:	00015a89 	.word	0x00015a89
   1ec40:	0001cd2d 	.word	0x0001cd2d
   1ec44:	0002434d 	.word	0x0002434d
   1ec48:	00021349 	.word	0x00021349
   1ec4c:	000007d1 	.word	0x000007d1
   1ec50:	0001eb61 	.word	0x0001eb61
   1ec54:	000159bd 	.word	0x000159bd

0001ec58 <LorawanClasscTxDone>:
   1ec58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ec5a:	4c27      	ldr	r4, [pc, #156]	; (1ecf8 <LorawanClasscTxDone+0xa0>)
   1ec5c:	0006      	movs	r6, r0
   1ec5e:	0023      	movs	r3, r4
   1ec60:	33d2      	adds	r3, #210	; 0xd2
   1ec62:	881d      	ldrh	r5, [r3, #0]
   1ec64:	0023      	movs	r3, r4
   1ec66:	3394      	adds	r3, #148	; 0x94
   1ec68:	781b      	ldrb	r3, [r3, #0]
   1ec6a:	2700      	movs	r7, #0
   1ec6c:	07db      	lsls	r3, r3, #31
   1ec6e:	d516      	bpl.n	1ec9e <LorawanClasscTxDone+0x46>
   1ec70:	0023      	movs	r3, r4
   1ec72:	0022      	movs	r2, r4
   1ec74:	33e2      	adds	r3, #226	; 0xe2
   1ec76:	781b      	ldrb	r3, [r3, #0]
   1ec78:	32e4      	adds	r2, #228	; 0xe4
   1ec7a:	7812      	ldrb	r2, [r2, #0]
   1ec7c:	3301      	adds	r3, #1
   1ec7e:	4293      	cmp	r3, r2
   1ec80:	db0d      	blt.n	1ec9e <LorawanClasscTxDone+0x46>
   1ec82:	4b1e      	ldr	r3, [pc, #120]	; (1ecfc <LorawanClasscTxDone+0xa4>)
   1ec84:	5ce7      	ldrb	r7, [r4, r3]
   1ec86:	2f00      	cmp	r7, #0
   1ec88:	d009      	beq.n	1ec9e <LorawanClasscTxDone+0x46>
   1ec8a:	4b1d      	ldr	r3, [pc, #116]	; (1ed00 <LorawanClasscTxDone+0xa8>)
   1ec8c:	4798      	blx	r3
   1ec8e:	4b1d      	ldr	r3, [pc, #116]	; (1ed04 <LorawanClasscTxDone+0xac>)
   1ec90:	491d      	ldr	r1, [pc, #116]	; (1ed08 <LorawanClasscTxDone+0xb0>)
   1ec92:	4798      	blx	r3
   1ec94:	23fa      	movs	r3, #250	; 0xfa
   1ec96:	009b      	lsls	r3, r3, #2
   1ec98:	1975      	adds	r5, r6, r5
   1ec9a:	18c9      	adds	r1, r1, r3
   1ec9c:	194d      	adds	r5, r1, r5
   1ec9e:	0023      	movs	r3, r4
   1eca0:	3394      	adds	r3, #148	; 0x94
   1eca2:	781b      	ldrb	r3, [r3, #0]
   1eca4:	07db      	lsls	r3, r3, #31
   1eca6:	d411      	bmi.n	1eccc <LorawanClasscTxDone+0x74>
   1eca8:	0023      	movs	r3, r4
   1ecaa:	0022      	movs	r2, r4
   1ecac:	33e1      	adds	r3, #225	; 0xe1
   1ecae:	781b      	ldrb	r3, [r3, #0]
   1ecb0:	32e3      	adds	r2, #227	; 0xe3
   1ecb2:	7812      	ldrb	r2, [r2, #0]
   1ecb4:	3301      	adds	r3, #1
   1ecb6:	4293      	cmp	r3, r2
   1ecb8:	db08      	blt.n	1eccc <LorawanClasscTxDone+0x74>
   1ecba:	4b10      	ldr	r3, [pc, #64]	; (1ecfc <LorawanClasscTxDone+0xa4>)
   1ecbc:	5ce3      	ldrb	r3, [r4, r3]
   1ecbe:	2b00      	cmp	r3, #0
   1ecc0:	d004      	beq.n	1eccc <LorawanClasscTxDone+0x74>
   1ecc2:	23fa      	movs	r3, #250	; 0xfa
   1ecc4:	00db      	lsls	r3, r3, #3
   1ecc6:	18f6      	adds	r6, r6, r3
   1ecc8:	19ad      	adds	r5, r5, r6
   1ecca:	e001      	b.n	1ecd0 <LorawanClasscTxDone+0x78>
   1eccc:	2f00      	cmp	r7, #0
   1ecce:	d0fb      	beq.n	1ecc8 <LorawanClasscTxDone+0x70>
   1ecd0:	2394      	movs	r3, #148	; 0x94
   1ecd2:	005b      	lsls	r3, r3, #1
   1ecd4:	5ce0      	ldrb	r0, [r4, r3]
   1ecd6:	4b0d      	ldr	r3, [pc, #52]	; (1ed0c <LorawanClasscTxDone+0xb4>)
   1ecd8:	4798      	blx	r3
   1ecda:	34f1      	adds	r4, #241	; 0xf1
   1ecdc:	21fa      	movs	r1, #250	; 0xfa
   1ecde:	7820      	ldrb	r0, [r4, #0]
   1ece0:	2400      	movs	r4, #0
   1ece2:	0089      	lsls	r1, r1, #2
   1ece4:	4369      	muls	r1, r5
   1ece6:	0022      	movs	r2, r4
   1ece8:	4d09      	ldr	r5, [pc, #36]	; (1ed10 <LorawanClasscTxDone+0xb8>)
   1ecea:	9400      	str	r4, [sp, #0]
   1ecec:	4b09      	ldr	r3, [pc, #36]	; (1ed14 <LorawanClasscTxDone+0xbc>)
   1ecee:	47a8      	blx	r5
   1ecf0:	0020      	movs	r0, r4
   1ecf2:	4b09      	ldr	r3, [pc, #36]	; (1ed18 <LorawanClasscTxDone+0xc0>)
   1ecf4:	4798      	blx	r3
   1ecf6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1ecf8:	20001bd0 	.word	0x20001bd0
   1ecfc:	0000022a 	.word	0x0000022a
   1ed00:	0002434d 	.word	0x0002434d
   1ed04:	00021349 	.word	0x00021349
   1ed08:	000007d1 	.word	0x000007d1
   1ed0c:	00015cfd 	.word	0x00015cfd
   1ed10:	000159bd 	.word	0x000159bd
   1ed14:	0001cbed 	.word	0x0001cbed
   1ed18:	0001cd2d 	.word	0x0001cd2d

0001ed1c <LorawanClasscRxTimeout>:
   1ed1c:	4a0c      	ldr	r2, [pc, #48]	; (1ed50 <LorawanClasscRxTimeout+0x34>)
   1ed1e:	b510      	push	{r4, lr}
   1ed20:	0010      	movs	r0, r2
   1ed22:	3084      	adds	r0, #132	; 0x84
   1ed24:	7803      	ldrb	r3, [r0, #0]
   1ed26:	240e      	movs	r4, #14
   1ed28:	0019      	movs	r1, r3
   1ed2a:	4021      	ands	r1, r4
   1ed2c:	2906      	cmp	r1, #6
   1ed2e:	d107      	bne.n	1ed40 <LorawanClasscRxTimeout+0x24>
   1ed30:	2208      	movs	r2, #8
   1ed32:	43a3      	bics	r3, r4
   1ed34:	4313      	orrs	r3, r2
   1ed36:	7003      	strb	r3, [r0, #0]
   1ed38:	2000      	movs	r0, #0
   1ed3a:	4b06      	ldr	r3, [pc, #24]	; (1ed54 <LorawanClasscRxTimeout+0x38>)
   1ed3c:	4798      	blx	r3
   1ed3e:	e006      	b.n	1ed4e <LorawanClasscRxTimeout+0x32>
   1ed40:	290a      	cmp	r1, #10
   1ed42:	d1f9      	bne.n	1ed38 <LorawanClasscRxTimeout+0x1c>
   1ed44:	2388      	movs	r3, #136	; 0x88
   1ed46:	009b      	lsls	r3, r3, #2
   1ed48:	5cd3      	ldrb	r3, [r2, r3]
   1ed4a:	2b00      	cmp	r3, #0
   1ed4c:	d0f4      	beq.n	1ed38 <LorawanClasscRxTimeout+0x1c>
   1ed4e:	bd10      	pop	{r4, pc}
   1ed50:	20001bd0 	.word	0x20001bd0
   1ed54:	0001cd2d 	.word	0x0001cd2d

0001ed58 <LorawanClasscNotifyAppOnReceive>:
   1ed58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed5a:	001f      	movs	r7, r3
   1ed5c:	2394      	movs	r3, #148	; 0x94
   1ed5e:	0016      	movs	r6, r2
   1ed60:	4a07      	ldr	r2, [pc, #28]	; (1ed80 <LorawanClasscNotifyAppOnReceive+0x28>)
   1ed62:	005b      	lsls	r3, r3, #1
   1ed64:	0004      	movs	r4, r0
   1ed66:	5cd0      	ldrb	r0, [r2, r3]
   1ed68:	4b06      	ldr	r3, [pc, #24]	; (1ed84 <LorawanClasscNotifyAppOnReceive+0x2c>)
   1ed6a:	000d      	movs	r5, r1
   1ed6c:	4798      	blx	r3
   1ed6e:	2800      	cmp	r0, #0
   1ed70:	d105      	bne.n	1ed7e <LorawanClasscNotifyAppOnReceive+0x26>
   1ed72:	0020      	movs	r0, r4
   1ed74:	003b      	movs	r3, r7
   1ed76:	0032      	movs	r2, r6
   1ed78:	0029      	movs	r1, r5
   1ed7a:	4c03      	ldr	r4, [pc, #12]	; (1ed88 <LorawanClasscNotifyAppOnReceive+0x30>)
   1ed7c:	47a0      	blx	r4
   1ed7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed80:	20001bd0 	.word	0x20001bd0
   1ed84:	00015a89 	.word	0x00015a89
   1ed88:	0001bdb9 	.word	0x0001bdb9

0001ed8c <LorawanMcastInit>:
   1ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed8e:	2396      	movs	r3, #150	; 0x96
   1ed90:	2600      	movs	r6, #0
   1ed92:	4c1c      	ldr	r4, [pc, #112]	; (1ee04 <LorawanMcastInit+0x78>)
   1ed94:	005b      	lsls	r3, r3, #1
   1ed96:	54e6      	strb	r6, [r4, r3]
   1ed98:	232e      	movs	r3, #46	; 0x2e
   1ed9a:	4d1b      	ldr	r5, [pc, #108]	; (1ee08 <LorawanMcastInit+0x7c>)
   1ed9c:	33ff      	adds	r3, #255	; 0xff
   1ed9e:	54e6      	strb	r6, [r4, r3]
   1eda0:	002b      	movs	r3, r5
   1eda2:	2201      	movs	r2, #1
   1eda4:	3b14      	subs	r3, #20
   1eda6:	4252      	negs	r2, r2
   1eda8:	601a      	str	r2, [r3, #0]
   1edaa:	2100      	movs	r1, #0
   1edac:	3211      	adds	r2, #17
   1edae:	0028      	movs	r0, r5
   1edb0:	4f16      	ldr	r7, [pc, #88]	; (1ee0c <LorawanMcastInit+0x80>)
   1edb2:	47b8      	blx	r7
   1edb4:	0028      	movs	r0, r5
   1edb6:	2210      	movs	r2, #16
   1edb8:	2100      	movs	r1, #0
   1edba:	3810      	subs	r0, #16
   1edbc:	47b8      	blx	r7
   1edbe:	0023      	movs	r3, r4
   1edc0:	336e      	adds	r3, #110	; 0x6e
   1edc2:	781a      	ldrb	r2, [r3, #0]
   1edc4:	002b      	movs	r3, r5
   1edc6:	3324      	adds	r3, #36	; 0x24
   1edc8:	701a      	strb	r2, [r3, #0]
   1edca:	0023      	movs	r3, r4
   1edcc:	336a      	adds	r3, #106	; 0x6a
   1edce:	8819      	ldrh	r1, [r3, #0]
   1edd0:	0023      	movs	r3, r4
   1edd2:	336c      	adds	r3, #108	; 0x6c
   1edd4:	881b      	ldrh	r3, [r3, #0]
   1edd6:	616e      	str	r6, [r5, #20]
   1edd8:	041b      	lsls	r3, r3, #16
   1edda:	430b      	orrs	r3, r1
   1eddc:	490c      	ldr	r1, [pc, #48]	; (1ee10 <LorawanMcastInit+0x84>)
   1edde:	622b      	str	r3, [r5, #32]
   1ede0:	61ae      	str	r6, [r5, #24]
   1ede2:	612e      	str	r6, [r5, #16]
   1ede4:	353c      	adds	r5, #60	; 0x3c
   1ede6:	428d      	cmp	r5, r1
   1ede8:	d1da      	bne.n	1eda0 <LorawanMcastInit+0x14>
   1edea:	0021      	movs	r1, r4
   1edec:	3173      	adds	r1, #115	; 0x73
   1edee:	346f      	adds	r4, #111	; 0x6f
   1edf0:	700a      	strb	r2, [r1, #0]
   1edf2:	0a1a      	lsrs	r2, r3, #8
   1edf4:	7023      	strb	r3, [r4, #0]
   1edf6:	7062      	strb	r2, [r4, #1]
   1edf8:	0c1a      	lsrs	r2, r3, #16
   1edfa:	0e1b      	lsrs	r3, r3, #24
   1edfc:	70a2      	strb	r2, [r4, #2]
   1edfe:	70e3      	strb	r3, [r4, #3]
   1ee00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee02:	46c0      	nop			; (mov r8, r8)
   1ee04:	20001bd0 	.word	0x20001bd0
   1ee08:	20001d14 	.word	0x20001d14
   1ee0c:	000241cd 	.word	0x000241cd
   1ee10:	20001e04 	.word	0x20001e04

0001ee14 <LorawanMcastEnable>:
   1ee14:	0002      	movs	r2, r0
   1ee16:	b510      	push	{r4, lr}
   1ee18:	200a      	movs	r0, #10
   1ee1a:	2903      	cmp	r1, #3
   1ee1c:	d822      	bhi.n	1ee64 <LorawanMcastEnable+0x50>
   1ee1e:	4b1a      	ldr	r3, [pc, #104]	; (1ee88 <LorawanMcastEnable+0x74>)
   1ee20:	2a00      	cmp	r2, #0
   1ee22:	d020      	beq.n	1ee66 <LorawanMcastEnable+0x52>
   1ee24:	223c      	movs	r2, #60	; 0x3c
   1ee26:	434a      	muls	r2, r1
   1ee28:	189a      	adds	r2, r3, r2
   1ee2a:	3259      	adds	r2, #89	; 0x59
   1ee2c:	32ff      	adds	r2, #255	; 0xff
   1ee2e:	7a12      	ldrb	r2, [r2, #8]
   1ee30:	0754      	lsls	r4, r2, #29
   1ee32:	d512      	bpl.n	1ee5a <LorawanMcastEnable+0x46>
   1ee34:	0794      	lsls	r4, r2, #30
   1ee36:	d510      	bpl.n	1ee5a <LorawanMcastEnable+0x46>
   1ee38:	07d2      	lsls	r2, r2, #31
   1ee3a:	0fd2      	lsrs	r2, r2, #31
   1ee3c:	2a01      	cmp	r2, #1
   1ee3e:	d10c      	bne.n	1ee5a <LorawanMcastEnable+0x46>
   1ee40:	001c      	movs	r4, r3
   1ee42:	34fd      	adds	r4, #253	; 0xfd
   1ee44:	7824      	ldrb	r4, [r4, #0]
   1ee46:	0764      	lsls	r4, r4, #29
   1ee48:	d007      	beq.n	1ee5a <LorawanMcastEnable+0x46>
   1ee4a:	202e      	movs	r0, #46	; 0x2e
   1ee4c:	408a      	lsls	r2, r1
   1ee4e:	30ff      	adds	r0, #255	; 0xff
   1ee50:	5c19      	ldrb	r1, [r3, r0]
   1ee52:	430a      	orrs	r2, r1
   1ee54:	541a      	strb	r2, [r3, r0]
   1ee56:	3826      	subs	r0, #38	; 0x26
   1ee58:	38ff      	subs	r0, #255	; 0xff
   1ee5a:	2196      	movs	r1, #150	; 0x96
   1ee5c:	0049      	lsls	r1, r1, #1
   1ee5e:	5c5a      	ldrb	r2, [r3, r1]
   1ee60:	3201      	adds	r2, #1
   1ee62:	545a      	strb	r2, [r3, r1]
   1ee64:	bd10      	pop	{r4, pc}
   1ee66:	2201      	movs	r2, #1
   1ee68:	408a      	lsls	r2, r1
   1ee6a:	202e      	movs	r0, #46	; 0x2e
   1ee6c:	0011      	movs	r1, r2
   1ee6e:	30ff      	adds	r0, #255	; 0xff
   1ee70:	5c1a      	ldrb	r2, [r3, r0]
   1ee72:	438a      	bics	r2, r1
   1ee74:	2196      	movs	r1, #150	; 0x96
   1ee76:	541a      	strb	r2, [r3, r0]
   1ee78:	0049      	lsls	r1, r1, #1
   1ee7a:	5c5a      	ldrb	r2, [r3, r1]
   1ee7c:	3826      	subs	r0, #38	; 0x26
   1ee7e:	3a01      	subs	r2, #1
   1ee80:	545a      	strb	r2, [r3, r1]
   1ee82:	38ff      	subs	r0, #255	; 0xff
   1ee84:	e7ee      	b.n	1ee64 <LorawanMcastEnable+0x50>
   1ee86:	46c0      	nop			; (mov r8, r8)
   1ee88:	20001bd0 	.word	0x20001bd0

0001ee8c <LorawanMcastValidateHdr>:
   1ee8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ee8e:	469c      	mov	ip, r3
   1ee90:	2400      	movs	r4, #0
   1ee92:	230a      	movs	r3, #10
   1ee94:	4f18      	ldr	r7, [pc, #96]	; (1eef8 <LorawanMcastValidateHdr+0x6c>)
   1ee96:	b2e5      	uxtb	r5, r4
   1ee98:	9501      	str	r5, [sp, #4]
   1ee9a:	252e      	movs	r5, #46	; 0x2e
   1ee9c:	35ff      	adds	r5, #255	; 0xff
   1ee9e:	5d7d      	ldrb	r5, [r7, r5]
   1eea0:	2601      	movs	r6, #1
   1eea2:	4125      	asrs	r5, r4
   1eea4:	4235      	tst	r5, r6
   1eea6:	d022      	beq.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eea8:	7886      	ldrb	r6, [r0, #2]
   1eeaa:	7845      	ldrb	r5, [r0, #1]
   1eeac:	0236      	lsls	r6, r6, #8
   1eeae:	432e      	orrs	r6, r5
   1eeb0:	78c5      	ldrb	r5, [r0, #3]
   1eeb2:	042d      	lsls	r5, r5, #16
   1eeb4:	432e      	orrs	r6, r5
   1eeb6:	7905      	ldrb	r5, [r0, #4]
   1eeb8:	062d      	lsls	r5, r5, #24
   1eeba:	4335      	orrs	r5, r6
   1eebc:	263c      	movs	r6, #60	; 0x3c
   1eebe:	4366      	muls	r6, r4
   1eec0:	3631      	adds	r6, #49	; 0x31
   1eec2:	36ff      	adds	r6, #255	; 0xff
   1eec4:	59be      	ldr	r6, [r7, r6]
   1eec6:	42b5      	cmp	r5, r6
   1eec8:	d111      	bne.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eeca:	4d0c      	ldr	r5, [pc, #48]	; (1eefc <LorawanMcastValidateHdr+0x70>)
   1eecc:	782e      	ldrb	r6, [r5, #0]
   1eece:	2506      	movs	r5, #6
   1eed0:	422e      	tst	r6, r5
   1eed2:	d00c      	beq.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eed4:	2a00      	cmp	r2, #0
   1eed6:	d00a      	beq.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eed8:	7946      	ldrb	r6, [r0, #5]
   1eeda:	3569      	adds	r5, #105	; 0x69
   1eedc:	422e      	tst	r6, r5
   1eede:	d106      	bne.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eee0:	2903      	cmp	r1, #3
   1eee2:	d104      	bne.n	1eeee <LorawanMcastValidateHdr+0x62>
   1eee4:	466d      	mov	r5, sp
   1eee6:	4663      	mov	r3, ip
   1eee8:	792d      	ldrb	r5, [r5, #4]
   1eeea:	701d      	strb	r5, [r3, #0]
   1eeec:	2308      	movs	r3, #8
   1eeee:	3401      	adds	r4, #1
   1eef0:	2c04      	cmp	r4, #4
   1eef2:	d1d0      	bne.n	1ee96 <LorawanMcastValidateHdr+0xa>
   1eef4:	0018      	movs	r0, r3
   1eef6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1eef8:	20001bd0 	.word	0x20001bd0
   1eefc:	20001ccd 	.word	0x20001ccd

0001ef00 <LorawanMcastProcessPkt>:
   1ef00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef02:	0015      	movs	r5, r2
   1ef04:	223c      	movs	r2, #60	; 0x3c
   1ef06:	435a      	muls	r2, r3
   1ef08:	b089      	sub	sp, #36	; 0x24
   1ef0a:	9107      	str	r1, [sp, #28]
   1ef0c:	493f      	ldr	r1, [pc, #252]	; (1f00c <LorawanMcastProcessPkt+0x10c>)
   1ef0e:	9006      	str	r0, [sp, #24]
   1ef10:	1889      	adds	r1, r1, r2
   1ef12:	31fc      	adds	r1, #252	; 0xfc
   1ef14:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
   1ef16:	6e08      	ldr	r0, [r1, #96]	; 0x60
   1ef18:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   1ef1a:	4284      	cmp	r4, r0
   1ef1c:	d224      	bcs.n	1ef68 <LorawanMcastProcessPkt+0x68>
   1ef1e:	2100      	movs	r1, #0
   1ef20:	4294      	cmp	r4, r2
   1ef22:	d802      	bhi.n	1ef2a <LorawanMcastProcessPkt+0x2a>
   1ef24:	4282      	cmp	r2, r0
   1ef26:	4192      	sbcs	r2, r2
   1ef28:	4251      	negs	r1, r2
   1ef2a:	270a      	movs	r7, #10
   1ef2c:	2900      	cmp	r1, #0
   1ef2e:	d11d      	bne.n	1ef6c <LorawanMcastProcessPkt+0x6c>
   1ef30:	4a36      	ldr	r2, [pc, #216]	; (1f00c <LorawanMcastProcessPkt+0x10c>)
   1ef32:	210e      	movs	r1, #14
   1ef34:	0010      	movs	r0, r2
   1ef36:	3084      	adds	r0, #132	; 0x84
   1ef38:	7803      	ldrb	r3, [r0, #0]
   1ef3a:	001c      	movs	r4, r3
   1ef3c:	400c      	ands	r4, r1
   1ef3e:	2c06      	cmp	r4, #6
   1ef40:	d108      	bne.n	1ef54 <LorawanMcastProcessPkt+0x54>
   1ef42:	0014      	movs	r4, r2
   1ef44:	34fd      	adds	r4, #253	; 0xfd
   1ef46:	7824      	ldrb	r4, [r4, #0]
   1ef48:	2c04      	cmp	r4, #4
   1ef4a:	d103      	bne.n	1ef54 <LorawanMcastProcessPkt+0x54>
   1ef4c:	438b      	bics	r3, r1
   1ef4e:	3904      	subs	r1, #4
   1ef50:	430b      	orrs	r3, r1
   1ef52:	7003      	strb	r3, [r0, #0]
   1ef54:	2390      	movs	r3, #144	; 0x90
   1ef56:	2101      	movs	r1, #1
   1ef58:	009b      	lsls	r3, r3, #2
   1ef5a:	54d1      	strb	r1, [r2, r3]
   1ef5c:	2000      	movs	r0, #0
   1ef5e:	4b2c      	ldr	r3, [pc, #176]	; (1f010 <LorawanMcastProcessPkt+0x110>)
   1ef60:	4798      	blx	r3
   1ef62:	0038      	movs	r0, r7
   1ef64:	b009      	add	sp, #36	; 0x24
   1ef66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef68:	4294      	cmp	r4, r2
   1ef6a:	d8db      	bhi.n	1ef24 <LorawanMcastProcessPkt+0x24>
   1ef6c:	243c      	movs	r4, #60	; 0x3c
   1ef6e:	435c      	muls	r4, r3
   1ef70:	4e26      	ldr	r6, [pc, #152]	; (1f00c <LorawanMcastProcessPkt+0x10c>)
   1ef72:	79ea      	ldrb	r2, [r5, #7]
   1ef74:	1937      	adds	r7, r6, r4
   1ef76:	003b      	movs	r3, r7
   1ef78:	79a9      	ldrb	r1, [r5, #6]
   1ef7a:	0212      	lsls	r2, r2, #8
   1ef7c:	3355      	adds	r3, #85	; 0x55
   1ef7e:	430a      	orrs	r2, r1
   1ef80:	33ff      	adds	r3, #255	; 0xff
   1ef82:	801a      	strh	r2, [r3, #0]
   1ef84:	2105      	movs	r1, #5
   1ef86:	4b23      	ldr	r3, [pc, #140]	; (1f014 <LorawanMcastProcessPkt+0x114>)
   1ef88:	37fc      	adds	r7, #252	; 0xfc
   1ef8a:	2000      	movs	r0, #0
   1ef8c:	4798      	blx	r3
   1ef8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ef90:	3445      	adds	r4, #69	; 0x45
   1ef92:	9304      	str	r3, [sp, #16]
   1ef94:	4b20      	ldr	r3, [pc, #128]	; (1f018 <LorawanMcastProcessPkt+0x118>)
   1ef96:	9907      	ldr	r1, [sp, #28]
   1ef98:	9303      	str	r3, [sp, #12]
   1ef9a:	2319      	movs	r3, #25
   1ef9c:	34ff      	adds	r4, #255	; 0xff
   1ef9e:	9302      	str	r3, [sp, #8]
   1efa0:	19a4      	adds	r4, r4, r6
   1efa2:	3b16      	subs	r3, #22
   1efa4:	9806      	ldr	r0, [sp, #24]
   1efa6:	9400      	str	r4, [sp, #0]
   1efa8:	390d      	subs	r1, #13
   1efaa:	9301      	str	r3, [sp, #4]
   1efac:	b2c9      	uxtb	r1, r1
   1efae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1efb0:	2201      	movs	r2, #1
   1efb2:	3009      	adds	r0, #9
   1efb4:	4c19      	ldr	r4, [pc, #100]	; (1f01c <LorawanMcastProcessPkt+0x11c>)
   1efb6:	47a0      	blx	r4
   1efb8:	2800      	cmp	r0, #0
   1efba:	d002      	beq.n	1efc2 <LorawanMcastProcessPkt+0xc2>
   1efbc:	201f      	movs	r0, #31
   1efbe:	4b18      	ldr	r3, [pc, #96]	; (1f020 <LorawanMcastProcessPkt+0x120>)
   1efc0:	4798      	blx	r3
   1efc2:	4918      	ldr	r1, [pc, #96]	; (1f024 <LorawanMcastProcessPkt+0x124>)
   1efc4:	2708      	movs	r7, #8
   1efc6:	784a      	ldrb	r2, [r1, #1]
   1efc8:	780b      	ldrb	r3, [r1, #0]
   1efca:	0212      	lsls	r2, r2, #8
   1efcc:	431a      	orrs	r2, r3
   1efce:	788b      	ldrb	r3, [r1, #2]
   1efd0:	041b      	lsls	r3, r3, #16
   1efd2:	431a      	orrs	r2, r3
   1efd4:	78cb      	ldrb	r3, [r1, #3]
   1efd6:	061b      	lsls	r3, r3, #24
   1efd8:	4313      	orrs	r3, r2
   1efda:	d0a9      	beq.n	1ef30 <LorawanMcastProcessPkt+0x30>
   1efdc:	2220      	movs	r2, #32
   1efde:	3694      	adds	r6, #148	; 0x94
   1efe0:	7833      	ldrb	r3, [r6, #0]
   1efe2:	9906      	ldr	r1, [sp, #24]
   1efe4:	4393      	bics	r3, r2
   1efe6:	7033      	strb	r3, [r6, #0]
   1efe8:	78ab      	ldrb	r3, [r5, #2]
   1efea:	7868      	ldrb	r0, [r5, #1]
   1efec:	40bb      	lsls	r3, r7
   1efee:	4303      	orrs	r3, r0
   1eff0:	78e8      	ldrb	r0, [r5, #3]
   1eff2:	9a07      	ldr	r2, [sp, #28]
   1eff4:	0400      	lsls	r0, r0, #16
   1eff6:	4303      	orrs	r3, r0
   1eff8:	7928      	ldrb	r0, [r5, #4]
   1effa:	3a0c      	subs	r2, #12
   1effc:	0600      	lsls	r0, r0, #24
   1effe:	4318      	orrs	r0, r3
   1f000:	b2d2      	uxtb	r2, r2
   1f002:	19c9      	adds	r1, r1, r7
   1f004:	003b      	movs	r3, r7
   1f006:	4c08      	ldr	r4, [pc, #32]	; (1f028 <LorawanMcastProcessPkt+0x128>)
   1f008:	47a0      	blx	r4
   1f00a:	e791      	b.n	1ef30 <LorawanMcastProcessPkt+0x30>
   1f00c:	20001bd0 	.word	0x20001bd0
   1f010:	0001cd2d 	.word	0x0001cd2d
   1f014:	00013b45 	.word	0x00013b45
   1f018:	20001f34 	.word	0x20001f34
   1f01c:	0001bc95 	.word	0x0001bc95
   1f020:	0001bd55 	.word	0x0001bd55
   1f024:	20001f2c 	.word	0x20001f2c
   1f028:	0001bdb9 	.word	0x0001bdb9

0001f02c <LorawanAddMcastAddr>:
   1f02c:	b570      	push	{r4, r5, r6, lr}
   1f02e:	260a      	movs	r6, #10
   1f030:	2903      	cmp	r1, #3
   1f032:	d818      	bhi.n	1f066 <LorawanAddMcastAddr+0x3a>
   1f034:	4b0d      	ldr	r3, [pc, #52]	; (1f06c <LorawanAddMcastAddr+0x40>)
   1f036:	681a      	ldr	r2, [r3, #0]
   1f038:	0a15      	lsrs	r5, r2, #8
   1f03a:	791a      	ldrb	r2, [r3, #4]
   1f03c:	0612      	lsls	r2, r2, #24
   1f03e:	432a      	orrs	r2, r5
   1f040:	4282      	cmp	r2, r0
   1f042:	d010      	beq.n	1f066 <LorawanAddMcastAddr+0x3a>
   1f044:	243c      	movs	r4, #60	; 0x3c
   1f046:	434c      	muls	r4, r1
   1f048:	191c      	adds	r4, r3, r4
   1f04a:	0023      	movs	r3, r4
   1f04c:	33fc      	adds	r3, #252	; 0xfc
   1f04e:	6358      	str	r0, [r3, #52]	; 0x34
   1f050:	2106      	movs	r1, #6
   1f052:	2000      	movs	r0, #0
   1f054:	4b06      	ldr	r3, [pc, #24]	; (1f070 <LorawanAddMcastAddr+0x44>)
   1f056:	4798      	blx	r3
   1f058:	2201      	movs	r2, #1
   1f05a:	3459      	adds	r4, #89	; 0x59
   1f05c:	34ff      	adds	r4, #255	; 0xff
   1f05e:	7a21      	ldrb	r1, [r4, #8]
   1f060:	3e02      	subs	r6, #2
   1f062:	430a      	orrs	r2, r1
   1f064:	7222      	strb	r2, [r4, #8]
   1f066:	0030      	movs	r0, r6
   1f068:	bd70      	pop	{r4, r5, r6, pc}
   1f06a:	46c0      	nop			; (mov r8, r8)
   1f06c:	20001bd0 	.word	0x20001bd0
   1f070:	00013b45 	.word	0x00013b45

0001f074 <LorawanAddMcastAppskey>:
   1f074:	b570      	push	{r4, r5, r6, lr}
   1f076:	0006      	movs	r6, r0
   1f078:	200a      	movs	r0, #10
   1f07a:	2903      	cmp	r1, #3
   1f07c:	d818      	bhi.n	1f0b0 <LorawanAddMcastAppskey+0x3c>
   1f07e:	2e00      	cmp	r6, #0
   1f080:	d016      	beq.n	1f0b0 <LorawanAddMcastAppskey+0x3c>
   1f082:	253c      	movs	r5, #60	; 0x3c
   1f084:	434d      	muls	r5, r1
   1f086:	0028      	movs	r0, r5
   1f088:	4c0a      	ldr	r4, [pc, #40]	; (1f0b4 <LorawanAddMcastAppskey+0x40>)
   1f08a:	3045      	adds	r0, #69	; 0x45
   1f08c:	30ff      	adds	r0, #255	; 0xff
   1f08e:	2210      	movs	r2, #16
   1f090:	1900      	adds	r0, r0, r4
   1f092:	0031      	movs	r1, r6
   1f094:	4b08      	ldr	r3, [pc, #32]	; (1f0b8 <LorawanAddMcastAppskey+0x44>)
   1f096:	4798      	blx	r3
   1f098:	4b08      	ldr	r3, [pc, #32]	; (1f0bc <LorawanAddMcastAppskey+0x48>)
   1f09a:	2107      	movs	r1, #7
   1f09c:	2000      	movs	r0, #0
   1f09e:	4798      	blx	r3
   1f0a0:	2304      	movs	r3, #4
   1f0a2:	2008      	movs	r0, #8
   1f0a4:	1964      	adds	r4, r4, r5
   1f0a6:	3459      	adds	r4, #89	; 0x59
   1f0a8:	34ff      	adds	r4, #255	; 0xff
   1f0aa:	7a22      	ldrb	r2, [r4, #8]
   1f0ac:	4313      	orrs	r3, r2
   1f0ae:	7223      	strb	r3, [r4, #8]
   1f0b0:	bd70      	pop	{r4, r5, r6, pc}
   1f0b2:	46c0      	nop			; (mov r8, r8)
   1f0b4:	20001bd0 	.word	0x20001bd0
   1f0b8:	00024149 	.word	0x00024149
   1f0bc:	00013b45 	.word	0x00013b45

0001f0c0 <LorawanAddMcastNwkskey>:
   1f0c0:	b570      	push	{r4, r5, r6, lr}
   1f0c2:	0006      	movs	r6, r0
   1f0c4:	200a      	movs	r0, #10
   1f0c6:	2903      	cmp	r1, #3
   1f0c8:	d818      	bhi.n	1f0fc <LorawanAddMcastNwkskey+0x3c>
   1f0ca:	2e00      	cmp	r6, #0
   1f0cc:	d016      	beq.n	1f0fc <LorawanAddMcastNwkskey+0x3c>
   1f0ce:	253c      	movs	r5, #60	; 0x3c
   1f0d0:	434d      	muls	r5, r1
   1f0d2:	0028      	movs	r0, r5
   1f0d4:	4c0a      	ldr	r4, [pc, #40]	; (1f100 <LorawanAddMcastNwkskey+0x40>)
   1f0d6:	3035      	adds	r0, #53	; 0x35
   1f0d8:	30ff      	adds	r0, #255	; 0xff
   1f0da:	2210      	movs	r2, #16
   1f0dc:	1900      	adds	r0, r0, r4
   1f0de:	0031      	movs	r1, r6
   1f0e0:	4b08      	ldr	r3, [pc, #32]	; (1f104 <LorawanAddMcastNwkskey+0x44>)
   1f0e2:	4798      	blx	r3
   1f0e4:	4b08      	ldr	r3, [pc, #32]	; (1f108 <LorawanAddMcastNwkskey+0x48>)
   1f0e6:	2108      	movs	r1, #8
   1f0e8:	2000      	movs	r0, #0
   1f0ea:	4798      	blx	r3
   1f0ec:	2302      	movs	r3, #2
   1f0ee:	2008      	movs	r0, #8
   1f0f0:	1964      	adds	r4, r4, r5
   1f0f2:	3459      	adds	r4, #89	; 0x59
   1f0f4:	34ff      	adds	r4, #255	; 0xff
   1f0f6:	7a22      	ldrb	r2, [r4, #8]
   1f0f8:	4313      	orrs	r3, r2
   1f0fa:	7223      	strb	r3, [r4, #8]
   1f0fc:	bd70      	pop	{r4, r5, r6, pc}
   1f0fe:	46c0      	nop			; (mov r8, r8)
   1f100:	20001bd0 	.word	0x20001bd0
   1f104:	00024149 	.word	0x00024149
   1f108:	00013b45 	.word	0x00013b45

0001f10c <LorawanAddMcastFcntMin>:
   1f10c:	220a      	movs	r2, #10
   1f10e:	2903      	cmp	r1, #3
   1f110:	d807      	bhi.n	1f122 <LorawanAddMcastFcntMin+0x16>
   1f112:	233c      	movs	r3, #60	; 0x3c
   1f114:	434b      	muls	r3, r1
   1f116:	4904      	ldr	r1, [pc, #16]	; (1f128 <LorawanAddMcastFcntMin+0x1c>)
   1f118:	3a02      	subs	r2, #2
   1f11a:	18c9      	adds	r1, r1, r3
   1f11c:	31fc      	adds	r1, #252	; 0xfc
   1f11e:	65c8      	str	r0, [r1, #92]	; 0x5c
   1f120:	6588      	str	r0, [r1, #88]	; 0x58
   1f122:	0010      	movs	r0, r2
   1f124:	4770      	bx	lr
   1f126:	46c0      	nop			; (mov r8, r8)
   1f128:	20001bd0 	.word	0x20001bd0

0001f12c <LorawanAddMcastFcntMax>:
   1f12c:	220a      	movs	r2, #10
   1f12e:	2903      	cmp	r1, #3
   1f130:	d806      	bhi.n	1f140 <LorawanAddMcastFcntMax+0x14>
   1f132:	233c      	movs	r3, #60	; 0x3c
   1f134:	434b      	muls	r3, r1
   1f136:	4903      	ldr	r1, [pc, #12]	; (1f144 <LorawanAddMcastFcntMax+0x18>)
   1f138:	3a02      	subs	r2, #2
   1f13a:	18c9      	adds	r1, r1, r3
   1f13c:	31fc      	adds	r1, #252	; 0xfc
   1f13e:	6608      	str	r0, [r1, #96]	; 0x60
   1f140:	0010      	movs	r0, r2
   1f142:	4770      	bx	lr
   1f144:	20001bd0 	.word	0x20001bd0

0001f148 <LorawanAddMcastDlFrequency>:
   1f148:	b513      	push	{r0, r1, r4, lr}
   1f14a:	000c      	movs	r4, r1
   1f14c:	9001      	str	r0, [sp, #4]
   1f14e:	2903      	cmp	r1, #3
   1f150:	d901      	bls.n	1f156 <LorawanAddMcastDlFrequency+0xe>
   1f152:	200a      	movs	r0, #10
   1f154:	bd16      	pop	{r1, r2, r4, pc}
   1f156:	a901      	add	r1, sp, #4
   1f158:	2001      	movs	r0, #1
   1f15a:	4b0a      	ldr	r3, [pc, #40]	; (1f184 <LorawanAddMcastDlFrequency+0x3c>)
   1f15c:	4798      	blx	r3
   1f15e:	2808      	cmp	r0, #8
   1f160:	d1f7      	bne.n	1f152 <LorawanAddMcastDlFrequency+0xa>
   1f162:	213c      	movs	r1, #60	; 0x3c
   1f164:	4361      	muls	r1, r4
   1f166:	4b08      	ldr	r3, [pc, #32]	; (1f188 <LorawanAddMcastDlFrequency+0x40>)
   1f168:	9a01      	ldr	r2, [sp, #4]
   1f16a:	1859      	adds	r1, r3, r1
   1f16c:	31fc      	adds	r1, #252	; 0xfc
   1f16e:	336f      	adds	r3, #111	; 0x6f
   1f170:	668a      	str	r2, [r1, #104]	; 0x68
   1f172:	0a11      	lsrs	r1, r2, #8
   1f174:	701a      	strb	r2, [r3, #0]
   1f176:	7059      	strb	r1, [r3, #1]
   1f178:	0c11      	lsrs	r1, r2, #16
   1f17a:	0e12      	lsrs	r2, r2, #24
   1f17c:	7099      	strb	r1, [r3, #2]
   1f17e:	70da      	strb	r2, [r3, #3]
   1f180:	e7e8      	b.n	1f154 <LorawanAddMcastDlFrequency+0xc>
   1f182:	46c0      	nop			; (mov r8, r8)
   1f184:	0000d5ed 	.word	0x0000d5ed
   1f188:	20001bd0 	.word	0x20001bd0

0001f18c <LorawanAddMcastDatarate>:
   1f18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f18e:	466b      	mov	r3, sp
   1f190:	1ddd      	adds	r5, r3, #7
   1f192:	000c      	movs	r4, r1
   1f194:	7028      	strb	r0, [r5, #0]
   1f196:	2903      	cmp	r1, #3
   1f198:	d901      	bls.n	1f19e <LorawanAddMcastDatarate+0x12>
   1f19a:	200a      	movs	r0, #10
   1f19c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1f19e:	0029      	movs	r1, r5
   1f1a0:	200f      	movs	r0, #15
   1f1a2:	4b07      	ldr	r3, [pc, #28]	; (1f1c0 <LorawanAddMcastDatarate+0x34>)
   1f1a4:	4798      	blx	r3
   1f1a6:	2808      	cmp	r0, #8
   1f1a8:	d1f7      	bne.n	1f19a <LorawanAddMcastDatarate+0xe>
   1f1aa:	213c      	movs	r1, #60	; 0x3c
   1f1ac:	4361      	muls	r1, r4
   1f1ae:	4b05      	ldr	r3, [pc, #20]	; (1f1c4 <LorawanAddMcastDatarate+0x38>)
   1f1b0:	782a      	ldrb	r2, [r5, #0]
   1f1b2:	1859      	adds	r1, r3, r1
   1f1b4:	3169      	adds	r1, #105	; 0x69
   1f1b6:	31ff      	adds	r1, #255	; 0xff
   1f1b8:	3373      	adds	r3, #115	; 0x73
   1f1ba:	700a      	strb	r2, [r1, #0]
   1f1bc:	701a      	strb	r2, [r3, #0]
   1f1be:	e7ed      	b.n	1f19c <LorawanAddMcastDatarate+0x10>
   1f1c0:	0000d5ed 	.word	0x0000d5ed
   1f1c4:	20001bd0 	.word	0x20001bd0

0001f1c8 <LorawanAddMcastPeriodicity>:
   1f1c8:	220a      	movs	r2, #10
   1f1ca:	2903      	cmp	r1, #3
   1f1cc:	d809      	bhi.n	1f1e2 <LorawanAddMcastPeriodicity+0x1a>
   1f1ce:	2807      	cmp	r0, #7
   1f1d0:	d807      	bhi.n	1f1e2 <LorawanAddMcastPeriodicity+0x1a>
   1f1d2:	233c      	movs	r3, #60	; 0x3c
   1f1d4:	434b      	muls	r3, r1
   1f1d6:	4904      	ldr	r1, [pc, #16]	; (1f1e8 <LorawanAddMcastPeriodicity+0x20>)
   1f1d8:	3a02      	subs	r2, #2
   1f1da:	18c9      	adds	r1, r1, r3
   1f1dc:	316a      	adds	r1, #106	; 0x6a
   1f1de:	31ff      	adds	r1, #255	; 0xff
   1f1e0:	7008      	strb	r0, [r1, #0]
   1f1e2:	0010      	movs	r0, r2
   1f1e4:	4770      	bx	lr
   1f1e6:	46c0      	nop			; (mov r8, r8)
   1f1e8:	20001bd0 	.word	0x20001bd0

0001f1ec <Lorawan_Pds_fid1_CB>:
   1f1ec:	4770      	bx	lr
	...

0001f1f0 <Lorawan_Pds_fid2_CB>:
   1f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f1f2:	4c1a      	ldr	r4, [pc, #104]	; (1f25c <Lorawan_Pds_fid2_CB+0x6c>)
   1f1f4:	2271      	movs	r2, #113	; 0x71
   1f1f6:	0025      	movs	r5, r4
   1f1f8:	2701      	movs	r7, #1
   1f1fa:	3584      	adds	r5, #132	; 0x84
   1f1fc:	782b      	ldrb	r3, [r5, #0]
   1f1fe:	4013      	ands	r3, r2
   1f200:	702b      	strb	r3, [r5, #0]
   1f202:	786b      	ldrb	r3, [r5, #1]
   1f204:	43bb      	bics	r3, r7
   1f206:	706b      	strb	r3, [r5, #1]
   1f208:	4b15      	ldr	r3, [pc, #84]	; (1f260 <Lorawan_Pds_fid2_CB+0x70>)
   1f20a:	5ce3      	ldrb	r3, [r4, r3]
   1f20c:	2b00      	cmp	r3, #0
   1f20e:	d018      	beq.n	1f242 <Lorawan_Pds_fid2_CB+0x52>
   1f210:	4914      	ldr	r1, [pc, #80]	; (1f264 <Lorawan_Pds_fid2_CB+0x74>)
   1f212:	2006      	movs	r0, #6
   1f214:	4e14      	ldr	r6, [pc, #80]	; (1f268 <Lorawan_Pds_fid2_CB+0x78>)
   1f216:	47b0      	blx	r6
   1f218:	2800      	cmp	r0, #0
   1f21a:	d002      	beq.n	1f222 <Lorawan_Pds_fid2_CB+0x32>
   1f21c:	782b      	ldrb	r3, [r5, #0]
   1f21e:	43bb      	bics	r3, r7
   1f220:	702b      	strb	r3, [r5, #0]
   1f222:	0023      	movs	r3, r4
   1f224:	2501      	movs	r5, #1
   1f226:	3384      	adds	r3, #132	; 0x84
   1f228:	781b      	ldrb	r3, [r3, #0]
   1f22a:	422b      	tst	r3, r5
   1f22c:	d008      	beq.n	1f240 <Lorawan_Pds_fid2_CB+0x50>
   1f22e:	7823      	ldrb	r3, [r4, #0]
   1f230:	2b00      	cmp	r3, #0
   1f232:	d106      	bne.n	1f242 <Lorawan_Pds_fid2_CB+0x52>
   1f234:	490d      	ldr	r1, [pc, #52]	; (1f26c <Lorawan_Pds_fid2_CB+0x7c>)
   1f236:	2002      	movs	r0, #2
   1f238:	47b0      	blx	r6
   1f23a:	490d      	ldr	r1, [pc, #52]	; (1f270 <Lorawan_Pds_fid2_CB+0x80>)
   1f23c:	0028      	movs	r0, r5
   1f23e:	47b0      	blx	r6
   1f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f242:	0020      	movs	r0, r4
   1f244:	0021      	movs	r1, r4
   1f246:	2210      	movs	r2, #16
   1f248:	3115      	adds	r1, #21
   1f24a:	4d0a      	ldr	r5, [pc, #40]	; (1f274 <Lorawan_Pds_fid2_CB+0x84>)
   1f24c:	3035      	adds	r0, #53	; 0x35
   1f24e:	47a8      	blx	r5
   1f250:	0020      	movs	r0, r4
   1f252:	1d61      	adds	r1, r4, #5
   1f254:	2210      	movs	r2, #16
   1f256:	3025      	adds	r0, #37	; 0x25
   1f258:	47a8      	blx	r5
   1f25a:	e7f1      	b.n	1f240 <Lorawan_Pds_fid2_CB+0x50>
   1f25c:	20001bd0 	.word	0x20001bd0
   1f260:	0000022d 	.word	0x0000022d
   1f264:	20001c25 	.word	0x20001c25
   1f268:	00013389 	.word	0x00013389
   1f26c:	20001bf5 	.word	0x20001bf5
   1f270:	20001c05 	.word	0x20001c05
   1f274:	00024149 	.word	0x00024149

0001f278 <LORAWAN_TxHandler>:
   1f278:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f27a:	b087      	sub	sp, #28
   1f27c:	466b      	mov	r3, sp
   1f27e:	2501      	movs	r5, #1
   1f280:	4c2f      	ldr	r4, [pc, #188]	; (1f340 <LORAWAN_TxHandler+0xc8>)
   1f282:	701d      	strb	r5, [r3, #0]
   1f284:	0023      	movs	r3, r4
   1f286:	466a      	mov	r2, sp
   1f288:	33e9      	adds	r3, #233	; 0xe9
   1f28a:	781b      	ldrb	r3, [r3, #0]
   1f28c:	4669      	mov	r1, sp
   1f28e:	7053      	strb	r3, [r2, #1]
   1f290:	0023      	movs	r3, r4
   1f292:	33e7      	adds	r3, #231	; 0xe7
   1f294:	781b      	ldrb	r3, [r3, #0]
   1f296:	202e      	movs	r0, #46	; 0x2e
   1f298:	7093      	strb	r3, [r2, #2]
   1f29a:	aa03      	add	r2, sp, #12
   1f29c:	4b29      	ldr	r3, [pc, #164]	; (1f344 <LORAWAN_TxHandler+0xcc>)
   1f29e:	4798      	blx	r3
   1f2a0:	2808      	cmp	r0, #8
   1f2a2:	d004      	beq.n	1f2ae <LORAWAN_TxHandler+0x36>
   1f2a4:	4b28      	ldr	r3, [pc, #160]	; (1f348 <LORAWAN_TxHandler+0xd0>)
   1f2a6:	4798      	blx	r3
   1f2a8:	2000      	movs	r0, #0
   1f2aa:	b007      	add	sp, #28
   1f2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2ae:	0023      	movs	r3, r4
   1f2b0:	33fd      	adds	r3, #253	; 0xfd
   1f2b2:	781b      	ldrb	r3, [r3, #0]
   1f2b4:	ae01      	add	r6, sp, #4
   1f2b6:	2b04      	cmp	r3, #4
   1f2b8:	d103      	bne.n	1f2c2 <LORAWAN_TxHandler+0x4a>
   1f2ba:	0030      	movs	r0, r6
   1f2bc:	4b23      	ldr	r3, [pc, #140]	; (1f34c <LORAWAN_TxHandler+0xd4>)
   1f2be:	7035      	strb	r5, [r6, #0]
   1f2c0:	4798      	blx	r3
   1f2c2:	4b23      	ldr	r3, [pc, #140]	; (1f350 <LORAWAN_TxHandler+0xd8>)
   1f2c4:	9803      	ldr	r0, [sp, #12]
   1f2c6:	9904      	ldr	r1, [sp, #16]
   1f2c8:	9a05      	ldr	r2, [sp, #20]
   1f2ca:	4798      	blx	r3
   1f2cc:	0023      	movs	r3, r4
   1f2ce:	33fc      	adds	r3, #252	; 0xfc
   1f2d0:	68dd      	ldr	r5, [r3, #12]
   1f2d2:	4f20      	ldr	r7, [pc, #128]	; (1f354 <LORAWAN_TxHandler+0xdc>)
   1f2d4:	4b20      	ldr	r3, [pc, #128]	; (1f358 <LORAWAN_TxHandler+0xe0>)
   1f2d6:	2d00      	cmp	r5, #0
   1f2d8:	d023      	beq.n	1f322 <LORAWAN_TxHandler+0xaa>
   1f2da:	2201      	movs	r2, #1
   1f2dc:	54e2      	strb	r2, [r4, r3]
   1f2de:	7828      	ldrb	r0, [r5, #0]
   1f2e0:	7a2b      	ldrb	r3, [r5, #8]
   1f2e2:	1e42      	subs	r2, r0, #1
   1f2e4:	4190      	sbcs	r0, r2
   1f2e6:	7869      	ldrb	r1, [r5, #1]
   1f2e8:	686a      	ldr	r2, [r5, #4]
   1f2ea:	b2c0      	uxtb	r0, r0
   1f2ec:	47b8      	blx	r7
   1f2ee:	0023      	movs	r3, r4
   1f2f0:	33ce      	adds	r3, #206	; 0xce
   1f2f2:	881b      	ldrh	r3, [r3, #0]
   1f2f4:	0030      	movs	r0, r6
   1f2f6:	7033      	strb	r3, [r6, #0]
   1f2f8:	4b18      	ldr	r3, [pc, #96]	; (1f35c <LORAWAN_TxHandler+0xe4>)
   1f2fa:	6073      	str	r3, [r6, #4]
   1f2fc:	4b18      	ldr	r3, [pc, #96]	; (1f360 <LORAWAN_TxHandler+0xe8>)
   1f2fe:	4798      	blx	r3
   1f300:	2800      	cmp	r0, #0
   1f302:	d114      	bne.n	1f32e <LORAWAN_TxHandler+0xb6>
   1f304:	0021      	movs	r1, r4
   1f306:	220e      	movs	r2, #14
   1f308:	3184      	adds	r1, #132	; 0x84
   1f30a:	780b      	ldrb	r3, [r1, #0]
   1f30c:	4393      	bics	r3, r2
   1f30e:	001a      	movs	r2, r3
   1f310:	2302      	movs	r3, #2
   1f312:	4313      	orrs	r3, r2
   1f314:	700b      	strb	r3, [r1, #0]
   1f316:	2208      	movs	r2, #8
   1f318:	3494      	adds	r4, #148	; 0x94
   1f31a:	7823      	ldrb	r3, [r4, #0]
   1f31c:	4393      	bics	r3, r2
   1f31e:	7023      	strb	r3, [r4, #0]
   1f320:	e7c2      	b.n	1f2a8 <LORAWAN_TxHandler+0x30>
   1f322:	54e5      	strb	r5, [r4, r3]
   1f324:	002a      	movs	r2, r5
   1f326:	002b      	movs	r3, r5
   1f328:	0029      	movs	r1, r5
   1f32a:	0028      	movs	r0, r5
   1f32c:	e7de      	b.n	1f2ec <LORAWAN_TxHandler+0x74>
   1f32e:	0022      	movs	r2, r4
   1f330:	2120      	movs	r1, #32
   1f332:	3294      	adds	r2, #148	; 0x94
   1f334:	7813      	ldrb	r3, [r2, #0]
   1f336:	438b      	bics	r3, r1
   1f338:	7013      	strb	r3, [r2, #0]
   1f33a:	4b03      	ldr	r3, [pc, #12]	; (1f348 <LORAWAN_TxHandler+0xd0>)
   1f33c:	4798      	blx	r3
   1f33e:	e7ea      	b.n	1f316 <LORAWAN_TxHandler+0x9e>
   1f340:	20001bd0 	.word	0x20001bd0
   1f344:	0000d595 	.word	0x0000d595
   1f348:	0001bd55 	.word	0x0001bd55
   1f34c:	00020895 	.word	0x00020895
   1f350:	0001b7bd 	.word	0x0001b7bd
   1f354:	0001e769 	.word	0x0001e769
   1f358:	0000022a 	.word	0x0000022a
   1f35c:	20001e29 	.word	0x20001e29
   1f360:	0001ff11 	.word	0x0001ff11

0001f364 <LORAWAN_JoinReqHandler>:
   1f364:	b530      	push	{r4, r5, lr}
   1f366:	b087      	sub	sp, #28
   1f368:	466a      	mov	r2, sp
   1f36a:	2300      	movs	r3, #0
   1f36c:	4c25      	ldr	r4, [pc, #148]	; (1f404 <LORAWAN_JoinReqHandler+0xa0>)
   1f36e:	7013      	strb	r3, [r2, #0]
   1f370:	0023      	movs	r3, r4
   1f372:	33e9      	adds	r3, #233	; 0xe9
   1f374:	781b      	ldrb	r3, [r3, #0]
   1f376:	7053      	strb	r3, [r2, #1]
   1f378:	0023      	movs	r3, r4
   1f37a:	33e7      	adds	r3, #231	; 0xe7
   1f37c:	781b      	ldrb	r3, [r3, #0]
   1f37e:	7093      	strb	r3, [r2, #2]
   1f380:	0023      	movs	r3, r4
   1f382:	33ff      	adds	r3, #255	; 0xff
   1f384:	7f5b      	ldrb	r3, [r3, #29]
   1f386:	069b      	lsls	r3, r3, #26
   1f388:	d507      	bpl.n	1f39a <LORAWAN_JoinReqHandler+0x36>
   1f38a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f38c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1f38e:	4313      	orrs	r3, r2
   1f390:	d103      	bne.n	1f39a <LORAWAN_JoinReqHandler+0x36>
   1f392:	0023      	movs	r3, r4
   1f394:	2201      	movs	r2, #1
   1f396:	3380      	adds	r3, #128	; 0x80
   1f398:	701a      	strb	r2, [r3, #0]
   1f39a:	aa03      	add	r2, sp, #12
   1f39c:	4669      	mov	r1, sp
   1f39e:	202e      	movs	r0, #46	; 0x2e
   1f3a0:	4b19      	ldr	r3, [pc, #100]	; (1f408 <LORAWAN_JoinReqHandler+0xa4>)
   1f3a2:	4798      	blx	r3
   1f3a4:	2808      	cmp	r0, #8
   1f3a6:	d004      	beq.n	1f3b2 <LORAWAN_JoinReqHandler+0x4e>
   1f3a8:	4b18      	ldr	r3, [pc, #96]	; (1f40c <LORAWAN_JoinReqHandler+0xa8>)
   1f3aa:	4798      	blx	r3
   1f3ac:	2000      	movs	r0, #0
   1f3ae:	b007      	add	sp, #28
   1f3b0:	bd30      	pop	{r4, r5, pc}
   1f3b2:	4b17      	ldr	r3, [pc, #92]	; (1f410 <LORAWAN_JoinReqHandler+0xac>)
   1f3b4:	9803      	ldr	r0, [sp, #12]
   1f3b6:	9904      	ldr	r1, [sp, #16]
   1f3b8:	9a05      	ldr	r2, [sp, #20]
   1f3ba:	4798      	blx	r3
   1f3bc:	0023      	movs	r3, r4
   1f3be:	33fd      	adds	r3, #253	; 0xfd
   1f3c0:	781b      	ldrb	r3, [r3, #0]
   1f3c2:	ad01      	add	r5, sp, #4
   1f3c4:	2b04      	cmp	r3, #4
   1f3c6:	d104      	bne.n	1f3d2 <LORAWAN_JoinReqHandler+0x6e>
   1f3c8:	3b03      	subs	r3, #3
   1f3ca:	702b      	strb	r3, [r5, #0]
   1f3cc:	0028      	movs	r0, r5
   1f3ce:	4b11      	ldr	r3, [pc, #68]	; (1f414 <LORAWAN_JoinReqHandler+0xb0>)
   1f3d0:	4798      	blx	r3
   1f3d2:	2200      	movs	r2, #0
   1f3d4:	4b10      	ldr	r3, [pc, #64]	; (1f418 <LORAWAN_JoinReqHandler+0xb4>)
   1f3d6:	54e2      	strb	r2, [r4, r3]
   1f3d8:	4b10      	ldr	r3, [pc, #64]	; (1f41c <LORAWAN_JoinReqHandler+0xb8>)
   1f3da:	4798      	blx	r3
   1f3dc:	4b10      	ldr	r3, [pc, #64]	; (1f420 <LORAWAN_JoinReqHandler+0xbc>)
   1f3de:	7028      	strb	r0, [r5, #0]
   1f3e0:	606b      	str	r3, [r5, #4]
   1f3e2:	0028      	movs	r0, r5
   1f3e4:	4b0f      	ldr	r3, [pc, #60]	; (1f424 <LORAWAN_JoinReqHandler+0xc0>)
   1f3e6:	4798      	blx	r3
   1f3e8:	2800      	cmp	r0, #0
   1f3ea:	d001      	beq.n	1f3f0 <LORAWAN_JoinReqHandler+0x8c>
   1f3ec:	201b      	movs	r0, #27
   1f3ee:	e7db      	b.n	1f3a8 <LORAWAN_JoinReqHandler+0x44>
   1f3f0:	220e      	movs	r2, #14
   1f3f2:	3484      	adds	r4, #132	; 0x84
   1f3f4:	7823      	ldrb	r3, [r4, #0]
   1f3f6:	4393      	bics	r3, r2
   1f3f8:	001a      	movs	r2, r3
   1f3fa:	2302      	movs	r3, #2
   1f3fc:	4313      	orrs	r3, r2
   1f3fe:	7023      	strb	r3, [r4, #0]
   1f400:	e7d4      	b.n	1f3ac <LORAWAN_JoinReqHandler+0x48>
   1f402:	46c0      	nop			; (mov r8, r8)
   1f404:	20001bd0 	.word	0x20001bd0
   1f408:	0000d595 	.word	0x0000d595
   1f40c:	0001b209 	.word	0x0001b209
   1f410:	0001b7bd 	.word	0x0001b7bd
   1f414:	00020895 	.word	0x00020895
   1f418:	0000022a 	.word	0x0000022a
   1f41c:	0001b605 	.word	0x0001b605
   1f420:	20001e19 	.word	0x20001e19
   1f424:	0001ff11 	.word	0x0001ff11

0001f428 <LORAWAN_RxHandler>:
   1f428:	b513      	push	{r0, r1, r4, lr}
   1f42a:	4b0c      	ldr	r3, [pc, #48]	; (1f45c <LORAWAN_RxHandler+0x34>)
   1f42c:	781b      	ldrb	r3, [r3, #0]
   1f42e:	2b08      	cmp	r3, #8
   1f430:	d011      	beq.n	1f456 <LORAWAN_RxHandler+0x2e>
   1f432:	2b10      	cmp	r3, #16
   1f434:	d001      	beq.n	1f43a <LORAWAN_RxHandler+0x12>
   1f436:	2b01      	cmp	r3, #1
   1f438:	d10b      	bne.n	1f452 <LORAWAN_RxHandler+0x2a>
   1f43a:	466b      	mov	r3, sp
   1f43c:	1c9c      	adds	r4, r3, #2
   1f43e:	0021      	movs	r1, r4
   1f440:	a801      	add	r0, sp, #4
   1f442:	4b07      	ldr	r3, [pc, #28]	; (1f460 <LORAWAN_RxHandler+0x38>)
   1f444:	4798      	blx	r3
   1f446:	9801      	ldr	r0, [sp, #4]
   1f448:	2800      	cmp	r0, #0
   1f44a:	d002      	beq.n	1f452 <LORAWAN_RxHandler+0x2a>
   1f44c:	7821      	ldrb	r1, [r4, #0]
   1f44e:	4b05      	ldr	r3, [pc, #20]	; (1f464 <LORAWAN_RxHandler+0x3c>)
   1f450:	4798      	blx	r3
   1f452:	2000      	movs	r0, #0
   1f454:	bd16      	pop	{r1, r2, r4, pc}
   1f456:	4b04      	ldr	r3, [pc, #16]	; (1f468 <LORAWAN_RxHandler+0x40>)
   1f458:	4798      	blx	r3
   1f45a:	e7fa      	b.n	1f452 <LORAWAN_RxHandler+0x2a>
   1f45c:	20001e18 	.word	0x20001e18
   1f460:	000200dd 	.word	0x000200dd
   1f464:	0001d405 	.word	0x0001d405
   1f468:	0001cc81 	.word	0x0001cc81

0001f46c <LORAWAN_PostTask>:
   1f46c:	b510      	push	{r4, lr}
   1f46e:	4b08      	ldr	r3, [pc, #32]	; (1f490 <LORAWAN_PostTask+0x24>)
   1f470:	0004      	movs	r4, r0
   1f472:	4798      	blx	r3
   1f474:	2201      	movs	r2, #1
   1f476:	40a2      	lsls	r2, r4
   1f478:	4906      	ldr	r1, [pc, #24]	; (1f494 <LORAWAN_PostTask+0x28>)
   1f47a:	780b      	ldrb	r3, [r1, #0]
   1f47c:	4313      	orrs	r3, r2
   1f47e:	b2db      	uxtb	r3, r3
   1f480:	700b      	strb	r3, [r1, #0]
   1f482:	4b05      	ldr	r3, [pc, #20]	; (1f498 <LORAWAN_PostTask+0x2c>)
   1f484:	4798      	blx	r3
   1f486:	2004      	movs	r0, #4
   1f488:	4b04      	ldr	r3, [pc, #16]	; (1f49c <LORAWAN_PostTask+0x30>)
   1f48a:	4798      	blx	r3
   1f48c:	bd10      	pop	{r4, pc}
   1f48e:	46c0      	nop			; (mov r8, r8)
   1f490:	000076e1 	.word	0x000076e1
   1f494:	20001174 	.word	0x20001174
   1f498:	000076f5 	.word	0x000076f5
   1f49c:	000162bd 	.word	0x000162bd

0001f4a0 <LORAWAN_TaskHandler>:
   1f4a0:	b570      	push	{r4, r5, r6, lr}
   1f4a2:	2601      	movs	r6, #1
   1f4a4:	4d0e      	ldr	r5, [pc, #56]	; (1f4e0 <LORAWAN_TaskHandler+0x40>)
   1f4a6:	e015      	b.n	1f4d4 <LORAWAN_TaskHandler+0x34>
   1f4a8:	2400      	movs	r4, #0
   1f4aa:	782b      	ldrb	r3, [r5, #0]
   1f4ac:	4123      	asrs	r3, r4
   1f4ae:	4233      	tst	r3, r6
   1f4b0:	d00d      	beq.n	1f4ce <LORAWAN_TaskHandler+0x2e>
   1f4b2:	4b0c      	ldr	r3, [pc, #48]	; (1f4e4 <LORAWAN_TaskHandler+0x44>)
   1f4b4:	4798      	blx	r3
   1f4b6:	0032      	movs	r2, r6
   1f4b8:	40a2      	lsls	r2, r4
   1f4ba:	782b      	ldrb	r3, [r5, #0]
   1f4bc:	00a4      	lsls	r4, r4, #2
   1f4be:	4393      	bics	r3, r2
   1f4c0:	702b      	strb	r3, [r5, #0]
   1f4c2:	4b09      	ldr	r3, [pc, #36]	; (1f4e8 <LORAWAN_TaskHandler+0x48>)
   1f4c4:	4798      	blx	r3
   1f4c6:	4b09      	ldr	r3, [pc, #36]	; (1f4ec <LORAWAN_TaskHandler+0x4c>)
   1f4c8:	58e3      	ldr	r3, [r4, r3]
   1f4ca:	4798      	blx	r3
   1f4cc:	e7ea      	b.n	1f4a4 <LORAWAN_TaskHandler+0x4>
   1f4ce:	3401      	adds	r4, #1
   1f4d0:	2c03      	cmp	r4, #3
   1f4d2:	d1ea      	bne.n	1f4aa <LORAWAN_TaskHandler+0xa>
   1f4d4:	7828      	ldrb	r0, [r5, #0]
   1f4d6:	b2c0      	uxtb	r0, r0
   1f4d8:	2800      	cmp	r0, #0
   1f4da:	d1e5      	bne.n	1f4a8 <LORAWAN_TaskHandler+0x8>
   1f4dc:	bd70      	pop	{r4, r5, r6, pc}
   1f4de:	46c0      	nop			; (mov r8, r8)
   1f4e0:	20001174 	.word	0x20001174
   1f4e4:	000076e1 	.word	0x000076e1
   1f4e8:	000076f5 	.word	0x000076f5
   1f4ec:	0002cdfc 	.word	0x0002cdfc

0001f4f0 <RADIO_GetAttr>:
   1f4f0:	b510      	push	{r4, lr}
   1f4f2:	000b      	movs	r3, r1
   1f4f4:	281f      	cmp	r0, #31
   1f4f6:	d900      	bls.n	1f4fa <RADIO_GetAttr+0xa>
   1f4f8:	e069      	b.n	1f5ce <RADIO_GetAttr+0xde>
   1f4fa:	f001 fd97 	bl	2102c <__gnu_thumb1_case_uqi>
   1f4fe:	1410      	.short	0x1410
   1f500:	68201c19 	.word	0x68201c19
   1f504:	312e2a27 	.word	0x312e2a27
   1f508:	3d3a3734 	.word	0x3d3a3734
   1f50c:	46434054 	.word	0x46434054
   1f510:	68245149 	.word	0x68245149
   1f514:	68686859 	.word	0x68686859
   1f518:	5c686817 	.word	0x5c686817
   1f51c:	6360      	.short	0x6360
   1f51e:	4a2d      	ldr	r2, [pc, #180]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f520:	7e12      	ldrb	r2, [r2, #24]
   1f522:	701a      	strb	r2, [r3, #0]
   1f524:	e002      	b.n	1f52c <RADIO_GetAttr+0x3c>
   1f526:	4a2b      	ldr	r2, [pc, #172]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f528:	6812      	ldr	r2, [r2, #0]
   1f52a:	601a      	str	r2, [r3, #0]
   1f52c:	2000      	movs	r0, #0
   1f52e:	bd10      	pop	{r4, pc}
   1f530:	4a28      	ldr	r2, [pc, #160]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f532:	6852      	ldr	r2, [r2, #4]
   1f534:	e7f9      	b.n	1f52a <RADIO_GetAttr+0x3a>
   1f536:	4a27      	ldr	r2, [pc, #156]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f538:	8a92      	ldrh	r2, [r2, #20]
   1f53a:	801a      	strh	r2, [r3, #0]
   1f53c:	e7f6      	b.n	1f52c <RADIO_GetAttr+0x3c>
   1f53e:	4a25      	ldr	r2, [pc, #148]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f540:	3203      	adds	r2, #3
   1f542:	7fd2      	ldrb	r2, [r2, #31]
   1f544:	e7ed      	b.n	1f522 <RADIO_GetAttr+0x32>
   1f546:	4a23      	ldr	r2, [pc, #140]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f548:	3204      	adds	r2, #4
   1f54a:	e7fa      	b.n	1f542 <RADIO_GetAttr+0x52>
   1f54c:	4a21      	ldr	r2, [pc, #132]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f54e:	3206      	adds	r2, #6
   1f550:	e7f7      	b.n	1f542 <RADIO_GetAttr+0x52>
   1f552:	4a20      	ldr	r2, [pc, #128]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f554:	3236      	adds	r2, #54	; 0x36
   1f556:	7812      	ldrb	r2, [r2, #0]
   1f558:	e7e3      	b.n	1f522 <RADIO_GetAttr+0x32>
   1f55a:	4a1e      	ldr	r2, [pc, #120]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f55c:	3205      	adds	r2, #5
   1f55e:	e7f0      	b.n	1f542 <RADIO_GetAttr+0x52>
   1f560:	4a1c      	ldr	r2, [pc, #112]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f562:	3234      	adds	r2, #52	; 0x34
   1f564:	e7f7      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f566:	4a1b      	ldr	r2, [pc, #108]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f568:	8ad2      	ldrh	r2, [r2, #22]
   1f56a:	e7e6      	b.n	1f53a <RADIO_GetAttr+0x4a>
   1f56c:	4a19      	ldr	r2, [pc, #100]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f56e:	3233      	adds	r2, #51	; 0x33
   1f570:	e7f1      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f572:	4a18      	ldr	r2, [pc, #96]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f574:	68d2      	ldr	r2, [r2, #12]
   1f576:	e7d8      	b.n	1f52a <RADIO_GetAttr+0x3a>
   1f578:	4a16      	ldr	r2, [pc, #88]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f57a:	6892      	ldr	r2, [r2, #8]
   1f57c:	e7d5      	b.n	1f52a <RADIO_GetAttr+0x3a>
   1f57e:	4a15      	ldr	r2, [pc, #84]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f580:	3237      	adds	r2, #55	; 0x37
   1f582:	e7e8      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f584:	4a13      	ldr	r2, [pc, #76]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f586:	3238      	adds	r2, #56	; 0x38
   1f588:	e7e5      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f58a:	4a12      	ldr	r2, [pc, #72]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f58c:	3239      	adds	r2, #57	; 0x39
   1f58e:	e7e2      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f590:	4a10      	ldr	r2, [pc, #64]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f592:	4911      	ldr	r1, [pc, #68]	; (1f5d8 <RADIO_GetAttr+0xe8>)
   1f594:	3202      	adds	r2, #2
   1f596:	7fd2      	ldrb	r2, [r2, #31]
   1f598:	0018      	movs	r0, r3
   1f59a:	4b10      	ldr	r3, [pc, #64]	; (1f5dc <RADIO_GetAttr+0xec>)
   1f59c:	4798      	blx	r3
   1f59e:	e7c5      	b.n	1f52c <RADIO_GetAttr+0x3c>
   1f5a0:	4a0c      	ldr	r2, [pc, #48]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5a2:	3202      	adds	r2, #2
   1f5a4:	e7cd      	b.n	1f542 <RADIO_GetAttr+0x52>
   1f5a6:	4a0b      	ldr	r2, [pc, #44]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5a8:	3232      	adds	r2, #50	; 0x32
   1f5aa:	7812      	ldrb	r2, [r2, #0]
   1f5ac:	b252      	sxtb	r2, r2
   1f5ae:	e7b8      	b.n	1f522 <RADIO_GetAttr+0x32>
   1f5b0:	4a08      	ldr	r2, [pc, #32]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5b2:	3235      	adds	r2, #53	; 0x35
   1f5b4:	e7cf      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f5b6:	4907      	ldr	r1, [pc, #28]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5b8:	2206      	movs	r2, #6
   1f5ba:	313c      	adds	r1, #60	; 0x3c
   1f5bc:	e7ec      	b.n	1f598 <RADIO_GetAttr+0xa8>
   1f5be:	4a05      	ldr	r2, [pc, #20]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5c0:	3254      	adds	r2, #84	; 0x54
   1f5c2:	e7c8      	b.n	1f556 <RADIO_GetAttr+0x66>
   1f5c4:	4a03      	ldr	r2, [pc, #12]	; (1f5d4 <RADIO_GetAttr+0xe4>)
   1f5c6:	3256      	adds	r2, #86	; 0x56
   1f5c8:	2100      	movs	r1, #0
   1f5ca:	5e52      	ldrsh	r2, [r2, r1]
   1f5cc:	e7b5      	b.n	1f53a <RADIO_GetAttr+0x4a>
   1f5ce:	2005      	movs	r0, #5
   1f5d0:	e7ad      	b.n	1f52e <RADIO_GetAttr+0x3e>
   1f5d2:	46c0      	nop			; (mov r8, r8)
   1f5d4:	20001980 	.word	0x20001980
   1f5d8:	20001999 	.word	0x20001999
   1f5dc:	00024149 	.word	0x00024149

0001f5e0 <RADIO_SetAttr>:
   1f5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f5e2:	4b71      	ldr	r3, [pc, #452]	; (1f7a8 <RADIO_SetAttr+0x1c8>)
   1f5e4:	0004      	movs	r4, r0
   1f5e6:	000d      	movs	r5, r1
   1f5e8:	4798      	blx	r3
   1f5ea:	2304      	movs	r3, #4
   1f5ec:	2801      	cmp	r0, #1
   1f5ee:	d11a      	bne.n	1f626 <RADIO_SetAttr+0x46>
   1f5f0:	2c1d      	cmp	r4, #29
   1f5f2:	d900      	bls.n	1f5f6 <RADIO_SetAttr+0x16>
   1f5f4:	e0d5      	b.n	1f7a2 <RADIO_SetAttr+0x1c2>
   1f5f6:	0020      	movs	r0, r4
   1f5f8:	f001 fd18 	bl	2102c <__gnu_thumb1_case_uqi>
   1f5fc:	605c4844 	.word	0x605c4844
   1f600:	7770d364 	.word	0x7770d364
   1f604:	908c8480 	.word	0x908c8480
   1f608:	a0d39c99 	.word	0xa0d39c99
   1f60c:	c2bab1a8 	.word	0xc2bab1a8
   1f610:	d3cad369 	.word	0xd3cad369
   1f614:	d30fd3d3 	.word	0xd30fd3d3
   1f618:	17d3      	.short	0x17d3
   1f61a:	2303      	movs	r3, #3
   1f61c:	2d00      	cmp	r5, #0
   1f61e:	d002      	beq.n	1f626 <RADIO_SetAttr+0x46>
   1f620:	4b62      	ldr	r3, [pc, #392]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f622:	611d      	str	r5, [r3, #16]
   1f624:	2300      	movs	r3, #0
   1f626:	0018      	movs	r0, r3
   1f628:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f62a:	796c      	ldrb	r4, [r5, #5]
   1f62c:	2c00      	cmp	r4, #0
   1f62e:	d109      	bne.n	1f644 <RADIO_SetAttr+0x64>
   1f630:	4b5e      	ldr	r3, [pc, #376]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f632:	001a      	movs	r2, r3
   1f634:	649c      	str	r4, [r3, #72]	; 0x48
   1f636:	879c      	strh	r4, [r3, #60]	; 0x3c
   1f638:	87dc      	strh	r4, [r3, #62]	; 0x3e
   1f63a:	3240      	adds	r2, #64	; 0x40
   1f63c:	3341      	adds	r3, #65	; 0x41
   1f63e:	7014      	strb	r4, [r2, #0]
   1f640:	701c      	strb	r4, [r3, #0]
   1f642:	e7ef      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f644:	882f      	ldrh	r7, [r5, #0]
   1f646:	2303      	movs	r3, #3
   1f648:	2f00      	cmp	r7, #0
   1f64a:	d0ec      	beq.n	1f626 <RADIO_SetAttr+0x46>
   1f64c:	792e      	ldrb	r6, [r5, #4]
   1f64e:	2e00      	cmp	r6, #0
   1f650:	d0e9      	beq.n	1f626 <RADIO_SetAttr+0x46>
   1f652:	20fa      	movs	r0, #250	; 0xfa
   1f654:	2202      	movs	r2, #2
   1f656:	5eab      	ldrsh	r3, [r5, r2]
   1f658:	0080      	lsls	r0, r0, #2
   1f65a:	0031      	movs	r1, r6
   1f65c:	9301      	str	r3, [sp, #4]
   1f65e:	4378      	muls	r0, r7
   1f660:	4b53      	ldr	r3, [pc, #332]	; (1f7b0 <RADIO_SetAttr+0x1d0>)
   1f662:	4798      	blx	r3
   1f664:	4b53      	ldr	r3, [pc, #332]	; (1f7b4 <RADIO_SetAttr+0x1d4>)
   1f666:	4798      	blx	r3
   1f668:	4b53      	ldr	r3, [pc, #332]	; (1f7b8 <RADIO_SetAttr+0x1d8>)
   1f66a:	4798      	blx	r3
   1f66c:	466b      	mov	r3, sp
   1f66e:	4d4f      	ldr	r5, [pc, #316]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f670:	889b      	ldrh	r3, [r3, #4]
   1f672:	64a8      	str	r0, [r5, #72]	; 0x48
   1f674:	87eb      	strh	r3, [r5, #62]	; 0x3e
   1f676:	002b      	movs	r3, r5
   1f678:	87af      	strh	r7, [r5, #60]	; 0x3c
   1f67a:	3340      	adds	r3, #64	; 0x40
   1f67c:	3541      	adds	r5, #65	; 0x41
   1f67e:	701e      	strb	r6, [r3, #0]
   1f680:	702c      	strb	r4, [r5, #0]
   1f682:	e7cf      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f684:	782a      	ldrb	r2, [r5, #0]
   1f686:	4b49      	ldr	r3, [pc, #292]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f688:	761a      	strb	r2, [r3, #24]
   1f68a:	e7cb      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f68c:	4b4b      	ldr	r3, [pc, #300]	; (1f7bc <RADIO_SetAttr+0x1dc>)
   1f68e:	682a      	ldr	r2, [r5, #0]
   1f690:	18d1      	adds	r1, r2, r3
   1f692:	4b4b      	ldr	r3, [pc, #300]	; (1f7c0 <RADIO_SetAttr+0x1e0>)
   1f694:	4299      	cmp	r1, r3
   1f696:	d90a      	bls.n	1f6ae <RADIO_SetAttr+0xce>
   1f698:	4b4a      	ldr	r3, [pc, #296]	; (1f7c4 <RADIO_SetAttr+0x1e4>)
   1f69a:	494b      	ldr	r1, [pc, #300]	; (1f7c8 <RADIO_SetAttr+0x1e8>)
   1f69c:	18d3      	adds	r3, r2, r3
   1f69e:	428b      	cmp	r3, r1
   1f6a0:	d905      	bls.n	1f6ae <RADIO_SetAttr+0xce>
   1f6a2:	494a      	ldr	r1, [pc, #296]	; (1f7cc <RADIO_SetAttr+0x1ec>)
   1f6a4:	484a      	ldr	r0, [pc, #296]	; (1f7d0 <RADIO_SetAttr+0x1f0>)
   1f6a6:	1851      	adds	r1, r2, r1
   1f6a8:	2305      	movs	r3, #5
   1f6aa:	4281      	cmp	r1, r0
   1f6ac:	d8bb      	bhi.n	1f626 <RADIO_SetAttr+0x46>
   1f6ae:	4b3f      	ldr	r3, [pc, #252]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6b0:	601a      	str	r2, [r3, #0]
   1f6b2:	e7b7      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f6b4:	682a      	ldr	r2, [r5, #0]
   1f6b6:	4b3d      	ldr	r3, [pc, #244]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6b8:	605a      	str	r2, [r3, #4]
   1f6ba:	e7b3      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f6bc:	882a      	ldrh	r2, [r5, #0]
   1f6be:	4b3b      	ldr	r3, [pc, #236]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6c0:	829a      	strh	r2, [r3, #20]
   1f6c2:	e7af      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f6c4:	4b39      	ldr	r3, [pc, #228]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6c6:	782a      	ldrb	r2, [r5, #0]
   1f6c8:	3303      	adds	r3, #3
   1f6ca:	77da      	strb	r2, [r3, #31]
   1f6cc:	e7aa      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f6ce:	782a      	ldrb	r2, [r5, #0]
   1f6d0:	2305      	movs	r3, #5
   1f6d2:	2a01      	cmp	r2, #1
   1f6d4:	d8a7      	bhi.n	1f626 <RADIO_SetAttr+0x46>
   1f6d6:	4b35      	ldr	r3, [pc, #212]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6d8:	3304      	adds	r3, #4
   1f6da:	e7f6      	b.n	1f6ca <RADIO_SetAttr+0xea>
   1f6dc:	782a      	ldrb	r2, [r5, #0]
   1f6de:	2305      	movs	r3, #5
   1f6e0:	2a01      	cmp	r2, #1
   1f6e2:	d8a0      	bhi.n	1f626 <RADIO_SetAttr+0x46>
   1f6e4:	4b31      	ldr	r3, [pc, #196]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6e6:	3306      	adds	r3, #6
   1f6e8:	e7ef      	b.n	1f6ca <RADIO_SetAttr+0xea>
   1f6ea:	782a      	ldrb	r2, [r5, #0]
   1f6ec:	2305      	movs	r3, #5
   1f6ee:	1fd1      	subs	r1, r2, #7
   1f6f0:	2902      	cmp	r1, #2
   1f6f2:	d898      	bhi.n	1f626 <RADIO_SetAttr+0x46>
   1f6f4:	4b2d      	ldr	r3, [pc, #180]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6f6:	3336      	adds	r3, #54	; 0x36
   1f6f8:	701a      	strb	r2, [r3, #0]
   1f6fa:	e793      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f6fc:	4b2b      	ldr	r3, [pc, #172]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f6fe:	782a      	ldrb	r2, [r5, #0]
   1f700:	3305      	adds	r3, #5
   1f702:	e7e2      	b.n	1f6ca <RADIO_SetAttr+0xea>
   1f704:	782a      	ldrb	r2, [r5, #0]
   1f706:	2305      	movs	r3, #5
   1f708:	2a01      	cmp	r2, #1
   1f70a:	d900      	bls.n	1f70e <RADIO_SetAttr+0x12e>
   1f70c:	e78b      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f70e:	4b27      	ldr	r3, [pc, #156]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f710:	3334      	adds	r3, #52	; 0x34
   1f712:	e7f1      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f714:	882a      	ldrh	r2, [r5, #0]
   1f716:	4b25      	ldr	r3, [pc, #148]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f718:	82da      	strh	r2, [r3, #22]
   1f71a:	e783      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f71c:	782a      	ldrb	r2, [r5, #0]
   1f71e:	2305      	movs	r3, #5
   1f720:	1e51      	subs	r1, r2, #1
   1f722:	2903      	cmp	r1, #3
   1f724:	d900      	bls.n	1f728 <RADIO_SetAttr+0x148>
   1f726:	e77e      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f728:	4b20      	ldr	r3, [pc, #128]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f72a:	3333      	adds	r3, #51	; 0x33
   1f72c:	e7e4      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f72e:	4b1f      	ldr	r3, [pc, #124]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f730:	682a      	ldr	r2, [r5, #0]
   1f732:	60da      	str	r2, [r3, #12]
   1f734:	682a      	ldr	r2, [r5, #0]
   1f736:	4b1d      	ldr	r3, [pc, #116]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f738:	609a      	str	r2, [r3, #8]
   1f73a:	e773      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f73c:	782a      	ldrb	r2, [r5, #0]
   1f73e:	2305      	movs	r3, #5
   1f740:	2a03      	cmp	r2, #3
   1f742:	d900      	bls.n	1f746 <RADIO_SetAttr+0x166>
   1f744:	e76f      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f746:	4b19      	ldr	r3, [pc, #100]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f748:	3337      	adds	r3, #55	; 0x37
   1f74a:	e7d5      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f74c:	782a      	ldrb	r2, [r5, #0]
   1f74e:	2305      	movs	r3, #5
   1f750:	1e51      	subs	r1, r2, #1
   1f752:	2916      	cmp	r1, #22
   1f754:	d900      	bls.n	1f758 <RADIO_SetAttr+0x178>
   1f756:	e766      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f758:	4b14      	ldr	r3, [pc, #80]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f75a:	3338      	adds	r3, #56	; 0x38
   1f75c:	e7cc      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f75e:	782a      	ldrb	r2, [r5, #0]
   1f760:	2305      	movs	r3, #5
   1f762:	1e51      	subs	r1, r2, #1
   1f764:	2916      	cmp	r1, #22
   1f766:	d900      	bls.n	1f76a <RADIO_SetAttr+0x18a>
   1f768:	e75d      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f76a:	4b10      	ldr	r3, [pc, #64]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f76c:	3339      	adds	r3, #57	; 0x39
   1f76e:	e7c3      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f770:	4b0e      	ldr	r3, [pc, #56]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f772:	0029      	movs	r1, r5
   1f774:	3302      	adds	r3, #2
   1f776:	7fda      	ldrb	r2, [r3, #31]
   1f778:	4816      	ldr	r0, [pc, #88]	; (1f7d4 <RADIO_SetAttr+0x1f4>)
   1f77a:	4b17      	ldr	r3, [pc, #92]	; (1f7d8 <RADIO_SetAttr+0x1f8>)
   1f77c:	4798      	blx	r3
   1f77e:	e751      	b.n	1f624 <RADIO_SetAttr+0x44>
   1f780:	782b      	ldrb	r3, [r5, #0]
   1f782:	1c1a      	adds	r2, r3, #0
   1f784:	2b08      	cmp	r3, #8
   1f786:	d900      	bls.n	1f78a <RADIO_SetAttr+0x1aa>
   1f788:	2208      	movs	r2, #8
   1f78a:	4b08      	ldr	r3, [pc, #32]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f78c:	3302      	adds	r3, #2
   1f78e:	e79c      	b.n	1f6ca <RADIO_SetAttr+0xea>
   1f790:	2305      	movs	r3, #5
   1f792:	782a      	ldrb	r2, [r5, #0]
   1f794:	1fd1      	subs	r1, r2, #7
   1f796:	4299      	cmp	r1, r3
   1f798:	d900      	bls.n	1f79c <RADIO_SetAttr+0x1bc>
   1f79a:	e744      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f79c:	4b03      	ldr	r3, [pc, #12]	; (1f7ac <RADIO_SetAttr+0x1cc>)
   1f79e:	3335      	adds	r3, #53	; 0x35
   1f7a0:	e7aa      	b.n	1f6f8 <RADIO_SetAttr+0x118>
   1f7a2:	2305      	movs	r3, #5
   1f7a4:	e73f      	b.n	1f626 <RADIO_SetAttr+0x46>
   1f7a6:	46c0      	nop			; (mov r8, r8)
   1f7a8:	0001fef5 	.word	0x0001fef5
   1f7ac:	20001980 	.word	0x20001980
   1f7b0:	0002117d 	.word	0x0002117d
   1f7b4:	000223c1 	.word	0x000223c1
   1f7b8:	000214d9 	.word	0x000214d9
   1f7bc:	f7d58bc0 	.word	0xf7d58bc0
   1f7c0:	0243d580 	.word	0x0243d580
   1f7c4:	e78fe580 	.word	0xe78fe580
   1f7c8:	06dac2c0 	.word	0x06dac2c0
   1f7cc:	cc9eec80 	.word	0xcc9eec80
   1f7d0:	096ae380 	.word	0x096ae380
   1f7d4:	20001999 	.word	0x20001999
   1f7d8:	00024149 	.word	0x00024149

0001f7dc <RADIO_Init>:
   1f7dc:	b510      	push	{r4, lr}
   1f7de:	4b0c      	ldr	r3, [pc, #48]	; (1f810 <RADIO_Init+0x34>)
   1f7e0:	4798      	blx	r3
   1f7e2:	4b0c      	ldr	r3, [pc, #48]	; (1f814 <RADIO_Init+0x38>)
   1f7e4:	201f      	movs	r0, #31
   1f7e6:	4798      	blx	r3
   1f7e8:	4c0b      	ldr	r4, [pc, #44]	; (1f818 <RADIO_Init+0x3c>)
   1f7ea:	490c      	ldr	r1, [pc, #48]	; (1f81c <RADIO_Init+0x40>)
   1f7ec:	2001      	movs	r0, #1
   1f7ee:	47a0      	blx	r4
   1f7f0:	490b      	ldr	r1, [pc, #44]	; (1f820 <RADIO_Init+0x44>)
   1f7f2:	2002      	movs	r0, #2
   1f7f4:	47a0      	blx	r4
   1f7f6:	490b      	ldr	r1, [pc, #44]	; (1f824 <RADIO_Init+0x48>)
   1f7f8:	2004      	movs	r0, #4
   1f7fa:	47a0      	blx	r4
   1f7fc:	490a      	ldr	r1, [pc, #40]	; (1f828 <RADIO_Init+0x4c>)
   1f7fe:	2008      	movs	r0, #8
   1f800:	47a0      	blx	r4
   1f802:	490a      	ldr	r1, [pc, #40]	; (1f82c <RADIO_Init+0x50>)
   1f804:	2010      	movs	r0, #16
   1f806:	47a0      	blx	r4
   1f808:	4909      	ldr	r1, [pc, #36]	; (1f830 <RADIO_Init+0x54>)
   1f80a:	2020      	movs	r0, #32
   1f80c:	47a0      	blx	r4
   1f80e:	bd10      	pop	{r4, pc}
   1f810:	000206a1 	.word	0x000206a1
   1f814:	0001ff01 	.word	0x0001ff01
   1f818:	0000739d 	.word	0x0000739d
   1f81c:	0001fc8d 	.word	0x0001fc8d
   1f820:	0001fd05 	.word	0x0001fd05
   1f824:	0001fd75 	.word	0x0001fd75
   1f828:	0001fdc5 	.word	0x0001fdc5
   1f82c:	0001fded 	.word	0x0001fded
   1f830:	0001fe15 	.word	0x0001fe15

0001f834 <Radio_WriteFrequency>:
   1f834:	b570      	push	{r4, r5, r6, lr}
   1f836:	490d      	ldr	r1, [pc, #52]	; (1f86c <Radio_WriteFrequency+0x38>)
   1f838:	4d0d      	ldr	r5, [pc, #52]	; (1f870 <Radio_WriteFrequency+0x3c>)
   1f83a:	0006      	movs	r6, r0
   1f83c:	47a8      	blx	r5
   1f83e:	4b0d      	ldr	r3, [pc, #52]	; (1f874 <Radio_WriteFrequency+0x40>)
   1f840:	0004      	movs	r4, r0
   1f842:	490a      	ldr	r1, [pc, #40]	; (1f86c <Radio_WriteFrequency+0x38>)
   1f844:	0030      	movs	r0, r6
   1f846:	4798      	blx	r3
   1f848:	0208      	lsls	r0, r1, #8
   1f84a:	4908      	ldr	r1, [pc, #32]	; (1f86c <Radio_WriteFrequency+0x38>)
   1f84c:	47a8      	blx	r5
   1f84e:	0224      	lsls	r4, r4, #8
   1f850:	1904      	adds	r4, r0, r4
   1f852:	0c21      	lsrs	r1, r4, #16
   1f854:	4d08      	ldr	r5, [pc, #32]	; (1f878 <Radio_WriteFrequency+0x44>)
   1f856:	b2c9      	uxtb	r1, r1
   1f858:	2006      	movs	r0, #6
   1f85a:	47a8      	blx	r5
   1f85c:	0a21      	lsrs	r1, r4, #8
   1f85e:	b2c9      	uxtb	r1, r1
   1f860:	2007      	movs	r0, #7
   1f862:	47a8      	blx	r5
   1f864:	b2e1      	uxtb	r1, r4
   1f866:	2008      	movs	r0, #8
   1f868:	47a8      	blx	r5
   1f86a:	bd70      	pop	{r4, r5, r6, pc}
   1f86c:	00003d09 	.word	0x00003d09
   1f870:	00021069 	.word	0x00021069
   1f874:	00021175 	.word	0x00021175
   1f878:	00006e21 	.word	0x00006e21

0001f87c <Radio_WriteConfiguration>:
   1f87c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f87e:	4cb0      	ldr	r4, [pc, #704]	; (1fb40 <Radio_WriteConfiguration+0x2c4>)
   1f880:	2200      	movs	r2, #0
   1f882:	0023      	movs	r3, r4
   1f884:	b085      	sub	sp, #20
   1f886:	9002      	str	r0, [sp, #8]
   1f888:	3334      	adds	r3, #52	; 0x34
   1f88a:	0010      	movs	r0, r2
   1f88c:	7819      	ldrb	r1, [r3, #0]
   1f88e:	4bad      	ldr	r3, [pc, #692]	; (1fb44 <Radio_WriteConfiguration+0x2c8>)
   1f890:	4798      	blx	r3
   1f892:	4bad      	ldr	r3, [pc, #692]	; (1fb48 <Radio_WriteConfiguration+0x2cc>)
   1f894:	6820      	ldr	r0, [r4, #0]
   1f896:	4798      	blx	r3
   1f898:	1ce3      	adds	r3, r4, #3
   1f89a:	1d62      	adds	r2, r4, #5
   1f89c:	7fdb      	ldrb	r3, [r3, #31]
   1f89e:	7fd2      	ldrb	r2, [r2, #31]
   1f8a0:	b25b      	sxtb	r3, r3
   1f8a2:	4eaa      	ldr	r6, [pc, #680]	; (1fb4c <Radio_WriteConfiguration+0x2d0>)
   1f8a4:	4daa      	ldr	r5, [pc, #680]	; (1fb50 <Radio_WriteConfiguration+0x2d4>)
   1f8a6:	2a00      	cmp	r2, #0
   1f8a8:	d000      	beq.n	1f8ac <Radio_WriteConfiguration+0x30>
   1f8aa:	e0fc      	b.n	1faa6 <Radio_WriteConfiguration+0x22a>
   1f8ac:	1c1f      	adds	r7, r3, #0
   1f8ae:	2b0f      	cmp	r3, #15
   1f8b0:	dc00      	bgt.n	1f8b4 <Radio_WriteConfiguration+0x38>
   1f8b2:	e0ec      	b.n	1fa8e <Radio_WriteConfiguration+0x212>
   1f8b4:	270f      	movs	r7, #15
   1f8b6:	b27b      	sxtb	r3, r7
   1f8b8:	204d      	movs	r0, #77	; 0x4d
   1f8ba:	9301      	str	r3, [sp, #4]
   1f8bc:	47b0      	blx	r6
   1f8be:	21f8      	movs	r1, #248	; 0xf8
   1f8c0:	4008      	ands	r0, r1
   1f8c2:	39f4      	subs	r1, #244	; 0xf4
   1f8c4:	4301      	orrs	r1, r0
   1f8c6:	204d      	movs	r0, #77	; 0x4d
   1f8c8:	47a8      	blx	r5
   1f8ca:	b27b      	sxtb	r3, r7
   1f8cc:	2b00      	cmp	r3, #0
   1f8ce:	db00      	blt.n	1f8d2 <Radio_WriteConfiguration+0x56>
   1f8d0:	e0e4      	b.n	1fa9c <Radio_WriteConfiguration+0x220>
   1f8d2:	3703      	adds	r7, #3
   1f8d4:	b2f9      	uxtb	r1, r7
   1f8d6:	2720      	movs	r7, #32
   1f8d8:	4339      	orrs	r1, r7
   1f8da:	2009      	movs	r0, #9
   1f8dc:	47a8      	blx	r5
   1f8de:	0023      	movs	r3, r4
   1f8e0:	3334      	adds	r3, #52	; 0x34
   1f8e2:	781f      	ldrb	r7, [r3, #0]
   1f8e4:	2f01      	cmp	r7, #1
   1f8e6:	d000      	beq.n	1f8ea <Radio_WriteConfiguration+0x6e>
   1f8e8:	e144      	b.n	1fb74 <Radio_WriteConfiguration+0x2f8>
   1f8ea:	7e21      	ldrb	r1, [r4, #24]
   1f8ec:	2039      	movs	r0, #57	; 0x39
   1f8ee:	47a8      	blx	r5
   1f8f0:	4b98      	ldr	r3, [pc, #608]	; (1fb54 <Radio_WriteConfiguration+0x2d8>)
   1f8f2:	201d      	movs	r0, #29
   1f8f4:	7819      	ldrb	r1, [r3, #0]
   1f8f6:	0023      	movs	r3, r4
   1f8f8:	3333      	adds	r3, #51	; 0x33
   1f8fa:	781b      	ldrb	r3, [r3, #0]
   1f8fc:	0109      	lsls	r1, r1, #4
   1f8fe:	005b      	lsls	r3, r3, #1
   1f900:	4319      	orrs	r1, r3
   1f902:	1de3      	adds	r3, r4, #7
   1f904:	7fdb      	ldrb	r3, [r3, #31]
   1f906:	401f      	ands	r7, r3
   1f908:	4339      	orrs	r1, r7
   1f90a:	b2c9      	uxtb	r1, r1
   1f90c:	47a8      	blx	r5
   1f90e:	1d23      	adds	r3, r4, #4
   1f910:	7fd9      	ldrb	r1, [r3, #31]
   1f912:	2304      	movs	r3, #4
   1f914:	0089      	lsls	r1, r1, #2
   1f916:	4019      	ands	r1, r3
   1f918:	0023      	movs	r3, r4
   1f91a:	3335      	adds	r3, #53	; 0x35
   1f91c:	781b      	ldrb	r3, [r3, #0]
   1f91e:	201e      	movs	r0, #30
   1f920:	011b      	lsls	r3, r3, #4
   1f922:	4319      	orrs	r1, r3
   1f924:	9b02      	ldr	r3, [sp, #8]
   1f926:	059b      	lsls	r3, r3, #22
   1f928:	0f9b      	lsrs	r3, r3, #30
   1f92a:	4319      	orrs	r1, r3
   1f92c:	b2c9      	uxtb	r1, r1
   1f92e:	47a8      	blx	r5
   1f930:	2300      	movs	r3, #0
   1f932:	8ae1      	ldrh	r1, [r4, #22]
   1f934:	4299      	cmp	r1, r3
   1f936:	d011      	beq.n	1f95c <Radio_WriteConfiguration+0xe0>
   1f938:	4a86      	ldr	r2, [pc, #536]	; (1fb54 <Radio_WriteConfiguration+0x2d8>)
   1f93a:	7812      	ldrb	r2, [r2, #0]
   1f93c:	2a08      	cmp	r2, #8
   1f93e:	d100      	bne.n	1f942 <Radio_WriteConfiguration+0xc6>
   1f940:	e0e4      	b.n	1fb0c <Radio_WriteConfiguration+0x290>
   1f942:	2a09      	cmp	r2, #9
   1f944:	d100      	bne.n	1f948 <Radio_WriteConfiguration+0xcc>
   1f946:	e0e3      	b.n	1fb10 <Radio_WriteConfiguration+0x294>
   1f948:	2a07      	cmp	r2, #7
   1f94a:	d000      	beq.n	1f94e <Radio_WriteConfiguration+0xd2>
   1f94c:	e0e3      	b.n	1fb16 <Radio_WriteConfiguration+0x29a>
   1f94e:	337d      	adds	r3, #125	; 0x7d
   1f950:	4359      	muls	r1, r3
   1f952:	0023      	movs	r3, r4
   1f954:	3335      	adds	r3, #53	; 0x35
   1f956:	781b      	ldrb	r3, [r3, #0]
   1f958:	40d9      	lsrs	r1, r3
   1f95a:	000b      	movs	r3, r1
   1f95c:	b2d9      	uxtb	r1, r3
   1f95e:	2024      	movs	r0, #36	; 0x24
   1f960:	4d7b      	ldr	r5, [pc, #492]	; (1fb50 <Radio_WriteConfiguration+0x2d4>)
   1f962:	47a8      	blx	r5
   1f964:	466b      	mov	r3, sp
   1f966:	201f      	movs	r0, #31
   1f968:	7a19      	ldrb	r1, [r3, #8]
   1f96a:	47a8      	blx	r5
   1f96c:	2026      	movs	r0, #38	; 0x26
   1f96e:	47b0      	blx	r6
   1f970:	0023      	movs	r3, r4
   1f972:	3335      	adds	r3, #53	; 0x35
   1f974:	781b      	ldrb	r3, [r3, #0]
   1f976:	2b0c      	cmp	r3, #12
   1f978:	d105      	bne.n	1f986 <Radio_WriteConfiguration+0x10a>
   1f97a:	0023      	movs	r3, r4
   1f97c:	3336      	adds	r3, #54	; 0x36
   1f97e:	781b      	ldrb	r3, [r3, #0]
   1f980:	3b07      	subs	r3, #7
   1f982:	2b01      	cmp	r3, #1
   1f984:	d906      	bls.n	1f994 <Radio_WriteConfiguration+0x118>
   1f986:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1f988:	4b73      	ldr	r3, [pc, #460]	; (1fb58 <Radio_WriteConfiguration+0x2dc>)
   1f98a:	4013      	ands	r3, r2
   1f98c:	4a73      	ldr	r2, [pc, #460]	; (1fb5c <Radio_WriteConfiguration+0x2e0>)
   1f98e:	4293      	cmp	r3, r2
   1f990:	d000      	beq.n	1f994 <Radio_WriteConfiguration+0x118>
   1f992:	e0c2      	b.n	1fb1a <Radio_WriteConfiguration+0x29e>
   1f994:	2108      	movs	r1, #8
   1f996:	4308      	orrs	r0, r1
   1f998:	b2c0      	uxtb	r0, r0
   1f99a:	2104      	movs	r1, #4
   1f99c:	4301      	orrs	r1, r0
   1f99e:	2026      	movs	r0, #38	; 0x26
   1f9a0:	47a8      	blx	r5
   1f9a2:	2031      	movs	r0, #49	; 0x31
   1f9a4:	47b0      	blx	r6
   1f9a6:	21f8      	movs	r1, #248	; 0xf8
   1f9a8:	4008      	ands	r0, r1
   1f9aa:	39f5      	subs	r1, #245	; 0xf5
   1f9ac:	4301      	orrs	r1, r0
   1f9ae:	2031      	movs	r0, #49	; 0x31
   1f9b0:	47a8      	blx	r5
   1f9b2:	210a      	movs	r1, #10
   1f9b4:	2037      	movs	r0, #55	; 0x37
   1f9b6:	47a8      	blx	r5
   1f9b8:	0023      	movs	r3, r4
   1f9ba:	3331      	adds	r3, #49	; 0x31
   1f9bc:	781b      	ldrb	r3, [r3, #0]
   1f9be:	2b12      	cmp	r3, #18
   1f9c0:	d11e      	bne.n	1fa00 <Radio_WriteConfiguration+0x184>
   1f9c2:	0023      	movs	r3, r4
   1f9c4:	3336      	adds	r3, #54	; 0x36
   1f9c6:	781b      	ldrb	r3, [r3, #0]
   1f9c8:	3b07      	subs	r3, #7
   1f9ca:	2b01      	cmp	r3, #1
   1f9cc:	d80b      	bhi.n	1f9e6 <Radio_WriteConfiguration+0x16a>
   1f9ce:	2031      	movs	r0, #49	; 0x31
   1f9d0:	47b0      	blx	r6
   1f9d2:	217f      	movs	r1, #127	; 0x7f
   1f9d4:	4001      	ands	r1, r0
   1f9d6:	2031      	movs	r0, #49	; 0x31
   1f9d8:	47a8      	blx	r5
   1f9da:	2140      	movs	r1, #64	; 0x40
   1f9dc:	202f      	movs	r0, #47	; 0x2f
   1f9de:	47a8      	blx	r5
   1f9e0:	2100      	movs	r1, #0
   1f9e2:	2030      	movs	r0, #48	; 0x30
   1f9e4:	47a8      	blx	r5
   1f9e6:	0023      	movs	r3, r4
   1f9e8:	3336      	adds	r3, #54	; 0x36
   1f9ea:	781b      	ldrb	r3, [r3, #0]
   1f9ec:	2b09      	cmp	r3, #9
   1f9ee:	d107      	bne.n	1fa00 <Radio_WriteConfiguration+0x184>
   1f9f0:	2031      	movs	r0, #49	; 0x31
   1f9f2:	47b0      	blx	r6
   1f9f4:	2180      	movs	r1, #128	; 0x80
   1f9f6:	4249      	negs	r1, r1
   1f9f8:	4301      	orrs	r1, r0
   1f9fa:	b2c9      	uxtb	r1, r1
   1f9fc:	2031      	movs	r0, #49	; 0x31
   1f9fe:	47a8      	blx	r5
   1fa00:	2033      	movs	r0, #51	; 0x33
   1fa02:	47b0      	blx	r6
   1fa04:	1da3      	adds	r3, r4, #6
   1fa06:	7fd9      	ldrb	r1, [r3, #31]
   1fa08:	2340      	movs	r3, #64	; 0x40
   1fa0a:	0189      	lsls	r1, r1, #6
   1fa0c:	4398      	bics	r0, r3
   1fa0e:	4019      	ands	r1, r3
   1fa10:	4301      	orrs	r1, r0
   1fa12:	b2c9      	uxtb	r1, r1
   1fa14:	2033      	movs	r0, #51	; 0x33
   1fa16:	47a8      	blx	r5
   1fa18:	8aa1      	ldrh	r1, [r4, #20]
   1fa1a:	2020      	movs	r0, #32
   1fa1c:	0a09      	lsrs	r1, r1, #8
   1fa1e:	47a8      	blx	r5
   1fa20:	7d21      	ldrb	r1, [r4, #20]
   1fa22:	2021      	movs	r0, #33	; 0x21
   1fa24:	47a8      	blx	r5
   1fa26:	2100      	movs	r1, #0
   1fa28:	200d      	movs	r0, #13
   1fa2a:	47a8      	blx	r5
   1fa2c:	2100      	movs	r1, #0
   1fa2e:	200e      	movs	r0, #14
   1fa30:	47a8      	blx	r5
   1fa32:	2100      	movs	r1, #0
   1fa34:	200f      	movs	r0, #15
   1fa36:	47a8      	blx	r5
   1fa38:	0023      	movs	r3, r4
   1fa3a:	3331      	adds	r3, #49	; 0x31
   1fa3c:	781b      	ldrb	r3, [r3, #0]
   1fa3e:	2b12      	cmp	r3, #18
   1fa40:	d120      	bne.n	1fa84 <Radio_WriteConfiguration+0x208>
   1fa42:	0023      	movs	r3, r4
   1fa44:	3336      	adds	r3, #54	; 0x36
   1fa46:	781b      	ldrb	r3, [r3, #0]
   1fa48:	2b09      	cmp	r3, #9
   1fa4a:	d000      	beq.n	1fa4e <Radio_WriteConfiguration+0x1d2>
   1fa4c:	e072      	b.n	1fb34 <Radio_WriteConfiguration+0x2b8>
   1fa4e:	4a44      	ldr	r2, [pc, #272]	; (1fb60 <Radio_WriteConfiguration+0x2e4>)
   1fa50:	6823      	ldr	r3, [r4, #0]
   1fa52:	1899      	adds	r1, r3, r2
   1fa54:	4a43      	ldr	r2, [pc, #268]	; (1fb64 <Radio_WriteConfiguration+0x2e8>)
   1fa56:	4291      	cmp	r1, r2
   1fa58:	d862      	bhi.n	1fb20 <Radio_WriteConfiguration+0x2a4>
   1fa5a:	2102      	movs	r1, #2
   1fa5c:	2036      	movs	r0, #54	; 0x36
   1fa5e:	47a8      	blx	r5
   1fa60:	2164      	movs	r1, #100	; 0x64
   1fa62:	203a      	movs	r0, #58	; 0x3a
   1fa64:	47a8      	blx	r5
   1fa66:	0023      	movs	r3, r4
   1fa68:	3336      	adds	r3, #54	; 0x36
   1fa6a:	781b      	ldrb	r3, [r3, #0]
   1fa6c:	2165      	movs	r1, #101	; 0x65
   1fa6e:	203a      	movs	r0, #58	; 0x3a
   1fa70:	2b09      	cmp	r3, #9
   1fa72:	d162      	bne.n	1fb3a <Radio_WriteConfiguration+0x2be>
   1fa74:	3406      	adds	r4, #6
   1fa76:	7fe3      	ldrb	r3, [r4, #31]
   1fa78:	2b01      	cmp	r3, #1
   1fa7a:	d15e      	bne.n	1fb3a <Radio_WriteConfiguration+0x2be>
   1fa7c:	47a8      	blx	r5
   1fa7e:	2119      	movs	r1, #25
   1fa80:	203b      	movs	r0, #59	; 0x3b
   1fa82:	47a8      	blx	r5
   1fa84:	21ff      	movs	r1, #255	; 0xff
   1fa86:	2012      	movs	r0, #18
   1fa88:	47a8      	blx	r5
   1fa8a:	b005      	add	sp, #20
   1fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa8e:	b25b      	sxtb	r3, r3
   1fa90:	3303      	adds	r3, #3
   1fa92:	db00      	blt.n	1fa96 <Radio_WriteConfiguration+0x21a>
   1fa94:	e70f      	b.n	1f8b6 <Radio_WriteConfiguration+0x3a>
   1fa96:	4b34      	ldr	r3, [pc, #208]	; (1fb68 <Radio_WriteConfiguration+0x2ec>)
   1fa98:	781f      	ldrb	r7, [r3, #0]
   1fa9a:	e70c      	b.n	1f8b6 <Radio_WriteConfiguration+0x3a>
   1fa9c:	2170      	movs	r1, #112	; 0x70
   1fa9e:	9b01      	ldr	r3, [sp, #4]
   1faa0:	4319      	orrs	r1, r3
   1faa2:	b2c9      	uxtb	r1, r1
   1faa4:	e719      	b.n	1f8da <Radio_WriteConfiguration+0x5e>
   1faa6:	2b01      	cmp	r3, #1
   1faa8:	dd07      	ble.n	1faba <Radio_WriteConfiguration+0x23e>
   1faaa:	2714      	movs	r7, #20
   1faac:	2b13      	cmp	r3, #19
   1faae:	dc06      	bgt.n	1fabe <Radio_WriteConfiguration+0x242>
   1fab0:	1c1f      	adds	r7, r3, #0
   1fab2:	2b11      	cmp	r3, #17
   1fab4:	dd02      	ble.n	1fabc <Radio_WriteConfiguration+0x240>
   1fab6:	2711      	movs	r7, #17
   1fab8:	e000      	b.n	1fabc <Radio_WriteConfiguration+0x240>
   1faba:	2702      	movs	r7, #2
   1fabc:	b27f      	sxtb	r7, r7
   1fabe:	200b      	movs	r0, #11
   1fac0:	47b0      	blx	r6
   1fac2:	9003      	str	r0, [sp, #12]
   1fac4:	204d      	movs	r0, #77	; 0x4d
   1fac6:	47b0      	blx	r6
   1fac8:	2307      	movs	r3, #7
   1faca:	4398      	bics	r0, r3
   1facc:	b2c1      	uxtb	r1, r0
   1face:	2f14      	cmp	r7, #20
   1fad0:	d112      	bne.n	1faf8 <Radio_WriteConfiguration+0x27c>
   1fad2:	4319      	orrs	r1, r3
   1fad4:	9b03      	ldr	r3, [sp, #12]
   1fad6:	37cb      	adds	r7, #203	; 0xcb
   1fad8:	403b      	ands	r3, r7
   1fada:	001f      	movs	r7, r3
   1fadc:	230f      	movs	r3, #15
   1fade:	9301      	str	r3, [sp, #4]
   1fae0:	204d      	movs	r0, #77	; 0x4d
   1fae2:	47a8      	blx	r5
   1fae4:	2180      	movs	r1, #128	; 0x80
   1fae6:	9b01      	ldr	r3, [sp, #4]
   1fae8:	4249      	negs	r1, r1
   1faea:	4319      	orrs	r1, r3
   1faec:	b2c9      	uxtb	r1, r1
   1faee:	2009      	movs	r0, #9
   1faf0:	47a8      	blx	r5
   1faf2:	0039      	movs	r1, r7
   1faf4:	200b      	movs	r0, #11
   1faf6:	e6f1      	b.n	1f8dc <Radio_WriteConfiguration+0x60>
   1faf8:	3f02      	subs	r7, #2
   1fafa:	b27b      	sxtb	r3, r7
   1fafc:	2720      	movs	r7, #32
   1fafe:	2004      	movs	r0, #4
   1fb00:	9301      	str	r3, [sp, #4]
   1fb02:	9b03      	ldr	r3, [sp, #12]
   1fb04:	4301      	orrs	r1, r0
   1fb06:	431f      	orrs	r7, r3
   1fb08:	b2ff      	uxtb	r7, r7
   1fb0a:	e7e9      	b.n	1fae0 <Radio_WriteConfiguration+0x264>
   1fb0c:	23fa      	movs	r3, #250	; 0xfa
   1fb0e:	e71f      	b.n	1f950 <Radio_WriteConfiguration+0xd4>
   1fb10:	23fa      	movs	r3, #250	; 0xfa
   1fb12:	005b      	lsls	r3, r3, #1
   1fb14:	e71c      	b.n	1f950 <Radio_WriteConfiguration+0xd4>
   1fb16:	0019      	movs	r1, r3
   1fb18:	e71b      	b.n	1f952 <Radio_WriteConfiguration+0xd6>
   1fb1a:	21f7      	movs	r1, #247	; 0xf7
   1fb1c:	4008      	ands	r0, r1
   1fb1e:	e73c      	b.n	1f99a <Radio_WriteConfiguration+0x11e>
   1fb20:	4a12      	ldr	r2, [pc, #72]	; (1fb6c <Radio_WriteConfiguration+0x2f0>)
   1fb22:	189b      	adds	r3, r3, r2
   1fb24:	4a12      	ldr	r2, [pc, #72]	; (1fb70 <Radio_WriteConfiguration+0x2f4>)
   1fb26:	4293      	cmp	r3, r2
   1fb28:	d804      	bhi.n	1fb34 <Radio_WriteConfiguration+0x2b8>
   1fb2a:	2102      	movs	r1, #2
   1fb2c:	2036      	movs	r0, #54	; 0x36
   1fb2e:	47a8      	blx	r5
   1fb30:	217f      	movs	r1, #127	; 0x7f
   1fb32:	e796      	b.n	1fa62 <Radio_WriteConfiguration+0x1e6>
   1fb34:	2103      	movs	r1, #3
   1fb36:	2036      	movs	r0, #54	; 0x36
   1fb38:	e794      	b.n	1fa64 <Radio_WriteConfiguration+0x1e8>
   1fb3a:	47a8      	blx	r5
   1fb3c:	211d      	movs	r1, #29
   1fb3e:	e79f      	b.n	1fa80 <Radio_WriteConfiguration+0x204>
   1fb40:	20001980 	.word	0x20001980
   1fb44:	00016315 	.word	0x00016315
   1fb48:	0001f835 	.word	0x0001f835
   1fb4c:	00006e6d 	.word	0x00006e6d
   1fb50:	00006e21 	.word	0x00006e21
   1fb54:	200019b6 	.word	0x200019b6
   1fb58:	00ffff00 	.word	0x00ffff00
   1fb5c:	00070b00 	.word	0x00070b00
   1fb60:	cc9eec80 	.word	0xcc9eec80
   1fb64:	096ae380 	.word	0x096ae380
   1fb68:	0002ce08 	.word	0x0002ce08
   1fb6c:	e78fe580 	.word	0xe78fe580
   1fb70:	06dac2c0 	.word	0x06dac2c0
   1fb74:	6863      	ldr	r3, [r4, #4]
   1fb76:	492c      	ldr	r1, [pc, #176]	; (1fc28 <Radio_WriteConfiguration+0x3ac>)
   1fb78:	0218      	lsls	r0, r3, #8
   1fb7a:	4b2c      	ldr	r3, [pc, #176]	; (1fc2c <Radio_WriteConfiguration+0x3b0>)
   1fb7c:	4798      	blx	r3
   1fb7e:	0007      	movs	r7, r0
   1fb80:	0a01      	lsrs	r1, r0, #8
   1fb82:	b2c9      	uxtb	r1, r1
   1fb84:	2004      	movs	r0, #4
   1fb86:	47a8      	blx	r5
   1fb88:	b2f9      	uxtb	r1, r7
   1fb8a:	2005      	movs	r0, #5
   1fb8c:	47a8      	blx	r5
   1fb8e:	4b27      	ldr	r3, [pc, #156]	; (1fc2c <Radio_WriteConfiguration+0x3b0>)
   1fb90:	68a1      	ldr	r1, [r4, #8]
   1fb92:	4827      	ldr	r0, [pc, #156]	; (1fc30 <Radio_WriteConfiguration+0x3b4>)
   1fb94:	4798      	blx	r3
   1fb96:	0007      	movs	r7, r0
   1fb98:	0a01      	lsrs	r1, r0, #8
   1fb9a:	b2c9      	uxtb	r1, r1
   1fb9c:	2002      	movs	r0, #2
   1fb9e:	47a8      	blx	r5
   1fba0:	b2f9      	uxtb	r1, r7
   1fba2:	2003      	movs	r0, #3
   1fba4:	47a8      	blx	r5
   1fba6:	2100      	movs	r1, #0
   1fba8:	205d      	movs	r0, #93	; 0x5d
   1fbaa:	47a8      	blx	r5
   1fbac:	8aa1      	ldrh	r1, [r4, #20]
   1fbae:	2025      	movs	r0, #37	; 0x25
   1fbb0:	0a09      	lsrs	r1, r1, #8
   1fbb2:	47a8      	blx	r5
   1fbb4:	7d21      	ldrb	r1, [r4, #20]
   1fbb6:	2026      	movs	r0, #38	; 0x26
   1fbb8:	47a8      	blx	r5
   1fbba:	219e      	movs	r1, #158	; 0x9e
   1fbbc:	200d      	movs	r0, #13
   1fbbe:	47a8      	blx	r5
   1fbc0:	21bf      	movs	r1, #191	; 0xbf
   1fbc2:	2035      	movs	r0, #53	; 0x35
   1fbc4:	47a8      	blx	r5
   1fbc6:	200a      	movs	r0, #10
   1fbc8:	47b0      	blx	r6
   1fbca:	0023      	movs	r3, r4
   1fbcc:	3337      	adds	r3, #55	; 0x37
   1fbce:	7819      	ldrb	r1, [r3, #0]
   1fbd0:	2360      	movs	r3, #96	; 0x60
   1fbd2:	0149      	lsls	r1, r1, #5
   1fbd4:	4398      	bics	r0, r3
   1fbd6:	4301      	orrs	r1, r0
   1fbd8:	b2c9      	uxtb	r1, r1
   1fbda:	200a      	movs	r0, #10
   1fbdc:	47a8      	blx	r5
   1fbde:	1d23      	adds	r3, r4, #4
   1fbe0:	7fdb      	ldrb	r3, [r3, #31]
   1fbe2:	21c0      	movs	r1, #192	; 0xc0
   1fbe4:	2b00      	cmp	r3, #0
   1fbe6:	d000      	beq.n	1fbea <Radio_WriteConfiguration+0x36e>
   1fbe8:	3110      	adds	r1, #16
   1fbea:	2030      	movs	r0, #48	; 0x30
   1fbec:	47a8      	blx	r5
   1fbee:	2600      	movs	r6, #0
   1fbf0:	1ca3      	adds	r3, r4, #2
   1fbf2:	7fd9      	ldrb	r1, [r3, #31]
   1fbf4:	428e      	cmp	r6, r1
   1fbf6:	d30d      	bcc.n	1fc14 <Radio_WriteConfiguration+0x398>
   1fbf8:	2900      	cmp	r1, #0
   1fbfa:	d003      	beq.n	1fc04 <Radio_WriteConfiguration+0x388>
   1fbfc:	2310      	movs	r3, #16
   1fbfe:	3901      	subs	r1, #1
   1fc00:	4319      	orrs	r1, r3
   1fc02:	b2c9      	uxtb	r1, r1
   1fc04:	2027      	movs	r0, #39	; 0x27
   1fc06:	47a8      	blx	r5
   1fc08:	21ff      	movs	r1, #255	; 0xff
   1fc0a:	203e      	movs	r0, #62	; 0x3e
   1fc0c:	47a8      	blx	r5
   1fc0e:	21ff      	movs	r1, #255	; 0xff
   1fc10:	203f      	movs	r0, #63	; 0x3f
   1fc12:	e739      	b.n	1fa88 <Radio_WriteConfiguration+0x20c>
   1fc14:	0030      	movs	r0, r6
   1fc16:	19a3      	adds	r3, r4, r6
   1fc18:	3028      	adds	r0, #40	; 0x28
   1fc1a:	7e59      	ldrb	r1, [r3, #25]
   1fc1c:	b2c0      	uxtb	r0, r0
   1fc1e:	3601      	adds	r6, #1
   1fc20:	47a8      	blx	r5
   1fc22:	b2f6      	uxtb	r6, r6
   1fc24:	e7e4      	b.n	1fbf0 <Radio_WriteConfiguration+0x374>
   1fc26:	46c0      	nop			; (mov r8, r8)
   1fc28:	00003d09 	.word	0x00003d09
   1fc2c:	00021069 	.word	0x00021069
   1fc30:	01e84800 	.word	0x01e84800

0001fc34 <RADIO_getMappingAndOpmode>:
   1fc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fc36:	0006      	movs	r6, r0
   1fc38:	4d06      	ldr	r5, [pc, #24]	; (1fc54 <RADIO_getMappingAndOpmode+0x20>)
   1fc3a:	2040      	movs	r0, #64	; 0x40
   1fc3c:	001f      	movs	r7, r3
   1fc3e:	0014      	movs	r4, r2
   1fc40:	9101      	str	r1, [sp, #4]
   1fc42:	47a8      	blx	r5
   1fc44:	4004      	ands	r4, r0
   1fc46:	413c      	asrs	r4, r7
   1fc48:	2001      	movs	r0, #1
   1fc4a:	7034      	strb	r4, [r6, #0]
   1fc4c:	47a8      	blx	r5
   1fc4e:	9b01      	ldr	r3, [sp, #4]
   1fc50:	7018      	strb	r0, [r3, #0]
   1fc52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1fc54:	00006e6d 	.word	0x00006e6d

0001fc58 <RADIO_UnhandledInterrupt.part.0>:
   1fc58:	b510      	push	{r4, lr}
   1fc5a:	21ff      	movs	r1, #255	; 0xff
   1fc5c:	2012      	movs	r0, #18
   1fc5e:	4b01      	ldr	r3, [pc, #4]	; (1fc64 <RADIO_UnhandledInterrupt.part.0+0xc>)
   1fc60:	4798      	blx	r3
   1fc62:	bd10      	pop	{r4, pc}
   1fc64:	00006e21 	.word	0x00006e21

0001fc68 <RADIO_UnhandledInterrupt>:
   1fc68:	b510      	push	{r4, lr}
   1fc6a:	2801      	cmp	r0, #1
   1fc6c:	d102      	bne.n	1fc74 <RADIO_UnhandledInterrupt+0xc>
   1fc6e:	4b05      	ldr	r3, [pc, #20]	; (1fc84 <RADIO_UnhandledInterrupt+0x1c>)
   1fc70:	4798      	blx	r3
   1fc72:	bd10      	pop	{r4, pc}
   1fc74:	21ff      	movs	r1, #255	; 0xff
   1fc76:	203e      	movs	r0, #62	; 0x3e
   1fc78:	4c03      	ldr	r4, [pc, #12]	; (1fc88 <RADIO_UnhandledInterrupt+0x20>)
   1fc7a:	47a0      	blx	r4
   1fc7c:	21ff      	movs	r1, #255	; 0xff
   1fc7e:	203f      	movs	r0, #63	; 0x3f
   1fc80:	47a0      	blx	r4
   1fc82:	e7f6      	b.n	1fc72 <RADIO_UnhandledInterrupt+0xa>
   1fc84:	0001fc59 	.word	0x0001fc59
   1fc88:	00006e21 	.word	0x00006e21

0001fc8c <RADIO_DIO0>:
   1fc8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fc8e:	466b      	mov	r3, sp
   1fc90:	1ddc      	adds	r4, r3, #7
   1fc92:	1d9d      	adds	r5, r3, #6
   1fc94:	22c0      	movs	r2, #192	; 0xc0
   1fc96:	2306      	movs	r3, #6
   1fc98:	0028      	movs	r0, r5
   1fc9a:	0021      	movs	r1, r4
   1fc9c:	4e12      	ldr	r6, [pc, #72]	; (1fce8 <RADIO_DIO0+0x5c>)
   1fc9e:	47b0      	blx	r6
   1fca0:	7823      	ldrb	r3, [r4, #0]
   1fca2:	7828      	ldrb	r0, [r5, #0]
   1fca4:	b25a      	sxtb	r2, r3
   1fca6:	b2c0      	uxtb	r0, r0
   1fca8:	2a00      	cmp	r2, #0
   1fcaa:	da0b      	bge.n	1fcc4 <RADIO_DIO0+0x38>
   1fcac:	2800      	cmp	r0, #0
   1fcae:	d004      	beq.n	1fcba <RADIO_DIO0+0x2e>
   1fcb0:	2801      	cmp	r0, #1
   1fcb2:	d005      	beq.n	1fcc0 <RADIO_DIO0+0x34>
   1fcb4:	4b0d      	ldr	r3, [pc, #52]	; (1fcec <RADIO_DIO0+0x60>)
   1fcb6:	4798      	blx	r3
   1fcb8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1fcba:	4b0d      	ldr	r3, [pc, #52]	; (1fcf0 <RADIO_DIO0+0x64>)
   1fcbc:	4798      	blx	r3
   1fcbe:	e7fb      	b.n	1fcb8 <RADIO_DIO0+0x2c>
   1fcc0:	4b0c      	ldr	r3, [pc, #48]	; (1fcf4 <RADIO_DIO0+0x68>)
   1fcc2:	e7fb      	b.n	1fcbc <RADIO_DIO0+0x30>
   1fcc4:	2800      	cmp	r0, #0
   1fcc6:	d10a      	bne.n	1fcde <RADIO_DIO0+0x52>
   1fcc8:	2207      	movs	r2, #7
   1fcca:	4013      	ands	r3, r2
   1fccc:	7023      	strb	r3, [r4, #0]
   1fcce:	2b03      	cmp	r3, #3
   1fcd0:	d101      	bne.n	1fcd6 <RADIO_DIO0+0x4a>
   1fcd2:	4b09      	ldr	r3, [pc, #36]	; (1fcf8 <RADIO_DIO0+0x6c>)
   1fcd4:	e7f2      	b.n	1fcbc <RADIO_DIO0+0x30>
   1fcd6:	2b05      	cmp	r3, #5
   1fcd8:	d102      	bne.n	1fce0 <RADIO_DIO0+0x54>
   1fcda:	4b08      	ldr	r3, [pc, #32]	; (1fcfc <RADIO_DIO0+0x70>)
   1fcdc:	e7ee      	b.n	1fcbc <RADIO_DIO0+0x30>
   1fcde:	2000      	movs	r0, #0
   1fce0:	4b07      	ldr	r3, [pc, #28]	; (1fd00 <RADIO_DIO0+0x74>)
   1fce2:	4798      	blx	r3
   1fce4:	e7e8      	b.n	1fcb8 <RADIO_DIO0+0x2c>
   1fce6:	46c0      	nop			; (mov r8, r8)
   1fce8:	0001fc35 	.word	0x0001fc35
   1fcec:	0001fc59 	.word	0x0001fc59
   1fcf0:	00020411 	.word	0x00020411
   1fcf4:	00020315 	.word	0x00020315
   1fcf8:	00020391 	.word	0x00020391
   1fcfc:	0002048d 	.word	0x0002048d
   1fd00:	0001fc69 	.word	0x0001fc69

0001fd04 <RADIO_DIO1>:
   1fd04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fd06:	466b      	mov	r3, sp
   1fd08:	1ddc      	adds	r4, r3, #7
   1fd0a:	1d9d      	adds	r5, r3, #6
   1fd0c:	2230      	movs	r2, #48	; 0x30
   1fd0e:	2304      	movs	r3, #4
   1fd10:	0021      	movs	r1, r4
   1fd12:	0028      	movs	r0, r5
   1fd14:	4e11      	ldr	r6, [pc, #68]	; (1fd5c <RADIO_DIO1+0x58>)
   1fd16:	47b0      	blx	r6
   1fd18:	7822      	ldrb	r2, [r4, #0]
   1fd1a:	782b      	ldrb	r3, [r5, #0]
   1fd1c:	b251      	sxtb	r1, r2
   1fd1e:	2900      	cmp	r1, #0
   1fd20:	da0c      	bge.n	1fd3c <RADIO_DIO1+0x38>
   1fd22:	b2db      	uxtb	r3, r3
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d004      	beq.n	1fd32 <RADIO_DIO1+0x2e>
   1fd28:	2b01      	cmp	r3, #1
   1fd2a:	d005      	beq.n	1fd38 <RADIO_DIO1+0x34>
   1fd2c:	4b0c      	ldr	r3, [pc, #48]	; (1fd60 <RADIO_DIO1+0x5c>)
   1fd2e:	4798      	blx	r3
   1fd30:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1fd32:	4b0c      	ldr	r3, [pc, #48]	; (1fd64 <RADIO_DIO1+0x60>)
   1fd34:	4798      	blx	r3
   1fd36:	e7fb      	b.n	1fd30 <RADIO_DIO1+0x2c>
   1fd38:	4b0b      	ldr	r3, [pc, #44]	; (1fd68 <RADIO_DIO1+0x64>)
   1fd3a:	e7fb      	b.n	1fd34 <RADIO_DIO1+0x30>
   1fd3c:	2107      	movs	r1, #7
   1fd3e:	b2db      	uxtb	r3, r3
   1fd40:	400a      	ands	r2, r1
   1fd42:	7022      	strb	r2, [r4, #0]
   1fd44:	2b00      	cmp	r3, #0
   1fd46:	d005      	beq.n	1fd54 <RADIO_DIO1+0x50>
   1fd48:	2b01      	cmp	r3, #1
   1fd4a:	d1f1      	bne.n	1fd30 <RADIO_DIO1+0x2c>
   1fd4c:	2a03      	cmp	r2, #3
   1fd4e:	d1ef      	bne.n	1fd30 <RADIO_DIO1+0x2c>
   1fd50:	4b06      	ldr	r3, [pc, #24]	; (1fd6c <RADIO_DIO1+0x68>)
   1fd52:	e7ef      	b.n	1fd34 <RADIO_DIO1+0x30>
   1fd54:	4b06      	ldr	r3, [pc, #24]	; (1fd70 <RADIO_DIO1+0x6c>)
   1fd56:	2a05      	cmp	r2, #5
   1fd58:	d1ea      	bne.n	1fd30 <RADIO_DIO1+0x2c>
   1fd5a:	e7eb      	b.n	1fd34 <RADIO_DIO1+0x30>
   1fd5c:	0001fc35 	.word	0x0001fc35
   1fd60:	0001fc59 	.word	0x0001fc59
   1fd64:	00020299 	.word	0x00020299
   1fd68:	000164e9 	.word	0x000164e9
   1fd6c:	000200c1 	.word	0x000200c1
   1fd70:	00020025 	.word	0x00020025

0001fd74 <RADIO_DIO2>:
   1fd74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fd76:	466b      	mov	r3, sp
   1fd78:	1ddc      	adds	r4, r3, #7
   1fd7a:	1d9d      	adds	r5, r3, #6
   1fd7c:	220c      	movs	r2, #12
   1fd7e:	2302      	movs	r3, #2
   1fd80:	0021      	movs	r1, r4
   1fd82:	0028      	movs	r0, r5
   1fd84:	4e0b      	ldr	r6, [pc, #44]	; (1fdb4 <RADIO_DIO2+0x40>)
   1fd86:	47b0      	blx	r6
   1fd88:	7823      	ldrb	r3, [r4, #0]
   1fd8a:	782a      	ldrb	r2, [r5, #0]
   1fd8c:	b259      	sxtb	r1, r3
   1fd8e:	2900      	cmp	r1, #0
   1fd90:	da05      	bge.n	1fd9e <RADIO_DIO2+0x2a>
   1fd92:	4b09      	ldr	r3, [pc, #36]	; (1fdb8 <RADIO_DIO2+0x44>)
   1fd94:	2a02      	cmp	r2, #2
   1fd96:	d90a      	bls.n	1fdae <RADIO_DIO2+0x3a>
   1fd98:	4b08      	ldr	r3, [pc, #32]	; (1fdbc <RADIO_DIO2+0x48>)
   1fd9a:	4798      	blx	r3
   1fd9c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1fd9e:	2107      	movs	r1, #7
   1fda0:	400b      	ands	r3, r1
   1fda2:	7023      	strb	r3, [r4, #0]
   1fda4:	2a03      	cmp	r2, #3
   1fda6:	d1f9      	bne.n	1fd9c <RADIO_DIO2+0x28>
   1fda8:	2b05      	cmp	r3, #5
   1fdaa:	d1f7      	bne.n	1fd9c <RADIO_DIO2+0x28>
   1fdac:	4b04      	ldr	r3, [pc, #16]	; (1fdc0 <RADIO_DIO2+0x4c>)
   1fdae:	4798      	blx	r3
   1fdb0:	e7f4      	b.n	1fd9c <RADIO_DIO2+0x28>
   1fdb2:	46c0      	nop			; (mov r8, r8)
   1fdb4:	0001fc35 	.word	0x0001fc35
   1fdb8:	000164e9 	.word	0x000164e9
   1fdbc:	0001fc59 	.word	0x0001fc59
   1fdc0:	0001fff5 	.word	0x0001fff5

0001fdc4 <RADIO_DIO3>:
   1fdc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fdc6:	466b      	mov	r3, sp
   1fdc8:	4668      	mov	r0, sp
   1fdca:	1ddc      	adds	r4, r3, #7
   1fdcc:	2203      	movs	r2, #3
   1fdce:	2300      	movs	r3, #0
   1fdd0:	0021      	movs	r1, r4
   1fdd2:	3006      	adds	r0, #6
   1fdd4:	4d03      	ldr	r5, [pc, #12]	; (1fde4 <RADIO_DIO3+0x20>)
   1fdd6:	47a8      	blx	r5
   1fdd8:	7823      	ldrb	r3, [r4, #0]
   1fdda:	2b7f      	cmp	r3, #127	; 0x7f
   1fddc:	d901      	bls.n	1fde2 <RADIO_DIO3+0x1e>
   1fdde:	4b02      	ldr	r3, [pc, #8]	; (1fde8 <RADIO_DIO3+0x24>)
   1fde0:	4798      	blx	r3
   1fde2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1fde4:	0001fc35 	.word	0x0001fc35
   1fde8:	0001fc59 	.word	0x0001fc59

0001fdec <RADIO_DIO4>:
   1fdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fdee:	466b      	mov	r3, sp
   1fdf0:	4668      	mov	r0, sp
   1fdf2:	1ddc      	adds	r4, r3, #7
   1fdf4:	2306      	movs	r3, #6
   1fdf6:	22c0      	movs	r2, #192	; 0xc0
   1fdf8:	18c0      	adds	r0, r0, r3
   1fdfa:	0021      	movs	r1, r4
   1fdfc:	4d03      	ldr	r5, [pc, #12]	; (1fe0c <RADIO_DIO4+0x20>)
   1fdfe:	47a8      	blx	r5
   1fe00:	7823      	ldrb	r3, [r4, #0]
   1fe02:	2b7f      	cmp	r3, #127	; 0x7f
   1fe04:	d901      	bls.n	1fe0a <RADIO_DIO4+0x1e>
   1fe06:	4b02      	ldr	r3, [pc, #8]	; (1fe10 <RADIO_DIO4+0x24>)
   1fe08:	4798      	blx	r3
   1fe0a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1fe0c:	0001fc35 	.word	0x0001fc35
   1fe10:	0001fc59 	.word	0x0001fc59

0001fe14 <RADIO_DIO5>:
   1fe14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fe16:	466b      	mov	r3, sp
   1fe18:	4668      	mov	r0, sp
   1fe1a:	1ddc      	adds	r4, r3, #7
   1fe1c:	2230      	movs	r2, #48	; 0x30
   1fe1e:	2304      	movs	r3, #4
   1fe20:	0021      	movs	r1, r4
   1fe22:	3006      	adds	r0, #6
   1fe24:	4d03      	ldr	r5, [pc, #12]	; (1fe34 <RADIO_DIO5+0x20>)
   1fe26:	47a8      	blx	r5
   1fe28:	7823      	ldrb	r3, [r4, #0]
   1fe2a:	2b7f      	cmp	r3, #127	; 0x7f
   1fe2c:	d901      	bls.n	1fe32 <RADIO_DIO5+0x1e>
   1fe2e:	4b02      	ldr	r3, [pc, #8]	; (1fe38 <RADIO_DIO5+0x24>)
   1fe30:	4798      	blx	r3
   1fe32:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1fe34:	0001fc35 	.word	0x0001fc35
   1fe38:	0001fc59 	.word	0x0001fc59

0001fe3c <radioPostTask>:
   1fe3c:	b510      	push	{r4, lr}
   1fe3e:	0004      	movs	r4, r0
   1fe40:	4b05      	ldr	r3, [pc, #20]	; (1fe58 <radioPostTask+0x1c>)
   1fe42:	4798      	blx	r3
   1fe44:	4b05      	ldr	r3, [pc, #20]	; (1fe5c <radioPostTask+0x20>)
   1fe46:	8818      	ldrh	r0, [r3, #0]
   1fe48:	4320      	orrs	r0, r4
   1fe4a:	8018      	strh	r0, [r3, #0]
   1fe4c:	4b04      	ldr	r3, [pc, #16]	; (1fe60 <radioPostTask+0x24>)
   1fe4e:	4798      	blx	r3
   1fe50:	2002      	movs	r0, #2
   1fe52:	4b04      	ldr	r3, [pc, #16]	; (1fe64 <radioPostTask+0x28>)
   1fe54:	4798      	blx	r3
   1fe56:	bd10      	pop	{r4, pc}
   1fe58:	000076e1 	.word	0x000076e1
   1fe5c:	20001176 	.word	0x20001176
   1fe60:	000076f5 	.word	0x000076f5
   1fe64:	000162bd 	.word	0x000162bd

0001fe68 <radioClearTask>:
   1fe68:	b510      	push	{r4, lr}
   1fe6a:	0004      	movs	r4, r0
   1fe6c:	4b04      	ldr	r3, [pc, #16]	; (1fe80 <radioClearTask+0x18>)
   1fe6e:	4798      	blx	r3
   1fe70:	4a04      	ldr	r2, [pc, #16]	; (1fe84 <radioClearTask+0x1c>)
   1fe72:	8813      	ldrh	r3, [r2, #0]
   1fe74:	43a3      	bics	r3, r4
   1fe76:	8013      	strh	r3, [r2, #0]
   1fe78:	4b03      	ldr	r3, [pc, #12]	; (1fe88 <radioClearTask+0x20>)
   1fe7a:	4798      	blx	r3
   1fe7c:	bd10      	pop	{r4, pc}
   1fe7e:	46c0      	nop			; (mov r8, r8)
   1fe80:	000076e1 	.word	0x000076e1
   1fe84:	20001176 	.word	0x20001176
   1fe88:	000076f5 	.word	0x000076f5

0001fe8c <RADIO_TaskHandler>:
   1fe8c:	b570      	push	{r4, r5, r6, lr}
   1fe8e:	2400      	movs	r4, #0
   1fe90:	4d10      	ldr	r5, [pc, #64]	; (1fed4 <RADIO_TaskHandler+0x48>)
   1fe92:	2601      	movs	r6, #1
   1fe94:	882b      	ldrh	r3, [r5, #0]
   1fe96:	42a3      	cmp	r3, r4
   1fe98:	d015      	beq.n	1fec6 <RADIO_TaskHandler+0x3a>
   1fe9a:	882b      	ldrh	r3, [r5, #0]
   1fe9c:	4123      	asrs	r3, r4
   1fe9e:	4233      	tst	r3, r6
   1fea0:	d013      	beq.n	1feca <RADIO_TaskHandler+0x3e>
   1fea2:	40a6      	lsls	r6, r4
   1fea4:	4b0c      	ldr	r3, [pc, #48]	; (1fed8 <RADIO_TaskHandler+0x4c>)
   1fea6:	4798      	blx	r3
   1fea8:	882b      	ldrh	r3, [r5, #0]
   1feaa:	00a4      	lsls	r4, r4, #2
   1feac:	43b3      	bics	r3, r6
   1feae:	802b      	strh	r3, [r5, #0]
   1feb0:	4b0a      	ldr	r3, [pc, #40]	; (1fedc <RADIO_TaskHandler+0x50>)
   1feb2:	4798      	blx	r3
   1feb4:	4b0a      	ldr	r3, [pc, #40]	; (1fee0 <RADIO_TaskHandler+0x54>)
   1feb6:	58e3      	ldr	r3, [r4, r3]
   1feb8:	4798      	blx	r3
   1feba:	882b      	ldrh	r3, [r5, #0]
   1febc:	2b00      	cmp	r3, #0
   1febe:	d002      	beq.n	1fec6 <RADIO_TaskHandler+0x3a>
   1fec0:	2002      	movs	r0, #2
   1fec2:	4b08      	ldr	r3, [pc, #32]	; (1fee4 <RADIO_TaskHandler+0x58>)
   1fec4:	4798      	blx	r3
   1fec6:	2000      	movs	r0, #0
   1fec8:	bd70      	pop	{r4, r5, r6, pc}
   1feca:	3401      	adds	r4, #1
   1fecc:	2c05      	cmp	r4, #5
   1fece:	d1e4      	bne.n	1fe9a <RADIO_TaskHandler+0xe>
   1fed0:	e7f9      	b.n	1fec6 <RADIO_TaskHandler+0x3a>
   1fed2:	46c0      	nop			; (mov r8, r8)
   1fed4:	20001176 	.word	0x20001176
   1fed8:	000076e1 	.word	0x000076e1
   1fedc:	000076f5 	.word	0x000076f5
   1fee0:	0002ce0c 	.word	0x0002ce0c
   1fee4:	000162bd 	.word	0x000162bd

0001fee8 <RadioSetState>:
   1fee8:	4b01      	ldr	r3, [pc, #4]	; (1fef0 <RadioSetState+0x8>)
   1feea:	7018      	strb	r0, [r3, #0]
   1feec:	4770      	bx	lr
   1feee:	46c0      	nop			; (mov r8, r8)
   1fef0:	20002047 	.word	0x20002047

0001fef4 <RADIO_GetState>:
   1fef4:	4b01      	ldr	r3, [pc, #4]	; (1fefc <RADIO_GetState+0x8>)
   1fef6:	7818      	ldrb	r0, [r3, #0]
   1fef8:	b2c0      	uxtb	r0, r0
   1fefa:	4770      	bx	lr
   1fefc:	20002047 	.word	0x20002047

0001ff00 <RADIO_SetCallbackBitmask>:
   1ff00:	4a02      	ldr	r2, [pc, #8]	; (1ff0c <RADIO_SetCallbackBitmask+0xc>)
   1ff02:	7813      	ldrb	r3, [r2, #0]
   1ff04:	4318      	orrs	r0, r3
   1ff06:	7010      	strb	r0, [r2, #0]
   1ff08:	4770      	bx	lr
   1ff0a:	46c0      	nop			; (mov r8, r8)
   1ff0c:	20002046 	.word	0x20002046

0001ff10 <RADIO_Transmit>:
   1ff10:	b570      	push	{r4, r5, r6, lr}
   1ff12:	4d10      	ldr	r5, [pc, #64]	; (1ff54 <RADIO_Transmit+0x44>)
   1ff14:	0006      	movs	r6, r0
   1ff16:	782b      	ldrb	r3, [r5, #0]
   1ff18:	2004      	movs	r0, #4
   1ff1a:	2b01      	cmp	r3, #1
   1ff1c:	d118      	bne.n	1ff50 <RADIO_Transmit+0x40>
   1ff1e:	4c0e      	ldr	r4, [pc, #56]	; (1ff58 <RADIO_Transmit+0x48>)
   1ff20:	0023      	movs	r3, r4
   1ff22:	332f      	adds	r3, #47	; 0x2f
   1ff24:	7818      	ldrb	r0, [r3, #0]
   1ff26:	4b0d      	ldr	r3, [pc, #52]	; (1ff5c <RADIO_Transmit+0x4c>)
   1ff28:	4798      	blx	r3
   1ff2a:	4b0d      	ldr	r3, [pc, #52]	; (1ff60 <RADIO_Transmit+0x50>)
   1ff2c:	7832      	ldrb	r2, [r6, #0]
   1ff2e:	6871      	ldr	r1, [r6, #4]
   1ff30:	701a      	strb	r2, [r3, #0]
   1ff32:	4b0c      	ldr	r3, [pc, #48]	; (1ff64 <RADIO_Transmit+0x54>)
   1ff34:	3434      	adds	r4, #52	; 0x34
   1ff36:	6019      	str	r1, [r3, #0]
   1ff38:	7821      	ldrb	r1, [r4, #0]
   1ff3a:	2302      	movs	r3, #2
   1ff3c:	2900      	cmp	r1, #0
   1ff3e:	d102      	bne.n	1ff46 <RADIO_Transmit+0x36>
   1ff40:	0018      	movs	r0, r3
   1ff42:	2a3f      	cmp	r2, #63	; 0x3f
   1ff44:	d804      	bhi.n	1ff50 <RADIO_Transmit+0x40>
   1ff46:	702b      	strb	r3, [r5, #0]
   1ff48:	2004      	movs	r0, #4
   1ff4a:	4b07      	ldr	r3, [pc, #28]	; (1ff68 <RADIO_Transmit+0x58>)
   1ff4c:	4798      	blx	r3
   1ff4e:	2000      	movs	r0, #0
   1ff50:	bd70      	pop	{r4, r5, r6, pc}
   1ff52:	46c0      	nop			; (mov r8, r8)
   1ff54:	20002047 	.word	0x20002047
   1ff58:	20001980 	.word	0x20001980
   1ff5c:	00015cfd 	.word	0x00015cfd
   1ff60:	2000118c 	.word	0x2000118c
   1ff64:	20001188 	.word	0x20001188
   1ff68:	0001fe3d 	.word	0x0001fe3d

0001ff6c <Radio_FSKTxPayloadHandler>:
   1ff6c:	b570      	push	{r4, r5, r6, lr}
   1ff6e:	4b1c      	ldr	r3, [pc, #112]	; (1ffe0 <Radio_FSKTxPayloadHandler+0x74>)
   1ff70:	000d      	movs	r5, r1
   1ff72:	4798      	blx	r3
   1ff74:	4c1b      	ldr	r4, [pc, #108]	; (1ffe4 <Radio_FSKTxPayloadHandler+0x78>)
   1ff76:	3458      	adds	r4, #88	; 0x58
   1ff78:	7820      	ldrb	r0, [r4, #0]
   1ff7a:	b2c0      	uxtb	r0, r0
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d112      	bne.n	1ffa6 <Radio_FSKTxPayloadHandler+0x3a>
   1ff80:	2d00      	cmp	r5, #0
   1ff82:	d007      	beq.n	1ff94 <Radio_FSKTxPayloadHandler+0x28>
   1ff84:	4918      	ldr	r1, [pc, #96]	; (1ffe8 <Radio_FSKTxPayloadHandler+0x7c>)
   1ff86:	4b19      	ldr	r3, [pc, #100]	; (1ffec <Radio_FSKTxPayloadHandler+0x80>)
   1ff88:	2d3e      	cmp	r5, #62	; 0x3e
   1ff8a:	d806      	bhi.n	1ff9a <Radio_FSKTxPayloadHandler+0x2e>
   1ff8c:	002a      	movs	r2, r5
   1ff8e:	6809      	ldr	r1, [r1, #0]
   1ff90:	4798      	blx	r3
   1ff92:	7025      	strb	r5, [r4, #0]
   1ff94:	4b16      	ldr	r3, [pc, #88]	; (1fff0 <Radio_FSKTxPayloadHandler+0x84>)
   1ff96:	4798      	blx	r3
   1ff98:	bd70      	pop	{r4, r5, r6, pc}
   1ff9a:	223f      	movs	r2, #63	; 0x3f
   1ff9c:	6809      	ldr	r1, [r1, #0]
   1ff9e:	4798      	blx	r3
   1ffa0:	233f      	movs	r3, #63	; 0x3f
   1ffa2:	7023      	strb	r3, [r4, #0]
   1ffa4:	e7f6      	b.n	1ff94 <Radio_FSKTxPayloadHandler+0x28>
   1ffa6:	7823      	ldrb	r3, [r4, #0]
   1ffa8:	429d      	cmp	r5, r3
   1ffaa:	d0f3      	beq.n	1ff94 <Radio_FSKTxPayloadHandler+0x28>
   1ffac:	7822      	ldrb	r2, [r4, #0]
   1ffae:	480e      	ldr	r0, [pc, #56]	; (1ffe8 <Radio_FSKTxPayloadHandler+0x7c>)
   1ffb0:	1aaa      	subs	r2, r5, r2
   1ffb2:	b2d2      	uxtb	r2, r2
   1ffb4:	4b0d      	ldr	r3, [pc, #52]	; (1ffec <Radio_FSKTxPayloadHandler+0x80>)
   1ffb6:	2a3f      	cmp	r2, #63	; 0x3f
   1ffb8:	d807      	bhi.n	1ffca <Radio_FSKTxPayloadHandler+0x5e>
   1ffba:	7826      	ldrb	r6, [r4, #0]
   1ffbc:	7822      	ldrb	r2, [r4, #0]
   1ffbe:	6801      	ldr	r1, [r0, #0]
   1ffc0:	1aaa      	subs	r2, r5, r2
   1ffc2:	b2d2      	uxtb	r2, r2
   1ffc4:	1989      	adds	r1, r1, r6
   1ffc6:	2000      	movs	r0, #0
   1ffc8:	e7e2      	b.n	1ff90 <Radio_FSKTxPayloadHandler+0x24>
   1ffca:	7822      	ldrb	r2, [r4, #0]
   1ffcc:	6801      	ldr	r1, [r0, #0]
   1ffce:	2000      	movs	r0, #0
   1ffd0:	1889      	adds	r1, r1, r2
   1ffd2:	223f      	movs	r2, #63	; 0x3f
   1ffd4:	4798      	blx	r3
   1ffd6:	7823      	ldrb	r3, [r4, #0]
   1ffd8:	333f      	adds	r3, #63	; 0x3f
   1ffda:	b2db      	uxtb	r3, r3
   1ffdc:	e7e1      	b.n	1ffa2 <Radio_FSKTxPayloadHandler+0x36>
   1ffde:	46c0      	nop			; (mov r8, r8)
   1ffe0:	00000201 	.word	0x00000201
   1ffe4:	20001980 	.word	0x20001980
   1ffe8:	20001188 	.word	0x20001188
   1ffec:	00006ec1 	.word	0x00006ec1
   1fff0:	00000255 	.word	0x00000255

0001fff4 <RADIO_FSKSyncAddr>:
   1fff4:	4b08      	ldr	r3, [pc, #32]	; (20018 <RADIO_FSKSyncAddr+0x24>)
   1fff6:	b510      	push	{r4, lr}
   1fff8:	4798      	blx	r3
   1fffa:	4b08      	ldr	r3, [pc, #32]	; (2001c <RADIO_FSKSyncAddr+0x28>)
   1fffc:	001a      	movs	r2, r3
   1fffe:	3234      	adds	r2, #52	; 0x34
   20000:	7812      	ldrb	r2, [r2, #0]
   20002:	2a00      	cmp	r2, #0
   20004:	d104      	bne.n	20010 <RADIO_FSKSyncAddr+0x1c>
   20006:	0019      	movs	r1, r3
   20008:	3358      	adds	r3, #88	; 0x58
   2000a:	312c      	adds	r1, #44	; 0x2c
   2000c:	700a      	strb	r2, [r1, #0]
   2000e:	701a      	strb	r2, [r3, #0]
   20010:	4b03      	ldr	r3, [pc, #12]	; (20020 <RADIO_FSKSyncAddr+0x2c>)
   20012:	4798      	blx	r3
   20014:	bd10      	pop	{r4, pc}
   20016:	46c0      	nop			; (mov r8, r8)
   20018:	00000201 	.word	0x00000201
   2001c:	20001980 	.word	0x20001980
   20020:	00000255 	.word	0x00000255

00020024 <RADIO_FSKFifoLevel>:
   20024:	b570      	push	{r4, r5, r6, lr}
   20026:	4b22      	ldr	r3, [pc, #136]	; (200b0 <RADIO_FSKFifoLevel+0x8c>)
   20028:	4798      	blx	r3
   2002a:	4d22      	ldr	r5, [pc, #136]	; (200b4 <RADIO_FSKFifoLevel+0x90>)
   2002c:	002a      	movs	r2, r5
   2002e:	002b      	movs	r3, r5
   20030:	322c      	adds	r2, #44	; 0x2c
   20032:	3358      	adds	r3, #88	; 0x58
   20034:	7810      	ldrb	r0, [r2, #0]
   20036:	7819      	ldrb	r1, [r3, #0]
   20038:	4288      	cmp	r0, r1
   2003a:	d105      	bne.n	20048 <RADIO_FSKFifoLevel+0x24>
   2003c:	7812      	ldrb	r2, [r2, #0]
   2003e:	2a00      	cmp	r2, #0
   20040:	d002      	beq.n	20048 <RADIO_FSKFifoLevel+0x24>
   20042:	781b      	ldrb	r3, [r3, #0]
   20044:	2b00      	cmp	r3, #0
   20046:	d11f      	bne.n	20088 <RADIO_FSKFifoLevel+0x64>
   20048:	0029      	movs	r1, r5
   2004a:	312c      	adds	r1, #44	; 0x2c
   2004c:	7808      	ldrb	r0, [r1, #0]
   2004e:	b2c0      	uxtb	r0, r0
   20050:	2800      	cmp	r0, #0
   20052:	d102      	bne.n	2005a <RADIO_FSKFifoLevel+0x36>
   20054:	2201      	movs	r2, #1
   20056:	4b18      	ldr	r3, [pc, #96]	; (200b8 <RADIO_FSKFifoLevel+0x94>)
   20058:	4798      	blx	r3
   2005a:	002e      	movs	r6, r5
   2005c:	002c      	movs	r4, r5
   2005e:	362c      	adds	r6, #44	; 0x2c
   20060:	3458      	adds	r4, #88	; 0x58
   20062:	7833      	ldrb	r3, [r6, #0]
   20064:	7822      	ldrb	r2, [r4, #0]
   20066:	1a9b      	subs	r3, r3, r2
   20068:	b2db      	uxtb	r3, r3
   2006a:	2b3e      	cmp	r3, #62	; 0x3e
   2006c:	d80f      	bhi.n	2008e <RADIO_FSKFifoLevel+0x6a>
   2006e:	7823      	ldrb	r3, [r4, #0]
   20070:	7832      	ldrb	r2, [r6, #0]
   20072:	7821      	ldrb	r1, [r4, #0]
   20074:	2000      	movs	r0, #0
   20076:	1a52      	subs	r2, r2, r1
   20078:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2007a:	b2d2      	uxtb	r2, r2
   2007c:	18c9      	adds	r1, r1, r3
   2007e:	4b0e      	ldr	r3, [pc, #56]	; (200b8 <RADIO_FSKFifoLevel+0x94>)
   20080:	4798      	blx	r3
   20082:	7833      	ldrb	r3, [r6, #0]
   20084:	b2db      	uxtb	r3, r3
   20086:	7023      	strb	r3, [r4, #0]
   20088:	4b0c      	ldr	r3, [pc, #48]	; (200bc <RADIO_FSKFifoLevel+0x98>)
   2008a:	4798      	blx	r3
   2008c:	bd70      	pop	{r4, r5, r6, pc}
   2008e:	7833      	ldrb	r3, [r6, #0]
   20090:	7822      	ldrb	r2, [r4, #0]
   20092:	1a9b      	subs	r3, r3, r2
   20094:	b2db      	uxtb	r3, r3
   20096:	2b3f      	cmp	r3, #63	; 0x3f
   20098:	d9f6      	bls.n	20088 <RADIO_FSKFifoLevel+0x64>
   2009a:	7823      	ldrb	r3, [r4, #0]
   2009c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   2009e:	223f      	movs	r2, #63	; 0x3f
   200a0:	18c9      	adds	r1, r1, r3
   200a2:	2000      	movs	r0, #0
   200a4:	4b04      	ldr	r3, [pc, #16]	; (200b8 <RADIO_FSKFifoLevel+0x94>)
   200a6:	4798      	blx	r3
   200a8:	7823      	ldrb	r3, [r4, #0]
   200aa:	333f      	adds	r3, #63	; 0x3f
   200ac:	e7ea      	b.n	20084 <RADIO_FSKFifoLevel+0x60>
   200ae:	46c0      	nop			; (mov r8, r8)
   200b0:	00000201 	.word	0x00000201
   200b4:	20001980 	.word	0x20001980
   200b8:	00006f3d 	.word	0x00006f3d
   200bc:	00000255 	.word	0x00000255

000200c0 <RADIO_FSKFifoEmpty>:
   200c0:	b510      	push	{r4, lr}
   200c2:	4b03      	ldr	r3, [pc, #12]	; (200d0 <RADIO_FSKFifoEmpty+0x10>)
   200c4:	7819      	ldrb	r1, [r3, #0]
   200c6:	4b03      	ldr	r3, [pc, #12]	; (200d4 <RADIO_FSKFifoEmpty+0x14>)
   200c8:	6818      	ldr	r0, [r3, #0]
   200ca:	4b03      	ldr	r3, [pc, #12]	; (200d8 <RADIO_FSKFifoEmpty+0x18>)
   200cc:	4798      	blx	r3
   200ce:	bd10      	pop	{r4, pc}
   200d0:	2000118c 	.word	0x2000118c
   200d4:	20001188 	.word	0x20001188
   200d8:	0001ff6d 	.word	0x0001ff6d

000200dc <RADIO_GetData>:
   200dc:	4b03      	ldr	r3, [pc, #12]	; (200ec <RADIO_GetData+0x10>)
   200de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   200e0:	332c      	adds	r3, #44	; 0x2c
   200e2:	6002      	str	r2, [r0, #0]
   200e4:	781b      	ldrb	r3, [r3, #0]
   200e6:	2000      	movs	r0, #0
   200e8:	800b      	strh	r3, [r1, #0]
   200ea:	4770      	bx	lr
   200ec:	20001980 	.word	0x20001980

000200f0 <Radio_EnableRfControl>:
   200f0:	b510      	push	{r4, lr}
   200f2:	4b08      	ldr	r3, [pc, #32]	; (20114 <Radio_EnableRfControl+0x24>)
   200f4:	0001      	movs	r1, r0
   200f6:	681a      	ldr	r2, [r3, #0]
   200f8:	4807      	ldr	r0, [pc, #28]	; (20118 <Radio_EnableRfControl+0x28>)
   200fa:	4c08      	ldr	r4, [pc, #32]	; (2011c <Radio_EnableRfControl+0x2c>)
   200fc:	1812      	adds	r2, r2, r0
   200fe:	2000      	movs	r0, #0
   20100:	42a2      	cmp	r2, r4
   20102:	d804      	bhi.n	2010e <Radio_EnableRfControl+0x1e>
   20104:	3305      	adds	r3, #5
   20106:	7fdb      	ldrb	r3, [r3, #31]
   20108:	1e58      	subs	r0, r3, #1
   2010a:	4183      	sbcs	r3, r0
   2010c:	1c58      	adds	r0, r3, #1
   2010e:	4b04      	ldr	r3, [pc, #16]	; (20120 <Radio_EnableRfControl+0x30>)
   20110:	4798      	blx	r3
   20112:	bd10      	pop	{r4, pc}
   20114:	20001980 	.word	0x20001980
   20118:	cc9eec80 	.word	0xcc9eec80
   2011c:	096ae380 	.word	0x096ae380
   20120:	000073e9 	.word	0x000073e9

00020124 <RADIO_RxHandler>:
   20124:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20126:	4b33      	ldr	r3, [pc, #204]	; (201f4 <RADIO_RxHandler+0xd0>)
   20128:	2000      	movs	r0, #0
   2012a:	4798      	blx	r3
   2012c:	4e32      	ldr	r6, [pc, #200]	; (201f8 <RADIO_RxHandler+0xd4>)
   2012e:	4b33      	ldr	r3, [pc, #204]	; (201fc <RADIO_RxHandler+0xd8>)
   20130:	8830      	ldrh	r0, [r6, #0]
   20132:	2800      	cmp	r0, #0
   20134:	d100      	bne.n	20138 <RADIO_RxHandler+0x14>
   20136:	3004      	adds	r0, #4
   20138:	4798      	blx	r3
   2013a:	4c31      	ldr	r4, [pc, #196]	; (20200 <RADIO_RxHandler+0xdc>)
   2013c:	4d31      	ldr	r5, [pc, #196]	; (20204 <RADIO_RxHandler+0xe0>)
   2013e:	0023      	movs	r3, r4
   20140:	3334      	adds	r3, #52	; 0x34
   20142:	7819      	ldrb	r1, [r3, #0]
   20144:	2901      	cmp	r1, #1
   20146:	d122      	bne.n	2018e <RADIO_RxHandler+0x6a>
   20148:	2022      	movs	r0, #34	; 0x22
   2014a:	47a8      	blx	r5
   2014c:	2100      	movs	r1, #0
   2014e:	2040      	movs	r0, #64	; 0x40
   20150:	47a8      	blx	r5
   20152:	2100      	movs	r1, #0
   20154:	2041      	movs	r0, #65	; 0x41
   20156:	47a8      	blx	r5
   20158:	8832      	ldrh	r2, [r6, #0]
   2015a:	4b2b      	ldr	r3, [pc, #172]	; (20208 <RADIO_RxHandler+0xe4>)
   2015c:	2a00      	cmp	r2, #0
   2015e:	d131      	bne.n	201c4 <RADIO_RxHandler+0xa0>
   20160:	0021      	movs	r1, r4
   20162:	2005      	movs	r0, #5
   20164:	3134      	adds	r1, #52	; 0x34
   20166:	7809      	ldrb	r1, [r1, #0]
   20168:	4798      	blx	r3
   2016a:	68e3      	ldr	r3, [r4, #12]
   2016c:	2b00      	cmp	r3, #0
   2016e:	d00c      	beq.n	2018a <RADIO_RxHandler+0x66>
   20170:	8832      	ldrh	r2, [r6, #0]
   20172:	2a00      	cmp	r2, #0
   20174:	d009      	beq.n	2018a <RADIO_RxHandler+0x66>
   20176:	21fa      	movs	r1, #250	; 0xfa
   20178:	2200      	movs	r2, #0
   2017a:	342f      	adds	r4, #47	; 0x2f
   2017c:	0089      	lsls	r1, r1, #2
   2017e:	7820      	ldrb	r0, [r4, #0]
   20180:	4359      	muls	r1, r3
   20182:	9200      	str	r2, [sp, #0]
   20184:	4b21      	ldr	r3, [pc, #132]	; (2020c <RADIO_RxHandler+0xe8>)
   20186:	4c22      	ldr	r4, [pc, #136]	; (20210 <RADIO_RxHandler+0xec>)
   20188:	47a0      	blx	r4
   2018a:	2000      	movs	r0, #0
   2018c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   2018e:	0023      	movs	r3, r4
   20190:	3338      	adds	r3, #56	; 0x38
   20192:	7819      	ldrb	r1, [r3, #0]
   20194:	2012      	movs	r0, #18
   20196:	47a8      	blx	r5
   20198:	0023      	movs	r3, r4
   2019a:	3339      	adds	r3, #57	; 0x39
   2019c:	7819      	ldrb	r1, [r3, #0]
   2019e:	2013      	movs	r0, #19
   201a0:	47a8      	blx	r5
   201a2:	210c      	movs	r1, #12
   201a4:	2040      	movs	r0, #64	; 0x40
   201a6:	47a8      	blx	r5
   201a8:	2100      	movs	r1, #0
   201aa:	2041      	movs	r0, #65	; 0x41
   201ac:	47a8      	blx	r5
   201ae:	0022      	movs	r2, r4
   201b0:	2300      	movs	r3, #0
   201b2:	3256      	adds	r2, #86	; 0x56
   201b4:	8013      	strh	r3, [r2, #0]
   201b6:	0022      	movs	r2, r4
   201b8:	322c      	adds	r2, #44	; 0x2c
   201ba:	7013      	strb	r3, [r2, #0]
   201bc:	0022      	movs	r2, r4
   201be:	3258      	adds	r2, #88	; 0x58
   201c0:	7013      	strb	r3, [r2, #0]
   201c2:	e7c9      	b.n	20158 <RADIO_RxHandler+0x34>
   201c4:	0022      	movs	r2, r4
   201c6:	3234      	adds	r2, #52	; 0x34
   201c8:	7811      	ldrb	r1, [r2, #0]
   201ca:	2200      	movs	r2, #0
   201cc:	2901      	cmp	r1, #1
   201ce:	d101      	bne.n	201d4 <RADIO_RxHandler+0xb0>
   201d0:	2006      	movs	r0, #6
   201d2:	e7c9      	b.n	20168 <RADIO_RxHandler+0x44>
   201d4:	0011      	movs	r1, r2
   201d6:	2005      	movs	r0, #5
   201d8:	4798      	blx	r3
   201da:	21fa      	movs	r1, #250	; 0xfa
   201dc:	8833      	ldrh	r3, [r6, #0]
   201de:	0089      	lsls	r1, r1, #2
   201e0:	4359      	muls	r1, r3
   201e2:	0023      	movs	r3, r4
   201e4:	2200      	movs	r2, #0
   201e6:	332e      	adds	r3, #46	; 0x2e
   201e8:	7818      	ldrb	r0, [r3, #0]
   201ea:	4d09      	ldr	r5, [pc, #36]	; (20210 <RADIO_RxHandler+0xec>)
   201ec:	9200      	str	r2, [sp, #0]
   201ee:	4b09      	ldr	r3, [pc, #36]	; (20214 <RADIO_RxHandler+0xf0>)
   201f0:	47a8      	blx	r5
   201f2:	e7ba      	b.n	2016a <RADIO_RxHandler+0x46>
   201f4:	000200f1 	.word	0x000200f1
   201f8:	2000117a 	.word	0x2000117a
   201fc:	0001f87d 	.word	0x0001f87d
   20200:	20001980 	.word	0x20001980
   20204:	00006e21 	.word	0x00006e21
   20208:	00016315 	.word	0x00016315
   2020c:	0002024d 	.word	0x0002024d
   20210:	000159bd 	.word	0x000159bd
   20214:	000202dd 	.word	0x000202dd

00020218 <Radio_DisableRfControl>:
   20218:	b510      	push	{r4, lr}
   2021a:	4b08      	ldr	r3, [pc, #32]	; (2023c <Radio_DisableRfControl+0x24>)
   2021c:	0001      	movs	r1, r0
   2021e:	681a      	ldr	r2, [r3, #0]
   20220:	4807      	ldr	r0, [pc, #28]	; (20240 <Radio_DisableRfControl+0x28>)
   20222:	4c08      	ldr	r4, [pc, #32]	; (20244 <Radio_DisableRfControl+0x2c>)
   20224:	1812      	adds	r2, r2, r0
   20226:	2000      	movs	r0, #0
   20228:	42a2      	cmp	r2, r4
   2022a:	d804      	bhi.n	20236 <Radio_DisableRfControl+0x1e>
   2022c:	3305      	adds	r3, #5
   2022e:	7fdb      	ldrb	r3, [r3, #31]
   20230:	1e58      	subs	r0, r3, #1
   20232:	4183      	sbcs	r3, r0
   20234:	1c58      	adds	r0, r3, #1
   20236:	4b04      	ldr	r3, [pc, #16]	; (20248 <Radio_DisableRfControl+0x30>)
   20238:	4798      	blx	r3
   2023a:	bd10      	pop	{r4, pc}
   2023c:	20001980 	.word	0x20001980
   20240:	cc9eec80 	.word	0xcc9eec80
   20244:	096ae380 	.word	0x096ae380
   20248:	00007439 	.word	0x00007439

0002024c <Radio_WatchdogTimeout>:
   2024c:	b510      	push	{r4, lr}
   2024e:	4b0e      	ldr	r3, [pc, #56]	; (20288 <Radio_WatchdogTimeout+0x3c>)
   20250:	781a      	ldrb	r2, [r3, #0]
   20252:	2a04      	cmp	r2, #4
   20254:	d10b      	bne.n	2026e <Radio_WatchdogTimeout+0x22>
   20256:	2320      	movs	r3, #32
   20258:	4a0c      	ldr	r2, [pc, #48]	; (2028c <Radio_WatchdogTimeout+0x40>)
   2025a:	2000      	movs	r0, #0
   2025c:	8811      	ldrh	r1, [r2, #0]
   2025e:	430b      	orrs	r3, r1
   20260:	8013      	strh	r3, [r2, #0]
   20262:	4b0b      	ldr	r3, [pc, #44]	; (20290 <Radio_WatchdogTimeout+0x44>)
   20264:	4798      	blx	r3
   20266:	2002      	movs	r0, #2
   20268:	4b0a      	ldr	r3, [pc, #40]	; (20294 <Radio_WatchdogTimeout+0x48>)
   2026a:	4798      	blx	r3
   2026c:	bd10      	pop	{r4, pc}
   2026e:	781b      	ldrb	r3, [r3, #0]
   20270:	2b02      	cmp	r3, #2
   20272:	d1fb      	bne.n	2026c <Radio_WatchdogTimeout+0x20>
   20274:	4a05      	ldr	r2, [pc, #20]	; (2028c <Radio_WatchdogTimeout+0x40>)
   20276:	330e      	adds	r3, #14
   20278:	8811      	ldrh	r1, [r2, #0]
   2027a:	2001      	movs	r0, #1
   2027c:	430b      	orrs	r3, r1
   2027e:	8013      	strh	r3, [r2, #0]
   20280:	4b03      	ldr	r3, [pc, #12]	; (20290 <Radio_WatchdogTimeout+0x44>)
   20282:	4798      	blx	r3
   20284:	2001      	movs	r0, #1
   20286:	e7ef      	b.n	20268 <Radio_WatchdogTimeout+0x1c>
   20288:	20002047 	.word	0x20002047
   2028c:	20002044 	.word	0x20002044
   20290:	00020219 	.word	0x00020219
   20294:	0001fe3d 	.word	0x0001fe3d

00020298 <RADIO_RxTimeout>:
   20298:	b510      	push	{r4, lr}
   2029a:	4b0a      	ldr	r3, [pc, #40]	; (202c4 <RADIO_RxTimeout+0x2c>)
   2029c:	332f      	adds	r3, #47	; 0x2f
   2029e:	7818      	ldrb	r0, [r3, #0]
   202a0:	4b09      	ldr	r3, [pc, #36]	; (202c8 <RADIO_RxTimeout+0x30>)
   202a2:	4798      	blx	r3
   202a4:	2000      	movs	r0, #0
   202a6:	4b09      	ldr	r3, [pc, #36]	; (202cc <RADIO_RxTimeout+0x34>)
   202a8:	4798      	blx	r3
   202aa:	2180      	movs	r1, #128	; 0x80
   202ac:	2012      	movs	r0, #18
   202ae:	4b08      	ldr	r3, [pc, #32]	; (202d0 <RADIO_RxTimeout+0x38>)
   202b0:	4798      	blx	r3
   202b2:	2340      	movs	r3, #64	; 0x40
   202b4:	4a07      	ldr	r2, [pc, #28]	; (202d4 <RADIO_RxTimeout+0x3c>)
   202b6:	2002      	movs	r0, #2
   202b8:	8811      	ldrh	r1, [r2, #0]
   202ba:	430b      	orrs	r3, r1
   202bc:	8013      	strh	r3, [r2, #0]
   202be:	4b06      	ldr	r3, [pc, #24]	; (202d8 <RADIO_RxTimeout+0x40>)
   202c0:	4798      	blx	r3
   202c2:	bd10      	pop	{r4, pc}
   202c4:	20001980 	.word	0x20001980
   202c8:	00015cfd 	.word	0x00015cfd
   202cc:	00020219 	.word	0x00020219
   202d0:	00006e21 	.word	0x00006e21
   202d4:	20002044 	.word	0x20002044
   202d8:	0001fe3d 	.word	0x0001fe3d

000202dc <Radio_RxFSKTimeout>:
   202dc:	b510      	push	{r4, lr}
   202de:	4b08      	ldr	r3, [pc, #32]	; (20300 <Radio_RxFSKTimeout+0x24>)
   202e0:	332f      	adds	r3, #47	; 0x2f
   202e2:	7818      	ldrb	r0, [r3, #0]
   202e4:	4b07      	ldr	r3, [pc, #28]	; (20304 <Radio_RxFSKTimeout+0x28>)
   202e6:	4798      	blx	r3
   202e8:	2000      	movs	r0, #0
   202ea:	4b07      	ldr	r3, [pc, #28]	; (20308 <Radio_RxFSKTimeout+0x2c>)
   202ec:	4798      	blx	r3
   202ee:	2380      	movs	r3, #128	; 0x80
   202f0:	4a06      	ldr	r2, [pc, #24]	; (2030c <Radio_RxFSKTimeout+0x30>)
   202f2:	2002      	movs	r0, #2
   202f4:	8811      	ldrh	r1, [r2, #0]
   202f6:	430b      	orrs	r3, r1
   202f8:	8013      	strh	r3, [r2, #0]
   202fa:	4b05      	ldr	r3, [pc, #20]	; (20310 <Radio_RxFSKTimeout+0x34>)
   202fc:	4798      	blx	r3
   202fe:	bd10      	pop	{r4, pc}
   20300:	20001980 	.word	0x20001980
   20304:	00015cfd 	.word	0x00015cfd
   20308:	00020219 	.word	0x00020219
   2030c:	20002044 	.word	0x20002044
   20310:	0001fe3d 	.word	0x0001fe3d

00020314 <RADIO_TxDone>:
   20314:	b570      	push	{r4, r5, r6, lr}
   20316:	4b14      	ldr	r3, [pc, #80]	; (20368 <RADIO_TxDone+0x54>)
   20318:	332f      	adds	r3, #47	; 0x2f
   2031a:	7818      	ldrb	r0, [r3, #0]
   2031c:	4b13      	ldr	r3, [pc, #76]	; (2036c <RADIO_TxDone+0x58>)
   2031e:	4798      	blx	r3
   20320:	2001      	movs	r0, #1
   20322:	4b13      	ldr	r3, [pc, #76]	; (20370 <RADIO_TxDone+0x5c>)
   20324:	4798      	blx	r3
   20326:	4b13      	ldr	r3, [pc, #76]	; (20374 <RADIO_TxDone+0x60>)
   20328:	2108      	movs	r1, #8
   2032a:	2012      	movs	r0, #18
   2032c:	4798      	blx	r3
   2032e:	4b12      	ldr	r3, [pc, #72]	; (20378 <RADIO_TxDone+0x64>)
   20330:	781a      	ldrb	r2, [r3, #0]
   20332:	4b12      	ldr	r3, [pc, #72]	; (2037c <RADIO_TxDone+0x68>)
   20334:	2a02      	cmp	r2, #2
   20336:	d002      	beq.n	2033e <RADIO_TxDone+0x2a>
   20338:	881a      	ldrh	r2, [r3, #0]
   2033a:	0692      	lsls	r2, r2, #26
   2033c:	d413      	bmi.n	20366 <RADIO_TxDone+0x52>
   2033e:	2001      	movs	r0, #1
   20340:	881a      	ldrh	r2, [r3, #0]
   20342:	4302      	orrs	r2, r0
   20344:	801a      	strh	r2, [r3, #0]
   20346:	4b0e      	ldr	r3, [pc, #56]	; (20380 <RADIO_TxDone+0x6c>)
   20348:	4798      	blx	r3
   2034a:	4b0e      	ldr	r3, [pc, #56]	; (20384 <RADIO_TxDone+0x70>)
   2034c:	4798      	blx	r3
   2034e:	4c0e      	ldr	r4, [pc, #56]	; (20388 <RADIO_TxDone+0x74>)
   20350:	4d0e      	ldr	r5, [pc, #56]	; (2038c <RADIO_TxDone+0x78>)
   20352:	6822      	ldr	r2, [r4, #0]
   20354:	6863      	ldr	r3, [r4, #4]
   20356:	1a80      	subs	r0, r0, r2
   20358:	4199      	sbcs	r1, r3
   2035a:	22fa      	movs	r2, #250	; 0xfa
   2035c:	2300      	movs	r3, #0
   2035e:	0092      	lsls	r2, r2, #2
   20360:	47a8      	blx	r5
   20362:	6020      	str	r0, [r4, #0]
   20364:	6061      	str	r1, [r4, #4]
   20366:	bd70      	pop	{r4, r5, r6, pc}
   20368:	20001980 	.word	0x20001980
   2036c:	00015cfd 	.word	0x00015cfd
   20370:	00020219 	.word	0x00020219
   20374:	00006e21 	.word	0x00006e21
   20378:	20002047 	.word	0x20002047
   2037c:	20002044 	.word	0x20002044
   20380:	0001fe3d 	.word	0x0001fe3d
   20384:	0001594d 	.word	0x0001594d
   20388:	20001180 	.word	0x20001180
   2038c:	00021445 	.word	0x00021445

00020390 <RADIO_FSKPacketSent>:
   20390:	b570      	push	{r4, r5, r6, lr}
   20392:	4b15      	ldr	r3, [pc, #84]	; (203e8 <RADIO_FSKPacketSent+0x58>)
   20394:	203f      	movs	r0, #63	; 0x3f
   20396:	4798      	blx	r3
   20398:	0703      	lsls	r3, r0, #28
   2039a:	d524      	bpl.n	203e6 <RADIO_FSKPacketSent+0x56>
   2039c:	4b13      	ldr	r3, [pc, #76]	; (203ec <RADIO_FSKPacketSent+0x5c>)
   2039e:	332f      	adds	r3, #47	; 0x2f
   203a0:	7818      	ldrb	r0, [r3, #0]
   203a2:	4b13      	ldr	r3, [pc, #76]	; (203f0 <RADIO_FSKPacketSent+0x60>)
   203a4:	4798      	blx	r3
   203a6:	4b13      	ldr	r3, [pc, #76]	; (203f4 <RADIO_FSKPacketSent+0x64>)
   203a8:	2001      	movs	r0, #1
   203aa:	4798      	blx	r3
   203ac:	4b12      	ldr	r3, [pc, #72]	; (203f8 <RADIO_FSKPacketSent+0x68>)
   203ae:	4c13      	ldr	r4, [pc, #76]	; (203fc <RADIO_FSKPacketSent+0x6c>)
   203b0:	781b      	ldrb	r3, [r3, #0]
   203b2:	2b02      	cmp	r3, #2
   203b4:	d002      	beq.n	203bc <RADIO_FSKPacketSent+0x2c>
   203b6:	8823      	ldrh	r3, [r4, #0]
   203b8:	069b      	lsls	r3, r3, #26
   203ba:	d414      	bmi.n	203e6 <RADIO_FSKPacketSent+0x56>
   203bc:	4b10      	ldr	r3, [pc, #64]	; (20400 <RADIO_FSKPacketSent+0x70>)
   203be:	4798      	blx	r3
   203c0:	4d10      	ldr	r5, [pc, #64]	; (20404 <RADIO_FSKPacketSent+0x74>)
   203c2:	4e11      	ldr	r6, [pc, #68]	; (20408 <RADIO_FSKPacketSent+0x78>)
   203c4:	682a      	ldr	r2, [r5, #0]
   203c6:	686b      	ldr	r3, [r5, #4]
   203c8:	1a80      	subs	r0, r0, r2
   203ca:	4199      	sbcs	r1, r3
   203cc:	22fa      	movs	r2, #250	; 0xfa
   203ce:	2300      	movs	r3, #0
   203d0:	0092      	lsls	r2, r2, #2
   203d2:	47b0      	blx	r6
   203d4:	4b0d      	ldr	r3, [pc, #52]	; (2040c <RADIO_FSKPacketSent+0x7c>)
   203d6:	6028      	str	r0, [r5, #0]
   203d8:	6069      	str	r1, [r5, #4]
   203da:	2001      	movs	r0, #1
   203dc:	4798      	blx	r3
   203de:	2304      	movs	r3, #4
   203e0:	8822      	ldrh	r2, [r4, #0]
   203e2:	4313      	orrs	r3, r2
   203e4:	8023      	strh	r3, [r4, #0]
   203e6:	bd70      	pop	{r4, r5, r6, pc}
   203e8:	00006e6d 	.word	0x00006e6d
   203ec:	20001980 	.word	0x20001980
   203f0:	00015cfd 	.word	0x00015cfd
   203f4:	00020219 	.word	0x00020219
   203f8:	20002047 	.word	0x20002047
   203fc:	20002044 	.word	0x20002044
   20400:	0001594d 	.word	0x0001594d
   20404:	20001180 	.word	0x20001180
   20408:	00021445 	.word	0x00021445
   2040c:	0001fe3d 	.word	0x0001fe3d

00020410 <RADIO_RxDone>:
   20410:	b570      	push	{r4, r5, r6, lr}
   20412:	2012      	movs	r0, #18
   20414:	4e16      	ldr	r6, [pc, #88]	; (20470 <RADIO_RxDone+0x60>)
   20416:	47b0      	blx	r6
   20418:	4b16      	ldr	r3, [pc, #88]	; (20474 <RADIO_RxDone+0x64>)
   2041a:	0005      	movs	r5, r0
   2041c:	2170      	movs	r1, #112	; 0x70
   2041e:	2012      	movs	r0, #18
   20420:	4798      	blx	r3
   20422:	2350      	movs	r3, #80	; 0x50
   20424:	402b      	ands	r3, r5
   20426:	2b50      	cmp	r3, #80	; 0x50
   20428:	d119      	bne.n	2045e <RADIO_RxDone+0x4e>
   2042a:	4c13      	ldr	r4, [pc, #76]	; (20478 <RADIO_RxDone+0x68>)
   2042c:	0023      	movs	r3, r4
   2042e:	332f      	adds	r3, #47	; 0x2f
   20430:	7818      	ldrb	r0, [r3, #0]
   20432:	4b12      	ldr	r3, [pc, #72]	; (2047c <RADIO_RxDone+0x6c>)
   20434:	4798      	blx	r3
   20436:	4b12      	ldr	r3, [pc, #72]	; (20480 <RADIO_RxDone+0x70>)
   20438:	2000      	movs	r0, #0
   2043a:	4798      	blx	r3
   2043c:	3404      	adds	r4, #4
   2043e:	201c      	movs	r0, #28
   20440:	47b0      	blx	r6
   20442:	7fe2      	ldrb	r2, [r4, #31]
   20444:	4b0f      	ldr	r3, [pc, #60]	; (20484 <RADIO_RxDone+0x74>)
   20446:	4910      	ldr	r1, [pc, #64]	; (20488 <RADIO_RxDone+0x78>)
   20448:	2a00      	cmp	r2, #0
   2044a:	d003      	beq.n	20454 <RADIO_RxDone+0x44>
   2044c:	06aa      	lsls	r2, r5, #26
   2044e:	d407      	bmi.n	20460 <RADIO_RxDone+0x50>
   20450:	0642      	lsls	r2, r0, #25
   20452:	d505      	bpl.n	20460 <RADIO_RxDone+0x50>
   20454:	2002      	movs	r0, #2
   20456:	881a      	ldrh	r2, [r3, #0]
   20458:	4302      	orrs	r2, r0
   2045a:	801a      	strh	r2, [r3, #0]
   2045c:	4788      	blx	r1
   2045e:	bd70      	pop	{r4, r5, r6, pc}
   20460:	2280      	movs	r2, #128	; 0x80
   20462:	8818      	ldrh	r0, [r3, #0]
   20464:	0052      	lsls	r2, r2, #1
   20466:	4302      	orrs	r2, r0
   20468:	801a      	strh	r2, [r3, #0]
   2046a:	2002      	movs	r0, #2
   2046c:	e7f6      	b.n	2045c <RADIO_RxDone+0x4c>
   2046e:	46c0      	nop			; (mov r8, r8)
   20470:	00006e6d 	.word	0x00006e6d
   20474:	00006e21 	.word	0x00006e21
   20478:	20001980 	.word	0x20001980
   2047c:	00015cfd 	.word	0x00015cfd
   20480:	00020219 	.word	0x00020219
   20484:	20002044 	.word	0x20002044
   20488:	0001fe3d 	.word	0x0001fe3d

0002048c <RADIO_FSKPayloadReady>:
   2048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2048e:	203f      	movs	r0, #63	; 0x3f
   20490:	4b39      	ldr	r3, [pc, #228]	; (20578 <RADIO_FSKPayloadReady+0xec>)
   20492:	4798      	blx	r3
   20494:	0743      	lsls	r3, r0, #29
   20496:	d559      	bpl.n	2054c <RADIO_FSKPayloadReady+0xc0>
   20498:	4c38      	ldr	r4, [pc, #224]	; (2057c <RADIO_FSKPayloadReady+0xf0>)
   2049a:	4d39      	ldr	r5, [pc, #228]	; (20580 <RADIO_FSKPayloadReady+0xf4>)
   2049c:	1d23      	adds	r3, r4, #4
   2049e:	7fdb      	ldrb	r3, [r3, #31]
   204a0:	2b01      	cmp	r3, #1
   204a2:	d154      	bne.n	2054e <RADIO_FSKPayloadReady+0xc2>
   204a4:	2202      	movs	r2, #2
   204a6:	4210      	tst	r0, r2
   204a8:	d048      	beq.n	2053c <RADIO_FSKPayloadReady+0xb0>
   204aa:	0023      	movs	r3, r4
   204ac:	332f      	adds	r3, #47	; 0x2f
   204ae:	7818      	ldrb	r0, [r3, #0]
   204b0:	4e34      	ldr	r6, [pc, #208]	; (20584 <RADIO_FSKPayloadReady+0xf8>)
   204b2:	47b0      	blx	r6
   204b4:	0023      	movs	r3, r4
   204b6:	332e      	adds	r3, #46	; 0x2e
   204b8:	7818      	ldrb	r0, [r3, #0]
   204ba:	47b0      	blx	r6
   204bc:	4b32      	ldr	r3, [pc, #200]	; (20588 <RADIO_FSKPayloadReady+0xfc>)
   204be:	4798      	blx	r3
   204c0:	0022      	movs	r2, r4
   204c2:	0023      	movs	r3, r4
   204c4:	322c      	adds	r2, #44	; 0x2c
   204c6:	3358      	adds	r3, #88	; 0x58
   204c8:	7810      	ldrb	r0, [r2, #0]
   204ca:	7819      	ldrb	r1, [r3, #0]
   204cc:	4288      	cmp	r0, r1
   204ce:	d105      	bne.n	204dc <RADIO_FSKPayloadReady+0x50>
   204d0:	7812      	ldrb	r2, [r2, #0]
   204d2:	2a00      	cmp	r2, #0
   204d4:	d002      	beq.n	204dc <RADIO_FSKPayloadReady+0x50>
   204d6:	781b      	ldrb	r3, [r3, #0]
   204d8:	2b00      	cmp	r3, #0
   204da:	d118      	bne.n	2050e <RADIO_FSKPayloadReady+0x82>
   204dc:	0021      	movs	r1, r4
   204de:	312c      	adds	r1, #44	; 0x2c
   204e0:	7808      	ldrb	r0, [r1, #0]
   204e2:	b2c0      	uxtb	r0, r0
   204e4:	2800      	cmp	r0, #0
   204e6:	d102      	bne.n	204ee <RADIO_FSKPayloadReady+0x62>
   204e8:	2201      	movs	r2, #1
   204ea:	4b28      	ldr	r3, [pc, #160]	; (2058c <RADIO_FSKPayloadReady+0x100>)
   204ec:	4798      	blx	r3
   204ee:	0026      	movs	r6, r4
   204f0:	0027      	movs	r7, r4
   204f2:	3658      	adds	r6, #88	; 0x58
   204f4:	7830      	ldrb	r0, [r6, #0]
   204f6:	372c      	adds	r7, #44	; 0x2c
   204f8:	b2c0      	uxtb	r0, r0
   204fa:	2800      	cmp	r0, #0
   204fc:	d110      	bne.n	20520 <RADIO_FSKPayloadReady+0x94>
   204fe:	783a      	ldrb	r2, [r7, #0]
   20500:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   20502:	b2d2      	uxtb	r2, r2
   20504:	4b21      	ldr	r3, [pc, #132]	; (2058c <RADIO_FSKPayloadReady+0x100>)
   20506:	4798      	blx	r3
   20508:	783b      	ldrb	r3, [r7, #0]
   2050a:	b2db      	uxtb	r3, r3
   2050c:	7033      	strb	r3, [r6, #0]
   2050e:	4b20      	ldr	r3, [pc, #128]	; (20590 <RADIO_FSKPayloadReady+0x104>)
   20510:	4798      	blx	r3
   20512:	4b20      	ldr	r3, [pc, #128]	; (20594 <RADIO_FSKPayloadReady+0x108>)
   20514:	2000      	movs	r0, #0
   20516:	4798      	blx	r3
   20518:	2308      	movs	r3, #8
   2051a:	882a      	ldrh	r2, [r5, #0]
   2051c:	4313      	orrs	r3, r2
   2051e:	e011      	b.n	20544 <RADIO_FSKPayloadReady+0xb8>
   20520:	783b      	ldrb	r3, [r7, #0]
   20522:	7832      	ldrb	r2, [r6, #0]
   20524:	1a9b      	subs	r3, r3, r2
   20526:	2b00      	cmp	r3, #0
   20528:	ddf1      	ble.n	2050e <RADIO_FSKPayloadReady+0x82>
   2052a:	7833      	ldrb	r3, [r6, #0]
   2052c:	783a      	ldrb	r2, [r7, #0]
   2052e:	7831      	ldrb	r1, [r6, #0]
   20530:	2000      	movs	r0, #0
   20532:	1a52      	subs	r2, r2, r1
   20534:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   20536:	b2d2      	uxtb	r2, r2
   20538:	18c9      	adds	r1, r1, r3
   2053a:	e7e3      	b.n	20504 <RADIO_FSKPayloadReady+0x78>
   2053c:	2380      	movs	r3, #128	; 0x80
   2053e:	8829      	ldrh	r1, [r5, #0]
   20540:	005b      	lsls	r3, r3, #1
   20542:	430b      	orrs	r3, r1
   20544:	802b      	strh	r3, [r5, #0]
   20546:	2002      	movs	r0, #2
   20548:	4b13      	ldr	r3, [pc, #76]	; (20598 <RADIO_FSKPayloadReady+0x10c>)
   2054a:	4798      	blx	r3
   2054c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2054e:	0023      	movs	r3, r4
   20550:	332f      	adds	r3, #47	; 0x2f
   20552:	4e0c      	ldr	r6, [pc, #48]	; (20584 <RADIO_FSKPayloadReady+0xf8>)
   20554:	7818      	ldrb	r0, [r3, #0]
   20556:	47b0      	blx	r6
   20558:	0023      	movs	r3, r4
   2055a:	332e      	adds	r3, #46	; 0x2e
   2055c:	7818      	ldrb	r0, [r3, #0]
   2055e:	47b0      	blx	r6
   20560:	4e0e      	ldr	r6, [pc, #56]	; (2059c <RADIO_FSKPayloadReady+0x110>)
   20562:	2201      	movs	r2, #1
   20564:	0031      	movs	r1, r6
   20566:	2000      	movs	r0, #0
   20568:	4f08      	ldr	r7, [pc, #32]	; (2058c <RADIO_FSKPayloadReady+0x100>)
   2056a:	47b8      	blx	r7
   2056c:	7832      	ldrb	r2, [r6, #0]
   2056e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   20570:	b2d2      	uxtb	r2, r2
   20572:	2000      	movs	r0, #0
   20574:	47b8      	blx	r7
   20576:	e7cc      	b.n	20512 <RADIO_FSKPayloadReady+0x86>
   20578:	00006e6d 	.word	0x00006e6d
   2057c:	20001980 	.word	0x20001980
   20580:	20002044 	.word	0x20002044
   20584:	00015cfd 	.word	0x00015cfd
   20588:	00000201 	.word	0x00000201
   2058c:	00006f3d 	.word	0x00006f3d
   20590:	00000255 	.word	0x00000255
   20594:	00020219 	.word	0x00020219
   20598:	0001fe3d 	.word	0x0001fe3d
   2059c:	200019ac 	.word	0x200019ac

000205a0 <Radio_SetClockInput>:
   205a0:	b510      	push	{r4, lr}
   205a2:	4b08      	ldr	r3, [pc, #32]	; (205c4 <Radio_SetClockInput+0x24>)
   205a4:	3355      	adds	r3, #85	; 0x55
   205a6:	781b      	ldrb	r3, [r3, #0]
   205a8:	2b00      	cmp	r3, #0
   205aa:	d10a      	bne.n	205c2 <Radio_SetClockInput+0x22>
   205ac:	4b06      	ldr	r3, [pc, #24]	; (205c8 <Radio_SetClockInput+0x28>)
   205ae:	204b      	movs	r0, #75	; 0x4b
   205b0:	4798      	blx	r3
   205b2:	2110      	movs	r1, #16
   205b4:	4301      	orrs	r1, r0
   205b6:	4b05      	ldr	r3, [pc, #20]	; (205cc <Radio_SetClockInput+0x2c>)
   205b8:	b2c9      	uxtb	r1, r1
   205ba:	204b      	movs	r0, #75	; 0x4b
   205bc:	4798      	blx	r3
   205be:	4b04      	ldr	r3, [pc, #16]	; (205d0 <Radio_SetClockInput+0x30>)
   205c0:	4798      	blx	r3
   205c2:	bd10      	pop	{r4, pc}
   205c4:	20001980 	.word	0x20001980
   205c8:	00006e6d 	.word	0x00006e6d
   205cc:	00006e21 	.word	0x00006e21
   205d0:	00007489 	.word	0x00007489

000205d4 <RADIO_TransmitCW>:
   205d4:	b570      	push	{r4, r5, r6, lr}
   205d6:	4b10      	ldr	r3, [pc, #64]	; (20618 <RADIO_TransmitCW+0x44>)
   205d8:	2504      	movs	r5, #4
   205da:	781c      	ldrb	r4, [r3, #0]
   205dc:	b2e4      	uxtb	r4, r4
   205de:	2c01      	cmp	r4, #1
   205e0:	d118      	bne.n	20614 <RADIO_TransmitCW+0x40>
   205e2:	0020      	movs	r0, r4
   205e4:	4b0d      	ldr	r3, [pc, #52]	; (2061c <RADIO_TransmitCW+0x48>)
   205e6:	4798      	blx	r3
   205e8:	4b0d      	ldr	r3, [pc, #52]	; (20620 <RADIO_TransmitCW+0x4c>)
   205ea:	4798      	blx	r3
   205ec:	4b0d      	ldr	r3, [pc, #52]	; (20624 <RADIO_TransmitCW+0x50>)
   205ee:	0028      	movs	r0, r5
   205f0:	3334      	adds	r3, #52	; 0x34
   205f2:	701c      	strb	r4, [r3, #0]
   205f4:	4b0c      	ldr	r3, [pc, #48]	; (20628 <RADIO_TransmitCW+0x54>)
   205f6:	4798      	blx	r3
   205f8:	4d0c      	ldr	r5, [pc, #48]	; (2062c <RADIO_TransmitCW+0x58>)
   205fa:	21a1      	movs	r1, #161	; 0xa1
   205fc:	203d      	movs	r0, #61	; 0x3d
   205fe:	47a8      	blx	r5
   20600:	0021      	movs	r1, r4
   20602:	2036      	movs	r0, #54	; 0x36
   20604:	47a8      	blx	r5
   20606:	2108      	movs	r1, #8
   20608:	201e      	movs	r0, #30
   2060a:	47a8      	blx	r5
   2060c:	218b      	movs	r1, #139	; 0x8b
   2060e:	0020      	movs	r0, r4
   20610:	47a8      	blx	r5
   20612:	2500      	movs	r5, #0
   20614:	0028      	movs	r0, r5
   20616:	bd70      	pop	{r4, r5, r6, pc}
   20618:	20002047 	.word	0x20002047
   2061c:	000200f1 	.word	0x000200f1
   20620:	000205a1 	.word	0x000205a1
   20624:	20001980 	.word	0x20001980
   20628:	0001f87d 	.word	0x0001f87d
   2062c:	00006e21 	.word	0x00006e21

00020630 <Radio_ResetClockInput>:
   20630:	b510      	push	{r4, lr}
   20632:	4b04      	ldr	r3, [pc, #16]	; (20644 <Radio_ResetClockInput+0x14>)
   20634:	3355      	adds	r3, #85	; 0x55
   20636:	781b      	ldrb	r3, [r3, #0]
   20638:	2b00      	cmp	r3, #0
   2063a:	d101      	bne.n	20640 <Radio_ResetClockInput+0x10>
   2063c:	4b02      	ldr	r3, [pc, #8]	; (20648 <Radio_ResetClockInput+0x18>)
   2063e:	4798      	blx	r3
   20640:	bd10      	pop	{r4, pc}
   20642:	46c0      	nop			; (mov r8, r8)
   20644:	20001980 	.word	0x20001980
   20648:	000074a9 	.word	0x000074a9

0002064c <RADIO_StopCW>:
   2064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2064e:	4b0e      	ldr	r3, [pc, #56]	; (20688 <RADIO_StopCW+0x3c>)
   20650:	2004      	movs	r0, #4
   20652:	781c      	ldrb	r4, [r3, #0]
   20654:	b2e4      	uxtb	r4, r4
   20656:	2c01      	cmp	r4, #1
   20658:	d115      	bne.n	20686 <RADIO_StopCW+0x3a>
   2065a:	4d0c      	ldr	r5, [pc, #48]	; (2068c <RADIO_StopCW+0x40>)
   2065c:	2200      	movs	r2, #0
   2065e:	3534      	adds	r5, #52	; 0x34
   20660:	7829      	ldrb	r1, [r5, #0]
   20662:	0020      	movs	r0, r4
   20664:	4f0a      	ldr	r7, [pc, #40]	; (20690 <RADIO_StopCW+0x44>)
   20666:	47b8      	blx	r7
   20668:	2064      	movs	r0, #100	; 0x64
   2066a:	4e0a      	ldr	r6, [pc, #40]	; (20694 <RADIO_StopCW+0x48>)
   2066c:	47b0      	blx	r6
   2066e:	2200      	movs	r2, #0
   20670:	7829      	ldrb	r1, [r5, #0]
   20672:	0010      	movs	r0, r2
   20674:	47b8      	blx	r7
   20676:	2064      	movs	r0, #100	; 0x64
   20678:	47b0      	blx	r6
   2067a:	0020      	movs	r0, r4
   2067c:	4b06      	ldr	r3, [pc, #24]	; (20698 <RADIO_StopCW+0x4c>)
   2067e:	4798      	blx	r3
   20680:	4b06      	ldr	r3, [pc, #24]	; (2069c <RADIO_StopCW+0x50>)
   20682:	4798      	blx	r3
   20684:	2000      	movs	r0, #0
   20686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20688:	20002047 	.word	0x20002047
   2068c:	20001980 	.word	0x20001980
   20690:	00016315 	.word	0x00016315
   20694:	000076b1 	.word	0x000076b1
   20698:	00020219 	.word	0x00020219
   2069c:	00020631 	.word	0x00020631

000206a0 <RADIO_InitDefaultAttributes>:
   206a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206a2:	2501      	movs	r5, #1
   206a4:	4b64      	ldr	r3, [pc, #400]	; (20838 <RADIO_InitDefaultAttributes+0x198>)
   206a6:	4c65      	ldr	r4, [pc, #404]	; (2083c <RADIO_InitDefaultAttributes+0x19c>)
   206a8:	701d      	strb	r5, [r3, #0]
   206aa:	4b65      	ldr	r3, [pc, #404]	; (20840 <RADIO_InitDefaultAttributes+0x1a0>)
   206ac:	2207      	movs	r2, #7
   206ae:	6023      	str	r3, [r4, #0]
   206b0:	4b64      	ldr	r3, [pc, #400]	; (20844 <RADIO_InitDefaultAttributes+0x1a4>)
   206b2:	18a1      	adds	r1, r4, r2
   206b4:	6063      	str	r3, [r4, #4]
   206b6:	4b64      	ldr	r3, [pc, #400]	; (20848 <RADIO_InitDefaultAttributes+0x1a8>)
   206b8:	0027      	movs	r7, r4
   206ba:	60a3      	str	r3, [r4, #8]
   206bc:	0023      	movs	r3, r4
   206be:	3334      	adds	r3, #52	; 0x34
   206c0:	701d      	strb	r5, [r3, #0]
   206c2:	0023      	movs	r3, r4
   206c4:	3336      	adds	r3, #54	; 0x36
   206c6:	701a      	strb	r2, [r3, #0]
   206c8:	1ce3      	adds	r3, r4, #3
   206ca:	77dd      	strb	r5, [r3, #31]
   206cc:	0023      	movs	r3, r4
   206ce:	3333      	adds	r3, #51	; 0x33
   206d0:	701d      	strb	r5, [r3, #0]
   206d2:	2300      	movs	r3, #0
   206d4:	77cb      	strb	r3, [r1, #31]
   206d6:	2108      	movs	r1, #8
   206d8:	82a1      	strh	r1, [r4, #20]
   206da:	0021      	movs	r1, r4
   206dc:	3135      	adds	r1, #53	; 0x35
   206de:	700a      	strb	r2, [r1, #0]
   206e0:	1d22      	adds	r2, r4, #4
   206e2:	77d5      	strb	r5, [r2, #31]
   206e4:	1d62      	adds	r2, r4, #5
   206e6:	77d3      	strb	r3, [r2, #31]
   206e8:	1da2      	adds	r2, r4, #6
   206ea:	77d3      	strb	r3, [r2, #31]
   206ec:	2194      	movs	r1, #148	; 0x94
   206ee:	22c1      	movs	r2, #193	; 0xc1
   206f0:	76a1      	strb	r1, [r4, #26]
   206f2:	7662      	strb	r2, [r4, #25]
   206f4:	76e2      	strb	r2, [r4, #27]
   206f6:	3991      	subs	r1, #145	; 0x91
   206f8:	1ca2      	adds	r2, r4, #2
   206fa:	77d1      	strb	r1, [r2, #31]
   206fc:	2234      	movs	r2, #52	; 0x34
   206fe:	7622      	strb	r2, [r4, #24]
   20700:	0022      	movs	r2, r4
   20702:	317d      	adds	r1, #125	; 0x7d
   20704:	3232      	adds	r2, #50	; 0x32
   20706:	7011      	strb	r1, [r2, #0]
   20708:	4a50      	ldr	r2, [pc, #320]	; (2084c <RADIO_InitDefaultAttributes+0x1ac>)
   2070a:	397e      	subs	r1, #126	; 0x7e
   2070c:	60e2      	str	r2, [r4, #12]
   2070e:	0022      	movs	r2, r4
   20710:	3237      	adds	r2, #55	; 0x37
   20712:	7011      	strb	r1, [r2, #0]
   20714:	0022      	movs	r2, r4
   20716:	3109      	adds	r1, #9
   20718:	3238      	adds	r2, #56	; 0x38
   2071a:	7011      	strb	r1, [r2, #0]
   2071c:	0022      	movs	r2, r4
   2071e:	3107      	adds	r1, #7
   20720:	3239      	adds	r2, #57	; 0x39
   20722:	7011      	strb	r1, [r2, #0]
   20724:	0022      	movs	r2, r4
   20726:	322c      	adds	r2, #44	; 0x2c
   20728:	7013      	strb	r3, [r2, #0]
   2072a:	4a49      	ldr	r2, [pc, #292]	; (20850 <RADIO_InitDefaultAttributes+0x1b0>)
   2072c:	82e3      	strh	r3, [r4, #22]
   2072e:	62a2      	str	r2, [r4, #40]	; 0x28
   20730:	0022      	movs	r2, r4
   20732:	324c      	adds	r2, #76	; 0x4c
   20734:	8013      	strh	r3, [r2, #0]
   20736:	0022      	movs	r2, r4
   20738:	324e      	adds	r2, #78	; 0x4e
   2073a:	7013      	strb	r3, [r2, #0]
   2073c:	0022      	movs	r2, r4
   2073e:	324f      	adds	r2, #79	; 0x4f
   20740:	7013      	strb	r3, [r2, #0]
   20742:	0022      	movs	r2, r4
   20744:	3240      	adds	r2, #64	; 0x40
   20746:	7013      	strb	r3, [r2, #0]
   20748:	0022      	movs	r2, r4
   2074a:	3241      	adds	r2, #65	; 0x41
   2074c:	7013      	strb	r3, [r2, #0]
   2074e:	0022      	movs	r2, r4
   20750:	3254      	adds	r2, #84	; 0x54
   20752:	7013      	strb	r3, [r2, #0]
   20754:	0022      	movs	r2, r4
   20756:	3255      	adds	r2, #85	; 0x55
   20758:	7015      	strb	r5, [r2, #0]
   2075a:	0022      	movs	r2, r4
   2075c:	3258      	adds	r2, #88	; 0x58
   2075e:	6463      	str	r3, [r4, #68]	; 0x44
   20760:	64a3      	str	r3, [r4, #72]	; 0x48
   20762:	87a3      	strh	r3, [r4, #60]	; 0x3c
   20764:	87e3      	strh	r3, [r4, #62]	; 0x3e
   20766:	7013      	strb	r3, [r2, #0]
   20768:	3730      	adds	r7, #48	; 0x30
   2076a:	783b      	ldrb	r3, [r7, #0]
   2076c:	2b00      	cmp	r3, #0
   2076e:	d151      	bne.n	20814 <RADIO_InitDefaultAttributes+0x174>
   20770:	4838      	ldr	r0, [pc, #224]	; (20854 <RADIO_InitDefaultAttributes+0x1b4>)
   20772:	4e39      	ldr	r6, [pc, #228]	; (20858 <RADIO_InitDefaultAttributes+0x1b8>)
   20774:	47b0      	blx	r6
   20776:	2808      	cmp	r0, #8
   20778:	d149      	bne.n	2080e <RADIO_InitDefaultAttributes+0x16e>
   2077a:	4838      	ldr	r0, [pc, #224]	; (2085c <RADIO_InitDefaultAttributes+0x1bc>)
   2077c:	47b0      	blx	r6
   2077e:	2808      	cmp	r0, #8
   20780:	d145      	bne.n	2080e <RADIO_InitDefaultAttributes+0x16e>
   20782:	4837      	ldr	r0, [pc, #220]	; (20860 <RADIO_InitDefaultAttributes+0x1c0>)
   20784:	47b0      	blx	r6
   20786:	2808      	cmp	r0, #8
   20788:	d141      	bne.n	2080e <RADIO_InitDefaultAttributes+0x16e>
   2078a:	4836      	ldr	r0, [pc, #216]	; (20864 <RADIO_InitDefaultAttributes+0x1c4>)
   2078c:	47b0      	blx	r6
   2078e:	2808      	cmp	r0, #8
   20790:	d13d      	bne.n	2080e <RADIO_InitDefaultAttributes+0x16e>
   20792:	703d      	strb	r5, [r7, #0]
   20794:	4b34      	ldr	r3, [pc, #208]	; (20868 <RADIO_InitDefaultAttributes+0x1c8>)
   20796:	4798      	blx	r3
   20798:	4b34      	ldr	r3, [pc, #208]	; (2086c <RADIO_InitDefaultAttributes+0x1cc>)
   2079a:	4798      	blx	r3
   2079c:	2800      	cmp	r0, #0
   2079e:	d107      	bne.n	207b0 <RADIO_InitDefaultAttributes+0x110>
   207a0:	0023      	movs	r3, r4
   207a2:	3355      	adds	r3, #85	; 0x55
   207a4:	7018      	strb	r0, [r3, #0]
   207a6:	4b32      	ldr	r3, [pc, #200]	; (20870 <RADIO_InitDefaultAttributes+0x1d0>)
   207a8:	4798      	blx	r3
   207aa:	0023      	movs	r3, r4
   207ac:	3354      	adds	r3, #84	; 0x54
   207ae:	7018      	strb	r0, [r3, #0]
   207b0:	4b30      	ldr	r3, [pc, #192]	; (20874 <RADIO_InitDefaultAttributes+0x1d4>)
   207b2:	4798      	blx	r3
   207b4:	2201      	movs	r2, #1
   207b6:	2100      	movs	r1, #0
   207b8:	0010      	movs	r0, r2
   207ba:	4f2f      	ldr	r7, [pc, #188]	; (20878 <RADIO_InitDefaultAttributes+0x1d8>)
   207bc:	47b8      	blx	r7
   207be:	6820      	ldr	r0, [r4, #0]
   207c0:	4b2e      	ldr	r3, [pc, #184]	; (2087c <RADIO_InitDefaultAttributes+0x1dc>)
   207c2:	4798      	blx	r3
   207c4:	2142      	movs	r1, #66	; 0x42
   207c6:	203b      	movs	r0, #59	; 0x3b
   207c8:	4d2d      	ldr	r5, [pc, #180]	; (20880 <RADIO_InitDefaultAttributes+0x1e0>)
   207ca:	47a8      	blx	r5
   207cc:	203b      	movs	r0, #59	; 0x3b
   207ce:	4b2d      	ldr	r3, [pc, #180]	; (20884 <RADIO_InitDefaultAttributes+0x1e4>)
   207d0:	4798      	blx	r3
   207d2:	2620      	movs	r6, #32
   207d4:	4006      	ands	r6, r0
   207d6:	d1f9      	bne.n	207cc <RADIO_InitDefaultAttributes+0x12c>
   207d8:	2123      	movs	r1, #35	; 0x23
   207da:	200c      	movs	r0, #12
   207dc:	47a8      	blx	r5
   207de:	21aa      	movs	r1, #170	; 0xaa
   207e0:	201f      	movs	r0, #31
   207e2:	47a8      	blx	r5
   207e4:	21ff      	movs	r1, #255	; 0xff
   207e6:	2032      	movs	r0, #50	; 0x32
   207e8:	47a8      	blx	r5
   207ea:	2140      	movs	r1, #64	; 0x40
   207ec:	2031      	movs	r0, #49	; 0x31
   207ee:	47a8      	blx	r5
   207f0:	2201      	movs	r2, #1
   207f2:	0030      	movs	r0, r6
   207f4:	0011      	movs	r1, r2
   207f6:	47b8      	blx	r7
   207f8:	21ff      	movs	r1, #255	; 0xff
   207fa:	2023      	movs	r0, #35	; 0x23
   207fc:	47a8      	blx	r5
   207fe:	4b21      	ldr	r3, [pc, #132]	; (20884 <RADIO_InitDefaultAttributes+0x1e4>)
   20800:	2042      	movs	r0, #66	; 0x42
   20802:	4798      	blx	r3
   20804:	3431      	adds	r4, #49	; 0x31
   20806:	4b20      	ldr	r3, [pc, #128]	; (20888 <RADIO_InitDefaultAttributes+0x1e8>)
   20808:	7020      	strb	r0, [r4, #0]
   2080a:	4798      	blx	r3
   2080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2080e:	4b1f      	ldr	r3, [pc, #124]	; (2088c <RADIO_InitDefaultAttributes+0x1ec>)
   20810:	4798      	blx	r3
   20812:	e7bf      	b.n	20794 <RADIO_InitDefaultAttributes+0xf4>
   20814:	0023      	movs	r3, r4
   20816:	332d      	adds	r3, #45	; 0x2d
   20818:	4d1d      	ldr	r5, [pc, #116]	; (20890 <RADIO_InitDefaultAttributes+0x1f0>)
   2081a:	7818      	ldrb	r0, [r3, #0]
   2081c:	47a8      	blx	r5
   2081e:	0023      	movs	r3, r4
   20820:	332e      	adds	r3, #46	; 0x2e
   20822:	7818      	ldrb	r0, [r3, #0]
   20824:	47a8      	blx	r5
   20826:	0023      	movs	r3, r4
   20828:	332f      	adds	r3, #47	; 0x2f
   2082a:	7818      	ldrb	r0, [r3, #0]
   2082c:	47a8      	blx	r5
   2082e:	0023      	movs	r3, r4
   20830:	3350      	adds	r3, #80	; 0x50
   20832:	7818      	ldrb	r0, [r3, #0]
   20834:	47a8      	blx	r5
   20836:	e7ad      	b.n	20794 <RADIO_InitDefaultAttributes+0xf4>
   20838:	20002047 	.word	0x20002047
   2083c:	20001980 	.word	0x20001980
   20840:	33be27a0 	.word	0x33be27a0
   20844:	000061a8 	.word	0x000061a8
   20848:	0000c350 	.word	0x0000c350
   2084c:	00003a98 	.word	0x00003a98
   20850:	20001f44 	.word	0x20001f44
   20854:	200019ad 	.word	0x200019ad
   20858:	00015965 	.word	0x00015965
   2085c:	200019ae 	.word	0x200019ae
   20860:	200019af 	.word	0x200019af
   20864:	200019d0 	.word	0x200019d0
   20868:	00006de9 	.word	0x00006de9
   2086c:	0000747d 	.word	0x0000747d
   20870:	00007471 	.word	0x00007471
   20874:	000205a1 	.word	0x000205a1
   20878:	00016315 	.word	0x00016315
   2087c:	0001f835 	.word	0x0001f835
   20880:	00006e21 	.word	0x00006e21
   20884:	00006e6d 	.word	0x00006e6d
   20888:	00020631 	.word	0x00020631
   2088c:	00015875 	.word	0x00015875
   20890:	00015cfd 	.word	0x00015cfd

00020894 <RADIO_Receive>:
   20894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20896:	7803      	ldrb	r3, [r0, #0]
   20898:	0006      	movs	r6, r0
   2089a:	4d24      	ldr	r5, [pc, #144]	; (2092c <RADIO_Receive+0x98>)
   2089c:	2b00      	cmp	r3, #0
   2089e:	d11d      	bne.n	208dc <RADIO_Receive+0x48>
   208a0:	782b      	ldrb	r3, [r5, #0]
   208a2:	2004      	movs	r0, #4
   208a4:	2b01      	cmp	r3, #1
   208a6:	d118      	bne.n	208da <RADIO_Receive+0x46>
   208a8:	4c21      	ldr	r4, [pc, #132]	; (20930 <RADIO_Receive+0x9c>)
   208aa:	4f22      	ldr	r7, [pc, #136]	; (20934 <RADIO_Receive+0xa0>)
   208ac:	0023      	movs	r3, r4
   208ae:	332f      	adds	r3, #47	; 0x2f
   208b0:	7818      	ldrb	r0, [r3, #0]
   208b2:	47b8      	blx	r7
   208b4:	0023      	movs	r3, r4
   208b6:	3334      	adds	r3, #52	; 0x34
   208b8:	781b      	ldrb	r3, [r3, #0]
   208ba:	2b00      	cmp	r3, #0
   208bc:	d102      	bne.n	208c4 <RADIO_Receive+0x30>
   208be:	342e      	adds	r4, #46	; 0x2e
   208c0:	7820      	ldrb	r0, [r4, #0]
   208c2:	47b8      	blx	r7
   208c4:	8872      	ldrh	r2, [r6, #2]
   208c6:	4b1c      	ldr	r3, [pc, #112]	; (20938 <RADIO_Receive+0xa4>)
   208c8:	2008      	movs	r0, #8
   208ca:	801a      	strh	r2, [r3, #0]
   208cc:	2304      	movs	r3, #4
   208ce:	702b      	strb	r3, [r5, #0]
   208d0:	4b1a      	ldr	r3, [pc, #104]	; (2093c <RADIO_Receive+0xa8>)
   208d2:	4798      	blx	r3
   208d4:	4b1a      	ldr	r3, [pc, #104]	; (20940 <RADIO_Receive+0xac>)
   208d6:	4798      	blx	r3
   208d8:	2000      	movs	r0, #0
   208da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   208dc:	782b      	ldrb	r3, [r5, #0]
   208de:	2000      	movs	r0, #0
   208e0:	2b01      	cmp	r3, #1
   208e2:	d0fa      	beq.n	208da <RADIO_Receive+0x46>
   208e4:	782b      	ldrb	r3, [r5, #0]
   208e6:	3003      	adds	r0, #3
   208e8:	2b04      	cmp	r3, #4
   208ea:	d1f6      	bne.n	208da <RADIO_Receive+0x46>
   208ec:	4c10      	ldr	r4, [pc, #64]	; (20930 <RADIO_Receive+0x9c>)
   208ee:	4e11      	ldr	r6, [pc, #68]	; (20934 <RADIO_Receive+0xa0>)
   208f0:	0023      	movs	r3, r4
   208f2:	332f      	adds	r3, #47	; 0x2f
   208f4:	7818      	ldrb	r0, [r3, #0]
   208f6:	47b0      	blx	r6
   208f8:	0023      	movs	r3, r4
   208fa:	3334      	adds	r3, #52	; 0x34
   208fc:	781b      	ldrb	r3, [r3, #0]
   208fe:	2b00      	cmp	r3, #0
   20900:	d103      	bne.n	2090a <RADIO_Receive+0x76>
   20902:	0023      	movs	r3, r4
   20904:	332e      	adds	r3, #46	; 0x2e
   20906:	7818      	ldrb	r0, [r3, #0]
   20908:	47b0      	blx	r6
   2090a:	2200      	movs	r2, #0
   2090c:	3434      	adds	r4, #52	; 0x34
   2090e:	7821      	ldrb	r1, [r4, #0]
   20910:	0010      	movs	r0, r2
   20912:	4b0c      	ldr	r3, [pc, #48]	; (20944 <RADIO_Receive+0xb0>)
   20914:	4798      	blx	r3
   20916:	4b0c      	ldr	r3, [pc, #48]	; (20948 <RADIO_Receive+0xb4>)
   20918:	4798      	blx	r3
   2091a:	2301      	movs	r3, #1
   2091c:	2008      	movs	r0, #8
   2091e:	4c0b      	ldr	r4, [pc, #44]	; (2094c <RADIO_Receive+0xb8>)
   20920:	702b      	strb	r3, [r5, #0]
   20922:	47a0      	blx	r4
   20924:	2002      	movs	r0, #2
   20926:	47a0      	blx	r4
   20928:	e7d6      	b.n	208d8 <RADIO_Receive+0x44>
   2092a:	46c0      	nop			; (mov r8, r8)
   2092c:	20002047 	.word	0x20002047
   20930:	20001980 	.word	0x20001980
   20934:	00015cfd 	.word	0x00015cfd
   20938:	2000117a 	.word	0x2000117a
   2093c:	0001fe3d 	.word	0x0001fe3d
   20940:	000205a1 	.word	0x000205a1
   20944:	00016315 	.word	0x00016315
   20948:	00020631 	.word	0x00020631
   2094c:	0001fe69 	.word	0x0001fe69

00020950 <RADIO_TxHandler>:
   20950:	b5f0      	push	{r4, r5, r6, r7, lr}
   20952:	4e56      	ldr	r6, [pc, #344]	; (20aac <RADIO_TxHandler+0x15c>)
   20954:	b087      	sub	sp, #28
   20956:	47b0      	blx	r6
   20958:	4c55      	ldr	r4, [pc, #340]	; (20ab0 <RADIO_TxHandler+0x160>)
   2095a:	0023      	movs	r3, r4
   2095c:	332d      	adds	r3, #45	; 0x2d
   2095e:	7818      	ldrb	r0, [r3, #0]
   20960:	4b54      	ldr	r3, [pc, #336]	; (20ab4 <RADIO_TxHandler+0x164>)
   20962:	4798      	blx	r3
   20964:	0023      	movs	r3, r4
   20966:	3341      	adds	r3, #65	; 0x41
   20968:	781b      	ldrb	r3, [r3, #0]
   2096a:	4d53      	ldr	r5, [pc, #332]	; (20ab8 <RADIO_TxHandler+0x168>)
   2096c:	2b00      	cmp	r3, #0
   2096e:	d022      	beq.n	209b6 <RADIO_TxHandler+0x66>
   20970:	2214      	movs	r2, #20
   20972:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   20974:	4353      	muls	r3, r2
   20976:	0022      	movs	r2, r4
   20978:	3240      	adds	r2, #64	; 0x40
   2097a:	7013      	strb	r3, [r2, #0]
   2097c:	47b0      	blx	r6
   2097e:	2000      	movs	r0, #0
   20980:	4b4e      	ldr	r3, [pc, #312]	; (20abc <RADIO_TxHandler+0x16c>)
   20982:	4798      	blx	r3
   20984:	6820      	ldr	r0, [r4, #0]
   20986:	4b4e      	ldr	r3, [pc, #312]	; (20ac0 <RADIO_TxHandler+0x170>)
   20988:	4798      	blx	r3
   2098a:	0023      	movs	r3, r4
   2098c:	2600      	movs	r6, #0
   2098e:	334c      	adds	r3, #76	; 0x4c
   20990:	2201      	movs	r2, #1
   20992:	801e      	strh	r6, [r3, #0]
   20994:	0031      	movs	r1, r6
   20996:	4b4b      	ldr	r3, [pc, #300]	; (20ac4 <RADIO_TxHandler+0x174>)
   20998:	0030      	movs	r0, r6
   2099a:	4798      	blx	r3
   2099c:	2109      	movs	r1, #9
   2099e:	2012      	movs	r0, #18
   209a0:	47a8      	blx	r5
   209a2:	2201      	movs	r2, #1
   209a4:	0031      	movs	r1, r6
   209a6:	2005      	movs	r0, #5
   209a8:	4b46      	ldr	r3, [pc, #280]	; (20ac4 <RADIO_TxHandler+0x174>)
   209aa:	4798      	blx	r3
   209ac:	0023      	movs	r3, r4
   209ae:	3340      	adds	r3, #64	; 0x40
   209b0:	781b      	ldrb	r3, [r3, #0]
   209b2:	42b3      	cmp	r3, r6
   209b4:	d844      	bhi.n	20a40 <RADIO_TxHandler+0xf0>
   209b6:	2001      	movs	r0, #1
   209b8:	4b40      	ldr	r3, [pc, #256]	; (20abc <RADIO_TxHandler+0x16c>)
   209ba:	4798      	blx	r3
   209bc:	4b42      	ldr	r3, [pc, #264]	; (20ac8 <RADIO_TxHandler+0x178>)
   209be:	2004      	movs	r0, #4
   209c0:	4798      	blx	r3
   209c2:	4b42      	ldr	r3, [pc, #264]	; (20acc <RADIO_TxHandler+0x17c>)
   209c4:	4e42      	ldr	r6, [pc, #264]	; (20ad0 <RADIO_TxHandler+0x180>)
   209c6:	781f      	ldrb	r7, [r3, #0]
   209c8:	2f01      	cmp	r7, #1
   209ca:	d146      	bne.n	20a5a <RADIO_TxHandler+0x10a>
   209cc:	7831      	ldrb	r1, [r6, #0]
   209ce:	2022      	movs	r0, #34	; 0x22
   209d0:	47a8      	blx	r5
   209d2:	4b40      	ldr	r3, [pc, #256]	; (20ad4 <RADIO_TxHandler+0x184>)
   209d4:	200a      	movs	r0, #10
   209d6:	4798      	blx	r3
   209d8:	21f0      	movs	r1, #240	; 0xf0
   209da:	4008      	ands	r0, r1
   209dc:	39e8      	subs	r1, #232	; 0xe8
   209de:	4301      	orrs	r1, r0
   209e0:	200a      	movs	r0, #10
   209e2:	47a8      	blx	r5
   209e4:	2140      	movs	r1, #64	; 0x40
   209e6:	0008      	movs	r0, r1
   209e8:	47a8      	blx	r5
   209ea:	2100      	movs	r1, #0
   209ec:	2041      	movs	r0, #65	; 0x41
   209ee:	47a8      	blx	r5
   209f0:	4b36      	ldr	r3, [pc, #216]	; (20acc <RADIO_TxHandler+0x17c>)
   209f2:	003a      	movs	r2, r7
   209f4:	7819      	ldrb	r1, [r3, #0]
   209f6:	0038      	movs	r0, r7
   209f8:	4b32      	ldr	r3, [pc, #200]	; (20ac4 <RADIO_TxHandler+0x174>)
   209fa:	4798      	blx	r3
   209fc:	4b36      	ldr	r3, [pc, #216]	; (20ad8 <RADIO_TxHandler+0x188>)
   209fe:	7832      	ldrb	r2, [r6, #0]
   20a00:	6819      	ldr	r1, [r3, #0]
   20a02:	2000      	movs	r0, #0
   20a04:	4b35      	ldr	r3, [pc, #212]	; (20adc <RADIO_TxHandler+0x18c>)
   20a06:	4798      	blx	r3
   20a08:	0023      	movs	r3, r4
   20a0a:	3334      	adds	r3, #52	; 0x34
   20a0c:	7819      	ldrb	r1, [r3, #0]
   20a0e:	2200      	movs	r2, #0
   20a10:	2003      	movs	r0, #3
   20a12:	4b2c      	ldr	r3, [pc, #176]	; (20ac4 <RADIO_TxHandler+0x174>)
   20a14:	4798      	blx	r3
   20a16:	4b32      	ldr	r3, [pc, #200]	; (20ae0 <RADIO_TxHandler+0x190>)
   20a18:	4798      	blx	r3
   20a1a:	4b32      	ldr	r3, [pc, #200]	; (20ae4 <RADIO_TxHandler+0x194>)
   20a1c:	6018      	str	r0, [r3, #0]
   20a1e:	6059      	str	r1, [r3, #4]
   20a20:	68e3      	ldr	r3, [r4, #12]
   20a22:	2b00      	cmp	r3, #0
   20a24:	d009      	beq.n	20a3a <RADIO_TxHandler+0xea>
   20a26:	21fa      	movs	r1, #250	; 0xfa
   20a28:	2200      	movs	r2, #0
   20a2a:	342f      	adds	r4, #47	; 0x2f
   20a2c:	0089      	lsls	r1, r1, #2
   20a2e:	7820      	ldrb	r0, [r4, #0]
   20a30:	4359      	muls	r1, r3
   20a32:	9200      	str	r2, [sp, #0]
   20a34:	4b2c      	ldr	r3, [pc, #176]	; (20ae8 <RADIO_TxHandler+0x198>)
   20a36:	4c2d      	ldr	r4, [pc, #180]	; (20aec <RADIO_TxHandler+0x19c>)
   20a38:	47a0      	blx	r4
   20a3a:	2000      	movs	r0, #0
   20a3c:	b007      	add	sp, #28
   20a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a40:	4f2b      	ldr	r7, [pc, #172]	; (20af0 <RADIO_TxHandler+0x1a0>)
   20a42:	4b2c      	ldr	r3, [pc, #176]	; (20af4 <RADIO_TxHandler+0x1a4>)
   20a44:	0038      	movs	r0, r7
   20a46:	4798      	blx	r3
   20a48:	233e      	movs	r3, #62	; 0x3e
   20a4a:	5ee2      	ldrsh	r2, [r4, r3]
   20a4c:	2100      	movs	r1, #0
   20a4e:	5e7b      	ldrsh	r3, [r7, r1]
   20a50:	429a      	cmp	r2, r3
   20a52:	db14      	blt.n	20a7e <RADIO_TxHandler+0x12e>
   20a54:	3601      	adds	r6, #1
   20a56:	b2f6      	uxtb	r6, r6
   20a58:	e7a8      	b.n	209ac <RADIO_TxHandler+0x5c>
   20a5a:	2100      	movs	r1, #0
   20a5c:	2040      	movs	r0, #64	; 0x40
   20a5e:	47a8      	blx	r5
   20a60:	2100      	movs	r1, #0
   20a62:	2041      	movs	r0, #65	; 0x41
   20a64:	47a8      	blx	r5
   20a66:	0023      	movs	r3, r4
   20a68:	2000      	movs	r0, #0
   20a6a:	3358      	adds	r3, #88	; 0x58
   20a6c:	7831      	ldrb	r1, [r6, #0]
   20a6e:	7018      	strb	r0, [r3, #0]
   20a70:	47a8      	blx	r5
   20a72:	4b19      	ldr	r3, [pc, #100]	; (20ad8 <RADIO_TxHandler+0x188>)
   20a74:	7831      	ldrb	r1, [r6, #0]
   20a76:	6818      	ldr	r0, [r3, #0]
   20a78:	4b1f      	ldr	r3, [pc, #124]	; (20af8 <RADIO_TxHandler+0x1a8>)
   20a7a:	4798      	blx	r3
   20a7c:	e7c4      	b.n	20a08 <RADIO_TxHandler+0xb8>
   20a7e:	2000      	movs	r0, #0
   20a80:	4b1e      	ldr	r3, [pc, #120]	; (20afc <RADIO_TxHandler+0x1ac>)
   20a82:	4798      	blx	r3
   20a84:	4b1e      	ldr	r3, [pc, #120]	; (20b00 <RADIO_TxHandler+0x1b0>)
   20a86:	4798      	blx	r3
   20a88:	2307      	movs	r3, #7
   20a8a:	2201      	movs	r2, #1
   20a8c:	a903      	add	r1, sp, #12
   20a8e:	700b      	strb	r3, [r1, #0]
   20a90:	4b1c      	ldr	r3, [pc, #112]	; (20b04 <RADIO_TxHandler+0x1b4>)
   20a92:	701a      	strb	r2, [r3, #0]
   20a94:	4b1c      	ldr	r3, [pc, #112]	; (20b08 <RADIO_TxHandler+0x1b8>)
   20a96:	781b      	ldrb	r3, [r3, #0]
   20a98:	079b      	lsls	r3, r3, #30
   20a9a:	d400      	bmi.n	20a9e <RADIO_TxHandler+0x14e>
   20a9c:	e78b      	b.n	209b6 <RADIO_TxHandler+0x66>
   20a9e:	6923      	ldr	r3, [r4, #16]
   20aa0:	2b00      	cmp	r3, #0
   20aa2:	d100      	bne.n	20aa6 <RADIO_TxHandler+0x156>
   20aa4:	e787      	b.n	209b6 <RADIO_TxHandler+0x66>
   20aa6:	2002      	movs	r0, #2
   20aa8:	4798      	blx	r3
   20aaa:	e784      	b.n	209b6 <RADIO_TxHandler+0x66>
   20aac:	000205a1 	.word	0x000205a1
   20ab0:	20001980 	.word	0x20001980
   20ab4:	00015cfd 	.word	0x00015cfd
   20ab8:	00006e21 	.word	0x00006e21
   20abc:	000200f1 	.word	0x000200f1
   20ac0:	0001f835 	.word	0x0001f835
   20ac4:	00016315 	.word	0x00016315
   20ac8:	0001f87d 	.word	0x0001f87d
   20acc:	200019b4 	.word	0x200019b4
   20ad0:	2000118c 	.word	0x2000118c
   20ad4:	00006e6d 	.word	0x00006e6d
   20ad8:	20001188 	.word	0x20001188
   20adc:	00006ec1 	.word	0x00006ec1
   20ae0:	0001594d 	.word	0x0001594d
   20ae4:	20001180 	.word	0x20001180
   20ae8:	0002024d 	.word	0x0002024d
   20aec:	000159bd 	.word	0x000159bd
   20af0:	20001178 	.word	0x20001178
   20af4:	00016619 	.word	0x00016619
   20af8:	0001ff6d 	.word	0x0001ff6d
   20afc:	00020219 	.word	0x00020219
   20b00:	00020631 	.word	0x00020631
   20b04:	20002047 	.word	0x20002047
   20b08:	20002046 	.word	0x20002046

00020b0c <RADIO_TxDoneHandler>:
   20b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20b0e:	4b35      	ldr	r3, [pc, #212]	; (20be4 <RADIO_TxDoneHandler+0xd8>)
   20b10:	b087      	sub	sp, #28
   20b12:	881a      	ldrh	r2, [r3, #0]
   20b14:	06d2      	lsls	r2, r2, #27
   20b16:	0fd2      	lsrs	r2, r2, #31
   20b18:	9200      	str	r2, [sp, #0]
   20b1a:	466a      	mov	r2, sp
   20b1c:	7810      	ldrb	r0, [r2, #0]
   20b1e:	881a      	ldrh	r2, [r3, #0]
   20b20:	2801      	cmp	r0, #1
   20b22:	d12b      	bne.n	20b7c <RADIO_TxDoneHandler+0x70>
   20b24:	4c30      	ldr	r4, [pc, #192]	; (20be8 <RADIO_TxDoneHandler+0xdc>)
   20b26:	2110      	movs	r1, #16
   20b28:	0027      	movs	r7, r4
   20b2a:	2500      	movs	r5, #0
   20b2c:	438a      	bics	r2, r1
   20b2e:	801a      	strh	r2, [r3, #0]
   20b30:	3734      	adds	r7, #52	; 0x34
   20b32:	0002      	movs	r2, r0
   20b34:	7839      	ldrb	r1, [r7, #0]
   20b36:	4b2d      	ldr	r3, [pc, #180]	; (20bec <RADIO_TxDoneHandler+0xe0>)
   20b38:	4798      	blx	r3
   20b3a:	68e3      	ldr	r3, [r4, #12]
   20b3c:	ae03      	add	r6, sp, #12
   20b3e:	9304      	str	r3, [sp, #16]
   20b40:	7035      	strb	r5, [r6, #0]
   20b42:	002a      	movs	r2, r5
   20b44:	4b29      	ldr	r3, [pc, #164]	; (20bec <RADIO_TxDoneHandler+0xe0>)
   20b46:	7839      	ldrb	r1, [r7, #0]
   20b48:	0028      	movs	r0, r5
   20b4a:	4798      	blx	r3
   20b4c:	466a      	mov	r2, sp
   20b4e:	4b28      	ldr	r3, [pc, #160]	; (20bf0 <RADIO_TxDoneHandler+0xe4>)
   20b50:	7812      	ldrb	r2, [r2, #0]
   20b52:	701a      	strb	r2, [r3, #0]
   20b54:	0023      	movs	r3, r4
   20b56:	3358      	adds	r3, #88	; 0x58
   20b58:	701d      	strb	r5, [r3, #0]
   20b5a:	4b26      	ldr	r3, [pc, #152]	; (20bf4 <RADIO_TxDoneHandler+0xe8>)
   20b5c:	781b      	ldrb	r3, [r3, #0]
   20b5e:	075b      	lsls	r3, r3, #29
   20b60:	d505      	bpl.n	20b6e <RADIO_TxDoneHandler+0x62>
   20b62:	6923      	ldr	r3, [r4, #16]
   20b64:	42ab      	cmp	r3, r5
   20b66:	d002      	beq.n	20b6e <RADIO_TxDoneHandler+0x62>
   20b68:	0031      	movs	r1, r6
   20b6a:	2004      	movs	r0, #4
   20b6c:	4798      	blx	r3
   20b6e:	4b22      	ldr	r3, [pc, #136]	; (20bf8 <RADIO_TxDoneHandler+0xec>)
   20b70:	4798      	blx	r3
   20b72:	4b22      	ldr	r3, [pc, #136]	; (20bfc <RADIO_TxDoneHandler+0xf0>)
   20b74:	4798      	blx	r3
   20b76:	2000      	movs	r0, #0
   20b78:	b007      	add	sp, #28
   20b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20b7c:	07d2      	lsls	r2, r2, #31
   20b7e:	d402      	bmi.n	20b86 <RADIO_TxDoneHandler+0x7a>
   20b80:	881a      	ldrh	r2, [r3, #0]
   20b82:	0752      	lsls	r2, r2, #29
   20b84:	d527      	bpl.n	20bd6 <RADIO_TxDoneHandler+0xca>
   20b86:	2601      	movs	r6, #1
   20b88:	2104      	movs	r1, #4
   20b8a:	881a      	ldrh	r2, [r3, #0]
   20b8c:	4f16      	ldr	r7, [pc, #88]	; (20be8 <RADIO_TxDoneHandler+0xdc>)
   20b8e:	43b2      	bics	r2, r6
   20b90:	801a      	strh	r2, [r3, #0]
   20b92:	881a      	ldrh	r2, [r3, #0]
   20b94:	2400      	movs	r4, #0
   20b96:	438a      	bics	r2, r1
   20b98:	801a      	strh	r2, [r3, #0]
   20b9a:	4b19      	ldr	r3, [pc, #100]	; (20c00 <RADIO_TxDoneHandler+0xf4>)
   20b9c:	ad03      	add	r5, sp, #12
   20b9e:	681b      	ldr	r3, [r3, #0]
   20ba0:	702c      	strb	r4, [r5, #0]
   20ba2:	9304      	str	r3, [sp, #16]
   20ba4:	003b      	movs	r3, r7
   20ba6:	3334      	adds	r3, #52	; 0x34
   20ba8:	7819      	ldrb	r1, [r3, #0]
   20baa:	0022      	movs	r2, r4
   20bac:	0020      	movs	r0, r4
   20bae:	4b0f      	ldr	r3, [pc, #60]	; (20bec <RADIO_TxDoneHandler+0xe0>)
   20bb0:	4798      	blx	r3
   20bb2:	4b14      	ldr	r3, [pc, #80]	; (20c04 <RADIO_TxDoneHandler+0xf8>)
   20bb4:	4798      	blx	r3
   20bb6:	4b0e      	ldr	r3, [pc, #56]	; (20bf0 <RADIO_TxDoneHandler+0xe4>)
   20bb8:	701e      	strb	r6, [r3, #0]
   20bba:	003b      	movs	r3, r7
   20bbc:	3358      	adds	r3, #88	; 0x58
   20bbe:	701c      	strb	r4, [r3, #0]
   20bc0:	4b0c      	ldr	r3, [pc, #48]	; (20bf4 <RADIO_TxDoneHandler+0xe8>)
   20bc2:	781b      	ldrb	r3, [r3, #0]
   20bc4:	079b      	lsls	r3, r3, #30
   20bc6:	d5d6      	bpl.n	20b76 <RADIO_TxDoneHandler+0x6a>
   20bc8:	693b      	ldr	r3, [r7, #16]
   20bca:	42a3      	cmp	r3, r4
   20bcc:	d0d3      	beq.n	20b76 <RADIO_TxDoneHandler+0x6a>
   20bce:	0029      	movs	r1, r5
   20bd0:	2002      	movs	r0, #2
   20bd2:	4798      	blx	r3
   20bd4:	e7cf      	b.n	20b76 <RADIO_TxDoneHandler+0x6a>
   20bd6:	881b      	ldrh	r3, [r3, #0]
   20bd8:	059b      	lsls	r3, r3, #22
   20bda:	d5cc      	bpl.n	20b76 <RADIO_TxDoneHandler+0x6a>
   20bdc:	4b0a      	ldr	r3, [pc, #40]	; (20c08 <RADIO_TxDoneHandler+0xfc>)
   20bde:	4798      	blx	r3
   20be0:	e7c9      	b.n	20b76 <RADIO_TxDoneHandler+0x6a>
   20be2:	46c0      	nop			; (mov r8, r8)
   20be4:	20002044 	.word	0x20002044
   20be8:	20001980 	.word	0x20001980
   20bec:	00016315 	.word	0x00016315
   20bf0:	20002047 	.word	0x20002047
   20bf4:	20002046 	.word	0x20002046
   20bf8:	00006de9 	.word	0x00006de9
   20bfc:	000206a1 	.word	0x000206a1
   20c00:	20001180 	.word	0x20001180
   20c04:	00020631 	.word	0x00020631
   20c08:	00020fa5 	.word	0x00020fa5

00020c0c <RADIO_RxDoneHandler>:
   20c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c0e:	4b97      	ldr	r3, [pc, #604]	; (20e6c <RADIO_RxDoneHandler+0x260>)
   20c10:	b085      	sub	sp, #20
   20c12:	881c      	ldrh	r4, [r3, #0]
   20c14:	881a      	ldrh	r2, [r3, #0]
   20c16:	06a4      	lsls	r4, r4, #26
   20c18:	0fe4      	lsrs	r4, r4, #31
   20c1a:	b2e0      	uxtb	r0, r4
   20c1c:	2801      	cmp	r0, #1
   20c1e:	d126      	bne.n	20c6e <RADIO_RxDoneHandler+0x62>
   20c20:	4d93      	ldr	r5, [pc, #588]	; (20e70 <RADIO_RxDoneHandler+0x264>)
   20c22:	2120      	movs	r1, #32
   20c24:	002e      	movs	r6, r5
   20c26:	438a      	bics	r2, r1
   20c28:	801a      	strh	r2, [r3, #0]
   20c2a:	3634      	adds	r6, #52	; 0x34
   20c2c:	0002      	movs	r2, r0
   20c2e:	7831      	ldrb	r1, [r6, #0]
   20c30:	4f90      	ldr	r7, [pc, #576]	; (20e74 <RADIO_RxDoneHandler+0x268>)
   20c32:	47b8      	blx	r7
   20c34:	2200      	movs	r2, #0
   20c36:	7831      	ldrb	r1, [r6, #0]
   20c38:	0010      	movs	r0, r2
   20c3a:	47b8      	blx	r7
   20c3c:	4b8e      	ldr	r3, [pc, #568]	; (20e78 <RADIO_RxDoneHandler+0x26c>)
   20c3e:	4798      	blx	r3
   20c40:	4b8e      	ldr	r3, [pc, #568]	; (20e7c <RADIO_RxDoneHandler+0x270>)
   20c42:	002a      	movs	r2, r5
   20c44:	701c      	strb	r4, [r3, #0]
   20c46:	2300      	movs	r3, #0
   20c48:	322c      	adds	r2, #44	; 0x2c
   20c4a:	7013      	strb	r3, [r2, #0]
   20c4c:	002a      	movs	r2, r5
   20c4e:	a901      	add	r1, sp, #4
   20c50:	3258      	adds	r2, #88	; 0x58
   20c52:	7013      	strb	r3, [r2, #0]
   20c54:	700b      	strb	r3, [r1, #0]
   20c56:	4b8a      	ldr	r3, [pc, #552]	; (20e80 <RADIO_RxDoneHandler+0x274>)
   20c58:	781b      	ldrb	r3, [r3, #0]
   20c5a:	071b      	lsls	r3, r3, #28
   20c5c:	d504      	bpl.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20c5e:	692b      	ldr	r3, [r5, #16]
   20c60:	2008      	movs	r0, #8
   20c62:	2b00      	cmp	r3, #0
   20c64:	d000      	beq.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20c66:	e084      	b.n	20d72 <RADIO_RxDoneHandler+0x166>
   20c68:	2000      	movs	r0, #0
   20c6a:	b005      	add	sp, #20
   20c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c6e:	0652      	lsls	r2, r2, #25
   20c70:	d402      	bmi.n	20c78 <RADIO_RxDoneHandler+0x6c>
   20c72:	881a      	ldrh	r2, [r3, #0]
   20c74:	0612      	lsls	r2, r2, #24
   20c76:	d523      	bpl.n	20cc0 <RADIO_RxDoneHandler+0xb4>
   20c78:	2140      	movs	r1, #64	; 0x40
   20c7a:	881a      	ldrh	r2, [r3, #0]
   20c7c:	4c7c      	ldr	r4, [pc, #496]	; (20e70 <RADIO_RxDoneHandler+0x264>)
   20c7e:	438a      	bics	r2, r1
   20c80:	801a      	strh	r2, [r3, #0]
   20c82:	881a      	ldrh	r2, [r3, #0]
   20c84:	1849      	adds	r1, r1, r1
   20c86:	438a      	bics	r2, r1
   20c88:	801a      	strh	r2, [r3, #0]
   20c8a:	0023      	movs	r3, r4
   20c8c:	2200      	movs	r2, #0
   20c8e:	3334      	adds	r3, #52	; 0x34
   20c90:	7819      	ldrb	r1, [r3, #0]
   20c92:	0010      	movs	r0, r2
   20c94:	4b77      	ldr	r3, [pc, #476]	; (20e74 <RADIO_RxDoneHandler+0x268>)
   20c96:	4798      	blx	r3
   20c98:	4b77      	ldr	r3, [pc, #476]	; (20e78 <RADIO_RxDoneHandler+0x26c>)
   20c9a:	4798      	blx	r3
   20c9c:	2201      	movs	r2, #1
   20c9e:	4b77      	ldr	r3, [pc, #476]	; (20e7c <RADIO_RxDoneHandler+0x270>)
   20ca0:	a901      	add	r1, sp, #4
   20ca2:	701a      	strb	r2, [r3, #0]
   20ca4:	0022      	movs	r2, r4
   20ca6:	2300      	movs	r3, #0
   20ca8:	322c      	adds	r2, #44	; 0x2c
   20caa:	7013      	strb	r3, [r2, #0]
   20cac:	0022      	movs	r2, r4
   20cae:	3258      	adds	r2, #88	; 0x58
   20cb0:	7013      	strb	r3, [r2, #0]
   20cb2:	700b      	strb	r3, [r1, #0]
   20cb4:	4b72      	ldr	r3, [pc, #456]	; (20e80 <RADIO_RxDoneHandler+0x274>)
   20cb6:	781b      	ldrb	r3, [r3, #0]
   20cb8:	071b      	lsls	r3, r3, #28
   20cba:	d5d5      	bpl.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20cbc:	6923      	ldr	r3, [r4, #16]
   20cbe:	e7cf      	b.n	20c60 <RADIO_RxDoneHandler+0x54>
   20cc0:	881a      	ldrh	r2, [r3, #0]
   20cc2:	0792      	lsls	r2, r2, #30
   20cc4:	d571      	bpl.n	20daa <RADIO_RxDoneHandler+0x19e>
   20cc6:	2102      	movs	r1, #2
   20cc8:	881a      	ldrh	r2, [r3, #0]
   20cca:	4d6e      	ldr	r5, [pc, #440]	; (20e84 <RADIO_RxDoneHandler+0x278>)
   20ccc:	438a      	bics	r2, r1
   20cce:	801a      	strh	r2, [r3, #0]
   20cd0:	2013      	movs	r0, #19
   20cd2:	47a8      	blx	r5
   20cd4:	4c66      	ldr	r4, [pc, #408]	; (20e70 <RADIO_RxDoneHandler+0x264>)
   20cd6:	2100      	movs	r1, #0
   20cd8:	0026      	movs	r6, r4
   20cda:	362c      	adds	r6, #44	; 0x2c
   20cdc:	7030      	strb	r0, [r6, #0]
   20cde:	4b6a      	ldr	r3, [pc, #424]	; (20e88 <RADIO_RxDoneHandler+0x27c>)
   20ce0:	200d      	movs	r0, #13
   20ce2:	4798      	blx	r3
   20ce4:	7832      	ldrb	r2, [r6, #0]
   20ce6:	4b69      	ldr	r3, [pc, #420]	; (20e8c <RADIO_RxDoneHandler+0x280>)
   20ce8:	b2d2      	uxtb	r2, r2
   20cea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   20cec:	2000      	movs	r0, #0
   20cee:	4798      	blx	r3
   20cf0:	2019      	movs	r0, #25
   20cf2:	47a8      	blx	r5
   20cf4:	0023      	movs	r3, r4
   20cf6:	b240      	sxtb	r0, r0
   20cf8:	3332      	adds	r3, #50	; 0x32
   20cfa:	2800      	cmp	r0, #0
   20cfc:	da3b      	bge.n	20d76 <RADIO_RxDoneHandler+0x16a>
   20cfe:	4240      	negs	r0, r0
   20d00:	1080      	asrs	r0, r0, #2
   20d02:	4240      	negs	r0, r0
   20d04:	7018      	strb	r0, [r3, #0]
   20d06:	201a      	movs	r0, #26
   20d08:	47a8      	blx	r5
   20d0a:	0023      	movs	r3, r4
   20d0c:	3332      	adds	r3, #50	; 0x32
   20d0e:	781b      	ldrb	r3, [r3, #0]
   20d10:	b202      	sxth	r2, r0
   20d12:	b25b      	sxtb	r3, r3
   20d14:	4d5e      	ldr	r5, [pc, #376]	; (20e90 <RADIO_RxDoneHandler+0x284>)
   20d16:	2b00      	cmp	r3, #0
   20d18:	da36      	bge.n	20d88 <RADIO_RxDoneHandler+0x17c>
   20d1a:	6821      	ldr	r1, [r4, #0]
   20d1c:	4e5d      	ldr	r6, [pc, #372]	; (20e94 <RADIO_RxDoneHandler+0x288>)
   20d1e:	198e      	adds	r6, r1, r6
   20d20:	42ae      	cmp	r6, r5
   20d22:	d82a      	bhi.n	20d7a <RADIO_RxDoneHandler+0x16e>
   20d24:	3b9d      	subs	r3, #157	; 0x9d
   20d26:	181b      	adds	r3, r3, r0
   20d28:	1112      	asrs	r2, r2, #4
   20d2a:	189b      	adds	r3, r3, r2
   20d2c:	0022      	movs	r2, r4
   20d2e:	3256      	adds	r2, #86	; 0x56
   20d30:	8013      	strh	r3, [r2, #0]
   20d32:	0023      	movs	r3, r4
   20d34:	2200      	movs	r2, #0
   20d36:	3334      	adds	r3, #52	; 0x34
   20d38:	7819      	ldrb	r1, [r3, #0]
   20d3a:	0010      	movs	r0, r2
   20d3c:	4b4d      	ldr	r3, [pc, #308]	; (20e74 <RADIO_RxDoneHandler+0x268>)
   20d3e:	4798      	blx	r3
   20d40:	4b4d      	ldr	r3, [pc, #308]	; (20e78 <RADIO_RxDoneHandler+0x26c>)
   20d42:	4798      	blx	r3
   20d44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20d46:	a901      	add	r1, sp, #4
   20d48:	604b      	str	r3, [r1, #4]
   20d4a:	0023      	movs	r3, r4
   20d4c:	332c      	adds	r3, #44	; 0x2c
   20d4e:	781b      	ldrb	r3, [r3, #0]
   20d50:	2201      	movs	r2, #1
   20d52:	720b      	strb	r3, [r1, #8]
   20d54:	2300      	movs	r3, #0
   20d56:	700b      	strb	r3, [r1, #0]
   20d58:	4b48      	ldr	r3, [pc, #288]	; (20e7c <RADIO_RxDoneHandler+0x270>)
   20d5a:	701a      	strb	r2, [r3, #0]
   20d5c:	4b48      	ldr	r3, [pc, #288]	; (20e80 <RADIO_RxDoneHandler+0x274>)
   20d5e:	7818      	ldrb	r0, [r3, #0]
   20d60:	07c0      	lsls	r0, r0, #31
   20d62:	0fc0      	lsrs	r0, r0, #31
   20d64:	4290      	cmp	r0, r2
   20d66:	d000      	beq.n	20d6a <RADIO_RxDoneHandler+0x15e>
   20d68:	e77e      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20d6a:	6923      	ldr	r3, [r4, #16]
   20d6c:	2b00      	cmp	r3, #0
   20d6e:	d100      	bne.n	20d72 <RADIO_RxDoneHandler+0x166>
   20d70:	e77a      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20d72:	4798      	blx	r3
   20d74:	e778      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20d76:	1080      	asrs	r0, r0, #2
   20d78:	e7c4      	b.n	20d04 <RADIO_RxDoneHandler+0xf8>
   20d7a:	4d47      	ldr	r5, [pc, #284]	; (20e98 <RADIO_RxDoneHandler+0x28c>)
   20d7c:	1949      	adds	r1, r1, r5
   20d7e:	4d47      	ldr	r5, [pc, #284]	; (20e9c <RADIO_RxDoneHandler+0x290>)
   20d80:	42a9      	cmp	r1, r5
   20d82:	d8d6      	bhi.n	20d32 <RADIO_RxDoneHandler+0x126>
   20d84:	3ba4      	subs	r3, #164	; 0xa4
   20d86:	e7ce      	b.n	20d26 <RADIO_RxDoneHandler+0x11a>
   20d88:	6823      	ldr	r3, [r4, #0]
   20d8a:	4942      	ldr	r1, [pc, #264]	; (20e94 <RADIO_RxDoneHandler+0x288>)
   20d8c:	1859      	adds	r1, r3, r1
   20d8e:	42a9      	cmp	r1, r5
   20d90:	d802      	bhi.n	20d98 <RADIO_RxDoneHandler+0x18c>
   20d92:	0003      	movs	r3, r0
   20d94:	3b9d      	subs	r3, #157	; 0x9d
   20d96:	e7c7      	b.n	20d28 <RADIO_RxDoneHandler+0x11c>
   20d98:	493f      	ldr	r1, [pc, #252]	; (20e98 <RADIO_RxDoneHandler+0x28c>)
   20d9a:	185b      	adds	r3, r3, r1
   20d9c:	493f      	ldr	r1, [pc, #252]	; (20e9c <RADIO_RxDoneHandler+0x290>)
   20d9e:	428b      	cmp	r3, r1
   20da0:	d8c7      	bhi.n	20d32 <RADIO_RxDoneHandler+0x126>
   20da2:	38a4      	subs	r0, #164	; 0xa4
   20da4:	1113      	asrs	r3, r2, #4
   20da6:	18c3      	adds	r3, r0, r3
   20da8:	e7c0      	b.n	20d2c <RADIO_RxDoneHandler+0x120>
   20daa:	881a      	ldrh	r2, [r3, #0]
   20dac:	0712      	lsls	r2, r2, #28
   20dae:	0fd5      	lsrs	r5, r2, #31
   20db0:	2a00      	cmp	r2, #0
   20db2:	da27      	bge.n	20e04 <RADIO_RxDoneHandler+0x1f8>
   20db4:	2108      	movs	r1, #8
   20db6:	881a      	ldrh	r2, [r3, #0]
   20db8:	4c2d      	ldr	r4, [pc, #180]	; (20e70 <RADIO_RxDoneHandler+0x264>)
   20dba:	438a      	bics	r2, r1
   20dbc:	801a      	strh	r2, [r3, #0]
   20dbe:	0023      	movs	r3, r4
   20dc0:	2280      	movs	r2, #128	; 0x80
   20dc2:	3332      	adds	r3, #50	; 0x32
   20dc4:	701a      	strb	r2, [r3, #0]
   20dc6:	0023      	movs	r3, r4
   20dc8:	2200      	movs	r2, #0
   20dca:	3334      	adds	r3, #52	; 0x34
   20dcc:	7819      	ldrb	r1, [r3, #0]
   20dce:	0010      	movs	r0, r2
   20dd0:	4b28      	ldr	r3, [pc, #160]	; (20e74 <RADIO_RxDoneHandler+0x268>)
   20dd2:	4798      	blx	r3
   20dd4:	4b28      	ldr	r3, [pc, #160]	; (20e78 <RADIO_RxDoneHandler+0x26c>)
   20dd6:	4798      	blx	r3
   20dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20dda:	a901      	add	r1, sp, #4
   20ddc:	604b      	str	r3, [r1, #4]
   20dde:	0023      	movs	r3, r4
   20de0:	332c      	adds	r3, #44	; 0x2c
   20de2:	781b      	ldrb	r3, [r3, #0]
   20de4:	0022      	movs	r2, r4
   20de6:	720b      	strb	r3, [r1, #8]
   20de8:	2300      	movs	r3, #0
   20dea:	3258      	adds	r2, #88	; 0x58
   20dec:	7013      	strb	r3, [r2, #0]
   20dee:	700b      	strb	r3, [r1, #0]
   20df0:	4b22      	ldr	r3, [pc, #136]	; (20e7c <RADIO_RxDoneHandler+0x270>)
   20df2:	701d      	strb	r5, [r3, #0]
   20df4:	4b22      	ldr	r3, [pc, #136]	; (20e80 <RADIO_RxDoneHandler+0x274>)
   20df6:	7818      	ldrb	r0, [r3, #0]
   20df8:	07c0      	lsls	r0, r0, #31
   20dfa:	0fc0      	lsrs	r0, r0, #31
   20dfc:	2801      	cmp	r0, #1
   20dfe:	d000      	beq.n	20e02 <RADIO_RxDoneHandler+0x1f6>
   20e00:	e732      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20e02:	e7b2      	b.n	20d6a <RADIO_RxDoneHandler+0x15e>
   20e04:	881a      	ldrh	r2, [r3, #0]
   20e06:	05d2      	lsls	r2, r2, #23
   20e08:	0fd5      	lsrs	r5, r2, #31
   20e0a:	2a00      	cmp	r2, #0
   20e0c:	db00      	blt.n	20e10 <RADIO_RxDoneHandler+0x204>
   20e0e:	e72b      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20e10:	4c17      	ldr	r4, [pc, #92]	; (20e70 <RADIO_RxDoneHandler+0x264>)
   20e12:	881a      	ldrh	r2, [r3, #0]
   20e14:	0026      	movs	r6, r4
   20e16:	4922      	ldr	r1, [pc, #136]	; (20ea0 <RADIO_RxDoneHandler+0x294>)
   20e18:	362c      	adds	r6, #44	; 0x2c
   20e1a:	400a      	ands	r2, r1
   20e1c:	801a      	strh	r2, [r3, #0]
   20e1e:	7832      	ldrb	r2, [r6, #0]
   20e20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   20e22:	b2d2      	uxtb	r2, r2
   20e24:	2000      	movs	r0, #0
   20e26:	4b19      	ldr	r3, [pc, #100]	; (20e8c <RADIO_RxDoneHandler+0x280>)
   20e28:	4798      	blx	r3
   20e2a:	0023      	movs	r3, r4
   20e2c:	2200      	movs	r2, #0
   20e2e:	3334      	adds	r3, #52	; 0x34
   20e30:	7819      	ldrb	r1, [r3, #0]
   20e32:	0010      	movs	r0, r2
   20e34:	4b0f      	ldr	r3, [pc, #60]	; (20e74 <RADIO_RxDoneHandler+0x268>)
   20e36:	4798      	blx	r3
   20e38:	4b0f      	ldr	r3, [pc, #60]	; (20e78 <RADIO_RxDoneHandler+0x26c>)
   20e3a:	4798      	blx	r3
   20e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20e3e:	a901      	add	r1, sp, #4
   20e40:	604b      	str	r3, [r1, #4]
   20e42:	7833      	ldrb	r3, [r6, #0]
   20e44:	0022      	movs	r2, r4
   20e46:	720b      	strb	r3, [r1, #8]
   20e48:	2300      	movs	r3, #0
   20e4a:	3258      	adds	r2, #88	; 0x58
   20e4c:	7013      	strb	r3, [r2, #0]
   20e4e:	700b      	strb	r3, [r1, #0]
   20e50:	4b0a      	ldr	r3, [pc, #40]	; (20e7c <RADIO_RxDoneHandler+0x270>)
   20e52:	701d      	strb	r5, [r3, #0]
   20e54:	4b0a      	ldr	r3, [pc, #40]	; (20e80 <RADIO_RxDoneHandler+0x274>)
   20e56:	781b      	ldrb	r3, [r3, #0]
   20e58:	06db      	lsls	r3, r3, #27
   20e5a:	d400      	bmi.n	20e5e <RADIO_RxDoneHandler+0x252>
   20e5c:	e704      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20e5e:	6923      	ldr	r3, [r4, #16]
   20e60:	2b00      	cmp	r3, #0
   20e62:	d100      	bne.n	20e66 <RADIO_RxDoneHandler+0x25a>
   20e64:	e700      	b.n	20c68 <RADIO_RxDoneHandler+0x5c>
   20e66:	2010      	movs	r0, #16
   20e68:	e783      	b.n	20d72 <RADIO_RxDoneHandler+0x166>
   20e6a:	46c0      	nop			; (mov r8, r8)
   20e6c:	20002044 	.word	0x20002044
   20e70:	20001980 	.word	0x20001980
   20e74:	00016315 	.word	0x00016315
   20e78:	00020631 	.word	0x00020631
   20e7c:	20002047 	.word	0x20002047
   20e80:	20002046 	.word	0x20002046
   20e84:	00006e6d 	.word	0x00006e6d
   20e88:	00006e21 	.word	0x00006e21
   20e8c:	00006f3d 	.word	0x00006f3d
   20e90:	096ae380 	.word	0x096ae380
   20e94:	cc9eec80 	.word	0xcc9eec80
   20e98:	e78fe580 	.word	0xe78fe580
   20e9c:	06dac2c0 	.word	0x06dac2c0
   20ea0:	fffffeff 	.word	0xfffffeff

00020ea4 <Radio_LBTScanTimeout>:
   20ea4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   20ea6:	4c1c      	ldr	r4, [pc, #112]	; (20f18 <Radio_LBTScanTimeout+0x74>)
   20ea8:	0025      	movs	r5, r4
   20eaa:	0023      	movs	r3, r4
   20eac:	354f      	adds	r5, #79	; 0x4f
   20eae:	7829      	ldrb	r1, [r5, #0]
   20eb0:	3340      	adds	r3, #64	; 0x40
   20eb2:	3101      	adds	r1, #1
   20eb4:	b2c9      	uxtb	r1, r1
   20eb6:	7029      	strb	r1, [r5, #0]
   20eb8:	781b      	ldrb	r3, [r3, #0]
   20eba:	428b      	cmp	r3, r1
   20ebc:	d315      	bcc.n	20eea <Radio_LBTScanTimeout+0x46>
   20ebe:	260e      	movs	r6, #14
   20ec0:	446e      	add	r6, sp
   20ec2:	4b16      	ldr	r3, [pc, #88]	; (20f1c <Radio_LBTScanTimeout+0x78>)
   20ec4:	0030      	movs	r0, r6
   20ec6:	4798      	blx	r3
   20ec8:	2300      	movs	r3, #0
   20eca:	5ef2      	ldrsh	r2, [r6, r3]
   20ecc:	782b      	ldrb	r3, [r5, #0]
   20ece:	4353      	muls	r3, r2
   20ed0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20ed2:	189b      	adds	r3, r3, r2
   20ed4:	6463      	str	r3, [r4, #68]	; 0x44
   20ed6:	0023      	movs	r3, r4
   20ed8:	2200      	movs	r2, #0
   20eda:	3350      	adds	r3, #80	; 0x50
   20edc:	7818      	ldrb	r0, [r3, #0]
   20ede:	9200      	str	r2, [sp, #0]
   20ee0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   20ee2:	4b0f      	ldr	r3, [pc, #60]	; (20f20 <Radio_LBTScanTimeout+0x7c>)
   20ee4:	4c0f      	ldr	r4, [pc, #60]	; (20f24 <Radio_LBTScanTimeout+0x80>)
   20ee6:	47a0      	blx	r4
   20ee8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   20eea:	2380      	movs	r3, #128	; 0x80
   20eec:	4a0e      	ldr	r2, [pc, #56]	; (20f28 <Radio_LBTScanTimeout+0x84>)
   20eee:	009b      	lsls	r3, r3, #2
   20ef0:	8810      	ldrh	r0, [r2, #0]
   20ef2:	4303      	orrs	r3, r0
   20ef4:	8013      	strh	r3, [r2, #0]
   20ef6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20ef8:	0058      	lsls	r0, r3, #1
   20efa:	1e4b      	subs	r3, r1, #1
   20efc:	4359      	muls	r1, r3
   20efe:	4b0b      	ldr	r3, [pc, #44]	; (20f2c <Radio_LBTScanTimeout+0x88>)
   20f00:	b289      	uxth	r1, r1
   20f02:	4798      	blx	r3
   20f04:	0023      	movs	r3, r4
   20f06:	334c      	adds	r3, #76	; 0x4c
   20f08:	8018      	strh	r0, [r3, #0]
   20f0a:	2300      	movs	r3, #0
   20f0c:	2001      	movs	r0, #1
   20f0e:	702b      	strb	r3, [r5, #0]
   20f10:	6463      	str	r3, [r4, #68]	; 0x44
   20f12:	4b07      	ldr	r3, [pc, #28]	; (20f30 <Radio_LBTScanTimeout+0x8c>)
   20f14:	4798      	blx	r3
   20f16:	e7e7      	b.n	20ee8 <Radio_LBTScanTimeout+0x44>
   20f18:	20001980 	.word	0x20001980
   20f1c:	00016619 	.word	0x00016619
   20f20:	00020ea5 	.word	0x00020ea5
   20f24:	000159bd 	.word	0x000159bd
   20f28:	20002044 	.word	0x20002044
   20f2c:	0002117d 	.word	0x0002117d
   20f30:	0001fe3d 	.word	0x0001fe3d

00020f34 <RADIO_ScanHandler>:
   20f34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20f36:	4b12      	ldr	r3, [pc, #72]	; (20f80 <RADIO_ScanHandler+0x4c>)
   20f38:	4798      	blx	r3
   20f3a:	2000      	movs	r0, #0
   20f3c:	4b11      	ldr	r3, [pc, #68]	; (20f84 <RADIO_ScanHandler+0x50>)
   20f3e:	4798      	blx	r3
   20f40:	4d11      	ldr	r5, [pc, #68]	; (20f88 <RADIO_ScanHandler+0x54>)
   20f42:	4b12      	ldr	r3, [pc, #72]	; (20f8c <RADIO_ScanHandler+0x58>)
   20f44:	6828      	ldr	r0, [r5, #0]
   20f46:	2400      	movs	r4, #0
   20f48:	4798      	blx	r3
   20f4a:	002b      	movs	r3, r5
   20f4c:	4e10      	ldr	r6, [pc, #64]	; (20f90 <RADIO_ScanHandler+0x5c>)
   20f4e:	334c      	adds	r3, #76	; 0x4c
   20f50:	2201      	movs	r2, #1
   20f52:	0021      	movs	r1, r4
   20f54:	0020      	movs	r0, r4
   20f56:	801c      	strh	r4, [r3, #0]
   20f58:	47b0      	blx	r6
   20f5a:	4b0e      	ldr	r3, [pc, #56]	; (20f94 <RADIO_ScanHandler+0x60>)
   20f5c:	2109      	movs	r1, #9
   20f5e:	2012      	movs	r0, #18
   20f60:	4798      	blx	r3
   20f62:	3550      	adds	r5, #80	; 0x50
   20f64:	0022      	movs	r2, r4
   20f66:	0021      	movs	r1, r4
   20f68:	2005      	movs	r0, #5
   20f6a:	47b0      	blx	r6
   20f6c:	7828      	ldrb	r0, [r5, #0]
   20f6e:	4b0a      	ldr	r3, [pc, #40]	; (20f98 <RADIO_ScanHandler+0x64>)
   20f70:	4d0a      	ldr	r5, [pc, #40]	; (20f9c <RADIO_ScanHandler+0x68>)
   20f72:	9400      	str	r4, [sp, #0]
   20f74:	0022      	movs	r2, r4
   20f76:	490a      	ldr	r1, [pc, #40]	; (20fa0 <RADIO_ScanHandler+0x6c>)
   20f78:	47a8      	blx	r5
   20f7a:	0020      	movs	r0, r4
   20f7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   20f7e:	46c0      	nop			; (mov r8, r8)
   20f80:	000205a1 	.word	0x000205a1
   20f84:	000200f1 	.word	0x000200f1
   20f88:	20001980 	.word	0x20001980
   20f8c:	0001f835 	.word	0x0001f835
   20f90:	00016315 	.word	0x00016315
   20f94:	00006e21 	.word	0x00006e21
   20f98:	00020ea5 	.word	0x00020ea5
   20f9c:	000159bd 	.word	0x000159bd
   20fa0:	00002328 	.word	0x00002328

00020fa4 <radioScanDoneHandler>:
   20fa4:	b530      	push	{r4, r5, lr}
   20fa6:	4a18      	ldr	r2, [pc, #96]	; (21008 <radioScanDoneHandler+0x64>)
   20fa8:	4918      	ldr	r1, [pc, #96]	; (2100c <radioScanDoneHandler+0x68>)
   20faa:	8813      	ldrh	r3, [r2, #0]
   20fac:	b085      	sub	sp, #20
   20fae:	400b      	ands	r3, r1
   20fb0:	8013      	strh	r3, [r2, #0]
   20fb2:	2200      	movs	r2, #0
   20fb4:	4b16      	ldr	r3, [pc, #88]	; (21010 <radioScanDoneHandler+0x6c>)
   20fb6:	0011      	movs	r1, r2
   20fb8:	0010      	movs	r0, r2
   20fba:	4798      	blx	r3
   20fbc:	2000      	movs	r0, #0
   20fbe:	4b15      	ldr	r3, [pc, #84]	; (21014 <radioScanDoneHandler+0x70>)
   20fc0:	4798      	blx	r3
   20fc2:	4b15      	ldr	r3, [pc, #84]	; (21018 <radioScanDoneHandler+0x74>)
   20fc4:	4798      	blx	r3
   20fc6:	4c15      	ldr	r4, [pc, #84]	; (2101c <radioScanDoneHandler+0x78>)
   20fc8:	0023      	movs	r3, r4
   20fca:	334c      	adds	r3, #76	; 0x4c
   20fcc:	2100      	movs	r1, #0
   20fce:	5e59      	ldrsh	r1, [r3, r1]
   20fd0:	233e      	movs	r3, #62	; 0x3e
   20fd2:	5ee2      	ldrsh	r2, [r4, r3]
   20fd4:	4b12      	ldr	r3, [pc, #72]	; (21020 <radioScanDoneHandler+0x7c>)
   20fd6:	4291      	cmp	r1, r2
   20fd8:	da06      	bge.n	20fe8 <radioScanDoneHandler+0x44>
   20fda:	2002      	movs	r0, #2
   20fdc:	4798      	blx	r3
   20fde:	4b11      	ldr	r3, [pc, #68]	; (21024 <radioScanDoneHandler+0x80>)
   20fe0:	4798      	blx	r3
   20fe2:	2000      	movs	r0, #0
   20fe4:	b005      	add	sp, #20
   20fe6:	bd30      	pop	{r4, r5, pc}
   20fe8:	2207      	movs	r2, #7
   20fea:	ad01      	add	r5, sp, #4
   20fec:	2001      	movs	r0, #1
   20fee:	702a      	strb	r2, [r5, #0]
   20ff0:	4798      	blx	r3
   20ff2:	4b0d      	ldr	r3, [pc, #52]	; (21028 <radioScanDoneHandler+0x84>)
   20ff4:	781b      	ldrb	r3, [r3, #0]
   20ff6:	079b      	lsls	r3, r3, #30
   20ff8:	d5f3      	bpl.n	20fe2 <radioScanDoneHandler+0x3e>
   20ffa:	6923      	ldr	r3, [r4, #16]
   20ffc:	2b00      	cmp	r3, #0
   20ffe:	d0f0      	beq.n	20fe2 <radioScanDoneHandler+0x3e>
   21000:	0029      	movs	r1, r5
   21002:	2002      	movs	r0, #2
   21004:	4798      	blx	r3
   21006:	e7ec      	b.n	20fe2 <radioScanDoneHandler+0x3e>
   21008:	20002044 	.word	0x20002044
   2100c:	fffffdff 	.word	0xfffffdff
   21010:	00016315 	.word	0x00016315
   21014:	00020219 	.word	0x00020219
   21018:	00020631 	.word	0x00020631
   2101c:	20001980 	.word	0x20001980
   21020:	0001fee9 	.word	0x0001fee9
   21024:	00020951 	.word	0x00020951
   21028:	20002046 	.word	0x20002046

0002102c <__gnu_thumb1_case_uqi>:
   2102c:	b402      	push	{r1}
   2102e:	4671      	mov	r1, lr
   21030:	0849      	lsrs	r1, r1, #1
   21032:	0049      	lsls	r1, r1, #1
   21034:	5c09      	ldrb	r1, [r1, r0]
   21036:	0049      	lsls	r1, r1, #1
   21038:	448e      	add	lr, r1
   2103a:	bc02      	pop	{r1}
   2103c:	4770      	bx	lr
   2103e:	46c0      	nop			; (mov r8, r8)

00021040 <__gnu_thumb1_case_shi>:
   21040:	b403      	push	{r0, r1}
   21042:	4671      	mov	r1, lr
   21044:	0849      	lsrs	r1, r1, #1
   21046:	0040      	lsls	r0, r0, #1
   21048:	0049      	lsls	r1, r1, #1
   2104a:	5e09      	ldrsh	r1, [r1, r0]
   2104c:	0049      	lsls	r1, r1, #1
   2104e:	448e      	add	lr, r1
   21050:	bc03      	pop	{r0, r1}
   21052:	4770      	bx	lr

00021054 <__gnu_thumb1_case_uhi>:
   21054:	b403      	push	{r0, r1}
   21056:	4671      	mov	r1, lr
   21058:	0849      	lsrs	r1, r1, #1
   2105a:	0040      	lsls	r0, r0, #1
   2105c:	0049      	lsls	r1, r1, #1
   2105e:	5a09      	ldrh	r1, [r1, r0]
   21060:	0049      	lsls	r1, r1, #1
   21062:	448e      	add	lr, r1
   21064:	bc03      	pop	{r0, r1}
   21066:	4770      	bx	lr

00021068 <__udivsi3>:
   21068:	2200      	movs	r2, #0
   2106a:	0843      	lsrs	r3, r0, #1
   2106c:	428b      	cmp	r3, r1
   2106e:	d374      	bcc.n	2115a <__udivsi3+0xf2>
   21070:	0903      	lsrs	r3, r0, #4
   21072:	428b      	cmp	r3, r1
   21074:	d35f      	bcc.n	21136 <__udivsi3+0xce>
   21076:	0a03      	lsrs	r3, r0, #8
   21078:	428b      	cmp	r3, r1
   2107a:	d344      	bcc.n	21106 <__udivsi3+0x9e>
   2107c:	0b03      	lsrs	r3, r0, #12
   2107e:	428b      	cmp	r3, r1
   21080:	d328      	bcc.n	210d4 <__udivsi3+0x6c>
   21082:	0c03      	lsrs	r3, r0, #16
   21084:	428b      	cmp	r3, r1
   21086:	d30d      	bcc.n	210a4 <__udivsi3+0x3c>
   21088:	22ff      	movs	r2, #255	; 0xff
   2108a:	0209      	lsls	r1, r1, #8
   2108c:	ba12      	rev	r2, r2
   2108e:	0c03      	lsrs	r3, r0, #16
   21090:	428b      	cmp	r3, r1
   21092:	d302      	bcc.n	2109a <__udivsi3+0x32>
   21094:	1212      	asrs	r2, r2, #8
   21096:	0209      	lsls	r1, r1, #8
   21098:	d065      	beq.n	21166 <__udivsi3+0xfe>
   2109a:	0b03      	lsrs	r3, r0, #12
   2109c:	428b      	cmp	r3, r1
   2109e:	d319      	bcc.n	210d4 <__udivsi3+0x6c>
   210a0:	e000      	b.n	210a4 <__udivsi3+0x3c>
   210a2:	0a09      	lsrs	r1, r1, #8
   210a4:	0bc3      	lsrs	r3, r0, #15
   210a6:	428b      	cmp	r3, r1
   210a8:	d301      	bcc.n	210ae <__udivsi3+0x46>
   210aa:	03cb      	lsls	r3, r1, #15
   210ac:	1ac0      	subs	r0, r0, r3
   210ae:	4152      	adcs	r2, r2
   210b0:	0b83      	lsrs	r3, r0, #14
   210b2:	428b      	cmp	r3, r1
   210b4:	d301      	bcc.n	210ba <__udivsi3+0x52>
   210b6:	038b      	lsls	r3, r1, #14
   210b8:	1ac0      	subs	r0, r0, r3
   210ba:	4152      	adcs	r2, r2
   210bc:	0b43      	lsrs	r3, r0, #13
   210be:	428b      	cmp	r3, r1
   210c0:	d301      	bcc.n	210c6 <__udivsi3+0x5e>
   210c2:	034b      	lsls	r3, r1, #13
   210c4:	1ac0      	subs	r0, r0, r3
   210c6:	4152      	adcs	r2, r2
   210c8:	0b03      	lsrs	r3, r0, #12
   210ca:	428b      	cmp	r3, r1
   210cc:	d301      	bcc.n	210d2 <__udivsi3+0x6a>
   210ce:	030b      	lsls	r3, r1, #12
   210d0:	1ac0      	subs	r0, r0, r3
   210d2:	4152      	adcs	r2, r2
   210d4:	0ac3      	lsrs	r3, r0, #11
   210d6:	428b      	cmp	r3, r1
   210d8:	d301      	bcc.n	210de <__udivsi3+0x76>
   210da:	02cb      	lsls	r3, r1, #11
   210dc:	1ac0      	subs	r0, r0, r3
   210de:	4152      	adcs	r2, r2
   210e0:	0a83      	lsrs	r3, r0, #10
   210e2:	428b      	cmp	r3, r1
   210e4:	d301      	bcc.n	210ea <__udivsi3+0x82>
   210e6:	028b      	lsls	r3, r1, #10
   210e8:	1ac0      	subs	r0, r0, r3
   210ea:	4152      	adcs	r2, r2
   210ec:	0a43      	lsrs	r3, r0, #9
   210ee:	428b      	cmp	r3, r1
   210f0:	d301      	bcc.n	210f6 <__udivsi3+0x8e>
   210f2:	024b      	lsls	r3, r1, #9
   210f4:	1ac0      	subs	r0, r0, r3
   210f6:	4152      	adcs	r2, r2
   210f8:	0a03      	lsrs	r3, r0, #8
   210fa:	428b      	cmp	r3, r1
   210fc:	d301      	bcc.n	21102 <__udivsi3+0x9a>
   210fe:	020b      	lsls	r3, r1, #8
   21100:	1ac0      	subs	r0, r0, r3
   21102:	4152      	adcs	r2, r2
   21104:	d2cd      	bcs.n	210a2 <__udivsi3+0x3a>
   21106:	09c3      	lsrs	r3, r0, #7
   21108:	428b      	cmp	r3, r1
   2110a:	d301      	bcc.n	21110 <__udivsi3+0xa8>
   2110c:	01cb      	lsls	r3, r1, #7
   2110e:	1ac0      	subs	r0, r0, r3
   21110:	4152      	adcs	r2, r2
   21112:	0983      	lsrs	r3, r0, #6
   21114:	428b      	cmp	r3, r1
   21116:	d301      	bcc.n	2111c <__udivsi3+0xb4>
   21118:	018b      	lsls	r3, r1, #6
   2111a:	1ac0      	subs	r0, r0, r3
   2111c:	4152      	adcs	r2, r2
   2111e:	0943      	lsrs	r3, r0, #5
   21120:	428b      	cmp	r3, r1
   21122:	d301      	bcc.n	21128 <__udivsi3+0xc0>
   21124:	014b      	lsls	r3, r1, #5
   21126:	1ac0      	subs	r0, r0, r3
   21128:	4152      	adcs	r2, r2
   2112a:	0903      	lsrs	r3, r0, #4
   2112c:	428b      	cmp	r3, r1
   2112e:	d301      	bcc.n	21134 <__udivsi3+0xcc>
   21130:	010b      	lsls	r3, r1, #4
   21132:	1ac0      	subs	r0, r0, r3
   21134:	4152      	adcs	r2, r2
   21136:	08c3      	lsrs	r3, r0, #3
   21138:	428b      	cmp	r3, r1
   2113a:	d301      	bcc.n	21140 <__udivsi3+0xd8>
   2113c:	00cb      	lsls	r3, r1, #3
   2113e:	1ac0      	subs	r0, r0, r3
   21140:	4152      	adcs	r2, r2
   21142:	0883      	lsrs	r3, r0, #2
   21144:	428b      	cmp	r3, r1
   21146:	d301      	bcc.n	2114c <__udivsi3+0xe4>
   21148:	008b      	lsls	r3, r1, #2
   2114a:	1ac0      	subs	r0, r0, r3
   2114c:	4152      	adcs	r2, r2
   2114e:	0843      	lsrs	r3, r0, #1
   21150:	428b      	cmp	r3, r1
   21152:	d301      	bcc.n	21158 <__udivsi3+0xf0>
   21154:	004b      	lsls	r3, r1, #1
   21156:	1ac0      	subs	r0, r0, r3
   21158:	4152      	adcs	r2, r2
   2115a:	1a41      	subs	r1, r0, r1
   2115c:	d200      	bcs.n	21160 <__udivsi3+0xf8>
   2115e:	4601      	mov	r1, r0
   21160:	4152      	adcs	r2, r2
   21162:	4610      	mov	r0, r2
   21164:	4770      	bx	lr
   21166:	e7ff      	b.n	21168 <__udivsi3+0x100>
   21168:	b501      	push	{r0, lr}
   2116a:	2000      	movs	r0, #0
   2116c:	f000 f8f0 	bl	21350 <__aeabi_idiv0>
   21170:	bd02      	pop	{r1, pc}
   21172:	46c0      	nop			; (mov r8, r8)

00021174 <__aeabi_uidivmod>:
   21174:	2900      	cmp	r1, #0
   21176:	d0f7      	beq.n	21168 <__udivsi3+0x100>
   21178:	e776      	b.n	21068 <__udivsi3>
   2117a:	4770      	bx	lr

0002117c <__divsi3>:
   2117c:	4603      	mov	r3, r0
   2117e:	430b      	orrs	r3, r1
   21180:	d47f      	bmi.n	21282 <__divsi3+0x106>
   21182:	2200      	movs	r2, #0
   21184:	0843      	lsrs	r3, r0, #1
   21186:	428b      	cmp	r3, r1
   21188:	d374      	bcc.n	21274 <__divsi3+0xf8>
   2118a:	0903      	lsrs	r3, r0, #4
   2118c:	428b      	cmp	r3, r1
   2118e:	d35f      	bcc.n	21250 <__divsi3+0xd4>
   21190:	0a03      	lsrs	r3, r0, #8
   21192:	428b      	cmp	r3, r1
   21194:	d344      	bcc.n	21220 <__divsi3+0xa4>
   21196:	0b03      	lsrs	r3, r0, #12
   21198:	428b      	cmp	r3, r1
   2119a:	d328      	bcc.n	211ee <__divsi3+0x72>
   2119c:	0c03      	lsrs	r3, r0, #16
   2119e:	428b      	cmp	r3, r1
   211a0:	d30d      	bcc.n	211be <__divsi3+0x42>
   211a2:	22ff      	movs	r2, #255	; 0xff
   211a4:	0209      	lsls	r1, r1, #8
   211a6:	ba12      	rev	r2, r2
   211a8:	0c03      	lsrs	r3, r0, #16
   211aa:	428b      	cmp	r3, r1
   211ac:	d302      	bcc.n	211b4 <__divsi3+0x38>
   211ae:	1212      	asrs	r2, r2, #8
   211b0:	0209      	lsls	r1, r1, #8
   211b2:	d065      	beq.n	21280 <__divsi3+0x104>
   211b4:	0b03      	lsrs	r3, r0, #12
   211b6:	428b      	cmp	r3, r1
   211b8:	d319      	bcc.n	211ee <__divsi3+0x72>
   211ba:	e000      	b.n	211be <__divsi3+0x42>
   211bc:	0a09      	lsrs	r1, r1, #8
   211be:	0bc3      	lsrs	r3, r0, #15
   211c0:	428b      	cmp	r3, r1
   211c2:	d301      	bcc.n	211c8 <__divsi3+0x4c>
   211c4:	03cb      	lsls	r3, r1, #15
   211c6:	1ac0      	subs	r0, r0, r3
   211c8:	4152      	adcs	r2, r2
   211ca:	0b83      	lsrs	r3, r0, #14
   211cc:	428b      	cmp	r3, r1
   211ce:	d301      	bcc.n	211d4 <__divsi3+0x58>
   211d0:	038b      	lsls	r3, r1, #14
   211d2:	1ac0      	subs	r0, r0, r3
   211d4:	4152      	adcs	r2, r2
   211d6:	0b43      	lsrs	r3, r0, #13
   211d8:	428b      	cmp	r3, r1
   211da:	d301      	bcc.n	211e0 <__divsi3+0x64>
   211dc:	034b      	lsls	r3, r1, #13
   211de:	1ac0      	subs	r0, r0, r3
   211e0:	4152      	adcs	r2, r2
   211e2:	0b03      	lsrs	r3, r0, #12
   211e4:	428b      	cmp	r3, r1
   211e6:	d301      	bcc.n	211ec <__divsi3+0x70>
   211e8:	030b      	lsls	r3, r1, #12
   211ea:	1ac0      	subs	r0, r0, r3
   211ec:	4152      	adcs	r2, r2
   211ee:	0ac3      	lsrs	r3, r0, #11
   211f0:	428b      	cmp	r3, r1
   211f2:	d301      	bcc.n	211f8 <__divsi3+0x7c>
   211f4:	02cb      	lsls	r3, r1, #11
   211f6:	1ac0      	subs	r0, r0, r3
   211f8:	4152      	adcs	r2, r2
   211fa:	0a83      	lsrs	r3, r0, #10
   211fc:	428b      	cmp	r3, r1
   211fe:	d301      	bcc.n	21204 <__divsi3+0x88>
   21200:	028b      	lsls	r3, r1, #10
   21202:	1ac0      	subs	r0, r0, r3
   21204:	4152      	adcs	r2, r2
   21206:	0a43      	lsrs	r3, r0, #9
   21208:	428b      	cmp	r3, r1
   2120a:	d301      	bcc.n	21210 <__divsi3+0x94>
   2120c:	024b      	lsls	r3, r1, #9
   2120e:	1ac0      	subs	r0, r0, r3
   21210:	4152      	adcs	r2, r2
   21212:	0a03      	lsrs	r3, r0, #8
   21214:	428b      	cmp	r3, r1
   21216:	d301      	bcc.n	2121c <__divsi3+0xa0>
   21218:	020b      	lsls	r3, r1, #8
   2121a:	1ac0      	subs	r0, r0, r3
   2121c:	4152      	adcs	r2, r2
   2121e:	d2cd      	bcs.n	211bc <__divsi3+0x40>
   21220:	09c3      	lsrs	r3, r0, #7
   21222:	428b      	cmp	r3, r1
   21224:	d301      	bcc.n	2122a <__divsi3+0xae>
   21226:	01cb      	lsls	r3, r1, #7
   21228:	1ac0      	subs	r0, r0, r3
   2122a:	4152      	adcs	r2, r2
   2122c:	0983      	lsrs	r3, r0, #6
   2122e:	428b      	cmp	r3, r1
   21230:	d301      	bcc.n	21236 <__divsi3+0xba>
   21232:	018b      	lsls	r3, r1, #6
   21234:	1ac0      	subs	r0, r0, r3
   21236:	4152      	adcs	r2, r2
   21238:	0943      	lsrs	r3, r0, #5
   2123a:	428b      	cmp	r3, r1
   2123c:	d301      	bcc.n	21242 <__divsi3+0xc6>
   2123e:	014b      	lsls	r3, r1, #5
   21240:	1ac0      	subs	r0, r0, r3
   21242:	4152      	adcs	r2, r2
   21244:	0903      	lsrs	r3, r0, #4
   21246:	428b      	cmp	r3, r1
   21248:	d301      	bcc.n	2124e <__divsi3+0xd2>
   2124a:	010b      	lsls	r3, r1, #4
   2124c:	1ac0      	subs	r0, r0, r3
   2124e:	4152      	adcs	r2, r2
   21250:	08c3      	lsrs	r3, r0, #3
   21252:	428b      	cmp	r3, r1
   21254:	d301      	bcc.n	2125a <__divsi3+0xde>
   21256:	00cb      	lsls	r3, r1, #3
   21258:	1ac0      	subs	r0, r0, r3
   2125a:	4152      	adcs	r2, r2
   2125c:	0883      	lsrs	r3, r0, #2
   2125e:	428b      	cmp	r3, r1
   21260:	d301      	bcc.n	21266 <__divsi3+0xea>
   21262:	008b      	lsls	r3, r1, #2
   21264:	1ac0      	subs	r0, r0, r3
   21266:	4152      	adcs	r2, r2
   21268:	0843      	lsrs	r3, r0, #1
   2126a:	428b      	cmp	r3, r1
   2126c:	d301      	bcc.n	21272 <__divsi3+0xf6>
   2126e:	004b      	lsls	r3, r1, #1
   21270:	1ac0      	subs	r0, r0, r3
   21272:	4152      	adcs	r2, r2
   21274:	1a41      	subs	r1, r0, r1
   21276:	d200      	bcs.n	2127a <__divsi3+0xfe>
   21278:	4601      	mov	r1, r0
   2127a:	4152      	adcs	r2, r2
   2127c:	4610      	mov	r0, r2
   2127e:	4770      	bx	lr
   21280:	e05d      	b.n	2133e <__divsi3+0x1c2>
   21282:	0fca      	lsrs	r2, r1, #31
   21284:	d000      	beq.n	21288 <__divsi3+0x10c>
   21286:	4249      	negs	r1, r1
   21288:	1003      	asrs	r3, r0, #32
   2128a:	d300      	bcc.n	2128e <__divsi3+0x112>
   2128c:	4240      	negs	r0, r0
   2128e:	4053      	eors	r3, r2
   21290:	2200      	movs	r2, #0
   21292:	469c      	mov	ip, r3
   21294:	0903      	lsrs	r3, r0, #4
   21296:	428b      	cmp	r3, r1
   21298:	d32d      	bcc.n	212f6 <__divsi3+0x17a>
   2129a:	0a03      	lsrs	r3, r0, #8
   2129c:	428b      	cmp	r3, r1
   2129e:	d312      	bcc.n	212c6 <__divsi3+0x14a>
   212a0:	22fc      	movs	r2, #252	; 0xfc
   212a2:	0189      	lsls	r1, r1, #6
   212a4:	ba12      	rev	r2, r2
   212a6:	0a03      	lsrs	r3, r0, #8
   212a8:	428b      	cmp	r3, r1
   212aa:	d30c      	bcc.n	212c6 <__divsi3+0x14a>
   212ac:	0189      	lsls	r1, r1, #6
   212ae:	1192      	asrs	r2, r2, #6
   212b0:	428b      	cmp	r3, r1
   212b2:	d308      	bcc.n	212c6 <__divsi3+0x14a>
   212b4:	0189      	lsls	r1, r1, #6
   212b6:	1192      	asrs	r2, r2, #6
   212b8:	428b      	cmp	r3, r1
   212ba:	d304      	bcc.n	212c6 <__divsi3+0x14a>
   212bc:	0189      	lsls	r1, r1, #6
   212be:	d03a      	beq.n	21336 <__divsi3+0x1ba>
   212c0:	1192      	asrs	r2, r2, #6
   212c2:	e000      	b.n	212c6 <__divsi3+0x14a>
   212c4:	0989      	lsrs	r1, r1, #6
   212c6:	09c3      	lsrs	r3, r0, #7
   212c8:	428b      	cmp	r3, r1
   212ca:	d301      	bcc.n	212d0 <__divsi3+0x154>
   212cc:	01cb      	lsls	r3, r1, #7
   212ce:	1ac0      	subs	r0, r0, r3
   212d0:	4152      	adcs	r2, r2
   212d2:	0983      	lsrs	r3, r0, #6
   212d4:	428b      	cmp	r3, r1
   212d6:	d301      	bcc.n	212dc <__divsi3+0x160>
   212d8:	018b      	lsls	r3, r1, #6
   212da:	1ac0      	subs	r0, r0, r3
   212dc:	4152      	adcs	r2, r2
   212de:	0943      	lsrs	r3, r0, #5
   212e0:	428b      	cmp	r3, r1
   212e2:	d301      	bcc.n	212e8 <__divsi3+0x16c>
   212e4:	014b      	lsls	r3, r1, #5
   212e6:	1ac0      	subs	r0, r0, r3
   212e8:	4152      	adcs	r2, r2
   212ea:	0903      	lsrs	r3, r0, #4
   212ec:	428b      	cmp	r3, r1
   212ee:	d301      	bcc.n	212f4 <__divsi3+0x178>
   212f0:	010b      	lsls	r3, r1, #4
   212f2:	1ac0      	subs	r0, r0, r3
   212f4:	4152      	adcs	r2, r2
   212f6:	08c3      	lsrs	r3, r0, #3
   212f8:	428b      	cmp	r3, r1
   212fa:	d301      	bcc.n	21300 <__divsi3+0x184>
   212fc:	00cb      	lsls	r3, r1, #3
   212fe:	1ac0      	subs	r0, r0, r3
   21300:	4152      	adcs	r2, r2
   21302:	0883      	lsrs	r3, r0, #2
   21304:	428b      	cmp	r3, r1
   21306:	d301      	bcc.n	2130c <__divsi3+0x190>
   21308:	008b      	lsls	r3, r1, #2
   2130a:	1ac0      	subs	r0, r0, r3
   2130c:	4152      	adcs	r2, r2
   2130e:	d2d9      	bcs.n	212c4 <__divsi3+0x148>
   21310:	0843      	lsrs	r3, r0, #1
   21312:	428b      	cmp	r3, r1
   21314:	d301      	bcc.n	2131a <__divsi3+0x19e>
   21316:	004b      	lsls	r3, r1, #1
   21318:	1ac0      	subs	r0, r0, r3
   2131a:	4152      	adcs	r2, r2
   2131c:	1a41      	subs	r1, r0, r1
   2131e:	d200      	bcs.n	21322 <__divsi3+0x1a6>
   21320:	4601      	mov	r1, r0
   21322:	4663      	mov	r3, ip
   21324:	4152      	adcs	r2, r2
   21326:	105b      	asrs	r3, r3, #1
   21328:	4610      	mov	r0, r2
   2132a:	d301      	bcc.n	21330 <__divsi3+0x1b4>
   2132c:	4240      	negs	r0, r0
   2132e:	2b00      	cmp	r3, #0
   21330:	d500      	bpl.n	21334 <__divsi3+0x1b8>
   21332:	4249      	negs	r1, r1
   21334:	4770      	bx	lr
   21336:	4663      	mov	r3, ip
   21338:	105b      	asrs	r3, r3, #1
   2133a:	d300      	bcc.n	2133e <__divsi3+0x1c2>
   2133c:	4240      	negs	r0, r0
   2133e:	b501      	push	{r0, lr}
   21340:	2000      	movs	r0, #0
   21342:	f000 f805 	bl	21350 <__aeabi_idiv0>
   21346:	bd02      	pop	{r1, pc}

00021348 <__aeabi_idivmod>:
   21348:	2900      	cmp	r1, #0
   2134a:	d0f8      	beq.n	2133e <__divsi3+0x1c2>
   2134c:	e716      	b.n	2117c <__divsi3>
   2134e:	4770      	bx	lr

00021350 <__aeabi_idiv0>:
   21350:	4770      	bx	lr
   21352:	46c0      	nop			; (mov r8, r8)

00021354 <__aeabi_cdrcmple>:
   21354:	4684      	mov	ip, r0
   21356:	1c10      	adds	r0, r2, #0
   21358:	4662      	mov	r2, ip
   2135a:	468c      	mov	ip, r1
   2135c:	1c19      	adds	r1, r3, #0
   2135e:	4663      	mov	r3, ip
   21360:	e000      	b.n	21364 <__aeabi_cdcmpeq>
   21362:	46c0      	nop			; (mov r8, r8)

00021364 <__aeabi_cdcmpeq>:
   21364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   21366:	f001 ffa3 	bl	232b0 <__ledf2>
   2136a:	2800      	cmp	r0, #0
   2136c:	d401      	bmi.n	21372 <__aeabi_cdcmpeq+0xe>
   2136e:	2100      	movs	r1, #0
   21370:	42c8      	cmn	r0, r1
   21372:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00021374 <__aeabi_dcmpeq>:
   21374:	b510      	push	{r4, lr}
   21376:	f001 fefd 	bl	23174 <__eqdf2>
   2137a:	4240      	negs	r0, r0
   2137c:	3001      	adds	r0, #1
   2137e:	bd10      	pop	{r4, pc}

00021380 <__aeabi_dcmplt>:
   21380:	b510      	push	{r4, lr}
   21382:	f001 ff95 	bl	232b0 <__ledf2>
   21386:	2800      	cmp	r0, #0
   21388:	db01      	blt.n	2138e <__aeabi_dcmplt+0xe>
   2138a:	2000      	movs	r0, #0
   2138c:	bd10      	pop	{r4, pc}
   2138e:	2001      	movs	r0, #1
   21390:	bd10      	pop	{r4, pc}
   21392:	46c0      	nop			; (mov r8, r8)

00021394 <__aeabi_dcmple>:
   21394:	b510      	push	{r4, lr}
   21396:	f001 ff8b 	bl	232b0 <__ledf2>
   2139a:	2800      	cmp	r0, #0
   2139c:	dd01      	ble.n	213a2 <__aeabi_dcmple+0xe>
   2139e:	2000      	movs	r0, #0
   213a0:	bd10      	pop	{r4, pc}
   213a2:	2001      	movs	r0, #1
   213a4:	bd10      	pop	{r4, pc}
   213a6:	46c0      	nop			; (mov r8, r8)

000213a8 <__aeabi_dcmpgt>:
   213a8:	b510      	push	{r4, lr}
   213aa:	f001 ff1d 	bl	231e8 <__gedf2>
   213ae:	2800      	cmp	r0, #0
   213b0:	dc01      	bgt.n	213b6 <__aeabi_dcmpgt+0xe>
   213b2:	2000      	movs	r0, #0
   213b4:	bd10      	pop	{r4, pc}
   213b6:	2001      	movs	r0, #1
   213b8:	bd10      	pop	{r4, pc}
   213ba:	46c0      	nop			; (mov r8, r8)

000213bc <__aeabi_dcmpge>:
   213bc:	b510      	push	{r4, lr}
   213be:	f001 ff13 	bl	231e8 <__gedf2>
   213c2:	2800      	cmp	r0, #0
   213c4:	da01      	bge.n	213ca <__aeabi_dcmpge+0xe>
   213c6:	2000      	movs	r0, #0
   213c8:	bd10      	pop	{r4, pc}
   213ca:	2001      	movs	r0, #1
   213cc:	bd10      	pop	{r4, pc}
   213ce:	46c0      	nop			; (mov r8, r8)

000213d0 <__aeabi_cfrcmple>:
   213d0:	4684      	mov	ip, r0
   213d2:	1c08      	adds	r0, r1, #0
   213d4:	4661      	mov	r1, ip
   213d6:	e7ff      	b.n	213d8 <__aeabi_cfcmpeq>

000213d8 <__aeabi_cfcmpeq>:
   213d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   213da:	f000 fcd3 	bl	21d84 <__lesf2>
   213de:	2800      	cmp	r0, #0
   213e0:	d401      	bmi.n	213e6 <__aeabi_cfcmpeq+0xe>
   213e2:	2100      	movs	r1, #0
   213e4:	42c8      	cmn	r0, r1
   213e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000213e8 <__aeabi_fcmpeq>:
   213e8:	b510      	push	{r4, lr}
   213ea:	f000 fc65 	bl	21cb8 <__eqsf2>
   213ee:	4240      	negs	r0, r0
   213f0:	3001      	adds	r0, #1
   213f2:	bd10      	pop	{r4, pc}

000213f4 <__aeabi_fcmplt>:
   213f4:	b510      	push	{r4, lr}
   213f6:	f000 fcc5 	bl	21d84 <__lesf2>
   213fa:	2800      	cmp	r0, #0
   213fc:	db01      	blt.n	21402 <__aeabi_fcmplt+0xe>
   213fe:	2000      	movs	r0, #0
   21400:	bd10      	pop	{r4, pc}
   21402:	2001      	movs	r0, #1
   21404:	bd10      	pop	{r4, pc}
   21406:	46c0      	nop			; (mov r8, r8)

00021408 <__aeabi_fcmple>:
   21408:	b510      	push	{r4, lr}
   2140a:	f000 fcbb 	bl	21d84 <__lesf2>
   2140e:	2800      	cmp	r0, #0
   21410:	dd01      	ble.n	21416 <__aeabi_fcmple+0xe>
   21412:	2000      	movs	r0, #0
   21414:	bd10      	pop	{r4, pc}
   21416:	2001      	movs	r0, #1
   21418:	bd10      	pop	{r4, pc}
   2141a:	46c0      	nop			; (mov r8, r8)

0002141c <__aeabi_fcmpgt>:
   2141c:	b510      	push	{r4, lr}
   2141e:	f000 fc71 	bl	21d04 <__gesf2>
   21422:	2800      	cmp	r0, #0
   21424:	dc01      	bgt.n	2142a <__aeabi_fcmpgt+0xe>
   21426:	2000      	movs	r0, #0
   21428:	bd10      	pop	{r4, pc}
   2142a:	2001      	movs	r0, #1
   2142c:	bd10      	pop	{r4, pc}
   2142e:	46c0      	nop			; (mov r8, r8)

00021430 <__aeabi_fcmpge>:
   21430:	b510      	push	{r4, lr}
   21432:	f000 fc67 	bl	21d04 <__gesf2>
   21436:	2800      	cmp	r0, #0
   21438:	da01      	bge.n	2143e <__aeabi_fcmpge+0xe>
   2143a:	2000      	movs	r0, #0
   2143c:	bd10      	pop	{r4, pc}
   2143e:	2001      	movs	r0, #1
   21440:	bd10      	pop	{r4, pc}
   21442:	46c0      	nop			; (mov r8, r8)

00021444 <__aeabi_uldivmod>:
   21444:	2b00      	cmp	r3, #0
   21446:	d111      	bne.n	2146c <__aeabi_uldivmod+0x28>
   21448:	2a00      	cmp	r2, #0
   2144a:	d10f      	bne.n	2146c <__aeabi_uldivmod+0x28>
   2144c:	2900      	cmp	r1, #0
   2144e:	d100      	bne.n	21452 <__aeabi_uldivmod+0xe>
   21450:	2800      	cmp	r0, #0
   21452:	d002      	beq.n	2145a <__aeabi_uldivmod+0x16>
   21454:	2100      	movs	r1, #0
   21456:	43c9      	mvns	r1, r1
   21458:	1c08      	adds	r0, r1, #0
   2145a:	b407      	push	{r0, r1, r2}
   2145c:	4802      	ldr	r0, [pc, #8]	; (21468 <__aeabi_uldivmod+0x24>)
   2145e:	a102      	add	r1, pc, #8	; (adr r1, 21468 <__aeabi_uldivmod+0x24>)
   21460:	1840      	adds	r0, r0, r1
   21462:	9002      	str	r0, [sp, #8]
   21464:	bd03      	pop	{r0, r1, pc}
   21466:	46c0      	nop			; (mov r8, r8)
   21468:	fffffee9 	.word	0xfffffee9
   2146c:	b403      	push	{r0, r1}
   2146e:	4668      	mov	r0, sp
   21470:	b501      	push	{r0, lr}
   21472:	9802      	ldr	r0, [sp, #8]
   21474:	f000 f886 	bl	21584 <__udivmoddi4>
   21478:	9b01      	ldr	r3, [sp, #4]
   2147a:	469e      	mov	lr, r3
   2147c:	b002      	add	sp, #8
   2147e:	bc0c      	pop	{r2, r3}
   21480:	4770      	bx	lr
   21482:	46c0      	nop			; (mov r8, r8)

00021484 <__aeabi_lmul>:
   21484:	b5f0      	push	{r4, r5, r6, r7, lr}
   21486:	46ce      	mov	lr, r9
   21488:	4647      	mov	r7, r8
   2148a:	0415      	lsls	r5, r2, #16
   2148c:	0c2d      	lsrs	r5, r5, #16
   2148e:	002e      	movs	r6, r5
   21490:	b580      	push	{r7, lr}
   21492:	0407      	lsls	r7, r0, #16
   21494:	0c14      	lsrs	r4, r2, #16
   21496:	0c3f      	lsrs	r7, r7, #16
   21498:	4699      	mov	r9, r3
   2149a:	0c03      	lsrs	r3, r0, #16
   2149c:	437e      	muls	r6, r7
   2149e:	435d      	muls	r5, r3
   214a0:	4367      	muls	r7, r4
   214a2:	4363      	muls	r3, r4
   214a4:	197f      	adds	r7, r7, r5
   214a6:	0c34      	lsrs	r4, r6, #16
   214a8:	19e4      	adds	r4, r4, r7
   214aa:	469c      	mov	ip, r3
   214ac:	42a5      	cmp	r5, r4
   214ae:	d903      	bls.n	214b8 <__aeabi_lmul+0x34>
   214b0:	2380      	movs	r3, #128	; 0x80
   214b2:	025b      	lsls	r3, r3, #9
   214b4:	4698      	mov	r8, r3
   214b6:	44c4      	add	ip, r8
   214b8:	464b      	mov	r3, r9
   214ba:	4351      	muls	r1, r2
   214bc:	4343      	muls	r3, r0
   214be:	0436      	lsls	r6, r6, #16
   214c0:	0c36      	lsrs	r6, r6, #16
   214c2:	0c25      	lsrs	r5, r4, #16
   214c4:	0424      	lsls	r4, r4, #16
   214c6:	4465      	add	r5, ip
   214c8:	19a4      	adds	r4, r4, r6
   214ca:	1859      	adds	r1, r3, r1
   214cc:	1949      	adds	r1, r1, r5
   214ce:	0020      	movs	r0, r4
   214d0:	bc0c      	pop	{r2, r3}
   214d2:	4690      	mov	r8, r2
   214d4:	4699      	mov	r9, r3
   214d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000214d8 <__aeabi_f2uiz>:
   214d8:	219e      	movs	r1, #158	; 0x9e
   214da:	b510      	push	{r4, lr}
   214dc:	05c9      	lsls	r1, r1, #23
   214de:	1c04      	adds	r4, r0, #0
   214e0:	f7ff ffa6 	bl	21430 <__aeabi_fcmpge>
   214e4:	2800      	cmp	r0, #0
   214e6:	d103      	bne.n	214f0 <__aeabi_f2uiz+0x18>
   214e8:	1c20      	adds	r0, r4, #0
   214ea:	f000 ff49 	bl	22380 <__aeabi_f2iz>
   214ee:	bd10      	pop	{r4, pc}
   214f0:	219e      	movs	r1, #158	; 0x9e
   214f2:	1c20      	adds	r0, r4, #0
   214f4:	05c9      	lsls	r1, r1, #23
   214f6:	f000 fda7 	bl	22048 <__aeabi_fsub>
   214fa:	f000 ff41 	bl	22380 <__aeabi_f2iz>
   214fe:	2380      	movs	r3, #128	; 0x80
   21500:	061b      	lsls	r3, r3, #24
   21502:	469c      	mov	ip, r3
   21504:	4460      	add	r0, ip
   21506:	e7f2      	b.n	214ee <__aeabi_f2uiz+0x16>

00021508 <__aeabi_d2uiz>:
   21508:	b570      	push	{r4, r5, r6, lr}
   2150a:	2200      	movs	r2, #0
   2150c:	4b0c      	ldr	r3, [pc, #48]	; (21540 <__aeabi_d2uiz+0x38>)
   2150e:	0004      	movs	r4, r0
   21510:	000d      	movs	r5, r1
   21512:	f7ff ff53 	bl	213bc <__aeabi_dcmpge>
   21516:	2800      	cmp	r0, #0
   21518:	d104      	bne.n	21524 <__aeabi_d2uiz+0x1c>
   2151a:	0020      	movs	r0, r4
   2151c:	0029      	movs	r1, r5
   2151e:	f002 fcbf 	bl	23ea0 <__aeabi_d2iz>
   21522:	bd70      	pop	{r4, r5, r6, pc}
   21524:	4b06      	ldr	r3, [pc, #24]	; (21540 <__aeabi_d2uiz+0x38>)
   21526:	2200      	movs	r2, #0
   21528:	0020      	movs	r0, r4
   2152a:	0029      	movs	r1, r5
   2152c:	f002 f9a2 	bl	23874 <__aeabi_dsub>
   21530:	f002 fcb6 	bl	23ea0 <__aeabi_d2iz>
   21534:	2380      	movs	r3, #128	; 0x80
   21536:	061b      	lsls	r3, r3, #24
   21538:	469c      	mov	ip, r3
   2153a:	4460      	add	r0, ip
   2153c:	e7f1      	b.n	21522 <__aeabi_d2uiz+0x1a>
   2153e:	46c0      	nop			; (mov r8, r8)
   21540:	41e00000 	.word	0x41e00000

00021544 <__aeabi_f2ulz>:
   21544:	b570      	push	{r4, r5, r6, lr}
   21546:	f002 fd59 	bl	23ffc <__aeabi_f2d>
   2154a:	2200      	movs	r2, #0
   2154c:	4b0b      	ldr	r3, [pc, #44]	; (2157c <__aeabi_f2ulz+0x38>)
   2154e:	000d      	movs	r5, r1
   21550:	0004      	movs	r4, r0
   21552:	f001 ff0f 	bl	23374 <__aeabi_dmul>
   21556:	f7ff ffd7 	bl	21508 <__aeabi_d2uiz>
   2155a:	0006      	movs	r6, r0
   2155c:	f002 fd16 	bl	23f8c <__aeabi_ui2d>
   21560:	2200      	movs	r2, #0
   21562:	4b07      	ldr	r3, [pc, #28]	; (21580 <__aeabi_f2ulz+0x3c>)
   21564:	f001 ff06 	bl	23374 <__aeabi_dmul>
   21568:	0002      	movs	r2, r0
   2156a:	000b      	movs	r3, r1
   2156c:	0020      	movs	r0, r4
   2156e:	0029      	movs	r1, r5
   21570:	f002 f980 	bl	23874 <__aeabi_dsub>
   21574:	f7ff ffc8 	bl	21508 <__aeabi_d2uiz>
   21578:	0031      	movs	r1, r6
   2157a:	bd70      	pop	{r4, r5, r6, pc}
   2157c:	3df00000 	.word	0x3df00000
   21580:	41f00000 	.word	0x41f00000

00021584 <__udivmoddi4>:
   21584:	b5f0      	push	{r4, r5, r6, r7, lr}
   21586:	4657      	mov	r7, sl
   21588:	464e      	mov	r6, r9
   2158a:	4645      	mov	r5, r8
   2158c:	46de      	mov	lr, fp
   2158e:	b5e0      	push	{r5, r6, r7, lr}
   21590:	0004      	movs	r4, r0
   21592:	b083      	sub	sp, #12
   21594:	000d      	movs	r5, r1
   21596:	4692      	mov	sl, r2
   21598:	4699      	mov	r9, r3
   2159a:	428b      	cmp	r3, r1
   2159c:	d82f      	bhi.n	215fe <__udivmoddi4+0x7a>
   2159e:	d02c      	beq.n	215fa <__udivmoddi4+0x76>
   215a0:	4649      	mov	r1, r9
   215a2:	4650      	mov	r0, sl
   215a4:	f002 fd9a 	bl	240dc <__clzdi2>
   215a8:	0029      	movs	r1, r5
   215aa:	0006      	movs	r6, r0
   215ac:	0020      	movs	r0, r4
   215ae:	f002 fd95 	bl	240dc <__clzdi2>
   215b2:	1a33      	subs	r3, r6, r0
   215b4:	4698      	mov	r8, r3
   215b6:	3b20      	subs	r3, #32
   215b8:	469b      	mov	fp, r3
   215ba:	d500      	bpl.n	215be <__udivmoddi4+0x3a>
   215bc:	e074      	b.n	216a8 <__udivmoddi4+0x124>
   215be:	4653      	mov	r3, sl
   215c0:	465a      	mov	r2, fp
   215c2:	4093      	lsls	r3, r2
   215c4:	001f      	movs	r7, r3
   215c6:	4653      	mov	r3, sl
   215c8:	4642      	mov	r2, r8
   215ca:	4093      	lsls	r3, r2
   215cc:	001e      	movs	r6, r3
   215ce:	42af      	cmp	r7, r5
   215d0:	d829      	bhi.n	21626 <__udivmoddi4+0xa2>
   215d2:	d026      	beq.n	21622 <__udivmoddi4+0x9e>
   215d4:	465b      	mov	r3, fp
   215d6:	1ba4      	subs	r4, r4, r6
   215d8:	41bd      	sbcs	r5, r7
   215da:	2b00      	cmp	r3, #0
   215dc:	da00      	bge.n	215e0 <__udivmoddi4+0x5c>
   215de:	e079      	b.n	216d4 <__udivmoddi4+0x150>
   215e0:	2200      	movs	r2, #0
   215e2:	2300      	movs	r3, #0
   215e4:	9200      	str	r2, [sp, #0]
   215e6:	9301      	str	r3, [sp, #4]
   215e8:	2301      	movs	r3, #1
   215ea:	465a      	mov	r2, fp
   215ec:	4093      	lsls	r3, r2
   215ee:	9301      	str	r3, [sp, #4]
   215f0:	2301      	movs	r3, #1
   215f2:	4642      	mov	r2, r8
   215f4:	4093      	lsls	r3, r2
   215f6:	9300      	str	r3, [sp, #0]
   215f8:	e019      	b.n	2162e <__udivmoddi4+0xaa>
   215fa:	4282      	cmp	r2, r0
   215fc:	d9d0      	bls.n	215a0 <__udivmoddi4+0x1c>
   215fe:	2200      	movs	r2, #0
   21600:	2300      	movs	r3, #0
   21602:	9200      	str	r2, [sp, #0]
   21604:	9301      	str	r3, [sp, #4]
   21606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   21608:	2b00      	cmp	r3, #0
   2160a:	d001      	beq.n	21610 <__udivmoddi4+0x8c>
   2160c:	601c      	str	r4, [r3, #0]
   2160e:	605d      	str	r5, [r3, #4]
   21610:	9800      	ldr	r0, [sp, #0]
   21612:	9901      	ldr	r1, [sp, #4]
   21614:	b003      	add	sp, #12
   21616:	bc3c      	pop	{r2, r3, r4, r5}
   21618:	4690      	mov	r8, r2
   2161a:	4699      	mov	r9, r3
   2161c:	46a2      	mov	sl, r4
   2161e:	46ab      	mov	fp, r5
   21620:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21622:	42a3      	cmp	r3, r4
   21624:	d9d6      	bls.n	215d4 <__udivmoddi4+0x50>
   21626:	2200      	movs	r2, #0
   21628:	2300      	movs	r3, #0
   2162a:	9200      	str	r2, [sp, #0]
   2162c:	9301      	str	r3, [sp, #4]
   2162e:	4643      	mov	r3, r8
   21630:	2b00      	cmp	r3, #0
   21632:	d0e8      	beq.n	21606 <__udivmoddi4+0x82>
   21634:	07fb      	lsls	r3, r7, #31
   21636:	0872      	lsrs	r2, r6, #1
   21638:	431a      	orrs	r2, r3
   2163a:	4646      	mov	r6, r8
   2163c:	087b      	lsrs	r3, r7, #1
   2163e:	e00e      	b.n	2165e <__udivmoddi4+0xda>
   21640:	42ab      	cmp	r3, r5
   21642:	d101      	bne.n	21648 <__udivmoddi4+0xc4>
   21644:	42a2      	cmp	r2, r4
   21646:	d80c      	bhi.n	21662 <__udivmoddi4+0xde>
   21648:	1aa4      	subs	r4, r4, r2
   2164a:	419d      	sbcs	r5, r3
   2164c:	2001      	movs	r0, #1
   2164e:	1924      	adds	r4, r4, r4
   21650:	416d      	adcs	r5, r5
   21652:	2100      	movs	r1, #0
   21654:	3e01      	subs	r6, #1
   21656:	1824      	adds	r4, r4, r0
   21658:	414d      	adcs	r5, r1
   2165a:	2e00      	cmp	r6, #0
   2165c:	d006      	beq.n	2166c <__udivmoddi4+0xe8>
   2165e:	42ab      	cmp	r3, r5
   21660:	d9ee      	bls.n	21640 <__udivmoddi4+0xbc>
   21662:	3e01      	subs	r6, #1
   21664:	1924      	adds	r4, r4, r4
   21666:	416d      	adcs	r5, r5
   21668:	2e00      	cmp	r6, #0
   2166a:	d1f8      	bne.n	2165e <__udivmoddi4+0xda>
   2166c:	465b      	mov	r3, fp
   2166e:	9800      	ldr	r0, [sp, #0]
   21670:	9901      	ldr	r1, [sp, #4]
   21672:	1900      	adds	r0, r0, r4
   21674:	4169      	adcs	r1, r5
   21676:	2b00      	cmp	r3, #0
   21678:	db22      	blt.n	216c0 <__udivmoddi4+0x13c>
   2167a:	002b      	movs	r3, r5
   2167c:	465a      	mov	r2, fp
   2167e:	40d3      	lsrs	r3, r2
   21680:	002a      	movs	r2, r5
   21682:	4644      	mov	r4, r8
   21684:	40e2      	lsrs	r2, r4
   21686:	001c      	movs	r4, r3
   21688:	465b      	mov	r3, fp
   2168a:	0015      	movs	r5, r2
   2168c:	2b00      	cmp	r3, #0
   2168e:	db2c      	blt.n	216ea <__udivmoddi4+0x166>
   21690:	0026      	movs	r6, r4
   21692:	409e      	lsls	r6, r3
   21694:	0033      	movs	r3, r6
   21696:	0026      	movs	r6, r4
   21698:	4647      	mov	r7, r8
   2169a:	40be      	lsls	r6, r7
   2169c:	0032      	movs	r2, r6
   2169e:	1a80      	subs	r0, r0, r2
   216a0:	4199      	sbcs	r1, r3
   216a2:	9000      	str	r0, [sp, #0]
   216a4:	9101      	str	r1, [sp, #4]
   216a6:	e7ae      	b.n	21606 <__udivmoddi4+0x82>
   216a8:	4642      	mov	r2, r8
   216aa:	2320      	movs	r3, #32
   216ac:	1a9b      	subs	r3, r3, r2
   216ae:	4652      	mov	r2, sl
   216b0:	40da      	lsrs	r2, r3
   216b2:	4641      	mov	r1, r8
   216b4:	0013      	movs	r3, r2
   216b6:	464a      	mov	r2, r9
   216b8:	408a      	lsls	r2, r1
   216ba:	0017      	movs	r7, r2
   216bc:	431f      	orrs	r7, r3
   216be:	e782      	b.n	215c6 <__udivmoddi4+0x42>
   216c0:	4642      	mov	r2, r8
   216c2:	2320      	movs	r3, #32
   216c4:	1a9b      	subs	r3, r3, r2
   216c6:	002a      	movs	r2, r5
   216c8:	4646      	mov	r6, r8
   216ca:	409a      	lsls	r2, r3
   216cc:	0023      	movs	r3, r4
   216ce:	40f3      	lsrs	r3, r6
   216d0:	4313      	orrs	r3, r2
   216d2:	e7d5      	b.n	21680 <__udivmoddi4+0xfc>
   216d4:	4642      	mov	r2, r8
   216d6:	2320      	movs	r3, #32
   216d8:	2100      	movs	r1, #0
   216da:	1a9b      	subs	r3, r3, r2
   216dc:	2200      	movs	r2, #0
   216de:	9100      	str	r1, [sp, #0]
   216e0:	9201      	str	r2, [sp, #4]
   216e2:	2201      	movs	r2, #1
   216e4:	40da      	lsrs	r2, r3
   216e6:	9201      	str	r2, [sp, #4]
   216e8:	e782      	b.n	215f0 <__udivmoddi4+0x6c>
   216ea:	4642      	mov	r2, r8
   216ec:	2320      	movs	r3, #32
   216ee:	0026      	movs	r6, r4
   216f0:	1a9b      	subs	r3, r3, r2
   216f2:	40de      	lsrs	r6, r3
   216f4:	002f      	movs	r7, r5
   216f6:	46b4      	mov	ip, r6
   216f8:	4097      	lsls	r7, r2
   216fa:	4666      	mov	r6, ip
   216fc:	003b      	movs	r3, r7
   216fe:	4333      	orrs	r3, r6
   21700:	e7c9      	b.n	21696 <__udivmoddi4+0x112>
   21702:	46c0      	nop			; (mov r8, r8)

00021704 <__aeabi_fadd>:
   21704:	b5f0      	push	{r4, r5, r6, r7, lr}
   21706:	46c6      	mov	lr, r8
   21708:	024e      	lsls	r6, r1, #9
   2170a:	0247      	lsls	r7, r0, #9
   2170c:	0a76      	lsrs	r6, r6, #9
   2170e:	0a7b      	lsrs	r3, r7, #9
   21710:	0044      	lsls	r4, r0, #1
   21712:	0fc5      	lsrs	r5, r0, #31
   21714:	00f7      	lsls	r7, r6, #3
   21716:	0048      	lsls	r0, r1, #1
   21718:	4698      	mov	r8, r3
   2171a:	b500      	push	{lr}
   2171c:	0e24      	lsrs	r4, r4, #24
   2171e:	002a      	movs	r2, r5
   21720:	00db      	lsls	r3, r3, #3
   21722:	0e00      	lsrs	r0, r0, #24
   21724:	0fc9      	lsrs	r1, r1, #31
   21726:	46bc      	mov	ip, r7
   21728:	428d      	cmp	r5, r1
   2172a:	d067      	beq.n	217fc <__aeabi_fadd+0xf8>
   2172c:	1a22      	subs	r2, r4, r0
   2172e:	2a00      	cmp	r2, #0
   21730:	dc00      	bgt.n	21734 <__aeabi_fadd+0x30>
   21732:	e0a5      	b.n	21880 <__aeabi_fadd+0x17c>
   21734:	2800      	cmp	r0, #0
   21736:	d13a      	bne.n	217ae <__aeabi_fadd+0xaa>
   21738:	2f00      	cmp	r7, #0
   2173a:	d100      	bne.n	2173e <__aeabi_fadd+0x3a>
   2173c:	e093      	b.n	21866 <__aeabi_fadd+0x162>
   2173e:	1e51      	subs	r1, r2, #1
   21740:	2900      	cmp	r1, #0
   21742:	d000      	beq.n	21746 <__aeabi_fadd+0x42>
   21744:	e0bc      	b.n	218c0 <__aeabi_fadd+0x1bc>
   21746:	2401      	movs	r4, #1
   21748:	1bdb      	subs	r3, r3, r7
   2174a:	015a      	lsls	r2, r3, #5
   2174c:	d546      	bpl.n	217dc <__aeabi_fadd+0xd8>
   2174e:	019b      	lsls	r3, r3, #6
   21750:	099e      	lsrs	r6, r3, #6
   21752:	0030      	movs	r0, r6
   21754:	f002 fca4 	bl	240a0 <__clzsi2>
   21758:	3805      	subs	r0, #5
   2175a:	4086      	lsls	r6, r0
   2175c:	4284      	cmp	r4, r0
   2175e:	dd00      	ble.n	21762 <__aeabi_fadd+0x5e>
   21760:	e09d      	b.n	2189e <__aeabi_fadd+0x19a>
   21762:	1b04      	subs	r4, r0, r4
   21764:	0032      	movs	r2, r6
   21766:	2020      	movs	r0, #32
   21768:	3401      	adds	r4, #1
   2176a:	40e2      	lsrs	r2, r4
   2176c:	1b04      	subs	r4, r0, r4
   2176e:	40a6      	lsls	r6, r4
   21770:	0033      	movs	r3, r6
   21772:	1e5e      	subs	r6, r3, #1
   21774:	41b3      	sbcs	r3, r6
   21776:	2400      	movs	r4, #0
   21778:	4313      	orrs	r3, r2
   2177a:	075a      	lsls	r2, r3, #29
   2177c:	d004      	beq.n	21788 <__aeabi_fadd+0x84>
   2177e:	220f      	movs	r2, #15
   21780:	401a      	ands	r2, r3
   21782:	2a04      	cmp	r2, #4
   21784:	d000      	beq.n	21788 <__aeabi_fadd+0x84>
   21786:	3304      	adds	r3, #4
   21788:	015a      	lsls	r2, r3, #5
   2178a:	d529      	bpl.n	217e0 <__aeabi_fadd+0xdc>
   2178c:	3401      	adds	r4, #1
   2178e:	2cff      	cmp	r4, #255	; 0xff
   21790:	d100      	bne.n	21794 <__aeabi_fadd+0x90>
   21792:	e081      	b.n	21898 <__aeabi_fadd+0x194>
   21794:	002a      	movs	r2, r5
   21796:	019b      	lsls	r3, r3, #6
   21798:	0a5b      	lsrs	r3, r3, #9
   2179a:	b2e4      	uxtb	r4, r4
   2179c:	025b      	lsls	r3, r3, #9
   2179e:	05e4      	lsls	r4, r4, #23
   217a0:	0a58      	lsrs	r0, r3, #9
   217a2:	07d2      	lsls	r2, r2, #31
   217a4:	4320      	orrs	r0, r4
   217a6:	4310      	orrs	r0, r2
   217a8:	bc04      	pop	{r2}
   217aa:	4690      	mov	r8, r2
   217ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   217ae:	2cff      	cmp	r4, #255	; 0xff
   217b0:	d0e3      	beq.n	2177a <__aeabi_fadd+0x76>
   217b2:	2180      	movs	r1, #128	; 0x80
   217b4:	0038      	movs	r0, r7
   217b6:	04c9      	lsls	r1, r1, #19
   217b8:	4308      	orrs	r0, r1
   217ba:	4684      	mov	ip, r0
   217bc:	2a1b      	cmp	r2, #27
   217be:	dd00      	ble.n	217c2 <__aeabi_fadd+0xbe>
   217c0:	e082      	b.n	218c8 <__aeabi_fadd+0x1c4>
   217c2:	2020      	movs	r0, #32
   217c4:	4661      	mov	r1, ip
   217c6:	40d1      	lsrs	r1, r2
   217c8:	1a82      	subs	r2, r0, r2
   217ca:	4660      	mov	r0, ip
   217cc:	4090      	lsls	r0, r2
   217ce:	0002      	movs	r2, r0
   217d0:	1e50      	subs	r0, r2, #1
   217d2:	4182      	sbcs	r2, r0
   217d4:	430a      	orrs	r2, r1
   217d6:	1a9b      	subs	r3, r3, r2
   217d8:	015a      	lsls	r2, r3, #5
   217da:	d4b8      	bmi.n	2174e <__aeabi_fadd+0x4a>
   217dc:	075a      	lsls	r2, r3, #29
   217de:	d1ce      	bne.n	2177e <__aeabi_fadd+0x7a>
   217e0:	08de      	lsrs	r6, r3, #3
   217e2:	002a      	movs	r2, r5
   217e4:	2cff      	cmp	r4, #255	; 0xff
   217e6:	d13a      	bne.n	2185e <__aeabi_fadd+0x15a>
   217e8:	2e00      	cmp	r6, #0
   217ea:	d100      	bne.n	217ee <__aeabi_fadd+0xea>
   217ec:	e0ae      	b.n	2194c <__aeabi_fadd+0x248>
   217ee:	2380      	movs	r3, #128	; 0x80
   217f0:	03db      	lsls	r3, r3, #15
   217f2:	4333      	orrs	r3, r6
   217f4:	025b      	lsls	r3, r3, #9
   217f6:	0a5b      	lsrs	r3, r3, #9
   217f8:	24ff      	movs	r4, #255	; 0xff
   217fa:	e7cf      	b.n	2179c <__aeabi_fadd+0x98>
   217fc:	1a21      	subs	r1, r4, r0
   217fe:	2900      	cmp	r1, #0
   21800:	dd52      	ble.n	218a8 <__aeabi_fadd+0x1a4>
   21802:	2800      	cmp	r0, #0
   21804:	d031      	beq.n	2186a <__aeabi_fadd+0x166>
   21806:	2cff      	cmp	r4, #255	; 0xff
   21808:	d0b7      	beq.n	2177a <__aeabi_fadd+0x76>
   2180a:	2080      	movs	r0, #128	; 0x80
   2180c:	003e      	movs	r6, r7
   2180e:	04c0      	lsls	r0, r0, #19
   21810:	4306      	orrs	r6, r0
   21812:	46b4      	mov	ip, r6
   21814:	291b      	cmp	r1, #27
   21816:	dd00      	ble.n	2181a <__aeabi_fadd+0x116>
   21818:	e0aa      	b.n	21970 <__aeabi_fadd+0x26c>
   2181a:	2620      	movs	r6, #32
   2181c:	4660      	mov	r0, ip
   2181e:	40c8      	lsrs	r0, r1
   21820:	1a71      	subs	r1, r6, r1
   21822:	4666      	mov	r6, ip
   21824:	408e      	lsls	r6, r1
   21826:	0031      	movs	r1, r6
   21828:	1e4e      	subs	r6, r1, #1
   2182a:	41b1      	sbcs	r1, r6
   2182c:	4301      	orrs	r1, r0
   2182e:	185b      	adds	r3, r3, r1
   21830:	0159      	lsls	r1, r3, #5
   21832:	d5d3      	bpl.n	217dc <__aeabi_fadd+0xd8>
   21834:	3401      	adds	r4, #1
   21836:	2cff      	cmp	r4, #255	; 0xff
   21838:	d100      	bne.n	2183c <__aeabi_fadd+0x138>
   2183a:	e087      	b.n	2194c <__aeabi_fadd+0x248>
   2183c:	2201      	movs	r2, #1
   2183e:	4978      	ldr	r1, [pc, #480]	; (21a20 <__aeabi_fadd+0x31c>)
   21840:	401a      	ands	r2, r3
   21842:	085b      	lsrs	r3, r3, #1
   21844:	400b      	ands	r3, r1
   21846:	4313      	orrs	r3, r2
   21848:	e797      	b.n	2177a <__aeabi_fadd+0x76>
   2184a:	2c00      	cmp	r4, #0
   2184c:	d000      	beq.n	21850 <__aeabi_fadd+0x14c>
   2184e:	e0a7      	b.n	219a0 <__aeabi_fadd+0x29c>
   21850:	2b00      	cmp	r3, #0
   21852:	d000      	beq.n	21856 <__aeabi_fadd+0x152>
   21854:	e0b6      	b.n	219c4 <__aeabi_fadd+0x2c0>
   21856:	1e3b      	subs	r3, r7, #0
   21858:	d162      	bne.n	21920 <__aeabi_fadd+0x21c>
   2185a:	2600      	movs	r6, #0
   2185c:	2200      	movs	r2, #0
   2185e:	0273      	lsls	r3, r6, #9
   21860:	0a5b      	lsrs	r3, r3, #9
   21862:	b2e4      	uxtb	r4, r4
   21864:	e79a      	b.n	2179c <__aeabi_fadd+0x98>
   21866:	0014      	movs	r4, r2
   21868:	e787      	b.n	2177a <__aeabi_fadd+0x76>
   2186a:	2f00      	cmp	r7, #0
   2186c:	d04d      	beq.n	2190a <__aeabi_fadd+0x206>
   2186e:	1e48      	subs	r0, r1, #1
   21870:	2800      	cmp	r0, #0
   21872:	d157      	bne.n	21924 <__aeabi_fadd+0x220>
   21874:	4463      	add	r3, ip
   21876:	2401      	movs	r4, #1
   21878:	015a      	lsls	r2, r3, #5
   2187a:	d5af      	bpl.n	217dc <__aeabi_fadd+0xd8>
   2187c:	2402      	movs	r4, #2
   2187e:	e7dd      	b.n	2183c <__aeabi_fadd+0x138>
   21880:	2a00      	cmp	r2, #0
   21882:	d124      	bne.n	218ce <__aeabi_fadd+0x1ca>
   21884:	1c62      	adds	r2, r4, #1
   21886:	b2d2      	uxtb	r2, r2
   21888:	2a01      	cmp	r2, #1
   2188a:	ddde      	ble.n	2184a <__aeabi_fadd+0x146>
   2188c:	1bde      	subs	r6, r3, r7
   2188e:	0172      	lsls	r2, r6, #5
   21890:	d535      	bpl.n	218fe <__aeabi_fadd+0x1fa>
   21892:	1afe      	subs	r6, r7, r3
   21894:	000d      	movs	r5, r1
   21896:	e75c      	b.n	21752 <__aeabi_fadd+0x4e>
   21898:	002a      	movs	r2, r5
   2189a:	2300      	movs	r3, #0
   2189c:	e77e      	b.n	2179c <__aeabi_fadd+0x98>
   2189e:	0033      	movs	r3, r6
   218a0:	4a60      	ldr	r2, [pc, #384]	; (21a24 <__aeabi_fadd+0x320>)
   218a2:	1a24      	subs	r4, r4, r0
   218a4:	4013      	ands	r3, r2
   218a6:	e768      	b.n	2177a <__aeabi_fadd+0x76>
   218a8:	2900      	cmp	r1, #0
   218aa:	d163      	bne.n	21974 <__aeabi_fadd+0x270>
   218ac:	1c61      	adds	r1, r4, #1
   218ae:	b2c8      	uxtb	r0, r1
   218b0:	2801      	cmp	r0, #1
   218b2:	dd4e      	ble.n	21952 <__aeabi_fadd+0x24e>
   218b4:	29ff      	cmp	r1, #255	; 0xff
   218b6:	d049      	beq.n	2194c <__aeabi_fadd+0x248>
   218b8:	4463      	add	r3, ip
   218ba:	085b      	lsrs	r3, r3, #1
   218bc:	000c      	movs	r4, r1
   218be:	e75c      	b.n	2177a <__aeabi_fadd+0x76>
   218c0:	2aff      	cmp	r2, #255	; 0xff
   218c2:	d041      	beq.n	21948 <__aeabi_fadd+0x244>
   218c4:	000a      	movs	r2, r1
   218c6:	e779      	b.n	217bc <__aeabi_fadd+0xb8>
   218c8:	2201      	movs	r2, #1
   218ca:	1a9b      	subs	r3, r3, r2
   218cc:	e784      	b.n	217d8 <__aeabi_fadd+0xd4>
   218ce:	2c00      	cmp	r4, #0
   218d0:	d01d      	beq.n	2190e <__aeabi_fadd+0x20a>
   218d2:	28ff      	cmp	r0, #255	; 0xff
   218d4:	d022      	beq.n	2191c <__aeabi_fadd+0x218>
   218d6:	2480      	movs	r4, #128	; 0x80
   218d8:	04e4      	lsls	r4, r4, #19
   218da:	4252      	negs	r2, r2
   218dc:	4323      	orrs	r3, r4
   218de:	2a1b      	cmp	r2, #27
   218e0:	dd00      	ble.n	218e4 <__aeabi_fadd+0x1e0>
   218e2:	e08a      	b.n	219fa <__aeabi_fadd+0x2f6>
   218e4:	001c      	movs	r4, r3
   218e6:	2520      	movs	r5, #32
   218e8:	40d4      	lsrs	r4, r2
   218ea:	1aaa      	subs	r2, r5, r2
   218ec:	4093      	lsls	r3, r2
   218ee:	1e5a      	subs	r2, r3, #1
   218f0:	4193      	sbcs	r3, r2
   218f2:	4323      	orrs	r3, r4
   218f4:	4662      	mov	r2, ip
   218f6:	0004      	movs	r4, r0
   218f8:	1ad3      	subs	r3, r2, r3
   218fa:	000d      	movs	r5, r1
   218fc:	e725      	b.n	2174a <__aeabi_fadd+0x46>
   218fe:	2e00      	cmp	r6, #0
   21900:	d000      	beq.n	21904 <__aeabi_fadd+0x200>
   21902:	e726      	b.n	21752 <__aeabi_fadd+0x4e>
   21904:	2200      	movs	r2, #0
   21906:	2400      	movs	r4, #0
   21908:	e7a9      	b.n	2185e <__aeabi_fadd+0x15a>
   2190a:	000c      	movs	r4, r1
   2190c:	e735      	b.n	2177a <__aeabi_fadd+0x76>
   2190e:	2b00      	cmp	r3, #0
   21910:	d04d      	beq.n	219ae <__aeabi_fadd+0x2aa>
   21912:	43d2      	mvns	r2, r2
   21914:	2a00      	cmp	r2, #0
   21916:	d0ed      	beq.n	218f4 <__aeabi_fadd+0x1f0>
   21918:	28ff      	cmp	r0, #255	; 0xff
   2191a:	d1e0      	bne.n	218de <__aeabi_fadd+0x1da>
   2191c:	4663      	mov	r3, ip
   2191e:	24ff      	movs	r4, #255	; 0xff
   21920:	000d      	movs	r5, r1
   21922:	e72a      	b.n	2177a <__aeabi_fadd+0x76>
   21924:	29ff      	cmp	r1, #255	; 0xff
   21926:	d00f      	beq.n	21948 <__aeabi_fadd+0x244>
   21928:	0001      	movs	r1, r0
   2192a:	e773      	b.n	21814 <__aeabi_fadd+0x110>
   2192c:	2b00      	cmp	r3, #0
   2192e:	d061      	beq.n	219f4 <__aeabi_fadd+0x2f0>
   21930:	24ff      	movs	r4, #255	; 0xff
   21932:	2f00      	cmp	r7, #0
   21934:	d100      	bne.n	21938 <__aeabi_fadd+0x234>
   21936:	e720      	b.n	2177a <__aeabi_fadd+0x76>
   21938:	2280      	movs	r2, #128	; 0x80
   2193a:	4641      	mov	r1, r8
   2193c:	03d2      	lsls	r2, r2, #15
   2193e:	4211      	tst	r1, r2
   21940:	d002      	beq.n	21948 <__aeabi_fadd+0x244>
   21942:	4216      	tst	r6, r2
   21944:	d100      	bne.n	21948 <__aeabi_fadd+0x244>
   21946:	003b      	movs	r3, r7
   21948:	24ff      	movs	r4, #255	; 0xff
   2194a:	e716      	b.n	2177a <__aeabi_fadd+0x76>
   2194c:	24ff      	movs	r4, #255	; 0xff
   2194e:	2300      	movs	r3, #0
   21950:	e724      	b.n	2179c <__aeabi_fadd+0x98>
   21952:	2c00      	cmp	r4, #0
   21954:	d1ea      	bne.n	2192c <__aeabi_fadd+0x228>
   21956:	2b00      	cmp	r3, #0
   21958:	d058      	beq.n	21a0c <__aeabi_fadd+0x308>
   2195a:	2f00      	cmp	r7, #0
   2195c:	d100      	bne.n	21960 <__aeabi_fadd+0x25c>
   2195e:	e70c      	b.n	2177a <__aeabi_fadd+0x76>
   21960:	4463      	add	r3, ip
   21962:	015a      	lsls	r2, r3, #5
   21964:	d400      	bmi.n	21968 <__aeabi_fadd+0x264>
   21966:	e739      	b.n	217dc <__aeabi_fadd+0xd8>
   21968:	4a2e      	ldr	r2, [pc, #184]	; (21a24 <__aeabi_fadd+0x320>)
   2196a:	000c      	movs	r4, r1
   2196c:	4013      	ands	r3, r2
   2196e:	e704      	b.n	2177a <__aeabi_fadd+0x76>
   21970:	2101      	movs	r1, #1
   21972:	e75c      	b.n	2182e <__aeabi_fadd+0x12a>
   21974:	2c00      	cmp	r4, #0
   21976:	d11e      	bne.n	219b6 <__aeabi_fadd+0x2b2>
   21978:	2b00      	cmp	r3, #0
   2197a:	d040      	beq.n	219fe <__aeabi_fadd+0x2fa>
   2197c:	43c9      	mvns	r1, r1
   2197e:	2900      	cmp	r1, #0
   21980:	d00b      	beq.n	2199a <__aeabi_fadd+0x296>
   21982:	28ff      	cmp	r0, #255	; 0xff
   21984:	d036      	beq.n	219f4 <__aeabi_fadd+0x2f0>
   21986:	291b      	cmp	r1, #27
   21988:	dc47      	bgt.n	21a1a <__aeabi_fadd+0x316>
   2198a:	001c      	movs	r4, r3
   2198c:	2620      	movs	r6, #32
   2198e:	40cc      	lsrs	r4, r1
   21990:	1a71      	subs	r1, r6, r1
   21992:	408b      	lsls	r3, r1
   21994:	1e59      	subs	r1, r3, #1
   21996:	418b      	sbcs	r3, r1
   21998:	4323      	orrs	r3, r4
   2199a:	4463      	add	r3, ip
   2199c:	0004      	movs	r4, r0
   2199e:	e747      	b.n	21830 <__aeabi_fadd+0x12c>
   219a0:	2b00      	cmp	r3, #0
   219a2:	d118      	bne.n	219d6 <__aeabi_fadd+0x2d2>
   219a4:	1e3b      	subs	r3, r7, #0
   219a6:	d02d      	beq.n	21a04 <__aeabi_fadd+0x300>
   219a8:	000d      	movs	r5, r1
   219aa:	24ff      	movs	r4, #255	; 0xff
   219ac:	e6e5      	b.n	2177a <__aeabi_fadd+0x76>
   219ae:	003b      	movs	r3, r7
   219b0:	0004      	movs	r4, r0
   219b2:	000d      	movs	r5, r1
   219b4:	e6e1      	b.n	2177a <__aeabi_fadd+0x76>
   219b6:	28ff      	cmp	r0, #255	; 0xff
   219b8:	d01c      	beq.n	219f4 <__aeabi_fadd+0x2f0>
   219ba:	2480      	movs	r4, #128	; 0x80
   219bc:	04e4      	lsls	r4, r4, #19
   219be:	4249      	negs	r1, r1
   219c0:	4323      	orrs	r3, r4
   219c2:	e7e0      	b.n	21986 <__aeabi_fadd+0x282>
   219c4:	2f00      	cmp	r7, #0
   219c6:	d100      	bne.n	219ca <__aeabi_fadd+0x2c6>
   219c8:	e6d7      	b.n	2177a <__aeabi_fadd+0x76>
   219ca:	1bde      	subs	r6, r3, r7
   219cc:	0172      	lsls	r2, r6, #5
   219ce:	d51f      	bpl.n	21a10 <__aeabi_fadd+0x30c>
   219d0:	1afb      	subs	r3, r7, r3
   219d2:	000d      	movs	r5, r1
   219d4:	e6d1      	b.n	2177a <__aeabi_fadd+0x76>
   219d6:	24ff      	movs	r4, #255	; 0xff
   219d8:	2f00      	cmp	r7, #0
   219da:	d100      	bne.n	219de <__aeabi_fadd+0x2da>
   219dc:	e6cd      	b.n	2177a <__aeabi_fadd+0x76>
   219de:	2280      	movs	r2, #128	; 0x80
   219e0:	4640      	mov	r0, r8
   219e2:	03d2      	lsls	r2, r2, #15
   219e4:	4210      	tst	r0, r2
   219e6:	d0af      	beq.n	21948 <__aeabi_fadd+0x244>
   219e8:	4216      	tst	r6, r2
   219ea:	d1ad      	bne.n	21948 <__aeabi_fadd+0x244>
   219ec:	003b      	movs	r3, r7
   219ee:	000d      	movs	r5, r1
   219f0:	24ff      	movs	r4, #255	; 0xff
   219f2:	e6c2      	b.n	2177a <__aeabi_fadd+0x76>
   219f4:	4663      	mov	r3, ip
   219f6:	24ff      	movs	r4, #255	; 0xff
   219f8:	e6bf      	b.n	2177a <__aeabi_fadd+0x76>
   219fa:	2301      	movs	r3, #1
   219fc:	e77a      	b.n	218f4 <__aeabi_fadd+0x1f0>
   219fe:	003b      	movs	r3, r7
   21a00:	0004      	movs	r4, r0
   21a02:	e6ba      	b.n	2177a <__aeabi_fadd+0x76>
   21a04:	2680      	movs	r6, #128	; 0x80
   21a06:	2200      	movs	r2, #0
   21a08:	03f6      	lsls	r6, r6, #15
   21a0a:	e6f0      	b.n	217ee <__aeabi_fadd+0xea>
   21a0c:	003b      	movs	r3, r7
   21a0e:	e6b4      	b.n	2177a <__aeabi_fadd+0x76>
   21a10:	1e33      	subs	r3, r6, #0
   21a12:	d000      	beq.n	21a16 <__aeabi_fadd+0x312>
   21a14:	e6e2      	b.n	217dc <__aeabi_fadd+0xd8>
   21a16:	2200      	movs	r2, #0
   21a18:	e721      	b.n	2185e <__aeabi_fadd+0x15a>
   21a1a:	2301      	movs	r3, #1
   21a1c:	e7bd      	b.n	2199a <__aeabi_fadd+0x296>
   21a1e:	46c0      	nop			; (mov r8, r8)
   21a20:	7dffffff 	.word	0x7dffffff
   21a24:	fbffffff 	.word	0xfbffffff

00021a28 <__aeabi_fdiv>:
   21a28:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a2a:	4657      	mov	r7, sl
   21a2c:	464e      	mov	r6, r9
   21a2e:	46de      	mov	lr, fp
   21a30:	4645      	mov	r5, r8
   21a32:	b5e0      	push	{r5, r6, r7, lr}
   21a34:	0244      	lsls	r4, r0, #9
   21a36:	0043      	lsls	r3, r0, #1
   21a38:	0fc6      	lsrs	r6, r0, #31
   21a3a:	b083      	sub	sp, #12
   21a3c:	1c0f      	adds	r7, r1, #0
   21a3e:	0a64      	lsrs	r4, r4, #9
   21a40:	0e1b      	lsrs	r3, r3, #24
   21a42:	46b2      	mov	sl, r6
   21a44:	d053      	beq.n	21aee <__aeabi_fdiv+0xc6>
   21a46:	2bff      	cmp	r3, #255	; 0xff
   21a48:	d027      	beq.n	21a9a <__aeabi_fdiv+0x72>
   21a4a:	2280      	movs	r2, #128	; 0x80
   21a4c:	00e4      	lsls	r4, r4, #3
   21a4e:	04d2      	lsls	r2, r2, #19
   21a50:	4314      	orrs	r4, r2
   21a52:	227f      	movs	r2, #127	; 0x7f
   21a54:	4252      	negs	r2, r2
   21a56:	4690      	mov	r8, r2
   21a58:	4498      	add	r8, r3
   21a5a:	2300      	movs	r3, #0
   21a5c:	4699      	mov	r9, r3
   21a5e:	469b      	mov	fp, r3
   21a60:	027d      	lsls	r5, r7, #9
   21a62:	0078      	lsls	r0, r7, #1
   21a64:	0ffb      	lsrs	r3, r7, #31
   21a66:	0a6d      	lsrs	r5, r5, #9
   21a68:	0e00      	lsrs	r0, r0, #24
   21a6a:	9300      	str	r3, [sp, #0]
   21a6c:	d024      	beq.n	21ab8 <__aeabi_fdiv+0x90>
   21a6e:	28ff      	cmp	r0, #255	; 0xff
   21a70:	d046      	beq.n	21b00 <__aeabi_fdiv+0xd8>
   21a72:	2380      	movs	r3, #128	; 0x80
   21a74:	2100      	movs	r1, #0
   21a76:	00ed      	lsls	r5, r5, #3
   21a78:	04db      	lsls	r3, r3, #19
   21a7a:	431d      	orrs	r5, r3
   21a7c:	387f      	subs	r0, #127	; 0x7f
   21a7e:	4647      	mov	r7, r8
   21a80:	1a38      	subs	r0, r7, r0
   21a82:	464f      	mov	r7, r9
   21a84:	430f      	orrs	r7, r1
   21a86:	00bf      	lsls	r7, r7, #2
   21a88:	46b9      	mov	r9, r7
   21a8a:	0033      	movs	r3, r6
   21a8c:	9a00      	ldr	r2, [sp, #0]
   21a8e:	4f87      	ldr	r7, [pc, #540]	; (21cac <__aeabi_fdiv+0x284>)
   21a90:	4053      	eors	r3, r2
   21a92:	464a      	mov	r2, r9
   21a94:	58ba      	ldr	r2, [r7, r2]
   21a96:	9301      	str	r3, [sp, #4]
   21a98:	4697      	mov	pc, r2
   21a9a:	2c00      	cmp	r4, #0
   21a9c:	d14e      	bne.n	21b3c <__aeabi_fdiv+0x114>
   21a9e:	2308      	movs	r3, #8
   21aa0:	4699      	mov	r9, r3
   21aa2:	33f7      	adds	r3, #247	; 0xf7
   21aa4:	4698      	mov	r8, r3
   21aa6:	3bfd      	subs	r3, #253	; 0xfd
   21aa8:	469b      	mov	fp, r3
   21aaa:	027d      	lsls	r5, r7, #9
   21aac:	0078      	lsls	r0, r7, #1
   21aae:	0ffb      	lsrs	r3, r7, #31
   21ab0:	0a6d      	lsrs	r5, r5, #9
   21ab2:	0e00      	lsrs	r0, r0, #24
   21ab4:	9300      	str	r3, [sp, #0]
   21ab6:	d1da      	bne.n	21a6e <__aeabi_fdiv+0x46>
   21ab8:	2d00      	cmp	r5, #0
   21aba:	d126      	bne.n	21b0a <__aeabi_fdiv+0xe2>
   21abc:	2000      	movs	r0, #0
   21abe:	2101      	movs	r1, #1
   21ac0:	0033      	movs	r3, r6
   21ac2:	9a00      	ldr	r2, [sp, #0]
   21ac4:	4f7a      	ldr	r7, [pc, #488]	; (21cb0 <__aeabi_fdiv+0x288>)
   21ac6:	4053      	eors	r3, r2
   21ac8:	4642      	mov	r2, r8
   21aca:	1a10      	subs	r0, r2, r0
   21acc:	464a      	mov	r2, r9
   21ace:	430a      	orrs	r2, r1
   21ad0:	0092      	lsls	r2, r2, #2
   21ad2:	58ba      	ldr	r2, [r7, r2]
   21ad4:	001d      	movs	r5, r3
   21ad6:	4697      	mov	pc, r2
   21ad8:	9b00      	ldr	r3, [sp, #0]
   21ada:	002c      	movs	r4, r5
   21adc:	469a      	mov	sl, r3
   21ade:	468b      	mov	fp, r1
   21ae0:	465b      	mov	r3, fp
   21ae2:	2b02      	cmp	r3, #2
   21ae4:	d131      	bne.n	21b4a <__aeabi_fdiv+0x122>
   21ae6:	4653      	mov	r3, sl
   21ae8:	21ff      	movs	r1, #255	; 0xff
   21aea:	2400      	movs	r4, #0
   21aec:	e038      	b.n	21b60 <__aeabi_fdiv+0x138>
   21aee:	2c00      	cmp	r4, #0
   21af0:	d117      	bne.n	21b22 <__aeabi_fdiv+0xfa>
   21af2:	2304      	movs	r3, #4
   21af4:	4699      	mov	r9, r3
   21af6:	2300      	movs	r3, #0
   21af8:	4698      	mov	r8, r3
   21afa:	3301      	adds	r3, #1
   21afc:	469b      	mov	fp, r3
   21afe:	e7af      	b.n	21a60 <__aeabi_fdiv+0x38>
   21b00:	20ff      	movs	r0, #255	; 0xff
   21b02:	2d00      	cmp	r5, #0
   21b04:	d10b      	bne.n	21b1e <__aeabi_fdiv+0xf6>
   21b06:	2102      	movs	r1, #2
   21b08:	e7da      	b.n	21ac0 <__aeabi_fdiv+0x98>
   21b0a:	0028      	movs	r0, r5
   21b0c:	f002 fac8 	bl	240a0 <__clzsi2>
   21b10:	1f43      	subs	r3, r0, #5
   21b12:	409d      	lsls	r5, r3
   21b14:	2376      	movs	r3, #118	; 0x76
   21b16:	425b      	negs	r3, r3
   21b18:	1a18      	subs	r0, r3, r0
   21b1a:	2100      	movs	r1, #0
   21b1c:	e7af      	b.n	21a7e <__aeabi_fdiv+0x56>
   21b1e:	2103      	movs	r1, #3
   21b20:	e7ad      	b.n	21a7e <__aeabi_fdiv+0x56>
   21b22:	0020      	movs	r0, r4
   21b24:	f002 fabc 	bl	240a0 <__clzsi2>
   21b28:	1f43      	subs	r3, r0, #5
   21b2a:	409c      	lsls	r4, r3
   21b2c:	2376      	movs	r3, #118	; 0x76
   21b2e:	425b      	negs	r3, r3
   21b30:	1a1b      	subs	r3, r3, r0
   21b32:	4698      	mov	r8, r3
   21b34:	2300      	movs	r3, #0
   21b36:	4699      	mov	r9, r3
   21b38:	469b      	mov	fp, r3
   21b3a:	e791      	b.n	21a60 <__aeabi_fdiv+0x38>
   21b3c:	230c      	movs	r3, #12
   21b3e:	4699      	mov	r9, r3
   21b40:	33f3      	adds	r3, #243	; 0xf3
   21b42:	4698      	mov	r8, r3
   21b44:	3bfc      	subs	r3, #252	; 0xfc
   21b46:	469b      	mov	fp, r3
   21b48:	e78a      	b.n	21a60 <__aeabi_fdiv+0x38>
   21b4a:	2b03      	cmp	r3, #3
   21b4c:	d100      	bne.n	21b50 <__aeabi_fdiv+0x128>
   21b4e:	e0a5      	b.n	21c9c <__aeabi_fdiv+0x274>
   21b50:	4655      	mov	r5, sl
   21b52:	2b01      	cmp	r3, #1
   21b54:	d000      	beq.n	21b58 <__aeabi_fdiv+0x130>
   21b56:	e081      	b.n	21c5c <__aeabi_fdiv+0x234>
   21b58:	2301      	movs	r3, #1
   21b5a:	2100      	movs	r1, #0
   21b5c:	2400      	movs	r4, #0
   21b5e:	402b      	ands	r3, r5
   21b60:	0264      	lsls	r4, r4, #9
   21b62:	05c9      	lsls	r1, r1, #23
   21b64:	0a60      	lsrs	r0, r4, #9
   21b66:	07db      	lsls	r3, r3, #31
   21b68:	4308      	orrs	r0, r1
   21b6a:	4318      	orrs	r0, r3
   21b6c:	b003      	add	sp, #12
   21b6e:	bc3c      	pop	{r2, r3, r4, r5}
   21b70:	4690      	mov	r8, r2
   21b72:	4699      	mov	r9, r3
   21b74:	46a2      	mov	sl, r4
   21b76:	46ab      	mov	fp, r5
   21b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b7a:	2480      	movs	r4, #128	; 0x80
   21b7c:	2300      	movs	r3, #0
   21b7e:	03e4      	lsls	r4, r4, #15
   21b80:	21ff      	movs	r1, #255	; 0xff
   21b82:	e7ed      	b.n	21b60 <__aeabi_fdiv+0x138>
   21b84:	21ff      	movs	r1, #255	; 0xff
   21b86:	2400      	movs	r4, #0
   21b88:	e7ea      	b.n	21b60 <__aeabi_fdiv+0x138>
   21b8a:	2301      	movs	r3, #1
   21b8c:	1a59      	subs	r1, r3, r1
   21b8e:	291b      	cmp	r1, #27
   21b90:	dd66      	ble.n	21c60 <__aeabi_fdiv+0x238>
   21b92:	9a01      	ldr	r2, [sp, #4]
   21b94:	4013      	ands	r3, r2
   21b96:	2100      	movs	r1, #0
   21b98:	2400      	movs	r4, #0
   21b9a:	e7e1      	b.n	21b60 <__aeabi_fdiv+0x138>
   21b9c:	2380      	movs	r3, #128	; 0x80
   21b9e:	03db      	lsls	r3, r3, #15
   21ba0:	421c      	tst	r4, r3
   21ba2:	d038      	beq.n	21c16 <__aeabi_fdiv+0x1ee>
   21ba4:	421d      	tst	r5, r3
   21ba6:	d051      	beq.n	21c4c <__aeabi_fdiv+0x224>
   21ba8:	431c      	orrs	r4, r3
   21baa:	0264      	lsls	r4, r4, #9
   21bac:	0a64      	lsrs	r4, r4, #9
   21bae:	0033      	movs	r3, r6
   21bb0:	21ff      	movs	r1, #255	; 0xff
   21bb2:	e7d5      	b.n	21b60 <__aeabi_fdiv+0x138>
   21bb4:	0163      	lsls	r3, r4, #5
   21bb6:	016c      	lsls	r4, r5, #5
   21bb8:	42a3      	cmp	r3, r4
   21bba:	d23b      	bcs.n	21c34 <__aeabi_fdiv+0x20c>
   21bbc:	261b      	movs	r6, #27
   21bbe:	2100      	movs	r1, #0
   21bc0:	3801      	subs	r0, #1
   21bc2:	2501      	movs	r5, #1
   21bc4:	001f      	movs	r7, r3
   21bc6:	0049      	lsls	r1, r1, #1
   21bc8:	005b      	lsls	r3, r3, #1
   21bca:	2f00      	cmp	r7, #0
   21bcc:	db01      	blt.n	21bd2 <__aeabi_fdiv+0x1aa>
   21bce:	429c      	cmp	r4, r3
   21bd0:	d801      	bhi.n	21bd6 <__aeabi_fdiv+0x1ae>
   21bd2:	1b1b      	subs	r3, r3, r4
   21bd4:	4329      	orrs	r1, r5
   21bd6:	3e01      	subs	r6, #1
   21bd8:	2e00      	cmp	r6, #0
   21bda:	d1f3      	bne.n	21bc4 <__aeabi_fdiv+0x19c>
   21bdc:	001c      	movs	r4, r3
   21bde:	1e63      	subs	r3, r4, #1
   21be0:	419c      	sbcs	r4, r3
   21be2:	430c      	orrs	r4, r1
   21be4:	0001      	movs	r1, r0
   21be6:	317f      	adds	r1, #127	; 0x7f
   21be8:	2900      	cmp	r1, #0
   21bea:	ddce      	ble.n	21b8a <__aeabi_fdiv+0x162>
   21bec:	0763      	lsls	r3, r4, #29
   21bee:	d004      	beq.n	21bfa <__aeabi_fdiv+0x1d2>
   21bf0:	230f      	movs	r3, #15
   21bf2:	4023      	ands	r3, r4
   21bf4:	2b04      	cmp	r3, #4
   21bf6:	d000      	beq.n	21bfa <__aeabi_fdiv+0x1d2>
   21bf8:	3404      	adds	r4, #4
   21bfa:	0123      	lsls	r3, r4, #4
   21bfc:	d503      	bpl.n	21c06 <__aeabi_fdiv+0x1de>
   21bfe:	0001      	movs	r1, r0
   21c00:	4b2c      	ldr	r3, [pc, #176]	; (21cb4 <__aeabi_fdiv+0x28c>)
   21c02:	3180      	adds	r1, #128	; 0x80
   21c04:	401c      	ands	r4, r3
   21c06:	29fe      	cmp	r1, #254	; 0xfe
   21c08:	dd0d      	ble.n	21c26 <__aeabi_fdiv+0x1fe>
   21c0a:	2301      	movs	r3, #1
   21c0c:	9a01      	ldr	r2, [sp, #4]
   21c0e:	21ff      	movs	r1, #255	; 0xff
   21c10:	4013      	ands	r3, r2
   21c12:	2400      	movs	r4, #0
   21c14:	e7a4      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c16:	2380      	movs	r3, #128	; 0x80
   21c18:	03db      	lsls	r3, r3, #15
   21c1a:	431c      	orrs	r4, r3
   21c1c:	0264      	lsls	r4, r4, #9
   21c1e:	0a64      	lsrs	r4, r4, #9
   21c20:	0033      	movs	r3, r6
   21c22:	21ff      	movs	r1, #255	; 0xff
   21c24:	e79c      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c26:	2301      	movs	r3, #1
   21c28:	9a01      	ldr	r2, [sp, #4]
   21c2a:	01a4      	lsls	r4, r4, #6
   21c2c:	0a64      	lsrs	r4, r4, #9
   21c2e:	b2c9      	uxtb	r1, r1
   21c30:	4013      	ands	r3, r2
   21c32:	e795      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c34:	1b1b      	subs	r3, r3, r4
   21c36:	261a      	movs	r6, #26
   21c38:	2101      	movs	r1, #1
   21c3a:	e7c2      	b.n	21bc2 <__aeabi_fdiv+0x19a>
   21c3c:	9b00      	ldr	r3, [sp, #0]
   21c3e:	468b      	mov	fp, r1
   21c40:	469a      	mov	sl, r3
   21c42:	2400      	movs	r4, #0
   21c44:	e74c      	b.n	21ae0 <__aeabi_fdiv+0xb8>
   21c46:	0263      	lsls	r3, r4, #9
   21c48:	d5e5      	bpl.n	21c16 <__aeabi_fdiv+0x1ee>
   21c4a:	2500      	movs	r5, #0
   21c4c:	2480      	movs	r4, #128	; 0x80
   21c4e:	03e4      	lsls	r4, r4, #15
   21c50:	432c      	orrs	r4, r5
   21c52:	0264      	lsls	r4, r4, #9
   21c54:	0a64      	lsrs	r4, r4, #9
   21c56:	9b00      	ldr	r3, [sp, #0]
   21c58:	21ff      	movs	r1, #255	; 0xff
   21c5a:	e781      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c5c:	9501      	str	r5, [sp, #4]
   21c5e:	e7c1      	b.n	21be4 <__aeabi_fdiv+0x1bc>
   21c60:	0023      	movs	r3, r4
   21c62:	2020      	movs	r0, #32
   21c64:	40cb      	lsrs	r3, r1
   21c66:	1a41      	subs	r1, r0, r1
   21c68:	408c      	lsls	r4, r1
   21c6a:	1e61      	subs	r1, r4, #1
   21c6c:	418c      	sbcs	r4, r1
   21c6e:	431c      	orrs	r4, r3
   21c70:	0763      	lsls	r3, r4, #29
   21c72:	d004      	beq.n	21c7e <__aeabi_fdiv+0x256>
   21c74:	230f      	movs	r3, #15
   21c76:	4023      	ands	r3, r4
   21c78:	2b04      	cmp	r3, #4
   21c7a:	d000      	beq.n	21c7e <__aeabi_fdiv+0x256>
   21c7c:	3404      	adds	r4, #4
   21c7e:	0163      	lsls	r3, r4, #5
   21c80:	d505      	bpl.n	21c8e <__aeabi_fdiv+0x266>
   21c82:	2301      	movs	r3, #1
   21c84:	9a01      	ldr	r2, [sp, #4]
   21c86:	2101      	movs	r1, #1
   21c88:	4013      	ands	r3, r2
   21c8a:	2400      	movs	r4, #0
   21c8c:	e768      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c8e:	2301      	movs	r3, #1
   21c90:	9a01      	ldr	r2, [sp, #4]
   21c92:	01a4      	lsls	r4, r4, #6
   21c94:	0a64      	lsrs	r4, r4, #9
   21c96:	4013      	ands	r3, r2
   21c98:	2100      	movs	r1, #0
   21c9a:	e761      	b.n	21b60 <__aeabi_fdiv+0x138>
   21c9c:	2380      	movs	r3, #128	; 0x80
   21c9e:	03db      	lsls	r3, r3, #15
   21ca0:	431c      	orrs	r4, r3
   21ca2:	0264      	lsls	r4, r4, #9
   21ca4:	0a64      	lsrs	r4, r4, #9
   21ca6:	4653      	mov	r3, sl
   21ca8:	21ff      	movs	r1, #255	; 0xff
   21caa:	e759      	b.n	21b60 <__aeabi_fdiv+0x138>
   21cac:	0002ce20 	.word	0x0002ce20
   21cb0:	0002ce60 	.word	0x0002ce60
   21cb4:	f7ffffff 	.word	0xf7ffffff

00021cb8 <__eqsf2>:
   21cb8:	b570      	push	{r4, r5, r6, lr}
   21cba:	0042      	lsls	r2, r0, #1
   21cbc:	0245      	lsls	r5, r0, #9
   21cbe:	024e      	lsls	r6, r1, #9
   21cc0:	004c      	lsls	r4, r1, #1
   21cc2:	0fc3      	lsrs	r3, r0, #31
   21cc4:	0a6d      	lsrs	r5, r5, #9
   21cc6:	0e12      	lsrs	r2, r2, #24
   21cc8:	0a76      	lsrs	r6, r6, #9
   21cca:	0e24      	lsrs	r4, r4, #24
   21ccc:	0fc9      	lsrs	r1, r1, #31
   21cce:	2001      	movs	r0, #1
   21cd0:	2aff      	cmp	r2, #255	; 0xff
   21cd2:	d006      	beq.n	21ce2 <__eqsf2+0x2a>
   21cd4:	2cff      	cmp	r4, #255	; 0xff
   21cd6:	d003      	beq.n	21ce0 <__eqsf2+0x28>
   21cd8:	42a2      	cmp	r2, r4
   21cda:	d101      	bne.n	21ce0 <__eqsf2+0x28>
   21cdc:	42b5      	cmp	r5, r6
   21cde:	d006      	beq.n	21cee <__eqsf2+0x36>
   21ce0:	bd70      	pop	{r4, r5, r6, pc}
   21ce2:	2d00      	cmp	r5, #0
   21ce4:	d1fc      	bne.n	21ce0 <__eqsf2+0x28>
   21ce6:	2cff      	cmp	r4, #255	; 0xff
   21ce8:	d1fa      	bne.n	21ce0 <__eqsf2+0x28>
   21cea:	2e00      	cmp	r6, #0
   21cec:	d1f8      	bne.n	21ce0 <__eqsf2+0x28>
   21cee:	428b      	cmp	r3, r1
   21cf0:	d006      	beq.n	21d00 <__eqsf2+0x48>
   21cf2:	2001      	movs	r0, #1
   21cf4:	2a00      	cmp	r2, #0
   21cf6:	d1f3      	bne.n	21ce0 <__eqsf2+0x28>
   21cf8:	0028      	movs	r0, r5
   21cfa:	1e45      	subs	r5, r0, #1
   21cfc:	41a8      	sbcs	r0, r5
   21cfe:	e7ef      	b.n	21ce0 <__eqsf2+0x28>
   21d00:	2000      	movs	r0, #0
   21d02:	e7ed      	b.n	21ce0 <__eqsf2+0x28>

00021d04 <__gesf2>:
   21d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d06:	0042      	lsls	r2, r0, #1
   21d08:	0245      	lsls	r5, r0, #9
   21d0a:	024c      	lsls	r4, r1, #9
   21d0c:	0fc3      	lsrs	r3, r0, #31
   21d0e:	0048      	lsls	r0, r1, #1
   21d10:	0a6d      	lsrs	r5, r5, #9
   21d12:	0e12      	lsrs	r2, r2, #24
   21d14:	0a64      	lsrs	r4, r4, #9
   21d16:	0e00      	lsrs	r0, r0, #24
   21d18:	0fc9      	lsrs	r1, r1, #31
   21d1a:	2aff      	cmp	r2, #255	; 0xff
   21d1c:	d01e      	beq.n	21d5c <__gesf2+0x58>
   21d1e:	28ff      	cmp	r0, #255	; 0xff
   21d20:	d021      	beq.n	21d66 <__gesf2+0x62>
   21d22:	2a00      	cmp	r2, #0
   21d24:	d10a      	bne.n	21d3c <__gesf2+0x38>
   21d26:	426e      	negs	r6, r5
   21d28:	416e      	adcs	r6, r5
   21d2a:	b2f6      	uxtb	r6, r6
   21d2c:	2800      	cmp	r0, #0
   21d2e:	d10f      	bne.n	21d50 <__gesf2+0x4c>
   21d30:	2c00      	cmp	r4, #0
   21d32:	d10d      	bne.n	21d50 <__gesf2+0x4c>
   21d34:	2000      	movs	r0, #0
   21d36:	2d00      	cmp	r5, #0
   21d38:	d009      	beq.n	21d4e <__gesf2+0x4a>
   21d3a:	e005      	b.n	21d48 <__gesf2+0x44>
   21d3c:	2800      	cmp	r0, #0
   21d3e:	d101      	bne.n	21d44 <__gesf2+0x40>
   21d40:	2c00      	cmp	r4, #0
   21d42:	d001      	beq.n	21d48 <__gesf2+0x44>
   21d44:	428b      	cmp	r3, r1
   21d46:	d011      	beq.n	21d6c <__gesf2+0x68>
   21d48:	2101      	movs	r1, #1
   21d4a:	4258      	negs	r0, r3
   21d4c:	4308      	orrs	r0, r1
   21d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d50:	2e00      	cmp	r6, #0
   21d52:	d0f7      	beq.n	21d44 <__gesf2+0x40>
   21d54:	2001      	movs	r0, #1
   21d56:	3901      	subs	r1, #1
   21d58:	4308      	orrs	r0, r1
   21d5a:	e7f8      	b.n	21d4e <__gesf2+0x4a>
   21d5c:	2d00      	cmp	r5, #0
   21d5e:	d0de      	beq.n	21d1e <__gesf2+0x1a>
   21d60:	2002      	movs	r0, #2
   21d62:	4240      	negs	r0, r0
   21d64:	e7f3      	b.n	21d4e <__gesf2+0x4a>
   21d66:	2c00      	cmp	r4, #0
   21d68:	d0db      	beq.n	21d22 <__gesf2+0x1e>
   21d6a:	e7f9      	b.n	21d60 <__gesf2+0x5c>
   21d6c:	4282      	cmp	r2, r0
   21d6e:	dceb      	bgt.n	21d48 <__gesf2+0x44>
   21d70:	db04      	blt.n	21d7c <__gesf2+0x78>
   21d72:	42a5      	cmp	r5, r4
   21d74:	d8e8      	bhi.n	21d48 <__gesf2+0x44>
   21d76:	2000      	movs	r0, #0
   21d78:	42a5      	cmp	r5, r4
   21d7a:	d2e8      	bcs.n	21d4e <__gesf2+0x4a>
   21d7c:	2101      	movs	r1, #1
   21d7e:	1e58      	subs	r0, r3, #1
   21d80:	4308      	orrs	r0, r1
   21d82:	e7e4      	b.n	21d4e <__gesf2+0x4a>

00021d84 <__lesf2>:
   21d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d86:	0042      	lsls	r2, r0, #1
   21d88:	024d      	lsls	r5, r1, #9
   21d8a:	004c      	lsls	r4, r1, #1
   21d8c:	0246      	lsls	r6, r0, #9
   21d8e:	0a76      	lsrs	r6, r6, #9
   21d90:	0e12      	lsrs	r2, r2, #24
   21d92:	0fc3      	lsrs	r3, r0, #31
   21d94:	0a6d      	lsrs	r5, r5, #9
   21d96:	0e24      	lsrs	r4, r4, #24
   21d98:	0fc9      	lsrs	r1, r1, #31
   21d9a:	2aff      	cmp	r2, #255	; 0xff
   21d9c:	d016      	beq.n	21dcc <__lesf2+0x48>
   21d9e:	2cff      	cmp	r4, #255	; 0xff
   21da0:	d018      	beq.n	21dd4 <__lesf2+0x50>
   21da2:	2a00      	cmp	r2, #0
   21da4:	d10a      	bne.n	21dbc <__lesf2+0x38>
   21da6:	4270      	negs	r0, r6
   21da8:	4170      	adcs	r0, r6
   21daa:	b2c0      	uxtb	r0, r0
   21dac:	2c00      	cmp	r4, #0
   21dae:	d015      	beq.n	21ddc <__lesf2+0x58>
   21db0:	2800      	cmp	r0, #0
   21db2:	d005      	beq.n	21dc0 <__lesf2+0x3c>
   21db4:	2001      	movs	r0, #1
   21db6:	3901      	subs	r1, #1
   21db8:	4308      	orrs	r0, r1
   21dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21dbc:	2c00      	cmp	r4, #0
   21dbe:	d013      	beq.n	21de8 <__lesf2+0x64>
   21dc0:	4299      	cmp	r1, r3
   21dc2:	d014      	beq.n	21dee <__lesf2+0x6a>
   21dc4:	2001      	movs	r0, #1
   21dc6:	425b      	negs	r3, r3
   21dc8:	4318      	orrs	r0, r3
   21dca:	e7f6      	b.n	21dba <__lesf2+0x36>
   21dcc:	2002      	movs	r0, #2
   21dce:	2e00      	cmp	r6, #0
   21dd0:	d1f3      	bne.n	21dba <__lesf2+0x36>
   21dd2:	e7e4      	b.n	21d9e <__lesf2+0x1a>
   21dd4:	2002      	movs	r0, #2
   21dd6:	2d00      	cmp	r5, #0
   21dd8:	d1ef      	bne.n	21dba <__lesf2+0x36>
   21dda:	e7e2      	b.n	21da2 <__lesf2+0x1e>
   21ddc:	2d00      	cmp	r5, #0
   21dde:	d1e7      	bne.n	21db0 <__lesf2+0x2c>
   21de0:	2000      	movs	r0, #0
   21de2:	2e00      	cmp	r6, #0
   21de4:	d0e9      	beq.n	21dba <__lesf2+0x36>
   21de6:	e7ed      	b.n	21dc4 <__lesf2+0x40>
   21de8:	2d00      	cmp	r5, #0
   21dea:	d1e9      	bne.n	21dc0 <__lesf2+0x3c>
   21dec:	e7ea      	b.n	21dc4 <__lesf2+0x40>
   21dee:	42a2      	cmp	r2, r4
   21df0:	dc06      	bgt.n	21e00 <__lesf2+0x7c>
   21df2:	dbdf      	blt.n	21db4 <__lesf2+0x30>
   21df4:	42ae      	cmp	r6, r5
   21df6:	d803      	bhi.n	21e00 <__lesf2+0x7c>
   21df8:	2000      	movs	r0, #0
   21dfa:	42ae      	cmp	r6, r5
   21dfc:	d3da      	bcc.n	21db4 <__lesf2+0x30>
   21dfe:	e7dc      	b.n	21dba <__lesf2+0x36>
   21e00:	2001      	movs	r0, #1
   21e02:	4249      	negs	r1, r1
   21e04:	4308      	orrs	r0, r1
   21e06:	e7d8      	b.n	21dba <__lesf2+0x36>

00021e08 <__aeabi_fmul>:
   21e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e0a:	4657      	mov	r7, sl
   21e0c:	464e      	mov	r6, r9
   21e0e:	4645      	mov	r5, r8
   21e10:	46de      	mov	lr, fp
   21e12:	b5e0      	push	{r5, r6, r7, lr}
   21e14:	0247      	lsls	r7, r0, #9
   21e16:	0046      	lsls	r6, r0, #1
   21e18:	4688      	mov	r8, r1
   21e1a:	0a7f      	lsrs	r7, r7, #9
   21e1c:	0e36      	lsrs	r6, r6, #24
   21e1e:	0fc4      	lsrs	r4, r0, #31
   21e20:	2e00      	cmp	r6, #0
   21e22:	d047      	beq.n	21eb4 <__aeabi_fmul+0xac>
   21e24:	2eff      	cmp	r6, #255	; 0xff
   21e26:	d024      	beq.n	21e72 <__aeabi_fmul+0x6a>
   21e28:	00fb      	lsls	r3, r7, #3
   21e2a:	2780      	movs	r7, #128	; 0x80
   21e2c:	04ff      	lsls	r7, r7, #19
   21e2e:	431f      	orrs	r7, r3
   21e30:	2300      	movs	r3, #0
   21e32:	4699      	mov	r9, r3
   21e34:	469a      	mov	sl, r3
   21e36:	3e7f      	subs	r6, #127	; 0x7f
   21e38:	4643      	mov	r3, r8
   21e3a:	025d      	lsls	r5, r3, #9
   21e3c:	0058      	lsls	r0, r3, #1
   21e3e:	0fdb      	lsrs	r3, r3, #31
   21e40:	0a6d      	lsrs	r5, r5, #9
   21e42:	0e00      	lsrs	r0, r0, #24
   21e44:	4698      	mov	r8, r3
   21e46:	d043      	beq.n	21ed0 <__aeabi_fmul+0xc8>
   21e48:	28ff      	cmp	r0, #255	; 0xff
   21e4a:	d03b      	beq.n	21ec4 <__aeabi_fmul+0xbc>
   21e4c:	00eb      	lsls	r3, r5, #3
   21e4e:	2580      	movs	r5, #128	; 0x80
   21e50:	2200      	movs	r2, #0
   21e52:	04ed      	lsls	r5, r5, #19
   21e54:	431d      	orrs	r5, r3
   21e56:	387f      	subs	r0, #127	; 0x7f
   21e58:	1836      	adds	r6, r6, r0
   21e5a:	1c73      	adds	r3, r6, #1
   21e5c:	4641      	mov	r1, r8
   21e5e:	469b      	mov	fp, r3
   21e60:	464b      	mov	r3, r9
   21e62:	4061      	eors	r1, r4
   21e64:	4313      	orrs	r3, r2
   21e66:	2b0f      	cmp	r3, #15
   21e68:	d864      	bhi.n	21f34 <__aeabi_fmul+0x12c>
   21e6a:	4875      	ldr	r0, [pc, #468]	; (22040 <__aeabi_fmul+0x238>)
   21e6c:	009b      	lsls	r3, r3, #2
   21e6e:	58c3      	ldr	r3, [r0, r3]
   21e70:	469f      	mov	pc, r3
   21e72:	2f00      	cmp	r7, #0
   21e74:	d142      	bne.n	21efc <__aeabi_fmul+0xf4>
   21e76:	2308      	movs	r3, #8
   21e78:	4699      	mov	r9, r3
   21e7a:	3b06      	subs	r3, #6
   21e7c:	26ff      	movs	r6, #255	; 0xff
   21e7e:	469a      	mov	sl, r3
   21e80:	e7da      	b.n	21e38 <__aeabi_fmul+0x30>
   21e82:	4641      	mov	r1, r8
   21e84:	2a02      	cmp	r2, #2
   21e86:	d028      	beq.n	21eda <__aeabi_fmul+0xd2>
   21e88:	2a03      	cmp	r2, #3
   21e8a:	d100      	bne.n	21e8e <__aeabi_fmul+0x86>
   21e8c:	e0ce      	b.n	2202c <__aeabi_fmul+0x224>
   21e8e:	2a01      	cmp	r2, #1
   21e90:	d000      	beq.n	21e94 <__aeabi_fmul+0x8c>
   21e92:	e0ac      	b.n	21fee <__aeabi_fmul+0x1e6>
   21e94:	4011      	ands	r1, r2
   21e96:	2000      	movs	r0, #0
   21e98:	2200      	movs	r2, #0
   21e9a:	b2cc      	uxtb	r4, r1
   21e9c:	0240      	lsls	r0, r0, #9
   21e9e:	05d2      	lsls	r2, r2, #23
   21ea0:	0a40      	lsrs	r0, r0, #9
   21ea2:	07e4      	lsls	r4, r4, #31
   21ea4:	4310      	orrs	r0, r2
   21ea6:	4320      	orrs	r0, r4
   21ea8:	bc3c      	pop	{r2, r3, r4, r5}
   21eaa:	4690      	mov	r8, r2
   21eac:	4699      	mov	r9, r3
   21eae:	46a2      	mov	sl, r4
   21eb0:	46ab      	mov	fp, r5
   21eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21eb4:	2f00      	cmp	r7, #0
   21eb6:	d115      	bne.n	21ee4 <__aeabi_fmul+0xdc>
   21eb8:	2304      	movs	r3, #4
   21eba:	4699      	mov	r9, r3
   21ebc:	3b03      	subs	r3, #3
   21ebe:	2600      	movs	r6, #0
   21ec0:	469a      	mov	sl, r3
   21ec2:	e7b9      	b.n	21e38 <__aeabi_fmul+0x30>
   21ec4:	20ff      	movs	r0, #255	; 0xff
   21ec6:	2202      	movs	r2, #2
   21ec8:	2d00      	cmp	r5, #0
   21eca:	d0c5      	beq.n	21e58 <__aeabi_fmul+0x50>
   21ecc:	2203      	movs	r2, #3
   21ece:	e7c3      	b.n	21e58 <__aeabi_fmul+0x50>
   21ed0:	2d00      	cmp	r5, #0
   21ed2:	d119      	bne.n	21f08 <__aeabi_fmul+0x100>
   21ed4:	2000      	movs	r0, #0
   21ed6:	2201      	movs	r2, #1
   21ed8:	e7be      	b.n	21e58 <__aeabi_fmul+0x50>
   21eda:	2401      	movs	r4, #1
   21edc:	22ff      	movs	r2, #255	; 0xff
   21ede:	400c      	ands	r4, r1
   21ee0:	2000      	movs	r0, #0
   21ee2:	e7db      	b.n	21e9c <__aeabi_fmul+0x94>
   21ee4:	0038      	movs	r0, r7
   21ee6:	f002 f8db 	bl	240a0 <__clzsi2>
   21eea:	2676      	movs	r6, #118	; 0x76
   21eec:	1f43      	subs	r3, r0, #5
   21eee:	409f      	lsls	r7, r3
   21ef0:	2300      	movs	r3, #0
   21ef2:	4276      	negs	r6, r6
   21ef4:	1a36      	subs	r6, r6, r0
   21ef6:	4699      	mov	r9, r3
   21ef8:	469a      	mov	sl, r3
   21efa:	e79d      	b.n	21e38 <__aeabi_fmul+0x30>
   21efc:	230c      	movs	r3, #12
   21efe:	4699      	mov	r9, r3
   21f00:	3b09      	subs	r3, #9
   21f02:	26ff      	movs	r6, #255	; 0xff
   21f04:	469a      	mov	sl, r3
   21f06:	e797      	b.n	21e38 <__aeabi_fmul+0x30>
   21f08:	0028      	movs	r0, r5
   21f0a:	f002 f8c9 	bl	240a0 <__clzsi2>
   21f0e:	1f43      	subs	r3, r0, #5
   21f10:	409d      	lsls	r5, r3
   21f12:	2376      	movs	r3, #118	; 0x76
   21f14:	425b      	negs	r3, r3
   21f16:	1a18      	subs	r0, r3, r0
   21f18:	2200      	movs	r2, #0
   21f1a:	e79d      	b.n	21e58 <__aeabi_fmul+0x50>
   21f1c:	2080      	movs	r0, #128	; 0x80
   21f1e:	2400      	movs	r4, #0
   21f20:	03c0      	lsls	r0, r0, #15
   21f22:	22ff      	movs	r2, #255	; 0xff
   21f24:	e7ba      	b.n	21e9c <__aeabi_fmul+0x94>
   21f26:	003d      	movs	r5, r7
   21f28:	4652      	mov	r2, sl
   21f2a:	e7ab      	b.n	21e84 <__aeabi_fmul+0x7c>
   21f2c:	003d      	movs	r5, r7
   21f2e:	0021      	movs	r1, r4
   21f30:	4652      	mov	r2, sl
   21f32:	e7a7      	b.n	21e84 <__aeabi_fmul+0x7c>
   21f34:	0c3b      	lsrs	r3, r7, #16
   21f36:	469c      	mov	ip, r3
   21f38:	042a      	lsls	r2, r5, #16
   21f3a:	0c12      	lsrs	r2, r2, #16
   21f3c:	0c2b      	lsrs	r3, r5, #16
   21f3e:	0014      	movs	r4, r2
   21f40:	4660      	mov	r0, ip
   21f42:	4665      	mov	r5, ip
   21f44:	043f      	lsls	r7, r7, #16
   21f46:	0c3f      	lsrs	r7, r7, #16
   21f48:	437c      	muls	r4, r7
   21f4a:	4342      	muls	r2, r0
   21f4c:	435d      	muls	r5, r3
   21f4e:	437b      	muls	r3, r7
   21f50:	0c27      	lsrs	r7, r4, #16
   21f52:	189b      	adds	r3, r3, r2
   21f54:	18ff      	adds	r7, r7, r3
   21f56:	42ba      	cmp	r2, r7
   21f58:	d903      	bls.n	21f62 <__aeabi_fmul+0x15a>
   21f5a:	2380      	movs	r3, #128	; 0x80
   21f5c:	025b      	lsls	r3, r3, #9
   21f5e:	469c      	mov	ip, r3
   21f60:	4465      	add	r5, ip
   21f62:	0424      	lsls	r4, r4, #16
   21f64:	043a      	lsls	r2, r7, #16
   21f66:	0c24      	lsrs	r4, r4, #16
   21f68:	1912      	adds	r2, r2, r4
   21f6a:	0193      	lsls	r3, r2, #6
   21f6c:	1e5c      	subs	r4, r3, #1
   21f6e:	41a3      	sbcs	r3, r4
   21f70:	0c3f      	lsrs	r7, r7, #16
   21f72:	0e92      	lsrs	r2, r2, #26
   21f74:	197d      	adds	r5, r7, r5
   21f76:	431a      	orrs	r2, r3
   21f78:	01ad      	lsls	r5, r5, #6
   21f7a:	4315      	orrs	r5, r2
   21f7c:	012b      	lsls	r3, r5, #4
   21f7e:	d504      	bpl.n	21f8a <__aeabi_fmul+0x182>
   21f80:	2301      	movs	r3, #1
   21f82:	465e      	mov	r6, fp
   21f84:	086a      	lsrs	r2, r5, #1
   21f86:	401d      	ands	r5, r3
   21f88:	4315      	orrs	r5, r2
   21f8a:	0032      	movs	r2, r6
   21f8c:	327f      	adds	r2, #127	; 0x7f
   21f8e:	2a00      	cmp	r2, #0
   21f90:	dd25      	ble.n	21fde <__aeabi_fmul+0x1d6>
   21f92:	076b      	lsls	r3, r5, #29
   21f94:	d004      	beq.n	21fa0 <__aeabi_fmul+0x198>
   21f96:	230f      	movs	r3, #15
   21f98:	402b      	ands	r3, r5
   21f9a:	2b04      	cmp	r3, #4
   21f9c:	d000      	beq.n	21fa0 <__aeabi_fmul+0x198>
   21f9e:	3504      	adds	r5, #4
   21fa0:	012b      	lsls	r3, r5, #4
   21fa2:	d503      	bpl.n	21fac <__aeabi_fmul+0x1a4>
   21fa4:	0032      	movs	r2, r6
   21fa6:	4b27      	ldr	r3, [pc, #156]	; (22044 <__aeabi_fmul+0x23c>)
   21fa8:	3280      	adds	r2, #128	; 0x80
   21faa:	401d      	ands	r5, r3
   21fac:	2afe      	cmp	r2, #254	; 0xfe
   21fae:	dc94      	bgt.n	21eda <__aeabi_fmul+0xd2>
   21fb0:	2401      	movs	r4, #1
   21fb2:	01a8      	lsls	r0, r5, #6
   21fb4:	0a40      	lsrs	r0, r0, #9
   21fb6:	b2d2      	uxtb	r2, r2
   21fb8:	400c      	ands	r4, r1
   21fba:	e76f      	b.n	21e9c <__aeabi_fmul+0x94>
   21fbc:	2080      	movs	r0, #128	; 0x80
   21fbe:	03c0      	lsls	r0, r0, #15
   21fc0:	4207      	tst	r7, r0
   21fc2:	d007      	beq.n	21fd4 <__aeabi_fmul+0x1cc>
   21fc4:	4205      	tst	r5, r0
   21fc6:	d105      	bne.n	21fd4 <__aeabi_fmul+0x1cc>
   21fc8:	4328      	orrs	r0, r5
   21fca:	0240      	lsls	r0, r0, #9
   21fcc:	0a40      	lsrs	r0, r0, #9
   21fce:	4644      	mov	r4, r8
   21fd0:	22ff      	movs	r2, #255	; 0xff
   21fd2:	e763      	b.n	21e9c <__aeabi_fmul+0x94>
   21fd4:	4338      	orrs	r0, r7
   21fd6:	0240      	lsls	r0, r0, #9
   21fd8:	0a40      	lsrs	r0, r0, #9
   21fda:	22ff      	movs	r2, #255	; 0xff
   21fdc:	e75e      	b.n	21e9c <__aeabi_fmul+0x94>
   21fde:	2401      	movs	r4, #1
   21fe0:	1aa3      	subs	r3, r4, r2
   21fe2:	2b1b      	cmp	r3, #27
   21fe4:	dd05      	ble.n	21ff2 <__aeabi_fmul+0x1ea>
   21fe6:	400c      	ands	r4, r1
   21fe8:	2200      	movs	r2, #0
   21fea:	2000      	movs	r0, #0
   21fec:	e756      	b.n	21e9c <__aeabi_fmul+0x94>
   21fee:	465e      	mov	r6, fp
   21ff0:	e7cb      	b.n	21f8a <__aeabi_fmul+0x182>
   21ff2:	002a      	movs	r2, r5
   21ff4:	2020      	movs	r0, #32
   21ff6:	40da      	lsrs	r2, r3
   21ff8:	1ac3      	subs	r3, r0, r3
   21ffa:	409d      	lsls	r5, r3
   21ffc:	002b      	movs	r3, r5
   21ffe:	1e5d      	subs	r5, r3, #1
   22000:	41ab      	sbcs	r3, r5
   22002:	4313      	orrs	r3, r2
   22004:	075a      	lsls	r2, r3, #29
   22006:	d004      	beq.n	22012 <__aeabi_fmul+0x20a>
   22008:	220f      	movs	r2, #15
   2200a:	401a      	ands	r2, r3
   2200c:	2a04      	cmp	r2, #4
   2200e:	d000      	beq.n	22012 <__aeabi_fmul+0x20a>
   22010:	3304      	adds	r3, #4
   22012:	015a      	lsls	r2, r3, #5
   22014:	d504      	bpl.n	22020 <__aeabi_fmul+0x218>
   22016:	2401      	movs	r4, #1
   22018:	2201      	movs	r2, #1
   2201a:	400c      	ands	r4, r1
   2201c:	2000      	movs	r0, #0
   2201e:	e73d      	b.n	21e9c <__aeabi_fmul+0x94>
   22020:	2401      	movs	r4, #1
   22022:	019b      	lsls	r3, r3, #6
   22024:	0a58      	lsrs	r0, r3, #9
   22026:	400c      	ands	r4, r1
   22028:	2200      	movs	r2, #0
   2202a:	e737      	b.n	21e9c <__aeabi_fmul+0x94>
   2202c:	2080      	movs	r0, #128	; 0x80
   2202e:	2401      	movs	r4, #1
   22030:	03c0      	lsls	r0, r0, #15
   22032:	4328      	orrs	r0, r5
   22034:	0240      	lsls	r0, r0, #9
   22036:	0a40      	lsrs	r0, r0, #9
   22038:	400c      	ands	r4, r1
   2203a:	22ff      	movs	r2, #255	; 0xff
   2203c:	e72e      	b.n	21e9c <__aeabi_fmul+0x94>
   2203e:	46c0      	nop			; (mov r8, r8)
   22040:	0002cea0 	.word	0x0002cea0
   22044:	f7ffffff 	.word	0xf7ffffff

00022048 <__aeabi_fsub>:
   22048:	b5f0      	push	{r4, r5, r6, r7, lr}
   2204a:	464f      	mov	r7, r9
   2204c:	46d6      	mov	lr, sl
   2204e:	4646      	mov	r6, r8
   22050:	0044      	lsls	r4, r0, #1
   22052:	b5c0      	push	{r6, r7, lr}
   22054:	0fc2      	lsrs	r2, r0, #31
   22056:	0247      	lsls	r7, r0, #9
   22058:	0248      	lsls	r0, r1, #9
   2205a:	0a40      	lsrs	r0, r0, #9
   2205c:	4684      	mov	ip, r0
   2205e:	4666      	mov	r6, ip
   22060:	0a7b      	lsrs	r3, r7, #9
   22062:	0048      	lsls	r0, r1, #1
   22064:	0fc9      	lsrs	r1, r1, #31
   22066:	469a      	mov	sl, r3
   22068:	0e24      	lsrs	r4, r4, #24
   2206a:	0015      	movs	r5, r2
   2206c:	00db      	lsls	r3, r3, #3
   2206e:	0e00      	lsrs	r0, r0, #24
   22070:	4689      	mov	r9, r1
   22072:	00f6      	lsls	r6, r6, #3
   22074:	28ff      	cmp	r0, #255	; 0xff
   22076:	d100      	bne.n	2207a <__aeabi_fsub+0x32>
   22078:	e08f      	b.n	2219a <__aeabi_fsub+0x152>
   2207a:	2101      	movs	r1, #1
   2207c:	464f      	mov	r7, r9
   2207e:	404f      	eors	r7, r1
   22080:	0039      	movs	r1, r7
   22082:	4291      	cmp	r1, r2
   22084:	d066      	beq.n	22154 <__aeabi_fsub+0x10c>
   22086:	1a22      	subs	r2, r4, r0
   22088:	2a00      	cmp	r2, #0
   2208a:	dc00      	bgt.n	2208e <__aeabi_fsub+0x46>
   2208c:	e09d      	b.n	221ca <__aeabi_fsub+0x182>
   2208e:	2800      	cmp	r0, #0
   22090:	d13d      	bne.n	2210e <__aeabi_fsub+0xc6>
   22092:	2e00      	cmp	r6, #0
   22094:	d100      	bne.n	22098 <__aeabi_fsub+0x50>
   22096:	e08b      	b.n	221b0 <__aeabi_fsub+0x168>
   22098:	1e51      	subs	r1, r2, #1
   2209a:	2900      	cmp	r1, #0
   2209c:	d000      	beq.n	220a0 <__aeabi_fsub+0x58>
   2209e:	e0b5      	b.n	2220c <__aeabi_fsub+0x1c4>
   220a0:	2401      	movs	r4, #1
   220a2:	1b9b      	subs	r3, r3, r6
   220a4:	015a      	lsls	r2, r3, #5
   220a6:	d544      	bpl.n	22132 <__aeabi_fsub+0xea>
   220a8:	019b      	lsls	r3, r3, #6
   220aa:	099f      	lsrs	r7, r3, #6
   220ac:	0038      	movs	r0, r7
   220ae:	f001 fff7 	bl	240a0 <__clzsi2>
   220b2:	3805      	subs	r0, #5
   220b4:	4087      	lsls	r7, r0
   220b6:	4284      	cmp	r4, r0
   220b8:	dd00      	ble.n	220bc <__aeabi_fsub+0x74>
   220ba:	e096      	b.n	221ea <__aeabi_fsub+0x1a2>
   220bc:	1b04      	subs	r4, r0, r4
   220be:	003a      	movs	r2, r7
   220c0:	2020      	movs	r0, #32
   220c2:	3401      	adds	r4, #1
   220c4:	40e2      	lsrs	r2, r4
   220c6:	1b04      	subs	r4, r0, r4
   220c8:	40a7      	lsls	r7, r4
   220ca:	003b      	movs	r3, r7
   220cc:	1e5f      	subs	r7, r3, #1
   220ce:	41bb      	sbcs	r3, r7
   220d0:	2400      	movs	r4, #0
   220d2:	4313      	orrs	r3, r2
   220d4:	075a      	lsls	r2, r3, #29
   220d6:	d004      	beq.n	220e2 <__aeabi_fsub+0x9a>
   220d8:	220f      	movs	r2, #15
   220da:	401a      	ands	r2, r3
   220dc:	2a04      	cmp	r2, #4
   220de:	d000      	beq.n	220e2 <__aeabi_fsub+0x9a>
   220e0:	3304      	adds	r3, #4
   220e2:	015a      	lsls	r2, r3, #5
   220e4:	d527      	bpl.n	22136 <__aeabi_fsub+0xee>
   220e6:	3401      	adds	r4, #1
   220e8:	2cff      	cmp	r4, #255	; 0xff
   220ea:	d100      	bne.n	220ee <__aeabi_fsub+0xa6>
   220ec:	e079      	b.n	221e2 <__aeabi_fsub+0x19a>
   220ee:	2201      	movs	r2, #1
   220f0:	019b      	lsls	r3, r3, #6
   220f2:	0a5b      	lsrs	r3, r3, #9
   220f4:	b2e4      	uxtb	r4, r4
   220f6:	402a      	ands	r2, r5
   220f8:	025b      	lsls	r3, r3, #9
   220fa:	05e4      	lsls	r4, r4, #23
   220fc:	0a58      	lsrs	r0, r3, #9
   220fe:	07d2      	lsls	r2, r2, #31
   22100:	4320      	orrs	r0, r4
   22102:	4310      	orrs	r0, r2
   22104:	bc1c      	pop	{r2, r3, r4}
   22106:	4690      	mov	r8, r2
   22108:	4699      	mov	r9, r3
   2210a:	46a2      	mov	sl, r4
   2210c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2210e:	2cff      	cmp	r4, #255	; 0xff
   22110:	d0e0      	beq.n	220d4 <__aeabi_fsub+0x8c>
   22112:	2180      	movs	r1, #128	; 0x80
   22114:	04c9      	lsls	r1, r1, #19
   22116:	430e      	orrs	r6, r1
   22118:	2a1b      	cmp	r2, #27
   2211a:	dc7b      	bgt.n	22214 <__aeabi_fsub+0x1cc>
   2211c:	0031      	movs	r1, r6
   2211e:	2020      	movs	r0, #32
   22120:	40d1      	lsrs	r1, r2
   22122:	1a82      	subs	r2, r0, r2
   22124:	4096      	lsls	r6, r2
   22126:	1e72      	subs	r2, r6, #1
   22128:	4196      	sbcs	r6, r2
   2212a:	430e      	orrs	r6, r1
   2212c:	1b9b      	subs	r3, r3, r6
   2212e:	015a      	lsls	r2, r3, #5
   22130:	d4ba      	bmi.n	220a8 <__aeabi_fsub+0x60>
   22132:	075a      	lsls	r2, r3, #29
   22134:	d1d0      	bne.n	220d8 <__aeabi_fsub+0x90>
   22136:	2201      	movs	r2, #1
   22138:	08df      	lsrs	r7, r3, #3
   2213a:	402a      	ands	r2, r5
   2213c:	2cff      	cmp	r4, #255	; 0xff
   2213e:	d133      	bne.n	221a8 <__aeabi_fsub+0x160>
   22140:	2f00      	cmp	r7, #0
   22142:	d100      	bne.n	22146 <__aeabi_fsub+0xfe>
   22144:	e0a8      	b.n	22298 <__aeabi_fsub+0x250>
   22146:	2380      	movs	r3, #128	; 0x80
   22148:	03db      	lsls	r3, r3, #15
   2214a:	433b      	orrs	r3, r7
   2214c:	025b      	lsls	r3, r3, #9
   2214e:	0a5b      	lsrs	r3, r3, #9
   22150:	24ff      	movs	r4, #255	; 0xff
   22152:	e7d1      	b.n	220f8 <__aeabi_fsub+0xb0>
   22154:	1a21      	subs	r1, r4, r0
   22156:	2900      	cmp	r1, #0
   22158:	dd4c      	ble.n	221f4 <__aeabi_fsub+0x1ac>
   2215a:	2800      	cmp	r0, #0
   2215c:	d02a      	beq.n	221b4 <__aeabi_fsub+0x16c>
   2215e:	2cff      	cmp	r4, #255	; 0xff
   22160:	d0b8      	beq.n	220d4 <__aeabi_fsub+0x8c>
   22162:	2080      	movs	r0, #128	; 0x80
   22164:	04c0      	lsls	r0, r0, #19
   22166:	4306      	orrs	r6, r0
   22168:	291b      	cmp	r1, #27
   2216a:	dd00      	ble.n	2216e <__aeabi_fsub+0x126>
   2216c:	e0af      	b.n	222ce <__aeabi_fsub+0x286>
   2216e:	0030      	movs	r0, r6
   22170:	2720      	movs	r7, #32
   22172:	40c8      	lsrs	r0, r1
   22174:	1a79      	subs	r1, r7, r1
   22176:	408e      	lsls	r6, r1
   22178:	1e71      	subs	r1, r6, #1
   2217a:	418e      	sbcs	r6, r1
   2217c:	4306      	orrs	r6, r0
   2217e:	199b      	adds	r3, r3, r6
   22180:	0159      	lsls	r1, r3, #5
   22182:	d5d6      	bpl.n	22132 <__aeabi_fsub+0xea>
   22184:	3401      	adds	r4, #1
   22186:	2cff      	cmp	r4, #255	; 0xff
   22188:	d100      	bne.n	2218c <__aeabi_fsub+0x144>
   2218a:	e085      	b.n	22298 <__aeabi_fsub+0x250>
   2218c:	2201      	movs	r2, #1
   2218e:	497a      	ldr	r1, [pc, #488]	; (22378 <__aeabi_fsub+0x330>)
   22190:	401a      	ands	r2, r3
   22192:	085b      	lsrs	r3, r3, #1
   22194:	400b      	ands	r3, r1
   22196:	4313      	orrs	r3, r2
   22198:	e79c      	b.n	220d4 <__aeabi_fsub+0x8c>
   2219a:	2e00      	cmp	r6, #0
   2219c:	d000      	beq.n	221a0 <__aeabi_fsub+0x158>
   2219e:	e770      	b.n	22082 <__aeabi_fsub+0x3a>
   221a0:	e76b      	b.n	2207a <__aeabi_fsub+0x32>
   221a2:	1e3b      	subs	r3, r7, #0
   221a4:	d1c5      	bne.n	22132 <__aeabi_fsub+0xea>
   221a6:	2200      	movs	r2, #0
   221a8:	027b      	lsls	r3, r7, #9
   221aa:	0a5b      	lsrs	r3, r3, #9
   221ac:	b2e4      	uxtb	r4, r4
   221ae:	e7a3      	b.n	220f8 <__aeabi_fsub+0xb0>
   221b0:	0014      	movs	r4, r2
   221b2:	e78f      	b.n	220d4 <__aeabi_fsub+0x8c>
   221b4:	2e00      	cmp	r6, #0
   221b6:	d04d      	beq.n	22254 <__aeabi_fsub+0x20c>
   221b8:	1e48      	subs	r0, r1, #1
   221ba:	2800      	cmp	r0, #0
   221bc:	d157      	bne.n	2226e <__aeabi_fsub+0x226>
   221be:	199b      	adds	r3, r3, r6
   221c0:	2401      	movs	r4, #1
   221c2:	015a      	lsls	r2, r3, #5
   221c4:	d5b5      	bpl.n	22132 <__aeabi_fsub+0xea>
   221c6:	2402      	movs	r4, #2
   221c8:	e7e0      	b.n	2218c <__aeabi_fsub+0x144>
   221ca:	2a00      	cmp	r2, #0
   221cc:	d125      	bne.n	2221a <__aeabi_fsub+0x1d2>
   221ce:	1c62      	adds	r2, r4, #1
   221d0:	b2d2      	uxtb	r2, r2
   221d2:	2a01      	cmp	r2, #1
   221d4:	dd72      	ble.n	222bc <__aeabi_fsub+0x274>
   221d6:	1b9f      	subs	r7, r3, r6
   221d8:	017a      	lsls	r2, r7, #5
   221da:	d535      	bpl.n	22248 <__aeabi_fsub+0x200>
   221dc:	1af7      	subs	r7, r6, r3
   221de:	000d      	movs	r5, r1
   221e0:	e764      	b.n	220ac <__aeabi_fsub+0x64>
   221e2:	2201      	movs	r2, #1
   221e4:	2300      	movs	r3, #0
   221e6:	402a      	ands	r2, r5
   221e8:	e786      	b.n	220f8 <__aeabi_fsub+0xb0>
   221ea:	003b      	movs	r3, r7
   221ec:	4a63      	ldr	r2, [pc, #396]	; (2237c <__aeabi_fsub+0x334>)
   221ee:	1a24      	subs	r4, r4, r0
   221f0:	4013      	ands	r3, r2
   221f2:	e76f      	b.n	220d4 <__aeabi_fsub+0x8c>
   221f4:	2900      	cmp	r1, #0
   221f6:	d16c      	bne.n	222d2 <__aeabi_fsub+0x28a>
   221f8:	1c61      	adds	r1, r4, #1
   221fa:	b2c8      	uxtb	r0, r1
   221fc:	2801      	cmp	r0, #1
   221fe:	dd4e      	ble.n	2229e <__aeabi_fsub+0x256>
   22200:	29ff      	cmp	r1, #255	; 0xff
   22202:	d049      	beq.n	22298 <__aeabi_fsub+0x250>
   22204:	199b      	adds	r3, r3, r6
   22206:	085b      	lsrs	r3, r3, #1
   22208:	000c      	movs	r4, r1
   2220a:	e763      	b.n	220d4 <__aeabi_fsub+0x8c>
   2220c:	2aff      	cmp	r2, #255	; 0xff
   2220e:	d041      	beq.n	22294 <__aeabi_fsub+0x24c>
   22210:	000a      	movs	r2, r1
   22212:	e781      	b.n	22118 <__aeabi_fsub+0xd0>
   22214:	2601      	movs	r6, #1
   22216:	1b9b      	subs	r3, r3, r6
   22218:	e789      	b.n	2212e <__aeabi_fsub+0xe6>
   2221a:	2c00      	cmp	r4, #0
   2221c:	d01c      	beq.n	22258 <__aeabi_fsub+0x210>
   2221e:	28ff      	cmp	r0, #255	; 0xff
   22220:	d021      	beq.n	22266 <__aeabi_fsub+0x21e>
   22222:	2480      	movs	r4, #128	; 0x80
   22224:	04e4      	lsls	r4, r4, #19
   22226:	4252      	negs	r2, r2
   22228:	4323      	orrs	r3, r4
   2222a:	2a1b      	cmp	r2, #27
   2222c:	dd00      	ble.n	22230 <__aeabi_fsub+0x1e8>
   2222e:	e096      	b.n	2235e <__aeabi_fsub+0x316>
   22230:	001c      	movs	r4, r3
   22232:	2520      	movs	r5, #32
   22234:	40d4      	lsrs	r4, r2
   22236:	1aaa      	subs	r2, r5, r2
   22238:	4093      	lsls	r3, r2
   2223a:	1e5a      	subs	r2, r3, #1
   2223c:	4193      	sbcs	r3, r2
   2223e:	4323      	orrs	r3, r4
   22240:	1af3      	subs	r3, r6, r3
   22242:	0004      	movs	r4, r0
   22244:	000d      	movs	r5, r1
   22246:	e72d      	b.n	220a4 <__aeabi_fsub+0x5c>
   22248:	2f00      	cmp	r7, #0
   2224a:	d000      	beq.n	2224e <__aeabi_fsub+0x206>
   2224c:	e72e      	b.n	220ac <__aeabi_fsub+0x64>
   2224e:	2200      	movs	r2, #0
   22250:	2400      	movs	r4, #0
   22252:	e7a9      	b.n	221a8 <__aeabi_fsub+0x160>
   22254:	000c      	movs	r4, r1
   22256:	e73d      	b.n	220d4 <__aeabi_fsub+0x8c>
   22258:	2b00      	cmp	r3, #0
   2225a:	d058      	beq.n	2230e <__aeabi_fsub+0x2c6>
   2225c:	43d2      	mvns	r2, r2
   2225e:	2a00      	cmp	r2, #0
   22260:	d0ee      	beq.n	22240 <__aeabi_fsub+0x1f8>
   22262:	28ff      	cmp	r0, #255	; 0xff
   22264:	d1e1      	bne.n	2222a <__aeabi_fsub+0x1e2>
   22266:	0033      	movs	r3, r6
   22268:	24ff      	movs	r4, #255	; 0xff
   2226a:	000d      	movs	r5, r1
   2226c:	e732      	b.n	220d4 <__aeabi_fsub+0x8c>
   2226e:	29ff      	cmp	r1, #255	; 0xff
   22270:	d010      	beq.n	22294 <__aeabi_fsub+0x24c>
   22272:	0001      	movs	r1, r0
   22274:	e778      	b.n	22168 <__aeabi_fsub+0x120>
   22276:	2b00      	cmp	r3, #0
   22278:	d06e      	beq.n	22358 <__aeabi_fsub+0x310>
   2227a:	24ff      	movs	r4, #255	; 0xff
   2227c:	2e00      	cmp	r6, #0
   2227e:	d100      	bne.n	22282 <__aeabi_fsub+0x23a>
   22280:	e728      	b.n	220d4 <__aeabi_fsub+0x8c>
   22282:	2280      	movs	r2, #128	; 0x80
   22284:	4651      	mov	r1, sl
   22286:	03d2      	lsls	r2, r2, #15
   22288:	4211      	tst	r1, r2
   2228a:	d003      	beq.n	22294 <__aeabi_fsub+0x24c>
   2228c:	4661      	mov	r1, ip
   2228e:	4211      	tst	r1, r2
   22290:	d100      	bne.n	22294 <__aeabi_fsub+0x24c>
   22292:	0033      	movs	r3, r6
   22294:	24ff      	movs	r4, #255	; 0xff
   22296:	e71d      	b.n	220d4 <__aeabi_fsub+0x8c>
   22298:	24ff      	movs	r4, #255	; 0xff
   2229a:	2300      	movs	r3, #0
   2229c:	e72c      	b.n	220f8 <__aeabi_fsub+0xb0>
   2229e:	2c00      	cmp	r4, #0
   222a0:	d1e9      	bne.n	22276 <__aeabi_fsub+0x22e>
   222a2:	2b00      	cmp	r3, #0
   222a4:	d063      	beq.n	2236e <__aeabi_fsub+0x326>
   222a6:	2e00      	cmp	r6, #0
   222a8:	d100      	bne.n	222ac <__aeabi_fsub+0x264>
   222aa:	e713      	b.n	220d4 <__aeabi_fsub+0x8c>
   222ac:	199b      	adds	r3, r3, r6
   222ae:	015a      	lsls	r2, r3, #5
   222b0:	d400      	bmi.n	222b4 <__aeabi_fsub+0x26c>
   222b2:	e73e      	b.n	22132 <__aeabi_fsub+0xea>
   222b4:	4a31      	ldr	r2, [pc, #196]	; (2237c <__aeabi_fsub+0x334>)
   222b6:	000c      	movs	r4, r1
   222b8:	4013      	ands	r3, r2
   222ba:	e70b      	b.n	220d4 <__aeabi_fsub+0x8c>
   222bc:	2c00      	cmp	r4, #0
   222be:	d11e      	bne.n	222fe <__aeabi_fsub+0x2b6>
   222c0:	2b00      	cmp	r3, #0
   222c2:	d12f      	bne.n	22324 <__aeabi_fsub+0x2dc>
   222c4:	2e00      	cmp	r6, #0
   222c6:	d04f      	beq.n	22368 <__aeabi_fsub+0x320>
   222c8:	0033      	movs	r3, r6
   222ca:	000d      	movs	r5, r1
   222cc:	e702      	b.n	220d4 <__aeabi_fsub+0x8c>
   222ce:	2601      	movs	r6, #1
   222d0:	e755      	b.n	2217e <__aeabi_fsub+0x136>
   222d2:	2c00      	cmp	r4, #0
   222d4:	d11f      	bne.n	22316 <__aeabi_fsub+0x2ce>
   222d6:	2b00      	cmp	r3, #0
   222d8:	d043      	beq.n	22362 <__aeabi_fsub+0x31a>
   222da:	43c9      	mvns	r1, r1
   222dc:	2900      	cmp	r1, #0
   222de:	d00b      	beq.n	222f8 <__aeabi_fsub+0x2b0>
   222e0:	28ff      	cmp	r0, #255	; 0xff
   222e2:	d039      	beq.n	22358 <__aeabi_fsub+0x310>
   222e4:	291b      	cmp	r1, #27
   222e6:	dc44      	bgt.n	22372 <__aeabi_fsub+0x32a>
   222e8:	001c      	movs	r4, r3
   222ea:	2720      	movs	r7, #32
   222ec:	40cc      	lsrs	r4, r1
   222ee:	1a79      	subs	r1, r7, r1
   222f0:	408b      	lsls	r3, r1
   222f2:	1e59      	subs	r1, r3, #1
   222f4:	418b      	sbcs	r3, r1
   222f6:	4323      	orrs	r3, r4
   222f8:	199b      	adds	r3, r3, r6
   222fa:	0004      	movs	r4, r0
   222fc:	e740      	b.n	22180 <__aeabi_fsub+0x138>
   222fe:	2b00      	cmp	r3, #0
   22300:	d11a      	bne.n	22338 <__aeabi_fsub+0x2f0>
   22302:	2e00      	cmp	r6, #0
   22304:	d124      	bne.n	22350 <__aeabi_fsub+0x308>
   22306:	2780      	movs	r7, #128	; 0x80
   22308:	2200      	movs	r2, #0
   2230a:	03ff      	lsls	r7, r7, #15
   2230c:	e71b      	b.n	22146 <__aeabi_fsub+0xfe>
   2230e:	0033      	movs	r3, r6
   22310:	0004      	movs	r4, r0
   22312:	000d      	movs	r5, r1
   22314:	e6de      	b.n	220d4 <__aeabi_fsub+0x8c>
   22316:	28ff      	cmp	r0, #255	; 0xff
   22318:	d01e      	beq.n	22358 <__aeabi_fsub+0x310>
   2231a:	2480      	movs	r4, #128	; 0x80
   2231c:	04e4      	lsls	r4, r4, #19
   2231e:	4249      	negs	r1, r1
   22320:	4323      	orrs	r3, r4
   22322:	e7df      	b.n	222e4 <__aeabi_fsub+0x29c>
   22324:	2e00      	cmp	r6, #0
   22326:	d100      	bne.n	2232a <__aeabi_fsub+0x2e2>
   22328:	e6d4      	b.n	220d4 <__aeabi_fsub+0x8c>
   2232a:	1b9f      	subs	r7, r3, r6
   2232c:	017a      	lsls	r2, r7, #5
   2232e:	d400      	bmi.n	22332 <__aeabi_fsub+0x2ea>
   22330:	e737      	b.n	221a2 <__aeabi_fsub+0x15a>
   22332:	1af3      	subs	r3, r6, r3
   22334:	000d      	movs	r5, r1
   22336:	e6cd      	b.n	220d4 <__aeabi_fsub+0x8c>
   22338:	24ff      	movs	r4, #255	; 0xff
   2233a:	2e00      	cmp	r6, #0
   2233c:	d100      	bne.n	22340 <__aeabi_fsub+0x2f8>
   2233e:	e6c9      	b.n	220d4 <__aeabi_fsub+0x8c>
   22340:	2280      	movs	r2, #128	; 0x80
   22342:	4650      	mov	r0, sl
   22344:	03d2      	lsls	r2, r2, #15
   22346:	4210      	tst	r0, r2
   22348:	d0a4      	beq.n	22294 <__aeabi_fsub+0x24c>
   2234a:	4660      	mov	r0, ip
   2234c:	4210      	tst	r0, r2
   2234e:	d1a1      	bne.n	22294 <__aeabi_fsub+0x24c>
   22350:	0033      	movs	r3, r6
   22352:	000d      	movs	r5, r1
   22354:	24ff      	movs	r4, #255	; 0xff
   22356:	e6bd      	b.n	220d4 <__aeabi_fsub+0x8c>
   22358:	0033      	movs	r3, r6
   2235a:	24ff      	movs	r4, #255	; 0xff
   2235c:	e6ba      	b.n	220d4 <__aeabi_fsub+0x8c>
   2235e:	2301      	movs	r3, #1
   22360:	e76e      	b.n	22240 <__aeabi_fsub+0x1f8>
   22362:	0033      	movs	r3, r6
   22364:	0004      	movs	r4, r0
   22366:	e6b5      	b.n	220d4 <__aeabi_fsub+0x8c>
   22368:	2700      	movs	r7, #0
   2236a:	2200      	movs	r2, #0
   2236c:	e71c      	b.n	221a8 <__aeabi_fsub+0x160>
   2236e:	0033      	movs	r3, r6
   22370:	e6b0      	b.n	220d4 <__aeabi_fsub+0x8c>
   22372:	2301      	movs	r3, #1
   22374:	e7c0      	b.n	222f8 <__aeabi_fsub+0x2b0>
   22376:	46c0      	nop			; (mov r8, r8)
   22378:	7dffffff 	.word	0x7dffffff
   2237c:	fbffffff 	.word	0xfbffffff

00022380 <__aeabi_f2iz>:
   22380:	0241      	lsls	r1, r0, #9
   22382:	0043      	lsls	r3, r0, #1
   22384:	0fc2      	lsrs	r2, r0, #31
   22386:	0a49      	lsrs	r1, r1, #9
   22388:	0e1b      	lsrs	r3, r3, #24
   2238a:	2000      	movs	r0, #0
   2238c:	2b7e      	cmp	r3, #126	; 0x7e
   2238e:	dd0d      	ble.n	223ac <__aeabi_f2iz+0x2c>
   22390:	2b9d      	cmp	r3, #157	; 0x9d
   22392:	dc0c      	bgt.n	223ae <__aeabi_f2iz+0x2e>
   22394:	2080      	movs	r0, #128	; 0x80
   22396:	0400      	lsls	r0, r0, #16
   22398:	4301      	orrs	r1, r0
   2239a:	2b95      	cmp	r3, #149	; 0x95
   2239c:	dc0a      	bgt.n	223b4 <__aeabi_f2iz+0x34>
   2239e:	2096      	movs	r0, #150	; 0x96
   223a0:	1ac3      	subs	r3, r0, r3
   223a2:	40d9      	lsrs	r1, r3
   223a4:	4248      	negs	r0, r1
   223a6:	2a00      	cmp	r2, #0
   223a8:	d100      	bne.n	223ac <__aeabi_f2iz+0x2c>
   223aa:	0008      	movs	r0, r1
   223ac:	4770      	bx	lr
   223ae:	4b03      	ldr	r3, [pc, #12]	; (223bc <__aeabi_f2iz+0x3c>)
   223b0:	18d0      	adds	r0, r2, r3
   223b2:	e7fb      	b.n	223ac <__aeabi_f2iz+0x2c>
   223b4:	3b96      	subs	r3, #150	; 0x96
   223b6:	4099      	lsls	r1, r3
   223b8:	e7f4      	b.n	223a4 <__aeabi_f2iz+0x24>
   223ba:	46c0      	nop			; (mov r8, r8)
   223bc:	7fffffff 	.word	0x7fffffff

000223c0 <__aeabi_i2f>:
   223c0:	b570      	push	{r4, r5, r6, lr}
   223c2:	2800      	cmp	r0, #0
   223c4:	d030      	beq.n	22428 <__aeabi_i2f+0x68>
   223c6:	17c3      	asrs	r3, r0, #31
   223c8:	18c4      	adds	r4, r0, r3
   223ca:	405c      	eors	r4, r3
   223cc:	0fc5      	lsrs	r5, r0, #31
   223ce:	0020      	movs	r0, r4
   223d0:	f001 fe66 	bl	240a0 <__clzsi2>
   223d4:	239e      	movs	r3, #158	; 0x9e
   223d6:	1a1b      	subs	r3, r3, r0
   223d8:	2b96      	cmp	r3, #150	; 0x96
   223da:	dc0d      	bgt.n	223f8 <__aeabi_i2f+0x38>
   223dc:	2296      	movs	r2, #150	; 0x96
   223de:	1ad2      	subs	r2, r2, r3
   223e0:	4094      	lsls	r4, r2
   223e2:	002a      	movs	r2, r5
   223e4:	0264      	lsls	r4, r4, #9
   223e6:	0a64      	lsrs	r4, r4, #9
   223e8:	b2db      	uxtb	r3, r3
   223ea:	0264      	lsls	r4, r4, #9
   223ec:	05db      	lsls	r3, r3, #23
   223ee:	0a60      	lsrs	r0, r4, #9
   223f0:	07d2      	lsls	r2, r2, #31
   223f2:	4318      	orrs	r0, r3
   223f4:	4310      	orrs	r0, r2
   223f6:	bd70      	pop	{r4, r5, r6, pc}
   223f8:	2b99      	cmp	r3, #153	; 0x99
   223fa:	dc19      	bgt.n	22430 <__aeabi_i2f+0x70>
   223fc:	2299      	movs	r2, #153	; 0x99
   223fe:	1ad2      	subs	r2, r2, r3
   22400:	2a00      	cmp	r2, #0
   22402:	dd29      	ble.n	22458 <__aeabi_i2f+0x98>
   22404:	4094      	lsls	r4, r2
   22406:	0022      	movs	r2, r4
   22408:	4c14      	ldr	r4, [pc, #80]	; (2245c <__aeabi_i2f+0x9c>)
   2240a:	4014      	ands	r4, r2
   2240c:	0751      	lsls	r1, r2, #29
   2240e:	d004      	beq.n	2241a <__aeabi_i2f+0x5a>
   22410:	210f      	movs	r1, #15
   22412:	400a      	ands	r2, r1
   22414:	2a04      	cmp	r2, #4
   22416:	d000      	beq.n	2241a <__aeabi_i2f+0x5a>
   22418:	3404      	adds	r4, #4
   2241a:	0162      	lsls	r2, r4, #5
   2241c:	d413      	bmi.n	22446 <__aeabi_i2f+0x86>
   2241e:	01a4      	lsls	r4, r4, #6
   22420:	0a64      	lsrs	r4, r4, #9
   22422:	b2db      	uxtb	r3, r3
   22424:	002a      	movs	r2, r5
   22426:	e7e0      	b.n	223ea <__aeabi_i2f+0x2a>
   22428:	2200      	movs	r2, #0
   2242a:	2300      	movs	r3, #0
   2242c:	2400      	movs	r4, #0
   2242e:	e7dc      	b.n	223ea <__aeabi_i2f+0x2a>
   22430:	2205      	movs	r2, #5
   22432:	0021      	movs	r1, r4
   22434:	1a12      	subs	r2, r2, r0
   22436:	40d1      	lsrs	r1, r2
   22438:	22b9      	movs	r2, #185	; 0xb9
   2243a:	1ad2      	subs	r2, r2, r3
   2243c:	4094      	lsls	r4, r2
   2243e:	1e62      	subs	r2, r4, #1
   22440:	4194      	sbcs	r4, r2
   22442:	430c      	orrs	r4, r1
   22444:	e7da      	b.n	223fc <__aeabi_i2f+0x3c>
   22446:	4b05      	ldr	r3, [pc, #20]	; (2245c <__aeabi_i2f+0x9c>)
   22448:	002a      	movs	r2, r5
   2244a:	401c      	ands	r4, r3
   2244c:	239f      	movs	r3, #159	; 0x9f
   2244e:	01a4      	lsls	r4, r4, #6
   22450:	1a1b      	subs	r3, r3, r0
   22452:	0a64      	lsrs	r4, r4, #9
   22454:	b2db      	uxtb	r3, r3
   22456:	e7c8      	b.n	223ea <__aeabi_i2f+0x2a>
   22458:	0022      	movs	r2, r4
   2245a:	e7d5      	b.n	22408 <__aeabi_i2f+0x48>
   2245c:	fbffffff 	.word	0xfbffffff

00022460 <__aeabi_ui2f>:
   22460:	b510      	push	{r4, lr}
   22462:	1e04      	subs	r4, r0, #0
   22464:	d027      	beq.n	224b6 <__aeabi_ui2f+0x56>
   22466:	f001 fe1b 	bl	240a0 <__clzsi2>
   2246a:	239e      	movs	r3, #158	; 0x9e
   2246c:	1a1b      	subs	r3, r3, r0
   2246e:	2b96      	cmp	r3, #150	; 0x96
   22470:	dc0a      	bgt.n	22488 <__aeabi_ui2f+0x28>
   22472:	2296      	movs	r2, #150	; 0x96
   22474:	1ad2      	subs	r2, r2, r3
   22476:	4094      	lsls	r4, r2
   22478:	0264      	lsls	r4, r4, #9
   2247a:	0a64      	lsrs	r4, r4, #9
   2247c:	b2db      	uxtb	r3, r3
   2247e:	0264      	lsls	r4, r4, #9
   22480:	05db      	lsls	r3, r3, #23
   22482:	0a60      	lsrs	r0, r4, #9
   22484:	4318      	orrs	r0, r3
   22486:	bd10      	pop	{r4, pc}
   22488:	2b99      	cmp	r3, #153	; 0x99
   2248a:	dc17      	bgt.n	224bc <__aeabi_ui2f+0x5c>
   2248c:	2299      	movs	r2, #153	; 0x99
   2248e:	1ad2      	subs	r2, r2, r3
   22490:	2a00      	cmp	r2, #0
   22492:	dd27      	ble.n	224e4 <__aeabi_ui2f+0x84>
   22494:	4094      	lsls	r4, r2
   22496:	0022      	movs	r2, r4
   22498:	4c13      	ldr	r4, [pc, #76]	; (224e8 <__aeabi_ui2f+0x88>)
   2249a:	4014      	ands	r4, r2
   2249c:	0751      	lsls	r1, r2, #29
   2249e:	d004      	beq.n	224aa <__aeabi_ui2f+0x4a>
   224a0:	210f      	movs	r1, #15
   224a2:	400a      	ands	r2, r1
   224a4:	2a04      	cmp	r2, #4
   224a6:	d000      	beq.n	224aa <__aeabi_ui2f+0x4a>
   224a8:	3404      	adds	r4, #4
   224aa:	0162      	lsls	r2, r4, #5
   224ac:	d412      	bmi.n	224d4 <__aeabi_ui2f+0x74>
   224ae:	01a4      	lsls	r4, r4, #6
   224b0:	0a64      	lsrs	r4, r4, #9
   224b2:	b2db      	uxtb	r3, r3
   224b4:	e7e3      	b.n	2247e <__aeabi_ui2f+0x1e>
   224b6:	2300      	movs	r3, #0
   224b8:	2400      	movs	r4, #0
   224ba:	e7e0      	b.n	2247e <__aeabi_ui2f+0x1e>
   224bc:	22b9      	movs	r2, #185	; 0xb9
   224be:	0021      	movs	r1, r4
   224c0:	1ad2      	subs	r2, r2, r3
   224c2:	4091      	lsls	r1, r2
   224c4:	000a      	movs	r2, r1
   224c6:	1e51      	subs	r1, r2, #1
   224c8:	418a      	sbcs	r2, r1
   224ca:	2105      	movs	r1, #5
   224cc:	1a09      	subs	r1, r1, r0
   224ce:	40cc      	lsrs	r4, r1
   224d0:	4314      	orrs	r4, r2
   224d2:	e7db      	b.n	2248c <__aeabi_ui2f+0x2c>
   224d4:	4b04      	ldr	r3, [pc, #16]	; (224e8 <__aeabi_ui2f+0x88>)
   224d6:	401c      	ands	r4, r3
   224d8:	239f      	movs	r3, #159	; 0x9f
   224da:	01a4      	lsls	r4, r4, #6
   224dc:	1a1b      	subs	r3, r3, r0
   224de:	0a64      	lsrs	r4, r4, #9
   224e0:	b2db      	uxtb	r3, r3
   224e2:	e7cc      	b.n	2247e <__aeabi_ui2f+0x1e>
   224e4:	0022      	movs	r2, r4
   224e6:	e7d7      	b.n	22498 <__aeabi_ui2f+0x38>
   224e8:	fbffffff 	.word	0xfbffffff

000224ec <__aeabi_dadd>:
   224ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   224ee:	4645      	mov	r5, r8
   224f0:	46de      	mov	lr, fp
   224f2:	4657      	mov	r7, sl
   224f4:	464e      	mov	r6, r9
   224f6:	030c      	lsls	r4, r1, #12
   224f8:	b5e0      	push	{r5, r6, r7, lr}
   224fa:	004e      	lsls	r6, r1, #1
   224fc:	0fc9      	lsrs	r1, r1, #31
   224fe:	4688      	mov	r8, r1
   22500:	000d      	movs	r5, r1
   22502:	0a61      	lsrs	r1, r4, #9
   22504:	0f44      	lsrs	r4, r0, #29
   22506:	430c      	orrs	r4, r1
   22508:	00c7      	lsls	r7, r0, #3
   2250a:	0319      	lsls	r1, r3, #12
   2250c:	0058      	lsls	r0, r3, #1
   2250e:	0fdb      	lsrs	r3, r3, #31
   22510:	469b      	mov	fp, r3
   22512:	0a4b      	lsrs	r3, r1, #9
   22514:	0f51      	lsrs	r1, r2, #29
   22516:	430b      	orrs	r3, r1
   22518:	0d76      	lsrs	r6, r6, #21
   2251a:	0d40      	lsrs	r0, r0, #21
   2251c:	0019      	movs	r1, r3
   2251e:	00d2      	lsls	r2, r2, #3
   22520:	45d8      	cmp	r8, fp
   22522:	d100      	bne.n	22526 <__aeabi_dadd+0x3a>
   22524:	e0ae      	b.n	22684 <__aeabi_dadd+0x198>
   22526:	1a35      	subs	r5, r6, r0
   22528:	2d00      	cmp	r5, #0
   2252a:	dc00      	bgt.n	2252e <__aeabi_dadd+0x42>
   2252c:	e0f6      	b.n	2271c <__aeabi_dadd+0x230>
   2252e:	2800      	cmp	r0, #0
   22530:	d10f      	bne.n	22552 <__aeabi_dadd+0x66>
   22532:	4313      	orrs	r3, r2
   22534:	d100      	bne.n	22538 <__aeabi_dadd+0x4c>
   22536:	e0db      	b.n	226f0 <__aeabi_dadd+0x204>
   22538:	1e6b      	subs	r3, r5, #1
   2253a:	2b00      	cmp	r3, #0
   2253c:	d000      	beq.n	22540 <__aeabi_dadd+0x54>
   2253e:	e137      	b.n	227b0 <__aeabi_dadd+0x2c4>
   22540:	1aba      	subs	r2, r7, r2
   22542:	4297      	cmp	r7, r2
   22544:	41bf      	sbcs	r7, r7
   22546:	1a64      	subs	r4, r4, r1
   22548:	427f      	negs	r7, r7
   2254a:	1be4      	subs	r4, r4, r7
   2254c:	2601      	movs	r6, #1
   2254e:	0017      	movs	r7, r2
   22550:	e024      	b.n	2259c <__aeabi_dadd+0xb0>
   22552:	4bc6      	ldr	r3, [pc, #792]	; (2286c <__aeabi_dadd+0x380>)
   22554:	429e      	cmp	r6, r3
   22556:	d04d      	beq.n	225f4 <__aeabi_dadd+0x108>
   22558:	2380      	movs	r3, #128	; 0x80
   2255a:	041b      	lsls	r3, r3, #16
   2255c:	4319      	orrs	r1, r3
   2255e:	2d38      	cmp	r5, #56	; 0x38
   22560:	dd00      	ble.n	22564 <__aeabi_dadd+0x78>
   22562:	e107      	b.n	22774 <__aeabi_dadd+0x288>
   22564:	2d1f      	cmp	r5, #31
   22566:	dd00      	ble.n	2256a <__aeabi_dadd+0x7e>
   22568:	e138      	b.n	227dc <__aeabi_dadd+0x2f0>
   2256a:	2020      	movs	r0, #32
   2256c:	1b43      	subs	r3, r0, r5
   2256e:	469a      	mov	sl, r3
   22570:	000b      	movs	r3, r1
   22572:	4650      	mov	r0, sl
   22574:	4083      	lsls	r3, r0
   22576:	4699      	mov	r9, r3
   22578:	0013      	movs	r3, r2
   2257a:	4648      	mov	r0, r9
   2257c:	40eb      	lsrs	r3, r5
   2257e:	4318      	orrs	r0, r3
   22580:	0003      	movs	r3, r0
   22582:	4650      	mov	r0, sl
   22584:	4082      	lsls	r2, r0
   22586:	1e50      	subs	r0, r2, #1
   22588:	4182      	sbcs	r2, r0
   2258a:	40e9      	lsrs	r1, r5
   2258c:	431a      	orrs	r2, r3
   2258e:	1aba      	subs	r2, r7, r2
   22590:	1a61      	subs	r1, r4, r1
   22592:	4297      	cmp	r7, r2
   22594:	41a4      	sbcs	r4, r4
   22596:	0017      	movs	r7, r2
   22598:	4264      	negs	r4, r4
   2259a:	1b0c      	subs	r4, r1, r4
   2259c:	0223      	lsls	r3, r4, #8
   2259e:	d562      	bpl.n	22666 <__aeabi_dadd+0x17a>
   225a0:	0264      	lsls	r4, r4, #9
   225a2:	0a65      	lsrs	r5, r4, #9
   225a4:	2d00      	cmp	r5, #0
   225a6:	d100      	bne.n	225aa <__aeabi_dadd+0xbe>
   225a8:	e0df      	b.n	2276a <__aeabi_dadd+0x27e>
   225aa:	0028      	movs	r0, r5
   225ac:	f001 fd78 	bl	240a0 <__clzsi2>
   225b0:	0003      	movs	r3, r0
   225b2:	3b08      	subs	r3, #8
   225b4:	2b1f      	cmp	r3, #31
   225b6:	dd00      	ble.n	225ba <__aeabi_dadd+0xce>
   225b8:	e0d2      	b.n	22760 <__aeabi_dadd+0x274>
   225ba:	2220      	movs	r2, #32
   225bc:	003c      	movs	r4, r7
   225be:	1ad2      	subs	r2, r2, r3
   225c0:	409d      	lsls	r5, r3
   225c2:	40d4      	lsrs	r4, r2
   225c4:	409f      	lsls	r7, r3
   225c6:	4325      	orrs	r5, r4
   225c8:	429e      	cmp	r6, r3
   225ca:	dd00      	ble.n	225ce <__aeabi_dadd+0xe2>
   225cc:	e0c4      	b.n	22758 <__aeabi_dadd+0x26c>
   225ce:	1b9e      	subs	r6, r3, r6
   225d0:	1c73      	adds	r3, r6, #1
   225d2:	2b1f      	cmp	r3, #31
   225d4:	dd00      	ble.n	225d8 <__aeabi_dadd+0xec>
   225d6:	e0f1      	b.n	227bc <__aeabi_dadd+0x2d0>
   225d8:	2220      	movs	r2, #32
   225da:	0038      	movs	r0, r7
   225dc:	0029      	movs	r1, r5
   225de:	1ad2      	subs	r2, r2, r3
   225e0:	40d8      	lsrs	r0, r3
   225e2:	4091      	lsls	r1, r2
   225e4:	4097      	lsls	r7, r2
   225e6:	002c      	movs	r4, r5
   225e8:	4301      	orrs	r1, r0
   225ea:	1e78      	subs	r0, r7, #1
   225ec:	4187      	sbcs	r7, r0
   225ee:	40dc      	lsrs	r4, r3
   225f0:	2600      	movs	r6, #0
   225f2:	430f      	orrs	r7, r1
   225f4:	077b      	lsls	r3, r7, #29
   225f6:	d009      	beq.n	2260c <__aeabi_dadd+0x120>
   225f8:	230f      	movs	r3, #15
   225fa:	403b      	ands	r3, r7
   225fc:	2b04      	cmp	r3, #4
   225fe:	d005      	beq.n	2260c <__aeabi_dadd+0x120>
   22600:	1d3b      	adds	r3, r7, #4
   22602:	42bb      	cmp	r3, r7
   22604:	41bf      	sbcs	r7, r7
   22606:	427f      	negs	r7, r7
   22608:	19e4      	adds	r4, r4, r7
   2260a:	001f      	movs	r7, r3
   2260c:	0223      	lsls	r3, r4, #8
   2260e:	d52c      	bpl.n	2266a <__aeabi_dadd+0x17e>
   22610:	4b96      	ldr	r3, [pc, #600]	; (2286c <__aeabi_dadd+0x380>)
   22612:	3601      	adds	r6, #1
   22614:	429e      	cmp	r6, r3
   22616:	d100      	bne.n	2261a <__aeabi_dadd+0x12e>
   22618:	e09a      	b.n	22750 <__aeabi_dadd+0x264>
   2261a:	4645      	mov	r5, r8
   2261c:	4b94      	ldr	r3, [pc, #592]	; (22870 <__aeabi_dadd+0x384>)
   2261e:	08ff      	lsrs	r7, r7, #3
   22620:	401c      	ands	r4, r3
   22622:	0760      	lsls	r0, r4, #29
   22624:	0576      	lsls	r6, r6, #21
   22626:	0264      	lsls	r4, r4, #9
   22628:	4307      	orrs	r7, r0
   2262a:	0b24      	lsrs	r4, r4, #12
   2262c:	0d76      	lsrs	r6, r6, #21
   2262e:	2100      	movs	r1, #0
   22630:	0324      	lsls	r4, r4, #12
   22632:	0b23      	lsrs	r3, r4, #12
   22634:	0d0c      	lsrs	r4, r1, #20
   22636:	4a8f      	ldr	r2, [pc, #572]	; (22874 <__aeabi_dadd+0x388>)
   22638:	0524      	lsls	r4, r4, #20
   2263a:	431c      	orrs	r4, r3
   2263c:	4014      	ands	r4, r2
   2263e:	0533      	lsls	r3, r6, #20
   22640:	4323      	orrs	r3, r4
   22642:	005b      	lsls	r3, r3, #1
   22644:	07ed      	lsls	r5, r5, #31
   22646:	085b      	lsrs	r3, r3, #1
   22648:	432b      	orrs	r3, r5
   2264a:	0038      	movs	r0, r7
   2264c:	0019      	movs	r1, r3
   2264e:	bc3c      	pop	{r2, r3, r4, r5}
   22650:	4690      	mov	r8, r2
   22652:	4699      	mov	r9, r3
   22654:	46a2      	mov	sl, r4
   22656:	46ab      	mov	fp, r5
   22658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2265a:	4664      	mov	r4, ip
   2265c:	4304      	orrs	r4, r0
   2265e:	d100      	bne.n	22662 <__aeabi_dadd+0x176>
   22660:	e211      	b.n	22a86 <__aeabi_dadd+0x59a>
   22662:	0004      	movs	r4, r0
   22664:	4667      	mov	r7, ip
   22666:	077b      	lsls	r3, r7, #29
   22668:	d1c6      	bne.n	225f8 <__aeabi_dadd+0x10c>
   2266a:	4645      	mov	r5, r8
   2266c:	0760      	lsls	r0, r4, #29
   2266e:	08ff      	lsrs	r7, r7, #3
   22670:	4307      	orrs	r7, r0
   22672:	08e4      	lsrs	r4, r4, #3
   22674:	4b7d      	ldr	r3, [pc, #500]	; (2286c <__aeabi_dadd+0x380>)
   22676:	429e      	cmp	r6, r3
   22678:	d030      	beq.n	226dc <__aeabi_dadd+0x1f0>
   2267a:	0324      	lsls	r4, r4, #12
   2267c:	0576      	lsls	r6, r6, #21
   2267e:	0b24      	lsrs	r4, r4, #12
   22680:	0d76      	lsrs	r6, r6, #21
   22682:	e7d4      	b.n	2262e <__aeabi_dadd+0x142>
   22684:	1a33      	subs	r3, r6, r0
   22686:	469a      	mov	sl, r3
   22688:	2b00      	cmp	r3, #0
   2268a:	dd78      	ble.n	2277e <__aeabi_dadd+0x292>
   2268c:	2800      	cmp	r0, #0
   2268e:	d031      	beq.n	226f4 <__aeabi_dadd+0x208>
   22690:	4876      	ldr	r0, [pc, #472]	; (2286c <__aeabi_dadd+0x380>)
   22692:	4286      	cmp	r6, r0
   22694:	d0ae      	beq.n	225f4 <__aeabi_dadd+0x108>
   22696:	2080      	movs	r0, #128	; 0x80
   22698:	0400      	lsls	r0, r0, #16
   2269a:	4301      	orrs	r1, r0
   2269c:	4653      	mov	r3, sl
   2269e:	2b38      	cmp	r3, #56	; 0x38
   226a0:	dc00      	bgt.n	226a4 <__aeabi_dadd+0x1b8>
   226a2:	e0e9      	b.n	22878 <__aeabi_dadd+0x38c>
   226a4:	430a      	orrs	r2, r1
   226a6:	1e51      	subs	r1, r2, #1
   226a8:	418a      	sbcs	r2, r1
   226aa:	2100      	movs	r1, #0
   226ac:	19d2      	adds	r2, r2, r7
   226ae:	42ba      	cmp	r2, r7
   226b0:	41bf      	sbcs	r7, r7
   226b2:	1909      	adds	r1, r1, r4
   226b4:	427c      	negs	r4, r7
   226b6:	0017      	movs	r7, r2
   226b8:	190c      	adds	r4, r1, r4
   226ba:	0223      	lsls	r3, r4, #8
   226bc:	d5d3      	bpl.n	22666 <__aeabi_dadd+0x17a>
   226be:	4b6b      	ldr	r3, [pc, #428]	; (2286c <__aeabi_dadd+0x380>)
   226c0:	3601      	adds	r6, #1
   226c2:	429e      	cmp	r6, r3
   226c4:	d100      	bne.n	226c8 <__aeabi_dadd+0x1dc>
   226c6:	e13a      	b.n	2293e <__aeabi_dadd+0x452>
   226c8:	2001      	movs	r0, #1
   226ca:	4b69      	ldr	r3, [pc, #420]	; (22870 <__aeabi_dadd+0x384>)
   226cc:	401c      	ands	r4, r3
   226ce:	087b      	lsrs	r3, r7, #1
   226d0:	4007      	ands	r7, r0
   226d2:	431f      	orrs	r7, r3
   226d4:	07e0      	lsls	r0, r4, #31
   226d6:	4307      	orrs	r7, r0
   226d8:	0864      	lsrs	r4, r4, #1
   226da:	e78b      	b.n	225f4 <__aeabi_dadd+0x108>
   226dc:	0023      	movs	r3, r4
   226de:	433b      	orrs	r3, r7
   226e0:	d100      	bne.n	226e4 <__aeabi_dadd+0x1f8>
   226e2:	e1cb      	b.n	22a7c <__aeabi_dadd+0x590>
   226e4:	2280      	movs	r2, #128	; 0x80
   226e6:	0312      	lsls	r2, r2, #12
   226e8:	4314      	orrs	r4, r2
   226ea:	0324      	lsls	r4, r4, #12
   226ec:	0b24      	lsrs	r4, r4, #12
   226ee:	e79e      	b.n	2262e <__aeabi_dadd+0x142>
   226f0:	002e      	movs	r6, r5
   226f2:	e77f      	b.n	225f4 <__aeabi_dadd+0x108>
   226f4:	0008      	movs	r0, r1
   226f6:	4310      	orrs	r0, r2
   226f8:	d100      	bne.n	226fc <__aeabi_dadd+0x210>
   226fa:	e0b4      	b.n	22866 <__aeabi_dadd+0x37a>
   226fc:	1e58      	subs	r0, r3, #1
   226fe:	2800      	cmp	r0, #0
   22700:	d000      	beq.n	22704 <__aeabi_dadd+0x218>
   22702:	e0de      	b.n	228c2 <__aeabi_dadd+0x3d6>
   22704:	18ba      	adds	r2, r7, r2
   22706:	42ba      	cmp	r2, r7
   22708:	419b      	sbcs	r3, r3
   2270a:	1864      	adds	r4, r4, r1
   2270c:	425b      	negs	r3, r3
   2270e:	18e4      	adds	r4, r4, r3
   22710:	0017      	movs	r7, r2
   22712:	2601      	movs	r6, #1
   22714:	0223      	lsls	r3, r4, #8
   22716:	d5a6      	bpl.n	22666 <__aeabi_dadd+0x17a>
   22718:	2602      	movs	r6, #2
   2271a:	e7d5      	b.n	226c8 <__aeabi_dadd+0x1dc>
   2271c:	2d00      	cmp	r5, #0
   2271e:	d16e      	bne.n	227fe <__aeabi_dadd+0x312>
   22720:	1c70      	adds	r0, r6, #1
   22722:	0540      	lsls	r0, r0, #21
   22724:	0d40      	lsrs	r0, r0, #21
   22726:	2801      	cmp	r0, #1
   22728:	dc00      	bgt.n	2272c <__aeabi_dadd+0x240>
   2272a:	e0f9      	b.n	22920 <__aeabi_dadd+0x434>
   2272c:	1ab8      	subs	r0, r7, r2
   2272e:	4684      	mov	ip, r0
   22730:	4287      	cmp	r7, r0
   22732:	4180      	sbcs	r0, r0
   22734:	1ae5      	subs	r5, r4, r3
   22736:	4240      	negs	r0, r0
   22738:	1a2d      	subs	r5, r5, r0
   2273a:	0228      	lsls	r0, r5, #8
   2273c:	d400      	bmi.n	22740 <__aeabi_dadd+0x254>
   2273e:	e089      	b.n	22854 <__aeabi_dadd+0x368>
   22740:	1bd7      	subs	r7, r2, r7
   22742:	42ba      	cmp	r2, r7
   22744:	4192      	sbcs	r2, r2
   22746:	1b1c      	subs	r4, r3, r4
   22748:	4252      	negs	r2, r2
   2274a:	1aa5      	subs	r5, r4, r2
   2274c:	46d8      	mov	r8, fp
   2274e:	e729      	b.n	225a4 <__aeabi_dadd+0xb8>
   22750:	4645      	mov	r5, r8
   22752:	2400      	movs	r4, #0
   22754:	2700      	movs	r7, #0
   22756:	e76a      	b.n	2262e <__aeabi_dadd+0x142>
   22758:	4c45      	ldr	r4, [pc, #276]	; (22870 <__aeabi_dadd+0x384>)
   2275a:	1af6      	subs	r6, r6, r3
   2275c:	402c      	ands	r4, r5
   2275e:	e749      	b.n	225f4 <__aeabi_dadd+0x108>
   22760:	003d      	movs	r5, r7
   22762:	3828      	subs	r0, #40	; 0x28
   22764:	4085      	lsls	r5, r0
   22766:	2700      	movs	r7, #0
   22768:	e72e      	b.n	225c8 <__aeabi_dadd+0xdc>
   2276a:	0038      	movs	r0, r7
   2276c:	f001 fc98 	bl	240a0 <__clzsi2>
   22770:	3020      	adds	r0, #32
   22772:	e71d      	b.n	225b0 <__aeabi_dadd+0xc4>
   22774:	430a      	orrs	r2, r1
   22776:	1e51      	subs	r1, r2, #1
   22778:	418a      	sbcs	r2, r1
   2277a:	2100      	movs	r1, #0
   2277c:	e707      	b.n	2258e <__aeabi_dadd+0xa2>
   2277e:	2b00      	cmp	r3, #0
   22780:	d000      	beq.n	22784 <__aeabi_dadd+0x298>
   22782:	e0f3      	b.n	2296c <__aeabi_dadd+0x480>
   22784:	1c70      	adds	r0, r6, #1
   22786:	0543      	lsls	r3, r0, #21
   22788:	0d5b      	lsrs	r3, r3, #21
   2278a:	2b01      	cmp	r3, #1
   2278c:	dc00      	bgt.n	22790 <__aeabi_dadd+0x2a4>
   2278e:	e0ad      	b.n	228ec <__aeabi_dadd+0x400>
   22790:	4b36      	ldr	r3, [pc, #216]	; (2286c <__aeabi_dadd+0x380>)
   22792:	4298      	cmp	r0, r3
   22794:	d100      	bne.n	22798 <__aeabi_dadd+0x2ac>
   22796:	e0d1      	b.n	2293c <__aeabi_dadd+0x450>
   22798:	18ba      	adds	r2, r7, r2
   2279a:	42ba      	cmp	r2, r7
   2279c:	41bf      	sbcs	r7, r7
   2279e:	1864      	adds	r4, r4, r1
   227a0:	427f      	negs	r7, r7
   227a2:	19e4      	adds	r4, r4, r7
   227a4:	07e7      	lsls	r7, r4, #31
   227a6:	0852      	lsrs	r2, r2, #1
   227a8:	4317      	orrs	r7, r2
   227aa:	0864      	lsrs	r4, r4, #1
   227ac:	0006      	movs	r6, r0
   227ae:	e721      	b.n	225f4 <__aeabi_dadd+0x108>
   227b0:	482e      	ldr	r0, [pc, #184]	; (2286c <__aeabi_dadd+0x380>)
   227b2:	4285      	cmp	r5, r0
   227b4:	d100      	bne.n	227b8 <__aeabi_dadd+0x2cc>
   227b6:	e093      	b.n	228e0 <__aeabi_dadd+0x3f4>
   227b8:	001d      	movs	r5, r3
   227ba:	e6d0      	b.n	2255e <__aeabi_dadd+0x72>
   227bc:	0029      	movs	r1, r5
   227be:	3e1f      	subs	r6, #31
   227c0:	40f1      	lsrs	r1, r6
   227c2:	2b20      	cmp	r3, #32
   227c4:	d100      	bne.n	227c8 <__aeabi_dadd+0x2dc>
   227c6:	e08d      	b.n	228e4 <__aeabi_dadd+0x3f8>
   227c8:	2240      	movs	r2, #64	; 0x40
   227ca:	1ad3      	subs	r3, r2, r3
   227cc:	409d      	lsls	r5, r3
   227ce:	432f      	orrs	r7, r5
   227d0:	1e7d      	subs	r5, r7, #1
   227d2:	41af      	sbcs	r7, r5
   227d4:	2400      	movs	r4, #0
   227d6:	430f      	orrs	r7, r1
   227d8:	2600      	movs	r6, #0
   227da:	e744      	b.n	22666 <__aeabi_dadd+0x17a>
   227dc:	002b      	movs	r3, r5
   227de:	0008      	movs	r0, r1
   227e0:	3b20      	subs	r3, #32
   227e2:	40d8      	lsrs	r0, r3
   227e4:	0003      	movs	r3, r0
   227e6:	2d20      	cmp	r5, #32
   227e8:	d100      	bne.n	227ec <__aeabi_dadd+0x300>
   227ea:	e07d      	b.n	228e8 <__aeabi_dadd+0x3fc>
   227ec:	2040      	movs	r0, #64	; 0x40
   227ee:	1b45      	subs	r5, r0, r5
   227f0:	40a9      	lsls	r1, r5
   227f2:	430a      	orrs	r2, r1
   227f4:	1e51      	subs	r1, r2, #1
   227f6:	418a      	sbcs	r2, r1
   227f8:	2100      	movs	r1, #0
   227fa:	431a      	orrs	r2, r3
   227fc:	e6c7      	b.n	2258e <__aeabi_dadd+0xa2>
   227fe:	2e00      	cmp	r6, #0
   22800:	d050      	beq.n	228a4 <__aeabi_dadd+0x3b8>
   22802:	4e1a      	ldr	r6, [pc, #104]	; (2286c <__aeabi_dadd+0x380>)
   22804:	42b0      	cmp	r0, r6
   22806:	d057      	beq.n	228b8 <__aeabi_dadd+0x3cc>
   22808:	2680      	movs	r6, #128	; 0x80
   2280a:	426b      	negs	r3, r5
   2280c:	4699      	mov	r9, r3
   2280e:	0436      	lsls	r6, r6, #16
   22810:	4334      	orrs	r4, r6
   22812:	464b      	mov	r3, r9
   22814:	2b38      	cmp	r3, #56	; 0x38
   22816:	dd00      	ble.n	2281a <__aeabi_dadd+0x32e>
   22818:	e0d6      	b.n	229c8 <__aeabi_dadd+0x4dc>
   2281a:	2b1f      	cmp	r3, #31
   2281c:	dd00      	ble.n	22820 <__aeabi_dadd+0x334>
   2281e:	e135      	b.n	22a8c <__aeabi_dadd+0x5a0>
   22820:	2620      	movs	r6, #32
   22822:	1af5      	subs	r5, r6, r3
   22824:	0026      	movs	r6, r4
   22826:	40ae      	lsls	r6, r5
   22828:	46b2      	mov	sl, r6
   2282a:	003e      	movs	r6, r7
   2282c:	40de      	lsrs	r6, r3
   2282e:	46ac      	mov	ip, r5
   22830:	0035      	movs	r5, r6
   22832:	4656      	mov	r6, sl
   22834:	432e      	orrs	r6, r5
   22836:	4665      	mov	r5, ip
   22838:	40af      	lsls	r7, r5
   2283a:	1e7d      	subs	r5, r7, #1
   2283c:	41af      	sbcs	r7, r5
   2283e:	40dc      	lsrs	r4, r3
   22840:	4337      	orrs	r7, r6
   22842:	1bd7      	subs	r7, r2, r7
   22844:	42ba      	cmp	r2, r7
   22846:	4192      	sbcs	r2, r2
   22848:	1b0c      	subs	r4, r1, r4
   2284a:	4252      	negs	r2, r2
   2284c:	1aa4      	subs	r4, r4, r2
   2284e:	0006      	movs	r6, r0
   22850:	46d8      	mov	r8, fp
   22852:	e6a3      	b.n	2259c <__aeabi_dadd+0xb0>
   22854:	4664      	mov	r4, ip
   22856:	4667      	mov	r7, ip
   22858:	432c      	orrs	r4, r5
   2285a:	d000      	beq.n	2285e <__aeabi_dadd+0x372>
   2285c:	e6a2      	b.n	225a4 <__aeabi_dadd+0xb8>
   2285e:	2500      	movs	r5, #0
   22860:	2600      	movs	r6, #0
   22862:	2700      	movs	r7, #0
   22864:	e706      	b.n	22674 <__aeabi_dadd+0x188>
   22866:	001e      	movs	r6, r3
   22868:	e6c4      	b.n	225f4 <__aeabi_dadd+0x108>
   2286a:	46c0      	nop			; (mov r8, r8)
   2286c:	000007ff 	.word	0x000007ff
   22870:	ff7fffff 	.word	0xff7fffff
   22874:	800fffff 	.word	0x800fffff
   22878:	2b1f      	cmp	r3, #31
   2287a:	dc63      	bgt.n	22944 <__aeabi_dadd+0x458>
   2287c:	2020      	movs	r0, #32
   2287e:	1ac3      	subs	r3, r0, r3
   22880:	0008      	movs	r0, r1
   22882:	4098      	lsls	r0, r3
   22884:	469c      	mov	ip, r3
   22886:	4683      	mov	fp, r0
   22888:	4653      	mov	r3, sl
   2288a:	0010      	movs	r0, r2
   2288c:	40d8      	lsrs	r0, r3
   2288e:	0003      	movs	r3, r0
   22890:	4658      	mov	r0, fp
   22892:	4318      	orrs	r0, r3
   22894:	4663      	mov	r3, ip
   22896:	409a      	lsls	r2, r3
   22898:	1e53      	subs	r3, r2, #1
   2289a:	419a      	sbcs	r2, r3
   2289c:	4653      	mov	r3, sl
   2289e:	4302      	orrs	r2, r0
   228a0:	40d9      	lsrs	r1, r3
   228a2:	e703      	b.n	226ac <__aeabi_dadd+0x1c0>
   228a4:	0026      	movs	r6, r4
   228a6:	433e      	orrs	r6, r7
   228a8:	d006      	beq.n	228b8 <__aeabi_dadd+0x3cc>
   228aa:	43eb      	mvns	r3, r5
   228ac:	4699      	mov	r9, r3
   228ae:	2b00      	cmp	r3, #0
   228b0:	d0c7      	beq.n	22842 <__aeabi_dadd+0x356>
   228b2:	4e94      	ldr	r6, [pc, #592]	; (22b04 <__aeabi_dadd+0x618>)
   228b4:	42b0      	cmp	r0, r6
   228b6:	d1ac      	bne.n	22812 <__aeabi_dadd+0x326>
   228b8:	000c      	movs	r4, r1
   228ba:	0017      	movs	r7, r2
   228bc:	0006      	movs	r6, r0
   228be:	46d8      	mov	r8, fp
   228c0:	e698      	b.n	225f4 <__aeabi_dadd+0x108>
   228c2:	4b90      	ldr	r3, [pc, #576]	; (22b04 <__aeabi_dadd+0x618>)
   228c4:	459a      	cmp	sl, r3
   228c6:	d00b      	beq.n	228e0 <__aeabi_dadd+0x3f4>
   228c8:	4682      	mov	sl, r0
   228ca:	e6e7      	b.n	2269c <__aeabi_dadd+0x1b0>
   228cc:	2800      	cmp	r0, #0
   228ce:	d000      	beq.n	228d2 <__aeabi_dadd+0x3e6>
   228d0:	e09e      	b.n	22a10 <__aeabi_dadd+0x524>
   228d2:	0018      	movs	r0, r3
   228d4:	4310      	orrs	r0, r2
   228d6:	d100      	bne.n	228da <__aeabi_dadd+0x3ee>
   228d8:	e0e9      	b.n	22aae <__aeabi_dadd+0x5c2>
   228da:	001c      	movs	r4, r3
   228dc:	0017      	movs	r7, r2
   228de:	46d8      	mov	r8, fp
   228e0:	4e88      	ldr	r6, [pc, #544]	; (22b04 <__aeabi_dadd+0x618>)
   228e2:	e687      	b.n	225f4 <__aeabi_dadd+0x108>
   228e4:	2500      	movs	r5, #0
   228e6:	e772      	b.n	227ce <__aeabi_dadd+0x2e2>
   228e8:	2100      	movs	r1, #0
   228ea:	e782      	b.n	227f2 <__aeabi_dadd+0x306>
   228ec:	0023      	movs	r3, r4
   228ee:	433b      	orrs	r3, r7
   228f0:	2e00      	cmp	r6, #0
   228f2:	d000      	beq.n	228f6 <__aeabi_dadd+0x40a>
   228f4:	e0ab      	b.n	22a4e <__aeabi_dadd+0x562>
   228f6:	2b00      	cmp	r3, #0
   228f8:	d100      	bne.n	228fc <__aeabi_dadd+0x410>
   228fa:	e0e7      	b.n	22acc <__aeabi_dadd+0x5e0>
   228fc:	000b      	movs	r3, r1
   228fe:	4313      	orrs	r3, r2
   22900:	d100      	bne.n	22904 <__aeabi_dadd+0x418>
   22902:	e677      	b.n	225f4 <__aeabi_dadd+0x108>
   22904:	18ba      	adds	r2, r7, r2
   22906:	42ba      	cmp	r2, r7
   22908:	41bf      	sbcs	r7, r7
   2290a:	1864      	adds	r4, r4, r1
   2290c:	427f      	negs	r7, r7
   2290e:	19e4      	adds	r4, r4, r7
   22910:	0223      	lsls	r3, r4, #8
   22912:	d400      	bmi.n	22916 <__aeabi_dadd+0x42a>
   22914:	e0f2      	b.n	22afc <__aeabi_dadd+0x610>
   22916:	4b7c      	ldr	r3, [pc, #496]	; (22b08 <__aeabi_dadd+0x61c>)
   22918:	0017      	movs	r7, r2
   2291a:	401c      	ands	r4, r3
   2291c:	0006      	movs	r6, r0
   2291e:	e669      	b.n	225f4 <__aeabi_dadd+0x108>
   22920:	0020      	movs	r0, r4
   22922:	4338      	orrs	r0, r7
   22924:	2e00      	cmp	r6, #0
   22926:	d1d1      	bne.n	228cc <__aeabi_dadd+0x3e0>
   22928:	2800      	cmp	r0, #0
   2292a:	d15b      	bne.n	229e4 <__aeabi_dadd+0x4f8>
   2292c:	001c      	movs	r4, r3
   2292e:	4314      	orrs	r4, r2
   22930:	d100      	bne.n	22934 <__aeabi_dadd+0x448>
   22932:	e0a8      	b.n	22a86 <__aeabi_dadd+0x59a>
   22934:	001c      	movs	r4, r3
   22936:	0017      	movs	r7, r2
   22938:	46d8      	mov	r8, fp
   2293a:	e65b      	b.n	225f4 <__aeabi_dadd+0x108>
   2293c:	0006      	movs	r6, r0
   2293e:	2400      	movs	r4, #0
   22940:	2700      	movs	r7, #0
   22942:	e697      	b.n	22674 <__aeabi_dadd+0x188>
   22944:	4650      	mov	r0, sl
   22946:	000b      	movs	r3, r1
   22948:	3820      	subs	r0, #32
   2294a:	40c3      	lsrs	r3, r0
   2294c:	4699      	mov	r9, r3
   2294e:	4653      	mov	r3, sl
   22950:	2b20      	cmp	r3, #32
   22952:	d100      	bne.n	22956 <__aeabi_dadd+0x46a>
   22954:	e095      	b.n	22a82 <__aeabi_dadd+0x596>
   22956:	2340      	movs	r3, #64	; 0x40
   22958:	4650      	mov	r0, sl
   2295a:	1a1b      	subs	r3, r3, r0
   2295c:	4099      	lsls	r1, r3
   2295e:	430a      	orrs	r2, r1
   22960:	1e51      	subs	r1, r2, #1
   22962:	418a      	sbcs	r2, r1
   22964:	464b      	mov	r3, r9
   22966:	2100      	movs	r1, #0
   22968:	431a      	orrs	r2, r3
   2296a:	e69f      	b.n	226ac <__aeabi_dadd+0x1c0>
   2296c:	2e00      	cmp	r6, #0
   2296e:	d130      	bne.n	229d2 <__aeabi_dadd+0x4e6>
   22970:	0026      	movs	r6, r4
   22972:	433e      	orrs	r6, r7
   22974:	d067      	beq.n	22a46 <__aeabi_dadd+0x55a>
   22976:	43db      	mvns	r3, r3
   22978:	469a      	mov	sl, r3
   2297a:	2b00      	cmp	r3, #0
   2297c:	d01c      	beq.n	229b8 <__aeabi_dadd+0x4cc>
   2297e:	4e61      	ldr	r6, [pc, #388]	; (22b04 <__aeabi_dadd+0x618>)
   22980:	42b0      	cmp	r0, r6
   22982:	d060      	beq.n	22a46 <__aeabi_dadd+0x55a>
   22984:	4653      	mov	r3, sl
   22986:	2b38      	cmp	r3, #56	; 0x38
   22988:	dd00      	ble.n	2298c <__aeabi_dadd+0x4a0>
   2298a:	e096      	b.n	22aba <__aeabi_dadd+0x5ce>
   2298c:	2b1f      	cmp	r3, #31
   2298e:	dd00      	ble.n	22992 <__aeabi_dadd+0x4a6>
   22990:	e09f      	b.n	22ad2 <__aeabi_dadd+0x5e6>
   22992:	2620      	movs	r6, #32
   22994:	1af3      	subs	r3, r6, r3
   22996:	0026      	movs	r6, r4
   22998:	409e      	lsls	r6, r3
   2299a:	469c      	mov	ip, r3
   2299c:	46b3      	mov	fp, r6
   2299e:	4653      	mov	r3, sl
   229a0:	003e      	movs	r6, r7
   229a2:	40de      	lsrs	r6, r3
   229a4:	0033      	movs	r3, r6
   229a6:	465e      	mov	r6, fp
   229a8:	431e      	orrs	r6, r3
   229aa:	4663      	mov	r3, ip
   229ac:	409f      	lsls	r7, r3
   229ae:	1e7b      	subs	r3, r7, #1
   229b0:	419f      	sbcs	r7, r3
   229b2:	4653      	mov	r3, sl
   229b4:	40dc      	lsrs	r4, r3
   229b6:	4337      	orrs	r7, r6
   229b8:	18bf      	adds	r7, r7, r2
   229ba:	4297      	cmp	r7, r2
   229bc:	4192      	sbcs	r2, r2
   229be:	1864      	adds	r4, r4, r1
   229c0:	4252      	negs	r2, r2
   229c2:	18a4      	adds	r4, r4, r2
   229c4:	0006      	movs	r6, r0
   229c6:	e678      	b.n	226ba <__aeabi_dadd+0x1ce>
   229c8:	4327      	orrs	r7, r4
   229ca:	1e7c      	subs	r4, r7, #1
   229cc:	41a7      	sbcs	r7, r4
   229ce:	2400      	movs	r4, #0
   229d0:	e737      	b.n	22842 <__aeabi_dadd+0x356>
   229d2:	4e4c      	ldr	r6, [pc, #304]	; (22b04 <__aeabi_dadd+0x618>)
   229d4:	42b0      	cmp	r0, r6
   229d6:	d036      	beq.n	22a46 <__aeabi_dadd+0x55a>
   229d8:	2680      	movs	r6, #128	; 0x80
   229da:	425b      	negs	r3, r3
   229dc:	0436      	lsls	r6, r6, #16
   229de:	469a      	mov	sl, r3
   229e0:	4334      	orrs	r4, r6
   229e2:	e7cf      	b.n	22984 <__aeabi_dadd+0x498>
   229e4:	0018      	movs	r0, r3
   229e6:	4310      	orrs	r0, r2
   229e8:	d100      	bne.n	229ec <__aeabi_dadd+0x500>
   229ea:	e603      	b.n	225f4 <__aeabi_dadd+0x108>
   229ec:	1ab8      	subs	r0, r7, r2
   229ee:	4684      	mov	ip, r0
   229f0:	4567      	cmp	r7, ip
   229f2:	41ad      	sbcs	r5, r5
   229f4:	1ae0      	subs	r0, r4, r3
   229f6:	426d      	negs	r5, r5
   229f8:	1b40      	subs	r0, r0, r5
   229fa:	0205      	lsls	r5, r0, #8
   229fc:	d400      	bmi.n	22a00 <__aeabi_dadd+0x514>
   229fe:	e62c      	b.n	2265a <__aeabi_dadd+0x16e>
   22a00:	1bd7      	subs	r7, r2, r7
   22a02:	42ba      	cmp	r2, r7
   22a04:	4192      	sbcs	r2, r2
   22a06:	1b1c      	subs	r4, r3, r4
   22a08:	4252      	negs	r2, r2
   22a0a:	1aa4      	subs	r4, r4, r2
   22a0c:	46d8      	mov	r8, fp
   22a0e:	e5f1      	b.n	225f4 <__aeabi_dadd+0x108>
   22a10:	0018      	movs	r0, r3
   22a12:	4310      	orrs	r0, r2
   22a14:	d100      	bne.n	22a18 <__aeabi_dadd+0x52c>
   22a16:	e763      	b.n	228e0 <__aeabi_dadd+0x3f4>
   22a18:	08f8      	lsrs	r0, r7, #3
   22a1a:	0767      	lsls	r7, r4, #29
   22a1c:	4307      	orrs	r7, r0
   22a1e:	2080      	movs	r0, #128	; 0x80
   22a20:	08e4      	lsrs	r4, r4, #3
   22a22:	0300      	lsls	r0, r0, #12
   22a24:	4204      	tst	r4, r0
   22a26:	d008      	beq.n	22a3a <__aeabi_dadd+0x54e>
   22a28:	08dd      	lsrs	r5, r3, #3
   22a2a:	4205      	tst	r5, r0
   22a2c:	d105      	bne.n	22a3a <__aeabi_dadd+0x54e>
   22a2e:	08d2      	lsrs	r2, r2, #3
   22a30:	0759      	lsls	r1, r3, #29
   22a32:	4311      	orrs	r1, r2
   22a34:	000f      	movs	r7, r1
   22a36:	002c      	movs	r4, r5
   22a38:	46d8      	mov	r8, fp
   22a3a:	0f7b      	lsrs	r3, r7, #29
   22a3c:	00e4      	lsls	r4, r4, #3
   22a3e:	431c      	orrs	r4, r3
   22a40:	00ff      	lsls	r7, r7, #3
   22a42:	4e30      	ldr	r6, [pc, #192]	; (22b04 <__aeabi_dadd+0x618>)
   22a44:	e5d6      	b.n	225f4 <__aeabi_dadd+0x108>
   22a46:	000c      	movs	r4, r1
   22a48:	0017      	movs	r7, r2
   22a4a:	0006      	movs	r6, r0
   22a4c:	e5d2      	b.n	225f4 <__aeabi_dadd+0x108>
   22a4e:	2b00      	cmp	r3, #0
   22a50:	d038      	beq.n	22ac4 <__aeabi_dadd+0x5d8>
   22a52:	000b      	movs	r3, r1
   22a54:	4313      	orrs	r3, r2
   22a56:	d100      	bne.n	22a5a <__aeabi_dadd+0x56e>
   22a58:	e742      	b.n	228e0 <__aeabi_dadd+0x3f4>
   22a5a:	08f8      	lsrs	r0, r7, #3
   22a5c:	0767      	lsls	r7, r4, #29
   22a5e:	4307      	orrs	r7, r0
   22a60:	2080      	movs	r0, #128	; 0x80
   22a62:	08e4      	lsrs	r4, r4, #3
   22a64:	0300      	lsls	r0, r0, #12
   22a66:	4204      	tst	r4, r0
   22a68:	d0e7      	beq.n	22a3a <__aeabi_dadd+0x54e>
   22a6a:	08cb      	lsrs	r3, r1, #3
   22a6c:	4203      	tst	r3, r0
   22a6e:	d1e4      	bne.n	22a3a <__aeabi_dadd+0x54e>
   22a70:	08d2      	lsrs	r2, r2, #3
   22a72:	0749      	lsls	r1, r1, #29
   22a74:	4311      	orrs	r1, r2
   22a76:	000f      	movs	r7, r1
   22a78:	001c      	movs	r4, r3
   22a7a:	e7de      	b.n	22a3a <__aeabi_dadd+0x54e>
   22a7c:	2700      	movs	r7, #0
   22a7e:	2400      	movs	r4, #0
   22a80:	e5d5      	b.n	2262e <__aeabi_dadd+0x142>
   22a82:	2100      	movs	r1, #0
   22a84:	e76b      	b.n	2295e <__aeabi_dadd+0x472>
   22a86:	2500      	movs	r5, #0
   22a88:	2700      	movs	r7, #0
   22a8a:	e5f3      	b.n	22674 <__aeabi_dadd+0x188>
   22a8c:	464e      	mov	r6, r9
   22a8e:	0025      	movs	r5, r4
   22a90:	3e20      	subs	r6, #32
   22a92:	40f5      	lsrs	r5, r6
   22a94:	464b      	mov	r3, r9
   22a96:	002e      	movs	r6, r5
   22a98:	2b20      	cmp	r3, #32
   22a9a:	d02d      	beq.n	22af8 <__aeabi_dadd+0x60c>
   22a9c:	2540      	movs	r5, #64	; 0x40
   22a9e:	1aed      	subs	r5, r5, r3
   22aa0:	40ac      	lsls	r4, r5
   22aa2:	4327      	orrs	r7, r4
   22aa4:	1e7c      	subs	r4, r7, #1
   22aa6:	41a7      	sbcs	r7, r4
   22aa8:	2400      	movs	r4, #0
   22aaa:	4337      	orrs	r7, r6
   22aac:	e6c9      	b.n	22842 <__aeabi_dadd+0x356>
   22aae:	2480      	movs	r4, #128	; 0x80
   22ab0:	2500      	movs	r5, #0
   22ab2:	0324      	lsls	r4, r4, #12
   22ab4:	4e13      	ldr	r6, [pc, #76]	; (22b04 <__aeabi_dadd+0x618>)
   22ab6:	2700      	movs	r7, #0
   22ab8:	e5dc      	b.n	22674 <__aeabi_dadd+0x188>
   22aba:	4327      	orrs	r7, r4
   22abc:	1e7c      	subs	r4, r7, #1
   22abe:	41a7      	sbcs	r7, r4
   22ac0:	2400      	movs	r4, #0
   22ac2:	e779      	b.n	229b8 <__aeabi_dadd+0x4cc>
   22ac4:	000c      	movs	r4, r1
   22ac6:	0017      	movs	r7, r2
   22ac8:	4e0e      	ldr	r6, [pc, #56]	; (22b04 <__aeabi_dadd+0x618>)
   22aca:	e593      	b.n	225f4 <__aeabi_dadd+0x108>
   22acc:	000c      	movs	r4, r1
   22ace:	0017      	movs	r7, r2
   22ad0:	e590      	b.n	225f4 <__aeabi_dadd+0x108>
   22ad2:	4656      	mov	r6, sl
   22ad4:	0023      	movs	r3, r4
   22ad6:	3e20      	subs	r6, #32
   22ad8:	40f3      	lsrs	r3, r6
   22ada:	4699      	mov	r9, r3
   22adc:	4653      	mov	r3, sl
   22ade:	2b20      	cmp	r3, #32
   22ae0:	d00e      	beq.n	22b00 <__aeabi_dadd+0x614>
   22ae2:	2340      	movs	r3, #64	; 0x40
   22ae4:	4656      	mov	r6, sl
   22ae6:	1b9b      	subs	r3, r3, r6
   22ae8:	409c      	lsls	r4, r3
   22aea:	4327      	orrs	r7, r4
   22aec:	1e7c      	subs	r4, r7, #1
   22aee:	41a7      	sbcs	r7, r4
   22af0:	464b      	mov	r3, r9
   22af2:	2400      	movs	r4, #0
   22af4:	431f      	orrs	r7, r3
   22af6:	e75f      	b.n	229b8 <__aeabi_dadd+0x4cc>
   22af8:	2400      	movs	r4, #0
   22afa:	e7d2      	b.n	22aa2 <__aeabi_dadd+0x5b6>
   22afc:	0017      	movs	r7, r2
   22afe:	e5b2      	b.n	22666 <__aeabi_dadd+0x17a>
   22b00:	2400      	movs	r4, #0
   22b02:	e7f2      	b.n	22aea <__aeabi_dadd+0x5fe>
   22b04:	000007ff 	.word	0x000007ff
   22b08:	ff7fffff 	.word	0xff7fffff

00022b0c <__aeabi_ddiv>:
   22b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b0e:	4657      	mov	r7, sl
   22b10:	4645      	mov	r5, r8
   22b12:	46de      	mov	lr, fp
   22b14:	464e      	mov	r6, r9
   22b16:	b5e0      	push	{r5, r6, r7, lr}
   22b18:	004c      	lsls	r4, r1, #1
   22b1a:	030e      	lsls	r6, r1, #12
   22b1c:	b087      	sub	sp, #28
   22b1e:	4683      	mov	fp, r0
   22b20:	4692      	mov	sl, r2
   22b22:	001d      	movs	r5, r3
   22b24:	4680      	mov	r8, r0
   22b26:	0b36      	lsrs	r6, r6, #12
   22b28:	0d64      	lsrs	r4, r4, #21
   22b2a:	0fcf      	lsrs	r7, r1, #31
   22b2c:	2c00      	cmp	r4, #0
   22b2e:	d04f      	beq.n	22bd0 <__aeabi_ddiv+0xc4>
   22b30:	4b6f      	ldr	r3, [pc, #444]	; (22cf0 <__aeabi_ddiv+0x1e4>)
   22b32:	429c      	cmp	r4, r3
   22b34:	d035      	beq.n	22ba2 <__aeabi_ddiv+0x96>
   22b36:	2380      	movs	r3, #128	; 0x80
   22b38:	0f42      	lsrs	r2, r0, #29
   22b3a:	041b      	lsls	r3, r3, #16
   22b3c:	00f6      	lsls	r6, r6, #3
   22b3e:	4313      	orrs	r3, r2
   22b40:	4333      	orrs	r3, r6
   22b42:	4699      	mov	r9, r3
   22b44:	00c3      	lsls	r3, r0, #3
   22b46:	4698      	mov	r8, r3
   22b48:	4b6a      	ldr	r3, [pc, #424]	; (22cf4 <__aeabi_ddiv+0x1e8>)
   22b4a:	2600      	movs	r6, #0
   22b4c:	469c      	mov	ip, r3
   22b4e:	2300      	movs	r3, #0
   22b50:	4464      	add	r4, ip
   22b52:	9303      	str	r3, [sp, #12]
   22b54:	032b      	lsls	r3, r5, #12
   22b56:	0b1b      	lsrs	r3, r3, #12
   22b58:	469b      	mov	fp, r3
   22b5a:	006b      	lsls	r3, r5, #1
   22b5c:	0fed      	lsrs	r5, r5, #31
   22b5e:	4650      	mov	r0, sl
   22b60:	0d5b      	lsrs	r3, r3, #21
   22b62:	9501      	str	r5, [sp, #4]
   22b64:	d05e      	beq.n	22c24 <__aeabi_ddiv+0x118>
   22b66:	4a62      	ldr	r2, [pc, #392]	; (22cf0 <__aeabi_ddiv+0x1e4>)
   22b68:	4293      	cmp	r3, r2
   22b6a:	d053      	beq.n	22c14 <__aeabi_ddiv+0x108>
   22b6c:	465a      	mov	r2, fp
   22b6e:	00d1      	lsls	r1, r2, #3
   22b70:	2280      	movs	r2, #128	; 0x80
   22b72:	0f40      	lsrs	r0, r0, #29
   22b74:	0412      	lsls	r2, r2, #16
   22b76:	4302      	orrs	r2, r0
   22b78:	430a      	orrs	r2, r1
   22b7a:	4693      	mov	fp, r2
   22b7c:	4652      	mov	r2, sl
   22b7e:	00d1      	lsls	r1, r2, #3
   22b80:	4a5c      	ldr	r2, [pc, #368]	; (22cf4 <__aeabi_ddiv+0x1e8>)
   22b82:	4694      	mov	ip, r2
   22b84:	2200      	movs	r2, #0
   22b86:	4463      	add	r3, ip
   22b88:	0038      	movs	r0, r7
   22b8a:	4068      	eors	r0, r5
   22b8c:	4684      	mov	ip, r0
   22b8e:	9002      	str	r0, [sp, #8]
   22b90:	1ae4      	subs	r4, r4, r3
   22b92:	4316      	orrs	r6, r2
   22b94:	2e0f      	cmp	r6, #15
   22b96:	d900      	bls.n	22b9a <__aeabi_ddiv+0x8e>
   22b98:	e0b4      	b.n	22d04 <__aeabi_ddiv+0x1f8>
   22b9a:	4b57      	ldr	r3, [pc, #348]	; (22cf8 <__aeabi_ddiv+0x1ec>)
   22b9c:	00b6      	lsls	r6, r6, #2
   22b9e:	599b      	ldr	r3, [r3, r6]
   22ba0:	469f      	mov	pc, r3
   22ba2:	0003      	movs	r3, r0
   22ba4:	4333      	orrs	r3, r6
   22ba6:	4699      	mov	r9, r3
   22ba8:	d16c      	bne.n	22c84 <__aeabi_ddiv+0x178>
   22baa:	2300      	movs	r3, #0
   22bac:	4698      	mov	r8, r3
   22bae:	3302      	adds	r3, #2
   22bb0:	2608      	movs	r6, #8
   22bb2:	9303      	str	r3, [sp, #12]
   22bb4:	e7ce      	b.n	22b54 <__aeabi_ddiv+0x48>
   22bb6:	46cb      	mov	fp, r9
   22bb8:	4641      	mov	r1, r8
   22bba:	9a03      	ldr	r2, [sp, #12]
   22bbc:	9701      	str	r7, [sp, #4]
   22bbe:	2a02      	cmp	r2, #2
   22bc0:	d165      	bne.n	22c8e <__aeabi_ddiv+0x182>
   22bc2:	9b01      	ldr	r3, [sp, #4]
   22bc4:	4c4a      	ldr	r4, [pc, #296]	; (22cf0 <__aeabi_ddiv+0x1e4>)
   22bc6:	469c      	mov	ip, r3
   22bc8:	2300      	movs	r3, #0
   22bca:	2200      	movs	r2, #0
   22bcc:	4698      	mov	r8, r3
   22bce:	e06b      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22bd0:	0003      	movs	r3, r0
   22bd2:	4333      	orrs	r3, r6
   22bd4:	4699      	mov	r9, r3
   22bd6:	d04e      	beq.n	22c76 <__aeabi_ddiv+0x16a>
   22bd8:	2e00      	cmp	r6, #0
   22bda:	d100      	bne.n	22bde <__aeabi_ddiv+0xd2>
   22bdc:	e1bc      	b.n	22f58 <__aeabi_ddiv+0x44c>
   22bde:	0030      	movs	r0, r6
   22be0:	f001 fa5e 	bl	240a0 <__clzsi2>
   22be4:	0003      	movs	r3, r0
   22be6:	3b0b      	subs	r3, #11
   22be8:	2b1c      	cmp	r3, #28
   22bea:	dd00      	ble.n	22bee <__aeabi_ddiv+0xe2>
   22bec:	e1ac      	b.n	22f48 <__aeabi_ddiv+0x43c>
   22bee:	221d      	movs	r2, #29
   22bf0:	1ad3      	subs	r3, r2, r3
   22bf2:	465a      	mov	r2, fp
   22bf4:	0001      	movs	r1, r0
   22bf6:	40da      	lsrs	r2, r3
   22bf8:	3908      	subs	r1, #8
   22bfa:	408e      	lsls	r6, r1
   22bfc:	0013      	movs	r3, r2
   22bfe:	4333      	orrs	r3, r6
   22c00:	4699      	mov	r9, r3
   22c02:	465b      	mov	r3, fp
   22c04:	408b      	lsls	r3, r1
   22c06:	4698      	mov	r8, r3
   22c08:	2300      	movs	r3, #0
   22c0a:	4c3c      	ldr	r4, [pc, #240]	; (22cfc <__aeabi_ddiv+0x1f0>)
   22c0c:	2600      	movs	r6, #0
   22c0e:	1a24      	subs	r4, r4, r0
   22c10:	9303      	str	r3, [sp, #12]
   22c12:	e79f      	b.n	22b54 <__aeabi_ddiv+0x48>
   22c14:	4651      	mov	r1, sl
   22c16:	465a      	mov	r2, fp
   22c18:	4311      	orrs	r1, r2
   22c1a:	d129      	bne.n	22c70 <__aeabi_ddiv+0x164>
   22c1c:	2200      	movs	r2, #0
   22c1e:	4693      	mov	fp, r2
   22c20:	3202      	adds	r2, #2
   22c22:	e7b1      	b.n	22b88 <__aeabi_ddiv+0x7c>
   22c24:	4659      	mov	r1, fp
   22c26:	4301      	orrs	r1, r0
   22c28:	d01e      	beq.n	22c68 <__aeabi_ddiv+0x15c>
   22c2a:	465b      	mov	r3, fp
   22c2c:	2b00      	cmp	r3, #0
   22c2e:	d100      	bne.n	22c32 <__aeabi_ddiv+0x126>
   22c30:	e19e      	b.n	22f70 <__aeabi_ddiv+0x464>
   22c32:	4658      	mov	r0, fp
   22c34:	f001 fa34 	bl	240a0 <__clzsi2>
   22c38:	0003      	movs	r3, r0
   22c3a:	3b0b      	subs	r3, #11
   22c3c:	2b1c      	cmp	r3, #28
   22c3e:	dd00      	ble.n	22c42 <__aeabi_ddiv+0x136>
   22c40:	e18f      	b.n	22f62 <__aeabi_ddiv+0x456>
   22c42:	0002      	movs	r2, r0
   22c44:	4659      	mov	r1, fp
   22c46:	3a08      	subs	r2, #8
   22c48:	4091      	lsls	r1, r2
   22c4a:	468b      	mov	fp, r1
   22c4c:	211d      	movs	r1, #29
   22c4e:	1acb      	subs	r3, r1, r3
   22c50:	4651      	mov	r1, sl
   22c52:	40d9      	lsrs	r1, r3
   22c54:	000b      	movs	r3, r1
   22c56:	4659      	mov	r1, fp
   22c58:	430b      	orrs	r3, r1
   22c5a:	4651      	mov	r1, sl
   22c5c:	469b      	mov	fp, r3
   22c5e:	4091      	lsls	r1, r2
   22c60:	4b26      	ldr	r3, [pc, #152]	; (22cfc <__aeabi_ddiv+0x1f0>)
   22c62:	2200      	movs	r2, #0
   22c64:	1a1b      	subs	r3, r3, r0
   22c66:	e78f      	b.n	22b88 <__aeabi_ddiv+0x7c>
   22c68:	2300      	movs	r3, #0
   22c6a:	2201      	movs	r2, #1
   22c6c:	469b      	mov	fp, r3
   22c6e:	e78b      	b.n	22b88 <__aeabi_ddiv+0x7c>
   22c70:	4651      	mov	r1, sl
   22c72:	2203      	movs	r2, #3
   22c74:	e788      	b.n	22b88 <__aeabi_ddiv+0x7c>
   22c76:	2300      	movs	r3, #0
   22c78:	4698      	mov	r8, r3
   22c7a:	3301      	adds	r3, #1
   22c7c:	2604      	movs	r6, #4
   22c7e:	2400      	movs	r4, #0
   22c80:	9303      	str	r3, [sp, #12]
   22c82:	e767      	b.n	22b54 <__aeabi_ddiv+0x48>
   22c84:	2303      	movs	r3, #3
   22c86:	46b1      	mov	r9, r6
   22c88:	9303      	str	r3, [sp, #12]
   22c8a:	260c      	movs	r6, #12
   22c8c:	e762      	b.n	22b54 <__aeabi_ddiv+0x48>
   22c8e:	2a03      	cmp	r2, #3
   22c90:	d100      	bne.n	22c94 <__aeabi_ddiv+0x188>
   22c92:	e25c      	b.n	2314e <__aeabi_ddiv+0x642>
   22c94:	9b01      	ldr	r3, [sp, #4]
   22c96:	2a01      	cmp	r2, #1
   22c98:	d000      	beq.n	22c9c <__aeabi_ddiv+0x190>
   22c9a:	e1e4      	b.n	23066 <__aeabi_ddiv+0x55a>
   22c9c:	4013      	ands	r3, r2
   22c9e:	469c      	mov	ip, r3
   22ca0:	2300      	movs	r3, #0
   22ca2:	2400      	movs	r4, #0
   22ca4:	2200      	movs	r2, #0
   22ca6:	4698      	mov	r8, r3
   22ca8:	2100      	movs	r1, #0
   22caa:	0312      	lsls	r2, r2, #12
   22cac:	0b13      	lsrs	r3, r2, #12
   22cae:	0d0a      	lsrs	r2, r1, #20
   22cb0:	0512      	lsls	r2, r2, #20
   22cb2:	431a      	orrs	r2, r3
   22cb4:	0523      	lsls	r3, r4, #20
   22cb6:	4c12      	ldr	r4, [pc, #72]	; (22d00 <__aeabi_ddiv+0x1f4>)
   22cb8:	4640      	mov	r0, r8
   22cba:	4022      	ands	r2, r4
   22cbc:	4313      	orrs	r3, r2
   22cbe:	4662      	mov	r2, ip
   22cc0:	005b      	lsls	r3, r3, #1
   22cc2:	07d2      	lsls	r2, r2, #31
   22cc4:	085b      	lsrs	r3, r3, #1
   22cc6:	4313      	orrs	r3, r2
   22cc8:	0019      	movs	r1, r3
   22cca:	b007      	add	sp, #28
   22ccc:	bc3c      	pop	{r2, r3, r4, r5}
   22cce:	4690      	mov	r8, r2
   22cd0:	4699      	mov	r9, r3
   22cd2:	46a2      	mov	sl, r4
   22cd4:	46ab      	mov	fp, r5
   22cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22cd8:	2300      	movs	r3, #0
   22cda:	2280      	movs	r2, #128	; 0x80
   22cdc:	469c      	mov	ip, r3
   22cde:	0312      	lsls	r2, r2, #12
   22ce0:	4698      	mov	r8, r3
   22ce2:	4c03      	ldr	r4, [pc, #12]	; (22cf0 <__aeabi_ddiv+0x1e4>)
   22ce4:	e7e0      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22ce6:	2300      	movs	r3, #0
   22ce8:	4c01      	ldr	r4, [pc, #4]	; (22cf0 <__aeabi_ddiv+0x1e4>)
   22cea:	2200      	movs	r2, #0
   22cec:	4698      	mov	r8, r3
   22cee:	e7db      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22cf0:	000007ff 	.word	0x000007ff
   22cf4:	fffffc01 	.word	0xfffffc01
   22cf8:	0002cee0 	.word	0x0002cee0
   22cfc:	fffffc0d 	.word	0xfffffc0d
   22d00:	800fffff 	.word	0x800fffff
   22d04:	45d9      	cmp	r9, fp
   22d06:	d900      	bls.n	22d0a <__aeabi_ddiv+0x1fe>
   22d08:	e139      	b.n	22f7e <__aeabi_ddiv+0x472>
   22d0a:	d100      	bne.n	22d0e <__aeabi_ddiv+0x202>
   22d0c:	e134      	b.n	22f78 <__aeabi_ddiv+0x46c>
   22d0e:	2300      	movs	r3, #0
   22d10:	4646      	mov	r6, r8
   22d12:	464d      	mov	r5, r9
   22d14:	469a      	mov	sl, r3
   22d16:	3c01      	subs	r4, #1
   22d18:	465b      	mov	r3, fp
   22d1a:	0e0a      	lsrs	r2, r1, #24
   22d1c:	021b      	lsls	r3, r3, #8
   22d1e:	431a      	orrs	r2, r3
   22d20:	020b      	lsls	r3, r1, #8
   22d22:	0c17      	lsrs	r7, r2, #16
   22d24:	9303      	str	r3, [sp, #12]
   22d26:	0413      	lsls	r3, r2, #16
   22d28:	0c1b      	lsrs	r3, r3, #16
   22d2a:	0039      	movs	r1, r7
   22d2c:	0028      	movs	r0, r5
   22d2e:	4690      	mov	r8, r2
   22d30:	9301      	str	r3, [sp, #4]
   22d32:	f7fe f999 	bl	21068 <__udivsi3>
   22d36:	0002      	movs	r2, r0
   22d38:	9b01      	ldr	r3, [sp, #4]
   22d3a:	4683      	mov	fp, r0
   22d3c:	435a      	muls	r2, r3
   22d3e:	0028      	movs	r0, r5
   22d40:	0039      	movs	r1, r7
   22d42:	4691      	mov	r9, r2
   22d44:	f7fe fa16 	bl	21174 <__aeabi_uidivmod>
   22d48:	0c35      	lsrs	r5, r6, #16
   22d4a:	0409      	lsls	r1, r1, #16
   22d4c:	430d      	orrs	r5, r1
   22d4e:	45a9      	cmp	r9, r5
   22d50:	d90d      	bls.n	22d6e <__aeabi_ddiv+0x262>
   22d52:	465b      	mov	r3, fp
   22d54:	4445      	add	r5, r8
   22d56:	3b01      	subs	r3, #1
   22d58:	45a8      	cmp	r8, r5
   22d5a:	d900      	bls.n	22d5e <__aeabi_ddiv+0x252>
   22d5c:	e13a      	b.n	22fd4 <__aeabi_ddiv+0x4c8>
   22d5e:	45a9      	cmp	r9, r5
   22d60:	d800      	bhi.n	22d64 <__aeabi_ddiv+0x258>
   22d62:	e137      	b.n	22fd4 <__aeabi_ddiv+0x4c8>
   22d64:	2302      	movs	r3, #2
   22d66:	425b      	negs	r3, r3
   22d68:	469c      	mov	ip, r3
   22d6a:	4445      	add	r5, r8
   22d6c:	44e3      	add	fp, ip
   22d6e:	464b      	mov	r3, r9
   22d70:	1aeb      	subs	r3, r5, r3
   22d72:	0039      	movs	r1, r7
   22d74:	0018      	movs	r0, r3
   22d76:	9304      	str	r3, [sp, #16]
   22d78:	f7fe f976 	bl	21068 <__udivsi3>
   22d7c:	9b01      	ldr	r3, [sp, #4]
   22d7e:	0005      	movs	r5, r0
   22d80:	4343      	muls	r3, r0
   22d82:	0039      	movs	r1, r7
   22d84:	9804      	ldr	r0, [sp, #16]
   22d86:	4699      	mov	r9, r3
   22d88:	f7fe f9f4 	bl	21174 <__aeabi_uidivmod>
   22d8c:	0433      	lsls	r3, r6, #16
   22d8e:	0409      	lsls	r1, r1, #16
   22d90:	0c1b      	lsrs	r3, r3, #16
   22d92:	430b      	orrs	r3, r1
   22d94:	4599      	cmp	r9, r3
   22d96:	d909      	bls.n	22dac <__aeabi_ddiv+0x2a0>
   22d98:	4443      	add	r3, r8
   22d9a:	1e6a      	subs	r2, r5, #1
   22d9c:	4598      	cmp	r8, r3
   22d9e:	d900      	bls.n	22da2 <__aeabi_ddiv+0x296>
   22da0:	e11a      	b.n	22fd8 <__aeabi_ddiv+0x4cc>
   22da2:	4599      	cmp	r9, r3
   22da4:	d800      	bhi.n	22da8 <__aeabi_ddiv+0x29c>
   22da6:	e117      	b.n	22fd8 <__aeabi_ddiv+0x4cc>
   22da8:	3d02      	subs	r5, #2
   22daa:	4443      	add	r3, r8
   22dac:	464a      	mov	r2, r9
   22dae:	1a9b      	subs	r3, r3, r2
   22db0:	465a      	mov	r2, fp
   22db2:	0412      	lsls	r2, r2, #16
   22db4:	432a      	orrs	r2, r5
   22db6:	9903      	ldr	r1, [sp, #12]
   22db8:	4693      	mov	fp, r2
   22dba:	0c10      	lsrs	r0, r2, #16
   22dbc:	0c0a      	lsrs	r2, r1, #16
   22dbe:	4691      	mov	r9, r2
   22dc0:	0409      	lsls	r1, r1, #16
   22dc2:	465a      	mov	r2, fp
   22dc4:	0c09      	lsrs	r1, r1, #16
   22dc6:	464e      	mov	r6, r9
   22dc8:	000d      	movs	r5, r1
   22dca:	0412      	lsls	r2, r2, #16
   22dcc:	0c12      	lsrs	r2, r2, #16
   22dce:	4345      	muls	r5, r0
   22dd0:	9105      	str	r1, [sp, #20]
   22dd2:	4351      	muls	r1, r2
   22dd4:	4372      	muls	r2, r6
   22dd6:	4370      	muls	r0, r6
   22dd8:	1952      	adds	r2, r2, r5
   22dda:	0c0e      	lsrs	r6, r1, #16
   22ddc:	18b2      	adds	r2, r6, r2
   22dde:	4295      	cmp	r5, r2
   22de0:	d903      	bls.n	22dea <__aeabi_ddiv+0x2de>
   22de2:	2580      	movs	r5, #128	; 0x80
   22de4:	026d      	lsls	r5, r5, #9
   22de6:	46ac      	mov	ip, r5
   22de8:	4460      	add	r0, ip
   22dea:	0c15      	lsrs	r5, r2, #16
   22dec:	0409      	lsls	r1, r1, #16
   22dee:	0412      	lsls	r2, r2, #16
   22df0:	0c09      	lsrs	r1, r1, #16
   22df2:	1828      	adds	r0, r5, r0
   22df4:	1852      	adds	r2, r2, r1
   22df6:	4283      	cmp	r3, r0
   22df8:	d200      	bcs.n	22dfc <__aeabi_ddiv+0x2f0>
   22dfa:	e0ce      	b.n	22f9a <__aeabi_ddiv+0x48e>
   22dfc:	d100      	bne.n	22e00 <__aeabi_ddiv+0x2f4>
   22dfe:	e0c8      	b.n	22f92 <__aeabi_ddiv+0x486>
   22e00:	1a1d      	subs	r5, r3, r0
   22e02:	4653      	mov	r3, sl
   22e04:	1a9e      	subs	r6, r3, r2
   22e06:	45b2      	cmp	sl, r6
   22e08:	4192      	sbcs	r2, r2
   22e0a:	4252      	negs	r2, r2
   22e0c:	1aab      	subs	r3, r5, r2
   22e0e:	469a      	mov	sl, r3
   22e10:	4598      	cmp	r8, r3
   22e12:	d100      	bne.n	22e16 <__aeabi_ddiv+0x30a>
   22e14:	e117      	b.n	23046 <__aeabi_ddiv+0x53a>
   22e16:	0039      	movs	r1, r7
   22e18:	0018      	movs	r0, r3
   22e1a:	f7fe f925 	bl	21068 <__udivsi3>
   22e1e:	9b01      	ldr	r3, [sp, #4]
   22e20:	0005      	movs	r5, r0
   22e22:	4343      	muls	r3, r0
   22e24:	0039      	movs	r1, r7
   22e26:	4650      	mov	r0, sl
   22e28:	9304      	str	r3, [sp, #16]
   22e2a:	f7fe f9a3 	bl	21174 <__aeabi_uidivmod>
   22e2e:	9804      	ldr	r0, [sp, #16]
   22e30:	040b      	lsls	r3, r1, #16
   22e32:	0c31      	lsrs	r1, r6, #16
   22e34:	4319      	orrs	r1, r3
   22e36:	4288      	cmp	r0, r1
   22e38:	d909      	bls.n	22e4e <__aeabi_ddiv+0x342>
   22e3a:	4441      	add	r1, r8
   22e3c:	1e6b      	subs	r3, r5, #1
   22e3e:	4588      	cmp	r8, r1
   22e40:	d900      	bls.n	22e44 <__aeabi_ddiv+0x338>
   22e42:	e107      	b.n	23054 <__aeabi_ddiv+0x548>
   22e44:	4288      	cmp	r0, r1
   22e46:	d800      	bhi.n	22e4a <__aeabi_ddiv+0x33e>
   22e48:	e104      	b.n	23054 <__aeabi_ddiv+0x548>
   22e4a:	3d02      	subs	r5, #2
   22e4c:	4441      	add	r1, r8
   22e4e:	9b04      	ldr	r3, [sp, #16]
   22e50:	1acb      	subs	r3, r1, r3
   22e52:	0018      	movs	r0, r3
   22e54:	0039      	movs	r1, r7
   22e56:	9304      	str	r3, [sp, #16]
   22e58:	f7fe f906 	bl	21068 <__udivsi3>
   22e5c:	9b01      	ldr	r3, [sp, #4]
   22e5e:	4682      	mov	sl, r0
   22e60:	4343      	muls	r3, r0
   22e62:	0039      	movs	r1, r7
   22e64:	9804      	ldr	r0, [sp, #16]
   22e66:	9301      	str	r3, [sp, #4]
   22e68:	f7fe f984 	bl	21174 <__aeabi_uidivmod>
   22e6c:	9801      	ldr	r0, [sp, #4]
   22e6e:	040b      	lsls	r3, r1, #16
   22e70:	0431      	lsls	r1, r6, #16
   22e72:	0c09      	lsrs	r1, r1, #16
   22e74:	4319      	orrs	r1, r3
   22e76:	4288      	cmp	r0, r1
   22e78:	d90d      	bls.n	22e96 <__aeabi_ddiv+0x38a>
   22e7a:	4653      	mov	r3, sl
   22e7c:	4441      	add	r1, r8
   22e7e:	3b01      	subs	r3, #1
   22e80:	4588      	cmp	r8, r1
   22e82:	d900      	bls.n	22e86 <__aeabi_ddiv+0x37a>
   22e84:	e0e8      	b.n	23058 <__aeabi_ddiv+0x54c>
   22e86:	4288      	cmp	r0, r1
   22e88:	d800      	bhi.n	22e8c <__aeabi_ddiv+0x380>
   22e8a:	e0e5      	b.n	23058 <__aeabi_ddiv+0x54c>
   22e8c:	2302      	movs	r3, #2
   22e8e:	425b      	negs	r3, r3
   22e90:	469c      	mov	ip, r3
   22e92:	4441      	add	r1, r8
   22e94:	44e2      	add	sl, ip
   22e96:	9b01      	ldr	r3, [sp, #4]
   22e98:	042d      	lsls	r5, r5, #16
   22e9a:	1ace      	subs	r6, r1, r3
   22e9c:	4651      	mov	r1, sl
   22e9e:	4329      	orrs	r1, r5
   22ea0:	9d05      	ldr	r5, [sp, #20]
   22ea2:	464f      	mov	r7, r9
   22ea4:	002a      	movs	r2, r5
   22ea6:	040b      	lsls	r3, r1, #16
   22ea8:	0c08      	lsrs	r0, r1, #16
   22eaa:	0c1b      	lsrs	r3, r3, #16
   22eac:	435a      	muls	r2, r3
   22eae:	4345      	muls	r5, r0
   22eb0:	437b      	muls	r3, r7
   22eb2:	4378      	muls	r0, r7
   22eb4:	195b      	adds	r3, r3, r5
   22eb6:	0c17      	lsrs	r7, r2, #16
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	429d      	cmp	r5, r3
   22ebc:	d903      	bls.n	22ec6 <__aeabi_ddiv+0x3ba>
   22ebe:	2580      	movs	r5, #128	; 0x80
   22ec0:	026d      	lsls	r5, r5, #9
   22ec2:	46ac      	mov	ip, r5
   22ec4:	4460      	add	r0, ip
   22ec6:	0c1d      	lsrs	r5, r3, #16
   22ec8:	0412      	lsls	r2, r2, #16
   22eca:	041b      	lsls	r3, r3, #16
   22ecc:	0c12      	lsrs	r2, r2, #16
   22ece:	1828      	adds	r0, r5, r0
   22ed0:	189b      	adds	r3, r3, r2
   22ed2:	4286      	cmp	r6, r0
   22ed4:	d200      	bcs.n	22ed8 <__aeabi_ddiv+0x3cc>
   22ed6:	e093      	b.n	23000 <__aeabi_ddiv+0x4f4>
   22ed8:	d100      	bne.n	22edc <__aeabi_ddiv+0x3d0>
   22eda:	e08e      	b.n	22ffa <__aeabi_ddiv+0x4ee>
   22edc:	2301      	movs	r3, #1
   22ede:	4319      	orrs	r1, r3
   22ee0:	4ba0      	ldr	r3, [pc, #640]	; (23164 <__aeabi_ddiv+0x658>)
   22ee2:	18e3      	adds	r3, r4, r3
   22ee4:	2b00      	cmp	r3, #0
   22ee6:	dc00      	bgt.n	22eea <__aeabi_ddiv+0x3de>
   22ee8:	e099      	b.n	2301e <__aeabi_ddiv+0x512>
   22eea:	074a      	lsls	r2, r1, #29
   22eec:	d000      	beq.n	22ef0 <__aeabi_ddiv+0x3e4>
   22eee:	e09e      	b.n	2302e <__aeabi_ddiv+0x522>
   22ef0:	465a      	mov	r2, fp
   22ef2:	01d2      	lsls	r2, r2, #7
   22ef4:	d506      	bpl.n	22f04 <__aeabi_ddiv+0x3f8>
   22ef6:	465a      	mov	r2, fp
   22ef8:	4b9b      	ldr	r3, [pc, #620]	; (23168 <__aeabi_ddiv+0x65c>)
   22efa:	401a      	ands	r2, r3
   22efc:	2380      	movs	r3, #128	; 0x80
   22efe:	4693      	mov	fp, r2
   22f00:	00db      	lsls	r3, r3, #3
   22f02:	18e3      	adds	r3, r4, r3
   22f04:	4a99      	ldr	r2, [pc, #612]	; (2316c <__aeabi_ddiv+0x660>)
   22f06:	4293      	cmp	r3, r2
   22f08:	dd68      	ble.n	22fdc <__aeabi_ddiv+0x4d0>
   22f0a:	2301      	movs	r3, #1
   22f0c:	9a02      	ldr	r2, [sp, #8]
   22f0e:	4c98      	ldr	r4, [pc, #608]	; (23170 <__aeabi_ddiv+0x664>)
   22f10:	401a      	ands	r2, r3
   22f12:	2300      	movs	r3, #0
   22f14:	4694      	mov	ip, r2
   22f16:	4698      	mov	r8, r3
   22f18:	2200      	movs	r2, #0
   22f1a:	e6c5      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22f1c:	2280      	movs	r2, #128	; 0x80
   22f1e:	464b      	mov	r3, r9
   22f20:	0312      	lsls	r2, r2, #12
   22f22:	4213      	tst	r3, r2
   22f24:	d00a      	beq.n	22f3c <__aeabi_ddiv+0x430>
   22f26:	465b      	mov	r3, fp
   22f28:	4213      	tst	r3, r2
   22f2a:	d106      	bne.n	22f3a <__aeabi_ddiv+0x42e>
   22f2c:	431a      	orrs	r2, r3
   22f2e:	0312      	lsls	r2, r2, #12
   22f30:	0b12      	lsrs	r2, r2, #12
   22f32:	46ac      	mov	ip, r5
   22f34:	4688      	mov	r8, r1
   22f36:	4c8e      	ldr	r4, [pc, #568]	; (23170 <__aeabi_ddiv+0x664>)
   22f38:	e6b6      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22f3a:	464b      	mov	r3, r9
   22f3c:	431a      	orrs	r2, r3
   22f3e:	0312      	lsls	r2, r2, #12
   22f40:	0b12      	lsrs	r2, r2, #12
   22f42:	46bc      	mov	ip, r7
   22f44:	4c8a      	ldr	r4, [pc, #552]	; (23170 <__aeabi_ddiv+0x664>)
   22f46:	e6af      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22f48:	0003      	movs	r3, r0
   22f4a:	465a      	mov	r2, fp
   22f4c:	3b28      	subs	r3, #40	; 0x28
   22f4e:	409a      	lsls	r2, r3
   22f50:	2300      	movs	r3, #0
   22f52:	4691      	mov	r9, r2
   22f54:	4698      	mov	r8, r3
   22f56:	e657      	b.n	22c08 <__aeabi_ddiv+0xfc>
   22f58:	4658      	mov	r0, fp
   22f5a:	f001 f8a1 	bl	240a0 <__clzsi2>
   22f5e:	3020      	adds	r0, #32
   22f60:	e640      	b.n	22be4 <__aeabi_ddiv+0xd8>
   22f62:	0003      	movs	r3, r0
   22f64:	4652      	mov	r2, sl
   22f66:	3b28      	subs	r3, #40	; 0x28
   22f68:	409a      	lsls	r2, r3
   22f6a:	2100      	movs	r1, #0
   22f6c:	4693      	mov	fp, r2
   22f6e:	e677      	b.n	22c60 <__aeabi_ddiv+0x154>
   22f70:	f001 f896 	bl	240a0 <__clzsi2>
   22f74:	3020      	adds	r0, #32
   22f76:	e65f      	b.n	22c38 <__aeabi_ddiv+0x12c>
   22f78:	4588      	cmp	r8, r1
   22f7a:	d200      	bcs.n	22f7e <__aeabi_ddiv+0x472>
   22f7c:	e6c7      	b.n	22d0e <__aeabi_ddiv+0x202>
   22f7e:	464b      	mov	r3, r9
   22f80:	07de      	lsls	r6, r3, #31
   22f82:	085d      	lsrs	r5, r3, #1
   22f84:	4643      	mov	r3, r8
   22f86:	085b      	lsrs	r3, r3, #1
   22f88:	431e      	orrs	r6, r3
   22f8a:	4643      	mov	r3, r8
   22f8c:	07db      	lsls	r3, r3, #31
   22f8e:	469a      	mov	sl, r3
   22f90:	e6c2      	b.n	22d18 <__aeabi_ddiv+0x20c>
   22f92:	2500      	movs	r5, #0
   22f94:	4592      	cmp	sl, r2
   22f96:	d300      	bcc.n	22f9a <__aeabi_ddiv+0x48e>
   22f98:	e733      	b.n	22e02 <__aeabi_ddiv+0x2f6>
   22f9a:	9e03      	ldr	r6, [sp, #12]
   22f9c:	4659      	mov	r1, fp
   22f9e:	46b4      	mov	ip, r6
   22fa0:	44e2      	add	sl, ip
   22fa2:	45b2      	cmp	sl, r6
   22fa4:	41ad      	sbcs	r5, r5
   22fa6:	426d      	negs	r5, r5
   22fa8:	4445      	add	r5, r8
   22faa:	18eb      	adds	r3, r5, r3
   22fac:	3901      	subs	r1, #1
   22fae:	4598      	cmp	r8, r3
   22fb0:	d207      	bcs.n	22fc2 <__aeabi_ddiv+0x4b6>
   22fb2:	4298      	cmp	r0, r3
   22fb4:	d900      	bls.n	22fb8 <__aeabi_ddiv+0x4ac>
   22fb6:	e07f      	b.n	230b8 <__aeabi_ddiv+0x5ac>
   22fb8:	d100      	bne.n	22fbc <__aeabi_ddiv+0x4b0>
   22fba:	e0bc      	b.n	23136 <__aeabi_ddiv+0x62a>
   22fbc:	1a1d      	subs	r5, r3, r0
   22fbe:	468b      	mov	fp, r1
   22fc0:	e71f      	b.n	22e02 <__aeabi_ddiv+0x2f6>
   22fc2:	4598      	cmp	r8, r3
   22fc4:	d1fa      	bne.n	22fbc <__aeabi_ddiv+0x4b0>
   22fc6:	9d03      	ldr	r5, [sp, #12]
   22fc8:	4555      	cmp	r5, sl
   22fca:	d9f2      	bls.n	22fb2 <__aeabi_ddiv+0x4a6>
   22fcc:	4643      	mov	r3, r8
   22fce:	468b      	mov	fp, r1
   22fd0:	1a1d      	subs	r5, r3, r0
   22fd2:	e716      	b.n	22e02 <__aeabi_ddiv+0x2f6>
   22fd4:	469b      	mov	fp, r3
   22fd6:	e6ca      	b.n	22d6e <__aeabi_ddiv+0x262>
   22fd8:	0015      	movs	r5, r2
   22fda:	e6e7      	b.n	22dac <__aeabi_ddiv+0x2a0>
   22fdc:	465a      	mov	r2, fp
   22fde:	08c9      	lsrs	r1, r1, #3
   22fe0:	0752      	lsls	r2, r2, #29
   22fe2:	430a      	orrs	r2, r1
   22fe4:	055b      	lsls	r3, r3, #21
   22fe6:	4690      	mov	r8, r2
   22fe8:	0d5c      	lsrs	r4, r3, #21
   22fea:	465a      	mov	r2, fp
   22fec:	2301      	movs	r3, #1
   22fee:	9902      	ldr	r1, [sp, #8]
   22ff0:	0252      	lsls	r2, r2, #9
   22ff2:	4019      	ands	r1, r3
   22ff4:	0b12      	lsrs	r2, r2, #12
   22ff6:	468c      	mov	ip, r1
   22ff8:	e656      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   22ffa:	2b00      	cmp	r3, #0
   22ffc:	d100      	bne.n	23000 <__aeabi_ddiv+0x4f4>
   22ffe:	e76f      	b.n	22ee0 <__aeabi_ddiv+0x3d4>
   23000:	4446      	add	r6, r8
   23002:	1e4a      	subs	r2, r1, #1
   23004:	45b0      	cmp	r8, r6
   23006:	d929      	bls.n	2305c <__aeabi_ddiv+0x550>
   23008:	0011      	movs	r1, r2
   2300a:	4286      	cmp	r6, r0
   2300c:	d000      	beq.n	23010 <__aeabi_ddiv+0x504>
   2300e:	e765      	b.n	22edc <__aeabi_ddiv+0x3d0>
   23010:	9a03      	ldr	r2, [sp, #12]
   23012:	4293      	cmp	r3, r2
   23014:	d000      	beq.n	23018 <__aeabi_ddiv+0x50c>
   23016:	e761      	b.n	22edc <__aeabi_ddiv+0x3d0>
   23018:	e762      	b.n	22ee0 <__aeabi_ddiv+0x3d4>
   2301a:	2101      	movs	r1, #1
   2301c:	4249      	negs	r1, r1
   2301e:	2001      	movs	r0, #1
   23020:	1ac2      	subs	r2, r0, r3
   23022:	2a38      	cmp	r2, #56	; 0x38
   23024:	dd21      	ble.n	2306a <__aeabi_ddiv+0x55e>
   23026:	9b02      	ldr	r3, [sp, #8]
   23028:	4003      	ands	r3, r0
   2302a:	469c      	mov	ip, r3
   2302c:	e638      	b.n	22ca0 <__aeabi_ddiv+0x194>
   2302e:	220f      	movs	r2, #15
   23030:	400a      	ands	r2, r1
   23032:	2a04      	cmp	r2, #4
   23034:	d100      	bne.n	23038 <__aeabi_ddiv+0x52c>
   23036:	e75b      	b.n	22ef0 <__aeabi_ddiv+0x3e4>
   23038:	000a      	movs	r2, r1
   2303a:	1d11      	adds	r1, r2, #4
   2303c:	4291      	cmp	r1, r2
   2303e:	4192      	sbcs	r2, r2
   23040:	4252      	negs	r2, r2
   23042:	4493      	add	fp, r2
   23044:	e754      	b.n	22ef0 <__aeabi_ddiv+0x3e4>
   23046:	4b47      	ldr	r3, [pc, #284]	; (23164 <__aeabi_ddiv+0x658>)
   23048:	18e3      	adds	r3, r4, r3
   2304a:	2b00      	cmp	r3, #0
   2304c:	dde5      	ble.n	2301a <__aeabi_ddiv+0x50e>
   2304e:	2201      	movs	r2, #1
   23050:	4252      	negs	r2, r2
   23052:	e7f2      	b.n	2303a <__aeabi_ddiv+0x52e>
   23054:	001d      	movs	r5, r3
   23056:	e6fa      	b.n	22e4e <__aeabi_ddiv+0x342>
   23058:	469a      	mov	sl, r3
   2305a:	e71c      	b.n	22e96 <__aeabi_ddiv+0x38a>
   2305c:	42b0      	cmp	r0, r6
   2305e:	d839      	bhi.n	230d4 <__aeabi_ddiv+0x5c8>
   23060:	d06e      	beq.n	23140 <__aeabi_ddiv+0x634>
   23062:	0011      	movs	r1, r2
   23064:	e73a      	b.n	22edc <__aeabi_ddiv+0x3d0>
   23066:	9302      	str	r3, [sp, #8]
   23068:	e73a      	b.n	22ee0 <__aeabi_ddiv+0x3d4>
   2306a:	2a1f      	cmp	r2, #31
   2306c:	dc3c      	bgt.n	230e8 <__aeabi_ddiv+0x5dc>
   2306e:	2320      	movs	r3, #32
   23070:	1a9b      	subs	r3, r3, r2
   23072:	000c      	movs	r4, r1
   23074:	4658      	mov	r0, fp
   23076:	4099      	lsls	r1, r3
   23078:	4098      	lsls	r0, r3
   2307a:	1e4b      	subs	r3, r1, #1
   2307c:	4199      	sbcs	r1, r3
   2307e:	465b      	mov	r3, fp
   23080:	40d4      	lsrs	r4, r2
   23082:	40d3      	lsrs	r3, r2
   23084:	4320      	orrs	r0, r4
   23086:	4308      	orrs	r0, r1
   23088:	001a      	movs	r2, r3
   2308a:	0743      	lsls	r3, r0, #29
   2308c:	d009      	beq.n	230a2 <__aeabi_ddiv+0x596>
   2308e:	230f      	movs	r3, #15
   23090:	4003      	ands	r3, r0
   23092:	2b04      	cmp	r3, #4
   23094:	d005      	beq.n	230a2 <__aeabi_ddiv+0x596>
   23096:	0001      	movs	r1, r0
   23098:	1d08      	adds	r0, r1, #4
   2309a:	4288      	cmp	r0, r1
   2309c:	419b      	sbcs	r3, r3
   2309e:	425b      	negs	r3, r3
   230a0:	18d2      	adds	r2, r2, r3
   230a2:	0213      	lsls	r3, r2, #8
   230a4:	d53a      	bpl.n	2311c <__aeabi_ddiv+0x610>
   230a6:	2301      	movs	r3, #1
   230a8:	9a02      	ldr	r2, [sp, #8]
   230aa:	2401      	movs	r4, #1
   230ac:	401a      	ands	r2, r3
   230ae:	2300      	movs	r3, #0
   230b0:	4694      	mov	ip, r2
   230b2:	4698      	mov	r8, r3
   230b4:	2200      	movs	r2, #0
   230b6:	e5f7      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   230b8:	2102      	movs	r1, #2
   230ba:	4249      	negs	r1, r1
   230bc:	468c      	mov	ip, r1
   230be:	9d03      	ldr	r5, [sp, #12]
   230c0:	44e3      	add	fp, ip
   230c2:	46ac      	mov	ip, r5
   230c4:	44e2      	add	sl, ip
   230c6:	45aa      	cmp	sl, r5
   230c8:	41ad      	sbcs	r5, r5
   230ca:	426d      	negs	r5, r5
   230cc:	4445      	add	r5, r8
   230ce:	18ed      	adds	r5, r5, r3
   230d0:	1a2d      	subs	r5, r5, r0
   230d2:	e696      	b.n	22e02 <__aeabi_ddiv+0x2f6>
   230d4:	1e8a      	subs	r2, r1, #2
   230d6:	9903      	ldr	r1, [sp, #12]
   230d8:	004d      	lsls	r5, r1, #1
   230da:	428d      	cmp	r5, r1
   230dc:	4189      	sbcs	r1, r1
   230de:	4249      	negs	r1, r1
   230e0:	4441      	add	r1, r8
   230e2:	1876      	adds	r6, r6, r1
   230e4:	9503      	str	r5, [sp, #12]
   230e6:	e78f      	b.n	23008 <__aeabi_ddiv+0x4fc>
   230e8:	201f      	movs	r0, #31
   230ea:	4240      	negs	r0, r0
   230ec:	1ac3      	subs	r3, r0, r3
   230ee:	4658      	mov	r0, fp
   230f0:	40d8      	lsrs	r0, r3
   230f2:	0003      	movs	r3, r0
   230f4:	2a20      	cmp	r2, #32
   230f6:	d028      	beq.n	2314a <__aeabi_ddiv+0x63e>
   230f8:	2040      	movs	r0, #64	; 0x40
   230fa:	465d      	mov	r5, fp
   230fc:	1a82      	subs	r2, r0, r2
   230fe:	4095      	lsls	r5, r2
   23100:	4329      	orrs	r1, r5
   23102:	1e4a      	subs	r2, r1, #1
   23104:	4191      	sbcs	r1, r2
   23106:	4319      	orrs	r1, r3
   23108:	2307      	movs	r3, #7
   2310a:	2200      	movs	r2, #0
   2310c:	400b      	ands	r3, r1
   2310e:	d009      	beq.n	23124 <__aeabi_ddiv+0x618>
   23110:	230f      	movs	r3, #15
   23112:	2200      	movs	r2, #0
   23114:	400b      	ands	r3, r1
   23116:	0008      	movs	r0, r1
   23118:	2b04      	cmp	r3, #4
   2311a:	d1bd      	bne.n	23098 <__aeabi_ddiv+0x58c>
   2311c:	0001      	movs	r1, r0
   2311e:	0753      	lsls	r3, r2, #29
   23120:	0252      	lsls	r2, r2, #9
   23122:	0b12      	lsrs	r2, r2, #12
   23124:	08c9      	lsrs	r1, r1, #3
   23126:	4319      	orrs	r1, r3
   23128:	2301      	movs	r3, #1
   2312a:	4688      	mov	r8, r1
   2312c:	9902      	ldr	r1, [sp, #8]
   2312e:	2400      	movs	r4, #0
   23130:	4019      	ands	r1, r3
   23132:	468c      	mov	ip, r1
   23134:	e5b8      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   23136:	4552      	cmp	r2, sl
   23138:	d8be      	bhi.n	230b8 <__aeabi_ddiv+0x5ac>
   2313a:	468b      	mov	fp, r1
   2313c:	2500      	movs	r5, #0
   2313e:	e660      	b.n	22e02 <__aeabi_ddiv+0x2f6>
   23140:	9d03      	ldr	r5, [sp, #12]
   23142:	429d      	cmp	r5, r3
   23144:	d3c6      	bcc.n	230d4 <__aeabi_ddiv+0x5c8>
   23146:	0011      	movs	r1, r2
   23148:	e762      	b.n	23010 <__aeabi_ddiv+0x504>
   2314a:	2500      	movs	r5, #0
   2314c:	e7d8      	b.n	23100 <__aeabi_ddiv+0x5f4>
   2314e:	2280      	movs	r2, #128	; 0x80
   23150:	465b      	mov	r3, fp
   23152:	0312      	lsls	r2, r2, #12
   23154:	431a      	orrs	r2, r3
   23156:	9b01      	ldr	r3, [sp, #4]
   23158:	0312      	lsls	r2, r2, #12
   2315a:	0b12      	lsrs	r2, r2, #12
   2315c:	469c      	mov	ip, r3
   2315e:	4688      	mov	r8, r1
   23160:	4c03      	ldr	r4, [pc, #12]	; (23170 <__aeabi_ddiv+0x664>)
   23162:	e5a1      	b.n	22ca8 <__aeabi_ddiv+0x19c>
   23164:	000003ff 	.word	0x000003ff
   23168:	feffffff 	.word	0xfeffffff
   2316c:	000007fe 	.word	0x000007fe
   23170:	000007ff 	.word	0x000007ff

00023174 <__eqdf2>:
   23174:	b5f0      	push	{r4, r5, r6, r7, lr}
   23176:	464f      	mov	r7, r9
   23178:	4646      	mov	r6, r8
   2317a:	46d6      	mov	lr, sl
   2317c:	005c      	lsls	r4, r3, #1
   2317e:	b5c0      	push	{r6, r7, lr}
   23180:	031f      	lsls	r7, r3, #12
   23182:	0fdb      	lsrs	r3, r3, #31
   23184:	469a      	mov	sl, r3
   23186:	4b17      	ldr	r3, [pc, #92]	; (231e4 <__eqdf2+0x70>)
   23188:	030e      	lsls	r6, r1, #12
   2318a:	004d      	lsls	r5, r1, #1
   2318c:	4684      	mov	ip, r0
   2318e:	4680      	mov	r8, r0
   23190:	0b36      	lsrs	r6, r6, #12
   23192:	0d6d      	lsrs	r5, r5, #21
   23194:	0fc9      	lsrs	r1, r1, #31
   23196:	4691      	mov	r9, r2
   23198:	0b3f      	lsrs	r7, r7, #12
   2319a:	0d64      	lsrs	r4, r4, #21
   2319c:	2001      	movs	r0, #1
   2319e:	429d      	cmp	r5, r3
   231a0:	d008      	beq.n	231b4 <__eqdf2+0x40>
   231a2:	429c      	cmp	r4, r3
   231a4:	d001      	beq.n	231aa <__eqdf2+0x36>
   231a6:	42a5      	cmp	r5, r4
   231a8:	d00b      	beq.n	231c2 <__eqdf2+0x4e>
   231aa:	bc1c      	pop	{r2, r3, r4}
   231ac:	4690      	mov	r8, r2
   231ae:	4699      	mov	r9, r3
   231b0:	46a2      	mov	sl, r4
   231b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   231b4:	4663      	mov	r3, ip
   231b6:	4333      	orrs	r3, r6
   231b8:	d1f7      	bne.n	231aa <__eqdf2+0x36>
   231ba:	42ac      	cmp	r4, r5
   231bc:	d1f5      	bne.n	231aa <__eqdf2+0x36>
   231be:	433a      	orrs	r2, r7
   231c0:	d1f3      	bne.n	231aa <__eqdf2+0x36>
   231c2:	2001      	movs	r0, #1
   231c4:	42be      	cmp	r6, r7
   231c6:	d1f0      	bne.n	231aa <__eqdf2+0x36>
   231c8:	45c8      	cmp	r8, r9
   231ca:	d1ee      	bne.n	231aa <__eqdf2+0x36>
   231cc:	4551      	cmp	r1, sl
   231ce:	d007      	beq.n	231e0 <__eqdf2+0x6c>
   231d0:	2d00      	cmp	r5, #0
   231d2:	d1ea      	bne.n	231aa <__eqdf2+0x36>
   231d4:	4663      	mov	r3, ip
   231d6:	431e      	orrs	r6, r3
   231d8:	0030      	movs	r0, r6
   231da:	1e46      	subs	r6, r0, #1
   231dc:	41b0      	sbcs	r0, r6
   231de:	e7e4      	b.n	231aa <__eqdf2+0x36>
   231e0:	2000      	movs	r0, #0
   231e2:	e7e2      	b.n	231aa <__eqdf2+0x36>
   231e4:	000007ff 	.word	0x000007ff

000231e8 <__gedf2>:
   231e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   231ea:	4645      	mov	r5, r8
   231ec:	46de      	mov	lr, fp
   231ee:	4657      	mov	r7, sl
   231f0:	464e      	mov	r6, r9
   231f2:	b5e0      	push	{r5, r6, r7, lr}
   231f4:	031f      	lsls	r7, r3, #12
   231f6:	0b3d      	lsrs	r5, r7, #12
   231f8:	4f2c      	ldr	r7, [pc, #176]	; (232ac <__gedf2+0xc4>)
   231fa:	030e      	lsls	r6, r1, #12
   231fc:	004c      	lsls	r4, r1, #1
   231fe:	46ab      	mov	fp, r5
   23200:	005d      	lsls	r5, r3, #1
   23202:	4684      	mov	ip, r0
   23204:	0b36      	lsrs	r6, r6, #12
   23206:	0d64      	lsrs	r4, r4, #21
   23208:	0fc9      	lsrs	r1, r1, #31
   2320a:	4690      	mov	r8, r2
   2320c:	0d6d      	lsrs	r5, r5, #21
   2320e:	0fdb      	lsrs	r3, r3, #31
   23210:	42bc      	cmp	r4, r7
   23212:	d02a      	beq.n	2326a <__gedf2+0x82>
   23214:	4f25      	ldr	r7, [pc, #148]	; (232ac <__gedf2+0xc4>)
   23216:	42bd      	cmp	r5, r7
   23218:	d02d      	beq.n	23276 <__gedf2+0x8e>
   2321a:	2c00      	cmp	r4, #0
   2321c:	d10f      	bne.n	2323e <__gedf2+0x56>
   2321e:	4330      	orrs	r0, r6
   23220:	0007      	movs	r7, r0
   23222:	4681      	mov	r9, r0
   23224:	4278      	negs	r0, r7
   23226:	4178      	adcs	r0, r7
   23228:	b2c0      	uxtb	r0, r0
   2322a:	2d00      	cmp	r5, #0
   2322c:	d117      	bne.n	2325e <__gedf2+0x76>
   2322e:	465f      	mov	r7, fp
   23230:	433a      	orrs	r2, r7
   23232:	d114      	bne.n	2325e <__gedf2+0x76>
   23234:	464b      	mov	r3, r9
   23236:	2000      	movs	r0, #0
   23238:	2b00      	cmp	r3, #0
   2323a:	d00a      	beq.n	23252 <__gedf2+0x6a>
   2323c:	e006      	b.n	2324c <__gedf2+0x64>
   2323e:	2d00      	cmp	r5, #0
   23240:	d102      	bne.n	23248 <__gedf2+0x60>
   23242:	4658      	mov	r0, fp
   23244:	4302      	orrs	r2, r0
   23246:	d001      	beq.n	2324c <__gedf2+0x64>
   23248:	4299      	cmp	r1, r3
   2324a:	d018      	beq.n	2327e <__gedf2+0x96>
   2324c:	4248      	negs	r0, r1
   2324e:	2101      	movs	r1, #1
   23250:	4308      	orrs	r0, r1
   23252:	bc3c      	pop	{r2, r3, r4, r5}
   23254:	4690      	mov	r8, r2
   23256:	4699      	mov	r9, r3
   23258:	46a2      	mov	sl, r4
   2325a:	46ab      	mov	fp, r5
   2325c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2325e:	2800      	cmp	r0, #0
   23260:	d0f2      	beq.n	23248 <__gedf2+0x60>
   23262:	2001      	movs	r0, #1
   23264:	3b01      	subs	r3, #1
   23266:	4318      	orrs	r0, r3
   23268:	e7f3      	b.n	23252 <__gedf2+0x6a>
   2326a:	0037      	movs	r7, r6
   2326c:	4307      	orrs	r7, r0
   2326e:	d0d1      	beq.n	23214 <__gedf2+0x2c>
   23270:	2002      	movs	r0, #2
   23272:	4240      	negs	r0, r0
   23274:	e7ed      	b.n	23252 <__gedf2+0x6a>
   23276:	465f      	mov	r7, fp
   23278:	4317      	orrs	r7, r2
   2327a:	d0ce      	beq.n	2321a <__gedf2+0x32>
   2327c:	e7f8      	b.n	23270 <__gedf2+0x88>
   2327e:	42ac      	cmp	r4, r5
   23280:	dce4      	bgt.n	2324c <__gedf2+0x64>
   23282:	da03      	bge.n	2328c <__gedf2+0xa4>
   23284:	1e48      	subs	r0, r1, #1
   23286:	2101      	movs	r1, #1
   23288:	4308      	orrs	r0, r1
   2328a:	e7e2      	b.n	23252 <__gedf2+0x6a>
   2328c:	455e      	cmp	r6, fp
   2328e:	d8dd      	bhi.n	2324c <__gedf2+0x64>
   23290:	d006      	beq.n	232a0 <__gedf2+0xb8>
   23292:	2000      	movs	r0, #0
   23294:	455e      	cmp	r6, fp
   23296:	d2dc      	bcs.n	23252 <__gedf2+0x6a>
   23298:	2301      	movs	r3, #1
   2329a:	1e48      	subs	r0, r1, #1
   2329c:	4318      	orrs	r0, r3
   2329e:	e7d8      	b.n	23252 <__gedf2+0x6a>
   232a0:	45c4      	cmp	ip, r8
   232a2:	d8d3      	bhi.n	2324c <__gedf2+0x64>
   232a4:	2000      	movs	r0, #0
   232a6:	45c4      	cmp	ip, r8
   232a8:	d3f6      	bcc.n	23298 <__gedf2+0xb0>
   232aa:	e7d2      	b.n	23252 <__gedf2+0x6a>
   232ac:	000007ff 	.word	0x000007ff

000232b0 <__ledf2>:
   232b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   232b2:	464e      	mov	r6, r9
   232b4:	4645      	mov	r5, r8
   232b6:	46de      	mov	lr, fp
   232b8:	4657      	mov	r7, sl
   232ba:	005c      	lsls	r4, r3, #1
   232bc:	b5e0      	push	{r5, r6, r7, lr}
   232be:	031f      	lsls	r7, r3, #12
   232c0:	0fdb      	lsrs	r3, r3, #31
   232c2:	4699      	mov	r9, r3
   232c4:	4b2a      	ldr	r3, [pc, #168]	; (23370 <__ledf2+0xc0>)
   232c6:	030e      	lsls	r6, r1, #12
   232c8:	004d      	lsls	r5, r1, #1
   232ca:	0fc9      	lsrs	r1, r1, #31
   232cc:	4684      	mov	ip, r0
   232ce:	0b36      	lsrs	r6, r6, #12
   232d0:	0d6d      	lsrs	r5, r5, #21
   232d2:	468b      	mov	fp, r1
   232d4:	4690      	mov	r8, r2
   232d6:	0b3f      	lsrs	r7, r7, #12
   232d8:	0d64      	lsrs	r4, r4, #21
   232da:	429d      	cmp	r5, r3
   232dc:	d020      	beq.n	23320 <__ledf2+0x70>
   232de:	4b24      	ldr	r3, [pc, #144]	; (23370 <__ledf2+0xc0>)
   232e0:	429c      	cmp	r4, r3
   232e2:	d022      	beq.n	2332a <__ledf2+0x7a>
   232e4:	2d00      	cmp	r5, #0
   232e6:	d112      	bne.n	2330e <__ledf2+0x5e>
   232e8:	4330      	orrs	r0, r6
   232ea:	4243      	negs	r3, r0
   232ec:	4143      	adcs	r3, r0
   232ee:	b2db      	uxtb	r3, r3
   232f0:	2c00      	cmp	r4, #0
   232f2:	d01f      	beq.n	23334 <__ledf2+0x84>
   232f4:	2b00      	cmp	r3, #0
   232f6:	d00c      	beq.n	23312 <__ledf2+0x62>
   232f8:	464b      	mov	r3, r9
   232fa:	2001      	movs	r0, #1
   232fc:	3b01      	subs	r3, #1
   232fe:	4303      	orrs	r3, r0
   23300:	0018      	movs	r0, r3
   23302:	bc3c      	pop	{r2, r3, r4, r5}
   23304:	4690      	mov	r8, r2
   23306:	4699      	mov	r9, r3
   23308:	46a2      	mov	sl, r4
   2330a:	46ab      	mov	fp, r5
   2330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2330e:	2c00      	cmp	r4, #0
   23310:	d016      	beq.n	23340 <__ledf2+0x90>
   23312:	45cb      	cmp	fp, r9
   23314:	d017      	beq.n	23346 <__ledf2+0x96>
   23316:	465b      	mov	r3, fp
   23318:	4259      	negs	r1, r3
   2331a:	2301      	movs	r3, #1
   2331c:	430b      	orrs	r3, r1
   2331e:	e7ef      	b.n	23300 <__ledf2+0x50>
   23320:	0031      	movs	r1, r6
   23322:	2302      	movs	r3, #2
   23324:	4301      	orrs	r1, r0
   23326:	d1eb      	bne.n	23300 <__ledf2+0x50>
   23328:	e7d9      	b.n	232de <__ledf2+0x2e>
   2332a:	0039      	movs	r1, r7
   2332c:	2302      	movs	r3, #2
   2332e:	4311      	orrs	r1, r2
   23330:	d1e6      	bne.n	23300 <__ledf2+0x50>
   23332:	e7d7      	b.n	232e4 <__ledf2+0x34>
   23334:	433a      	orrs	r2, r7
   23336:	d1dd      	bne.n	232f4 <__ledf2+0x44>
   23338:	2300      	movs	r3, #0
   2333a:	2800      	cmp	r0, #0
   2333c:	d0e0      	beq.n	23300 <__ledf2+0x50>
   2333e:	e7ea      	b.n	23316 <__ledf2+0x66>
   23340:	433a      	orrs	r2, r7
   23342:	d1e6      	bne.n	23312 <__ledf2+0x62>
   23344:	e7e7      	b.n	23316 <__ledf2+0x66>
   23346:	42a5      	cmp	r5, r4
   23348:	dce5      	bgt.n	23316 <__ledf2+0x66>
   2334a:	db05      	blt.n	23358 <__ledf2+0xa8>
   2334c:	42be      	cmp	r6, r7
   2334e:	d8e2      	bhi.n	23316 <__ledf2+0x66>
   23350:	d007      	beq.n	23362 <__ledf2+0xb2>
   23352:	2300      	movs	r3, #0
   23354:	42be      	cmp	r6, r7
   23356:	d2d3      	bcs.n	23300 <__ledf2+0x50>
   23358:	4659      	mov	r1, fp
   2335a:	2301      	movs	r3, #1
   2335c:	3901      	subs	r1, #1
   2335e:	430b      	orrs	r3, r1
   23360:	e7ce      	b.n	23300 <__ledf2+0x50>
   23362:	45c4      	cmp	ip, r8
   23364:	d8d7      	bhi.n	23316 <__ledf2+0x66>
   23366:	2300      	movs	r3, #0
   23368:	45c4      	cmp	ip, r8
   2336a:	d3f5      	bcc.n	23358 <__ledf2+0xa8>
   2336c:	e7c8      	b.n	23300 <__ledf2+0x50>
   2336e:	46c0      	nop			; (mov r8, r8)
   23370:	000007ff 	.word	0x000007ff

00023374 <__aeabi_dmul>:
   23374:	b5f0      	push	{r4, r5, r6, r7, lr}
   23376:	4657      	mov	r7, sl
   23378:	4645      	mov	r5, r8
   2337a:	46de      	mov	lr, fp
   2337c:	464e      	mov	r6, r9
   2337e:	b5e0      	push	{r5, r6, r7, lr}
   23380:	030c      	lsls	r4, r1, #12
   23382:	4698      	mov	r8, r3
   23384:	004e      	lsls	r6, r1, #1
   23386:	0b23      	lsrs	r3, r4, #12
   23388:	b087      	sub	sp, #28
   2338a:	0007      	movs	r7, r0
   2338c:	4692      	mov	sl, r2
   2338e:	469b      	mov	fp, r3
   23390:	0d76      	lsrs	r6, r6, #21
   23392:	0fcd      	lsrs	r5, r1, #31
   23394:	2e00      	cmp	r6, #0
   23396:	d06b      	beq.n	23470 <__aeabi_dmul+0xfc>
   23398:	4b6d      	ldr	r3, [pc, #436]	; (23550 <__aeabi_dmul+0x1dc>)
   2339a:	429e      	cmp	r6, r3
   2339c:	d035      	beq.n	2340a <__aeabi_dmul+0x96>
   2339e:	2480      	movs	r4, #128	; 0x80
   233a0:	465b      	mov	r3, fp
   233a2:	0f42      	lsrs	r2, r0, #29
   233a4:	0424      	lsls	r4, r4, #16
   233a6:	00db      	lsls	r3, r3, #3
   233a8:	4314      	orrs	r4, r2
   233aa:	431c      	orrs	r4, r3
   233ac:	00c3      	lsls	r3, r0, #3
   233ae:	4699      	mov	r9, r3
   233b0:	4b68      	ldr	r3, [pc, #416]	; (23554 <__aeabi_dmul+0x1e0>)
   233b2:	46a3      	mov	fp, r4
   233b4:	469c      	mov	ip, r3
   233b6:	2300      	movs	r3, #0
   233b8:	2700      	movs	r7, #0
   233ba:	4466      	add	r6, ip
   233bc:	9302      	str	r3, [sp, #8]
   233be:	4643      	mov	r3, r8
   233c0:	031c      	lsls	r4, r3, #12
   233c2:	005a      	lsls	r2, r3, #1
   233c4:	0fdb      	lsrs	r3, r3, #31
   233c6:	4650      	mov	r0, sl
   233c8:	0b24      	lsrs	r4, r4, #12
   233ca:	0d52      	lsrs	r2, r2, #21
   233cc:	4698      	mov	r8, r3
   233ce:	d100      	bne.n	233d2 <__aeabi_dmul+0x5e>
   233d0:	e076      	b.n	234c0 <__aeabi_dmul+0x14c>
   233d2:	4b5f      	ldr	r3, [pc, #380]	; (23550 <__aeabi_dmul+0x1dc>)
   233d4:	429a      	cmp	r2, r3
   233d6:	d06d      	beq.n	234b4 <__aeabi_dmul+0x140>
   233d8:	2380      	movs	r3, #128	; 0x80
   233da:	0f41      	lsrs	r1, r0, #29
   233dc:	041b      	lsls	r3, r3, #16
   233de:	430b      	orrs	r3, r1
   233e0:	495c      	ldr	r1, [pc, #368]	; (23554 <__aeabi_dmul+0x1e0>)
   233e2:	00e4      	lsls	r4, r4, #3
   233e4:	468c      	mov	ip, r1
   233e6:	431c      	orrs	r4, r3
   233e8:	00c3      	lsls	r3, r0, #3
   233ea:	2000      	movs	r0, #0
   233ec:	4462      	add	r2, ip
   233ee:	4641      	mov	r1, r8
   233f0:	18b6      	adds	r6, r6, r2
   233f2:	4069      	eors	r1, r5
   233f4:	1c72      	adds	r2, r6, #1
   233f6:	9101      	str	r1, [sp, #4]
   233f8:	4694      	mov	ip, r2
   233fa:	4307      	orrs	r7, r0
   233fc:	2f0f      	cmp	r7, #15
   233fe:	d900      	bls.n	23402 <__aeabi_dmul+0x8e>
   23400:	e0b0      	b.n	23564 <__aeabi_dmul+0x1f0>
   23402:	4a55      	ldr	r2, [pc, #340]	; (23558 <__aeabi_dmul+0x1e4>)
   23404:	00bf      	lsls	r7, r7, #2
   23406:	59d2      	ldr	r2, [r2, r7]
   23408:	4697      	mov	pc, r2
   2340a:	465b      	mov	r3, fp
   2340c:	4303      	orrs	r3, r0
   2340e:	4699      	mov	r9, r3
   23410:	d000      	beq.n	23414 <__aeabi_dmul+0xa0>
   23412:	e087      	b.n	23524 <__aeabi_dmul+0x1b0>
   23414:	2300      	movs	r3, #0
   23416:	469b      	mov	fp, r3
   23418:	3302      	adds	r3, #2
   2341a:	2708      	movs	r7, #8
   2341c:	9302      	str	r3, [sp, #8]
   2341e:	e7ce      	b.n	233be <__aeabi_dmul+0x4a>
   23420:	4642      	mov	r2, r8
   23422:	9201      	str	r2, [sp, #4]
   23424:	2802      	cmp	r0, #2
   23426:	d067      	beq.n	234f8 <__aeabi_dmul+0x184>
   23428:	2803      	cmp	r0, #3
   2342a:	d100      	bne.n	2342e <__aeabi_dmul+0xba>
   2342c:	e20e      	b.n	2384c <__aeabi_dmul+0x4d8>
   2342e:	2801      	cmp	r0, #1
   23430:	d000      	beq.n	23434 <__aeabi_dmul+0xc0>
   23432:	e162      	b.n	236fa <__aeabi_dmul+0x386>
   23434:	2300      	movs	r3, #0
   23436:	2400      	movs	r4, #0
   23438:	2200      	movs	r2, #0
   2343a:	4699      	mov	r9, r3
   2343c:	9901      	ldr	r1, [sp, #4]
   2343e:	4001      	ands	r1, r0
   23440:	b2cd      	uxtb	r5, r1
   23442:	2100      	movs	r1, #0
   23444:	0312      	lsls	r2, r2, #12
   23446:	0d0b      	lsrs	r3, r1, #20
   23448:	0b12      	lsrs	r2, r2, #12
   2344a:	051b      	lsls	r3, r3, #20
   2344c:	4313      	orrs	r3, r2
   2344e:	4a43      	ldr	r2, [pc, #268]	; (2355c <__aeabi_dmul+0x1e8>)
   23450:	0524      	lsls	r4, r4, #20
   23452:	4013      	ands	r3, r2
   23454:	431c      	orrs	r4, r3
   23456:	0064      	lsls	r4, r4, #1
   23458:	07ed      	lsls	r5, r5, #31
   2345a:	0864      	lsrs	r4, r4, #1
   2345c:	432c      	orrs	r4, r5
   2345e:	4648      	mov	r0, r9
   23460:	0021      	movs	r1, r4
   23462:	b007      	add	sp, #28
   23464:	bc3c      	pop	{r2, r3, r4, r5}
   23466:	4690      	mov	r8, r2
   23468:	4699      	mov	r9, r3
   2346a:	46a2      	mov	sl, r4
   2346c:	46ab      	mov	fp, r5
   2346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23470:	4303      	orrs	r3, r0
   23472:	4699      	mov	r9, r3
   23474:	d04f      	beq.n	23516 <__aeabi_dmul+0x1a2>
   23476:	465b      	mov	r3, fp
   23478:	2b00      	cmp	r3, #0
   2347a:	d100      	bne.n	2347e <__aeabi_dmul+0x10a>
   2347c:	e189      	b.n	23792 <__aeabi_dmul+0x41e>
   2347e:	4658      	mov	r0, fp
   23480:	f000 fe0e 	bl	240a0 <__clzsi2>
   23484:	0003      	movs	r3, r0
   23486:	3b0b      	subs	r3, #11
   23488:	2b1c      	cmp	r3, #28
   2348a:	dd00      	ble.n	2348e <__aeabi_dmul+0x11a>
   2348c:	e17a      	b.n	23784 <__aeabi_dmul+0x410>
   2348e:	221d      	movs	r2, #29
   23490:	1ad3      	subs	r3, r2, r3
   23492:	003a      	movs	r2, r7
   23494:	0001      	movs	r1, r0
   23496:	465c      	mov	r4, fp
   23498:	40da      	lsrs	r2, r3
   2349a:	3908      	subs	r1, #8
   2349c:	408c      	lsls	r4, r1
   2349e:	0013      	movs	r3, r2
   234a0:	408f      	lsls	r7, r1
   234a2:	4323      	orrs	r3, r4
   234a4:	469b      	mov	fp, r3
   234a6:	46b9      	mov	r9, r7
   234a8:	2300      	movs	r3, #0
   234aa:	4e2d      	ldr	r6, [pc, #180]	; (23560 <__aeabi_dmul+0x1ec>)
   234ac:	2700      	movs	r7, #0
   234ae:	1a36      	subs	r6, r6, r0
   234b0:	9302      	str	r3, [sp, #8]
   234b2:	e784      	b.n	233be <__aeabi_dmul+0x4a>
   234b4:	4653      	mov	r3, sl
   234b6:	4323      	orrs	r3, r4
   234b8:	d12a      	bne.n	23510 <__aeabi_dmul+0x19c>
   234ba:	2400      	movs	r4, #0
   234bc:	2002      	movs	r0, #2
   234be:	e796      	b.n	233ee <__aeabi_dmul+0x7a>
   234c0:	4653      	mov	r3, sl
   234c2:	4323      	orrs	r3, r4
   234c4:	d020      	beq.n	23508 <__aeabi_dmul+0x194>
   234c6:	2c00      	cmp	r4, #0
   234c8:	d100      	bne.n	234cc <__aeabi_dmul+0x158>
   234ca:	e157      	b.n	2377c <__aeabi_dmul+0x408>
   234cc:	0020      	movs	r0, r4
   234ce:	f000 fde7 	bl	240a0 <__clzsi2>
   234d2:	0003      	movs	r3, r0
   234d4:	3b0b      	subs	r3, #11
   234d6:	2b1c      	cmp	r3, #28
   234d8:	dd00      	ble.n	234dc <__aeabi_dmul+0x168>
   234da:	e149      	b.n	23770 <__aeabi_dmul+0x3fc>
   234dc:	211d      	movs	r1, #29
   234de:	1acb      	subs	r3, r1, r3
   234e0:	4651      	mov	r1, sl
   234e2:	0002      	movs	r2, r0
   234e4:	40d9      	lsrs	r1, r3
   234e6:	4653      	mov	r3, sl
   234e8:	3a08      	subs	r2, #8
   234ea:	4094      	lsls	r4, r2
   234ec:	4093      	lsls	r3, r2
   234ee:	430c      	orrs	r4, r1
   234f0:	4a1b      	ldr	r2, [pc, #108]	; (23560 <__aeabi_dmul+0x1ec>)
   234f2:	1a12      	subs	r2, r2, r0
   234f4:	2000      	movs	r0, #0
   234f6:	e77a      	b.n	233ee <__aeabi_dmul+0x7a>
   234f8:	2501      	movs	r5, #1
   234fa:	9b01      	ldr	r3, [sp, #4]
   234fc:	4c14      	ldr	r4, [pc, #80]	; (23550 <__aeabi_dmul+0x1dc>)
   234fe:	401d      	ands	r5, r3
   23500:	2300      	movs	r3, #0
   23502:	2200      	movs	r2, #0
   23504:	4699      	mov	r9, r3
   23506:	e79c      	b.n	23442 <__aeabi_dmul+0xce>
   23508:	2400      	movs	r4, #0
   2350a:	2200      	movs	r2, #0
   2350c:	2001      	movs	r0, #1
   2350e:	e76e      	b.n	233ee <__aeabi_dmul+0x7a>
   23510:	4653      	mov	r3, sl
   23512:	2003      	movs	r0, #3
   23514:	e76b      	b.n	233ee <__aeabi_dmul+0x7a>
   23516:	2300      	movs	r3, #0
   23518:	469b      	mov	fp, r3
   2351a:	3301      	adds	r3, #1
   2351c:	2704      	movs	r7, #4
   2351e:	2600      	movs	r6, #0
   23520:	9302      	str	r3, [sp, #8]
   23522:	e74c      	b.n	233be <__aeabi_dmul+0x4a>
   23524:	2303      	movs	r3, #3
   23526:	4681      	mov	r9, r0
   23528:	270c      	movs	r7, #12
   2352a:	9302      	str	r3, [sp, #8]
   2352c:	e747      	b.n	233be <__aeabi_dmul+0x4a>
   2352e:	2280      	movs	r2, #128	; 0x80
   23530:	2300      	movs	r3, #0
   23532:	2500      	movs	r5, #0
   23534:	0312      	lsls	r2, r2, #12
   23536:	4699      	mov	r9, r3
   23538:	4c05      	ldr	r4, [pc, #20]	; (23550 <__aeabi_dmul+0x1dc>)
   2353a:	e782      	b.n	23442 <__aeabi_dmul+0xce>
   2353c:	465c      	mov	r4, fp
   2353e:	464b      	mov	r3, r9
   23540:	9802      	ldr	r0, [sp, #8]
   23542:	e76f      	b.n	23424 <__aeabi_dmul+0xb0>
   23544:	465c      	mov	r4, fp
   23546:	464b      	mov	r3, r9
   23548:	9501      	str	r5, [sp, #4]
   2354a:	9802      	ldr	r0, [sp, #8]
   2354c:	e76a      	b.n	23424 <__aeabi_dmul+0xb0>
   2354e:	46c0      	nop			; (mov r8, r8)
   23550:	000007ff 	.word	0x000007ff
   23554:	fffffc01 	.word	0xfffffc01
   23558:	0002cf20 	.word	0x0002cf20
   2355c:	800fffff 	.word	0x800fffff
   23560:	fffffc0d 	.word	0xfffffc0d
   23564:	464a      	mov	r2, r9
   23566:	4649      	mov	r1, r9
   23568:	0c17      	lsrs	r7, r2, #16
   2356a:	0c1a      	lsrs	r2, r3, #16
   2356c:	041b      	lsls	r3, r3, #16
   2356e:	0c1b      	lsrs	r3, r3, #16
   23570:	0408      	lsls	r0, r1, #16
   23572:	0019      	movs	r1, r3
   23574:	0c00      	lsrs	r0, r0, #16
   23576:	4341      	muls	r1, r0
   23578:	0015      	movs	r5, r2
   2357a:	4688      	mov	r8, r1
   2357c:	0019      	movs	r1, r3
   2357e:	437d      	muls	r5, r7
   23580:	4379      	muls	r1, r7
   23582:	9503      	str	r5, [sp, #12]
   23584:	4689      	mov	r9, r1
   23586:	0029      	movs	r1, r5
   23588:	0015      	movs	r5, r2
   2358a:	4345      	muls	r5, r0
   2358c:	444d      	add	r5, r9
   2358e:	9502      	str	r5, [sp, #8]
   23590:	4645      	mov	r5, r8
   23592:	0c2d      	lsrs	r5, r5, #16
   23594:	46aa      	mov	sl, r5
   23596:	9d02      	ldr	r5, [sp, #8]
   23598:	4455      	add	r5, sl
   2359a:	45a9      	cmp	r9, r5
   2359c:	d906      	bls.n	235ac <__aeabi_dmul+0x238>
   2359e:	468a      	mov	sl, r1
   235a0:	2180      	movs	r1, #128	; 0x80
   235a2:	0249      	lsls	r1, r1, #9
   235a4:	4689      	mov	r9, r1
   235a6:	44ca      	add	sl, r9
   235a8:	4651      	mov	r1, sl
   235aa:	9103      	str	r1, [sp, #12]
   235ac:	0c29      	lsrs	r1, r5, #16
   235ae:	9104      	str	r1, [sp, #16]
   235b0:	4641      	mov	r1, r8
   235b2:	0409      	lsls	r1, r1, #16
   235b4:	042d      	lsls	r5, r5, #16
   235b6:	0c09      	lsrs	r1, r1, #16
   235b8:	4688      	mov	r8, r1
   235ba:	0029      	movs	r1, r5
   235bc:	0c25      	lsrs	r5, r4, #16
   235be:	0424      	lsls	r4, r4, #16
   235c0:	4441      	add	r1, r8
   235c2:	0c24      	lsrs	r4, r4, #16
   235c4:	9105      	str	r1, [sp, #20]
   235c6:	0021      	movs	r1, r4
   235c8:	4341      	muls	r1, r0
   235ca:	4688      	mov	r8, r1
   235cc:	0021      	movs	r1, r4
   235ce:	4379      	muls	r1, r7
   235d0:	468a      	mov	sl, r1
   235d2:	4368      	muls	r0, r5
   235d4:	4641      	mov	r1, r8
   235d6:	4450      	add	r0, sl
   235d8:	4681      	mov	r9, r0
   235da:	0c08      	lsrs	r0, r1, #16
   235dc:	4448      	add	r0, r9
   235de:	436f      	muls	r7, r5
   235e0:	4582      	cmp	sl, r0
   235e2:	d903      	bls.n	235ec <__aeabi_dmul+0x278>
   235e4:	2180      	movs	r1, #128	; 0x80
   235e6:	0249      	lsls	r1, r1, #9
   235e8:	4689      	mov	r9, r1
   235ea:	444f      	add	r7, r9
   235ec:	0c01      	lsrs	r1, r0, #16
   235ee:	4689      	mov	r9, r1
   235f0:	0039      	movs	r1, r7
   235f2:	4449      	add	r1, r9
   235f4:	9102      	str	r1, [sp, #8]
   235f6:	4641      	mov	r1, r8
   235f8:	040f      	lsls	r7, r1, #16
   235fa:	9904      	ldr	r1, [sp, #16]
   235fc:	0c3f      	lsrs	r7, r7, #16
   235fe:	4688      	mov	r8, r1
   23600:	0400      	lsls	r0, r0, #16
   23602:	19c0      	adds	r0, r0, r7
   23604:	4480      	add	r8, r0
   23606:	4641      	mov	r1, r8
   23608:	9104      	str	r1, [sp, #16]
   2360a:	4659      	mov	r1, fp
   2360c:	0c0f      	lsrs	r7, r1, #16
   2360e:	0409      	lsls	r1, r1, #16
   23610:	0c09      	lsrs	r1, r1, #16
   23612:	4688      	mov	r8, r1
   23614:	4359      	muls	r1, r3
   23616:	468a      	mov	sl, r1
   23618:	0039      	movs	r1, r7
   2361a:	4351      	muls	r1, r2
   2361c:	4689      	mov	r9, r1
   2361e:	4641      	mov	r1, r8
   23620:	434a      	muls	r2, r1
   23622:	4651      	mov	r1, sl
   23624:	0c09      	lsrs	r1, r1, #16
   23626:	468b      	mov	fp, r1
   23628:	437b      	muls	r3, r7
   2362a:	18d2      	adds	r2, r2, r3
   2362c:	445a      	add	r2, fp
   2362e:	4293      	cmp	r3, r2
   23630:	d903      	bls.n	2363a <__aeabi_dmul+0x2c6>
   23632:	2380      	movs	r3, #128	; 0x80
   23634:	025b      	lsls	r3, r3, #9
   23636:	469b      	mov	fp, r3
   23638:	44d9      	add	r9, fp
   2363a:	4651      	mov	r1, sl
   2363c:	0409      	lsls	r1, r1, #16
   2363e:	0c09      	lsrs	r1, r1, #16
   23640:	468a      	mov	sl, r1
   23642:	4641      	mov	r1, r8
   23644:	4361      	muls	r1, r4
   23646:	437c      	muls	r4, r7
   23648:	0c13      	lsrs	r3, r2, #16
   2364a:	0412      	lsls	r2, r2, #16
   2364c:	444b      	add	r3, r9
   2364e:	4452      	add	r2, sl
   23650:	46a1      	mov	r9, r4
   23652:	468a      	mov	sl, r1
   23654:	003c      	movs	r4, r7
   23656:	4641      	mov	r1, r8
   23658:	436c      	muls	r4, r5
   2365a:	434d      	muls	r5, r1
   2365c:	4651      	mov	r1, sl
   2365e:	444d      	add	r5, r9
   23660:	0c0f      	lsrs	r7, r1, #16
   23662:	197d      	adds	r5, r7, r5
   23664:	45a9      	cmp	r9, r5
   23666:	d903      	bls.n	23670 <__aeabi_dmul+0x2fc>
   23668:	2180      	movs	r1, #128	; 0x80
   2366a:	0249      	lsls	r1, r1, #9
   2366c:	4688      	mov	r8, r1
   2366e:	4444      	add	r4, r8
   23670:	9f04      	ldr	r7, [sp, #16]
   23672:	9903      	ldr	r1, [sp, #12]
   23674:	46b8      	mov	r8, r7
   23676:	4441      	add	r1, r8
   23678:	468b      	mov	fp, r1
   2367a:	4583      	cmp	fp, r0
   2367c:	4180      	sbcs	r0, r0
   2367e:	4241      	negs	r1, r0
   23680:	4688      	mov	r8, r1
   23682:	4651      	mov	r1, sl
   23684:	0408      	lsls	r0, r1, #16
   23686:	042f      	lsls	r7, r5, #16
   23688:	0c00      	lsrs	r0, r0, #16
   2368a:	183f      	adds	r7, r7, r0
   2368c:	4658      	mov	r0, fp
   2368e:	9902      	ldr	r1, [sp, #8]
   23690:	1810      	adds	r0, r2, r0
   23692:	4689      	mov	r9, r1
   23694:	4290      	cmp	r0, r2
   23696:	4192      	sbcs	r2, r2
   23698:	444f      	add	r7, r9
   2369a:	46ba      	mov	sl, r7
   2369c:	4252      	negs	r2, r2
   2369e:	4699      	mov	r9, r3
   236a0:	4693      	mov	fp, r2
   236a2:	44c2      	add	sl, r8
   236a4:	44d1      	add	r9, sl
   236a6:	44cb      	add	fp, r9
   236a8:	428f      	cmp	r7, r1
   236aa:	41bf      	sbcs	r7, r7
   236ac:	45c2      	cmp	sl, r8
   236ae:	4189      	sbcs	r1, r1
   236b0:	4599      	cmp	r9, r3
   236b2:	419b      	sbcs	r3, r3
   236b4:	4593      	cmp	fp, r2
   236b6:	4192      	sbcs	r2, r2
   236b8:	427f      	negs	r7, r7
   236ba:	4249      	negs	r1, r1
   236bc:	0c2d      	lsrs	r5, r5, #16
   236be:	4252      	negs	r2, r2
   236c0:	430f      	orrs	r7, r1
   236c2:	425b      	negs	r3, r3
   236c4:	4313      	orrs	r3, r2
   236c6:	197f      	adds	r7, r7, r5
   236c8:	18ff      	adds	r7, r7, r3
   236ca:	465b      	mov	r3, fp
   236cc:	193c      	adds	r4, r7, r4
   236ce:	0ddb      	lsrs	r3, r3, #23
   236d0:	9a05      	ldr	r2, [sp, #20]
   236d2:	0264      	lsls	r4, r4, #9
   236d4:	431c      	orrs	r4, r3
   236d6:	0243      	lsls	r3, r0, #9
   236d8:	4313      	orrs	r3, r2
   236da:	1e5d      	subs	r5, r3, #1
   236dc:	41ab      	sbcs	r3, r5
   236de:	465a      	mov	r2, fp
   236e0:	0dc0      	lsrs	r0, r0, #23
   236e2:	4303      	orrs	r3, r0
   236e4:	0252      	lsls	r2, r2, #9
   236e6:	4313      	orrs	r3, r2
   236e8:	01e2      	lsls	r2, r4, #7
   236ea:	d556      	bpl.n	2379a <__aeabi_dmul+0x426>
   236ec:	2001      	movs	r0, #1
   236ee:	085a      	lsrs	r2, r3, #1
   236f0:	4003      	ands	r3, r0
   236f2:	4313      	orrs	r3, r2
   236f4:	07e2      	lsls	r2, r4, #31
   236f6:	4313      	orrs	r3, r2
   236f8:	0864      	lsrs	r4, r4, #1
   236fa:	485a      	ldr	r0, [pc, #360]	; (23864 <__aeabi_dmul+0x4f0>)
   236fc:	4460      	add	r0, ip
   236fe:	2800      	cmp	r0, #0
   23700:	dd4d      	ble.n	2379e <__aeabi_dmul+0x42a>
   23702:	075a      	lsls	r2, r3, #29
   23704:	d009      	beq.n	2371a <__aeabi_dmul+0x3a6>
   23706:	220f      	movs	r2, #15
   23708:	401a      	ands	r2, r3
   2370a:	2a04      	cmp	r2, #4
   2370c:	d005      	beq.n	2371a <__aeabi_dmul+0x3a6>
   2370e:	1d1a      	adds	r2, r3, #4
   23710:	429a      	cmp	r2, r3
   23712:	419b      	sbcs	r3, r3
   23714:	425b      	negs	r3, r3
   23716:	18e4      	adds	r4, r4, r3
   23718:	0013      	movs	r3, r2
   2371a:	01e2      	lsls	r2, r4, #7
   2371c:	d504      	bpl.n	23728 <__aeabi_dmul+0x3b4>
   2371e:	2080      	movs	r0, #128	; 0x80
   23720:	4a51      	ldr	r2, [pc, #324]	; (23868 <__aeabi_dmul+0x4f4>)
   23722:	00c0      	lsls	r0, r0, #3
   23724:	4014      	ands	r4, r2
   23726:	4460      	add	r0, ip
   23728:	4a50      	ldr	r2, [pc, #320]	; (2386c <__aeabi_dmul+0x4f8>)
   2372a:	4290      	cmp	r0, r2
   2372c:	dd00      	ble.n	23730 <__aeabi_dmul+0x3bc>
   2372e:	e6e3      	b.n	234f8 <__aeabi_dmul+0x184>
   23730:	2501      	movs	r5, #1
   23732:	08db      	lsrs	r3, r3, #3
   23734:	0762      	lsls	r2, r4, #29
   23736:	431a      	orrs	r2, r3
   23738:	0264      	lsls	r4, r4, #9
   2373a:	9b01      	ldr	r3, [sp, #4]
   2373c:	4691      	mov	r9, r2
   2373e:	0b22      	lsrs	r2, r4, #12
   23740:	0544      	lsls	r4, r0, #21
   23742:	0d64      	lsrs	r4, r4, #21
   23744:	401d      	ands	r5, r3
   23746:	e67c      	b.n	23442 <__aeabi_dmul+0xce>
   23748:	2280      	movs	r2, #128	; 0x80
   2374a:	4659      	mov	r1, fp
   2374c:	0312      	lsls	r2, r2, #12
   2374e:	4211      	tst	r1, r2
   23750:	d008      	beq.n	23764 <__aeabi_dmul+0x3f0>
   23752:	4214      	tst	r4, r2
   23754:	d106      	bne.n	23764 <__aeabi_dmul+0x3f0>
   23756:	4322      	orrs	r2, r4
   23758:	0312      	lsls	r2, r2, #12
   2375a:	0b12      	lsrs	r2, r2, #12
   2375c:	4645      	mov	r5, r8
   2375e:	4699      	mov	r9, r3
   23760:	4c43      	ldr	r4, [pc, #268]	; (23870 <__aeabi_dmul+0x4fc>)
   23762:	e66e      	b.n	23442 <__aeabi_dmul+0xce>
   23764:	465b      	mov	r3, fp
   23766:	431a      	orrs	r2, r3
   23768:	0312      	lsls	r2, r2, #12
   2376a:	0b12      	lsrs	r2, r2, #12
   2376c:	4c40      	ldr	r4, [pc, #256]	; (23870 <__aeabi_dmul+0x4fc>)
   2376e:	e668      	b.n	23442 <__aeabi_dmul+0xce>
   23770:	0003      	movs	r3, r0
   23772:	4654      	mov	r4, sl
   23774:	3b28      	subs	r3, #40	; 0x28
   23776:	409c      	lsls	r4, r3
   23778:	2300      	movs	r3, #0
   2377a:	e6b9      	b.n	234f0 <__aeabi_dmul+0x17c>
   2377c:	f000 fc90 	bl	240a0 <__clzsi2>
   23780:	3020      	adds	r0, #32
   23782:	e6a6      	b.n	234d2 <__aeabi_dmul+0x15e>
   23784:	0003      	movs	r3, r0
   23786:	3b28      	subs	r3, #40	; 0x28
   23788:	409f      	lsls	r7, r3
   2378a:	2300      	movs	r3, #0
   2378c:	46bb      	mov	fp, r7
   2378e:	4699      	mov	r9, r3
   23790:	e68a      	b.n	234a8 <__aeabi_dmul+0x134>
   23792:	f000 fc85 	bl	240a0 <__clzsi2>
   23796:	3020      	adds	r0, #32
   23798:	e674      	b.n	23484 <__aeabi_dmul+0x110>
   2379a:	46b4      	mov	ip, r6
   2379c:	e7ad      	b.n	236fa <__aeabi_dmul+0x386>
   2379e:	2501      	movs	r5, #1
   237a0:	1a2a      	subs	r2, r5, r0
   237a2:	2a38      	cmp	r2, #56	; 0x38
   237a4:	dd06      	ble.n	237b4 <__aeabi_dmul+0x440>
   237a6:	9b01      	ldr	r3, [sp, #4]
   237a8:	2400      	movs	r4, #0
   237aa:	401d      	ands	r5, r3
   237ac:	2300      	movs	r3, #0
   237ae:	2200      	movs	r2, #0
   237b0:	4699      	mov	r9, r3
   237b2:	e646      	b.n	23442 <__aeabi_dmul+0xce>
   237b4:	2a1f      	cmp	r2, #31
   237b6:	dc21      	bgt.n	237fc <__aeabi_dmul+0x488>
   237b8:	2520      	movs	r5, #32
   237ba:	0020      	movs	r0, r4
   237bc:	1aad      	subs	r5, r5, r2
   237be:	001e      	movs	r6, r3
   237c0:	40ab      	lsls	r3, r5
   237c2:	40a8      	lsls	r0, r5
   237c4:	40d6      	lsrs	r6, r2
   237c6:	1e5d      	subs	r5, r3, #1
   237c8:	41ab      	sbcs	r3, r5
   237ca:	4330      	orrs	r0, r6
   237cc:	4318      	orrs	r0, r3
   237ce:	40d4      	lsrs	r4, r2
   237d0:	0743      	lsls	r3, r0, #29
   237d2:	d009      	beq.n	237e8 <__aeabi_dmul+0x474>
   237d4:	230f      	movs	r3, #15
   237d6:	4003      	ands	r3, r0
   237d8:	2b04      	cmp	r3, #4
   237da:	d005      	beq.n	237e8 <__aeabi_dmul+0x474>
   237dc:	0003      	movs	r3, r0
   237de:	1d18      	adds	r0, r3, #4
   237e0:	4298      	cmp	r0, r3
   237e2:	419b      	sbcs	r3, r3
   237e4:	425b      	negs	r3, r3
   237e6:	18e4      	adds	r4, r4, r3
   237e8:	0223      	lsls	r3, r4, #8
   237ea:	d521      	bpl.n	23830 <__aeabi_dmul+0x4bc>
   237ec:	2501      	movs	r5, #1
   237ee:	9b01      	ldr	r3, [sp, #4]
   237f0:	2401      	movs	r4, #1
   237f2:	401d      	ands	r5, r3
   237f4:	2300      	movs	r3, #0
   237f6:	2200      	movs	r2, #0
   237f8:	4699      	mov	r9, r3
   237fa:	e622      	b.n	23442 <__aeabi_dmul+0xce>
   237fc:	251f      	movs	r5, #31
   237fe:	0021      	movs	r1, r4
   23800:	426d      	negs	r5, r5
   23802:	1a28      	subs	r0, r5, r0
   23804:	40c1      	lsrs	r1, r0
   23806:	0008      	movs	r0, r1
   23808:	2a20      	cmp	r2, #32
   2380a:	d01d      	beq.n	23848 <__aeabi_dmul+0x4d4>
   2380c:	355f      	adds	r5, #95	; 0x5f
   2380e:	1aaa      	subs	r2, r5, r2
   23810:	4094      	lsls	r4, r2
   23812:	4323      	orrs	r3, r4
   23814:	1e5c      	subs	r4, r3, #1
   23816:	41a3      	sbcs	r3, r4
   23818:	2507      	movs	r5, #7
   2381a:	4303      	orrs	r3, r0
   2381c:	401d      	ands	r5, r3
   2381e:	2200      	movs	r2, #0
   23820:	2d00      	cmp	r5, #0
   23822:	d009      	beq.n	23838 <__aeabi_dmul+0x4c4>
   23824:	220f      	movs	r2, #15
   23826:	2400      	movs	r4, #0
   23828:	401a      	ands	r2, r3
   2382a:	0018      	movs	r0, r3
   2382c:	2a04      	cmp	r2, #4
   2382e:	d1d6      	bne.n	237de <__aeabi_dmul+0x46a>
   23830:	0003      	movs	r3, r0
   23832:	0765      	lsls	r5, r4, #29
   23834:	0264      	lsls	r4, r4, #9
   23836:	0b22      	lsrs	r2, r4, #12
   23838:	08db      	lsrs	r3, r3, #3
   2383a:	432b      	orrs	r3, r5
   2383c:	2501      	movs	r5, #1
   2383e:	4699      	mov	r9, r3
   23840:	9b01      	ldr	r3, [sp, #4]
   23842:	2400      	movs	r4, #0
   23844:	401d      	ands	r5, r3
   23846:	e5fc      	b.n	23442 <__aeabi_dmul+0xce>
   23848:	2400      	movs	r4, #0
   2384a:	e7e2      	b.n	23812 <__aeabi_dmul+0x49e>
   2384c:	2280      	movs	r2, #128	; 0x80
   2384e:	2501      	movs	r5, #1
   23850:	0312      	lsls	r2, r2, #12
   23852:	4322      	orrs	r2, r4
   23854:	9901      	ldr	r1, [sp, #4]
   23856:	0312      	lsls	r2, r2, #12
   23858:	0b12      	lsrs	r2, r2, #12
   2385a:	400d      	ands	r5, r1
   2385c:	4699      	mov	r9, r3
   2385e:	4c04      	ldr	r4, [pc, #16]	; (23870 <__aeabi_dmul+0x4fc>)
   23860:	e5ef      	b.n	23442 <__aeabi_dmul+0xce>
   23862:	46c0      	nop			; (mov r8, r8)
   23864:	000003ff 	.word	0x000003ff
   23868:	feffffff 	.word	0xfeffffff
   2386c:	000007fe 	.word	0x000007fe
   23870:	000007ff 	.word	0x000007ff

00023874 <__aeabi_dsub>:
   23874:	b5f0      	push	{r4, r5, r6, r7, lr}
   23876:	4646      	mov	r6, r8
   23878:	46d6      	mov	lr, sl
   2387a:	464f      	mov	r7, r9
   2387c:	030c      	lsls	r4, r1, #12
   2387e:	b5c0      	push	{r6, r7, lr}
   23880:	0fcd      	lsrs	r5, r1, #31
   23882:	004e      	lsls	r6, r1, #1
   23884:	0a61      	lsrs	r1, r4, #9
   23886:	0f44      	lsrs	r4, r0, #29
   23888:	430c      	orrs	r4, r1
   2388a:	00c1      	lsls	r1, r0, #3
   2388c:	0058      	lsls	r0, r3, #1
   2388e:	0d40      	lsrs	r0, r0, #21
   23890:	4684      	mov	ip, r0
   23892:	468a      	mov	sl, r1
   23894:	000f      	movs	r7, r1
   23896:	0319      	lsls	r1, r3, #12
   23898:	0f50      	lsrs	r0, r2, #29
   2389a:	0a49      	lsrs	r1, r1, #9
   2389c:	4301      	orrs	r1, r0
   2389e:	48c6      	ldr	r0, [pc, #792]	; (23bb8 <__aeabi_dsub+0x344>)
   238a0:	0d76      	lsrs	r6, r6, #21
   238a2:	46a8      	mov	r8, r5
   238a4:	0fdb      	lsrs	r3, r3, #31
   238a6:	00d2      	lsls	r2, r2, #3
   238a8:	4584      	cmp	ip, r0
   238aa:	d100      	bne.n	238ae <__aeabi_dsub+0x3a>
   238ac:	e0d8      	b.n	23a60 <__aeabi_dsub+0x1ec>
   238ae:	2001      	movs	r0, #1
   238b0:	4043      	eors	r3, r0
   238b2:	42ab      	cmp	r3, r5
   238b4:	d100      	bne.n	238b8 <__aeabi_dsub+0x44>
   238b6:	e0a6      	b.n	23a06 <__aeabi_dsub+0x192>
   238b8:	4660      	mov	r0, ip
   238ba:	1a35      	subs	r5, r6, r0
   238bc:	2d00      	cmp	r5, #0
   238be:	dc00      	bgt.n	238c2 <__aeabi_dsub+0x4e>
   238c0:	e105      	b.n	23ace <__aeabi_dsub+0x25a>
   238c2:	2800      	cmp	r0, #0
   238c4:	d110      	bne.n	238e8 <__aeabi_dsub+0x74>
   238c6:	000b      	movs	r3, r1
   238c8:	4313      	orrs	r3, r2
   238ca:	d100      	bne.n	238ce <__aeabi_dsub+0x5a>
   238cc:	e0d7      	b.n	23a7e <__aeabi_dsub+0x20a>
   238ce:	1e6b      	subs	r3, r5, #1
   238d0:	2b00      	cmp	r3, #0
   238d2:	d000      	beq.n	238d6 <__aeabi_dsub+0x62>
   238d4:	e14b      	b.n	23b6e <__aeabi_dsub+0x2fa>
   238d6:	4653      	mov	r3, sl
   238d8:	1a9f      	subs	r7, r3, r2
   238da:	45ba      	cmp	sl, r7
   238dc:	4180      	sbcs	r0, r0
   238de:	1a64      	subs	r4, r4, r1
   238e0:	4240      	negs	r0, r0
   238e2:	1a24      	subs	r4, r4, r0
   238e4:	2601      	movs	r6, #1
   238e6:	e01e      	b.n	23926 <__aeabi_dsub+0xb2>
   238e8:	4bb3      	ldr	r3, [pc, #716]	; (23bb8 <__aeabi_dsub+0x344>)
   238ea:	429e      	cmp	r6, r3
   238ec:	d048      	beq.n	23980 <__aeabi_dsub+0x10c>
   238ee:	2380      	movs	r3, #128	; 0x80
   238f0:	041b      	lsls	r3, r3, #16
   238f2:	4319      	orrs	r1, r3
   238f4:	2d38      	cmp	r5, #56	; 0x38
   238f6:	dd00      	ble.n	238fa <__aeabi_dsub+0x86>
   238f8:	e119      	b.n	23b2e <__aeabi_dsub+0x2ba>
   238fa:	2d1f      	cmp	r5, #31
   238fc:	dd00      	ble.n	23900 <__aeabi_dsub+0x8c>
   238fe:	e14c      	b.n	23b9a <__aeabi_dsub+0x326>
   23900:	2320      	movs	r3, #32
   23902:	000f      	movs	r7, r1
   23904:	1b5b      	subs	r3, r3, r5
   23906:	0010      	movs	r0, r2
   23908:	409a      	lsls	r2, r3
   2390a:	409f      	lsls	r7, r3
   2390c:	40e8      	lsrs	r0, r5
   2390e:	1e53      	subs	r3, r2, #1
   23910:	419a      	sbcs	r2, r3
   23912:	40e9      	lsrs	r1, r5
   23914:	4307      	orrs	r7, r0
   23916:	4317      	orrs	r7, r2
   23918:	4653      	mov	r3, sl
   2391a:	1bdf      	subs	r7, r3, r7
   2391c:	1a61      	subs	r1, r4, r1
   2391e:	45ba      	cmp	sl, r7
   23920:	41a4      	sbcs	r4, r4
   23922:	4264      	negs	r4, r4
   23924:	1b0c      	subs	r4, r1, r4
   23926:	0223      	lsls	r3, r4, #8
   23928:	d400      	bmi.n	2392c <__aeabi_dsub+0xb8>
   2392a:	e0c5      	b.n	23ab8 <__aeabi_dsub+0x244>
   2392c:	0264      	lsls	r4, r4, #9
   2392e:	0a65      	lsrs	r5, r4, #9
   23930:	2d00      	cmp	r5, #0
   23932:	d100      	bne.n	23936 <__aeabi_dsub+0xc2>
   23934:	e0f6      	b.n	23b24 <__aeabi_dsub+0x2b0>
   23936:	0028      	movs	r0, r5
   23938:	f000 fbb2 	bl	240a0 <__clzsi2>
   2393c:	0003      	movs	r3, r0
   2393e:	3b08      	subs	r3, #8
   23940:	2b1f      	cmp	r3, #31
   23942:	dd00      	ble.n	23946 <__aeabi_dsub+0xd2>
   23944:	e0e9      	b.n	23b1a <__aeabi_dsub+0x2a6>
   23946:	2220      	movs	r2, #32
   23948:	003c      	movs	r4, r7
   2394a:	1ad2      	subs	r2, r2, r3
   2394c:	409d      	lsls	r5, r3
   2394e:	40d4      	lsrs	r4, r2
   23950:	409f      	lsls	r7, r3
   23952:	4325      	orrs	r5, r4
   23954:	429e      	cmp	r6, r3
   23956:	dd00      	ble.n	2395a <__aeabi_dsub+0xe6>
   23958:	e0db      	b.n	23b12 <__aeabi_dsub+0x29e>
   2395a:	1b9e      	subs	r6, r3, r6
   2395c:	1c73      	adds	r3, r6, #1
   2395e:	2b1f      	cmp	r3, #31
   23960:	dd00      	ble.n	23964 <__aeabi_dsub+0xf0>
   23962:	e10a      	b.n	23b7a <__aeabi_dsub+0x306>
   23964:	2220      	movs	r2, #32
   23966:	0038      	movs	r0, r7
   23968:	1ad2      	subs	r2, r2, r3
   2396a:	0029      	movs	r1, r5
   2396c:	4097      	lsls	r7, r2
   2396e:	002c      	movs	r4, r5
   23970:	4091      	lsls	r1, r2
   23972:	40d8      	lsrs	r0, r3
   23974:	1e7a      	subs	r2, r7, #1
   23976:	4197      	sbcs	r7, r2
   23978:	40dc      	lsrs	r4, r3
   2397a:	2600      	movs	r6, #0
   2397c:	4301      	orrs	r1, r0
   2397e:	430f      	orrs	r7, r1
   23980:	077b      	lsls	r3, r7, #29
   23982:	d009      	beq.n	23998 <__aeabi_dsub+0x124>
   23984:	230f      	movs	r3, #15
   23986:	403b      	ands	r3, r7
   23988:	2b04      	cmp	r3, #4
   2398a:	d005      	beq.n	23998 <__aeabi_dsub+0x124>
   2398c:	1d3b      	adds	r3, r7, #4
   2398e:	42bb      	cmp	r3, r7
   23990:	41bf      	sbcs	r7, r7
   23992:	427f      	negs	r7, r7
   23994:	19e4      	adds	r4, r4, r7
   23996:	001f      	movs	r7, r3
   23998:	0223      	lsls	r3, r4, #8
   2399a:	d525      	bpl.n	239e8 <__aeabi_dsub+0x174>
   2399c:	4b86      	ldr	r3, [pc, #536]	; (23bb8 <__aeabi_dsub+0x344>)
   2399e:	3601      	adds	r6, #1
   239a0:	429e      	cmp	r6, r3
   239a2:	d100      	bne.n	239a6 <__aeabi_dsub+0x132>
   239a4:	e0af      	b.n	23b06 <__aeabi_dsub+0x292>
   239a6:	4b85      	ldr	r3, [pc, #532]	; (23bbc <__aeabi_dsub+0x348>)
   239a8:	2501      	movs	r5, #1
   239aa:	401c      	ands	r4, r3
   239ac:	4643      	mov	r3, r8
   239ae:	0762      	lsls	r2, r4, #29
   239b0:	08ff      	lsrs	r7, r7, #3
   239b2:	0264      	lsls	r4, r4, #9
   239b4:	0576      	lsls	r6, r6, #21
   239b6:	4317      	orrs	r7, r2
   239b8:	0b24      	lsrs	r4, r4, #12
   239ba:	0d76      	lsrs	r6, r6, #21
   239bc:	401d      	ands	r5, r3
   239be:	2100      	movs	r1, #0
   239c0:	0324      	lsls	r4, r4, #12
   239c2:	0b23      	lsrs	r3, r4, #12
   239c4:	0d0c      	lsrs	r4, r1, #20
   239c6:	4a7e      	ldr	r2, [pc, #504]	; (23bc0 <__aeabi_dsub+0x34c>)
   239c8:	0524      	lsls	r4, r4, #20
   239ca:	431c      	orrs	r4, r3
   239cc:	4014      	ands	r4, r2
   239ce:	0533      	lsls	r3, r6, #20
   239d0:	4323      	orrs	r3, r4
   239d2:	005b      	lsls	r3, r3, #1
   239d4:	07ed      	lsls	r5, r5, #31
   239d6:	085b      	lsrs	r3, r3, #1
   239d8:	432b      	orrs	r3, r5
   239da:	0038      	movs	r0, r7
   239dc:	0019      	movs	r1, r3
   239de:	bc1c      	pop	{r2, r3, r4}
   239e0:	4690      	mov	r8, r2
   239e2:	4699      	mov	r9, r3
   239e4:	46a2      	mov	sl, r4
   239e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   239e8:	2501      	movs	r5, #1
   239ea:	4643      	mov	r3, r8
   239ec:	0762      	lsls	r2, r4, #29
   239ee:	08ff      	lsrs	r7, r7, #3
   239f0:	4317      	orrs	r7, r2
   239f2:	08e4      	lsrs	r4, r4, #3
   239f4:	401d      	ands	r5, r3
   239f6:	4b70      	ldr	r3, [pc, #448]	; (23bb8 <__aeabi_dsub+0x344>)
   239f8:	429e      	cmp	r6, r3
   239fa:	d036      	beq.n	23a6a <__aeabi_dsub+0x1f6>
   239fc:	0324      	lsls	r4, r4, #12
   239fe:	0576      	lsls	r6, r6, #21
   23a00:	0b24      	lsrs	r4, r4, #12
   23a02:	0d76      	lsrs	r6, r6, #21
   23a04:	e7db      	b.n	239be <__aeabi_dsub+0x14a>
   23a06:	4663      	mov	r3, ip
   23a08:	1af3      	subs	r3, r6, r3
   23a0a:	2b00      	cmp	r3, #0
   23a0c:	dc00      	bgt.n	23a10 <__aeabi_dsub+0x19c>
   23a0e:	e094      	b.n	23b3a <__aeabi_dsub+0x2c6>
   23a10:	4660      	mov	r0, ip
   23a12:	2800      	cmp	r0, #0
   23a14:	d035      	beq.n	23a82 <__aeabi_dsub+0x20e>
   23a16:	4868      	ldr	r0, [pc, #416]	; (23bb8 <__aeabi_dsub+0x344>)
   23a18:	4286      	cmp	r6, r0
   23a1a:	d0b1      	beq.n	23980 <__aeabi_dsub+0x10c>
   23a1c:	2780      	movs	r7, #128	; 0x80
   23a1e:	043f      	lsls	r7, r7, #16
   23a20:	4339      	orrs	r1, r7
   23a22:	2b38      	cmp	r3, #56	; 0x38
   23a24:	dc00      	bgt.n	23a28 <__aeabi_dsub+0x1b4>
   23a26:	e0fd      	b.n	23c24 <__aeabi_dsub+0x3b0>
   23a28:	430a      	orrs	r2, r1
   23a2a:	0017      	movs	r7, r2
   23a2c:	2100      	movs	r1, #0
   23a2e:	1e7a      	subs	r2, r7, #1
   23a30:	4197      	sbcs	r7, r2
   23a32:	4457      	add	r7, sl
   23a34:	4557      	cmp	r7, sl
   23a36:	4180      	sbcs	r0, r0
   23a38:	1909      	adds	r1, r1, r4
   23a3a:	4244      	negs	r4, r0
   23a3c:	190c      	adds	r4, r1, r4
   23a3e:	0223      	lsls	r3, r4, #8
   23a40:	d53a      	bpl.n	23ab8 <__aeabi_dsub+0x244>
   23a42:	4b5d      	ldr	r3, [pc, #372]	; (23bb8 <__aeabi_dsub+0x344>)
   23a44:	3601      	adds	r6, #1
   23a46:	429e      	cmp	r6, r3
   23a48:	d100      	bne.n	23a4c <__aeabi_dsub+0x1d8>
   23a4a:	e14b      	b.n	23ce4 <__aeabi_dsub+0x470>
   23a4c:	2201      	movs	r2, #1
   23a4e:	4b5b      	ldr	r3, [pc, #364]	; (23bbc <__aeabi_dsub+0x348>)
   23a50:	401c      	ands	r4, r3
   23a52:	087b      	lsrs	r3, r7, #1
   23a54:	4017      	ands	r7, r2
   23a56:	431f      	orrs	r7, r3
   23a58:	07e2      	lsls	r2, r4, #31
   23a5a:	4317      	orrs	r7, r2
   23a5c:	0864      	lsrs	r4, r4, #1
   23a5e:	e78f      	b.n	23980 <__aeabi_dsub+0x10c>
   23a60:	0008      	movs	r0, r1
   23a62:	4310      	orrs	r0, r2
   23a64:	d000      	beq.n	23a68 <__aeabi_dsub+0x1f4>
   23a66:	e724      	b.n	238b2 <__aeabi_dsub+0x3e>
   23a68:	e721      	b.n	238ae <__aeabi_dsub+0x3a>
   23a6a:	0023      	movs	r3, r4
   23a6c:	433b      	orrs	r3, r7
   23a6e:	d100      	bne.n	23a72 <__aeabi_dsub+0x1fe>
   23a70:	e1b9      	b.n	23de6 <__aeabi_dsub+0x572>
   23a72:	2280      	movs	r2, #128	; 0x80
   23a74:	0312      	lsls	r2, r2, #12
   23a76:	4314      	orrs	r4, r2
   23a78:	0324      	lsls	r4, r4, #12
   23a7a:	0b24      	lsrs	r4, r4, #12
   23a7c:	e79f      	b.n	239be <__aeabi_dsub+0x14a>
   23a7e:	002e      	movs	r6, r5
   23a80:	e77e      	b.n	23980 <__aeabi_dsub+0x10c>
   23a82:	0008      	movs	r0, r1
   23a84:	4310      	orrs	r0, r2
   23a86:	d100      	bne.n	23a8a <__aeabi_dsub+0x216>
   23a88:	e0ca      	b.n	23c20 <__aeabi_dsub+0x3ac>
   23a8a:	1e58      	subs	r0, r3, #1
   23a8c:	4684      	mov	ip, r0
   23a8e:	2800      	cmp	r0, #0
   23a90:	d000      	beq.n	23a94 <__aeabi_dsub+0x220>
   23a92:	e0e7      	b.n	23c64 <__aeabi_dsub+0x3f0>
   23a94:	4452      	add	r2, sl
   23a96:	4552      	cmp	r2, sl
   23a98:	4180      	sbcs	r0, r0
   23a9a:	1864      	adds	r4, r4, r1
   23a9c:	4240      	negs	r0, r0
   23a9e:	1824      	adds	r4, r4, r0
   23aa0:	0017      	movs	r7, r2
   23aa2:	2601      	movs	r6, #1
   23aa4:	0223      	lsls	r3, r4, #8
   23aa6:	d507      	bpl.n	23ab8 <__aeabi_dsub+0x244>
   23aa8:	2602      	movs	r6, #2
   23aaa:	e7cf      	b.n	23a4c <__aeabi_dsub+0x1d8>
   23aac:	4664      	mov	r4, ip
   23aae:	432c      	orrs	r4, r5
   23ab0:	d100      	bne.n	23ab4 <__aeabi_dsub+0x240>
   23ab2:	e1b3      	b.n	23e1c <__aeabi_dsub+0x5a8>
   23ab4:	002c      	movs	r4, r5
   23ab6:	4667      	mov	r7, ip
   23ab8:	077b      	lsls	r3, r7, #29
   23aba:	d000      	beq.n	23abe <__aeabi_dsub+0x24a>
   23abc:	e762      	b.n	23984 <__aeabi_dsub+0x110>
   23abe:	0763      	lsls	r3, r4, #29
   23ac0:	08ff      	lsrs	r7, r7, #3
   23ac2:	431f      	orrs	r7, r3
   23ac4:	2501      	movs	r5, #1
   23ac6:	4643      	mov	r3, r8
   23ac8:	08e4      	lsrs	r4, r4, #3
   23aca:	401d      	ands	r5, r3
   23acc:	e793      	b.n	239f6 <__aeabi_dsub+0x182>
   23ace:	2d00      	cmp	r5, #0
   23ad0:	d178      	bne.n	23bc4 <__aeabi_dsub+0x350>
   23ad2:	1c75      	adds	r5, r6, #1
   23ad4:	056d      	lsls	r5, r5, #21
   23ad6:	0d6d      	lsrs	r5, r5, #21
   23ad8:	2d01      	cmp	r5, #1
   23ada:	dc00      	bgt.n	23ade <__aeabi_dsub+0x26a>
   23adc:	e0f2      	b.n	23cc4 <__aeabi_dsub+0x450>
   23ade:	4650      	mov	r0, sl
   23ae0:	1a80      	subs	r0, r0, r2
   23ae2:	4582      	cmp	sl, r0
   23ae4:	41bf      	sbcs	r7, r7
   23ae6:	1a65      	subs	r5, r4, r1
   23ae8:	427f      	negs	r7, r7
   23aea:	1bed      	subs	r5, r5, r7
   23aec:	4684      	mov	ip, r0
   23aee:	0228      	lsls	r0, r5, #8
   23af0:	d400      	bmi.n	23af4 <__aeabi_dsub+0x280>
   23af2:	e08c      	b.n	23c0e <__aeabi_dsub+0x39a>
   23af4:	4650      	mov	r0, sl
   23af6:	1a17      	subs	r7, r2, r0
   23af8:	42ba      	cmp	r2, r7
   23afa:	4192      	sbcs	r2, r2
   23afc:	1b0c      	subs	r4, r1, r4
   23afe:	4255      	negs	r5, r2
   23b00:	1b65      	subs	r5, r4, r5
   23b02:	4698      	mov	r8, r3
   23b04:	e714      	b.n	23930 <__aeabi_dsub+0xbc>
   23b06:	2501      	movs	r5, #1
   23b08:	4643      	mov	r3, r8
   23b0a:	2400      	movs	r4, #0
   23b0c:	401d      	ands	r5, r3
   23b0e:	2700      	movs	r7, #0
   23b10:	e755      	b.n	239be <__aeabi_dsub+0x14a>
   23b12:	4c2a      	ldr	r4, [pc, #168]	; (23bbc <__aeabi_dsub+0x348>)
   23b14:	1af6      	subs	r6, r6, r3
   23b16:	402c      	ands	r4, r5
   23b18:	e732      	b.n	23980 <__aeabi_dsub+0x10c>
   23b1a:	003d      	movs	r5, r7
   23b1c:	3828      	subs	r0, #40	; 0x28
   23b1e:	4085      	lsls	r5, r0
   23b20:	2700      	movs	r7, #0
   23b22:	e717      	b.n	23954 <__aeabi_dsub+0xe0>
   23b24:	0038      	movs	r0, r7
   23b26:	f000 fabb 	bl	240a0 <__clzsi2>
   23b2a:	3020      	adds	r0, #32
   23b2c:	e706      	b.n	2393c <__aeabi_dsub+0xc8>
   23b2e:	430a      	orrs	r2, r1
   23b30:	0017      	movs	r7, r2
   23b32:	2100      	movs	r1, #0
   23b34:	1e7a      	subs	r2, r7, #1
   23b36:	4197      	sbcs	r7, r2
   23b38:	e6ee      	b.n	23918 <__aeabi_dsub+0xa4>
   23b3a:	2b00      	cmp	r3, #0
   23b3c:	d000      	beq.n	23b40 <__aeabi_dsub+0x2cc>
   23b3e:	e0e5      	b.n	23d0c <__aeabi_dsub+0x498>
   23b40:	1c73      	adds	r3, r6, #1
   23b42:	469c      	mov	ip, r3
   23b44:	055b      	lsls	r3, r3, #21
   23b46:	0d5b      	lsrs	r3, r3, #21
   23b48:	2b01      	cmp	r3, #1
   23b4a:	dc00      	bgt.n	23b4e <__aeabi_dsub+0x2da>
   23b4c:	e09f      	b.n	23c8e <__aeabi_dsub+0x41a>
   23b4e:	4b1a      	ldr	r3, [pc, #104]	; (23bb8 <__aeabi_dsub+0x344>)
   23b50:	459c      	cmp	ip, r3
   23b52:	d100      	bne.n	23b56 <__aeabi_dsub+0x2e2>
   23b54:	e0c5      	b.n	23ce2 <__aeabi_dsub+0x46e>
   23b56:	4452      	add	r2, sl
   23b58:	4552      	cmp	r2, sl
   23b5a:	4180      	sbcs	r0, r0
   23b5c:	1864      	adds	r4, r4, r1
   23b5e:	4240      	negs	r0, r0
   23b60:	1824      	adds	r4, r4, r0
   23b62:	07e7      	lsls	r7, r4, #31
   23b64:	0852      	lsrs	r2, r2, #1
   23b66:	4317      	orrs	r7, r2
   23b68:	0864      	lsrs	r4, r4, #1
   23b6a:	4666      	mov	r6, ip
   23b6c:	e708      	b.n	23980 <__aeabi_dsub+0x10c>
   23b6e:	4812      	ldr	r0, [pc, #72]	; (23bb8 <__aeabi_dsub+0x344>)
   23b70:	4285      	cmp	r5, r0
   23b72:	d100      	bne.n	23b76 <__aeabi_dsub+0x302>
   23b74:	e085      	b.n	23c82 <__aeabi_dsub+0x40e>
   23b76:	001d      	movs	r5, r3
   23b78:	e6bc      	b.n	238f4 <__aeabi_dsub+0x80>
   23b7a:	0029      	movs	r1, r5
   23b7c:	3e1f      	subs	r6, #31
   23b7e:	40f1      	lsrs	r1, r6
   23b80:	2b20      	cmp	r3, #32
   23b82:	d100      	bne.n	23b86 <__aeabi_dsub+0x312>
   23b84:	e07f      	b.n	23c86 <__aeabi_dsub+0x412>
   23b86:	2240      	movs	r2, #64	; 0x40
   23b88:	1ad3      	subs	r3, r2, r3
   23b8a:	409d      	lsls	r5, r3
   23b8c:	432f      	orrs	r7, r5
   23b8e:	1e7d      	subs	r5, r7, #1
   23b90:	41af      	sbcs	r7, r5
   23b92:	2400      	movs	r4, #0
   23b94:	430f      	orrs	r7, r1
   23b96:	2600      	movs	r6, #0
   23b98:	e78e      	b.n	23ab8 <__aeabi_dsub+0x244>
   23b9a:	002b      	movs	r3, r5
   23b9c:	000f      	movs	r7, r1
   23b9e:	3b20      	subs	r3, #32
   23ba0:	40df      	lsrs	r7, r3
   23ba2:	2d20      	cmp	r5, #32
   23ba4:	d071      	beq.n	23c8a <__aeabi_dsub+0x416>
   23ba6:	2340      	movs	r3, #64	; 0x40
   23ba8:	1b5d      	subs	r5, r3, r5
   23baa:	40a9      	lsls	r1, r5
   23bac:	430a      	orrs	r2, r1
   23bae:	1e51      	subs	r1, r2, #1
   23bb0:	418a      	sbcs	r2, r1
   23bb2:	2100      	movs	r1, #0
   23bb4:	4317      	orrs	r7, r2
   23bb6:	e6af      	b.n	23918 <__aeabi_dsub+0xa4>
   23bb8:	000007ff 	.word	0x000007ff
   23bbc:	ff7fffff 	.word	0xff7fffff
   23bc0:	800fffff 	.word	0x800fffff
   23bc4:	2e00      	cmp	r6, #0
   23bc6:	d03e      	beq.n	23c46 <__aeabi_dsub+0x3d2>
   23bc8:	4eb3      	ldr	r6, [pc, #716]	; (23e98 <__aeabi_dsub+0x624>)
   23bca:	45b4      	cmp	ip, r6
   23bcc:	d045      	beq.n	23c5a <__aeabi_dsub+0x3e6>
   23bce:	2680      	movs	r6, #128	; 0x80
   23bd0:	0436      	lsls	r6, r6, #16
   23bd2:	426d      	negs	r5, r5
   23bd4:	4334      	orrs	r4, r6
   23bd6:	2d38      	cmp	r5, #56	; 0x38
   23bd8:	dd00      	ble.n	23bdc <__aeabi_dsub+0x368>
   23bda:	e0a8      	b.n	23d2e <__aeabi_dsub+0x4ba>
   23bdc:	2d1f      	cmp	r5, #31
   23bde:	dd00      	ble.n	23be2 <__aeabi_dsub+0x36e>
   23be0:	e11f      	b.n	23e22 <__aeabi_dsub+0x5ae>
   23be2:	2620      	movs	r6, #32
   23be4:	0027      	movs	r7, r4
   23be6:	4650      	mov	r0, sl
   23be8:	1b76      	subs	r6, r6, r5
   23bea:	40b7      	lsls	r7, r6
   23bec:	40e8      	lsrs	r0, r5
   23bee:	4307      	orrs	r7, r0
   23bf0:	4650      	mov	r0, sl
   23bf2:	40b0      	lsls	r0, r6
   23bf4:	1e46      	subs	r6, r0, #1
   23bf6:	41b0      	sbcs	r0, r6
   23bf8:	40ec      	lsrs	r4, r5
   23bfa:	4338      	orrs	r0, r7
   23bfc:	1a17      	subs	r7, r2, r0
   23bfe:	42ba      	cmp	r2, r7
   23c00:	4192      	sbcs	r2, r2
   23c02:	1b0c      	subs	r4, r1, r4
   23c04:	4252      	negs	r2, r2
   23c06:	1aa4      	subs	r4, r4, r2
   23c08:	4666      	mov	r6, ip
   23c0a:	4698      	mov	r8, r3
   23c0c:	e68b      	b.n	23926 <__aeabi_dsub+0xb2>
   23c0e:	4664      	mov	r4, ip
   23c10:	4667      	mov	r7, ip
   23c12:	432c      	orrs	r4, r5
   23c14:	d000      	beq.n	23c18 <__aeabi_dsub+0x3a4>
   23c16:	e68b      	b.n	23930 <__aeabi_dsub+0xbc>
   23c18:	2500      	movs	r5, #0
   23c1a:	2600      	movs	r6, #0
   23c1c:	2700      	movs	r7, #0
   23c1e:	e6ea      	b.n	239f6 <__aeabi_dsub+0x182>
   23c20:	001e      	movs	r6, r3
   23c22:	e6ad      	b.n	23980 <__aeabi_dsub+0x10c>
   23c24:	2b1f      	cmp	r3, #31
   23c26:	dc60      	bgt.n	23cea <__aeabi_dsub+0x476>
   23c28:	2720      	movs	r7, #32
   23c2a:	1af8      	subs	r0, r7, r3
   23c2c:	000f      	movs	r7, r1
   23c2e:	4684      	mov	ip, r0
   23c30:	4087      	lsls	r7, r0
   23c32:	0010      	movs	r0, r2
   23c34:	40d8      	lsrs	r0, r3
   23c36:	4307      	orrs	r7, r0
   23c38:	4660      	mov	r0, ip
   23c3a:	4082      	lsls	r2, r0
   23c3c:	1e50      	subs	r0, r2, #1
   23c3e:	4182      	sbcs	r2, r0
   23c40:	40d9      	lsrs	r1, r3
   23c42:	4317      	orrs	r7, r2
   23c44:	e6f5      	b.n	23a32 <__aeabi_dsub+0x1be>
   23c46:	0026      	movs	r6, r4
   23c48:	4650      	mov	r0, sl
   23c4a:	4306      	orrs	r6, r0
   23c4c:	d005      	beq.n	23c5a <__aeabi_dsub+0x3e6>
   23c4e:	43ed      	mvns	r5, r5
   23c50:	2d00      	cmp	r5, #0
   23c52:	d0d3      	beq.n	23bfc <__aeabi_dsub+0x388>
   23c54:	4e90      	ldr	r6, [pc, #576]	; (23e98 <__aeabi_dsub+0x624>)
   23c56:	45b4      	cmp	ip, r6
   23c58:	d1bd      	bne.n	23bd6 <__aeabi_dsub+0x362>
   23c5a:	000c      	movs	r4, r1
   23c5c:	0017      	movs	r7, r2
   23c5e:	4666      	mov	r6, ip
   23c60:	4698      	mov	r8, r3
   23c62:	e68d      	b.n	23980 <__aeabi_dsub+0x10c>
   23c64:	488c      	ldr	r0, [pc, #560]	; (23e98 <__aeabi_dsub+0x624>)
   23c66:	4283      	cmp	r3, r0
   23c68:	d00b      	beq.n	23c82 <__aeabi_dsub+0x40e>
   23c6a:	4663      	mov	r3, ip
   23c6c:	e6d9      	b.n	23a22 <__aeabi_dsub+0x1ae>
   23c6e:	2d00      	cmp	r5, #0
   23c70:	d000      	beq.n	23c74 <__aeabi_dsub+0x400>
   23c72:	e096      	b.n	23da2 <__aeabi_dsub+0x52e>
   23c74:	0008      	movs	r0, r1
   23c76:	4310      	orrs	r0, r2
   23c78:	d100      	bne.n	23c7c <__aeabi_dsub+0x408>
   23c7a:	e0e2      	b.n	23e42 <__aeabi_dsub+0x5ce>
   23c7c:	000c      	movs	r4, r1
   23c7e:	0017      	movs	r7, r2
   23c80:	4698      	mov	r8, r3
   23c82:	4e85      	ldr	r6, [pc, #532]	; (23e98 <__aeabi_dsub+0x624>)
   23c84:	e67c      	b.n	23980 <__aeabi_dsub+0x10c>
   23c86:	2500      	movs	r5, #0
   23c88:	e780      	b.n	23b8c <__aeabi_dsub+0x318>
   23c8a:	2100      	movs	r1, #0
   23c8c:	e78e      	b.n	23bac <__aeabi_dsub+0x338>
   23c8e:	0023      	movs	r3, r4
   23c90:	4650      	mov	r0, sl
   23c92:	4303      	orrs	r3, r0
   23c94:	2e00      	cmp	r6, #0
   23c96:	d000      	beq.n	23c9a <__aeabi_dsub+0x426>
   23c98:	e0a8      	b.n	23dec <__aeabi_dsub+0x578>
   23c9a:	2b00      	cmp	r3, #0
   23c9c:	d100      	bne.n	23ca0 <__aeabi_dsub+0x42c>
   23c9e:	e0de      	b.n	23e5e <__aeabi_dsub+0x5ea>
   23ca0:	000b      	movs	r3, r1
   23ca2:	4313      	orrs	r3, r2
   23ca4:	d100      	bne.n	23ca8 <__aeabi_dsub+0x434>
   23ca6:	e66b      	b.n	23980 <__aeabi_dsub+0x10c>
   23ca8:	4452      	add	r2, sl
   23caa:	4552      	cmp	r2, sl
   23cac:	4180      	sbcs	r0, r0
   23cae:	1864      	adds	r4, r4, r1
   23cb0:	4240      	negs	r0, r0
   23cb2:	1824      	adds	r4, r4, r0
   23cb4:	0017      	movs	r7, r2
   23cb6:	0223      	lsls	r3, r4, #8
   23cb8:	d400      	bmi.n	23cbc <__aeabi_dsub+0x448>
   23cba:	e6fd      	b.n	23ab8 <__aeabi_dsub+0x244>
   23cbc:	4b77      	ldr	r3, [pc, #476]	; (23e9c <__aeabi_dsub+0x628>)
   23cbe:	4666      	mov	r6, ip
   23cc0:	401c      	ands	r4, r3
   23cc2:	e65d      	b.n	23980 <__aeabi_dsub+0x10c>
   23cc4:	0025      	movs	r5, r4
   23cc6:	4650      	mov	r0, sl
   23cc8:	4305      	orrs	r5, r0
   23cca:	2e00      	cmp	r6, #0
   23ccc:	d1cf      	bne.n	23c6e <__aeabi_dsub+0x3fa>
   23cce:	2d00      	cmp	r5, #0
   23cd0:	d14f      	bne.n	23d72 <__aeabi_dsub+0x4fe>
   23cd2:	000c      	movs	r4, r1
   23cd4:	4314      	orrs	r4, r2
   23cd6:	d100      	bne.n	23cda <__aeabi_dsub+0x466>
   23cd8:	e0a0      	b.n	23e1c <__aeabi_dsub+0x5a8>
   23cda:	000c      	movs	r4, r1
   23cdc:	0017      	movs	r7, r2
   23cde:	4698      	mov	r8, r3
   23ce0:	e64e      	b.n	23980 <__aeabi_dsub+0x10c>
   23ce2:	4666      	mov	r6, ip
   23ce4:	2400      	movs	r4, #0
   23ce6:	2700      	movs	r7, #0
   23ce8:	e685      	b.n	239f6 <__aeabi_dsub+0x182>
   23cea:	001f      	movs	r7, r3
   23cec:	0008      	movs	r0, r1
   23cee:	3f20      	subs	r7, #32
   23cf0:	40f8      	lsrs	r0, r7
   23cf2:	0007      	movs	r7, r0
   23cf4:	2b20      	cmp	r3, #32
   23cf6:	d100      	bne.n	23cfa <__aeabi_dsub+0x486>
   23cf8:	e08e      	b.n	23e18 <__aeabi_dsub+0x5a4>
   23cfa:	2040      	movs	r0, #64	; 0x40
   23cfc:	1ac3      	subs	r3, r0, r3
   23cfe:	4099      	lsls	r1, r3
   23d00:	430a      	orrs	r2, r1
   23d02:	1e51      	subs	r1, r2, #1
   23d04:	418a      	sbcs	r2, r1
   23d06:	2100      	movs	r1, #0
   23d08:	4317      	orrs	r7, r2
   23d0a:	e692      	b.n	23a32 <__aeabi_dsub+0x1be>
   23d0c:	2e00      	cmp	r6, #0
   23d0e:	d114      	bne.n	23d3a <__aeabi_dsub+0x4c6>
   23d10:	0026      	movs	r6, r4
   23d12:	4650      	mov	r0, sl
   23d14:	4306      	orrs	r6, r0
   23d16:	d062      	beq.n	23dde <__aeabi_dsub+0x56a>
   23d18:	43db      	mvns	r3, r3
   23d1a:	2b00      	cmp	r3, #0
   23d1c:	d15c      	bne.n	23dd8 <__aeabi_dsub+0x564>
   23d1e:	1887      	adds	r7, r0, r2
   23d20:	4297      	cmp	r7, r2
   23d22:	4192      	sbcs	r2, r2
   23d24:	1864      	adds	r4, r4, r1
   23d26:	4252      	negs	r2, r2
   23d28:	18a4      	adds	r4, r4, r2
   23d2a:	4666      	mov	r6, ip
   23d2c:	e687      	b.n	23a3e <__aeabi_dsub+0x1ca>
   23d2e:	4650      	mov	r0, sl
   23d30:	4320      	orrs	r0, r4
   23d32:	1e44      	subs	r4, r0, #1
   23d34:	41a0      	sbcs	r0, r4
   23d36:	2400      	movs	r4, #0
   23d38:	e760      	b.n	23bfc <__aeabi_dsub+0x388>
   23d3a:	4e57      	ldr	r6, [pc, #348]	; (23e98 <__aeabi_dsub+0x624>)
   23d3c:	45b4      	cmp	ip, r6
   23d3e:	d04e      	beq.n	23dde <__aeabi_dsub+0x56a>
   23d40:	2680      	movs	r6, #128	; 0x80
   23d42:	0436      	lsls	r6, r6, #16
   23d44:	425b      	negs	r3, r3
   23d46:	4334      	orrs	r4, r6
   23d48:	2b38      	cmp	r3, #56	; 0x38
   23d4a:	dd00      	ble.n	23d4e <__aeabi_dsub+0x4da>
   23d4c:	e07f      	b.n	23e4e <__aeabi_dsub+0x5da>
   23d4e:	2b1f      	cmp	r3, #31
   23d50:	dd00      	ble.n	23d54 <__aeabi_dsub+0x4e0>
   23d52:	e08b      	b.n	23e6c <__aeabi_dsub+0x5f8>
   23d54:	2620      	movs	r6, #32
   23d56:	0027      	movs	r7, r4
   23d58:	4650      	mov	r0, sl
   23d5a:	1af6      	subs	r6, r6, r3
   23d5c:	40b7      	lsls	r7, r6
   23d5e:	40d8      	lsrs	r0, r3
   23d60:	4307      	orrs	r7, r0
   23d62:	4650      	mov	r0, sl
   23d64:	40b0      	lsls	r0, r6
   23d66:	1e46      	subs	r6, r0, #1
   23d68:	41b0      	sbcs	r0, r6
   23d6a:	4307      	orrs	r7, r0
   23d6c:	40dc      	lsrs	r4, r3
   23d6e:	18bf      	adds	r7, r7, r2
   23d70:	e7d6      	b.n	23d20 <__aeabi_dsub+0x4ac>
   23d72:	000d      	movs	r5, r1
   23d74:	4315      	orrs	r5, r2
   23d76:	d100      	bne.n	23d7a <__aeabi_dsub+0x506>
   23d78:	e602      	b.n	23980 <__aeabi_dsub+0x10c>
   23d7a:	4650      	mov	r0, sl
   23d7c:	1a80      	subs	r0, r0, r2
   23d7e:	4582      	cmp	sl, r0
   23d80:	41bf      	sbcs	r7, r7
   23d82:	1a65      	subs	r5, r4, r1
   23d84:	427f      	negs	r7, r7
   23d86:	1bed      	subs	r5, r5, r7
   23d88:	4684      	mov	ip, r0
   23d8a:	0228      	lsls	r0, r5, #8
   23d8c:	d400      	bmi.n	23d90 <__aeabi_dsub+0x51c>
   23d8e:	e68d      	b.n	23aac <__aeabi_dsub+0x238>
   23d90:	4650      	mov	r0, sl
   23d92:	1a17      	subs	r7, r2, r0
   23d94:	42ba      	cmp	r2, r7
   23d96:	4192      	sbcs	r2, r2
   23d98:	1b0c      	subs	r4, r1, r4
   23d9a:	4252      	negs	r2, r2
   23d9c:	1aa4      	subs	r4, r4, r2
   23d9e:	4698      	mov	r8, r3
   23da0:	e5ee      	b.n	23980 <__aeabi_dsub+0x10c>
   23da2:	000d      	movs	r5, r1
   23da4:	4315      	orrs	r5, r2
   23da6:	d100      	bne.n	23daa <__aeabi_dsub+0x536>
   23da8:	e76b      	b.n	23c82 <__aeabi_dsub+0x40e>
   23daa:	4650      	mov	r0, sl
   23dac:	0767      	lsls	r7, r4, #29
   23dae:	08c0      	lsrs	r0, r0, #3
   23db0:	4307      	orrs	r7, r0
   23db2:	2080      	movs	r0, #128	; 0x80
   23db4:	08e4      	lsrs	r4, r4, #3
   23db6:	0300      	lsls	r0, r0, #12
   23db8:	4204      	tst	r4, r0
   23dba:	d007      	beq.n	23dcc <__aeabi_dsub+0x558>
   23dbc:	08cd      	lsrs	r5, r1, #3
   23dbe:	4205      	tst	r5, r0
   23dc0:	d104      	bne.n	23dcc <__aeabi_dsub+0x558>
   23dc2:	002c      	movs	r4, r5
   23dc4:	4698      	mov	r8, r3
   23dc6:	08d7      	lsrs	r7, r2, #3
   23dc8:	0749      	lsls	r1, r1, #29
   23dca:	430f      	orrs	r7, r1
   23dcc:	0f7b      	lsrs	r3, r7, #29
   23dce:	00e4      	lsls	r4, r4, #3
   23dd0:	431c      	orrs	r4, r3
   23dd2:	00ff      	lsls	r7, r7, #3
   23dd4:	4e30      	ldr	r6, [pc, #192]	; (23e98 <__aeabi_dsub+0x624>)
   23dd6:	e5d3      	b.n	23980 <__aeabi_dsub+0x10c>
   23dd8:	4e2f      	ldr	r6, [pc, #188]	; (23e98 <__aeabi_dsub+0x624>)
   23dda:	45b4      	cmp	ip, r6
   23ddc:	d1b4      	bne.n	23d48 <__aeabi_dsub+0x4d4>
   23dde:	000c      	movs	r4, r1
   23de0:	0017      	movs	r7, r2
   23de2:	4666      	mov	r6, ip
   23de4:	e5cc      	b.n	23980 <__aeabi_dsub+0x10c>
   23de6:	2700      	movs	r7, #0
   23de8:	2400      	movs	r4, #0
   23dea:	e5e8      	b.n	239be <__aeabi_dsub+0x14a>
   23dec:	2b00      	cmp	r3, #0
   23dee:	d039      	beq.n	23e64 <__aeabi_dsub+0x5f0>
   23df0:	000b      	movs	r3, r1
   23df2:	4313      	orrs	r3, r2
   23df4:	d100      	bne.n	23df8 <__aeabi_dsub+0x584>
   23df6:	e744      	b.n	23c82 <__aeabi_dsub+0x40e>
   23df8:	08c0      	lsrs	r0, r0, #3
   23dfa:	0767      	lsls	r7, r4, #29
   23dfc:	4307      	orrs	r7, r0
   23dfe:	2080      	movs	r0, #128	; 0x80
   23e00:	08e4      	lsrs	r4, r4, #3
   23e02:	0300      	lsls	r0, r0, #12
   23e04:	4204      	tst	r4, r0
   23e06:	d0e1      	beq.n	23dcc <__aeabi_dsub+0x558>
   23e08:	08cb      	lsrs	r3, r1, #3
   23e0a:	4203      	tst	r3, r0
   23e0c:	d1de      	bne.n	23dcc <__aeabi_dsub+0x558>
   23e0e:	08d7      	lsrs	r7, r2, #3
   23e10:	0749      	lsls	r1, r1, #29
   23e12:	430f      	orrs	r7, r1
   23e14:	001c      	movs	r4, r3
   23e16:	e7d9      	b.n	23dcc <__aeabi_dsub+0x558>
   23e18:	2100      	movs	r1, #0
   23e1a:	e771      	b.n	23d00 <__aeabi_dsub+0x48c>
   23e1c:	2500      	movs	r5, #0
   23e1e:	2700      	movs	r7, #0
   23e20:	e5e9      	b.n	239f6 <__aeabi_dsub+0x182>
   23e22:	002e      	movs	r6, r5
   23e24:	0027      	movs	r7, r4
   23e26:	3e20      	subs	r6, #32
   23e28:	40f7      	lsrs	r7, r6
   23e2a:	2d20      	cmp	r5, #32
   23e2c:	d02f      	beq.n	23e8e <__aeabi_dsub+0x61a>
   23e2e:	2640      	movs	r6, #64	; 0x40
   23e30:	1b75      	subs	r5, r6, r5
   23e32:	40ac      	lsls	r4, r5
   23e34:	4650      	mov	r0, sl
   23e36:	4320      	orrs	r0, r4
   23e38:	1e44      	subs	r4, r0, #1
   23e3a:	41a0      	sbcs	r0, r4
   23e3c:	2400      	movs	r4, #0
   23e3e:	4338      	orrs	r0, r7
   23e40:	e6dc      	b.n	23bfc <__aeabi_dsub+0x388>
   23e42:	2480      	movs	r4, #128	; 0x80
   23e44:	2500      	movs	r5, #0
   23e46:	0324      	lsls	r4, r4, #12
   23e48:	4e13      	ldr	r6, [pc, #76]	; (23e98 <__aeabi_dsub+0x624>)
   23e4a:	2700      	movs	r7, #0
   23e4c:	e5d3      	b.n	239f6 <__aeabi_dsub+0x182>
   23e4e:	4650      	mov	r0, sl
   23e50:	4320      	orrs	r0, r4
   23e52:	0007      	movs	r7, r0
   23e54:	1e78      	subs	r0, r7, #1
   23e56:	4187      	sbcs	r7, r0
   23e58:	2400      	movs	r4, #0
   23e5a:	18bf      	adds	r7, r7, r2
   23e5c:	e760      	b.n	23d20 <__aeabi_dsub+0x4ac>
   23e5e:	000c      	movs	r4, r1
   23e60:	0017      	movs	r7, r2
   23e62:	e58d      	b.n	23980 <__aeabi_dsub+0x10c>
   23e64:	000c      	movs	r4, r1
   23e66:	0017      	movs	r7, r2
   23e68:	4e0b      	ldr	r6, [pc, #44]	; (23e98 <__aeabi_dsub+0x624>)
   23e6a:	e589      	b.n	23980 <__aeabi_dsub+0x10c>
   23e6c:	001e      	movs	r6, r3
   23e6e:	0027      	movs	r7, r4
   23e70:	3e20      	subs	r6, #32
   23e72:	40f7      	lsrs	r7, r6
   23e74:	2b20      	cmp	r3, #32
   23e76:	d00c      	beq.n	23e92 <__aeabi_dsub+0x61e>
   23e78:	2640      	movs	r6, #64	; 0x40
   23e7a:	1af3      	subs	r3, r6, r3
   23e7c:	409c      	lsls	r4, r3
   23e7e:	4650      	mov	r0, sl
   23e80:	4320      	orrs	r0, r4
   23e82:	1e44      	subs	r4, r0, #1
   23e84:	41a0      	sbcs	r0, r4
   23e86:	4307      	orrs	r7, r0
   23e88:	2400      	movs	r4, #0
   23e8a:	18bf      	adds	r7, r7, r2
   23e8c:	e748      	b.n	23d20 <__aeabi_dsub+0x4ac>
   23e8e:	2400      	movs	r4, #0
   23e90:	e7d0      	b.n	23e34 <__aeabi_dsub+0x5c0>
   23e92:	2400      	movs	r4, #0
   23e94:	e7f3      	b.n	23e7e <__aeabi_dsub+0x60a>
   23e96:	46c0      	nop			; (mov r8, r8)
   23e98:	000007ff 	.word	0x000007ff
   23e9c:	ff7fffff 	.word	0xff7fffff

00023ea0 <__aeabi_d2iz>:
   23ea0:	b530      	push	{r4, r5, lr}
   23ea2:	4d13      	ldr	r5, [pc, #76]	; (23ef0 <__aeabi_d2iz+0x50>)
   23ea4:	030a      	lsls	r2, r1, #12
   23ea6:	004b      	lsls	r3, r1, #1
   23ea8:	0b12      	lsrs	r2, r2, #12
   23eaa:	0d5b      	lsrs	r3, r3, #21
   23eac:	0fc9      	lsrs	r1, r1, #31
   23eae:	2400      	movs	r4, #0
   23eb0:	42ab      	cmp	r3, r5
   23eb2:	dd10      	ble.n	23ed6 <__aeabi_d2iz+0x36>
   23eb4:	4c0f      	ldr	r4, [pc, #60]	; (23ef4 <__aeabi_d2iz+0x54>)
   23eb6:	42a3      	cmp	r3, r4
   23eb8:	dc0f      	bgt.n	23eda <__aeabi_d2iz+0x3a>
   23eba:	2480      	movs	r4, #128	; 0x80
   23ebc:	4d0e      	ldr	r5, [pc, #56]	; (23ef8 <__aeabi_d2iz+0x58>)
   23ebe:	0364      	lsls	r4, r4, #13
   23ec0:	4322      	orrs	r2, r4
   23ec2:	1aed      	subs	r5, r5, r3
   23ec4:	2d1f      	cmp	r5, #31
   23ec6:	dd0b      	ble.n	23ee0 <__aeabi_d2iz+0x40>
   23ec8:	480c      	ldr	r0, [pc, #48]	; (23efc <__aeabi_d2iz+0x5c>)
   23eca:	1ac3      	subs	r3, r0, r3
   23ecc:	40da      	lsrs	r2, r3
   23ece:	4254      	negs	r4, r2
   23ed0:	2900      	cmp	r1, #0
   23ed2:	d100      	bne.n	23ed6 <__aeabi_d2iz+0x36>
   23ed4:	0014      	movs	r4, r2
   23ed6:	0020      	movs	r0, r4
   23ed8:	bd30      	pop	{r4, r5, pc}
   23eda:	4b09      	ldr	r3, [pc, #36]	; (23f00 <__aeabi_d2iz+0x60>)
   23edc:	18cc      	adds	r4, r1, r3
   23ede:	e7fa      	b.n	23ed6 <__aeabi_d2iz+0x36>
   23ee0:	4c08      	ldr	r4, [pc, #32]	; (23f04 <__aeabi_d2iz+0x64>)
   23ee2:	40e8      	lsrs	r0, r5
   23ee4:	46a4      	mov	ip, r4
   23ee6:	4463      	add	r3, ip
   23ee8:	409a      	lsls	r2, r3
   23eea:	4302      	orrs	r2, r0
   23eec:	e7ef      	b.n	23ece <__aeabi_d2iz+0x2e>
   23eee:	46c0      	nop			; (mov r8, r8)
   23ef0:	000003fe 	.word	0x000003fe
   23ef4:	0000041d 	.word	0x0000041d
   23ef8:	00000433 	.word	0x00000433
   23efc:	00000413 	.word	0x00000413
   23f00:	7fffffff 	.word	0x7fffffff
   23f04:	fffffbed 	.word	0xfffffbed

00023f08 <__aeabi_i2d>:
   23f08:	b570      	push	{r4, r5, r6, lr}
   23f0a:	2800      	cmp	r0, #0
   23f0c:	d030      	beq.n	23f70 <__aeabi_i2d+0x68>
   23f0e:	17c3      	asrs	r3, r0, #31
   23f10:	18c4      	adds	r4, r0, r3
   23f12:	405c      	eors	r4, r3
   23f14:	0fc5      	lsrs	r5, r0, #31
   23f16:	0020      	movs	r0, r4
   23f18:	f000 f8c2 	bl	240a0 <__clzsi2>
   23f1c:	4b17      	ldr	r3, [pc, #92]	; (23f7c <__aeabi_i2d+0x74>)
   23f1e:	4a18      	ldr	r2, [pc, #96]	; (23f80 <__aeabi_i2d+0x78>)
   23f20:	1a1b      	subs	r3, r3, r0
   23f22:	1ad2      	subs	r2, r2, r3
   23f24:	2a1f      	cmp	r2, #31
   23f26:	dd18      	ble.n	23f5a <__aeabi_i2d+0x52>
   23f28:	4a16      	ldr	r2, [pc, #88]	; (23f84 <__aeabi_i2d+0x7c>)
   23f2a:	1ad2      	subs	r2, r2, r3
   23f2c:	4094      	lsls	r4, r2
   23f2e:	2200      	movs	r2, #0
   23f30:	0324      	lsls	r4, r4, #12
   23f32:	055b      	lsls	r3, r3, #21
   23f34:	0b24      	lsrs	r4, r4, #12
   23f36:	0d5b      	lsrs	r3, r3, #21
   23f38:	2100      	movs	r1, #0
   23f3a:	0010      	movs	r0, r2
   23f3c:	0324      	lsls	r4, r4, #12
   23f3e:	0d0a      	lsrs	r2, r1, #20
   23f40:	0b24      	lsrs	r4, r4, #12
   23f42:	0512      	lsls	r2, r2, #20
   23f44:	4322      	orrs	r2, r4
   23f46:	4c10      	ldr	r4, [pc, #64]	; (23f88 <__aeabi_i2d+0x80>)
   23f48:	051b      	lsls	r3, r3, #20
   23f4a:	4022      	ands	r2, r4
   23f4c:	4313      	orrs	r3, r2
   23f4e:	005b      	lsls	r3, r3, #1
   23f50:	07ed      	lsls	r5, r5, #31
   23f52:	085b      	lsrs	r3, r3, #1
   23f54:	432b      	orrs	r3, r5
   23f56:	0019      	movs	r1, r3
   23f58:	bd70      	pop	{r4, r5, r6, pc}
   23f5a:	0021      	movs	r1, r4
   23f5c:	4091      	lsls	r1, r2
   23f5e:	000a      	movs	r2, r1
   23f60:	210b      	movs	r1, #11
   23f62:	1a08      	subs	r0, r1, r0
   23f64:	40c4      	lsrs	r4, r0
   23f66:	055b      	lsls	r3, r3, #21
   23f68:	0324      	lsls	r4, r4, #12
   23f6a:	0b24      	lsrs	r4, r4, #12
   23f6c:	0d5b      	lsrs	r3, r3, #21
   23f6e:	e7e3      	b.n	23f38 <__aeabi_i2d+0x30>
   23f70:	2500      	movs	r5, #0
   23f72:	2300      	movs	r3, #0
   23f74:	2400      	movs	r4, #0
   23f76:	2200      	movs	r2, #0
   23f78:	e7de      	b.n	23f38 <__aeabi_i2d+0x30>
   23f7a:	46c0      	nop			; (mov r8, r8)
   23f7c:	0000041e 	.word	0x0000041e
   23f80:	00000433 	.word	0x00000433
   23f84:	00000413 	.word	0x00000413
   23f88:	800fffff 	.word	0x800fffff

00023f8c <__aeabi_ui2d>:
   23f8c:	b510      	push	{r4, lr}
   23f8e:	1e04      	subs	r4, r0, #0
   23f90:	d028      	beq.n	23fe4 <__aeabi_ui2d+0x58>
   23f92:	f000 f885 	bl	240a0 <__clzsi2>
   23f96:	4b15      	ldr	r3, [pc, #84]	; (23fec <__aeabi_ui2d+0x60>)
   23f98:	4a15      	ldr	r2, [pc, #84]	; (23ff0 <__aeabi_ui2d+0x64>)
   23f9a:	1a1b      	subs	r3, r3, r0
   23f9c:	1ad2      	subs	r2, r2, r3
   23f9e:	2a1f      	cmp	r2, #31
   23fa0:	dd15      	ble.n	23fce <__aeabi_ui2d+0x42>
   23fa2:	4a14      	ldr	r2, [pc, #80]	; (23ff4 <__aeabi_ui2d+0x68>)
   23fa4:	1ad2      	subs	r2, r2, r3
   23fa6:	4094      	lsls	r4, r2
   23fa8:	2200      	movs	r2, #0
   23faa:	0324      	lsls	r4, r4, #12
   23fac:	055b      	lsls	r3, r3, #21
   23fae:	0b24      	lsrs	r4, r4, #12
   23fb0:	0d5b      	lsrs	r3, r3, #21
   23fb2:	2100      	movs	r1, #0
   23fb4:	0010      	movs	r0, r2
   23fb6:	0324      	lsls	r4, r4, #12
   23fb8:	0d0a      	lsrs	r2, r1, #20
   23fba:	0b24      	lsrs	r4, r4, #12
   23fbc:	0512      	lsls	r2, r2, #20
   23fbe:	4322      	orrs	r2, r4
   23fc0:	4c0d      	ldr	r4, [pc, #52]	; (23ff8 <__aeabi_ui2d+0x6c>)
   23fc2:	051b      	lsls	r3, r3, #20
   23fc4:	4022      	ands	r2, r4
   23fc6:	4313      	orrs	r3, r2
   23fc8:	005b      	lsls	r3, r3, #1
   23fca:	0859      	lsrs	r1, r3, #1
   23fcc:	bd10      	pop	{r4, pc}
   23fce:	0021      	movs	r1, r4
   23fd0:	4091      	lsls	r1, r2
   23fd2:	000a      	movs	r2, r1
   23fd4:	210b      	movs	r1, #11
   23fd6:	1a08      	subs	r0, r1, r0
   23fd8:	40c4      	lsrs	r4, r0
   23fda:	055b      	lsls	r3, r3, #21
   23fdc:	0324      	lsls	r4, r4, #12
   23fde:	0b24      	lsrs	r4, r4, #12
   23fe0:	0d5b      	lsrs	r3, r3, #21
   23fe2:	e7e6      	b.n	23fb2 <__aeabi_ui2d+0x26>
   23fe4:	2300      	movs	r3, #0
   23fe6:	2400      	movs	r4, #0
   23fe8:	2200      	movs	r2, #0
   23fea:	e7e2      	b.n	23fb2 <__aeabi_ui2d+0x26>
   23fec:	0000041e 	.word	0x0000041e
   23ff0:	00000433 	.word	0x00000433
   23ff4:	00000413 	.word	0x00000413
   23ff8:	800fffff 	.word	0x800fffff

00023ffc <__aeabi_f2d>:
   23ffc:	0041      	lsls	r1, r0, #1
   23ffe:	0e09      	lsrs	r1, r1, #24
   24000:	1c4b      	adds	r3, r1, #1
   24002:	b570      	push	{r4, r5, r6, lr}
   24004:	b2db      	uxtb	r3, r3
   24006:	0246      	lsls	r6, r0, #9
   24008:	0a75      	lsrs	r5, r6, #9
   2400a:	0fc4      	lsrs	r4, r0, #31
   2400c:	2b01      	cmp	r3, #1
   2400e:	dd14      	ble.n	2403a <__aeabi_f2d+0x3e>
   24010:	23e0      	movs	r3, #224	; 0xe0
   24012:	009b      	lsls	r3, r3, #2
   24014:	076d      	lsls	r5, r5, #29
   24016:	0b36      	lsrs	r6, r6, #12
   24018:	18cb      	adds	r3, r1, r3
   2401a:	2100      	movs	r1, #0
   2401c:	0d0a      	lsrs	r2, r1, #20
   2401e:	0028      	movs	r0, r5
   24020:	0512      	lsls	r2, r2, #20
   24022:	4d1c      	ldr	r5, [pc, #112]	; (24094 <__aeabi_f2d+0x98>)
   24024:	4332      	orrs	r2, r6
   24026:	055b      	lsls	r3, r3, #21
   24028:	402a      	ands	r2, r5
   2402a:	085b      	lsrs	r3, r3, #1
   2402c:	4313      	orrs	r3, r2
   2402e:	005b      	lsls	r3, r3, #1
   24030:	07e4      	lsls	r4, r4, #31
   24032:	085b      	lsrs	r3, r3, #1
   24034:	4323      	orrs	r3, r4
   24036:	0019      	movs	r1, r3
   24038:	bd70      	pop	{r4, r5, r6, pc}
   2403a:	2900      	cmp	r1, #0
   2403c:	d114      	bne.n	24068 <__aeabi_f2d+0x6c>
   2403e:	2d00      	cmp	r5, #0
   24040:	d01e      	beq.n	24080 <__aeabi_f2d+0x84>
   24042:	0028      	movs	r0, r5
   24044:	f000 f82c 	bl	240a0 <__clzsi2>
   24048:	280a      	cmp	r0, #10
   2404a:	dc1c      	bgt.n	24086 <__aeabi_f2d+0x8a>
   2404c:	230b      	movs	r3, #11
   2404e:	002a      	movs	r2, r5
   24050:	1a1b      	subs	r3, r3, r0
   24052:	40da      	lsrs	r2, r3
   24054:	0003      	movs	r3, r0
   24056:	3315      	adds	r3, #21
   24058:	409d      	lsls	r5, r3
   2405a:	4b0f      	ldr	r3, [pc, #60]	; (24098 <__aeabi_f2d+0x9c>)
   2405c:	0312      	lsls	r2, r2, #12
   2405e:	1a1b      	subs	r3, r3, r0
   24060:	055b      	lsls	r3, r3, #21
   24062:	0b16      	lsrs	r6, r2, #12
   24064:	0d5b      	lsrs	r3, r3, #21
   24066:	e7d8      	b.n	2401a <__aeabi_f2d+0x1e>
   24068:	2d00      	cmp	r5, #0
   2406a:	d006      	beq.n	2407a <__aeabi_f2d+0x7e>
   2406c:	0b32      	lsrs	r2, r6, #12
   2406e:	2680      	movs	r6, #128	; 0x80
   24070:	0336      	lsls	r6, r6, #12
   24072:	076d      	lsls	r5, r5, #29
   24074:	4316      	orrs	r6, r2
   24076:	4b09      	ldr	r3, [pc, #36]	; (2409c <__aeabi_f2d+0xa0>)
   24078:	e7cf      	b.n	2401a <__aeabi_f2d+0x1e>
   2407a:	4b08      	ldr	r3, [pc, #32]	; (2409c <__aeabi_f2d+0xa0>)
   2407c:	2600      	movs	r6, #0
   2407e:	e7cc      	b.n	2401a <__aeabi_f2d+0x1e>
   24080:	2300      	movs	r3, #0
   24082:	2600      	movs	r6, #0
   24084:	e7c9      	b.n	2401a <__aeabi_f2d+0x1e>
   24086:	0003      	movs	r3, r0
   24088:	002a      	movs	r2, r5
   2408a:	3b0b      	subs	r3, #11
   2408c:	409a      	lsls	r2, r3
   2408e:	2500      	movs	r5, #0
   24090:	e7e3      	b.n	2405a <__aeabi_f2d+0x5e>
   24092:	46c0      	nop			; (mov r8, r8)
   24094:	800fffff 	.word	0x800fffff
   24098:	00000389 	.word	0x00000389
   2409c:	000007ff 	.word	0x000007ff

000240a0 <__clzsi2>:
   240a0:	211c      	movs	r1, #28
   240a2:	2301      	movs	r3, #1
   240a4:	041b      	lsls	r3, r3, #16
   240a6:	4298      	cmp	r0, r3
   240a8:	d301      	bcc.n	240ae <__clzsi2+0xe>
   240aa:	0c00      	lsrs	r0, r0, #16
   240ac:	3910      	subs	r1, #16
   240ae:	0a1b      	lsrs	r3, r3, #8
   240b0:	4298      	cmp	r0, r3
   240b2:	d301      	bcc.n	240b8 <__clzsi2+0x18>
   240b4:	0a00      	lsrs	r0, r0, #8
   240b6:	3908      	subs	r1, #8
   240b8:	091b      	lsrs	r3, r3, #4
   240ba:	4298      	cmp	r0, r3
   240bc:	d301      	bcc.n	240c2 <__clzsi2+0x22>
   240be:	0900      	lsrs	r0, r0, #4
   240c0:	3904      	subs	r1, #4
   240c2:	a202      	add	r2, pc, #8	; (adr r2, 240cc <__clzsi2+0x2c>)
   240c4:	5c10      	ldrb	r0, [r2, r0]
   240c6:	1840      	adds	r0, r0, r1
   240c8:	4770      	bx	lr
   240ca:	46c0      	nop			; (mov r8, r8)
   240cc:	02020304 	.word	0x02020304
   240d0:	01010101 	.word	0x01010101
	...

000240dc <__clzdi2>:
   240dc:	b510      	push	{r4, lr}
   240de:	2900      	cmp	r1, #0
   240e0:	d103      	bne.n	240ea <__clzdi2+0xe>
   240e2:	f7ff ffdd 	bl	240a0 <__clzsi2>
   240e6:	3020      	adds	r0, #32
   240e8:	e002      	b.n	240f0 <__clzdi2+0x14>
   240ea:	1c08      	adds	r0, r1, #0
   240ec:	f7ff ffd8 	bl	240a0 <__clzsi2>
   240f0:	bd10      	pop	{r4, pc}
   240f2:	46c0      	nop			; (mov r8, r8)

000240f4 <atoi>:
   240f4:	b510      	push	{r4, lr}
   240f6:	220a      	movs	r2, #10
   240f8:	2100      	movs	r1, #0
   240fa:	f000 fb27 	bl	2474c <strtol>
   240fe:	bd10      	pop	{r4, pc}

00024100 <__libc_init_array>:
   24100:	b570      	push	{r4, r5, r6, lr}
   24102:	4e0d      	ldr	r6, [pc, #52]	; (24138 <__libc_init_array+0x38>)
   24104:	4d0d      	ldr	r5, [pc, #52]	; (2413c <__libc_init_array+0x3c>)
   24106:	2400      	movs	r4, #0
   24108:	1bad      	subs	r5, r5, r6
   2410a:	10ad      	asrs	r5, r5, #2
   2410c:	d005      	beq.n	2411a <__libc_init_array+0x1a>
   2410e:	00a3      	lsls	r3, r4, #2
   24110:	58f3      	ldr	r3, [r6, r3]
   24112:	3401      	adds	r4, #1
   24114:	4798      	blx	r3
   24116:	42a5      	cmp	r5, r4
   24118:	d1f9      	bne.n	2410e <__libc_init_array+0xe>
   2411a:	f009 f9dd 	bl	2d4d8 <_init>
   2411e:	4e08      	ldr	r6, [pc, #32]	; (24140 <__libc_init_array+0x40>)
   24120:	4d08      	ldr	r5, [pc, #32]	; (24144 <__libc_init_array+0x44>)
   24122:	2400      	movs	r4, #0
   24124:	1bad      	subs	r5, r5, r6
   24126:	10ad      	asrs	r5, r5, #2
   24128:	d005      	beq.n	24136 <__libc_init_array+0x36>
   2412a:	00a3      	lsls	r3, r4, #2
   2412c:	58f3      	ldr	r3, [r6, r3]
   2412e:	3401      	adds	r4, #1
   24130:	4798      	blx	r3
   24132:	42a5      	cmp	r5, r4
   24134:	d1f9      	bne.n	2412a <__libc_init_array+0x2a>
   24136:	bd70      	pop	{r4, r5, r6, pc}
   24138:	0002d4e4 	.word	0x0002d4e4
   2413c:	0002d4e4 	.word	0x0002d4e4
   24140:	0002d4e4 	.word	0x0002d4e4
   24144:	0002d4ec 	.word	0x0002d4ec

00024148 <memcpy>:
   24148:	b5f0      	push	{r4, r5, r6, r7, lr}
   2414a:	0005      	movs	r5, r0
   2414c:	2a0f      	cmp	r2, #15
   2414e:	d92f      	bls.n	241b0 <memcpy+0x68>
   24150:	000b      	movs	r3, r1
   24152:	4303      	orrs	r3, r0
   24154:	079b      	lsls	r3, r3, #30
   24156:	d134      	bne.n	241c2 <memcpy+0x7a>
   24158:	0016      	movs	r6, r2
   2415a:	000c      	movs	r4, r1
   2415c:	0003      	movs	r3, r0
   2415e:	3e10      	subs	r6, #16
   24160:	0935      	lsrs	r5, r6, #4
   24162:	3501      	adds	r5, #1
   24164:	012d      	lsls	r5, r5, #4
   24166:	1945      	adds	r5, r0, r5
   24168:	6827      	ldr	r7, [r4, #0]
   2416a:	601f      	str	r7, [r3, #0]
   2416c:	6867      	ldr	r7, [r4, #4]
   2416e:	605f      	str	r7, [r3, #4]
   24170:	68a7      	ldr	r7, [r4, #8]
   24172:	609f      	str	r7, [r3, #8]
   24174:	68e7      	ldr	r7, [r4, #12]
   24176:	3410      	adds	r4, #16
   24178:	60df      	str	r7, [r3, #12]
   2417a:	3310      	adds	r3, #16
   2417c:	429d      	cmp	r5, r3
   2417e:	d1f3      	bne.n	24168 <memcpy+0x20>
   24180:	230f      	movs	r3, #15
   24182:	439e      	bics	r6, r3
   24184:	3610      	adds	r6, #16
   24186:	1985      	adds	r5, r0, r6
   24188:	1989      	adds	r1, r1, r6
   2418a:	4013      	ands	r3, r2
   2418c:	2b03      	cmp	r3, #3
   2418e:	d91a      	bls.n	241c6 <memcpy+0x7e>
   24190:	1f1e      	subs	r6, r3, #4
   24192:	2300      	movs	r3, #0
   24194:	08b4      	lsrs	r4, r6, #2
   24196:	3401      	adds	r4, #1
   24198:	00a4      	lsls	r4, r4, #2
   2419a:	58cf      	ldr	r7, [r1, r3]
   2419c:	50ef      	str	r7, [r5, r3]
   2419e:	3304      	adds	r3, #4
   241a0:	42a3      	cmp	r3, r4
   241a2:	d1fa      	bne.n	2419a <memcpy+0x52>
   241a4:	2403      	movs	r4, #3
   241a6:	43a6      	bics	r6, r4
   241a8:	1d33      	adds	r3, r6, #4
   241aa:	4022      	ands	r2, r4
   241ac:	18c9      	adds	r1, r1, r3
   241ae:	18ed      	adds	r5, r5, r3
   241b0:	2a00      	cmp	r2, #0
   241b2:	d005      	beq.n	241c0 <memcpy+0x78>
   241b4:	2300      	movs	r3, #0
   241b6:	5ccc      	ldrb	r4, [r1, r3]
   241b8:	54ec      	strb	r4, [r5, r3]
   241ba:	3301      	adds	r3, #1
   241bc:	4293      	cmp	r3, r2
   241be:	d1fa      	bne.n	241b6 <memcpy+0x6e>
   241c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   241c2:	0005      	movs	r5, r0
   241c4:	e7f6      	b.n	241b4 <memcpy+0x6c>
   241c6:	001a      	movs	r2, r3
   241c8:	e7f2      	b.n	241b0 <memcpy+0x68>
   241ca:	46c0      	nop			; (mov r8, r8)

000241cc <memset>:
   241cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   241ce:	0783      	lsls	r3, r0, #30
   241d0:	d043      	beq.n	2425a <memset+0x8e>
   241d2:	1e54      	subs	r4, r2, #1
   241d4:	2a00      	cmp	r2, #0
   241d6:	d03f      	beq.n	24258 <memset+0x8c>
   241d8:	b2ce      	uxtb	r6, r1
   241da:	0002      	movs	r2, r0
   241dc:	2503      	movs	r5, #3
   241de:	e002      	b.n	241e6 <memset+0x1a>
   241e0:	001a      	movs	r2, r3
   241e2:	3c01      	subs	r4, #1
   241e4:	d338      	bcc.n	24258 <memset+0x8c>
   241e6:	1c53      	adds	r3, r2, #1
   241e8:	7016      	strb	r6, [r2, #0]
   241ea:	422b      	tst	r3, r5
   241ec:	d1f8      	bne.n	241e0 <memset+0x14>
   241ee:	2c03      	cmp	r4, #3
   241f0:	d92a      	bls.n	24248 <memset+0x7c>
   241f2:	22ff      	movs	r2, #255	; 0xff
   241f4:	400a      	ands	r2, r1
   241f6:	0215      	lsls	r5, r2, #8
   241f8:	4315      	orrs	r5, r2
   241fa:	042a      	lsls	r2, r5, #16
   241fc:	4315      	orrs	r5, r2
   241fe:	2c0f      	cmp	r4, #15
   24200:	d914      	bls.n	2422c <memset+0x60>
   24202:	0027      	movs	r7, r4
   24204:	001a      	movs	r2, r3
   24206:	3f10      	subs	r7, #16
   24208:	093e      	lsrs	r6, r7, #4
   2420a:	3601      	adds	r6, #1
   2420c:	0136      	lsls	r6, r6, #4
   2420e:	199e      	adds	r6, r3, r6
   24210:	6015      	str	r5, [r2, #0]
   24212:	6055      	str	r5, [r2, #4]
   24214:	6095      	str	r5, [r2, #8]
   24216:	60d5      	str	r5, [r2, #12]
   24218:	3210      	adds	r2, #16
   2421a:	4296      	cmp	r6, r2
   2421c:	d1f8      	bne.n	24210 <memset+0x44>
   2421e:	220f      	movs	r2, #15
   24220:	4397      	bics	r7, r2
   24222:	3710      	adds	r7, #16
   24224:	19db      	adds	r3, r3, r7
   24226:	4014      	ands	r4, r2
   24228:	2c03      	cmp	r4, #3
   2422a:	d90d      	bls.n	24248 <memset+0x7c>
   2422c:	001a      	movs	r2, r3
   2422e:	1f27      	subs	r7, r4, #4
   24230:	08be      	lsrs	r6, r7, #2
   24232:	3601      	adds	r6, #1
   24234:	00b6      	lsls	r6, r6, #2
   24236:	199e      	adds	r6, r3, r6
   24238:	c220      	stmia	r2!, {r5}
   2423a:	42b2      	cmp	r2, r6
   2423c:	d1fc      	bne.n	24238 <memset+0x6c>
   2423e:	2203      	movs	r2, #3
   24240:	4397      	bics	r7, r2
   24242:	3704      	adds	r7, #4
   24244:	19db      	adds	r3, r3, r7
   24246:	4014      	ands	r4, r2
   24248:	2c00      	cmp	r4, #0
   2424a:	d005      	beq.n	24258 <memset+0x8c>
   2424c:	b2c9      	uxtb	r1, r1
   2424e:	191c      	adds	r4, r3, r4
   24250:	7019      	strb	r1, [r3, #0]
   24252:	3301      	adds	r3, #1
   24254:	429c      	cmp	r4, r3
   24256:	d1fb      	bne.n	24250 <memset+0x84>
   24258:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2425a:	0014      	movs	r4, r2
   2425c:	0003      	movs	r3, r0
   2425e:	e7c6      	b.n	241ee <memset+0x22>

00024260 <printf>:
   24260:	b40f      	push	{r0, r1, r2, r3}
   24262:	b500      	push	{lr}
   24264:	4906      	ldr	r1, [pc, #24]	; (24280 <printf+0x20>)
   24266:	b083      	sub	sp, #12
   24268:	ab04      	add	r3, sp, #16
   2426a:	6808      	ldr	r0, [r1, #0]
   2426c:	cb04      	ldmia	r3!, {r2}
   2426e:	6881      	ldr	r1, [r0, #8]
   24270:	9301      	str	r3, [sp, #4]
   24272:	f001 fd85 	bl	25d80 <_vfprintf_r>
   24276:	b003      	add	sp, #12
   24278:	bc08      	pop	{r3}
   2427a:	b004      	add	sp, #16
   2427c:	4718      	bx	r3
   2427e:	46c0      	nop			; (mov r8, r8)
   24280:	200001e8 	.word	0x200001e8

00024284 <_puts_r>:
   24284:	b530      	push	{r4, r5, lr}
   24286:	0004      	movs	r4, r0
   24288:	b089      	sub	sp, #36	; 0x24
   2428a:	0008      	movs	r0, r1
   2428c:	000d      	movs	r5, r1
   2428e:	f000 f993 	bl	245b8 <strlen>
   24292:	ab04      	add	r3, sp, #16
   24294:	4a21      	ldr	r2, [pc, #132]	; (2431c <_puts_r+0x98>)
   24296:	9301      	str	r3, [sp, #4]
   24298:	2302      	movs	r3, #2
   2429a:	9206      	str	r2, [sp, #24]
   2429c:	2201      	movs	r2, #1
   2429e:	9302      	str	r3, [sp, #8]
   242a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   242a2:	9005      	str	r0, [sp, #20]
   242a4:	3001      	adds	r0, #1
   242a6:	9504      	str	r5, [sp, #16]
   242a8:	9207      	str	r2, [sp, #28]
   242aa:	9003      	str	r0, [sp, #12]
   242ac:	68a5      	ldr	r5, [r4, #8]
   242ae:	2b00      	cmp	r3, #0
   242b0:	d02f      	beq.n	24312 <_puts_r+0x8e>
   242b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   242b4:	07db      	lsls	r3, r3, #31
   242b6:	d424      	bmi.n	24302 <_puts_r+0x7e>
   242b8:	230c      	movs	r3, #12
   242ba:	5eea      	ldrsh	r2, [r5, r3]
   242bc:	b291      	uxth	r1, r2
   242be:	058b      	lsls	r3, r1, #22
   242c0:	d51c      	bpl.n	242fc <_puts_r+0x78>
   242c2:	2380      	movs	r3, #128	; 0x80
   242c4:	019b      	lsls	r3, r3, #6
   242c6:	4219      	tst	r1, r3
   242c8:	d105      	bne.n	242d6 <_puts_r+0x52>
   242ca:	4313      	orrs	r3, r2
   242cc:	81ab      	strh	r3, [r5, #12]
   242ce:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   242d0:	4b13      	ldr	r3, [pc, #76]	; (24320 <_puts_r+0x9c>)
   242d2:	4013      	ands	r3, r2
   242d4:	666b      	str	r3, [r5, #100]	; 0x64
   242d6:	0020      	movs	r0, r4
   242d8:	aa01      	add	r2, sp, #4
   242da:	0029      	movs	r1, r5
   242dc:	f004 fc76 	bl	28bcc <__sfvwrite_r>
   242e0:	1e44      	subs	r4, r0, #1
   242e2:	41a0      	sbcs	r0, r4
   242e4:	4244      	negs	r4, r0
   242e6:	200a      	movs	r0, #10
   242e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   242ea:	4304      	orrs	r4, r0
   242ec:	07db      	lsls	r3, r3, #31
   242ee:	d402      	bmi.n	242f6 <_puts_r+0x72>
   242f0:	89ab      	ldrh	r3, [r5, #12]
   242f2:	059b      	lsls	r3, r3, #22
   242f4:	d509      	bpl.n	2430a <_puts_r+0x86>
   242f6:	0020      	movs	r0, r4
   242f8:	b009      	add	sp, #36	; 0x24
   242fa:	bd30      	pop	{r4, r5, pc}
   242fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   242fe:	f004 fe33 	bl	28f68 <__retarget_lock_acquire_recursive>
   24302:	230c      	movs	r3, #12
   24304:	5eea      	ldrsh	r2, [r5, r3]
   24306:	b291      	uxth	r1, r2
   24308:	e7db      	b.n	242c2 <_puts_r+0x3e>
   2430a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2430c:	f004 fe2e 	bl	28f6c <__retarget_lock_release_recursive>
   24310:	e7f1      	b.n	242f6 <_puts_r+0x72>
   24312:	0020      	movs	r0, r4
   24314:	f004 fad2 	bl	288bc <__sinit>
   24318:	e7cb      	b.n	242b2 <_puts_r+0x2e>
   2431a:	46c0      	nop			; (mov r8, r8)
   2431c:	0002cf64 	.word	0x0002cf64
   24320:	ffffdfff 	.word	0xffffdfff

00024324 <puts>:
   24324:	b510      	push	{r4, lr}
   24326:	4b03      	ldr	r3, [pc, #12]	; (24334 <puts+0x10>)
   24328:	0001      	movs	r1, r0
   2432a:	6818      	ldr	r0, [r3, #0]
   2432c:	f7ff ffaa 	bl	24284 <_puts_r>
   24330:	bd10      	pop	{r4, pc}
   24332:	46c0      	nop			; (mov r8, r8)
   24334:	200001e8 	.word	0x200001e8

00024338 <srand>:
   24338:	2200      	movs	r2, #0
   2433a:	4b03      	ldr	r3, [pc, #12]	; (24348 <srand+0x10>)
   2433c:	681b      	ldr	r3, [r3, #0]
   2433e:	33a8      	adds	r3, #168	; 0xa8
   24340:	6018      	str	r0, [r3, #0]
   24342:	605a      	str	r2, [r3, #4]
   24344:	4770      	bx	lr
   24346:	46c0      	nop			; (mov r8, r8)
   24348:	200001e8 	.word	0x200001e8

0002434c <rand>:
   2434c:	b510      	push	{r4, lr}
   2434e:	4b09      	ldr	r3, [pc, #36]	; (24374 <rand+0x28>)
   24350:	4a09      	ldr	r2, [pc, #36]	; (24378 <rand+0x2c>)
   24352:	681c      	ldr	r4, [r3, #0]
   24354:	4b09      	ldr	r3, [pc, #36]	; (2437c <rand+0x30>)
   24356:	34a8      	adds	r4, #168	; 0xa8
   24358:	6820      	ldr	r0, [r4, #0]
   2435a:	6861      	ldr	r1, [r4, #4]
   2435c:	f7fd f892 	bl	21484 <__aeabi_lmul>
   24360:	2201      	movs	r2, #1
   24362:	2300      	movs	r3, #0
   24364:	1880      	adds	r0, r0, r2
   24366:	4159      	adcs	r1, r3
   24368:	6020      	str	r0, [r4, #0]
   2436a:	6061      	str	r1, [r4, #4]
   2436c:	0048      	lsls	r0, r1, #1
   2436e:	0840      	lsrs	r0, r0, #1
   24370:	bd10      	pop	{r4, pc}
   24372:	46c0      	nop			; (mov r8, r8)
   24374:	200001e8 	.word	0x200001e8
   24378:	4c957f2d 	.word	0x4c957f2d
   2437c:	5851f42d 	.word	0x5851f42d

00024380 <setbuf>:
   24380:	424a      	negs	r2, r1
   24382:	414a      	adcs	r2, r1
   24384:	2380      	movs	r3, #128	; 0x80
   24386:	b510      	push	{r4, lr}
   24388:	0052      	lsls	r2, r2, #1
   2438a:	00db      	lsls	r3, r3, #3
   2438c:	f000 f802 	bl	24394 <setvbuf>
   24390:	bd10      	pop	{r4, pc}
   24392:	46c0      	nop			; (mov r8, r8)

00024394 <setvbuf>:
   24394:	b5f0      	push	{r4, r5, r6, r7, lr}
   24396:	4647      	mov	r7, r8
   24398:	46ce      	mov	lr, r9
   2439a:	b580      	push	{r7, lr}
   2439c:	001f      	movs	r7, r3
   2439e:	4b63      	ldr	r3, [pc, #396]	; (2452c <setvbuf+0x198>)
   243a0:	b083      	sub	sp, #12
   243a2:	681d      	ldr	r5, [r3, #0]
   243a4:	0004      	movs	r4, r0
   243a6:	4688      	mov	r8, r1
   243a8:	0016      	movs	r6, r2
   243aa:	2d00      	cmp	r5, #0
   243ac:	d002      	beq.n	243b4 <setvbuf+0x20>
   243ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   243b0:	2b00      	cmp	r3, #0
   243b2:	d066      	beq.n	24482 <setvbuf+0xee>
   243b4:	2e02      	cmp	r6, #2
   243b6:	d005      	beq.n	243c4 <setvbuf+0x30>
   243b8:	2e01      	cmp	r6, #1
   243ba:	d900      	bls.n	243be <setvbuf+0x2a>
   243bc:	e0a1      	b.n	24502 <setvbuf+0x16e>
   243be:	2f00      	cmp	r7, #0
   243c0:	da00      	bge.n	243c4 <setvbuf+0x30>
   243c2:	e09e      	b.n	24502 <setvbuf+0x16e>
   243c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   243c6:	07db      	lsls	r3, r3, #31
   243c8:	d533      	bpl.n	24432 <setvbuf+0x9e>
   243ca:	0021      	movs	r1, r4
   243cc:	0028      	movs	r0, r5
   243ce:	f004 fa1b 	bl	28808 <_fflush_r>
   243d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   243d4:	2900      	cmp	r1, #0
   243d6:	d008      	beq.n	243ea <setvbuf+0x56>
   243d8:	0023      	movs	r3, r4
   243da:	3340      	adds	r3, #64	; 0x40
   243dc:	4299      	cmp	r1, r3
   243de:	d002      	beq.n	243e6 <setvbuf+0x52>
   243e0:	0028      	movs	r0, r5
   243e2:	f004 fb15 	bl	28a10 <_free_r>
   243e6:	2300      	movs	r3, #0
   243e8:	6323      	str	r3, [r4, #48]	; 0x30
   243ea:	2300      	movs	r3, #0
   243ec:	61a3      	str	r3, [r4, #24]
   243ee:	6063      	str	r3, [r4, #4]
   243f0:	220c      	movs	r2, #12
   243f2:	5ea3      	ldrsh	r3, [r4, r2]
   243f4:	061a      	lsls	r2, r3, #24
   243f6:	d43d      	bmi.n	24474 <setvbuf+0xe0>
   243f8:	4a4d      	ldr	r2, [pc, #308]	; (24530 <setvbuf+0x19c>)
   243fa:	4013      	ands	r3, r2
   243fc:	81a3      	strh	r3, [r4, #12]
   243fe:	2e02      	cmp	r6, #2
   24400:	d01e      	beq.n	24440 <setvbuf+0xac>
   24402:	ab01      	add	r3, sp, #4
   24404:	466a      	mov	r2, sp
   24406:	0021      	movs	r1, r4
   24408:	0028      	movs	r0, r5
   2440a:	f004 fdb1 	bl	28f70 <__swhatbuf_r>
   2440e:	89a3      	ldrh	r3, [r4, #12]
   24410:	4318      	orrs	r0, r3
   24412:	81a0      	strh	r0, [r4, #12]
   24414:	2f00      	cmp	r7, #0
   24416:	d138      	bne.n	2448a <setvbuf+0xf6>
   24418:	9f00      	ldr	r7, [sp, #0]
   2441a:	0038      	movs	r0, r7
   2441c:	f004 fe20 	bl	29060 <malloc>
   24420:	4680      	mov	r8, r0
   24422:	2800      	cmp	r0, #0
   24424:	d100      	bne.n	24428 <setvbuf+0x94>
   24426:	e06f      	b.n	24508 <setvbuf+0x174>
   24428:	2280      	movs	r2, #128	; 0x80
   2442a:	89a3      	ldrh	r3, [r4, #12]
   2442c:	4313      	orrs	r3, r2
   2442e:	81a3      	strh	r3, [r4, #12]
   24430:	e02e      	b.n	24490 <setvbuf+0xfc>
   24432:	89a3      	ldrh	r3, [r4, #12]
   24434:	059b      	lsls	r3, r3, #22
   24436:	d4c8      	bmi.n	243ca <setvbuf+0x36>
   24438:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2443a:	f004 fd95 	bl	28f68 <__retarget_lock_acquire_recursive>
   2443e:	e7c4      	b.n	243ca <setvbuf+0x36>
   24440:	2500      	movs	r5, #0
   24442:	2202      	movs	r2, #2
   24444:	4313      	orrs	r3, r2
   24446:	2200      	movs	r2, #0
   24448:	60a2      	str	r2, [r4, #8]
   2444a:	0022      	movs	r2, r4
   2444c:	3243      	adds	r2, #67	; 0x43
   2444e:	6022      	str	r2, [r4, #0]
   24450:	6122      	str	r2, [r4, #16]
   24452:	2201      	movs	r2, #1
   24454:	6e61      	ldr	r1, [r4, #100]	; 0x64
   24456:	81a3      	strh	r3, [r4, #12]
   24458:	6162      	str	r2, [r4, #20]
   2445a:	4211      	tst	r1, r2
   2445c:	d104      	bne.n	24468 <setvbuf+0xd4>
   2445e:	059b      	lsls	r3, r3, #22
   24460:	d402      	bmi.n	24468 <setvbuf+0xd4>
   24462:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24464:	f004 fd82 	bl	28f6c <__retarget_lock_release_recursive>
   24468:	0028      	movs	r0, r5
   2446a:	b003      	add	sp, #12
   2446c:	bc0c      	pop	{r2, r3}
   2446e:	4690      	mov	r8, r2
   24470:	4699      	mov	r9, r3
   24472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24474:	6921      	ldr	r1, [r4, #16]
   24476:	0028      	movs	r0, r5
   24478:	f004 faca 	bl	28a10 <_free_r>
   2447c:	220c      	movs	r2, #12
   2447e:	5ea3      	ldrsh	r3, [r4, r2]
   24480:	e7ba      	b.n	243f8 <setvbuf+0x64>
   24482:	0028      	movs	r0, r5
   24484:	f004 fa1a 	bl	288bc <__sinit>
   24488:	e794      	b.n	243b4 <setvbuf+0x20>
   2448a:	4643      	mov	r3, r8
   2448c:	2b00      	cmp	r3, #0
   2448e:	d0c4      	beq.n	2441a <setvbuf+0x86>
   24490:	6bab      	ldr	r3, [r5, #56]	; 0x38
   24492:	2b00      	cmp	r3, #0
   24494:	d027      	beq.n	244e6 <setvbuf+0x152>
   24496:	9b00      	ldr	r3, [sp, #0]
   24498:	429f      	cmp	r7, r3
   2449a:	d02a      	beq.n	244f2 <setvbuf+0x15e>
   2449c:	2380      	movs	r3, #128	; 0x80
   2449e:	89a2      	ldrh	r2, [r4, #12]
   244a0:	011b      	lsls	r3, r3, #4
   244a2:	4313      	orrs	r3, r2
   244a4:	b21b      	sxth	r3, r3
   244a6:	81a3      	strh	r3, [r4, #12]
   244a8:	2e01      	cmp	r6, #1
   244aa:	d026      	beq.n	244fa <setvbuf+0x166>
   244ac:	4642      	mov	r2, r8
   244ae:	6022      	str	r2, [r4, #0]
   244b0:	6122      	str	r2, [r4, #16]
   244b2:	2208      	movs	r2, #8
   244b4:	b29b      	uxth	r3, r3
   244b6:	6167      	str	r7, [r4, #20]
   244b8:	401a      	ands	r2, r3
   244ba:	d00b      	beq.n	244d4 <setvbuf+0x140>
   244bc:	07da      	lsls	r2, r3, #31
   244be:	d510      	bpl.n	244e2 <setvbuf+0x14e>
   244c0:	2200      	movs	r2, #0
   244c2:	2501      	movs	r5, #1
   244c4:	60a2      	str	r2, [r4, #8]
   244c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   244c8:	427f      	negs	r7, r7
   244ca:	61a7      	str	r7, [r4, #24]
   244cc:	4015      	ands	r5, r2
   244ce:	d0c6      	beq.n	2445e <setvbuf+0xca>
   244d0:	2500      	movs	r5, #0
   244d2:	e7c9      	b.n	24468 <setvbuf+0xd4>
   244d4:	60a2      	str	r2, [r4, #8]
   244d6:	2501      	movs	r5, #1
   244d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   244da:	4015      	ands	r5, r2
   244dc:	d0bf      	beq.n	2445e <setvbuf+0xca>
   244de:	2500      	movs	r5, #0
   244e0:	e7c2      	b.n	24468 <setvbuf+0xd4>
   244e2:	60a7      	str	r7, [r4, #8]
   244e4:	e7f7      	b.n	244d6 <setvbuf+0x142>
   244e6:	0028      	movs	r0, r5
   244e8:	f004 f9e8 	bl	288bc <__sinit>
   244ec:	9b00      	ldr	r3, [sp, #0]
   244ee:	429f      	cmp	r7, r3
   244f0:	d1d4      	bne.n	2449c <setvbuf+0x108>
   244f2:	220c      	movs	r2, #12
   244f4:	5ea3      	ldrsh	r3, [r4, r2]
   244f6:	2e01      	cmp	r6, #1
   244f8:	d1d8      	bne.n	244ac <setvbuf+0x118>
   244fa:	2201      	movs	r2, #1
   244fc:	4313      	orrs	r3, r2
   244fe:	81a3      	strh	r3, [r4, #12]
   24500:	e7d4      	b.n	244ac <setvbuf+0x118>
   24502:	2501      	movs	r5, #1
   24504:	426d      	negs	r5, r5
   24506:	e7af      	b.n	24468 <setvbuf+0xd4>
   24508:	9b00      	ldr	r3, [sp, #0]
   2450a:	4699      	mov	r9, r3
   2450c:	42bb      	cmp	r3, r7
   2450e:	d005      	beq.n	2451c <setvbuf+0x188>
   24510:	0018      	movs	r0, r3
   24512:	f004 fda5 	bl	29060 <malloc>
   24516:	4680      	mov	r8, r0
   24518:	2800      	cmp	r0, #0
   2451a:	d104      	bne.n	24526 <setvbuf+0x192>
   2451c:	2501      	movs	r5, #1
   2451e:	220c      	movs	r2, #12
   24520:	5ea3      	ldrsh	r3, [r4, r2]
   24522:	426d      	negs	r5, r5
   24524:	e78d      	b.n	24442 <setvbuf+0xae>
   24526:	464f      	mov	r7, r9
   24528:	e77e      	b.n	24428 <setvbuf+0x94>
   2452a:	46c0      	nop			; (mov r8, r8)
   2452c:	200001e8 	.word	0x200001e8
   24530:	fffff35c 	.word	0xfffff35c

00024534 <snprintf>:
   24534:	b40c      	push	{r2, r3}
   24536:	b530      	push	{r4, r5, lr}
   24538:	4b1e      	ldr	r3, [pc, #120]	; (245b4 <snprintf+0x80>)
   2453a:	b09d      	sub	sp, #116	; 0x74
   2453c:	681d      	ldr	r5, [r3, #0]
   2453e:	2900      	cmp	r1, #0
   24540:	db33      	blt.n	245aa <snprintf+0x76>
   24542:	2382      	movs	r3, #130	; 0x82
   24544:	ac02      	add	r4, sp, #8
   24546:	009b      	lsls	r3, r3, #2
   24548:	81a3      	strh	r3, [r4, #12]
   2454a:	9002      	str	r0, [sp, #8]
   2454c:	6120      	str	r0, [r4, #16]
   2454e:	2900      	cmp	r1, #0
   24550:	d012      	beq.n	24578 <snprintf+0x44>
   24552:	2301      	movs	r3, #1
   24554:	3901      	subs	r1, #1
   24556:	425b      	negs	r3, r3
   24558:	60a1      	str	r1, [r4, #8]
   2455a:	6161      	str	r1, [r4, #20]
   2455c:	81e3      	strh	r3, [r4, #14]
   2455e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   24560:	ab21      	add	r3, sp, #132	; 0x84
   24562:	0021      	movs	r1, r4
   24564:	0028      	movs	r0, r5
   24566:	9301      	str	r3, [sp, #4]
   24568:	f000 f906 	bl	24778 <_svfprintf_r>
   2456c:	1c43      	adds	r3, r0, #1
   2456e:	db16      	blt.n	2459e <snprintf+0x6a>
   24570:	2300      	movs	r3, #0
   24572:	9a02      	ldr	r2, [sp, #8]
   24574:	7013      	strb	r3, [r2, #0]
   24576:	e00d      	b.n	24594 <snprintf+0x60>
   24578:	2301      	movs	r3, #1
   2457a:	425b      	negs	r3, r3
   2457c:	60a1      	str	r1, [r4, #8]
   2457e:	6161      	str	r1, [r4, #20]
   24580:	81e3      	strh	r3, [r4, #14]
   24582:	9a20      	ldr	r2, [sp, #128]	; 0x80
   24584:	ab21      	add	r3, sp, #132	; 0x84
   24586:	0021      	movs	r1, r4
   24588:	0028      	movs	r0, r5
   2458a:	9301      	str	r3, [sp, #4]
   2458c:	f000 f8f4 	bl	24778 <_svfprintf_r>
   24590:	1c43      	adds	r3, r0, #1
   24592:	db07      	blt.n	245a4 <snprintf+0x70>
   24594:	b01d      	add	sp, #116	; 0x74
   24596:	bc30      	pop	{r4, r5}
   24598:	bc08      	pop	{r3}
   2459a:	b002      	add	sp, #8
   2459c:	4718      	bx	r3
   2459e:	238b      	movs	r3, #139	; 0x8b
   245a0:	602b      	str	r3, [r5, #0]
   245a2:	e7e5      	b.n	24570 <snprintf+0x3c>
   245a4:	238b      	movs	r3, #139	; 0x8b
   245a6:	602b      	str	r3, [r5, #0]
   245a8:	e7f4      	b.n	24594 <snprintf+0x60>
   245aa:	238b      	movs	r3, #139	; 0x8b
   245ac:	2001      	movs	r0, #1
   245ae:	602b      	str	r3, [r5, #0]
   245b0:	4240      	negs	r0, r0
   245b2:	e7ef      	b.n	24594 <snprintf+0x60>
   245b4:	200001e8 	.word	0x200001e8

000245b8 <strlen>:
   245b8:	b510      	push	{r4, lr}
   245ba:	0783      	lsls	r3, r0, #30
   245bc:	d025      	beq.n	2460a <strlen+0x52>
   245be:	7803      	ldrb	r3, [r0, #0]
   245c0:	2b00      	cmp	r3, #0
   245c2:	d024      	beq.n	2460e <strlen+0x56>
   245c4:	0003      	movs	r3, r0
   245c6:	2103      	movs	r1, #3
   245c8:	e002      	b.n	245d0 <strlen+0x18>
   245ca:	781a      	ldrb	r2, [r3, #0]
   245cc:	2a00      	cmp	r2, #0
   245ce:	d01a      	beq.n	24606 <strlen+0x4e>
   245d0:	3301      	adds	r3, #1
   245d2:	420b      	tst	r3, r1
   245d4:	d1f9      	bne.n	245ca <strlen+0x12>
   245d6:	6819      	ldr	r1, [r3, #0]
   245d8:	4a0e      	ldr	r2, [pc, #56]	; (24614 <strlen+0x5c>)
   245da:	4c0f      	ldr	r4, [pc, #60]	; (24618 <strlen+0x60>)
   245dc:	188a      	adds	r2, r1, r2
   245de:	438a      	bics	r2, r1
   245e0:	4222      	tst	r2, r4
   245e2:	d106      	bne.n	245f2 <strlen+0x3a>
   245e4:	3304      	adds	r3, #4
   245e6:	6819      	ldr	r1, [r3, #0]
   245e8:	4a0a      	ldr	r2, [pc, #40]	; (24614 <strlen+0x5c>)
   245ea:	188a      	adds	r2, r1, r2
   245ec:	438a      	bics	r2, r1
   245ee:	4222      	tst	r2, r4
   245f0:	d0f8      	beq.n	245e4 <strlen+0x2c>
   245f2:	001a      	movs	r2, r3
   245f4:	781b      	ldrb	r3, [r3, #0]
   245f6:	2b00      	cmp	r3, #0
   245f8:	d003      	beq.n	24602 <strlen+0x4a>
   245fa:	3201      	adds	r2, #1
   245fc:	7811      	ldrb	r1, [r2, #0]
   245fe:	2900      	cmp	r1, #0
   24600:	d1fb      	bne.n	245fa <strlen+0x42>
   24602:	1a10      	subs	r0, r2, r0
   24604:	bd10      	pop	{r4, pc}
   24606:	1a18      	subs	r0, r3, r0
   24608:	e7fc      	b.n	24604 <strlen+0x4c>
   2460a:	0003      	movs	r3, r0
   2460c:	e7e3      	b.n	245d6 <strlen+0x1e>
   2460e:	2000      	movs	r0, #0
   24610:	e7f8      	b.n	24604 <strlen+0x4c>
   24612:	46c0      	nop			; (mov r8, r8)
   24614:	fefefeff 	.word	0xfefefeff
   24618:	80808080 	.word	0x80808080

0002461c <_strtol_l.isra.0>:
   2461c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2461e:	4657      	mov	r7, sl
   24620:	464e      	mov	r6, r9
   24622:	46de      	mov	lr, fp
   24624:	4645      	mov	r5, r8
   24626:	b5e0      	push	{r5, r6, r7, lr}
   24628:	001e      	movs	r6, r3
   2462a:	2308      	movs	r3, #8
   2462c:	b083      	sub	sp, #12
   2462e:	9001      	str	r0, [sp, #4]
   24630:	9100      	str	r1, [sp, #0]
   24632:	4692      	mov	sl, r2
   24634:	000f      	movs	r7, r1
   24636:	4699      	mov	r9, r3
   24638:	e000      	b.n	2463c <_strtol_l.isra.0+0x20>
   2463a:	002f      	movs	r7, r5
   2463c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2463e:	783c      	ldrb	r4, [r7, #0]
   24640:	f004 fc7c 	bl	28f3c <__locale_ctype_ptr_l>
   24644:	464a      	mov	r2, r9
   24646:	1900      	adds	r0, r0, r4
   24648:	7843      	ldrb	r3, [r0, #1]
   2464a:	1c7d      	adds	r5, r7, #1
   2464c:	421a      	tst	r2, r3
   2464e:	d1f4      	bne.n	2463a <_strtol_l.isra.0+0x1e>
   24650:	2c2d      	cmp	r4, #45	; 0x2d
   24652:	d04f      	beq.n	246f4 <_strtol_l.isra.0+0xd8>
   24654:	2300      	movs	r3, #0
   24656:	4698      	mov	r8, r3
   24658:	2c2b      	cmp	r4, #43	; 0x2b
   2465a:	d05c      	beq.n	24716 <_strtol_l.isra.0+0xfa>
   2465c:	2e00      	cmp	r6, #0
   2465e:	d003      	beq.n	24668 <_strtol_l.isra.0+0x4c>
   24660:	2e10      	cmp	r6, #16
   24662:	d05b      	beq.n	2471c <_strtol_l.isra.0+0x100>
   24664:	0037      	movs	r7, r6
   24666:	e003      	b.n	24670 <_strtol_l.isra.0+0x54>
   24668:	2c30      	cmp	r4, #48	; 0x30
   2466a:	d063      	beq.n	24734 <_strtol_l.isra.0+0x118>
   2466c:	270a      	movs	r7, #10
   2466e:	260a      	movs	r6, #10
   24670:	4b35      	ldr	r3, [pc, #212]	; (24748 <_strtol_l.isra.0+0x12c>)
   24672:	0039      	movs	r1, r7
   24674:	4443      	add	r3, r8
   24676:	0018      	movs	r0, r3
   24678:	4699      	mov	r9, r3
   2467a:	f7fc fd7b 	bl	21174 <__aeabi_uidivmod>
   2467e:	4648      	mov	r0, r9
   24680:	468b      	mov	fp, r1
   24682:	0039      	movs	r1, r7
   24684:	f7fc fcf0 	bl	21068 <__udivsi3>
   24688:	2200      	movs	r2, #0
   2468a:	0001      	movs	r1, r0
   2468c:	2000      	movs	r0, #0
   2468e:	0023      	movs	r3, r4
   24690:	3b30      	subs	r3, #48	; 0x30
   24692:	2b09      	cmp	r3, #9
   24694:	d907      	bls.n	246a6 <_strtol_l.isra.0+0x8a>
   24696:	3b11      	subs	r3, #17
   24698:	2b19      	cmp	r3, #25
   2469a:	d903      	bls.n	246a4 <_strtol_l.isra.0+0x88>
   2469c:	0023      	movs	r3, r4
   2469e:	3b61      	subs	r3, #97	; 0x61
   246a0:	2b19      	cmp	r3, #25
   246a2:	d80d      	bhi.n	246c0 <_strtol_l.isra.0+0xa4>
   246a4:	330a      	adds	r3, #10
   246a6:	429e      	cmp	r6, r3
   246a8:	dd0a      	ble.n	246c0 <_strtol_l.isra.0+0xa4>
   246aa:	1c54      	adds	r4, r2, #1
   246ac:	d005      	beq.n	246ba <_strtol_l.isra.0+0x9e>
   246ae:	4281      	cmp	r1, r0
   246b0:	d31d      	bcc.n	246ee <_strtol_l.isra.0+0xd2>
   246b2:	d01a      	beq.n	246ea <_strtol_l.isra.0+0xce>
   246b4:	2201      	movs	r2, #1
   246b6:	4378      	muls	r0, r7
   246b8:	1818      	adds	r0, r3, r0
   246ba:	782c      	ldrb	r4, [r5, #0]
   246bc:	3501      	adds	r5, #1
   246be:	e7e6      	b.n	2468e <_strtol_l.isra.0+0x72>
   246c0:	1c53      	adds	r3, r2, #1
   246c2:	d01c      	beq.n	246fe <_strtol_l.isra.0+0xe2>
   246c4:	4643      	mov	r3, r8
   246c6:	2b00      	cmp	r3, #0
   246c8:	d000      	beq.n	246cc <_strtol_l.isra.0+0xb0>
   246ca:	4240      	negs	r0, r0
   246cc:	4653      	mov	r3, sl
   246ce:	2b00      	cmp	r3, #0
   246d0:	d004      	beq.n	246dc <_strtol_l.isra.0+0xc0>
   246d2:	9b00      	ldr	r3, [sp, #0]
   246d4:	2a00      	cmp	r2, #0
   246d6:	d11c      	bne.n	24712 <_strtol_l.isra.0+0xf6>
   246d8:	4652      	mov	r2, sl
   246da:	6013      	str	r3, [r2, #0]
   246dc:	b003      	add	sp, #12
   246de:	bc3c      	pop	{r2, r3, r4, r5}
   246e0:	4690      	mov	r8, r2
   246e2:	4699      	mov	r9, r3
   246e4:	46a2      	mov	sl, r4
   246e6:	46ab      	mov	fp, r5
   246e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   246ea:	459b      	cmp	fp, r3
   246ec:	dae2      	bge.n	246b4 <_strtol_l.isra.0+0x98>
   246ee:	2201      	movs	r2, #1
   246f0:	4252      	negs	r2, r2
   246f2:	e7e2      	b.n	246ba <_strtol_l.isra.0+0x9e>
   246f4:	2301      	movs	r3, #1
   246f6:	782c      	ldrb	r4, [r5, #0]
   246f8:	4698      	mov	r8, r3
   246fa:	1cbd      	adds	r5, r7, #2
   246fc:	e7ae      	b.n	2465c <_strtol_l.isra.0+0x40>
   246fe:	2322      	movs	r3, #34	; 0x22
   24700:	9a01      	ldr	r2, [sp, #4]
   24702:	4648      	mov	r0, r9
   24704:	6013      	str	r3, [r2, #0]
   24706:	4653      	mov	r3, sl
   24708:	2b00      	cmp	r3, #0
   2470a:	d0e7      	beq.n	246dc <_strtol_l.isra.0+0xc0>
   2470c:	1e6b      	subs	r3, r5, #1
   2470e:	4648      	mov	r0, r9
   24710:	e7e2      	b.n	246d8 <_strtol_l.isra.0+0xbc>
   24712:	4681      	mov	r9, r0
   24714:	e7fa      	b.n	2470c <_strtol_l.isra.0+0xf0>
   24716:	782c      	ldrb	r4, [r5, #0]
   24718:	1cbd      	adds	r5, r7, #2
   2471a:	e79f      	b.n	2465c <_strtol_l.isra.0+0x40>
   2471c:	2c30      	cmp	r4, #48	; 0x30
   2471e:	d111      	bne.n	24744 <_strtol_l.isra.0+0x128>
   24720:	2220      	movs	r2, #32
   24722:	782b      	ldrb	r3, [r5, #0]
   24724:	4393      	bics	r3, r2
   24726:	2b58      	cmp	r3, #88	; 0x58
   24728:	d10c      	bne.n	24744 <_strtol_l.isra.0+0x128>
   2472a:	786c      	ldrb	r4, [r5, #1]
   2472c:	2710      	movs	r7, #16
   2472e:	3502      	adds	r5, #2
   24730:	2610      	movs	r6, #16
   24732:	e79d      	b.n	24670 <_strtol_l.isra.0+0x54>
   24734:	2220      	movs	r2, #32
   24736:	782b      	ldrb	r3, [r5, #0]
   24738:	4393      	bics	r3, r2
   2473a:	2b58      	cmp	r3, #88	; 0x58
   2473c:	d0f5      	beq.n	2472a <_strtol_l.isra.0+0x10e>
   2473e:	2708      	movs	r7, #8
   24740:	2608      	movs	r6, #8
   24742:	e795      	b.n	24670 <_strtol_l.isra.0+0x54>
   24744:	2710      	movs	r7, #16
   24746:	e793      	b.n	24670 <_strtol_l.isra.0+0x54>
   24748:	7fffffff 	.word	0x7fffffff

0002474c <strtol>:
   2474c:	0013      	movs	r3, r2
   2474e:	4a08      	ldr	r2, [pc, #32]	; (24770 <strtol+0x24>)
   24750:	b530      	push	{r4, r5, lr}
   24752:	0005      	movs	r5, r0
   24754:	6810      	ldr	r0, [r2, #0]
   24756:	b083      	sub	sp, #12
   24758:	6b44      	ldr	r4, [r0, #52]	; 0x34
   2475a:	2c00      	cmp	r4, #0
   2475c:	d006      	beq.n	2476c <strtol+0x20>
   2475e:	000a      	movs	r2, r1
   24760:	9400      	str	r4, [sp, #0]
   24762:	0029      	movs	r1, r5
   24764:	f7ff ff5a 	bl	2461c <_strtol_l.isra.0>
   24768:	b003      	add	sp, #12
   2476a:	bd30      	pop	{r4, r5, pc}
   2476c:	4c01      	ldr	r4, [pc, #4]	; (24774 <strtol+0x28>)
   2476e:	e7f6      	b.n	2475e <strtol+0x12>
   24770:	200001e8 	.word	0x200001e8
   24774:	2000061c 	.word	0x2000061c

00024778 <_svfprintf_r>:
   24778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2477a:	46de      	mov	lr, fp
   2477c:	4645      	mov	r5, r8
   2477e:	4657      	mov	r7, sl
   24780:	464e      	mov	r6, r9
   24782:	b5e0      	push	{r5, r6, r7, lr}
   24784:	b0c3      	sub	sp, #268	; 0x10c
   24786:	000d      	movs	r5, r1
   24788:	9106      	str	r1, [sp, #24]
   2478a:	0014      	movs	r4, r2
   2478c:	930f      	str	r3, [sp, #60]	; 0x3c
   2478e:	9009      	str	r0, [sp, #36]	; 0x24
   24790:	f004 fbd8 	bl	28f44 <_localeconv_r>
   24794:	6803      	ldr	r3, [r0, #0]
   24796:	0018      	movs	r0, r3
   24798:	9319      	str	r3, [sp, #100]	; 0x64
   2479a:	f7ff ff0d 	bl	245b8 <strlen>
   2479e:	9018      	str	r0, [sp, #96]	; 0x60
   247a0:	89ab      	ldrh	r3, [r5, #12]
   247a2:	061b      	lsls	r3, r3, #24
   247a4:	d505      	bpl.n	247b2 <_svfprintf_r+0x3a>
   247a6:	692b      	ldr	r3, [r5, #16]
   247a8:	9307      	str	r3, [sp, #28]
   247aa:	2b00      	cmp	r3, #0
   247ac:	d101      	bne.n	247b2 <_svfprintf_r+0x3a>
   247ae:	f001 f863 	bl	25878 <_svfprintf_r+0x1100>
   247b2:	ab32      	add	r3, sp, #200	; 0xc8
   247b4:	9325      	str	r3, [sp, #148]	; 0x94
   247b6:	2300      	movs	r3, #0
   247b8:	46a3      	mov	fp, r4
   247ba:	af25      	add	r7, sp, #148	; 0x94
   247bc:	60bb      	str	r3, [r7, #8]
   247be:	607b      	str	r3, [r7, #4]
   247c0:	9314      	str	r3, [sp, #80]	; 0x50
   247c2:	9316      	str	r3, [sp, #88]	; 0x58
   247c4:	9315      	str	r3, [sp, #84]	; 0x54
   247c6:	ae32      	add	r6, sp, #200	; 0xc8
   247c8:	9317      	str	r3, [sp, #92]	; 0x5c
   247ca:	931a      	str	r3, [sp, #104]	; 0x68
   247cc:	930a      	str	r3, [sp, #40]	; 0x28
   247ce:	465b      	mov	r3, fp
   247d0:	781b      	ldrb	r3, [r3, #0]
   247d2:	465c      	mov	r4, fp
   247d4:	2b00      	cmp	r3, #0
   247d6:	d01c      	beq.n	24812 <_svfprintf_r+0x9a>
   247d8:	2b25      	cmp	r3, #37	; 0x25
   247da:	d102      	bne.n	247e2 <_svfprintf_r+0x6a>
   247dc:	e019      	b.n	24812 <_svfprintf_r+0x9a>
   247de:	2b25      	cmp	r3, #37	; 0x25
   247e0:	d003      	beq.n	247ea <_svfprintf_r+0x72>
   247e2:	3401      	adds	r4, #1
   247e4:	7823      	ldrb	r3, [r4, #0]
   247e6:	2b00      	cmp	r3, #0
   247e8:	d1f9      	bne.n	247de <_svfprintf_r+0x66>
   247ea:	465b      	mov	r3, fp
   247ec:	1ae5      	subs	r5, r4, r3
   247ee:	d010      	beq.n	24812 <_svfprintf_r+0x9a>
   247f0:	465b      	mov	r3, fp
   247f2:	6033      	str	r3, [r6, #0]
   247f4:	68bb      	ldr	r3, [r7, #8]
   247f6:	6075      	str	r5, [r6, #4]
   247f8:	195b      	adds	r3, r3, r5
   247fa:	60bb      	str	r3, [r7, #8]
   247fc:	687b      	ldr	r3, [r7, #4]
   247fe:	3301      	adds	r3, #1
   24800:	607b      	str	r3, [r7, #4]
   24802:	2b07      	cmp	r3, #7
   24804:	dc2e      	bgt.n	24864 <_svfprintf_r+0xec>
   24806:	3608      	adds	r6, #8
   24808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2480a:	469c      	mov	ip, r3
   2480c:	44ac      	add	ip, r5
   2480e:	4663      	mov	r3, ip
   24810:	930a      	str	r3, [sp, #40]	; 0x28
   24812:	7823      	ldrb	r3, [r4, #0]
   24814:	2b00      	cmp	r3, #0
   24816:	d02e      	beq.n	24876 <_svfprintf_r+0xfe>
   24818:	1c63      	adds	r3, r4, #1
   2481a:	469b      	mov	fp, r3
   2481c:	2300      	movs	r3, #0
   2481e:	aa16      	add	r2, sp, #88	; 0x58
   24820:	77d3      	strb	r3, [r2, #31]
   24822:	2201      	movs	r2, #1
   24824:	4252      	negs	r2, r2
   24826:	4692      	mov	sl, r2
   24828:	2200      	movs	r2, #0
   2482a:	2100      	movs	r1, #0
   2482c:	920b      	str	r2, [sp, #44]	; 0x2c
   2482e:	3220      	adds	r2, #32
   24830:	4691      	mov	r9, r2
   24832:	3220      	adds	r2, #32
   24834:	7863      	ldrb	r3, [r4, #1]
   24836:	4688      	mov	r8, r1
   24838:	2000      	movs	r0, #0
   2483a:	2400      	movs	r4, #0
   2483c:	4694      	mov	ip, r2
   2483e:	4659      	mov	r1, fp
   24840:	3101      	adds	r1, #1
   24842:	001a      	movs	r2, r3
   24844:	3a20      	subs	r2, #32
   24846:	2a58      	cmp	r2, #88	; 0x58
   24848:	d900      	bls.n	2484c <_svfprintf_r+0xd4>
   2484a:	e2fd      	b.n	24e48 <_svfprintf_r+0x6d0>
   2484c:	4dd7      	ldr	r5, [pc, #860]	; (24bac <_svfprintf_r+0x434>)
   2484e:	0092      	lsls	r2, r2, #2
   24850:	58aa      	ldr	r2, [r5, r2]
   24852:	4697      	mov	pc, r2
   24854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24856:	920f      	str	r2, [sp, #60]	; 0x3c
   24858:	425b      	negs	r3, r3
   2485a:	930b      	str	r3, [sp, #44]	; 0x2c
   2485c:	2304      	movs	r3, #4
   2485e:	431c      	orrs	r4, r3
   24860:	780b      	ldrb	r3, [r1, #0]
   24862:	e7ed      	b.n	24840 <_svfprintf_r+0xc8>
   24864:	003a      	movs	r2, r7
   24866:	9906      	ldr	r1, [sp, #24]
   24868:	9809      	ldr	r0, [sp, #36]	; 0x24
   2486a:	f005 fcd3 	bl	2a214 <__ssprint_r>
   2486e:	2800      	cmp	r0, #0
   24870:	d109      	bne.n	24886 <_svfprintf_r+0x10e>
   24872:	ae32      	add	r6, sp, #200	; 0xc8
   24874:	e7c8      	b.n	24808 <_svfprintf_r+0x90>
   24876:	68bb      	ldr	r3, [r7, #8]
   24878:	2b00      	cmp	r3, #0
   2487a:	d004      	beq.n	24886 <_svfprintf_r+0x10e>
   2487c:	003a      	movs	r2, r7
   2487e:	9906      	ldr	r1, [sp, #24]
   24880:	9809      	ldr	r0, [sp, #36]	; 0x24
   24882:	f005 fcc7 	bl	2a214 <__ssprint_r>
   24886:	9b06      	ldr	r3, [sp, #24]
   24888:	899b      	ldrh	r3, [r3, #12]
   2488a:	065b      	lsls	r3, r3, #25
   2488c:	d501      	bpl.n	24892 <_svfprintf_r+0x11a>
   2488e:	f001 f8ce 	bl	25a2e <_svfprintf_r+0x12b6>
   24892:	980a      	ldr	r0, [sp, #40]	; 0x28
   24894:	b043      	add	sp, #268	; 0x10c
   24896:	bc3c      	pop	{r2, r3, r4, r5}
   24898:	4690      	mov	r8, r2
   2489a:	4699      	mov	r9, r3
   2489c:	46a2      	mov	sl, r4
   2489e:	46ab      	mov	fp, r5
   248a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   248a2:	2201      	movs	r2, #1
   248a4:	780b      	ldrb	r3, [r1, #0]
   248a6:	4690      	mov	r8, r2
   248a8:	202b      	movs	r0, #43	; 0x2b
   248aa:	e7c9      	b.n	24840 <_svfprintf_r+0xc8>
   248ac:	1c4b      	adds	r3, r1, #1
   248ae:	469b      	mov	fp, r3
   248b0:	780b      	ldrb	r3, [r1, #0]
   248b2:	2b2a      	cmp	r3, #42	; 0x2a
   248b4:	d101      	bne.n	248ba <_svfprintf_r+0x142>
   248b6:	f001 fa1b 	bl	25cf0 <_svfprintf_r+0x1578>
   248ba:	001a      	movs	r2, r3
   248bc:	2100      	movs	r1, #0
   248be:	3a30      	subs	r2, #48	; 0x30
   248c0:	468a      	mov	sl, r1
   248c2:	4659      	mov	r1, fp
   248c4:	2a09      	cmp	r2, #9
   248c6:	d8bc      	bhi.n	24842 <_svfprintf_r+0xca>
   248c8:	0003      	movs	r3, r0
   248ca:	0011      	movs	r1, r2
   248cc:	4650      	mov	r0, sl
   248ce:	465a      	mov	r2, fp
   248d0:	469a      	mov	sl, r3
   248d2:	46a3      	mov	fp, r4
   248d4:	0083      	lsls	r3, r0, #2
   248d6:	181b      	adds	r3, r3, r0
   248d8:	7814      	ldrb	r4, [r2, #0]
   248da:	005b      	lsls	r3, r3, #1
   248dc:	1858      	adds	r0, r3, r1
   248de:	0021      	movs	r1, r4
   248e0:	1c53      	adds	r3, r2, #1
   248e2:	3930      	subs	r1, #48	; 0x30
   248e4:	001a      	movs	r2, r3
   248e6:	2909      	cmp	r1, #9
   248e8:	d9f4      	bls.n	248d4 <_svfprintf_r+0x15c>
   248ea:	4652      	mov	r2, sl
   248ec:	0019      	movs	r1, r3
   248ee:	4682      	mov	sl, r0
   248f0:	0023      	movs	r3, r4
   248f2:	0010      	movs	r0, r2
   248f4:	465c      	mov	r4, fp
   248f6:	e7a4      	b.n	24842 <_svfprintf_r+0xca>
   248f8:	2380      	movs	r3, #128	; 0x80
   248fa:	431c      	orrs	r4, r3
   248fc:	780b      	ldrb	r3, [r1, #0]
   248fe:	e79f      	b.n	24840 <_svfprintf_r+0xc8>
   24900:	468b      	mov	fp, r1
   24902:	4641      	mov	r1, r8
   24904:	9312      	str	r3, [sp, #72]	; 0x48
   24906:	2900      	cmp	r1, #0
   24908:	d001      	beq.n	2490e <_svfprintf_r+0x196>
   2490a:	f001 fa1f 	bl	25d4c <_svfprintf_r+0x15d4>
   2490e:	2310      	movs	r3, #16
   24910:	431c      	orrs	r4, r3
   24912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24914:	06a3      	lsls	r3, r4, #26
   24916:	d501      	bpl.n	2491c <_svfprintf_r+0x1a4>
   24918:	f000 fe88 	bl	2562c <_svfprintf_r+0xeb4>
   2491c:	06e3      	lsls	r3, r4, #27
   2491e:	d501      	bpl.n	24924 <_svfprintf_r+0x1ac>
   24920:	f000 fd80 	bl	25424 <_svfprintf_r+0xcac>
   24924:	0663      	lsls	r3, r4, #25
   24926:	d401      	bmi.n	2492c <_svfprintf_r+0x1b4>
   24928:	f000 fd7c 	bl	25424 <_svfprintf_r+0xcac>
   2492c:	2100      	movs	r1, #0
   2492e:	5e53      	ldrsh	r3, [r2, r1]
   24930:	930c      	str	r3, [sp, #48]	; 0x30
   24932:	3204      	adds	r2, #4
   24934:	17db      	asrs	r3, r3, #31
   24936:	930d      	str	r3, [sp, #52]	; 0x34
   24938:	920f      	str	r2, [sp, #60]	; 0x3c
   2493a:	d501      	bpl.n	24940 <_svfprintf_r+0x1c8>
   2493c:	f000 fe86 	bl	2564c <_svfprintf_r+0xed4>
   24940:	990c      	ldr	r1, [sp, #48]	; 0x30
   24942:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24944:	0008      	movs	r0, r1
   24946:	ab16      	add	r3, sp, #88	; 0x58
   24948:	7fdb      	ldrb	r3, [r3, #31]
   2494a:	4310      	orrs	r0, r2
   2494c:	4698      	mov	r8, r3
   2494e:	0002      	movs	r2, r0
   24950:	2301      	movs	r3, #1
   24952:	4651      	mov	r1, sl
   24954:	3101      	adds	r1, #1
   24956:	d100      	bne.n	2495a <_svfprintf_r+0x1e2>
   24958:	e0ff      	b.n	24b5a <_svfprintf_r+0x3e2>
   2495a:	2180      	movs	r1, #128	; 0x80
   2495c:	0020      	movs	r0, r4
   2495e:	4388      	bics	r0, r1
   24960:	9008      	str	r0, [sp, #32]
   24962:	2a00      	cmp	r2, #0
   24964:	d000      	beq.n	24968 <_svfprintf_r+0x1f0>
   24966:	e0fc      	b.n	24b62 <_svfprintf_r+0x3ea>
   24968:	4652      	mov	r2, sl
   2496a:	2a00      	cmp	r2, #0
   2496c:	d001      	beq.n	24972 <_svfprintf_r+0x1fa>
   2496e:	f000 fc2c 	bl	251ca <_svfprintf_r+0xa52>
   24972:	2b00      	cmp	r3, #0
   24974:	d001      	beq.n	2497a <_svfprintf_r+0x202>
   24976:	f000 fd04 	bl	25382 <_svfprintf_r+0xc0a>
   2497a:	2001      	movs	r0, #1
   2497c:	ab32      	add	r3, sp, #200	; 0xc8
   2497e:	4020      	ands	r0, r4
   24980:	900e      	str	r0, [sp, #56]	; 0x38
   24982:	9311      	str	r3, [sp, #68]	; 0x44
   24984:	d008      	beq.n	24998 <_svfprintf_r+0x220>
   24986:	2327      	movs	r3, #39	; 0x27
   24988:	2130      	movs	r1, #48	; 0x30
   2498a:	aa28      	add	r2, sp, #160	; 0xa0
   2498c:	54d1      	strb	r1, [r2, r3]
   2498e:	aa16      	add	r2, sp, #88	; 0x58
   24990:	4694      	mov	ip, r2
   24992:	3348      	adds	r3, #72	; 0x48
   24994:	4463      	add	r3, ip
   24996:	9311      	str	r3, [sp, #68]	; 0x44
   24998:	4653      	mov	r3, sl
   2499a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2499c:	9307      	str	r3, [sp, #28]
   2499e:	4592      	cmp	sl, r2
   249a0:	da00      	bge.n	249a4 <_svfprintf_r+0x22c>
   249a2:	9207      	str	r2, [sp, #28]
   249a4:	2300      	movs	r3, #0
   249a6:	9313      	str	r3, [sp, #76]	; 0x4c
   249a8:	4643      	mov	r3, r8
   249aa:	2b00      	cmp	r3, #0
   249ac:	d002      	beq.n	249b4 <_svfprintf_r+0x23c>
   249ae:	9b07      	ldr	r3, [sp, #28]
   249b0:	3301      	adds	r3, #1
   249b2:	9307      	str	r3, [sp, #28]
   249b4:	2302      	movs	r3, #2
   249b6:	9a08      	ldr	r2, [sp, #32]
   249b8:	401a      	ands	r2, r3
   249ba:	4691      	mov	r9, r2
   249bc:	d002      	beq.n	249c4 <_svfprintf_r+0x24c>
   249be:	9b07      	ldr	r3, [sp, #28]
   249c0:	3302      	adds	r3, #2
   249c2:	9307      	str	r3, [sp, #28]
   249c4:	2384      	movs	r3, #132	; 0x84
   249c6:	9a08      	ldr	r2, [sp, #32]
   249c8:	401a      	ands	r2, r3
   249ca:	9210      	str	r2, [sp, #64]	; 0x40
   249cc:	d000      	beq.n	249d0 <_svfprintf_r+0x258>
   249ce:	e24d      	b.n	24e6c <_svfprintf_r+0x6f4>
   249d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   249d2:	9a07      	ldr	r2, [sp, #28]
   249d4:	1a9c      	subs	r4, r3, r2
   249d6:	2c00      	cmp	r4, #0
   249d8:	dc00      	bgt.n	249dc <_svfprintf_r+0x264>
   249da:	e247      	b.n	24e6c <_svfprintf_r+0x6f4>
   249dc:	4974      	ldr	r1, [pc, #464]	; (24bb0 <_svfprintf_r+0x438>)
   249de:	68ba      	ldr	r2, [r7, #8]
   249e0:	687b      	ldr	r3, [r7, #4]
   249e2:	4688      	mov	r8, r1
   249e4:	2c10      	cmp	r4, #16
   249e6:	dd1f      	ble.n	24a28 <_svfprintf_r+0x2b0>
   249e8:	0031      	movs	r1, r6
   249ea:	2510      	movs	r5, #16
   249ec:	4646      	mov	r6, r8
   249ee:	e003      	b.n	249f8 <_svfprintf_r+0x280>
   249f0:	3c10      	subs	r4, #16
   249f2:	3108      	adds	r1, #8
   249f4:	2c10      	cmp	r4, #16
   249f6:	dd15      	ble.n	24a24 <_svfprintf_r+0x2ac>
   249f8:	3210      	adds	r2, #16
   249fa:	3301      	adds	r3, #1
   249fc:	600e      	str	r6, [r1, #0]
   249fe:	604d      	str	r5, [r1, #4]
   24a00:	60ba      	str	r2, [r7, #8]
   24a02:	607b      	str	r3, [r7, #4]
   24a04:	2b07      	cmp	r3, #7
   24a06:	ddf3      	ble.n	249f0 <_svfprintf_r+0x278>
   24a08:	003a      	movs	r2, r7
   24a0a:	9906      	ldr	r1, [sp, #24]
   24a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
   24a0e:	f005 fc01 	bl	2a214 <__ssprint_r>
   24a12:	2800      	cmp	r0, #0
   24a14:	d000      	beq.n	24a18 <_svfprintf_r+0x2a0>
   24a16:	e736      	b.n	24886 <_svfprintf_r+0x10e>
   24a18:	3c10      	subs	r4, #16
   24a1a:	68ba      	ldr	r2, [r7, #8]
   24a1c:	687b      	ldr	r3, [r7, #4]
   24a1e:	a932      	add	r1, sp, #200	; 0xc8
   24a20:	2c10      	cmp	r4, #16
   24a22:	dce9      	bgt.n	249f8 <_svfprintf_r+0x280>
   24a24:	46b0      	mov	r8, r6
   24a26:	000e      	movs	r6, r1
   24a28:	4641      	mov	r1, r8
   24a2a:	6074      	str	r4, [r6, #4]
   24a2c:	3301      	adds	r3, #1
   24a2e:	18a4      	adds	r4, r4, r2
   24a30:	6031      	str	r1, [r6, #0]
   24a32:	60bc      	str	r4, [r7, #8]
   24a34:	607b      	str	r3, [r7, #4]
   24a36:	2b07      	cmp	r3, #7
   24a38:	dd01      	ble.n	24a3e <_svfprintf_r+0x2c6>
   24a3a:	f000 fca8 	bl	2538e <_svfprintf_r+0xc16>
   24a3e:	ab16      	add	r3, sp, #88	; 0x58
   24a40:	7fdb      	ldrb	r3, [r3, #31]
   24a42:	3608      	adds	r6, #8
   24a44:	4698      	mov	r8, r3
   24a46:	e212      	b.n	24e6e <_svfprintf_r+0x6f6>
   24a48:	468b      	mov	fp, r1
   24a4a:	4641      	mov	r1, r8
   24a4c:	9312      	str	r3, [sp, #72]	; 0x48
   24a4e:	2900      	cmp	r1, #0
   24a50:	d001      	beq.n	24a56 <_svfprintf_r+0x2de>
   24a52:	f001 f977 	bl	25d44 <_svfprintf_r+0x15cc>
   24a56:	2207      	movs	r2, #7
   24a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24a5a:	3307      	adds	r3, #7
   24a5c:	4393      	bics	r3, r2
   24a5e:	3201      	adds	r2, #1
   24a60:	4694      	mov	ip, r2
   24a62:	449c      	add	ip, r3
   24a64:	4662      	mov	r2, ip
   24a66:	920f      	str	r2, [sp, #60]	; 0x3c
   24a68:	681a      	ldr	r2, [r3, #0]
   24a6a:	9216      	str	r2, [sp, #88]	; 0x58
   24a6c:	685b      	ldr	r3, [r3, #4]
   24a6e:	2201      	movs	r2, #1
   24a70:	9315      	str	r3, [sp, #84]	; 0x54
   24a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24a74:	9d16      	ldr	r5, [sp, #88]	; 0x58
   24a76:	005b      	lsls	r3, r3, #1
   24a78:	085b      	lsrs	r3, r3, #1
   24a7a:	4698      	mov	r8, r3
   24a7c:	4252      	negs	r2, r2
   24a7e:	4b4d      	ldr	r3, [pc, #308]	; (24bb4 <_svfprintf_r+0x43c>)
   24a80:	0028      	movs	r0, r5
   24a82:	4641      	mov	r1, r8
   24a84:	f005 ff32 	bl	2a8ec <__aeabi_dcmpun>
   24a88:	2800      	cmp	r0, #0
   24a8a:	d001      	beq.n	24a90 <_svfprintf_r+0x318>
   24a8c:	f000 fdfd 	bl	2568a <_svfprintf_r+0xf12>
   24a90:	2201      	movs	r2, #1
   24a92:	4b48      	ldr	r3, [pc, #288]	; (24bb4 <_svfprintf_r+0x43c>)
   24a94:	4252      	negs	r2, r2
   24a96:	0028      	movs	r0, r5
   24a98:	4641      	mov	r1, r8
   24a9a:	f7fc fc7b 	bl	21394 <__aeabi_dcmple>
   24a9e:	2800      	cmp	r0, #0
   24aa0:	d001      	beq.n	24aa6 <_svfprintf_r+0x32e>
   24aa2:	f000 fdf2 	bl	2568a <_svfprintf_r+0xf12>
   24aa6:	2200      	movs	r2, #0
   24aa8:	2300      	movs	r3, #0
   24aaa:	9816      	ldr	r0, [sp, #88]	; 0x58
   24aac:	9915      	ldr	r1, [sp, #84]	; 0x54
   24aae:	f7fc fc67 	bl	21380 <__aeabi_dcmplt>
   24ab2:	2800      	cmp	r0, #0
   24ab4:	d001      	beq.n	24aba <_svfprintf_r+0x342>
   24ab6:	f001 f822 	bl	25afe <_svfprintf_r+0x1386>
   24aba:	ab16      	add	r3, sp, #88	; 0x58
   24abc:	7fdb      	ldrb	r3, [r3, #31]
   24abe:	4698      	mov	r8, r3
   24ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24ac2:	2b47      	cmp	r3, #71	; 0x47
   24ac4:	dd01      	ble.n	24aca <_svfprintf_r+0x352>
   24ac6:	f000 fec7 	bl	25858 <_svfprintf_r+0x10e0>
   24aca:	4b3b      	ldr	r3, [pc, #236]	; (24bb8 <_svfprintf_r+0x440>)
   24acc:	9311      	str	r3, [sp, #68]	; 0x44
   24ace:	2380      	movs	r3, #128	; 0x80
   24ad0:	439c      	bics	r4, r3
   24ad2:	3b7d      	subs	r3, #125	; 0x7d
   24ad4:	9307      	str	r3, [sp, #28]
   24ad6:	930e      	str	r3, [sp, #56]	; 0x38
   24ad8:	2300      	movs	r3, #0
   24ada:	9408      	str	r4, [sp, #32]
   24adc:	469a      	mov	sl, r3
   24ade:	9313      	str	r3, [sp, #76]	; 0x4c
   24ae0:	e762      	b.n	249a8 <_svfprintf_r+0x230>
   24ae2:	2200      	movs	r2, #0
   24ae4:	3b30      	subs	r3, #48	; 0x30
   24ae6:	0015      	movs	r5, r2
   24ae8:	001a      	movs	r2, r3
   24aea:	0003      	movs	r3, r0
   24aec:	9407      	str	r4, [sp, #28]
   24aee:	0008      	movs	r0, r1
   24af0:	002c      	movs	r4, r5
   24af2:	469b      	mov	fp, r3
   24af4:	00a3      	lsls	r3, r4, #2
   24af6:	191c      	adds	r4, r3, r4
   24af8:	7803      	ldrb	r3, [r0, #0]
   24afa:	0064      	lsls	r4, r4, #1
   24afc:	1914      	adds	r4, r2, r4
   24afe:	001a      	movs	r2, r3
   24b00:	3101      	adds	r1, #1
   24b02:	3a30      	subs	r2, #48	; 0x30
   24b04:	0008      	movs	r0, r1
   24b06:	2a09      	cmp	r2, #9
   24b08:	d9f4      	bls.n	24af4 <_svfprintf_r+0x37c>
   24b0a:	940b      	str	r4, [sp, #44]	; 0x2c
   24b0c:	4658      	mov	r0, fp
   24b0e:	9c07      	ldr	r4, [sp, #28]
   24b10:	e697      	b.n	24842 <_svfprintf_r+0xca>
   24b12:	2308      	movs	r3, #8
   24b14:	431c      	orrs	r4, r3
   24b16:	780b      	ldrb	r3, [r1, #0]
   24b18:	e692      	b.n	24840 <_svfprintf_r+0xc8>
   24b1a:	9312      	str	r3, [sp, #72]	; 0x48
   24b1c:	2310      	movs	r3, #16
   24b1e:	431c      	orrs	r4, r3
   24b20:	468b      	mov	fp, r1
   24b22:	06a3      	lsls	r3, r4, #26
   24b24:	d500      	bpl.n	24b28 <_svfprintf_r+0x3b0>
   24b26:	e17b      	b.n	24e20 <_svfprintf_r+0x6a8>
   24b28:	06e3      	lsls	r3, r4, #27
   24b2a:	d501      	bpl.n	24b30 <_svfprintf_r+0x3b8>
   24b2c:	f000 fc7e 	bl	2542c <_svfprintf_r+0xcb4>
   24b30:	0663      	lsls	r3, r4, #25
   24b32:	d401      	bmi.n	24b38 <_svfprintf_r+0x3c0>
   24b34:	f000 fc7a 	bl	2542c <_svfprintf_r+0xcb4>
   24b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24b3a:	881a      	ldrh	r2, [r3, #0]
   24b3c:	920c      	str	r2, [sp, #48]	; 0x30
   24b3e:	2200      	movs	r2, #0
   24b40:	3304      	adds	r3, #4
   24b42:	930f      	str	r3, [sp, #60]	; 0x3c
   24b44:	2300      	movs	r3, #0
   24b46:	920d      	str	r2, [sp, #52]	; 0x34
   24b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24b4a:	2100      	movs	r1, #0
   24b4c:	a816      	add	r0, sp, #88	; 0x58
   24b4e:	77c1      	strb	r1, [r0, #31]
   24b50:	4688      	mov	r8, r1
   24b52:	4651      	mov	r1, sl
   24b54:	3101      	adds	r1, #1
   24b56:	d000      	beq.n	24b5a <_svfprintf_r+0x3e2>
   24b58:	e6ff      	b.n	2495a <_svfprintf_r+0x1e2>
   24b5a:	2a00      	cmp	r2, #0
   24b5c:	d100      	bne.n	24b60 <_svfprintf_r+0x3e8>
   24b5e:	e335      	b.n	251cc <_svfprintf_r+0xa54>
   24b60:	9408      	str	r4, [sp, #32]
   24b62:	2b01      	cmp	r3, #1
   24b64:	d100      	bne.n	24b68 <_svfprintf_r+0x3f0>
   24b66:	e3e5      	b.n	25334 <_svfprintf_r+0xbbc>
   24b68:	2b02      	cmp	r3, #2
   24b6a:	d000      	beq.n	24b6e <_svfprintf_r+0x3f6>
   24b6c:	e362      	b.n	25234 <_svfprintf_r+0xabc>
   24b6e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   24b70:	200f      	movs	r0, #15
   24b72:	46a1      	mov	r9, r4
   24b74:	46b4      	mov	ip, r6
   24b76:	ab32      	add	r3, sp, #200	; 0xc8
   24b78:	0019      	movs	r1, r3
   24b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24b7e:	0004      	movs	r4, r0
   24b80:	464d      	mov	r5, r9
   24b82:	4014      	ands	r4, r2
   24b84:	5d2c      	ldrb	r4, [r5, r4]
   24b86:	071e      	lsls	r6, r3, #28
   24b88:	0915      	lsrs	r5, r2, #4
   24b8a:	3901      	subs	r1, #1
   24b8c:	432e      	orrs	r6, r5
   24b8e:	700c      	strb	r4, [r1, #0]
   24b90:	091c      	lsrs	r4, r3, #4
   24b92:	0023      	movs	r3, r4
   24b94:	0034      	movs	r4, r6
   24b96:	0032      	movs	r2, r6
   24b98:	431c      	orrs	r4, r3
   24b9a:	d1f0      	bne.n	24b7e <_svfprintf_r+0x406>
   24b9c:	920c      	str	r2, [sp, #48]	; 0x30
   24b9e:	930d      	str	r3, [sp, #52]	; 0x34
   24ba0:	ab32      	add	r3, sp, #200	; 0xc8
   24ba2:	1a5b      	subs	r3, r3, r1
   24ba4:	9111      	str	r1, [sp, #68]	; 0x44
   24ba6:	4666      	mov	r6, ip
   24ba8:	930e      	str	r3, [sp, #56]	; 0x38
   24baa:	e6f5      	b.n	24998 <_svfprintf_r+0x220>
   24bac:	0002cf68 	.word	0x0002cf68
   24bb0:	0002d110 	.word	0x0002d110
   24bb4:	7fefffff 	.word	0x7fefffff
   24bb8:	0002d0cc 	.word	0x0002d0cc
   24bbc:	9312      	str	r3, [sp, #72]	; 0x48
   24bbe:	2310      	movs	r3, #16
   24bc0:	431c      	orrs	r4, r3
   24bc2:	468b      	mov	fp, r1
   24bc4:	06a3      	lsls	r3, r4, #26
   24bc6:	d500      	bpl.n	24bca <_svfprintf_r+0x452>
   24bc8:	e111      	b.n	24dee <_svfprintf_r+0x676>
   24bca:	06e3      	lsls	r3, r4, #27
   24bcc:	d501      	bpl.n	24bd2 <_svfprintf_r+0x45a>
   24bce:	f000 fc31 	bl	25434 <_svfprintf_r+0xcbc>
   24bd2:	0663      	lsls	r3, r4, #25
   24bd4:	d401      	bmi.n	24bda <_svfprintf_r+0x462>
   24bd6:	f000 fc2d 	bl	25434 <_svfprintf_r+0xcbc>
   24bda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24bdc:	881a      	ldrh	r2, [r3, #0]
   24bde:	920c      	str	r2, [sp, #48]	; 0x30
   24be0:	2200      	movs	r2, #0
   24be2:	3304      	adds	r3, #4
   24be4:	920d      	str	r2, [sp, #52]	; 0x34
   24be6:	930f      	str	r3, [sp, #60]	; 0x3c
   24be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24bea:	2301      	movs	r3, #1
   24bec:	e7ad      	b.n	24b4a <_svfprintf_r+0x3d2>
   24bee:	468b      	mov	fp, r1
   24bf0:	4641      	mov	r1, r8
   24bf2:	9312      	str	r3, [sp, #72]	; 0x48
   24bf4:	2900      	cmp	r1, #0
   24bf6:	d001      	beq.n	24bfc <_svfprintf_r+0x484>
   24bf8:	f001 f890 	bl	25d1c <_svfprintf_r+0x15a4>
   24bfc:	4bb8      	ldr	r3, [pc, #736]	; (24ee0 <_svfprintf_r+0x768>)
   24bfe:	9317      	str	r3, [sp, #92]	; 0x5c
   24c00:	06a3      	lsls	r3, r4, #26
   24c02:	d500      	bpl.n	24c06 <_svfprintf_r+0x48e>
   24c04:	e0ab      	b.n	24d5e <_svfprintf_r+0x5e6>
   24c06:	06e3      	lsls	r3, r4, #27
   24c08:	d501      	bpl.n	24c0e <_svfprintf_r+0x496>
   24c0a:	f000 fc07 	bl	2541c <_svfprintf_r+0xca4>
   24c0e:	0663      	lsls	r3, r4, #25
   24c10:	d401      	bmi.n	24c16 <_svfprintf_r+0x49e>
   24c12:	f000 fc03 	bl	2541c <_svfprintf_r+0xca4>
   24c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24c18:	881a      	ldrh	r2, [r3, #0]
   24c1a:	920c      	str	r2, [sp, #48]	; 0x30
   24c1c:	2200      	movs	r2, #0
   24c1e:	3304      	adds	r3, #4
   24c20:	920d      	str	r2, [sp, #52]	; 0x34
   24c22:	930f      	str	r3, [sp, #60]	; 0x3c
   24c24:	07e3      	lsls	r3, r4, #31
   24c26:	d400      	bmi.n	24c2a <_svfprintf_r+0x4b2>
   24c28:	e0a9      	b.n	24d7e <_svfprintf_r+0x606>
   24c2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   24c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24c2e:	000b      	movs	r3, r1
   24c30:	4313      	orrs	r3, r2
   24c32:	001a      	movs	r2, r3
   24c34:	2302      	movs	r3, #2
   24c36:	2a00      	cmp	r2, #0
   24c38:	d100      	bne.n	24c3c <_svfprintf_r+0x4c4>
   24c3a:	e786      	b.n	24b4a <_svfprintf_r+0x3d2>
   24c3c:	2030      	movs	r0, #48	; 0x30
   24c3e:	a91e      	add	r1, sp, #120	; 0x78
   24c40:	7008      	strb	r0, [r1, #0]
   24c42:	2548      	movs	r5, #72	; 0x48
   24c44:	4668      	mov	r0, sp
   24c46:	1940      	adds	r0, r0, r5
   24c48:	7800      	ldrb	r0, [r0, #0]
   24c4a:	431c      	orrs	r4, r3
   24c4c:	7048      	strb	r0, [r1, #1]
   24c4e:	e77c      	b.n	24b4a <_svfprintf_r+0x3d2>
   24c50:	468b      	mov	fp, r1
   24c52:	4641      	mov	r1, r8
   24c54:	2900      	cmp	r1, #0
   24c56:	d001      	beq.n	24c5c <_svfprintf_r+0x4e4>
   24c58:	f001 f883 	bl	25d62 <_svfprintf_r+0x15ea>
   24c5c:	06a3      	lsls	r3, r4, #26
   24c5e:	d501      	bpl.n	24c64 <_svfprintf_r+0x4ec>
   24c60:	f000 fde9 	bl	25836 <_svfprintf_r+0x10be>
   24c64:	06e3      	lsls	r3, r4, #27
   24c66:	d501      	bpl.n	24c6c <_svfprintf_r+0x4f4>
   24c68:	f000 fd9b 	bl	257a2 <_svfprintf_r+0x102a>
   24c6c:	0663      	lsls	r3, r4, #25
   24c6e:	d401      	bmi.n	24c74 <_svfprintf_r+0x4fc>
   24c70:	f000 fd97 	bl	257a2 <_svfprintf_r+0x102a>
   24c74:	4669      	mov	r1, sp
   24c76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24c78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   24c7a:	681a      	ldr	r2, [r3, #0]
   24c7c:	3304      	adds	r3, #4
   24c7e:	9207      	str	r2, [sp, #28]
   24c80:	8011      	strh	r1, [r2, #0]
   24c82:	930f      	str	r3, [sp, #60]	; 0x3c
   24c84:	e5a3      	b.n	247ce <_svfprintf_r+0x56>
   24c86:	464b      	mov	r3, r9
   24c88:	431c      	orrs	r4, r3
   24c8a:	780b      	ldrb	r3, [r1, #0]
   24c8c:	e5d8      	b.n	24840 <_svfprintf_r+0xc8>
   24c8e:	9312      	str	r3, [sp, #72]	; 0x48
   24c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24c92:	468b      	mov	fp, r1
   24c94:	1d1d      	adds	r5, r3, #4
   24c96:	681b      	ldr	r3, [r3, #0]
   24c98:	a916      	add	r1, sp, #88	; 0x58
   24c9a:	001a      	movs	r2, r3
   24c9c:	9311      	str	r3, [sp, #68]	; 0x44
   24c9e:	2300      	movs	r3, #0
   24ca0:	77cb      	strb	r3, [r1, #31]
   24ca2:	2a00      	cmp	r2, #0
   24ca4:	d101      	bne.n	24caa <_svfprintf_r+0x532>
   24ca6:	f000 fefb 	bl	25aa0 <_svfprintf_r+0x1328>
   24caa:	4653      	mov	r3, sl
   24cac:	3301      	adds	r3, #1
   24cae:	d101      	bne.n	24cb4 <_svfprintf_r+0x53c>
   24cb0:	f000 fe38 	bl	25924 <_svfprintf_r+0x11ac>
   24cb4:	4652      	mov	r2, sl
   24cb6:	2100      	movs	r1, #0
   24cb8:	9811      	ldr	r0, [sp, #68]	; 0x44
   24cba:	f004 fca5 	bl	29608 <memchr>
   24cbe:	2800      	cmp	r0, #0
   24cc0:	d101      	bne.n	24cc6 <_svfprintf_r+0x54e>
   24cc2:	f000 ff54 	bl	25b6e <_svfprintf_r+0x13f6>
   24cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24cc8:	1ac3      	subs	r3, r0, r3
   24cca:	001a      	movs	r2, r3
   24ccc:	930e      	str	r3, [sp, #56]	; 0x38
   24cce:	43db      	mvns	r3, r3
   24cd0:	17db      	asrs	r3, r3, #31
   24cd2:	401a      	ands	r2, r3
   24cd4:	ab16      	add	r3, sp, #88	; 0x58
   24cd6:	7fdb      	ldrb	r3, [r3, #31]
   24cd8:	9207      	str	r2, [sp, #28]
   24cda:	4698      	mov	r8, r3
   24cdc:	2300      	movs	r3, #0
   24cde:	950f      	str	r5, [sp, #60]	; 0x3c
   24ce0:	9408      	str	r4, [sp, #32]
   24ce2:	469a      	mov	sl, r3
   24ce4:	9313      	str	r3, [sp, #76]	; 0x4c
   24ce6:	e65f      	b.n	249a8 <_svfprintf_r+0x230>
   24ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24cea:	9312      	str	r3, [sp, #72]	; 0x48
   24cec:	6813      	ldr	r3, [r2, #0]
   24cee:	ad28      	add	r5, sp, #160	; 0xa0
   24cf0:	9307      	str	r3, [sp, #28]
   24cf2:	466b      	mov	r3, sp
   24cf4:	7f1b      	ldrb	r3, [r3, #28]
   24cf6:	468b      	mov	fp, r1
   24cf8:	702b      	strb	r3, [r5, #0]
   24cfa:	2300      	movs	r3, #0
   24cfc:	a916      	add	r1, sp, #88	; 0x58
   24cfe:	77cb      	strb	r3, [r1, #31]
   24d00:	0013      	movs	r3, r2
   24d02:	3304      	adds	r3, #4
   24d04:	930f      	str	r3, [sp, #60]	; 0x3c
   24d06:	2300      	movs	r3, #0
   24d08:	9408      	str	r4, [sp, #32]
   24d0a:	4698      	mov	r8, r3
   24d0c:	3301      	adds	r3, #1
   24d0e:	9307      	str	r3, [sp, #28]
   24d10:	930e      	str	r3, [sp, #56]	; 0x38
   24d12:	2300      	movs	r3, #0
   24d14:	9511      	str	r5, [sp, #68]	; 0x44
   24d16:	469a      	mov	sl, r3
   24d18:	9313      	str	r3, [sp, #76]	; 0x4c
   24d1a:	e64b      	b.n	249b4 <_svfprintf_r+0x23c>
   24d1c:	468b      	mov	fp, r1
   24d1e:	4641      	mov	r1, r8
   24d20:	9312      	str	r3, [sp, #72]	; 0x48
   24d22:	2900      	cmp	r1, #0
   24d24:	d100      	bne.n	24d28 <_svfprintf_r+0x5b0>
   24d26:	e5f4      	b.n	24912 <_svfprintf_r+0x19a>
   24d28:	ab16      	add	r3, sp, #88	; 0x58
   24d2a:	77d8      	strb	r0, [r3, #31]
   24d2c:	e5f1      	b.n	24912 <_svfprintf_r+0x19a>
   24d2e:	4663      	mov	r3, ip
   24d30:	431c      	orrs	r4, r3
   24d32:	780b      	ldrb	r3, [r1, #0]
   24d34:	e584      	b.n	24840 <_svfprintf_r+0xc8>
   24d36:	780b      	ldrb	r3, [r1, #0]
   24d38:	2b6c      	cmp	r3, #108	; 0x6c
   24d3a:	d101      	bne.n	24d40 <_svfprintf_r+0x5c8>
   24d3c:	f000 fd86 	bl	2584c <_svfprintf_r+0x10d4>
   24d40:	2210      	movs	r2, #16
   24d42:	4314      	orrs	r4, r2
   24d44:	e57c      	b.n	24840 <_svfprintf_r+0xc8>
   24d46:	468b      	mov	fp, r1
   24d48:	4641      	mov	r1, r8
   24d4a:	9312      	str	r3, [sp, #72]	; 0x48
   24d4c:	2900      	cmp	r1, #0
   24d4e:	d001      	beq.n	24d54 <_svfprintf_r+0x5dc>
   24d50:	f000 ffe8 	bl	25d24 <_svfprintf_r+0x15ac>
   24d54:	4b63      	ldr	r3, [pc, #396]	; (24ee4 <_svfprintf_r+0x76c>)
   24d56:	9317      	str	r3, [sp, #92]	; 0x5c
   24d58:	06a3      	lsls	r3, r4, #26
   24d5a:	d400      	bmi.n	24d5e <_svfprintf_r+0x5e6>
   24d5c:	e753      	b.n	24c06 <_svfprintf_r+0x48e>
   24d5e:	2207      	movs	r2, #7
   24d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24d62:	3307      	adds	r3, #7
   24d64:	4393      	bics	r3, r2
   24d66:	3201      	adds	r2, #1
   24d68:	4694      	mov	ip, r2
   24d6a:	449c      	add	ip, r3
   24d6c:	4662      	mov	r2, ip
   24d6e:	920f      	str	r2, [sp, #60]	; 0x3c
   24d70:	681a      	ldr	r2, [r3, #0]
   24d72:	685b      	ldr	r3, [r3, #4]
   24d74:	920c      	str	r2, [sp, #48]	; 0x30
   24d76:	930d      	str	r3, [sp, #52]	; 0x34
   24d78:	07e3      	lsls	r3, r4, #31
   24d7a:	d500      	bpl.n	24d7e <_svfprintf_r+0x606>
   24d7c:	e755      	b.n	24c2a <_svfprintf_r+0x4b2>
   24d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
   24d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24d82:	0008      	movs	r0, r1
   24d84:	4310      	orrs	r0, r2
   24d86:	2302      	movs	r3, #2
   24d88:	0002      	movs	r2, r0
   24d8a:	e6de      	b.n	24b4a <_svfprintf_r+0x3d2>
   24d8c:	468b      	mov	fp, r1
   24d8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24d90:	2230      	movs	r2, #48	; 0x30
   24d92:	680b      	ldr	r3, [r1, #0]
   24d94:	930c      	str	r3, [sp, #48]	; 0x30
   24d96:	2300      	movs	r3, #0
   24d98:	930d      	str	r3, [sp, #52]	; 0x34
   24d9a:	3302      	adds	r3, #2
   24d9c:	431c      	orrs	r4, r3
   24d9e:	ab1e      	add	r3, sp, #120	; 0x78
   24da0:	701a      	strb	r2, [r3, #0]
   24da2:	3248      	adds	r2, #72	; 0x48
   24da4:	705a      	strb	r2, [r3, #1]
   24da6:	000b      	movs	r3, r1
   24da8:	3304      	adds	r3, #4
   24daa:	930f      	str	r3, [sp, #60]	; 0x3c
   24dac:	4b4d      	ldr	r3, [pc, #308]	; (24ee4 <_svfprintf_r+0x76c>)
   24dae:	9212      	str	r2, [sp, #72]	; 0x48
   24db0:	9317      	str	r3, [sp, #92]	; 0x5c
   24db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24db4:	2302      	movs	r3, #2
   24db6:	e6c8      	b.n	24b4a <_svfprintf_r+0x3d2>
   24db8:	2301      	movs	r3, #1
   24dba:	431c      	orrs	r4, r3
   24dbc:	780b      	ldrb	r3, [r1, #0]
   24dbe:	e53f      	b.n	24840 <_svfprintf_r+0xc8>
   24dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24dc2:	1d1a      	adds	r2, r3, #4
   24dc4:	681b      	ldr	r3, [r3, #0]
   24dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   24dc8:	2b00      	cmp	r3, #0
   24dca:	da00      	bge.n	24dce <_svfprintf_r+0x656>
   24dcc:	e542      	b.n	24854 <_svfprintf_r+0xdc>
   24dce:	780b      	ldrb	r3, [r1, #0]
   24dd0:	920f      	str	r2, [sp, #60]	; 0x3c
   24dd2:	e535      	b.n	24840 <_svfprintf_r+0xc8>
   24dd4:	780b      	ldrb	r3, [r1, #0]
   24dd6:	2800      	cmp	r0, #0
   24dd8:	d000      	beq.n	24ddc <_svfprintf_r+0x664>
   24dda:	e531      	b.n	24840 <_svfprintf_r+0xc8>
   24ddc:	2201      	movs	r2, #1
   24dde:	3020      	adds	r0, #32
   24de0:	4690      	mov	r8, r2
   24de2:	e52d      	b.n	24840 <_svfprintf_r+0xc8>
   24de4:	468b      	mov	fp, r1
   24de6:	9312      	str	r3, [sp, #72]	; 0x48
   24de8:	06a3      	lsls	r3, r4, #26
   24dea:	d400      	bmi.n	24dee <_svfprintf_r+0x676>
   24dec:	e6ed      	b.n	24bca <_svfprintf_r+0x452>
   24dee:	2207      	movs	r2, #7
   24df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24df2:	3307      	adds	r3, #7
   24df4:	4393      	bics	r3, r2
   24df6:	3201      	adds	r2, #1
   24df8:	4694      	mov	ip, r2
   24dfa:	449c      	add	ip, r3
   24dfc:	4662      	mov	r2, ip
   24dfe:	920f      	str	r2, [sp, #60]	; 0x3c
   24e00:	681a      	ldr	r2, [r3, #0]
   24e02:	685b      	ldr	r3, [r3, #4]
   24e04:	0011      	movs	r1, r2
   24e06:	001a      	movs	r2, r3
   24e08:	0008      	movs	r0, r1
   24e0a:	4310      	orrs	r0, r2
   24e0c:	910c      	str	r1, [sp, #48]	; 0x30
   24e0e:	920d      	str	r2, [sp, #52]	; 0x34
   24e10:	2301      	movs	r3, #1
   24e12:	0002      	movs	r2, r0
   24e14:	e699      	b.n	24b4a <_svfprintf_r+0x3d2>
   24e16:	468b      	mov	fp, r1
   24e18:	9312      	str	r3, [sp, #72]	; 0x48
   24e1a:	06a3      	lsls	r3, r4, #26
   24e1c:	d400      	bmi.n	24e20 <_svfprintf_r+0x6a8>
   24e1e:	e683      	b.n	24b28 <_svfprintf_r+0x3b0>
   24e20:	2207      	movs	r2, #7
   24e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24e24:	3307      	adds	r3, #7
   24e26:	4393      	bics	r3, r2
   24e28:	3201      	adds	r2, #1
   24e2a:	4694      	mov	ip, r2
   24e2c:	449c      	add	ip, r3
   24e2e:	4662      	mov	r2, ip
   24e30:	920f      	str	r2, [sp, #60]	; 0x3c
   24e32:	681a      	ldr	r2, [r3, #0]
   24e34:	685b      	ldr	r3, [r3, #4]
   24e36:	0011      	movs	r1, r2
   24e38:	001a      	movs	r2, r3
   24e3a:	0008      	movs	r0, r1
   24e3c:	4310      	orrs	r0, r2
   24e3e:	910c      	str	r1, [sp, #48]	; 0x30
   24e40:	920d      	str	r2, [sp, #52]	; 0x34
   24e42:	2300      	movs	r3, #0
   24e44:	0002      	movs	r2, r0
   24e46:	e680      	b.n	24b4a <_svfprintf_r+0x3d2>
   24e48:	468b      	mov	fp, r1
   24e4a:	4641      	mov	r1, r8
   24e4c:	9312      	str	r3, [sp, #72]	; 0x48
   24e4e:	2900      	cmp	r1, #0
   24e50:	d001      	beq.n	24e56 <_svfprintf_r+0x6de>
   24e52:	f000 ff7f 	bl	25d54 <_svfprintf_r+0x15dc>
   24e56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24e58:	2b00      	cmp	r3, #0
   24e5a:	d100      	bne.n	24e5e <_svfprintf_r+0x6e6>
   24e5c:	e50b      	b.n	24876 <_svfprintf_r+0xfe>
   24e5e:	ad28      	add	r5, sp, #160	; 0xa0
   24e60:	702b      	strb	r3, [r5, #0]
   24e62:	2300      	movs	r3, #0
   24e64:	aa16      	add	r2, sp, #88	; 0x58
   24e66:	77d3      	strb	r3, [r2, #31]
   24e68:	9408      	str	r4, [sp, #32]
   24e6a:	e74e      	b.n	24d0a <_svfprintf_r+0x592>
   24e6c:	68bc      	ldr	r4, [r7, #8]
   24e6e:	4643      	mov	r3, r8
   24e70:	2b00      	cmp	r3, #0
   24e72:	d00f      	beq.n	24e94 <_svfprintf_r+0x71c>
   24e74:	aa16      	add	r2, sp, #88	; 0x58
   24e76:	231f      	movs	r3, #31
   24e78:	4694      	mov	ip, r2
   24e7a:	4463      	add	r3, ip
   24e7c:	6033      	str	r3, [r6, #0]
   24e7e:	2301      	movs	r3, #1
   24e80:	6073      	str	r3, [r6, #4]
   24e82:	687b      	ldr	r3, [r7, #4]
   24e84:	3401      	adds	r4, #1
   24e86:	3301      	adds	r3, #1
   24e88:	60bc      	str	r4, [r7, #8]
   24e8a:	607b      	str	r3, [r7, #4]
   24e8c:	2b07      	cmp	r3, #7
   24e8e:	dd00      	ble.n	24e92 <_svfprintf_r+0x71a>
   24e90:	e1b3      	b.n	251fa <_svfprintf_r+0xa82>
   24e92:	3608      	adds	r6, #8
   24e94:	464b      	mov	r3, r9
   24e96:	2b00      	cmp	r3, #0
   24e98:	d00c      	beq.n	24eb4 <_svfprintf_r+0x73c>
   24e9a:	ab1e      	add	r3, sp, #120	; 0x78
   24e9c:	6033      	str	r3, [r6, #0]
   24e9e:	2302      	movs	r3, #2
   24ea0:	6073      	str	r3, [r6, #4]
   24ea2:	687b      	ldr	r3, [r7, #4]
   24ea4:	3402      	adds	r4, #2
   24ea6:	3301      	adds	r3, #1
   24ea8:	60bc      	str	r4, [r7, #8]
   24eaa:	607b      	str	r3, [r7, #4]
   24eac:	2b07      	cmp	r3, #7
   24eae:	dd00      	ble.n	24eb2 <_svfprintf_r+0x73a>
   24eb0:	e1af      	b.n	25212 <_svfprintf_r+0xa9a>
   24eb2:	3608      	adds	r6, #8
   24eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24eb6:	2b80      	cmp	r3, #128	; 0x80
   24eb8:	d100      	bne.n	24ebc <_svfprintf_r+0x744>
   24eba:	e120      	b.n	250fe <_svfprintf_r+0x986>
   24ebc:	4653      	mov	r3, sl
   24ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24ec0:	1a9d      	subs	r5, r3, r2
   24ec2:	2d00      	cmp	r5, #0
   24ec4:	dd3c      	ble.n	24f40 <_svfprintf_r+0x7c8>
   24ec6:	4a08      	ldr	r2, [pc, #32]	; (24ee8 <_svfprintf_r+0x770>)
   24ec8:	687b      	ldr	r3, [r7, #4]
   24eca:	4691      	mov	r9, r2
   24ecc:	2d10      	cmp	r5, #16
   24ece:	dd2c      	ble.n	24f2a <_svfprintf_r+0x7b2>
   24ed0:	2210      	movs	r2, #16
   24ed2:	0021      	movs	r1, r4
   24ed4:	4692      	mov	sl, r2
   24ed6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24ed8:	0032      	movs	r2, r6
   24eda:	002e      	movs	r6, r5
   24edc:	464d      	mov	r5, r9
   24ede:	e009      	b.n	24ef4 <_svfprintf_r+0x77c>
   24ee0:	0002d0dc 	.word	0x0002d0dc
   24ee4:	0002d0f0 	.word	0x0002d0f0
   24ee8:	0002d120 	.word	0x0002d120
   24eec:	3e10      	subs	r6, #16
   24eee:	3208      	adds	r2, #8
   24ef0:	2e10      	cmp	r6, #16
   24ef2:	dd16      	ble.n	24f22 <_svfprintf_r+0x7aa>
   24ef4:	4650      	mov	r0, sl
   24ef6:	3110      	adds	r1, #16
   24ef8:	3301      	adds	r3, #1
   24efa:	6015      	str	r5, [r2, #0]
   24efc:	6050      	str	r0, [r2, #4]
   24efe:	60b9      	str	r1, [r7, #8]
   24f00:	607b      	str	r3, [r7, #4]
   24f02:	2b07      	cmp	r3, #7
   24f04:	ddf2      	ble.n	24eec <_svfprintf_r+0x774>
   24f06:	003a      	movs	r2, r7
   24f08:	9906      	ldr	r1, [sp, #24]
   24f0a:	0020      	movs	r0, r4
   24f0c:	f005 f982 	bl	2a214 <__ssprint_r>
   24f10:	2800      	cmp	r0, #0
   24f12:	d000      	beq.n	24f16 <_svfprintf_r+0x79e>
   24f14:	e4b7      	b.n	24886 <_svfprintf_r+0x10e>
   24f16:	3e10      	subs	r6, #16
   24f18:	68b9      	ldr	r1, [r7, #8]
   24f1a:	687b      	ldr	r3, [r7, #4]
   24f1c:	aa32      	add	r2, sp, #200	; 0xc8
   24f1e:	2e10      	cmp	r6, #16
   24f20:	dce8      	bgt.n	24ef4 <_svfprintf_r+0x77c>
   24f22:	46a9      	mov	r9, r5
   24f24:	000c      	movs	r4, r1
   24f26:	0035      	movs	r5, r6
   24f28:	0016      	movs	r6, r2
   24f2a:	464a      	mov	r2, r9
   24f2c:	1964      	adds	r4, r4, r5
   24f2e:	3301      	adds	r3, #1
   24f30:	6032      	str	r2, [r6, #0]
   24f32:	6075      	str	r5, [r6, #4]
   24f34:	60bc      	str	r4, [r7, #8]
   24f36:	607b      	str	r3, [r7, #4]
   24f38:	2b07      	cmp	r3, #7
   24f3a:	dd00      	ble.n	24f3e <_svfprintf_r+0x7c6>
   24f3c:	e151      	b.n	251e2 <_svfprintf_r+0xa6a>
   24f3e:	3608      	adds	r6, #8
   24f40:	9b08      	ldr	r3, [sp, #32]
   24f42:	05db      	lsls	r3, r3, #23
   24f44:	d500      	bpl.n	24f48 <_svfprintf_r+0x7d0>
   24f46:	e0b6      	b.n	250b6 <_svfprintf_r+0x93e>
   24f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24f4a:	6033      	str	r3, [r6, #0]
   24f4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24f4e:	469c      	mov	ip, r3
   24f50:	6073      	str	r3, [r6, #4]
   24f52:	687b      	ldr	r3, [r7, #4]
   24f54:	4464      	add	r4, ip
   24f56:	3301      	adds	r3, #1
   24f58:	60bc      	str	r4, [r7, #8]
   24f5a:	607b      	str	r3, [r7, #4]
   24f5c:	2b07      	cmp	r3, #7
   24f5e:	dd00      	ble.n	24f62 <_svfprintf_r+0x7ea>
   24f60:	e09d      	b.n	2509e <_svfprintf_r+0x926>
   24f62:	3608      	adds	r6, #8
   24f64:	9b08      	ldr	r3, [sp, #32]
   24f66:	075b      	lsls	r3, r3, #29
   24f68:	d541      	bpl.n	24fee <_svfprintf_r+0x876>
   24f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24f6c:	9a07      	ldr	r2, [sp, #28]
   24f6e:	1a9d      	subs	r5, r3, r2
   24f70:	2d00      	cmp	r5, #0
   24f72:	dd3c      	ble.n	24fee <_svfprintf_r+0x876>
   24f74:	4ac4      	ldr	r2, [pc, #784]	; (25288 <_svfprintf_r+0xb10>)
   24f76:	687b      	ldr	r3, [r7, #4]
   24f78:	4690      	mov	r8, r2
   24f7a:	2d10      	cmp	r5, #16
   24f7c:	dd26      	ble.n	24fcc <_svfprintf_r+0x854>
   24f7e:	2210      	movs	r2, #16
   24f80:	0021      	movs	r1, r4
   24f82:	4691      	mov	r9, r2
   24f84:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24f86:	0032      	movs	r2, r6
   24f88:	002e      	movs	r6, r5
   24f8a:	9d06      	ldr	r5, [sp, #24]
   24f8c:	e003      	b.n	24f96 <_svfprintf_r+0x81e>
   24f8e:	3e10      	subs	r6, #16
   24f90:	3208      	adds	r2, #8
   24f92:	2e10      	cmp	r6, #16
   24f94:	dd17      	ble.n	24fc6 <_svfprintf_r+0x84e>
   24f96:	48bc      	ldr	r0, [pc, #752]	; (25288 <_svfprintf_r+0xb10>)
   24f98:	3110      	adds	r1, #16
   24f9a:	6010      	str	r0, [r2, #0]
   24f9c:	4648      	mov	r0, r9
   24f9e:	3301      	adds	r3, #1
   24fa0:	6050      	str	r0, [r2, #4]
   24fa2:	60b9      	str	r1, [r7, #8]
   24fa4:	607b      	str	r3, [r7, #4]
   24fa6:	2b07      	cmp	r3, #7
   24fa8:	ddf1      	ble.n	24f8e <_svfprintf_r+0x816>
   24faa:	003a      	movs	r2, r7
   24fac:	0029      	movs	r1, r5
   24fae:	0020      	movs	r0, r4
   24fb0:	f005 f930 	bl	2a214 <__ssprint_r>
   24fb4:	2800      	cmp	r0, #0
   24fb6:	d000      	beq.n	24fba <_svfprintf_r+0x842>
   24fb8:	e465      	b.n	24886 <_svfprintf_r+0x10e>
   24fba:	3e10      	subs	r6, #16
   24fbc:	68b9      	ldr	r1, [r7, #8]
   24fbe:	687b      	ldr	r3, [r7, #4]
   24fc0:	aa32      	add	r2, sp, #200	; 0xc8
   24fc2:	2e10      	cmp	r6, #16
   24fc4:	dce7      	bgt.n	24f96 <_svfprintf_r+0x81e>
   24fc6:	0035      	movs	r5, r6
   24fc8:	000c      	movs	r4, r1
   24fca:	0016      	movs	r6, r2
   24fcc:	4642      	mov	r2, r8
   24fce:	1964      	adds	r4, r4, r5
   24fd0:	3301      	adds	r3, #1
   24fd2:	c624      	stmia	r6!, {r2, r5}
   24fd4:	60bc      	str	r4, [r7, #8]
   24fd6:	607b      	str	r3, [r7, #4]
   24fd8:	2b07      	cmp	r3, #7
   24fda:	dd08      	ble.n	24fee <_svfprintf_r+0x876>
   24fdc:	003a      	movs	r2, r7
   24fde:	9906      	ldr	r1, [sp, #24]
   24fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
   24fe2:	f005 f917 	bl	2a214 <__ssprint_r>
   24fe6:	2800      	cmp	r0, #0
   24fe8:	d000      	beq.n	24fec <_svfprintf_r+0x874>
   24fea:	e44c      	b.n	24886 <_svfprintf_r+0x10e>
   24fec:	68bc      	ldr	r4, [r7, #8]
   24fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24ff0:	9907      	ldr	r1, [sp, #28]
   24ff2:	428b      	cmp	r3, r1
   24ff4:	da00      	bge.n	24ff8 <_svfprintf_r+0x880>
   24ff6:	000b      	movs	r3, r1
   24ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   24ffa:	4694      	mov	ip, r2
   24ffc:	449c      	add	ip, r3
   24ffe:	4663      	mov	r3, ip
   25000:	930a      	str	r3, [sp, #40]	; 0x28
   25002:	2c00      	cmp	r4, #0
   25004:	d000      	beq.n	25008 <_svfprintf_r+0x890>
   25006:	e0d6      	b.n	251b6 <_svfprintf_r+0xa3e>
   25008:	2300      	movs	r3, #0
   2500a:	ae32      	add	r6, sp, #200	; 0xc8
   2500c:	607b      	str	r3, [r7, #4]
   2500e:	f7ff fbde 	bl	247ce <_svfprintf_r+0x56>
   25012:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25014:	2b01      	cmp	r3, #1
   25016:	dc00      	bgt.n	2501a <_svfprintf_r+0x8a2>
   25018:	e0ae      	b.n	25178 <_svfprintf_r+0xa00>
   2501a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2501c:	3401      	adds	r4, #1
   2501e:	6033      	str	r3, [r6, #0]
   25020:	2301      	movs	r3, #1
   25022:	6073      	str	r3, [r6, #4]
   25024:	687b      	ldr	r3, [r7, #4]
   25026:	60bc      	str	r4, [r7, #8]
   25028:	3301      	adds	r3, #1
   2502a:	607b      	str	r3, [r7, #4]
   2502c:	2b07      	cmp	r3, #7
   2502e:	dd00      	ble.n	25032 <_svfprintf_r+0x8ba>
   25030:	e2df      	b.n	255f2 <_svfprintf_r+0xe7a>
   25032:	3608      	adds	r6, #8
   25034:	9a19      	ldr	r2, [sp, #100]	; 0x64
   25036:	3301      	adds	r3, #1
   25038:	6032      	str	r2, [r6, #0]
   2503a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2503c:	4698      	mov	r8, r3
   2503e:	4694      	mov	ip, r2
   25040:	4464      	add	r4, ip
   25042:	6072      	str	r2, [r6, #4]
   25044:	60bc      	str	r4, [r7, #8]
   25046:	607b      	str	r3, [r7, #4]
   25048:	2b07      	cmp	r3, #7
   2504a:	dd00      	ble.n	2504e <_svfprintf_r+0x8d6>
   2504c:	e2de      	b.n	2560c <_svfprintf_r+0xe94>
   2504e:	3608      	adds	r6, #8
   25050:	2200      	movs	r2, #0
   25052:	2300      	movs	r3, #0
   25054:	9816      	ldr	r0, [sp, #88]	; 0x58
   25056:	9915      	ldr	r1, [sp, #84]	; 0x54
   25058:	f7fc f98c 	bl	21374 <__aeabi_dcmpeq>
   2505c:	2800      	cmp	r0, #0
   2505e:	d000      	beq.n	25062 <_svfprintf_r+0x8ea>
   25060:	e1a4      	b.n	253ac <_svfprintf_r+0xc34>
   25062:	9d11      	ldr	r5, [sp, #68]	; 0x44
   25064:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25066:	3501      	adds	r5, #1
   25068:	3b01      	subs	r3, #1
   2506a:	6035      	str	r5, [r6, #0]
   2506c:	6073      	str	r3, [r6, #4]
   2506e:	18e4      	adds	r4, r4, r3
   25070:	2301      	movs	r3, #1
   25072:	469c      	mov	ip, r3
   25074:	44e0      	add	r8, ip
   25076:	4643      	mov	r3, r8
   25078:	60bc      	str	r4, [r7, #8]
   2507a:	607b      	str	r3, [r7, #4]
   2507c:	2b07      	cmp	r3, #7
   2507e:	dd00      	ble.n	25082 <_svfprintf_r+0x90a>
   25080:	e08b      	b.n	2519a <_svfprintf_r+0xa22>
   25082:	3608      	adds	r6, #8
   25084:	ab21      	add	r3, sp, #132	; 0x84
   25086:	6033      	str	r3, [r6, #0]
   25088:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2508a:	469c      	mov	ip, r3
   2508c:	6073      	str	r3, [r6, #4]
   2508e:	4643      	mov	r3, r8
   25090:	4464      	add	r4, ip
   25092:	3301      	adds	r3, #1
   25094:	60bc      	str	r4, [r7, #8]
   25096:	607b      	str	r3, [r7, #4]
   25098:	2b07      	cmp	r3, #7
   2509a:	dc00      	bgt.n	2509e <_svfprintf_r+0x926>
   2509c:	e761      	b.n	24f62 <_svfprintf_r+0x7ea>
   2509e:	003a      	movs	r2, r7
   250a0:	9906      	ldr	r1, [sp, #24]
   250a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   250a4:	f005 f8b6 	bl	2a214 <__ssprint_r>
   250a8:	2800      	cmp	r0, #0
   250aa:	d001      	beq.n	250b0 <_svfprintf_r+0x938>
   250ac:	f7ff fbeb 	bl	24886 <_svfprintf_r+0x10e>
   250b0:	68bc      	ldr	r4, [r7, #8]
   250b2:	ae32      	add	r6, sp, #200	; 0xc8
   250b4:	e756      	b.n	24f64 <_svfprintf_r+0x7ec>
   250b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   250b8:	2b65      	cmp	r3, #101	; 0x65
   250ba:	ddaa      	ble.n	25012 <_svfprintf_r+0x89a>
   250bc:	2200      	movs	r2, #0
   250be:	2300      	movs	r3, #0
   250c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   250c2:	9915      	ldr	r1, [sp, #84]	; 0x54
   250c4:	f7fc f956 	bl	21374 <__aeabi_dcmpeq>
   250c8:	2800      	cmp	r0, #0
   250ca:	d100      	bne.n	250ce <_svfprintf_r+0x956>
   250cc:	e0e2      	b.n	25294 <_svfprintf_r+0xb1c>
   250ce:	4b6f      	ldr	r3, [pc, #444]	; (2528c <_svfprintf_r+0xb14>)
   250d0:	3401      	adds	r4, #1
   250d2:	6033      	str	r3, [r6, #0]
   250d4:	2301      	movs	r3, #1
   250d6:	6073      	str	r3, [r6, #4]
   250d8:	687b      	ldr	r3, [r7, #4]
   250da:	60bc      	str	r4, [r7, #8]
   250dc:	3301      	adds	r3, #1
   250de:	607b      	str	r3, [r7, #4]
   250e0:	2b07      	cmp	r3, #7
   250e2:	dd00      	ble.n	250e6 <_svfprintf_r+0x96e>
   250e4:	e366      	b.n	257b4 <_svfprintf_r+0x103c>
   250e6:	3608      	adds	r6, #8
   250e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   250ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   250ec:	4293      	cmp	r3, r2
   250ee:	da00      	bge.n	250f2 <_svfprintf_r+0x97a>
   250f0:	e1a4      	b.n	2543c <_svfprintf_r+0xcc4>
   250f2:	9b08      	ldr	r3, [sp, #32]
   250f4:	07db      	lsls	r3, r3, #31
   250f6:	d500      	bpl.n	250fa <_svfprintf_r+0x982>
   250f8:	e1a0      	b.n	2543c <_svfprintf_r+0xcc4>
   250fa:	68bc      	ldr	r4, [r7, #8]
   250fc:	e732      	b.n	24f64 <_svfprintf_r+0x7ec>
   250fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25100:	9a07      	ldr	r2, [sp, #28]
   25102:	1a9d      	subs	r5, r3, r2
   25104:	2d00      	cmp	r5, #0
   25106:	dc00      	bgt.n	2510a <_svfprintf_r+0x992>
   25108:	e6d8      	b.n	24ebc <_svfprintf_r+0x744>
   2510a:	4a61      	ldr	r2, [pc, #388]	; (25290 <_svfprintf_r+0xb18>)
   2510c:	687b      	ldr	r3, [r7, #4]
   2510e:	4691      	mov	r9, r2
   25110:	2d10      	cmp	r5, #16
   25112:	dd25      	ble.n	25160 <_svfprintf_r+0x9e8>
   25114:	2210      	movs	r2, #16
   25116:	0021      	movs	r1, r4
   25118:	4690      	mov	r8, r2
   2511a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2511c:	0032      	movs	r2, r6
   2511e:	464e      	mov	r6, r9
   25120:	e003      	b.n	2512a <_svfprintf_r+0x9b2>
   25122:	3d10      	subs	r5, #16
   25124:	3208      	adds	r2, #8
   25126:	2d10      	cmp	r5, #16
   25128:	dd17      	ble.n	2515a <_svfprintf_r+0x9e2>
   2512a:	4640      	mov	r0, r8
   2512c:	3110      	adds	r1, #16
   2512e:	3301      	adds	r3, #1
   25130:	6016      	str	r6, [r2, #0]
   25132:	6050      	str	r0, [r2, #4]
   25134:	60b9      	str	r1, [r7, #8]
   25136:	607b      	str	r3, [r7, #4]
   25138:	2b07      	cmp	r3, #7
   2513a:	ddf2      	ble.n	25122 <_svfprintf_r+0x9aa>
   2513c:	003a      	movs	r2, r7
   2513e:	9906      	ldr	r1, [sp, #24]
   25140:	0020      	movs	r0, r4
   25142:	f005 f867 	bl	2a214 <__ssprint_r>
   25146:	2800      	cmp	r0, #0
   25148:	d001      	beq.n	2514e <_svfprintf_r+0x9d6>
   2514a:	f7ff fb9c 	bl	24886 <_svfprintf_r+0x10e>
   2514e:	3d10      	subs	r5, #16
   25150:	68b9      	ldr	r1, [r7, #8]
   25152:	687b      	ldr	r3, [r7, #4]
   25154:	aa32      	add	r2, sp, #200	; 0xc8
   25156:	2d10      	cmp	r5, #16
   25158:	dce7      	bgt.n	2512a <_svfprintf_r+0x9b2>
   2515a:	46b1      	mov	r9, r6
   2515c:	000c      	movs	r4, r1
   2515e:	0016      	movs	r6, r2
   25160:	464a      	mov	r2, r9
   25162:	1964      	adds	r4, r4, r5
   25164:	3301      	adds	r3, #1
   25166:	6032      	str	r2, [r6, #0]
   25168:	6075      	str	r5, [r6, #4]
   2516a:	60bc      	str	r4, [r7, #8]
   2516c:	607b      	str	r3, [r7, #4]
   2516e:	2b07      	cmp	r3, #7
   25170:	dd00      	ble.n	25174 <_svfprintf_r+0x9fc>
   25172:	e27e      	b.n	25672 <_svfprintf_r+0xefa>
   25174:	3608      	adds	r6, #8
   25176:	e6a1      	b.n	24ebc <_svfprintf_r+0x744>
   25178:	2301      	movs	r3, #1
   2517a:	9a08      	ldr	r2, [sp, #32]
   2517c:	4213      	tst	r3, r2
   2517e:	d000      	beq.n	25182 <_svfprintf_r+0xa0a>
   25180:	e74b      	b.n	2501a <_svfprintf_r+0x8a2>
   25182:	6073      	str	r3, [r6, #4]
   25184:	687b      	ldr	r3, [r7, #4]
   25186:	9a11      	ldr	r2, [sp, #68]	; 0x44
   25188:	3301      	adds	r3, #1
   2518a:	3401      	adds	r4, #1
   2518c:	6032      	str	r2, [r6, #0]
   2518e:	60bc      	str	r4, [r7, #8]
   25190:	4698      	mov	r8, r3
   25192:	607b      	str	r3, [r7, #4]
   25194:	2b07      	cmp	r3, #7
   25196:	dc00      	bgt.n	2519a <_svfprintf_r+0xa22>
   25198:	e773      	b.n	25082 <_svfprintf_r+0x90a>
   2519a:	003a      	movs	r2, r7
   2519c:	9906      	ldr	r1, [sp, #24]
   2519e:	9809      	ldr	r0, [sp, #36]	; 0x24
   251a0:	f005 f838 	bl	2a214 <__ssprint_r>
   251a4:	2800      	cmp	r0, #0
   251a6:	d001      	beq.n	251ac <_svfprintf_r+0xa34>
   251a8:	f7ff fb6d 	bl	24886 <_svfprintf_r+0x10e>
   251ac:	687b      	ldr	r3, [r7, #4]
   251ae:	68bc      	ldr	r4, [r7, #8]
   251b0:	4698      	mov	r8, r3
   251b2:	ae32      	add	r6, sp, #200	; 0xc8
   251b4:	e766      	b.n	25084 <_svfprintf_r+0x90c>
   251b6:	003a      	movs	r2, r7
   251b8:	9906      	ldr	r1, [sp, #24]
   251ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   251bc:	f005 f82a 	bl	2a214 <__ssprint_r>
   251c0:	2800      	cmp	r0, #0
   251c2:	d100      	bne.n	251c6 <_svfprintf_r+0xa4e>
   251c4:	e720      	b.n	25008 <_svfprintf_r+0x890>
   251c6:	f7ff fb5e 	bl	24886 <_svfprintf_r+0x10e>
   251ca:	9c08      	ldr	r4, [sp, #32]
   251cc:	2b01      	cmp	r3, #1
   251ce:	d100      	bne.n	251d2 <_svfprintf_r+0xa5a>
   251d0:	e184      	b.n	254dc <_svfprintf_r+0xd64>
   251d2:	2b02      	cmp	r3, #2
   251d4:	d129      	bne.n	2522a <_svfprintf_r+0xab2>
   251d6:	9408      	str	r4, [sp, #32]
   251d8:	2300      	movs	r3, #0
   251da:	2400      	movs	r4, #0
   251dc:	930c      	str	r3, [sp, #48]	; 0x30
   251de:	940d      	str	r4, [sp, #52]	; 0x34
   251e0:	e4c5      	b.n	24b6e <_svfprintf_r+0x3f6>
   251e2:	003a      	movs	r2, r7
   251e4:	9906      	ldr	r1, [sp, #24]
   251e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   251e8:	f005 f814 	bl	2a214 <__ssprint_r>
   251ec:	2800      	cmp	r0, #0
   251ee:	d001      	beq.n	251f4 <_svfprintf_r+0xa7c>
   251f0:	f7ff fb49 	bl	24886 <_svfprintf_r+0x10e>
   251f4:	68bc      	ldr	r4, [r7, #8]
   251f6:	ae32      	add	r6, sp, #200	; 0xc8
   251f8:	e6a2      	b.n	24f40 <_svfprintf_r+0x7c8>
   251fa:	003a      	movs	r2, r7
   251fc:	9906      	ldr	r1, [sp, #24]
   251fe:	9809      	ldr	r0, [sp, #36]	; 0x24
   25200:	f005 f808 	bl	2a214 <__ssprint_r>
   25204:	2800      	cmp	r0, #0
   25206:	d001      	beq.n	2520c <_svfprintf_r+0xa94>
   25208:	f7ff fb3d 	bl	24886 <_svfprintf_r+0x10e>
   2520c:	68bc      	ldr	r4, [r7, #8]
   2520e:	ae32      	add	r6, sp, #200	; 0xc8
   25210:	e640      	b.n	24e94 <_svfprintf_r+0x71c>
   25212:	003a      	movs	r2, r7
   25214:	9906      	ldr	r1, [sp, #24]
   25216:	9809      	ldr	r0, [sp, #36]	; 0x24
   25218:	f004 fffc 	bl	2a214 <__ssprint_r>
   2521c:	2800      	cmp	r0, #0
   2521e:	d001      	beq.n	25224 <_svfprintf_r+0xaac>
   25220:	f7ff fb31 	bl	24886 <_svfprintf_r+0x10e>
   25224:	68bc      	ldr	r4, [r7, #8]
   25226:	ae32      	add	r6, sp, #200	; 0xc8
   25228:	e644      	b.n	24eb4 <_svfprintf_r+0x73c>
   2522a:	9408      	str	r4, [sp, #32]
   2522c:	2300      	movs	r3, #0
   2522e:	2400      	movs	r4, #0
   25230:	930c      	str	r3, [sp, #48]	; 0x30
   25232:	940d      	str	r4, [sp, #52]	; 0x34
   25234:	980c      	ldr	r0, [sp, #48]	; 0x30
   25236:	990d      	ldr	r1, [sp, #52]	; 0x34
   25238:	465b      	mov	r3, fp
   2523a:	aa32      	add	r2, sp, #200	; 0xc8
   2523c:	9307      	str	r3, [sp, #28]
   2523e:	4691      	mov	r9, r2
   25240:	46b3      	mov	fp, r6
   25242:	e000      	b.n	25246 <_svfprintf_r+0xace>
   25244:	46a1      	mov	r9, r4
   25246:	074a      	lsls	r2, r1, #29
   25248:	4694      	mov	ip, r2
   2524a:	464b      	mov	r3, r9
   2524c:	4665      	mov	r5, ip
   2524e:	1e5c      	subs	r4, r3, #1
   25250:	08c6      	lsrs	r6, r0, #3
   25252:	2307      	movs	r3, #7
   25254:	08ca      	lsrs	r2, r1, #3
   25256:	4335      	orrs	r5, r6
   25258:	0011      	movs	r1, r2
   2525a:	002a      	movs	r2, r5
   2525c:	4003      	ands	r3, r0
   2525e:	3330      	adds	r3, #48	; 0x30
   25260:	7023      	strb	r3, [r4, #0]
   25262:	0028      	movs	r0, r5
   25264:	430a      	orrs	r2, r1
   25266:	d1ed      	bne.n	25244 <_svfprintf_r+0xacc>
   25268:	900c      	str	r0, [sp, #48]	; 0x30
   2526a:	910d      	str	r1, [sp, #52]	; 0x34
   2526c:	9907      	ldr	r1, [sp, #28]
   2526e:	465e      	mov	r6, fp
   25270:	468b      	mov	fp, r1
   25272:	9908      	ldr	r1, [sp, #32]
   25274:	464a      	mov	r2, r9
   25276:	9411      	str	r4, [sp, #68]	; 0x44
   25278:	07c9      	lsls	r1, r1, #31
   2527a:	d500      	bpl.n	2527e <_svfprintf_r+0xb06>
   2527c:	e13d      	b.n	254fa <_svfprintf_r+0xd82>
   2527e:	ab32      	add	r3, sp, #200	; 0xc8
   25280:	1b1b      	subs	r3, r3, r4
   25282:	930e      	str	r3, [sp, #56]	; 0x38
   25284:	f7ff fb88 	bl	24998 <_svfprintf_r+0x220>
   25288:	0002d110 	.word	0x0002d110
   2528c:	0002d10c 	.word	0x0002d10c
   25290:	0002d120 	.word	0x0002d120
   25294:	981f      	ldr	r0, [sp, #124]	; 0x7c
   25296:	2800      	cmp	r0, #0
   25298:	dc00      	bgt.n	2529c <_svfprintf_r+0xb24>
   2529a:	e296      	b.n	257ca <_svfprintf_r+0x1052>
   2529c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2529e:	9914      	ldr	r1, [sp, #80]	; 0x50
   252a0:	0013      	movs	r3, r2
   252a2:	4690      	mov	r8, r2
   252a4:	428b      	cmp	r3, r1
   252a6:	dd00      	ble.n	252aa <_svfprintf_r+0xb32>
   252a8:	4688      	mov	r8, r1
   252aa:	4643      	mov	r3, r8
   252ac:	2b00      	cmp	r3, #0
   252ae:	dd0c      	ble.n	252ca <_svfprintf_r+0xb52>
   252b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   252b2:	4444      	add	r4, r8
   252b4:	6033      	str	r3, [r6, #0]
   252b6:	4643      	mov	r3, r8
   252b8:	6073      	str	r3, [r6, #4]
   252ba:	687b      	ldr	r3, [r7, #4]
   252bc:	60bc      	str	r4, [r7, #8]
   252be:	3301      	adds	r3, #1
   252c0:	607b      	str	r3, [r7, #4]
   252c2:	2b07      	cmp	r3, #7
   252c4:	dd00      	ble.n	252c8 <_svfprintf_r+0xb50>
   252c6:	e3b7      	b.n	25a38 <_svfprintf_r+0x12c0>
   252c8:	3608      	adds	r6, #8
   252ca:	4643      	mov	r3, r8
   252cc:	43db      	mvns	r3, r3
   252ce:	4642      	mov	r2, r8
   252d0:	17db      	asrs	r3, r3, #31
   252d2:	4013      	ands	r3, r2
   252d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   252d6:	1ad3      	subs	r3, r2, r3
   252d8:	4698      	mov	r8, r3
   252da:	2b00      	cmp	r3, #0
   252dc:	dc00      	bgt.n	252e0 <_svfprintf_r+0xb68>
   252de:	e128      	b.n	25532 <_svfprintf_r+0xdba>
   252e0:	2b10      	cmp	r3, #16
   252e2:	dc01      	bgt.n	252e8 <_svfprintf_r+0xb70>
   252e4:	f000 fce7 	bl	25cb6 <_svfprintf_r+0x153e>
   252e8:	4acf      	ldr	r2, [pc, #828]	; (25628 <_svfprintf_r+0xeb0>)
   252ea:	0021      	movs	r1, r4
   252ec:	4691      	mov	r9, r2
   252ee:	2210      	movs	r2, #16
   252f0:	687b      	ldr	r3, [r7, #4]
   252f2:	4692      	mov	sl, r2
   252f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   252f6:	0032      	movs	r2, r6
   252f8:	464c      	mov	r4, r9
   252fa:	4646      	mov	r6, r8
   252fc:	e004      	b.n	25308 <_svfprintf_r+0xb90>
   252fe:	3208      	adds	r2, #8
   25300:	3e10      	subs	r6, #16
   25302:	2e10      	cmp	r6, #16
   25304:	dc00      	bgt.n	25308 <_svfprintf_r+0xb90>
   25306:	e104      	b.n	25512 <_svfprintf_r+0xd9a>
   25308:	4650      	mov	r0, sl
   2530a:	3110      	adds	r1, #16
   2530c:	3301      	adds	r3, #1
   2530e:	6014      	str	r4, [r2, #0]
   25310:	6050      	str	r0, [r2, #4]
   25312:	60b9      	str	r1, [r7, #8]
   25314:	607b      	str	r3, [r7, #4]
   25316:	2b07      	cmp	r3, #7
   25318:	ddf1      	ble.n	252fe <_svfprintf_r+0xb86>
   2531a:	003a      	movs	r2, r7
   2531c:	9906      	ldr	r1, [sp, #24]
   2531e:	0028      	movs	r0, r5
   25320:	f004 ff78 	bl	2a214 <__ssprint_r>
   25324:	2800      	cmp	r0, #0
   25326:	d001      	beq.n	2532c <_svfprintf_r+0xbb4>
   25328:	f7ff faad 	bl	24886 <_svfprintf_r+0x10e>
   2532c:	68b9      	ldr	r1, [r7, #8]
   2532e:	687b      	ldr	r3, [r7, #4]
   25330:	aa32      	add	r2, sp, #200	; 0xc8
   25332:	e7e5      	b.n	25300 <_svfprintf_r+0xb88>
   25334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25336:	2b00      	cmp	r3, #0
   25338:	d100      	bne.n	2533c <_svfprintf_r+0xbc4>
   2533a:	e0ca      	b.n	254d2 <_svfprintf_r+0xd5a>
   2533c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2533e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   25340:	ab32      	add	r3, sp, #200	; 0xc8
   25342:	46b1      	mov	r9, r6
   25344:	001e      	movs	r6, r3
   25346:	0020      	movs	r0, r4
   25348:	0029      	movs	r1, r5
   2534a:	220a      	movs	r2, #10
   2534c:	2300      	movs	r3, #0
   2534e:	f7fc f879 	bl	21444 <__aeabi_uldivmod>
   25352:	3e01      	subs	r6, #1
   25354:	3230      	adds	r2, #48	; 0x30
   25356:	7032      	strb	r2, [r6, #0]
   25358:	2300      	movs	r3, #0
   2535a:	0020      	movs	r0, r4
   2535c:	0029      	movs	r1, r5
   2535e:	220a      	movs	r2, #10
   25360:	f7fc f870 	bl	21444 <__aeabi_uldivmod>
   25364:	0003      	movs	r3, r0
   25366:	0004      	movs	r4, r0
   25368:	000d      	movs	r5, r1
   2536a:	430b      	orrs	r3, r1
   2536c:	d1eb      	bne.n	25346 <_svfprintf_r+0xbce>
   2536e:	0032      	movs	r2, r6
   25370:	ab32      	add	r3, sp, #200	; 0xc8
   25372:	1a9b      	subs	r3, r3, r2
   25374:	9611      	str	r6, [sp, #68]	; 0x44
   25376:	940c      	str	r4, [sp, #48]	; 0x30
   25378:	950d      	str	r5, [sp, #52]	; 0x34
   2537a:	464e      	mov	r6, r9
   2537c:	930e      	str	r3, [sp, #56]	; 0x38
   2537e:	f7ff fb0b 	bl	24998 <_svfprintf_r+0x220>
   25382:	2300      	movs	r3, #0
   25384:	930e      	str	r3, [sp, #56]	; 0x38
   25386:	ab32      	add	r3, sp, #200	; 0xc8
   25388:	9311      	str	r3, [sp, #68]	; 0x44
   2538a:	f7ff fb05 	bl	24998 <_svfprintf_r+0x220>
   2538e:	003a      	movs	r2, r7
   25390:	9906      	ldr	r1, [sp, #24]
   25392:	9809      	ldr	r0, [sp, #36]	; 0x24
   25394:	f004 ff3e 	bl	2a214 <__ssprint_r>
   25398:	2800      	cmp	r0, #0
   2539a:	d001      	beq.n	253a0 <_svfprintf_r+0xc28>
   2539c:	f7ff fa73 	bl	24886 <_svfprintf_r+0x10e>
   253a0:	ab16      	add	r3, sp, #88	; 0x58
   253a2:	7fdb      	ldrb	r3, [r3, #31]
   253a4:	68bc      	ldr	r4, [r7, #8]
   253a6:	4698      	mov	r8, r3
   253a8:	ae32      	add	r6, sp, #200	; 0xc8
   253aa:	e560      	b.n	24e6e <_svfprintf_r+0x6f6>
   253ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
   253ae:	1e5d      	subs	r5, r3, #1
   253b0:	2d00      	cmp	r5, #0
   253b2:	dc00      	bgt.n	253b6 <_svfprintf_r+0xc3e>
   253b4:	e666      	b.n	25084 <_svfprintf_r+0x90c>
   253b6:	4b9c      	ldr	r3, [pc, #624]	; (25628 <_svfprintf_r+0xeb0>)
   253b8:	4699      	mov	r9, r3
   253ba:	2d10      	cmp	r5, #16
   253bc:	dd29      	ble.n	25412 <_svfprintf_r+0xc9a>
   253be:	2310      	movs	r3, #16
   253c0:	0032      	movs	r2, r6
   253c2:	469a      	mov	sl, r3
   253c4:	002e      	movs	r6, r5
   253c6:	0021      	movs	r1, r4
   253c8:	4643      	mov	r3, r8
   253ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   253cc:	464d      	mov	r5, r9
   253ce:	e003      	b.n	253d8 <_svfprintf_r+0xc60>
   253d0:	3e10      	subs	r6, #16
   253d2:	3208      	adds	r2, #8
   253d4:	2e10      	cmp	r6, #16
   253d6:	dd17      	ble.n	25408 <_svfprintf_r+0xc90>
   253d8:	4650      	mov	r0, sl
   253da:	3110      	adds	r1, #16
   253dc:	3301      	adds	r3, #1
   253de:	6015      	str	r5, [r2, #0]
   253e0:	6050      	str	r0, [r2, #4]
   253e2:	60b9      	str	r1, [r7, #8]
   253e4:	607b      	str	r3, [r7, #4]
   253e6:	2b07      	cmp	r3, #7
   253e8:	ddf2      	ble.n	253d0 <_svfprintf_r+0xc58>
   253ea:	003a      	movs	r2, r7
   253ec:	9906      	ldr	r1, [sp, #24]
   253ee:	0020      	movs	r0, r4
   253f0:	f004 ff10 	bl	2a214 <__ssprint_r>
   253f4:	2800      	cmp	r0, #0
   253f6:	d001      	beq.n	253fc <_svfprintf_r+0xc84>
   253f8:	f7ff fa45 	bl	24886 <_svfprintf_r+0x10e>
   253fc:	3e10      	subs	r6, #16
   253fe:	68b9      	ldr	r1, [r7, #8]
   25400:	687b      	ldr	r3, [r7, #4]
   25402:	aa32      	add	r2, sp, #200	; 0xc8
   25404:	2e10      	cmp	r6, #16
   25406:	dce7      	bgt.n	253d8 <_svfprintf_r+0xc60>
   25408:	46a9      	mov	r9, r5
   2540a:	000c      	movs	r4, r1
   2540c:	0035      	movs	r5, r6
   2540e:	4698      	mov	r8, r3
   25410:	0016      	movs	r6, r2
   25412:	464b      	mov	r3, r9
   25414:	6075      	str	r5, [r6, #4]
   25416:	6033      	str	r3, [r6, #0]
   25418:	1964      	adds	r4, r4, r5
   2541a:	e629      	b.n	25070 <_svfprintf_r+0x8f8>
   2541c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2541e:	681a      	ldr	r2, [r3, #0]
   25420:	f7ff fbfb 	bl	24c1a <_svfprintf_r+0x4a2>
   25424:	6813      	ldr	r3, [r2, #0]
   25426:	9307      	str	r3, [sp, #28]
   25428:	f7ff fa82 	bl	24930 <_svfprintf_r+0x1b8>
   2542c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2542e:	681a      	ldr	r2, [r3, #0]
   25430:	f7ff fb84 	bl	24b3c <_svfprintf_r+0x3c4>
   25434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25436:	681a      	ldr	r2, [r3, #0]
   25438:	f7ff fbd1 	bl	24bde <_svfprintf_r+0x466>
   2543c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2543e:	68ba      	ldr	r2, [r7, #8]
   25440:	6033      	str	r3, [r6, #0]
   25442:	9b18      	ldr	r3, [sp, #96]	; 0x60
   25444:	469c      	mov	ip, r3
   25446:	6073      	str	r3, [r6, #4]
   25448:	687b      	ldr	r3, [r7, #4]
   2544a:	4462      	add	r2, ip
   2544c:	3301      	adds	r3, #1
   2544e:	0014      	movs	r4, r2
   25450:	60ba      	str	r2, [r7, #8]
   25452:	607b      	str	r3, [r7, #4]
   25454:	2b07      	cmp	r3, #7
   25456:	dd00      	ble.n	2545a <_svfprintf_r+0xce2>
   25458:	e202      	b.n	25860 <_svfprintf_r+0x10e8>
   2545a:	3608      	adds	r6, #8
   2545c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2545e:	1e5d      	subs	r5, r3, #1
   25460:	2d00      	cmp	r5, #0
   25462:	dc00      	bgt.n	25466 <_svfprintf_r+0xcee>
   25464:	e57e      	b.n	24f64 <_svfprintf_r+0x7ec>
   25466:	4a70      	ldr	r2, [pc, #448]	; (25628 <_svfprintf_r+0xeb0>)
   25468:	687b      	ldr	r3, [r7, #4]
   2546a:	4691      	mov	r9, r2
   2546c:	2d10      	cmp	r5, #16
   2546e:	dd25      	ble.n	254bc <_svfprintf_r+0xd44>
   25470:	2210      	movs	r2, #16
   25472:	0021      	movs	r1, r4
   25474:	4690      	mov	r8, r2
   25476:	9c09      	ldr	r4, [sp, #36]	; 0x24
   25478:	0032      	movs	r2, r6
   2547a:	002e      	movs	r6, r5
   2547c:	464d      	mov	r5, r9
   2547e:	e003      	b.n	25488 <_svfprintf_r+0xd10>
   25480:	3208      	adds	r2, #8
   25482:	3e10      	subs	r6, #16
   25484:	2e10      	cmp	r6, #16
   25486:	dd15      	ble.n	254b4 <_svfprintf_r+0xd3c>
   25488:	4640      	mov	r0, r8
   2548a:	3110      	adds	r1, #16
   2548c:	3301      	adds	r3, #1
   2548e:	6015      	str	r5, [r2, #0]
   25490:	6050      	str	r0, [r2, #4]
   25492:	60b9      	str	r1, [r7, #8]
   25494:	607b      	str	r3, [r7, #4]
   25496:	2b07      	cmp	r3, #7
   25498:	ddf2      	ble.n	25480 <_svfprintf_r+0xd08>
   2549a:	003a      	movs	r2, r7
   2549c:	9906      	ldr	r1, [sp, #24]
   2549e:	0020      	movs	r0, r4
   254a0:	f004 feb8 	bl	2a214 <__ssprint_r>
   254a4:	2800      	cmp	r0, #0
   254a6:	d001      	beq.n	254ac <_svfprintf_r+0xd34>
   254a8:	f7ff f9ed 	bl	24886 <_svfprintf_r+0x10e>
   254ac:	68b9      	ldr	r1, [r7, #8]
   254ae:	687b      	ldr	r3, [r7, #4]
   254b0:	aa32      	add	r2, sp, #200	; 0xc8
   254b2:	e7e6      	b.n	25482 <_svfprintf_r+0xd0a>
   254b4:	46a9      	mov	r9, r5
   254b6:	000c      	movs	r4, r1
   254b8:	0035      	movs	r5, r6
   254ba:	0016      	movs	r6, r2
   254bc:	464a      	mov	r2, r9
   254be:	1964      	adds	r4, r4, r5
   254c0:	3301      	adds	r3, #1
   254c2:	6032      	str	r2, [r6, #0]
   254c4:	6075      	str	r5, [r6, #4]
   254c6:	60bc      	str	r4, [r7, #8]
   254c8:	607b      	str	r3, [r7, #4]
   254ca:	2b07      	cmp	r3, #7
   254cc:	dc00      	bgt.n	254d0 <_svfprintf_r+0xd58>
   254ce:	e548      	b.n	24f62 <_svfprintf_r+0x7ea>
   254d0:	e5e5      	b.n	2509e <_svfprintf_r+0x926>
   254d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   254d4:	2b09      	cmp	r3, #9
   254d6:	d900      	bls.n	254da <_svfprintf_r+0xd62>
   254d8:	e730      	b.n	2533c <_svfprintf_r+0xbc4>
   254da:	9c08      	ldr	r4, [sp, #32]
   254dc:	2227      	movs	r2, #39	; 0x27
   254de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   254e0:	a928      	add	r1, sp, #160	; 0xa0
   254e2:	3330      	adds	r3, #48	; 0x30
   254e4:	548b      	strb	r3, [r1, r2]
   254e6:	2301      	movs	r3, #1
   254e8:	aa16      	add	r2, sp, #88	; 0x58
   254ea:	4694      	mov	ip, r2
   254ec:	930e      	str	r3, [sp, #56]	; 0x38
   254ee:	336e      	adds	r3, #110	; 0x6e
   254f0:	4463      	add	r3, ip
   254f2:	9408      	str	r4, [sp, #32]
   254f4:	9311      	str	r3, [sp, #68]	; 0x44
   254f6:	f7ff fa4f 	bl	24998 <_svfprintf_r+0x220>
   254fa:	2b30      	cmp	r3, #48	; 0x30
   254fc:	d100      	bne.n	25500 <_svfprintf_r+0xd88>
   254fe:	e20b      	b.n	25918 <_svfprintf_r+0x11a0>
   25500:	2330      	movs	r3, #48	; 0x30
   25502:	3a02      	subs	r2, #2
   25504:	7013      	strb	r3, [r2, #0]
   25506:	ab32      	add	r3, sp, #200	; 0xc8
   25508:	1a9b      	subs	r3, r3, r2
   2550a:	930e      	str	r3, [sp, #56]	; 0x38
   2550c:	9211      	str	r2, [sp, #68]	; 0x44
   2550e:	f7ff fa43 	bl	24998 <_svfprintf_r+0x220>
   25512:	46b0      	mov	r8, r6
   25514:	46a1      	mov	r9, r4
   25516:	0016      	movs	r6, r2
   25518:	000c      	movs	r4, r1
   2551a:	464a      	mov	r2, r9
   2551c:	6032      	str	r2, [r6, #0]
   2551e:	4642      	mov	r2, r8
   25520:	4444      	add	r4, r8
   25522:	3301      	adds	r3, #1
   25524:	6072      	str	r2, [r6, #4]
   25526:	60bc      	str	r4, [r7, #8]
   25528:	607b      	str	r3, [r7, #4]
   2552a:	2b07      	cmp	r3, #7
   2552c:	dd00      	ble.n	25530 <_svfprintf_r+0xdb8>
   2552e:	e29c      	b.n	25a6a <_svfprintf_r+0x12f2>
   25530:	3608      	adds	r6, #8
   25532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25534:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25536:	4293      	cmp	r3, r2
   25538:	db4c      	blt.n	255d4 <_svfprintf_r+0xe5c>
   2553a:	9a08      	ldr	r2, [sp, #32]
   2553c:	07d2      	lsls	r2, r2, #31
   2553e:	d449      	bmi.n	255d4 <_svfprintf_r+0xe5c>
   25540:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25542:	9913      	ldr	r1, [sp, #76]	; 0x4c
   25544:	1ad3      	subs	r3, r2, r3
   25546:	1a52      	subs	r2, r2, r1
   25548:	4690      	mov	r8, r2
   2554a:	429a      	cmp	r2, r3
   2554c:	dd00      	ble.n	25550 <_svfprintf_r+0xdd8>
   2554e:	4698      	mov	r8, r3
   25550:	4642      	mov	r2, r8
   25552:	2a00      	cmp	r2, #0
   25554:	dd0f      	ble.n	25576 <_svfprintf_r+0xdfe>
   25556:	9913      	ldr	r1, [sp, #76]	; 0x4c
   25558:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2555a:	468c      	mov	ip, r1
   2555c:	4462      	add	r2, ip
   2555e:	6032      	str	r2, [r6, #0]
   25560:	4642      	mov	r2, r8
   25562:	6072      	str	r2, [r6, #4]
   25564:	687a      	ldr	r2, [r7, #4]
   25566:	4444      	add	r4, r8
   25568:	3201      	adds	r2, #1
   2556a:	60bc      	str	r4, [r7, #8]
   2556c:	607a      	str	r2, [r7, #4]
   2556e:	2a07      	cmp	r2, #7
   25570:	dd00      	ble.n	25574 <_svfprintf_r+0xdfc>
   25572:	e286      	b.n	25a82 <_svfprintf_r+0x130a>
   25574:	3608      	adds	r6, #8
   25576:	4642      	mov	r2, r8
   25578:	43d5      	mvns	r5, r2
   2557a:	17ed      	asrs	r5, r5, #31
   2557c:	4015      	ands	r5, r2
   2557e:	1b5d      	subs	r5, r3, r5
   25580:	2d00      	cmp	r5, #0
   25582:	dc00      	bgt.n	25586 <_svfprintf_r+0xe0e>
   25584:	e4ee      	b.n	24f64 <_svfprintf_r+0x7ec>
   25586:	4a28      	ldr	r2, [pc, #160]	; (25628 <_svfprintf_r+0xeb0>)
   25588:	687b      	ldr	r3, [r7, #4]
   2558a:	4691      	mov	r9, r2
   2558c:	2d10      	cmp	r5, #16
   2558e:	dd95      	ble.n	254bc <_svfprintf_r+0xd44>
   25590:	2210      	movs	r2, #16
   25592:	0021      	movs	r1, r4
   25594:	4690      	mov	r8, r2
   25596:	9c09      	ldr	r4, [sp, #36]	; 0x24
   25598:	0032      	movs	r2, r6
   2559a:	002e      	movs	r6, r5
   2559c:	464d      	mov	r5, r9
   2559e:	e003      	b.n	255a8 <_svfprintf_r+0xe30>
   255a0:	3208      	adds	r2, #8
   255a2:	3e10      	subs	r6, #16
   255a4:	2e10      	cmp	r6, #16
   255a6:	dd85      	ble.n	254b4 <_svfprintf_r+0xd3c>
   255a8:	4640      	mov	r0, r8
   255aa:	3110      	adds	r1, #16
   255ac:	3301      	adds	r3, #1
   255ae:	6015      	str	r5, [r2, #0]
   255b0:	6050      	str	r0, [r2, #4]
   255b2:	60b9      	str	r1, [r7, #8]
   255b4:	607b      	str	r3, [r7, #4]
   255b6:	2b07      	cmp	r3, #7
   255b8:	ddf2      	ble.n	255a0 <_svfprintf_r+0xe28>
   255ba:	003a      	movs	r2, r7
   255bc:	9906      	ldr	r1, [sp, #24]
   255be:	0020      	movs	r0, r4
   255c0:	f004 fe28 	bl	2a214 <__ssprint_r>
   255c4:	2800      	cmp	r0, #0
   255c6:	d001      	beq.n	255cc <_svfprintf_r+0xe54>
   255c8:	f7ff f95d 	bl	24886 <_svfprintf_r+0x10e>
   255cc:	68b9      	ldr	r1, [r7, #8]
   255ce:	687b      	ldr	r3, [r7, #4]
   255d0:	aa32      	add	r2, sp, #200	; 0xc8
   255d2:	e7e6      	b.n	255a2 <_svfprintf_r+0xe2a>
   255d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   255d6:	6032      	str	r2, [r6, #0]
   255d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   255da:	4694      	mov	ip, r2
   255dc:	6072      	str	r2, [r6, #4]
   255de:	687a      	ldr	r2, [r7, #4]
   255e0:	4464      	add	r4, ip
   255e2:	3201      	adds	r2, #1
   255e4:	60bc      	str	r4, [r7, #8]
   255e6:	607a      	str	r2, [r7, #4]
   255e8:	2a07      	cmp	r2, #7
   255ea:	dd00      	ble.n	255ee <_svfprintf_r+0xe76>
   255ec:	e230      	b.n	25a50 <_svfprintf_r+0x12d8>
   255ee:	3608      	adds	r6, #8
   255f0:	e7a6      	b.n	25540 <_svfprintf_r+0xdc8>
   255f2:	003a      	movs	r2, r7
   255f4:	9906      	ldr	r1, [sp, #24]
   255f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   255f8:	f004 fe0c 	bl	2a214 <__ssprint_r>
   255fc:	2800      	cmp	r0, #0
   255fe:	d001      	beq.n	25604 <_svfprintf_r+0xe8c>
   25600:	f7ff f941 	bl	24886 <_svfprintf_r+0x10e>
   25604:	68bc      	ldr	r4, [r7, #8]
   25606:	687b      	ldr	r3, [r7, #4]
   25608:	ae32      	add	r6, sp, #200	; 0xc8
   2560a:	e513      	b.n	25034 <_svfprintf_r+0x8bc>
   2560c:	003a      	movs	r2, r7
   2560e:	9906      	ldr	r1, [sp, #24]
   25610:	9809      	ldr	r0, [sp, #36]	; 0x24
   25612:	f004 fdff 	bl	2a214 <__ssprint_r>
   25616:	2800      	cmp	r0, #0
   25618:	d001      	beq.n	2561e <_svfprintf_r+0xea6>
   2561a:	f7ff f934 	bl	24886 <_svfprintf_r+0x10e>
   2561e:	687b      	ldr	r3, [r7, #4]
   25620:	68bc      	ldr	r4, [r7, #8]
   25622:	4698      	mov	r8, r3
   25624:	ae32      	add	r6, sp, #200	; 0xc8
   25626:	e513      	b.n	25050 <_svfprintf_r+0x8d8>
   25628:	0002d120 	.word	0x0002d120
   2562c:	2307      	movs	r3, #7
   2562e:	3207      	adds	r2, #7
   25630:	439a      	bics	r2, r3
   25632:	3301      	adds	r3, #1
   25634:	469c      	mov	ip, r3
   25636:	4494      	add	ip, r2
   25638:	4663      	mov	r3, ip
   2563a:	930f      	str	r3, [sp, #60]	; 0x3c
   2563c:	6853      	ldr	r3, [r2, #4]
   2563e:	6812      	ldr	r2, [r2, #0]
   25640:	930d      	str	r3, [sp, #52]	; 0x34
   25642:	920c      	str	r2, [sp, #48]	; 0x30
   25644:	2b00      	cmp	r3, #0
   25646:	db01      	blt.n	2564c <_svfprintf_r+0xed4>
   25648:	f7ff f97a 	bl	24940 <_svfprintf_r+0x1c8>
   2564c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2564e:	990d      	ldr	r1, [sp, #52]	; 0x34
   25650:	2300      	movs	r3, #0
   25652:	4242      	negs	r2, r0
   25654:	418b      	sbcs	r3, r1
   25656:	0011      	movs	r1, r2
   25658:	001a      	movs	r2, r3
   2565a:	232d      	movs	r3, #45	; 0x2d
   2565c:	a816      	add	r0, sp, #88	; 0x58
   2565e:	77c3      	strb	r3, [r0, #31]
   25660:	0008      	movs	r0, r1
   25662:	4310      	orrs	r0, r2
   25664:	910c      	str	r1, [sp, #48]	; 0x30
   25666:	920d      	str	r2, [sp, #52]	; 0x34
   25668:	4698      	mov	r8, r3
   2566a:	0002      	movs	r2, r0
   2566c:	3b2c      	subs	r3, #44	; 0x2c
   2566e:	f7ff f970 	bl	24952 <_svfprintf_r+0x1da>
   25672:	003a      	movs	r2, r7
   25674:	9906      	ldr	r1, [sp, #24]
   25676:	9809      	ldr	r0, [sp, #36]	; 0x24
   25678:	f004 fdcc 	bl	2a214 <__ssprint_r>
   2567c:	2800      	cmp	r0, #0
   2567e:	d001      	beq.n	25684 <_svfprintf_r+0xf0c>
   25680:	f7ff f901 	bl	24886 <_svfprintf_r+0x10e>
   25684:	68bc      	ldr	r4, [r7, #8]
   25686:	ae32      	add	r6, sp, #200	; 0xc8
   25688:	e418      	b.n	24ebc <_svfprintf_r+0x744>
   2568a:	9916      	ldr	r1, [sp, #88]	; 0x58
   2568c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2568e:	000a      	movs	r2, r1
   25690:	0008      	movs	r0, r1
   25692:	002b      	movs	r3, r5
   25694:	0029      	movs	r1, r5
   25696:	f005 f929 	bl	2a8ec <__aeabi_dcmpun>
   2569a:	2800      	cmp	r0, #0
   2569c:	d000      	beq.n	256a0 <_svfprintf_r+0xf28>
   2569e:	e2e6      	b.n	25c6e <_svfprintf_r+0x14f6>
   256a0:	4653      	mov	r3, sl
   256a2:	3301      	adds	r3, #1
   256a4:	d100      	bne.n	256a8 <_svfprintf_r+0xf30>
   256a6:	e20d      	b.n	25ac4 <_svfprintf_r+0x134c>
   256a8:	2320      	movs	r3, #32
   256aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   256ac:	439a      	bics	r2, r3
   256ae:	920e      	str	r2, [sp, #56]	; 0x38
   256b0:	2a47      	cmp	r2, #71	; 0x47
   256b2:	d100      	bne.n	256b6 <_svfprintf_r+0xf3e>
   256b4:	e11c      	b.n	258f0 <_svfprintf_r+0x1178>
   256b6:	2380      	movs	r3, #128	; 0x80
   256b8:	005b      	lsls	r3, r3, #1
   256ba:	4323      	orrs	r3, r4
   256bc:	9308      	str	r3, [sp, #32]
   256be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   256c0:	2b00      	cmp	r3, #0
   256c2:	da00      	bge.n	256c6 <_svfprintf_r+0xf4e>
   256c4:	e221      	b.n	25b0a <_svfprintf_r+0x1392>
   256c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   256c8:	9307      	str	r3, [sp, #28]
   256ca:	2300      	movs	r3, #0
   256cc:	4691      	mov	r9, r2
   256ce:	9310      	str	r3, [sp, #64]	; 0x40
   256d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   256d2:	2b66      	cmp	r3, #102	; 0x66
   256d4:	d100      	bne.n	256d8 <_svfprintf_r+0xf60>
   256d6:	e1fc      	b.n	25ad2 <_svfprintf_r+0x135a>
   256d8:	2b46      	cmp	r3, #70	; 0x46
   256da:	d100      	bne.n	256de <_svfprintf_r+0xf66>
   256dc:	e0db      	b.n	25896 <_svfprintf_r+0x111e>
   256de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   256e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   256e2:	3a45      	subs	r2, #69	; 0x45
   256e4:	0013      	movs	r3, r2
   256e6:	4259      	negs	r1, r3
   256e8:	4159      	adcs	r1, r3
   256ea:	ab20      	add	r3, sp, #128	; 0x80
   256ec:	000d      	movs	r5, r1
   256ee:	9303      	str	r3, [sp, #12]
   256f0:	ab1f      	add	r3, sp, #124	; 0x7c
   256f2:	9302      	str	r3, [sp, #8]
   256f4:	2302      	movs	r3, #2
   256f6:	aa23      	add	r2, sp, #140	; 0x8c
   256f8:	4455      	add	r5, sl
   256fa:	921b      	str	r2, [sp, #108]	; 0x6c
   256fc:	9204      	str	r2, [sp, #16]
   256fe:	9300      	str	r3, [sp, #0]
   25700:	9501      	str	r5, [sp, #4]
   25702:	9b07      	ldr	r3, [sp, #28]
   25704:	464a      	mov	r2, r9
   25706:	f002 f813 	bl	27730 <_dtoa_r>
   2570a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2570c:	9011      	str	r0, [sp, #68]	; 0x44
   2570e:	2b67      	cmp	r3, #103	; 0x67
   25710:	d000      	beq.n	25714 <_svfprintf_r+0xf9c>
   25712:	e239      	b.n	25b88 <_svfprintf_r+0x1410>
   25714:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25716:	4698      	mov	r8, r3
   25718:	44a8      	add	r8, r5
   2571a:	07e3      	lsls	r3, r4, #31
   2571c:	d400      	bmi.n	25720 <_svfprintf_r+0xfa8>
   2571e:	e28b      	b.n	25c38 <_svfprintf_r+0x14c0>
   25720:	2300      	movs	r3, #0
   25722:	2200      	movs	r2, #0
   25724:	4648      	mov	r0, r9
   25726:	9907      	ldr	r1, [sp, #28]
   25728:	f7fb fe24 	bl	21374 <__aeabi_dcmpeq>
   2572c:	4643      	mov	r3, r8
   2572e:	2800      	cmp	r0, #0
   25730:	d10a      	bne.n	25748 <_svfprintf_r+0xfd0>
   25732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25734:	4543      	cmp	r3, r8
   25736:	d207      	bcs.n	25748 <_svfprintf_r+0xfd0>
   25738:	2130      	movs	r1, #48	; 0x30
   2573a:	4640      	mov	r0, r8
   2573c:	1c5a      	adds	r2, r3, #1
   2573e:	9223      	str	r2, [sp, #140]	; 0x8c
   25740:	7019      	strb	r1, [r3, #0]
   25742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25744:	4298      	cmp	r0, r3
   25746:	d8f9      	bhi.n	2573c <_svfprintf_r+0xfc4>
   25748:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2574a:	1a9b      	subs	r3, r3, r2
   2574c:	9314      	str	r3, [sp, #80]	; 0x50
   2574e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25750:	2b47      	cmp	r3, #71	; 0x47
   25752:	d100      	bne.n	25756 <_svfprintf_r+0xfde>
   25754:	e0f6      	b.n	25944 <_svfprintf_r+0x11cc>
   25756:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25758:	2b65      	cmp	r3, #101	; 0x65
   2575a:	dc00      	bgt.n	2575e <_svfprintf_r+0xfe6>
   2575c:	e226      	b.n	25bac <_svfprintf_r+0x1434>
   2575e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25760:	2b66      	cmp	r3, #102	; 0x66
   25762:	d100      	bne.n	25766 <_svfprintf_r+0xfee>
   25764:	e1f4      	b.n	25b50 <_svfprintf_r+0x13d8>
   25766:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25768:	9313      	str	r3, [sp, #76]	; 0x4c
   2576a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2576c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2576e:	0019      	movs	r1, r3
   25770:	4291      	cmp	r1, r2
   25772:	dd00      	ble.n	25776 <_svfprintf_r+0xffe>
   25774:	e1d4      	b.n	25b20 <_svfprintf_r+0x13a8>
   25776:	07e3      	lsls	r3, r4, #31
   25778:	d500      	bpl.n	2577c <_svfprintf_r+0x1004>
   2577a:	e249      	b.n	25c10 <_svfprintf_r+0x1498>
   2577c:	43d3      	mvns	r3, r2
   2577e:	17db      	asrs	r3, r3, #31
   25780:	0011      	movs	r1, r2
   25782:	401a      	ands	r2, r3
   25784:	2367      	movs	r3, #103	; 0x67
   25786:	9207      	str	r2, [sp, #28]
   25788:	910e      	str	r1, [sp, #56]	; 0x38
   2578a:	9312      	str	r3, [sp, #72]	; 0x48
   2578c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2578e:	2b00      	cmp	r3, #0
   25790:	d000      	beq.n	25794 <_svfprintf_r+0x101c>
   25792:	e0cf      	b.n	25934 <_svfprintf_r+0x11bc>
   25794:	ab16      	add	r3, sp, #88	; 0x58
   25796:	7fdb      	ldrb	r3, [r3, #31]
   25798:	4698      	mov	r8, r3
   2579a:	2300      	movs	r3, #0
   2579c:	469a      	mov	sl, r3
   2579e:	f7ff f903 	bl	249a8 <_svfprintf_r+0x230>
   257a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   257a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   257a6:	6813      	ldr	r3, [r2, #0]
   257a8:	6019      	str	r1, [r3, #0]
   257aa:	0013      	movs	r3, r2
   257ac:	3304      	adds	r3, #4
   257ae:	930f      	str	r3, [sp, #60]	; 0x3c
   257b0:	f7ff f80d 	bl	247ce <_svfprintf_r+0x56>
   257b4:	003a      	movs	r2, r7
   257b6:	9906      	ldr	r1, [sp, #24]
   257b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   257ba:	f004 fd2b 	bl	2a214 <__ssprint_r>
   257be:	2800      	cmp	r0, #0
   257c0:	d001      	beq.n	257c6 <_svfprintf_r+0x104e>
   257c2:	f7ff f860 	bl	24886 <_svfprintf_r+0x10e>
   257c6:	ae32      	add	r6, sp, #200	; 0xc8
   257c8:	e48e      	b.n	250e8 <_svfprintf_r+0x970>
   257ca:	4bde      	ldr	r3, [pc, #888]	; (25b44 <_svfprintf_r+0x13cc>)
   257cc:	3401      	adds	r4, #1
   257ce:	6033      	str	r3, [r6, #0]
   257d0:	2301      	movs	r3, #1
   257d2:	6073      	str	r3, [r6, #4]
   257d4:	687b      	ldr	r3, [r7, #4]
   257d6:	60bc      	str	r4, [r7, #8]
   257d8:	3301      	adds	r3, #1
   257da:	607b      	str	r3, [r7, #4]
   257dc:	2b07      	cmp	r3, #7
   257de:	dc7a      	bgt.n	258d6 <_svfprintf_r+0x115e>
   257e0:	3608      	adds	r6, #8
   257e2:	2800      	cmp	r0, #0
   257e4:	d107      	bne.n	257f6 <_svfprintf_r+0x107e>
   257e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   257e8:	2b00      	cmp	r3, #0
   257ea:	d104      	bne.n	257f6 <_svfprintf_r+0x107e>
   257ec:	9b08      	ldr	r3, [sp, #32]
   257ee:	07db      	lsls	r3, r3, #31
   257f0:	d401      	bmi.n	257f6 <_svfprintf_r+0x107e>
   257f2:	f7ff fbb7 	bl	24f64 <_svfprintf_r+0x7ec>
   257f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   257f8:	6033      	str	r3, [r6, #0]
   257fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   257fc:	1919      	adds	r1, r3, r4
   257fe:	6073      	str	r3, [r6, #4]
   25800:	687b      	ldr	r3, [r7, #4]
   25802:	60b9      	str	r1, [r7, #8]
   25804:	3301      	adds	r3, #1
   25806:	607b      	str	r3, [r7, #4]
   25808:	2b07      	cmp	r3, #7
   2580a:	dd00      	ble.n	2580e <_svfprintf_r+0x1096>
   2580c:	e1f2      	b.n	25bf4 <_svfprintf_r+0x147c>
   2580e:	0032      	movs	r2, r6
   25810:	3208      	adds	r2, #8
   25812:	2800      	cmp	r0, #0
   25814:	da00      	bge.n	25818 <_svfprintf_r+0x10a0>
   25816:	e1cc      	b.n	25bb2 <_svfprintf_r+0x143a>
   25818:	9811      	ldr	r0, [sp, #68]	; 0x44
   2581a:	3301      	adds	r3, #1
   2581c:	6010      	str	r0, [r2, #0]
   2581e:	9814      	ldr	r0, [sp, #80]	; 0x50
   25820:	607b      	str	r3, [r7, #4]
   25822:	1844      	adds	r4, r0, r1
   25824:	6050      	str	r0, [r2, #4]
   25826:	60bc      	str	r4, [r7, #8]
   25828:	2b07      	cmp	r3, #7
   2582a:	dd00      	ble.n	2582e <_svfprintf_r+0x10b6>
   2582c:	e437      	b.n	2509e <_svfprintf_r+0x926>
   2582e:	3208      	adds	r2, #8
   25830:	0016      	movs	r6, r2
   25832:	f7ff fb97 	bl	24f64 <_svfprintf_r+0x7ec>
   25836:	990f      	ldr	r1, [sp, #60]	; 0x3c
   25838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2583a:	680b      	ldr	r3, [r1, #0]
   2583c:	601a      	str	r2, [r3, #0]
   2583e:	17d2      	asrs	r2, r2, #31
   25840:	605a      	str	r2, [r3, #4]
   25842:	000b      	movs	r3, r1
   25844:	3304      	adds	r3, #4
   25846:	930f      	str	r3, [sp, #60]	; 0x3c
   25848:	f7fe ffc1 	bl	247ce <_svfprintf_r+0x56>
   2584c:	464b      	mov	r3, r9
   2584e:	3101      	adds	r1, #1
   25850:	431c      	orrs	r4, r3
   25852:	780b      	ldrb	r3, [r1, #0]
   25854:	f7fe fff4 	bl	24840 <_svfprintf_r+0xc8>
   25858:	4bbb      	ldr	r3, [pc, #748]	; (25b48 <_svfprintf_r+0x13d0>)
   2585a:	9311      	str	r3, [sp, #68]	; 0x44
   2585c:	f7ff f937 	bl	24ace <_svfprintf_r+0x356>
   25860:	003a      	movs	r2, r7
   25862:	9906      	ldr	r1, [sp, #24]
   25864:	9809      	ldr	r0, [sp, #36]	; 0x24
   25866:	f004 fcd5 	bl	2a214 <__ssprint_r>
   2586a:	2800      	cmp	r0, #0
   2586c:	d001      	beq.n	25872 <_svfprintf_r+0x10fa>
   2586e:	f7ff f80a 	bl	24886 <_svfprintf_r+0x10e>
   25872:	68bc      	ldr	r4, [r7, #8]
   25874:	ae32      	add	r6, sp, #200	; 0xc8
   25876:	e5f1      	b.n	2545c <_svfprintf_r+0xce4>
   25878:	2140      	movs	r1, #64	; 0x40
   2587a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2587c:	f003 fbfa 	bl	29074 <_malloc_r>
   25880:	9b06      	ldr	r3, [sp, #24]
   25882:	6018      	str	r0, [r3, #0]
   25884:	6118      	str	r0, [r3, #16]
   25886:	2800      	cmp	r0, #0
   25888:	d100      	bne.n	2588c <_svfprintf_r+0x1114>
   2588a:	e24f      	b.n	25d2c <_svfprintf_r+0x15b4>
   2588c:	2340      	movs	r3, #64	; 0x40
   2588e:	9a06      	ldr	r2, [sp, #24]
   25890:	6153      	str	r3, [r2, #20]
   25892:	f7fe ff8e 	bl	247b2 <_svfprintf_r+0x3a>
   25896:	ab23      	add	r3, sp, #140	; 0x8c
   25898:	931b      	str	r3, [sp, #108]	; 0x6c
   2589a:	9304      	str	r3, [sp, #16]
   2589c:	ab20      	add	r3, sp, #128	; 0x80
   2589e:	9303      	str	r3, [sp, #12]
   258a0:	ab1f      	add	r3, sp, #124	; 0x7c
   258a2:	9302      	str	r3, [sp, #8]
   258a4:	4653      	mov	r3, sl
   258a6:	9301      	str	r3, [sp, #4]
   258a8:	2303      	movs	r3, #3
   258aa:	464a      	mov	r2, r9
   258ac:	9300      	str	r3, [sp, #0]
   258ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   258b0:	9b07      	ldr	r3, [sp, #28]
   258b2:	f001 ff3d 	bl	27730 <_dtoa_r>
   258b6:	4655      	mov	r5, sl
   258b8:	9011      	str	r0, [sp, #68]	; 0x44
   258ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   258bc:	4698      	mov	r8, r3
   258be:	9b12      	ldr	r3, [sp, #72]	; 0x48
   258c0:	44a8      	add	r8, r5
   258c2:	2b46      	cmp	r3, #70	; 0x46
   258c4:	d000      	beq.n	258c8 <_svfprintf_r+0x1150>
   258c6:	e72b      	b.n	25720 <_svfprintf_r+0xfa8>
   258c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	2b30      	cmp	r3, #48	; 0x30
   258ce:	d016      	beq.n	258fe <_svfprintf_r+0x1186>
   258d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   258d2:	4498      	add	r8, r3
   258d4:	e724      	b.n	25720 <_svfprintf_r+0xfa8>
   258d6:	003a      	movs	r2, r7
   258d8:	9906      	ldr	r1, [sp, #24]
   258da:	9809      	ldr	r0, [sp, #36]	; 0x24
   258dc:	f004 fc9a 	bl	2a214 <__ssprint_r>
   258e0:	2800      	cmp	r0, #0
   258e2:	d001      	beq.n	258e8 <_svfprintf_r+0x1170>
   258e4:	f7fe ffcf 	bl	24886 <_svfprintf_r+0x10e>
   258e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   258ea:	68bc      	ldr	r4, [r7, #8]
   258ec:	ae32      	add	r6, sp, #200	; 0xc8
   258ee:	e778      	b.n	257e2 <_svfprintf_r+0x106a>
   258f0:	4653      	mov	r3, sl
   258f2:	2b00      	cmp	r3, #0
   258f4:	d000      	beq.n	258f8 <_svfprintf_r+0x1180>
   258f6:	e6de      	b.n	256b6 <_svfprintf_r+0xf3e>
   258f8:	3301      	adds	r3, #1
   258fa:	469a      	mov	sl, r3
   258fc:	e6db      	b.n	256b6 <_svfprintf_r+0xf3e>
   258fe:	2200      	movs	r2, #0
   25900:	2300      	movs	r3, #0
   25902:	4648      	mov	r0, r9
   25904:	9907      	ldr	r1, [sp, #28]
   25906:	f7fb fd35 	bl	21374 <__aeabi_dcmpeq>
   2590a:	2800      	cmp	r0, #0
   2590c:	d1e0      	bne.n	258d0 <_svfprintf_r+0x1158>
   2590e:	2301      	movs	r3, #1
   25910:	1b5b      	subs	r3, r3, r5
   25912:	931f      	str	r3, [sp, #124]	; 0x7c
   25914:	4498      	add	r8, r3
   25916:	e703      	b.n	25720 <_svfprintf_r+0xfa8>
   25918:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2591a:	ab32      	add	r3, sp, #200	; 0xc8
   2591c:	1a9b      	subs	r3, r3, r2
   2591e:	930e      	str	r3, [sp, #56]	; 0x38
   25920:	f7ff f83a 	bl	24998 <_svfprintf_r+0x220>
   25924:	9811      	ldr	r0, [sp, #68]	; 0x44
   25926:	f7fe fe47 	bl	245b8 <strlen>
   2592a:	0002      	movs	r2, r0
   2592c:	900e      	str	r0, [sp, #56]	; 0x38
   2592e:	0003      	movs	r3, r0
   25930:	f7ff f9cd 	bl	24cce <_svfprintf_r+0x556>
   25934:	232d      	movs	r3, #45	; 0x2d
   25936:	aa16      	add	r2, sp, #88	; 0x58
   25938:	77d3      	strb	r3, [r2, #31]
   2593a:	4698      	mov	r8, r3
   2593c:	2300      	movs	r3, #0
   2593e:	469a      	mov	sl, r3
   25940:	f7ff f835 	bl	249ae <_svfprintf_r+0x236>
   25944:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25946:	9313      	str	r3, [sp, #76]	; 0x4c
   25948:	1cda      	adds	r2, r3, #3
   2594a:	db02      	blt.n	25952 <_svfprintf_r+0x11da>
   2594c:	459a      	cmp	sl, r3
   2594e:	db00      	blt.n	25952 <_svfprintf_r+0x11da>
   25950:	e70b      	b.n	2576a <_svfprintf_r+0xff2>
   25952:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25954:	3b02      	subs	r3, #2
   25956:	9312      	str	r3, [sp, #72]	; 0x48
   25958:	222c      	movs	r2, #44	; 0x2c
   2595a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2595c:	2148      	movs	r1, #72	; 0x48
   2595e:	1e5d      	subs	r5, r3, #1
   25960:	ab16      	add	r3, sp, #88	; 0x58
   25962:	189b      	adds	r3, r3, r2
   25964:	466a      	mov	r2, sp
   25966:	1852      	adds	r2, r2, r1
   25968:	7812      	ldrb	r2, [r2, #0]
   2596a:	951f      	str	r5, [sp, #124]	; 0x7c
   2596c:	701a      	strb	r2, [r3, #0]
   2596e:	2d00      	cmp	r5, #0
   25970:	da00      	bge.n	25974 <_svfprintf_r+0x11fc>
   25972:	e1a4      	b.n	25cbe <_svfprintf_r+0x1546>
   25974:	212d      	movs	r1, #45	; 0x2d
   25976:	232b      	movs	r3, #43	; 0x2b
   25978:	aa16      	add	r2, sp, #88	; 0x58
   2597a:	1852      	adds	r2, r2, r1
   2597c:	7013      	strb	r3, [r2, #0]
   2597e:	2d09      	cmp	r5, #9
   25980:	dc00      	bgt.n	25984 <_svfprintf_r+0x120c>
   25982:	e14c      	b.n	25c1e <_svfprintf_r+0x14a6>
   25984:	aa16      	add	r2, sp, #88	; 0x58
   25986:	233b      	movs	r3, #59	; 0x3b
   25988:	4694      	mov	ip, r2
   2598a:	4463      	add	r3, ip
   2598c:	469a      	mov	sl, r3
   2598e:	46b1      	mov	r9, r6
   25990:	46a0      	mov	r8, r4
   25992:	4656      	mov	r6, sl
   25994:	e000      	b.n	25998 <_svfprintf_r+0x1220>
   25996:	0026      	movs	r6, r4
   25998:	0028      	movs	r0, r5
   2599a:	210a      	movs	r1, #10
   2599c:	f7fb fcd4 	bl	21348 <__aeabi_idivmod>
   259a0:	1e74      	subs	r4, r6, #1
   259a2:	3130      	adds	r1, #48	; 0x30
   259a4:	7021      	strb	r1, [r4, #0]
   259a6:	0028      	movs	r0, r5
   259a8:	210a      	movs	r1, #10
   259aa:	f7fb fbe7 	bl	2117c <__divsi3>
   259ae:	0005      	movs	r5, r0
   259b0:	2809      	cmp	r0, #9
   259b2:	dcf0      	bgt.n	25996 <_svfprintf_r+0x121e>
   259b4:	0023      	movs	r3, r4
   259b6:	4644      	mov	r4, r8
   259b8:	46b0      	mov	r8, r6
   259ba:	464e      	mov	r6, r9
   259bc:	4699      	mov	r9, r3
   259be:	0003      	movs	r3, r0
   259c0:	3330      	adds	r3, #48	; 0x30
   259c2:	b2d8      	uxtb	r0, r3
   259c4:	4643      	mov	r3, r8
   259c6:	3b02      	subs	r3, #2
   259c8:	7018      	strb	r0, [r3, #0]
   259ca:	459a      	cmp	sl, r3
   259cc:	d800      	bhi.n	259d0 <_svfprintf_r+0x1258>
   259ce:	e1b4      	b.n	25d3a <_svfprintf_r+0x15c2>
   259d0:	4642      	mov	r2, r8
   259d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   259d4:	4645      	mov	r5, r8
   259d6:	1a99      	subs	r1, r3, r2
   259d8:	2301      	movs	r3, #1
   259da:	3107      	adds	r1, #7
   259dc:	425b      	negs	r3, r3
   259de:	e001      	b.n	259e4 <_svfprintf_r+0x126c>
   259e0:	5ce8      	ldrb	r0, [r5, r3]
   259e2:	3301      	adds	r3, #1
   259e4:	aa21      	add	r2, sp, #132	; 0x84
   259e6:	18d2      	adds	r2, r2, r3
   259e8:	70d0      	strb	r0, [r2, #3]
   259ea:	428b      	cmp	r3, r1
   259ec:	d1f8      	bne.n	259e0 <_svfprintf_r+0x1268>
   259ee:	a916      	add	r1, sp, #88	; 0x58
   259f0:	468c      	mov	ip, r1
   259f2:	222e      	movs	r2, #46	; 0x2e
   259f4:	464b      	mov	r3, r9
   259f6:	4462      	add	r2, ip
   259f8:	4694      	mov	ip, r2
   259fa:	1afb      	subs	r3, r7, r3
   259fc:	4463      	add	r3, ip
   259fe:	aa21      	add	r2, sp, #132	; 0x84
   25a00:	9914      	ldr	r1, [sp, #80]	; 0x50
   25a02:	1a9b      	subs	r3, r3, r2
   25a04:	469c      	mov	ip, r3
   25a06:	000a      	movs	r2, r1
   25a08:	4462      	add	r2, ip
   25a0a:	931a      	str	r3, [sp, #104]	; 0x68
   25a0c:	920e      	str	r2, [sp, #56]	; 0x38
   25a0e:	2901      	cmp	r1, #1
   25a10:	dc00      	bgt.n	25a14 <_svfprintf_r+0x129c>
   25a12:	e145      	b.n	25ca0 <_svfprintf_r+0x1528>
   25a14:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25a18:	4694      	mov	ip, r2
   25a1a:	4463      	add	r3, ip
   25a1c:	001a      	movs	r2, r3
   25a1e:	930e      	str	r3, [sp, #56]	; 0x38
   25a20:	43db      	mvns	r3, r3
   25a22:	17db      	asrs	r3, r3, #31
   25a24:	401a      	ands	r2, r3
   25a26:	2300      	movs	r3, #0
   25a28:	9207      	str	r2, [sp, #28]
   25a2a:	9313      	str	r3, [sp, #76]	; 0x4c
   25a2c:	e6ae      	b.n	2578c <_svfprintf_r+0x1014>
   25a2e:	2301      	movs	r3, #1
   25a30:	425b      	negs	r3, r3
   25a32:	930a      	str	r3, [sp, #40]	; 0x28
   25a34:	f7fe ff2d 	bl	24892 <_svfprintf_r+0x11a>
   25a38:	003a      	movs	r2, r7
   25a3a:	9906      	ldr	r1, [sp, #24]
   25a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   25a3e:	f004 fbe9 	bl	2a214 <__ssprint_r>
   25a42:	2800      	cmp	r0, #0
   25a44:	d001      	beq.n	25a4a <_svfprintf_r+0x12d2>
   25a46:	f7fe ff1e 	bl	24886 <_svfprintf_r+0x10e>
   25a4a:	68bc      	ldr	r4, [r7, #8]
   25a4c:	ae32      	add	r6, sp, #200	; 0xc8
   25a4e:	e43c      	b.n	252ca <_svfprintf_r+0xb52>
   25a50:	003a      	movs	r2, r7
   25a52:	9906      	ldr	r1, [sp, #24]
   25a54:	9809      	ldr	r0, [sp, #36]	; 0x24
   25a56:	f004 fbdd 	bl	2a214 <__ssprint_r>
   25a5a:	2800      	cmp	r0, #0
   25a5c:	d001      	beq.n	25a62 <_svfprintf_r+0x12ea>
   25a5e:	f7fe ff12 	bl	24886 <_svfprintf_r+0x10e>
   25a62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25a64:	68bc      	ldr	r4, [r7, #8]
   25a66:	ae32      	add	r6, sp, #200	; 0xc8
   25a68:	e56a      	b.n	25540 <_svfprintf_r+0xdc8>
   25a6a:	003a      	movs	r2, r7
   25a6c:	9906      	ldr	r1, [sp, #24]
   25a6e:	9809      	ldr	r0, [sp, #36]	; 0x24
   25a70:	f004 fbd0 	bl	2a214 <__ssprint_r>
   25a74:	2800      	cmp	r0, #0
   25a76:	d001      	beq.n	25a7c <_svfprintf_r+0x1304>
   25a78:	f7fe ff05 	bl	24886 <_svfprintf_r+0x10e>
   25a7c:	68bc      	ldr	r4, [r7, #8]
   25a7e:	ae32      	add	r6, sp, #200	; 0xc8
   25a80:	e557      	b.n	25532 <_svfprintf_r+0xdba>
   25a82:	003a      	movs	r2, r7
   25a84:	9906      	ldr	r1, [sp, #24]
   25a86:	9809      	ldr	r0, [sp, #36]	; 0x24
   25a88:	f004 fbc4 	bl	2a214 <__ssprint_r>
   25a8c:	2800      	cmp	r0, #0
   25a8e:	d001      	beq.n	25a94 <_svfprintf_r+0x131c>
   25a90:	f7fe fef9 	bl	24886 <_svfprintf_r+0x10e>
   25a94:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25a96:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   25a98:	68bc      	ldr	r4, [r7, #8]
   25a9a:	1a9b      	subs	r3, r3, r2
   25a9c:	ae32      	add	r6, sp, #200	; 0xc8
   25a9e:	e56a      	b.n	25576 <_svfprintf_r+0xdfe>
   25aa0:	4653      	mov	r3, sl
   25aa2:	9307      	str	r3, [sp, #28]
   25aa4:	2b06      	cmp	r3, #6
   25aa6:	d901      	bls.n	25aac <_svfprintf_r+0x1334>
   25aa8:	2306      	movs	r3, #6
   25aaa:	9307      	str	r3, [sp, #28]
   25aac:	9b07      	ldr	r3, [sp, #28]
   25aae:	950f      	str	r5, [sp, #60]	; 0x3c
   25ab0:	930e      	str	r3, [sp, #56]	; 0x38
   25ab2:	2300      	movs	r3, #0
   25ab4:	4698      	mov	r8, r3
   25ab6:	469a      	mov	sl, r3
   25ab8:	9313      	str	r3, [sp, #76]	; 0x4c
   25aba:	4b24      	ldr	r3, [pc, #144]	; (25b4c <_svfprintf_r+0x13d4>)
   25abc:	9408      	str	r4, [sp, #32]
   25abe:	9311      	str	r3, [sp, #68]	; 0x44
   25ac0:	f7fe ff78 	bl	249b4 <_svfprintf_r+0x23c>
   25ac4:	2320      	movs	r3, #32
   25ac6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25ac8:	439a      	bics	r2, r3
   25aca:	3b1a      	subs	r3, #26
   25acc:	920e      	str	r2, [sp, #56]	; 0x38
   25ace:	469a      	mov	sl, r3
   25ad0:	e5f1      	b.n	256b6 <_svfprintf_r+0xf3e>
   25ad2:	ab23      	add	r3, sp, #140	; 0x8c
   25ad4:	931b      	str	r3, [sp, #108]	; 0x6c
   25ad6:	9304      	str	r3, [sp, #16]
   25ad8:	ab20      	add	r3, sp, #128	; 0x80
   25ada:	9303      	str	r3, [sp, #12]
   25adc:	ab1f      	add	r3, sp, #124	; 0x7c
   25ade:	9302      	str	r3, [sp, #8]
   25ae0:	4653      	mov	r3, sl
   25ae2:	9301      	str	r3, [sp, #4]
   25ae4:	2303      	movs	r3, #3
   25ae6:	464a      	mov	r2, r9
   25ae8:	9300      	str	r3, [sp, #0]
   25aea:	9809      	ldr	r0, [sp, #36]	; 0x24
   25aec:	9b07      	ldr	r3, [sp, #28]
   25aee:	f001 fe1f 	bl	27730 <_dtoa_r>
   25af2:	0003      	movs	r3, r0
   25af4:	4453      	add	r3, sl
   25af6:	9011      	str	r0, [sp, #68]	; 0x44
   25af8:	4698      	mov	r8, r3
   25afa:	4655      	mov	r5, sl
   25afc:	e6e4      	b.n	258c8 <_svfprintf_r+0x1150>
   25afe:	232d      	movs	r3, #45	; 0x2d
   25b00:	aa16      	add	r2, sp, #88	; 0x58
   25b02:	77d3      	strb	r3, [r2, #31]
   25b04:	4698      	mov	r8, r3
   25b06:	f7fe ffdb 	bl	24ac0 <_svfprintf_r+0x348>
   25b0a:	2280      	movs	r2, #128	; 0x80
   25b0c:	0612      	lsls	r2, r2, #24
   25b0e:	4694      	mov	ip, r2
   25b10:	9b16      	ldr	r3, [sp, #88]	; 0x58
   25b12:	4699      	mov	r9, r3
   25b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25b16:	4463      	add	r3, ip
   25b18:	9307      	str	r3, [sp, #28]
   25b1a:	232d      	movs	r3, #45	; 0x2d
   25b1c:	9310      	str	r3, [sp, #64]	; 0x40
   25b1e:	e5d7      	b.n	256d0 <_svfprintf_r+0xf58>
   25b20:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25b22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25b24:	4694      	mov	ip, r2
   25b26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   25b28:	4463      	add	r3, ip
   25b2a:	930e      	str	r3, [sp, #56]	; 0x38
   25b2c:	2a00      	cmp	r2, #0
   25b2e:	dc00      	bgt.n	25b32 <_svfprintf_r+0x13ba>
   25b30:	e0ce      	b.n	25cd0 <_svfprintf_r+0x1558>
   25b32:	001a      	movs	r2, r3
   25b34:	43db      	mvns	r3, r3
   25b36:	17db      	asrs	r3, r3, #31
   25b38:	401a      	ands	r2, r3
   25b3a:	2367      	movs	r3, #103	; 0x67
   25b3c:	9207      	str	r2, [sp, #28]
   25b3e:	9312      	str	r3, [sp, #72]	; 0x48
   25b40:	e624      	b.n	2578c <_svfprintf_r+0x1014>
   25b42:	46c0      	nop			; (mov r8, r8)
   25b44:	0002d10c 	.word	0x0002d10c
   25b48:	0002d0d0 	.word	0x0002d0d0
   25b4c:	0002d104 	.word	0x0002d104
   25b50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25b52:	9313      	str	r3, [sp, #76]	; 0x4c
   25b54:	2b00      	cmp	r3, #0
   25b56:	dc00      	bgt.n	25b5a <_svfprintf_r+0x13e2>
   25b58:	e0d5      	b.n	25d06 <_svfprintf_r+0x158e>
   25b5a:	4652      	mov	r2, sl
   25b5c:	2a00      	cmp	r2, #0
   25b5e:	d000      	beq.n	25b62 <_svfprintf_r+0x13ea>
   25b60:	e092      	b.n	25c88 <_svfprintf_r+0x1510>
   25b62:	07e2      	lsls	r2, r4, #31
   25b64:	d500      	bpl.n	25b68 <_svfprintf_r+0x13f0>
   25b66:	e08f      	b.n	25c88 <_svfprintf_r+0x1510>
   25b68:	9307      	str	r3, [sp, #28]
   25b6a:	930e      	str	r3, [sp, #56]	; 0x38
   25b6c:	e60e      	b.n	2578c <_svfprintf_r+0x1014>
   25b6e:	ab16      	add	r3, sp, #88	; 0x58
   25b70:	7fdb      	ldrb	r3, [r3, #31]
   25b72:	950f      	str	r5, [sp, #60]	; 0x3c
   25b74:	4698      	mov	r8, r3
   25b76:	4653      	mov	r3, sl
   25b78:	9307      	str	r3, [sp, #28]
   25b7a:	930e      	str	r3, [sp, #56]	; 0x38
   25b7c:	2300      	movs	r3, #0
   25b7e:	9408      	str	r4, [sp, #32]
   25b80:	469a      	mov	sl, r3
   25b82:	9313      	str	r3, [sp, #76]	; 0x4c
   25b84:	f7fe ff10 	bl	249a8 <_svfprintf_r+0x230>
   25b88:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25b8a:	4698      	mov	r8, r3
   25b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25b8e:	44a8      	add	r8, r5
   25b90:	2b47      	cmp	r3, #71	; 0x47
   25b92:	d000      	beq.n	25b96 <_svfprintf_r+0x141e>
   25b94:	e5c4      	b.n	25720 <_svfprintf_r+0xfa8>
   25b96:	07e3      	lsls	r3, r4, #31
   25b98:	d500      	bpl.n	25b9c <_svfprintf_r+0x1424>
   25b9a:	e68e      	b.n	258ba <_svfprintf_r+0x1142>
   25b9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25b9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   25ba0:	1a9b      	subs	r3, r3, r2
   25ba2:	9314      	str	r3, [sp, #80]	; 0x50
   25ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25ba6:	2b47      	cmp	r3, #71	; 0x47
   25ba8:	d100      	bne.n	25bac <_svfprintf_r+0x1434>
   25baa:	e6cb      	b.n	25944 <_svfprintf_r+0x11cc>
   25bac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   25bae:	9313      	str	r3, [sp, #76]	; 0x4c
   25bb0:	e6d2      	b.n	25958 <_svfprintf_r+0x11e0>
   25bb2:	4244      	negs	r4, r0
   25bb4:	3010      	adds	r0, #16
   25bb6:	db00      	blt.n	25bba <_svfprintf_r+0x1442>
   25bb8:	e0d0      	b.n	25d5c <_svfprintf_r+0x15e4>
   25bba:	486e      	ldr	r0, [pc, #440]	; (25d74 <_svfprintf_r+0x15fc>)
   25bbc:	2610      	movs	r6, #16
   25bbe:	0005      	movs	r5, r0
   25bc0:	e003      	b.n	25bca <_svfprintf_r+0x1452>
   25bc2:	3208      	adds	r2, #8
   25bc4:	3c10      	subs	r4, #16
   25bc6:	2c10      	cmp	r4, #16
   25bc8:	dd38      	ble.n	25c3c <_svfprintf_r+0x14c4>
   25bca:	3110      	adds	r1, #16
   25bcc:	3301      	adds	r3, #1
   25bce:	6015      	str	r5, [r2, #0]
   25bd0:	6056      	str	r6, [r2, #4]
   25bd2:	60b9      	str	r1, [r7, #8]
   25bd4:	607b      	str	r3, [r7, #4]
   25bd6:	2b07      	cmp	r3, #7
   25bd8:	ddf3      	ble.n	25bc2 <_svfprintf_r+0x144a>
   25bda:	003a      	movs	r2, r7
   25bdc:	9906      	ldr	r1, [sp, #24]
   25bde:	9809      	ldr	r0, [sp, #36]	; 0x24
   25be0:	f004 fb18 	bl	2a214 <__ssprint_r>
   25be4:	2800      	cmp	r0, #0
   25be6:	d001      	beq.n	25bec <_svfprintf_r+0x1474>
   25be8:	f7fe fe4d 	bl	24886 <_svfprintf_r+0x10e>
   25bec:	68b9      	ldr	r1, [r7, #8]
   25bee:	687b      	ldr	r3, [r7, #4]
   25bf0:	aa32      	add	r2, sp, #200	; 0xc8
   25bf2:	e7e7      	b.n	25bc4 <_svfprintf_r+0x144c>
   25bf4:	003a      	movs	r2, r7
   25bf6:	9906      	ldr	r1, [sp, #24]
   25bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
   25bfa:	f004 fb0b 	bl	2a214 <__ssprint_r>
   25bfe:	2800      	cmp	r0, #0
   25c00:	d001      	beq.n	25c06 <_svfprintf_r+0x148e>
   25c02:	f7fe fe40 	bl	24886 <_svfprintf_r+0x10e>
   25c06:	981f      	ldr	r0, [sp, #124]	; 0x7c
   25c08:	68b9      	ldr	r1, [r7, #8]
   25c0a:	687b      	ldr	r3, [r7, #4]
   25c0c:	aa32      	add	r2, sp, #200	; 0xc8
   25c0e:	e600      	b.n	25812 <_svfprintf_r+0x109a>
   25c10:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25c12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25c14:	4694      	mov	ip, r2
   25c16:	4463      	add	r3, ip
   25c18:	001a      	movs	r2, r3
   25c1a:	930e      	str	r3, [sp, #56]	; 0x38
   25c1c:	e78a      	b.n	25b34 <_svfprintf_r+0x13bc>
   25c1e:	212e      	movs	r1, #46	; 0x2e
   25c20:	2330      	movs	r3, #48	; 0x30
   25c22:	aa16      	add	r2, sp, #88	; 0x58
   25c24:	1852      	adds	r2, r2, r1
   25c26:	7013      	strb	r3, [r2, #0]
   25c28:	002b      	movs	r3, r5
   25c2a:	aa16      	add	r2, sp, #88	; 0x58
   25c2c:	3101      	adds	r1, #1
   25c2e:	3330      	adds	r3, #48	; 0x30
   25c30:	1852      	adds	r2, r2, r1
   25c32:	7013      	strb	r3, [r2, #0]
   25c34:	ab22      	add	r3, sp, #136	; 0x88
   25c36:	e6e2      	b.n	259fe <_svfprintf_r+0x1286>
   25c38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25c3a:	e585      	b.n	25748 <_svfprintf_r+0xfd0>
   25c3c:	46a9      	mov	r9, r5
   25c3e:	4648      	mov	r0, r9
   25c40:	1909      	adds	r1, r1, r4
   25c42:	3301      	adds	r3, #1
   25c44:	6010      	str	r0, [r2, #0]
   25c46:	6054      	str	r4, [r2, #4]
   25c48:	60b9      	str	r1, [r7, #8]
   25c4a:	3208      	adds	r2, #8
   25c4c:	607b      	str	r3, [r7, #4]
   25c4e:	2b07      	cmp	r3, #7
   25c50:	dc00      	bgt.n	25c54 <_svfprintf_r+0x14dc>
   25c52:	e5e1      	b.n	25818 <_svfprintf_r+0x10a0>
   25c54:	003a      	movs	r2, r7
   25c56:	9906      	ldr	r1, [sp, #24]
   25c58:	9809      	ldr	r0, [sp, #36]	; 0x24
   25c5a:	f004 fadb 	bl	2a214 <__ssprint_r>
   25c5e:	2800      	cmp	r0, #0
   25c60:	d001      	beq.n	25c66 <_svfprintf_r+0x14ee>
   25c62:	f7fe fe10 	bl	24886 <_svfprintf_r+0x10e>
   25c66:	68b9      	ldr	r1, [r7, #8]
   25c68:	687b      	ldr	r3, [r7, #4]
   25c6a:	aa32      	add	r2, sp, #200	; 0xc8
   25c6c:	e5d4      	b.n	25818 <_svfprintf_r+0x10a0>
   25c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25c70:	2b00      	cmp	r3, #0
   25c72:	db38      	blt.n	25ce6 <_svfprintf_r+0x156e>
   25c74:	ab16      	add	r3, sp, #88	; 0x58
   25c76:	7fdb      	ldrb	r3, [r3, #31]
   25c78:	4698      	mov	r8, r3
   25c7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25c7c:	2b47      	cmp	r3, #71	; 0x47
   25c7e:	dc2e      	bgt.n	25cde <_svfprintf_r+0x1566>
   25c80:	4b3d      	ldr	r3, [pc, #244]	; (25d78 <_svfprintf_r+0x1600>)
   25c82:	9311      	str	r3, [sp, #68]	; 0x44
   25c84:	f7fe ff23 	bl	24ace <_svfprintf_r+0x356>
   25c88:	9a18      	ldr	r2, [sp, #96]	; 0x60
   25c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   25c8c:	4694      	mov	ip, r2
   25c8e:	4463      	add	r3, ip
   25c90:	4453      	add	r3, sl
   25c92:	001a      	movs	r2, r3
   25c94:	930e      	str	r3, [sp, #56]	; 0x38
   25c96:	43db      	mvns	r3, r3
   25c98:	17db      	asrs	r3, r3, #31
   25c9a:	401a      	ands	r2, r3
   25c9c:	9207      	str	r2, [sp, #28]
   25c9e:	e575      	b.n	2578c <_svfprintf_r+0x1014>
   25ca0:	2301      	movs	r3, #1
   25ca2:	4023      	ands	r3, r4
   25ca4:	9313      	str	r3, [sp, #76]	; 0x4c
   25ca6:	d000      	beq.n	25caa <_svfprintf_r+0x1532>
   25ca8:	e6b4      	b.n	25a14 <_svfprintf_r+0x129c>
   25caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25cac:	43d3      	mvns	r3, r2
   25cae:	17db      	asrs	r3, r3, #31
   25cb0:	401a      	ands	r2, r3
   25cb2:	9207      	str	r2, [sp, #28]
   25cb4:	e56a      	b.n	2578c <_svfprintf_r+0x1014>
   25cb6:	4a2f      	ldr	r2, [pc, #188]	; (25d74 <_svfprintf_r+0x15fc>)
   25cb8:	687b      	ldr	r3, [r7, #4]
   25cba:	4691      	mov	r9, r2
   25cbc:	e42d      	b.n	2551a <_svfprintf_r+0xda2>
   25cbe:	2301      	movs	r3, #1
   25cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   25cc2:	391b      	subs	r1, #27
   25cc4:	1a9d      	subs	r5, r3, r2
   25cc6:	aa16      	add	r2, sp, #88	; 0x58
   25cc8:	332c      	adds	r3, #44	; 0x2c
   25cca:	1852      	adds	r2, r2, r1
   25ccc:	7013      	strb	r3, [r2, #0]
   25cce:	e656      	b.n	2597e <_svfprintf_r+0x1206>
   25cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25cd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   25cd4:	1a98      	subs	r0, r3, r2
   25cd6:	1c43      	adds	r3, r0, #1
   25cd8:	001a      	movs	r2, r3
   25cda:	930e      	str	r3, [sp, #56]	; 0x38
   25cdc:	e72a      	b.n	25b34 <_svfprintf_r+0x13bc>
   25cde:	4b27      	ldr	r3, [pc, #156]	; (25d7c <_svfprintf_r+0x1604>)
   25ce0:	9311      	str	r3, [sp, #68]	; 0x44
   25ce2:	f7fe fef4 	bl	24ace <_svfprintf_r+0x356>
   25ce6:	232d      	movs	r3, #45	; 0x2d
   25ce8:	aa16      	add	r2, sp, #88	; 0x58
   25cea:	77d3      	strb	r3, [r2, #31]
   25cec:	4698      	mov	r8, r3
   25cee:	e7c4      	b.n	25c7a <_svfprintf_r+0x1502>
   25cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25cf2:	1d1a      	adds	r2, r3, #4
   25cf4:	681b      	ldr	r3, [r3, #0]
   25cf6:	469a      	mov	sl, r3
   25cf8:	2b00      	cmp	r3, #0
   25cfa:	db36      	blt.n	25d6a <_svfprintf_r+0x15f2>
   25cfc:	784b      	ldrb	r3, [r1, #1]
   25cfe:	920f      	str	r2, [sp, #60]	; 0x3c
   25d00:	4659      	mov	r1, fp
   25d02:	f7fe fd9d 	bl	24840 <_svfprintf_r+0xc8>
   25d06:	4653      	mov	r3, sl
   25d08:	2b00      	cmp	r3, #0
   25d0a:	d101      	bne.n	25d10 <_svfprintf_r+0x1598>
   25d0c:	07e3      	lsls	r3, r4, #31
   25d0e:	d503      	bpl.n	25d18 <_svfprintf_r+0x15a0>
   25d10:	9b18      	ldr	r3, [sp, #96]	; 0x60
   25d12:	1c58      	adds	r0, r3, #1
   25d14:	0003      	movs	r3, r0
   25d16:	e7bb      	b.n	25c90 <_svfprintf_r+0x1518>
   25d18:	2301      	movs	r3, #1
   25d1a:	e725      	b.n	25b68 <_svfprintf_r+0x13f0>
   25d1c:	ab16      	add	r3, sp, #88	; 0x58
   25d1e:	77d8      	strb	r0, [r3, #31]
   25d20:	f7fe ff6c 	bl	24bfc <_svfprintf_r+0x484>
   25d24:	ab16      	add	r3, sp, #88	; 0x58
   25d26:	77d8      	strb	r0, [r3, #31]
   25d28:	f7ff f814 	bl	24d54 <_svfprintf_r+0x5dc>
   25d2c:	230c      	movs	r3, #12
   25d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25d30:	6013      	str	r3, [r2, #0]
   25d32:	3b0d      	subs	r3, #13
   25d34:	930a      	str	r3, [sp, #40]	; 0x28
   25d36:	f7fe fdac 	bl	24892 <_svfprintf_r+0x11a>
   25d3a:	aa16      	add	r2, sp, #88	; 0x58
   25d3c:	232e      	movs	r3, #46	; 0x2e
   25d3e:	4694      	mov	ip, r2
   25d40:	4463      	add	r3, ip
   25d42:	e65c      	b.n	259fe <_svfprintf_r+0x1286>
   25d44:	ab16      	add	r3, sp, #88	; 0x58
   25d46:	77d8      	strb	r0, [r3, #31]
   25d48:	f7fe fe85 	bl	24a56 <_svfprintf_r+0x2de>
   25d4c:	ab16      	add	r3, sp, #88	; 0x58
   25d4e:	77d8      	strb	r0, [r3, #31]
   25d50:	f7fe fddd 	bl	2490e <_svfprintf_r+0x196>
   25d54:	ab16      	add	r3, sp, #88	; 0x58
   25d56:	77d8      	strb	r0, [r3, #31]
   25d58:	f7ff f87d 	bl	24e56 <_svfprintf_r+0x6de>
   25d5c:	4805      	ldr	r0, [pc, #20]	; (25d74 <_svfprintf_r+0x15fc>)
   25d5e:	4681      	mov	r9, r0
   25d60:	e76d      	b.n	25c3e <_svfprintf_r+0x14c6>
   25d62:	ab16      	add	r3, sp, #88	; 0x58
   25d64:	77d8      	strb	r0, [r3, #31]
   25d66:	f7fe ff79 	bl	24c5c <_svfprintf_r+0x4e4>
   25d6a:	2301      	movs	r3, #1
   25d6c:	425b      	negs	r3, r3
   25d6e:	469a      	mov	sl, r3
   25d70:	e7c4      	b.n	25cfc <_svfprintf_r+0x1584>
   25d72:	46c0      	nop			; (mov r8, r8)
   25d74:	0002d120 	.word	0x0002d120
   25d78:	0002d0d4 	.word	0x0002d0d4
   25d7c:	0002d0d8 	.word	0x0002d0d8

00025d80 <_vfprintf_r>:
   25d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d82:	46de      	mov	lr, fp
   25d84:	464e      	mov	r6, r9
   25d86:	4645      	mov	r5, r8
   25d88:	4657      	mov	r7, sl
   25d8a:	b5e0      	push	{r5, r6, r7, lr}
   25d8c:	b0c3      	sub	sp, #268	; 0x10c
   25d8e:	4689      	mov	r9, r1
   25d90:	0014      	movs	r4, r2
   25d92:	001d      	movs	r5, r3
   25d94:	930f      	str	r3, [sp, #60]	; 0x3c
   25d96:	0006      	movs	r6, r0
   25d98:	9006      	str	r0, [sp, #24]
   25d9a:	f003 f8d3 	bl	28f44 <_localeconv_r>
   25d9e:	6803      	ldr	r3, [r0, #0]
   25da0:	0018      	movs	r0, r3
   25da2:	9318      	str	r3, [sp, #96]	; 0x60
   25da4:	f7fe fc08 	bl	245b8 <strlen>
   25da8:	9017      	str	r0, [sp, #92]	; 0x5c
   25daa:	2e00      	cmp	r6, #0
   25dac:	d004      	beq.n	25db8 <_vfprintf_r+0x38>
   25dae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   25db0:	9307      	str	r3, [sp, #28]
   25db2:	2b00      	cmp	r3, #0
   25db4:	d100      	bne.n	25db8 <_vfprintf_r+0x38>
   25db6:	e0a7      	b.n	25f08 <_vfprintf_r+0x188>
   25db8:	464b      	mov	r3, r9
   25dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   25dbc:	07db      	lsls	r3, r3, #31
   25dbe:	d478      	bmi.n	25eb2 <_vfprintf_r+0x132>
   25dc0:	464b      	mov	r3, r9
   25dc2:	210c      	movs	r1, #12
   25dc4:	5e59      	ldrsh	r1, [r3, r1]
   25dc6:	b28b      	uxth	r3, r1
   25dc8:	059a      	lsls	r2, r3, #22
   25dca:	d56e      	bpl.n	25eaa <_vfprintf_r+0x12a>
   25dcc:	2280      	movs	r2, #128	; 0x80
   25dce:	0192      	lsls	r2, r2, #6
   25dd0:	4213      	tst	r3, r2
   25dd2:	d109      	bne.n	25de8 <_vfprintf_r+0x68>
   25dd4:	430a      	orrs	r2, r1
   25dd6:	464b      	mov	r3, r9
   25dd8:	4649      	mov	r1, r9
   25dda:	819a      	strh	r2, [r3, #12]
   25ddc:	6e49      	ldr	r1, [r1, #100]	; 0x64
   25dde:	4bcc      	ldr	r3, [pc, #816]	; (26110 <_vfprintf_r+0x390>)
   25de0:	400b      	ands	r3, r1
   25de2:	4649      	mov	r1, r9
   25de4:	664b      	str	r3, [r1, #100]	; 0x64
   25de6:	b293      	uxth	r3, r2
   25de8:	071a      	lsls	r2, r3, #28
   25dea:	d567      	bpl.n	25ebc <_vfprintf_r+0x13c>
   25dec:	464a      	mov	r2, r9
   25dee:	6912      	ldr	r2, [r2, #16]
   25df0:	2a00      	cmp	r2, #0
   25df2:	d063      	beq.n	25ebc <_vfprintf_r+0x13c>
   25df4:	221a      	movs	r2, #26
   25df6:	401a      	ands	r2, r3
   25df8:	2a0a      	cmp	r2, #10
   25dfa:	d100      	bne.n	25dfe <_vfprintf_r+0x7e>
   25dfc:	e088      	b.n	25f10 <_vfprintf_r+0x190>
   25dfe:	ab32      	add	r3, sp, #200	; 0xc8
   25e00:	9325      	str	r3, [sp, #148]	; 0x94
   25e02:	2300      	movs	r3, #0
   25e04:	46cb      	mov	fp, r9
   25e06:	af25      	add	r7, sp, #148	; 0x94
   25e08:	60bb      	str	r3, [r7, #8]
   25e0a:	607b      	str	r3, [r7, #4]
   25e0c:	9407      	str	r4, [sp, #28]
   25e0e:	9314      	str	r3, [sp, #80]	; 0x50
   25e10:	9316      	str	r3, [sp, #88]	; 0x58
   25e12:	9315      	str	r3, [sp, #84]	; 0x54
   25e14:	ae32      	add	r6, sp, #200	; 0xc8
   25e16:	9319      	str	r3, [sp, #100]	; 0x64
   25e18:	931a      	str	r3, [sp, #104]	; 0x68
   25e1a:	930a      	str	r3, [sp, #40]	; 0x28
   25e1c:	9c07      	ldr	r4, [sp, #28]
   25e1e:	7823      	ldrb	r3, [r4, #0]
   25e20:	2b00      	cmp	r3, #0
   25e22:	d101      	bne.n	25e28 <_vfprintf_r+0xa8>
   25e24:	f000 fd9e 	bl	26964 <_vfprintf_r+0xbe4>
   25e28:	2b25      	cmp	r3, #37	; 0x25
   25e2a:	d103      	bne.n	25e34 <_vfprintf_r+0xb4>
   25e2c:	f000 fd9a 	bl	26964 <_vfprintf_r+0xbe4>
   25e30:	2b25      	cmp	r3, #37	; 0x25
   25e32:	d003      	beq.n	25e3c <_vfprintf_r+0xbc>
   25e34:	3401      	adds	r4, #1
   25e36:	7823      	ldrb	r3, [r4, #0]
   25e38:	2b00      	cmp	r3, #0
   25e3a:	d1f9      	bne.n	25e30 <_vfprintf_r+0xb0>
   25e3c:	9b07      	ldr	r3, [sp, #28]
   25e3e:	1ae5      	subs	r5, r4, r3
   25e40:	d010      	beq.n	25e64 <_vfprintf_r+0xe4>
   25e42:	9b07      	ldr	r3, [sp, #28]
   25e44:	6075      	str	r5, [r6, #4]
   25e46:	6033      	str	r3, [r6, #0]
   25e48:	68bb      	ldr	r3, [r7, #8]
   25e4a:	195b      	adds	r3, r3, r5
   25e4c:	60bb      	str	r3, [r7, #8]
   25e4e:	687b      	ldr	r3, [r7, #4]
   25e50:	3301      	adds	r3, #1
   25e52:	607b      	str	r3, [r7, #4]
   25e54:	2b07      	cmp	r3, #7
   25e56:	dc4c      	bgt.n	25ef2 <_vfprintf_r+0x172>
   25e58:	3608      	adds	r6, #8
   25e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25e5c:	469c      	mov	ip, r3
   25e5e:	44ac      	add	ip, r5
   25e60:	4663      	mov	r3, ip
   25e62:	930a      	str	r3, [sp, #40]	; 0x28
   25e64:	7823      	ldrb	r3, [r4, #0]
   25e66:	2b00      	cmp	r3, #0
   25e68:	d101      	bne.n	25e6e <_vfprintf_r+0xee>
   25e6a:	f000 fc99 	bl	267a0 <_vfprintf_r+0xa20>
   25e6e:	1c63      	adds	r3, r4, #1
   25e70:	9307      	str	r3, [sp, #28]
   25e72:	2300      	movs	r3, #0
   25e74:	aa16      	add	r2, sp, #88	; 0x58
   25e76:	77d3      	strb	r3, [r2, #31]
   25e78:	2201      	movs	r2, #1
   25e7a:	4252      	negs	r2, r2
   25e7c:	4692      	mov	sl, r2
   25e7e:	2200      	movs	r2, #0
   25e80:	920b      	str	r2, [sp, #44]	; 0x2c
   25e82:	3220      	adds	r2, #32
   25e84:	4691      	mov	r9, r2
   25e86:	3220      	adds	r2, #32
   25e88:	7863      	ldrb	r3, [r4, #1]
   25e8a:	2100      	movs	r1, #0
   25e8c:	2000      	movs	r0, #0
   25e8e:	2400      	movs	r4, #0
   25e90:	4694      	mov	ip, r2
   25e92:	9a07      	ldr	r2, [sp, #28]
   25e94:	3201      	adds	r2, #1
   25e96:	9207      	str	r2, [sp, #28]
   25e98:	001a      	movs	r2, r3
   25e9a:	3a20      	subs	r2, #32
   25e9c:	2a58      	cmp	r2, #88	; 0x58
   25e9e:	d900      	bls.n	25ea2 <_vfprintf_r+0x122>
   25ea0:	e2e7      	b.n	26472 <_vfprintf_r+0x6f2>
   25ea2:	4d9c      	ldr	r5, [pc, #624]	; (26114 <_vfprintf_r+0x394>)
   25ea4:	0092      	lsls	r2, r2, #2
   25ea6:	58aa      	ldr	r2, [r5, r2]
   25ea8:	4697      	mov	pc, r2
   25eaa:	464b      	mov	r3, r9
   25eac:	6d98      	ldr	r0, [r3, #88]	; 0x58
   25eae:	f003 f85b 	bl	28f68 <__retarget_lock_acquire_recursive>
   25eb2:	464b      	mov	r3, r9
   25eb4:	210c      	movs	r1, #12
   25eb6:	5e59      	ldrsh	r1, [r3, r1]
   25eb8:	b28b      	uxth	r3, r1
   25eba:	e787      	b.n	25dcc <_vfprintf_r+0x4c>
   25ebc:	4649      	mov	r1, r9
   25ebe:	9806      	ldr	r0, [sp, #24]
   25ec0:	f001 fb0e 	bl	274e0 <__swsetup_r>
   25ec4:	464b      	mov	r3, r9
   25ec6:	2800      	cmp	r0, #0
   25ec8:	d03a      	beq.n	25f40 <_vfprintf_r+0x1c0>
   25eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   25ecc:	07db      	lsls	r3, r3, #31
   25ece:	d405      	bmi.n	25edc <_vfprintf_r+0x15c>
   25ed0:	464b      	mov	r3, r9
   25ed2:	899b      	ldrh	r3, [r3, #12]
   25ed4:	059b      	lsls	r3, r3, #22
   25ed6:	d401      	bmi.n	25edc <_vfprintf_r+0x15c>
   25ed8:	f000 ffcf 	bl	26e7a <_vfprintf_r+0x10fa>
   25edc:	2301      	movs	r3, #1
   25ede:	425b      	negs	r3, r3
   25ee0:	930a      	str	r3, [sp, #40]	; 0x28
   25ee2:	980a      	ldr	r0, [sp, #40]	; 0x28
   25ee4:	b043      	add	sp, #268	; 0x10c
   25ee6:	bc3c      	pop	{r2, r3, r4, r5}
   25ee8:	4690      	mov	r8, r2
   25eea:	4699      	mov	r9, r3
   25eec:	46a2      	mov	sl, r4
   25eee:	46ab      	mov	fp, r5
   25ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25ef2:	003a      	movs	r2, r7
   25ef4:	4659      	mov	r1, fp
   25ef6:	9806      	ldr	r0, [sp, #24]
   25ef8:	f004 fa5e 	bl	2a3b8 <__sprint_r>
   25efc:	2800      	cmp	r0, #0
   25efe:	d001      	beq.n	25f04 <_vfprintf_r+0x184>
   25f00:	f000 fcce 	bl	268a0 <_vfprintf_r+0xb20>
   25f04:	ae32      	add	r6, sp, #200	; 0xc8
   25f06:	e7a8      	b.n	25e5a <_vfprintf_r+0xda>
   25f08:	9806      	ldr	r0, [sp, #24]
   25f0a:	f002 fcd7 	bl	288bc <__sinit>
   25f0e:	e753      	b.n	25db8 <_vfprintf_r+0x38>
   25f10:	464a      	mov	r2, r9
   25f12:	210e      	movs	r1, #14
   25f14:	5e52      	ldrsh	r2, [r2, r1]
   25f16:	2a00      	cmp	r2, #0
   25f18:	da00      	bge.n	25f1c <_vfprintf_r+0x19c>
   25f1a:	e770      	b.n	25dfe <_vfprintf_r+0x7e>
   25f1c:	464a      	mov	r2, r9
   25f1e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   25f20:	07d2      	lsls	r2, r2, #31
   25f22:	d405      	bmi.n	25f30 <_vfprintf_r+0x1b0>
   25f24:	059b      	lsls	r3, r3, #22
   25f26:	d403      	bmi.n	25f30 <_vfprintf_r+0x1b0>
   25f28:	464b      	mov	r3, r9
   25f2a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   25f2c:	f003 f81e 	bl	28f6c <__retarget_lock_release_recursive>
   25f30:	002b      	movs	r3, r5
   25f32:	0022      	movs	r2, r4
   25f34:	4649      	mov	r1, r9
   25f36:	9806      	ldr	r0, [sp, #24]
   25f38:	f001 fa8e 	bl	27458 <__sbprintf>
   25f3c:	900a      	str	r0, [sp, #40]	; 0x28
   25f3e:	e7d0      	b.n	25ee2 <_vfprintf_r+0x162>
   25f40:	899b      	ldrh	r3, [r3, #12]
   25f42:	e757      	b.n	25df4 <_vfprintf_r+0x74>
   25f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25f46:	920f      	str	r2, [sp, #60]	; 0x3c
   25f48:	425b      	negs	r3, r3
   25f4a:	930b      	str	r3, [sp, #44]	; 0x2c
   25f4c:	2304      	movs	r3, #4
   25f4e:	431c      	orrs	r4, r3
   25f50:	9b07      	ldr	r3, [sp, #28]
   25f52:	781b      	ldrb	r3, [r3, #0]
   25f54:	e79d      	b.n	25e92 <_vfprintf_r+0x112>
   25f56:	9b07      	ldr	r3, [sp, #28]
   25f58:	2101      	movs	r1, #1
   25f5a:	781b      	ldrb	r3, [r3, #0]
   25f5c:	202b      	movs	r0, #43	; 0x2b
   25f5e:	e798      	b.n	25e92 <_vfprintf_r+0x112>
   25f60:	9b07      	ldr	r3, [sp, #28]
   25f62:	1c5a      	adds	r2, r3, #1
   25f64:	781b      	ldrb	r3, [r3, #0]
   25f66:	4690      	mov	r8, r2
   25f68:	2b2a      	cmp	r3, #42	; 0x2a
   25f6a:	d101      	bne.n	25f70 <_vfprintf_r+0x1f0>
   25f6c:	f001 fa38 	bl	273e0 <_vfprintf_r+0x1660>
   25f70:	001a      	movs	r2, r3
   25f72:	2500      	movs	r5, #0
   25f74:	3a30      	subs	r2, #48	; 0x30
   25f76:	46aa      	mov	sl, r5
   25f78:	2a09      	cmp	r2, #9
   25f7a:	d901      	bls.n	25f80 <_vfprintf_r+0x200>
   25f7c:	f001 f96d 	bl	2725a <_vfprintf_r+0x14da>
   25f80:	0025      	movs	r5, r4
   25f82:	4643      	mov	r3, r8
   25f84:	4654      	mov	r4, sl
   25f86:	4688      	mov	r8, r1
   25f88:	4682      	mov	sl, r0
   25f8a:	00a1      	lsls	r1, r4, #2
   25f8c:	190c      	adds	r4, r1, r4
   25f8e:	7818      	ldrb	r0, [r3, #0]
   25f90:	0064      	lsls	r4, r4, #1
   25f92:	18a4      	adds	r4, r4, r2
   25f94:	0002      	movs	r2, r0
   25f96:	1c59      	adds	r1, r3, #1
   25f98:	3a30      	subs	r2, #48	; 0x30
   25f9a:	000b      	movs	r3, r1
   25f9c:	2a09      	cmp	r2, #9
   25f9e:	d9f4      	bls.n	25f8a <_vfprintf_r+0x20a>
   25fa0:	9107      	str	r1, [sp, #28]
   25fa2:	0003      	movs	r3, r0
   25fa4:	4641      	mov	r1, r8
   25fa6:	4650      	mov	r0, sl
   25fa8:	46a2      	mov	sl, r4
   25faa:	002c      	movs	r4, r5
   25fac:	e774      	b.n	25e98 <_vfprintf_r+0x118>
   25fae:	9312      	str	r3, [sp, #72]	; 0x48
   25fb0:	2900      	cmp	r1, #0
   25fb2:	d001      	beq.n	25fb8 <_vfprintf_r+0x238>
   25fb4:	f001 fa2e 	bl	27414 <_vfprintf_r+0x1694>
   25fb8:	4b57      	ldr	r3, [pc, #348]	; (26118 <_vfprintf_r+0x398>)
   25fba:	9319      	str	r3, [sp, #100]	; 0x64
   25fbc:	06a3      	lsls	r3, r4, #26
   25fbe:	d501      	bpl.n	25fc4 <_vfprintf_r+0x244>
   25fc0:	f000 fe9a 	bl	26cf8 <_vfprintf_r+0xf78>
   25fc4:	06e3      	lsls	r3, r4, #27
   25fc6:	d501      	bpl.n	25fcc <_vfprintf_r+0x24c>
   25fc8:	f000 fd9a 	bl	26b00 <_vfprintf_r+0xd80>
   25fcc:	0663      	lsls	r3, r4, #25
   25fce:	d401      	bmi.n	25fd4 <_vfprintf_r+0x254>
   25fd0:	f000 fd96 	bl	26b00 <_vfprintf_r+0xd80>
   25fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25fd6:	881a      	ldrh	r2, [r3, #0]
   25fd8:	920c      	str	r2, [sp, #48]	; 0x30
   25fda:	2200      	movs	r2, #0
   25fdc:	3304      	adds	r3, #4
   25fde:	920d      	str	r2, [sp, #52]	; 0x34
   25fe0:	930f      	str	r3, [sp, #60]	; 0x3c
   25fe2:	07e3      	lsls	r3, r4, #31
   25fe4:	d401      	bmi.n	25fea <_vfprintf_r+0x26a>
   25fe6:	f000 fd76 	bl	26ad6 <_vfprintf_r+0xd56>
   25fea:	990c      	ldr	r1, [sp, #48]	; 0x30
   25fec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25fee:	000b      	movs	r3, r1
   25ff0:	4313      	orrs	r3, r2
   25ff2:	001a      	movs	r2, r3
   25ff4:	2302      	movs	r3, #2
   25ff6:	2a00      	cmp	r2, #0
   25ff8:	d008      	beq.n	2600c <_vfprintf_r+0x28c>
   25ffa:	2030      	movs	r0, #48	; 0x30
   25ffc:	a91e      	add	r1, sp, #120	; 0x78
   25ffe:	7008      	strb	r0, [r1, #0]
   26000:	2548      	movs	r5, #72	; 0x48
   26002:	4668      	mov	r0, sp
   26004:	1940      	adds	r0, r0, r5
   26006:	7800      	ldrb	r0, [r0, #0]
   26008:	431c      	orrs	r4, r3
   2600a:	7048      	strb	r0, [r1, #1]
   2600c:	2100      	movs	r1, #0
   2600e:	4688      	mov	r8, r1
   26010:	a816      	add	r0, sp, #88	; 0x58
   26012:	77c1      	strb	r1, [r0, #31]
   26014:	4651      	mov	r1, sl
   26016:	3101      	adds	r1, #1
   26018:	d100      	bne.n	2601c <_vfprintf_r+0x29c>
   2601a:	e0e6      	b.n	261ea <_vfprintf_r+0x46a>
   2601c:	2180      	movs	r1, #128	; 0x80
   2601e:	0020      	movs	r0, r4
   26020:	4388      	bics	r0, r1
   26022:	9009      	str	r0, [sp, #36]	; 0x24
   26024:	2a00      	cmp	r2, #0
   26026:	d000      	beq.n	2602a <_vfprintf_r+0x2aa>
   26028:	e0e3      	b.n	261f2 <_vfprintf_r+0x472>
   2602a:	4652      	mov	r2, sl
   2602c:	2a00      	cmp	r2, #0
   2602e:	d001      	beq.n	26034 <_vfprintf_r+0x2b4>
   26030:	f000 fc38 	bl	268a4 <_vfprintf_r+0xb24>
   26034:	2b00      	cmp	r3, #0
   26036:	d001      	beq.n	2603c <_vfprintf_r+0x2bc>
   26038:	f000 fd0c 	bl	26a54 <_vfprintf_r+0xcd4>
   2603c:	2001      	movs	r0, #1
   2603e:	ab32      	add	r3, sp, #200	; 0xc8
   26040:	4020      	ands	r0, r4
   26042:	900e      	str	r0, [sp, #56]	; 0x38
   26044:	9311      	str	r3, [sp, #68]	; 0x44
   26046:	d008      	beq.n	2605a <_vfprintf_r+0x2da>
   26048:	2327      	movs	r3, #39	; 0x27
   2604a:	2130      	movs	r1, #48	; 0x30
   2604c:	aa28      	add	r2, sp, #160	; 0xa0
   2604e:	54d1      	strb	r1, [r2, r3]
   26050:	aa16      	add	r2, sp, #88	; 0x58
   26052:	4694      	mov	ip, r2
   26054:	3348      	adds	r3, #72	; 0x48
   26056:	4463      	add	r3, ip
   26058:	9311      	str	r3, [sp, #68]	; 0x44
   2605a:	4653      	mov	r3, sl
   2605c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2605e:	9308      	str	r3, [sp, #32]
   26060:	4592      	cmp	sl, r2
   26062:	da00      	bge.n	26066 <_vfprintf_r+0x2e6>
   26064:	9208      	str	r2, [sp, #32]
   26066:	2300      	movs	r3, #0
   26068:	9313      	str	r3, [sp, #76]	; 0x4c
   2606a:	4643      	mov	r3, r8
   2606c:	2b00      	cmp	r3, #0
   2606e:	d002      	beq.n	26076 <_vfprintf_r+0x2f6>
   26070:	9b08      	ldr	r3, [sp, #32]
   26072:	3301      	adds	r3, #1
   26074:	9308      	str	r3, [sp, #32]
   26076:	2302      	movs	r3, #2
   26078:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2607a:	401a      	ands	r2, r3
   2607c:	4691      	mov	r9, r2
   2607e:	d002      	beq.n	26086 <_vfprintf_r+0x306>
   26080:	9b08      	ldr	r3, [sp, #32]
   26082:	3302      	adds	r3, #2
   26084:	9308      	str	r3, [sp, #32]
   26086:	2384      	movs	r3, #132	; 0x84
   26088:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2608a:	401a      	ands	r2, r3
   2608c:	9210      	str	r2, [sp, #64]	; 0x40
   2608e:	d000      	beq.n	26092 <_vfprintf_r+0x312>
   26090:	e207      	b.n	264a2 <_vfprintf_r+0x722>
   26092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26094:	9a08      	ldr	r2, [sp, #32]
   26096:	1a9c      	subs	r4, r3, r2
   26098:	2c00      	cmp	r4, #0
   2609a:	dc00      	bgt.n	2609e <_vfprintf_r+0x31e>
   2609c:	e201      	b.n	264a2 <_vfprintf_r+0x722>
   2609e:	491f      	ldr	r1, [pc, #124]	; (2611c <_vfprintf_r+0x39c>)
   260a0:	68ba      	ldr	r2, [r7, #8]
   260a2:	687b      	ldr	r3, [r7, #4]
   260a4:	4688      	mov	r8, r1
   260a6:	2c10      	cmp	r4, #16
   260a8:	dd21      	ble.n	260ee <_vfprintf_r+0x36e>
   260aa:	0031      	movs	r1, r6
   260ac:	2510      	movs	r5, #16
   260ae:	465e      	mov	r6, fp
   260b0:	e003      	b.n	260ba <_vfprintf_r+0x33a>
   260b2:	3c10      	subs	r4, #16
   260b4:	3108      	adds	r1, #8
   260b6:	2c10      	cmp	r4, #16
   260b8:	dd17      	ble.n	260ea <_vfprintf_r+0x36a>
   260ba:	4640      	mov	r0, r8
   260bc:	3210      	adds	r2, #16
   260be:	3301      	adds	r3, #1
   260c0:	6008      	str	r0, [r1, #0]
   260c2:	604d      	str	r5, [r1, #4]
   260c4:	60ba      	str	r2, [r7, #8]
   260c6:	607b      	str	r3, [r7, #4]
   260c8:	2b07      	cmp	r3, #7
   260ca:	ddf2      	ble.n	260b2 <_vfprintf_r+0x332>
   260cc:	003a      	movs	r2, r7
   260ce:	0031      	movs	r1, r6
   260d0:	9806      	ldr	r0, [sp, #24]
   260d2:	f004 f971 	bl	2a3b8 <__sprint_r>
   260d6:	2800      	cmp	r0, #0
   260d8:	d001      	beq.n	260de <_vfprintf_r+0x35e>
   260da:	f000 fccf 	bl	26a7c <_vfprintf_r+0xcfc>
   260de:	3c10      	subs	r4, #16
   260e0:	68ba      	ldr	r2, [r7, #8]
   260e2:	687b      	ldr	r3, [r7, #4]
   260e4:	a932      	add	r1, sp, #200	; 0xc8
   260e6:	2c10      	cmp	r4, #16
   260e8:	dce7      	bgt.n	260ba <_vfprintf_r+0x33a>
   260ea:	46b3      	mov	fp, r6
   260ec:	000e      	movs	r6, r1
   260ee:	4641      	mov	r1, r8
   260f0:	6074      	str	r4, [r6, #4]
   260f2:	3301      	adds	r3, #1
   260f4:	18a4      	adds	r4, r4, r2
   260f6:	6031      	str	r1, [r6, #0]
   260f8:	60bc      	str	r4, [r7, #8]
   260fa:	607b      	str	r3, [r7, #4]
   260fc:	2b07      	cmp	r3, #7
   260fe:	dd01      	ble.n	26104 <_vfprintf_r+0x384>
   26100:	f000 fcae 	bl	26a60 <_vfprintf_r+0xce0>
   26104:	ab16      	add	r3, sp, #88	; 0x58
   26106:	7fdb      	ldrb	r3, [r3, #31]
   26108:	3608      	adds	r6, #8
   2610a:	4698      	mov	r8, r3
   2610c:	e1ca      	b.n	264a4 <_vfprintf_r+0x724>
   2610e:	46c0      	nop			; (mov r8, r8)
   26110:	ffffdfff 	.word	0xffffdfff
   26114:	0002d130 	.word	0x0002d130
   26118:	0002d0f0 	.word	0x0002d0f0
   2611c:	0002d294 	.word	0x0002d294
   26120:	2200      	movs	r2, #0
   26122:	9d07      	ldr	r5, [sp, #28]
   26124:	3b30      	subs	r3, #48	; 0x30
   26126:	46a8      	mov	r8, r5
   26128:	920b      	str	r2, [sp, #44]	; 0x2c
   2612a:	001a      	movs	r2, r3
   2612c:	9408      	str	r4, [sp, #32]
   2612e:	002c      	movs	r4, r5
   26130:	4655      	mov	r5, sl
   26132:	4682      	mov	sl, r0
   26134:	4640      	mov	r0, r8
   26136:	4688      	mov	r8, r1
   26138:	0011      	movs	r1, r2
   2613a:	2200      	movs	r2, #0
   2613c:	0093      	lsls	r3, r2, #2
   2613e:	189a      	adds	r2, r3, r2
   26140:	7803      	ldrb	r3, [r0, #0]
   26142:	0052      	lsls	r2, r2, #1
   26144:	188a      	adds	r2, r1, r2
   26146:	0019      	movs	r1, r3
   26148:	3401      	adds	r4, #1
   2614a:	3930      	subs	r1, #48	; 0x30
   2614c:	0020      	movs	r0, r4
   2614e:	2909      	cmp	r1, #9
   26150:	d9f4      	bls.n	2613c <_vfprintf_r+0x3bc>
   26152:	9407      	str	r4, [sp, #28]
   26154:	4650      	mov	r0, sl
   26156:	9c08      	ldr	r4, [sp, #32]
   26158:	920b      	str	r2, [sp, #44]	; 0x2c
   2615a:	4641      	mov	r1, r8
   2615c:	46aa      	mov	sl, r5
   2615e:	e69b      	b.n	25e98 <_vfprintf_r+0x118>
   26160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26162:	9312      	str	r3, [sp, #72]	; 0x48
   26164:	6813      	ldr	r3, [r2, #0]
   26166:	2120      	movs	r1, #32
   26168:	9308      	str	r3, [sp, #32]
   2616a:	466b      	mov	r3, sp
   2616c:	185b      	adds	r3, r3, r1
   2616e:	781b      	ldrb	r3, [r3, #0]
   26170:	ad28      	add	r5, sp, #160	; 0xa0
   26172:	702b      	strb	r3, [r5, #0]
   26174:	2300      	movs	r3, #0
   26176:	a916      	add	r1, sp, #88	; 0x58
   26178:	77cb      	strb	r3, [r1, #31]
   2617a:	0013      	movs	r3, r2
   2617c:	3304      	adds	r3, #4
   2617e:	930f      	str	r3, [sp, #60]	; 0x3c
   26180:	2300      	movs	r3, #0
   26182:	9409      	str	r4, [sp, #36]	; 0x24
   26184:	4698      	mov	r8, r3
   26186:	3301      	adds	r3, #1
   26188:	9308      	str	r3, [sp, #32]
   2618a:	930e      	str	r3, [sp, #56]	; 0x38
   2618c:	2300      	movs	r3, #0
   2618e:	9511      	str	r5, [sp, #68]	; 0x44
   26190:	469a      	mov	sl, r3
   26192:	9313      	str	r3, [sp, #76]	; 0x4c
   26194:	e76f      	b.n	26076 <_vfprintf_r+0x2f6>
   26196:	9312      	str	r3, [sp, #72]	; 0x48
   26198:	2900      	cmp	r1, #0
   2619a:	d001      	beq.n	261a0 <_vfprintf_r+0x420>
   2619c:	f001 f94d 	bl	2743a <_vfprintf_r+0x16ba>
   261a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   261a2:	06a3      	lsls	r3, r4, #26
   261a4:	d501      	bpl.n	261aa <_vfprintf_r+0x42a>
   261a6:	f000 fd5a 	bl	26c5e <_vfprintf_r+0xede>
   261aa:	06e3      	lsls	r3, r4, #27
   261ac:	d501      	bpl.n	261b2 <_vfprintf_r+0x432>
   261ae:	f000 fcab 	bl	26b08 <_vfprintf_r+0xd88>
   261b2:	0663      	lsls	r3, r4, #25
   261b4:	d401      	bmi.n	261ba <_vfprintf_r+0x43a>
   261b6:	f000 fca7 	bl	26b08 <_vfprintf_r+0xd88>
   261ba:	2100      	movs	r1, #0
   261bc:	5e53      	ldrsh	r3, [r2, r1]
   261be:	930c      	str	r3, [sp, #48]	; 0x30
   261c0:	3204      	adds	r2, #4
   261c2:	17db      	asrs	r3, r3, #31
   261c4:	930d      	str	r3, [sp, #52]	; 0x34
   261c6:	920f      	str	r2, [sp, #60]	; 0x3c
   261c8:	2b00      	cmp	r3, #0
   261ca:	da01      	bge.n	261d0 <_vfprintf_r+0x450>
   261cc:	f000 fdb2 	bl	26d34 <_vfprintf_r+0xfb4>
   261d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   261d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   261d4:	0008      	movs	r0, r1
   261d6:	4651      	mov	r1, sl
   261d8:	ab16      	add	r3, sp, #88	; 0x58
   261da:	7fdb      	ldrb	r3, [r3, #31]
   261dc:	4310      	orrs	r0, r2
   261de:	4698      	mov	r8, r3
   261e0:	0002      	movs	r2, r0
   261e2:	2301      	movs	r3, #1
   261e4:	3101      	adds	r1, #1
   261e6:	d000      	beq.n	261ea <_vfprintf_r+0x46a>
   261e8:	e718      	b.n	2601c <_vfprintf_r+0x29c>
   261ea:	2a00      	cmp	r2, #0
   261ec:	d100      	bne.n	261f0 <_vfprintf_r+0x470>
   261ee:	e35a      	b.n	268a6 <_vfprintf_r+0xb26>
   261f0:	9409      	str	r4, [sp, #36]	; 0x24
   261f2:	2b01      	cmp	r3, #1
   261f4:	d101      	bne.n	261fa <_vfprintf_r+0x47a>
   261f6:	f000 fc06 	bl	26a06 <_vfprintf_r+0xc86>
   261fa:	2b02      	cmp	r3, #2
   261fc:	d000      	beq.n	26200 <_vfprintf_r+0x480>
   261fe:	e380      	b.n	26902 <_vfprintf_r+0xb82>
   26200:	9c19      	ldr	r4, [sp, #100]	; 0x64
   26202:	200f      	movs	r0, #15
   26204:	46a1      	mov	r9, r4
   26206:	46b4      	mov	ip, r6
   26208:	ab32      	add	r3, sp, #200	; 0xc8
   2620a:	0019      	movs	r1, r3
   2620c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2620e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26210:	0004      	movs	r4, r0
   26212:	464d      	mov	r5, r9
   26214:	4014      	ands	r4, r2
   26216:	5d2c      	ldrb	r4, [r5, r4]
   26218:	071e      	lsls	r6, r3, #28
   2621a:	0915      	lsrs	r5, r2, #4
   2621c:	3901      	subs	r1, #1
   2621e:	432e      	orrs	r6, r5
   26220:	700c      	strb	r4, [r1, #0]
   26222:	091c      	lsrs	r4, r3, #4
   26224:	0023      	movs	r3, r4
   26226:	0034      	movs	r4, r6
   26228:	0032      	movs	r2, r6
   2622a:	431c      	orrs	r4, r3
   2622c:	d1f0      	bne.n	26210 <_vfprintf_r+0x490>
   2622e:	920c      	str	r2, [sp, #48]	; 0x30
   26230:	930d      	str	r3, [sp, #52]	; 0x34
   26232:	ab32      	add	r3, sp, #200	; 0xc8
   26234:	1a5b      	subs	r3, r3, r1
   26236:	9111      	str	r1, [sp, #68]	; 0x44
   26238:	4666      	mov	r6, ip
   2623a:	930e      	str	r3, [sp, #56]	; 0x38
   2623c:	e70d      	b.n	2605a <_vfprintf_r+0x2da>
   2623e:	4663      	mov	r3, ip
   26240:	431c      	orrs	r4, r3
   26242:	9b07      	ldr	r3, [sp, #28]
   26244:	781b      	ldrb	r3, [r3, #0]
   26246:	e624      	b.n	25e92 <_vfprintf_r+0x112>
   26248:	9b07      	ldr	r3, [sp, #28]
   2624a:	781b      	ldrb	r3, [r3, #0]
   2624c:	2b6c      	cmp	r3, #108	; 0x6c
   2624e:	d101      	bne.n	26254 <_vfprintf_r+0x4d4>
   26250:	f000 fe8c 	bl	26f6c <_vfprintf_r+0x11ec>
   26254:	2210      	movs	r2, #16
   26256:	4314      	orrs	r4, r2
   26258:	e61b      	b.n	25e92 <_vfprintf_r+0x112>
   2625a:	2900      	cmp	r1, #0
   2625c:	d001      	beq.n	26262 <_vfprintf_r+0x4e2>
   2625e:	f001 f8d5 	bl	2740c <_vfprintf_r+0x168c>
   26262:	06a3      	lsls	r3, r4, #26
   26264:	d501      	bpl.n	2626a <_vfprintf_r+0x4ea>
   26266:	f000 fe76 	bl	26f56 <_vfprintf_r+0x11d6>
   2626a:	06e3      	lsls	r3, r4, #27
   2626c:	d500      	bpl.n	26270 <_vfprintf_r+0x4f0>
   2626e:	e110      	b.n	26492 <_vfprintf_r+0x712>
   26270:	0663      	lsls	r3, r4, #25
   26272:	d400      	bmi.n	26276 <_vfprintf_r+0x4f6>
   26274:	e10d      	b.n	26492 <_vfprintf_r+0x712>
   26276:	4669      	mov	r1, sp
   26278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2627a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   2627c:	681a      	ldr	r2, [r3, #0]
   2627e:	3304      	adds	r3, #4
   26280:	9208      	str	r2, [sp, #32]
   26282:	8011      	strh	r1, [r2, #0]
   26284:	930f      	str	r3, [sp, #60]	; 0x3c
   26286:	e5c9      	b.n	25e1c <_vfprintf_r+0x9c>
   26288:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2628a:	2230      	movs	r2, #48	; 0x30
   2628c:	680b      	ldr	r3, [r1, #0]
   2628e:	930c      	str	r3, [sp, #48]	; 0x30
   26290:	2300      	movs	r3, #0
   26292:	930d      	str	r3, [sp, #52]	; 0x34
   26294:	3302      	adds	r3, #2
   26296:	431c      	orrs	r4, r3
   26298:	ab1e      	add	r3, sp, #120	; 0x78
   2629a:	701a      	strb	r2, [r3, #0]
   2629c:	3248      	adds	r2, #72	; 0x48
   2629e:	705a      	strb	r2, [r3, #1]
   262a0:	000b      	movs	r3, r1
   262a2:	3304      	adds	r3, #4
   262a4:	930f      	str	r3, [sp, #60]	; 0x3c
   262a6:	4bc1      	ldr	r3, [pc, #772]	; (265ac <_vfprintf_r+0x82c>)
   262a8:	9212      	str	r2, [sp, #72]	; 0x48
   262aa:	9319      	str	r3, [sp, #100]	; 0x64
   262ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   262ae:	2302      	movs	r3, #2
   262b0:	e6ac      	b.n	2600c <_vfprintf_r+0x28c>
   262b2:	464b      	mov	r3, r9
   262b4:	431c      	orrs	r4, r3
   262b6:	9b07      	ldr	r3, [sp, #28]
   262b8:	781b      	ldrb	r3, [r3, #0]
   262ba:	e5ea      	b.n	25e92 <_vfprintf_r+0x112>
   262bc:	9312      	str	r3, [sp, #72]	; 0x48
   262be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   262c0:	a916      	add	r1, sp, #88	; 0x58
   262c2:	1d1d      	adds	r5, r3, #4
   262c4:	681b      	ldr	r3, [r3, #0]
   262c6:	001a      	movs	r2, r3
   262c8:	9311      	str	r3, [sp, #68]	; 0x44
   262ca:	2300      	movs	r3, #0
   262cc:	77cb      	strb	r3, [r1, #31]
   262ce:	2a00      	cmp	r2, #0
   262d0:	d101      	bne.n	262d6 <_vfprintf_r+0x556>
   262d2:	f000 ff01 	bl	270d8 <_vfprintf_r+0x1358>
   262d6:	4653      	mov	r3, sl
   262d8:	3301      	adds	r3, #1
   262da:	d101      	bne.n	262e0 <_vfprintf_r+0x560>
   262dc:	f000 fe64 	bl	26fa8 <_vfprintf_r+0x1228>
   262e0:	4652      	mov	r2, sl
   262e2:	2100      	movs	r1, #0
   262e4:	9811      	ldr	r0, [sp, #68]	; 0x44
   262e6:	f003 f98f 	bl	29608 <memchr>
   262ea:	2800      	cmp	r0, #0
   262ec:	d101      	bne.n	262f2 <_vfprintf_r+0x572>
   262ee:	f000 ff78 	bl	271e2 <_vfprintf_r+0x1462>
   262f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   262f4:	1ac3      	subs	r3, r0, r3
   262f6:	001a      	movs	r2, r3
   262f8:	930e      	str	r3, [sp, #56]	; 0x38
   262fa:	43db      	mvns	r3, r3
   262fc:	17db      	asrs	r3, r3, #31
   262fe:	401a      	ands	r2, r3
   26300:	ab16      	add	r3, sp, #88	; 0x58
   26302:	7fdb      	ldrb	r3, [r3, #31]
   26304:	9208      	str	r2, [sp, #32]
   26306:	4698      	mov	r8, r3
   26308:	2300      	movs	r3, #0
   2630a:	950f      	str	r5, [sp, #60]	; 0x3c
   2630c:	9409      	str	r4, [sp, #36]	; 0x24
   2630e:	469a      	mov	sl, r3
   26310:	9313      	str	r3, [sp, #76]	; 0x4c
   26312:	e6aa      	b.n	2606a <_vfprintf_r+0x2ea>
   26314:	2308      	movs	r3, #8
   26316:	431c      	orrs	r4, r3
   26318:	9b07      	ldr	r3, [sp, #28]
   2631a:	781b      	ldrb	r3, [r3, #0]
   2631c:	e5b9      	b.n	25e92 <_vfprintf_r+0x112>
   2631e:	9312      	str	r3, [sp, #72]	; 0x48
   26320:	2310      	movs	r3, #16
   26322:	431c      	orrs	r4, r3
   26324:	06a3      	lsls	r3, r4, #26
   26326:	d501      	bpl.n	2632c <_vfprintf_r+0x5ac>
   26328:	f000 fca7 	bl	26c7a <_vfprintf_r+0xefa>
   2632c:	06e3      	lsls	r3, r4, #27
   2632e:	d500      	bpl.n	26332 <_vfprintf_r+0x5b2>
   26330:	e3ee      	b.n	26b10 <_vfprintf_r+0xd90>
   26332:	0663      	lsls	r3, r4, #25
   26334:	d400      	bmi.n	26338 <_vfprintf_r+0x5b8>
   26336:	e3eb      	b.n	26b10 <_vfprintf_r+0xd90>
   26338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2633a:	881a      	ldrh	r2, [r3, #0]
   2633c:	920c      	str	r2, [sp, #48]	; 0x30
   2633e:	2200      	movs	r2, #0
   26340:	3304      	adds	r3, #4
   26342:	920d      	str	r2, [sp, #52]	; 0x34
   26344:	930f      	str	r3, [sp, #60]	; 0x3c
   26346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26348:	2300      	movs	r3, #0
   2634a:	e65f      	b.n	2600c <_vfprintf_r+0x28c>
   2634c:	9312      	str	r3, [sp, #72]	; 0x48
   2634e:	2310      	movs	r3, #16
   26350:	431c      	orrs	r4, r3
   26352:	06a3      	lsls	r3, r4, #26
   26354:	d501      	bpl.n	2635a <_vfprintf_r+0x5da>
   26356:	f000 fcba 	bl	26cce <_vfprintf_r+0xf4e>
   2635a:	06e3      	lsls	r3, r4, #27
   2635c:	d500      	bpl.n	26360 <_vfprintf_r+0x5e0>
   2635e:	e3da      	b.n	26b16 <_vfprintf_r+0xd96>
   26360:	0663      	lsls	r3, r4, #25
   26362:	d400      	bmi.n	26366 <_vfprintf_r+0x5e6>
   26364:	e3d7      	b.n	26b16 <_vfprintf_r+0xd96>
   26366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26368:	881a      	ldrh	r2, [r3, #0]
   2636a:	920c      	str	r2, [sp, #48]	; 0x30
   2636c:	2200      	movs	r2, #0
   2636e:	3304      	adds	r3, #4
   26370:	920d      	str	r2, [sp, #52]	; 0x34
   26372:	930f      	str	r3, [sp, #60]	; 0x3c
   26374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   26376:	2301      	movs	r3, #1
   26378:	e648      	b.n	2600c <_vfprintf_r+0x28c>
   2637a:	9312      	str	r3, [sp, #72]	; 0x48
   2637c:	2900      	cmp	r1, #0
   2637e:	d001      	beq.n	26384 <_vfprintf_r+0x604>
   26380:	f001 f857 	bl	27432 <_vfprintf_r+0x16b2>
   26384:	4b8a      	ldr	r3, [pc, #552]	; (265b0 <_vfprintf_r+0x830>)
   26386:	9319      	str	r3, [sp, #100]	; 0x64
   26388:	e618      	b.n	25fbc <_vfprintf_r+0x23c>
   2638a:	2301      	movs	r3, #1
   2638c:	431c      	orrs	r4, r3
   2638e:	9b07      	ldr	r3, [sp, #28]
   26390:	781b      	ldrb	r3, [r3, #0]
   26392:	e57e      	b.n	25e92 <_vfprintf_r+0x112>
   26394:	2380      	movs	r3, #128	; 0x80
   26396:	431c      	orrs	r4, r3
   26398:	9b07      	ldr	r3, [sp, #28]
   2639a:	781b      	ldrb	r3, [r3, #0]
   2639c:	e579      	b.n	25e92 <_vfprintf_r+0x112>
   2639e:	9b07      	ldr	r3, [sp, #28]
   263a0:	781b      	ldrb	r3, [r3, #0]
   263a2:	2800      	cmp	r0, #0
   263a4:	d000      	beq.n	263a8 <_vfprintf_r+0x628>
   263a6:	e574      	b.n	25e92 <_vfprintf_r+0x112>
   263a8:	2101      	movs	r1, #1
   263aa:	3020      	adds	r0, #32
   263ac:	e571      	b.n	25e92 <_vfprintf_r+0x112>
   263ae:	9312      	str	r3, [sp, #72]	; 0x48
   263b0:	2900      	cmp	r1, #0
   263b2:	d001      	beq.n	263b8 <_vfprintf_r+0x638>
   263b4:	f001 f839 	bl	2742a <_vfprintf_r+0x16aa>
   263b8:	2207      	movs	r2, #7
   263ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   263bc:	3307      	adds	r3, #7
   263be:	4393      	bics	r3, r2
   263c0:	3201      	adds	r2, #1
   263c2:	4694      	mov	ip, r2
   263c4:	449c      	add	ip, r3
   263c6:	4662      	mov	r2, ip
   263c8:	920f      	str	r2, [sp, #60]	; 0x3c
   263ca:	681a      	ldr	r2, [r3, #0]
   263cc:	9216      	str	r2, [sp, #88]	; 0x58
   263ce:	685b      	ldr	r3, [r3, #4]
   263d0:	2201      	movs	r2, #1
   263d2:	9315      	str	r3, [sp, #84]	; 0x54
   263d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   263d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
   263d8:	005b      	lsls	r3, r3, #1
   263da:	085b      	lsrs	r3, r3, #1
   263dc:	4698      	mov	r8, r3
   263de:	4252      	negs	r2, r2
   263e0:	4b74      	ldr	r3, [pc, #464]	; (265b4 <_vfprintf_r+0x834>)
   263e2:	0028      	movs	r0, r5
   263e4:	4641      	mov	r1, r8
   263e6:	f004 fa81 	bl	2a8ec <__aeabi_dcmpun>
   263ea:	2800      	cmp	r0, #0
   263ec:	d001      	beq.n	263f2 <_vfprintf_r+0x672>
   263ee:	f000 fcb4 	bl	26d5a <_vfprintf_r+0xfda>
   263f2:	2201      	movs	r2, #1
   263f4:	4b6f      	ldr	r3, [pc, #444]	; (265b4 <_vfprintf_r+0x834>)
   263f6:	4252      	negs	r2, r2
   263f8:	0028      	movs	r0, r5
   263fa:	4641      	mov	r1, r8
   263fc:	f7fa ffca 	bl	21394 <__aeabi_dcmple>
   26400:	2800      	cmp	r0, #0
   26402:	d001      	beq.n	26408 <_vfprintf_r+0x688>
   26404:	f000 fca9 	bl	26d5a <_vfprintf_r+0xfda>
   26408:	2200      	movs	r2, #0
   2640a:	2300      	movs	r3, #0
   2640c:	9816      	ldr	r0, [sp, #88]	; 0x58
   2640e:	9915      	ldr	r1, [sp, #84]	; 0x54
   26410:	f7fa ffb6 	bl	21380 <__aeabi_dcmplt>
   26414:	2800      	cmp	r0, #0
   26416:	d001      	beq.n	2641c <_vfprintf_r+0x69c>
   26418:	f000 fd55 	bl	26ec6 <_vfprintf_r+0x1146>
   2641c:	ab16      	add	r3, sp, #88	; 0x58
   2641e:	7fdb      	ldrb	r3, [r3, #31]
   26420:	4698      	mov	r8, r3
   26422:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26424:	2b47      	cmp	r3, #71	; 0x47
   26426:	dd01      	ble.n	2642c <_vfprintf_r+0x6ac>
   26428:	f000 fdb4 	bl	26f94 <_vfprintf_r+0x1214>
   2642c:	4b62      	ldr	r3, [pc, #392]	; (265b8 <_vfprintf_r+0x838>)
   2642e:	9311      	str	r3, [sp, #68]	; 0x44
   26430:	2380      	movs	r3, #128	; 0x80
   26432:	439c      	bics	r4, r3
   26434:	3b7d      	subs	r3, #125	; 0x7d
   26436:	9308      	str	r3, [sp, #32]
   26438:	930e      	str	r3, [sp, #56]	; 0x38
   2643a:	2300      	movs	r3, #0
   2643c:	9409      	str	r4, [sp, #36]	; 0x24
   2643e:	469a      	mov	sl, r3
   26440:	9313      	str	r3, [sp, #76]	; 0x4c
   26442:	e612      	b.n	2606a <_vfprintf_r+0x2ea>
   26444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26446:	1d1a      	adds	r2, r3, #4
   26448:	681b      	ldr	r3, [r3, #0]
   2644a:	930b      	str	r3, [sp, #44]	; 0x2c
   2644c:	2b00      	cmp	r3, #0
   2644e:	da00      	bge.n	26452 <_vfprintf_r+0x6d2>
   26450:	e578      	b.n	25f44 <_vfprintf_r+0x1c4>
   26452:	9b07      	ldr	r3, [sp, #28]
   26454:	920f      	str	r2, [sp, #60]	; 0x3c
   26456:	781b      	ldrb	r3, [r3, #0]
   26458:	e51b      	b.n	25e92 <_vfprintf_r+0x112>
   2645a:	9312      	str	r3, [sp, #72]	; 0x48
   2645c:	2900      	cmp	r1, #0
   2645e:	d001      	beq.n	26464 <_vfprintf_r+0x6e4>
   26460:	f000 ffcc 	bl	273fc <_vfprintf_r+0x167c>
   26464:	2310      	movs	r3, #16
   26466:	431c      	orrs	r4, r3
   26468:	e69a      	b.n	261a0 <_vfprintf_r+0x420>
   2646a:	9312      	str	r3, [sp, #72]	; 0x48
   2646c:	e771      	b.n	26352 <_vfprintf_r+0x5d2>
   2646e:	9312      	str	r3, [sp, #72]	; 0x48
   26470:	e758      	b.n	26324 <_vfprintf_r+0x5a4>
   26472:	9312      	str	r3, [sp, #72]	; 0x48
   26474:	2900      	cmp	r1, #0
   26476:	d001      	beq.n	2647c <_vfprintf_r+0x6fc>
   26478:	f000 ffd3 	bl	27422 <_vfprintf_r+0x16a2>
   2647c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2647e:	2b00      	cmp	r3, #0
   26480:	d100      	bne.n	26484 <_vfprintf_r+0x704>
   26482:	e18d      	b.n	267a0 <_vfprintf_r+0xa20>
   26484:	ad28      	add	r5, sp, #160	; 0xa0
   26486:	702b      	strb	r3, [r5, #0]
   26488:	2300      	movs	r3, #0
   2648a:	aa16      	add	r2, sp, #88	; 0x58
   2648c:	77d3      	strb	r3, [r2, #31]
   2648e:	9409      	str	r4, [sp, #36]	; 0x24
   26490:	e678      	b.n	26184 <_vfprintf_r+0x404>
   26492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   26494:	990a      	ldr	r1, [sp, #40]	; 0x28
   26496:	6813      	ldr	r3, [r2, #0]
   26498:	6019      	str	r1, [r3, #0]
   2649a:	0013      	movs	r3, r2
   2649c:	3304      	adds	r3, #4
   2649e:	930f      	str	r3, [sp, #60]	; 0x3c
   264a0:	e4bc      	b.n	25e1c <_vfprintf_r+0x9c>
   264a2:	68bc      	ldr	r4, [r7, #8]
   264a4:	4643      	mov	r3, r8
   264a6:	2b00      	cmp	r3, #0
   264a8:	d00f      	beq.n	264ca <_vfprintf_r+0x74a>
   264aa:	aa16      	add	r2, sp, #88	; 0x58
   264ac:	231f      	movs	r3, #31
   264ae:	4694      	mov	ip, r2
   264b0:	4463      	add	r3, ip
   264b2:	6033      	str	r3, [r6, #0]
   264b4:	2301      	movs	r3, #1
   264b6:	6073      	str	r3, [r6, #4]
   264b8:	687b      	ldr	r3, [r7, #4]
   264ba:	3401      	adds	r4, #1
   264bc:	3301      	adds	r3, #1
   264be:	60bc      	str	r4, [r7, #8]
   264c0:	607b      	str	r3, [r7, #4]
   264c2:	2b07      	cmp	r3, #7
   264c4:	dd00      	ble.n	264c8 <_vfprintf_r+0x748>
   264c6:	e203      	b.n	268d0 <_vfprintf_r+0xb50>
   264c8:	3608      	adds	r6, #8
   264ca:	464b      	mov	r3, r9
   264cc:	2b00      	cmp	r3, #0
   264ce:	d00c      	beq.n	264ea <_vfprintf_r+0x76a>
   264d0:	ab1e      	add	r3, sp, #120	; 0x78
   264d2:	6033      	str	r3, [r6, #0]
   264d4:	2302      	movs	r3, #2
   264d6:	6073      	str	r3, [r6, #4]
   264d8:	687b      	ldr	r3, [r7, #4]
   264da:	3402      	adds	r4, #2
   264dc:	3301      	adds	r3, #1
   264de:	60bc      	str	r4, [r7, #8]
   264e0:	607b      	str	r3, [r7, #4]
   264e2:	2b07      	cmp	r3, #7
   264e4:	dd00      	ble.n	264e8 <_vfprintf_r+0x768>
   264e6:	e1fd      	b.n	268e4 <_vfprintf_r+0xb64>
   264e8:	3608      	adds	r6, #8
   264ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   264ec:	2b80      	cmp	r3, #128	; 0x80
   264ee:	d100      	bne.n	264f2 <_vfprintf_r+0x772>
   264f0:	e173      	b.n	267da <_vfprintf_r+0xa5a>
   264f2:	4653      	mov	r3, sl
   264f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   264f6:	1a9d      	subs	r5, r3, r2
   264f8:	2d00      	cmp	r5, #0
   264fa:	dd32      	ble.n	26562 <_vfprintf_r+0x7e2>
   264fc:	4a2f      	ldr	r2, [pc, #188]	; (265bc <_vfprintf_r+0x83c>)
   264fe:	687b      	ldr	r3, [r7, #4]
   26500:	4691      	mov	r9, r2
   26502:	2d10      	cmp	r5, #16
   26504:	dd22      	ble.n	2654c <_vfprintf_r+0x7cc>
   26506:	2210      	movs	r2, #16
   26508:	4692      	mov	sl, r2
   2650a:	0022      	movs	r2, r4
   2650c:	465c      	mov	r4, fp
   2650e:	e003      	b.n	26518 <_vfprintf_r+0x798>
   26510:	3d10      	subs	r5, #16
   26512:	3608      	adds	r6, #8
   26514:	2d10      	cmp	r5, #16
   26516:	dd17      	ble.n	26548 <_vfprintf_r+0x7c8>
   26518:	4649      	mov	r1, r9
   2651a:	6031      	str	r1, [r6, #0]
   2651c:	4651      	mov	r1, sl
   2651e:	3210      	adds	r2, #16
   26520:	3301      	adds	r3, #1
   26522:	6071      	str	r1, [r6, #4]
   26524:	60ba      	str	r2, [r7, #8]
   26526:	607b      	str	r3, [r7, #4]
   26528:	2b07      	cmp	r3, #7
   2652a:	ddf1      	ble.n	26510 <_vfprintf_r+0x790>
   2652c:	003a      	movs	r2, r7
   2652e:	0021      	movs	r1, r4
   26530:	9806      	ldr	r0, [sp, #24]
   26532:	f003 ff41 	bl	2a3b8 <__sprint_r>
   26536:	2800      	cmp	r0, #0
   26538:	d000      	beq.n	2653c <_vfprintf_r+0x7bc>
   2653a:	e18a      	b.n	26852 <_vfprintf_r+0xad2>
   2653c:	3d10      	subs	r5, #16
   2653e:	68ba      	ldr	r2, [r7, #8]
   26540:	687b      	ldr	r3, [r7, #4]
   26542:	ae32      	add	r6, sp, #200	; 0xc8
   26544:	2d10      	cmp	r5, #16
   26546:	dce7      	bgt.n	26518 <_vfprintf_r+0x798>
   26548:	46a3      	mov	fp, r4
   2654a:	0014      	movs	r4, r2
   2654c:	464a      	mov	r2, r9
   2654e:	1964      	adds	r4, r4, r5
   26550:	3301      	adds	r3, #1
   26552:	6032      	str	r2, [r6, #0]
   26554:	6075      	str	r5, [r6, #4]
   26556:	60bc      	str	r4, [r7, #8]
   26558:	607b      	str	r3, [r7, #4]
   2655a:	2b07      	cmp	r3, #7
   2655c:	dd00      	ble.n	26560 <_vfprintf_r+0x7e0>
   2655e:	e1ad      	b.n	268bc <_vfprintf_r+0xb3c>
   26560:	3608      	adds	r6, #8
   26562:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26564:	05db      	lsls	r3, r3, #23
   26566:	d500      	bpl.n	2656a <_vfprintf_r+0x7ea>
   26568:	e0be      	b.n	266e8 <_vfprintf_r+0x968>
   2656a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2656c:	6033      	str	r3, [r6, #0]
   2656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26570:	469c      	mov	ip, r3
   26572:	6073      	str	r3, [r6, #4]
   26574:	687b      	ldr	r3, [r7, #4]
   26576:	4464      	add	r4, ip
   26578:	3301      	adds	r3, #1
   2657a:	60bc      	str	r4, [r7, #8]
   2657c:	607b      	str	r3, [r7, #4]
   2657e:	2b07      	cmp	r3, #7
   26580:	dd00      	ble.n	26584 <_vfprintf_r+0x804>
   26582:	e0a6      	b.n	266d2 <_vfprintf_r+0x952>
   26584:	3608      	adds	r6, #8
   26586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26588:	075b      	lsls	r3, r3, #29
   2658a:	d54a      	bpl.n	26622 <_vfprintf_r+0x8a2>
   2658c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2658e:	9a08      	ldr	r2, [sp, #32]
   26590:	1a9d      	subs	r5, r3, r2
   26592:	2d00      	cmp	r5, #0
   26594:	dd45      	ble.n	26622 <_vfprintf_r+0x8a2>
   26596:	4a0a      	ldr	r2, [pc, #40]	; (265c0 <_vfprintf_r+0x840>)
   26598:	687b      	ldr	r3, [r7, #4]
   2659a:	4690      	mov	r8, r2
   2659c:	2d10      	cmp	r5, #16
   2659e:	dd2f      	ble.n	26600 <_vfprintf_r+0x880>
   265a0:	2210      	movs	r2, #16
   265a2:	4691      	mov	r9, r2
   265a4:	0022      	movs	r2, r4
   265a6:	465c      	mov	r4, fp
   265a8:	e010      	b.n	265cc <_vfprintf_r+0x84c>
   265aa:	46c0      	nop			; (mov r8, r8)
   265ac:	0002d0f0 	.word	0x0002d0f0
   265b0:	0002d0dc 	.word	0x0002d0dc
   265b4:	7fefffff 	.word	0x7fefffff
   265b8:	0002d0cc 	.word	0x0002d0cc
   265bc:	0002d2a4 	.word	0x0002d2a4
   265c0:	0002d294 	.word	0x0002d294
   265c4:	3d10      	subs	r5, #16
   265c6:	3608      	adds	r6, #8
   265c8:	2d10      	cmp	r5, #16
   265ca:	dd17      	ble.n	265fc <_vfprintf_r+0x87c>
   265cc:	49d1      	ldr	r1, [pc, #836]	; (26914 <_vfprintf_r+0xb94>)
   265ce:	3210      	adds	r2, #16
   265d0:	6031      	str	r1, [r6, #0]
   265d2:	4649      	mov	r1, r9
   265d4:	3301      	adds	r3, #1
   265d6:	6071      	str	r1, [r6, #4]
   265d8:	60ba      	str	r2, [r7, #8]
   265da:	607b      	str	r3, [r7, #4]
   265dc:	2b07      	cmp	r3, #7
   265de:	ddf1      	ble.n	265c4 <_vfprintf_r+0x844>
   265e0:	003a      	movs	r2, r7
   265e2:	0021      	movs	r1, r4
   265e4:	9806      	ldr	r0, [sp, #24]
   265e6:	f003 fee7 	bl	2a3b8 <__sprint_r>
   265ea:	2800      	cmp	r0, #0
   265ec:	d000      	beq.n	265f0 <_vfprintf_r+0x870>
   265ee:	e130      	b.n	26852 <_vfprintf_r+0xad2>
   265f0:	3d10      	subs	r5, #16
   265f2:	68ba      	ldr	r2, [r7, #8]
   265f4:	687b      	ldr	r3, [r7, #4]
   265f6:	ae32      	add	r6, sp, #200	; 0xc8
   265f8:	2d10      	cmp	r5, #16
   265fa:	dce7      	bgt.n	265cc <_vfprintf_r+0x84c>
   265fc:	46a3      	mov	fp, r4
   265fe:	0014      	movs	r4, r2
   26600:	4642      	mov	r2, r8
   26602:	1964      	adds	r4, r4, r5
   26604:	3301      	adds	r3, #1
   26606:	c624      	stmia	r6!, {r2, r5}
   26608:	60bc      	str	r4, [r7, #8]
   2660a:	607b      	str	r3, [r7, #4]
   2660c:	2b07      	cmp	r3, #7
   2660e:	dd08      	ble.n	26622 <_vfprintf_r+0x8a2>
   26610:	003a      	movs	r2, r7
   26612:	4659      	mov	r1, fp
   26614:	9806      	ldr	r0, [sp, #24]
   26616:	f003 fecf 	bl	2a3b8 <__sprint_r>
   2661a:	2800      	cmp	r0, #0
   2661c:	d000      	beq.n	26620 <_vfprintf_r+0x8a0>
   2661e:	e13f      	b.n	268a0 <_vfprintf_r+0xb20>
   26620:	68bc      	ldr	r4, [r7, #8]
   26622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26624:	9908      	ldr	r1, [sp, #32]
   26626:	428b      	cmp	r3, r1
   26628:	da00      	bge.n	2662c <_vfprintf_r+0x8ac>
   2662a:	000b      	movs	r3, r1
   2662c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2662e:	4694      	mov	ip, r2
   26630:	449c      	add	ip, r3
   26632:	4663      	mov	r3, ip
   26634:	930a      	str	r3, [sp, #40]	; 0x28
   26636:	2c00      	cmp	r4, #0
   26638:	d000      	beq.n	2663c <_vfprintf_r+0x8bc>
   2663a:	e129      	b.n	26890 <_vfprintf_r+0xb10>
   2663c:	2300      	movs	r3, #0
   2663e:	ae32      	add	r6, sp, #200	; 0xc8
   26640:	607b      	str	r3, [r7, #4]
   26642:	f7ff fbeb 	bl	25e1c <_vfprintf_r+0x9c>
   26646:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26648:	2b01      	cmp	r3, #1
   2664a:	dc00      	bgt.n	2664e <_vfprintf_r+0x8ce>
   2664c:	e103      	b.n	26856 <_vfprintf_r+0xad6>
   2664e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26650:	3401      	adds	r4, #1
   26652:	6033      	str	r3, [r6, #0]
   26654:	2301      	movs	r3, #1
   26656:	6073      	str	r3, [r6, #4]
   26658:	687b      	ldr	r3, [r7, #4]
   2665a:	60bc      	str	r4, [r7, #8]
   2665c:	3301      	adds	r3, #1
   2665e:	607b      	str	r3, [r7, #4]
   26660:	2b07      	cmp	r3, #7
   26662:	dd00      	ble.n	26666 <_vfprintf_r+0x8e6>
   26664:	e2ef      	b.n	26c46 <_vfprintf_r+0xec6>
   26666:	3608      	adds	r6, #8
   26668:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2666a:	3301      	adds	r3, #1
   2666c:	6032      	str	r2, [r6, #0]
   2666e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   26670:	4698      	mov	r8, r3
   26672:	4694      	mov	ip, r2
   26674:	4464      	add	r4, ip
   26676:	6072      	str	r2, [r6, #4]
   26678:	60bc      	str	r4, [r7, #8]
   2667a:	607b      	str	r3, [r7, #4]
   2667c:	2b07      	cmp	r3, #7
   2667e:	dd00      	ble.n	26682 <_vfprintf_r+0x902>
   26680:	e318      	b.n	26cb4 <_vfprintf_r+0xf34>
   26682:	3608      	adds	r6, #8
   26684:	2200      	movs	r2, #0
   26686:	2300      	movs	r3, #0
   26688:	9816      	ldr	r0, [sp, #88]	; 0x58
   2668a:	9915      	ldr	r1, [sp, #84]	; 0x54
   2668c:	f7fa fe72 	bl	21374 <__aeabi_dcmpeq>
   26690:	2800      	cmp	r0, #0
   26692:	d000      	beq.n	26696 <_vfprintf_r+0x916>
   26694:	e1f4      	b.n	26a80 <_vfprintf_r+0xd00>
   26696:	9d11      	ldr	r5, [sp, #68]	; 0x44
   26698:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2669a:	3501      	adds	r5, #1
   2669c:	3b01      	subs	r3, #1
   2669e:	6035      	str	r5, [r6, #0]
   266a0:	6073      	str	r3, [r6, #4]
   266a2:	18e4      	adds	r4, r4, r3
   266a4:	2301      	movs	r3, #1
   266a6:	469c      	mov	ip, r3
   266a8:	44e0      	add	r8, ip
   266aa:	4643      	mov	r3, r8
   266ac:	60bc      	str	r4, [r7, #8]
   266ae:	607b      	str	r3, [r7, #4]
   266b0:	2b07      	cmp	r3, #7
   266b2:	dd00      	ble.n	266b6 <_vfprintf_r+0x936>
   266b4:	e0e0      	b.n	26878 <_vfprintf_r+0xaf8>
   266b6:	3608      	adds	r6, #8
   266b8:	ab21      	add	r3, sp, #132	; 0x84
   266ba:	6033      	str	r3, [r6, #0]
   266bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   266be:	469c      	mov	ip, r3
   266c0:	6073      	str	r3, [r6, #4]
   266c2:	4643      	mov	r3, r8
   266c4:	4464      	add	r4, ip
   266c6:	3301      	adds	r3, #1
   266c8:	60bc      	str	r4, [r7, #8]
   266ca:	607b      	str	r3, [r7, #4]
   266cc:	2b07      	cmp	r3, #7
   266ce:	dc00      	bgt.n	266d2 <_vfprintf_r+0x952>
   266d0:	e758      	b.n	26584 <_vfprintf_r+0x804>
   266d2:	003a      	movs	r2, r7
   266d4:	4659      	mov	r1, fp
   266d6:	9806      	ldr	r0, [sp, #24]
   266d8:	f003 fe6e 	bl	2a3b8 <__sprint_r>
   266dc:	2800      	cmp	r0, #0
   266de:	d000      	beq.n	266e2 <_vfprintf_r+0x962>
   266e0:	e0de      	b.n	268a0 <_vfprintf_r+0xb20>
   266e2:	68bc      	ldr	r4, [r7, #8]
   266e4:	ae32      	add	r6, sp, #200	; 0xc8
   266e6:	e74e      	b.n	26586 <_vfprintf_r+0x806>
   266e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   266ea:	2b65      	cmp	r3, #101	; 0x65
   266ec:	ddab      	ble.n	26646 <_vfprintf_r+0x8c6>
   266ee:	2200      	movs	r2, #0
   266f0:	2300      	movs	r3, #0
   266f2:	9816      	ldr	r0, [sp, #88]	; 0x58
   266f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   266f6:	f7fa fe3d 	bl	21374 <__aeabi_dcmpeq>
   266fa:	2800      	cmp	r0, #0
   266fc:	d100      	bne.n	26700 <_vfprintf_r+0x980>
   266fe:	e134      	b.n	2696a <_vfprintf_r+0xbea>
   26700:	4b85      	ldr	r3, [pc, #532]	; (26918 <_vfprintf_r+0xb98>)
   26702:	3401      	adds	r4, #1
   26704:	6033      	str	r3, [r6, #0]
   26706:	2301      	movs	r3, #1
   26708:	6073      	str	r3, [r6, #4]
   2670a:	687b      	ldr	r3, [r7, #4]
   2670c:	60bc      	str	r4, [r7, #8]
   2670e:	3301      	adds	r3, #1
   26710:	607b      	str	r3, [r7, #4]
   26712:	2b07      	cmp	r3, #7
   26714:	dd00      	ble.n	26718 <_vfprintf_r+0x998>
   26716:	e3dc      	b.n	26ed2 <_vfprintf_r+0x1152>
   26718:	3608      	adds	r6, #8
   2671a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2671c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2671e:	4293      	cmp	r3, r2
   26720:	db03      	blt.n	2672a <_vfprintf_r+0x9aa>
   26722:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26724:	07db      	lsls	r3, r3, #31
   26726:	d400      	bmi.n	2672a <_vfprintf_r+0x9aa>
   26728:	e3b7      	b.n	26e9a <_vfprintf_r+0x111a>
   2672a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2672c:	68ba      	ldr	r2, [r7, #8]
   2672e:	6033      	str	r3, [r6, #0]
   26730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   26732:	469c      	mov	ip, r3
   26734:	6073      	str	r3, [r6, #4]
   26736:	687b      	ldr	r3, [r7, #4]
   26738:	4462      	add	r2, ip
   2673a:	3301      	adds	r3, #1
   2673c:	0014      	movs	r4, r2
   2673e:	60ba      	str	r2, [r7, #8]
   26740:	607b      	str	r3, [r7, #4]
   26742:	2b07      	cmp	r3, #7
   26744:	dd01      	ble.n	2674a <_vfprintf_r+0x9ca>
   26746:	f000 fc19 	bl	26f7c <_vfprintf_r+0x11fc>
   2674a:	3608      	adds	r6, #8
   2674c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2674e:	1e5d      	subs	r5, r3, #1
   26750:	2d00      	cmp	r5, #0
   26752:	dc00      	bgt.n	26756 <_vfprintf_r+0x9d6>
   26754:	e717      	b.n	26586 <_vfprintf_r+0x806>
   26756:	4a71      	ldr	r2, [pc, #452]	; (2691c <_vfprintf_r+0xb9c>)
   26758:	687b      	ldr	r3, [r7, #4]
   2675a:	4691      	mov	r9, r2
   2675c:	2d10      	cmp	r5, #16
   2675e:	dc00      	bgt.n	26762 <_vfprintf_r+0x9e2>
   26760:	e1c3      	b.n	26aea <_vfprintf_r+0xd6a>
   26762:	2210      	movs	r2, #16
   26764:	4690      	mov	r8, r2
   26766:	0022      	movs	r2, r4
   26768:	464c      	mov	r4, r9
   2676a:	46d9      	mov	r9, fp
   2676c:	e004      	b.n	26778 <_vfprintf_r+0x9f8>
   2676e:	3608      	adds	r6, #8
   26770:	3d10      	subs	r5, #16
   26772:	2d10      	cmp	r5, #16
   26774:	dc00      	bgt.n	26778 <_vfprintf_r+0x9f8>
   26776:	e37c      	b.n	26e72 <_vfprintf_r+0x10f2>
   26778:	4641      	mov	r1, r8
   2677a:	3210      	adds	r2, #16
   2677c:	3301      	adds	r3, #1
   2677e:	6034      	str	r4, [r6, #0]
   26780:	6071      	str	r1, [r6, #4]
   26782:	60ba      	str	r2, [r7, #8]
   26784:	607b      	str	r3, [r7, #4]
   26786:	2b07      	cmp	r3, #7
   26788:	ddf1      	ble.n	2676e <_vfprintf_r+0x9ee>
   2678a:	003a      	movs	r2, r7
   2678c:	4649      	mov	r1, r9
   2678e:	9806      	ldr	r0, [sp, #24]
   26790:	f003 fe12 	bl	2a3b8 <__sprint_r>
   26794:	2800      	cmp	r0, #0
   26796:	d10b      	bne.n	267b0 <_vfprintf_r+0xa30>
   26798:	68ba      	ldr	r2, [r7, #8]
   2679a:	687b      	ldr	r3, [r7, #4]
   2679c:	ae32      	add	r6, sp, #200	; 0xc8
   2679e:	e7e7      	b.n	26770 <_vfprintf_r+0x9f0>
   267a0:	68bb      	ldr	r3, [r7, #8]
   267a2:	46d9      	mov	r9, fp
   267a4:	2b00      	cmp	r3, #0
   267a6:	d001      	beq.n	267ac <_vfprintf_r+0xa2c>
   267a8:	f000 fd4c 	bl	27244 <_vfprintf_r+0x14c4>
   267ac:	2300      	movs	r3, #0
   267ae:	607b      	str	r3, [r7, #4]
   267b0:	464b      	mov	r3, r9
   267b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   267b4:	07db      	lsls	r3, r3, #31
   267b6:	d40d      	bmi.n	267d4 <_vfprintf_r+0xa54>
   267b8:	464b      	mov	r3, r9
   267ba:	899b      	ldrh	r3, [r3, #12]
   267bc:	059a      	lsls	r2, r3, #22
   267be:	d505      	bpl.n	267cc <_vfprintf_r+0xa4c>
   267c0:	065b      	lsls	r3, r3, #25
   267c2:	d401      	bmi.n	267c8 <_vfprintf_r+0xa48>
   267c4:	f7ff fb8d 	bl	25ee2 <_vfprintf_r+0x162>
   267c8:	f7ff fb88 	bl	25edc <_vfprintf_r+0x15c>
   267cc:	464b      	mov	r3, r9
   267ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
   267d0:	f002 fbcc 	bl	28f6c <__retarget_lock_release_recursive>
   267d4:	464b      	mov	r3, r9
   267d6:	899b      	ldrh	r3, [r3, #12]
   267d8:	e7f2      	b.n	267c0 <_vfprintf_r+0xa40>
   267da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   267dc:	9a08      	ldr	r2, [sp, #32]
   267de:	1a9d      	subs	r5, r3, r2
   267e0:	2d00      	cmp	r5, #0
   267e2:	dc00      	bgt.n	267e6 <_vfprintf_r+0xa66>
   267e4:	e685      	b.n	264f2 <_vfprintf_r+0x772>
   267e6:	4a4d      	ldr	r2, [pc, #308]	; (2691c <_vfprintf_r+0xb9c>)
   267e8:	687b      	ldr	r3, [r7, #4]
   267ea:	4691      	mov	r9, r2
   267ec:	2d10      	cmp	r5, #16
   267ee:	dd24      	ble.n	2683a <_vfprintf_r+0xaba>
   267f0:	2210      	movs	r2, #16
   267f2:	0021      	movs	r1, r4
   267f4:	4690      	mov	r8, r2
   267f6:	465c      	mov	r4, fp
   267f8:	0032      	movs	r2, r6
   267fa:	464e      	mov	r6, r9
   267fc:	e003      	b.n	26806 <_vfprintf_r+0xa86>
   267fe:	3d10      	subs	r5, #16
   26800:	3208      	adds	r2, #8
   26802:	2d10      	cmp	r5, #16
   26804:	dd15      	ble.n	26832 <_vfprintf_r+0xab2>
   26806:	4640      	mov	r0, r8
   26808:	3110      	adds	r1, #16
   2680a:	3301      	adds	r3, #1
   2680c:	6016      	str	r6, [r2, #0]
   2680e:	6050      	str	r0, [r2, #4]
   26810:	60b9      	str	r1, [r7, #8]
   26812:	607b      	str	r3, [r7, #4]
   26814:	2b07      	cmp	r3, #7
   26816:	ddf2      	ble.n	267fe <_vfprintf_r+0xa7e>
   26818:	003a      	movs	r2, r7
   2681a:	0021      	movs	r1, r4
   2681c:	9806      	ldr	r0, [sp, #24]
   2681e:	f003 fdcb 	bl	2a3b8 <__sprint_r>
   26822:	2800      	cmp	r0, #0
   26824:	d115      	bne.n	26852 <_vfprintf_r+0xad2>
   26826:	3d10      	subs	r5, #16
   26828:	68b9      	ldr	r1, [r7, #8]
   2682a:	687b      	ldr	r3, [r7, #4]
   2682c:	aa32      	add	r2, sp, #200	; 0xc8
   2682e:	2d10      	cmp	r5, #16
   26830:	dce9      	bgt.n	26806 <_vfprintf_r+0xa86>
   26832:	46a3      	mov	fp, r4
   26834:	46b1      	mov	r9, r6
   26836:	000c      	movs	r4, r1
   26838:	0016      	movs	r6, r2
   2683a:	464a      	mov	r2, r9
   2683c:	1964      	adds	r4, r4, r5
   2683e:	3301      	adds	r3, #1
   26840:	6032      	str	r2, [r6, #0]
   26842:	6075      	str	r5, [r6, #4]
   26844:	60bc      	str	r4, [r7, #8]
   26846:	607b      	str	r3, [r7, #4]
   26848:	2b07      	cmp	r3, #7
   2684a:	dd00      	ble.n	2684e <_vfprintf_r+0xace>
   2684c:	e263      	b.n	26d16 <_vfprintf_r+0xf96>
   2684e:	3608      	adds	r6, #8
   26850:	e64f      	b.n	264f2 <_vfprintf_r+0x772>
   26852:	46a1      	mov	r9, r4
   26854:	e7ac      	b.n	267b0 <_vfprintf_r+0xa30>
   26856:	2301      	movs	r3, #1
   26858:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2685a:	4213      	tst	r3, r2
   2685c:	d000      	beq.n	26860 <_vfprintf_r+0xae0>
   2685e:	e6f6      	b.n	2664e <_vfprintf_r+0x8ce>
   26860:	6073      	str	r3, [r6, #4]
   26862:	687b      	ldr	r3, [r7, #4]
   26864:	9a11      	ldr	r2, [sp, #68]	; 0x44
   26866:	3301      	adds	r3, #1
   26868:	3401      	adds	r4, #1
   2686a:	6032      	str	r2, [r6, #0]
   2686c:	60bc      	str	r4, [r7, #8]
   2686e:	4698      	mov	r8, r3
   26870:	607b      	str	r3, [r7, #4]
   26872:	2b07      	cmp	r3, #7
   26874:	dc00      	bgt.n	26878 <_vfprintf_r+0xaf8>
   26876:	e71e      	b.n	266b6 <_vfprintf_r+0x936>
   26878:	003a      	movs	r2, r7
   2687a:	4659      	mov	r1, fp
   2687c:	9806      	ldr	r0, [sp, #24]
   2687e:	f003 fd9b 	bl	2a3b8 <__sprint_r>
   26882:	2800      	cmp	r0, #0
   26884:	d10c      	bne.n	268a0 <_vfprintf_r+0xb20>
   26886:	687b      	ldr	r3, [r7, #4]
   26888:	68bc      	ldr	r4, [r7, #8]
   2688a:	4698      	mov	r8, r3
   2688c:	ae32      	add	r6, sp, #200	; 0xc8
   2688e:	e713      	b.n	266b8 <_vfprintf_r+0x938>
   26890:	003a      	movs	r2, r7
   26892:	4659      	mov	r1, fp
   26894:	9806      	ldr	r0, [sp, #24]
   26896:	f003 fd8f 	bl	2a3b8 <__sprint_r>
   2689a:	2800      	cmp	r0, #0
   2689c:	d100      	bne.n	268a0 <_vfprintf_r+0xb20>
   2689e:	e6cd      	b.n	2663c <_vfprintf_r+0x8bc>
   268a0:	46d9      	mov	r9, fp
   268a2:	e785      	b.n	267b0 <_vfprintf_r+0xa30>
   268a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   268a6:	2b01      	cmp	r3, #1
   268a8:	d100      	bne.n	268ac <_vfprintf_r+0xb2c>
   268aa:	e148      	b.n	26b3e <_vfprintf_r+0xdbe>
   268ac:	2b02      	cmp	r3, #2
   268ae:	d123      	bne.n	268f8 <_vfprintf_r+0xb78>
   268b0:	9409      	str	r4, [sp, #36]	; 0x24
   268b2:	2300      	movs	r3, #0
   268b4:	2400      	movs	r4, #0
   268b6:	930c      	str	r3, [sp, #48]	; 0x30
   268b8:	940d      	str	r4, [sp, #52]	; 0x34
   268ba:	e4a1      	b.n	26200 <_vfprintf_r+0x480>
   268bc:	003a      	movs	r2, r7
   268be:	4659      	mov	r1, fp
   268c0:	9806      	ldr	r0, [sp, #24]
   268c2:	f003 fd79 	bl	2a3b8 <__sprint_r>
   268c6:	2800      	cmp	r0, #0
   268c8:	d1ea      	bne.n	268a0 <_vfprintf_r+0xb20>
   268ca:	68bc      	ldr	r4, [r7, #8]
   268cc:	ae32      	add	r6, sp, #200	; 0xc8
   268ce:	e648      	b.n	26562 <_vfprintf_r+0x7e2>
   268d0:	003a      	movs	r2, r7
   268d2:	4659      	mov	r1, fp
   268d4:	9806      	ldr	r0, [sp, #24]
   268d6:	f003 fd6f 	bl	2a3b8 <__sprint_r>
   268da:	2800      	cmp	r0, #0
   268dc:	d1e0      	bne.n	268a0 <_vfprintf_r+0xb20>
   268de:	68bc      	ldr	r4, [r7, #8]
   268e0:	ae32      	add	r6, sp, #200	; 0xc8
   268e2:	e5f2      	b.n	264ca <_vfprintf_r+0x74a>
   268e4:	003a      	movs	r2, r7
   268e6:	4659      	mov	r1, fp
   268e8:	9806      	ldr	r0, [sp, #24]
   268ea:	f003 fd65 	bl	2a3b8 <__sprint_r>
   268ee:	2800      	cmp	r0, #0
   268f0:	d1d6      	bne.n	268a0 <_vfprintf_r+0xb20>
   268f2:	68bc      	ldr	r4, [r7, #8]
   268f4:	ae32      	add	r6, sp, #200	; 0xc8
   268f6:	e5f8      	b.n	264ea <_vfprintf_r+0x76a>
   268f8:	9409      	str	r4, [sp, #36]	; 0x24
   268fa:	2300      	movs	r3, #0
   268fc:	2400      	movs	r4, #0
   268fe:	930c      	str	r3, [sp, #48]	; 0x30
   26900:	940d      	str	r4, [sp, #52]	; 0x34
   26902:	980c      	ldr	r0, [sp, #48]	; 0x30
   26904:	990d      	ldr	r1, [sp, #52]	; 0x34
   26906:	4653      	mov	r3, sl
   26908:	aa32      	add	r2, sp, #200	; 0xc8
   2690a:	4691      	mov	r9, r2
   2690c:	9308      	str	r3, [sp, #32]
   2690e:	46b2      	mov	sl, r6
   26910:	e007      	b.n	26922 <_vfprintf_r+0xba2>
   26912:	46c0      	nop			; (mov r8, r8)
   26914:	0002d294 	.word	0x0002d294
   26918:	0002d10c 	.word	0x0002d10c
   2691c:	0002d2a4 	.word	0x0002d2a4
   26920:	46a1      	mov	r9, r4
   26922:	074a      	lsls	r2, r1, #29
   26924:	4694      	mov	ip, r2
   26926:	464b      	mov	r3, r9
   26928:	4665      	mov	r5, ip
   2692a:	1e5c      	subs	r4, r3, #1
   2692c:	08c6      	lsrs	r6, r0, #3
   2692e:	2307      	movs	r3, #7
   26930:	08ca      	lsrs	r2, r1, #3
   26932:	4335      	orrs	r5, r6
   26934:	0011      	movs	r1, r2
   26936:	002a      	movs	r2, r5
   26938:	4003      	ands	r3, r0
   2693a:	3330      	adds	r3, #48	; 0x30
   2693c:	7023      	strb	r3, [r4, #0]
   2693e:	0028      	movs	r0, r5
   26940:	430a      	orrs	r2, r1
   26942:	d1ed      	bne.n	26920 <_vfprintf_r+0xba0>
   26944:	900c      	str	r0, [sp, #48]	; 0x30
   26946:	910d      	str	r1, [sp, #52]	; 0x34
   26948:	9908      	ldr	r1, [sp, #32]
   2694a:	4656      	mov	r6, sl
   2694c:	468a      	mov	sl, r1
   2694e:	9909      	ldr	r1, [sp, #36]	; 0x24
   26950:	464a      	mov	r2, r9
   26952:	9411      	str	r4, [sp, #68]	; 0x44
   26954:	07c9      	lsls	r1, r1, #31
   26956:	d500      	bpl.n	2695a <_vfprintf_r+0xbda>
   26958:	e0e0      	b.n	26b1c <_vfprintf_r+0xd9c>
   2695a:	ab32      	add	r3, sp, #200	; 0xc8
   2695c:	1b1b      	subs	r3, r3, r4
   2695e:	930e      	str	r3, [sp, #56]	; 0x38
   26960:	f7ff fb7b 	bl	2605a <_vfprintf_r+0x2da>
   26964:	9c07      	ldr	r4, [sp, #28]
   26966:	f7ff fa7d 	bl	25e64 <_vfprintf_r+0xe4>
   2696a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   2696c:	2800      	cmp	r0, #0
   2696e:	dc00      	bgt.n	26972 <_vfprintf_r+0xbf2>
   26970:	e2b9      	b.n	26ee6 <_vfprintf_r+0x1166>
   26972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   26974:	9914      	ldr	r1, [sp, #80]	; 0x50
   26976:	0013      	movs	r3, r2
   26978:	4690      	mov	r8, r2
   2697a:	428b      	cmp	r3, r1
   2697c:	dd00      	ble.n	26980 <_vfprintf_r+0xc00>
   2697e:	4688      	mov	r8, r1
   26980:	4643      	mov	r3, r8
   26982:	2b00      	cmp	r3, #0
   26984:	dd0c      	ble.n	269a0 <_vfprintf_r+0xc20>
   26986:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26988:	4444      	add	r4, r8
   2698a:	6033      	str	r3, [r6, #0]
   2698c:	4643      	mov	r3, r8
   2698e:	6073      	str	r3, [r6, #4]
   26990:	687b      	ldr	r3, [r7, #4]
   26992:	60bc      	str	r4, [r7, #8]
   26994:	3301      	adds	r3, #1
   26996:	607b      	str	r3, [r7, #4]
   26998:	2b07      	cmp	r3, #7
   2699a:	dd00      	ble.n	2699e <_vfprintf_r+0xc1e>
   2699c:	e389      	b.n	270b2 <_vfprintf_r+0x1332>
   2699e:	3608      	adds	r6, #8
   269a0:	4643      	mov	r3, r8
   269a2:	43db      	mvns	r3, r3
   269a4:	4642      	mov	r2, r8
   269a6:	17db      	asrs	r3, r3, #31
   269a8:	4013      	ands	r3, r2
   269aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   269ac:	1ad3      	subs	r3, r2, r3
   269ae:	4698      	mov	r8, r3
   269b0:	2b00      	cmp	r3, #0
   269b2:	dc00      	bgt.n	269b6 <_vfprintf_r+0xc36>
   269b4:	e0eb      	b.n	26b8e <_vfprintf_r+0xe0e>
   269b6:	2b10      	cmp	r3, #16
   269b8:	dc01      	bgt.n	269be <_vfprintf_r+0xc3e>
   269ba:	f000 fcd9 	bl	27370 <_vfprintf_r+0x15f0>
   269be:	4adc      	ldr	r2, [pc, #880]	; (26d30 <_vfprintf_r+0xfb0>)
   269c0:	687b      	ldr	r3, [r7, #4]
   269c2:	4691      	mov	r9, r2
   269c4:	2210      	movs	r2, #16
   269c6:	464d      	mov	r5, r9
   269c8:	4692      	mov	sl, r2
   269ca:	0022      	movs	r2, r4
   269cc:	4644      	mov	r4, r8
   269ce:	46d8      	mov	r8, fp
   269d0:	e004      	b.n	269dc <_vfprintf_r+0xc5c>
   269d2:	3608      	adds	r6, #8
   269d4:	3c10      	subs	r4, #16
   269d6:	2c10      	cmp	r4, #16
   269d8:	dc00      	bgt.n	269dc <_vfprintf_r+0xc5c>
   269da:	e0bf      	b.n	26b5c <_vfprintf_r+0xddc>
   269dc:	4651      	mov	r1, sl
   269de:	3210      	adds	r2, #16
   269e0:	3301      	adds	r3, #1
   269e2:	6035      	str	r5, [r6, #0]
   269e4:	6071      	str	r1, [r6, #4]
   269e6:	60ba      	str	r2, [r7, #8]
   269e8:	607b      	str	r3, [r7, #4]
   269ea:	2b07      	cmp	r3, #7
   269ec:	ddf1      	ble.n	269d2 <_vfprintf_r+0xc52>
   269ee:	003a      	movs	r2, r7
   269f0:	4641      	mov	r1, r8
   269f2:	9806      	ldr	r0, [sp, #24]
   269f4:	f003 fce0 	bl	2a3b8 <__sprint_r>
   269f8:	2800      	cmp	r0, #0
   269fa:	d000      	beq.n	269fe <_vfprintf_r+0xc7e>
   269fc:	e3b6      	b.n	2716c <_vfprintf_r+0x13ec>
   269fe:	68ba      	ldr	r2, [r7, #8]
   26a00:	687b      	ldr	r3, [r7, #4]
   26a02:	ae32      	add	r6, sp, #200	; 0xc8
   26a04:	e7e6      	b.n	269d4 <_vfprintf_r+0xc54>
   26a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   26a08:	2b00      	cmp	r3, #0
   26a0a:	d100      	bne.n	26a0e <_vfprintf_r+0xc8e>
   26a0c:	e092      	b.n	26b34 <_vfprintf_r+0xdb4>
   26a0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   26a10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   26a12:	ab32      	add	r3, sp, #200	; 0xc8
   26a14:	46b1      	mov	r9, r6
   26a16:	001e      	movs	r6, r3
   26a18:	0020      	movs	r0, r4
   26a1a:	0029      	movs	r1, r5
   26a1c:	220a      	movs	r2, #10
   26a1e:	2300      	movs	r3, #0
   26a20:	f7fa fd10 	bl	21444 <__aeabi_uldivmod>
   26a24:	3e01      	subs	r6, #1
   26a26:	3230      	adds	r2, #48	; 0x30
   26a28:	7032      	strb	r2, [r6, #0]
   26a2a:	2300      	movs	r3, #0
   26a2c:	0020      	movs	r0, r4
   26a2e:	0029      	movs	r1, r5
   26a30:	220a      	movs	r2, #10
   26a32:	f7fa fd07 	bl	21444 <__aeabi_uldivmod>
   26a36:	0003      	movs	r3, r0
   26a38:	0004      	movs	r4, r0
   26a3a:	000d      	movs	r5, r1
   26a3c:	430b      	orrs	r3, r1
   26a3e:	d1eb      	bne.n	26a18 <_vfprintf_r+0xc98>
   26a40:	0032      	movs	r2, r6
   26a42:	ab32      	add	r3, sp, #200	; 0xc8
   26a44:	1a9b      	subs	r3, r3, r2
   26a46:	9611      	str	r6, [sp, #68]	; 0x44
   26a48:	940c      	str	r4, [sp, #48]	; 0x30
   26a4a:	950d      	str	r5, [sp, #52]	; 0x34
   26a4c:	464e      	mov	r6, r9
   26a4e:	930e      	str	r3, [sp, #56]	; 0x38
   26a50:	f7ff fb03 	bl	2605a <_vfprintf_r+0x2da>
   26a54:	2300      	movs	r3, #0
   26a56:	930e      	str	r3, [sp, #56]	; 0x38
   26a58:	ab32      	add	r3, sp, #200	; 0xc8
   26a5a:	9311      	str	r3, [sp, #68]	; 0x44
   26a5c:	f7ff fafd 	bl	2605a <_vfprintf_r+0x2da>
   26a60:	003a      	movs	r2, r7
   26a62:	4659      	mov	r1, fp
   26a64:	9806      	ldr	r0, [sp, #24]
   26a66:	f003 fca7 	bl	2a3b8 <__sprint_r>
   26a6a:	2800      	cmp	r0, #0
   26a6c:	d000      	beq.n	26a70 <_vfprintf_r+0xcf0>
   26a6e:	e717      	b.n	268a0 <_vfprintf_r+0xb20>
   26a70:	ab16      	add	r3, sp, #88	; 0x58
   26a72:	7fdb      	ldrb	r3, [r3, #31]
   26a74:	68bc      	ldr	r4, [r7, #8]
   26a76:	4698      	mov	r8, r3
   26a78:	ae32      	add	r6, sp, #200	; 0xc8
   26a7a:	e513      	b.n	264a4 <_vfprintf_r+0x724>
   26a7c:	46b1      	mov	r9, r6
   26a7e:	e697      	b.n	267b0 <_vfprintf_r+0xa30>
   26a80:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26a82:	1e5d      	subs	r5, r3, #1
   26a84:	2d00      	cmp	r5, #0
   26a86:	dc00      	bgt.n	26a8a <_vfprintf_r+0xd0a>
   26a88:	e616      	b.n	266b8 <_vfprintf_r+0x938>
   26a8a:	4ba9      	ldr	r3, [pc, #676]	; (26d30 <_vfprintf_r+0xfb0>)
   26a8c:	4699      	mov	r9, r3
   26a8e:	2d10      	cmp	r5, #16
   26a90:	dc00      	bgt.n	26a94 <_vfprintf_r+0xd14>
   26a92:	e10a      	b.n	26caa <_vfprintf_r+0xf2a>
   26a94:	2310      	movs	r3, #16
   26a96:	0022      	movs	r2, r4
   26a98:	469a      	mov	sl, r3
   26a9a:	465c      	mov	r4, fp
   26a9c:	4643      	mov	r3, r8
   26a9e:	e004      	b.n	26aaa <_vfprintf_r+0xd2a>
   26aa0:	3608      	adds	r6, #8
   26aa2:	3d10      	subs	r5, #16
   26aa4:	2d10      	cmp	r5, #16
   26aa6:	dc00      	bgt.n	26aaa <_vfprintf_r+0xd2a>
   26aa8:	e0fc      	b.n	26ca4 <_vfprintf_r+0xf24>
   26aaa:	4649      	mov	r1, r9
   26aac:	6031      	str	r1, [r6, #0]
   26aae:	4651      	mov	r1, sl
   26ab0:	3210      	adds	r2, #16
   26ab2:	3301      	adds	r3, #1
   26ab4:	6071      	str	r1, [r6, #4]
   26ab6:	60ba      	str	r2, [r7, #8]
   26ab8:	607b      	str	r3, [r7, #4]
   26aba:	2b07      	cmp	r3, #7
   26abc:	ddf0      	ble.n	26aa0 <_vfprintf_r+0xd20>
   26abe:	003a      	movs	r2, r7
   26ac0:	0021      	movs	r1, r4
   26ac2:	9806      	ldr	r0, [sp, #24]
   26ac4:	f003 fc78 	bl	2a3b8 <__sprint_r>
   26ac8:	2800      	cmp	r0, #0
   26aca:	d000      	beq.n	26ace <_vfprintf_r+0xd4e>
   26acc:	e6c1      	b.n	26852 <_vfprintf_r+0xad2>
   26ace:	68ba      	ldr	r2, [r7, #8]
   26ad0:	687b      	ldr	r3, [r7, #4]
   26ad2:	ae32      	add	r6, sp, #200	; 0xc8
   26ad4:	e7e5      	b.n	26aa2 <_vfprintf_r+0xd22>
   26ad6:	990c      	ldr	r1, [sp, #48]	; 0x30
   26ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   26ada:	0008      	movs	r0, r1
   26adc:	4310      	orrs	r0, r2
   26ade:	2302      	movs	r3, #2
   26ae0:	0002      	movs	r2, r0
   26ae2:	f7ff fa93 	bl	2600c <_vfprintf_r+0x28c>
   26ae6:	46a3      	mov	fp, r4
   26ae8:	0014      	movs	r4, r2
   26aea:	464a      	mov	r2, r9
   26aec:	1964      	adds	r4, r4, r5
   26aee:	3301      	adds	r3, #1
   26af0:	6032      	str	r2, [r6, #0]
   26af2:	6075      	str	r5, [r6, #4]
   26af4:	60bc      	str	r4, [r7, #8]
   26af6:	607b      	str	r3, [r7, #4]
   26af8:	2b07      	cmp	r3, #7
   26afa:	dc00      	bgt.n	26afe <_vfprintf_r+0xd7e>
   26afc:	e542      	b.n	26584 <_vfprintf_r+0x804>
   26afe:	e5e8      	b.n	266d2 <_vfprintf_r+0x952>
   26b00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26b02:	681a      	ldr	r2, [r3, #0]
   26b04:	f7ff fa68 	bl	25fd8 <_vfprintf_r+0x258>
   26b08:	6813      	ldr	r3, [r2, #0]
   26b0a:	9308      	str	r3, [sp, #32]
   26b0c:	f7ff fb57 	bl	261be <_vfprintf_r+0x43e>
   26b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26b12:	681a      	ldr	r2, [r3, #0]
   26b14:	e412      	b.n	2633c <_vfprintf_r+0x5bc>
   26b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26b18:	681a      	ldr	r2, [r3, #0]
   26b1a:	e426      	b.n	2636a <_vfprintf_r+0x5ea>
   26b1c:	2b30      	cmp	r3, #48	; 0x30
   26b1e:	d100      	bne.n	26b22 <_vfprintf_r+0xda2>
   26b20:	e23c      	b.n	26f9c <_vfprintf_r+0x121c>
   26b22:	2330      	movs	r3, #48	; 0x30
   26b24:	3a02      	subs	r2, #2
   26b26:	7013      	strb	r3, [r2, #0]
   26b28:	ab32      	add	r3, sp, #200	; 0xc8
   26b2a:	1a9b      	subs	r3, r3, r2
   26b2c:	930e      	str	r3, [sp, #56]	; 0x38
   26b2e:	9211      	str	r2, [sp, #68]	; 0x44
   26b30:	f7ff fa93 	bl	2605a <_vfprintf_r+0x2da>
   26b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26b36:	2b09      	cmp	r3, #9
   26b38:	d900      	bls.n	26b3c <_vfprintf_r+0xdbc>
   26b3a:	e768      	b.n	26a0e <_vfprintf_r+0xc8e>
   26b3c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   26b3e:	2227      	movs	r2, #39	; 0x27
   26b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26b42:	a928      	add	r1, sp, #160	; 0xa0
   26b44:	3330      	adds	r3, #48	; 0x30
   26b46:	548b      	strb	r3, [r1, r2]
   26b48:	2301      	movs	r3, #1
   26b4a:	aa16      	add	r2, sp, #88	; 0x58
   26b4c:	4694      	mov	ip, r2
   26b4e:	930e      	str	r3, [sp, #56]	; 0x38
   26b50:	336e      	adds	r3, #110	; 0x6e
   26b52:	4463      	add	r3, ip
   26b54:	9409      	str	r4, [sp, #36]	; 0x24
   26b56:	9311      	str	r3, [sp, #68]	; 0x44
   26b58:	f7ff fa7f 	bl	2605a <_vfprintf_r+0x2da>
   26b5c:	46c3      	mov	fp, r8
   26b5e:	46a9      	mov	r9, r5
   26b60:	46a0      	mov	r8, r4
   26b62:	0014      	movs	r4, r2
   26b64:	464a      	mov	r2, r9
   26b66:	6032      	str	r2, [r6, #0]
   26b68:	4642      	mov	r2, r8
   26b6a:	4444      	add	r4, r8
   26b6c:	3301      	adds	r3, #1
   26b6e:	6072      	str	r2, [r6, #4]
   26b70:	60bc      	str	r4, [r7, #8]
   26b72:	607b      	str	r3, [r7, #4]
   26b74:	2b07      	cmp	r3, #7
   26b76:	dc00      	bgt.n	26b7a <_vfprintf_r+0xdfa>
   26b78:	e18d      	b.n	26e96 <_vfprintf_r+0x1116>
   26b7a:	003a      	movs	r2, r7
   26b7c:	4659      	mov	r1, fp
   26b7e:	9806      	ldr	r0, [sp, #24]
   26b80:	f003 fc1a 	bl	2a3b8 <__sprint_r>
   26b84:	2800      	cmp	r0, #0
   26b86:	d000      	beq.n	26b8a <_vfprintf_r+0xe0a>
   26b88:	e68a      	b.n	268a0 <_vfprintf_r+0xb20>
   26b8a:	68bc      	ldr	r4, [r7, #8]
   26b8c:	ae32      	add	r6, sp, #200	; 0xc8
   26b8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   26b90:	9a14      	ldr	r2, [sp, #80]	; 0x50
   26b92:	4293      	cmp	r3, r2
   26b94:	db00      	blt.n	26b98 <_vfprintf_r+0xe18>
   26b96:	e179      	b.n	26e8c <_vfprintf_r+0x110c>
   26b98:	9a18      	ldr	r2, [sp, #96]	; 0x60
   26b9a:	6032      	str	r2, [r6, #0]
   26b9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   26b9e:	4694      	mov	ip, r2
   26ba0:	6072      	str	r2, [r6, #4]
   26ba2:	687a      	ldr	r2, [r7, #4]
   26ba4:	4464      	add	r4, ip
   26ba6:	3201      	adds	r2, #1
   26ba8:	60bc      	str	r4, [r7, #8]
   26baa:	607a      	str	r2, [r7, #4]
   26bac:	2a07      	cmp	r2, #7
   26bae:	dd00      	ble.n	26bb2 <_vfprintf_r+0xe32>
   26bb0:	e176      	b.n	26ea0 <_vfprintf_r+0x1120>
   26bb2:	3608      	adds	r6, #8
   26bb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   26bb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   26bb8:	1ad3      	subs	r3, r2, r3
   26bba:	1a52      	subs	r2, r2, r1
   26bbc:	4690      	mov	r8, r2
   26bbe:	429a      	cmp	r2, r3
   26bc0:	dd00      	ble.n	26bc4 <_vfprintf_r+0xe44>
   26bc2:	4698      	mov	r8, r3
   26bc4:	4642      	mov	r2, r8
   26bc6:	2a00      	cmp	r2, #0
   26bc8:	dd0f      	ble.n	26bea <_vfprintf_r+0xe6a>
   26bca:	9913      	ldr	r1, [sp, #76]	; 0x4c
   26bcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   26bce:	468c      	mov	ip, r1
   26bd0:	4462      	add	r2, ip
   26bd2:	6032      	str	r2, [r6, #0]
   26bd4:	4642      	mov	r2, r8
   26bd6:	6072      	str	r2, [r6, #4]
   26bd8:	687a      	ldr	r2, [r7, #4]
   26bda:	4444      	add	r4, r8
   26bdc:	3201      	adds	r2, #1
   26bde:	60bc      	str	r4, [r7, #8]
   26be0:	607a      	str	r2, [r7, #4]
   26be2:	2a07      	cmp	r2, #7
   26be4:	dd00      	ble.n	26be8 <_vfprintf_r+0xe68>
   26be6:	e289      	b.n	270fc <_vfprintf_r+0x137c>
   26be8:	3608      	adds	r6, #8
   26bea:	4642      	mov	r2, r8
   26bec:	43d5      	mvns	r5, r2
   26bee:	17ed      	asrs	r5, r5, #31
   26bf0:	4015      	ands	r5, r2
   26bf2:	1b5d      	subs	r5, r3, r5
   26bf4:	2d00      	cmp	r5, #0
   26bf6:	dc00      	bgt.n	26bfa <_vfprintf_r+0xe7a>
   26bf8:	e4c5      	b.n	26586 <_vfprintf_r+0x806>
   26bfa:	4a4d      	ldr	r2, [pc, #308]	; (26d30 <_vfprintf_r+0xfb0>)
   26bfc:	687b      	ldr	r3, [r7, #4]
   26bfe:	4691      	mov	r9, r2
   26c00:	2d10      	cmp	r5, #16
   26c02:	dc00      	bgt.n	26c06 <_vfprintf_r+0xe86>
   26c04:	e771      	b.n	26aea <_vfprintf_r+0xd6a>
   26c06:	2210      	movs	r2, #16
   26c08:	4690      	mov	r8, r2
   26c0a:	0022      	movs	r2, r4
   26c0c:	465c      	mov	r4, fp
   26c0e:	e004      	b.n	26c1a <_vfprintf_r+0xe9a>
   26c10:	3608      	adds	r6, #8
   26c12:	3d10      	subs	r5, #16
   26c14:	2d10      	cmp	r5, #16
   26c16:	dc00      	bgt.n	26c1a <_vfprintf_r+0xe9a>
   26c18:	e765      	b.n	26ae6 <_vfprintf_r+0xd66>
   26c1a:	4649      	mov	r1, r9
   26c1c:	6031      	str	r1, [r6, #0]
   26c1e:	4641      	mov	r1, r8
   26c20:	3210      	adds	r2, #16
   26c22:	3301      	adds	r3, #1
   26c24:	6071      	str	r1, [r6, #4]
   26c26:	60ba      	str	r2, [r7, #8]
   26c28:	607b      	str	r3, [r7, #4]
   26c2a:	2b07      	cmp	r3, #7
   26c2c:	ddf0      	ble.n	26c10 <_vfprintf_r+0xe90>
   26c2e:	003a      	movs	r2, r7
   26c30:	0021      	movs	r1, r4
   26c32:	9806      	ldr	r0, [sp, #24]
   26c34:	f003 fbc0 	bl	2a3b8 <__sprint_r>
   26c38:	2800      	cmp	r0, #0
   26c3a:	d000      	beq.n	26c3e <_vfprintf_r+0xebe>
   26c3c:	e609      	b.n	26852 <_vfprintf_r+0xad2>
   26c3e:	68ba      	ldr	r2, [r7, #8]
   26c40:	687b      	ldr	r3, [r7, #4]
   26c42:	ae32      	add	r6, sp, #200	; 0xc8
   26c44:	e7e5      	b.n	26c12 <_vfprintf_r+0xe92>
   26c46:	003a      	movs	r2, r7
   26c48:	4659      	mov	r1, fp
   26c4a:	9806      	ldr	r0, [sp, #24]
   26c4c:	f003 fbb4 	bl	2a3b8 <__sprint_r>
   26c50:	2800      	cmp	r0, #0
   26c52:	d000      	beq.n	26c56 <_vfprintf_r+0xed6>
   26c54:	e624      	b.n	268a0 <_vfprintf_r+0xb20>
   26c56:	68bc      	ldr	r4, [r7, #8]
   26c58:	687b      	ldr	r3, [r7, #4]
   26c5a:	ae32      	add	r6, sp, #200	; 0xc8
   26c5c:	e504      	b.n	26668 <_vfprintf_r+0x8e8>
   26c5e:	2307      	movs	r3, #7
   26c60:	3207      	adds	r2, #7
   26c62:	439a      	bics	r2, r3
   26c64:	3301      	adds	r3, #1
   26c66:	469c      	mov	ip, r3
   26c68:	4494      	add	ip, r2
   26c6a:	4663      	mov	r3, ip
   26c6c:	930f      	str	r3, [sp, #60]	; 0x3c
   26c6e:	6853      	ldr	r3, [r2, #4]
   26c70:	6812      	ldr	r2, [r2, #0]
   26c72:	930d      	str	r3, [sp, #52]	; 0x34
   26c74:	920c      	str	r2, [sp, #48]	; 0x30
   26c76:	f7ff faa7 	bl	261c8 <_vfprintf_r+0x448>
   26c7a:	2207      	movs	r2, #7
   26c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26c7e:	3307      	adds	r3, #7
   26c80:	4393      	bics	r3, r2
   26c82:	3201      	adds	r2, #1
   26c84:	4694      	mov	ip, r2
   26c86:	449c      	add	ip, r3
   26c88:	4662      	mov	r2, ip
   26c8a:	920f      	str	r2, [sp, #60]	; 0x3c
   26c8c:	681a      	ldr	r2, [r3, #0]
   26c8e:	685b      	ldr	r3, [r3, #4]
   26c90:	0011      	movs	r1, r2
   26c92:	001a      	movs	r2, r3
   26c94:	0008      	movs	r0, r1
   26c96:	4310      	orrs	r0, r2
   26c98:	910c      	str	r1, [sp, #48]	; 0x30
   26c9a:	920d      	str	r2, [sp, #52]	; 0x34
   26c9c:	2300      	movs	r3, #0
   26c9e:	0002      	movs	r2, r0
   26ca0:	f7ff f9b4 	bl	2600c <_vfprintf_r+0x28c>
   26ca4:	46a3      	mov	fp, r4
   26ca6:	4698      	mov	r8, r3
   26ca8:	0014      	movs	r4, r2
   26caa:	464b      	mov	r3, r9
   26cac:	6075      	str	r5, [r6, #4]
   26cae:	6033      	str	r3, [r6, #0]
   26cb0:	1964      	adds	r4, r4, r5
   26cb2:	e4f7      	b.n	266a4 <_vfprintf_r+0x924>
   26cb4:	003a      	movs	r2, r7
   26cb6:	4659      	mov	r1, fp
   26cb8:	9806      	ldr	r0, [sp, #24]
   26cba:	f003 fb7d 	bl	2a3b8 <__sprint_r>
   26cbe:	2800      	cmp	r0, #0
   26cc0:	d000      	beq.n	26cc4 <_vfprintf_r+0xf44>
   26cc2:	e5ed      	b.n	268a0 <_vfprintf_r+0xb20>
   26cc4:	687b      	ldr	r3, [r7, #4]
   26cc6:	68bc      	ldr	r4, [r7, #8]
   26cc8:	4698      	mov	r8, r3
   26cca:	ae32      	add	r6, sp, #200	; 0xc8
   26ccc:	e4da      	b.n	26684 <_vfprintf_r+0x904>
   26cce:	2207      	movs	r2, #7
   26cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26cd2:	3307      	adds	r3, #7
   26cd4:	4393      	bics	r3, r2
   26cd6:	3201      	adds	r2, #1
   26cd8:	4694      	mov	ip, r2
   26cda:	449c      	add	ip, r3
   26cdc:	4662      	mov	r2, ip
   26cde:	920f      	str	r2, [sp, #60]	; 0x3c
   26ce0:	681a      	ldr	r2, [r3, #0]
   26ce2:	685b      	ldr	r3, [r3, #4]
   26ce4:	0011      	movs	r1, r2
   26ce6:	001a      	movs	r2, r3
   26ce8:	0008      	movs	r0, r1
   26cea:	4310      	orrs	r0, r2
   26cec:	910c      	str	r1, [sp, #48]	; 0x30
   26cee:	920d      	str	r2, [sp, #52]	; 0x34
   26cf0:	2301      	movs	r3, #1
   26cf2:	0002      	movs	r2, r0
   26cf4:	f7ff f98a 	bl	2600c <_vfprintf_r+0x28c>
   26cf8:	2207      	movs	r2, #7
   26cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26cfc:	3307      	adds	r3, #7
   26cfe:	4393      	bics	r3, r2
   26d00:	3201      	adds	r2, #1
   26d02:	4694      	mov	ip, r2
   26d04:	449c      	add	ip, r3
   26d06:	4662      	mov	r2, ip
   26d08:	920f      	str	r2, [sp, #60]	; 0x3c
   26d0a:	681a      	ldr	r2, [r3, #0]
   26d0c:	685b      	ldr	r3, [r3, #4]
   26d0e:	920c      	str	r2, [sp, #48]	; 0x30
   26d10:	930d      	str	r3, [sp, #52]	; 0x34
   26d12:	f7ff f966 	bl	25fe2 <_vfprintf_r+0x262>
   26d16:	003a      	movs	r2, r7
   26d18:	4659      	mov	r1, fp
   26d1a:	9806      	ldr	r0, [sp, #24]
   26d1c:	f003 fb4c 	bl	2a3b8 <__sprint_r>
   26d20:	2800      	cmp	r0, #0
   26d22:	d000      	beq.n	26d26 <_vfprintf_r+0xfa6>
   26d24:	e5bc      	b.n	268a0 <_vfprintf_r+0xb20>
   26d26:	68bc      	ldr	r4, [r7, #8]
   26d28:	ae32      	add	r6, sp, #200	; 0xc8
   26d2a:	f7ff fbe2 	bl	264f2 <_vfprintf_r+0x772>
   26d2e:	46c0      	nop			; (mov r8, r8)
   26d30:	0002d2a4 	.word	0x0002d2a4
   26d34:	980c      	ldr	r0, [sp, #48]	; 0x30
   26d36:	990d      	ldr	r1, [sp, #52]	; 0x34
   26d38:	2300      	movs	r3, #0
   26d3a:	4242      	negs	r2, r0
   26d3c:	418b      	sbcs	r3, r1
   26d3e:	0011      	movs	r1, r2
   26d40:	001a      	movs	r2, r3
   26d42:	232d      	movs	r3, #45	; 0x2d
   26d44:	a816      	add	r0, sp, #88	; 0x58
   26d46:	77c3      	strb	r3, [r0, #31]
   26d48:	0008      	movs	r0, r1
   26d4a:	4310      	orrs	r0, r2
   26d4c:	910c      	str	r1, [sp, #48]	; 0x30
   26d4e:	920d      	str	r2, [sp, #52]	; 0x34
   26d50:	4698      	mov	r8, r3
   26d52:	0002      	movs	r2, r0
   26d54:	3b2c      	subs	r3, #44	; 0x2c
   26d56:	f7ff f95d 	bl	26014 <_vfprintf_r+0x294>
   26d5a:	9916      	ldr	r1, [sp, #88]	; 0x58
   26d5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   26d5e:	000a      	movs	r2, r1
   26d60:	0008      	movs	r0, r1
   26d62:	002b      	movs	r3, r5
   26d64:	0029      	movs	r1, r5
   26d66:	f003 fdc1 	bl	2a8ec <__aeabi_dcmpun>
   26d6a:	2800      	cmp	r0, #0
   26d6c:	d000      	beq.n	26d70 <_vfprintf_r+0xff0>
   26d6e:	e2c6      	b.n	272fe <_vfprintf_r+0x157e>
   26d70:	4653      	mov	r3, sl
   26d72:	3301      	adds	r3, #1
   26d74:	d100      	bne.n	26d78 <_vfprintf_r+0xff8>
   26d76:	e09f      	b.n	26eb8 <_vfprintf_r+0x1138>
   26d78:	2320      	movs	r3, #32
   26d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26d7c:	439a      	bics	r2, r3
   26d7e:	920e      	str	r2, [sp, #56]	; 0x38
   26d80:	2a47      	cmp	r2, #71	; 0x47
   26d82:	d100      	bne.n	26d86 <_vfprintf_r+0x1006>
   26d84:	e1a1      	b.n	270ca <_vfprintf_r+0x134a>
   26d86:	2380      	movs	r3, #128	; 0x80
   26d88:	005b      	lsls	r3, r3, #1
   26d8a:	4323      	orrs	r3, r4
   26d8c:	9309      	str	r3, [sp, #36]	; 0x24
   26d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   26d90:	2b00      	cmp	r3, #0
   26d92:	da00      	bge.n	26d96 <_vfprintf_r+0x1016>
   26d94:	e1ed      	b.n	27172 <_vfprintf_r+0x13f2>
   26d96:	9a16      	ldr	r2, [sp, #88]	; 0x58
   26d98:	9308      	str	r3, [sp, #32]
   26d9a:	2300      	movs	r3, #0
   26d9c:	4691      	mov	r9, r2
   26d9e:	9310      	str	r3, [sp, #64]	; 0x40
   26da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26da2:	2b66      	cmp	r3, #102	; 0x66
   26da4:	d100      	bne.n	26da8 <_vfprintf_r+0x1028>
   26da6:	e1b8      	b.n	2711a <_vfprintf_r+0x139a>
   26da8:	2b46      	cmp	r3, #70	; 0x46
   26daa:	d100      	bne.n	26dae <_vfprintf_r+0x102e>
   26dac:	e237      	b.n	2721e <_vfprintf_r+0x149e>
   26dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   26db0:	9806      	ldr	r0, [sp, #24]
   26db2:	3a45      	subs	r2, #69	; 0x45
   26db4:	0013      	movs	r3, r2
   26db6:	4259      	negs	r1, r3
   26db8:	4159      	adcs	r1, r3
   26dba:	ab20      	add	r3, sp, #128	; 0x80
   26dbc:	000d      	movs	r5, r1
   26dbe:	9303      	str	r3, [sp, #12]
   26dc0:	ab1f      	add	r3, sp, #124	; 0x7c
   26dc2:	9302      	str	r3, [sp, #8]
   26dc4:	2302      	movs	r3, #2
   26dc6:	aa23      	add	r2, sp, #140	; 0x8c
   26dc8:	4455      	add	r5, sl
   26dca:	921b      	str	r2, [sp, #108]	; 0x6c
   26dcc:	9204      	str	r2, [sp, #16]
   26dce:	9300      	str	r3, [sp, #0]
   26dd0:	9501      	str	r5, [sp, #4]
   26dd2:	9b08      	ldr	r3, [sp, #32]
   26dd4:	464a      	mov	r2, r9
   26dd6:	f000 fcab 	bl	27730 <_dtoa_r>
   26dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26ddc:	9011      	str	r0, [sp, #68]	; 0x44
   26dde:	2b67      	cmp	r3, #103	; 0x67
   26de0:	d000      	beq.n	26de4 <_vfprintf_r+0x1064>
   26de2:	e20b      	b.n	271fc <_vfprintf_r+0x147c>
   26de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26de6:	4698      	mov	r8, r3
   26de8:	44a8      	add	r8, r5
   26dea:	07e3      	lsls	r3, r4, #31
   26dec:	d400      	bmi.n	26df0 <_vfprintf_r+0x1070>
   26dee:	e277      	b.n	272e0 <_vfprintf_r+0x1560>
   26df0:	2300      	movs	r3, #0
   26df2:	2200      	movs	r2, #0
   26df4:	4648      	mov	r0, r9
   26df6:	9908      	ldr	r1, [sp, #32]
   26df8:	f7fa fabc 	bl	21374 <__aeabi_dcmpeq>
   26dfc:	4643      	mov	r3, r8
   26dfe:	2800      	cmp	r0, #0
   26e00:	d10a      	bne.n	26e18 <_vfprintf_r+0x1098>
   26e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26e04:	4543      	cmp	r3, r8
   26e06:	d207      	bcs.n	26e18 <_vfprintf_r+0x1098>
   26e08:	2130      	movs	r1, #48	; 0x30
   26e0a:	4640      	mov	r0, r8
   26e0c:	1c5a      	adds	r2, r3, #1
   26e0e:	9223      	str	r2, [sp, #140]	; 0x8c
   26e10:	7019      	strb	r1, [r3, #0]
   26e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   26e14:	4298      	cmp	r0, r3
   26e16:	d8f9      	bhi.n	26e0c <_vfprintf_r+0x108c>
   26e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   26e1a:	1a9b      	subs	r3, r3, r2
   26e1c:	9314      	str	r3, [sp, #80]	; 0x50
   26e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26e20:	2b47      	cmp	r3, #71	; 0x47
   26e22:	d100      	bne.n	26e26 <_vfprintf_r+0x10a6>
   26e24:	e0d0      	b.n	26fc8 <_vfprintf_r+0x1248>
   26e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26e28:	2b65      	cmp	r3, #101	; 0x65
   26e2a:	dc00      	bgt.n	26e2e <_vfprintf_r+0x10ae>
   26e2c:	e2d5      	b.n	273da <_vfprintf_r+0x165a>
   26e2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26e30:	2b66      	cmp	r3, #102	; 0x66
   26e32:	d100      	bne.n	26e36 <_vfprintf_r+0x10b6>
   26e34:	e1c6      	b.n	271c4 <_vfprintf_r+0x1444>
   26e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   26e38:	9313      	str	r3, [sp, #76]	; 0x4c
   26e3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26e3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   26e3e:	0019      	movs	r1, r3
   26e40:	4291      	cmp	r1, r2
   26e42:	dd00      	ble.n	26e46 <_vfprintf_r+0x10c6>
   26e44:	e1a0      	b.n	27188 <_vfprintf_r+0x1408>
   26e46:	07e3      	lsls	r3, r4, #31
   26e48:	d500      	bpl.n	26e4c <_vfprintf_r+0x10cc>
   26e4a:	e242      	b.n	272d2 <_vfprintf_r+0x1552>
   26e4c:	43d3      	mvns	r3, r2
   26e4e:	17db      	asrs	r3, r3, #31
   26e50:	0011      	movs	r1, r2
   26e52:	401a      	ands	r2, r3
   26e54:	2367      	movs	r3, #103	; 0x67
   26e56:	9208      	str	r2, [sp, #32]
   26e58:	910e      	str	r1, [sp, #56]	; 0x38
   26e5a:	9312      	str	r3, [sp, #72]	; 0x48
   26e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26e5e:	2b00      	cmp	r3, #0
   26e60:	d000      	beq.n	26e64 <_vfprintf_r+0x10e4>
   26e62:	e0a9      	b.n	26fb8 <_vfprintf_r+0x1238>
   26e64:	ab16      	add	r3, sp, #88	; 0x58
   26e66:	7fdb      	ldrb	r3, [r3, #31]
   26e68:	4698      	mov	r8, r3
   26e6a:	2300      	movs	r3, #0
   26e6c:	469a      	mov	sl, r3
   26e6e:	f7ff f8fc 	bl	2606a <_vfprintf_r+0x2ea>
   26e72:	46cb      	mov	fp, r9
   26e74:	46a1      	mov	r9, r4
   26e76:	0014      	movs	r4, r2
   26e78:	e637      	b.n	26aea <_vfprintf_r+0xd6a>
   26e7a:	464b      	mov	r3, r9
   26e7c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   26e7e:	f002 f875 	bl	28f6c <__retarget_lock_release_recursive>
   26e82:	2301      	movs	r3, #1
   26e84:	425b      	negs	r3, r3
   26e86:	930a      	str	r3, [sp, #40]	; 0x28
   26e88:	f7ff f82b 	bl	25ee2 <_vfprintf_r+0x162>
   26e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26e8e:	07d2      	lsls	r2, r2, #31
   26e90:	d400      	bmi.n	26e94 <_vfprintf_r+0x1114>
   26e92:	e68f      	b.n	26bb4 <_vfprintf_r+0xe34>
   26e94:	e680      	b.n	26b98 <_vfprintf_r+0xe18>
   26e96:	3608      	adds	r6, #8
   26e98:	e679      	b.n	26b8e <_vfprintf_r+0xe0e>
   26e9a:	68bc      	ldr	r4, [r7, #8]
   26e9c:	f7ff fb73 	bl	26586 <_vfprintf_r+0x806>
   26ea0:	003a      	movs	r2, r7
   26ea2:	4659      	mov	r1, fp
   26ea4:	9806      	ldr	r0, [sp, #24]
   26ea6:	f003 fa87 	bl	2a3b8 <__sprint_r>
   26eaa:	2800      	cmp	r0, #0
   26eac:	d000      	beq.n	26eb0 <_vfprintf_r+0x1130>
   26eae:	e4f7      	b.n	268a0 <_vfprintf_r+0xb20>
   26eb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   26eb2:	68bc      	ldr	r4, [r7, #8]
   26eb4:	ae32      	add	r6, sp, #200	; 0xc8
   26eb6:	e67d      	b.n	26bb4 <_vfprintf_r+0xe34>
   26eb8:	2320      	movs	r3, #32
   26eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26ebc:	439a      	bics	r2, r3
   26ebe:	3b1a      	subs	r3, #26
   26ec0:	920e      	str	r2, [sp, #56]	; 0x38
   26ec2:	469a      	mov	sl, r3
   26ec4:	e75f      	b.n	26d86 <_vfprintf_r+0x1006>
   26ec6:	232d      	movs	r3, #45	; 0x2d
   26ec8:	aa16      	add	r2, sp, #88	; 0x58
   26eca:	77d3      	strb	r3, [r2, #31]
   26ecc:	4698      	mov	r8, r3
   26ece:	f7ff faa8 	bl	26422 <_vfprintf_r+0x6a2>
   26ed2:	003a      	movs	r2, r7
   26ed4:	4659      	mov	r1, fp
   26ed6:	9806      	ldr	r0, [sp, #24]
   26ed8:	f003 fa6e 	bl	2a3b8 <__sprint_r>
   26edc:	2800      	cmp	r0, #0
   26ede:	d000      	beq.n	26ee2 <_vfprintf_r+0x1162>
   26ee0:	e4de      	b.n	268a0 <_vfprintf_r+0xb20>
   26ee2:	ae32      	add	r6, sp, #200	; 0xc8
   26ee4:	e419      	b.n	2671a <_vfprintf_r+0x99a>
   26ee6:	4be3      	ldr	r3, [pc, #908]	; (27274 <_vfprintf_r+0x14f4>)
   26ee8:	3401      	adds	r4, #1
   26eea:	6033      	str	r3, [r6, #0]
   26eec:	2301      	movs	r3, #1
   26eee:	6073      	str	r3, [r6, #4]
   26ef0:	687b      	ldr	r3, [r7, #4]
   26ef2:	60bc      	str	r4, [r7, #8]
   26ef4:	3301      	adds	r3, #1
   26ef6:	607b      	str	r3, [r7, #4]
   26ef8:	2b07      	cmp	r3, #7
   26efa:	dd00      	ble.n	26efe <_vfprintf_r+0x117e>
   26efc:	e155      	b.n	271aa <_vfprintf_r+0x142a>
   26efe:	3608      	adds	r6, #8
   26f00:	2800      	cmp	r0, #0
   26f02:	d107      	bne.n	26f14 <_vfprintf_r+0x1194>
   26f04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   26f06:	2b00      	cmp	r3, #0
   26f08:	d104      	bne.n	26f14 <_vfprintf_r+0x1194>
   26f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26f0c:	07db      	lsls	r3, r3, #31
   26f0e:	d401      	bmi.n	26f14 <_vfprintf_r+0x1194>
   26f10:	f7ff fb39 	bl	26586 <_vfprintf_r+0x806>
   26f14:	9b18      	ldr	r3, [sp, #96]	; 0x60
   26f16:	6033      	str	r3, [r6, #0]
   26f18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   26f1a:	1919      	adds	r1, r3, r4
   26f1c:	6073      	str	r3, [r6, #4]
   26f1e:	687b      	ldr	r3, [r7, #4]
   26f20:	60b9      	str	r1, [r7, #8]
   26f22:	3301      	adds	r3, #1
   26f24:	607b      	str	r3, [r7, #4]
   26f26:	2b07      	cmp	r3, #7
   26f28:	dd00      	ble.n	26f2c <_vfprintf_r+0x11ac>
   26f2a:	e1c4      	b.n	272b6 <_vfprintf_r+0x1536>
   26f2c:	0032      	movs	r2, r6
   26f2e:	3208      	adds	r2, #8
   26f30:	2800      	cmp	r0, #0
   26f32:	da00      	bge.n	26f36 <_vfprintf_r+0x11b6>
   26f34:	e195      	b.n	27262 <_vfprintf_r+0x14e2>
   26f36:	9811      	ldr	r0, [sp, #68]	; 0x44
   26f38:	3301      	adds	r3, #1
   26f3a:	6010      	str	r0, [r2, #0]
   26f3c:	9814      	ldr	r0, [sp, #80]	; 0x50
   26f3e:	607b      	str	r3, [r7, #4]
   26f40:	1844      	adds	r4, r0, r1
   26f42:	6050      	str	r0, [r2, #4]
   26f44:	60bc      	str	r4, [r7, #8]
   26f46:	2b07      	cmp	r3, #7
   26f48:	dd01      	ble.n	26f4e <_vfprintf_r+0x11ce>
   26f4a:	f7ff fbc2 	bl	266d2 <_vfprintf_r+0x952>
   26f4e:	3208      	adds	r2, #8
   26f50:	0016      	movs	r6, r2
   26f52:	f7ff fb18 	bl	26586 <_vfprintf_r+0x806>
   26f56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   26f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26f5a:	680b      	ldr	r3, [r1, #0]
   26f5c:	601a      	str	r2, [r3, #0]
   26f5e:	17d2      	asrs	r2, r2, #31
   26f60:	605a      	str	r2, [r3, #4]
   26f62:	000b      	movs	r3, r1
   26f64:	3304      	adds	r3, #4
   26f66:	930f      	str	r3, [sp, #60]	; 0x3c
   26f68:	f7fe ff58 	bl	25e1c <_vfprintf_r+0x9c>
   26f6c:	464b      	mov	r3, r9
   26f6e:	9a07      	ldr	r2, [sp, #28]
   26f70:	431c      	orrs	r4, r3
   26f72:	3201      	adds	r2, #1
   26f74:	7813      	ldrb	r3, [r2, #0]
   26f76:	9207      	str	r2, [sp, #28]
   26f78:	f7fe ff8b 	bl	25e92 <_vfprintf_r+0x112>
   26f7c:	003a      	movs	r2, r7
   26f7e:	4659      	mov	r1, fp
   26f80:	9806      	ldr	r0, [sp, #24]
   26f82:	f003 fa19 	bl	2a3b8 <__sprint_r>
   26f86:	2800      	cmp	r0, #0
   26f88:	d000      	beq.n	26f8c <_vfprintf_r+0x120c>
   26f8a:	e489      	b.n	268a0 <_vfprintf_r+0xb20>
   26f8c:	68bc      	ldr	r4, [r7, #8]
   26f8e:	ae32      	add	r6, sp, #200	; 0xc8
   26f90:	f7ff fbdc 	bl	2674c <_vfprintf_r+0x9cc>
   26f94:	4bb8      	ldr	r3, [pc, #736]	; (27278 <_vfprintf_r+0x14f8>)
   26f96:	9311      	str	r3, [sp, #68]	; 0x44
   26f98:	f7ff fa4a 	bl	26430 <_vfprintf_r+0x6b0>
   26f9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   26f9e:	ab32      	add	r3, sp, #200	; 0xc8
   26fa0:	1a9b      	subs	r3, r3, r2
   26fa2:	930e      	str	r3, [sp, #56]	; 0x38
   26fa4:	f7ff f859 	bl	2605a <_vfprintf_r+0x2da>
   26fa8:	9811      	ldr	r0, [sp, #68]	; 0x44
   26faa:	f7fd fb05 	bl	245b8 <strlen>
   26fae:	0002      	movs	r2, r0
   26fb0:	900e      	str	r0, [sp, #56]	; 0x38
   26fb2:	0003      	movs	r3, r0
   26fb4:	f7ff f9a1 	bl	262fa <_vfprintf_r+0x57a>
   26fb8:	232d      	movs	r3, #45	; 0x2d
   26fba:	aa16      	add	r2, sp, #88	; 0x58
   26fbc:	77d3      	strb	r3, [r2, #31]
   26fbe:	4698      	mov	r8, r3
   26fc0:	2300      	movs	r3, #0
   26fc2:	469a      	mov	sl, r3
   26fc4:	f7ff f854 	bl	26070 <_vfprintf_r+0x2f0>
   26fc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   26fca:	9313      	str	r3, [sp, #76]	; 0x4c
   26fcc:	1cda      	adds	r2, r3, #3
   26fce:	db02      	blt.n	26fd6 <_vfprintf_r+0x1256>
   26fd0:	459a      	cmp	sl, r3
   26fd2:	db00      	blt.n	26fd6 <_vfprintf_r+0x1256>
   26fd4:	e731      	b.n	26e3a <_vfprintf_r+0x10ba>
   26fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26fd8:	3b02      	subs	r3, #2
   26fda:	9312      	str	r3, [sp, #72]	; 0x48
   26fdc:	222c      	movs	r2, #44	; 0x2c
   26fde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   26fe0:	2148      	movs	r1, #72	; 0x48
   26fe2:	1e5d      	subs	r5, r3, #1
   26fe4:	ab16      	add	r3, sp, #88	; 0x58
   26fe6:	189b      	adds	r3, r3, r2
   26fe8:	466a      	mov	r2, sp
   26fea:	1852      	adds	r2, r2, r1
   26fec:	7812      	ldrb	r2, [r2, #0]
   26fee:	951f      	str	r5, [sp, #124]	; 0x7c
   26ff0:	701a      	strb	r2, [r3, #0]
   26ff2:	2d00      	cmp	r5, #0
   26ff4:	da00      	bge.n	26ff8 <_vfprintf_r+0x1278>
   26ff6:	e1cb      	b.n	27390 <_vfprintf_r+0x1610>
   26ff8:	212d      	movs	r1, #45	; 0x2d
   26ffa:	232b      	movs	r3, #43	; 0x2b
   26ffc:	aa16      	add	r2, sp, #88	; 0x58
   26ffe:	1852      	adds	r2, r2, r1
   27000:	7013      	strb	r3, [r2, #0]
   27002:	2d09      	cmp	r5, #9
   27004:	dc00      	bgt.n	27008 <_vfprintf_r+0x1288>
   27006:	e16d      	b.n	272e4 <_vfprintf_r+0x1564>
   27008:	aa16      	add	r2, sp, #88	; 0x58
   2700a:	233b      	movs	r3, #59	; 0x3b
   2700c:	4694      	mov	ip, r2
   2700e:	4463      	add	r3, ip
   27010:	469a      	mov	sl, r3
   27012:	46b1      	mov	r9, r6
   27014:	46a0      	mov	r8, r4
   27016:	4656      	mov	r6, sl
   27018:	e000      	b.n	2701c <_vfprintf_r+0x129c>
   2701a:	0026      	movs	r6, r4
   2701c:	0028      	movs	r0, r5
   2701e:	210a      	movs	r1, #10
   27020:	f7fa f992 	bl	21348 <__aeabi_idivmod>
   27024:	1e74      	subs	r4, r6, #1
   27026:	3130      	adds	r1, #48	; 0x30
   27028:	7021      	strb	r1, [r4, #0]
   2702a:	0028      	movs	r0, r5
   2702c:	210a      	movs	r1, #10
   2702e:	f7fa f8a5 	bl	2117c <__divsi3>
   27032:	0005      	movs	r5, r0
   27034:	2809      	cmp	r0, #9
   27036:	dcf0      	bgt.n	2701a <_vfprintf_r+0x129a>
   27038:	0023      	movs	r3, r4
   2703a:	4644      	mov	r4, r8
   2703c:	46b0      	mov	r8, r6
   2703e:	464e      	mov	r6, r9
   27040:	4699      	mov	r9, r3
   27042:	0003      	movs	r3, r0
   27044:	3330      	adds	r3, #48	; 0x30
   27046:	b2d8      	uxtb	r0, r3
   27048:	4643      	mov	r3, r8
   2704a:	3b02      	subs	r3, #2
   2704c:	7018      	strb	r0, [r3, #0]
   2704e:	459a      	cmp	sl, r3
   27050:	d800      	bhi.n	27054 <_vfprintf_r+0x12d4>
   27052:	e1f6      	b.n	27442 <_vfprintf_r+0x16c2>
   27054:	4642      	mov	r2, r8
   27056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   27058:	4645      	mov	r5, r8
   2705a:	1a99      	subs	r1, r3, r2
   2705c:	2301      	movs	r3, #1
   2705e:	3107      	adds	r1, #7
   27060:	425b      	negs	r3, r3
   27062:	e001      	b.n	27068 <_vfprintf_r+0x12e8>
   27064:	5ce8      	ldrb	r0, [r5, r3]
   27066:	3301      	adds	r3, #1
   27068:	aa21      	add	r2, sp, #132	; 0x84
   2706a:	18d2      	adds	r2, r2, r3
   2706c:	70d0      	strb	r0, [r2, #3]
   2706e:	428b      	cmp	r3, r1
   27070:	d1f8      	bne.n	27064 <_vfprintf_r+0x12e4>
   27072:	a916      	add	r1, sp, #88	; 0x58
   27074:	468c      	mov	ip, r1
   27076:	222e      	movs	r2, #46	; 0x2e
   27078:	464b      	mov	r3, r9
   2707a:	4462      	add	r2, ip
   2707c:	4694      	mov	ip, r2
   2707e:	1afb      	subs	r3, r7, r3
   27080:	4463      	add	r3, ip
   27082:	aa21      	add	r2, sp, #132	; 0x84
   27084:	9914      	ldr	r1, [sp, #80]	; 0x50
   27086:	1a9b      	subs	r3, r3, r2
   27088:	469c      	mov	ip, r3
   2708a:	000a      	movs	r2, r1
   2708c:	4462      	add	r2, ip
   2708e:	931a      	str	r3, [sp, #104]	; 0x68
   27090:	920e      	str	r2, [sp, #56]	; 0x38
   27092:	2901      	cmp	r1, #1
   27094:	dc00      	bgt.n	27098 <_vfprintf_r+0x1318>
   27096:	e170      	b.n	2737a <_vfprintf_r+0x15fa>
   27098:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2709a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2709c:	4694      	mov	ip, r2
   2709e:	4463      	add	r3, ip
   270a0:	001a      	movs	r2, r3
   270a2:	930e      	str	r3, [sp, #56]	; 0x38
   270a4:	43db      	mvns	r3, r3
   270a6:	17db      	asrs	r3, r3, #31
   270a8:	401a      	ands	r2, r3
   270aa:	2300      	movs	r3, #0
   270ac:	9208      	str	r2, [sp, #32]
   270ae:	9313      	str	r3, [sp, #76]	; 0x4c
   270b0:	e6d4      	b.n	26e5c <_vfprintf_r+0x10dc>
   270b2:	003a      	movs	r2, r7
   270b4:	4659      	mov	r1, fp
   270b6:	9806      	ldr	r0, [sp, #24]
   270b8:	f003 f97e 	bl	2a3b8 <__sprint_r>
   270bc:	2800      	cmp	r0, #0
   270be:	d001      	beq.n	270c4 <_vfprintf_r+0x1344>
   270c0:	f7ff fbee 	bl	268a0 <_vfprintf_r+0xb20>
   270c4:	68bc      	ldr	r4, [r7, #8]
   270c6:	ae32      	add	r6, sp, #200	; 0xc8
   270c8:	e46a      	b.n	269a0 <_vfprintf_r+0xc20>
   270ca:	4653      	mov	r3, sl
   270cc:	2b00      	cmp	r3, #0
   270ce:	d000      	beq.n	270d2 <_vfprintf_r+0x1352>
   270d0:	e659      	b.n	26d86 <_vfprintf_r+0x1006>
   270d2:	3301      	adds	r3, #1
   270d4:	469a      	mov	sl, r3
   270d6:	e656      	b.n	26d86 <_vfprintf_r+0x1006>
   270d8:	4653      	mov	r3, sl
   270da:	9308      	str	r3, [sp, #32]
   270dc:	2b06      	cmp	r3, #6
   270de:	d901      	bls.n	270e4 <_vfprintf_r+0x1364>
   270e0:	2306      	movs	r3, #6
   270e2:	9308      	str	r3, [sp, #32]
   270e4:	9b08      	ldr	r3, [sp, #32]
   270e6:	950f      	str	r5, [sp, #60]	; 0x3c
   270e8:	930e      	str	r3, [sp, #56]	; 0x38
   270ea:	2300      	movs	r3, #0
   270ec:	4698      	mov	r8, r3
   270ee:	469a      	mov	sl, r3
   270f0:	9313      	str	r3, [sp, #76]	; 0x4c
   270f2:	4b62      	ldr	r3, [pc, #392]	; (2727c <_vfprintf_r+0x14fc>)
   270f4:	9409      	str	r4, [sp, #36]	; 0x24
   270f6:	9311      	str	r3, [sp, #68]	; 0x44
   270f8:	f7fe ffbd 	bl	26076 <_vfprintf_r+0x2f6>
   270fc:	003a      	movs	r2, r7
   270fe:	4659      	mov	r1, fp
   27100:	9806      	ldr	r0, [sp, #24]
   27102:	f003 f959 	bl	2a3b8 <__sprint_r>
   27106:	2800      	cmp	r0, #0
   27108:	d001      	beq.n	2710e <_vfprintf_r+0x138e>
   2710a:	f7ff fbc9 	bl	268a0 <_vfprintf_r+0xb20>
   2710e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27110:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   27112:	68bc      	ldr	r4, [r7, #8]
   27114:	1a9b      	subs	r3, r3, r2
   27116:	ae32      	add	r6, sp, #200	; 0xc8
   27118:	e567      	b.n	26bea <_vfprintf_r+0xe6a>
   2711a:	ab23      	add	r3, sp, #140	; 0x8c
   2711c:	931b      	str	r3, [sp, #108]	; 0x6c
   2711e:	9304      	str	r3, [sp, #16]
   27120:	ab20      	add	r3, sp, #128	; 0x80
   27122:	9303      	str	r3, [sp, #12]
   27124:	ab1f      	add	r3, sp, #124	; 0x7c
   27126:	9302      	str	r3, [sp, #8]
   27128:	4653      	mov	r3, sl
   2712a:	9301      	str	r3, [sp, #4]
   2712c:	2303      	movs	r3, #3
   2712e:	464a      	mov	r2, r9
   27130:	9300      	str	r3, [sp, #0]
   27132:	9806      	ldr	r0, [sp, #24]
   27134:	9b08      	ldr	r3, [sp, #32]
   27136:	f000 fafb 	bl	27730 <_dtoa_r>
   2713a:	0003      	movs	r3, r0
   2713c:	4453      	add	r3, sl
   2713e:	4698      	mov	r8, r3
   27140:	4655      	mov	r5, sl
   27142:	9011      	str	r0, [sp, #68]	; 0x44
   27144:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27146:	781b      	ldrb	r3, [r3, #0]
   27148:	2b30      	cmp	r3, #48	; 0x30
   2714a:	d002      	beq.n	27152 <_vfprintf_r+0x13d2>
   2714c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2714e:	4498      	add	r8, r3
   27150:	e64e      	b.n	26df0 <_vfprintf_r+0x1070>
   27152:	2200      	movs	r2, #0
   27154:	2300      	movs	r3, #0
   27156:	4648      	mov	r0, r9
   27158:	9908      	ldr	r1, [sp, #32]
   2715a:	f7fa f90b 	bl	21374 <__aeabi_dcmpeq>
   2715e:	2800      	cmp	r0, #0
   27160:	d1f4      	bne.n	2714c <_vfprintf_r+0x13cc>
   27162:	2301      	movs	r3, #1
   27164:	1b5b      	subs	r3, r3, r5
   27166:	931f      	str	r3, [sp, #124]	; 0x7c
   27168:	4498      	add	r8, r3
   2716a:	e641      	b.n	26df0 <_vfprintf_r+0x1070>
   2716c:	46c1      	mov	r9, r8
   2716e:	f7ff fb1f 	bl	267b0 <_vfprintf_r+0xa30>
   27172:	2280      	movs	r2, #128	; 0x80
   27174:	0612      	lsls	r2, r2, #24
   27176:	4694      	mov	ip, r2
   27178:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2717a:	4699      	mov	r9, r3
   2717c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2717e:	4463      	add	r3, ip
   27180:	9308      	str	r3, [sp, #32]
   27182:	232d      	movs	r3, #45	; 0x2d
   27184:	9310      	str	r3, [sp, #64]	; 0x40
   27186:	e60b      	b.n	26da0 <_vfprintf_r+0x1020>
   27188:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2718a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2718c:	4694      	mov	ip, r2
   2718e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   27190:	4463      	add	r3, ip
   27192:	930e      	str	r3, [sp, #56]	; 0x38
   27194:	2a00      	cmp	r2, #0
   27196:	dc00      	bgt.n	2719a <_vfprintf_r+0x141a>
   27198:	e0e3      	b.n	27362 <_vfprintf_r+0x15e2>
   2719a:	001a      	movs	r2, r3
   2719c:	43db      	mvns	r3, r3
   2719e:	17db      	asrs	r3, r3, #31
   271a0:	401a      	ands	r2, r3
   271a2:	2367      	movs	r3, #103	; 0x67
   271a4:	9208      	str	r2, [sp, #32]
   271a6:	9312      	str	r3, [sp, #72]	; 0x48
   271a8:	e658      	b.n	26e5c <_vfprintf_r+0x10dc>
   271aa:	003a      	movs	r2, r7
   271ac:	4659      	mov	r1, fp
   271ae:	9806      	ldr	r0, [sp, #24]
   271b0:	f003 f902 	bl	2a3b8 <__sprint_r>
   271b4:	2800      	cmp	r0, #0
   271b6:	d001      	beq.n	271bc <_vfprintf_r+0x143c>
   271b8:	f7ff fb72 	bl	268a0 <_vfprintf_r+0xb20>
   271bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   271be:	68bc      	ldr	r4, [r7, #8]
   271c0:	ae32      	add	r6, sp, #200	; 0xc8
   271c2:	e69d      	b.n	26f00 <_vfprintf_r+0x1180>
   271c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   271c6:	9313      	str	r3, [sp, #76]	; 0x4c
   271c8:	2b00      	cmp	r3, #0
   271ca:	dc00      	bgt.n	271ce <_vfprintf_r+0x144e>
   271cc:	e0f2      	b.n	273b4 <_vfprintf_r+0x1634>
   271ce:	4652      	mov	r2, sl
   271d0:	2a00      	cmp	r2, #0
   271d2:	d000      	beq.n	271d6 <_vfprintf_r+0x1456>
   271d4:	e0a0      	b.n	27318 <_vfprintf_r+0x1598>
   271d6:	07e2      	lsls	r2, r4, #31
   271d8:	d500      	bpl.n	271dc <_vfprintf_r+0x145c>
   271da:	e09d      	b.n	27318 <_vfprintf_r+0x1598>
   271dc:	9308      	str	r3, [sp, #32]
   271de:	930e      	str	r3, [sp, #56]	; 0x38
   271e0:	e63c      	b.n	26e5c <_vfprintf_r+0x10dc>
   271e2:	ab16      	add	r3, sp, #88	; 0x58
   271e4:	7fdb      	ldrb	r3, [r3, #31]
   271e6:	950f      	str	r5, [sp, #60]	; 0x3c
   271e8:	4698      	mov	r8, r3
   271ea:	4653      	mov	r3, sl
   271ec:	9308      	str	r3, [sp, #32]
   271ee:	930e      	str	r3, [sp, #56]	; 0x38
   271f0:	2300      	movs	r3, #0
   271f2:	9409      	str	r4, [sp, #36]	; 0x24
   271f4:	469a      	mov	sl, r3
   271f6:	9313      	str	r3, [sp, #76]	; 0x4c
   271f8:	f7fe ff37 	bl	2606a <_vfprintf_r+0x2ea>
   271fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   271fe:	4698      	mov	r8, r3
   27200:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27202:	44a8      	add	r8, r5
   27204:	2b47      	cmp	r3, #71	; 0x47
   27206:	d000      	beq.n	2720a <_vfprintf_r+0x148a>
   27208:	e5f2      	b.n	26df0 <_vfprintf_r+0x1070>
   2720a:	07e3      	lsls	r3, r4, #31
   2720c:	d400      	bmi.n	27210 <_vfprintf_r+0x1490>
   2720e:	e0dc      	b.n	273ca <_vfprintf_r+0x164a>
   27210:	9b11      	ldr	r3, [sp, #68]	; 0x44
   27212:	4698      	mov	r8, r3
   27214:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27216:	44a8      	add	r8, r5
   27218:	2b46      	cmp	r3, #70	; 0x46
   2721a:	d093      	beq.n	27144 <_vfprintf_r+0x13c4>
   2721c:	e5e8      	b.n	26df0 <_vfprintf_r+0x1070>
   2721e:	ab23      	add	r3, sp, #140	; 0x8c
   27220:	931b      	str	r3, [sp, #108]	; 0x6c
   27222:	9304      	str	r3, [sp, #16]
   27224:	ab20      	add	r3, sp, #128	; 0x80
   27226:	9303      	str	r3, [sp, #12]
   27228:	ab1f      	add	r3, sp, #124	; 0x7c
   2722a:	9302      	str	r3, [sp, #8]
   2722c:	4653      	mov	r3, sl
   2722e:	9301      	str	r3, [sp, #4]
   27230:	2303      	movs	r3, #3
   27232:	464a      	mov	r2, r9
   27234:	9300      	str	r3, [sp, #0]
   27236:	9806      	ldr	r0, [sp, #24]
   27238:	9b08      	ldr	r3, [sp, #32]
   2723a:	f000 fa79 	bl	27730 <_dtoa_r>
   2723e:	4655      	mov	r5, sl
   27240:	9011      	str	r0, [sp, #68]	; 0x44
   27242:	e7e5      	b.n	27210 <_vfprintf_r+0x1490>
   27244:	003a      	movs	r2, r7
   27246:	4659      	mov	r1, fp
   27248:	9806      	ldr	r0, [sp, #24]
   2724a:	f003 f8b5 	bl	2a3b8 <__sprint_r>
   2724e:	2800      	cmp	r0, #0
   27250:	d101      	bne.n	27256 <_vfprintf_r+0x14d6>
   27252:	f7ff faab 	bl	267ac <_vfprintf_r+0xa2c>
   27256:	f7ff faab 	bl	267b0 <_vfprintf_r+0xa30>
   2725a:	4642      	mov	r2, r8
   2725c:	9207      	str	r2, [sp, #28]
   2725e:	f7fe fe1b 	bl	25e98 <_vfprintf_r+0x118>
   27262:	4244      	negs	r4, r0
   27264:	3010      	adds	r0, #16
   27266:	db00      	blt.n	2726a <_vfprintf_r+0x14ea>
   27268:	e0d8      	b.n	2741c <_vfprintf_r+0x169c>
   2726a:	4805      	ldr	r0, [pc, #20]	; (27280 <_vfprintf_r+0x1500>)
   2726c:	2610      	movs	r6, #16
   2726e:	0005      	movs	r5, r0
   27270:	e00c      	b.n	2728c <_vfprintf_r+0x150c>
   27272:	46c0      	nop			; (mov r8, r8)
   27274:	0002d10c 	.word	0x0002d10c
   27278:	0002d0d0 	.word	0x0002d0d0
   2727c:	0002d104 	.word	0x0002d104
   27280:	0002d2a4 	.word	0x0002d2a4
   27284:	3208      	adds	r2, #8
   27286:	3c10      	subs	r4, #16
   27288:	2c10      	cmp	r4, #16
   2728a:	dd51      	ble.n	27330 <_vfprintf_r+0x15b0>
   2728c:	3110      	adds	r1, #16
   2728e:	3301      	adds	r3, #1
   27290:	6015      	str	r5, [r2, #0]
   27292:	6056      	str	r6, [r2, #4]
   27294:	60b9      	str	r1, [r7, #8]
   27296:	607b      	str	r3, [r7, #4]
   27298:	2b07      	cmp	r3, #7
   2729a:	ddf3      	ble.n	27284 <_vfprintf_r+0x1504>
   2729c:	003a      	movs	r2, r7
   2729e:	4659      	mov	r1, fp
   272a0:	9806      	ldr	r0, [sp, #24]
   272a2:	f003 f889 	bl	2a3b8 <__sprint_r>
   272a6:	2800      	cmp	r0, #0
   272a8:	d001      	beq.n	272ae <_vfprintf_r+0x152e>
   272aa:	f7ff faf9 	bl	268a0 <_vfprintf_r+0xb20>
   272ae:	68b9      	ldr	r1, [r7, #8]
   272b0:	687b      	ldr	r3, [r7, #4]
   272b2:	aa32      	add	r2, sp, #200	; 0xc8
   272b4:	e7e7      	b.n	27286 <_vfprintf_r+0x1506>
   272b6:	003a      	movs	r2, r7
   272b8:	4659      	mov	r1, fp
   272ba:	9806      	ldr	r0, [sp, #24]
   272bc:	f003 f87c 	bl	2a3b8 <__sprint_r>
   272c0:	2800      	cmp	r0, #0
   272c2:	d001      	beq.n	272c8 <_vfprintf_r+0x1548>
   272c4:	f7ff faec 	bl	268a0 <_vfprintf_r+0xb20>
   272c8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   272ca:	68b9      	ldr	r1, [r7, #8]
   272cc:	687b      	ldr	r3, [r7, #4]
   272ce:	aa32      	add	r2, sp, #200	; 0xc8
   272d0:	e62e      	b.n	26f30 <_vfprintf_r+0x11b0>
   272d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   272d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   272d6:	4694      	mov	ip, r2
   272d8:	4463      	add	r3, ip
   272da:	001a      	movs	r2, r3
   272dc:	930e      	str	r3, [sp, #56]	; 0x38
   272de:	e75d      	b.n	2719c <_vfprintf_r+0x141c>
   272e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   272e2:	e599      	b.n	26e18 <_vfprintf_r+0x1098>
   272e4:	212e      	movs	r1, #46	; 0x2e
   272e6:	2330      	movs	r3, #48	; 0x30
   272e8:	aa16      	add	r2, sp, #88	; 0x58
   272ea:	1852      	adds	r2, r2, r1
   272ec:	7013      	strb	r3, [r2, #0]
   272ee:	002b      	movs	r3, r5
   272f0:	aa16      	add	r2, sp, #88	; 0x58
   272f2:	3101      	adds	r1, #1
   272f4:	3330      	adds	r3, #48	; 0x30
   272f6:	1852      	adds	r2, r2, r1
   272f8:	7013      	strb	r3, [r2, #0]
   272fa:	ab22      	add	r3, sp, #136	; 0x88
   272fc:	e6c1      	b.n	27082 <_vfprintf_r+0x1302>
   272fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   27300:	2b00      	cmp	r3, #0
   27302:	db52      	blt.n	273aa <_vfprintf_r+0x162a>
   27304:	ab16      	add	r3, sp, #88	; 0x58
   27306:	7fdb      	ldrb	r3, [r3, #31]
   27308:	4698      	mov	r8, r3
   2730a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2730c:	2b47      	cmp	r3, #71	; 0x47
   2730e:	dc48      	bgt.n	273a2 <_vfprintf_r+0x1622>
   27310:	4b4e      	ldr	r3, [pc, #312]	; (2744c <_vfprintf_r+0x16cc>)
   27312:	9311      	str	r3, [sp, #68]	; 0x44
   27314:	f7ff f88c 	bl	26430 <_vfprintf_r+0x6b0>
   27318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2731a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2731c:	4694      	mov	ip, r2
   2731e:	4463      	add	r3, ip
   27320:	4453      	add	r3, sl
   27322:	001a      	movs	r2, r3
   27324:	930e      	str	r3, [sp, #56]	; 0x38
   27326:	43db      	mvns	r3, r3
   27328:	17db      	asrs	r3, r3, #31
   2732a:	401a      	ands	r2, r3
   2732c:	9208      	str	r2, [sp, #32]
   2732e:	e595      	b.n	26e5c <_vfprintf_r+0x10dc>
   27330:	46a9      	mov	r9, r5
   27332:	4648      	mov	r0, r9
   27334:	1909      	adds	r1, r1, r4
   27336:	3301      	adds	r3, #1
   27338:	6010      	str	r0, [r2, #0]
   2733a:	6054      	str	r4, [r2, #4]
   2733c:	60b9      	str	r1, [r7, #8]
   2733e:	3208      	adds	r2, #8
   27340:	607b      	str	r3, [r7, #4]
   27342:	2b07      	cmp	r3, #7
   27344:	dc00      	bgt.n	27348 <_vfprintf_r+0x15c8>
   27346:	e5f6      	b.n	26f36 <_vfprintf_r+0x11b6>
   27348:	003a      	movs	r2, r7
   2734a:	4659      	mov	r1, fp
   2734c:	9806      	ldr	r0, [sp, #24]
   2734e:	f003 f833 	bl	2a3b8 <__sprint_r>
   27352:	2800      	cmp	r0, #0
   27354:	d001      	beq.n	2735a <_vfprintf_r+0x15da>
   27356:	f7ff faa3 	bl	268a0 <_vfprintf_r+0xb20>
   2735a:	68b9      	ldr	r1, [r7, #8]
   2735c:	687b      	ldr	r3, [r7, #4]
   2735e:	aa32      	add	r2, sp, #200	; 0xc8
   27360:	e5e9      	b.n	26f36 <_vfprintf_r+0x11b6>
   27362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   27366:	1a98      	subs	r0, r3, r2
   27368:	1c43      	adds	r3, r0, #1
   2736a:	001a      	movs	r2, r3
   2736c:	930e      	str	r3, [sp, #56]	; 0x38
   2736e:	e715      	b.n	2719c <_vfprintf_r+0x141c>
   27370:	4a37      	ldr	r2, [pc, #220]	; (27450 <_vfprintf_r+0x16d0>)
   27372:	687b      	ldr	r3, [r7, #4]
   27374:	4691      	mov	r9, r2
   27376:	f7ff fbf5 	bl	26b64 <_vfprintf_r+0xde4>
   2737a:	2301      	movs	r3, #1
   2737c:	4023      	ands	r3, r4
   2737e:	9313      	str	r3, [sp, #76]	; 0x4c
   27380:	d000      	beq.n	27384 <_vfprintf_r+0x1604>
   27382:	e689      	b.n	27098 <_vfprintf_r+0x1318>
   27384:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27386:	43d3      	mvns	r3, r2
   27388:	17db      	asrs	r3, r3, #31
   2738a:	401a      	ands	r2, r3
   2738c:	9208      	str	r2, [sp, #32]
   2738e:	e565      	b.n	26e5c <_vfprintf_r+0x10dc>
   27390:	2301      	movs	r3, #1
   27392:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   27394:	391b      	subs	r1, #27
   27396:	1a9d      	subs	r5, r3, r2
   27398:	aa16      	add	r2, sp, #88	; 0x58
   2739a:	332c      	adds	r3, #44	; 0x2c
   2739c:	1852      	adds	r2, r2, r1
   2739e:	7013      	strb	r3, [r2, #0]
   273a0:	e62f      	b.n	27002 <_vfprintf_r+0x1282>
   273a2:	4b2c      	ldr	r3, [pc, #176]	; (27454 <_vfprintf_r+0x16d4>)
   273a4:	9311      	str	r3, [sp, #68]	; 0x44
   273a6:	f7ff f843 	bl	26430 <_vfprintf_r+0x6b0>
   273aa:	232d      	movs	r3, #45	; 0x2d
   273ac:	aa16      	add	r2, sp, #88	; 0x58
   273ae:	77d3      	strb	r3, [r2, #31]
   273b0:	4698      	mov	r8, r3
   273b2:	e7aa      	b.n	2730a <_vfprintf_r+0x158a>
   273b4:	4653      	mov	r3, sl
   273b6:	2b00      	cmp	r3, #0
   273b8:	d101      	bne.n	273be <_vfprintf_r+0x163e>
   273ba:	07e3      	lsls	r3, r4, #31
   273bc:	d503      	bpl.n	273c6 <_vfprintf_r+0x1646>
   273be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   273c0:	1c58      	adds	r0, r3, #1
   273c2:	0003      	movs	r3, r0
   273c4:	e7ac      	b.n	27320 <_vfprintf_r+0x15a0>
   273c6:	2301      	movs	r3, #1
   273c8:	e708      	b.n	271dc <_vfprintf_r+0x145c>
   273ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   273cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   273ce:	1a9b      	subs	r3, r3, r2
   273d0:	9314      	str	r3, [sp, #80]	; 0x50
   273d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   273d4:	2b47      	cmp	r3, #71	; 0x47
   273d6:	d100      	bne.n	273da <_vfprintf_r+0x165a>
   273d8:	e5f6      	b.n	26fc8 <_vfprintf_r+0x1248>
   273da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   273dc:	9313      	str	r3, [sp, #76]	; 0x4c
   273de:	e5fd      	b.n	26fdc <_vfprintf_r+0x125c>
   273e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   273e2:	1d1d      	adds	r5, r3, #4
   273e4:	681b      	ldr	r3, [r3, #0]
   273e6:	46a8      	mov	r8, r5
   273e8:	469a      	mov	sl, r3
   273ea:	2b00      	cmp	r3, #0
   273ec:	db0a      	blt.n	27404 <_vfprintf_r+0x1684>
   273ee:	4645      	mov	r5, r8
   273f0:	9b07      	ldr	r3, [sp, #28]
   273f2:	950f      	str	r5, [sp, #60]	; 0x3c
   273f4:	785b      	ldrb	r3, [r3, #1]
   273f6:	9207      	str	r2, [sp, #28]
   273f8:	f7fe fd4b 	bl	25e92 <_vfprintf_r+0x112>
   273fc:	ab16      	add	r3, sp, #88	; 0x58
   273fe:	77d8      	strb	r0, [r3, #31]
   27400:	f7ff f830 	bl	26464 <_vfprintf_r+0x6e4>
   27404:	2301      	movs	r3, #1
   27406:	425b      	negs	r3, r3
   27408:	469a      	mov	sl, r3
   2740a:	e7f0      	b.n	273ee <_vfprintf_r+0x166e>
   2740c:	ab16      	add	r3, sp, #88	; 0x58
   2740e:	77d8      	strb	r0, [r3, #31]
   27410:	f7fe ff27 	bl	26262 <_vfprintf_r+0x4e2>
   27414:	ab16      	add	r3, sp, #88	; 0x58
   27416:	77d8      	strb	r0, [r3, #31]
   27418:	f7fe fdce 	bl	25fb8 <_vfprintf_r+0x238>
   2741c:	480c      	ldr	r0, [pc, #48]	; (27450 <_vfprintf_r+0x16d0>)
   2741e:	4681      	mov	r9, r0
   27420:	e787      	b.n	27332 <_vfprintf_r+0x15b2>
   27422:	ab16      	add	r3, sp, #88	; 0x58
   27424:	77d8      	strb	r0, [r3, #31]
   27426:	f7ff f829 	bl	2647c <_vfprintf_r+0x6fc>
   2742a:	ab16      	add	r3, sp, #88	; 0x58
   2742c:	77d8      	strb	r0, [r3, #31]
   2742e:	f7fe ffc3 	bl	263b8 <_vfprintf_r+0x638>
   27432:	ab16      	add	r3, sp, #88	; 0x58
   27434:	77d8      	strb	r0, [r3, #31]
   27436:	f7fe ffa5 	bl	26384 <_vfprintf_r+0x604>
   2743a:	ab16      	add	r3, sp, #88	; 0x58
   2743c:	77d8      	strb	r0, [r3, #31]
   2743e:	f7fe feaf 	bl	261a0 <_vfprintf_r+0x420>
   27442:	aa16      	add	r2, sp, #88	; 0x58
   27444:	232e      	movs	r3, #46	; 0x2e
   27446:	4694      	mov	ip, r2
   27448:	4463      	add	r3, ip
   2744a:	e61a      	b.n	27082 <_vfprintf_r+0x1302>
   2744c:	0002d0d4 	.word	0x0002d0d4
   27450:	0002d2a4 	.word	0x0002d2a4
   27454:	0002d0d8 	.word	0x0002d0d8

00027458 <__sbprintf>:
   27458:	b5f0      	push	{r4, r5, r6, r7, lr}
   2745a:	0015      	movs	r5, r2
   2745c:	2202      	movs	r2, #2
   2745e:	4c1e      	ldr	r4, [pc, #120]	; (274d8 <__sbprintf+0x80>)
   27460:	001f      	movs	r7, r3
   27462:	898b      	ldrh	r3, [r1, #12]
   27464:	44a5      	add	sp, r4
   27466:	4393      	bics	r3, r2
   27468:	466a      	mov	r2, sp
   2746a:	8193      	strh	r3, [r2, #12]
   2746c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2746e:	0006      	movs	r6, r0
   27470:	9319      	str	r3, [sp, #100]	; 0x64
   27472:	89cb      	ldrh	r3, [r1, #14]
   27474:	a816      	add	r0, sp, #88	; 0x58
   27476:	81d3      	strh	r3, [r2, #14]
   27478:	69cb      	ldr	r3, [r1, #28]
   2747a:	000c      	movs	r4, r1
   2747c:	9307      	str	r3, [sp, #28]
   2747e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   27480:	9309      	str	r3, [sp, #36]	; 0x24
   27482:	ab1a      	add	r3, sp, #104	; 0x68
   27484:	9300      	str	r3, [sp, #0]
   27486:	9304      	str	r3, [sp, #16]
   27488:	2380      	movs	r3, #128	; 0x80
   2748a:	00db      	lsls	r3, r3, #3
   2748c:	9302      	str	r3, [sp, #8]
   2748e:	9305      	str	r3, [sp, #20]
   27490:	2300      	movs	r3, #0
   27492:	9306      	str	r3, [sp, #24]
   27494:	f001 fd64 	bl	28f60 <__retarget_lock_init_recursive>
   27498:	002a      	movs	r2, r5
   2749a:	003b      	movs	r3, r7
   2749c:	4669      	mov	r1, sp
   2749e:	0030      	movs	r0, r6
   274a0:	f7fe fc6e 	bl	25d80 <_vfprintf_r>
   274a4:	1e05      	subs	r5, r0, #0
   274a6:	db05      	blt.n	274b4 <__sbprintf+0x5c>
   274a8:	4669      	mov	r1, sp
   274aa:	0030      	movs	r0, r6
   274ac:	f001 f9ac 	bl	28808 <_fflush_r>
   274b0:	2800      	cmp	r0, #0
   274b2:	d10e      	bne.n	274d2 <__sbprintf+0x7a>
   274b4:	466b      	mov	r3, sp
   274b6:	899b      	ldrh	r3, [r3, #12]
   274b8:	065b      	lsls	r3, r3, #25
   274ba:	d503      	bpl.n	274c4 <__sbprintf+0x6c>
   274bc:	2240      	movs	r2, #64	; 0x40
   274be:	89a3      	ldrh	r3, [r4, #12]
   274c0:	4313      	orrs	r3, r2
   274c2:	81a3      	strh	r3, [r4, #12]
   274c4:	9816      	ldr	r0, [sp, #88]	; 0x58
   274c6:	f001 fd4d 	bl	28f64 <__retarget_lock_close_recursive>
   274ca:	0028      	movs	r0, r5
   274cc:	4b03      	ldr	r3, [pc, #12]	; (274dc <__sbprintf+0x84>)
   274ce:	449d      	add	sp, r3
   274d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   274d2:	2501      	movs	r5, #1
   274d4:	426d      	negs	r5, r5
   274d6:	e7ed      	b.n	274b4 <__sbprintf+0x5c>
   274d8:	fffffb94 	.word	0xfffffb94
   274dc:	0000046c 	.word	0x0000046c

000274e0 <__swsetup_r>:
   274e0:	4b33      	ldr	r3, [pc, #204]	; (275b0 <__swsetup_r+0xd0>)
   274e2:	b570      	push	{r4, r5, r6, lr}
   274e4:	0005      	movs	r5, r0
   274e6:	6818      	ldr	r0, [r3, #0]
   274e8:	000c      	movs	r4, r1
   274ea:	2800      	cmp	r0, #0
   274ec:	d002      	beq.n	274f4 <__swsetup_r+0x14>
   274ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   274f0:	2b00      	cmp	r3, #0
   274f2:	d03c      	beq.n	2756e <__swsetup_r+0x8e>
   274f4:	230c      	movs	r3, #12
   274f6:	5ee2      	ldrsh	r2, [r4, r3]
   274f8:	b293      	uxth	r3, r2
   274fa:	0719      	lsls	r1, r3, #28
   274fc:	d50d      	bpl.n	2751a <__swsetup_r+0x3a>
   274fe:	6921      	ldr	r1, [r4, #16]
   27500:	2900      	cmp	r1, #0
   27502:	d015      	beq.n	27530 <__swsetup_r+0x50>
   27504:	07da      	lsls	r2, r3, #31
   27506:	d521      	bpl.n	2754c <__swsetup_r+0x6c>
   27508:	2300      	movs	r3, #0
   2750a:	60a3      	str	r3, [r4, #8]
   2750c:	6963      	ldr	r3, [r4, #20]
   2750e:	2000      	movs	r0, #0
   27510:	425b      	negs	r3, r3
   27512:	61a3      	str	r3, [r4, #24]
   27514:	2900      	cmp	r1, #0
   27516:	d021      	beq.n	2755c <__swsetup_r+0x7c>
   27518:	bd70      	pop	{r4, r5, r6, pc}
   2751a:	06d9      	lsls	r1, r3, #27
   2751c:	d53f      	bpl.n	2759e <__swsetup_r+0xbe>
   2751e:	075b      	lsls	r3, r3, #29
   27520:	d428      	bmi.n	27574 <__swsetup_r+0x94>
   27522:	6921      	ldr	r1, [r4, #16]
   27524:	2308      	movs	r3, #8
   27526:	4313      	orrs	r3, r2
   27528:	81a3      	strh	r3, [r4, #12]
   2752a:	b29b      	uxth	r3, r3
   2752c:	2900      	cmp	r1, #0
   2752e:	d1e9      	bne.n	27504 <__swsetup_r+0x24>
   27530:	22a0      	movs	r2, #160	; 0xa0
   27532:	2080      	movs	r0, #128	; 0x80
   27534:	0092      	lsls	r2, r2, #2
   27536:	0080      	lsls	r0, r0, #2
   27538:	401a      	ands	r2, r3
   2753a:	4282      	cmp	r2, r0
   2753c:	d0e2      	beq.n	27504 <__swsetup_r+0x24>
   2753e:	0021      	movs	r1, r4
   27540:	0028      	movs	r0, r5
   27542:	f001 fd45 	bl	28fd0 <__smakebuf_r>
   27546:	89a3      	ldrh	r3, [r4, #12]
   27548:	6921      	ldr	r1, [r4, #16]
   2754a:	e7db      	b.n	27504 <__swsetup_r+0x24>
   2754c:	2200      	movs	r2, #0
   2754e:	079b      	lsls	r3, r3, #30
   27550:	d400      	bmi.n	27554 <__swsetup_r+0x74>
   27552:	6962      	ldr	r2, [r4, #20]
   27554:	60a2      	str	r2, [r4, #8]
   27556:	2000      	movs	r0, #0
   27558:	2900      	cmp	r1, #0
   2755a:	d1dd      	bne.n	27518 <__swsetup_r+0x38>
   2755c:	220c      	movs	r2, #12
   2755e:	5ea3      	ldrsh	r3, [r4, r2]
   27560:	061a      	lsls	r2, r3, #24
   27562:	d5d9      	bpl.n	27518 <__swsetup_r+0x38>
   27564:	2240      	movs	r2, #64	; 0x40
   27566:	4313      	orrs	r3, r2
   27568:	81a3      	strh	r3, [r4, #12]
   2756a:	3801      	subs	r0, #1
   2756c:	e7d4      	b.n	27518 <__swsetup_r+0x38>
   2756e:	f001 f9a5 	bl	288bc <__sinit>
   27572:	e7bf      	b.n	274f4 <__swsetup_r+0x14>
   27574:	6b21      	ldr	r1, [r4, #48]	; 0x30
   27576:	2900      	cmp	r1, #0
   27578:	d00a      	beq.n	27590 <__swsetup_r+0xb0>
   2757a:	0023      	movs	r3, r4
   2757c:	3340      	adds	r3, #64	; 0x40
   2757e:	4299      	cmp	r1, r3
   27580:	d004      	beq.n	2758c <__swsetup_r+0xac>
   27582:	0028      	movs	r0, r5
   27584:	f001 fa44 	bl	28a10 <_free_r>
   27588:	230c      	movs	r3, #12
   2758a:	5ee2      	ldrsh	r2, [r4, r3]
   2758c:	2300      	movs	r3, #0
   2758e:	6323      	str	r3, [r4, #48]	; 0x30
   27590:	2324      	movs	r3, #36	; 0x24
   27592:	439a      	bics	r2, r3
   27594:	2300      	movs	r3, #0
   27596:	6921      	ldr	r1, [r4, #16]
   27598:	6063      	str	r3, [r4, #4]
   2759a:	6021      	str	r1, [r4, #0]
   2759c:	e7c2      	b.n	27524 <__swsetup_r+0x44>
   2759e:	2309      	movs	r3, #9
   275a0:	602b      	str	r3, [r5, #0]
   275a2:	2340      	movs	r3, #64	; 0x40
   275a4:	2001      	movs	r0, #1
   275a6:	431a      	orrs	r2, r3
   275a8:	81a2      	strh	r2, [r4, #12]
   275aa:	4240      	negs	r0, r0
   275ac:	e7b4      	b.n	27518 <__swsetup_r+0x38>
   275ae:	46c0      	nop			; (mov r8, r8)
   275b0:	200001e8 	.word	0x200001e8

000275b4 <register_fini>:
   275b4:	4b03      	ldr	r3, [pc, #12]	; (275c4 <register_fini+0x10>)
   275b6:	b510      	push	{r4, lr}
   275b8:	2b00      	cmp	r3, #0
   275ba:	d002      	beq.n	275c2 <register_fini+0xe>
   275bc:	4802      	ldr	r0, [pc, #8]	; (275c8 <register_fini+0x14>)
   275be:	f000 f805 	bl	275cc <atexit>
   275c2:	bd10      	pop	{r4, pc}
   275c4:	00000000 	.word	0x00000000
   275c8:	0002893d 	.word	0x0002893d

000275cc <atexit>:
   275cc:	b510      	push	{r4, lr}
   275ce:	0001      	movs	r1, r0
   275d0:	2300      	movs	r3, #0
   275d2:	2200      	movs	r2, #0
   275d4:	2000      	movs	r0, #0
   275d6:	f002 ff1b 	bl	2a410 <__register_exitproc>
   275da:	bd10      	pop	{r4, pc}

000275dc <quorem>:
   275dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   275de:	4645      	mov	r5, r8
   275e0:	4680      	mov	r8, r0
   275e2:	46de      	mov	lr, fp
   275e4:	4657      	mov	r7, sl
   275e6:	464e      	mov	r6, r9
   275e8:	4642      	mov	r2, r8
   275ea:	b5e0      	push	{r5, r6, r7, lr}
   275ec:	690c      	ldr	r4, [r1, #16]
   275ee:	6912      	ldr	r2, [r2, #16]
   275f0:	b085      	sub	sp, #20
   275f2:	000b      	movs	r3, r1
   275f4:	9102      	str	r1, [sp, #8]
   275f6:	2000      	movs	r0, #0
   275f8:	4294      	cmp	r4, r2
   275fa:	dd00      	ble.n	275fe <quorem+0x22>
   275fc:	e090      	b.n	27720 <quorem+0x144>
   275fe:	2214      	movs	r2, #20
   27600:	4694      	mov	ip, r2
   27602:	4463      	add	r3, ip
   27604:	4699      	mov	r9, r3
   27606:	464a      	mov	r2, r9
   27608:	3c01      	subs	r4, #1
   2760a:	00a3      	lsls	r3, r4, #2
   2760c:	18d6      	adds	r6, r2, r3
   2760e:	2214      	movs	r2, #20
   27610:	4442      	add	r2, r8
   27612:	4693      	mov	fp, r2
   27614:	449b      	add	fp, r3
   27616:	6833      	ldr	r3, [r6, #0]
   27618:	0015      	movs	r5, r2
   2761a:	1c59      	adds	r1, r3, #1
   2761c:	465b      	mov	r3, fp
   2761e:	6818      	ldr	r0, [r3, #0]
   27620:	9201      	str	r2, [sp, #4]
   27622:	f7f9 fd21 	bl	21068 <__udivsi3>
   27626:	1e03      	subs	r3, r0, #0
   27628:	9000      	str	r0, [sp, #0]
   2762a:	d042      	beq.n	276b2 <quorem+0xd6>
   2762c:	0029      	movs	r1, r5
   2762e:	2700      	movs	r7, #0
   27630:	464d      	mov	r5, r9
   27632:	2000      	movs	r0, #0
   27634:	46b1      	mov	r9, r6
   27636:	46a2      	mov	sl, r4
   27638:	003e      	movs	r6, r7
   2763a:	0004      	movs	r4, r0
   2763c:	469c      	mov	ip, r3
   2763e:	002f      	movs	r7, r5
   27640:	0008      	movs	r0, r1
   27642:	9503      	str	r5, [sp, #12]
   27644:	4663      	mov	r3, ip
   27646:	cf04      	ldmia	r7!, {r2}
   27648:	0415      	lsls	r5, r2, #16
   2764a:	0c2d      	lsrs	r5, r5, #16
   2764c:	435d      	muls	r5, r3
   2764e:	0c12      	lsrs	r2, r2, #16
   27650:	435a      	muls	r2, r3
   27652:	19ad      	adds	r5, r5, r6
   27654:	0c2b      	lsrs	r3, r5, #16
   27656:	18d2      	adds	r2, r2, r3
   27658:	6803      	ldr	r3, [r0, #0]
   2765a:	042d      	lsls	r5, r5, #16
   2765c:	0419      	lsls	r1, r3, #16
   2765e:	0c09      	lsrs	r1, r1, #16
   27660:	1909      	adds	r1, r1, r4
   27662:	0c16      	lsrs	r6, r2, #16
   27664:	0c2d      	lsrs	r5, r5, #16
   27666:	0412      	lsls	r2, r2, #16
   27668:	1b49      	subs	r1, r1, r5
   2766a:	0c12      	lsrs	r2, r2, #16
   2766c:	0c1b      	lsrs	r3, r3, #16
   2766e:	1a9b      	subs	r3, r3, r2
   27670:	140a      	asrs	r2, r1, #16
   27672:	189b      	adds	r3, r3, r2
   27674:	0409      	lsls	r1, r1, #16
   27676:	141c      	asrs	r4, r3, #16
   27678:	0c09      	lsrs	r1, r1, #16
   2767a:	041b      	lsls	r3, r3, #16
   2767c:	4319      	orrs	r1, r3
   2767e:	c002      	stmia	r0!, {r1}
   27680:	45b9      	cmp	r9, r7
   27682:	d2df      	bcs.n	27644 <quorem+0x68>
   27684:	9b03      	ldr	r3, [sp, #12]
   27686:	464e      	mov	r6, r9
   27688:	4699      	mov	r9, r3
   2768a:	465b      	mov	r3, fp
   2768c:	681b      	ldr	r3, [r3, #0]
   2768e:	4654      	mov	r4, sl
   27690:	2b00      	cmp	r3, #0
   27692:	d10e      	bne.n	276b2 <quorem+0xd6>
   27694:	465b      	mov	r3, fp
   27696:	9a01      	ldr	r2, [sp, #4]
   27698:	3b04      	subs	r3, #4
   2769a:	429a      	cmp	r2, r3
   2769c:	d304      	bcc.n	276a8 <quorem+0xcc>
   2769e:	e006      	b.n	276ae <quorem+0xd2>
   276a0:	3b04      	subs	r3, #4
   276a2:	3c01      	subs	r4, #1
   276a4:	429a      	cmp	r2, r3
   276a6:	d202      	bcs.n	276ae <quorem+0xd2>
   276a8:	6819      	ldr	r1, [r3, #0]
   276aa:	2900      	cmp	r1, #0
   276ac:	d0f8      	beq.n	276a0 <quorem+0xc4>
   276ae:	4643      	mov	r3, r8
   276b0:	611c      	str	r4, [r3, #16]
   276b2:	9902      	ldr	r1, [sp, #8]
   276b4:	4640      	mov	r0, r8
   276b6:	f002 fa7b 	bl	29bb0 <__mcmp>
   276ba:	2800      	cmp	r0, #0
   276bc:	db2f      	blt.n	2771e <quorem+0x142>
   276be:	464f      	mov	r7, r9
   276c0:	2000      	movs	r0, #0
   276c2:	9b00      	ldr	r3, [sp, #0]
   276c4:	9d01      	ldr	r5, [sp, #4]
   276c6:	3301      	adds	r3, #1
   276c8:	9300      	str	r3, [sp, #0]
   276ca:	682b      	ldr	r3, [r5, #0]
   276cc:	cf02      	ldmia	r7!, {r1}
   276ce:	041a      	lsls	r2, r3, #16
   276d0:	0c12      	lsrs	r2, r2, #16
   276d2:	1810      	adds	r0, r2, r0
   276d4:	040a      	lsls	r2, r1, #16
   276d6:	0c12      	lsrs	r2, r2, #16
   276d8:	1a82      	subs	r2, r0, r2
   276da:	0c09      	lsrs	r1, r1, #16
   276dc:	0c1b      	lsrs	r3, r3, #16
   276de:	1a5b      	subs	r3, r3, r1
   276e0:	1411      	asrs	r1, r2, #16
   276e2:	185b      	adds	r3, r3, r1
   276e4:	0412      	lsls	r2, r2, #16
   276e6:	1418      	asrs	r0, r3, #16
   276e8:	0c12      	lsrs	r2, r2, #16
   276ea:	041b      	lsls	r3, r3, #16
   276ec:	4313      	orrs	r3, r2
   276ee:	c508      	stmia	r5!, {r3}
   276f0:	42be      	cmp	r6, r7
   276f2:	d2ea      	bcs.n	276ca <quorem+0xee>
   276f4:	9901      	ldr	r1, [sp, #4]
   276f6:	00a3      	lsls	r3, r4, #2
   276f8:	468c      	mov	ip, r1
   276fa:	4463      	add	r3, ip
   276fc:	681a      	ldr	r2, [r3, #0]
   276fe:	2a00      	cmp	r2, #0
   27700:	d10d      	bne.n	2771e <quorem+0x142>
   27702:	3b04      	subs	r3, #4
   27704:	000a      	movs	r2, r1
   27706:	4299      	cmp	r1, r3
   27708:	d304      	bcc.n	27714 <quorem+0x138>
   2770a:	e006      	b.n	2771a <quorem+0x13e>
   2770c:	3b04      	subs	r3, #4
   2770e:	3c01      	subs	r4, #1
   27710:	429a      	cmp	r2, r3
   27712:	d202      	bcs.n	2771a <quorem+0x13e>
   27714:	6819      	ldr	r1, [r3, #0]
   27716:	2900      	cmp	r1, #0
   27718:	d0f8      	beq.n	2770c <quorem+0x130>
   2771a:	4643      	mov	r3, r8
   2771c:	611c      	str	r4, [r3, #16]
   2771e:	9800      	ldr	r0, [sp, #0]
   27720:	b005      	add	sp, #20
   27722:	bc3c      	pop	{r2, r3, r4, r5}
   27724:	4690      	mov	r8, r2
   27726:	4699      	mov	r9, r3
   27728:	46a2      	mov	sl, r4
   2772a:	46ab      	mov	fp, r5
   2772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2772e:	46c0      	nop			; (mov r8, r8)

00027730 <_dtoa_r>:
   27730:	b5f0      	push	{r4, r5, r6, r7, lr}
   27732:	4657      	mov	r7, sl
   27734:	464e      	mov	r6, r9
   27736:	4645      	mov	r5, r8
   27738:	46de      	mov	lr, fp
   2773a:	b5e0      	push	{r5, r6, r7, lr}
   2773c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2773e:	b099      	sub	sp, #100	; 0x64
   27740:	4682      	mov	sl, r0
   27742:	001d      	movs	r5, r3
   27744:	0016      	movs	r6, r2
   27746:	001f      	movs	r7, r3
   27748:	2900      	cmp	r1, #0
   2774a:	d009      	beq.n	27760 <_dtoa_r+0x30>
   2774c:	2301      	movs	r3, #1
   2774e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   27750:	4093      	lsls	r3, r2
   27752:	604a      	str	r2, [r1, #4]
   27754:	608b      	str	r3, [r1, #8]
   27756:	f002 f81f 	bl	29798 <_Bfree>
   2775a:	2300      	movs	r3, #0
   2775c:	4652      	mov	r2, sl
   2775e:	6413      	str	r3, [r2, #64]	; 0x40
   27760:	46b8      	mov	r8, r7
   27762:	2f00      	cmp	r7, #0
   27764:	db37      	blt.n	277d6 <_dtoa_r+0xa6>
   27766:	2300      	movs	r3, #0
   27768:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2776a:	6013      	str	r3, [r2, #0]
   2776c:	4642      	mov	r2, r8
   2776e:	4bd6      	ldr	r3, [pc, #856]	; (27ac8 <_dtoa_r+0x398>)
   27770:	401a      	ands	r2, r3
   27772:	429a      	cmp	r2, r3
   27774:	d018      	beq.n	277a8 <_dtoa_r+0x78>
   27776:	2200      	movs	r2, #0
   27778:	2300      	movs	r3, #0
   2777a:	0030      	movs	r0, r6
   2777c:	0039      	movs	r1, r7
   2777e:	f7f9 fdf9 	bl	21374 <__aeabi_dcmpeq>
   27782:	2800      	cmp	r0, #0
   27784:	d02f      	beq.n	277e6 <_dtoa_r+0xb6>
   27786:	2301      	movs	r3, #1
   27788:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2778a:	6013      	str	r3, [r2, #0]
   2778c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2778e:	2b00      	cmp	r3, #0
   27790:	d100      	bne.n	27794 <_dtoa_r+0x64>
   27792:	e22a      	b.n	27bea <_dtoa_r+0x4ba>
   27794:	48cd      	ldr	r0, [pc, #820]	; (27acc <_dtoa_r+0x39c>)
   27796:	6018      	str	r0, [r3, #0]
   27798:	3801      	subs	r0, #1
   2779a:	b019      	add	sp, #100	; 0x64
   2779c:	bc3c      	pop	{r2, r3, r4, r5}
   2779e:	4690      	mov	r8, r2
   277a0:	4699      	mov	r9, r3
   277a2:	46a2      	mov	sl, r4
   277a4:	46ab      	mov	fp, r5
   277a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   277a8:	4bc9      	ldr	r3, [pc, #804]	; (27ad0 <_dtoa_r+0x3a0>)
   277aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   277ac:	6013      	str	r3, [r2, #0]
   277ae:	2e00      	cmp	r6, #0
   277b0:	d10b      	bne.n	277ca <_dtoa_r+0x9a>
   277b2:	4643      	mov	r3, r8
   277b4:	0318      	lsls	r0, r3, #12
   277b6:	d108      	bne.n	277ca <_dtoa_r+0x9a>
   277b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   277ba:	48c6      	ldr	r0, [pc, #792]	; (27ad4 <_dtoa_r+0x3a4>)
   277bc:	2b00      	cmp	r3, #0
   277be:	d0ec      	beq.n	2779a <_dtoa_r+0x6a>
   277c0:	0003      	movs	r3, r0
   277c2:	3308      	adds	r3, #8
   277c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   277c6:	6013      	str	r3, [r2, #0]
   277c8:	e7e7      	b.n	2779a <_dtoa_r+0x6a>
   277ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   277cc:	48c2      	ldr	r0, [pc, #776]	; (27ad8 <_dtoa_r+0x3a8>)
   277ce:	2b00      	cmp	r3, #0
   277d0:	d0e3      	beq.n	2779a <_dtoa_r+0x6a>
   277d2:	1cc3      	adds	r3, r0, #3
   277d4:	e7f6      	b.n	277c4 <_dtoa_r+0x94>
   277d6:	2301      	movs	r3, #1
   277d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   277da:	0068      	lsls	r0, r5, #1
   277dc:	6013      	str	r3, [r2, #0]
   277de:	0843      	lsrs	r3, r0, #1
   277e0:	4698      	mov	r8, r3
   277e2:	001f      	movs	r7, r3
   277e4:	e7c2      	b.n	2776c <_dtoa_r+0x3c>
   277e6:	ab16      	add	r3, sp, #88	; 0x58
   277e8:	9301      	str	r3, [sp, #4]
   277ea:	ab17      	add	r3, sp, #92	; 0x5c
   277ec:	9300      	str	r3, [sp, #0]
   277ee:	0032      	movs	r2, r6
   277f0:	003b      	movs	r3, r7
   277f2:	4650      	mov	r0, sl
   277f4:	f002 fa92 	bl	29d1c <__d2b>
   277f8:	4643      	mov	r3, r8
   277fa:	4683      	mov	fp, r0
   277fc:	0d1a      	lsrs	r2, r3, #20
   277fe:	d100      	bne.n	27802 <_dtoa_r+0xd2>
   27800:	e1d6      	b.n	27bb0 <_dtoa_r+0x480>
   27802:	033b      	lsls	r3, r7, #12
   27804:	4cb5      	ldr	r4, [pc, #724]	; (27adc <_dtoa_r+0x3ac>)
   27806:	0b1b      	lsrs	r3, r3, #12
   27808:	431c      	orrs	r4, r3
   2780a:	4bb5      	ldr	r3, [pc, #724]	; (27ae0 <_dtoa_r+0x3b0>)
   2780c:	0030      	movs	r0, r6
   2780e:	4698      	mov	r8, r3
   27810:	9b16      	ldr	r3, [sp, #88]	; 0x58
   27812:	0021      	movs	r1, r4
   27814:	4699      	mov	r9, r3
   27816:	2300      	movs	r3, #0
   27818:	4490      	add	r8, r2
   2781a:	930f      	str	r3, [sp, #60]	; 0x3c
   2781c:	2200      	movs	r2, #0
   2781e:	4bb1      	ldr	r3, [pc, #708]	; (27ae4 <_dtoa_r+0x3b4>)
   27820:	f7fc f828 	bl	23874 <__aeabi_dsub>
   27824:	4ab0      	ldr	r2, [pc, #704]	; (27ae8 <_dtoa_r+0x3b8>)
   27826:	4bb1      	ldr	r3, [pc, #708]	; (27aec <_dtoa_r+0x3bc>)
   27828:	f7fb fda4 	bl	23374 <__aeabi_dmul>
   2782c:	4ab0      	ldr	r2, [pc, #704]	; (27af0 <_dtoa_r+0x3c0>)
   2782e:	4bb1      	ldr	r3, [pc, #708]	; (27af4 <_dtoa_r+0x3c4>)
   27830:	f7fa fe5c 	bl	224ec <__aeabi_dadd>
   27834:	0004      	movs	r4, r0
   27836:	4640      	mov	r0, r8
   27838:	000d      	movs	r5, r1
   2783a:	f7fc fb65 	bl	23f08 <__aeabi_i2d>
   2783e:	4aae      	ldr	r2, [pc, #696]	; (27af8 <_dtoa_r+0x3c8>)
   27840:	4bae      	ldr	r3, [pc, #696]	; (27afc <_dtoa_r+0x3cc>)
   27842:	f7fb fd97 	bl	23374 <__aeabi_dmul>
   27846:	0002      	movs	r2, r0
   27848:	000b      	movs	r3, r1
   2784a:	0020      	movs	r0, r4
   2784c:	0029      	movs	r1, r5
   2784e:	f7fa fe4d 	bl	224ec <__aeabi_dadd>
   27852:	0004      	movs	r4, r0
   27854:	000d      	movs	r5, r1
   27856:	f7fc fb23 	bl	23ea0 <__aeabi_d2iz>
   2785a:	2200      	movs	r2, #0
   2785c:	9003      	str	r0, [sp, #12]
   2785e:	2300      	movs	r3, #0
   27860:	0020      	movs	r0, r4
   27862:	0029      	movs	r1, r5
   27864:	f7f9 fd8c 	bl	21380 <__aeabi_dcmplt>
   27868:	2800      	cmp	r0, #0
   2786a:	d000      	beq.n	2786e <_dtoa_r+0x13e>
   2786c:	e2b1      	b.n	27dd2 <_dtoa_r+0x6a2>
   2786e:	2301      	movs	r3, #1
   27870:	9c03      	ldr	r4, [sp, #12]
   27872:	930c      	str	r3, [sp, #48]	; 0x30
   27874:	2c16      	cmp	r4, #22
   27876:	d810      	bhi.n	2789a <_dtoa_r+0x16a>
   27878:	49a1      	ldr	r1, [pc, #644]	; (27b00 <_dtoa_r+0x3d0>)
   2787a:	00e3      	lsls	r3, r4, #3
   2787c:	18c9      	adds	r1, r1, r3
   2787e:	0032      	movs	r2, r6
   27880:	6808      	ldr	r0, [r1, #0]
   27882:	6849      	ldr	r1, [r1, #4]
   27884:	003b      	movs	r3, r7
   27886:	f7f9 fd8f 	bl	213a8 <__aeabi_dcmpgt>
   2788a:	2800      	cmp	r0, #0
   2788c:	d100      	bne.n	27890 <_dtoa_r+0x160>
   2788e:	e31d      	b.n	27ecc <_dtoa_r+0x79c>
   27890:	0023      	movs	r3, r4
   27892:	3b01      	subs	r3, #1
   27894:	9303      	str	r3, [sp, #12]
   27896:	2300      	movs	r3, #0
   27898:	930c      	str	r3, [sp, #48]	; 0x30
   2789a:	464b      	mov	r3, r9
   2789c:	4642      	mov	r2, r8
   2789e:	1a9a      	subs	r2, r3, r2
   278a0:	2300      	movs	r3, #0
   278a2:	9306      	str	r3, [sp, #24]
   278a4:	0013      	movs	r3, r2
   278a6:	3b01      	subs	r3, #1
   278a8:	9304      	str	r3, [sp, #16]
   278aa:	d500      	bpl.n	278ae <_dtoa_r+0x17e>
   278ac:	e2a1      	b.n	27df2 <_dtoa_r+0x6c2>
   278ae:	9b03      	ldr	r3, [sp, #12]
   278b0:	2b00      	cmp	r3, #0
   278b2:	da00      	bge.n	278b6 <_dtoa_r+0x186>
   278b4:	e284      	b.n	27dc0 <_dtoa_r+0x690>
   278b6:	469c      	mov	ip, r3
   278b8:	930d      	str	r3, [sp, #52]	; 0x34
   278ba:	2300      	movs	r3, #0
   278bc:	9a04      	ldr	r2, [sp, #16]
   278be:	4699      	mov	r9, r3
   278c0:	0011      	movs	r1, r2
   278c2:	4461      	add	r1, ip
   278c4:	9104      	str	r1, [sp, #16]
   278c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   278c8:	2b09      	cmp	r3, #9
   278ca:	d900      	bls.n	278ce <_dtoa_r+0x19e>
   278cc:	e18f      	b.n	27bee <_dtoa_r+0x4be>
   278ce:	2401      	movs	r4, #1
   278d0:	2b05      	cmp	r3, #5
   278d2:	dd02      	ble.n	278da <_dtoa_r+0x1aa>
   278d4:	2400      	movs	r4, #0
   278d6:	3b04      	subs	r3, #4
   278d8:	9322      	str	r3, [sp, #136]	; 0x88
   278da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   278dc:	2b03      	cmp	r3, #3
   278de:	d101      	bne.n	278e4 <_dtoa_r+0x1b4>
   278e0:	f000 fcce 	bl	28280 <_dtoa_r+0xb50>
   278e4:	dc01      	bgt.n	278ea <_dtoa_r+0x1ba>
   278e6:	f000 fc92 	bl	2820e <_dtoa_r+0xade>
   278ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   278ec:	2b04      	cmp	r3, #4
   278ee:	d101      	bne.n	278f4 <_dtoa_r+0x1c4>
   278f0:	f000 fc40 	bl	28174 <_dtoa_r+0xa44>
   278f4:	2301      	movs	r3, #1
   278f6:	930b      	str	r3, [sp, #44]	; 0x2c
   278f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   278fa:	2b05      	cmp	r3, #5
   278fc:	d001      	beq.n	27902 <_dtoa_r+0x1d2>
   278fe:	f000 fc8b 	bl	28218 <_dtoa_r+0xae8>
   27902:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   27904:	9b03      	ldr	r3, [sp, #12]
   27906:	4694      	mov	ip, r2
   27908:	4463      	add	r3, ip
   2790a:	930e      	str	r3, [sp, #56]	; 0x38
   2790c:	3301      	adds	r3, #1
   2790e:	9307      	str	r3, [sp, #28]
   27910:	1e1d      	subs	r5, r3, #0
   27912:	dc01      	bgt.n	27918 <_dtoa_r+0x1e8>
   27914:	f000 fd49 	bl	283aa <_dtoa_r+0xc7a>
   27918:	9b07      	ldr	r3, [sp, #28]
   2791a:	4698      	mov	r8, r3
   2791c:	2300      	movs	r3, #0
   2791e:	4652      	mov	r2, sl
   27920:	2100      	movs	r1, #0
   27922:	6453      	str	r3, [r2, #68]	; 0x44
   27924:	2d17      	cmp	r5, #23
   27926:	d90a      	bls.n	2793e <_dtoa_r+0x20e>
   27928:	2201      	movs	r2, #1
   2792a:	3304      	adds	r3, #4
   2792c:	005b      	lsls	r3, r3, #1
   2792e:	0018      	movs	r0, r3
   27930:	3014      	adds	r0, #20
   27932:	0011      	movs	r1, r2
   27934:	3201      	adds	r2, #1
   27936:	4285      	cmp	r5, r0
   27938:	d2f8      	bcs.n	2792c <_dtoa_r+0x1fc>
   2793a:	4653      	mov	r3, sl
   2793c:	6459      	str	r1, [r3, #68]	; 0x44
   2793e:	4650      	mov	r0, sl
   27940:	f001 ff02 	bl	29748 <_Balloc>
   27944:	4653      	mov	r3, sl
   27946:	6418      	str	r0, [r3, #64]	; 0x40
   27948:	4643      	mov	r3, r8
   2794a:	900a      	str	r0, [sp, #40]	; 0x28
   2794c:	2b0e      	cmp	r3, #14
   2794e:	d900      	bls.n	27952 <_dtoa_r+0x222>
   27950:	e161      	b.n	27c16 <_dtoa_r+0x4e6>
   27952:	2c00      	cmp	r4, #0
   27954:	d100      	bne.n	27958 <_dtoa_r+0x228>
   27956:	e15e      	b.n	27c16 <_dtoa_r+0x4e6>
   27958:	9610      	str	r6, [sp, #64]	; 0x40
   2795a:	9711      	str	r7, [sp, #68]	; 0x44
   2795c:	9e03      	ldr	r6, [sp, #12]
   2795e:	2e00      	cmp	r6, #0
   27960:	dc01      	bgt.n	27966 <_dtoa_r+0x236>
   27962:	f000 fd25 	bl	283b0 <_dtoa_r+0xc80>
   27966:	0032      	movs	r2, r6
   27968:	210f      	movs	r1, #15
   2796a:	4b65      	ldr	r3, [pc, #404]	; (27b00 <_dtoa_r+0x3d0>)
   2796c:	400a      	ands	r2, r1
   2796e:	00d2      	lsls	r2, r2, #3
   27970:	189b      	adds	r3, r3, r2
   27972:	1136      	asrs	r6, r6, #4
   27974:	681c      	ldr	r4, [r3, #0]
   27976:	685d      	ldr	r5, [r3, #4]
   27978:	06f3      	lsls	r3, r6, #27
   2797a:	d401      	bmi.n	27980 <_dtoa_r+0x250>
   2797c:	f000 fcca 	bl	28314 <_dtoa_r+0xbe4>
   27980:	4b60      	ldr	r3, [pc, #384]	; (27b04 <_dtoa_r+0x3d4>)
   27982:	400e      	ands	r6, r1
   27984:	6a1a      	ldr	r2, [r3, #32]
   27986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27988:	9810      	ldr	r0, [sp, #64]	; 0x40
   2798a:	9911      	ldr	r1, [sp, #68]	; 0x44
   2798c:	f7fb f8be 	bl	22b0c <__aeabi_ddiv>
   27990:	2303      	movs	r3, #3
   27992:	4698      	mov	r8, r3
   27994:	9008      	str	r0, [sp, #32]
   27996:	9109      	str	r1, [sp, #36]	; 0x24
   27998:	2e00      	cmp	r6, #0
   2799a:	d011      	beq.n	279c0 <_dtoa_r+0x290>
   2799c:	4f59      	ldr	r7, [pc, #356]	; (27b04 <_dtoa_r+0x3d4>)
   2799e:	2301      	movs	r3, #1
   279a0:	4233      	tst	r3, r6
   279a2:	d009      	beq.n	279b8 <_dtoa_r+0x288>
   279a4:	469c      	mov	ip, r3
   279a6:	683a      	ldr	r2, [r7, #0]
   279a8:	687b      	ldr	r3, [r7, #4]
   279aa:	0020      	movs	r0, r4
   279ac:	0029      	movs	r1, r5
   279ae:	44e0      	add	r8, ip
   279b0:	f7fb fce0 	bl	23374 <__aeabi_dmul>
   279b4:	0004      	movs	r4, r0
   279b6:	000d      	movs	r5, r1
   279b8:	1076      	asrs	r6, r6, #1
   279ba:	3708      	adds	r7, #8
   279bc:	2e00      	cmp	r6, #0
   279be:	d1ee      	bne.n	2799e <_dtoa_r+0x26e>
   279c0:	0022      	movs	r2, r4
   279c2:	9808      	ldr	r0, [sp, #32]
   279c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   279c6:	002b      	movs	r3, r5
   279c8:	f7fb f8a0 	bl	22b0c <__aeabi_ddiv>
   279cc:	0006      	movs	r6, r0
   279ce:	000f      	movs	r7, r1
   279d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   279d2:	2b00      	cmp	r3, #0
   279d4:	d009      	beq.n	279ea <_dtoa_r+0x2ba>
   279d6:	2200      	movs	r2, #0
   279d8:	4b40      	ldr	r3, [pc, #256]	; (27adc <_dtoa_r+0x3ac>)
   279da:	0030      	movs	r0, r6
   279dc:	0039      	movs	r1, r7
   279de:	f7f9 fccf 	bl	21380 <__aeabi_dcmplt>
   279e2:	2800      	cmp	r0, #0
   279e4:	d001      	beq.n	279ea <_dtoa_r+0x2ba>
   279e6:	f000 fdc2 	bl	2856e <_dtoa_r+0xe3e>
   279ea:	4640      	mov	r0, r8
   279ec:	f7fc fa8c 	bl	23f08 <__aeabi_i2d>
   279f0:	0032      	movs	r2, r6
   279f2:	003b      	movs	r3, r7
   279f4:	f7fb fcbe 	bl	23374 <__aeabi_dmul>
   279f8:	2200      	movs	r2, #0
   279fa:	4b43      	ldr	r3, [pc, #268]	; (27b08 <_dtoa_r+0x3d8>)
   279fc:	f7fa fd76 	bl	224ec <__aeabi_dadd>
   27a00:	4a42      	ldr	r2, [pc, #264]	; (27b0c <_dtoa_r+0x3dc>)
   27a02:	000b      	movs	r3, r1
   27a04:	4694      	mov	ip, r2
   27a06:	4463      	add	r3, ip
   27a08:	9008      	str	r0, [sp, #32]
   27a0a:	9109      	str	r1, [sp, #36]	; 0x24
   27a0c:	9309      	str	r3, [sp, #36]	; 0x24
   27a0e:	9b07      	ldr	r3, [sp, #28]
   27a10:	2b00      	cmp	r3, #0
   27a12:	d101      	bne.n	27a18 <_dtoa_r+0x2e8>
   27a14:	f000 fc50 	bl	282b8 <_dtoa_r+0xb88>
   27a18:	9b03      	ldr	r3, [sp, #12]
   27a1a:	9313      	str	r3, [sp, #76]	; 0x4c
   27a1c:	9b07      	ldr	r3, [sp, #28]
   27a1e:	9312      	str	r3, [sp, #72]	; 0x48
   27a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27a22:	2b00      	cmp	r3, #0
   27a24:	d101      	bne.n	27a2a <_dtoa_r+0x2fa>
   27a26:	f000 fd1d 	bl	28464 <_dtoa_r+0xd34>
   27a2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27a2c:	2000      	movs	r0, #0
   27a2e:	1e5a      	subs	r2, r3, #1
   27a30:	4b33      	ldr	r3, [pc, #204]	; (27b00 <_dtoa_r+0x3d0>)
   27a32:	00d2      	lsls	r2, r2, #3
   27a34:	189b      	adds	r3, r3, r2
   27a36:	681a      	ldr	r2, [r3, #0]
   27a38:	685b      	ldr	r3, [r3, #4]
   27a3a:	4935      	ldr	r1, [pc, #212]	; (27b10 <_dtoa_r+0x3e0>)
   27a3c:	f7fb f866 	bl	22b0c <__aeabi_ddiv>
   27a40:	9a08      	ldr	r2, [sp, #32]
   27a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27a44:	f7fb ff16 	bl	23874 <__aeabi_dsub>
   27a48:	9008      	str	r0, [sp, #32]
   27a4a:	9109      	str	r1, [sp, #36]	; 0x24
   27a4c:	0039      	movs	r1, r7
   27a4e:	0030      	movs	r0, r6
   27a50:	f7fc fa26 	bl	23ea0 <__aeabi_d2iz>
   27a54:	0004      	movs	r4, r0
   27a56:	f7fc fa57 	bl	23f08 <__aeabi_i2d>
   27a5a:	0002      	movs	r2, r0
   27a5c:	000b      	movs	r3, r1
   27a5e:	0030      	movs	r0, r6
   27a60:	0039      	movs	r1, r7
   27a62:	f7fb ff07 	bl	23874 <__aeabi_dsub>
   27a66:	0005      	movs	r5, r0
   27a68:	000e      	movs	r6, r1
   27a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27a6c:	3430      	adds	r4, #48	; 0x30
   27a6e:	1c51      	adds	r1, r2, #1
   27a70:	b2e7      	uxtb	r7, r4
   27a72:	9114      	str	r1, [sp, #80]	; 0x50
   27a74:	7017      	strb	r7, [r2, #0]
   27a76:	0033      	movs	r3, r6
   27a78:	9808      	ldr	r0, [sp, #32]
   27a7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   27a7c:	002a      	movs	r2, r5
   27a7e:	f7f9 fc93 	bl	213a8 <__aeabi_dcmpgt>
   27a82:	2800      	cmp	r0, #0
   27a84:	d001      	beq.n	27a8a <_dtoa_r+0x35a>
   27a86:	f000 fdfe 	bl	28686 <_dtoa_r+0xf56>
   27a8a:	002a      	movs	r2, r5
   27a8c:	0033      	movs	r3, r6
   27a8e:	2000      	movs	r0, #0
   27a90:	4912      	ldr	r1, [pc, #72]	; (27adc <_dtoa_r+0x3ac>)
   27a92:	f7fb feef 	bl	23874 <__aeabi_dsub>
   27a96:	0002      	movs	r2, r0
   27a98:	000b      	movs	r3, r1
   27a9a:	9808      	ldr	r0, [sp, #32]
   27a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
   27a9e:	f7f9 fc83 	bl	213a8 <__aeabi_dcmpgt>
   27aa2:	2800      	cmp	r0, #0
   27aa4:	d001      	beq.n	27aaa <_dtoa_r+0x37a>
   27aa6:	f000 fde7 	bl	28678 <_dtoa_r+0xf48>
   27aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27aac:	2b01      	cmp	r3, #1
   27aae:	d101      	bne.n	27ab4 <_dtoa_r+0x384>
   27ab0:	f000 fc78 	bl	283a4 <_dtoa_r+0xc74>
   27ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27ab8:	4694      	mov	ip, r2
   27aba:	4463      	add	r3, ip
   27abc:	4698      	mov	r8, r3
   27abe:	464b      	mov	r3, r9
   27ac0:	9312      	str	r3, [sp, #72]	; 0x48
   27ac2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27ac4:	4699      	mov	r9, r3
   27ac6:	e038      	b.n	27b3a <_dtoa_r+0x40a>
   27ac8:	7ff00000 	.word	0x7ff00000
   27acc:	0002d10d 	.word	0x0002d10d
   27ad0:	0000270f 	.word	0x0000270f
   27ad4:	0002d2b4 	.word	0x0002d2b4
   27ad8:	0002d2c0 	.word	0x0002d2c0
   27adc:	3ff00000 	.word	0x3ff00000
   27ae0:	fffffc01 	.word	0xfffffc01
   27ae4:	3ff80000 	.word	0x3ff80000
   27ae8:	636f4361 	.word	0x636f4361
   27aec:	3fd287a7 	.word	0x3fd287a7
   27af0:	8b60c8b3 	.word	0x8b60c8b3
   27af4:	3fc68a28 	.word	0x3fc68a28
   27af8:	509f79fb 	.word	0x509f79fb
   27afc:	3fd34413 	.word	0x3fd34413
   27b00:	0002d300 	.word	0x0002d300
   27b04:	0002d2d8 	.word	0x0002d2d8
   27b08:	401c0000 	.word	0x401c0000
   27b0c:	fcc00000 	.word	0xfcc00000
   27b10:	3fe00000 	.word	0x3fe00000
   27b14:	002a      	movs	r2, r5
   27b16:	0033      	movs	r3, r6
   27b18:	2000      	movs	r0, #0
   27b1a:	49b9      	ldr	r1, [pc, #740]	; (27e00 <_dtoa_r+0x6d0>)
   27b1c:	f7fb feaa 	bl	23874 <__aeabi_dsub>
   27b20:	9a08      	ldr	r2, [sp, #32]
   27b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27b24:	f7f9 fc2c 	bl	21380 <__aeabi_dcmplt>
   27b28:	2800      	cmp	r0, #0
   27b2a:	d001      	beq.n	27b30 <_dtoa_r+0x400>
   27b2c:	f000 fd74 	bl	28618 <_dtoa_r+0xee8>
   27b30:	46a1      	mov	r9, r4
   27b32:	4544      	cmp	r4, r8
   27b34:	d101      	bne.n	27b3a <_dtoa_r+0x40a>
   27b36:	f000 fc33 	bl	283a0 <_dtoa_r+0xc70>
   27b3a:	9808      	ldr	r0, [sp, #32]
   27b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   27b3e:	2200      	movs	r2, #0
   27b40:	4bb0      	ldr	r3, [pc, #704]	; (27e04 <_dtoa_r+0x6d4>)
   27b42:	f7fb fc17 	bl	23374 <__aeabi_dmul>
   27b46:	2200      	movs	r2, #0
   27b48:	4bae      	ldr	r3, [pc, #696]	; (27e04 <_dtoa_r+0x6d4>)
   27b4a:	9008      	str	r0, [sp, #32]
   27b4c:	9109      	str	r1, [sp, #36]	; 0x24
   27b4e:	0028      	movs	r0, r5
   27b50:	0031      	movs	r1, r6
   27b52:	f7fb fc0f 	bl	23374 <__aeabi_dmul>
   27b56:	000d      	movs	r5, r1
   27b58:	0004      	movs	r4, r0
   27b5a:	f7fc f9a1 	bl	23ea0 <__aeabi_d2iz>
   27b5e:	0007      	movs	r7, r0
   27b60:	f7fc f9d2 	bl	23f08 <__aeabi_i2d>
   27b64:	0002      	movs	r2, r0
   27b66:	000b      	movs	r3, r1
   27b68:	0020      	movs	r0, r4
   27b6a:	0029      	movs	r1, r5
   27b6c:	f7fb fe82 	bl	23874 <__aeabi_dsub>
   27b70:	464b      	mov	r3, r9
   27b72:	3730      	adds	r7, #48	; 0x30
   27b74:	b2ff      	uxtb	r7, r7
   27b76:	1c5c      	adds	r4, r3, #1
   27b78:	701f      	strb	r7, [r3, #0]
   27b7a:	9a08      	ldr	r2, [sp, #32]
   27b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27b7e:	0005      	movs	r5, r0
   27b80:	000e      	movs	r6, r1
   27b82:	f7f9 fbfd 	bl	21380 <__aeabi_dcmplt>
   27b86:	2800      	cmp	r0, #0
   27b88:	d0c4      	beq.n	27b14 <_dtoa_r+0x3e4>
   27b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   27b8c:	9303      	str	r3, [sp, #12]
   27b8e:	4659      	mov	r1, fp
   27b90:	4650      	mov	r0, sl
   27b92:	f001 fe01 	bl	29798 <_Bfree>
   27b96:	2300      	movs	r3, #0
   27b98:	7023      	strb	r3, [r4, #0]
   27b9a:	9b03      	ldr	r3, [sp, #12]
   27b9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   27b9e:	3301      	adds	r3, #1
   27ba0:	6013      	str	r3, [r2, #0]
   27ba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   27ba4:	2b00      	cmp	r3, #0
   27ba6:	d100      	bne.n	27baa <_dtoa_r+0x47a>
   27ba8:	e3a8      	b.n	282fc <_dtoa_r+0xbcc>
   27baa:	601c      	str	r4, [r3, #0]
   27bac:	980a      	ldr	r0, [sp, #40]	; 0x28
   27bae:	e5f4      	b.n	2779a <_dtoa_r+0x6a>
   27bb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   27bb2:	4699      	mov	r9, r3
   27bb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   27bb6:	444b      	add	r3, r9
   27bb8:	001c      	movs	r4, r3
   27bba:	4b93      	ldr	r3, [pc, #588]	; (27e08 <_dtoa_r+0x6d8>)
   27bbc:	18e3      	adds	r3, r4, r3
   27bbe:	2b20      	cmp	r3, #32
   27bc0:	dc00      	bgt.n	27bc4 <_dtoa_r+0x494>
   27bc2:	e17e      	b.n	27ec2 <_dtoa_r+0x792>
   27bc4:	0031      	movs	r1, r6
   27bc6:	4a91      	ldr	r2, [pc, #580]	; (27e0c <_dtoa_r+0x6dc>)
   27bc8:	4640      	mov	r0, r8
   27bca:	18a2      	adds	r2, r4, r2
   27bcc:	40d1      	lsrs	r1, r2
   27bce:	000a      	movs	r2, r1
   27bd0:	2140      	movs	r1, #64	; 0x40
   27bd2:	1acb      	subs	r3, r1, r3
   27bd4:	4098      	lsls	r0, r3
   27bd6:	4310      	orrs	r0, r2
   27bd8:	f7fc f9d8 	bl	23f8c <__aeabi_ui2d>
   27bdc:	1e63      	subs	r3, r4, #1
   27bde:	4698      	mov	r8, r3
   27be0:	2301      	movs	r3, #1
   27be2:	4d8b      	ldr	r5, [pc, #556]	; (27e10 <_dtoa_r+0x6e0>)
   27be4:	930f      	str	r3, [sp, #60]	; 0x3c
   27be6:	1949      	adds	r1, r1, r5
   27be8:	e618      	b.n	2781c <_dtoa_r+0xec>
   27bea:	488a      	ldr	r0, [pc, #552]	; (27e14 <_dtoa_r+0x6e4>)
   27bec:	e5d5      	b.n	2779a <_dtoa_r+0x6a>
   27bee:	2300      	movs	r3, #0
   27bf0:	4652      	mov	r2, sl
   27bf2:	2100      	movs	r1, #0
   27bf4:	6453      	str	r3, [r2, #68]	; 0x44
   27bf6:	4650      	mov	r0, sl
   27bf8:	f001 fda6 	bl	29748 <_Balloc>
   27bfc:	4653      	mov	r3, sl
   27bfe:	6418      	str	r0, [r3, #64]	; 0x40
   27c00:	2301      	movs	r3, #1
   27c02:	425b      	negs	r3, r3
   27c04:	9307      	str	r3, [sp, #28]
   27c06:	930e      	str	r3, [sp, #56]	; 0x38
   27c08:	3302      	adds	r3, #2
   27c0a:	2200      	movs	r2, #0
   27c0c:	930b      	str	r3, [sp, #44]	; 0x2c
   27c0e:	2300      	movs	r3, #0
   27c10:	900a      	str	r0, [sp, #40]	; 0x28
   27c12:	9223      	str	r2, [sp, #140]	; 0x8c
   27c14:	9322      	str	r3, [sp, #136]	; 0x88
   27c16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   27c18:	2b00      	cmp	r3, #0
   27c1a:	da00      	bge.n	27c1e <_dtoa_r+0x4ee>
   27c1c:	e0ab      	b.n	27d76 <_dtoa_r+0x646>
   27c1e:	9a03      	ldr	r2, [sp, #12]
   27c20:	2a0e      	cmp	r2, #14
   27c22:	dd00      	ble.n	27c26 <_dtoa_r+0x4f6>
   27c24:	e0a7      	b.n	27d76 <_dtoa_r+0x646>
   27c26:	4b7c      	ldr	r3, [pc, #496]	; (27e18 <_dtoa_r+0x6e8>)
   27c28:	00d2      	lsls	r2, r2, #3
   27c2a:	189b      	adds	r3, r3, r2
   27c2c:	685c      	ldr	r4, [r3, #4]
   27c2e:	681b      	ldr	r3, [r3, #0]
   27c30:	9304      	str	r3, [sp, #16]
   27c32:	9405      	str	r4, [sp, #20]
   27c34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   27c36:	2b00      	cmp	r3, #0
   27c38:	da00      	bge.n	27c3c <_dtoa_r+0x50c>
   27c3a:	e2a7      	b.n	2818c <_dtoa_r+0xa5c>
   27c3c:	9c04      	ldr	r4, [sp, #16]
   27c3e:	9d05      	ldr	r5, [sp, #20]
   27c40:	0030      	movs	r0, r6
   27c42:	0022      	movs	r2, r4
   27c44:	002b      	movs	r3, r5
   27c46:	0039      	movs	r1, r7
   27c48:	f7fa ff60 	bl	22b0c <__aeabi_ddiv>
   27c4c:	f7fc f928 	bl	23ea0 <__aeabi_d2iz>
   27c50:	4680      	mov	r8, r0
   27c52:	f7fc f959 	bl	23f08 <__aeabi_i2d>
   27c56:	0022      	movs	r2, r4
   27c58:	002b      	movs	r3, r5
   27c5a:	f7fb fb8b 	bl	23374 <__aeabi_dmul>
   27c5e:	0002      	movs	r2, r0
   27c60:	000b      	movs	r3, r1
   27c62:	0030      	movs	r0, r6
   27c64:	0039      	movs	r1, r7
   27c66:	f7fb fe05 	bl	23874 <__aeabi_dsub>
   27c6a:	4643      	mov	r3, r8
   27c6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27c6e:	3330      	adds	r3, #48	; 0x30
   27c70:	7013      	strb	r3, [r2, #0]
   27c72:	9b07      	ldr	r3, [sp, #28]
   27c74:	0006      	movs	r6, r0
   27c76:	000f      	movs	r7, r1
   27c78:	1c54      	adds	r4, r2, #1
   27c7a:	2b01      	cmp	r3, #1
   27c7c:	d04e      	beq.n	27d1c <_dtoa_r+0x5ec>
   27c7e:	2200      	movs	r2, #0
   27c80:	4b60      	ldr	r3, [pc, #384]	; (27e04 <_dtoa_r+0x6d4>)
   27c82:	f7fb fb77 	bl	23374 <__aeabi_dmul>
   27c86:	2200      	movs	r2, #0
   27c88:	2300      	movs	r3, #0
   27c8a:	0006      	movs	r6, r0
   27c8c:	000f      	movs	r7, r1
   27c8e:	f7f9 fb71 	bl	21374 <__aeabi_dcmpeq>
   27c92:	2800      	cmp	r0, #0
   27c94:	d000      	beq.n	27c98 <_dtoa_r+0x568>
   27c96:	e77a      	b.n	27b8e <_dtoa_r+0x45e>
   27c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27c9a:	9a07      	ldr	r2, [sp, #28]
   27c9c:	1c9d      	adds	r5, r3, #2
   27c9e:	469c      	mov	ip, r3
   27ca0:	465b      	mov	r3, fp
   27ca2:	9306      	str	r3, [sp, #24]
   27ca4:	4653      	mov	r3, sl
   27ca6:	4462      	add	r2, ip
   27ca8:	46aa      	mov	sl, r5
   27caa:	9c04      	ldr	r4, [sp, #16]
   27cac:	9d05      	ldr	r5, [sp, #20]
   27cae:	4691      	mov	r9, r2
   27cb0:	9307      	str	r3, [sp, #28]
   27cb2:	e00f      	b.n	27cd4 <_dtoa_r+0x5a4>
   27cb4:	2200      	movs	r2, #0
   27cb6:	4b53      	ldr	r3, [pc, #332]	; (27e04 <_dtoa_r+0x6d4>)
   27cb8:	f7fb fb5c 	bl	23374 <__aeabi_dmul>
   27cbc:	2301      	movs	r3, #1
   27cbe:	469c      	mov	ip, r3
   27cc0:	2200      	movs	r2, #0
   27cc2:	2300      	movs	r3, #0
   27cc4:	0006      	movs	r6, r0
   27cc6:	000f      	movs	r7, r1
   27cc8:	44e2      	add	sl, ip
   27cca:	f7f9 fb53 	bl	21374 <__aeabi_dcmpeq>
   27cce:	2800      	cmp	r0, #0
   27cd0:	d000      	beq.n	27cd4 <_dtoa_r+0x5a4>
   27cd2:	e2d9      	b.n	28288 <_dtoa_r+0xb58>
   27cd4:	0022      	movs	r2, r4
   27cd6:	002b      	movs	r3, r5
   27cd8:	0030      	movs	r0, r6
   27cda:	0039      	movs	r1, r7
   27cdc:	f7fa ff16 	bl	22b0c <__aeabi_ddiv>
   27ce0:	f7fc f8de 	bl	23ea0 <__aeabi_d2iz>
   27ce4:	4680      	mov	r8, r0
   27ce6:	f7fc f90f 	bl	23f08 <__aeabi_i2d>
   27cea:	0022      	movs	r2, r4
   27cec:	002b      	movs	r3, r5
   27cee:	f7fb fb41 	bl	23374 <__aeabi_dmul>
   27cf2:	0002      	movs	r2, r0
   27cf4:	000b      	movs	r3, r1
   27cf6:	0030      	movs	r0, r6
   27cf8:	0039      	movs	r1, r7
   27cfa:	f7fb fdbb 	bl	23874 <__aeabi_dsub>
   27cfe:	4653      	mov	r3, sl
   27d00:	4642      	mov	r2, r8
   27d02:	3b01      	subs	r3, #1
   27d04:	3230      	adds	r2, #48	; 0x30
   27d06:	0006      	movs	r6, r0
   27d08:	000f      	movs	r7, r1
   27d0a:	46d3      	mov	fp, sl
   27d0c:	701a      	strb	r2, [r3, #0]
   27d0e:	45d1      	cmp	r9, sl
   27d10:	d1d0      	bne.n	27cb4 <_dtoa_r+0x584>
   27d12:	9b06      	ldr	r3, [sp, #24]
   27d14:	4654      	mov	r4, sl
   27d16:	469b      	mov	fp, r3
   27d18:	9b07      	ldr	r3, [sp, #28]
   27d1a:	469a      	mov	sl, r3
   27d1c:	0032      	movs	r2, r6
   27d1e:	003b      	movs	r3, r7
   27d20:	0030      	movs	r0, r6
   27d22:	0039      	movs	r1, r7
   27d24:	f7fa fbe2 	bl	224ec <__aeabi_dadd>
   27d28:	0006      	movs	r6, r0
   27d2a:	000f      	movs	r7, r1
   27d2c:	0002      	movs	r2, r0
   27d2e:	000b      	movs	r3, r1
   27d30:	9804      	ldr	r0, [sp, #16]
   27d32:	9905      	ldr	r1, [sp, #20]
   27d34:	f7f9 fb24 	bl	21380 <__aeabi_dcmplt>
   27d38:	2800      	cmp	r0, #0
   27d3a:	d10c      	bne.n	27d56 <_dtoa_r+0x626>
   27d3c:	9804      	ldr	r0, [sp, #16]
   27d3e:	9905      	ldr	r1, [sp, #20]
   27d40:	0032      	movs	r2, r6
   27d42:	003b      	movs	r3, r7
   27d44:	f7f9 fb16 	bl	21374 <__aeabi_dcmpeq>
   27d48:	2800      	cmp	r0, #0
   27d4a:	d100      	bne.n	27d4e <_dtoa_r+0x61e>
   27d4c:	e71f      	b.n	27b8e <_dtoa_r+0x45e>
   27d4e:	4643      	mov	r3, r8
   27d50:	07db      	lsls	r3, r3, #31
   27d52:	d400      	bmi.n	27d56 <_dtoa_r+0x626>
   27d54:	e71b      	b.n	27b8e <_dtoa_r+0x45e>
   27d56:	1e65      	subs	r5, r4, #1
   27d58:	782f      	ldrb	r7, [r5, #0]
   27d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d5c:	e006      	b.n	27d6c <_dtoa_r+0x63c>
   27d5e:	429d      	cmp	r5, r3
   27d60:	d100      	bne.n	27d64 <_dtoa_r+0x634>
   27d62:	e351      	b.n	28408 <_dtoa_r+0xcd8>
   27d64:	3c02      	subs	r4, #2
   27d66:	7827      	ldrb	r7, [r4, #0]
   27d68:	002c      	movs	r4, r5
   27d6a:	3d01      	subs	r5, #1
   27d6c:	2f39      	cmp	r7, #57	; 0x39
   27d6e:	d0f6      	beq.n	27d5e <_dtoa_r+0x62e>
   27d70:	3701      	adds	r7, #1
   27d72:	702f      	strb	r7, [r5, #0]
   27d74:	e70b      	b.n	27b8e <_dtoa_r+0x45e>
   27d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   27d78:	2a00      	cmp	r2, #0
   27d7a:	d04f      	beq.n	27e1c <_dtoa_r+0x6ec>
   27d7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   27d7e:	2a01      	cmp	r2, #1
   27d80:	dc00      	bgt.n	27d84 <_dtoa_r+0x654>
   27d82:	e22c      	b.n	281de <_dtoa_r+0xaae>
   27d84:	9b07      	ldr	r3, [sp, #28]
   27d86:	1e5c      	subs	r4, r3, #1
   27d88:	464b      	mov	r3, r9
   27d8a:	45a1      	cmp	r9, r4
   27d8c:	da00      	bge.n	27d90 <_dtoa_r+0x660>
   27d8e:	e2b8      	b.n	28302 <_dtoa_r+0xbd2>
   27d90:	1b1c      	subs	r4, r3, r4
   27d92:	9b07      	ldr	r3, [sp, #28]
   27d94:	2b00      	cmp	r3, #0
   27d96:	da00      	bge.n	27d9a <_dtoa_r+0x66a>
   27d98:	e3d4      	b.n	28544 <_dtoa_r+0xe14>
   27d9a:	9b06      	ldr	r3, [sp, #24]
   27d9c:	9308      	str	r3, [sp, #32]
   27d9e:	9b07      	ldr	r3, [sp, #28]
   27da0:	9a06      	ldr	r2, [sp, #24]
   27da2:	2101      	movs	r1, #1
   27da4:	4694      	mov	ip, r2
   27da6:	449c      	add	ip, r3
   27da8:	4662      	mov	r2, ip
   27daa:	9206      	str	r2, [sp, #24]
   27dac:	9a04      	ldr	r2, [sp, #16]
   27dae:	4650      	mov	r0, sl
   27db0:	4694      	mov	ip, r2
   27db2:	449c      	add	ip, r3
   27db4:	4663      	mov	r3, ip
   27db6:	9304      	str	r3, [sp, #16]
   27db8:	f001 fd86 	bl	298c8 <__i2b>
   27dbc:	4680      	mov	r8, r0
   27dbe:	e032      	b.n	27e26 <_dtoa_r+0x6f6>
   27dc0:	9a06      	ldr	r2, [sp, #24]
   27dc2:	9b03      	ldr	r3, [sp, #12]
   27dc4:	1ad2      	subs	r2, r2, r3
   27dc6:	425b      	negs	r3, r3
   27dc8:	4699      	mov	r9, r3
   27dca:	2300      	movs	r3, #0
   27dcc:	9206      	str	r2, [sp, #24]
   27dce:	930d      	str	r3, [sp, #52]	; 0x34
   27dd0:	e579      	b.n	278c6 <_dtoa_r+0x196>
   27dd2:	9803      	ldr	r0, [sp, #12]
   27dd4:	f7fc f898 	bl	23f08 <__aeabi_i2d>
   27dd8:	000b      	movs	r3, r1
   27dda:	0002      	movs	r2, r0
   27ddc:	0029      	movs	r1, r5
   27dde:	0020      	movs	r0, r4
   27de0:	f7f9 fac8 	bl	21374 <__aeabi_dcmpeq>
   27de4:	0002      	movs	r2, r0
   27de6:	4250      	negs	r0, r2
   27de8:	4150      	adcs	r0, r2
   27dea:	9b03      	ldr	r3, [sp, #12]
   27dec:	1a1b      	subs	r3, r3, r0
   27dee:	9303      	str	r3, [sp, #12]
   27df0:	e53d      	b.n	2786e <_dtoa_r+0x13e>
   27df2:	2301      	movs	r3, #1
   27df4:	1a9b      	subs	r3, r3, r2
   27df6:	9306      	str	r3, [sp, #24]
   27df8:	2300      	movs	r3, #0
   27dfa:	9304      	str	r3, [sp, #16]
   27dfc:	e557      	b.n	278ae <_dtoa_r+0x17e>
   27dfe:	46c0      	nop			; (mov r8, r8)
   27e00:	3ff00000 	.word	0x3ff00000
   27e04:	40240000 	.word	0x40240000
   27e08:	00000432 	.word	0x00000432
   27e0c:	00000412 	.word	0x00000412
   27e10:	fe100000 	.word	0xfe100000
   27e14:	0002d10c 	.word	0x0002d10c
   27e18:	0002d300 	.word	0x0002d300
   27e1c:	9b06      	ldr	r3, [sp, #24]
   27e1e:	464c      	mov	r4, r9
   27e20:	9308      	str	r3, [sp, #32]
   27e22:	2300      	movs	r3, #0
   27e24:	4698      	mov	r8, r3
   27e26:	9908      	ldr	r1, [sp, #32]
   27e28:	1e0b      	subs	r3, r1, #0
   27e2a:	dd0e      	ble.n	27e4a <_dtoa_r+0x71a>
   27e2c:	9a04      	ldr	r2, [sp, #16]
   27e2e:	2a00      	cmp	r2, #0
   27e30:	dd0b      	ble.n	27e4a <_dtoa_r+0x71a>
   27e32:	4293      	cmp	r3, r2
   27e34:	dd00      	ble.n	27e38 <_dtoa_r+0x708>
   27e36:	e187      	b.n	28148 <_dtoa_r+0xa18>
   27e38:	9a06      	ldr	r2, [sp, #24]
   27e3a:	1ad2      	subs	r2, r2, r3
   27e3c:	9206      	str	r2, [sp, #24]
   27e3e:	9a08      	ldr	r2, [sp, #32]
   27e40:	1ad2      	subs	r2, r2, r3
   27e42:	9208      	str	r2, [sp, #32]
   27e44:	9a04      	ldr	r2, [sp, #16]
   27e46:	1ad3      	subs	r3, r2, r3
   27e48:	9304      	str	r3, [sp, #16]
   27e4a:	464b      	mov	r3, r9
   27e4c:	2b00      	cmp	r3, #0
   27e4e:	d01a      	beq.n	27e86 <_dtoa_r+0x756>
   27e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27e52:	2b00      	cmp	r3, #0
   27e54:	d100      	bne.n	27e58 <_dtoa_r+0x728>
   27e56:	e1bb      	b.n	281d0 <_dtoa_r+0xaa0>
   27e58:	2c00      	cmp	r4, #0
   27e5a:	dd10      	ble.n	27e7e <_dtoa_r+0x74e>
   27e5c:	4641      	mov	r1, r8
   27e5e:	0022      	movs	r2, r4
   27e60:	4650      	mov	r0, sl
   27e62:	f001 fde5 	bl	29a30 <__pow5mult>
   27e66:	465a      	mov	r2, fp
   27e68:	0001      	movs	r1, r0
   27e6a:	4680      	mov	r8, r0
   27e6c:	4650      	mov	r0, sl
   27e6e:	f001 fd35 	bl	298dc <__multiply>
   27e72:	0005      	movs	r5, r0
   27e74:	4659      	mov	r1, fp
   27e76:	4650      	mov	r0, sl
   27e78:	f001 fc8e 	bl	29798 <_Bfree>
   27e7c:	46ab      	mov	fp, r5
   27e7e:	464b      	mov	r3, r9
   27e80:	1b1a      	subs	r2, r3, r4
   27e82:	d000      	beq.n	27e86 <_dtoa_r+0x756>
   27e84:	e1a5      	b.n	281d2 <_dtoa_r+0xaa2>
   27e86:	2101      	movs	r1, #1
   27e88:	4650      	mov	r0, sl
   27e8a:	f001 fd1d 	bl	298c8 <__i2b>
   27e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27e90:	4681      	mov	r9, r0
   27e92:	2b00      	cmp	r3, #0
   27e94:	dd1d      	ble.n	27ed2 <_dtoa_r+0x7a2>
   27e96:	001a      	movs	r2, r3
   27e98:	0001      	movs	r1, r0
   27e9a:	4650      	mov	r0, sl
   27e9c:	f001 fdc8 	bl	29a30 <__pow5mult>
   27ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27ea2:	4681      	mov	r9, r0
   27ea4:	2b01      	cmp	r3, #1
   27ea6:	dc00      	bgt.n	27eaa <_dtoa_r+0x77a>
   27ea8:	e150      	b.n	2814c <_dtoa_r+0xa1c>
   27eaa:	2400      	movs	r4, #0
   27eac:	464b      	mov	r3, r9
   27eae:	691b      	ldr	r3, [r3, #16]
   27eb0:	3303      	adds	r3, #3
   27eb2:	009b      	lsls	r3, r3, #2
   27eb4:	444b      	add	r3, r9
   27eb6:	6858      	ldr	r0, [r3, #4]
   27eb8:	f001 fcbe 	bl	29838 <__hi0bits>
   27ebc:	2320      	movs	r3, #32
   27ebe:	1a1b      	subs	r3, r3, r0
   27ec0:	e010      	b.n	27ee4 <_dtoa_r+0x7b4>
   27ec2:	2220      	movs	r2, #32
   27ec4:	0030      	movs	r0, r6
   27ec6:	1ad3      	subs	r3, r2, r3
   27ec8:	4098      	lsls	r0, r3
   27eca:	e685      	b.n	27bd8 <_dtoa_r+0x4a8>
   27ecc:	2300      	movs	r3, #0
   27ece:	930c      	str	r3, [sp, #48]	; 0x30
   27ed0:	e4e3      	b.n	2789a <_dtoa_r+0x16a>
   27ed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27ed4:	2400      	movs	r4, #0
   27ed6:	2b01      	cmp	r3, #1
   27ed8:	dc00      	bgt.n	27edc <_dtoa_r+0x7ac>
   27eda:	e18b      	b.n	281f4 <_dtoa_r+0xac4>
   27edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   27ede:	2301      	movs	r3, #1
   27ee0:	2a00      	cmp	r2, #0
   27ee2:	d1e3      	bne.n	27eac <_dtoa_r+0x77c>
   27ee4:	9904      	ldr	r1, [sp, #16]
   27ee6:	201f      	movs	r0, #31
   27ee8:	468c      	mov	ip, r1
   27eea:	4463      	add	r3, ip
   27eec:	4018      	ands	r0, r3
   27eee:	d100      	bne.n	27ef2 <_dtoa_r+0x7c2>
   27ef0:	e0ae      	b.n	28050 <_dtoa_r+0x920>
   27ef2:	2320      	movs	r3, #32
   27ef4:	1a1b      	subs	r3, r3, r0
   27ef6:	2b04      	cmp	r3, #4
   27ef8:	dc00      	bgt.n	27efc <_dtoa_r+0x7cc>
   27efa:	e3cc      	b.n	28696 <_dtoa_r+0xf66>
   27efc:	231c      	movs	r3, #28
   27efe:	1a18      	subs	r0, r3, r0
   27f00:	9b06      	ldr	r3, [sp, #24]
   27f02:	469c      	mov	ip, r3
   27f04:	4484      	add	ip, r0
   27f06:	4663      	mov	r3, ip
   27f08:	9306      	str	r3, [sp, #24]
   27f0a:	9b08      	ldr	r3, [sp, #32]
   27f0c:	469c      	mov	ip, r3
   27f0e:	4484      	add	ip, r0
   27f10:	4663      	mov	r3, ip
   27f12:	468c      	mov	ip, r1
   27f14:	4484      	add	ip, r0
   27f16:	9308      	str	r3, [sp, #32]
   27f18:	4663      	mov	r3, ip
   27f1a:	9304      	str	r3, [sp, #16]
   27f1c:	9b06      	ldr	r3, [sp, #24]
   27f1e:	2b00      	cmp	r3, #0
   27f20:	dd05      	ble.n	27f2e <_dtoa_r+0x7fe>
   27f22:	4659      	mov	r1, fp
   27f24:	001a      	movs	r2, r3
   27f26:	4650      	mov	r0, sl
   27f28:	f001 fde2 	bl	29af0 <__lshift>
   27f2c:	4683      	mov	fp, r0
   27f2e:	9b04      	ldr	r3, [sp, #16]
   27f30:	2b00      	cmp	r3, #0
   27f32:	dd05      	ble.n	27f40 <_dtoa_r+0x810>
   27f34:	4649      	mov	r1, r9
   27f36:	001a      	movs	r2, r3
   27f38:	4650      	mov	r0, sl
   27f3a:	f001 fdd9 	bl	29af0 <__lshift>
   27f3e:	4681      	mov	r9, r0
   27f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27f42:	2b00      	cmp	r3, #0
   27f44:	d000      	beq.n	27f48 <_dtoa_r+0x818>
   27f46:	e094      	b.n	28072 <_dtoa_r+0x942>
   27f48:	9b07      	ldr	r3, [sp, #28]
   27f4a:	2b00      	cmp	r3, #0
   27f4c:	dc00      	bgt.n	27f50 <_dtoa_r+0x820>
   27f4e:	e175      	b.n	2823c <_dtoa_r+0xb0c>
   27f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27f52:	2b00      	cmp	r3, #0
   27f54:	d100      	bne.n	27f58 <_dtoa_r+0x828>
   27f56:	e0a6      	b.n	280a6 <_dtoa_r+0x976>
   27f58:	9b08      	ldr	r3, [sp, #32]
   27f5a:	2b00      	cmp	r3, #0
   27f5c:	dd05      	ble.n	27f6a <_dtoa_r+0x83a>
   27f5e:	4641      	mov	r1, r8
   27f60:	001a      	movs	r2, r3
   27f62:	4650      	mov	r0, sl
   27f64:	f001 fdc4 	bl	29af0 <__lshift>
   27f68:	4680      	mov	r8, r0
   27f6a:	4643      	mov	r3, r8
   27f6c:	930c      	str	r3, [sp, #48]	; 0x30
   27f6e:	2c00      	cmp	r4, #0
   27f70:	d000      	beq.n	27f74 <_dtoa_r+0x844>
   27f72:	e250      	b.n	28416 <_dtoa_r+0xce6>
   27f74:	9c07      	ldr	r4, [sp, #28]
   27f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27f78:	3c01      	subs	r4, #1
   27f7a:	0023      	movs	r3, r4
   27f7c:	4694      	mov	ip, r2
   27f7e:	4463      	add	r3, ip
   27f80:	9308      	str	r3, [sp, #32]
   27f82:	2301      	movs	r3, #1
   27f84:	4033      	ands	r3, r6
   27f86:	9307      	str	r3, [sp, #28]
   27f88:	464b      	mov	r3, r9
   27f8a:	9306      	str	r3, [sp, #24]
   27f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27f8e:	4657      	mov	r7, sl
   27f90:	4645      	mov	r5, r8
   27f92:	465e      	mov	r6, fp
   27f94:	4692      	mov	sl, r2
   27f96:	4698      	mov	r8, r3
   27f98:	9b06      	ldr	r3, [sp, #24]
   27f9a:	0030      	movs	r0, r6
   27f9c:	0019      	movs	r1, r3
   27f9e:	4699      	mov	r9, r3
   27fa0:	f7ff fb1c 	bl	275dc <quorem>
   27fa4:	0003      	movs	r3, r0
   27fa6:	900b      	str	r0, [sp, #44]	; 0x2c
   27fa8:	3330      	adds	r3, #48	; 0x30
   27faa:	0029      	movs	r1, r5
   27fac:	0030      	movs	r0, r6
   27fae:	9304      	str	r3, [sp, #16]
   27fb0:	f001 fdfe 	bl	29bb0 <__mcmp>
   27fb4:	4649      	mov	r1, r9
   27fb6:	0004      	movs	r4, r0
   27fb8:	4642      	mov	r2, r8
   27fba:	0038      	movs	r0, r7
   27fbc:	f001 fe12 	bl	29be4 <__mdiff>
   27fc0:	68c3      	ldr	r3, [r0, #12]
   27fc2:	4681      	mov	r9, r0
   27fc4:	2b00      	cmp	r3, #0
   27fc6:	d000      	beq.n	27fca <_dtoa_r+0x89a>
   27fc8:	e11e      	b.n	28208 <_dtoa_r+0xad8>
   27fca:	0001      	movs	r1, r0
   27fcc:	0030      	movs	r0, r6
   27fce:	f001 fdef 	bl	29bb0 <__mcmp>
   27fd2:	4683      	mov	fp, r0
   27fd4:	4649      	mov	r1, r9
   27fd6:	0038      	movs	r0, r7
   27fd8:	f001 fbde 	bl	29798 <_Bfree>
   27fdc:	465b      	mov	r3, fp
   27fde:	9a22      	ldr	r2, [sp, #136]	; 0x88
   27fe0:	4313      	orrs	r3, r2
   27fe2:	d103      	bne.n	27fec <_dtoa_r+0x8bc>
   27fe4:	9b07      	ldr	r3, [sp, #28]
   27fe6:	2b00      	cmp	r3, #0
   27fe8:	d100      	bne.n	27fec <_dtoa_r+0x8bc>
   27fea:	e306      	b.n	285fa <_dtoa_r+0xeca>
   27fec:	2c00      	cmp	r4, #0
   27fee:	da00      	bge.n	27ff2 <_dtoa_r+0x8c2>
   27ff0:	e1a8      	b.n	28344 <_dtoa_r+0xc14>
   27ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27ff4:	431c      	orrs	r4, r3
   27ff6:	d103      	bne.n	28000 <_dtoa_r+0x8d0>
   27ff8:	9b07      	ldr	r3, [sp, #28]
   27ffa:	2b00      	cmp	r3, #0
   27ffc:	d100      	bne.n	28000 <_dtoa_r+0x8d0>
   27ffe:	e1a1      	b.n	28344 <_dtoa_r+0xc14>
   28000:	465b      	mov	r3, fp
   28002:	2b00      	cmp	r3, #0
   28004:	dd00      	ble.n	28008 <_dtoa_r+0x8d8>
   28006:	e282      	b.n	2850e <_dtoa_r+0xdde>
   28008:	4669      	mov	r1, sp
   2800a:	4652      	mov	r2, sl
   2800c:	4653      	mov	r3, sl
   2800e:	7c09      	ldrb	r1, [r1, #16]
   28010:	1c5c      	adds	r4, r3, #1
   28012:	7011      	strb	r1, [r2, #0]
   28014:	9a08      	ldr	r2, [sp, #32]
   28016:	4552      	cmp	r2, sl
   28018:	d100      	bne.n	2801c <_dtoa_r+0x8ec>
   2801a:	e28a      	b.n	28532 <_dtoa_r+0xe02>
   2801c:	0031      	movs	r1, r6
   2801e:	2300      	movs	r3, #0
   28020:	220a      	movs	r2, #10
   28022:	0038      	movs	r0, r7
   28024:	f001 fbc2 	bl	297ac <__multadd>
   28028:	2300      	movs	r3, #0
   2802a:	0006      	movs	r6, r0
   2802c:	220a      	movs	r2, #10
   2802e:	0029      	movs	r1, r5
   28030:	0038      	movs	r0, r7
   28032:	4545      	cmp	r5, r8
   28034:	d100      	bne.n	28038 <_dtoa_r+0x908>
   28036:	e0e1      	b.n	281fc <_dtoa_r+0xacc>
   28038:	f001 fbb8 	bl	297ac <__multadd>
   2803c:	4641      	mov	r1, r8
   2803e:	0005      	movs	r5, r0
   28040:	2300      	movs	r3, #0
   28042:	220a      	movs	r2, #10
   28044:	0038      	movs	r0, r7
   28046:	f001 fbb1 	bl	297ac <__multadd>
   2804a:	46a2      	mov	sl, r4
   2804c:	4680      	mov	r8, r0
   2804e:	e7a3      	b.n	27f98 <_dtoa_r+0x868>
   28050:	201c      	movs	r0, #28
   28052:	9b06      	ldr	r3, [sp, #24]
   28054:	469c      	mov	ip, r3
   28056:	4484      	add	ip, r0
   28058:	4663      	mov	r3, ip
   2805a:	9306      	str	r3, [sp, #24]
   2805c:	9b08      	ldr	r3, [sp, #32]
   2805e:	469c      	mov	ip, r3
   28060:	4484      	add	ip, r0
   28062:	4663      	mov	r3, ip
   28064:	9308      	str	r3, [sp, #32]
   28066:	9b04      	ldr	r3, [sp, #16]
   28068:	469c      	mov	ip, r3
   2806a:	4484      	add	ip, r0
   2806c:	4663      	mov	r3, ip
   2806e:	9304      	str	r3, [sp, #16]
   28070:	e754      	b.n	27f1c <_dtoa_r+0x7ec>
   28072:	4649      	mov	r1, r9
   28074:	4658      	mov	r0, fp
   28076:	f001 fd9b 	bl	29bb0 <__mcmp>
   2807a:	2800      	cmp	r0, #0
   2807c:	db00      	blt.n	28080 <_dtoa_r+0x950>
   2807e:	e763      	b.n	27f48 <_dtoa_r+0x818>
   28080:	9b03      	ldr	r3, [sp, #12]
   28082:	4659      	mov	r1, fp
   28084:	3b01      	subs	r3, #1
   28086:	9303      	str	r3, [sp, #12]
   28088:	220a      	movs	r2, #10
   2808a:	2300      	movs	r3, #0
   2808c:	4650      	mov	r0, sl
   2808e:	f001 fb8d 	bl	297ac <__multadd>
   28092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28094:	4683      	mov	fp, r0
   28096:	2b00      	cmp	r3, #0
   28098:	d000      	beq.n	2809c <_dtoa_r+0x96c>
   2809a:	e2ca      	b.n	28632 <_dtoa_r+0xf02>
   2809c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2809e:	2b00      	cmp	r3, #0
   280a0:	dc00      	bgt.n	280a4 <_dtoa_r+0x974>
   280a2:	e2d8      	b.n	28656 <_dtoa_r+0xf26>
   280a4:	9307      	str	r3, [sp, #28]
   280a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   280a8:	465d      	mov	r5, fp
   280aa:	2400      	movs	r4, #0
   280ac:	9f07      	ldr	r7, [sp, #28]
   280ae:	469b      	mov	fp, r3
   280b0:	e006      	b.n	280c0 <_dtoa_r+0x990>
   280b2:	0029      	movs	r1, r5
   280b4:	2300      	movs	r3, #0
   280b6:	220a      	movs	r2, #10
   280b8:	4650      	mov	r0, sl
   280ba:	f001 fb77 	bl	297ac <__multadd>
   280be:	0005      	movs	r5, r0
   280c0:	4649      	mov	r1, r9
   280c2:	0028      	movs	r0, r5
   280c4:	f7ff fa8a 	bl	275dc <quorem>
   280c8:	465b      	mov	r3, fp
   280ca:	3030      	adds	r0, #48	; 0x30
   280cc:	5518      	strb	r0, [r3, r4]
   280ce:	3401      	adds	r4, #1
   280d0:	42bc      	cmp	r4, r7
   280d2:	dbee      	blt.n	280b2 <_dtoa_r+0x982>
   280d4:	46ab      	mov	fp, r5
   280d6:	0006      	movs	r6, r0
   280d8:	9c07      	ldr	r4, [sp, #28]
   280da:	2c00      	cmp	r4, #0
   280dc:	dc00      	bgt.n	280e0 <_dtoa_r+0x9b0>
   280de:	e237      	b.n	28550 <_dtoa_r+0xe20>
   280e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   280e2:	2700      	movs	r7, #0
   280e4:	469c      	mov	ip, r3
   280e6:	4464      	add	r4, ip
   280e8:	4659      	mov	r1, fp
   280ea:	2201      	movs	r2, #1
   280ec:	4650      	mov	r0, sl
   280ee:	f001 fcff 	bl	29af0 <__lshift>
   280f2:	4649      	mov	r1, r9
   280f4:	4683      	mov	fp, r0
   280f6:	f001 fd5b 	bl	29bb0 <__mcmp>
   280fa:	2800      	cmp	r0, #0
   280fc:	dc00      	bgt.n	28100 <_dtoa_r+0x9d0>
   280fe:	e144      	b.n	2838a <_dtoa_r+0xc5a>
   28100:	1e65      	subs	r5, r4, #1
   28102:	782b      	ldrb	r3, [r5, #0]
   28104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28106:	e006      	b.n	28116 <_dtoa_r+0x9e6>
   28108:	4295      	cmp	r5, r2
   2810a:	d100      	bne.n	2810e <_dtoa_r+0x9de>
   2810c:	e0b1      	b.n	28272 <_dtoa_r+0xb42>
   2810e:	3c02      	subs	r4, #2
   28110:	7823      	ldrb	r3, [r4, #0]
   28112:	002c      	movs	r4, r5
   28114:	3d01      	subs	r5, #1
   28116:	2b39      	cmp	r3, #57	; 0x39
   28118:	d0f6      	beq.n	28108 <_dtoa_r+0x9d8>
   2811a:	3301      	adds	r3, #1
   2811c:	702b      	strb	r3, [r5, #0]
   2811e:	4649      	mov	r1, r9
   28120:	4650      	mov	r0, sl
   28122:	f001 fb39 	bl	29798 <_Bfree>
   28126:	4643      	mov	r3, r8
   28128:	2b00      	cmp	r3, #0
   2812a:	d100      	bne.n	2812e <_dtoa_r+0x9fe>
   2812c:	e52f      	b.n	27b8e <_dtoa_r+0x45e>
   2812e:	2f00      	cmp	r7, #0
   28130:	d005      	beq.n	2813e <_dtoa_r+0xa0e>
   28132:	4547      	cmp	r7, r8
   28134:	d003      	beq.n	2813e <_dtoa_r+0xa0e>
   28136:	0039      	movs	r1, r7
   28138:	4650      	mov	r0, sl
   2813a:	f001 fb2d 	bl	29798 <_Bfree>
   2813e:	4641      	mov	r1, r8
   28140:	4650      	mov	r0, sl
   28142:	f001 fb29 	bl	29798 <_Bfree>
   28146:	e522      	b.n	27b8e <_dtoa_r+0x45e>
   28148:	0013      	movs	r3, r2
   2814a:	e675      	b.n	27e38 <_dtoa_r+0x708>
   2814c:	2e00      	cmp	r6, #0
   2814e:	d000      	beq.n	28152 <_dtoa_r+0xa22>
   28150:	e6ab      	b.n	27eaa <_dtoa_r+0x77a>
   28152:	033b      	lsls	r3, r7, #12
   28154:	2400      	movs	r4, #0
   28156:	2b00      	cmp	r3, #0
   28158:	d000      	beq.n	2815c <_dtoa_r+0xa2c>
   2815a:	e6bf      	b.n	27edc <_dtoa_r+0x7ac>
   2815c:	4bba      	ldr	r3, [pc, #744]	; (28448 <_dtoa_r+0xd18>)
   2815e:	423b      	tst	r3, r7
   28160:	d100      	bne.n	28164 <_dtoa_r+0xa34>
   28162:	e6bb      	b.n	27edc <_dtoa_r+0x7ac>
   28164:	9b06      	ldr	r3, [sp, #24]
   28166:	3401      	adds	r4, #1
   28168:	3301      	adds	r3, #1
   2816a:	9306      	str	r3, [sp, #24]
   2816c:	9b04      	ldr	r3, [sp, #16]
   2816e:	3301      	adds	r3, #1
   28170:	9304      	str	r3, [sp, #16]
   28172:	e6b3      	b.n	27edc <_dtoa_r+0x7ac>
   28174:	2301      	movs	r3, #1
   28176:	930b      	str	r3, [sp, #44]	; 0x2c
   28178:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2817a:	2b00      	cmp	r3, #0
   2817c:	dc00      	bgt.n	28180 <_dtoa_r+0xa50>
   2817e:	e0d1      	b.n	28324 <_dtoa_r+0xbf4>
   28180:	001d      	movs	r5, r3
   28182:	4698      	mov	r8, r3
   28184:	930e      	str	r3, [sp, #56]	; 0x38
   28186:	9307      	str	r3, [sp, #28]
   28188:	f7ff fbc8 	bl	2791c <_dtoa_r+0x1ec>
   2818c:	9b07      	ldr	r3, [sp, #28]
   2818e:	2b00      	cmp	r3, #0
   28190:	dd00      	ble.n	28194 <_dtoa_r+0xa64>
   28192:	e553      	b.n	27c3c <_dtoa_r+0x50c>
   28194:	d000      	beq.n	28198 <_dtoa_r+0xa68>
   28196:	e0ad      	b.n	282f4 <_dtoa_r+0xbc4>
   28198:	9804      	ldr	r0, [sp, #16]
   2819a:	9905      	ldr	r1, [sp, #20]
   2819c:	2200      	movs	r2, #0
   2819e:	4bab      	ldr	r3, [pc, #684]	; (2844c <_dtoa_r+0xd1c>)
   281a0:	f7fb f8e8 	bl	23374 <__aeabi_dmul>
   281a4:	003b      	movs	r3, r7
   281a6:	0032      	movs	r2, r6
   281a8:	f7f9 f908 	bl	213bc <__aeabi_dcmpge>
   281ac:	2300      	movs	r3, #0
   281ae:	4699      	mov	r9, r3
   281b0:	4698      	mov	r8, r3
   281b2:	2800      	cmp	r0, #0
   281b4:	d055      	beq.n	28262 <_dtoa_r+0xb32>
   281b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   281b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   281ba:	43db      	mvns	r3, r3
   281bc:	9303      	str	r3, [sp, #12]
   281be:	4649      	mov	r1, r9
   281c0:	4650      	mov	r0, sl
   281c2:	f001 fae9 	bl	29798 <_Bfree>
   281c6:	4643      	mov	r3, r8
   281c8:	2b00      	cmp	r3, #0
   281ca:	d100      	bne.n	281ce <_dtoa_r+0xa9e>
   281cc:	e4df      	b.n	27b8e <_dtoa_r+0x45e>
   281ce:	e7b6      	b.n	2813e <_dtoa_r+0xa0e>
   281d0:	464a      	mov	r2, r9
   281d2:	4659      	mov	r1, fp
   281d4:	4650      	mov	r0, sl
   281d6:	f001 fc2b 	bl	29a30 <__pow5mult>
   281da:	4683      	mov	fp, r0
   281dc:	e653      	b.n	27e86 <_dtoa_r+0x756>
   281de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   281e0:	2a00      	cmp	r2, #0
   281e2:	d100      	bne.n	281e6 <_dtoa_r+0xab6>
   281e4:	e1b6      	b.n	28554 <_dtoa_r+0xe24>
   281e6:	4a9a      	ldr	r2, [pc, #616]	; (28450 <_dtoa_r+0xd20>)
   281e8:	464c      	mov	r4, r9
   281ea:	4694      	mov	ip, r2
   281ec:	9a06      	ldr	r2, [sp, #24]
   281ee:	4463      	add	r3, ip
   281f0:	9208      	str	r2, [sp, #32]
   281f2:	e5d5      	b.n	27da0 <_dtoa_r+0x670>
   281f4:	2e00      	cmp	r6, #0
   281f6:	d000      	beq.n	281fa <_dtoa_r+0xaca>
   281f8:	e670      	b.n	27edc <_dtoa_r+0x7ac>
   281fa:	e7aa      	b.n	28152 <_dtoa_r+0xa22>
   281fc:	f001 fad6 	bl	297ac <__multadd>
   28200:	46a2      	mov	sl, r4
   28202:	0005      	movs	r5, r0
   28204:	4680      	mov	r8, r0
   28206:	e6c7      	b.n	27f98 <_dtoa_r+0x868>
   28208:	2301      	movs	r3, #1
   2820a:	469b      	mov	fp, r3
   2820c:	e6e2      	b.n	27fd4 <_dtoa_r+0x8a4>
   2820e:	2300      	movs	r3, #0
   28210:	930b      	str	r3, [sp, #44]	; 0x2c
   28212:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28214:	2b02      	cmp	r3, #2
   28216:	d0af      	beq.n	28178 <_dtoa_r+0xa48>
   28218:	2400      	movs	r4, #0
   2821a:	4653      	mov	r3, sl
   2821c:	0021      	movs	r1, r4
   2821e:	645c      	str	r4, [r3, #68]	; 0x44
   28220:	4650      	mov	r0, sl
   28222:	f001 fa91 	bl	29748 <_Balloc>
   28226:	4653      	mov	r3, sl
   28228:	6418      	str	r0, [r3, #64]	; 0x40
   2822a:	2301      	movs	r3, #1
   2822c:	425b      	negs	r3, r3
   2822e:	9307      	str	r3, [sp, #28]
   28230:	930e      	str	r3, [sp, #56]	; 0x38
   28232:	3302      	adds	r3, #2
   28234:	900a      	str	r0, [sp, #40]	; 0x28
   28236:	9423      	str	r4, [sp, #140]	; 0x8c
   28238:	930b      	str	r3, [sp, #44]	; 0x2c
   2823a:	e4ec      	b.n	27c16 <_dtoa_r+0x4e6>
   2823c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2823e:	2b02      	cmp	r3, #2
   28240:	dc00      	bgt.n	28244 <_dtoa_r+0xb14>
   28242:	e685      	b.n	27f50 <_dtoa_r+0x820>
   28244:	9b07      	ldr	r3, [sp, #28]
   28246:	2b00      	cmp	r3, #0
   28248:	d1b5      	bne.n	281b6 <_dtoa_r+0xa86>
   2824a:	4649      	mov	r1, r9
   2824c:	2205      	movs	r2, #5
   2824e:	4650      	mov	r0, sl
   28250:	f001 faac 	bl	297ac <__multadd>
   28254:	4681      	mov	r9, r0
   28256:	0001      	movs	r1, r0
   28258:	4658      	mov	r0, fp
   2825a:	f001 fca9 	bl	29bb0 <__mcmp>
   2825e:	2800      	cmp	r0, #0
   28260:	dda9      	ble.n	281b6 <_dtoa_r+0xa86>
   28262:	2331      	movs	r3, #49	; 0x31
   28264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28266:	7013      	strb	r3, [r2, #0]
   28268:	9b03      	ldr	r3, [sp, #12]
   2826a:	1c54      	adds	r4, r2, #1
   2826c:	3301      	adds	r3, #1
   2826e:	9303      	str	r3, [sp, #12]
   28270:	e7a5      	b.n	281be <_dtoa_r+0xa8e>
   28272:	9b03      	ldr	r3, [sp, #12]
   28274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   28276:	3301      	adds	r3, #1
   28278:	9303      	str	r3, [sp, #12]
   2827a:	2331      	movs	r3, #49	; 0x31
   2827c:	7013      	strb	r3, [r2, #0]
   2827e:	e74e      	b.n	2811e <_dtoa_r+0x9ee>
   28280:	2300      	movs	r3, #0
   28282:	930b      	str	r3, [sp, #44]	; 0x2c
   28284:	f7ff fb3d 	bl	27902 <_dtoa_r+0x1d2>
   28288:	9b06      	ldr	r3, [sp, #24]
   2828a:	465c      	mov	r4, fp
   2828c:	469b      	mov	fp, r3
   2828e:	9b07      	ldr	r3, [sp, #28]
   28290:	469a      	mov	sl, r3
   28292:	e47c      	b.n	27b8e <_dtoa_r+0x45e>
   28294:	4640      	mov	r0, r8
   28296:	f7fb fe37 	bl	23f08 <__aeabi_i2d>
   2829a:	0032      	movs	r2, r6
   2829c:	003b      	movs	r3, r7
   2829e:	f7fb f869 	bl	23374 <__aeabi_dmul>
   282a2:	2200      	movs	r2, #0
   282a4:	4b6b      	ldr	r3, [pc, #428]	; (28454 <_dtoa_r+0xd24>)
   282a6:	f7fa f921 	bl	224ec <__aeabi_dadd>
   282aa:	4a6b      	ldr	r2, [pc, #428]	; (28458 <_dtoa_r+0xd28>)
   282ac:	000b      	movs	r3, r1
   282ae:	4694      	mov	ip, r2
   282b0:	4463      	add	r3, ip
   282b2:	9008      	str	r0, [sp, #32]
   282b4:	9109      	str	r1, [sp, #36]	; 0x24
   282b6:	9309      	str	r3, [sp, #36]	; 0x24
   282b8:	2200      	movs	r2, #0
   282ba:	4b64      	ldr	r3, [pc, #400]	; (2844c <_dtoa_r+0xd1c>)
   282bc:	0030      	movs	r0, r6
   282be:	0039      	movs	r1, r7
   282c0:	f7fb fad8 	bl	23874 <__aeabi_dsub>
   282c4:	9e08      	ldr	r6, [sp, #32]
   282c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
   282c8:	0032      	movs	r2, r6
   282ca:	003b      	movs	r3, r7
   282cc:	0004      	movs	r4, r0
   282ce:	000d      	movs	r5, r1
   282d0:	f7f9 f86a 	bl	213a8 <__aeabi_dcmpgt>
   282d4:	2800      	cmp	r0, #0
   282d6:	d000      	beq.n	282da <_dtoa_r+0xbaa>
   282d8:	e0b2      	b.n	28440 <_dtoa_r+0xd10>
   282da:	2080      	movs	r0, #128	; 0x80
   282dc:	0600      	lsls	r0, r0, #24
   282de:	4684      	mov	ip, r0
   282e0:	0039      	movs	r1, r7
   282e2:	4461      	add	r1, ip
   282e4:	000b      	movs	r3, r1
   282e6:	0032      	movs	r2, r6
   282e8:	0020      	movs	r0, r4
   282ea:	0029      	movs	r1, r5
   282ec:	f7f9 f848 	bl	21380 <__aeabi_dcmplt>
   282f0:	2800      	cmp	r0, #0
   282f2:	d057      	beq.n	283a4 <_dtoa_r+0xc74>
   282f4:	2300      	movs	r3, #0
   282f6:	4699      	mov	r9, r3
   282f8:	4698      	mov	r8, r3
   282fa:	e75c      	b.n	281b6 <_dtoa_r+0xa86>
   282fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   282fe:	f7ff fa4c 	bl	2779a <_dtoa_r+0x6a>
   28302:	1ae2      	subs	r2, r4, r3
   28304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   28306:	46a1      	mov	r9, r4
   28308:	469c      	mov	ip, r3
   2830a:	4494      	add	ip, r2
   2830c:	4663      	mov	r3, ip
   2830e:	2400      	movs	r4, #0
   28310:	930d      	str	r3, [sp, #52]	; 0x34
   28312:	e53e      	b.n	27d92 <_dtoa_r+0x662>
   28314:	9a10      	ldr	r2, [sp, #64]	; 0x40
   28316:	9b11      	ldr	r3, [sp, #68]	; 0x44
   28318:	9208      	str	r2, [sp, #32]
   2831a:	9309      	str	r3, [sp, #36]	; 0x24
   2831c:	2302      	movs	r3, #2
   2831e:	4698      	mov	r8, r3
   28320:	f7ff fb3a 	bl	27998 <_dtoa_r+0x268>
   28324:	2300      	movs	r3, #0
   28326:	4652      	mov	r2, sl
   28328:	2100      	movs	r1, #0
   2832a:	6453      	str	r3, [r2, #68]	; 0x44
   2832c:	4650      	mov	r0, sl
   2832e:	f001 fa0b 	bl	29748 <_Balloc>
   28332:	4653      	mov	r3, sl
   28334:	6418      	str	r0, [r3, #64]	; 0x40
   28336:	2301      	movs	r3, #1
   28338:	900a      	str	r0, [sp, #40]	; 0x28
   2833a:	9307      	str	r3, [sp, #28]
   2833c:	9323      	str	r3, [sp, #140]	; 0x8c
   2833e:	930e      	str	r3, [sp, #56]	; 0x38
   28340:	f7ff fb07 	bl	27952 <_dtoa_r+0x222>
   28344:	4643      	mov	r3, r8
   28346:	930c      	str	r3, [sp, #48]	; 0x30
   28348:	465b      	mov	r3, fp
   2834a:	9a06      	ldr	r2, [sp, #24]
   2834c:	46a8      	mov	r8, r5
   2834e:	46b3      	mov	fp, r6
   28350:	4655      	mov	r5, sl
   28352:	9e04      	ldr	r6, [sp, #16]
   28354:	4691      	mov	r9, r2
   28356:	46ba      	mov	sl, r7
   28358:	2b00      	cmp	r3, #0
   2835a:	dd10      	ble.n	2837e <_dtoa_r+0xc4e>
   2835c:	4659      	mov	r1, fp
   2835e:	2201      	movs	r2, #1
   28360:	0038      	movs	r0, r7
   28362:	f001 fbc5 	bl	29af0 <__lshift>
   28366:	4649      	mov	r1, r9
   28368:	4683      	mov	fp, r0
   2836a:	f001 fc21 	bl	29bb0 <__mcmp>
   2836e:	2800      	cmp	r0, #0
   28370:	dc00      	bgt.n	28374 <_dtoa_r+0xc44>
   28372:	e157      	b.n	28624 <_dtoa_r+0xef4>
   28374:	2e39      	cmp	r6, #57	; 0x39
   28376:	d100      	bne.n	2837a <_dtoa_r+0xc4a>
   28378:	e122      	b.n	285c0 <_dtoa_r+0xe90>
   2837a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2837c:	3631      	adds	r6, #49	; 0x31
   2837e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28380:	4647      	mov	r7, r8
   28382:	1c6c      	adds	r4, r5, #1
   28384:	702e      	strb	r6, [r5, #0]
   28386:	4698      	mov	r8, r3
   28388:	e6c9      	b.n	2811e <_dtoa_r+0x9ee>
   2838a:	2800      	cmp	r0, #0
   2838c:	d103      	bne.n	28396 <_dtoa_r+0xc66>
   2838e:	07f3      	lsls	r3, r6, #31
   28390:	d501      	bpl.n	28396 <_dtoa_r+0xc66>
   28392:	e6b5      	b.n	28100 <_dtoa_r+0x9d0>
   28394:	001c      	movs	r4, r3
   28396:	1e63      	subs	r3, r4, #1
   28398:	781a      	ldrb	r2, [r3, #0]
   2839a:	2a30      	cmp	r2, #48	; 0x30
   2839c:	d0fa      	beq.n	28394 <_dtoa_r+0xc64>
   2839e:	e6be      	b.n	2811e <_dtoa_r+0x9ee>
   283a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   283a2:	4699      	mov	r9, r3
   283a4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   283a6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   283a8:	e435      	b.n	27c16 <_dtoa_r+0x4e6>
   283aa:	2501      	movs	r5, #1
   283ac:	f7ff fab4 	bl	27918 <_dtoa_r+0x1e8>
   283b0:	9b03      	ldr	r3, [sp, #12]
   283b2:	2b00      	cmp	r3, #0
   283b4:	d100      	bne.n	283b8 <_dtoa_r+0xc88>
   283b6:	e0d4      	b.n	28562 <_dtoa_r+0xe32>
   283b8:	9810      	ldr	r0, [sp, #64]	; 0x40
   283ba:	9911      	ldr	r1, [sp, #68]	; 0x44
   283bc:	425c      	negs	r4, r3
   283be:	230f      	movs	r3, #15
   283c0:	4a26      	ldr	r2, [pc, #152]	; (2845c <_dtoa_r+0xd2c>)
   283c2:	4023      	ands	r3, r4
   283c4:	00db      	lsls	r3, r3, #3
   283c6:	18d3      	adds	r3, r2, r3
   283c8:	681a      	ldr	r2, [r3, #0]
   283ca:	685b      	ldr	r3, [r3, #4]
   283cc:	f7fa ffd2 	bl	23374 <__aeabi_dmul>
   283d0:	1124      	asrs	r4, r4, #4
   283d2:	0006      	movs	r6, r0
   283d4:	000f      	movs	r7, r1
   283d6:	2c00      	cmp	r4, #0
   283d8:	d100      	bne.n	283dc <_dtoa_r+0xcac>
   283da:	e149      	b.n	28670 <_dtoa_r+0xf40>
   283dc:	2302      	movs	r3, #2
   283de:	4698      	mov	r8, r3
   283e0:	4d1f      	ldr	r5, [pc, #124]	; (28460 <_dtoa_r+0xd30>)
   283e2:	2301      	movs	r3, #1
   283e4:	4223      	tst	r3, r4
   283e6:	d009      	beq.n	283fc <_dtoa_r+0xccc>
   283e8:	469c      	mov	ip, r3
   283ea:	682a      	ldr	r2, [r5, #0]
   283ec:	686b      	ldr	r3, [r5, #4]
   283ee:	0030      	movs	r0, r6
   283f0:	0039      	movs	r1, r7
   283f2:	44e0      	add	r8, ip
   283f4:	f7fa ffbe 	bl	23374 <__aeabi_dmul>
   283f8:	0006      	movs	r6, r0
   283fa:	000f      	movs	r7, r1
   283fc:	1064      	asrs	r4, r4, #1
   283fe:	3508      	adds	r5, #8
   28400:	2c00      	cmp	r4, #0
   28402:	d1ee      	bne.n	283e2 <_dtoa_r+0xcb2>
   28404:	f7ff fae4 	bl	279d0 <_dtoa_r+0x2a0>
   28408:	9b03      	ldr	r3, [sp, #12]
   2840a:	2730      	movs	r7, #48	; 0x30
   2840c:	3301      	adds	r3, #1
   2840e:	9303      	str	r3, [sp, #12]
   28410:	2330      	movs	r3, #48	; 0x30
   28412:	702b      	strb	r3, [r5, #0]
   28414:	e4ac      	b.n	27d70 <_dtoa_r+0x640>
   28416:	6859      	ldr	r1, [r3, #4]
   28418:	4650      	mov	r0, sl
   2841a:	f001 f995 	bl	29748 <_Balloc>
   2841e:	4643      	mov	r3, r8
   28420:	4641      	mov	r1, r8
   28422:	0004      	movs	r4, r0
   28424:	691b      	ldr	r3, [r3, #16]
   28426:	310c      	adds	r1, #12
   28428:	1c9a      	adds	r2, r3, #2
   2842a:	0092      	lsls	r2, r2, #2
   2842c:	300c      	adds	r0, #12
   2842e:	f7fb fe8b 	bl	24148 <memcpy>
   28432:	2201      	movs	r2, #1
   28434:	0021      	movs	r1, r4
   28436:	4650      	mov	r0, sl
   28438:	f001 fb5a 	bl	29af0 <__lshift>
   2843c:	900c      	str	r0, [sp, #48]	; 0x30
   2843e:	e599      	b.n	27f74 <_dtoa_r+0x844>
   28440:	2300      	movs	r3, #0
   28442:	4699      	mov	r9, r3
   28444:	4698      	mov	r8, r3
   28446:	e70c      	b.n	28262 <_dtoa_r+0xb32>
   28448:	7ff00000 	.word	0x7ff00000
   2844c:	40140000 	.word	0x40140000
   28450:	00000433 	.word	0x00000433
   28454:	401c0000 	.word	0x401c0000
   28458:	fcc00000 	.word	0xfcc00000
   2845c:	0002d300 	.word	0x0002d300
   28460:	0002d2d8 	.word	0x0002d2d8
   28464:	9b12      	ldr	r3, [sp, #72]	; 0x48
   28466:	498f      	ldr	r1, [pc, #572]	; (286a4 <_dtoa_r+0xf74>)
   28468:	3b01      	subs	r3, #1
   2846a:	00db      	lsls	r3, r3, #3
   2846c:	18c9      	adds	r1, r1, r3
   2846e:	6808      	ldr	r0, [r1, #0]
   28470:	6849      	ldr	r1, [r1, #4]
   28472:	9a08      	ldr	r2, [sp, #32]
   28474:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28476:	f7fa ff7d 	bl	23374 <__aeabi_dmul>
   2847a:	9014      	str	r0, [sp, #80]	; 0x50
   2847c:	9115      	str	r1, [sp, #84]	; 0x54
   2847e:	0039      	movs	r1, r7
   28480:	0030      	movs	r0, r6
   28482:	f7fb fd0d 	bl	23ea0 <__aeabi_d2iz>
   28486:	0005      	movs	r5, r0
   28488:	f7fb fd3e 	bl	23f08 <__aeabi_i2d>
   2848c:	0002      	movs	r2, r0
   2848e:	000b      	movs	r3, r1
   28490:	0030      	movs	r0, r6
   28492:	0039      	movs	r1, r7
   28494:	f7fb f9ee 	bl	23874 <__aeabi_dsub>
   28498:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2849a:	9008      	str	r0, [sp, #32]
   2849c:	9109      	str	r1, [sp, #36]	; 0x24
   2849e:	990a      	ldr	r1, [sp, #40]	; 0x28
   284a0:	001a      	movs	r2, r3
   284a2:	468c      	mov	ip, r1
   284a4:	3530      	adds	r5, #48	; 0x30
   284a6:	4462      	add	r2, ip
   284a8:	1c4c      	adds	r4, r1, #1
   284aa:	700d      	strb	r5, [r1, #0]
   284ac:	4690      	mov	r8, r2
   284ae:	2b01      	cmp	r3, #1
   284b0:	d01b      	beq.n	284ea <_dtoa_r+0xdba>
   284b2:	9808      	ldr	r0, [sp, #32]
   284b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   284b6:	0025      	movs	r5, r4
   284b8:	2200      	movs	r2, #0
   284ba:	4b7b      	ldr	r3, [pc, #492]	; (286a8 <_dtoa_r+0xf78>)
   284bc:	f7fa ff5a 	bl	23374 <__aeabi_dmul>
   284c0:	000f      	movs	r7, r1
   284c2:	0006      	movs	r6, r0
   284c4:	f7fb fcec 	bl	23ea0 <__aeabi_d2iz>
   284c8:	0004      	movs	r4, r0
   284ca:	f7fb fd1d 	bl	23f08 <__aeabi_i2d>
   284ce:	3430      	adds	r4, #48	; 0x30
   284d0:	0002      	movs	r2, r0
   284d2:	000b      	movs	r3, r1
   284d4:	0030      	movs	r0, r6
   284d6:	0039      	movs	r1, r7
   284d8:	f7fb f9cc 	bl	23874 <__aeabi_dsub>
   284dc:	702c      	strb	r4, [r5, #0]
   284de:	3501      	adds	r5, #1
   284e0:	45a8      	cmp	r8, r5
   284e2:	d1e9      	bne.n	284b8 <_dtoa_r+0xd88>
   284e4:	4644      	mov	r4, r8
   284e6:	9008      	str	r0, [sp, #32]
   284e8:	9109      	str	r1, [sp, #36]	; 0x24
   284ea:	9814      	ldr	r0, [sp, #80]	; 0x50
   284ec:	9915      	ldr	r1, [sp, #84]	; 0x54
   284ee:	2200      	movs	r2, #0
   284f0:	4b6e      	ldr	r3, [pc, #440]	; (286ac <_dtoa_r+0xf7c>)
   284f2:	f7f9 fffb 	bl	224ec <__aeabi_dadd>
   284f6:	9a08      	ldr	r2, [sp, #32]
   284f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   284fa:	f7f8 ff41 	bl	21380 <__aeabi_dcmplt>
   284fe:	2800      	cmp	r0, #0
   28500:	d067      	beq.n	285d2 <_dtoa_r+0xea2>
   28502:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   28504:	1e65      	subs	r5, r4, #1
   28506:	9303      	str	r3, [sp, #12]
   28508:	782f      	ldrb	r7, [r5, #0]
   2850a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2850c:	e42e      	b.n	27d6c <_dtoa_r+0x63c>
   2850e:	4643      	mov	r3, r8
   28510:	46b3      	mov	fp, r6
   28512:	930c      	str	r3, [sp, #48]	; 0x30
   28514:	9e04      	ldr	r6, [sp, #16]
   28516:	9b06      	ldr	r3, [sp, #24]
   28518:	46a8      	mov	r8, r5
   2851a:	4699      	mov	r9, r3
   2851c:	4655      	mov	r5, sl
   2851e:	46ba      	mov	sl, r7
   28520:	2e39      	cmp	r6, #57	; 0x39
   28522:	d04d      	beq.n	285c0 <_dtoa_r+0xe90>
   28524:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28526:	3601      	adds	r6, #1
   28528:	4647      	mov	r7, r8
   2852a:	1c6c      	adds	r4, r5, #1
   2852c:	702e      	strb	r6, [r5, #0]
   2852e:	4698      	mov	r8, r3
   28530:	e5f5      	b.n	2811e <_dtoa_r+0x9ee>
   28532:	4642      	mov	r2, r8
   28534:	9b06      	ldr	r3, [sp, #24]
   28536:	46b3      	mov	fp, r6
   28538:	46ba      	mov	sl, r7
   2853a:	9e04      	ldr	r6, [sp, #16]
   2853c:	4699      	mov	r9, r3
   2853e:	002f      	movs	r7, r5
   28540:	4690      	mov	r8, r2
   28542:	e5d1      	b.n	280e8 <_dtoa_r+0x9b8>
   28544:	9b06      	ldr	r3, [sp, #24]
   28546:	9a07      	ldr	r2, [sp, #28]
   28548:	1a9b      	subs	r3, r3, r2
   2854a:	9308      	str	r3, [sp, #32]
   2854c:	2300      	movs	r3, #0
   2854e:	e427      	b.n	27da0 <_dtoa_r+0x670>
   28550:	2401      	movs	r4, #1
   28552:	e5c5      	b.n	280e0 <_dtoa_r+0x9b0>
   28554:	2336      	movs	r3, #54	; 0x36
   28556:	9a16      	ldr	r2, [sp, #88]	; 0x58
   28558:	464c      	mov	r4, r9
   2855a:	1a9b      	subs	r3, r3, r2
   2855c:	9a06      	ldr	r2, [sp, #24]
   2855e:	9208      	str	r2, [sp, #32]
   28560:	e41e      	b.n	27da0 <_dtoa_r+0x670>
   28562:	2302      	movs	r3, #2
   28564:	9e10      	ldr	r6, [sp, #64]	; 0x40
   28566:	9f11      	ldr	r7, [sp, #68]	; 0x44
   28568:	4698      	mov	r8, r3
   2856a:	f7ff fa31 	bl	279d0 <_dtoa_r+0x2a0>
   2856e:	9b07      	ldr	r3, [sp, #28]
   28570:	2b00      	cmp	r3, #0
   28572:	d100      	bne.n	28576 <_dtoa_r+0xe46>
   28574:	e68e      	b.n	28294 <_dtoa_r+0xb64>
   28576:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   28578:	2c00      	cmp	r4, #0
   2857a:	dc00      	bgt.n	2857e <_dtoa_r+0xe4e>
   2857c:	e712      	b.n	283a4 <_dtoa_r+0xc74>
   2857e:	9b03      	ldr	r3, [sp, #12]
   28580:	2200      	movs	r2, #0
   28582:	3b01      	subs	r3, #1
   28584:	9313      	str	r3, [sp, #76]	; 0x4c
   28586:	0030      	movs	r0, r6
   28588:	4b47      	ldr	r3, [pc, #284]	; (286a8 <_dtoa_r+0xf78>)
   2858a:	0039      	movs	r1, r7
   2858c:	f7fa fef2 	bl	23374 <__aeabi_dmul>
   28590:	0006      	movs	r6, r0
   28592:	4640      	mov	r0, r8
   28594:	000f      	movs	r7, r1
   28596:	3001      	adds	r0, #1
   28598:	f7fb fcb6 	bl	23f08 <__aeabi_i2d>
   2859c:	0032      	movs	r2, r6
   2859e:	003b      	movs	r3, r7
   285a0:	f7fa fee8 	bl	23374 <__aeabi_dmul>
   285a4:	2200      	movs	r2, #0
   285a6:	4b42      	ldr	r3, [pc, #264]	; (286b0 <_dtoa_r+0xf80>)
   285a8:	f7f9 ffa0 	bl	224ec <__aeabi_dadd>
   285ac:	4a41      	ldr	r2, [pc, #260]	; (286b4 <_dtoa_r+0xf84>)
   285ae:	000b      	movs	r3, r1
   285b0:	4694      	mov	ip, r2
   285b2:	4463      	add	r3, ip
   285b4:	9008      	str	r0, [sp, #32]
   285b6:	9109      	str	r1, [sp, #36]	; 0x24
   285b8:	9412      	str	r4, [sp, #72]	; 0x48
   285ba:	9309      	str	r3, [sp, #36]	; 0x24
   285bc:	f7ff fa30 	bl	27a20 <_dtoa_r+0x2f0>
   285c0:	2339      	movs	r3, #57	; 0x39
   285c2:	702b      	strb	r3, [r5, #0]
   285c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   285c6:	4647      	mov	r7, r8
   285c8:	1c6c      	adds	r4, r5, #1
   285ca:	4698      	mov	r8, r3
   285cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   285ce:	2339      	movs	r3, #57	; 0x39
   285d0:	e5a1      	b.n	28116 <_dtoa_r+0x9e6>
   285d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   285d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   285d6:	2000      	movs	r0, #0
   285d8:	4934      	ldr	r1, [pc, #208]	; (286ac <_dtoa_r+0xf7c>)
   285da:	f7fb f94b 	bl	23874 <__aeabi_dsub>
   285de:	9a08      	ldr	r2, [sp, #32]
   285e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   285e2:	f7f8 fee1 	bl	213a8 <__aeabi_dcmpgt>
   285e6:	2800      	cmp	r0, #0
   285e8:	d101      	bne.n	285ee <_dtoa_r+0xebe>
   285ea:	e6db      	b.n	283a4 <_dtoa_r+0xc74>
   285ec:	001c      	movs	r4, r3
   285ee:	1e63      	subs	r3, r4, #1
   285f0:	781a      	ldrb	r2, [r3, #0]
   285f2:	2a30      	cmp	r2, #48	; 0x30
   285f4:	d0fa      	beq.n	285ec <_dtoa_r+0xebc>
   285f6:	f7ff fac8 	bl	27b8a <_dtoa_r+0x45a>
   285fa:	4643      	mov	r3, r8
   285fc:	46b3      	mov	fp, r6
   285fe:	930c      	str	r3, [sp, #48]	; 0x30
   28600:	9e04      	ldr	r6, [sp, #16]
   28602:	9b06      	ldr	r3, [sp, #24]
   28604:	46a8      	mov	r8, r5
   28606:	4699      	mov	r9, r3
   28608:	4655      	mov	r5, sl
   2860a:	46ba      	mov	sl, r7
   2860c:	2e39      	cmp	r6, #57	; 0x39
   2860e:	d0d7      	beq.n	285c0 <_dtoa_r+0xe90>
   28610:	2c00      	cmp	r4, #0
   28612:	dd00      	ble.n	28616 <_dtoa_r+0xee6>
   28614:	e6b1      	b.n	2837a <_dtoa_r+0xc4a>
   28616:	e6b2      	b.n	2837e <_dtoa_r+0xc4e>
   28618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2861a:	464d      	mov	r5, r9
   2861c:	9203      	str	r2, [sp, #12]
   2861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28620:	f7ff fba4 	bl	27d6c <_dtoa_r+0x63c>
   28624:	2800      	cmp	r0, #0
   28626:	d000      	beq.n	2862a <_dtoa_r+0xefa>
   28628:	e6a9      	b.n	2837e <_dtoa_r+0xc4e>
   2862a:	07f3      	lsls	r3, r6, #31
   2862c:	d400      	bmi.n	28630 <_dtoa_r+0xf00>
   2862e:	e6a6      	b.n	2837e <_dtoa_r+0xc4e>
   28630:	e6a0      	b.n	28374 <_dtoa_r+0xc44>
   28632:	2300      	movs	r3, #0
   28634:	4641      	mov	r1, r8
   28636:	220a      	movs	r2, #10
   28638:	4650      	mov	r0, sl
   2863a:	f001 f8b7 	bl	297ac <__multadd>
   2863e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28640:	4680      	mov	r8, r0
   28642:	2b00      	cmp	r3, #0
   28644:	dd01      	ble.n	2864a <_dtoa_r+0xf1a>
   28646:	9307      	str	r3, [sp, #28]
   28648:	e486      	b.n	27f58 <_dtoa_r+0x828>
   2864a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2864c:	2b02      	cmp	r3, #2
   2864e:	dc1f      	bgt.n	28690 <_dtoa_r+0xf60>
   28650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28652:	9307      	str	r3, [sp, #28]
   28654:	e480      	b.n	27f58 <_dtoa_r+0x828>
   28656:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28658:	2b02      	cmp	r3, #2
   2865a:	dc19      	bgt.n	28690 <_dtoa_r+0xf60>
   2865c:	4649      	mov	r1, r9
   2865e:	f7fe ffbd 	bl	275dc <quorem>
   28662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28664:	3030      	adds	r0, #48	; 0x30
   28666:	7018      	strb	r0, [r3, #0]
   28668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2866a:	0006      	movs	r6, r0
   2866c:	9307      	str	r3, [sp, #28]
   2866e:	e533      	b.n	280d8 <_dtoa_r+0x9a8>
   28670:	2302      	movs	r3, #2
   28672:	4698      	mov	r8, r3
   28674:	f7ff f9ac 	bl	279d0 <_dtoa_r+0x2a0>
   28678:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2867a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2867c:	9303      	str	r3, [sp, #12]
   2867e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28680:	001d      	movs	r5, r3
   28682:	f7ff fb73 	bl	27d6c <_dtoa_r+0x63c>
   28686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   28688:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2868a:	9303      	str	r3, [sp, #12]
   2868c:	f7ff fa7f 	bl	27b8e <_dtoa_r+0x45e>
   28690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28692:	9307      	str	r3, [sp, #28]
   28694:	e5d6      	b.n	28244 <_dtoa_r+0xb14>
   28696:	2b04      	cmp	r3, #4
   28698:	d100      	bne.n	2869c <_dtoa_r+0xf6c>
   2869a:	e43f      	b.n	27f1c <_dtoa_r+0x7ec>
   2869c:	233c      	movs	r3, #60	; 0x3c
   2869e:	1a18      	subs	r0, r3, r0
   286a0:	e4d7      	b.n	28052 <_dtoa_r+0x922>
   286a2:	46c0      	nop			; (mov r8, r8)
   286a4:	0002d300 	.word	0x0002d300
   286a8:	40240000 	.word	0x40240000
   286ac:	3fe00000 	.word	0x3fe00000
   286b0:	401c0000 	.word	0x401c0000
   286b4:	fcc00000 	.word	0xfcc00000

000286b8 <__sflush_r>:
   286b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   286ba:	46c6      	mov	lr, r8
   286bc:	b500      	push	{lr}
   286be:	230c      	movs	r3, #12
   286c0:	5eca      	ldrsh	r2, [r1, r3]
   286c2:	4680      	mov	r8, r0
   286c4:	b293      	uxth	r3, r2
   286c6:	000c      	movs	r4, r1
   286c8:	0719      	lsls	r1, r3, #28
   286ca:	d440      	bmi.n	2874e <__sflush_r+0x96>
   286cc:	2380      	movs	r3, #128	; 0x80
   286ce:	011b      	lsls	r3, r3, #4
   286d0:	4313      	orrs	r3, r2
   286d2:	6862      	ldr	r2, [r4, #4]
   286d4:	81a3      	strh	r3, [r4, #12]
   286d6:	2a00      	cmp	r2, #0
   286d8:	dc00      	bgt.n	286dc <__sflush_r+0x24>
   286da:	e070      	b.n	287be <__sflush_r+0x106>
   286dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   286de:	2e00      	cmp	r6, #0
   286e0:	d031      	beq.n	28746 <__sflush_r+0x8e>
   286e2:	4642      	mov	r2, r8
   286e4:	4641      	mov	r1, r8
   286e6:	6815      	ldr	r5, [r2, #0]
   286e8:	2200      	movs	r2, #0
   286ea:	b29b      	uxth	r3, r3
   286ec:	600a      	str	r2, [r1, #0]
   286ee:	04da      	lsls	r2, r3, #19
   286f0:	d400      	bmi.n	286f4 <__sflush_r+0x3c>
   286f2:	e069      	b.n	287c8 <__sflush_r+0x110>
   286f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   286f6:	075b      	lsls	r3, r3, #29
   286f8:	d506      	bpl.n	28708 <__sflush_r+0x50>
   286fa:	6863      	ldr	r3, [r4, #4]
   286fc:	1ad2      	subs	r2, r2, r3
   286fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28700:	2b00      	cmp	r3, #0
   28702:	d001      	beq.n	28708 <__sflush_r+0x50>
   28704:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   28706:	1ad2      	subs	r2, r2, r3
   28708:	2300      	movs	r3, #0
   2870a:	69e1      	ldr	r1, [r4, #28]
   2870c:	4640      	mov	r0, r8
   2870e:	47b0      	blx	r6
   28710:	1c43      	adds	r3, r0, #1
   28712:	d03d      	beq.n	28790 <__sflush_r+0xd8>
   28714:	89a3      	ldrh	r3, [r4, #12]
   28716:	4a3a      	ldr	r2, [pc, #232]	; (28800 <__sflush_r+0x148>)
   28718:	4013      	ands	r3, r2
   2871a:	2200      	movs	r2, #0
   2871c:	6062      	str	r2, [r4, #4]
   2871e:	6922      	ldr	r2, [r4, #16]
   28720:	b21b      	sxth	r3, r3
   28722:	81a3      	strh	r3, [r4, #12]
   28724:	6022      	str	r2, [r4, #0]
   28726:	04db      	lsls	r3, r3, #19
   28728:	d447      	bmi.n	287ba <__sflush_r+0x102>
   2872a:	4643      	mov	r3, r8
   2872c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2872e:	601d      	str	r5, [r3, #0]
   28730:	2900      	cmp	r1, #0
   28732:	d008      	beq.n	28746 <__sflush_r+0x8e>
   28734:	0023      	movs	r3, r4
   28736:	3340      	adds	r3, #64	; 0x40
   28738:	4299      	cmp	r1, r3
   2873a:	d002      	beq.n	28742 <__sflush_r+0x8a>
   2873c:	4640      	mov	r0, r8
   2873e:	f000 f967 	bl	28a10 <_free_r>
   28742:	2300      	movs	r3, #0
   28744:	6323      	str	r3, [r4, #48]	; 0x30
   28746:	2000      	movs	r0, #0
   28748:	bc04      	pop	{r2}
   2874a:	4690      	mov	r8, r2
   2874c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2874e:	6926      	ldr	r6, [r4, #16]
   28750:	2e00      	cmp	r6, #0
   28752:	d0f8      	beq.n	28746 <__sflush_r+0x8e>
   28754:	6822      	ldr	r2, [r4, #0]
   28756:	6026      	str	r6, [r4, #0]
   28758:	1b95      	subs	r5, r2, r6
   2875a:	2200      	movs	r2, #0
   2875c:	079b      	lsls	r3, r3, #30
   2875e:	d100      	bne.n	28762 <__sflush_r+0xaa>
   28760:	6962      	ldr	r2, [r4, #20]
   28762:	60a2      	str	r2, [r4, #8]
   28764:	2d00      	cmp	r5, #0
   28766:	dc04      	bgt.n	28772 <__sflush_r+0xba>
   28768:	e7ed      	b.n	28746 <__sflush_r+0x8e>
   2876a:	1836      	adds	r6, r6, r0
   2876c:	1a2d      	subs	r5, r5, r0
   2876e:	2d00      	cmp	r5, #0
   28770:	dde9      	ble.n	28746 <__sflush_r+0x8e>
   28772:	002b      	movs	r3, r5
   28774:	0032      	movs	r2, r6
   28776:	69e1      	ldr	r1, [r4, #28]
   28778:	4640      	mov	r0, r8
   2877a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2877c:	47b8      	blx	r7
   2877e:	2800      	cmp	r0, #0
   28780:	dcf3      	bgt.n	2876a <__sflush_r+0xb2>
   28782:	2240      	movs	r2, #64	; 0x40
   28784:	2001      	movs	r0, #1
   28786:	89a3      	ldrh	r3, [r4, #12]
   28788:	4240      	negs	r0, r0
   2878a:	4313      	orrs	r3, r2
   2878c:	81a3      	strh	r3, [r4, #12]
   2878e:	e7db      	b.n	28748 <__sflush_r+0x90>
   28790:	4643      	mov	r3, r8
   28792:	6819      	ldr	r1, [r3, #0]
   28794:	291d      	cmp	r1, #29
   28796:	d8f4      	bhi.n	28782 <__sflush_r+0xca>
   28798:	4b1a      	ldr	r3, [pc, #104]	; (28804 <__sflush_r+0x14c>)
   2879a:	2201      	movs	r2, #1
   2879c:	40cb      	lsrs	r3, r1
   2879e:	439a      	bics	r2, r3
   287a0:	d1ef      	bne.n	28782 <__sflush_r+0xca>
   287a2:	89a3      	ldrh	r3, [r4, #12]
   287a4:	4e16      	ldr	r6, [pc, #88]	; (28800 <__sflush_r+0x148>)
   287a6:	6062      	str	r2, [r4, #4]
   287a8:	4033      	ands	r3, r6
   287aa:	6922      	ldr	r2, [r4, #16]
   287ac:	b21b      	sxth	r3, r3
   287ae:	81a3      	strh	r3, [r4, #12]
   287b0:	6022      	str	r2, [r4, #0]
   287b2:	04db      	lsls	r3, r3, #19
   287b4:	d5b9      	bpl.n	2872a <__sflush_r+0x72>
   287b6:	2900      	cmp	r1, #0
   287b8:	d1b7      	bne.n	2872a <__sflush_r+0x72>
   287ba:	6520      	str	r0, [r4, #80]	; 0x50
   287bc:	e7b5      	b.n	2872a <__sflush_r+0x72>
   287be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   287c0:	2a00      	cmp	r2, #0
   287c2:	dd00      	ble.n	287c6 <__sflush_r+0x10e>
   287c4:	e78a      	b.n	286dc <__sflush_r+0x24>
   287c6:	e7be      	b.n	28746 <__sflush_r+0x8e>
   287c8:	2200      	movs	r2, #0
   287ca:	2301      	movs	r3, #1
   287cc:	69e1      	ldr	r1, [r4, #28]
   287ce:	4640      	mov	r0, r8
   287d0:	47b0      	blx	r6
   287d2:	0002      	movs	r2, r0
   287d4:	1c43      	adds	r3, r0, #1
   287d6:	d002      	beq.n	287de <__sflush_r+0x126>
   287d8:	89a3      	ldrh	r3, [r4, #12]
   287da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   287dc:	e78b      	b.n	286f6 <__sflush_r+0x3e>
   287de:	4643      	mov	r3, r8
   287e0:	681b      	ldr	r3, [r3, #0]
   287e2:	2b00      	cmp	r3, #0
   287e4:	d0f8      	beq.n	287d8 <__sflush_r+0x120>
   287e6:	2b1d      	cmp	r3, #29
   287e8:	d001      	beq.n	287ee <__sflush_r+0x136>
   287ea:	2b16      	cmp	r3, #22
   287ec:	d103      	bne.n	287f6 <__sflush_r+0x13e>
   287ee:	4643      	mov	r3, r8
   287f0:	2000      	movs	r0, #0
   287f2:	601d      	str	r5, [r3, #0]
   287f4:	e7a8      	b.n	28748 <__sflush_r+0x90>
   287f6:	2140      	movs	r1, #64	; 0x40
   287f8:	89a3      	ldrh	r3, [r4, #12]
   287fa:	430b      	orrs	r3, r1
   287fc:	81a3      	strh	r3, [r4, #12]
   287fe:	e7a3      	b.n	28748 <__sflush_r+0x90>
   28800:	fffff7ff 	.word	0xfffff7ff
   28804:	20400001 	.word	0x20400001

00028808 <_fflush_r>:
   28808:	b570      	push	{r4, r5, r6, lr}
   2880a:	0005      	movs	r5, r0
   2880c:	000c      	movs	r4, r1
   2880e:	2800      	cmp	r0, #0
   28810:	d002      	beq.n	28818 <_fflush_r+0x10>
   28812:	6b83      	ldr	r3, [r0, #56]	; 0x38
   28814:	2b00      	cmp	r3, #0
   28816:	d016      	beq.n	28846 <_fflush_r+0x3e>
   28818:	220c      	movs	r2, #12
   2881a:	5ea3      	ldrsh	r3, [r4, r2]
   2881c:	2600      	movs	r6, #0
   2881e:	2b00      	cmp	r3, #0
   28820:	d00f      	beq.n	28842 <_fflush_r+0x3a>
   28822:	6e62      	ldr	r2, [r4, #100]	; 0x64
   28824:	07d2      	lsls	r2, r2, #31
   28826:	d401      	bmi.n	2882c <_fflush_r+0x24>
   28828:	059b      	lsls	r3, r3, #22
   2882a:	d513      	bpl.n	28854 <_fflush_r+0x4c>
   2882c:	0021      	movs	r1, r4
   2882e:	0028      	movs	r0, r5
   28830:	f7ff ff42 	bl	286b8 <__sflush_r>
   28834:	6e63      	ldr	r3, [r4, #100]	; 0x64
   28836:	0006      	movs	r6, r0
   28838:	07db      	lsls	r3, r3, #31
   2883a:	d402      	bmi.n	28842 <_fflush_r+0x3a>
   2883c:	89a3      	ldrh	r3, [r4, #12]
   2883e:	059b      	lsls	r3, r3, #22
   28840:	d504      	bpl.n	2884c <_fflush_r+0x44>
   28842:	0030      	movs	r0, r6
   28844:	bd70      	pop	{r4, r5, r6, pc}
   28846:	f000 f839 	bl	288bc <__sinit>
   2884a:	e7e5      	b.n	28818 <_fflush_r+0x10>
   2884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2884e:	f000 fb8d 	bl	28f6c <__retarget_lock_release_recursive>
   28852:	e7f6      	b.n	28842 <_fflush_r+0x3a>
   28854:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28856:	f000 fb87 	bl	28f68 <__retarget_lock_acquire_recursive>
   2885a:	e7e7      	b.n	2882c <_fflush_r+0x24>

0002885c <_cleanup_r>:
   2885c:	b510      	push	{r4, lr}
   2885e:	4902      	ldr	r1, [pc, #8]	; (28868 <_cleanup_r+0xc>)
   28860:	f000 fb36 	bl	28ed0 <_fwalk_reent>
   28864:	bd10      	pop	{r4, pc}
   28866:	46c0      	nop			; (mov r8, r8)
   28868:	0002a581 	.word	0x0002a581

0002886c <std.isra.0>:
   2886c:	2300      	movs	r3, #0
   2886e:	b510      	push	{r4, lr}
   28870:	0004      	movs	r4, r0
   28872:	6003      	str	r3, [r0, #0]
   28874:	6043      	str	r3, [r0, #4]
   28876:	6083      	str	r3, [r0, #8]
   28878:	8181      	strh	r1, [r0, #12]
   2887a:	6643      	str	r3, [r0, #100]	; 0x64
   2887c:	81c2      	strh	r2, [r0, #14]
   2887e:	6103      	str	r3, [r0, #16]
   28880:	6143      	str	r3, [r0, #20]
   28882:	6183      	str	r3, [r0, #24]
   28884:	2208      	movs	r2, #8
   28886:	2100      	movs	r1, #0
   28888:	305c      	adds	r0, #92	; 0x5c
   2888a:	f7fb fc9f 	bl	241cc <memset>
   2888e:	0020      	movs	r0, r4
   28890:	4b06      	ldr	r3, [pc, #24]	; (288ac <std.isra.0+0x40>)
   28892:	61e4      	str	r4, [r4, #28]
   28894:	6223      	str	r3, [r4, #32]
   28896:	4b06      	ldr	r3, [pc, #24]	; (288b0 <std.isra.0+0x44>)
   28898:	3058      	adds	r0, #88	; 0x58
   2889a:	6263      	str	r3, [r4, #36]	; 0x24
   2889c:	4b05      	ldr	r3, [pc, #20]	; (288b4 <std.isra.0+0x48>)
   2889e:	62a3      	str	r3, [r4, #40]	; 0x28
   288a0:	4b05      	ldr	r3, [pc, #20]	; (288b8 <std.isra.0+0x4c>)
   288a2:	62e3      	str	r3, [r4, #44]	; 0x2c
   288a4:	f000 fb5c 	bl	28f60 <__retarget_lock_init_recursive>
   288a8:	bd10      	pop	{r4, pc}
   288aa:	46c0      	nop			; (mov r8, r8)
   288ac:	0002a179 	.word	0x0002a179
   288b0:	0002a1a1 	.word	0x0002a1a1
   288b4:	0002a1dd 	.word	0x0002a1dd
   288b8:	0002a209 	.word	0x0002a209

000288bc <__sinit>:
   288bc:	b570      	push	{r4, r5, r6, lr}
   288be:	0004      	movs	r4, r0
   288c0:	4d14      	ldr	r5, [pc, #80]	; (28914 <__sinit+0x58>)
   288c2:	0028      	movs	r0, r5
   288c4:	f000 fb50 	bl	28f68 <__retarget_lock_acquire_recursive>
   288c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   288ca:	2b00      	cmp	r3, #0
   288cc:	d11d      	bne.n	2890a <__sinit+0x4e>
   288ce:	4a12      	ldr	r2, [pc, #72]	; (28918 <__sinit+0x5c>)
   288d0:	2104      	movs	r1, #4
   288d2:	63e2      	str	r2, [r4, #60]	; 0x3c
   288d4:	22b8      	movs	r2, #184	; 0xb8
   288d6:	0092      	lsls	r2, r2, #2
   288d8:	50a3      	str	r3, [r4, r2]
   288da:	23b9      	movs	r3, #185	; 0xb9
   288dc:	2203      	movs	r2, #3
   288de:	009b      	lsls	r3, r3, #2
   288e0:	50e2      	str	r2, [r4, r3]
   288e2:	3308      	adds	r3, #8
   288e4:	18e2      	adds	r2, r4, r3
   288e6:	3b04      	subs	r3, #4
   288e8:	50e2      	str	r2, [r4, r3]
   288ea:	6860      	ldr	r0, [r4, #4]
   288ec:	2200      	movs	r2, #0
   288ee:	f7ff ffbd 	bl	2886c <std.isra.0>
   288f2:	2201      	movs	r2, #1
   288f4:	2109      	movs	r1, #9
   288f6:	68a0      	ldr	r0, [r4, #8]
   288f8:	f7ff ffb8 	bl	2886c <std.isra.0>
   288fc:	2202      	movs	r2, #2
   288fe:	2112      	movs	r1, #18
   28900:	68e0      	ldr	r0, [r4, #12]
   28902:	f7ff ffb3 	bl	2886c <std.isra.0>
   28906:	2301      	movs	r3, #1
   28908:	63a3      	str	r3, [r4, #56]	; 0x38
   2890a:	0028      	movs	r0, r5
   2890c:	f000 fb2e 	bl	28f6c <__retarget_lock_release_recursive>
   28910:	bd70      	pop	{r4, r5, r6, pc}
   28912:	46c0      	nop			; (mov r8, r8)
   28914:	20002054 	.word	0x20002054
   28918:	0002885d 	.word	0x0002885d

0002891c <__sfp_lock_acquire>:
   2891c:	b510      	push	{r4, lr}
   2891e:	4802      	ldr	r0, [pc, #8]	; (28928 <__sfp_lock_acquire+0xc>)
   28920:	f000 fb22 	bl	28f68 <__retarget_lock_acquire_recursive>
   28924:	bd10      	pop	{r4, pc}
   28926:	46c0      	nop			; (mov r8, r8)
   28928:	20002068 	.word	0x20002068

0002892c <__sfp_lock_release>:
   2892c:	b510      	push	{r4, lr}
   2892e:	4802      	ldr	r0, [pc, #8]	; (28938 <__sfp_lock_release+0xc>)
   28930:	f000 fb1c 	bl	28f6c <__retarget_lock_release_recursive>
   28934:	bd10      	pop	{r4, pc}
   28936:	46c0      	nop			; (mov r8, r8)
   28938:	20002068 	.word	0x20002068

0002893c <__libc_fini_array>:
   2893c:	b570      	push	{r4, r5, r6, lr}
   2893e:	4b09      	ldr	r3, [pc, #36]	; (28964 <__libc_fini_array+0x28>)
   28940:	4c09      	ldr	r4, [pc, #36]	; (28968 <__libc_fini_array+0x2c>)
   28942:	1ae4      	subs	r4, r4, r3
   28944:	10a4      	asrs	r4, r4, #2
   28946:	d009      	beq.n	2895c <__libc_fini_array+0x20>
   28948:	4a08      	ldr	r2, [pc, #32]	; (2896c <__libc_fini_array+0x30>)
   2894a:	18a5      	adds	r5, r4, r2
   2894c:	00ad      	lsls	r5, r5, #2
   2894e:	18ed      	adds	r5, r5, r3
   28950:	682b      	ldr	r3, [r5, #0]
   28952:	3c01      	subs	r4, #1
   28954:	4798      	blx	r3
   28956:	3d04      	subs	r5, #4
   28958:	2c00      	cmp	r4, #0
   2895a:	d1f9      	bne.n	28950 <__libc_fini_array+0x14>
   2895c:	f004 fdc6 	bl	2d4ec <_fini>
   28960:	bd70      	pop	{r4, r5, r6, pc}
   28962:	46c0      	nop			; (mov r8, r8)
   28964:	0002d4f8 	.word	0x0002d4f8
   28968:	0002d4fc 	.word	0x0002d4fc
   2896c:	3fffffff 	.word	0x3fffffff

00028970 <_malloc_trim_r>:
   28970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28972:	000c      	movs	r4, r1
   28974:	0006      	movs	r6, r0
   28976:	f000 fed7 	bl	29728 <__malloc_lock>
   2897a:	4f20      	ldr	r7, [pc, #128]	; (289fc <_malloc_trim_r+0x8c>)
   2897c:	68bb      	ldr	r3, [r7, #8]
   2897e:	685d      	ldr	r5, [r3, #4]
   28980:	2303      	movs	r3, #3
   28982:	439d      	bics	r5, r3
   28984:	4b1e      	ldr	r3, [pc, #120]	; (28a00 <_malloc_trim_r+0x90>)
   28986:	1b2c      	subs	r4, r5, r4
   28988:	469c      	mov	ip, r3
   2898a:	4464      	add	r4, ip
   2898c:	0b24      	lsrs	r4, r4, #12
   2898e:	4b1d      	ldr	r3, [pc, #116]	; (28a04 <_malloc_trim_r+0x94>)
   28990:	3c01      	subs	r4, #1
   28992:	0324      	lsls	r4, r4, #12
   28994:	429c      	cmp	r4, r3
   28996:	dd07      	ble.n	289a8 <_malloc_trim_r+0x38>
   28998:	2100      	movs	r1, #0
   2899a:	0030      	movs	r0, r6
   2899c:	f001 fbda 	bl	2a154 <_sbrk_r>
   289a0:	68bb      	ldr	r3, [r7, #8]
   289a2:	195b      	adds	r3, r3, r5
   289a4:	4298      	cmp	r0, r3
   289a6:	d004      	beq.n	289b2 <_malloc_trim_r+0x42>
   289a8:	0030      	movs	r0, r6
   289aa:	f000 fec5 	bl	29738 <__malloc_unlock>
   289ae:	2000      	movs	r0, #0
   289b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   289b2:	4261      	negs	r1, r4
   289b4:	0030      	movs	r0, r6
   289b6:	f001 fbcd 	bl	2a154 <_sbrk_r>
   289ba:	1c43      	adds	r3, r0, #1
   289bc:	d00d      	beq.n	289da <_malloc_trim_r+0x6a>
   289be:	2201      	movs	r2, #1
   289c0:	68bb      	ldr	r3, [r7, #8]
   289c2:	1b2d      	subs	r5, r5, r4
   289c4:	4315      	orrs	r5, r2
   289c6:	605d      	str	r5, [r3, #4]
   289c8:	4b0f      	ldr	r3, [pc, #60]	; (28a08 <_malloc_trim_r+0x98>)
   289ca:	0030      	movs	r0, r6
   289cc:	681a      	ldr	r2, [r3, #0]
   289ce:	1b14      	subs	r4, r2, r4
   289d0:	601c      	str	r4, [r3, #0]
   289d2:	f000 feb1 	bl	29738 <__malloc_unlock>
   289d6:	2001      	movs	r0, #1
   289d8:	e7ea      	b.n	289b0 <_malloc_trim_r+0x40>
   289da:	2100      	movs	r1, #0
   289dc:	0030      	movs	r0, r6
   289de:	f001 fbb9 	bl	2a154 <_sbrk_r>
   289e2:	68ba      	ldr	r2, [r7, #8]
   289e4:	1a83      	subs	r3, r0, r2
   289e6:	2b0f      	cmp	r3, #15
   289e8:	ddde      	ble.n	289a8 <_malloc_trim_r+0x38>
   289ea:	4908      	ldr	r1, [pc, #32]	; (28a0c <_malloc_trim_r+0x9c>)
   289ec:	6809      	ldr	r1, [r1, #0]
   289ee:	1a40      	subs	r0, r0, r1
   289f0:	4905      	ldr	r1, [pc, #20]	; (28a08 <_malloc_trim_r+0x98>)
   289f2:	6008      	str	r0, [r1, #0]
   289f4:	2101      	movs	r1, #1
   289f6:	430b      	orrs	r3, r1
   289f8:	6053      	str	r3, [r2, #4]
   289fa:	e7d5      	b.n	289a8 <_malloc_trim_r+0x38>
   289fc:	20000788 	.word	0x20000788
   28a00:	00000fef 	.word	0x00000fef
   28a04:	00000fff 	.word	0x00000fff
   28a08:	20001190 	.word	0x20001190
   28a0c:	20000b90 	.word	0x20000b90

00028a10 <_free_r>:
   28a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28a12:	0004      	movs	r4, r0
   28a14:	1e0d      	subs	r5, r1, #0
   28a16:	d03c      	beq.n	28a92 <_free_r+0x82>
   28a18:	f000 fe86 	bl	29728 <__malloc_lock>
   28a1c:	0029      	movs	r1, r5
   28a1e:	3908      	subs	r1, #8
   28a20:	6848      	ldr	r0, [r1, #4]
   28a22:	2301      	movs	r3, #1
   28a24:	0005      	movs	r5, r0
   28a26:	2603      	movs	r6, #3
   28a28:	439d      	bics	r5, r3
   28a2a:	194a      	adds	r2, r1, r5
   28a2c:	469c      	mov	ip, r3
   28a2e:	4f61      	ldr	r7, [pc, #388]	; (28bb4 <_free_r+0x1a4>)
   28a30:	6853      	ldr	r3, [r2, #4]
   28a32:	43b3      	bics	r3, r6
   28a34:	68be      	ldr	r6, [r7, #8]
   28a36:	42b2      	cmp	r2, r6
   28a38:	d056      	beq.n	28ae8 <_free_r+0xd8>
   28a3a:	4666      	mov	r6, ip
   28a3c:	6053      	str	r3, [r2, #4]
   28a3e:	4206      	tst	r6, r0
   28a40:	d10a      	bne.n	28a58 <_free_r+0x48>
   28a42:	003e      	movs	r6, r7
   28a44:	6808      	ldr	r0, [r1, #0]
   28a46:	3608      	adds	r6, #8
   28a48:	1a09      	subs	r1, r1, r0
   28a4a:	182d      	adds	r5, r5, r0
   28a4c:	6888      	ldr	r0, [r1, #8]
   28a4e:	42b0      	cmp	r0, r6
   28a50:	d065      	beq.n	28b1e <_free_r+0x10e>
   28a52:	68ce      	ldr	r6, [r1, #12]
   28a54:	60c6      	str	r6, [r0, #12]
   28a56:	60b0      	str	r0, [r6, #8]
   28a58:	2001      	movs	r0, #1
   28a5a:	18d6      	adds	r6, r2, r3
   28a5c:	6876      	ldr	r6, [r6, #4]
   28a5e:	4206      	tst	r6, r0
   28a60:	d033      	beq.n	28aca <_free_r+0xba>
   28a62:	4b55      	ldr	r3, [pc, #340]	; (28bb8 <_free_r+0x1a8>)
   28a64:	4328      	orrs	r0, r5
   28a66:	6048      	str	r0, [r1, #4]
   28a68:	514d      	str	r5, [r1, r5]
   28a6a:	429d      	cmp	r5, r3
   28a6c:	d812      	bhi.n	28a94 <_free_r+0x84>
   28a6e:	08ed      	lsrs	r5, r5, #3
   28a70:	3bff      	subs	r3, #255	; 0xff
   28a72:	10aa      	asrs	r2, r5, #2
   28a74:	3bff      	subs	r3, #255	; 0xff
   28a76:	4093      	lsls	r3, r2
   28a78:	687a      	ldr	r2, [r7, #4]
   28a7a:	00ed      	lsls	r5, r5, #3
   28a7c:	4313      	orrs	r3, r2
   28a7e:	607b      	str	r3, [r7, #4]
   28a80:	19ef      	adds	r7, r5, r7
   28a82:	68bb      	ldr	r3, [r7, #8]
   28a84:	60cf      	str	r7, [r1, #12]
   28a86:	608b      	str	r3, [r1, #8]
   28a88:	60b9      	str	r1, [r7, #8]
   28a8a:	60d9      	str	r1, [r3, #12]
   28a8c:	0020      	movs	r0, r4
   28a8e:	f000 fe53 	bl	29738 <__malloc_unlock>
   28a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28a94:	0a68      	lsrs	r0, r5, #9
   28a96:	2804      	cmp	r0, #4
   28a98:	d850      	bhi.n	28b3c <_free_r+0x12c>
   28a9a:	09a8      	lsrs	r0, r5, #6
   28a9c:	0002      	movs	r2, r0
   28a9e:	3039      	adds	r0, #57	; 0x39
   28aa0:	3238      	adds	r2, #56	; 0x38
   28aa2:	00c0      	lsls	r0, r0, #3
   28aa4:	1838      	adds	r0, r7, r0
   28aa6:	3808      	subs	r0, #8
   28aa8:	6883      	ldr	r3, [r0, #8]
   28aaa:	2603      	movs	r6, #3
   28aac:	4298      	cmp	r0, r3
   28aae:	d04c      	beq.n	28b4a <_free_r+0x13a>
   28ab0:	685a      	ldr	r2, [r3, #4]
   28ab2:	43b2      	bics	r2, r6
   28ab4:	4295      	cmp	r5, r2
   28ab6:	d230      	bcs.n	28b1a <_free_r+0x10a>
   28ab8:	689b      	ldr	r3, [r3, #8]
   28aba:	4298      	cmp	r0, r3
   28abc:	d1f8      	bne.n	28ab0 <_free_r+0xa0>
   28abe:	68c3      	ldr	r3, [r0, #12]
   28ac0:	60cb      	str	r3, [r1, #12]
   28ac2:	6088      	str	r0, [r1, #8]
   28ac4:	6099      	str	r1, [r3, #8]
   28ac6:	60c1      	str	r1, [r0, #12]
   28ac8:	e7e0      	b.n	28a8c <_free_r+0x7c>
   28aca:	18ed      	adds	r5, r5, r3
   28acc:	4e3b      	ldr	r6, [pc, #236]	; (28bbc <_free_r+0x1ac>)
   28ace:	6893      	ldr	r3, [r2, #8]
   28ad0:	42b3      	cmp	r3, r6
   28ad2:	d042      	beq.n	28b5a <_free_r+0x14a>
   28ad4:	68d2      	ldr	r2, [r2, #12]
   28ad6:	4328      	orrs	r0, r5
   28ad8:	60da      	str	r2, [r3, #12]
   28ada:	6093      	str	r3, [r2, #8]
   28adc:	4b36      	ldr	r3, [pc, #216]	; (28bb8 <_free_r+0x1a8>)
   28ade:	6048      	str	r0, [r1, #4]
   28ae0:	514d      	str	r5, [r1, r5]
   28ae2:	429d      	cmp	r5, r3
   28ae4:	d8d6      	bhi.n	28a94 <_free_r+0x84>
   28ae6:	e7c2      	b.n	28a6e <_free_r+0x5e>
   28ae8:	4662      	mov	r2, ip
   28aea:	18eb      	adds	r3, r5, r3
   28aec:	4202      	tst	r2, r0
   28aee:	d106      	bne.n	28afe <_free_r+0xee>
   28af0:	680a      	ldr	r2, [r1, #0]
   28af2:	1a89      	subs	r1, r1, r2
   28af4:	6888      	ldr	r0, [r1, #8]
   28af6:	189b      	adds	r3, r3, r2
   28af8:	68ca      	ldr	r2, [r1, #12]
   28afa:	60c2      	str	r2, [r0, #12]
   28afc:	6090      	str	r0, [r2, #8]
   28afe:	2201      	movs	r2, #1
   28b00:	431a      	orrs	r2, r3
   28b02:	604a      	str	r2, [r1, #4]
   28b04:	4a2e      	ldr	r2, [pc, #184]	; (28bc0 <_free_r+0x1b0>)
   28b06:	60b9      	str	r1, [r7, #8]
   28b08:	6812      	ldr	r2, [r2, #0]
   28b0a:	4293      	cmp	r3, r2
   28b0c:	d3be      	bcc.n	28a8c <_free_r+0x7c>
   28b0e:	4b2d      	ldr	r3, [pc, #180]	; (28bc4 <_free_r+0x1b4>)
   28b10:	0020      	movs	r0, r4
   28b12:	6819      	ldr	r1, [r3, #0]
   28b14:	f7ff ff2c 	bl	28970 <_malloc_trim_r>
   28b18:	e7b8      	b.n	28a8c <_free_r+0x7c>
   28b1a:	0018      	movs	r0, r3
   28b1c:	e7cf      	b.n	28abe <_free_r+0xae>
   28b1e:	4666      	mov	r6, ip
   28b20:	18d0      	adds	r0, r2, r3
   28b22:	6840      	ldr	r0, [r0, #4]
   28b24:	4230      	tst	r0, r6
   28b26:	d13f      	bne.n	28ba8 <_free_r+0x198>
   28b28:	6890      	ldr	r0, [r2, #8]
   28b2a:	195d      	adds	r5, r3, r5
   28b2c:	68d3      	ldr	r3, [r2, #12]
   28b2e:	60c3      	str	r3, [r0, #12]
   28b30:	6098      	str	r0, [r3, #8]
   28b32:	4663      	mov	r3, ip
   28b34:	432b      	orrs	r3, r5
   28b36:	604b      	str	r3, [r1, #4]
   28b38:	514d      	str	r5, [r1, r5]
   28b3a:	e7a7      	b.n	28a8c <_free_r+0x7c>
   28b3c:	2814      	cmp	r0, #20
   28b3e:	d814      	bhi.n	28b6a <_free_r+0x15a>
   28b40:	0002      	movs	r2, r0
   28b42:	305c      	adds	r0, #92	; 0x5c
   28b44:	325b      	adds	r2, #91	; 0x5b
   28b46:	00c0      	lsls	r0, r0, #3
   28b48:	e7ac      	b.n	28aa4 <_free_r+0x94>
   28b4a:	2301      	movs	r3, #1
   28b4c:	1092      	asrs	r2, r2, #2
   28b4e:	4093      	lsls	r3, r2
   28b50:	687a      	ldr	r2, [r7, #4]
   28b52:	4313      	orrs	r3, r2
   28b54:	607b      	str	r3, [r7, #4]
   28b56:	0003      	movs	r3, r0
   28b58:	e7b2      	b.n	28ac0 <_free_r+0xb0>
   28b5a:	4328      	orrs	r0, r5
   28b5c:	60d9      	str	r1, [r3, #12]
   28b5e:	6099      	str	r1, [r3, #8]
   28b60:	60cb      	str	r3, [r1, #12]
   28b62:	608b      	str	r3, [r1, #8]
   28b64:	6048      	str	r0, [r1, #4]
   28b66:	514d      	str	r5, [r1, r5]
   28b68:	e790      	b.n	28a8c <_free_r+0x7c>
   28b6a:	2854      	cmp	r0, #84	; 0x54
   28b6c:	d805      	bhi.n	28b7a <_free_r+0x16a>
   28b6e:	0b28      	lsrs	r0, r5, #12
   28b70:	0002      	movs	r2, r0
   28b72:	306f      	adds	r0, #111	; 0x6f
   28b74:	326e      	adds	r2, #110	; 0x6e
   28b76:	00c0      	lsls	r0, r0, #3
   28b78:	e794      	b.n	28aa4 <_free_r+0x94>
   28b7a:	22aa      	movs	r2, #170	; 0xaa
   28b7c:	0052      	lsls	r2, r2, #1
   28b7e:	4290      	cmp	r0, r2
   28b80:	d805      	bhi.n	28b8e <_free_r+0x17e>
   28b82:	0be8      	lsrs	r0, r5, #15
   28b84:	0002      	movs	r2, r0
   28b86:	3078      	adds	r0, #120	; 0x78
   28b88:	3277      	adds	r2, #119	; 0x77
   28b8a:	00c0      	lsls	r0, r0, #3
   28b8c:	e78a      	b.n	28aa4 <_free_r+0x94>
   28b8e:	4a0e      	ldr	r2, [pc, #56]	; (28bc8 <_free_r+0x1b8>)
   28b90:	4290      	cmp	r0, r2
   28b92:	d805      	bhi.n	28ba0 <_free_r+0x190>
   28b94:	0ca8      	lsrs	r0, r5, #18
   28b96:	0002      	movs	r2, r0
   28b98:	307d      	adds	r0, #125	; 0x7d
   28b9a:	327c      	adds	r2, #124	; 0x7c
   28b9c:	00c0      	lsls	r0, r0, #3
   28b9e:	e781      	b.n	28aa4 <_free_r+0x94>
   28ba0:	20fe      	movs	r0, #254	; 0xfe
   28ba2:	227e      	movs	r2, #126	; 0x7e
   28ba4:	0080      	lsls	r0, r0, #2
   28ba6:	e77d      	b.n	28aa4 <_free_r+0x94>
   28ba8:	4663      	mov	r3, ip
   28baa:	432b      	orrs	r3, r5
   28bac:	604b      	str	r3, [r1, #4]
   28bae:	6015      	str	r5, [r2, #0]
   28bb0:	e76c      	b.n	28a8c <_free_r+0x7c>
   28bb2:	46c0      	nop			; (mov r8, r8)
   28bb4:	20000788 	.word	0x20000788
   28bb8:	000001ff 	.word	0x000001ff
   28bbc:	20000790 	.word	0x20000790
   28bc0:	20000b94 	.word	0x20000b94
   28bc4:	200011c0 	.word	0x200011c0
   28bc8:	00000554 	.word	0x00000554

00028bcc <__sfvwrite_r>:
   28bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   28bce:	464e      	mov	r6, r9
   28bd0:	46de      	mov	lr, fp
   28bd2:	4657      	mov	r7, sl
   28bd4:	4645      	mov	r5, r8
   28bd6:	b5e0      	push	{r5, r6, r7, lr}
   28bd8:	6893      	ldr	r3, [r2, #8]
   28bda:	b083      	sub	sp, #12
   28bdc:	9000      	str	r0, [sp, #0]
   28bde:	000c      	movs	r4, r1
   28be0:	0016      	movs	r6, r2
   28be2:	2b00      	cmp	r3, #0
   28be4:	d025      	beq.n	28c32 <__sfvwrite_r+0x66>
   28be6:	898b      	ldrh	r3, [r1, #12]
   28be8:	071a      	lsls	r2, r3, #28
   28bea:	d52a      	bpl.n	28c42 <__sfvwrite_r+0x76>
   28bec:	690a      	ldr	r2, [r1, #16]
   28bee:	2a00      	cmp	r2, #0
   28bf0:	d027      	beq.n	28c42 <__sfvwrite_r+0x76>
   28bf2:	6832      	ldr	r2, [r6, #0]
   28bf4:	4693      	mov	fp, r2
   28bf6:	079a      	lsls	r2, r3, #30
   28bf8:	d52f      	bpl.n	28c5a <__sfvwrite_r+0x8e>
   28bfa:	4bb2      	ldr	r3, [pc, #712]	; (28ec4 <__sfvwrite_r+0x2f8>)
   28bfc:	2700      	movs	r7, #0
   28bfe:	2500      	movs	r5, #0
   28c00:	4698      	mov	r8, r3
   28c02:	46b1      	mov	r9, r6
   28c04:	2d00      	cmp	r5, #0
   28c06:	d100      	bne.n	28c0a <__sfvwrite_r+0x3e>
   28c08:	e072      	b.n	28cf0 <__sfvwrite_r+0x124>
   28c0a:	002b      	movs	r3, r5
   28c0c:	4545      	cmp	r5, r8
   28c0e:	d900      	bls.n	28c12 <__sfvwrite_r+0x46>
   28c10:	4bac      	ldr	r3, [pc, #688]	; (28ec4 <__sfvwrite_r+0x2f8>)
   28c12:	003a      	movs	r2, r7
   28c14:	69e1      	ldr	r1, [r4, #28]
   28c16:	9800      	ldr	r0, [sp, #0]
   28c18:	6a66      	ldr	r6, [r4, #36]	; 0x24
   28c1a:	47b0      	blx	r6
   28c1c:	2800      	cmp	r0, #0
   28c1e:	dc00      	bgt.n	28c22 <__sfvwrite_r+0x56>
   28c20:	e073      	b.n	28d0a <__sfvwrite_r+0x13e>
   28c22:	464b      	mov	r3, r9
   28c24:	689b      	ldr	r3, [r3, #8]
   28c26:	183f      	adds	r7, r7, r0
   28c28:	1a2d      	subs	r5, r5, r0
   28c2a:	1a18      	subs	r0, r3, r0
   28c2c:	464b      	mov	r3, r9
   28c2e:	6098      	str	r0, [r3, #8]
   28c30:	d1e8      	bne.n	28c04 <__sfvwrite_r+0x38>
   28c32:	2000      	movs	r0, #0
   28c34:	b003      	add	sp, #12
   28c36:	bc3c      	pop	{r2, r3, r4, r5}
   28c38:	4690      	mov	r8, r2
   28c3a:	4699      	mov	r9, r3
   28c3c:	46a2      	mov	sl, r4
   28c3e:	46ab      	mov	fp, r5
   28c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28c42:	0021      	movs	r1, r4
   28c44:	9800      	ldr	r0, [sp, #0]
   28c46:	f7fe fc4b 	bl	274e0 <__swsetup_r>
   28c4a:	2800      	cmp	r0, #0
   28c4c:	d000      	beq.n	28c50 <__sfvwrite_r+0x84>
   28c4e:	e130      	b.n	28eb2 <__sfvwrite_r+0x2e6>
   28c50:	6832      	ldr	r2, [r6, #0]
   28c52:	89a3      	ldrh	r3, [r4, #12]
   28c54:	4693      	mov	fp, r2
   28c56:	079a      	lsls	r2, r3, #30
   28c58:	d4cf      	bmi.n	28bfa <__sfvwrite_r+0x2e>
   28c5a:	07da      	lsls	r2, r3, #31
   28c5c:	d55d      	bpl.n	28d1a <__sfvwrite_r+0x14e>
   28c5e:	2300      	movs	r3, #0
   28c60:	2000      	movs	r0, #0
   28c62:	469a      	mov	sl, r3
   28c64:	2700      	movs	r7, #0
   28c66:	001d      	movs	r5, r3
   28c68:	46b1      	mov	r9, r6
   28c6a:	e029      	b.n	28cc0 <__sfvwrite_r+0xf4>
   28c6c:	2800      	cmp	r0, #0
   28c6e:	d033      	beq.n	28cd8 <__sfvwrite_r+0x10c>
   28c70:	46a8      	mov	r8, r5
   28c72:	42bd      	cmp	r5, r7
   28c74:	d900      	bls.n	28c78 <__sfvwrite_r+0xac>
   28c76:	46b8      	mov	r8, r7
   28c78:	6820      	ldr	r0, [r4, #0]
   28c7a:	6922      	ldr	r2, [r4, #16]
   28c7c:	4646      	mov	r6, r8
   28c7e:	6963      	ldr	r3, [r4, #20]
   28c80:	4290      	cmp	r0, r2
   28c82:	d907      	bls.n	28c94 <__sfvwrite_r+0xc8>
   28c84:	68a2      	ldr	r2, [r4, #8]
   28c86:	4694      	mov	ip, r2
   28c88:	449c      	add	ip, r3
   28c8a:	4662      	mov	r2, ip
   28c8c:	9201      	str	r2, [sp, #4]
   28c8e:	45e0      	cmp	r8, ip
   28c90:	dd00      	ble.n	28c94 <__sfvwrite_r+0xc8>
   28c92:	e0e9      	b.n	28e68 <__sfvwrite_r+0x29c>
   28c94:	4598      	cmp	r8, r3
   28c96:	da00      	bge.n	28c9a <__sfvwrite_r+0xce>
   28c98:	e08f      	b.n	28dba <__sfvwrite_r+0x1ee>
   28c9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   28c9c:	4652      	mov	r2, sl
   28c9e:	69e1      	ldr	r1, [r4, #28]
   28ca0:	9800      	ldr	r0, [sp, #0]
   28ca2:	47b0      	blx	r6
   28ca4:	1e06      	subs	r6, r0, #0
   28ca6:	dd30      	ble.n	28d0a <__sfvwrite_r+0x13e>
   28ca8:	1bad      	subs	r5, r5, r6
   28caa:	2001      	movs	r0, #1
   28cac:	2d00      	cmp	r5, #0
   28cae:	d026      	beq.n	28cfe <__sfvwrite_r+0x132>
   28cb0:	464b      	mov	r3, r9
   28cb2:	689b      	ldr	r3, [r3, #8]
   28cb4:	44b2      	add	sl, r6
   28cb6:	1bbf      	subs	r7, r7, r6
   28cb8:	1b9e      	subs	r6, r3, r6
   28cba:	464b      	mov	r3, r9
   28cbc:	609e      	str	r6, [r3, #8]
   28cbe:	d0b8      	beq.n	28c32 <__sfvwrite_r+0x66>
   28cc0:	2f00      	cmp	r7, #0
   28cc2:	d1d3      	bne.n	28c6c <__sfvwrite_r+0xa0>
   28cc4:	465b      	mov	r3, fp
   28cc6:	681b      	ldr	r3, [r3, #0]
   28cc8:	469a      	mov	sl, r3
   28cca:	465b      	mov	r3, fp
   28ccc:	685f      	ldr	r7, [r3, #4]
   28cce:	2308      	movs	r3, #8
   28cd0:	469c      	mov	ip, r3
   28cd2:	44e3      	add	fp, ip
   28cd4:	2f00      	cmp	r7, #0
   28cd6:	d0f5      	beq.n	28cc4 <__sfvwrite_r+0xf8>
   28cd8:	003a      	movs	r2, r7
   28cda:	210a      	movs	r1, #10
   28cdc:	4650      	mov	r0, sl
   28cde:	f000 fc93 	bl	29608 <memchr>
   28ce2:	2800      	cmp	r0, #0
   28ce4:	d100      	bne.n	28ce8 <__sfvwrite_r+0x11c>
   28ce6:	e0e2      	b.n	28eae <__sfvwrite_r+0x2e2>
   28ce8:	4653      	mov	r3, sl
   28cea:	3001      	adds	r0, #1
   28cec:	1ac5      	subs	r5, r0, r3
   28cee:	e7bf      	b.n	28c70 <__sfvwrite_r+0xa4>
   28cf0:	465b      	mov	r3, fp
   28cf2:	681f      	ldr	r7, [r3, #0]
   28cf4:	685d      	ldr	r5, [r3, #4]
   28cf6:	2308      	movs	r3, #8
   28cf8:	469c      	mov	ip, r3
   28cfa:	44e3      	add	fp, ip
   28cfc:	e782      	b.n	28c04 <__sfvwrite_r+0x38>
   28cfe:	0021      	movs	r1, r4
   28d00:	9800      	ldr	r0, [sp, #0]
   28d02:	f7ff fd81 	bl	28808 <_fflush_r>
   28d06:	2800      	cmp	r0, #0
   28d08:	d0d2      	beq.n	28cb0 <__sfvwrite_r+0xe4>
   28d0a:	220c      	movs	r2, #12
   28d0c:	5ea3      	ldrsh	r3, [r4, r2]
   28d0e:	2240      	movs	r2, #64	; 0x40
   28d10:	2001      	movs	r0, #1
   28d12:	4313      	orrs	r3, r2
   28d14:	81a3      	strh	r3, [r4, #12]
   28d16:	4240      	negs	r0, r0
   28d18:	e78c      	b.n	28c34 <__sfvwrite_r+0x68>
   28d1a:	2200      	movs	r2, #0
   28d1c:	4691      	mov	r9, r2
   28d1e:	464d      	mov	r5, r9
   28d20:	2d00      	cmp	r5, #0
   28d22:	d023      	beq.n	28d6c <__sfvwrite_r+0x1a0>
   28d24:	68a2      	ldr	r2, [r4, #8]
   28d26:	4690      	mov	r8, r2
   28d28:	2280      	movs	r2, #128	; 0x80
   28d2a:	0092      	lsls	r2, r2, #2
   28d2c:	4213      	tst	r3, r2
   28d2e:	d026      	beq.n	28d7e <__sfvwrite_r+0x1b2>
   28d30:	46c2      	mov	sl, r8
   28d32:	4545      	cmp	r5, r8
   28d34:	d34d      	bcc.n	28dd2 <__sfvwrite_r+0x206>
   28d36:	2290      	movs	r2, #144	; 0x90
   28d38:	00d2      	lsls	r2, r2, #3
   28d3a:	4213      	tst	r3, r2
   28d3c:	d14e      	bne.n	28ddc <__sfvwrite_r+0x210>
   28d3e:	002f      	movs	r7, r5
   28d40:	6820      	ldr	r0, [r4, #0]
   28d42:	4652      	mov	r2, sl
   28d44:	4649      	mov	r1, r9
   28d46:	f000 fc9f 	bl	29688 <memmove>
   28d4a:	4642      	mov	r2, r8
   28d4c:	68a3      	ldr	r3, [r4, #8]
   28d4e:	1a98      	subs	r0, r3, r2
   28d50:	6823      	ldr	r3, [r4, #0]
   28d52:	60a0      	str	r0, [r4, #8]
   28d54:	4453      	add	r3, sl
   28d56:	6023      	str	r3, [r4, #0]
   28d58:	68b3      	ldr	r3, [r6, #8]
   28d5a:	44b9      	add	r9, r7
   28d5c:	1bed      	subs	r5, r5, r7
   28d5e:	1bdf      	subs	r7, r3, r7
   28d60:	60b7      	str	r7, [r6, #8]
   28d62:	d100      	bne.n	28d66 <__sfvwrite_r+0x19a>
   28d64:	e765      	b.n	28c32 <__sfvwrite_r+0x66>
   28d66:	89a3      	ldrh	r3, [r4, #12]
   28d68:	2d00      	cmp	r5, #0
   28d6a:	d1db      	bne.n	28d24 <__sfvwrite_r+0x158>
   28d6c:	465a      	mov	r2, fp
   28d6e:	6812      	ldr	r2, [r2, #0]
   28d70:	4691      	mov	r9, r2
   28d72:	465a      	mov	r2, fp
   28d74:	6855      	ldr	r5, [r2, #4]
   28d76:	2208      	movs	r2, #8
   28d78:	4694      	mov	ip, r2
   28d7a:	44e3      	add	fp, ip
   28d7c:	e7d0      	b.n	28d20 <__sfvwrite_r+0x154>
   28d7e:	6820      	ldr	r0, [r4, #0]
   28d80:	6923      	ldr	r3, [r4, #16]
   28d82:	4298      	cmp	r0, r3
   28d84:	d802      	bhi.n	28d8c <__sfvwrite_r+0x1c0>
   28d86:	6967      	ldr	r7, [r4, #20]
   28d88:	42bd      	cmp	r5, r7
   28d8a:	d259      	bcs.n	28e40 <__sfvwrite_r+0x274>
   28d8c:	4647      	mov	r7, r8
   28d8e:	42af      	cmp	r7, r5
   28d90:	d900      	bls.n	28d94 <__sfvwrite_r+0x1c8>
   28d92:	002f      	movs	r7, r5
   28d94:	003a      	movs	r2, r7
   28d96:	4649      	mov	r1, r9
   28d98:	f000 fc76 	bl	29688 <memmove>
   28d9c:	68a3      	ldr	r3, [r4, #8]
   28d9e:	6822      	ldr	r2, [r4, #0]
   28da0:	1bdb      	subs	r3, r3, r7
   28da2:	19d2      	adds	r2, r2, r7
   28da4:	60a3      	str	r3, [r4, #8]
   28da6:	6022      	str	r2, [r4, #0]
   28da8:	2b00      	cmp	r3, #0
   28daa:	d1d5      	bne.n	28d58 <__sfvwrite_r+0x18c>
   28dac:	0021      	movs	r1, r4
   28dae:	9800      	ldr	r0, [sp, #0]
   28db0:	f7ff fd2a 	bl	28808 <_fflush_r>
   28db4:	2800      	cmp	r0, #0
   28db6:	d0cf      	beq.n	28d58 <__sfvwrite_r+0x18c>
   28db8:	e7a7      	b.n	28d0a <__sfvwrite_r+0x13e>
   28dba:	4642      	mov	r2, r8
   28dbc:	4651      	mov	r1, sl
   28dbe:	f000 fc63 	bl	29688 <memmove>
   28dc2:	4642      	mov	r2, r8
   28dc4:	68a3      	ldr	r3, [r4, #8]
   28dc6:	1a9b      	subs	r3, r3, r2
   28dc8:	60a3      	str	r3, [r4, #8]
   28dca:	6823      	ldr	r3, [r4, #0]
   28dcc:	4443      	add	r3, r8
   28dce:	6023      	str	r3, [r4, #0]
   28dd0:	e76a      	b.n	28ca8 <__sfvwrite_r+0xdc>
   28dd2:	46a8      	mov	r8, r5
   28dd4:	6820      	ldr	r0, [r4, #0]
   28dd6:	002f      	movs	r7, r5
   28dd8:	46aa      	mov	sl, r5
   28dda:	e7b2      	b.n	28d42 <__sfvwrite_r+0x176>
   28ddc:	6921      	ldr	r1, [r4, #16]
   28dde:	6822      	ldr	r2, [r4, #0]
   28de0:	1a52      	subs	r2, r2, r1
   28de2:	4692      	mov	sl, r2
   28de4:	6962      	ldr	r2, [r4, #20]
   28de6:	0057      	lsls	r7, r2, #1
   28de8:	18bf      	adds	r7, r7, r2
   28dea:	0ffa      	lsrs	r2, r7, #31
   28dec:	19d7      	adds	r7, r2, r7
   28dee:	4652      	mov	r2, sl
   28df0:	1c50      	adds	r0, r2, #1
   28df2:	107f      	asrs	r7, r7, #1
   28df4:	1940      	adds	r0, r0, r5
   28df6:	003a      	movs	r2, r7
   28df8:	42b8      	cmp	r0, r7
   28dfa:	d901      	bls.n	28e00 <__sfvwrite_r+0x234>
   28dfc:	0007      	movs	r7, r0
   28dfe:	0002      	movs	r2, r0
   28e00:	055b      	lsls	r3, r3, #21
   28e02:	d542      	bpl.n	28e8a <__sfvwrite_r+0x2be>
   28e04:	0011      	movs	r1, r2
   28e06:	9800      	ldr	r0, [sp, #0]
   28e08:	f000 f934 	bl	29074 <_malloc_r>
   28e0c:	4680      	mov	r8, r0
   28e0e:	1e03      	subs	r3, r0, #0
   28e10:	d052      	beq.n	28eb8 <__sfvwrite_r+0x2ec>
   28e12:	4652      	mov	r2, sl
   28e14:	6921      	ldr	r1, [r4, #16]
   28e16:	f7fb f997 	bl	24148 <memcpy>
   28e1a:	89a3      	ldrh	r3, [r4, #12]
   28e1c:	4a2a      	ldr	r2, [pc, #168]	; (28ec8 <__sfvwrite_r+0x2fc>)
   28e1e:	4013      	ands	r3, r2
   28e20:	2280      	movs	r2, #128	; 0x80
   28e22:	4313      	orrs	r3, r2
   28e24:	81a3      	strh	r3, [r4, #12]
   28e26:	4643      	mov	r3, r8
   28e28:	4640      	mov	r0, r8
   28e2a:	6123      	str	r3, [r4, #16]
   28e2c:	4653      	mov	r3, sl
   28e2e:	4450      	add	r0, sl
   28e30:	6167      	str	r7, [r4, #20]
   28e32:	1aff      	subs	r7, r7, r3
   28e34:	60a7      	str	r7, [r4, #8]
   28e36:	6020      	str	r0, [r4, #0]
   28e38:	46a8      	mov	r8, r5
   28e3a:	002f      	movs	r7, r5
   28e3c:	46aa      	mov	sl, r5
   28e3e:	e780      	b.n	28d42 <__sfvwrite_r+0x176>
   28e40:	4b22      	ldr	r3, [pc, #136]	; (28ecc <__sfvwrite_r+0x300>)
   28e42:	0028      	movs	r0, r5
   28e44:	429d      	cmp	r5, r3
   28e46:	d900      	bls.n	28e4a <__sfvwrite_r+0x27e>
   28e48:	0018      	movs	r0, r3
   28e4a:	0039      	movs	r1, r7
   28e4c:	f7f8 f996 	bl	2117c <__divsi3>
   28e50:	003b      	movs	r3, r7
   28e52:	464a      	mov	r2, r9
   28e54:	4343      	muls	r3, r0
   28e56:	69e1      	ldr	r1, [r4, #28]
   28e58:	9800      	ldr	r0, [sp, #0]
   28e5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   28e5c:	47b8      	blx	r7
   28e5e:	2800      	cmp	r0, #0
   28e60:	dc00      	bgt.n	28e64 <__sfvwrite_r+0x298>
   28e62:	e752      	b.n	28d0a <__sfvwrite_r+0x13e>
   28e64:	0007      	movs	r7, r0
   28e66:	e777      	b.n	28d58 <__sfvwrite_r+0x18c>
   28e68:	4666      	mov	r6, ip
   28e6a:	4651      	mov	r1, sl
   28e6c:	f000 fc0c 	bl	29688 <memmove>
   28e70:	46b4      	mov	ip, r6
   28e72:	6823      	ldr	r3, [r4, #0]
   28e74:	0021      	movs	r1, r4
   28e76:	4463      	add	r3, ip
   28e78:	6023      	str	r3, [r4, #0]
   28e7a:	9800      	ldr	r0, [sp, #0]
   28e7c:	f7ff fcc4 	bl	28808 <_fflush_r>
   28e80:	2800      	cmp	r0, #0
   28e82:	d000      	beq.n	28e86 <__sfvwrite_r+0x2ba>
   28e84:	e741      	b.n	28d0a <__sfvwrite_r+0x13e>
   28e86:	9e01      	ldr	r6, [sp, #4]
   28e88:	e70e      	b.n	28ca8 <__sfvwrite_r+0xdc>
   28e8a:	9800      	ldr	r0, [sp, #0]
   28e8c:	f000 ffa4 	bl	29dd8 <_realloc_r>
   28e90:	4680      	mov	r8, r0
   28e92:	2800      	cmp	r0, #0
   28e94:	d1c7      	bne.n	28e26 <__sfvwrite_r+0x25a>
   28e96:	9d00      	ldr	r5, [sp, #0]
   28e98:	6921      	ldr	r1, [r4, #16]
   28e9a:	0028      	movs	r0, r5
   28e9c:	f7ff fdb8 	bl	28a10 <_free_r>
   28ea0:	2280      	movs	r2, #128	; 0x80
   28ea2:	89a3      	ldrh	r3, [r4, #12]
   28ea4:	4393      	bics	r3, r2
   28ea6:	3a74      	subs	r2, #116	; 0x74
   28ea8:	b21b      	sxth	r3, r3
   28eaa:	602a      	str	r2, [r5, #0]
   28eac:	e72f      	b.n	28d0e <__sfvwrite_r+0x142>
   28eae:	1c7d      	adds	r5, r7, #1
   28eb0:	e6de      	b.n	28c70 <__sfvwrite_r+0xa4>
   28eb2:	2001      	movs	r0, #1
   28eb4:	4240      	negs	r0, r0
   28eb6:	e6bd      	b.n	28c34 <__sfvwrite_r+0x68>
   28eb8:	9a00      	ldr	r2, [sp, #0]
   28eba:	330c      	adds	r3, #12
   28ebc:	6013      	str	r3, [r2, #0]
   28ebe:	220c      	movs	r2, #12
   28ec0:	5ea3      	ldrsh	r3, [r4, r2]
   28ec2:	e724      	b.n	28d0e <__sfvwrite_r+0x142>
   28ec4:	7ffffc00 	.word	0x7ffffc00
   28ec8:	fffffb7f 	.word	0xfffffb7f
   28ecc:	7fffffff 	.word	0x7fffffff

00028ed0 <_fwalk_reent>:
   28ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ed2:	4647      	mov	r7, r8
   28ed4:	46ce      	mov	lr, r9
   28ed6:	b580      	push	{r7, lr}
   28ed8:	27b8      	movs	r7, #184	; 0xb8
   28eda:	4680      	mov	r8, r0
   28edc:	00bf      	lsls	r7, r7, #2
   28ede:	4447      	add	r7, r8
   28ee0:	4689      	mov	r9, r1
   28ee2:	2600      	movs	r6, #0
   28ee4:	2f00      	cmp	r7, #0
   28ee6:	d014      	beq.n	28f12 <_fwalk_reent+0x42>
   28ee8:	687b      	ldr	r3, [r7, #4]
   28eea:	68bc      	ldr	r4, [r7, #8]
   28eec:	1e5d      	subs	r5, r3, #1
   28eee:	d40d      	bmi.n	28f0c <_fwalk_reent+0x3c>
   28ef0:	89a3      	ldrh	r3, [r4, #12]
   28ef2:	2b01      	cmp	r3, #1
   28ef4:	d907      	bls.n	28f06 <_fwalk_reent+0x36>
   28ef6:	220e      	movs	r2, #14
   28ef8:	5ea3      	ldrsh	r3, [r4, r2]
   28efa:	3301      	adds	r3, #1
   28efc:	d003      	beq.n	28f06 <_fwalk_reent+0x36>
   28efe:	0021      	movs	r1, r4
   28f00:	4640      	mov	r0, r8
   28f02:	47c8      	blx	r9
   28f04:	4306      	orrs	r6, r0
   28f06:	3468      	adds	r4, #104	; 0x68
   28f08:	3d01      	subs	r5, #1
   28f0a:	d2f1      	bcs.n	28ef0 <_fwalk_reent+0x20>
   28f0c:	683f      	ldr	r7, [r7, #0]
   28f0e:	2f00      	cmp	r7, #0
   28f10:	d1ea      	bne.n	28ee8 <_fwalk_reent+0x18>
   28f12:	0030      	movs	r0, r6
   28f14:	bc0c      	pop	{r2, r3}
   28f16:	4690      	mov	r8, r2
   28f18:	4699      	mov	r9, r3
   28f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028f1c <__locale_mb_cur_max>:
   28f1c:	4b05      	ldr	r3, [pc, #20]	; (28f34 <__locale_mb_cur_max+0x18>)
   28f1e:	681b      	ldr	r3, [r3, #0]
   28f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   28f22:	2b00      	cmp	r3, #0
   28f24:	d003      	beq.n	28f2e <__locale_mb_cur_max+0x12>
   28f26:	2294      	movs	r2, #148	; 0x94
   28f28:	0052      	lsls	r2, r2, #1
   28f2a:	5c98      	ldrb	r0, [r3, r2]
   28f2c:	4770      	bx	lr
   28f2e:	4b02      	ldr	r3, [pc, #8]	; (28f38 <__locale_mb_cur_max+0x1c>)
   28f30:	e7f9      	b.n	28f26 <__locale_mb_cur_max+0xa>
   28f32:	46c0      	nop			; (mov r8, r8)
   28f34:	200001e8 	.word	0x200001e8
   28f38:	2000061c 	.word	0x2000061c

00028f3c <__locale_ctype_ptr_l>:
   28f3c:	23ec      	movs	r3, #236	; 0xec
   28f3e:	58c0      	ldr	r0, [r0, r3]
   28f40:	4770      	bx	lr
   28f42:	46c0      	nop			; (mov r8, r8)

00028f44 <_localeconv_r>:
   28f44:	4b04      	ldr	r3, [pc, #16]	; (28f58 <_localeconv_r+0x14>)
   28f46:	681b      	ldr	r3, [r3, #0]
   28f48:	6b58      	ldr	r0, [r3, #52]	; 0x34
   28f4a:	2800      	cmp	r0, #0
   28f4c:	d001      	beq.n	28f52 <_localeconv_r+0xe>
   28f4e:	30f0      	adds	r0, #240	; 0xf0
   28f50:	4770      	bx	lr
   28f52:	4802      	ldr	r0, [pc, #8]	; (28f5c <_localeconv_r+0x18>)
   28f54:	e7fb      	b.n	28f4e <_localeconv_r+0xa>
   28f56:	46c0      	nop			; (mov r8, r8)
   28f58:	200001e8 	.word	0x200001e8
   28f5c:	2000061c 	.word	0x2000061c

00028f60 <__retarget_lock_init_recursive>:
   28f60:	4770      	bx	lr
   28f62:	46c0      	nop			; (mov r8, r8)

00028f64 <__retarget_lock_close_recursive>:
   28f64:	4770      	bx	lr
   28f66:	46c0      	nop			; (mov r8, r8)

00028f68 <__retarget_lock_acquire_recursive>:
   28f68:	4770      	bx	lr
   28f6a:	46c0      	nop			; (mov r8, r8)

00028f6c <__retarget_lock_release_recursive>:
   28f6c:	4770      	bx	lr
   28f6e:	46c0      	nop			; (mov r8, r8)

00028f70 <__swhatbuf_r>:
   28f70:	b570      	push	{r4, r5, r6, lr}
   28f72:	000c      	movs	r4, r1
   28f74:	001e      	movs	r6, r3
   28f76:	230e      	movs	r3, #14
   28f78:	5ec9      	ldrsh	r1, [r1, r3]
   28f7a:	b090      	sub	sp, #64	; 0x40
   28f7c:	0015      	movs	r5, r2
   28f7e:	2900      	cmp	r1, #0
   28f80:	db15      	blt.n	28fae <__swhatbuf_r+0x3e>
   28f82:	aa01      	add	r2, sp, #4
   28f84:	f001 fbdc 	bl	2a740 <_fstat_r>
   28f88:	2800      	cmp	r0, #0
   28f8a:	db10      	blt.n	28fae <__swhatbuf_r+0x3e>
   28f8c:	22f0      	movs	r2, #240	; 0xf0
   28f8e:	9b02      	ldr	r3, [sp, #8]
   28f90:	0212      	lsls	r2, r2, #8
   28f92:	4013      	ands	r3, r2
   28f94:	4a0d      	ldr	r2, [pc, #52]	; (28fcc <__swhatbuf_r+0x5c>)
   28f96:	2080      	movs	r0, #128	; 0x80
   28f98:	4694      	mov	ip, r2
   28f9a:	4463      	add	r3, ip
   28f9c:	425a      	negs	r2, r3
   28f9e:	4153      	adcs	r3, r2
   28fa0:	6033      	str	r3, [r6, #0]
   28fa2:	2380      	movs	r3, #128	; 0x80
   28fa4:	00db      	lsls	r3, r3, #3
   28fa6:	602b      	str	r3, [r5, #0]
   28fa8:	0100      	lsls	r0, r0, #4
   28faa:	b010      	add	sp, #64	; 0x40
   28fac:	bd70      	pop	{r4, r5, r6, pc}
   28fae:	2300      	movs	r3, #0
   28fb0:	6033      	str	r3, [r6, #0]
   28fb2:	89a3      	ldrh	r3, [r4, #12]
   28fb4:	061b      	lsls	r3, r3, #24
   28fb6:	d503      	bpl.n	28fc0 <__swhatbuf_r+0x50>
   28fb8:	2340      	movs	r3, #64	; 0x40
   28fba:	2000      	movs	r0, #0
   28fbc:	602b      	str	r3, [r5, #0]
   28fbe:	e7f4      	b.n	28faa <__swhatbuf_r+0x3a>
   28fc0:	2380      	movs	r3, #128	; 0x80
   28fc2:	00db      	lsls	r3, r3, #3
   28fc4:	602b      	str	r3, [r5, #0]
   28fc6:	2000      	movs	r0, #0
   28fc8:	e7ef      	b.n	28faa <__swhatbuf_r+0x3a>
   28fca:	46c0      	nop			; (mov r8, r8)
   28fcc:	ffffe000 	.word	0xffffe000

00028fd0 <__smakebuf_r>:
   28fd0:	b570      	push	{r4, r5, r6, lr}
   28fd2:	898b      	ldrh	r3, [r1, #12]
   28fd4:	b082      	sub	sp, #8
   28fd6:	0006      	movs	r6, r0
   28fd8:	000c      	movs	r4, r1
   28fda:	079b      	lsls	r3, r3, #30
   28fdc:	d507      	bpl.n	28fee <__smakebuf_r+0x1e>
   28fde:	0023      	movs	r3, r4
   28fe0:	3343      	adds	r3, #67	; 0x43
   28fe2:	6023      	str	r3, [r4, #0]
   28fe4:	6123      	str	r3, [r4, #16]
   28fe6:	2301      	movs	r3, #1
   28fe8:	6163      	str	r3, [r4, #20]
   28fea:	b002      	add	sp, #8
   28fec:	bd70      	pop	{r4, r5, r6, pc}
   28fee:	ab01      	add	r3, sp, #4
   28ff0:	466a      	mov	r2, sp
   28ff2:	f7ff ffbd 	bl	28f70 <__swhatbuf_r>
   28ff6:	9900      	ldr	r1, [sp, #0]
   28ff8:	0005      	movs	r5, r0
   28ffa:	0030      	movs	r0, r6
   28ffc:	f000 f83a 	bl	29074 <_malloc_r>
   29000:	2800      	cmp	r0, #0
   29002:	d01e      	beq.n	29042 <__smakebuf_r+0x72>
   29004:	2280      	movs	r2, #128	; 0x80
   29006:	4b15      	ldr	r3, [pc, #84]	; (2905c <__smakebuf_r+0x8c>)
   29008:	63f3      	str	r3, [r6, #60]	; 0x3c
   2900a:	89a3      	ldrh	r3, [r4, #12]
   2900c:	6020      	str	r0, [r4, #0]
   2900e:	4313      	orrs	r3, r2
   29010:	9a00      	ldr	r2, [sp, #0]
   29012:	b21b      	sxth	r3, r3
   29014:	6162      	str	r2, [r4, #20]
   29016:	9a01      	ldr	r2, [sp, #4]
   29018:	81a3      	strh	r3, [r4, #12]
   2901a:	6120      	str	r0, [r4, #16]
   2901c:	2a00      	cmp	r2, #0
   2901e:	d102      	bne.n	29026 <__smakebuf_r+0x56>
   29020:	432b      	orrs	r3, r5
   29022:	81a3      	strh	r3, [r4, #12]
   29024:	e7e1      	b.n	28fea <__smakebuf_r+0x1a>
   29026:	230e      	movs	r3, #14
   29028:	5ee1      	ldrsh	r1, [r4, r3]
   2902a:	0030      	movs	r0, r6
   2902c:	f001 fb9c 	bl	2a768 <_isatty_r>
   29030:	2800      	cmp	r0, #0
   29032:	d010      	beq.n	29056 <__smakebuf_r+0x86>
   29034:	2203      	movs	r2, #3
   29036:	89a3      	ldrh	r3, [r4, #12]
   29038:	4393      	bics	r3, r2
   2903a:	2201      	movs	r2, #1
   2903c:	4313      	orrs	r3, r2
   2903e:	b21b      	sxth	r3, r3
   29040:	e7ee      	b.n	29020 <__smakebuf_r+0x50>
   29042:	220c      	movs	r2, #12
   29044:	5ea3      	ldrsh	r3, [r4, r2]
   29046:	059a      	lsls	r2, r3, #22
   29048:	d4cf      	bmi.n	28fea <__smakebuf_r+0x1a>
   2904a:	2203      	movs	r2, #3
   2904c:	4393      	bics	r3, r2
   2904e:	2202      	movs	r2, #2
   29050:	4313      	orrs	r3, r2
   29052:	81a3      	strh	r3, [r4, #12]
   29054:	e7c3      	b.n	28fde <__smakebuf_r+0xe>
   29056:	220c      	movs	r2, #12
   29058:	5ea3      	ldrsh	r3, [r4, r2]
   2905a:	e7e1      	b.n	29020 <__smakebuf_r+0x50>
   2905c:	0002885d 	.word	0x0002885d

00029060 <malloc>:
   29060:	b510      	push	{r4, lr}
   29062:	4b03      	ldr	r3, [pc, #12]	; (29070 <malloc+0x10>)
   29064:	0001      	movs	r1, r0
   29066:	6818      	ldr	r0, [r3, #0]
   29068:	f000 f804 	bl	29074 <_malloc_r>
   2906c:	bd10      	pop	{r4, pc}
   2906e:	46c0      	nop			; (mov r8, r8)
   29070:	200001e8 	.word	0x200001e8

00029074 <_malloc_r>:
   29074:	b5f0      	push	{r4, r5, r6, r7, lr}
   29076:	4657      	mov	r7, sl
   29078:	4645      	mov	r5, r8
   2907a:	46de      	mov	lr, fp
   2907c:	464e      	mov	r6, r9
   2907e:	b5e0      	push	{r5, r6, r7, lr}
   29080:	000d      	movs	r5, r1
   29082:	350b      	adds	r5, #11
   29084:	b083      	sub	sp, #12
   29086:	0007      	movs	r7, r0
   29088:	2d16      	cmp	r5, #22
   2908a:	d800      	bhi.n	2908e <_malloc_r+0x1a>
   2908c:	e09f      	b.n	291ce <_malloc_r+0x15a>
   2908e:	2307      	movs	r3, #7
   29090:	439d      	bics	r5, r3
   29092:	d500      	bpl.n	29096 <_malloc_r+0x22>
   29094:	e0c4      	b.n	29220 <_malloc_r+0x1ac>
   29096:	42a9      	cmp	r1, r5
   29098:	d900      	bls.n	2909c <_malloc_r+0x28>
   2909a:	e0c1      	b.n	29220 <_malloc_r+0x1ac>
   2909c:	f000 fb44 	bl	29728 <__malloc_lock>
   290a0:	23f8      	movs	r3, #248	; 0xf8
   290a2:	33ff      	adds	r3, #255	; 0xff
   290a4:	429d      	cmp	r5, r3
   290a6:	d800      	bhi.n	290aa <_malloc_r+0x36>
   290a8:	e28f      	b.n	295ca <_malloc_r+0x556>
   290aa:	0a68      	lsrs	r0, r5, #9
   290ac:	d100      	bne.n	290b0 <_malloc_r+0x3c>
   290ae:	e0bb      	b.n	29228 <_malloc_r+0x1b4>
   290b0:	2804      	cmp	r0, #4
   290b2:	d900      	bls.n	290b6 <_malloc_r+0x42>
   290b4:	e162      	b.n	2937c <_malloc_r+0x308>
   290b6:	2338      	movs	r3, #56	; 0x38
   290b8:	4698      	mov	r8, r3
   290ba:	09a8      	lsrs	r0, r5, #6
   290bc:	4480      	add	r8, r0
   290be:	3039      	adds	r0, #57	; 0x39
   290c0:	00c1      	lsls	r1, r0, #3
   290c2:	4ed2      	ldr	r6, [pc, #840]	; (2940c <_malloc_r+0x398>)
   290c4:	1871      	adds	r1, r6, r1
   290c6:	3908      	subs	r1, #8
   290c8:	68cc      	ldr	r4, [r1, #12]
   290ca:	42a1      	cmp	r1, r4
   290cc:	d019      	beq.n	29102 <_malloc_r+0x8e>
   290ce:	2303      	movs	r3, #3
   290d0:	6862      	ldr	r2, [r4, #4]
   290d2:	439a      	bics	r2, r3
   290d4:	0013      	movs	r3, r2
   290d6:	1b52      	subs	r2, r2, r5
   290d8:	2a0f      	cmp	r2, #15
   290da:	dd00      	ble.n	290de <_malloc_r+0x6a>
   290dc:	e0aa      	b.n	29234 <_malloc_r+0x1c0>
   290de:	2a00      	cmp	r2, #0
   290e0:	db00      	blt.n	290e4 <_malloc_r+0x70>
   290e2:	e088      	b.n	291f6 <_malloc_r+0x182>
   290e4:	2303      	movs	r3, #3
   290e6:	469c      	mov	ip, r3
   290e8:	e008      	b.n	290fc <_malloc_r+0x88>
   290ea:	4662      	mov	r2, ip
   290ec:	6863      	ldr	r3, [r4, #4]
   290ee:	4393      	bics	r3, r2
   290f0:	1b5a      	subs	r2, r3, r5
   290f2:	2a0f      	cmp	r2, #15
   290f4:	dd00      	ble.n	290f8 <_malloc_r+0x84>
   290f6:	e09d      	b.n	29234 <_malloc_r+0x1c0>
   290f8:	2a00      	cmp	r2, #0
   290fa:	da7c      	bge.n	291f6 <_malloc_r+0x182>
   290fc:	68e4      	ldr	r4, [r4, #12]
   290fe:	42a1      	cmp	r1, r4
   29100:	d1f3      	bne.n	290ea <_malloc_r+0x76>
   29102:	0032      	movs	r2, r6
   29104:	6934      	ldr	r4, [r6, #16]
   29106:	3208      	adds	r2, #8
   29108:	4294      	cmp	r4, r2
   2910a:	d100      	bne.n	2910e <_malloc_r+0x9a>
   2910c:	e190      	b.n	29430 <_malloc_r+0x3bc>
   2910e:	2303      	movs	r3, #3
   29110:	6861      	ldr	r1, [r4, #4]
   29112:	4399      	bics	r1, r3
   29114:	4689      	mov	r9, r1
   29116:	1b49      	subs	r1, r1, r5
   29118:	290f      	cmp	r1, #15
   2911a:	dd00      	ble.n	2911e <_malloc_r+0xaa>
   2911c:	e162      	b.n	293e4 <_malloc_r+0x370>
   2911e:	6172      	str	r2, [r6, #20]
   29120:	6132      	str	r2, [r6, #16]
   29122:	2900      	cmp	r1, #0
   29124:	db00      	blt.n	29128 <_malloc_r+0xb4>
   29126:	e087      	b.n	29238 <_malloc_r+0x1c4>
   29128:	4ab9      	ldr	r2, [pc, #740]	; (29410 <_malloc_r+0x39c>)
   2912a:	464b      	mov	r3, r9
   2912c:	4591      	cmp	r9, r2
   2912e:	d900      	bls.n	29132 <_malloc_r+0xbe>
   29130:	e130      	b.n	29394 <_malloc_r+0x320>
   29132:	08db      	lsrs	r3, r3, #3
   29134:	3aff      	subs	r2, #255	; 0xff
   29136:	1099      	asrs	r1, r3, #2
   29138:	3aff      	subs	r2, #255	; 0xff
   2913a:	408a      	lsls	r2, r1
   2913c:	00db      	lsls	r3, r3, #3
   2913e:	6871      	ldr	r1, [r6, #4]
   29140:	199b      	adds	r3, r3, r6
   29142:	430a      	orrs	r2, r1
   29144:	6899      	ldr	r1, [r3, #8]
   29146:	6072      	str	r2, [r6, #4]
   29148:	60e3      	str	r3, [r4, #12]
   2914a:	60a1      	str	r1, [r4, #8]
   2914c:	609c      	str	r4, [r3, #8]
   2914e:	0013      	movs	r3, r2
   29150:	60cc      	str	r4, [r1, #12]
   29152:	2101      	movs	r1, #1
   29154:	1082      	asrs	r2, r0, #2
   29156:	4091      	lsls	r1, r2
   29158:	4299      	cmp	r1, r3
   2915a:	d86f      	bhi.n	2923c <_malloc_r+0x1c8>
   2915c:	420b      	tst	r3, r1
   2915e:	d105      	bne.n	2916c <_malloc_r+0xf8>
   29160:	2203      	movs	r2, #3
   29162:	4390      	bics	r0, r2
   29164:	0049      	lsls	r1, r1, #1
   29166:	3004      	adds	r0, #4
   29168:	420b      	tst	r3, r1
   2916a:	d0fb      	beq.n	29164 <_malloc_r+0xf0>
   2916c:	2303      	movs	r3, #3
   2916e:	4698      	mov	r8, r3
   29170:	00c3      	lsls	r3, r0, #3
   29172:	4699      	mov	r9, r3
   29174:	44b1      	add	r9, r6
   29176:	46cc      	mov	ip, r9
   29178:	4682      	mov	sl, r0
   2917a:	4663      	mov	r3, ip
   2917c:	68dc      	ldr	r4, [r3, #12]
   2917e:	45a4      	cmp	ip, r4
   29180:	d107      	bne.n	29192 <_malloc_r+0x11e>
   29182:	e157      	b.n	29434 <_malloc_r+0x3c0>
   29184:	2a00      	cmp	r2, #0
   29186:	db00      	blt.n	2918a <_malloc_r+0x116>
   29188:	e166      	b.n	29458 <_malloc_r+0x3e4>
   2918a:	68e4      	ldr	r4, [r4, #12]
   2918c:	45a4      	cmp	ip, r4
   2918e:	d100      	bne.n	29192 <_malloc_r+0x11e>
   29190:	e150      	b.n	29434 <_malloc_r+0x3c0>
   29192:	4642      	mov	r2, r8
   29194:	6863      	ldr	r3, [r4, #4]
   29196:	4393      	bics	r3, r2
   29198:	1b5a      	subs	r2, r3, r5
   2919a:	2a0f      	cmp	r2, #15
   2919c:	ddf2      	ble.n	29184 <_malloc_r+0x110>
   2919e:	2001      	movs	r0, #1
   291a0:	4680      	mov	r8, r0
   291a2:	1961      	adds	r1, r4, r5
   291a4:	4305      	orrs	r5, r0
   291a6:	6065      	str	r5, [r4, #4]
   291a8:	68a0      	ldr	r0, [r4, #8]
   291aa:	68e5      	ldr	r5, [r4, #12]
   291ac:	3608      	adds	r6, #8
   291ae:	60c5      	str	r5, [r0, #12]
   291b0:	60a8      	str	r0, [r5, #8]
   291b2:	4640      	mov	r0, r8
   291b4:	60f1      	str	r1, [r6, #12]
   291b6:	60b1      	str	r1, [r6, #8]
   291b8:	4310      	orrs	r0, r2
   291ba:	6048      	str	r0, [r1, #4]
   291bc:	60ce      	str	r6, [r1, #12]
   291be:	608e      	str	r6, [r1, #8]
   291c0:	0038      	movs	r0, r7
   291c2:	50e2      	str	r2, [r4, r3]
   291c4:	f000 fab8 	bl	29738 <__malloc_unlock>
   291c8:	0020      	movs	r0, r4
   291ca:	3008      	adds	r0, #8
   291cc:	e021      	b.n	29212 <_malloc_r+0x19e>
   291ce:	2910      	cmp	r1, #16
   291d0:	d826      	bhi.n	29220 <_malloc_r+0x1ac>
   291d2:	0038      	movs	r0, r7
   291d4:	f000 faa8 	bl	29728 <__malloc_lock>
   291d8:	2510      	movs	r5, #16
   291da:	2318      	movs	r3, #24
   291dc:	2002      	movs	r0, #2
   291de:	4e8b      	ldr	r6, [pc, #556]	; (2940c <_malloc_r+0x398>)
   291e0:	18f3      	adds	r3, r6, r3
   291e2:	001a      	movs	r2, r3
   291e4:	685c      	ldr	r4, [r3, #4]
   291e6:	3a08      	subs	r2, #8
   291e8:	4294      	cmp	r4, r2
   291ea:	d100      	bne.n	291ee <_malloc_r+0x17a>
   291ec:	e12e      	b.n	2944c <_malloc_r+0x3d8>
   291ee:	2303      	movs	r3, #3
   291f0:	6862      	ldr	r2, [r4, #4]
   291f2:	439a      	bics	r2, r3
   291f4:	0013      	movs	r3, r2
   291f6:	68e2      	ldr	r2, [r4, #12]
   291f8:	68a1      	ldr	r1, [r4, #8]
   291fa:	60ca      	str	r2, [r1, #12]
   291fc:	6091      	str	r1, [r2, #8]
   291fe:	2201      	movs	r2, #1
   29200:	18e3      	adds	r3, r4, r3
   29202:	6859      	ldr	r1, [r3, #4]
   29204:	0038      	movs	r0, r7
   29206:	430a      	orrs	r2, r1
   29208:	605a      	str	r2, [r3, #4]
   2920a:	f000 fa95 	bl	29738 <__malloc_unlock>
   2920e:	0020      	movs	r0, r4
   29210:	3008      	adds	r0, #8
   29212:	b003      	add	sp, #12
   29214:	bc3c      	pop	{r2, r3, r4, r5}
   29216:	4690      	mov	r8, r2
   29218:	4699      	mov	r9, r3
   2921a:	46a2      	mov	sl, r4
   2921c:	46ab      	mov	fp, r5
   2921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29220:	230c      	movs	r3, #12
   29222:	2000      	movs	r0, #0
   29224:	603b      	str	r3, [r7, #0]
   29226:	e7f4      	b.n	29212 <_malloc_r+0x19e>
   29228:	2180      	movs	r1, #128	; 0x80
   2922a:	233f      	movs	r3, #63	; 0x3f
   2922c:	2040      	movs	r0, #64	; 0x40
   2922e:	0089      	lsls	r1, r1, #2
   29230:	4698      	mov	r8, r3
   29232:	e746      	b.n	290c2 <_malloc_r+0x4e>
   29234:	4640      	mov	r0, r8
   29236:	e764      	b.n	29102 <_malloc_r+0x8e>
   29238:	464b      	mov	r3, r9
   2923a:	e7e0      	b.n	291fe <_malloc_r+0x18a>
   2923c:	2303      	movs	r3, #3
   2923e:	68b4      	ldr	r4, [r6, #8]
   29240:	6862      	ldr	r2, [r4, #4]
   29242:	439a      	bics	r2, r3
   29244:	4690      	mov	r8, r2
   29246:	42aa      	cmp	r2, r5
   29248:	d303      	bcc.n	29252 <_malloc_r+0x1de>
   2924a:	1b53      	subs	r3, r2, r5
   2924c:	2b0f      	cmp	r3, #15
   2924e:	dd00      	ble.n	29252 <_malloc_r+0x1de>
   29250:	e086      	b.n	29360 <_malloc_r+0x2ec>
   29252:	0023      	movs	r3, r4
   29254:	4443      	add	r3, r8
   29256:	4a6f      	ldr	r2, [pc, #444]	; (29414 <_malloc_r+0x3a0>)
   29258:	9301      	str	r3, [sp, #4]
   2925a:	4b6f      	ldr	r3, [pc, #444]	; (29418 <_malloc_r+0x3a4>)
   2925c:	4693      	mov	fp, r2
   2925e:	681b      	ldr	r3, [r3, #0]
   29260:	6812      	ldr	r2, [r2, #0]
   29262:	18eb      	adds	r3, r5, r3
   29264:	3201      	adds	r2, #1
   29266:	d100      	bne.n	2926a <_malloc_r+0x1f6>
   29268:	e168      	b.n	2953c <_malloc_r+0x4c8>
   2926a:	4a6c      	ldr	r2, [pc, #432]	; (2941c <_malloc_r+0x3a8>)
   2926c:	4694      	mov	ip, r2
   2926e:	4463      	add	r3, ip
   29270:	0b1b      	lsrs	r3, r3, #12
   29272:	031b      	lsls	r3, r3, #12
   29274:	9300      	str	r3, [sp, #0]
   29276:	9900      	ldr	r1, [sp, #0]
   29278:	0038      	movs	r0, r7
   2927a:	f000 ff6b 	bl	2a154 <_sbrk_r>
   2927e:	0003      	movs	r3, r0
   29280:	4681      	mov	r9, r0
   29282:	3301      	adds	r3, #1
   29284:	d061      	beq.n	2934a <_malloc_r+0x2d6>
   29286:	9b01      	ldr	r3, [sp, #4]
   29288:	4283      	cmp	r3, r0
   2928a:	d900      	bls.n	2928e <_malloc_r+0x21a>
   2928c:	e0ff      	b.n	2948e <_malloc_r+0x41a>
   2928e:	4b64      	ldr	r3, [pc, #400]	; (29420 <_malloc_r+0x3ac>)
   29290:	9a00      	ldr	r2, [sp, #0]
   29292:	469a      	mov	sl, r3
   29294:	681b      	ldr	r3, [r3, #0]
   29296:	469c      	mov	ip, r3
   29298:	4653      	mov	r3, sl
   2929a:	4462      	add	r2, ip
   2929c:	601a      	str	r2, [r3, #0]
   2929e:	9b01      	ldr	r3, [sp, #4]
   292a0:	0011      	movs	r1, r2
   292a2:	4283      	cmp	r3, r0
   292a4:	d100      	bne.n	292a8 <_malloc_r+0x234>
   292a6:	e155      	b.n	29554 <_malloc_r+0x4e0>
   292a8:	465b      	mov	r3, fp
   292aa:	681b      	ldr	r3, [r3, #0]
   292ac:	3301      	adds	r3, #1
   292ae:	d100      	bne.n	292b2 <_malloc_r+0x23e>
   292b0:	e16c      	b.n	2958c <_malloc_r+0x518>
   292b2:	464b      	mov	r3, r9
   292b4:	9a01      	ldr	r2, [sp, #4]
   292b6:	1a9b      	subs	r3, r3, r2
   292b8:	1859      	adds	r1, r3, r1
   292ba:	4653      	mov	r3, sl
   292bc:	6019      	str	r1, [r3, #0]
   292be:	2307      	movs	r3, #7
   292c0:	464a      	mov	r2, r9
   292c2:	4013      	ands	r3, r2
   292c4:	d100      	bne.n	292c8 <_malloc_r+0x254>
   292c6:	e124      	b.n	29512 <_malloc_r+0x49e>
   292c8:	2108      	movs	r1, #8
   292ca:	4689      	mov	r9, r1
   292cc:	4955      	ldr	r1, [pc, #340]	; (29424 <_malloc_r+0x3b0>)
   292ce:	1ad2      	subs	r2, r2, r3
   292d0:	4491      	add	r9, r2
   292d2:	1acb      	subs	r3, r1, r3
   292d4:	9a00      	ldr	r2, [sp, #0]
   292d6:	0038      	movs	r0, r7
   292d8:	444a      	add	r2, r9
   292da:	0511      	lsls	r1, r2, #20
   292dc:	0d09      	lsrs	r1, r1, #20
   292de:	1a5b      	subs	r3, r3, r1
   292e0:	0019      	movs	r1, r3
   292e2:	469b      	mov	fp, r3
   292e4:	f000 ff36 	bl	2a154 <_sbrk_r>
   292e8:	1c43      	adds	r3, r0, #1
   292ea:	d100      	bne.n	292ee <_malloc_r+0x27a>
   292ec:	e142      	b.n	29574 <_malloc_r+0x500>
   292ee:	464b      	mov	r3, r9
   292f0:	1ac0      	subs	r0, r0, r3
   292f2:	2301      	movs	r3, #1
   292f4:	4458      	add	r0, fp
   292f6:	4318      	orrs	r0, r3
   292f8:	4653      	mov	r3, sl
   292fa:	681b      	ldr	r3, [r3, #0]
   292fc:	445b      	add	r3, fp
   292fe:	0019      	movs	r1, r3
   29300:	4653      	mov	r3, sl
   29302:	6019      	str	r1, [r3, #0]
   29304:	464b      	mov	r3, r9
   29306:	60b3      	str	r3, [r6, #8]
   29308:	6058      	str	r0, [r3, #4]
   2930a:	42b4      	cmp	r4, r6
   2930c:	d013      	beq.n	29336 <_malloc_r+0x2c2>
   2930e:	4643      	mov	r3, r8
   29310:	2b0f      	cmp	r3, #15
   29312:	d800      	bhi.n	29316 <_malloc_r+0x2a2>
   29314:	e0e8      	b.n	294e8 <_malloc_r+0x474>
   29316:	4643      	mov	r3, r8
   29318:	2207      	movs	r2, #7
   2931a:	6860      	ldr	r0, [r4, #4]
   2931c:	3b0c      	subs	r3, #12
   2931e:	4393      	bics	r3, r2
   29320:	3a06      	subs	r2, #6
   29322:	4002      	ands	r2, r0
   29324:	2005      	movs	r0, #5
   29326:	431a      	orrs	r2, r3
   29328:	6062      	str	r2, [r4, #4]
   2932a:	18e2      	adds	r2, r4, r3
   2932c:	6050      	str	r0, [r2, #4]
   2932e:	6090      	str	r0, [r2, #8]
   29330:	2b0f      	cmp	r3, #15
   29332:	d900      	bls.n	29336 <_malloc_r+0x2c2>
   29334:	e122      	b.n	2957c <_malloc_r+0x508>
   29336:	4b3c      	ldr	r3, [pc, #240]	; (29428 <_malloc_r+0x3b4>)
   29338:	681a      	ldr	r2, [r3, #0]
   2933a:	4291      	cmp	r1, r2
   2933c:	d900      	bls.n	29340 <_malloc_r+0x2cc>
   2933e:	6019      	str	r1, [r3, #0]
   29340:	4b3a      	ldr	r3, [pc, #232]	; (2942c <_malloc_r+0x3b8>)
   29342:	681a      	ldr	r2, [r3, #0]
   29344:	4291      	cmp	r1, r2
   29346:	d900      	bls.n	2934a <_malloc_r+0x2d6>
   29348:	6019      	str	r1, [r3, #0]
   2934a:	2303      	movs	r3, #3
   2934c:	68b4      	ldr	r4, [r6, #8]
   2934e:	6862      	ldr	r2, [r4, #4]
   29350:	439a      	bics	r2, r3
   29352:	1b53      	subs	r3, r2, r5
   29354:	4295      	cmp	r5, r2
   29356:	d900      	bls.n	2935a <_malloc_r+0x2e6>
   29358:	e0c9      	b.n	294ee <_malloc_r+0x47a>
   2935a:	2b0f      	cmp	r3, #15
   2935c:	dc00      	bgt.n	29360 <_malloc_r+0x2ec>
   2935e:	e0c6      	b.n	294ee <_malloc_r+0x47a>
   29360:	2201      	movs	r2, #1
   29362:	0029      	movs	r1, r5
   29364:	4313      	orrs	r3, r2
   29366:	4311      	orrs	r1, r2
   29368:	1965      	adds	r5, r4, r5
   2936a:	6061      	str	r1, [r4, #4]
   2936c:	0038      	movs	r0, r7
   2936e:	60b5      	str	r5, [r6, #8]
   29370:	606b      	str	r3, [r5, #4]
   29372:	f000 f9e1 	bl	29738 <__malloc_unlock>
   29376:	0020      	movs	r0, r4
   29378:	3008      	adds	r0, #8
   2937a:	e74a      	b.n	29212 <_malloc_r+0x19e>
   2937c:	2814      	cmp	r0, #20
   2937e:	d97a      	bls.n	29476 <_malloc_r+0x402>
   29380:	2854      	cmp	r0, #84	; 0x54
   29382:	d900      	bls.n	29386 <_malloc_r+0x312>
   29384:	e0ba      	b.n	294fc <_malloc_r+0x488>
   29386:	236e      	movs	r3, #110	; 0x6e
   29388:	4698      	mov	r8, r3
   2938a:	0b28      	lsrs	r0, r5, #12
   2938c:	4480      	add	r8, r0
   2938e:	306f      	adds	r0, #111	; 0x6f
   29390:	00c1      	lsls	r1, r0, #3
   29392:	e696      	b.n	290c2 <_malloc_r+0x4e>
   29394:	0a5a      	lsrs	r2, r3, #9
   29396:	2a04      	cmp	r2, #4
   29398:	d973      	bls.n	29482 <_malloc_r+0x40e>
   2939a:	2a14      	cmp	r2, #20
   2939c:	d900      	bls.n	293a0 <_malloc_r+0x32c>
   2939e:	e0d0      	b.n	29542 <_malloc_r+0x4ce>
   293a0:	0011      	movs	r1, r2
   293a2:	325c      	adds	r2, #92	; 0x5c
   293a4:	315b      	adds	r1, #91	; 0x5b
   293a6:	00d2      	lsls	r2, r2, #3
   293a8:	2308      	movs	r3, #8
   293aa:	425b      	negs	r3, r3
   293ac:	469c      	mov	ip, r3
   293ae:	18b2      	adds	r2, r6, r2
   293b0:	4494      	add	ip, r2
   293b2:	4663      	mov	r3, ip
   293b4:	689a      	ldr	r2, [r3, #8]
   293b6:	2303      	movs	r3, #3
   293b8:	4698      	mov	r8, r3
   293ba:	4594      	cmp	ip, r2
   293bc:	d100      	bne.n	293c0 <_malloc_r+0x34c>
   293be:	e0ab      	b.n	29518 <_malloc_r+0x4a4>
   293c0:	4643      	mov	r3, r8
   293c2:	6851      	ldr	r1, [r2, #4]
   293c4:	4399      	bics	r1, r3
   293c6:	4589      	cmp	r9, r1
   293c8:	d300      	bcc.n	293cc <_malloc_r+0x358>
   293ca:	e095      	b.n	294f8 <_malloc_r+0x484>
   293cc:	6892      	ldr	r2, [r2, #8]
   293ce:	4594      	cmp	ip, r2
   293d0:	d1f6      	bne.n	293c0 <_malloc_r+0x34c>
   293d2:	4663      	mov	r3, ip
   293d4:	68da      	ldr	r2, [r3, #12]
   293d6:	6873      	ldr	r3, [r6, #4]
   293d8:	4661      	mov	r1, ip
   293da:	60e2      	str	r2, [r4, #12]
   293dc:	60a1      	str	r1, [r4, #8]
   293de:	6094      	str	r4, [r2, #8]
   293e0:	60cc      	str	r4, [r1, #12]
   293e2:	e6b6      	b.n	29152 <_malloc_r+0xde>
   293e4:	2301      	movs	r3, #1
   293e6:	1960      	adds	r0, r4, r5
   293e8:	431d      	orrs	r5, r3
   293ea:	6065      	str	r5, [r4, #4]
   293ec:	6170      	str	r0, [r6, #20]
   293ee:	6130      	str	r0, [r6, #16]
   293f0:	60c2      	str	r2, [r0, #12]
   293f2:	6082      	str	r2, [r0, #8]
   293f4:	001a      	movs	r2, r3
   293f6:	464b      	mov	r3, r9
   293f8:	430a      	orrs	r2, r1
   293fa:	6042      	str	r2, [r0, #4]
   293fc:	0038      	movs	r0, r7
   293fe:	50e1      	str	r1, [r4, r3]
   29400:	f000 f99a 	bl	29738 <__malloc_unlock>
   29404:	0020      	movs	r0, r4
   29406:	3008      	adds	r0, #8
   29408:	e703      	b.n	29212 <_malloc_r+0x19e>
   2940a:	46c0      	nop			; (mov r8, r8)
   2940c:	20000788 	.word	0x20000788
   29410:	000001ff 	.word	0x000001ff
   29414:	20000b90 	.word	0x20000b90
   29418:	200011c0 	.word	0x200011c0
   2941c:	0000100f 	.word	0x0000100f
   29420:	20001190 	.word	0x20001190
   29424:	00001008 	.word	0x00001008
   29428:	200011b8 	.word	0x200011b8
   2942c:	200011bc 	.word	0x200011bc
   29430:	6873      	ldr	r3, [r6, #4]
   29432:	e68e      	b.n	29152 <_malloc_r+0xde>
   29434:	2308      	movs	r3, #8
   29436:	469b      	mov	fp, r3
   29438:	3b07      	subs	r3, #7
   2943a:	44dc      	add	ip, fp
   2943c:	469b      	mov	fp, r3
   2943e:	44da      	add	sl, fp
   29440:	4643      	mov	r3, r8
   29442:	4652      	mov	r2, sl
   29444:	4213      	tst	r3, r2
   29446:	d000      	beq.n	2944a <_malloc_r+0x3d6>
   29448:	e697      	b.n	2917a <_malloc_r+0x106>
   2944a:	e037      	b.n	294bc <_malloc_r+0x448>
   2944c:	68dc      	ldr	r4, [r3, #12]
   2944e:	3002      	adds	r0, #2
   29450:	42a3      	cmp	r3, r4
   29452:	d100      	bne.n	29456 <_malloc_r+0x3e2>
   29454:	e655      	b.n	29102 <_malloc_r+0x8e>
   29456:	e6ca      	b.n	291ee <_malloc_r+0x17a>
   29458:	2201      	movs	r2, #1
   2945a:	18e3      	adds	r3, r4, r3
   2945c:	6859      	ldr	r1, [r3, #4]
   2945e:	0038      	movs	r0, r7
   29460:	430a      	orrs	r2, r1
   29462:	605a      	str	r2, [r3, #4]
   29464:	68e3      	ldr	r3, [r4, #12]
   29466:	68a2      	ldr	r2, [r4, #8]
   29468:	60d3      	str	r3, [r2, #12]
   2946a:	609a      	str	r2, [r3, #8]
   2946c:	f000 f964 	bl	29738 <__malloc_unlock>
   29470:	0020      	movs	r0, r4
   29472:	3008      	adds	r0, #8
   29474:	e6cd      	b.n	29212 <_malloc_r+0x19e>
   29476:	235b      	movs	r3, #91	; 0x5b
   29478:	4698      	mov	r8, r3
   2947a:	4480      	add	r8, r0
   2947c:	305c      	adds	r0, #92	; 0x5c
   2947e:	00c1      	lsls	r1, r0, #3
   29480:	e61f      	b.n	290c2 <_malloc_r+0x4e>
   29482:	099a      	lsrs	r2, r3, #6
   29484:	0011      	movs	r1, r2
   29486:	3239      	adds	r2, #57	; 0x39
   29488:	3138      	adds	r1, #56	; 0x38
   2948a:	00d2      	lsls	r2, r2, #3
   2948c:	e78c      	b.n	293a8 <_malloc_r+0x334>
   2948e:	42b4      	cmp	r4, r6
   29490:	d000      	beq.n	29494 <_malloc_r+0x420>
   29492:	e75a      	b.n	2934a <_malloc_r+0x2d6>
   29494:	4b4f      	ldr	r3, [pc, #316]	; (295d4 <_malloc_r+0x560>)
   29496:	9a00      	ldr	r2, [sp, #0]
   29498:	469a      	mov	sl, r3
   2949a:	681b      	ldr	r3, [r3, #0]
   2949c:	469c      	mov	ip, r3
   2949e:	4653      	mov	r3, sl
   294a0:	4462      	add	r2, ip
   294a2:	0011      	movs	r1, r2
   294a4:	601a      	str	r2, [r3, #0]
   294a6:	e6ff      	b.n	292a8 <_malloc_r+0x234>
   294a8:	2308      	movs	r3, #8
   294aa:	425b      	negs	r3, r3
   294ac:	469c      	mov	ip, r3
   294ae:	44e1      	add	r9, ip
   294b0:	464b      	mov	r3, r9
   294b2:	689b      	ldr	r3, [r3, #8]
   294b4:	3801      	subs	r0, #1
   294b6:	4599      	cmp	r9, r3
   294b8:	d000      	beq.n	294bc <_malloc_r+0x448>
   294ba:	e084      	b.n	295c6 <_malloc_r+0x552>
   294bc:	4643      	mov	r3, r8
   294be:	4203      	tst	r3, r0
   294c0:	d1f2      	bne.n	294a8 <_malloc_r+0x434>
   294c2:	6873      	ldr	r3, [r6, #4]
   294c4:	438b      	bics	r3, r1
   294c6:	6073      	str	r3, [r6, #4]
   294c8:	0049      	lsls	r1, r1, #1
   294ca:	4299      	cmp	r1, r3
   294cc:	d900      	bls.n	294d0 <_malloc_r+0x45c>
   294ce:	e6b5      	b.n	2923c <_malloc_r+0x1c8>
   294d0:	2900      	cmp	r1, #0
   294d2:	d100      	bne.n	294d6 <_malloc_r+0x462>
   294d4:	e6b2      	b.n	2923c <_malloc_r+0x1c8>
   294d6:	4650      	mov	r0, sl
   294d8:	420b      	tst	r3, r1
   294da:	d000      	beq.n	294de <_malloc_r+0x46a>
   294dc:	e648      	b.n	29170 <_malloc_r+0xfc>
   294de:	0049      	lsls	r1, r1, #1
   294e0:	3004      	adds	r0, #4
   294e2:	420b      	tst	r3, r1
   294e4:	d0fb      	beq.n	294de <_malloc_r+0x46a>
   294e6:	e643      	b.n	29170 <_malloc_r+0xfc>
   294e8:	2301      	movs	r3, #1
   294ea:	464a      	mov	r2, r9
   294ec:	6053      	str	r3, [r2, #4]
   294ee:	0038      	movs	r0, r7
   294f0:	f000 f922 	bl	29738 <__malloc_unlock>
   294f4:	2000      	movs	r0, #0
   294f6:	e68c      	b.n	29212 <_malloc_r+0x19e>
   294f8:	4694      	mov	ip, r2
   294fa:	e76a      	b.n	293d2 <_malloc_r+0x35e>
   294fc:	23aa      	movs	r3, #170	; 0xaa
   294fe:	005b      	lsls	r3, r3, #1
   29500:	4298      	cmp	r0, r3
   29502:	d811      	bhi.n	29528 <_malloc_r+0x4b4>
   29504:	3bdd      	subs	r3, #221	; 0xdd
   29506:	4698      	mov	r8, r3
   29508:	0be8      	lsrs	r0, r5, #15
   2950a:	4480      	add	r8, r0
   2950c:	3078      	adds	r0, #120	; 0x78
   2950e:	00c1      	lsls	r1, r0, #3
   29510:	e5d7      	b.n	290c2 <_malloc_r+0x4e>
   29512:	2380      	movs	r3, #128	; 0x80
   29514:	015b      	lsls	r3, r3, #5
   29516:	e6dd      	b.n	292d4 <_malloc_r+0x260>
   29518:	1089      	asrs	r1, r1, #2
   2951a:	3b02      	subs	r3, #2
   2951c:	408b      	lsls	r3, r1
   2951e:	6872      	ldr	r2, [r6, #4]
   29520:	4313      	orrs	r3, r2
   29522:	6073      	str	r3, [r6, #4]
   29524:	4662      	mov	r2, ip
   29526:	e757      	b.n	293d8 <_malloc_r+0x364>
   29528:	4b2b      	ldr	r3, [pc, #172]	; (295d8 <_malloc_r+0x564>)
   2952a:	4298      	cmp	r0, r3
   2952c:	d81c      	bhi.n	29568 <_malloc_r+0x4f4>
   2952e:	237c      	movs	r3, #124	; 0x7c
   29530:	4698      	mov	r8, r3
   29532:	0ca8      	lsrs	r0, r5, #18
   29534:	4480      	add	r8, r0
   29536:	307d      	adds	r0, #125	; 0x7d
   29538:	00c1      	lsls	r1, r0, #3
   2953a:	e5c2      	b.n	290c2 <_malloc_r+0x4e>
   2953c:	3310      	adds	r3, #16
   2953e:	9300      	str	r3, [sp, #0]
   29540:	e699      	b.n	29276 <_malloc_r+0x202>
   29542:	2a54      	cmp	r2, #84	; 0x54
   29544:	d826      	bhi.n	29594 <_malloc_r+0x520>
   29546:	464b      	mov	r3, r9
   29548:	0b1a      	lsrs	r2, r3, #12
   2954a:	0011      	movs	r1, r2
   2954c:	326f      	adds	r2, #111	; 0x6f
   2954e:	316e      	adds	r1, #110	; 0x6e
   29550:	00d2      	lsls	r2, r2, #3
   29552:	e729      	b.n	293a8 <_malloc_r+0x334>
   29554:	051b      	lsls	r3, r3, #20
   29556:	d000      	beq.n	2955a <_malloc_r+0x4e6>
   29558:	e6a6      	b.n	292a8 <_malloc_r+0x234>
   2955a:	2001      	movs	r0, #1
   2955c:	9b00      	ldr	r3, [sp, #0]
   2955e:	68b2      	ldr	r2, [r6, #8]
   29560:	4443      	add	r3, r8
   29562:	4303      	orrs	r3, r0
   29564:	6053      	str	r3, [r2, #4]
   29566:	e6e6      	b.n	29336 <_malloc_r+0x2c2>
   29568:	21fe      	movs	r1, #254	; 0xfe
   2956a:	237e      	movs	r3, #126	; 0x7e
   2956c:	207f      	movs	r0, #127	; 0x7f
   2956e:	0089      	lsls	r1, r1, #2
   29570:	4698      	mov	r8, r3
   29572:	e5a6      	b.n	290c2 <_malloc_r+0x4e>
   29574:	2300      	movs	r3, #0
   29576:	2001      	movs	r0, #1
   29578:	469b      	mov	fp, r3
   2957a:	e6bd      	b.n	292f8 <_malloc_r+0x284>
   2957c:	0021      	movs	r1, r4
   2957e:	0038      	movs	r0, r7
   29580:	3108      	adds	r1, #8
   29582:	f7ff fa45 	bl	28a10 <_free_r>
   29586:	4653      	mov	r3, sl
   29588:	6819      	ldr	r1, [r3, #0]
   2958a:	e6d4      	b.n	29336 <_malloc_r+0x2c2>
   2958c:	465b      	mov	r3, fp
   2958e:	464a      	mov	r2, r9
   29590:	601a      	str	r2, [r3, #0]
   29592:	e694      	b.n	292be <_malloc_r+0x24a>
   29594:	21aa      	movs	r1, #170	; 0xaa
   29596:	0049      	lsls	r1, r1, #1
   29598:	428a      	cmp	r2, r1
   2959a:	d806      	bhi.n	295aa <_malloc_r+0x536>
   2959c:	464b      	mov	r3, r9
   2959e:	0bda      	lsrs	r2, r3, #15
   295a0:	0011      	movs	r1, r2
   295a2:	3278      	adds	r2, #120	; 0x78
   295a4:	3177      	adds	r1, #119	; 0x77
   295a6:	00d2      	lsls	r2, r2, #3
   295a8:	e6fe      	b.n	293a8 <_malloc_r+0x334>
   295aa:	490b      	ldr	r1, [pc, #44]	; (295d8 <_malloc_r+0x564>)
   295ac:	428a      	cmp	r2, r1
   295ae:	d806      	bhi.n	295be <_malloc_r+0x54a>
   295b0:	464b      	mov	r3, r9
   295b2:	0c9a      	lsrs	r2, r3, #18
   295b4:	0011      	movs	r1, r2
   295b6:	327d      	adds	r2, #125	; 0x7d
   295b8:	317c      	adds	r1, #124	; 0x7c
   295ba:	00d2      	lsls	r2, r2, #3
   295bc:	e6f4      	b.n	293a8 <_malloc_r+0x334>
   295be:	22fe      	movs	r2, #254	; 0xfe
   295c0:	217e      	movs	r1, #126	; 0x7e
   295c2:	0092      	lsls	r2, r2, #2
   295c4:	e6f0      	b.n	293a8 <_malloc_r+0x334>
   295c6:	6873      	ldr	r3, [r6, #4]
   295c8:	e77e      	b.n	294c8 <_malloc_r+0x454>
   295ca:	002b      	movs	r3, r5
   295cc:	08e8      	lsrs	r0, r5, #3
   295ce:	3308      	adds	r3, #8
   295d0:	e605      	b.n	291de <_malloc_r+0x16a>
   295d2:	46c0      	nop			; (mov r8, r8)
   295d4:	20001190 	.word	0x20001190
   295d8:	00000554 	.word	0x00000554

000295dc <__ascii_mbtowc>:
   295dc:	b082      	sub	sp, #8
   295de:	2900      	cmp	r1, #0
   295e0:	d00a      	beq.n	295f8 <__ascii_mbtowc+0x1c>
   295e2:	2a00      	cmp	r2, #0
   295e4:	d00b      	beq.n	295fe <__ascii_mbtowc+0x22>
   295e6:	2b00      	cmp	r3, #0
   295e8:	d00b      	beq.n	29602 <__ascii_mbtowc+0x26>
   295ea:	7813      	ldrb	r3, [r2, #0]
   295ec:	600b      	str	r3, [r1, #0]
   295ee:	7810      	ldrb	r0, [r2, #0]
   295f0:	1e43      	subs	r3, r0, #1
   295f2:	4198      	sbcs	r0, r3
   295f4:	b002      	add	sp, #8
   295f6:	4770      	bx	lr
   295f8:	a901      	add	r1, sp, #4
   295fa:	2a00      	cmp	r2, #0
   295fc:	d1f3      	bne.n	295e6 <__ascii_mbtowc+0xa>
   295fe:	2000      	movs	r0, #0
   29600:	e7f8      	b.n	295f4 <__ascii_mbtowc+0x18>
   29602:	2002      	movs	r0, #2
   29604:	4240      	negs	r0, r0
   29606:	e7f5      	b.n	295f4 <__ascii_mbtowc+0x18>

00029608 <memchr>:
   29608:	b570      	push	{r4, r5, r6, lr}
   2960a:	b2cd      	uxtb	r5, r1
   2960c:	0783      	lsls	r3, r0, #30
   2960e:	d034      	beq.n	2967a <memchr+0x72>
   29610:	1e54      	subs	r4, r2, #1
   29612:	2a00      	cmp	r2, #0
   29614:	d01b      	beq.n	2964e <memchr+0x46>
   29616:	7803      	ldrb	r3, [r0, #0]
   29618:	42ab      	cmp	r3, r5
   2961a:	d019      	beq.n	29650 <memchr+0x48>
   2961c:	2203      	movs	r2, #3
   2961e:	e004      	b.n	2962a <memchr+0x22>
   29620:	3c01      	subs	r4, #1
   29622:	d314      	bcc.n	2964e <memchr+0x46>
   29624:	7803      	ldrb	r3, [r0, #0]
   29626:	42ab      	cmp	r3, r5
   29628:	d012      	beq.n	29650 <memchr+0x48>
   2962a:	3001      	adds	r0, #1
   2962c:	4210      	tst	r0, r2
   2962e:	d1f7      	bne.n	29620 <memchr+0x18>
   29630:	2c03      	cmp	r4, #3
   29632:	d80e      	bhi.n	29652 <memchr+0x4a>
   29634:	2c00      	cmp	r4, #0
   29636:	d00a      	beq.n	2964e <memchr+0x46>
   29638:	7803      	ldrb	r3, [r0, #0]
   2963a:	42ab      	cmp	r3, r5
   2963c:	d008      	beq.n	29650 <memchr+0x48>
   2963e:	1904      	adds	r4, r0, r4
   29640:	e002      	b.n	29648 <memchr+0x40>
   29642:	7803      	ldrb	r3, [r0, #0]
   29644:	42ab      	cmp	r3, r5
   29646:	d003      	beq.n	29650 <memchr+0x48>
   29648:	3001      	adds	r0, #1
   2964a:	4284      	cmp	r4, r0
   2964c:	d1f9      	bne.n	29642 <memchr+0x3a>
   2964e:	2000      	movs	r0, #0
   29650:	bd70      	pop	{r4, r5, r6, pc}
   29652:	22ff      	movs	r2, #255	; 0xff
   29654:	060b      	lsls	r3, r1, #24
   29656:	0c1b      	lsrs	r3, r3, #16
   29658:	4011      	ands	r1, r2
   2965a:	4319      	orrs	r1, r3
   2965c:	040b      	lsls	r3, r1, #16
   2965e:	4e08      	ldr	r6, [pc, #32]	; (29680 <memchr+0x78>)
   29660:	4319      	orrs	r1, r3
   29662:	6803      	ldr	r3, [r0, #0]
   29664:	4a07      	ldr	r2, [pc, #28]	; (29684 <memchr+0x7c>)
   29666:	404b      	eors	r3, r1
   29668:	189a      	adds	r2, r3, r2
   2966a:	439a      	bics	r2, r3
   2966c:	4232      	tst	r2, r6
   2966e:	d1e3      	bne.n	29638 <memchr+0x30>
   29670:	3c04      	subs	r4, #4
   29672:	3004      	adds	r0, #4
   29674:	2c03      	cmp	r4, #3
   29676:	d8f4      	bhi.n	29662 <memchr+0x5a>
   29678:	e7dc      	b.n	29634 <memchr+0x2c>
   2967a:	0014      	movs	r4, r2
   2967c:	e7d8      	b.n	29630 <memchr+0x28>
   2967e:	46c0      	nop			; (mov r8, r8)
   29680:	80808080 	.word	0x80808080
   29684:	fefefeff 	.word	0xfefefeff

00029688 <memmove>:
   29688:	b5f0      	push	{r4, r5, r6, r7, lr}
   2968a:	4288      	cmp	r0, r1
   2968c:	d90a      	bls.n	296a4 <memmove+0x1c>
   2968e:	188b      	adds	r3, r1, r2
   29690:	4298      	cmp	r0, r3
   29692:	d207      	bcs.n	296a4 <memmove+0x1c>
   29694:	1e53      	subs	r3, r2, #1
   29696:	2a00      	cmp	r2, #0
   29698:	d003      	beq.n	296a2 <memmove+0x1a>
   2969a:	5cca      	ldrb	r2, [r1, r3]
   2969c:	54c2      	strb	r2, [r0, r3]
   2969e:	3b01      	subs	r3, #1
   296a0:	d2fb      	bcs.n	2969a <memmove+0x12>
   296a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   296a4:	0005      	movs	r5, r0
   296a6:	2a0f      	cmp	r2, #15
   296a8:	d808      	bhi.n	296bc <memmove+0x34>
   296aa:	2a00      	cmp	r2, #0
   296ac:	d0f9      	beq.n	296a2 <memmove+0x1a>
   296ae:	2300      	movs	r3, #0
   296b0:	5ccc      	ldrb	r4, [r1, r3]
   296b2:	54ec      	strb	r4, [r5, r3]
   296b4:	3301      	adds	r3, #1
   296b6:	4293      	cmp	r3, r2
   296b8:	d1fa      	bne.n	296b0 <memmove+0x28>
   296ba:	e7f2      	b.n	296a2 <memmove+0x1a>
   296bc:	000b      	movs	r3, r1
   296be:	4303      	orrs	r3, r0
   296c0:	079b      	lsls	r3, r3, #30
   296c2:	d12d      	bne.n	29720 <memmove+0x98>
   296c4:	0015      	movs	r5, r2
   296c6:	000c      	movs	r4, r1
   296c8:	0003      	movs	r3, r0
   296ca:	3d10      	subs	r5, #16
   296cc:	092f      	lsrs	r7, r5, #4
   296ce:	3701      	adds	r7, #1
   296d0:	013f      	lsls	r7, r7, #4
   296d2:	19c7      	adds	r7, r0, r7
   296d4:	6826      	ldr	r6, [r4, #0]
   296d6:	601e      	str	r6, [r3, #0]
   296d8:	6866      	ldr	r6, [r4, #4]
   296da:	605e      	str	r6, [r3, #4]
   296dc:	68a6      	ldr	r6, [r4, #8]
   296de:	609e      	str	r6, [r3, #8]
   296e0:	68e6      	ldr	r6, [r4, #12]
   296e2:	3410      	adds	r4, #16
   296e4:	60de      	str	r6, [r3, #12]
   296e6:	3310      	adds	r3, #16
   296e8:	429f      	cmp	r7, r3
   296ea:	d1f3      	bne.n	296d4 <memmove+0x4c>
   296ec:	240f      	movs	r4, #15
   296ee:	43a5      	bics	r5, r4
   296f0:	3510      	adds	r5, #16
   296f2:	1949      	adds	r1, r1, r5
   296f4:	4014      	ands	r4, r2
   296f6:	1945      	adds	r5, r0, r5
   296f8:	2c03      	cmp	r4, #3
   296fa:	d913      	bls.n	29724 <memmove+0x9c>
   296fc:	2300      	movs	r3, #0
   296fe:	1f27      	subs	r7, r4, #4
   29700:	08be      	lsrs	r6, r7, #2
   29702:	3601      	adds	r6, #1
   29704:	00b6      	lsls	r6, r6, #2
   29706:	58cc      	ldr	r4, [r1, r3]
   29708:	50ec      	str	r4, [r5, r3]
   2970a:	3304      	adds	r3, #4
   2970c:	42b3      	cmp	r3, r6
   2970e:	d1fa      	bne.n	29706 <memmove+0x7e>
   29710:	2603      	movs	r6, #3
   29712:	43b7      	bics	r7, r6
   29714:	1d3c      	adds	r4, r7, #4
   29716:	1909      	adds	r1, r1, r4
   29718:	192d      	adds	r5, r5, r4
   2971a:	4032      	ands	r2, r6
   2971c:	d1c7      	bne.n	296ae <memmove+0x26>
   2971e:	e7c0      	b.n	296a2 <memmove+0x1a>
   29720:	0005      	movs	r5, r0
   29722:	e7c4      	b.n	296ae <memmove+0x26>
   29724:	0022      	movs	r2, r4
   29726:	e7c0      	b.n	296aa <memmove+0x22>

00029728 <__malloc_lock>:
   29728:	b510      	push	{r4, lr}
   2972a:	4802      	ldr	r0, [pc, #8]	; (29734 <__malloc_lock+0xc>)
   2972c:	f7ff fc1c 	bl	28f68 <__retarget_lock_acquire_recursive>
   29730:	bd10      	pop	{r4, pc}
   29732:	46c0      	nop			; (mov r8, r8)
   29734:	20002058 	.word	0x20002058

00029738 <__malloc_unlock>:
   29738:	b510      	push	{r4, lr}
   2973a:	4802      	ldr	r0, [pc, #8]	; (29744 <__malloc_unlock+0xc>)
   2973c:	f7ff fc16 	bl	28f6c <__retarget_lock_release_recursive>
   29740:	bd10      	pop	{r4, pc}
   29742:	46c0      	nop			; (mov r8, r8)
   29744:	20002058 	.word	0x20002058

00029748 <_Balloc>:
   29748:	b570      	push	{r4, r5, r6, lr}
   2974a:	0004      	movs	r4, r0
   2974c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   2974e:	000d      	movs	r5, r1
   29750:	2800      	cmp	r0, #0
   29752:	d00a      	beq.n	2976a <_Balloc+0x22>
   29754:	00ab      	lsls	r3, r5, #2
   29756:	18c3      	adds	r3, r0, r3
   29758:	6818      	ldr	r0, [r3, #0]
   2975a:	2800      	cmp	r0, #0
   2975c:	d00f      	beq.n	2977e <_Balloc+0x36>
   2975e:	6802      	ldr	r2, [r0, #0]
   29760:	601a      	str	r2, [r3, #0]
   29762:	2300      	movs	r3, #0
   29764:	6103      	str	r3, [r0, #16]
   29766:	60c3      	str	r3, [r0, #12]
   29768:	bd70      	pop	{r4, r5, r6, pc}
   2976a:	2221      	movs	r2, #33	; 0x21
   2976c:	2104      	movs	r1, #4
   2976e:	0020      	movs	r0, r4
   29770:	f000 fec8 	bl	2a504 <_calloc_r>
   29774:	64e0      	str	r0, [r4, #76]	; 0x4c
   29776:	2800      	cmp	r0, #0
   29778:	d1ec      	bne.n	29754 <_Balloc+0xc>
   2977a:	2000      	movs	r0, #0
   2977c:	e7f4      	b.n	29768 <_Balloc+0x20>
   2977e:	2601      	movs	r6, #1
   29780:	40ae      	lsls	r6, r5
   29782:	1d72      	adds	r2, r6, #5
   29784:	0092      	lsls	r2, r2, #2
   29786:	2101      	movs	r1, #1
   29788:	0020      	movs	r0, r4
   2978a:	f000 febb 	bl	2a504 <_calloc_r>
   2978e:	2800      	cmp	r0, #0
   29790:	d0f3      	beq.n	2977a <_Balloc+0x32>
   29792:	6045      	str	r5, [r0, #4]
   29794:	6086      	str	r6, [r0, #8]
   29796:	e7e4      	b.n	29762 <_Balloc+0x1a>

00029798 <_Bfree>:
   29798:	2900      	cmp	r1, #0
   2979a:	d006      	beq.n	297aa <_Bfree+0x12>
   2979c:	684b      	ldr	r3, [r1, #4]
   2979e:	009a      	lsls	r2, r3, #2
   297a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   297a2:	189b      	adds	r3, r3, r2
   297a4:	681a      	ldr	r2, [r3, #0]
   297a6:	600a      	str	r2, [r1, #0]
   297a8:	6019      	str	r1, [r3, #0]
   297aa:	4770      	bx	lr

000297ac <__multadd>:
   297ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   297ae:	46ce      	mov	lr, r9
   297b0:	4647      	mov	r7, r8
   297b2:	4681      	mov	r9, r0
   297b4:	0008      	movs	r0, r1
   297b6:	b580      	push	{r7, lr}
   297b8:	000d      	movs	r5, r1
   297ba:	690c      	ldr	r4, [r1, #16]
   297bc:	001f      	movs	r7, r3
   297be:	2100      	movs	r1, #0
   297c0:	3014      	adds	r0, #20
   297c2:	6803      	ldr	r3, [r0, #0]
   297c4:	3101      	adds	r1, #1
   297c6:	041e      	lsls	r6, r3, #16
   297c8:	0c36      	lsrs	r6, r6, #16
   297ca:	4356      	muls	r6, r2
   297cc:	0c1b      	lsrs	r3, r3, #16
   297ce:	4353      	muls	r3, r2
   297d0:	19f6      	adds	r6, r6, r7
   297d2:	0c37      	lsrs	r7, r6, #16
   297d4:	19db      	adds	r3, r3, r7
   297d6:	0436      	lsls	r6, r6, #16
   297d8:	0c1f      	lsrs	r7, r3, #16
   297da:	0c36      	lsrs	r6, r6, #16
   297dc:	041b      	lsls	r3, r3, #16
   297de:	199b      	adds	r3, r3, r6
   297e0:	c008      	stmia	r0!, {r3}
   297e2:	428c      	cmp	r4, r1
   297e4:	dced      	bgt.n	297c2 <__multadd+0x16>
   297e6:	2f00      	cmp	r7, #0
   297e8:	d008      	beq.n	297fc <__multadd+0x50>
   297ea:	68ab      	ldr	r3, [r5, #8]
   297ec:	429c      	cmp	r4, r3
   297ee:	da0a      	bge.n	29806 <__multadd+0x5a>
   297f0:	1d23      	adds	r3, r4, #4
   297f2:	009b      	lsls	r3, r3, #2
   297f4:	18eb      	adds	r3, r5, r3
   297f6:	3401      	adds	r4, #1
   297f8:	605f      	str	r7, [r3, #4]
   297fa:	612c      	str	r4, [r5, #16]
   297fc:	0028      	movs	r0, r5
   297fe:	bc0c      	pop	{r2, r3}
   29800:	4690      	mov	r8, r2
   29802:	4699      	mov	r9, r3
   29804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29806:	686b      	ldr	r3, [r5, #4]
   29808:	4648      	mov	r0, r9
   2980a:	1c59      	adds	r1, r3, #1
   2980c:	f7ff ff9c 	bl	29748 <_Balloc>
   29810:	0029      	movs	r1, r5
   29812:	692b      	ldr	r3, [r5, #16]
   29814:	4680      	mov	r8, r0
   29816:	1c9a      	adds	r2, r3, #2
   29818:	0092      	lsls	r2, r2, #2
   2981a:	310c      	adds	r1, #12
   2981c:	300c      	adds	r0, #12
   2981e:	f7fa fc93 	bl	24148 <memcpy>
   29822:	686b      	ldr	r3, [r5, #4]
   29824:	009a      	lsls	r2, r3, #2
   29826:	464b      	mov	r3, r9
   29828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2982a:	189b      	adds	r3, r3, r2
   2982c:	681a      	ldr	r2, [r3, #0]
   2982e:	602a      	str	r2, [r5, #0]
   29830:	601d      	str	r5, [r3, #0]
   29832:	4645      	mov	r5, r8
   29834:	e7dc      	b.n	297f0 <__multadd+0x44>
   29836:	46c0      	nop			; (mov r8, r8)

00029838 <__hi0bits>:
   29838:	0003      	movs	r3, r0
   2983a:	0c02      	lsrs	r2, r0, #16
   2983c:	2000      	movs	r0, #0
   2983e:	2a00      	cmp	r2, #0
   29840:	d101      	bne.n	29846 <__hi0bits+0xe>
   29842:	041b      	lsls	r3, r3, #16
   29844:	3010      	adds	r0, #16
   29846:	0e1a      	lsrs	r2, r3, #24
   29848:	d101      	bne.n	2984e <__hi0bits+0x16>
   2984a:	3008      	adds	r0, #8
   2984c:	021b      	lsls	r3, r3, #8
   2984e:	0f1a      	lsrs	r2, r3, #28
   29850:	d101      	bne.n	29856 <__hi0bits+0x1e>
   29852:	3004      	adds	r0, #4
   29854:	011b      	lsls	r3, r3, #4
   29856:	0f9a      	lsrs	r2, r3, #30
   29858:	d101      	bne.n	2985e <__hi0bits+0x26>
   2985a:	3002      	adds	r0, #2
   2985c:	009b      	lsls	r3, r3, #2
   2985e:	2b00      	cmp	r3, #0
   29860:	db03      	blt.n	2986a <__hi0bits+0x32>
   29862:	3001      	adds	r0, #1
   29864:	005b      	lsls	r3, r3, #1
   29866:	d400      	bmi.n	2986a <__hi0bits+0x32>
   29868:	2020      	movs	r0, #32
   2986a:	4770      	bx	lr

0002986c <__lo0bits>:
   2986c:	6803      	ldr	r3, [r0, #0]
   2986e:	075a      	lsls	r2, r3, #29
   29870:	d009      	beq.n	29886 <__lo0bits+0x1a>
   29872:	2200      	movs	r2, #0
   29874:	07d9      	lsls	r1, r3, #31
   29876:	d404      	bmi.n	29882 <__lo0bits+0x16>
   29878:	079a      	lsls	r2, r3, #30
   2987a:	d420      	bmi.n	298be <__lo0bits+0x52>
   2987c:	2202      	movs	r2, #2
   2987e:	089b      	lsrs	r3, r3, #2
   29880:	6003      	str	r3, [r0, #0]
   29882:	0010      	movs	r0, r2
   29884:	4770      	bx	lr
   29886:	0419      	lsls	r1, r3, #16
   29888:	2200      	movs	r2, #0
   2988a:	2900      	cmp	r1, #0
   2988c:	d101      	bne.n	29892 <__lo0bits+0x26>
   2988e:	0c1b      	lsrs	r3, r3, #16
   29890:	3210      	adds	r2, #16
   29892:	21ff      	movs	r1, #255	; 0xff
   29894:	4219      	tst	r1, r3
   29896:	d101      	bne.n	2989c <__lo0bits+0x30>
   29898:	3208      	adds	r2, #8
   2989a:	0a1b      	lsrs	r3, r3, #8
   2989c:	0719      	lsls	r1, r3, #28
   2989e:	d101      	bne.n	298a4 <__lo0bits+0x38>
   298a0:	3204      	adds	r2, #4
   298a2:	091b      	lsrs	r3, r3, #4
   298a4:	0799      	lsls	r1, r3, #30
   298a6:	d101      	bne.n	298ac <__lo0bits+0x40>
   298a8:	3202      	adds	r2, #2
   298aa:	089b      	lsrs	r3, r3, #2
   298ac:	07d9      	lsls	r1, r3, #31
   298ae:	d404      	bmi.n	298ba <__lo0bits+0x4e>
   298b0:	085b      	lsrs	r3, r3, #1
   298b2:	d101      	bne.n	298b8 <__lo0bits+0x4c>
   298b4:	2220      	movs	r2, #32
   298b6:	e7e4      	b.n	29882 <__lo0bits+0x16>
   298b8:	3201      	adds	r2, #1
   298ba:	6003      	str	r3, [r0, #0]
   298bc:	e7e1      	b.n	29882 <__lo0bits+0x16>
   298be:	085b      	lsrs	r3, r3, #1
   298c0:	6003      	str	r3, [r0, #0]
   298c2:	2201      	movs	r2, #1
   298c4:	e7dd      	b.n	29882 <__lo0bits+0x16>
   298c6:	46c0      	nop			; (mov r8, r8)

000298c8 <__i2b>:
   298c8:	b510      	push	{r4, lr}
   298ca:	000c      	movs	r4, r1
   298cc:	2101      	movs	r1, #1
   298ce:	f7ff ff3b 	bl	29748 <_Balloc>
   298d2:	2301      	movs	r3, #1
   298d4:	6144      	str	r4, [r0, #20]
   298d6:	6103      	str	r3, [r0, #16]
   298d8:	bd10      	pop	{r4, pc}
   298da:	46c0      	nop			; (mov r8, r8)

000298dc <__multiply>:
   298dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   298de:	4657      	mov	r7, sl
   298e0:	464e      	mov	r6, r9
   298e2:	4645      	mov	r5, r8
   298e4:	46de      	mov	lr, fp
   298e6:	b5e0      	push	{r5, r6, r7, lr}
   298e8:	6914      	ldr	r4, [r2, #16]
   298ea:	690e      	ldr	r6, [r1, #16]
   298ec:	b085      	sub	sp, #20
   298ee:	000f      	movs	r7, r1
   298f0:	0015      	movs	r5, r2
   298f2:	42a6      	cmp	r6, r4
   298f4:	da04      	bge.n	29900 <__multiply+0x24>
   298f6:	0033      	movs	r3, r6
   298f8:	0017      	movs	r7, r2
   298fa:	0026      	movs	r6, r4
   298fc:	000d      	movs	r5, r1
   298fe:	001c      	movs	r4, r3
   29900:	1933      	adds	r3, r6, r4
   29902:	4698      	mov	r8, r3
   29904:	68bb      	ldr	r3, [r7, #8]
   29906:	6879      	ldr	r1, [r7, #4]
   29908:	4598      	cmp	r8, r3
   2990a:	dd00      	ble.n	2990e <__multiply+0x32>
   2990c:	3101      	adds	r1, #1
   2990e:	f7ff ff1b 	bl	29748 <_Balloc>
   29912:	2214      	movs	r2, #20
   29914:	0003      	movs	r3, r0
   29916:	4694      	mov	ip, r2
   29918:	4463      	add	r3, ip
   2991a:	469b      	mov	fp, r3
   2991c:	4643      	mov	r3, r8
   2991e:	009b      	lsls	r3, r3, #2
   29920:	445b      	add	r3, fp
   29922:	0019      	movs	r1, r3
   29924:	9302      	str	r3, [sp, #8]
   29926:	9003      	str	r0, [sp, #12]
   29928:	465b      	mov	r3, fp
   2992a:	2200      	movs	r2, #0
   2992c:	458b      	cmp	fp, r1
   2992e:	d203      	bcs.n	29938 <__multiply+0x5c>
   29930:	9902      	ldr	r1, [sp, #8]
   29932:	c304      	stmia	r3!, {r2}
   29934:	4299      	cmp	r1, r3
   29936:	d8fc      	bhi.n	29932 <__multiply+0x56>
   29938:	2314      	movs	r3, #20
   2993a:	00a4      	lsls	r4, r4, #2
   2993c:	469a      	mov	sl, r3
   2993e:	3714      	adds	r7, #20
   29940:	0023      	movs	r3, r4
   29942:	46bc      	mov	ip, r7
   29944:	44aa      	add	sl, r5
   29946:	00b6      	lsls	r6, r6, #2
   29948:	4453      	add	r3, sl
   2994a:	9700      	str	r7, [sp, #0]
   2994c:	44b4      	add	ip, r6
   2994e:	9301      	str	r3, [sp, #4]
   29950:	459a      	cmp	sl, r3
   29952:	d24f      	bcs.n	299f4 <__multiply+0x118>
   29954:	4653      	mov	r3, sl
   29956:	681b      	ldr	r3, [r3, #0]
   29958:	041e      	lsls	r6, r3, #16
   2995a:	0c36      	lsrs	r6, r6, #16
   2995c:	d020      	beq.n	299a0 <__multiply+0xc4>
   2995e:	465c      	mov	r4, fp
   29960:	2700      	movs	r7, #0
   29962:	9d00      	ldr	r5, [sp, #0]
   29964:	0021      	movs	r1, r4
   29966:	cc08      	ldmia	r4!, {r3}
   29968:	cd04      	ldmia	r5!, {r2}
   2996a:	4699      	mov	r9, r3
   2996c:	4648      	mov	r0, r9
   2996e:	0413      	lsls	r3, r2, #16
   29970:	0c1b      	lsrs	r3, r3, #16
   29972:	4373      	muls	r3, r6
   29974:	0400      	lsls	r0, r0, #16
   29976:	0c00      	lsrs	r0, r0, #16
   29978:	181b      	adds	r3, r3, r0
   2997a:	19d8      	adds	r0, r3, r7
   2997c:	0c13      	lsrs	r3, r2, #16
   2997e:	464a      	mov	r2, r9
   29980:	4373      	muls	r3, r6
   29982:	0c12      	lsrs	r2, r2, #16
   29984:	189b      	adds	r3, r3, r2
   29986:	0c02      	lsrs	r2, r0, #16
   29988:	189b      	adds	r3, r3, r2
   2998a:	0402      	lsls	r2, r0, #16
   2998c:	0c1f      	lsrs	r7, r3, #16
   2998e:	0c12      	lsrs	r2, r2, #16
   29990:	041b      	lsls	r3, r3, #16
   29992:	4313      	orrs	r3, r2
   29994:	600b      	str	r3, [r1, #0]
   29996:	45ac      	cmp	ip, r5
   29998:	d8e4      	bhi.n	29964 <__multiply+0x88>
   2999a:	4653      	mov	r3, sl
   2999c:	6027      	str	r7, [r4, #0]
   2999e:	681b      	ldr	r3, [r3, #0]
   299a0:	0c1e      	lsrs	r6, r3, #16
   299a2:	d020      	beq.n	299e6 <__multiply+0x10a>
   299a4:	465b      	mov	r3, fp
   299a6:	2100      	movs	r1, #0
   299a8:	681b      	ldr	r3, [r3, #0]
   299aa:	465c      	mov	r4, fp
   299ac:	0018      	movs	r0, r3
   299ae:	000f      	movs	r7, r1
   299b0:	4662      	mov	r2, ip
   299b2:	9d00      	ldr	r5, [sp, #0]
   299b4:	8829      	ldrh	r1, [r5, #0]
   299b6:	0c00      	lsrs	r0, r0, #16
   299b8:	4371      	muls	r1, r6
   299ba:	1809      	adds	r1, r1, r0
   299bc:	19c9      	adds	r1, r1, r7
   299be:	041b      	lsls	r3, r3, #16
   299c0:	0408      	lsls	r0, r1, #16
   299c2:	0c1b      	lsrs	r3, r3, #16
   299c4:	4303      	orrs	r3, r0
   299c6:	6023      	str	r3, [r4, #0]
   299c8:	cd08      	ldmia	r5!, {r3}
   299ca:	6860      	ldr	r0, [r4, #4]
   299cc:	0c1b      	lsrs	r3, r3, #16
   299ce:	4373      	muls	r3, r6
   299d0:	0407      	lsls	r7, r0, #16
   299d2:	0c3f      	lsrs	r7, r7, #16
   299d4:	19db      	adds	r3, r3, r7
   299d6:	0c09      	lsrs	r1, r1, #16
   299d8:	185b      	adds	r3, r3, r1
   299da:	0c1f      	lsrs	r7, r3, #16
   299dc:	3404      	adds	r4, #4
   299de:	42aa      	cmp	r2, r5
   299e0:	d8e8      	bhi.n	299b4 <__multiply+0xd8>
   299e2:	4694      	mov	ip, r2
   299e4:	6023      	str	r3, [r4, #0]
   299e6:	2304      	movs	r3, #4
   299e8:	4699      	mov	r9, r3
   299ea:	9b01      	ldr	r3, [sp, #4]
   299ec:	44ca      	add	sl, r9
   299ee:	44cb      	add	fp, r9
   299f0:	4553      	cmp	r3, sl
   299f2:	d8af      	bhi.n	29954 <__multiply+0x78>
   299f4:	4643      	mov	r3, r8
   299f6:	2b00      	cmp	r3, #0
   299f8:	dd0e      	ble.n	29a18 <__multiply+0x13c>
   299fa:	9b02      	ldr	r3, [sp, #8]
   299fc:	3b04      	subs	r3, #4
   299fe:	681a      	ldr	r2, [r3, #0]
   29a00:	2a00      	cmp	r2, #0
   29a02:	d109      	bne.n	29a18 <__multiply+0x13c>
   29a04:	4642      	mov	r2, r8
   29a06:	e003      	b.n	29a10 <__multiply+0x134>
   29a08:	3b04      	subs	r3, #4
   29a0a:	6819      	ldr	r1, [r3, #0]
   29a0c:	2900      	cmp	r1, #0
   29a0e:	d102      	bne.n	29a16 <__multiply+0x13a>
   29a10:	3a01      	subs	r2, #1
   29a12:	2a00      	cmp	r2, #0
   29a14:	d1f8      	bne.n	29a08 <__multiply+0x12c>
   29a16:	4690      	mov	r8, r2
   29a18:	9b03      	ldr	r3, [sp, #12]
   29a1a:	4642      	mov	r2, r8
   29a1c:	0018      	movs	r0, r3
   29a1e:	611a      	str	r2, [r3, #16]
   29a20:	b005      	add	sp, #20
   29a22:	bc3c      	pop	{r2, r3, r4, r5}
   29a24:	4690      	mov	r8, r2
   29a26:	4699      	mov	r9, r3
   29a28:	46a2      	mov	sl, r4
   29a2a:	46ab      	mov	fp, r5
   29a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29a2e:	46c0      	nop			; (mov r8, r8)

00029a30 <__pow5mult>:
   29a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a32:	4647      	mov	r7, r8
   29a34:	46ce      	mov	lr, r9
   29a36:	2303      	movs	r3, #3
   29a38:	b580      	push	{r7, lr}
   29a3a:	4680      	mov	r8, r0
   29a3c:	000f      	movs	r7, r1
   29a3e:	0014      	movs	r4, r2
   29a40:	4013      	ands	r3, r2
   29a42:	d13a      	bne.n	29aba <__pow5mult+0x8a>
   29a44:	10a4      	asrs	r4, r4, #2
   29a46:	003e      	movs	r6, r7
   29a48:	2c00      	cmp	r4, #0
   29a4a:	d025      	beq.n	29a98 <__pow5mult+0x68>
   29a4c:	4643      	mov	r3, r8
   29a4e:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   29a50:	2d00      	cmp	r5, #0
   29a52:	d03b      	beq.n	29acc <__pow5mult+0x9c>
   29a54:	003e      	movs	r6, r7
   29a56:	2300      	movs	r3, #0
   29a58:	2701      	movs	r7, #1
   29a5a:	4699      	mov	r9, r3
   29a5c:	4227      	tst	r7, r4
   29a5e:	d107      	bne.n	29a70 <__pow5mult+0x40>
   29a60:	1064      	asrs	r4, r4, #1
   29a62:	d019      	beq.n	29a98 <__pow5mult+0x68>
   29a64:	6828      	ldr	r0, [r5, #0]
   29a66:	2800      	cmp	r0, #0
   29a68:	d01b      	beq.n	29aa2 <__pow5mult+0x72>
   29a6a:	0005      	movs	r5, r0
   29a6c:	4227      	tst	r7, r4
   29a6e:	d0f7      	beq.n	29a60 <__pow5mult+0x30>
   29a70:	002a      	movs	r2, r5
   29a72:	0031      	movs	r1, r6
   29a74:	4640      	mov	r0, r8
   29a76:	f7ff ff31 	bl	298dc <__multiply>
   29a7a:	2e00      	cmp	r6, #0
   29a7c:	d01b      	beq.n	29ab6 <__pow5mult+0x86>
   29a7e:	4642      	mov	r2, r8
   29a80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   29a82:	6873      	ldr	r3, [r6, #4]
   29a84:	4694      	mov	ip, r2
   29a86:	009b      	lsls	r3, r3, #2
   29a88:	4463      	add	r3, ip
   29a8a:	681a      	ldr	r2, [r3, #0]
   29a8c:	1064      	asrs	r4, r4, #1
   29a8e:	6032      	str	r2, [r6, #0]
   29a90:	601e      	str	r6, [r3, #0]
   29a92:	0006      	movs	r6, r0
   29a94:	2c00      	cmp	r4, #0
   29a96:	d1e5      	bne.n	29a64 <__pow5mult+0x34>
   29a98:	0030      	movs	r0, r6
   29a9a:	bc0c      	pop	{r2, r3}
   29a9c:	4690      	mov	r8, r2
   29a9e:	4699      	mov	r9, r3
   29aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29aa2:	002a      	movs	r2, r5
   29aa4:	0029      	movs	r1, r5
   29aa6:	4640      	mov	r0, r8
   29aa8:	f7ff ff18 	bl	298dc <__multiply>
   29aac:	464b      	mov	r3, r9
   29aae:	6028      	str	r0, [r5, #0]
   29ab0:	6003      	str	r3, [r0, #0]
   29ab2:	0005      	movs	r5, r0
   29ab4:	e7da      	b.n	29a6c <__pow5mult+0x3c>
   29ab6:	0006      	movs	r6, r0
   29ab8:	e7d2      	b.n	29a60 <__pow5mult+0x30>
   29aba:	4a0b      	ldr	r2, [pc, #44]	; (29ae8 <__pow5mult+0xb8>)
   29abc:	3b01      	subs	r3, #1
   29abe:	009b      	lsls	r3, r3, #2
   29ac0:	589a      	ldr	r2, [r3, r2]
   29ac2:	2300      	movs	r3, #0
   29ac4:	f7ff fe72 	bl	297ac <__multadd>
   29ac8:	0007      	movs	r7, r0
   29aca:	e7bb      	b.n	29a44 <__pow5mult+0x14>
   29acc:	2101      	movs	r1, #1
   29ace:	4640      	mov	r0, r8
   29ad0:	f7ff fe3a 	bl	29748 <_Balloc>
   29ad4:	4b05      	ldr	r3, [pc, #20]	; (29aec <__pow5mult+0xbc>)
   29ad6:	0005      	movs	r5, r0
   29ad8:	6143      	str	r3, [r0, #20]
   29ada:	2301      	movs	r3, #1
   29adc:	6103      	str	r3, [r0, #16]
   29ade:	4643      	mov	r3, r8
   29ae0:	6498      	str	r0, [r3, #72]	; 0x48
   29ae2:	2300      	movs	r3, #0
   29ae4:	6003      	str	r3, [r0, #0]
   29ae6:	e7b5      	b.n	29a54 <__pow5mult+0x24>
   29ae8:	0002d3c8 	.word	0x0002d3c8
   29aec:	00000271 	.word	0x00000271

00029af0 <__lshift>:
   29af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29af2:	464e      	mov	r6, r9
   29af4:	4645      	mov	r5, r8
   29af6:	46de      	mov	lr, fp
   29af8:	4657      	mov	r7, sl
   29afa:	b5e0      	push	{r5, r6, r7, lr}
   29afc:	000e      	movs	r6, r1
   29afe:	6933      	ldr	r3, [r6, #16]
   29b00:	1154      	asrs	r4, r2, #5
   29b02:	4698      	mov	r8, r3
   29b04:	44a0      	add	r8, r4
   29b06:	4643      	mov	r3, r8
   29b08:	1c5d      	adds	r5, r3, #1
   29b0a:	68b3      	ldr	r3, [r6, #8]
   29b0c:	4683      	mov	fp, r0
   29b0e:	4691      	mov	r9, r2
   29b10:	6849      	ldr	r1, [r1, #4]
   29b12:	429d      	cmp	r5, r3
   29b14:	dd03      	ble.n	29b1e <__lshift+0x2e>
   29b16:	3101      	adds	r1, #1
   29b18:	005b      	lsls	r3, r3, #1
   29b1a:	429d      	cmp	r5, r3
   29b1c:	dcfb      	bgt.n	29b16 <__lshift+0x26>
   29b1e:	4658      	mov	r0, fp
   29b20:	f7ff fe12 	bl	29748 <_Balloc>
   29b24:	0003      	movs	r3, r0
   29b26:	4684      	mov	ip, r0
   29b28:	3314      	adds	r3, #20
   29b2a:	2c00      	cmp	r4, #0
   29b2c:	dd06      	ble.n	29b3c <__lshift+0x4c>
   29b2e:	2100      	movs	r1, #0
   29b30:	00a4      	lsls	r4, r4, #2
   29b32:	001a      	movs	r2, r3
   29b34:	191b      	adds	r3, r3, r4
   29b36:	c202      	stmia	r2!, {r1}
   29b38:	4293      	cmp	r3, r2
   29b3a:	d1fc      	bne.n	29b36 <__lshift+0x46>
   29b3c:	6932      	ldr	r2, [r6, #16]
   29b3e:	4648      	mov	r0, r9
   29b40:	0097      	lsls	r7, r2, #2
   29b42:	0031      	movs	r1, r6
   29b44:	221f      	movs	r2, #31
   29b46:	3114      	adds	r1, #20
   29b48:	4010      	ands	r0, r2
   29b4a:	19cf      	adds	r7, r1, r7
   29b4c:	4681      	mov	r9, r0
   29b4e:	2800      	cmp	r0, #0
   29b50:	d025      	beq.n	29b9e <__lshift+0xae>
   29b52:	2220      	movs	r2, #32
   29b54:	1a12      	subs	r2, r2, r0
   29b56:	4692      	mov	sl, r2
   29b58:	2200      	movs	r2, #0
   29b5a:	4648      	mov	r0, r9
   29b5c:	680c      	ldr	r4, [r1, #0]
   29b5e:	4084      	lsls	r4, r0
   29b60:	4650      	mov	r0, sl
   29b62:	4314      	orrs	r4, r2
   29b64:	601c      	str	r4, [r3, #0]
   29b66:	c904      	ldmia	r1!, {r2}
   29b68:	3304      	adds	r3, #4
   29b6a:	40c2      	lsrs	r2, r0
   29b6c:	428f      	cmp	r7, r1
   29b6e:	d8f4      	bhi.n	29b5a <__lshift+0x6a>
   29b70:	601a      	str	r2, [r3, #0]
   29b72:	2a00      	cmp	r2, #0
   29b74:	d001      	beq.n	29b7a <__lshift+0x8a>
   29b76:	4645      	mov	r5, r8
   29b78:	3502      	adds	r5, #2
   29b7a:	4663      	mov	r3, ip
   29b7c:	3d01      	subs	r5, #1
   29b7e:	611d      	str	r5, [r3, #16]
   29b80:	6873      	ldr	r3, [r6, #4]
   29b82:	4660      	mov	r0, ip
   29b84:	009a      	lsls	r2, r3, #2
   29b86:	465b      	mov	r3, fp
   29b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   29b8a:	189b      	adds	r3, r3, r2
   29b8c:	681a      	ldr	r2, [r3, #0]
   29b8e:	6032      	str	r2, [r6, #0]
   29b90:	601e      	str	r6, [r3, #0]
   29b92:	bc3c      	pop	{r2, r3, r4, r5}
   29b94:	4690      	mov	r8, r2
   29b96:	4699      	mov	r9, r3
   29b98:	46a2      	mov	sl, r4
   29b9a:	46ab      	mov	fp, r5
   29b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29b9e:	c904      	ldmia	r1!, {r2}
   29ba0:	c304      	stmia	r3!, {r2}
   29ba2:	428f      	cmp	r7, r1
   29ba4:	d9e9      	bls.n	29b7a <__lshift+0x8a>
   29ba6:	c904      	ldmia	r1!, {r2}
   29ba8:	c304      	stmia	r3!, {r2}
   29baa:	428f      	cmp	r7, r1
   29bac:	d8f7      	bhi.n	29b9e <__lshift+0xae>
   29bae:	e7e4      	b.n	29b7a <__lshift+0x8a>

00029bb0 <__mcmp>:
   29bb0:	690a      	ldr	r2, [r1, #16]
   29bb2:	6903      	ldr	r3, [r0, #16]
   29bb4:	b530      	push	{r4, r5, lr}
   29bb6:	0005      	movs	r5, r0
   29bb8:	1a98      	subs	r0, r3, r2
   29bba:	d111      	bne.n	29be0 <__mcmp+0x30>
   29bbc:	0092      	lsls	r2, r2, #2
   29bbe:	3514      	adds	r5, #20
   29bc0:	3114      	adds	r1, #20
   29bc2:	18ab      	adds	r3, r5, r2
   29bc4:	1889      	adds	r1, r1, r2
   29bc6:	e001      	b.n	29bcc <__mcmp+0x1c>
   29bc8:	429d      	cmp	r5, r3
   29bca:	d209      	bcs.n	29be0 <__mcmp+0x30>
   29bcc:	3b04      	subs	r3, #4
   29bce:	3904      	subs	r1, #4
   29bd0:	681c      	ldr	r4, [r3, #0]
   29bd2:	680a      	ldr	r2, [r1, #0]
   29bd4:	4294      	cmp	r4, r2
   29bd6:	d0f7      	beq.n	29bc8 <__mcmp+0x18>
   29bd8:	4294      	cmp	r4, r2
   29bda:	4180      	sbcs	r0, r0
   29bdc:	2201      	movs	r2, #1
   29bde:	4310      	orrs	r0, r2
   29be0:	bd30      	pop	{r4, r5, pc}
   29be2:	46c0      	nop			; (mov r8, r8)

00029be4 <__mdiff>:
   29be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29be6:	4645      	mov	r5, r8
   29be8:	46de      	mov	lr, fp
   29bea:	4657      	mov	r7, sl
   29bec:	464e      	mov	r6, r9
   29bee:	0014      	movs	r4, r2
   29bf0:	690b      	ldr	r3, [r1, #16]
   29bf2:	6912      	ldr	r2, [r2, #16]
   29bf4:	b5e0      	push	{r5, r6, r7, lr}
   29bf6:	4688      	mov	r8, r1
   29bf8:	1a9d      	subs	r5, r3, r2
   29bfa:	d11a      	bne.n	29c32 <__mdiff+0x4e>
   29bfc:	000f      	movs	r7, r1
   29bfe:	2114      	movs	r1, #20
   29c00:	468c      	mov	ip, r1
   29c02:	0092      	lsls	r2, r2, #2
   29c04:	3714      	adds	r7, #20
   29c06:	44a4      	add	ip, r4
   29c08:	18bb      	adds	r3, r7, r2
   29c0a:	4462      	add	r2, ip
   29c0c:	e002      	b.n	29c14 <__mdiff+0x30>
   29c0e:	429f      	cmp	r7, r3
   29c10:	d300      	bcc.n	29c14 <__mdiff+0x30>
   29c12:	e070      	b.n	29cf6 <__mdiff+0x112>
   29c14:	3b04      	subs	r3, #4
   29c16:	3a04      	subs	r2, #4
   29c18:	681e      	ldr	r6, [r3, #0]
   29c1a:	6811      	ldr	r1, [r2, #0]
   29c1c:	428e      	cmp	r6, r1
   29c1e:	d0f6      	beq.n	29c0e <__mdiff+0x2a>
   29c20:	d300      	bcc.n	29c24 <__mdiff+0x40>
   29c22:	e071      	b.n	29d08 <__mdiff+0x124>
   29c24:	4643      	mov	r3, r8
   29c26:	003e      	movs	r6, r7
   29c28:	46a0      	mov	r8, r4
   29c2a:	4667      	mov	r7, ip
   29c2c:	001c      	movs	r4, r3
   29c2e:	2501      	movs	r5, #1
   29c30:	e006      	b.n	29c40 <__mdiff+0x5c>
   29c32:	2d00      	cmp	r5, #0
   29c34:	db6a      	blt.n	29d0c <__mdiff+0x128>
   29c36:	4647      	mov	r7, r8
   29c38:	0026      	movs	r6, r4
   29c3a:	2500      	movs	r5, #0
   29c3c:	3714      	adds	r7, #20
   29c3e:	3614      	adds	r6, #20
   29c40:	4643      	mov	r3, r8
   29c42:	6859      	ldr	r1, [r3, #4]
   29c44:	f7ff fd80 	bl	29748 <_Balloc>
   29c48:	4643      	mov	r3, r8
   29c4a:	4681      	mov	r9, r0
   29c4c:	60c5      	str	r5, [r0, #12]
   29c4e:	6918      	ldr	r0, [r3, #16]
   29c50:	464d      	mov	r5, r9
   29c52:	0083      	lsls	r3, r0, #2
   29c54:	469c      	mov	ip, r3
   29c56:	6923      	ldr	r3, [r4, #16]
   29c58:	44bc      	add	ip, r7
   29c5a:	009b      	lsls	r3, r3, #2
   29c5c:	4698      	mov	r8, r3
   29c5e:	2300      	movs	r3, #0
   29c60:	44b0      	add	r8, r6
   29c62:	3514      	adds	r5, #20
   29c64:	469a      	mov	sl, r3
   29c66:	e000      	b.n	29c6a <__mdiff+0x86>
   29c68:	0027      	movs	r7, r4
   29c6a:	ce04      	ldmia	r6!, {r2}
   29c6c:	003c      	movs	r4, r7
   29c6e:	4693      	mov	fp, r2
   29c70:	4659      	mov	r1, fp
   29c72:	cc08      	ldmia	r4!, {r3}
   29c74:	0409      	lsls	r1, r1, #16
   29c76:	041a      	lsls	r2, r3, #16
   29c78:	0c12      	lsrs	r2, r2, #16
   29c7a:	4452      	add	r2, sl
   29c7c:	0c09      	lsrs	r1, r1, #16
   29c7e:	1a52      	subs	r2, r2, r1
   29c80:	0c19      	lsrs	r1, r3, #16
   29c82:	465b      	mov	r3, fp
   29c84:	0c1b      	lsrs	r3, r3, #16
   29c86:	1acb      	subs	r3, r1, r3
   29c88:	1411      	asrs	r1, r2, #16
   29c8a:	185b      	adds	r3, r3, r1
   29c8c:	0412      	lsls	r2, r2, #16
   29c8e:	1419      	asrs	r1, r3, #16
   29c90:	0c12      	lsrs	r2, r2, #16
   29c92:	041b      	lsls	r3, r3, #16
   29c94:	468a      	mov	sl, r1
   29c96:	4313      	orrs	r3, r2
   29c98:	1d29      	adds	r1, r5, #4
   29c9a:	602b      	str	r3, [r5, #0]
   29c9c:	000d      	movs	r5, r1
   29c9e:	45b0      	cmp	r8, r6
   29ca0:	d8e2      	bhi.n	29c68 <__mdiff+0x84>
   29ca2:	45a4      	cmp	ip, r4
   29ca4:	d916      	bls.n	29cd4 <__mdiff+0xf0>
   29ca6:	cc08      	ldmia	r4!, {r3}
   29ca8:	041a      	lsls	r2, r3, #16
   29caa:	0c12      	lsrs	r2, r2, #16
   29cac:	4452      	add	r2, sl
   29cae:	1416      	asrs	r6, r2, #16
   29cb0:	0c1b      	lsrs	r3, r3, #16
   29cb2:	199b      	adds	r3, r3, r6
   29cb4:	0412      	lsls	r2, r2, #16
   29cb6:	141e      	asrs	r6, r3, #16
   29cb8:	0c12      	lsrs	r2, r2, #16
   29cba:	041b      	lsls	r3, r3, #16
   29cbc:	4313      	orrs	r3, r2
   29cbe:	46b2      	mov	sl, r6
   29cc0:	c508      	stmia	r5!, {r3}
   29cc2:	45a4      	cmp	ip, r4
   29cc4:	d8ef      	bhi.n	29ca6 <__mdiff+0xc2>
   29cc6:	4662      	mov	r2, ip
   29cc8:	2403      	movs	r4, #3
   29cca:	1bd2      	subs	r2, r2, r7
   29ccc:	3a05      	subs	r2, #5
   29cce:	43a2      	bics	r2, r4
   29cd0:	3204      	adds	r2, #4
   29cd2:	1889      	adds	r1, r1, r2
   29cd4:	3904      	subs	r1, #4
   29cd6:	2b00      	cmp	r3, #0
   29cd8:	d104      	bne.n	29ce4 <__mdiff+0x100>
   29cda:	3904      	subs	r1, #4
   29cdc:	680b      	ldr	r3, [r1, #0]
   29cde:	3801      	subs	r0, #1
   29ce0:	2b00      	cmp	r3, #0
   29ce2:	d0fa      	beq.n	29cda <__mdiff+0xf6>
   29ce4:	464b      	mov	r3, r9
   29ce6:	6118      	str	r0, [r3, #16]
   29ce8:	4648      	mov	r0, r9
   29cea:	bc3c      	pop	{r2, r3, r4, r5}
   29cec:	4690      	mov	r8, r2
   29cee:	4699      	mov	r9, r3
   29cf0:	46a2      	mov	sl, r4
   29cf2:	46ab      	mov	fp, r5
   29cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29cf6:	2100      	movs	r1, #0
   29cf8:	f7ff fd26 	bl	29748 <_Balloc>
   29cfc:	2301      	movs	r3, #1
   29cfe:	6103      	str	r3, [r0, #16]
   29d00:	2300      	movs	r3, #0
   29d02:	4681      	mov	r9, r0
   29d04:	6143      	str	r3, [r0, #20]
   29d06:	e7ef      	b.n	29ce8 <__mdiff+0x104>
   29d08:	4666      	mov	r6, ip
   29d0a:	e799      	b.n	29c40 <__mdiff+0x5c>
   29d0c:	0027      	movs	r7, r4
   29d0e:	000e      	movs	r6, r1
   29d10:	46a0      	mov	r8, r4
   29d12:	3714      	adds	r7, #20
   29d14:	3614      	adds	r6, #20
   29d16:	000c      	movs	r4, r1
   29d18:	2501      	movs	r5, #1
   29d1a:	e791      	b.n	29c40 <__mdiff+0x5c>

00029d1c <__d2b>:
   29d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29d1e:	2101      	movs	r1, #1
   29d20:	001c      	movs	r4, r3
   29d22:	b083      	sub	sp, #12
   29d24:	9e08      	ldr	r6, [sp, #32]
   29d26:	0015      	movs	r5, r2
   29d28:	f7ff fd0e 	bl	29748 <_Balloc>
   29d2c:	0323      	lsls	r3, r4, #12
   29d2e:	0064      	lsls	r4, r4, #1
   29d30:	0007      	movs	r7, r0
   29d32:	0b1b      	lsrs	r3, r3, #12
   29d34:	0d64      	lsrs	r4, r4, #21
   29d36:	d002      	beq.n	29d3e <__d2b+0x22>
   29d38:	2280      	movs	r2, #128	; 0x80
   29d3a:	0352      	lsls	r2, r2, #13
   29d3c:	4313      	orrs	r3, r2
   29d3e:	9301      	str	r3, [sp, #4]
   29d40:	2d00      	cmp	r5, #0
   29d42:	d019      	beq.n	29d78 <__d2b+0x5c>
   29d44:	4668      	mov	r0, sp
   29d46:	9500      	str	r5, [sp, #0]
   29d48:	f7ff fd90 	bl	2986c <__lo0bits>
   29d4c:	2800      	cmp	r0, #0
   29d4e:	d130      	bne.n	29db2 <__d2b+0x96>
   29d50:	9b00      	ldr	r3, [sp, #0]
   29d52:	617b      	str	r3, [r7, #20]
   29d54:	9b01      	ldr	r3, [sp, #4]
   29d56:	61bb      	str	r3, [r7, #24]
   29d58:	1e5a      	subs	r2, r3, #1
   29d5a:	4193      	sbcs	r3, r2
   29d5c:	1c5d      	adds	r5, r3, #1
   29d5e:	613d      	str	r5, [r7, #16]
   29d60:	2c00      	cmp	r4, #0
   29d62:	d014      	beq.n	29d8e <__d2b+0x72>
   29d64:	4b19      	ldr	r3, [pc, #100]	; (29dcc <__d2b+0xb0>)
   29d66:	469c      	mov	ip, r3
   29d68:	2335      	movs	r3, #53	; 0x35
   29d6a:	4464      	add	r4, ip
   29d6c:	1824      	adds	r4, r4, r0
   29d6e:	1a18      	subs	r0, r3, r0
   29d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29d72:	6034      	str	r4, [r6, #0]
   29d74:	6018      	str	r0, [r3, #0]
   29d76:	e019      	b.n	29dac <__d2b+0x90>
   29d78:	a801      	add	r0, sp, #4
   29d7a:	f7ff fd77 	bl	2986c <__lo0bits>
   29d7e:	9b01      	ldr	r3, [sp, #4]
   29d80:	3020      	adds	r0, #32
   29d82:	617b      	str	r3, [r7, #20]
   29d84:	2301      	movs	r3, #1
   29d86:	2501      	movs	r5, #1
   29d88:	613b      	str	r3, [r7, #16]
   29d8a:	2c00      	cmp	r4, #0
   29d8c:	d1ea      	bne.n	29d64 <__d2b+0x48>
   29d8e:	4b10      	ldr	r3, [pc, #64]	; (29dd0 <__d2b+0xb4>)
   29d90:	469c      	mov	ip, r3
   29d92:	4b10      	ldr	r3, [pc, #64]	; (29dd4 <__d2b+0xb8>)
   29d94:	4460      	add	r0, ip
   29d96:	18eb      	adds	r3, r5, r3
   29d98:	009b      	lsls	r3, r3, #2
   29d9a:	18fb      	adds	r3, r7, r3
   29d9c:	6030      	str	r0, [r6, #0]
   29d9e:	6958      	ldr	r0, [r3, #20]
   29da0:	f7ff fd4a 	bl	29838 <__hi0bits>
   29da4:	016b      	lsls	r3, r5, #5
   29da6:	1a18      	subs	r0, r3, r0
   29da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29daa:	6018      	str	r0, [r3, #0]
   29dac:	0038      	movs	r0, r7
   29dae:	b003      	add	sp, #12
   29db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29db2:	9b01      	ldr	r3, [sp, #4]
   29db4:	2220      	movs	r2, #32
   29db6:	0019      	movs	r1, r3
   29db8:	1a12      	subs	r2, r2, r0
   29dba:	4091      	lsls	r1, r2
   29dbc:	000a      	movs	r2, r1
   29dbe:	40c3      	lsrs	r3, r0
   29dc0:	9900      	ldr	r1, [sp, #0]
   29dc2:	9301      	str	r3, [sp, #4]
   29dc4:	430a      	orrs	r2, r1
   29dc6:	617a      	str	r2, [r7, #20]
   29dc8:	e7c5      	b.n	29d56 <__d2b+0x3a>
   29dca:	46c0      	nop			; (mov r8, r8)
   29dcc:	fffffbcd 	.word	0xfffffbcd
   29dd0:	fffffbce 	.word	0xfffffbce
   29dd4:	3fffffff 	.word	0x3fffffff

00029dd8 <_realloc_r>:
   29dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   29dda:	464e      	mov	r6, r9
   29ddc:	4645      	mov	r5, r8
   29dde:	46de      	mov	lr, fp
   29de0:	4657      	mov	r7, sl
   29de2:	b5e0      	push	{r5, r6, r7, lr}
   29de4:	b085      	sub	sp, #20
   29de6:	9001      	str	r0, [sp, #4]
   29de8:	000e      	movs	r6, r1
   29dea:	0015      	movs	r5, r2
   29dec:	2900      	cmp	r1, #0
   29dee:	d100      	bne.n	29df2 <_realloc_r+0x1a>
   29df0:	e09e      	b.n	29f30 <_realloc_r+0x158>
   29df2:	0037      	movs	r7, r6
   29df4:	9801      	ldr	r0, [sp, #4]
   29df6:	3f08      	subs	r7, #8
   29df8:	f7ff fc96 	bl	29728 <__malloc_lock>
   29dfc:	687a      	ldr	r2, [r7, #4]
   29dfe:	2303      	movs	r3, #3
   29e00:	0014      	movs	r4, r2
   29e02:	439c      	bics	r4, r3
   29e04:	002b      	movs	r3, r5
   29e06:	330b      	adds	r3, #11
   29e08:	46b9      	mov	r9, r7
   29e0a:	2b16      	cmp	r3, #22
   29e0c:	d847      	bhi.n	29e9e <_realloc_r+0xc6>
   29e0e:	2110      	movs	r1, #16
   29e10:	2310      	movs	r3, #16
   29e12:	4688      	mov	r8, r1
   29e14:	4545      	cmp	r5, r8
   29e16:	d846      	bhi.n	29ea6 <_realloc_r+0xce>
   29e18:	429c      	cmp	r4, r3
   29e1a:	da49      	bge.n	29eb0 <_realloc_r+0xd8>
   29e1c:	49cc      	ldr	r1, [pc, #816]	; (2a150 <_realloc_r+0x378>)
   29e1e:	1938      	adds	r0, r7, r4
   29e20:	468b      	mov	fp, r1
   29e22:	6889      	ldr	r1, [r1, #8]
   29e24:	9002      	str	r0, [sp, #8]
   29e26:	4288      	cmp	r0, r1
   29e28:	d100      	bne.n	29e2c <_realloc_r+0x54>
   29e2a:	e0c2      	b.n	29fb2 <_realloc_r+0x1da>
   29e2c:	2101      	movs	r1, #1
   29e2e:	468a      	mov	sl, r1
   29e30:	6840      	ldr	r0, [r0, #4]
   29e32:	0001      	movs	r1, r0
   29e34:	9003      	str	r0, [sp, #12]
   29e36:	4650      	mov	r0, sl
   29e38:	4381      	bics	r1, r0
   29e3a:	468c      	mov	ip, r1
   29e3c:	9902      	ldr	r1, [sp, #8]
   29e3e:	468b      	mov	fp, r1
   29e40:	44dc      	add	ip, fp
   29e42:	4661      	mov	r1, ip
   29e44:	6849      	ldr	r1, [r1, #4]
   29e46:	4201      	tst	r1, r0
   29e48:	d04d      	beq.n	29ee6 <_realloc_r+0x10e>
   29e4a:	4210      	tst	r0, r2
   29e4c:	d100      	bne.n	29e50 <_realloc_r+0x78>
   29e4e:	e0a2      	b.n	29f96 <_realloc_r+0x1be>
   29e50:	0029      	movs	r1, r5
   29e52:	9801      	ldr	r0, [sp, #4]
   29e54:	f7ff f90e 	bl	29074 <_malloc_r>
   29e58:	1e05      	subs	r5, r0, #0
   29e5a:	d039      	beq.n	29ed0 <_realloc_r+0xf8>
   29e5c:	2301      	movs	r3, #1
   29e5e:	0002      	movs	r2, r0
   29e60:	6879      	ldr	r1, [r7, #4]
   29e62:	3a08      	subs	r2, #8
   29e64:	4399      	bics	r1, r3
   29e66:	187f      	adds	r7, r7, r1
   29e68:	42ba      	cmp	r2, r7
   29e6a:	d100      	bne.n	29e6e <_realloc_r+0x96>
   29e6c:	e12e      	b.n	2a0cc <_realloc_r+0x2f4>
   29e6e:	1f22      	subs	r2, r4, #4
   29e70:	2a24      	cmp	r2, #36	; 0x24
   29e72:	d900      	bls.n	29e76 <_realloc_r+0x9e>
   29e74:	e114      	b.n	2a0a0 <_realloc_r+0x2c8>
   29e76:	2a13      	cmp	r2, #19
   29e78:	d900      	bls.n	29e7c <_realloc_r+0xa4>
   29e7a:	e0e8      	b.n	2a04e <_realloc_r+0x276>
   29e7c:	0003      	movs	r3, r0
   29e7e:	0032      	movs	r2, r6
   29e80:	6811      	ldr	r1, [r2, #0]
   29e82:	6019      	str	r1, [r3, #0]
   29e84:	6851      	ldr	r1, [r2, #4]
   29e86:	6059      	str	r1, [r3, #4]
   29e88:	6892      	ldr	r2, [r2, #8]
   29e8a:	609a      	str	r2, [r3, #8]
   29e8c:	9c01      	ldr	r4, [sp, #4]
   29e8e:	0031      	movs	r1, r6
   29e90:	0020      	movs	r0, r4
   29e92:	f7fe fdbd 	bl	28a10 <_free_r>
   29e96:	0020      	movs	r0, r4
   29e98:	f7ff fc4e 	bl	29738 <__malloc_unlock>
   29e9c:	e01b      	b.n	29ed6 <_realloc_r+0xfe>
   29e9e:	2107      	movs	r1, #7
   29ea0:	438b      	bics	r3, r1
   29ea2:	4698      	mov	r8, r3
   29ea4:	d5b6      	bpl.n	29e14 <_realloc_r+0x3c>
   29ea6:	230c      	movs	r3, #12
   29ea8:	9a01      	ldr	r2, [sp, #4]
   29eaa:	2500      	movs	r5, #0
   29eac:	6013      	str	r3, [r2, #0]
   29eae:	e012      	b.n	29ed6 <_realloc_r+0xfe>
   29eb0:	0035      	movs	r5, r6
   29eb2:	4643      	mov	r3, r8
   29eb4:	1ae3      	subs	r3, r4, r3
   29eb6:	2b0f      	cmp	r3, #15
   29eb8:	d825      	bhi.n	29f06 <_realloc_r+0x12e>
   29eba:	464b      	mov	r3, r9
   29ebc:	2201      	movs	r2, #1
   29ebe:	4649      	mov	r1, r9
   29ec0:	685b      	ldr	r3, [r3, #4]
   29ec2:	4013      	ands	r3, r2
   29ec4:	4323      	orrs	r3, r4
   29ec6:	604b      	str	r3, [r1, #4]
   29ec8:	444c      	add	r4, r9
   29eca:	6863      	ldr	r3, [r4, #4]
   29ecc:	431a      	orrs	r2, r3
   29ece:	6062      	str	r2, [r4, #4]
   29ed0:	9801      	ldr	r0, [sp, #4]
   29ed2:	f7ff fc31 	bl	29738 <__malloc_unlock>
   29ed6:	0028      	movs	r0, r5
   29ed8:	b005      	add	sp, #20
   29eda:	bc3c      	pop	{r2, r3, r4, r5}
   29edc:	4690      	mov	r8, r2
   29ede:	4699      	mov	r9, r3
   29ee0:	46a2      	mov	sl, r4
   29ee2:	46ab      	mov	fp, r5
   29ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29ee6:	2103      	movs	r1, #3
   29ee8:	9803      	ldr	r0, [sp, #12]
   29eea:	468c      	mov	ip, r1
   29eec:	4388      	bics	r0, r1
   29eee:	1821      	adds	r1, r4, r0
   29ef0:	468b      	mov	fp, r1
   29ef2:	4299      	cmp	r1, r3
   29ef4:	db21      	blt.n	29f3a <_realloc_r+0x162>
   29ef6:	9a02      	ldr	r2, [sp, #8]
   29ef8:	0035      	movs	r5, r6
   29efa:	68d3      	ldr	r3, [r2, #12]
   29efc:	6892      	ldr	r2, [r2, #8]
   29efe:	465c      	mov	r4, fp
   29f00:	60d3      	str	r3, [r2, #12]
   29f02:	609a      	str	r2, [r3, #8]
   29f04:	e7d5      	b.n	29eb2 <_realloc_r+0xda>
   29f06:	464a      	mov	r2, r9
   29f08:	2001      	movs	r0, #1
   29f0a:	4646      	mov	r6, r8
   29f0c:	6852      	ldr	r2, [r2, #4]
   29f0e:	4649      	mov	r1, r9
   29f10:	4002      	ands	r2, r0
   29f12:	4332      	orrs	r2, r6
   29f14:	464e      	mov	r6, r9
   29f16:	4441      	add	r1, r8
   29f18:	4303      	orrs	r3, r0
   29f1a:	6072      	str	r2, [r6, #4]
   29f1c:	444c      	add	r4, r9
   29f1e:	604b      	str	r3, [r1, #4]
   29f20:	6863      	ldr	r3, [r4, #4]
   29f22:	3108      	adds	r1, #8
   29f24:	4318      	orrs	r0, r3
   29f26:	6060      	str	r0, [r4, #4]
   29f28:	9801      	ldr	r0, [sp, #4]
   29f2a:	f7fe fd71 	bl	28a10 <_free_r>
   29f2e:	e7cf      	b.n	29ed0 <_realloc_r+0xf8>
   29f30:	0011      	movs	r1, r2
   29f32:	f7ff f89f 	bl	29074 <_malloc_r>
   29f36:	0005      	movs	r5, r0
   29f38:	e7cd      	b.n	29ed6 <_realloc_r+0xfe>
   29f3a:	4651      	mov	r1, sl
   29f3c:	4211      	tst	r1, r2
   29f3e:	d000      	beq.n	29f42 <_realloc_r+0x16a>
   29f40:	e786      	b.n	29e50 <_realloc_r+0x78>
   29f42:	4661      	mov	r1, ip
   29f44:	683a      	ldr	r2, [r7, #0]
   29f46:	1aba      	subs	r2, r7, r2
   29f48:	4692      	mov	sl, r2
   29f4a:	6852      	ldr	r2, [r2, #4]
   29f4c:	438a      	bics	r2, r1
   29f4e:	1880      	adds	r0, r0, r2
   29f50:	4683      	mov	fp, r0
   29f52:	44a3      	add	fp, r4
   29f54:	459b      	cmp	fp, r3
   29f56:	db26      	blt.n	29fa6 <_realloc_r+0x1ce>
   29f58:	9a02      	ldr	r2, [sp, #8]
   29f5a:	68d3      	ldr	r3, [r2, #12]
   29f5c:	6892      	ldr	r2, [r2, #8]
   29f5e:	60d3      	str	r3, [r2, #12]
   29f60:	609a      	str	r2, [r3, #8]
   29f62:	4653      	mov	r3, sl
   29f64:	4652      	mov	r2, sl
   29f66:	4655      	mov	r5, sl
   29f68:	6892      	ldr	r2, [r2, #8]
   29f6a:	68db      	ldr	r3, [r3, #12]
   29f6c:	3508      	adds	r5, #8
   29f6e:	60d3      	str	r3, [r2, #12]
   29f70:	609a      	str	r2, [r3, #8]
   29f72:	1f22      	subs	r2, r4, #4
   29f74:	2a24      	cmp	r2, #36	; 0x24
   29f76:	d900      	bls.n	29f7a <_realloc_r+0x1a2>
   29f78:	e096      	b.n	2a0a8 <_realloc_r+0x2d0>
   29f7a:	2a13      	cmp	r2, #19
   29f7c:	d972      	bls.n	2a064 <_realloc_r+0x28c>
   29f7e:	4653      	mov	r3, sl
   29f80:	6831      	ldr	r1, [r6, #0]
   29f82:	6099      	str	r1, [r3, #8]
   29f84:	6871      	ldr	r1, [r6, #4]
   29f86:	60d9      	str	r1, [r3, #12]
   29f88:	2a1b      	cmp	r2, #27
   29f8a:	d900      	bls.n	29f8e <_realloc_r+0x1b6>
   29f8c:	e0a4      	b.n	2a0d8 <_realloc_r+0x300>
   29f8e:	0032      	movs	r2, r6
   29f90:	3310      	adds	r3, #16
   29f92:	3208      	adds	r2, #8
   29f94:	e068      	b.n	2a068 <_realloc_r+0x290>
   29f96:	683a      	ldr	r2, [r7, #0]
   29f98:	1aba      	subs	r2, r7, r2
   29f9a:	4692      	mov	sl, r2
   29f9c:	4651      	mov	r1, sl
   29f9e:	2203      	movs	r2, #3
   29fa0:	6849      	ldr	r1, [r1, #4]
   29fa2:	4391      	bics	r1, r2
   29fa4:	000a      	movs	r2, r1
   29fa6:	4693      	mov	fp, r2
   29fa8:	44a3      	add	fp, r4
   29faa:	459b      	cmp	fp, r3
   29fac:	da00      	bge.n	29fb0 <_realloc_r+0x1d8>
   29fae:	e74f      	b.n	29e50 <_realloc_r+0x78>
   29fb0:	e7d7      	b.n	29f62 <_realloc_r+0x18a>
   29fb2:	2003      	movs	r0, #3
   29fb4:	9902      	ldr	r1, [sp, #8]
   29fb6:	4684      	mov	ip, r0
   29fb8:	6849      	ldr	r1, [r1, #4]
   29fba:	4381      	bics	r1, r0
   29fbc:	4640      	mov	r0, r8
   29fbe:	1909      	adds	r1, r1, r4
   29fc0:	3010      	adds	r0, #16
   29fc2:	9002      	str	r0, [sp, #8]
   29fc4:	4281      	cmp	r1, r0
   29fc6:	da58      	bge.n	2a07a <_realloc_r+0x2a2>
   29fc8:	07d2      	lsls	r2, r2, #31
   29fca:	d500      	bpl.n	29fce <_realloc_r+0x1f6>
   29fcc:	e740      	b.n	29e50 <_realloc_r+0x78>
   29fce:	4660      	mov	r0, ip
   29fd0:	683a      	ldr	r2, [r7, #0]
   29fd2:	1aba      	subs	r2, r7, r2
   29fd4:	4692      	mov	sl, r2
   29fd6:	6852      	ldr	r2, [r2, #4]
   29fd8:	4382      	bics	r2, r0
   29fda:	9802      	ldr	r0, [sp, #8]
   29fdc:	1851      	adds	r1, r2, r1
   29fde:	9103      	str	r1, [sp, #12]
   29fe0:	4288      	cmp	r0, r1
   29fe2:	dce0      	bgt.n	29fa6 <_realloc_r+0x1ce>
   29fe4:	4653      	mov	r3, sl
   29fe6:	4652      	mov	r2, sl
   29fe8:	4655      	mov	r5, sl
   29fea:	6892      	ldr	r2, [r2, #8]
   29fec:	68db      	ldr	r3, [r3, #12]
   29fee:	3508      	adds	r5, #8
   29ff0:	60d3      	str	r3, [r2, #12]
   29ff2:	609a      	str	r2, [r3, #8]
   29ff4:	1f22      	subs	r2, r4, #4
   29ff6:	2a24      	cmp	r2, #36	; 0x24
   29ff8:	d900      	bls.n	29ffc <_realloc_r+0x224>
   29ffa:	e08e      	b.n	2a11a <_realloc_r+0x342>
   29ffc:	2a13      	cmp	r2, #19
   29ffe:	d800      	bhi.n	2a002 <_realloc_r+0x22a>
   2a000:	e088      	b.n	2a114 <_realloc_r+0x33c>
   2a002:	4653      	mov	r3, sl
   2a004:	6831      	ldr	r1, [r6, #0]
   2a006:	6099      	str	r1, [r3, #8]
   2a008:	6871      	ldr	r1, [r6, #4]
   2a00a:	60d9      	str	r1, [r3, #12]
   2a00c:	2a1b      	cmp	r2, #27
   2a00e:	d900      	bls.n	2a012 <_realloc_r+0x23a>
   2a010:	e088      	b.n	2a124 <_realloc_r+0x34c>
   2a012:	0032      	movs	r2, r6
   2a014:	3310      	adds	r3, #16
   2a016:	3208      	adds	r2, #8
   2a018:	6811      	ldr	r1, [r2, #0]
   2a01a:	6019      	str	r1, [r3, #0]
   2a01c:	6851      	ldr	r1, [r2, #4]
   2a01e:	6059      	str	r1, [r3, #4]
   2a020:	6892      	ldr	r2, [r2, #8]
   2a022:	609a      	str	r2, [r3, #8]
   2a024:	4651      	mov	r1, sl
   2a026:	465b      	mov	r3, fp
   2a028:	4642      	mov	r2, r8
   2a02a:	4441      	add	r1, r8
   2a02c:	6099      	str	r1, [r3, #8]
   2a02e:	9b03      	ldr	r3, [sp, #12]
   2a030:	9801      	ldr	r0, [sp, #4]
   2a032:	1a9a      	subs	r2, r3, r2
   2a034:	2301      	movs	r3, #1
   2a036:	431a      	orrs	r2, r3
   2a038:	604a      	str	r2, [r1, #4]
   2a03a:	4652      	mov	r2, sl
   2a03c:	6852      	ldr	r2, [r2, #4]
   2a03e:	4013      	ands	r3, r2
   2a040:	4642      	mov	r2, r8
   2a042:	4313      	orrs	r3, r2
   2a044:	4652      	mov	r2, sl
   2a046:	6053      	str	r3, [r2, #4]
   2a048:	f7ff fb76 	bl	29738 <__malloc_unlock>
   2a04c:	e743      	b.n	29ed6 <_realloc_r+0xfe>
   2a04e:	6833      	ldr	r3, [r6, #0]
   2a050:	6003      	str	r3, [r0, #0]
   2a052:	6873      	ldr	r3, [r6, #4]
   2a054:	6043      	str	r3, [r0, #4]
   2a056:	2a1b      	cmp	r2, #27
   2a058:	d82d      	bhi.n	2a0b6 <_realloc_r+0x2de>
   2a05a:	0003      	movs	r3, r0
   2a05c:	0032      	movs	r2, r6
   2a05e:	3308      	adds	r3, #8
   2a060:	3208      	adds	r2, #8
   2a062:	e70d      	b.n	29e80 <_realloc_r+0xa8>
   2a064:	002b      	movs	r3, r5
   2a066:	0032      	movs	r2, r6
   2a068:	6811      	ldr	r1, [r2, #0]
   2a06a:	465c      	mov	r4, fp
   2a06c:	6019      	str	r1, [r3, #0]
   2a06e:	6851      	ldr	r1, [r2, #4]
   2a070:	46d1      	mov	r9, sl
   2a072:	6059      	str	r1, [r3, #4]
   2a074:	6892      	ldr	r2, [r2, #8]
   2a076:	609a      	str	r2, [r3, #8]
   2a078:	e71b      	b.n	29eb2 <_realloc_r+0xda>
   2a07a:	4643      	mov	r3, r8
   2a07c:	18fa      	adds	r2, r7, r3
   2a07e:	465b      	mov	r3, fp
   2a080:	609a      	str	r2, [r3, #8]
   2a082:	4643      	mov	r3, r8
   2a084:	1ac9      	subs	r1, r1, r3
   2a086:	2301      	movs	r3, #1
   2a088:	4319      	orrs	r1, r3
   2a08a:	6051      	str	r1, [r2, #4]
   2a08c:	687a      	ldr	r2, [r7, #4]
   2a08e:	9801      	ldr	r0, [sp, #4]
   2a090:	4013      	ands	r3, r2
   2a092:	4642      	mov	r2, r8
   2a094:	4313      	orrs	r3, r2
   2a096:	607b      	str	r3, [r7, #4]
   2a098:	f7ff fb4e 	bl	29738 <__malloc_unlock>
   2a09c:	0035      	movs	r5, r6
   2a09e:	e71a      	b.n	29ed6 <_realloc_r+0xfe>
   2a0a0:	0031      	movs	r1, r6
   2a0a2:	f7ff faf1 	bl	29688 <memmove>
   2a0a6:	e6f1      	b.n	29e8c <_realloc_r+0xb4>
   2a0a8:	0031      	movs	r1, r6
   2a0aa:	0028      	movs	r0, r5
   2a0ac:	f7ff faec 	bl	29688 <memmove>
   2a0b0:	465c      	mov	r4, fp
   2a0b2:	46d1      	mov	r9, sl
   2a0b4:	e6fd      	b.n	29eb2 <_realloc_r+0xda>
   2a0b6:	68b3      	ldr	r3, [r6, #8]
   2a0b8:	6083      	str	r3, [r0, #8]
   2a0ba:	68f3      	ldr	r3, [r6, #12]
   2a0bc:	60c3      	str	r3, [r0, #12]
   2a0be:	2a24      	cmp	r2, #36	; 0x24
   2a0c0:	d015      	beq.n	2a0ee <_realloc_r+0x316>
   2a0c2:	0003      	movs	r3, r0
   2a0c4:	0032      	movs	r2, r6
   2a0c6:	3310      	adds	r3, #16
   2a0c8:	3210      	adds	r2, #16
   2a0ca:	e6d9      	b.n	29e80 <_realloc_r+0xa8>
   2a0cc:	6853      	ldr	r3, [r2, #4]
   2a0ce:	2203      	movs	r2, #3
   2a0d0:	4393      	bics	r3, r2
   2a0d2:	18e4      	adds	r4, r4, r3
   2a0d4:	0035      	movs	r5, r6
   2a0d6:	e6ec      	b.n	29eb2 <_realloc_r+0xda>
   2a0d8:	4653      	mov	r3, sl
   2a0da:	68b1      	ldr	r1, [r6, #8]
   2a0dc:	6119      	str	r1, [r3, #16]
   2a0de:	68f1      	ldr	r1, [r6, #12]
   2a0e0:	6159      	str	r1, [r3, #20]
   2a0e2:	2a24      	cmp	r2, #36	; 0x24
   2a0e4:	d00c      	beq.n	2a100 <_realloc_r+0x328>
   2a0e6:	0032      	movs	r2, r6
   2a0e8:	3318      	adds	r3, #24
   2a0ea:	3210      	adds	r2, #16
   2a0ec:	e7bc      	b.n	2a068 <_realloc_r+0x290>
   2a0ee:	6933      	ldr	r3, [r6, #16]
   2a0f0:	0032      	movs	r2, r6
   2a0f2:	6103      	str	r3, [r0, #16]
   2a0f4:	0003      	movs	r3, r0
   2a0f6:	6971      	ldr	r1, [r6, #20]
   2a0f8:	3318      	adds	r3, #24
   2a0fa:	3218      	adds	r2, #24
   2a0fc:	6141      	str	r1, [r0, #20]
   2a0fe:	e6bf      	b.n	29e80 <_realloc_r+0xa8>
   2a100:	4653      	mov	r3, sl
   2a102:	6932      	ldr	r2, [r6, #16]
   2a104:	4651      	mov	r1, sl
   2a106:	619a      	str	r2, [r3, #24]
   2a108:	0032      	movs	r2, r6
   2a10a:	6970      	ldr	r0, [r6, #20]
   2a10c:	3320      	adds	r3, #32
   2a10e:	3218      	adds	r2, #24
   2a110:	61c8      	str	r0, [r1, #28]
   2a112:	e7a9      	b.n	2a068 <_realloc_r+0x290>
   2a114:	002b      	movs	r3, r5
   2a116:	0032      	movs	r2, r6
   2a118:	e77e      	b.n	2a018 <_realloc_r+0x240>
   2a11a:	0031      	movs	r1, r6
   2a11c:	0028      	movs	r0, r5
   2a11e:	f7ff fab3 	bl	29688 <memmove>
   2a122:	e77f      	b.n	2a024 <_realloc_r+0x24c>
   2a124:	4653      	mov	r3, sl
   2a126:	68b1      	ldr	r1, [r6, #8]
   2a128:	6119      	str	r1, [r3, #16]
   2a12a:	68f1      	ldr	r1, [r6, #12]
   2a12c:	6159      	str	r1, [r3, #20]
   2a12e:	2a24      	cmp	r2, #36	; 0x24
   2a130:	d003      	beq.n	2a13a <_realloc_r+0x362>
   2a132:	0032      	movs	r2, r6
   2a134:	3318      	adds	r3, #24
   2a136:	3210      	adds	r2, #16
   2a138:	e76e      	b.n	2a018 <_realloc_r+0x240>
   2a13a:	4653      	mov	r3, sl
   2a13c:	6932      	ldr	r2, [r6, #16]
   2a13e:	4651      	mov	r1, sl
   2a140:	619a      	str	r2, [r3, #24]
   2a142:	0032      	movs	r2, r6
   2a144:	6970      	ldr	r0, [r6, #20]
   2a146:	3320      	adds	r3, #32
   2a148:	3218      	adds	r2, #24
   2a14a:	61c8      	str	r0, [r1, #28]
   2a14c:	e764      	b.n	2a018 <_realloc_r+0x240>
   2a14e:	46c0      	nop			; (mov r8, r8)
   2a150:	20000788 	.word	0x20000788

0002a154 <_sbrk_r>:
   2a154:	2300      	movs	r3, #0
   2a156:	b570      	push	{r4, r5, r6, lr}
   2a158:	4c06      	ldr	r4, [pc, #24]	; (2a174 <_sbrk_r+0x20>)
   2a15a:	0005      	movs	r5, r0
   2a15c:	0008      	movs	r0, r1
   2a15e:	6023      	str	r3, [r4, #0]
   2a160:	f7dc f874 	bl	624c <_sbrk>
   2a164:	1c43      	adds	r3, r0, #1
   2a166:	d000      	beq.n	2a16a <_sbrk_r+0x16>
   2a168:	bd70      	pop	{r4, r5, r6, pc}
   2a16a:	6823      	ldr	r3, [r4, #0]
   2a16c:	2b00      	cmp	r3, #0
   2a16e:	d0fb      	beq.n	2a168 <_sbrk_r+0x14>
   2a170:	602b      	str	r3, [r5, #0]
   2a172:	e7f9      	b.n	2a168 <_sbrk_r+0x14>
   2a174:	2000206c 	.word	0x2000206c

0002a178 <__sread>:
   2a178:	b570      	push	{r4, r5, r6, lr}
   2a17a:	000c      	movs	r4, r1
   2a17c:	250e      	movs	r5, #14
   2a17e:	5f49      	ldrsh	r1, [r1, r5]
   2a180:	f000 fb18 	bl	2a7b4 <_read_r>
   2a184:	2800      	cmp	r0, #0
   2a186:	db03      	blt.n	2a190 <__sread+0x18>
   2a188:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2a18a:	181b      	adds	r3, r3, r0
   2a18c:	6523      	str	r3, [r4, #80]	; 0x50
   2a18e:	bd70      	pop	{r4, r5, r6, pc}
   2a190:	89a3      	ldrh	r3, [r4, #12]
   2a192:	4a02      	ldr	r2, [pc, #8]	; (2a19c <__sread+0x24>)
   2a194:	4013      	ands	r3, r2
   2a196:	81a3      	strh	r3, [r4, #12]
   2a198:	e7f9      	b.n	2a18e <__sread+0x16>
   2a19a:	46c0      	nop			; (mov r8, r8)
   2a19c:	ffffefff 	.word	0xffffefff

0002a1a0 <__swrite>:
   2a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a1a2:	0016      	movs	r6, r2
   2a1a4:	001f      	movs	r7, r3
   2a1a6:	220c      	movs	r2, #12
   2a1a8:	5e8b      	ldrsh	r3, [r1, r2]
   2a1aa:	0005      	movs	r5, r0
   2a1ac:	000c      	movs	r4, r1
   2a1ae:	05da      	lsls	r2, r3, #23
   2a1b0:	d507      	bpl.n	2a1c2 <__swrite+0x22>
   2a1b2:	230e      	movs	r3, #14
   2a1b4:	5ec9      	ldrsh	r1, [r1, r3]
   2a1b6:	2200      	movs	r2, #0
   2a1b8:	2302      	movs	r3, #2
   2a1ba:	f000 fae7 	bl	2a78c <_lseek_r>
   2a1be:	220c      	movs	r2, #12
   2a1c0:	5ea3      	ldrsh	r3, [r4, r2]
   2a1c2:	4a05      	ldr	r2, [pc, #20]	; (2a1d8 <__swrite+0x38>)
   2a1c4:	0028      	movs	r0, r5
   2a1c6:	4013      	ands	r3, r2
   2a1c8:	81a3      	strh	r3, [r4, #12]
   2a1ca:	0032      	movs	r2, r6
   2a1cc:	230e      	movs	r3, #14
   2a1ce:	5ee1      	ldrsh	r1, [r4, r3]
   2a1d0:	003b      	movs	r3, r7
   2a1d2:	f000 f909 	bl	2a3e8 <_write_r>
   2a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a1d8:	ffffefff 	.word	0xffffefff

0002a1dc <__sseek>:
   2a1dc:	b570      	push	{r4, r5, r6, lr}
   2a1de:	000c      	movs	r4, r1
   2a1e0:	250e      	movs	r5, #14
   2a1e2:	5f49      	ldrsh	r1, [r1, r5]
   2a1e4:	f000 fad2 	bl	2a78c <_lseek_r>
   2a1e8:	1c43      	adds	r3, r0, #1
   2a1ea:	d006      	beq.n	2a1fa <__sseek+0x1e>
   2a1ec:	2380      	movs	r3, #128	; 0x80
   2a1ee:	89a2      	ldrh	r2, [r4, #12]
   2a1f0:	015b      	lsls	r3, r3, #5
   2a1f2:	4313      	orrs	r3, r2
   2a1f4:	81a3      	strh	r3, [r4, #12]
   2a1f6:	6520      	str	r0, [r4, #80]	; 0x50
   2a1f8:	bd70      	pop	{r4, r5, r6, pc}
   2a1fa:	89a3      	ldrh	r3, [r4, #12]
   2a1fc:	4a01      	ldr	r2, [pc, #4]	; (2a204 <__sseek+0x28>)
   2a1fe:	4013      	ands	r3, r2
   2a200:	81a3      	strh	r3, [r4, #12]
   2a202:	e7f9      	b.n	2a1f8 <__sseek+0x1c>
   2a204:	ffffefff 	.word	0xffffefff

0002a208 <__sclose>:
   2a208:	b510      	push	{r4, lr}
   2a20a:	230e      	movs	r3, #14
   2a20c:	5ec9      	ldrsh	r1, [r1, r3]
   2a20e:	f000 f9a5 	bl	2a55c <_close_r>
   2a212:	bd10      	pop	{r4, pc}

0002a214 <__ssprint_r>:
   2a214:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a216:	4657      	mov	r7, sl
   2a218:	464e      	mov	r6, r9
   2a21a:	46de      	mov	lr, fp
   2a21c:	4645      	mov	r5, r8
   2a21e:	b5e0      	push	{r5, r6, r7, lr}
   2a220:	6893      	ldr	r3, [r2, #8]
   2a222:	b083      	sub	sp, #12
   2a224:	9001      	str	r0, [sp, #4]
   2a226:	000e      	movs	r6, r1
   2a228:	4692      	mov	sl, r2
   2a22a:	2b00      	cmp	r3, #0
   2a22c:	d070      	beq.n	2a310 <__ssprint_r+0xfc>
   2a22e:	688d      	ldr	r5, [r1, #8]
   2a230:	6813      	ldr	r3, [r2, #0]
   2a232:	002c      	movs	r4, r5
   2a234:	6808      	ldr	r0, [r1, #0]
   2a236:	001d      	movs	r5, r3
   2a238:	e046      	b.n	2a2c8 <__ssprint_r+0xb4>
   2a23a:	2290      	movs	r2, #144	; 0x90
   2a23c:	89b3      	ldrh	r3, [r6, #12]
   2a23e:	00d2      	lsls	r2, r2, #3
   2a240:	4213      	tst	r3, r2
   2a242:	d030      	beq.n	2a2a6 <__ssprint_r+0x92>
   2a244:	6931      	ldr	r1, [r6, #16]
   2a246:	1a42      	subs	r2, r0, r1
   2a248:	4693      	mov	fp, r2
   2a24a:	6970      	ldr	r0, [r6, #20]
   2a24c:	0042      	lsls	r2, r0, #1
   2a24e:	1812      	adds	r2, r2, r0
   2a250:	0fd0      	lsrs	r0, r2, #31
   2a252:	1882      	adds	r2, r0, r2
   2a254:	1052      	asrs	r2, r2, #1
   2a256:	4690      	mov	r8, r2
   2a258:	465a      	mov	r2, fp
   2a25a:	1c50      	adds	r0, r2, #1
   2a25c:	19c0      	adds	r0, r0, r7
   2a25e:	4642      	mov	r2, r8
   2a260:	4540      	cmp	r0, r8
   2a262:	d901      	bls.n	2a268 <__ssprint_r+0x54>
   2a264:	4680      	mov	r8, r0
   2a266:	0002      	movs	r2, r0
   2a268:	2080      	movs	r0, #128	; 0x80
   2a26a:	00c0      	lsls	r0, r0, #3
   2a26c:	4203      	tst	r3, r0
   2a26e:	d038      	beq.n	2a2e2 <__ssprint_r+0xce>
   2a270:	0011      	movs	r1, r2
   2a272:	9801      	ldr	r0, [sp, #4]
   2a274:	f7fe fefe 	bl	29074 <_malloc_r>
   2a278:	1e04      	subs	r4, r0, #0
   2a27a:	d054      	beq.n	2a326 <__ssprint_r+0x112>
   2a27c:	465a      	mov	r2, fp
   2a27e:	6931      	ldr	r1, [r6, #16]
   2a280:	f7f9 ff62 	bl	24148 <memcpy>
   2a284:	89b3      	ldrh	r3, [r6, #12]
   2a286:	4a2a      	ldr	r2, [pc, #168]	; (2a330 <__ssprint_r+0x11c>)
   2a288:	4013      	ands	r3, r2
   2a28a:	2280      	movs	r2, #128	; 0x80
   2a28c:	4313      	orrs	r3, r2
   2a28e:	81b3      	strh	r3, [r6, #12]
   2a290:	4643      	mov	r3, r8
   2a292:	0020      	movs	r0, r4
   2a294:	465a      	mov	r2, fp
   2a296:	6134      	str	r4, [r6, #16]
   2a298:	46b8      	mov	r8, r7
   2a29a:	003c      	movs	r4, r7
   2a29c:	4458      	add	r0, fp
   2a29e:	6173      	str	r3, [r6, #20]
   2a2a0:	1a9b      	subs	r3, r3, r2
   2a2a2:	6030      	str	r0, [r6, #0]
   2a2a4:	60b3      	str	r3, [r6, #8]
   2a2a6:	4642      	mov	r2, r8
   2a2a8:	4649      	mov	r1, r9
   2a2aa:	f7ff f9ed 	bl	29688 <memmove>
   2a2ae:	68b3      	ldr	r3, [r6, #8]
   2a2b0:	1b1c      	subs	r4, r3, r4
   2a2b2:	6833      	ldr	r3, [r6, #0]
   2a2b4:	60b4      	str	r4, [r6, #8]
   2a2b6:	4443      	add	r3, r8
   2a2b8:	6033      	str	r3, [r6, #0]
   2a2ba:	0018      	movs	r0, r3
   2a2bc:	4653      	mov	r3, sl
   2a2be:	689b      	ldr	r3, [r3, #8]
   2a2c0:	1bdf      	subs	r7, r3, r7
   2a2c2:	4653      	mov	r3, sl
   2a2c4:	609f      	str	r7, [r3, #8]
   2a2c6:	d023      	beq.n	2a310 <__ssprint_r+0xfc>
   2a2c8:	686f      	ldr	r7, [r5, #4]
   2a2ca:	002b      	movs	r3, r5
   2a2cc:	3508      	adds	r5, #8
   2a2ce:	2f00      	cmp	r7, #0
   2a2d0:	d0fa      	beq.n	2a2c8 <__ssprint_r+0xb4>
   2a2d2:	681b      	ldr	r3, [r3, #0]
   2a2d4:	46a0      	mov	r8, r4
   2a2d6:	4699      	mov	r9, r3
   2a2d8:	42a7      	cmp	r7, r4
   2a2da:	d2ae      	bcs.n	2a23a <__ssprint_r+0x26>
   2a2dc:	003c      	movs	r4, r7
   2a2de:	46b8      	mov	r8, r7
   2a2e0:	e7e1      	b.n	2a2a6 <__ssprint_r+0x92>
   2a2e2:	9801      	ldr	r0, [sp, #4]
   2a2e4:	f7ff fd78 	bl	29dd8 <_realloc_r>
   2a2e8:	1e04      	subs	r4, r0, #0
   2a2ea:	d1d1      	bne.n	2a290 <__ssprint_r+0x7c>
   2a2ec:	9c01      	ldr	r4, [sp, #4]
   2a2ee:	6931      	ldr	r1, [r6, #16]
   2a2f0:	0020      	movs	r0, r4
   2a2f2:	f7fe fb8d 	bl	28a10 <_free_r>
   2a2f6:	230c      	movs	r3, #12
   2a2f8:	6023      	str	r3, [r4, #0]
   2a2fa:	2240      	movs	r2, #64	; 0x40
   2a2fc:	89b3      	ldrh	r3, [r6, #12]
   2a2fe:	2001      	movs	r0, #1
   2a300:	4313      	orrs	r3, r2
   2a302:	81b3      	strh	r3, [r6, #12]
   2a304:	4652      	mov	r2, sl
   2a306:	2300      	movs	r3, #0
   2a308:	4240      	negs	r0, r0
   2a30a:	6093      	str	r3, [r2, #8]
   2a30c:	6053      	str	r3, [r2, #4]
   2a30e:	e003      	b.n	2a318 <__ssprint_r+0x104>
   2a310:	2300      	movs	r3, #0
   2a312:	4652      	mov	r2, sl
   2a314:	2000      	movs	r0, #0
   2a316:	6053      	str	r3, [r2, #4]
   2a318:	b003      	add	sp, #12
   2a31a:	bc3c      	pop	{r2, r3, r4, r5}
   2a31c:	4690      	mov	r8, r2
   2a31e:	4699      	mov	r9, r3
   2a320:	46a2      	mov	sl, r4
   2a322:	46ab      	mov	fp, r5
   2a324:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a326:	230c      	movs	r3, #12
   2a328:	9a01      	ldr	r2, [sp, #4]
   2a32a:	6013      	str	r3, [r2, #0]
   2a32c:	e7e5      	b.n	2a2fa <__ssprint_r+0xe6>
   2a32e:	46c0      	nop			; (mov r8, r8)
   2a330:	fffffb7f 	.word	0xfffffb7f

0002a334 <__sprint_r.part.0>:
   2a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a336:	464e      	mov	r6, r9
   2a338:	4645      	mov	r5, r8
   2a33a:	46de      	mov	lr, fp
   2a33c:	4657      	mov	r7, sl
   2a33e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2a340:	b5e0      	push	{r5, r6, r7, lr}
   2a342:	4680      	mov	r8, r0
   2a344:	000e      	movs	r6, r1
   2a346:	4691      	mov	r9, r2
   2a348:	049b      	lsls	r3, r3, #18
   2a34a:	d531      	bpl.n	2a3b0 <__sprint_r.part.0+0x7c>
   2a34c:	6813      	ldr	r3, [r2, #0]
   2a34e:	469a      	mov	sl, r3
   2a350:	6893      	ldr	r3, [r2, #8]
   2a352:	2b00      	cmp	r3, #0
   2a354:	d02a      	beq.n	2a3ac <__sprint_r.part.0+0x78>
   2a356:	4652      	mov	r2, sl
   2a358:	6852      	ldr	r2, [r2, #4]
   2a35a:	2500      	movs	r5, #0
   2a35c:	4693      	mov	fp, r2
   2a35e:	0897      	lsrs	r7, r2, #2
   2a360:	4652      	mov	r2, sl
   2a362:	6814      	ldr	r4, [r2, #0]
   2a364:	d104      	bne.n	2a370 <__sprint_r.part.0+0x3c>
   2a366:	e016      	b.n	2a396 <__sprint_r.part.0+0x62>
   2a368:	3501      	adds	r5, #1
   2a36a:	3404      	adds	r4, #4
   2a36c:	42af      	cmp	r7, r5
   2a36e:	d010      	beq.n	2a392 <__sprint_r.part.0+0x5e>
   2a370:	0032      	movs	r2, r6
   2a372:	6821      	ldr	r1, [r4, #0]
   2a374:	4640      	mov	r0, r8
   2a376:	f000 f9b5 	bl	2a6e4 <_fputwc_r>
   2a37a:	1c43      	adds	r3, r0, #1
   2a37c:	d1f4      	bne.n	2a368 <__sprint_r.part.0+0x34>
   2a37e:	464a      	mov	r2, r9
   2a380:	2300      	movs	r3, #0
   2a382:	6093      	str	r3, [r2, #8]
   2a384:	6053      	str	r3, [r2, #4]
   2a386:	bc3c      	pop	{r2, r3, r4, r5}
   2a388:	4690      	mov	r8, r2
   2a38a:	4699      	mov	r9, r3
   2a38c:	46a2      	mov	sl, r4
   2a38e:	46ab      	mov	fp, r5
   2a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a392:	464b      	mov	r3, r9
   2a394:	689b      	ldr	r3, [r3, #8]
   2a396:	465a      	mov	r2, fp
   2a398:	2103      	movs	r1, #3
   2a39a:	438a      	bics	r2, r1
   2a39c:	1a9b      	subs	r3, r3, r2
   2a39e:	464a      	mov	r2, r9
   2a3a0:	6093      	str	r3, [r2, #8]
   2a3a2:	2208      	movs	r2, #8
   2a3a4:	4694      	mov	ip, r2
   2a3a6:	44e2      	add	sl, ip
   2a3a8:	2b00      	cmp	r3, #0
   2a3aa:	d1d4      	bne.n	2a356 <__sprint_r.part.0+0x22>
   2a3ac:	2000      	movs	r0, #0
   2a3ae:	e7e6      	b.n	2a37e <__sprint_r.part.0+0x4a>
   2a3b0:	f7fe fc0c 	bl	28bcc <__sfvwrite_r>
   2a3b4:	e7e3      	b.n	2a37e <__sprint_r.part.0+0x4a>
   2a3b6:	46c0      	nop			; (mov r8, r8)

0002a3b8 <__sprint_r>:
   2a3b8:	6893      	ldr	r3, [r2, #8]
   2a3ba:	b510      	push	{r4, lr}
   2a3bc:	2b00      	cmp	r3, #0
   2a3be:	d002      	beq.n	2a3c6 <__sprint_r+0xe>
   2a3c0:	f7ff ffb8 	bl	2a334 <__sprint_r.part.0>
   2a3c4:	bd10      	pop	{r4, pc}
   2a3c6:	6053      	str	r3, [r2, #4]
   2a3c8:	2000      	movs	r0, #0
   2a3ca:	e7fb      	b.n	2a3c4 <__sprint_r+0xc>

0002a3cc <__ascii_wctomb>:
   2a3cc:	2900      	cmp	r1, #0
   2a3ce:	d004      	beq.n	2a3da <__ascii_wctomb+0xe>
   2a3d0:	2aff      	cmp	r2, #255	; 0xff
   2a3d2:	d804      	bhi.n	2a3de <__ascii_wctomb+0x12>
   2a3d4:	2001      	movs	r0, #1
   2a3d6:	700a      	strb	r2, [r1, #0]
   2a3d8:	4770      	bx	lr
   2a3da:	2000      	movs	r0, #0
   2a3dc:	e7fc      	b.n	2a3d8 <__ascii_wctomb+0xc>
   2a3de:	238a      	movs	r3, #138	; 0x8a
   2a3e0:	6003      	str	r3, [r0, #0]
   2a3e2:	2001      	movs	r0, #1
   2a3e4:	4240      	negs	r0, r0
   2a3e6:	e7f7      	b.n	2a3d8 <__ascii_wctomb+0xc>

0002a3e8 <_write_r>:
   2a3e8:	b570      	push	{r4, r5, r6, lr}
   2a3ea:	0005      	movs	r5, r0
   2a3ec:	0008      	movs	r0, r1
   2a3ee:	0011      	movs	r1, r2
   2a3f0:	2200      	movs	r2, #0
   2a3f2:	4c06      	ldr	r4, [pc, #24]	; (2a40c <_write_r+0x24>)
   2a3f4:	6022      	str	r2, [r4, #0]
   2a3f6:	001a      	movs	r2, r3
   2a3f8:	f7db fef2 	bl	61e0 <_write>
   2a3fc:	1c43      	adds	r3, r0, #1
   2a3fe:	d000      	beq.n	2a402 <_write_r+0x1a>
   2a400:	bd70      	pop	{r4, r5, r6, pc}
   2a402:	6823      	ldr	r3, [r4, #0]
   2a404:	2b00      	cmp	r3, #0
   2a406:	d0fb      	beq.n	2a400 <_write_r+0x18>
   2a408:	602b      	str	r3, [r5, #0]
   2a40a:	e7f9      	b.n	2a400 <_write_r+0x18>
   2a40c:	2000206c 	.word	0x2000206c

0002a410 <__register_exitproc>:
   2a410:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a412:	464e      	mov	r6, r9
   2a414:	4645      	mov	r5, r8
   2a416:	46de      	mov	lr, fp
   2a418:	4657      	mov	r7, sl
   2a41a:	b5e0      	push	{r5, r6, r7, lr}
   2a41c:	4d36      	ldr	r5, [pc, #216]	; (2a4f8 <__register_exitproc+0xe8>)
   2a41e:	b083      	sub	sp, #12
   2a420:	0006      	movs	r6, r0
   2a422:	6828      	ldr	r0, [r5, #0]
   2a424:	4698      	mov	r8, r3
   2a426:	000f      	movs	r7, r1
   2a428:	4691      	mov	r9, r2
   2a42a:	f7fe fd9d 	bl	28f68 <__retarget_lock_acquire_recursive>
   2a42e:	4b33      	ldr	r3, [pc, #204]	; (2a4fc <__register_exitproc+0xec>)
   2a430:	681c      	ldr	r4, [r3, #0]
   2a432:	23a4      	movs	r3, #164	; 0xa4
   2a434:	005b      	lsls	r3, r3, #1
   2a436:	58e0      	ldr	r0, [r4, r3]
   2a438:	2800      	cmp	r0, #0
   2a43a:	d052      	beq.n	2a4e2 <__register_exitproc+0xd2>
   2a43c:	6843      	ldr	r3, [r0, #4]
   2a43e:	2b1f      	cmp	r3, #31
   2a440:	dc13      	bgt.n	2a46a <__register_exitproc+0x5a>
   2a442:	1c5a      	adds	r2, r3, #1
   2a444:	9201      	str	r2, [sp, #4]
   2a446:	2e00      	cmp	r6, #0
   2a448:	d128      	bne.n	2a49c <__register_exitproc+0x8c>
   2a44a:	9a01      	ldr	r2, [sp, #4]
   2a44c:	3302      	adds	r3, #2
   2a44e:	009b      	lsls	r3, r3, #2
   2a450:	6042      	str	r2, [r0, #4]
   2a452:	501f      	str	r7, [r3, r0]
   2a454:	6828      	ldr	r0, [r5, #0]
   2a456:	f7fe fd89 	bl	28f6c <__retarget_lock_release_recursive>
   2a45a:	2000      	movs	r0, #0
   2a45c:	b003      	add	sp, #12
   2a45e:	bc3c      	pop	{r2, r3, r4, r5}
   2a460:	4690      	mov	r8, r2
   2a462:	4699      	mov	r9, r3
   2a464:	46a2      	mov	sl, r4
   2a466:	46ab      	mov	fp, r5
   2a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a46a:	4b25      	ldr	r3, [pc, #148]	; (2a500 <__register_exitproc+0xf0>)
   2a46c:	2b00      	cmp	r3, #0
   2a46e:	d03d      	beq.n	2a4ec <__register_exitproc+0xdc>
   2a470:	20c8      	movs	r0, #200	; 0xc8
   2a472:	0040      	lsls	r0, r0, #1
   2a474:	f7fe fdf4 	bl	29060 <malloc>
   2a478:	2800      	cmp	r0, #0
   2a47a:	d037      	beq.n	2a4ec <__register_exitproc+0xdc>
   2a47c:	22a4      	movs	r2, #164	; 0xa4
   2a47e:	2300      	movs	r3, #0
   2a480:	0052      	lsls	r2, r2, #1
   2a482:	58a1      	ldr	r1, [r4, r2]
   2a484:	6043      	str	r3, [r0, #4]
   2a486:	6001      	str	r1, [r0, #0]
   2a488:	50a0      	str	r0, [r4, r2]
   2a48a:	3240      	adds	r2, #64	; 0x40
   2a48c:	5083      	str	r3, [r0, r2]
   2a48e:	3204      	adds	r2, #4
   2a490:	5083      	str	r3, [r0, r2]
   2a492:	3301      	adds	r3, #1
   2a494:	9301      	str	r3, [sp, #4]
   2a496:	2300      	movs	r3, #0
   2a498:	2e00      	cmp	r6, #0
   2a49a:	d0d6      	beq.n	2a44a <__register_exitproc+0x3a>
   2a49c:	009a      	lsls	r2, r3, #2
   2a49e:	4692      	mov	sl, r2
   2a4a0:	4482      	add	sl, r0
   2a4a2:	464a      	mov	r2, r9
   2a4a4:	2188      	movs	r1, #136	; 0x88
   2a4a6:	4654      	mov	r4, sl
   2a4a8:	5062      	str	r2, [r4, r1]
   2a4aa:	22c4      	movs	r2, #196	; 0xc4
   2a4ac:	0052      	lsls	r2, r2, #1
   2a4ae:	4691      	mov	r9, r2
   2a4b0:	4481      	add	r9, r0
   2a4b2:	464a      	mov	r2, r9
   2a4b4:	3987      	subs	r1, #135	; 0x87
   2a4b6:	4099      	lsls	r1, r3
   2a4b8:	6812      	ldr	r2, [r2, #0]
   2a4ba:	468b      	mov	fp, r1
   2a4bc:	430a      	orrs	r2, r1
   2a4be:	4694      	mov	ip, r2
   2a4c0:	464a      	mov	r2, r9
   2a4c2:	4661      	mov	r1, ip
   2a4c4:	6011      	str	r1, [r2, #0]
   2a4c6:	2284      	movs	r2, #132	; 0x84
   2a4c8:	4641      	mov	r1, r8
   2a4ca:	0052      	lsls	r2, r2, #1
   2a4cc:	50a1      	str	r1, [r4, r2]
   2a4ce:	2e02      	cmp	r6, #2
   2a4d0:	d1bb      	bne.n	2a44a <__register_exitproc+0x3a>
   2a4d2:	0002      	movs	r2, r0
   2a4d4:	465c      	mov	r4, fp
   2a4d6:	328d      	adds	r2, #141	; 0x8d
   2a4d8:	32ff      	adds	r2, #255	; 0xff
   2a4da:	6811      	ldr	r1, [r2, #0]
   2a4dc:	430c      	orrs	r4, r1
   2a4de:	6014      	str	r4, [r2, #0]
   2a4e0:	e7b3      	b.n	2a44a <__register_exitproc+0x3a>
   2a4e2:	0020      	movs	r0, r4
   2a4e4:	304d      	adds	r0, #77	; 0x4d
   2a4e6:	30ff      	adds	r0, #255	; 0xff
   2a4e8:	50e0      	str	r0, [r4, r3]
   2a4ea:	e7a7      	b.n	2a43c <__register_exitproc+0x2c>
   2a4ec:	6828      	ldr	r0, [r5, #0]
   2a4ee:	f7fe fd3d 	bl	28f6c <__retarget_lock_release_recursive>
   2a4f2:	2001      	movs	r0, #1
   2a4f4:	4240      	negs	r0, r0
   2a4f6:	e7b1      	b.n	2a45c <__register_exitproc+0x4c>
   2a4f8:	20000618 	.word	0x20000618
   2a4fc:	0002cf60 	.word	0x0002cf60
   2a500:	00029061 	.word	0x00029061

0002a504 <_calloc_r>:
   2a504:	b510      	push	{r4, lr}
   2a506:	4351      	muls	r1, r2
   2a508:	f7fe fdb4 	bl	29074 <_malloc_r>
   2a50c:	1e04      	subs	r4, r0, #0
   2a50e:	d01c      	beq.n	2a54a <_calloc_r+0x46>
   2a510:	0003      	movs	r3, r0
   2a512:	3b08      	subs	r3, #8
   2a514:	685a      	ldr	r2, [r3, #4]
   2a516:	2303      	movs	r3, #3
   2a518:	439a      	bics	r2, r3
   2a51a:	3a04      	subs	r2, #4
   2a51c:	2a24      	cmp	r2, #36	; 0x24
   2a51e:	d816      	bhi.n	2a54e <_calloc_r+0x4a>
   2a520:	0003      	movs	r3, r0
   2a522:	2a13      	cmp	r2, #19
   2a524:	d90d      	bls.n	2a542 <_calloc_r+0x3e>
   2a526:	2100      	movs	r1, #0
   2a528:	3308      	adds	r3, #8
   2a52a:	6001      	str	r1, [r0, #0]
   2a52c:	6041      	str	r1, [r0, #4]
   2a52e:	2a1b      	cmp	r2, #27
   2a530:	d907      	bls.n	2a542 <_calloc_r+0x3e>
   2a532:	6081      	str	r1, [r0, #8]
   2a534:	60c1      	str	r1, [r0, #12]
   2a536:	2a24      	cmp	r2, #36	; 0x24
   2a538:	d10d      	bne.n	2a556 <_calloc_r+0x52>
   2a53a:	0003      	movs	r3, r0
   2a53c:	6101      	str	r1, [r0, #16]
   2a53e:	3318      	adds	r3, #24
   2a540:	6141      	str	r1, [r0, #20]
   2a542:	2200      	movs	r2, #0
   2a544:	601a      	str	r2, [r3, #0]
   2a546:	605a      	str	r2, [r3, #4]
   2a548:	609a      	str	r2, [r3, #8]
   2a54a:	0020      	movs	r0, r4
   2a54c:	bd10      	pop	{r4, pc}
   2a54e:	2100      	movs	r1, #0
   2a550:	f7f9 fe3c 	bl	241cc <memset>
   2a554:	e7f9      	b.n	2a54a <_calloc_r+0x46>
   2a556:	0003      	movs	r3, r0
   2a558:	3310      	adds	r3, #16
   2a55a:	e7f2      	b.n	2a542 <_calloc_r+0x3e>

0002a55c <_close_r>:
   2a55c:	2300      	movs	r3, #0
   2a55e:	b570      	push	{r4, r5, r6, lr}
   2a560:	4c06      	ldr	r4, [pc, #24]	; (2a57c <_close_r+0x20>)
   2a562:	0005      	movs	r5, r0
   2a564:	0008      	movs	r0, r1
   2a566:	6023      	str	r3, [r4, #0]
   2a568:	f7db fe8e 	bl	6288 <_close>
   2a56c:	1c43      	adds	r3, r0, #1
   2a56e:	d000      	beq.n	2a572 <_close_r+0x16>
   2a570:	bd70      	pop	{r4, r5, r6, pc}
   2a572:	6823      	ldr	r3, [r4, #0]
   2a574:	2b00      	cmp	r3, #0
   2a576:	d0fb      	beq.n	2a570 <_close_r+0x14>
   2a578:	602b      	str	r3, [r5, #0]
   2a57a:	e7f9      	b.n	2a570 <_close_r+0x14>
   2a57c:	2000206c 	.word	0x2000206c

0002a580 <_fclose_r>:
   2a580:	b570      	push	{r4, r5, r6, lr}
   2a582:	0005      	movs	r5, r0
   2a584:	1e0c      	subs	r4, r1, #0
   2a586:	d040      	beq.n	2a60a <_fclose_r+0x8a>
   2a588:	2800      	cmp	r0, #0
   2a58a:	d002      	beq.n	2a592 <_fclose_r+0x12>
   2a58c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2a58e:	2b00      	cmp	r3, #0
   2a590:	d03e      	beq.n	2a610 <_fclose_r+0x90>
   2a592:	2601      	movs	r6, #1
   2a594:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2a596:	4233      	tst	r3, r6
   2a598:	d133      	bne.n	2a602 <_fclose_r+0x82>
   2a59a:	89a3      	ldrh	r3, [r4, #12]
   2a59c:	059b      	lsls	r3, r3, #22
   2a59e:	d543      	bpl.n	2a628 <_fclose_r+0xa8>
   2a5a0:	0021      	movs	r1, r4
   2a5a2:	0028      	movs	r0, r5
   2a5a4:	f7fe f888 	bl	286b8 <__sflush_r>
   2a5a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a5aa:	0006      	movs	r6, r0
   2a5ac:	2b00      	cmp	r3, #0
   2a5ae:	d004      	beq.n	2a5ba <_fclose_r+0x3a>
   2a5b0:	69e1      	ldr	r1, [r4, #28]
   2a5b2:	0028      	movs	r0, r5
   2a5b4:	4798      	blx	r3
   2a5b6:	2800      	cmp	r0, #0
   2a5b8:	db44      	blt.n	2a644 <_fclose_r+0xc4>
   2a5ba:	89a3      	ldrh	r3, [r4, #12]
   2a5bc:	061b      	lsls	r3, r3, #24
   2a5be:	d42a      	bmi.n	2a616 <_fclose_r+0x96>
   2a5c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2a5c2:	2900      	cmp	r1, #0
   2a5c4:	d008      	beq.n	2a5d8 <_fclose_r+0x58>
   2a5c6:	0023      	movs	r3, r4
   2a5c8:	3340      	adds	r3, #64	; 0x40
   2a5ca:	4299      	cmp	r1, r3
   2a5cc:	d002      	beq.n	2a5d4 <_fclose_r+0x54>
   2a5ce:	0028      	movs	r0, r5
   2a5d0:	f7fe fa1e 	bl	28a10 <_free_r>
   2a5d4:	2300      	movs	r3, #0
   2a5d6:	6323      	str	r3, [r4, #48]	; 0x30
   2a5d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   2a5da:	2900      	cmp	r1, #0
   2a5dc:	d004      	beq.n	2a5e8 <_fclose_r+0x68>
   2a5de:	0028      	movs	r0, r5
   2a5e0:	f7fe fa16 	bl	28a10 <_free_r>
   2a5e4:	2300      	movs	r3, #0
   2a5e6:	6463      	str	r3, [r4, #68]	; 0x44
   2a5e8:	f7fe f998 	bl	2891c <__sfp_lock_acquire>
   2a5ec:	2300      	movs	r3, #0
   2a5ee:	81a3      	strh	r3, [r4, #12]
   2a5f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2a5f2:	07db      	lsls	r3, r3, #31
   2a5f4:	d514      	bpl.n	2a620 <_fclose_r+0xa0>
   2a5f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a5f8:	f7fe fcb4 	bl	28f64 <__retarget_lock_close_recursive>
   2a5fc:	f7fe f996 	bl	2892c <__sfp_lock_release>
   2a600:	e004      	b.n	2a60c <_fclose_r+0x8c>
   2a602:	220c      	movs	r2, #12
   2a604:	5ea3      	ldrsh	r3, [r4, r2]
   2a606:	2b00      	cmp	r3, #0
   2a608:	d1ca      	bne.n	2a5a0 <_fclose_r+0x20>
   2a60a:	2600      	movs	r6, #0
   2a60c:	0030      	movs	r0, r6
   2a60e:	bd70      	pop	{r4, r5, r6, pc}
   2a610:	f7fe f954 	bl	288bc <__sinit>
   2a614:	e7bd      	b.n	2a592 <_fclose_r+0x12>
   2a616:	6921      	ldr	r1, [r4, #16]
   2a618:	0028      	movs	r0, r5
   2a61a:	f7fe f9f9 	bl	28a10 <_free_r>
   2a61e:	e7cf      	b.n	2a5c0 <_fclose_r+0x40>
   2a620:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a622:	f7fe fca3 	bl	28f6c <__retarget_lock_release_recursive>
   2a626:	e7e6      	b.n	2a5f6 <_fclose_r+0x76>
   2a628:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a62a:	f7fe fc9d 	bl	28f68 <__retarget_lock_acquire_recursive>
   2a62e:	220c      	movs	r2, #12
   2a630:	5ea3      	ldrsh	r3, [r4, r2]
   2a632:	2b00      	cmp	r3, #0
   2a634:	d1b4      	bne.n	2a5a0 <_fclose_r+0x20>
   2a636:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2a638:	401e      	ands	r6, r3
   2a63a:	d1e6      	bne.n	2a60a <_fclose_r+0x8a>
   2a63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a63e:	f7fe fc95 	bl	28f6c <__retarget_lock_release_recursive>
   2a642:	e7e3      	b.n	2a60c <_fclose_r+0x8c>
   2a644:	2601      	movs	r6, #1
   2a646:	4276      	negs	r6, r6
   2a648:	e7b7      	b.n	2a5ba <_fclose_r+0x3a>
   2a64a:	46c0      	nop			; (mov r8, r8)

0002a64c <__fputwc>:
   2a64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a64e:	46ce      	mov	lr, r9
   2a650:	4647      	mov	r7, r8
   2a652:	b580      	push	{r7, lr}
   2a654:	b085      	sub	sp, #20
   2a656:	4680      	mov	r8, r0
   2a658:	4689      	mov	r9, r1
   2a65a:	0014      	movs	r4, r2
   2a65c:	f7fe fc5e 	bl	28f1c <__locale_mb_cur_max>
   2a660:	2801      	cmp	r0, #1
   2a662:	d031      	beq.n	2a6c8 <__fputwc+0x7c>
   2a664:	0023      	movs	r3, r4
   2a666:	af03      	add	r7, sp, #12
   2a668:	335c      	adds	r3, #92	; 0x5c
   2a66a:	464a      	mov	r2, r9
   2a66c:	0039      	movs	r1, r7
   2a66e:	4640      	mov	r0, r8
   2a670:	f000 f912 	bl	2a898 <_wcrtomb_r>
   2a674:	0006      	movs	r6, r0
   2a676:	1c43      	adds	r3, r0, #1
   2a678:	d021      	beq.n	2a6be <__fputwc+0x72>
   2a67a:	2800      	cmp	r0, #0
   2a67c:	d030      	beq.n	2a6e0 <__fputwc+0x94>
   2a67e:	7839      	ldrb	r1, [r7, #0]
   2a680:	2500      	movs	r5, #0
   2a682:	e007      	b.n	2a694 <__fputwc+0x48>
   2a684:	6823      	ldr	r3, [r4, #0]
   2a686:	1c5a      	adds	r2, r3, #1
   2a688:	6022      	str	r2, [r4, #0]
   2a68a:	7019      	strb	r1, [r3, #0]
   2a68c:	3501      	adds	r5, #1
   2a68e:	42b5      	cmp	r5, r6
   2a690:	d226      	bcs.n	2a6e0 <__fputwc+0x94>
   2a692:	5d79      	ldrb	r1, [r7, r5]
   2a694:	68a3      	ldr	r3, [r4, #8]
   2a696:	3b01      	subs	r3, #1
   2a698:	60a3      	str	r3, [r4, #8]
   2a69a:	2b00      	cmp	r3, #0
   2a69c:	daf2      	bge.n	2a684 <__fputwc+0x38>
   2a69e:	69a2      	ldr	r2, [r4, #24]
   2a6a0:	4293      	cmp	r3, r2
   2a6a2:	db01      	blt.n	2a6a8 <__fputwc+0x5c>
   2a6a4:	290a      	cmp	r1, #10
   2a6a6:	d1ed      	bne.n	2a684 <__fputwc+0x38>
   2a6a8:	0022      	movs	r2, r4
   2a6aa:	4640      	mov	r0, r8
   2a6ac:	f000 f896 	bl	2a7dc <__swbuf_r>
   2a6b0:	1c43      	adds	r3, r0, #1
   2a6b2:	d1eb      	bne.n	2a68c <__fputwc+0x40>
   2a6b4:	b005      	add	sp, #20
   2a6b6:	bc0c      	pop	{r2, r3}
   2a6b8:	4690      	mov	r8, r2
   2a6ba:	4699      	mov	r9, r3
   2a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a6be:	2240      	movs	r2, #64	; 0x40
   2a6c0:	89a3      	ldrh	r3, [r4, #12]
   2a6c2:	4313      	orrs	r3, r2
   2a6c4:	81a3      	strh	r3, [r4, #12]
   2a6c6:	e7f5      	b.n	2a6b4 <__fputwc+0x68>
   2a6c8:	464b      	mov	r3, r9
   2a6ca:	3b01      	subs	r3, #1
   2a6cc:	2bfe      	cmp	r3, #254	; 0xfe
   2a6ce:	d8c9      	bhi.n	2a664 <__fputwc+0x18>
   2a6d0:	466a      	mov	r2, sp
   2a6d2:	464b      	mov	r3, r9
   2a6d4:	71d3      	strb	r3, [r2, #7]
   2a6d6:	79d1      	ldrb	r1, [r2, #7]
   2a6d8:	af03      	add	r7, sp, #12
   2a6da:	7039      	strb	r1, [r7, #0]
   2a6dc:	2601      	movs	r6, #1
   2a6de:	e7cf      	b.n	2a680 <__fputwc+0x34>
   2a6e0:	4648      	mov	r0, r9
   2a6e2:	e7e7      	b.n	2a6b4 <__fputwc+0x68>

0002a6e4 <_fputwc_r>:
   2a6e4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2a6e6:	b570      	push	{r4, r5, r6, lr}
   2a6e8:	0005      	movs	r5, r0
   2a6ea:	000e      	movs	r6, r1
   2a6ec:	0014      	movs	r4, r2
   2a6ee:	07db      	lsls	r3, r3, #31
   2a6f0:	d41e      	bmi.n	2a730 <_fputwc_r+0x4c>
   2a6f2:	230c      	movs	r3, #12
   2a6f4:	5ed2      	ldrsh	r2, [r2, r3]
   2a6f6:	b291      	uxth	r1, r2
   2a6f8:	058b      	lsls	r3, r1, #22
   2a6fa:	d516      	bpl.n	2a72a <_fputwc_r+0x46>
   2a6fc:	2380      	movs	r3, #128	; 0x80
   2a6fe:	019b      	lsls	r3, r3, #6
   2a700:	4219      	tst	r1, r3
   2a702:	d104      	bne.n	2a70e <_fputwc_r+0x2a>
   2a704:	431a      	orrs	r2, r3
   2a706:	81a2      	strh	r2, [r4, #12]
   2a708:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2a70a:	4313      	orrs	r3, r2
   2a70c:	6663      	str	r3, [r4, #100]	; 0x64
   2a70e:	0028      	movs	r0, r5
   2a710:	0022      	movs	r2, r4
   2a712:	0031      	movs	r1, r6
   2a714:	f7ff ff9a 	bl	2a64c <__fputwc>
   2a718:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2a71a:	0005      	movs	r5, r0
   2a71c:	07db      	lsls	r3, r3, #31
   2a71e:	d402      	bmi.n	2a726 <_fputwc_r+0x42>
   2a720:	89a3      	ldrh	r3, [r4, #12]
   2a722:	059b      	lsls	r3, r3, #22
   2a724:	d508      	bpl.n	2a738 <_fputwc_r+0x54>
   2a726:	0028      	movs	r0, r5
   2a728:	bd70      	pop	{r4, r5, r6, pc}
   2a72a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a72c:	f7fe fc1c 	bl	28f68 <__retarget_lock_acquire_recursive>
   2a730:	230c      	movs	r3, #12
   2a732:	5ee2      	ldrsh	r2, [r4, r3]
   2a734:	b291      	uxth	r1, r2
   2a736:	e7e1      	b.n	2a6fc <_fputwc_r+0x18>
   2a738:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2a73a:	f7fe fc17 	bl	28f6c <__retarget_lock_release_recursive>
   2a73e:	e7f2      	b.n	2a726 <_fputwc_r+0x42>

0002a740 <_fstat_r>:
   2a740:	2300      	movs	r3, #0
   2a742:	b570      	push	{r4, r5, r6, lr}
   2a744:	4c07      	ldr	r4, [pc, #28]	; (2a764 <_fstat_r+0x24>)
   2a746:	0005      	movs	r5, r0
   2a748:	0008      	movs	r0, r1
   2a74a:	0011      	movs	r1, r2
   2a74c:	6023      	str	r3, [r4, #0]
   2a74e:	f7db fda5 	bl	629c <_fstat>
   2a752:	1c43      	adds	r3, r0, #1
   2a754:	d000      	beq.n	2a758 <_fstat_r+0x18>
   2a756:	bd70      	pop	{r4, r5, r6, pc}
   2a758:	6823      	ldr	r3, [r4, #0]
   2a75a:	2b00      	cmp	r3, #0
   2a75c:	d0fb      	beq.n	2a756 <_fstat_r+0x16>
   2a75e:	602b      	str	r3, [r5, #0]
   2a760:	e7f9      	b.n	2a756 <_fstat_r+0x16>
   2a762:	46c0      	nop			; (mov r8, r8)
   2a764:	2000206c 	.word	0x2000206c

0002a768 <_isatty_r>:
   2a768:	2300      	movs	r3, #0
   2a76a:	b570      	push	{r4, r5, r6, lr}
   2a76c:	4c06      	ldr	r4, [pc, #24]	; (2a788 <_isatty_r+0x20>)
   2a76e:	0005      	movs	r5, r0
   2a770:	0008      	movs	r0, r1
   2a772:	6023      	str	r3, [r4, #0]
   2a774:	f7db fda0 	bl	62b8 <_isatty>
   2a778:	1c43      	adds	r3, r0, #1
   2a77a:	d000      	beq.n	2a77e <_isatty_r+0x16>
   2a77c:	bd70      	pop	{r4, r5, r6, pc}
   2a77e:	6823      	ldr	r3, [r4, #0]
   2a780:	2b00      	cmp	r3, #0
   2a782:	d0fb      	beq.n	2a77c <_isatty_r+0x14>
   2a784:	602b      	str	r3, [r5, #0]
   2a786:	e7f9      	b.n	2a77c <_isatty_r+0x14>
   2a788:	2000206c 	.word	0x2000206c

0002a78c <_lseek_r>:
   2a78c:	b570      	push	{r4, r5, r6, lr}
   2a78e:	0005      	movs	r5, r0
   2a790:	0008      	movs	r0, r1
   2a792:	0011      	movs	r1, r2
   2a794:	2200      	movs	r2, #0
   2a796:	4c06      	ldr	r4, [pc, #24]	; (2a7b0 <_lseek_r+0x24>)
   2a798:	6022      	str	r2, [r4, #0]
   2a79a:	001a      	movs	r2, r3
   2a79c:	f7db fd95 	bl	62ca <_lseek>
   2a7a0:	1c43      	adds	r3, r0, #1
   2a7a2:	d000      	beq.n	2a7a6 <_lseek_r+0x1a>
   2a7a4:	bd70      	pop	{r4, r5, r6, pc}
   2a7a6:	6823      	ldr	r3, [r4, #0]
   2a7a8:	2b00      	cmp	r3, #0
   2a7aa:	d0fb      	beq.n	2a7a4 <_lseek_r+0x18>
   2a7ac:	602b      	str	r3, [r5, #0]
   2a7ae:	e7f9      	b.n	2a7a4 <_lseek_r+0x18>
   2a7b0:	2000206c 	.word	0x2000206c

0002a7b4 <_read_r>:
   2a7b4:	b570      	push	{r4, r5, r6, lr}
   2a7b6:	0005      	movs	r5, r0
   2a7b8:	0008      	movs	r0, r1
   2a7ba:	0011      	movs	r1, r2
   2a7bc:	2200      	movs	r2, #0
   2a7be:	4c06      	ldr	r4, [pc, #24]	; (2a7d8 <_read_r+0x24>)
   2a7c0:	6022      	str	r2, [r4, #0]
   2a7c2:	001a      	movs	r2, r3
   2a7c4:	f7db fce2 	bl	618c <_read>
   2a7c8:	1c43      	adds	r3, r0, #1
   2a7ca:	d000      	beq.n	2a7ce <_read_r+0x1a>
   2a7cc:	bd70      	pop	{r4, r5, r6, pc}
   2a7ce:	6823      	ldr	r3, [r4, #0]
   2a7d0:	2b00      	cmp	r3, #0
   2a7d2:	d0fb      	beq.n	2a7cc <_read_r+0x18>
   2a7d4:	602b      	str	r3, [r5, #0]
   2a7d6:	e7f9      	b.n	2a7cc <_read_r+0x18>
   2a7d8:	2000206c 	.word	0x2000206c

0002a7dc <__swbuf_r>:
   2a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a7de:	0006      	movs	r6, r0
   2a7e0:	000d      	movs	r5, r1
   2a7e2:	0014      	movs	r4, r2
   2a7e4:	2800      	cmp	r0, #0
   2a7e6:	d002      	beq.n	2a7ee <__swbuf_r+0x12>
   2a7e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2a7ea:	2b00      	cmp	r3, #0
   2a7ec:	d04e      	beq.n	2a88c <__swbuf_r+0xb0>
   2a7ee:	69a3      	ldr	r3, [r4, #24]
   2a7f0:	60a3      	str	r3, [r4, #8]
   2a7f2:	230c      	movs	r3, #12
   2a7f4:	5ee0      	ldrsh	r0, [r4, r3]
   2a7f6:	b281      	uxth	r1, r0
   2a7f8:	070b      	lsls	r3, r1, #28
   2a7fa:	d53c      	bpl.n	2a876 <__swbuf_r+0x9a>
   2a7fc:	6923      	ldr	r3, [r4, #16]
   2a7fe:	2b00      	cmp	r3, #0
   2a800:	d039      	beq.n	2a876 <__swbuf_r+0x9a>
   2a802:	22ff      	movs	r2, #255	; 0xff
   2a804:	b2ef      	uxtb	r7, r5
   2a806:	4015      	ands	r5, r2
   2a808:	2280      	movs	r2, #128	; 0x80
   2a80a:	0192      	lsls	r2, r2, #6
   2a80c:	4211      	tst	r1, r2
   2a80e:	d015      	beq.n	2a83c <__swbuf_r+0x60>
   2a810:	6822      	ldr	r2, [r4, #0]
   2a812:	6961      	ldr	r1, [r4, #20]
   2a814:	1ad3      	subs	r3, r2, r3
   2a816:	428b      	cmp	r3, r1
   2a818:	da1b      	bge.n	2a852 <__swbuf_r+0x76>
   2a81a:	3301      	adds	r3, #1
   2a81c:	68a1      	ldr	r1, [r4, #8]
   2a81e:	3901      	subs	r1, #1
   2a820:	60a1      	str	r1, [r4, #8]
   2a822:	1c51      	adds	r1, r2, #1
   2a824:	6021      	str	r1, [r4, #0]
   2a826:	7017      	strb	r7, [r2, #0]
   2a828:	6962      	ldr	r2, [r4, #20]
   2a82a:	429a      	cmp	r2, r3
   2a82c:	d01a      	beq.n	2a864 <__swbuf_r+0x88>
   2a82e:	89a3      	ldrh	r3, [r4, #12]
   2a830:	07db      	lsls	r3, r3, #31
   2a832:	d501      	bpl.n	2a838 <__swbuf_r+0x5c>
   2a834:	2d0a      	cmp	r5, #10
   2a836:	d015      	beq.n	2a864 <__swbuf_r+0x88>
   2a838:	0028      	movs	r0, r5
   2a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a83c:	4302      	orrs	r2, r0
   2a83e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   2a840:	81a2      	strh	r2, [r4, #12]
   2a842:	4a14      	ldr	r2, [pc, #80]	; (2a894 <__swbuf_r+0xb8>)
   2a844:	400a      	ands	r2, r1
   2a846:	6662      	str	r2, [r4, #100]	; 0x64
   2a848:	6961      	ldr	r1, [r4, #20]
   2a84a:	6822      	ldr	r2, [r4, #0]
   2a84c:	1ad3      	subs	r3, r2, r3
   2a84e:	428b      	cmp	r3, r1
   2a850:	dbe3      	blt.n	2a81a <__swbuf_r+0x3e>
   2a852:	0021      	movs	r1, r4
   2a854:	0030      	movs	r0, r6
   2a856:	f7fd ffd7 	bl	28808 <_fflush_r>
   2a85a:	2800      	cmp	r0, #0
   2a85c:	d108      	bne.n	2a870 <__swbuf_r+0x94>
   2a85e:	6822      	ldr	r2, [r4, #0]
   2a860:	2301      	movs	r3, #1
   2a862:	e7db      	b.n	2a81c <__swbuf_r+0x40>
   2a864:	0021      	movs	r1, r4
   2a866:	0030      	movs	r0, r6
   2a868:	f7fd ffce 	bl	28808 <_fflush_r>
   2a86c:	2800      	cmp	r0, #0
   2a86e:	d0e3      	beq.n	2a838 <__swbuf_r+0x5c>
   2a870:	2501      	movs	r5, #1
   2a872:	426d      	negs	r5, r5
   2a874:	e7e0      	b.n	2a838 <__swbuf_r+0x5c>
   2a876:	0021      	movs	r1, r4
   2a878:	0030      	movs	r0, r6
   2a87a:	f7fc fe31 	bl	274e0 <__swsetup_r>
   2a87e:	2800      	cmp	r0, #0
   2a880:	d1f6      	bne.n	2a870 <__swbuf_r+0x94>
   2a882:	230c      	movs	r3, #12
   2a884:	5ee0      	ldrsh	r0, [r4, r3]
   2a886:	6923      	ldr	r3, [r4, #16]
   2a888:	b281      	uxth	r1, r0
   2a88a:	e7ba      	b.n	2a802 <__swbuf_r+0x26>
   2a88c:	f7fe f816 	bl	288bc <__sinit>
   2a890:	e7ad      	b.n	2a7ee <__swbuf_r+0x12>
   2a892:	46c0      	nop			; (mov r8, r8)
   2a894:	ffffdfff 	.word	0xffffdfff

0002a898 <_wcrtomb_r>:
   2a898:	b570      	push	{r4, r5, r6, lr}
   2a89a:	001d      	movs	r5, r3
   2a89c:	4b11      	ldr	r3, [pc, #68]	; (2a8e4 <_wcrtomb_r+0x4c>)
   2a89e:	b084      	sub	sp, #16
   2a8a0:	681b      	ldr	r3, [r3, #0]
   2a8a2:	0004      	movs	r4, r0
   2a8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a8a6:	2900      	cmp	r1, #0
   2a8a8:	d00e      	beq.n	2a8c8 <_wcrtomb_r+0x30>
   2a8aa:	2b00      	cmp	r3, #0
   2a8ac:	d016      	beq.n	2a8dc <_wcrtomb_r+0x44>
   2a8ae:	20e0      	movs	r0, #224	; 0xe0
   2a8b0:	581e      	ldr	r6, [r3, r0]
   2a8b2:	002b      	movs	r3, r5
   2a8b4:	0020      	movs	r0, r4
   2a8b6:	47b0      	blx	r6
   2a8b8:	1c43      	adds	r3, r0, #1
   2a8ba:	d103      	bne.n	2a8c4 <_wcrtomb_r+0x2c>
   2a8bc:	2300      	movs	r3, #0
   2a8be:	602b      	str	r3, [r5, #0]
   2a8c0:	338a      	adds	r3, #138	; 0x8a
   2a8c2:	6023      	str	r3, [r4, #0]
   2a8c4:	b004      	add	sp, #16
   2a8c6:	bd70      	pop	{r4, r5, r6, pc}
   2a8c8:	2b00      	cmp	r3, #0
   2a8ca:	d009      	beq.n	2a8e0 <_wcrtomb_r+0x48>
   2a8cc:	22e0      	movs	r2, #224	; 0xe0
   2a8ce:	a901      	add	r1, sp, #4
   2a8d0:	589e      	ldr	r6, [r3, r2]
   2a8d2:	0020      	movs	r0, r4
   2a8d4:	002b      	movs	r3, r5
   2a8d6:	2200      	movs	r2, #0
   2a8d8:	47b0      	blx	r6
   2a8da:	e7ed      	b.n	2a8b8 <_wcrtomb_r+0x20>
   2a8dc:	4b02      	ldr	r3, [pc, #8]	; (2a8e8 <_wcrtomb_r+0x50>)
   2a8de:	e7e6      	b.n	2a8ae <_wcrtomb_r+0x16>
   2a8e0:	4b01      	ldr	r3, [pc, #4]	; (2a8e8 <_wcrtomb_r+0x50>)
   2a8e2:	e7f3      	b.n	2a8cc <_wcrtomb_r+0x34>
   2a8e4:	200001e8 	.word	0x200001e8
   2a8e8:	2000061c 	.word	0x2000061c

0002a8ec <__aeabi_dcmpun>:
   2a8ec:	b570      	push	{r4, r5, r6, lr}
   2a8ee:	4e0e      	ldr	r6, [pc, #56]	; (2a928 <__aeabi_dcmpun+0x3c>)
   2a8f0:	030d      	lsls	r5, r1, #12
   2a8f2:	031c      	lsls	r4, r3, #12
   2a8f4:	0049      	lsls	r1, r1, #1
   2a8f6:	005b      	lsls	r3, r3, #1
   2a8f8:	0b2d      	lsrs	r5, r5, #12
   2a8fa:	0d49      	lsrs	r1, r1, #21
   2a8fc:	0b24      	lsrs	r4, r4, #12
   2a8fe:	0d5b      	lsrs	r3, r3, #21
   2a900:	42b1      	cmp	r1, r6
   2a902:	d004      	beq.n	2a90e <__aeabi_dcmpun+0x22>
   2a904:	4908      	ldr	r1, [pc, #32]	; (2a928 <__aeabi_dcmpun+0x3c>)
   2a906:	2000      	movs	r0, #0
   2a908:	428b      	cmp	r3, r1
   2a90a:	d008      	beq.n	2a91e <__aeabi_dcmpun+0x32>
   2a90c:	bd70      	pop	{r4, r5, r6, pc}
   2a90e:	4305      	orrs	r5, r0
   2a910:	2001      	movs	r0, #1
   2a912:	2d00      	cmp	r5, #0
   2a914:	d1fa      	bne.n	2a90c <__aeabi_dcmpun+0x20>
   2a916:	4904      	ldr	r1, [pc, #16]	; (2a928 <__aeabi_dcmpun+0x3c>)
   2a918:	2000      	movs	r0, #0
   2a91a:	428b      	cmp	r3, r1
   2a91c:	d1f6      	bne.n	2a90c <__aeabi_dcmpun+0x20>
   2a91e:	4314      	orrs	r4, r2
   2a920:	0020      	movs	r0, r4
   2a922:	1e44      	subs	r4, r0, #1
   2a924:	41a0      	sbcs	r0, r4
   2a926:	e7f1      	b.n	2a90c <__aeabi_dcmpun+0x20>
   2a928:	000007ff 	.word	0x000007ff
   2a92c:	00000460 	.word	0x00000460
   2a930:	0000046e 	.word	0x0000046e
   2a934:	0000047c 	.word	0x0000047c
   2a938:	0000048a 	.word	0x0000048a
   2a93c:	00000498 	.word	0x00000498
   2a940:	0000ffff 	.word	0x0000ffff
   2a944:	0000ffff 	.word	0x0000ffff
   2a948:	00000004 	.word	0x00000004
   2a94c:	00000005 	.word	0x00000005
   2a950:	00000006 	.word	0x00000006
   2a954:	00000007 	.word	0x00000007
   2a958:	00000020 	.word	0x00000020
   2a95c:	0000ffff 	.word	0x0000ffff
   2a960:	00000022 	.word	0x00000022
   2a964:	00000023 	.word	0x00000023
   2a968:	0000ffff 	.word	0x0000ffff
   2a96c:	0000ffff 	.word	0x0000ffff
   2a970:	0000ffff 	.word	0x0000ffff
   2a974:	0000ffff 	.word	0x0000ffff
   2a978:	00000008 	.word	0x00000008
   2a97c:	00000009 	.word	0x00000009
   2a980:	0000000a 	.word	0x0000000a
   2a984:	0000000b 	.word	0x0000000b
   2a988:	0000ffff 	.word	0x0000ffff
   2a98c:	0000ffff 	.word	0x0000ffff
   2a990:	0000ffff 	.word	0x0000ffff
   2a994:	0000ffff 	.word	0x0000ffff
   2a998:	00000848 	.word	0x00000848
   2a99c:	0000084e 	.word	0x0000084e
   2a9a0:	0000084e 	.word	0x0000084e
   2a9a4:	0000084e 	.word	0x0000084e
   2a9a8:	0000084e 	.word	0x0000084e
   2a9ac:	0000084e 	.word	0x0000084e
   2a9b0:	0000084e 	.word	0x0000084e
   2a9b4:	0000084e 	.word	0x0000084e
   2a9b8:	0000084e 	.word	0x0000084e
   2a9bc:	0000084e 	.word	0x0000084e
   2a9c0:	0000084e 	.word	0x0000084e
   2a9c4:	0000084e 	.word	0x0000084e
   2a9c8:	0000084e 	.word	0x0000084e
   2a9cc:	0000084e 	.word	0x0000084e
   2a9d0:	0000084e 	.word	0x0000084e
   2a9d4:	0000084e 	.word	0x0000084e
   2a9d8:	00000826 	.word	0x00000826
   2a9dc:	0000084e 	.word	0x0000084e
   2a9e0:	0000084e 	.word	0x0000084e
   2a9e4:	0000084e 	.word	0x0000084e
   2a9e8:	0000084e 	.word	0x0000084e
   2a9ec:	0000084e 	.word	0x0000084e
   2a9f0:	0000084e 	.word	0x0000084e
   2a9f4:	0000084e 	.word	0x0000084e
   2a9f8:	0000084e 	.word	0x0000084e
   2a9fc:	0000084e 	.word	0x0000084e
   2aa00:	0000084e 	.word	0x0000084e
   2aa04:	0000084e 	.word	0x0000084e
   2aa08:	0000084e 	.word	0x0000084e
   2aa0c:	0000084e 	.word	0x0000084e
   2aa10:	0000084e 	.word	0x0000084e
   2aa14:	0000084e 	.word	0x0000084e
   2aa18:	00000842 	.word	0x00000842
   2aa1c:	0000084e 	.word	0x0000084e
   2aa20:	0000084e 	.word	0x0000084e
   2aa24:	0000084e 	.word	0x0000084e
   2aa28:	0000084e 	.word	0x0000084e
   2aa2c:	0000084e 	.word	0x0000084e
   2aa30:	0000084e 	.word	0x0000084e
   2aa34:	0000084e 	.word	0x0000084e
   2aa38:	0000084e 	.word	0x0000084e
   2aa3c:	0000084e 	.word	0x0000084e
   2aa40:	0000084e 	.word	0x0000084e
   2aa44:	0000084e 	.word	0x0000084e
   2aa48:	0000084e 	.word	0x0000084e
   2aa4c:	0000084e 	.word	0x0000084e
   2aa50:	0000084e 	.word	0x0000084e
   2aa54:	0000084e 	.word	0x0000084e
   2aa58:	0000083c 	.word	0x0000083c
   2aa5c:	000007e4 	.word	0x000007e4
   2aa60:	000007fa 	.word	0x000007fa
   2aa64:	00000810 	.word	0x00000810
   2aa68:	000007ca 	.word	0x000007ca
   2aa6c:	00000fa8 	.word	0x00000fa8
   2aa70:	00000fb6 	.word	0x00000fb6
   2aa74:	00000fc4 	.word	0x00000fc4
   2aa78:	00000fd2 	.word	0x00000fd2
   2aa7c:	00000fe0 	.word	0x00000fe0
   2aa80:	00001528 	.word	0x00001528
   2aa84:	00001536 	.word	0x00001536
   2aa88:	00001544 	.word	0x00001544
   2aa8c:	00001552 	.word	0x00001552
   2aa90:	00001560 	.word	0x00001560
   2aa94:	000019b4 	.word	0x000019b4
   2aa98:	000019c2 	.word	0x000019c2
   2aa9c:	000019d0 	.word	0x000019d0
   2aaa0:	000019de 	.word	0x000019de
   2aaa4:	000019ec 	.word	0x000019ec
   2aaa8:	00001bb0 	.word	0x00001bb0
   2aaac:	00001bb0 	.word	0x00001bb0
   2aab0:	00001ba4 	.word	0x00001ba4
   2aab4:	00001bb0 	.word	0x00001bb0
   2aab8:	00001ba4 	.word	0x00001ba4
   2aabc:	00001b7e 	.word	0x00001b7e
   2aac0:	00001b7e 	.word	0x00001b7e
   2aac4:	00001bb0 	.word	0x00001bb0
   2aac8:	00001bb0 	.word	0x00001bb0
   2aacc:	00001bb0 	.word	0x00001bb0
   2aad0:	00001bb0 	.word	0x00001bb0
   2aad4:	00001bb0 	.word	0x00001bb0
   2aad8:	00001bb0 	.word	0x00001bb0
   2aadc:	00001bb0 	.word	0x00001bb0
   2aae0:	00001bb0 	.word	0x00001bb0
   2aae4:	00001bb0 	.word	0x00001bb0
   2aae8:	00001bb0 	.word	0x00001bb0
   2aaec:	00001bb0 	.word	0x00001bb0
   2aaf0:	00001bb0 	.word	0x00001bb0
   2aaf4:	00001bb0 	.word	0x00001bb0
   2aaf8:	00001bb0 	.word	0x00001bb0
   2aafc:	00001bb0 	.word	0x00001bb0
   2ab00:	00001bb0 	.word	0x00001bb0
   2ab04:	00001bb0 	.word	0x00001bb0
   2ab08:	00001bb0 	.word	0x00001bb0
   2ab0c:	00001bb0 	.word	0x00001bb0
   2ab10:	00001ba4 	.word	0x00001ba4
   2ab14:	00001bb0 	.word	0x00001bb0
   2ab18:	00001ba4 	.word	0x00001ba4
   2ab1c:	00001bb0 	.word	0x00001bb0
   2ab20:	00001bb0 	.word	0x00001bb0
   2ab24:	00001bb0 	.word	0x00001bb0
   2ab28:	00001bb0 	.word	0x00001bb0
   2ab2c:	00001bb0 	.word	0x00001bb0
   2ab30:	00001bb0 	.word	0x00001bb0
   2ab34:	00001bb0 	.word	0x00001bb0
   2ab38:	00001bb0 	.word	0x00001bb0
   2ab3c:	00001bb0 	.word	0x00001bb0
   2ab40:	00001bb0 	.word	0x00001bb0
   2ab44:	00001bb0 	.word	0x00001bb0
   2ab48:	00001bb0 	.word	0x00001bb0
   2ab4c:	00001bb0 	.word	0x00001bb0
   2ab50:	00001bb0 	.word	0x00001bb0
   2ab54:	00001bb0 	.word	0x00001bb0
   2ab58:	00001bb0 	.word	0x00001bb0
   2ab5c:	00001bb0 	.word	0x00001bb0
   2ab60:	00001bb0 	.word	0x00001bb0
   2ab64:	00001bb0 	.word	0x00001bb0
   2ab68:	00001bb0 	.word	0x00001bb0
   2ab6c:	00001bb0 	.word	0x00001bb0
   2ab70:	00001bb0 	.word	0x00001bb0
   2ab74:	00001bb0 	.word	0x00001bb0
   2ab78:	00001bb0 	.word	0x00001bb0
   2ab7c:	00001bb0 	.word	0x00001bb0
   2ab80:	00001bb0 	.word	0x00001bb0
   2ab84:	00001bb0 	.word	0x00001bb0
   2ab88:	00001bb0 	.word	0x00001bb0
   2ab8c:	00001bb0 	.word	0x00001bb0
   2ab90:	00001bb0 	.word	0x00001bb0
   2ab94:	00001bb0 	.word	0x00001bb0
   2ab98:	00001bb0 	.word	0x00001bb0
   2ab9c:	00001bb0 	.word	0x00001bb0
   2aba0:	00001bb0 	.word	0x00001bb0
   2aba4:	00001bb0 	.word	0x00001bb0
   2aba8:	00001ba4 	.word	0x00001ba4
   2abac:	00001ba4 	.word	0x00001ba4
   2abb0:	00001bba 	.word	0x00001bba
   2abb4:	00001bba 	.word	0x00001bba
   2abb8:	00001bba 	.word	0x00001bba
   2abbc:	00001bba 	.word	0x00001bba
   2abc0:	00002174 	.word	0x00002174
   2abc4:	00002182 	.word	0x00002182
   2abc8:	00002190 	.word	0x00002190
   2abcc:	0000219e 	.word	0x0000219e
   2abd0:	000021ac 	.word	0x000021ac
   2abd4:	42000000 	.word	0x42000000
   2abd8:	42000400 	.word	0x42000400
   2abdc:	42000800 	.word	0x42000800
   2abe0:	42000c00 	.word	0x42000c00
   2abe4:	42001000 	.word	0x42001000
   2abe8:	43000400 	.word	0x43000400
   2abec:	0b0a0908 	.word	0x0b0a0908
   2abf0:	00000d0c 	.word	0x00000d0c
   2abf4:	00003240 	.word	0x00003240
   2abf8:	0000324e 	.word	0x0000324e
   2abfc:	0000325c 	.word	0x0000325c
   2ac00:	0000326a 	.word	0x0000326a
   2ac04:	00003278 	.word	0x00003278
   2ac08:	00003a00 	.word	0x00003a00
   2ac0c:	00003a0e 	.word	0x00003a0e
   2ac10:	00003a1c 	.word	0x00003a1c
   2ac14:	00003a2a 	.word	0x00003a2a
   2ac18:	00003a38 	.word	0x00003a38
   2ac1c:	0000498e 	.word	0x0000498e
   2ac20:	00004a08 	.word	0x00004a08
   2ac24:	00004a08 	.word	0x00004a08
   2ac28:	000049ae 	.word	0x000049ae
   2ac2c:	000049a8 	.word	0x000049a8
   2ac30:	000049b4 	.word	0x000049b4
   2ac34:	00004994 	.word	0x00004994
   2ac38:	000049ba 	.word	0x000049ba
   2ac3c:	000049ee 	.word	0x000049ee
   2ac40:	00004cc4 	.word	0x00004cc4
   2ac44:	00004d22 	.word	0x00004d22
   2ac48:	00004d22 	.word	0x00004d22
   2ac4c:	00004d1e 	.word	0x00004d1e
   2ac50:	00004cb6 	.word	0x00004cb6
   2ac54:	00004cd6 	.word	0x00004cd6
   2ac58:	00004ca2 	.word	0x00004ca2
   2ac5c:	00004ce4 	.word	0x00004ce4
   2ac60:	00004cf6 	.word	0x00004cf6
   2ac64:	00004d82 	.word	0x00004d82
   2ac68:	00004dd2 	.word	0x00004dd2
   2ac6c:	00004dd2 	.word	0x00004dd2
   2ac70:	00004dd2 	.word	0x00004dd2
   2ac74:	00004d74 	.word	0x00004d74
   2ac78:	00004d94 	.word	0x00004d94
   2ac7c:	00004d62 	.word	0x00004d62
   2ac80:	00004da2 	.word	0x00004da2
   2ac84:	00004dbc 	.word	0x00004dbc
   2ac88:	00004e42 	.word	0x00004e42
   2ac8c:	00004ea8 	.word	0x00004ea8
   2ac90:	00004ea8 	.word	0x00004ea8
   2ac94:	00004ea4 	.word	0x00004ea4
   2ac98:	00004e2a 	.word	0x00004e2a
   2ac9c:	00004e5a 	.word	0x00004e5a
   2aca0:	00004e12 	.word	0x00004e12
   2aca4:	00004e72 	.word	0x00004e72
   2aca8:	00004e8c 	.word	0x00004e8c
   2acac:	00005190 	.word	0x00005190
   2acb0:	0000519e 	.word	0x0000519e
   2acb4:	000051ac 	.word	0x000051ac
   2acb8:	000051ba 	.word	0x000051ba
   2acbc:	000051c8 	.word	0x000051c8
   2acc0:	000059b0 	.word	0x000059b0
   2acc4:	000059be 	.word	0x000059be
   2acc8:	000059cc 	.word	0x000059cc
   2accc:	000059da 	.word	0x000059da
   2acd0:	000059e8 	.word	0x000059e8
   2acd4:	42002000 	.word	0x42002000
   2acd8:	42002400 	.word	0x42002400
   2acdc:	42002800 	.word	0x42002800
   2ace0:	42002c00 	.word	0x42002c00
   2ace4:	43000800 	.word	0x43000800
   2ace8:	1c1c1b1b 	.word	0x1c1c1b1b
   2acec:	0000001d 	.word	0x0000001d
   2acf0:	00000002 	.word	0x00000002
   2acf4:	00000100 	.word	0x00000100
   2acf8:	00000002 	.word	0x00000002
   2acfc:	00000200 	.word	0x00000200
   2ad00:	00000002 	.word	0x00000002
   2ad04:	00000400 	.word	0x00000400
   2ad08:	00000002 	.word	0x00000002
   2ad0c:	00000800 	.word	0x00000800
   2ad10:	00000003 	.word	0x00000003
   2ad14:	00000004 	.word	0x00000004

0002ad18 <DefaultChannels923>:
   2ad18:	50015001                                .P.P

0002ad1c <AdvChannels923>:
   2ad1c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   2ad2c:	3709f740 ff100100                       @..7....

0002ad34 <DefaultDrParamsAS>:
   2ad34:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   2ad44:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   2ad54:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   2ad64:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0002ad74 <SubBandParams923>:
   2ad74:	35c36d80 37502800 00000000              .m.5.(P7....

0002ad80 <SubBandDutyCycle923>:
   2ad80:	00000064                                d...

0002ad84 <pds_reg_as_item_list>:
   2ad84:	2000152c 00200004 2000154c 25c00104     ,.. .. .L.. ...%
   2ad94:	200014d7 ea010204                       ... ....

0002ad9c <DefaultChannels915AU>:
   2ad9c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2adac:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2adbc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2adcc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2addc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2adec:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2adfc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2ae0c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   2ae1c:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0002ae2c <DefaultDrParamsAU>:
   2ae2c:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   2ae3c:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   2ae4c:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   2ae5c:	00f2003d 010908be 00000000 010a0000     =...............
   2ae6c:	00350007 01090c0c 00810005 01090b06     ..5.............
   2ae7c:	00f20007 01090a01 00f2000c 010909fe     ................
   2ae8c:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0002ae9c <pds_reg_au_item_list>:
   2ae9c:	2000155c 00900008 20001600 95010108     \.. ....... ....

0002aeac <DefaultChannels868>:
   2aeac:	50015001 00005001                       .P.P.P..

0002aeb4 <DefaultChannels433>:
   2aeb4:	50015001 00005001                       .P.P.P..

0002aebc <AdvChannels868>:
   2aebc:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   2aecc:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   2aedc:	ff100101                                ....

0002aee0 <AdvChannels433>:
   2aee0:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   2aef0:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   2af00:	ff0c0101                                ....

0002af04 <SubBandParams433>:
   2af04:	19cf0e40 19ea8580 00000000              @...........

0002af10 <SubBandParams868>:
   2af10:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   2af20:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   2af30:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   2af40:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   2af50:	33db2580 00000000                       .%.3....

0002af58 <SubBandDutyCycle868>:
   2af58:	006403e8 03e80064 0064000a              ..d.d.....d.

0002af64 <DefaultDrparamsEU>:
   2af64:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   2af74:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   2af84:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   2af94:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0002afa4 <pds_reg_eu868_fid1_item_list>:
   2afa4:	2000152c 00200003                       ,.. .. .

0002afac <pds_reg_eu868_fid2_item_list>:
   2afac:	2000154c 00c0000b                       L.. ....

0002afb4 <DefaultChannels865>:
   2afb4:	50015001 00005001                       .P.P.P..

0002afbc <AdvChannels865>:
   2afbc:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   2afcc:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   2afdc:	ff1e0100                                ....

0002afe0 <DefaultDrParamsIN>:
   2afe0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   2aff0:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   2b000:	00f20031 010708be 00f20053 010707bc     1.......S.......
   2b010:	00000000 010a0000 00f20008 000a00fe     ................

0002b020 <pds_reg_ind_item_list>:
   2b020:	2000152c 00200006 2000154c 25c00106     ,.. .. .L.. ...%

0002b030 <DefaultChannels923JP>:
   2b030:	50015001                                .P.P

0002b034 <AdvChannels923JP>:
   2b034:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   2b044:	3709f740 ff100101                       @..7....

0002b04c <DefaultDrParamsJP>:
   2b04c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   2b05c:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   2b06c:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   2b07c:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0002b08c <SubBandParamsJP923>:
   2b08c:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   2b09c:	37502800 00000000                       .(P7....

0002b0a4 <SubBandDutyCycleJP923>:
   2b0a4:	000a0064                                d...

0002b0a8 <pds_reg_jpn_fid1_item_list>:
   2b0a8:	2000152c 00200007 2000154c 25c00107     ,.. .. .L.. ...%

0002b0b8 <DefaultChannels920KR>:
   2b0b8:	50015001 00005001                       .P.P.P..

0002b0c0 <AdvChannels920KR>:
   2b0c0:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   2b0d0:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   2b0e0:	ff0e0100                                ....

0002b0e4 <DefaultDrParamsKR>:
   2b0e4:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   2b0f4:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   2b104:	00f20031 010708be 00f20053 010707bc     1.......S.......

0002b114 <pds_reg_kr_fid1_item_list>:
   2b114:	2000152c 00200005 2000154c 25c00105     ,.. .. .L.. ...%

0002b124 <DefaultChannels915>:
   2b124:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b134:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b144:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b154:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b164:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b174:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b184:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b194:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   2b1a4:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0002b1b4 <DefaultDrParamsNA>:
   2b1b4:	000b0012 01070ac6 00350005 01070906     ..........5.....
   2b1c4:	007d0007 01070801 00f2000c 010707fe     ..}.............
   2b1d4:	00f20016 010908fc 00000000 010a0000     ................
   2b1e4:	00000000 010a0000 00000000 010a0000     ................
   2b1f4:	00350023 01090cd5 00810007 01090b06     #.5.............
   2b204:	00f20007 01090a01 00f2000c 010909fe     ................
   2b214:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0002b224 <pds_reg_na_item_list>:
   2b224:	2000155c 00900002 20001600 95010102     \.. ....... ....
   2b234:	0000dcf6 0000dcf6 0000dcf6 0000dcf6     ................
   2b244:	0000de46 0000df6a 0000de64 0000de46     F...j...d...F...
   2b254:	00010894 00010894 00010894 00010894     ................
   2b264:	00010894 00010942 000108b2 000108f4     ....B...........
   2b274:	46467830 00000000 36385545 00000038     0xFF....EU868...
   2b284:	3139414e 00000035 31395541 00000035     NA915...AU915...
   2b294:	32395341 00000033 394e504a 00003332     AS923...JPN923..
   2b2a4:	3239524b 00000030 38444e49 00003536     KR920...IND865..
   2b2b4:	69646172 75735f6f 73656363 00000073     radio_success...
   2b2c4:	69646172 6f6e5f6f 7461645f 00000061     radio_no_data...
   2b2d4:	69646172 61645f6f 735f6174 00657a69     radio_data_size.
   2b2e4:	69646172 6e695f6f 696c6176 65725f64     radio_invalid_re
   2b2f4:	00000071 69646172 75625f6f 00007973     q...radio_busy..
   2b304:	69646172 756f5f6f 666f5f74 6e61725f     radio_out_of_ran
   2b314:	00006567 69646172 6e755f6f 70707573     ge..radio_unsupp
   2b324:	6574726f 74615f64 00007274 69646172     orted_attr..radi
   2b334:	68635f6f 656e6e61 75625f6c 00007973     o_channel_busy..
   2b344:	63637573 00737365 5f6b776e 5f746f6e     success.nwk_not_
   2b354:	6e696f6a 00006465 61766e69 5f64696c     joined..invalid_
   2b364:	61726170 6574656d 00000072 7379656b     parameter...keys
   2b374:	746f6e5f 696e695f 6c616974 64657a69     _not_initialized
   2b384:	00000000 656c6973 695f746e 64656d6d     ....silent_immed
   2b394:	65746169 615f796c 76697463 00000065     iately_active...
   2b3a4:	746e6366 72655f72 5f726f72 6f6a6572     fcntr_error_rejo
   2b3b4:	6e5f6e69 65646565 00000064 61766e69     in_needed...inva
   2b3c4:	5f64696c 66667562 6c5f7265 74676e65     lid_buffer_lengt
   2b3d4:	00000068 5f63616d 73756170 00006465     h...mac_paused..
   2b3e4:	635f6f6e 6e6e6168 5f736c65 6e756f66     no_channels_foun
   2b3f4:	00000064 79737562 00000000 615f6f6e     d...busy....no_a
   2b404:	00006b63 5f6b776e 6e696f6a 5f6e695f     ck..nwk_join_in_
   2b414:	676f7270 73736572 00000000 6f736572     progress....reso
   2b424:	65637275 616e755f 6c696176 656c6261     urce_unavailable
   2b434:	00000000 61766e69 5f64696c 75716572     ....invalid_requ
   2b444:	00747365 75736e75 726f7070 5f646574     est.unsupported_
   2b454:	646e6162 00000000 746e6366 72655f72     band....fcntr_er
   2b464:	00726f72 5f63696d 6f727265 00000072     ror.mic_error...
   2b474:	61766e69 5f64696c 7079746d 00002c65     invalid_mtype,..
   2b484:	7361636d 64685f74 6e695f72 696c6176     mcast_hdr_invali
   2b494:	00000064 745f7874 6f656d69 00007475     d...tx_timeout..
   2b4a4:	69646172 78745f6f 6d69745f 74756f65     radio_tx_timeout
   2b4b4:	00000000 5f78616d 7361636d 72675f74     ....max_mcast_gr
   2b4c4:	5f70756f 63616572 00646568 61766e69     oup_reached.inva
   2b4d4:	5f64696c 6b636170 00007465 6b707872     lid_packet..rxpk
   2b4e4:	6e655f74 70797263 6e6f6974 6961665f     t_encryption_fai
   2b4f4:	0064656c 6b707874 6e655f74 70797263     led.txpkt_encryp
   2b504:	6e6f6974 6961665f 0064656c 79656b73     tion_failed.skey
   2b514:	7265645f 74617669 5f6e6f69 6c696166     _derivation_fail
   2b524:	00006465 5f63696d 636c6163 74616c75     ed..mic_calculat
   2b534:	5f6e6f69 6c696166 00006465 79656b73     ion_failed..skey
   2b544:	6165725f 61665f64 64656c69 00000000     _read_failed....
   2b554:	6e696f6a 6e6f6e5f 655f6563 726f7272     join_nonce_error
   2b564:	00000000 6e550a0d 656c6261 206f7420     ......Unable to 
   2b574:	72617473 65632074 66697472 74616369     start certificat
   2b584:	206e6f69 656d6974 50202e72 6320736c     ion timer. Pls c
   2b594:	6b636568 00000000 6e550a0d 656c6261     heck......Unable
   2b5a4:	206f7420 61657263 43206574 58542057      to create CW TX
   2b5b4:	6d697420 202e7265 20736c50 63656863      timer. Pls chec
   2b5c4:	0000006b 43414d0a 72617020 74656d61     k....MAC paramet
   2b5d4:	20737265 74696e69 696c6169 6974617a     ers initializati
   2b5e4:	66206e6f 656c6961 000d0a64 696f4a0a     on failed....Joi
   2b5f4:	6170206e 656d6172 73726574 696e6920     n parameters ini
   2b604:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   2b614:	0d0a6465 00000000 41544f0a 6f4a2041     ed.......OTAA Jo
   2b624:	70206e69 6d617261 72657465 6e692073     in parameters in
   2b634:	61697469 617a696c 6e6f6974 69616620     itialization fai
   2b644:	0a64656c 0000000d 4141544f 00000000     led.....OTAA....
   2b654:	2073250a 6e696f4a 71655220 74736575     .%s Join Request
   2b664:	6e655320 000d0a74 6c500a0d 65736165      Sent.....Please
   2b674:	6c657320 20746365 20656e6f 7420666f      select one of t
   2b684:	62206568 20646e61 65766967 6562206e     he band given be
   2b694:	0d776f6c 00000000 202e6425 0a0d7325     low.....%d. %s..
   2b6a4:	00000000 656c6553 52207463 6f696765     ....Select Regio
   2b6b4:	206c616e 646e6142 00203a20 2e0d0a0a     nal Band : .....
   2b6c4:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2e2e2e2e     ................
   2b6d4:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2e2e2e2e     ................
   2b6e4:	2e2e2e2e 0a2e2e2e 0000000d 6e490a0d     ..............In
   2b6f4:	2d207469 63755320 73736563 0d6c7566     it - Successful.
   2b704:	00000000 203e3e0a 0d0a7325 00000000     .....>> %s......
   2b714:	2d2d2d0a 2d2d2d2d 2d2d2d2d 2d2d2d2d     .---------------
   2b724:	776f4420 6e696c6e 2d2d206b 2d2d2d2d      Downlink ------
   2b734:	2d2d2d2d 2d2d2d2d 000d0a2d 4620200a     ---------....  F
   2b744:	74726f70 25203a20 00000064 7961500a     port : %d....Pay
   2b754:	64616f6c 00203a20 58323025 00000000     load : .%02X....
   2b764:	00000d0a 6365520a 65766965 43412064     .....Received AC
   2b774:	6f66204b 6f432072 7269666e 2064656d     K for Confirmed 
   2b784:	61746164 0000000d 2d2d2d0a 2d2d2d2d     data.....-------
   2b794:	54202d2d 736e6172 69746361 43206e6f     -- Transaction C
   2b7a4:	6c706d6f 20657465 2d2d2d2d 2d2d2d2d     omplete --------
   2b7b4:	000d0a2d 73614c0a 70752074 6b6e696c     -....Last uplink
   2b7c4:	61686320 6c656e6e 6425203a 6366202c      channel: %d, fc
   2b7d4:	7075746e 3025203a 0d0a5834 00000000     ntup: %04X......
   2b7e4:	3d3d3d0a 3d3d3d3d 3d3d3d3d 3d3d3d3d     .===============
   2b7f4:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   2b804:	3d3d3d3d 3d3d3d3d 000d0a3d 696f4a0a     =========....Joi
   2b814:	7553206e 73656363 6c756673 00000d0a     n Successful....
   2b824:	77654e0a 76654420 41656369 3a726464     .New DeviceAddr:
   2b834:	38302520 000d0a58 6174530a 63207472      %08X....Start c
   2b844:	41747265 69547070 4972656d 000d0a64     ertAppTimerId...
   2b854:	696f4a0a 6544206e 6465696e 00000d0a     .Join Denied....
   2b864:	41544f0a 6f4a2041 52206e69 65757165     .OTAA Join Reque
   2b874:	53207473 0a746e65 0000000d 2d2d2d0a     st Sent......---
   2b884:	2d2d2d2d 2d2d2d2d 696f4a20 6150206e     -------- Join Pa
   2b894:	656d6172 73726574 2d2d2d20 2d2d2d2d     rameters -------
   2b8a4:	2d2d2d2d 000d0a2d 7665440a 20656369     -----....Device 
   2b8b4:	72646441 00202d20 6c257830 0d0a2078     Addr - .0x%lx ..
   2b8c4:	00000000 7070410a 6163696c 6e6f6974     .....Application
   2b8d4:	73655320 6e6f6973 79654b20 00202d20      Session Key - .
   2b8e4:	74654e0a 6b726f77 73655320 6e6f6973     .Network Session
   2b8f4:	79654b20 00202d20 7665440a 20656369      Key - ..Device 
   2b904:	20495545 0000202d 7070410a 6163696c     EUI - ...Applica
   2b914:	6e6f6974 49554520 00202d20 7070410a     tion EUI - ..App
   2b924:	6163696c 6e6f6974 79654b20 00202d20     lication Key - .
   2b934:	2d2d2d0a 2d2d2d2d 2d2d2d2d 2d2d2d2d     .---------------
   2b944:	7055202d 6b6e696c 2d2d2d20 2d2d2d2d     - Uplink -------
   2b954:	2d2d2d2d 2d2d2d2d 000d0a2d 2020200a     ---------....   
   2b964:	52442020 25203a20 00000064 00666e43       DR : %d...Cnf.
   2b974:	6e436e55 00000066 2020200a 65707954     UnCnf....   Type
   2b984:	25203a20 00000073 4346200a 7055746e      : %s.... FCntUp
   2b994:	25203a20 2820646c 58383025 00000029      : %ld (%08X)...
   2b9a4:	65540a0d 4d207473 2065646f 69746341     ..Test Mode Acti
   2b9b4:	65746176 00000d64 00017bda 00017bec     vated....{...{..
   2b9c4:	00017c54 00017c64 00017c74 00017d1c     T|..d|..t|...}..
   2b9d4:	00017cdc 00000020 00544f4e 6977530a     .|.. ...NOT..Swi
   2b9e4:	20686374 63206f74 7373616c 3a632520     tch to class %c:
   2b9f4:	4b4f7325 00000d0a 00051388 0014000a     %sOK............
   2ba04:	0028001e 003c0032 00f00078 000001e0     ..(.2.<.x.......
   2ba14:	41544f0a 6f4a2041 52206e69 65757165     .OTAA Join Reque
   2ba24:	53207473 0a746e65 0000000d 00017dc6     st Sent......}..
   2ba34:	00017de6 00017dea 00017df0 00017e46     .}...}...}..F~..
   2ba44:	00017e62 00017e7e 00017ef2 00017f22     b~..~~...~.."...
   2ba54:	00017fba 00017fe6 000181a6 000181a6     ................
   2ba64:	000181a6 000181a6 000181a6 000181a6     ................
   2ba74:	000181a6 000181a6 000181a6 000181a6     ................
   2ba84:	000181a6 000181a6 000181a6 000181a6     ................
   2ba94:	000181a6 000181a6 000181a6 000181a6     ................
   2baa4:	000181a6 000181a6 000181a6 00017fee     ................
   2bab4:	00017ff8 00018128 000181a6 000181a6     ....(...........
   2bac4:	000181a6 000181a6 000181a6 000181a6     ................
   2bad4:	000181a6 000181a6 000181a6 000181a6     ................
   2bae4:	000181a6 000181a6 000181a6 000181a6     ................
   2baf4:	000181a6 000181a6 000181a6 000181a6     ................
   2bb04:	000181a6 000181a6 000181a6 000181a6     ................
   2bb14:	000181a6 000181a6 000181a6 000181a6     ................
   2bb24:	000181a6 000181a6 000181a6 000181a6     ................
   2bb34:	000181a6 000181a6 000181a6 000181a6     ................
   2bb44:	000181a6 000181a6 000181a6 000181a6     ................
   2bb54:	000181a6 000181a6 000181a6 000181a6     ................
   2bb64:	000181a6 000181a6 000181a6 000181a6     ................
   2bb74:	000181a6 000181a6 000181a6 000181a6     ................
   2bb84:	000181a6 000181a6 000181a6 000181a6     ................
   2bb94:	000181a6 000181a6 000181a6 000181a6     ................
   2bba4:	000181a6 000181a6 000181a6 000181a6     ................
   2bbb4:	000181a6 000181a6 000181a6 000181a6     ................
   2bbc4:	000181a6 000181a6 000181a6 000181a6     ................
   2bbd4:	000181a6 000181a6 000181a6 000181a6     ................
   2bbe4:	000181a6 000181a6 000181a6 000181a6     ................
   2bbf4:	000181a6 000181a6 000181a6 000181a6     ................
   2bc04:	000181a6 000181a6 000181a6 000181a6     ................
   2bc14:	000181a6 000181a6 000181a6 000181a6     ................
   2bc24:	00018002 000180b8 000180de 000181e8     ................
   2bc34:	000181e8 000181e8 000181fa 000181fa     ................
   2bc44:	000181fa 000181fa 000181d8 000181d8     ................
   2bc54:	000181e8 000181e8 0001821e 0001821e     ................
   2bc64:	0001821e 0001821e 0001821e 0001821e     ................
   2bc74:	0001821e 0001821e 0001821e 0001821e     ................
   2bc84:	0001821e 0001821e 0001821e 0001821e     ................
   2bc94:	0001821e 0001821e 0001821e 0001821e     ................
   2bca4:	0001821e 0001821e 0001821e 000181e8     ................
   2bcb4:	000181e8 000181fa 0001821e 0001821e     ................
   2bcc4:	0001821e 0001821e 0001821e 0001821e     ................
   2bcd4:	0001821e 0001821e 0001821e 0001821e     ................
   2bce4:	0001821e 0001821e 0001821e 0001821e     ................
   2bcf4:	0001821e 0001821e 0001821e 0001821e     ................
   2bd04:	0001821e 0001821e 0001821e 0001821e     ................
   2bd14:	0001821e 0001821e 0001821e 0001821e     ................
   2bd24:	0001821e 0001821e 0001821e 0001821e     ................
   2bd34:	0001821e 0001821e 0001821e 0001821e     ................
   2bd44:	0001821e 0001821e 0001821e 0001821e     ................
   2bd54:	0001821e 0001821e 0001821e 0001821e     ................
   2bd64:	0001821e 0001821e 0001821e 0001821e     ................
   2bd74:	0001821e 0001821e 0001821e 0001821e     ................
   2bd84:	0001821e 0001821e 0001821e 0001821e     ................
   2bd94:	0001821e 0001821e 0001821e 0001821e     ................
   2bda4:	0001821e 0001821e 0001821e 0001821e     ................
   2bdb4:	0001821e 0001821e 0001821e 0001821e     ................
   2bdc4:	0001821e 0001821e 0001821e 0001821e     ................
   2bdd4:	0001821e 0001821e 0001821e 0001821e     ................
   2bde4:	0001821e 0001821e 0001821e 0001821e     ................
   2bdf4:	0001821e 0001821e 0001821e 0001821e     ................
   2be04:	0001821e 0001821e 0001821e 0001821e     ................
   2be14:	0001821e 0001821e 0001821e 0001821e     ................
   2be24:	0001820c 000181e8 000181e8 74636146     ............Fact
   2be34:	4479726f 75616665 6552746c 00746573     oryDefaultReset.
   2be44:	36385545 00000038 3139414e 00000035     EU868...NA915...
   2be54:	31395541 00000035 32395341 00000033     AU915...AS923...
   2be64:	394e504a 00003332 3239524b 00000030     JPN923..KR920...
   2be74:	38444e49 00003536 61656c43 44502072     IND865..Clear PD
   2be84:	00000053 65736552 6f422074 00647261     S...Reset Board.
   2be94:	6f727245 54532072 20455441 65746e45     Error STATE Ente
   2bea4:	0d646572 00000000 0000000d 61656c50     red.........Plea
   2beb4:	65206573 7265746e 76206120 64696c61     se enter a valid
   2bec4:	6f686320 0d656369 00000000 44500a0d      choice.......PD
   2bed4:	65525f53 726f7473 6f697461 6174536e     S_RestorationSta
   2bee4:	3a737574 63755320 73736563 0000000d     tus: Success....
   2bef4:	6e696f6a 74617453 203a7375 6e696f4a     joinStatus: Join
   2bf04:	000d6465 6e696f4a 74617453 3a207375     ed..JoinStatus :
   2bf14:	6e654420 0d646569 00000000 646e6142      Denied.....Band
   2bf24:	7325203a 00000a0d 74736552 7461726f     : %s....Restorat
   2bf34:	206e6f69 6c696166 000d6465 696f4a0a     ion failed...Joi
   2bf44:	6552206e 73657571 65532074 0d0a746e     n Request Sent..
   2bf54:	00000000 69766544 6e206563 6a20746f     ....Device not j
   2bf64:	656e696f 6f742064 65687420 74656e20     oined to the net
   2bf74:	6b726f77 0000000d 6c730a0d 5f706565     work......sleep_
   2bf84:	5f746f6e 000d6b6f 61766e49 2064696c     not_ok..Invalid 
   2bf94:	696f6863 65206563 7265746e 000d6465     choice entered..
   2bfa4:	20746f4e 61762061 2064696c 69676572     Not a valid regi
   2bfb4:	6c616e6f 6e616220 68632064 6563696f     onal band choice
   2bfc4:	0000000d 44202e31 206f6d65 6c707061     ....1. Demo appl
   2bfd4:	74616369 0d6e6f69 00000000 43202e32     ication.....2. C
   2bfe4:	69747265 61636966 6e6f6974 70706120     ertification app
   2bff4:	6163696c 6e6f6974 0000000d 53200a0d     lication...... S
   2c004:	63656c65 70412074 63696c70 6f697461     elect Applicatio
   2c014:	203a206e 00000000 2e310a0d 6e655320     n : ......1. Sen
   2c024:	6f4a2064 52206e69 65757165 000d7473     d Join Request..
   2c034:	53202e32 20646e65 61746144 0000000d     2. Send Data....
   2c044:	53202e33 7065656c 0000000d 4d202e34     3. Sleep....4. M
   2c054:	206e6961 756e654d 0000000d 6e450a0d     ain Menu......En
   2c064:	20726574 72756f79 6f686320 3a656369     ter your choice:
   2c074:	00000020 6c500a0d 65736165 6c657320      .....Please sel
   2c084:	20746365 20656e6f 7420666f 62206568     ect one of the b
   2c094:	20646e61 65766967 6562206e 0d776f6c     and given below.
   2c0a4:	00000000 202e6425 0a0d7325 00000000     ....%d. %s......
   2c0b4:	656c6553 52207463 6f696765 206c616e     Select Regional 
   2c0c4:	646e6142 00203a20 2a0d0a0a 2a2a2a2a     Band : ....*****
   2c0d4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c0e4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c0f4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c104:	0d0a2a2a 00000000 5f534c4d 5f4b4453     **......MLS_SDK_
   2c114:	5f305f31 00355f50 694d0d0a 636f7263     1_0_P_5...Microc
   2c124:	20706968 61526f4c 204e4157 63617453     hip LoRaWAN Stac
   2c134:	7325206b 00000a0d 6e490a0d 2d207469     k %s......Init -
   2c144:	63755320 73736563 0d6c7566 00000000      Successful.....
   2c154:	7473614c 6e6f6320 75676966 20646572     Last configured 
   2c164:	69676552 6c616e6f 6e616220 73252064     Regional band %s
   2c174:	00000a0d 73657250 6e612073 656b2079     ....Press any ke
   2c184:	6f742079 61686320 2065676e 646e6162     y to change band
   2c194:	43200a0d 69746e6f 6e69756e 6e692067     .. Continuing in
   2c1a4:	20732520 00206e69 202a2a2a 65636552      %s in .*** Rece
   2c1b4:	64657669 204c4420 61746144 2a2a2a20     ived DL Data ***
   2c1c4:	00000d0a 6172460a 5220656d 69656365     .....Frame Recei
   2c1d4:	20646576 70207461 2074726f 0d0a6425     ved at port %d..
   2c1e4:	00000000 6172460a 4c20656d 74676e65     .....Frame Lengt
   2c1f4:	202d2068 0d0a6425 00000000 6464410a     h - %d.......Add
   2c204:	73736572 30202d20 786c2578 00000d0a     ress - 0x%lx....
   2c214:	7961500a 64616f6c 0000203a 00007825     .Payload: ..%x..
   2c224:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   2c234:	2a2a2a2a 2a2a2a2a 0d2a2a2a 00000000     ***********.....
   2c244:	65636552 64657669 4b434120 726f6620     Received ACK for
   2c254:	6e6f4320 6d726966 64206465 0d617461      Confirmed data.
   2c264:	00000000 41520d0a 5f4f4944 445f4f4e     ......RADIO_NO_D
   2c274:	20415441 00000d0a 41520d0a 5f4f4944     ATA ......RADIO_
   2c284:	41544144 5a49535f 0d0a2045 00000000     DATA_SIZE ......
   2c294:	41520d0a 5f4f4944 41564e49 5f44494c     ..RADIO_INVALID_
   2c2a4:	20514552 00000d0a 41520d0a 5f4f4944     REQ ......RADIO_
   2c2b4:	59535542 000d0a20 41520d0a 5f4f4944     BUSY .....RADIO_
   2c2c4:	5f54554f 525f464f 45474e41 000d0a20     OUT_OF_RANGE ...
   2c2d4:	41520d0a 5f4f4944 55534e55 524f5050     ..RADIO_UNSUPPOR
   2c2e4:	5f444554 52545441 000d0a20 41520d0a     TED_ATTR .....RA
   2c2f4:	5f4f4944 4e414843 5f4c454e 59535542     DIO_CHANNEL_BUSY
   2c304:	000d0a20 574e0d0a 4f4e5f4b 4f4a5f54      .....NWK_NOT_JO
   2c314:	44454e49 000d0a20 4e490d0a 494c4156     INED .....INVALI
   2c324:	41505f44 454d4152 20524554 00000d0a     D_PARAMETER ....
   2c334:	454b0d0a 4e5f5359 495f544f 4954494e     ..KEYS_NOT_INITI
   2c344:	5a494c41 0a204445 0000000d 49530d0a     ALIZED .......SI
   2c354:	544e454c 4d4d495f 41494445 594c4554     LENT_IMMEDIATELY
   2c364:	5443415f 0a455649 0000000d 43460d0a     _ACTIVE.......FC
   2c374:	5f52544e 4f525245 45525f52 4e494f4a     NTR_ERROR_REJOIN
   2c384:	45454e5f 20444544 00000d0a 4e490d0a     _NEEDED ......IN
   2c394:	494c4156 55425f44 52454646 4e454c5f     VALID_BUFFER_LEN
   2c3a4:	20485447 00000d0a 414d0d0a 41505f43     GTH ......MAC_PA
   2c3b4:	44455355 0d0a2020 00000000 4f4e0d0a     USED  ........NO
   2c3c4:	4148435f 4c454e4e 4f465f53 20444e55     _CHANNELS_FOUND 
   2c3d4:	00000d0a 55420d0a 0d0a5953 00000000     ......BUSY......
   2c3e4:	4f4e0d0a 4b43415f 000d0a20 4c410d0a     ..NO_ACK .....AL
   2c3f4:	44414552 4f4a2059 4e494e49 53492047     READY JOINING IS
   2c404:	204e4920 474f5250 53534552 000d0a20      IN PROGRESS ...
   2c414:	45520d0a 52554f53 555f4543 4156414e     ..RESOURCE_UNAVA
   2c424:	42414c49 0a20454c 0000000d 4e490d0a     ILABLE .......IN
   2c434:	494c4156 45525f44 53455551 0d0a2054     VALID_REQUEST ..
   2c444:	00000000 43460d0a 5f52544e 4f525245     ......FCNTR_ERRO
   2c454:	0d0a2052 00000000 494d0d0a 52455f43     R ........MIC_ER
   2c464:	20524f52 00000d0a 4e490d0a 494c4156     ROR ......INVALI
   2c474:	544d5f44 20455059 00000d0a 434d0d0a     D_MTYPE ......MC
   2c484:	5f545341 5f524448 41564e49 2044494c     AST_HDR_INVALID 
   2c494:	00000d0a 4e490d0a 494c4156 41505f44     ......INVALID_PA
   2c4a4:	54454b43 000d0a20 4e4b4e55 204e574f     CKET ...UNKNOWN 
   2c4b4:	4f525245 000d0a52 6e617254 73696d73     ERROR...Transmis
   2c4c4:	6e6f6973 63755320 73736563 0000000d     sion Success....
   2c4d4:	2078540a 656d6954 0a74756f 0000000d     .Tx Timeout.....
   2c4e4:	4e550d0a 574f4e4b 5245204e 0a524f52     ..UNKNOWN ERROR.
   2c4f4:	0000000d 696f4a0a 676e696e 63755320     .....Joining Suc
   2c504:	73736563 0a6c7566 0000000d 7665440a     cessful......Dev
   2c514:	72646441 7830203a 0a786c25 0000000d     Addr: 0x%lx.....
   2c524:	6464410a 73736572 6e6f6320 63696c66     .Address conflic
   2c534:	65622074 65657774 6544206e 65636976     t between Device
   2c544:	64644120 73736572 646e6120 6c754d20      Address and Mul
   2c554:	61636974 67207473 70756f72 64646120     ticast group add
   2c564:	73736572 00000d0a 6f4e200a 65724620     ress..... No Fre
   2c574:	68432065 656e6e61 6f66206c 00646e75     e Channel found.
   2c584:	494d200a 72452043 00726f72 7254200a     . MIC Error.. Tr
   2c594:	6d736e61 69737369 54206e6f 6f656d69     ansmission Timeo
   2c5a4:	00007475 696f4a0a 676e696e 6e654420     ut...Joining Den
   2c5b4:	0a646569 0000000d 63256325 63256325     ied.....%c%c%c%c
   2c5c4:	63256325 0000000a 2078540a 61746144     %c%c.....Tx Data
   2c5d4:	6e655320 000d2074 6c730a0d 5f706565      Sent ....sleep_
   2c5e4:	25206b6f 6d20646c 000a0d73 2e2e6425     ok %ld ms...%d..
   2c5f4:	00000000 2a2a2a0a 2a2a2a2a 2a2a2a2a     .....***********
   2c604:	2a2a2a2a 2a2a2a2a 696f4a2a 6150206e     *********Join Pa
   2c614:	656d6172 73726574 2a2a2a2a 2a2a2a2a     rameters********
   2c624:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   2c634:	7070410a 73736553 4b6e6f69 3a207965     .AppSessionKey :
   2c644:	00000020 6b774e0a 73736553 4b6e6f69      ....NwkSessionK
   2c654:	3a207965 00000020 7665440a 20495545     ey : ....DevEUI 
   2c664:	0000203a 696f4a0a 4955456e 00203a20     : ...JoinEUI : .
   2c674:	7070410a 2079654b 0000203a 2a2a2a0a     .AppKey : ...***
   2c684:	2a2a2a2a 2a2a2a2a 2a2a2a2a 746c754d     ************Mult
   2c694:	73616369 61502074 656d6172 73726574     icast Parameters
   2c6a4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c6b4:	2a2a2a2a 00000d0a 61634d0a 70417473     ****.....McastAp
   2c6c4:	73655370 6e6f6973 2079654b 0000203a     pSessionKey : ..
   2c6d4:	61634d0a 774e7473 7365536b 6e6f6973     .McastNwkSession
   2c6e4:	2079654b 0000203a 61634d0a 72477473     Key : ...McastGr
   2c6f4:	4170756f 20726464 7830203a 0a786c25     oupAddr : 0x%lx.
   2c704:	0000000d 61634d0a 72477473 4170756f     .....McastGroupA
   2c714:	53726464 75746174 203a2073 6c696146     ddrStatus : Fail
   2c724:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   2c734:	74537473 73757461 45203a20 6c62616e     stStatus : Enabl
   2c744:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   2c754:	74537473 73757461 46203a20 656c6961     stStatus : Faile
   2c764:	000d0a64 2a2a2a0a 2a2a2a2a 2a2a2a2a     d....***********
   2c774:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c784:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c794:	2a2a2a2a 2a2a2a2a 2a2a2a2a 000d0a2a     *************...
   2c7a4:	696f4a0a 6170206e 656d6172 73726574     .Join parameters
   2c7b4:	696e6920 6c616974 74617a69 206e6f69      initialization 
   2c7c4:	6c696166 0d0a6465 00000000 736e550a     failed.......Uns
   2c7d4:	6f707075 64657472 76654420 20656369     upported Device 
   2c7e4:	65707954 00000d0a 696f4a0a 6552206e     Type.....Join Re
   2c7f4:	73657571 65532074 6620746e 2520726f     quest Sent for %
   2c804:	000d0a73 00007830 78323025 00000000     s...0x..%02x....
   2c814:	00000d0a 2a2a2a0a 2a2a2a2a 2a2a2a2a     .....***********
   2c824:	2a2a2a2a 6c707041 74616369 206e6f69     ****Application 
   2c834:	666e6f43 72756769 6f697461 2a2a2a6e     Configuration***
   2c844:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   2c854:	7665440a 65707954 00203a20 53414c43     .DevType : .CLAS
   2c864:	0a412053 0000000d 53414c43 0a432053     S A.....CLASS C.
   2c874:	0000000d 7463410a 74617669 546e6f69     .....ActivationT
   2c884:	20657079 0000203a 4141544f 00000d0a     ype : ..OTAA....
   2c894:	6172540a 696d736e 6f697373 7954206e     .Transmission Ty
   2c8a4:	2d206570 00000020 4f434e55 5249464e     pe - ...UNCONFIR
   2c8b4:	0a44454d 0000000d 6f50460a 2d207472     MED......FPort -
   2c8c4:	0a642520 0000000d 2a2a2a0a 2a2a2a2a      %d......*******
   2c8d4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c8e4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c8f4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2c904:	00000d0a 726f6c0a 6e617761 6375735f     .....lorawan_suc
   2c914:	73736563 00000d0a 726f6c0a 6e617761     cess.....lorawan
   2c924:	6174735f 3a206574 61747320 425f6b63     _state : stack_B
   2c934:	0a797375 0000000d 7665640a 5f656369     usy......device_
   2c944:	5f746f6e 6e696f6a 745f6465 656e5f6f     not_joined_to_ne
   2c954:	726f7774 000d0a6b 766e690a 64696c61     twork....invalid
   2c964:	7261705f 74656d61 0d0a7265 00000000     _parameter......
   2c974:	79656b0a 6f6e5f73 6e695f74 61697469     .keys_not_initia
   2c984:	657a696c 000d0a64 6c69730a 5f746e65     lized....silent_
   2c994:	656d6d69 74616964 5f796c65 69746361     immediately_acti
   2c9a4:	0d0a6576 00000000 6172660a 6f63656d     ve.......frameco
   2c9b4:	65746e75 72655f72 5f726f72 6f6a6572     unter_error_rejo
   2c9c4:	6e5f6e69 65646565 000d0a64 766e690a     in_needed....inv
   2c9d4:	64696c61 6675625f 5f726566 676e656c     alid_buffer_leng
   2c9e4:	0d0a6874 00000000 43414d0a 7561705f     th.......MAC_pau
   2c9f4:	0a646573 0000000d 5f6f6e0a 65657266     sed......no_free
   2ca04:	6168635f 6c656e6e 6f665f73 0a646e75     _channels_found.
   2ca14:	0000000d 7165720a 74736575 766e695f     .....request_inv
   2ca24:	64696c61 00000d0a 6572700a 6f6a5f76     alid.....prev_jo
   2ca34:	725f6e69 65757165 695f7473 72705f6e     in_request_in_pr
   2ca44:	6572676f 0d0a7373 00000000 7165720a     ogress.......req
   2ca54:	74736575 6961665f 2064656c 0d0a6425     uest_failed %d..
   2ca64:	00000000 00018fb0 00018eb6 00018ec0     ................
   2ca74:	00018eca 00018ed4 00018ede 00018ee8     ................
   2ca84:	00018ef2 00018ea8 00018efc 00018f06     ................
   2ca94:	00018f10 00018f1a 00018f24 00018f2e     ........$.......
   2caa4:	00018f38 00018f42 00018f4c 00018f56     8...B...L...V...
   2cab4:	00018f60 00018f6a 00018f74 00018fb0     `...j...t.......
   2cac4:	00018f7e 00018f88 00018f92 00018f9c     ~...............
   2cad4:	00018fb0 00018fb0 00018fb0 00018fa6     ................
   2cae4:	00018ff0 00018ffa 00019004 0001900e     ................
   2caf4:	00019018 0001902c 00019036 00019040     ....,...6...@...
   2cb04:	00018fe6 0001904a 00019054 0001905e     ....J...T...^...
   2cb14:	00019068 00019072 0001907c 00019086     h...r...|.......
   2cb24:	00019090 0001909a 000190a4 000190ae     ................
   2cb34:	000190b8 000190c2 000190fe 000190cc     ................
   2cb44:	000190d6 000190e0 000190ea 00019022     ............"...
   2cb54:	000190fe 000190fe 000190f4 00019ebc     ................
   2cb64:	00019ed0 00019eda 00019ee4 00019eee     ................
   2cb74:	00019ef8 00019f02 00019f0c 00019f16     ................
   2cb84:	00019ec6 00019f34 00019f2a 00019f34     ....4...*...4...
   2cb94:	00019f20 7473614c 73657220 63207465      ...Last reset c
   2cba4:	65737561 0000203a 74737953 52206d65     ause: ..System R
   2cbb4:	74657365 71655220 74736575 0000000d     eset Request....
   2cbc4:	63746157 676f6468 73655220 000d7465     Watchdog Reset..
   2cbd4:	65747845 6c616e72 73655220 000d7465     External Reset..
   2cbe4:	776f7242 754f206e 33332074 74654420     Brown Out 33 Det
   2cbf4:	6f746365 65522072 0d746573 00000000     ector Reset.....
   2cc04:	776f7242 754f206e 32312074 74654420     Brown Out 12 Det
   2cc14:	6f746365 65522072 0d746573 00000000     ector Reset.....
   2cc24:	65776f50 6e4f2d72 73655220 000d7465     Power-On Reset..
   2cc34:	6c730a0d 5f706565 25206b6f 6d20646c     ..sleep_ok %ld m
   2cc44:	000a0d73 74696e49 696c6169 6974617a     s...Initializati
   2cc54:	6f206e6f 65532066 69727563 6d207974     on of Security m
   2cc64:	6c75646f 73692065 69616620 0d64656c     odule is failed.
   2cc74:	00000000                                ....

0002cc78 <CSWTCH.152>:
   2cc78:	00000000 40fe8480 00000000 410e8480     .......@.......A
   2cc88:	00000000 411e8480                       .......A

0002cc90 <FskSyncWordBuff>:
   2cc90:	02c194c1                                         ...

0002cc93 <macEndDevCmdInputLen>:
   2cc93:	04010402 01010500 05000004              ............

0002cc9f <macEndDevCmdReplyLen>:
   2cc9f:	02010201 01010203 01000002 02020000     ................
   2ccaf:	0a080200                                         ..

0002ccb1 <maxEIRPTable>:
   2ccb1:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   2ccc1:	cf000000                                         ...

0002ccc4 <pds_mac_fid1_item_list>:
   2ccc4:	20001ccf 00010000 20001ccd 06010100     ... ....... ....
   2ccd4:	20001c60 0c040200 20001cd0 15010300     `.. ....... ....
   2cce4:	20001cd4 1b040400 20001d24 24040500     ... ....$.. ...$
   2ccf4:	20001d00 2d040600 20001d14 36100700     ... ...-... ...6
   2cd04:	20001d04 4b100800 20001cee 60040900     ... ...K... ...`
   2cd14:	20001cb9 69010b00 20001c68 6f010a00     ... ...ih.. ...o
   2cd24:	20001ca0 75020c00 20001ca2 7c020d00     ... ...u... ...|
   2cd34:	20001ca4 83020e00 20001ca6 8a020f00     ... ....... ....
   2cd44:	20001caa 91021000 20001cac 98011100     ... ....... ....
   2cd54:	20001cad 9e011200 20001cb2 aa011400     ... ....... ....
   2cd64:	20001cb1 a4011300 20001c58 b0041500     ... ....X.. ....
   2cd74:	20001c9c b9021600                       ... ....

0002cd7c <pds_mac_fid2_item_list>:
   2cd7c:	20001c3a 00050001 20001cc7 0a010101     :.. ....... ....
   2cd8c:	20001bd0 10010201 20001bd1 16040301     ... ....... ....
   2cd9c:	20001bd5 1f100401 20001be5 34100501     ... ....... ...4
   2cdac:	20001c15 49100601 20001c25 5e080701     ... ...I%.. ...^
   2cdbc:	20001c2d 6b080801 20001cae 78020901     -.. ...k... ...x
   2cdcc:	20001c5c 7f040a01 20001c54 88040b01     \.. ....T.. ....
   2cddc:	20001cb7 91010c01 20001dfc 97010d01     ... ....... ....
   2cdec:	20001dfd 9d010e01 20001e14 a3040f01     ... ....... ....

0002cdfc <lorawanHandlers>:
   2cdfc:	0001f365 0001f279 0001f429 000000fd     e...y...).......

0002ce0c <radioTaskHandlers>:
   2ce0c:	00020b0d 00020c0d 00020951 00020125     ........Q...%...
   2ce1c:	00020f35 00021bb4 00021b84 00021b96     5...............
   2ce2c:	00021ad8 00021b96 00021b7a 00021b96     ........z.......
   2ce3c:	00021ad8 00021b84 00021b84 00021b7a     ............z...
   2ce4c:	00021ad8 00021ae0 00021ae0 00021ae0     ................
   2ce5c:	00021b9c 00021b84 00021b84 00021b58     ............X...
   2ce6c:	00021c3c 00021b58 00021b7a 00021b58     <...X...z...X...
   2ce7c:	00021c3c 00021b84 00021b84 00021b7a     <...........z...
   2ce8c:	00021c3c 00021ae0 00021ae0 00021ae0     <...............
   2ce9c:	00021c46 00021f34 00021e84 00021e84     F...4...........
   2ceac:	00021e82 00021f26 00021f26 00021f1c     ....&...&.......
   2cebc:	00021e82 00021f26 00021f1c 00021f26     ....&.......&...
   2cecc:	00021e82 00021f2c 00021f2c 00021f2c     ....,...,...,...
   2cedc:	00021fbc 00022d04 00022ce6 00022ca0     .....-...,...,..
   2ceec:	00022bbe 00022ca0 00022cd8 00022ca0     .+...,...,...,..
   2cefc:	00022bbe 00022ce6 00022ce6 00022cd8     .+...,...,...,..
   2cf0c:	00022bbe 00022bb6 00022bb6 00022bb6     .+...+...+...+..
   2cf1c:	00022f1c 00023564 00023424 00023424     ./..d5..$4..$4..
   2cf2c:	00023420 0002353c 0002353c 0002352e      4..<5..<5...5..
   2cf3c:	00023420 0002353c 0002352e 0002353c      4..<5...5..<5..
   2cf4c:	00023420 00023544 00023544 00023544      4..D5..D5..D5..
   2cf5c:	00023748                                H7..

0002cf60 <_global_impure_ptr>:
   2cf60:	200001f0 0000000a 00024dd4 00024e48     ... .....M..HN..
   2cf70:	00024e48 00024db8 00024e48 00024e48     HN...M..HN..HN..
   2cf80:	00024e48 00024e48 00024e48 00024e48     HN..HN..HN..HN..
   2cf90:	00024dc0 000248a2 00024e48 0002485c     .M...H..HN..\H..
   2cfa0:	000248ac 00024e48 000248f8 00024ae2     .H..HN...H...J..
   2cfb0:	00024ae2 00024ae2 00024ae2 00024ae2     .J...J...J...J..
   2cfc0:	00024ae2 00024ae2 00024ae2 00024ae2     .J...J...J...J..
   2cfd0:	00024e48 00024e48 00024e48 00024e48     HN..HN..HN..HN..
   2cfe0:	00024e48 00024e48 00024e48 00024e48     HN..HN..HN..HN..
   2cff0:	00024e48 00024e48 00024900 00024a48     HN..HN...I..HJ..
   2d000:	00024e48 00024a48 00024e48 00024e48     HN..HJ..HN..HN..
   2d010:	00024e48 00024e48 00024b12 00024e48     HN..HN...K..HN..
   2d020:	00024e48 00024b1a 00024e48 00024e48     HN...K..HN..HN..
   2d030:	00024e48 00024e48 00024e48 00024bbc     HN..HN..HN...K..
   2d040:	00024e48 00024e48 00024bee 00024e48     HN..HN...K..HN..
   2d050:	00024e48 00024e48 00024e48 00024e48     HN..HN..HN..HN..
   2d060:	00024e48 00024e48 00024e48 00024e48     HN..HN..HN..HN..
   2d070:	00024e48 00024ce8 00024d1c 00024a48     HN...L...M..HJ..
   2d080:	00024a48 00024a48 00024d2e 00024d1c     HJ..HJ...M...M..
   2d090:	00024e48 00024e48 00024d36 00024e48     HN..HN..6M..HN..
   2d0a0:	00024c50 00024e16 00024d8c 00024c86     PL...N...M...L..
   2d0b0:	00024e48 00024c8e 00024e48 00024de4     HN...L..HN...M..
   2d0c0:	00024e48 00024e48 00024d46 00464e49     HN..HN..FM..INF.
   2d0d0:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   2d0e0:	37363534 42413938 46454443 00000000     456789ABCDEF....
   2d0f0:	33323130 37363534 62613938 66656463     0123456789abcdef
   2d100:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

0002d110 <blanks.7223>:
   2d110:	20202020 20202020 20202020 20202020                     

0002d120 <zeroes.7224>:
   2d120:	30303030 30303030 30303030 30303030     0000000000000000
   2d130:	0002639e 00026472 00026472 0002638a     .c..rd..rd...c..
   2d140:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d150:	00026472 00026472 00026444 00025f56     rd..rd..Dd..V_..
   2d160:	00026472 00025f4c 00025f60 00026472     rd..L_..`_..rd..
   2d170:	00026394 00026120 00026120 00026120     .c.. a.. a.. a..
   2d180:	00026120 00026120 00026120 00026120      a.. a.. a.. a..
   2d190:	00026120 00026120 00026472 00026472      a.. a..rd..rd..
   2d1a0:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d1b0:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d1c0:	0002645a 000263ae 00026472 000263ae     Zd...c..rd...c..
   2d1d0:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d1e0:	00026314 00026472 00026472 0002631e     .c..rd..rd...c..
   2d1f0:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d200:	00026472 0002634c 00026472 00026472     rd..Lc..rd..rd..
   2d210:	0002637a 00026472 00026472 00026472     zc..rd..rd..rd..
   2d220:	00026472 00026472 00026472 00026472     rd..rd..rd..rd..
   2d230:	00026472 00026472 00026472 00026160     rd..rd..rd..`a..
   2d240:	00026196 000263ae 000263ae 000263ae     .a...c...c...c..
   2d250:	0002623e 00026196 00026472 00026472     >b...a..rd..rd..
   2d260:	00026248 00026472 0002625a 0002646e     Hb..rd..Zb..nd..
   2d270:	00026288 000262b2 00026472 000262bc     .b...b..rd...b..
   2d280:	00026472 0002646a 00026472 00026472     rd..jd..rd..rd..
   2d290:	00025fae                                ._..

0002d294 <blanks.7238>:
   2d294:	20202020 20202020 20202020 20202020                     

0002d2a4 <zeroes.7239>:
   2d2a4:	30303030 30303030 30303030 30303030     0000000000000000
   2d2b4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   2d2c4:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   2d2d4:	00000000                                ....

0002d2d8 <__mprec_bigtens>:
   2d2d8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2d2e8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2d2f8:	7f73bf3c 75154fdd                       <.s..O.u

0002d300 <__mprec_tens>:
   2d300:	00000000 3ff00000 00000000 40240000     .......?......$@
   2d310:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2d320:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2d330:	00000000 412e8480 00000000 416312d0     .......A......cA
   2d340:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2d350:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2d360:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2d370:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2d380:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2d390:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2d3a0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2d3b0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2d3c0:	79d99db4 44ea7843                       ...yCx.D

0002d3c8 <p05.6055>:
   2d3c8:	00000005 00000019 0000007d              ........}...

0002d3d4 <_ctype_>:
   2d3d4:	20202000 20202020 28282020 20282828     .         ((((( 
   2d3e4:	20202020 20202020 20202020 20202020                     
   2d3f4:	10108820 10101010 10101010 10101010      ...............
   2d404:	04040410 04040404 10040404 10101010     ................
   2d414:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2d424:	01010101 01010101 01010101 10101010     ................
   2d434:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2d444:	02020202 02020202 02020202 10101010     ................
   2d454:	00000020 00000000 00000000 00000000      ...............
	...

0002d4d8 <_init>:
   2d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4da:	46c0      	nop			; (mov r8, r8)
   2d4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2d4de:	bc08      	pop	{r3}
   2d4e0:	469e      	mov	lr, r3
   2d4e2:	4770      	bx	lr

0002d4e4 <__init_array_start>:
   2d4e4:	000275b5 	.word	0x000275b5

0002d4e8 <__frame_dummy_init_array_entry>:
   2d4e8:	000000dd                                ....

0002d4ec <_fini>:
   2d4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4ee:	46c0      	nop			; (mov r8, r8)
   2d4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2d4f2:	bc08      	pop	{r3}
   2d4f4:	469e      	mov	lr, r3
   2d4f6:	4770      	bx	lr

0002d4f8 <__fini_array_start>:
   2d4f8:	000000b5 	.word	0x000000b5
